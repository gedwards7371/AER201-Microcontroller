

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 13:25:07 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  0045E4                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3222
   150  0045E4  4D                 	db	77
   151  0045E5  4D                 	db	77
   152  0045E6  4D                 	db	77
   153  0045E7  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3213
   156  0045E8  4D                 	db	77
   157  0045E9  4D                 	db	77
   158  0045EA  4D                 	db	77
   159  0045EB  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB26                     __pmediumconst:
   163                           	opt stack 0
   164  00FB26  00                 	db	0
   165  00FB27                     _keys:
   166                           	opt stack 0
   167  00FB27  31                 	db	49
   168  00FB28  32                 	db	50
   169  00FB29  33                 	db	51
   170  00FB2A  41                 	db	65
   171  00FB2B  34                 	db	52
   172  00FB2C  35                 	db	53
   173  00FB2D  36                 	db	54
   174  00FB2E  42                 	db	66
   175  00FB2F  37                 	db	55
   176  00FB30  38                 	db	56
   177  00FB31  39                 	db	57
   178  00FB32  43                 	db	67
   179  00FB33  2A                 	db	42
   180  00FB34  30                 	db	48
   181  00FB35  23                 	db	35
   182  00FB36  44                 	db	68
   183  00FB37  00                 	db	0
   184  00FB38                     __end_of_keys:
   185                           	opt stack 0
   186  00FB38                     _dpowers:
   187                           	opt stack 0
   188  00FB38  0001               	dw	1
   189  00FB3A  000A               	dw	10
   190  00FB3C  0064               	dw	100
   191  00FB3E  03E8               	dw	1000
   192  00FB40  2710               	dw	10000
   193  00FB42                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB42                     STR_21:
   267  00FB42  25                 	db	37
   268  00FB43  30                 	db	48	;'0'
   269  00FB44  32                 	db	50	;'2'
   270  00FB45  64                 	db	100	;'d'
   271  00FB46  25                 	db	37
   272  00FB47  73                 	db	115	;'s'
   273  00FB48  20                 	db	32
   274  00FB49  7C                 	db	124
   275  00FB4A  20                 	db	32
   276  00FB4B  25                 	db	37
   277  00FB4C  30                 	db	48	;'0'
   278  00FB4D  32                 	db	50	;'2'
   279  00FB4E  64                 	db	100	;'d'
   280  00FB4F  3A                 	db	58	;':'
   281  00FB50  25                 	db	37
   282  00FB51  30                 	db	48	;'0'
   283  00FB52  32                 	db	50	;'2'
   284  00FB53  64                 	db	100	;'d'
   285  00FB54  3A                 	db	58	;':'
   286  00FB55  25                 	db	37
   287  00FB56  30                 	db	48	;'0'
   288  00FB57  32                 	db	50	;'2'
   289  00FB58  64                 	db	100	;'d'
   290  00FB59  00                 	db	0
   291  00FB5A                     STR_66:
   292  00FB5A  28                 	db	40
   293  00FB5B  64                 	db	100	;'d'
   294  00FB5C  61                 	db	97	;'a'
   295  00FB5D  74                 	db	116	;'t'
   296  00FB5E  61                 	db	97	;'a'
   297  00FB5F  3A                 	db	58	;':'
   298  00FB60  20                 	db	32
   299  00FB61  25                 	db	37
   300  00FB62  75                 	db	117	;'u'
   301  00FB63  2C                 	db	44
   302  00FB64  20                 	db	32
   303  00FB65  61                 	db	97	;'a'
   304  00FB66  64                 	db	100	;'d'
   305  00FB67  64                 	db	100	;'d'
   306  00FB68  72                 	db	114	;'r'
   307  00FB69  3A                 	db	58	;':'
   308  00FB6A  20                 	db	32
   309  00FB6B  25                 	db	37
   310  00FB6C  75                 	db	117	;'u'
   311  00FB6D  29                 	db	41
   312  00FB6E  00                 	db	0
   313  00FB6F                     STR_27:
   314  00FB6F  4E                 	db	78	;'N'
   315  00FB70  4F                 	db	79	;'O'
   316  00FB71  20                 	db	32
   317  00FB72  4C                 	db	76	;'L'
   318  00FB73  41                 	db	65	;'A'
   319  00FB74  42                 	db	66	;'B'
   320  00FB75  3A                 	db	58	;':'
   321  00FB76  20                 	db	32
   322  00FB77  25                 	db	37
   323  00FB78  64                 	db	100	;'d'
   324  00FB79  7C                 	db	124
   325  00FB7A  4C                 	db	76	;'L'
   326  00FB7B  41                 	db	65	;'A'
   327  00FB7C  42                 	db	66	;'B'
   328  00FB7D  3A                 	db	58	;':'
   329  00FB7E  20                 	db	32
   330  00FB7F  25                 	db	37
   331  00FB80  64                 	db	100	;'d'
   332  00FB81  00                 	db	0
   333  00FB82                     STR_25:
   334  00FB82  4E                 	db	78	;'N'
   335  00FB83  4F                 	db	79	;'O'
   336  00FB84  20                 	db	32
   337  00FB85  54                 	db	84	;'T'
   338  00FB86  41                 	db	65	;'A'
   339  00FB87  42                 	db	66	;'B'
   340  00FB88  3A                 	db	58	;':'
   341  00FB89  20                 	db	32
   342  00FB8A  25                 	db	37
   343  00FB8B  64                 	db	100	;'d'
   344  00FB8C  7C                 	db	124
   345  00FB8D  54                 	db	84	;'T'
   346  00FB8E  41                 	db	65	;'A'
   347  00FB8F  42                 	db	66	;'B'
   348  00FB90  3A                 	db	58	;':'
   349  00FB91  20                 	db	32
   350  00FB92  25                 	db	37
   351  00FB93  64                 	db	100	;'d'
   352  00FB94  00                 	db	0
   353  00FB95                     STR_107:
   354  00FB95  44                 	db	68	;'D'
   355  00FB96  20                 	db	32
   356  00FB97  57                 	db	87	;'W'
   357  00FB98  49                 	db	73	;'I'
   358  00FB99  4C                 	db	76	;'L'
   359  00FB9A  4C                 	db	76	;'L'
   360  00FB9B  20                 	db	32
   361  00FB9C  52                 	db	82	;'R'
   362  00FB9D  45                 	db	69	;'E'
   363  00FB9E  54                 	db	84	;'T'
   364  00FB9F  55                 	db	85	;'U'
   365  00FBA0  52                 	db	82	;'R'
   366  00FBA1  4E                 	db	78	;'N'
   367  00FBA2  20                 	db	32
   368  00FBA3  20                 	db	32
   369  00FBA4  20                 	db	32
   370  00FBA5  20                 	db	32
   371  00FBA6  00                 	db	0
   372  00FBA7                     STR_108:
   373  00FBA7  4F                 	db	79	;'O'
   374  00FBA8  54                 	db	84	;'T'
   375  00FBA9  48                 	db	72	;'H'
   376  00FBAA  45                 	db	69	;'E'
   377  00FBAB  52                 	db	82	;'R'
   378  00FBAC  20                 	db	32
   379  00FBAD  53                 	db	83	;'S'
   380  00FBAE  45                 	db	69	;'E'
   381  00FBAF  54                 	db	84	;'T'
   382  00FBB0  53                 	db	83	;'S'
   383  00FBB1  20                 	db	32
   384  00FBB2  52                 	db	82	;'R'
   385  00FBB3  41                 	db	65	;'A'
   386  00FBB4  35                 	db	53	;'5'
   387  00FBB5  20                 	db	32
   388  00FBB6  20                 	db	32
   389  00FBB7  20                 	db	32
   390  00FBB8  00                 	db	0
   391  00FBB9                     STR_3:
   392  00FBB9  2D                 	db	45
   393  00FBBA  2D                 	db	45
   394  00FBBB  20                 	db	32
   395  00FBBC  4C                 	db	76	;'L'
   396  00FBBD  4F                 	db	79	;'O'
   397  00FBBE  47                 	db	71	;'G'
   398  00FBBF  20                 	db	32
   399  00FBC0  25                 	db	37
   400  00FBC1  32                 	db	50	;'2'
   401  00FBC2  64                 	db	100	;'d'
   402  00FBC3  20                 	db	32
   403  00FBC4  48                 	db	72	;'H'
   404  00FBC5  45                 	db	69	;'E'
   405  00FBC6  52                 	db	82	;'R'
   406  00FBC7  45                 	db	69	;'E'
   407  00FBC8  2D                 	db	45
   408  00FBC9  2D                 	db	45
   409  00FBCA  00                 	db	0
   410  00FBCB                     STR_1:
   411  00FBCB  52                 	db	82	;'R'
   412  00FBCC  45                 	db	69	;'E'
   413  00FBCD  53                 	db	83	;'S'
   414  00FBCE  55                 	db	85	;'U'
   415  00FBCF  4C                 	db	76	;'L'
   416  00FBD0  54                 	db	84	;'T'
   417  00FBD1  53                 	db	83	;'S'
   418  00FBD2  20                 	db	32
   419  00FBD3  49                 	db	73	;'I'
   420  00FBD4  4E                 	db	78	;'N'
   421  00FBD5  20                 	db	32
   422  00FBD6  4C                 	db	76	;'L'
   423  00FBD7  4F                 	db	79	;'O'
   424  00FBD8  47                 	db	71	;'G'
   425  00FBD9  20                 	db	32
   426  00FBDA  25                 	db	37
   427  00FBDB  64                 	db	100	;'d'
   428  00FBDC  00                 	db	0
   429  00FBDD                     STR_98:
   430  00FBDD  4D                 	db	77	;'M'
   431  00FBDE  49                 	db	73	;'I'
   432  00FBDF  44                 	db	68	;'D'
   433  00FBE0  20                 	db	32
   434  00FBE1  2D                 	db	45
   435  00FBE2  2D                 	db	45
   436  00FBE3  20                 	db	32
   437  00FBE4  32                 	db	50	;'2'
   438  00FBE5  73                 	db	115	;'s'
   439  00FBE6  20                 	db	32
   440  00FBE7  20                 	db	32
   441  00FBE8  20                 	db	32
   442  00FBE9  20                 	db	32
   443  00FBEA  20                 	db	32
   444  00FBEB  20                 	db	32
   445  00FBEC  20                 	db	32
   446  00FBED  00                 	db	0
   447  00FBEE                     STR_101:
   448  00FBEE  44                 	db	68	;'D'
   449  00FBEF  52                 	db	82	;'R'
   450  00FBF0  4F                 	db	79	;'O'
   451  00FBF1  50                 	db	80	;'P'
   452  00FBF2  20                 	db	32
   453  00FBF3  2D                 	db	45
   454  00FBF4  2D                 	db	45
   455  00FBF5  20                 	db	32
   456  00FBF6  32                 	db	50	;'2'
   457  00FBF7  73                 	db	115	;'s'
   458  00FBF8  20                 	db	32
   459  00FBF9  20                 	db	32
   460  00FBFA  20                 	db	32
   461  00FBFB  20                 	db	32
   462  00FBFC  20                 	db	32
   463  00FBFD  20                 	db	32
   464  00FBFE  00                 	db	0
   465  00FBFF                     STR_95:
   466  00FBFF  4C                 	db	76	;'L'
   467  00FC00  45                 	db	69	;'E'
   468  00FC01  46                 	db	70	;'F'
   469  00FC02  54                 	db	84	;'T'
   470  00FC03  20                 	db	32
   471  00FC04  2D                 	db	45
   472  00FC05  2D                 	db	45
   473  00FC06  20                 	db	32
   474  00FC07  32                 	db	50	;'2'
   475  00FC08  73                 	db	115	;'s'
   476  00FC09  20                 	db	32
   477  00FC0A  20                 	db	32
   478  00FC0B  20                 	db	32
   479  00FC0C  20                 	db	32
   480  00FC0D  20                 	db	32
   481  00FC0E  20                 	db	32
   482  00FC0F  00                 	db	0
   483  00FC10                     STR_100:
   484  00FC10  4C                 	db	76	;'L'
   485  00FC11  45                 	db	69	;'E'
   486  00FC12  56                 	db	86	;'V'
   487  00FC13  45                 	db	69	;'E'
   488  00FC14  4C                 	db	76	;'L'
   489  00FC15  20                 	db	32
   490  00FC16  2D                 	db	45
   491  00FC17  2D                 	db	45
   492  00FC18  20                 	db	32
   493  00FC19  32                 	db	50	;'2'
   494  00FC1A  73                 	db	115	;'s'
   495  00FC1B  20                 	db	32
   496  00FC1C  20                 	db	32
   497  00FC1D  20                 	db	32
   498  00FC1E  20                 	db	32
   499  00FC1F  20                 	db	32
   500  00FC20  00                 	db	0
   501  00FC21                     STR_94:
   502  00FC21  52                 	db	82	;'R'
   503  00FC22  49                 	db	73	;'I'
   504  00FC23  47                 	db	71	;'G'
   505  00FC24  48                 	db	72	;'H'
   506  00FC25  54                 	db	84	;'T'
   507  00FC26  20                 	db	32
   508  00FC27  2D                 	db	45
   509  00FC28  2D                 	db	45
   510  00FC29  20                 	db	32
   511  00FC2A  32                 	db	50	;'2'
   512  00FC2B  73                 	db	115	;'s'
   513  00FC2C  20                 	db	32
   514  00FC2D  20                 	db	32
   515  00FC2E  20                 	db	32
   516  00FC2F  20                 	db	32
   517  00FC30  20                 	db	32
   518  00FC31  00                 	db	0
   519  00FC32                     STR_93:
   520  00FC32  4D                 	db	77	;'M'
   521  00FC33  49                 	db	73	;'I'
   522  00FC34  44                 	db	68	;'D'
   523  00FC35  44                 	db	68	;'D'
   524  00FC36  4C                 	db	76	;'L'
   525  00FC37  45                 	db	69	;'E'
   526  00FC38  20                 	db	32
   527  00FC39  2D                 	db	45
   528  00FC3A  2D                 	db	45
   529  00FC3B  20                 	db	32
   530  00FC3C  32                 	db	50	;'2'
   531  00FC3D  73                 	db	115	;'s'
   532  00FC3E  20                 	db	32
   533  00FC3F  20                 	db	32
   534  00FC40  20                 	db	32
   535  00FC41  20                 	db	32
   536  00FC42  00                 	db	0
   537  00FC43                     STR_111:
   538  00FC43  44                 	db	68	;'D'
   539  00FC44  20                 	db	32
   540  00FC45  57                 	db	87	;'W'
   541  00FC46  49                 	db	73	;'I'
   542  00FC47  4C                 	db	76	;'L'
   543  00FC48  4C                 	db	76	;'L'
   544  00FC49  20                 	db	32
   545  00FC4A  52                 	db	82	;'R'
   546  00FC4B  45                 	db	69	;'E'
   547  00FC4C  54                 	db	84	;'T'
   548  00FC4D  55                 	db	85	;'U'
   549  00FC4E  52                 	db	82	;'R'
   550  00FC4F  4E                 	db	78	;'N'
   551  00FC50  20                 	db	32
   552  00FC51  20                 	db	32
   553  00FC52  20                 	db	32
   554  00FC53  00                 	db	0
   555  00FC54                     STR_96:
   556  00FC54  4D                 	db	77	;'M'
   557  00FC55  49                 	db	73	;'I'
   558  00FC56  44                 	db	68	;'D'
   559  00FC57  2D                 	db	45
   560  00FC58  4C                 	db	76	;'L'
   561  00FC59  45                 	db	69	;'E'
   562  00FC5A  46                 	db	70	;'F'
   563  00FC5B  54                 	db	84	;'T'
   564  00FC5C  20                 	db	32
   565  00FC5D  2D                 	db	45
   566  00FC5E  2D                 	db	45
   567  00FC5F  20                 	db	32
   568  00FC60  32                 	db	50	;'2'
   569  00FC61  73                 	db	115	;'s'
   570  00FC62  20                 	db	32
   571  00FC63  20                 	db	32
   572  00FC64  00                 	db	0
   573  00FC65                     STR_97:
   574  00FC65  4D                 	db	77	;'M'
   575  00FC66  49                 	db	73	;'I'
   576  00FC67  44                 	db	68	;'D'
   577  00FC68  2D                 	db	45
   578  00FC69  52                 	db	82	;'R'
   579  00FC6A  49                 	db	73	;'I'
   580  00FC6B  47                 	db	71	;'G'
   581  00FC6C  48                 	db	72	;'H'
   582  00FC6D  54                 	db	84	;'T'
   583  00FC6E  20                 	db	32
   584  00FC6F  2D                 	db	45
   585  00FC70  2D                 	db	45
   586  00FC71  20                 	db	32
   587  00FC72  32                 	db	50	;'2'
   588  00FC73  73                 	db	115	;'s'
   589  00FC74  20                 	db	32
   590  00FC75  00                 	db	0
   591  00FC76                     STR_112:
   592  00FC76  45                 	db	69	;'E'
   593  00FC77  4C                 	db	76	;'L'
   594  00FC78  53                 	db	83	;'S'
   595  00FC79  45                 	db	69	;'E'
   596  00FC7A  20                 	db	32
   597  00FC7B  54                 	db	84	;'T'
   598  00FC7C  4F                 	db	79	;'O'
   599  00FC7D  47                 	db	71	;'G'
   600  00FC7E  47                 	db	71	;'G'
   601  00FC7F  4C                 	db	76	;'L'
   602  00FC80  45                 	db	69	;'E'
   603  00FC81  53                 	db	83	;'S'
   604  00FC82  20                 	db	32
   605  00FC83  52                 	db	82	;'R'
   606  00FC84  41                 	db	65	;'A'
   607  00FC85  35                 	db	53	;'5'
   608  00FC86  00                 	db	0
   609  00FC87                     STR_72:
   610  00FC87  41                 	db	65	;'A'
   611  00FC88  4C                 	db	76	;'L'
   612  00FC89  47                 	db	71	;'G'
   613  00FC8A  31                 	db	49	;'1'
   614  00FC8B  3A                 	db	58	;':'
   615  00FC8C  20                 	db	32
   616  00FC8D  39                 	db	57	;'9'
   617  00FC8E  20                 	db	32
   618  00FC8F  50                 	db	80	;'P'
   619  00FC90  4F                 	db	79	;'O'
   620  00FC91  50                 	db	80	;'P'
   621  00FC92  4E                 	db	78	;'N'
   622  00FC93  4F                 	db	79	;'O'
   623  00FC94  54                 	db	84	;'T'
   624  00FC95  41                 	db	65	;'A'
   625  00FC96  42                 	db	66	;'B'
   626  00FC97  00                 	db	0
   627  00FC98                     STR_68:
   628  00FC98  31                 	db	49	;'1'
   629  00FC99  2E                 	db	46
   630  00FC9A  41                 	db	65	;'A'
   631  00FC9B  4C                 	db	76	;'L'
   632  00FC9C  47                 	db	71	;'G'
   633  00FC9D  7C                 	db	124
   634  00FC9E  32                 	db	50	;'2'
   635  00FC9F  2E                 	db	46
   636  00FCA0  53                 	db	83	;'S'
   637  00FCA1  4E                 	db	78	;'N'
   638  00FCA2  52                 	db	82	;'R'
   639  00FCA3  7C                 	db	124
   640  00FCA4  33                 	db	51	;'3'
   641  00FCA5  2E                 	db	46
   642  00FCA6  41                 	db	65	;'A'
   643  00FCA7  43                 	db	67	;'C'
   644  00FCA8  00                 	db	0
   645  00FCA9                     STR_88:
   646  00FCA9  54                 	db	84	;'T'
   647  00FCAA  53                 	db	83	;'S'
   648  00FCAB  54                 	db	84	;'T'
   649  00FCAC  3A                 	db	58	;':'
   650  00FCAD  20                 	db	32
   651  00FCAE  43                 	db	67	;'C'
   652  00FCAF  4F                 	db	79	;'O'
   653  00FCB0  4E                 	db	78	;'N'
   654  00FCB1  44                 	db	68	;'D'
   655  00FCB2  20                 	db	32
   656  00FCB3  53                 	db	83	;'S'
   657  00FCB4  4F                 	db	79	;'O'
   658  00FCB5  4C                 	db	76	;'L'
   659  00FCB6  4E                 	db	78	;'N'
   660  00FCB7  27                 	db	39
   661  00FCB8  44                 	db	68	;'D'
   662  00FCB9  00                 	db	0
   663  00FCBA                     STR_90:
   664  00FCBA  54                 	db	84	;'T'
   665  00FCBB  53                 	db	83	;'S'
   666  00FCBC  54                 	db	84	;'T'
   667  00FCBD  3A                 	db	58	;':'
   668  00FCBE  20                 	db	32
   669  00FCBF  50                 	db	80	;'P'
   670  00FCC0  55                 	db	85	;'U'
   671  00FCC1  53                 	db	83	;'S'
   672  00FCC2  48                 	db	72	;'H'
   673  00FCC3  20                 	db	32
   674  00FCC4  53                 	db	83	;'S'
   675  00FCC5  4F                 	db	79	;'O'
   676  00FCC6  4C                 	db	76	;'L'
   677  00FCC7  4E                 	db	78	;'N'
   678  00FCC8  27                 	db	39
   679  00FCC9  44                 	db	68	;'D'
   680  00FCCA  00                 	db	0
   681  00FCCB                     STR_69:
   682  00FCCB  34                 	db	52	;'4'
   683  00FCCC  2E                 	db	46
   684  00FCCD  48                 	db	72	;'H'
   685  00FCCE  49                 	db	73	;'I'
   686  00FCCF  7C                 	db	124
   687  00FCD0  35                 	db	53	;'5'
   688  00FCD1  2E                 	db	46
   689  00FCD2  54                 	db	84	;'T'
   690  00FCD3  4F                 	db	79	;'O'
   691  00FCD4  47                 	db	71	;'G'
   692  00FCD5  7C                 	db	124
   693  00FCD6  36                 	db	54	;'6'
   694  00FCD7  2E                 	db	46
   695  00FCD8  45                 	db	69	;'E'
   696  00FCD9  45                 	db	69	;'E'
   697  00FCDA  50                 	db	80	;'P'
   698  00FCDB  00                 	db	0
   699  00FCDC                     STR_106:
   700  00FCDC  54                 	db	84	;'T'
   701  00FCDD  53                 	db	83	;'S'
   702  00FCDE  54                 	db	84	;'T'
   703  00FCDF  3A                 	db	58	;':'
   704  00FCE0  20                 	db	32
   705  00FCE1  42                 	db	66	;'B'
   706  00FCE2  4F                 	db	79	;'O'
   707  00FCE3  54                 	db	84	;'T'
   708  00FCE4  48                 	db	72	;'H'
   709  00FCE5  20                 	db	32
   710  00FCE6  53                 	db	83	;'S'
   711  00FCE7  45                 	db	69	;'E'
   712  00FCE8  52                 	db	82	;'R'
   713  00FCE9  56                 	db	86	;'V'
   714  00FCEA  4F                 	db	79	;'O'
   715  00FCEB  53                 	db	83	;'S'
   716  00FCEC  00                 	db	0
   717  00FCED                     STR_41:
   718  00FCED  4C                 	db	76	;'L'
   719  00FCEE  4F                 	db	79	;'O'
   720  00FCEF  47                 	db	71	;'G'
   721  00FCF0  20                 	db	32
   722  00FCF1  31                 	db	49	;'1'
   723  00FCF2  20                 	db	32
   724  00FCF3  20                 	db	32
   725  00FCF4  20                 	db	32
   726  00FCF5  20                 	db	32
   727  00FCF6  20                 	db	32
   728  00FCF7  20                 	db	32
   729  00FCF8  20                 	db	32
   730  00FCF9  20                 	db	32
   731  00FCFA  20                 	db	32
   732  00FCFB  20                 	db	32
   733  00FCFC  20                 	db	32
   734  00FCFD  00                 	db	0
   735  00FCFE                     STR_40:
   736  00FCFE  4C                 	db	76	;'L'
   737  00FCFF  4F                 	db	79	;'O'
   738  00FD00  47                 	db	71	;'G'
   739  00FD01  20                 	db	32
   740  00FD02  32                 	db	50	;'2'
   741  00FD03  20                 	db	32
   742  00FD04  20                 	db	32
   743  00FD05  20                 	db	32
   744  00FD06  20                 	db	32
   745  00FD07  20                 	db	32
   746  00FD08  20                 	db	32
   747  00FD09  20                 	db	32
   748  00FD0A  20                 	db	32
   749  00FD0B  20                 	db	32
   750  00FD0C  20                 	db	32
   751  00FD0D  20                 	db	32
   752  00FD0E  00                 	db	0
   753  00FD0F                     STR_44:
   754  00FD0F  4C                 	db	76	;'L'
   755  00FD10  4F                 	db	79	;'O'
   756  00FD11  47                 	db	71	;'G'
   757  00FD12  20                 	db	32
   758  00FD13  33                 	db	51	;'3'
   759  00FD14  20                 	db	32
   760  00FD15  20                 	db	32
   761  00FD16  20                 	db	32
   762  00FD17  20                 	db	32
   763  00FD18  20                 	db	32
   764  00FD19  20                 	db	32
   765  00FD1A  20                 	db	32
   766  00FD1B  20                 	db	32
   767  00FD1C  20                 	db	32
   768  00FD1D  20                 	db	32
   769  00FD1E  20                 	db	32
   770  00FD1F  00                 	db	0
   771  00FD20                     STR_48:
   772  00FD20  4C                 	db	76	;'L'
   773  00FD21  4F                 	db	79	;'O'
   774  00FD22  47                 	db	71	;'G'
   775  00FD23  20                 	db	32
   776  00FD24  34                 	db	52	;'4'
   777  00FD25  20                 	db	32
   778  00FD26  20                 	db	32
   779  00FD27  20                 	db	32
   780  00FD28  20                 	db	32
   781  00FD29  20                 	db	32
   782  00FD2A  20                 	db	32
   783  00FD2B  20                 	db	32
   784  00FD2C  20                 	db	32
   785  00FD2D  20                 	db	32
   786  00FD2E  20                 	db	32
   787  00FD2F  20                 	db	32
   788  00FD30  00                 	db	0
   789  00FD31                     STR_36:
   790  00FD31  33                 	db	51	;'3'
   791  00FD32  2E                 	db	46
   792  00FD33  20                 	db	32
   793  00FD34  4C                 	db	76	;'L'
   794  00FD35  4F                 	db	79	;'O'
   795  00FD36  47                 	db	71	;'G'
   796  00FD37  53                 	db	83	;'S'
   797  00FD38  20                 	db	32
   798  00FD39  20                 	db	32
   799  00FD3A  20                 	db	32
   800  00FD3B  20                 	db	32
   801  00FD3C  20                 	db	32
   802  00FD3D  20                 	db	32
   803  00FD3E  20                 	db	32
   804  00FD3F  20                 	db	32
   805  00FD40  20                 	db	32
   806  00FD41  00                 	db	0
   807  00FD42                     STR_32:
   808  00FD42  32                 	db	50	;'2'
   809  00FD43  2E                 	db	46
   810  00FD44  20                 	db	32
   811  00FD45  53                 	db	83	;'S'
   812  00FD46  4F                 	db	79	;'O'
   813  00FD47  52                 	db	82	;'R'
   814  00FD48  54                 	db	84	;'T'
   815  00FD49  20                 	db	32
   816  00FD4A  20                 	db	32
   817  00FD4B  20                 	db	32
   818  00FD4C  20                 	db	32
   819  00FD4D  20                 	db	32
   820  00FD4E  20                 	db	32
   821  00FD4F  20                 	db	32
   822  00FD50  20                 	db	32
   823  00FD51  20                 	db	32
   824  00FD52  00                 	db	0
   825  00FD53                     STR_33:
   826  00FD53  31                 	db	49	;'1'
   827  00FD54  2E                 	db	46
   828  00FD55  20                 	db	32
   829  00FD56  44                 	db	68	;'D'
   830  00FD57  41                 	db	65	;'A'
   831  00FD58  54                 	db	84	;'T'
   832  00FD59  45                 	db	69	;'E'
   833  00FD5A  2F                 	db	47
   834  00FD5B  54                 	db	84	;'T'
   835  00FD5C  49                 	db	73	;'I'
   836  00FD5D  4D                 	db	77	;'M'
   837  00FD5E  45                 	db	69	;'E'
   838  00FD5F  20                 	db	32
   839  00FD60  20                 	db	32
   840  00FD61  20                 	db	32
   841  00FD62  20                 	db	32
   842  00FD63  00                 	db	0
   843  00FD64                     STR_24:
   844  00FD64  20                 	db	32
   845  00FD65  2D                 	db	45
   846  00FD66  2D                 	db	45
   847  00FD67  20                 	db	32
   848  00FD68  50                 	db	80	;'P'
   849  00FD69  4F                 	db	79	;'O'
   850  00FD6A  50                 	db	80	;'P'
   851  00FD6B  20                 	db	32
   852  00FD6C  20                 	db	32
   853  00FD6D  43                 	db	67	;'C'
   854  00FD6E  41                 	db	65	;'A'
   855  00FD6F  4E                 	db	78	;'N'
   856  00FD70  20                 	db	32
   857  00FD71  2D                 	db	45
   858  00FD72  2D                 	db	45
   859  00FD73  20                 	db	32
   860  00FD74  00                 	db	0
   861  00FD75                     STR_26:
   862  00FD75  20                 	db	32
   863  00FD76  2D                 	db	45
   864  00FD77  2D                 	db	45
   865  00FD78  20                 	db	32
   866  00FD79  53                 	db	83	;'S'
   867  00FD7A  4F                 	db	79	;'O'
   868  00FD7B  55                 	db	85	;'U'
   869  00FD7C  50                 	db	80	;'P'
   870  00FD7D  20                 	db	32
   871  00FD7E  43                 	db	67	;'C'
   872  00FD7F  41                 	db	65	;'A'
   873  00FD80  4E                 	db	78	;'N'
   874  00FD81  20                 	db	32
   875  00FD82  2D                 	db	45
   876  00FD83  2D                 	db	45
   877  00FD84  20                 	db	32
   878  00FD85  00                 	db	0
   879  00FD86                     STR_28:
   880  00FD86  2D                 	db	45
   881  00FD87  2D                 	db	45
   882  00FD88  20                 	db	32
   883  00FD89  54                 	db	84	;'T'
   884  00FD8A  4F                 	db	79	;'O'
   885  00FD8B  54                 	db	84	;'T'
   886  00FD8C  41                 	db	65	;'A'
   887  00FD8D  4C                 	db	76	;'L'
   888  00FD8E  20                 	db	32
   889  00FD8F  43                 	db	67	;'C'
   890  00FD90  41                 	db	65	;'A'
   891  00FD91  4E                 	db	78	;'N'
   892  00FD92  53                 	db	83	;'S'
   893  00FD93  20                 	db	32
   894  00FD94  2D                 	db	45
   895  00FD95  2D                 	db	45
   896  00FD96  00                 	db	0
   897  00FD97                     STR_39:
   898  00FD97  4C                 	db	76	;'L'
   899  00FD98  4F                 	db	79	;'O'
   900  00FD99  47                 	db	71	;'G'
   901  00FD9A  20                 	db	32
   902  00FD9B  31                 	db	49	;'1'
   903  00FD9C  20                 	db	32
   904  00FD9D  20                 	db	32
   905  00FD9E  20                 	db	32
   906  00FD9F  20                 	db	32
   907  00FDA0  20                 	db	32
   908  00FDA1  20                 	db	32
   909  00FDA2  20                 	db	32
   910  00FDA3  20                 	db	32
   911  00FDA4  20                 	db	32
   912  00FDA5  20                 	db	32
   913  00FDA6  3C                 	db	60	;'<'
   914  00FDA7  00                 	db	0
   915  00FDA8                     STR_42:
   916  00FDA8  4C                 	db	76	;'L'
   917  00FDA9  4F                 	db	79	;'O'
   918  00FDAA  47                 	db	71	;'G'
   919  00FDAB  20                 	db	32
   920  00FDAC  32                 	db	50	;'2'
   921  00FDAD  20                 	db	32
   922  00FDAE  20                 	db	32
   923  00FDAF  20                 	db	32
   924  00FDB0  20                 	db	32
   925  00FDB1  20                 	db	32
   926  00FDB2  20                 	db	32
   927  00FDB3  20                 	db	32
   928  00FDB4  20                 	db	32
   929  00FDB5  20                 	db	32
   930  00FDB6  20                 	db	32
   931  00FDB7  3C                 	db	60	;'<'
   932  00FDB8  00                 	db	0
   933  00FDB9                     STR_46:
   934  00FDB9  4C                 	db	76	;'L'
   935  00FDBA  4F                 	db	79	;'O'
   936  00FDBB  47                 	db	71	;'G'
   937  00FDBC  20                 	db	32
   938  00FDBD  33                 	db	51	;'3'
   939  00FDBE  20                 	db	32
   940  00FDBF  20                 	db	32
   941  00FDC0  20                 	db	32
   942  00FDC1  20                 	db	32
   943  00FDC2  20                 	db	32
   944  00FDC3  20                 	db	32
   945  00FDC4  20                 	db	32
   946  00FDC5  20                 	db	32
   947  00FDC6  20                 	db	32
   948  00FDC7  20                 	db	32
   949  00FDC8  3C                 	db	60	;'<'
   950  00FDC9  00                 	db	0
   951  00FDCA                     STR_50:
   952  00FDCA  4C                 	db	76	;'L'
   953  00FDCB  4F                 	db	79	;'O'
   954  00FDCC  47                 	db	71	;'G'
   955  00FDCD  20                 	db	32
   956  00FDCE  34                 	db	52	;'4'
   957  00FDCF  20                 	db	32
   958  00FDD0  20                 	db	32
   959  00FDD1  20                 	db	32
   960  00FDD2  20                 	db	32
   961  00FDD3  20                 	db	32
   962  00FDD4  20                 	db	32
   963  00FDD5  20                 	db	32
   964  00FDD6  20                 	db	32
   965  00FDD7  20                 	db	32
   966  00FDD8  20                 	db	32
   967  00FDD9  3C                 	db	60	;'<'
   968  00FDDA  00                 	db	0
   969  00FDDB                     STR_38:
   970  00FDDB  33                 	db	51	;'3'
   971  00FDDC  2E                 	db	46
   972  00FDDD  20                 	db	32
   973  00FDDE  4C                 	db	76	;'L'
   974  00FDDF  4F                 	db	79	;'O'
   975  00FDE0  47                 	db	71	;'G'
   976  00FDE1  53                 	db	83	;'S'
   977  00FDE2  20                 	db	32
   978  00FDE3  20                 	db	32
   979  00FDE4  20                 	db	32
   980  00FDE5  20                 	db	32
   981  00FDE6  20                 	db	32
   982  00FDE7  20                 	db	32
   983  00FDE8  20                 	db	32
   984  00FDE9  20                 	db	32
   985  00FDEA  3C                 	db	60	;'<'
   986  00FDEB  00                 	db	0
   987  00FDEC                     STR_34:
   988  00FDEC  32                 	db	50	;'2'
   989  00FDED  2E                 	db	46
   990  00FDEE  20                 	db	32
   991  00FDEF  53                 	db	83	;'S'
   992  00FDF0  4F                 	db	79	;'O'
   993  00FDF1  52                 	db	82	;'R'
   994  00FDF2  54                 	db	84	;'T'
   995  00FDF3  20                 	db	32
   996  00FDF4  20                 	db	32
   997  00FDF5  20                 	db	32
   998  00FDF6  20                 	db	32
   999  00FDF7  20                 	db	32
  1000  00FDF8  20                 	db	32
  1001  00FDF9  20                 	db	32
  1002  00FDFA  20                 	db	32
  1003  00FDFB  3C                 	db	60	;'<'
  1004  00FDFC  00                 	db	0
  1005  00FDFD                     STR_31:
  1006  00FDFD  31                 	db	49	;'1'
  1007  00FDFE  2E                 	db	46
  1008  00FDFF  20                 	db	32
  1009  00FE00  44                 	db	68	;'D'
  1010  00FE01  41                 	db	65	;'A'
  1011  00FE02  54                 	db	84	;'T'
  1012  00FE03  45                 	db	69	;'E'
  1013  00FE04  2F                 	db	47
  1014  00FE05  54                 	db	84	;'T'
  1015  00FE06  49                 	db	73	;'I'
  1016  00FE07  4D                 	db	77	;'M'
  1017  00FE08  45                 	db	69	;'E'
  1018  00FE09  20                 	db	32
  1019  00FE0A  20                 	db	32
  1020  00FE0B  20                 	db	32
  1021  00FE0C  3C                 	db	60	;'<'
  1022  00FE0D  00                 	db	0
  1023  00FE0E                     STR_6:
  1024  00FE0E  50                 	db	80	;'P'
  1025  00FE0F  41                 	db	65	;'A'
  1026  00FE10  55                 	db	85	;'U'
  1027  00FE11  53                 	db	83	;'S'
  1028  00FE12  45                 	db	69	;'E'
  1029  00FE13  20                 	db	32
  1030  00FE14  3C                 	db	60	;'<'
  1031  00FE15  20                 	db	32
  1032  00FE16  7C                 	db	124
  1033  00FE17  20                 	db	32
  1034  00FE18  42                 	db	66	;'B'
  1035  00FE19  41                 	db	65	;'A'
  1036  00FE1A  43                 	db	67	;'C'
  1037  00FE1B  4B                 	db	75	;'K'
  1038  00FE1C  20                 	db	32
  1039  00FE1D  3E                 	db	62	;'>'
  1040  00FE1E  00                 	db	0
  1041  00FE1F                     STR_30:
  1042  00FE1F  50                 	db	80	;'P'
  1043  00FE20  55                 	db	85	;'U'
  1044  00FE21  53                 	db	83	;'S'
  1045  00FE22  48                 	db	72	;'H'
  1046  00FE23  20                 	db	32
  1047  00FE24  54                 	db	84	;'T'
  1048  00FE25  4F                 	db	79	;'O'
  1049  00FE26  20                 	db	32
  1050  00FE27  43                 	db	67	;'C'
  1051  00FE28  4F                 	db	79	;'O'
  1052  00FE29  4E                 	db	78	;'N'
  1053  00FE2A  54                 	db	84	;'T'
  1054  00FE2B  49                 	db	73	;'I'
  1055  00FE2C  4E                 	db	78	;'N'
  1056  00FE2D  55                 	db	85	;'U'
  1057  00FE2E  45                 	db	69	;'E'
  1058  00FE2F  00                 	db	0
  1059  00FE30                     STR_83:
  1060  00FE30  4D                 	db	77	;'M'
  1061  00FE31  41                 	db	65	;'A'
  1062  00FE32  47                 	db	71	;'G'
  1063  00FE33  5F                 	db	95	;'_'
  1064  00FE34  73                 	db	115	;'s'
  1065  00FE35  69                 	db	105	;'i'
  1066  00FE36  67                 	db	103	;'g'
  1067  00FE37  6E                 	db	110	;'n'
  1068  00FE38  61                 	db	97	;'a'
  1069  00FE39  6C                 	db	108	;'l'
  1070  00FE3A  3A                 	db	58	;':'
  1071  00FE3B  20                 	db	32
  1072  00FE3C  25                 	db	37
  1073  00FE3D  64                 	db	100	;'d'
  1074  00FE3E  20                 	db	32
  1075  00FE3F  00                 	db	0
  1076  00FE40                     STR_99:
  1077  00FE40  54                 	db	84	;'T'
  1078  00FE41  53                 	db	83	;'S'
  1079  00FE42  54                 	db	84	;'T'
  1080  00FE43  3A                 	db	58	;':'
  1081  00FE44  20                 	db	32
  1082  00FE45  54                 	db	84	;'T'
  1083  00FE46  49                 	db	73	;'I'
  1084  00FE47  4C                 	db	76	;'L'
  1085  00FE48  54                 	db	84	;'T'
  1086  00FE49  20                 	db	32
  1087  00FE4A  53                 	db	83	;'S'
  1088  00FE4B  45                 	db	69	;'E'
  1089  00FE4C  52                 	db	82	;'R'
  1090  00FE4D  56                 	db	86	;'V'
  1091  00FE4E  4F                 	db	79	;'O'
  1092  00FE4F  00                 	db	0
  1093  00FE50                     STR_4:
  1094  00FE50  44                 	db	68	;'D'
  1095  00FE51  49                 	db	73	;'I'
  1096  00FE52  44                 	db	68	;'D'
  1097  00FE53  4E                 	db	78	;'N'
  1098  00FE54  27                 	db	39
  1099  00FE55  54                 	db	84	;'T'
  1100  00FE56  20                 	db	32
  1101  00FE57  43                 	db	67	;'C'
  1102  00FE58  4F                 	db	79	;'O'
  1103  00FE59  4D                 	db	77	;'M'
  1104  00FE5A  50                 	db	80	;'P'
  1105  00FE5B  4C                 	db	76	;'L'
  1106  00FE5C  45                 	db	69	;'E'
  1107  00FE5D  54                 	db	84	;'T'
  1108  00FE5E  45                 	db	69	;'E'
  1109  00FE5F  00                 	db	0
  1110  00FE60                     STR_80:
  1111  00FE60  49                 	db	73	;'I'
  1112  00FE61  52                 	db	82	;'R'
  1113  00FE62  5F                 	db	95	;'_'
  1114  00FE63  73                 	db	115	;'s'
  1115  00FE64  69                 	db	105	;'i'
  1116  00FE65  67                 	db	103	;'g'
  1117  00FE66  6E                 	db	110	;'n'
  1118  00FE67  61                 	db	97	;'a'
  1119  00FE68  6C                 	db	108	;'l'
  1120  00FE69  3A                 	db	58	;':'
  1121  00FE6A  20                 	db	32
  1122  00FE6B  25                 	db	37
  1123  00FE6C  64                 	db	100	;'d'
  1124  00FE6D  20                 	db	32
  1125  00FE6E  00                 	db	0
  1126  00FE6F                     STR_105:
  1127  00FE6F  43                 	db	67	;'C'
  1128  00FE70  41                 	db	65	;'A'
  1129  00FE71  4D                 	db	77	;'M'
  1130  00FE72  20                 	db	32
  1131  00FE73  44                 	db	68	;'D'
  1132  00FE74  57                 	db	87	;'W'
  1133  00FE75  4E                 	db	78	;'N'
  1134  00FE76  20                 	db	32
  1135  00FE77  7C                 	db	124
  1136  00FE78  52                 	db	82	;'R'
  1137  00FE79  43                 	db	67	;'C'
  1138  00FE7A  30                 	db	48	;'0'
  1139  00FE7B  3D                 	db	61	;'='
  1140  00FE7C  30                 	db	48	;'0'
  1141  00FE7D  00                 	db	0
  1142  00FE7E                     STR_104:
  1143  00FE7E  43                 	db	67	;'C'
  1144  00FE7F  41                 	db	65	;'A'
  1145  00FE80  4D                 	db	77	;'M'
  1146  00FE81  20                 	db	32
  1147  00FE82  55                 	db	85	;'U'
  1148  00FE83  50                 	db	80	;'P'
  1149  00FE84  20                 	db	32
  1150  00FE85  20                 	db	32
  1151  00FE86  7C                 	db	124
  1152  00FE87  52                 	db	82	;'R'
  1153  00FE88  43                 	db	67	;'C'
  1154  00FE89  30                 	db	48	;'0'
  1155  00FE8A  3D                 	db	61	;'='
  1156  00FE8B  31                 	db	49	;'1'
  1157  00FE8C  00                 	db	0
  1158  00FE8D                     STR_82:
  1159  00FE8D  54                 	db	84	;'T'
  1160  00FE8E  53                 	db	83	;'S'
  1161  00FE8F  54                 	db	84	;'T'
  1162  00FE90  3A                 	db	58	;':'
  1163  00FE91  20                 	db	32
  1164  00FE92  4D                 	db	77	;'M'
  1165  00FE93  41                 	db	65	;'A'
  1166  00FE94  47                 	db	71	;'G'
  1167  00FE95  4E                 	db	78	;'N'
  1168  00FE96  45                 	db	69	;'E'
  1169  00FE97  54                 	db	84	;'T'
  1170  00FE98  49                 	db	73	;'I'
  1171  00FE99  53                 	db	83	;'S'
  1172  00FE9A  4D                 	db	77	;'M'
  1173  00FE9B  00                 	db	0
  1174  00FE9C                     STR_103:
  1175  00FE9C  54                 	db	84	;'T'
  1176  00FE9D  53                 	db	83	;'S'
  1177  00FE9E  54                 	db	84	;'T'
  1178  00FE9F  3A                 	db	58	;':'
  1179  00FEA0  20                 	db	32
  1180  00FEA1  43                 	db	67	;'C'
  1181  00FEA2  41                 	db	65	;'A'
  1182  00FEA3  4D                 	db	77	;'M'
  1183  00FEA4  20                 	db	32
  1184  00FEA5  53                 	db	83	;'S'
  1185  00FEA6  45                 	db	69	;'E'
  1186  00FEA7  52                 	db	82	;'R'
  1187  00FEA8  56                 	db	86	;'V'
  1188  00FEA9  4F                 	db	79	;'O'
  1189  00FEAA  00                 	db	0
  1190  00FEAB                     STR_92:
  1191  00FEAB  54                 	db	84	;'T'
  1192  00FEAC  53                 	db	83	;'S'
  1193  00FEAD  54                 	db	84	;'T'
  1194  00FEAE  3A                 	db	58	;':'
  1195  00FEAF  20                 	db	32
  1196  00FEB0  50                 	db	80	;'P'
  1197  00FEB1  41                 	db	65	;'A'
  1198  00FEB2  4E                 	db	78	;'N'
  1199  00FEB3  20                 	db	32
  1200  00FEB4  53                 	db	83	;'S'
  1201  00FEB5  45                 	db	69	;'E'
  1202  00FEB6  52                 	db	82	;'R'
  1203  00FEB7  56                 	db	86	;'V'
  1204  00FEB8  4F                 	db	79	;'O'
  1205  00FEB9  00                 	db	0
  1206  00FEBA                     STR_75:
  1207  00FEBA  41                 	db	65	;'A'
  1208  00FEBB  4C                 	db	76	;'L'
  1209  00FEBC  47                 	db	71	;'G'
  1210  00FEBD  34                 	db	52	;'4'
  1211  00FEBE  3A                 	db	58	;':'
  1212  00FEBF  20                 	db	32
  1213  00FEC0  41                 	db	65	;'A'
  1214  00FEC1  4C                 	db	76	;'L'
  1215  00FEC2  4C                 	db	76	;'L'
  1216  00FEC3  20                 	db	32
  1217  00FEC4  43                 	db	67	;'C'
  1218  00FEC5  41                 	db	65	;'A'
  1219  00FEC6  4E                 	db	78	;'N'
  1220  00FEC7  53                 	db	83	;'S'
  1221  00FEC8  00                 	db	0
  1222  00FEC9                     STR_86:
  1223  00FEC9  54                 	db	84	;'T'
  1224  00FECA  53                 	db	83	;'S'
  1225  00FECB  54                 	db	84	;'T'
  1226  00FECC  3A                 	db	58	;':'
  1227  00FECD  20                 	db	32
  1228  00FECE  44                 	db	68	;'D'
  1229  00FECF  43                 	db	67	;'C'
  1230  00FED0  20                 	db	32
  1231  00FED1  4D                 	db	77	;'M'
  1232  00FED2  4F                 	db	79	;'O'
  1233  00FED3  54                 	db	84	;'T'
  1234  00FED4  4F                 	db	79	;'O'
  1235  00FED5  52                 	db	82	;'R'
  1236  00FED6  53                 	db	83	;'S'
  1237  00FED7  00                 	db	0
  1238  00FED8                     STR_70:
  1239  00FED8  41                 	db	65	;'A'
  1240  00FED9  4C                 	db	76	;'L'
  1241  00FEDA  47                 	db	71	;'G'
  1242  00FEDB  4F                 	db	79	;'O'
  1243  00FEDC  52                 	db	82	;'R'
  1244  00FEDD  49                 	db	73	;'I'
  1245  00FEDE  54                 	db	84	;'T'
  1246  00FEDF  48                 	db	72	;'H'
  1247  00FEE0  4D                 	db	77	;'M'
  1248  00FEE1  20                 	db	32
  1249  00FEE2  54                 	db	84	;'T'
  1250  00FEE3  45                 	db	69	;'E'
  1251  00FEE4  53                 	db	83	;'S'
  1252  00FEE5  54                 	db	84	;'T'
  1253  00FEE6  00                 	db	0
  1254  00FEE7                     STR_87:
  1255  00FEE7  50                 	db	80	;'P'
  1256  00FEE8  49                 	db	73	;'I'
  1257  00FEE9  4E                 	db	78	;'N'
  1258  00FEEA  20                 	db	32
  1259  00FEEB  52                 	db	82	;'R'
  1260  00FEEC  41                 	db	65	;'A'
  1261  00FEED  35                 	db	53	;'5'
  1262  00FEEE  20                 	db	32
  1263  00FEEF  48                 	db	72	;'H'
  1264  00FEF0  49                 	db	73	;'I'
  1265  00FEF1  47                 	db	71	;'G'
  1266  00FEF2  48                 	db	72	;'H'
  1267  00FEF3  2E                 	db	46
  1268  00FEF4  00                 	db	0
  1269  00FEF5                     STR_73:
  1270  00FEF5  41                 	db	65	;'A'
  1271  00FEF6  4C                 	db	76	;'L'
  1272  00FEF7  47                 	db	71	;'G'
  1273  00FEF8  32                 	db	50	;'2'
  1274  00FEF9  3A                 	db	58	;':'
  1275  00FEFA  20                 	db	32
  1276  00FEFB  31                 	db	49	;'1'
  1277  00FEFC  32                 	db	50	;'2'
  1278  00FEFD  20                 	db	32
  1279  00FEFE  43                 	db	67	;'C'
  1280  00FEFF  41                 	db	65	;'A'
  1281  00FF00  4E                 	db	78	;'N'
  1282  00FF01  53                 	db	83	;'S'
  1283  00FF02  00                 	db	0
  1284  00FF03                     STR_76:
  1285  00FF03  41                 	db	65	;'A'
  1286  00FF04  4C                 	db	76	;'L'
  1287  00FF05  47                 	db	71	;'G'
  1288  00FF06  35                 	db	53	;'5'
  1289  00FF07  3A                 	db	58	;':'
  1290  00FF08  20                 	db	32
  1291  00FF09  4E                 	db	78	;'N'
  1292  00FF0A  4F                 	db	79	;'O'
  1293  00FF0B  20                 	db	32
  1294  00FF0C  43                 	db	67	;'C'
  1295  00FF0D  41                 	db	65	;'A'
  1296  00FF0E  4E                 	db	78	;'N'
  1297  00FF0F  53                 	db	83	;'S'
  1298  00FF10  00                 	db	0
  1299  00FF11                     STR_71:
  1300  00FF11  50                 	db	80	;'P'
  1301  00FF12  55                 	db	85	;'U'
  1302  00FF13  53                 	db	83	;'S'
  1303  00FF14  48                 	db	72	;'H'
  1304  00FF15  20                 	db	32
  1305  00FF16  54                 	db	84	;'T'
  1306  00FF17  4F                 	db	79	;'O'
  1307  00FF18  20                 	db	32
  1308  00FF19  53                 	db	83	;'S'
  1309  00FF1A  54                 	db	84	;'T'
  1310  00FF1B  41                 	db	65	;'A'
  1311  00FF1C  52                 	db	82	;'R'
  1312  00FF1D  54                 	db	84	;'T'
  1313  00FF1E  00                 	db	0
  1314  00FF1F                     STR_23:
  1315  00FF1F  25                 	db	37
  1316  00FF20  64                 	db	100	;'d'
  1317  00FF21  20                 	db	32
  1318  00FF22  4D                 	db	77	;'M'
  1319  00FF23  49                 	db	73	;'I'
  1320  00FF24  4E                 	db	78	;'N'
  1321  00FF25  20                 	db	32
  1322  00FF26  25                 	db	37
  1323  00FF27  64                 	db	100	;'d'
  1324  00FF28  20                 	db	32
  1325  00FF29  53                 	db	83	;'S'
  1326  00FF2A  45                 	db	69	;'E'
  1327  00FF2B  43                 	db	67	;'C'
  1328  00FF2C  00                 	db	0
  1329  00FF2D                     STR_2:
  1330  00FF2D  54                 	db	84	;'T'
  1331  00FF2E  49                 	db	73	;'I'
  1332  00FF2F  4D                 	db	77	;'M'
  1333  00FF30  45                 	db	69	;'E'
  1334  00FF31  3A                 	db	58	;':'
  1335  00FF32  20                 	db	32
  1336  00FF33  25                 	db	37
  1337  00FF34  64                 	db	100	;'d'
  1338  00FF35  3A                 	db	58	;':'
  1339  00FF36  25                 	db	37
  1340  00FF37  30                 	db	48	;'0'
  1341  00FF38  32                 	db	50	;'2'
  1342  00FF39  64                 	db	100	;'d'
  1343  00FF3A  00                 	db	0
  1344  00FF3B                     STR_79:
  1345  00FF3B  54                 	db	84	;'T'
  1346  00FF3C  53                 	db	83	;'S'
  1347  00FF3D  54                 	db	84	;'T'
  1348  00FF3E  3A                 	db	58	;':'
  1349  00FF3F  20                 	db	32
  1350  00FF40  49                 	db	73	;'I'
  1351  00FF41  52                 	db	82	;'R'
  1352  00FF42  20                 	db	32
  1353  00FF43  53                 	db	83	;'S'
  1354  00FF44  4E                 	db	78	;'N'
  1355  00FF45  53                 	db	83	;'S'
  1356  00FF46  52                 	db	82	;'R'
  1357  00FF47  00                 	db	0
  1358  00FF48                     STR_109:
  1359  00FF48  53                 	db	83	;'S'
  1360  00FF49  4F                 	db	79	;'O'
  1361  00FF4A  4C                 	db	76	;'L'
  1362  00FF4B  45                 	db	69	;'E'
  1363  00FF4C  4E                 	db	78	;'N'
  1364  00FF4D  4F                 	db	79	;'O'
  1365  00FF4E  49                 	db	73	;'I'
  1366  00FF4F  44                 	db	68	;'D'
  1367  00FF50  20                 	db	32
  1368  00FF51  54                 	db	84	;'T'
  1369  00FF52  53                 	db	83	;'S'
  1370  00FF53  54                 	db	84	;'T'
  1371  00FF54  00                 	db	0
  1372  00FF55                     STR_65:
  1373  00FF55  54                 	db	84	;'T'
  1374  00FF56  49                 	db	73	;'I'
  1375  00FF57  4D                 	db	77	;'M'
  1376  00FF58  45                 	db	69	;'E'
  1377  00FF59  20                 	db	32
  1378  00FF5A  25                 	db	37
  1379  00FF5B  64                 	db	100	;'d'
  1380  00FF5C  3A                 	db	58	;':'
  1381  00FF5D  25                 	db	37
  1382  00FF5E  30                 	db	48	;'0'
  1383  00FF5F  32                 	db	50	;'2'
  1384  00FF60  64                 	db	100	;'d'
  1385  00FF61  00                 	db	0
  1386  00FF62                     STR_74:
  1387  00FF62  41                 	db	65	;'A'
  1388  00FF63  4C                 	db	76	;'L'
  1389  00FF64  47                 	db	71	;'G'
  1390  00FF65  33                 	db	51	;'3'
  1391  00FF66  3A                 	db	58	;':'
  1392  00FF67  20                 	db	32
  1393  00FF68  31                 	db	49	;'1'
  1394  00FF69  20                 	db	32
  1395  00FF6A  43                 	db	67	;'C'
  1396  00FF6B  41                 	db	65	;'A'
  1397  00FF6C  4E                 	db	78	;'N'
  1398  00FF6D  00                 	db	0
  1399  00FF6E                     STR_89:
  1400  00FF6E  50                 	db	80	;'P'
  1401  00FF6F  49                 	db	73	;'I'
  1402  00FF70  4E                 	db	78	;'N'
  1403  00FF71  20                 	db	32
  1404  00FF72  52                 	db	82	;'R'
  1405  00FF73  41                 	db	65	;'A'
  1406  00FF74  33                 	db	51	;'3'
  1407  00FF75  2E                 	db	46
  1408  00FF76  2E                 	db	46
  1409  00FF77  2E                 	db	46
  1410  00FF78  00                 	db	0
  1411  00FF79                     STR_91:
  1412  00FF79  50                 	db	80	;'P'
  1413  00FF7A  49                 	db	73	;'I'
  1414  00FF7B  4E                 	db	78	;'N'
  1415  00FF7C  20                 	db	32
  1416  00FF7D  52                 	db	82	;'R'
  1417  00FF7E  41                 	db	65	;'A'
  1418  00FF7F  34                 	db	52	;'4'
  1419  00FF80  2E                 	db	46
  1420  00FF81  2E                 	db	46
  1421  00FF82  2E                 	db	46
  1422  00FF83  00                 	db	0
  1423  00FF84                     STR_64:
  1424  00FF84  53                 	db	83	;'S'
  1425  00FF85  4F                 	db	79	;'O'
  1426  00FF86  52                 	db	82	;'R'
  1427  00FF87  54                 	db	84	;'T'
  1428  00FF88  49                 	db	73	;'I'
  1429  00FF89  4E                 	db	78	;'N'
  1430  00FF8A  47                 	db	71	;'G'
  1431  00FF8B  2E                 	db	46
  1432  00FF8C  2E                 	db	46
  1433  00FF8D  2E                 	db	46
  1434  00FF8E  00                 	db	0
  1435  00FF8F                     STR_110:
  1436  00FF8F  50                 	db	80	;'P'
  1437  00FF90  55                 	db	85	;'U'
  1438  00FF91  53                 	db	83	;'S'
  1439  00FF92  48                 	db	72	;'H'
  1440  00FF93  20                 	db	32
  1441  00FF94  44                 	db	68	;'D'
  1442  00FF95  4F                 	db	79	;'O'
  1443  00FF96  4E                 	db	78	;'N'
  1444  00FF97  45                 	db	69	;'E'
  1445  00FF98  00                 	db	0
  1446  00FF99                     STR_84:
  1447  00FF99  41                 	db	65	;'A'
  1448  00FF9A  43                 	db	67	;'C'
  1449  00FF9B  54                 	db	84	;'T'
  1450  00FF9C  55                 	db	85	;'U'
  1451  00FF9D  41                 	db	65	;'A'
  1452  00FF9E  54                 	db	84	;'T'
  1453  00FF9F  4F                 	db	79	;'O'
  1454  00FFA0  52                 	db	82	;'R'
  1455  00FFA1  53                 	db	83	;'S'
  1456  00FFA2  00                 	db	0
  1457  00FFA3                     STR_22:
  1458  00FFA3  44                 	db	68	;'D'
  1459  00FFA4  55                 	db	85	;'U'
  1460  00FFA5  52                 	db	82	;'R'
  1461  00FFA6  41                 	db	65	;'A'
  1462  00FFA7  54                 	db	84	;'T'
  1463  00FFA8  49                 	db	73	;'I'
  1464  00FFA9  4F                 	db	79	;'O'
  1465  00FFAA  4E                 	db	78	;'N'
  1466  00FFAB  3A                 	db	58	;':'
  1467  00FFAC  00                 	db	0
  1468  00FFAD                     STR_77:
  1469  00FFAD  53                 	db	83	;'S'
  1470  00FFAE  45                 	db	69	;'E'
  1471  00FFAF  4E                 	db	78	;'N'
  1472  00FFB0  53                 	db	83	;'S'
  1473  00FFB1  4F                 	db	79	;'O'
  1474  00FFB2  52                 	db	82	;'R'
  1475  00FFB3  53                 	db	83	;'S'
  1476  00FFB4  00                 	db	0
  1477  00FFB5                     STR_113:
  1478  00FFB5  28                 	db	40
  1479  00FFB6  6E                 	db	110	;'n'
  1480  00FFB7  75                 	db	117	;'u'
  1481  00FFB8  6C                 	db	108	;'l'
  1482  00FFB9  6C                 	db	108	;'l'
  1483  00FFBA  29                 	db	41
  1484  00FFBB  00                 	db	0
  1485  00FFBC                     STR_67:
  1486  00FFBC  46                 	db	70	;'F'
  1487  00FFBD  41                 	db	65	;'A'
  1488  00FFBE  49                 	db	73	;'I'
  1489  00FFBF  4C                 	db	76	;'L'
  1490  00FFC0  45                 	db	69	;'E'
  1491  00FFC1  44                 	db	68	;'D'
  1492  00FFC2  00                 	db	0
  1493  00FFC3                     STR_7:
  1494  00FFC3  53                 	db	83	;'S'
  1495  00FFC4  54                 	db	84	;'T'
  1496  00FFC5  41                 	db	65	;'A'
  1497  00FFC6  52                 	db	82	;'R'
  1498  00FFC7  54                 	db	84	;'T'
  1499  00FFC8  3A                 	db	58	;':'
  1500  00FFC9  00                 	db	0
  1501  00FFCA                     STR_9:
  1502  00FFCA  46                 	db	70	;'F'
  1503  00FFCB  45                 	db	69	;'E'
  1504  00FFCC  42                 	db	66	;'B'
  1505  00FFCD  00                 	db	0
  1506  00FFCE                     STR_19:
  1507  00FFCE  44                 	db	68	;'D'
  1508  00FFCF  45                 	db	69	;'E'
  1509  00FFD0  43                 	db	67	;'C'
  1510  00FFD1  00                 	db	0
  1511  00FFD2                     STR_15:
  1512  00FFD2  41                 	db	65	;'A'
  1513  00FFD3  55                 	db	85	;'U'
  1514  00FFD4  47                 	db	71	;'G'
  1515  00FFD5  00                 	db	0
  1516  00FFD6                     STR_14:
  1517  00FFD6  4A                 	db	74	;'J'
  1518  00FFD7  55                 	db	85	;'U'
  1519  00FFD8  4C                 	db	76	;'L'
  1520  00FFD9  00                 	db	0
  1521  00FFDA                     STR_8:
  1522  00FFDA  4A                 	db	74	;'J'
  1523  00FFDB  41                 	db	65	;'A'
  1524  00FFDC  4E                 	db	78	;'N'
  1525  00FFDD  00                 	db	0
  1526  00FFDE                     STR_13:
  1527  00FFDE  4A                 	db	74	;'J'
  1528  00FFDF  55                 	db	85	;'U'
  1529  00FFE0  4E                 	db	78	;'N'
  1530  00FFE1  00                 	db	0
  1531  00FFE2                     STR_16:
  1532  00FFE2  53                 	db	83	;'S'
  1533  00FFE3  45                 	db	69	;'E'
  1534  00FFE4  50                 	db	80	;'P'
  1535  00FFE5  00                 	db	0
  1536  00FFE6                     STR_10:
  1537  00FFE6  4D                 	db	77	;'M'
  1538  00FFE7  41                 	db	65	;'A'
  1539  00FFE8  52                 	db	82	;'R'
  1540  00FFE9  00                 	db	0
  1541  00FFEA                     STR_11:
  1542  00FFEA  41                 	db	65	;'A'
  1543  00FFEB  50                 	db	80	;'P'
  1544  00FFEC  52                 	db	82	;'R'
  1545  00FFED  00                 	db	0
  1546  00FFEE                     STR_20:
  1547  00FFEE  45                 	db	69	;'E'
  1548  00FFEF  52                 	db	82	;'R'
  1549  00FFF0  52                 	db	82	;'R'
  1550  00FFF1  00                 	db	0
  1551  00FFF2                     STR_17:
  1552  00FFF2  4F                 	db	79	;'O'
  1553  00FFF3  43                 	db	67	;'C'
  1554  00FFF4  54                 	db	84	;'T'
  1555  00FFF5  00                 	db	0
  1556  00FFF6                     STR_18:
  1557  00FFF6  4E                 	db	78	;'N'
  1558  00FFF7  4F                 	db	79	;'O'
  1559  00FFF8  56                 	db	86	;'V'
  1560  00FFF9  00                 	db	0
  1561  00FFFA                     STR_12:
  1562  00FFFA  4D                 	db	77	;'M'
  1563  00FFFB  41                 	db	65	;'A'
  1564  00FFFC  59                 	db	89	;'Y'
  1565  00FFFD  00                 	db	0
  1566  0000                     
  1567                           ; #config settings
  1568  00FFFE  00                 	db	0	; dummy byte at the end
  1569  0000                     
  1570                           	psect	cinit
  1571  003E90                     __pcinit:
  1572                           	opt stack 0
  1573  003E90                     start_initialization:
  1574                           	opt stack 0
  1575  003E90                     __initialization:
  1576                           	opt stack 0
  1577                           
  1578                           ; Initialize objects allocated to BANK1 (8 bytes)
  1579                           ; load TBLPTR registers with __pidataBANK1
  1580  003E90  0EE4               	movlw	low __pidataBANK1
  1581  003E92  6EF6               	movwf	tblptrl,c
  1582  003E94  0E45               	movlw	high __pidataBANK1
  1583  003E96  6EF7               	movwf	tblptrh,c
  1584  003E98  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1585  003E9A  6EF8               	movwf	tblptru,c
  1586  003E9C  EE01  F02D         	lfsr	0,__pdataBANK1
  1587  003EA0  EE10 F008          	lfsr	1,8
  1588  003EA4                     copy_data0:
  1589  003EA4  0009               	tblrd		*+
  1590  003EA6  CFF5 FFEE          	movff	tablat,postinc0
  1591  003EAA  50E5               	movf	postdec1,w,c
  1592  003EAC  50E1               	movf	fsr1l,w,c
  1593  003EAE  E1FA               	bnz	copy_data0
  1594                           
  1595                           ; Clear objects allocated to BANK1 (45 bytes)
  1596  003EB0  EE01  F000         	lfsr	0,__pbssBANK1
  1597  003EB4  0E2D               	movlw	45
  1598  003EB6                     clear_0:
  1599  003EB6  6AEE               	clrf	postinc0,c
  1600  003EB8  06E8               	decf	wreg,f,c
  1601  003EBA  E1FD               	bnz	clear_0
  1602                           
  1603                           ; Clear objects allocated to BANK0 (38 bytes)
  1604  003EBC  EE00  F0DA         	lfsr	0,__pbssBANK0
  1605  003EC0  0E26               	movlw	38
  1606  003EC2                     clear_1:
  1607  003EC2  6AEE               	clrf	postinc0,c
  1608  003EC4  06E8               	decf	wreg,f,c
  1609  003EC6  E1FD               	bnz	clear_1
  1610                           
  1611                           ; Clear objects allocated to COMRAM (35 bytes)
  1612  003EC8  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1613  003ECC  0E23               	movlw	35
  1614  003ECE                     clear_2:
  1615  003ECE  6AEE               	clrf	postinc0,c
  1616  003ED0  06E8               	decf	wreg,f,c
  1617  003ED2  E1FD               	bnz	clear_2
  1618  003ED4                     end_of_initialization:
  1619                           	opt stack 0
  1620  003ED4                     __end_of__initialization:
  1621                           	opt stack 0
  1622  003ED4  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1623  003ED6  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1624  003ED8  0100               	movlb	0
  1625  003EDA  EF98  F01B         	goto	_main	;jump to C main() function
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           
  1635                           	psect	bssCOMRAM
  1636  00005B                     __pbssCOMRAM:
  1637                           	opt stack 0
  1638  00005B                     _back:
  1639                           	opt stack 0
  1640  00005B                     	ds	2
  1641  00005D                     _count_can_no_lab:
  1642                           	opt stack 0
  1643  00005D                     	ds	2
  1644  00005F                     _count_can_w_lab:
  1645                           	opt stack 0
  1646  00005F                     	ds	2
  1647  000061                     _count_pop_no_tab:
  1648                           	opt stack 0
  1649  000061                     	ds	2
  1650  000063                     _count_pop_w_tab:
  1651                           	opt stack 0
  1652  000063                     	ds	2
  1653  000065                     _cur_can:
  1654                           	opt stack 0
  1655  000065                     	ds	2
  1656  000067                     _down:
  1657                           	opt stack 0
  1658  000067                     	ds	2
  1659  000069                     _enter:
  1660                           	opt stack 0
  1661  000069                     	ds	2
  1662  00006B                     _f_ID_receive:
  1663                           	opt stack 0
  1664  00006B                     	ds	2
  1665  00006D                     _f_can_coming_to_ID:
  1666                           	opt stack 0
  1667  00006D                     	ds	2
  1668  00006F                     _f_can_coming_to_distribution:
  1669                           	opt stack 0
  1670  00006F                     	ds	2
  1671  000071                     _f_can_distributed:
  1672                           	opt stack 0
  1673  000071                     	ds	2
  1674  000073                     _f_lastCan:
  1675                           	opt stack 0
  1676  000073                     	ds	2
  1677  000075                     _firstboot:
  1678                           	opt stack 0
  1679  000075                     	ds	2
  1680  000077                     _up:
  1681                           	opt stack 0
  1682  000077                     	ds	2
  1683  000079                     _was_low_1:
  1684                           	opt stack 0
  1685  000079                     	ds	2
  1686  00007B                     _was_low_3:
  1687                           	opt stack 0
  1688  00007B                     	ds	2
  1689  00007D                     _input:
  1690                           	opt stack 0
  1691  00007D                     	ds	1
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           
  1701                           	psect	bssBANK0
  1702  0000DA                     __pbssBANK0:
  1703                           	opt stack 0
  1704  0000DA                     _IR_signal:
  1705                           	opt stack 0
  1706  0000DA                     	ds	2
  1707  0000DC                     _MAG_signal:
  1708                           	opt stack 0
  1709  0000DC                     	ds	2
  1710  0000DE                     _cur_state:
  1711                           	opt stack 0
  1712  0000DE                     	ds	2
  1713  0000E0                     _debug:
  1714                           	opt stack 0
  1715  0000E0                     	ds	2
  1716  0000E2                     _f_loadingNewCan:
  1717                           	opt stack 0
  1718  0000E2                     	ds	2
  1719  0000E4                     _first:
  1720                           	opt stack 0
  1721  0000E4                     	ds	2
  1722  0000E6                     _log:
  1723                           	opt stack 0
  1724  0000E6                     	ds	2
  1725  0000E8                     _log_completion:
  1726                           	opt stack 0
  1727  0000E8                     	ds	2
  1728  0000EA                     _log_count_can_no_lab:
  1729                           	opt stack 0
  1730  0000EA                     	ds	2
  1731  0000EC                     _log_count_can_w_lab:
  1732                           	opt stack 0
  1733  0000EC                     	ds	2
  1734  0000EE                     _log_count_pop_no_tab:
  1735                           	opt stack 0
  1736  0000EE                     	ds	2
  1737  0000F0                     _log_count_pop_w_tab:
  1738                           	opt stack 0
  1739  0000F0                     	ds	2
  1740  0000F2                     _log_count_total:
  1741                           	opt stack 0
  1742  0000F2                     	ds	2
  1743  0000F4                     _log_total_time:
  1744                           	opt stack 0
  1745  0000F4                     	ds	2
  1746  0000F6                     _logstate:
  1747                           	opt stack 0
  1748  0000F6                     	ds	2
  1749  0000F8                     _total_time:
  1750                           	opt stack 0
  1751  0000F8                     	ds	2
  1752  0000FA                     _var:
  1753                           	opt stack 0
  1754  0000FA                     	ds	2
  1755  0000FC                     _machine_state:
  1756                           	opt stack 0
  1757  0000FC                     	ds	1
  1758  0000FD                     _sel:
  1759                           	opt stack 0
  1760  0000FD                     	ds	1
  1761  0000FE                     _count_total:
  1762                           	opt stack 0
  1763  0000FE                     	ds	2
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           
  1773                           	psect	bssBANK1
  1774  000100                     __pbssBANK1:
  1775                           	opt stack 0
  1776  000100                     _log_startTime:
  1777                           	opt stack 0
  1778  000100                     	ds	14
  1779  00010E                     _startTime:
  1780                           	opt stack 0
  1781  00010E                     	ds	14
  1782  00011C                     _servoTimes:
  1783                           	opt stack 0
  1784  00011C                     	ds	8
  1785  000124                     _time:
  1786                           	opt stack 0
  1787  000124                     	ds	7
  1788  00012B                     _i:
  1789                           	opt stack 0
  1790  00012B                     	ds	2
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           postdec1	equ	0xFE5
  1798                           fsr1l	equ	0xFE1
  1799                           
  1800                           	psect	dataBANK1
  1801  00012D                     __pdataBANK1:
  1802                           	opt stack 0
  1803  00012D                     UI@F3222:
  1804                           	opt stack 0
  1805  00012D                     	ds	4
  1806  000131                     printRTC@F3213:
  1807                           	opt stack 0
  1808  000131                     	ds	4
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           fsr1l	equ	0xFE1
  1817                           
  1818                           	psect	cstackBANK0
  1819  000080                     __pcstackBANK0:
  1820                           	opt stack 0
  1821  000080                     ??_delay_ms:
  1822  000080                     ??_PortTests:
  1823  000080                     ??_isdigit:
  1824  000080                     ??_readADC:
  1825  000080                     ??_I2C_Master_Wait:
  1826  000080                     ?___wmul:
  1827                           	opt stack 0
  1828  000080                     ?___awmod:
  1829                           	opt stack 0
  1830  000080                     ?___lwdiv:
  1831                           	opt stack 0
  1832  000080                     ?___lldiv:
  1833                           	opt stack 0
  1834  000080                     lcdNibble@temp:
  1835                           	opt stack 0
  1836  000080                     initTime@m:
  1837                           	opt stack 0
  1838  000080                     updateServoPosition@time_us:
  1839                           	opt stack 0
  1840  000080                     EEPROM_read@address:
  1841                           	opt stack 0
  1842  000080                     ___wmul@multiplier:
  1843                           	opt stack 0
  1844  000080                     ___awmod@dividend:
  1845                           	opt stack 0
  1846  000080                     ___lwdiv@dividend:
  1847                           	opt stack 0
  1848  000080                     strcpy@to:
  1849                           	opt stack 0
  1850  000080                     ___lldiv@dividend:
  1851                           	opt stack 0
  1852                           
  1853                           ; 4 bytes @ 0x0
  1854  000080                     	ds	1
  1855  000081                     readADC@channel:
  1856                           	opt stack 0
  1857  000081                     I2C_Master_Read@a:
  1858                           	opt stack 0
  1859  000081                     lcdNibble@data:
  1860                           	opt stack 0
  1861  000081                     initTime@h:
  1862                           	opt stack 0
  1863  000081                     delay_ms@milliseconds:
  1864                           	opt stack 0
  1865  000081                     _isdigit$1891:
  1866                           	opt stack 0
  1867  000081                     I2C_Master_Write@d:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x1
  1871  000081                     	ds	1
  1872  000082                     ??_readIR:
  1873  000082                     ??_readMAG:
  1874  000082                     I2C_Master_Read@temp:
  1875                           	opt stack 0
  1876  000082                     lcdInst@data:
  1877                           	opt stack 0
  1878  000082                     putch@data:
  1879                           	opt stack 0
  1880  000082                     initTime@w:
  1881                           	opt stack 0
  1882  000082                     isdigit@c:
  1883                           	opt stack 0
  1884  000082                     updateServoPosition@timer:
  1885                           	opt stack 0
  1886  000082                     ___wmul@multiplicand:
  1887                           	opt stack 0
  1888  000082                     ___awmod@divisor:
  1889                           	opt stack 0
  1890  000082                     ___lwdiv@divisor:
  1891                           	opt stack 0
  1892  000082                     strcpy@from:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x2
  1896  000082                     	ds	1
  1897  000083                     ??_initLCD:
  1898  000083                     initTime@DD:
  1899                           	opt stack 0
  1900  000083                     getRTC@i:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x3
  1904  000083                     	ds	1
  1905  000084                     ??_updateServoPosition:
  1906  000084                     initTime@MM:
  1907                           	opt stack 0
  1908  000084                     ___awmod@counter:
  1909                           	opt stack 0
  1910  000084                     readIR@res:
  1911                           	opt stack 0
  1912  000084                     readMAG@res:
  1913                           	opt stack 0
  1914  000084                     ___wmul@product:
  1915                           	opt stack 0
  1916  000084                     ___lwdiv@quotient:
  1917                           	opt stack 0
  1918  000084                     strcpy@cp:
  1919                           	opt stack 0
  1920  000084                     ___lldiv@divisor:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0x4
  1924  000084                     	ds	1
  1925  000085                     ??_initSortTimer:
  1926  000085                     initTime@YY:
  1927                           	opt stack 0
  1928  000085                     ___awmod@sign:
  1929                           	opt stack 0
  1930                           
  1931                           ; 1 bytes @ 0x5
  1932  000085                     	ds	1
  1933  000086                     ??_ID:
  1934  000086                     ??_getIR:
  1935  000086                     ?___awdiv:
  1936                           	opt stack 0
  1937  000086                     initTime@s:
  1938                           	opt stack 0
  1939  000086                     ___lwdiv@counter:
  1940                           	opt stack 0
  1941  000086                     updateServoPosition@my_time:
  1942                           	opt stack 0
  1943  000086                     ___awdiv@dividend:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x6
  1947  000086                     	ds	1
  1948  000087                     ?___lwmod:
  1949                           	opt stack 0
  1950  000087                     ___lwmod@dividend:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x7
  1954  000087                     	ds	1
  1955  000088                     ??_Distribution:
  1956  000088                     ??_initServos:
  1957  000088                     initSortTimer@i:
  1958                           	opt stack 0
  1959  000088                     ___awdiv@divisor:
  1960                           	opt stack 0
  1961  000088                     ___lldiv@quotient:
  1962                           	opt stack 0
  1963  000088                     ID@sensor_outputs:
  1964                           	opt stack 0
  1965                           
  1966                           ; 6 bytes @ 0x8
  1967  000088                     	ds	1
  1968  000089                     ___lwmod@divisor:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0x9
  1972  000089                     	ds	1
  1973  00008A                     ___awdiv@counter:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0xA
  1977  00008A                     	ds	1
  1978  00008B                     ___awdiv@sign:
  1979                           	opt stack 0
  1980  00008B                     ___lwmod@counter:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0xB
  1984  00008B                     	ds	1
  1985  00008C                     ___lldiv@counter:
  1986                           	opt stack 0
  1987  00008C                     ___awdiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 2 bytes @ 0xC
  1991  00008C                     	ds	1
  1992  00008D                     I2C_Master_Init@c:
  1993                           	opt stack 0
  1994                           
  1995                           ; 4 bytes @ 0xD
  1996  00008D                     	ds	1
  1997  00008E                     ?_printf:
  1998                           	opt stack 0
  1999  00008E                     printf@f:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0xE
  2003  00008E                     	ds	3
  2004  000091                     ??_I2C_Master_Init:
  2005                           
  2006                           ; 1 bytes @ 0x11
  2007  000091                     	ds	4
  2008  000095                     ??_loadRTC:
  2009                           
  2010                           ; 1 bytes @ 0x15
  2011  000095                     	ds	1
  2012  000096                     loadRTC@i:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x16
  2016  000096                     	ds	4
  2017  00009A                     ??_printf:
  2018                           
  2019                           ; 1 bytes @ 0x1A
  2020  00009A                     	ds	4
  2021  00009E                     printf@prec:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x1E
  2025  00009E                     	ds	1
  2026  00009F                     printf@cp:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x1F
  2030  00009F                     	ds	2
  2031  0000A1                     printf@ap:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x21
  2035  0000A1                     	ds	2
  2036  0000A3                     printf@len:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x23
  2040  0000A3                     	ds	2
  2041  0000A5                     printf@val:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x25
  2045  0000A5                     	ds	2
  2046  0000A7                     printf@flag:
  2047                           	opt stack 0
  2048                           
  2049                           ; 1 bytes @ 0x27
  2050  0000A7                     	ds	1
  2051  0000A8                     printf@c:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x28
  2055  0000A8                     	ds	1
  2056  0000A9                     printf@width:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x29
  2060  0000A9                     	ds	2
  2061  0000AB                     ??_printRTC:
  2062  0000AB                     ??_algorithmTest:
  2063  0000AB                     ??_sensorTest:
  2064  0000AB                     ??_actuatorTest:
  2065  0000AB                     ??_PortTestA5:
  2066  0000AB                     ??_ToggleTestA5:
  2067  0000AB                     ??_SolenoidTestA5:
  2068  0000AB                     ??_BothServos:
  2069  0000AB                     EEPROM_write@address:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x2B
  2073  0000AB                     	ds	1
  2074  0000AC                     ToggleTestA5@on:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x2C
  2078  0000AC                     	ds	1
  2079  0000AD                     EEPROM_write@data:
  2080                           	opt stack 0
  2081  0000AD                     actuatorTest@i_1582:
  2082                           	opt stack 0
  2083  0000AD                     sensorTest@res:
  2084                           	opt stack 0
  2085  0000AD                     SolenoidTestA5@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x2D
  2089  0000AD                     	ds	1
  2090  0000AE                     ??_EEPROM_write:
  2091  0000AE                     actuatorTest@i_1589:
  2092                           	opt stack 0
  2093  0000AE                     printRTC@INT_time:
  2094                           	opt stack 0
  2095                           
  2096                           ; 14 bytes @ 0x2E
  2097  0000AE                     	ds	1
  2098  0000AF                     EEPROM_write@i:
  2099                           	opt stack 0
  2100  0000AF                     actuatorTest@i_1590:
  2101                           	opt stack 0
  2102  0000AF                     SolenoidTestA5@i_1635:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0x2F
  2106  0000AF                     	ds	1
  2107  0000B0                     EEPROM_write@i_1319:
  2108                           	opt stack 0
  2109  0000B0                     actuatorTest@i_1592:
  2110                           	opt stack 0
  2111  0000B0                     SolenoidTestA5@i_1637:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x30
  2115  0000B0                     	ds	1
  2116  0000B1                     ??_Loading:
  2117  0000B1                     logRun@num:
  2118                           	opt stack 0
  2119  0000B1                     actuatorTest@i_1593:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x31
  2123  0000B1                     	ds	1
  2124  0000B2                     logRun@byte1:
  2125                           	opt stack 0
  2126  0000B2                     actuatorTest@i_1595:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x32
  2130  0000B2                     	ds	1
  2131  0000B3                     logRun@byte2:
  2132                           	opt stack 0
  2133  0000B3                     actuatorTest@i_1596:
  2134                           	opt stack 0
  2135  0000B3                     Loading@addr:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x33
  2139  0000B3                     	ds	1
  2140  0000B4                     logRun@byte3:
  2141                           	opt stack 0
  2142  0000B4                     actuatorTest@i_1598:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x34
  2146  0000B4                     	ds	1
  2147  0000B5                     Loading@byte1:
  2148                           	opt stack 0
  2149  0000B5                     logRun@byte_i:
  2150                           	opt stack 0
  2151  0000B5                     actuatorTest@i_1599:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x35
  2155  0000B5                     	ds	1
  2156  0000B6                     logRun@byte11:
  2157                           	opt stack 0
  2158  0000B6                     actuatorTest@i_1601:
  2159                           	opt stack 0
  2160  0000B6                     Loading@i:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x36
  2164  0000B6                     	ds	1
  2165  0000B7                     actuatorTest@i_1602:
  2166                           	opt stack 0
  2167  0000B7                     logRun@i:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x37
  2171  0000B7                     	ds	1
  2172  0000B8                     actuatorTest@i_1604:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x38
  2176  0000B8                     	ds	1
  2177  0000B9                     actuatorTest@i_1605:
  2178                           	opt stack 0
  2179  0000B9                     logRun@addr:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x39
  2183  0000B9                     	ds	1
  2184  0000BA                     actuatorTest@i_1608:
  2185                           	opt stack 0
  2186                           
  2187                           ; 1 bytes @ 0x3A
  2188  0000BA                     	ds	1
  2189  0000BB                     actuatorTest@i_1609:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x3B
  2193  0000BB                     	ds	1
  2194  0000BC                     actuatorTest@i_1611:
  2195                           	opt stack 0
  2196  0000BC                     printRTC@RTC_month:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x3C
  2200  0000BC                     	ds	1
  2201  0000BD                     actuatorTest@i_1612:
  2202                           	opt stack 0
  2203                           
  2204                           ; 1 bytes @ 0x3D
  2205  0000BD                     	ds	1
  2206  0000BE                     actuatorTest@i_1614:
  2207                           	opt stack 0
  2208  0000BE                     printRTC@month:
  2209                           	opt stack 0
  2210                           
  2211                           ; 4 bytes @ 0x3E
  2212  0000BE                     	ds	1
  2213  0000BF                     actuatorTest@i_1615:
  2214                           	opt stack 0
  2215                           
  2216                           ; 1 bytes @ 0x3F
  2217  0000BF                     	ds	1
  2218  0000C0                     actuatorTest@i_1618:
  2219                           	opt stack 0
  2220                           
  2221                           ; 1 bytes @ 0x40
  2222  0000C0                     	ds	1
  2223  0000C1                     actuatorTest@i_1619:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x41
  2227  0000C1                     	ds	1
  2228  0000C2                     actuatorTest@i_1621:
  2229                           	opt stack 0
  2230  0000C2                     printRTC@i:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x42
  2234  0000C2                     	ds	1
  2235  0000C3                     actuatorTest@i_1622:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x43
  2239  0000C3                     	ds	1
  2240  0000C4                     ??_UI:
  2241  0000C4                     actuatorTest@i:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x44
  2245  0000C4                     	ds	2
  2246  0000C6                     ??_Test:
  2247  0000C6                     _UI$2244:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x46
  2251  0000C6                     	ds	2
  2252  0000C8                     UI@i:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x48
  2256  0000C8                     	ds	1
  2257  0000C9                     UI@i_408:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x49
  2261  0000C9                     	ds	1
  2262  0000CA                     UI@i_411:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x4A
  2266  0000CA                     	ds	1
  2267  0000CB                     UI@i_412:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x4B
  2271  0000CB                     	ds	1
  2272  0000CC                     UI@i_430:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x4C
  2276  0000CC                     	ds	1
  2277  0000CD                     UI@i_431:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x4D
  2281  0000CD                     	ds	1
  2282  0000CE                     UI@i_434:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x4E
  2286  0000CE                     	ds	1
  2287  0000CF                     UI@i_435:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x4F
  2291  0000CF                     	ds	1
  2292  0000D0                     UI@i_438:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x50
  2296  0000D0                     	ds	1
  2297  0000D1                     UI@i_439:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x51
  2301  0000D1                     	ds	1
  2302  0000D2                     UI@i_442:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x52
  2306  0000D2                     	ds	1
  2307  0000D3                     UI@i_443:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0x53
  2311  0000D3                     	ds	1
  2312  0000D4                     UI@i_446:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x54
  2316  0000D4                     	ds	1
  2317  0000D5                     UI@i_447:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x55
  2321  0000D5                     	ds	1
  2322  0000D6                     UI@month:
  2323                           	opt stack 0
  2324                           
  2325                           ; 4 bytes @ 0x56
  2326  0000D6                     	ds	4
  2327  0000DA                     tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1l	equ	0xFE1
  2335                           
  2336                           ; 1 bytes @ 0x5A
  2337                           
  2338                           	psect	cstackCOMRAM
  2339  000001                     __pcstackCOMRAM:
  2340                           	opt stack 0
  2341  000001                     ??i2_I2C_Master_Wait:
  2342  000001                     ??i2_isdigit:
  2343  000001                     ?i2___wmul:
  2344                           	opt stack 0
  2345  000001                     ?i2___lwmod:
  2346                           	opt stack 0
  2347  000001                     i2lcdNibble@temp:
  2348                           	opt stack 0
  2349  000001                     i2EEPROM_read@address:
  2350                           	opt stack 0
  2351  000001                     i2___wmul@multiplier:
  2352                           	opt stack 0
  2353  000001                     i2___lwmod@dividend:
  2354                           	opt stack 0
  2355  000001                     i2strcpy@to:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x0
  2359  000001                     	ds	1
  2360  000002                     i2I2C_Master_Read@a:
  2361                           	opt stack 0
  2362  000002                     i2lcdNibble@data:
  2363                           	opt stack 0
  2364  000002                     i2_isdigit$1891:
  2365                           	opt stack 0
  2366  000002                     i2I2C_Master_Write@d:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x1
  2370  000002                     	ds	1
  2371  000003                     i2I2C_Master_Read@temp:
  2372                           	opt stack 0
  2373  000003                     i2lcdInst@data:
  2374                           	opt stack 0
  2375  000003                     i2putch@data:
  2376                           	opt stack 0
  2377  000003                     i2isdigit@c:
  2378                           	opt stack 0
  2379  000003                     i2___wmul@multiplicand:
  2380                           	opt stack 0
  2381  000003                     i2___lwmod@divisor:
  2382                           	opt stack 0
  2383  000003                     i2strcpy@from:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x2
  2387  000003                     	ds	1
  2388  000004                     i2getRTC@i:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x3
  2392  000004                     	ds	1
  2393  000005                     i2___lwmod@counter:
  2394                           	opt stack 0
  2395  000005                     i2___wmul@product:
  2396                           	opt stack 0
  2397  000005                     i2strcpy@cp:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x4
  2401  000005                     	ds	1
  2402  000006                     ?i2___lwdiv:
  2403                           	opt stack 0
  2404  000006                     i2___lwdiv@dividend:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x5
  2408  000006                     	ds	1
  2409  000007                     retrieveLog@logNum:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x6
  2413  000007                     	ds	1
  2414  000008                     i2___lwdiv@divisor:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x7
  2418  000008                     	ds	1
  2419  000009                     ??_retrieveLog:
  2420                           
  2421                           ; 1 bytes @ 0x8
  2422  000009                     	ds	1
  2423  00000A                     i2___lwdiv@quotient:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x9
  2427  00000A                     	ds	1
  2428  00000B                     retrieveLog@byte1:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0xA
  2432  00000B                     	ds	1
  2433  00000C                     retrieveLog@byte2:
  2434                           	opt stack 0
  2435  00000C                     i2___lwdiv@counter:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0xB
  2439  00000C                     	ds	1
  2440  00000D                     ?i2_printf:
  2441                           	opt stack 0
  2442  00000D                     retrieveLog@byte3:
  2443                           	opt stack 0
  2444  00000D                     i2printf@f:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0xC
  2448  00000D                     	ds	1
  2449  00000E                     retrieveLog@i:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0xD
  2453  00000E                     	ds	2
  2454  000010                     retrieveLog@addr:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0xF
  2458  000010                     	ds	2
  2459  000012                     dispLogs@myLog:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x11
  2463  000012                     	ds	2
  2464  000014                     
  2465                           ; 1 bytes @ 0x13
  2466  000014                     	ds	5
  2467  000019                     ??i2_printf:
  2468                           
  2469                           ; 1 bytes @ 0x18
  2470  000019                     	ds	4
  2471  00001D                     i2printf@prec:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x1C
  2475  00001D                     	ds	1
  2476  00001E                     i2printf@cp:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x1D
  2480  00001E                     	ds	2
  2481  000020                     i2printf@ap:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x1F
  2485  000020                     	ds	2
  2486  000022                     i2printf@len:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x21
  2490  000022                     	ds	2
  2491  000024                     i2printf@val:
  2492                           	opt stack 0
  2493                           
  2494                           ; 2 bytes @ 0x23
  2495  000024                     	ds	2
  2496  000026                     i2printf@flag:
  2497                           	opt stack 0
  2498                           
  2499                           ; 1 bytes @ 0x25
  2500  000026                     	ds	1
  2501  000027                     i2printf@c:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x26
  2505  000027                     	ds	1
  2506  000028                     i2printf@width:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x27
  2510  000028                     	ds	2
  2511  00002A                     ??_printSortTimer:
  2512  00002A                     ??i2_printRTC:
  2513  00002A                     ?_inputHandler:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x29
  2517  00002A                     	ds	2
  2518  00002C                     ??_inputHandler:
  2519                           
  2520                           ; 1 bytes @ 0x2B
  2521  00002C                     	ds	1
  2522  00002D                     printSortTimer@hour:
  2523                           	opt stack 0
  2524  00002D                     i2printRTC@INT_time:
  2525                           	opt stack 0
  2526                           
  2527                           ; 14 bytes @ 0x2C
  2528  00002D                     	ds	2
  2529  00002F                     printSortTimer@curTime:
  2530                           	opt stack 0
  2531                           
  2532                           ; 14 bytes @ 0x2E
  2533  00002F                     	ds	12
  2534  00003B                     i2printRTC@RTC_month:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x3A
  2538  00003B                     	ds	2
  2539  00003D                     printSortTimer@start_sec:
  2540                           	opt stack 0
  2541  00003D                     i2printRTC@month:
  2542                           	opt stack 0
  2543                           
  2544                           ; 4 bytes @ 0x3C
  2545  00003D                     	ds	2
  2546  00003F                     printSortTimer@cur_sec:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0x3E
  2550  00003F                     	ds	2
  2551  000041                     printSortTimer@min:
  2552                           	opt stack 0
  2553  000041                     i2printRTC@i:
  2554                           	opt stack 0
  2555                           
  2556                           ; 2 bytes @ 0x40
  2557  000041                     	ds	2
  2558  000043                     ??_updateMenu:
  2559  000043                     printSortTimer@sec:
  2560                           	opt stack 0
  2561                           
  2562                           ; 2 bytes @ 0x42
  2563  000043                     	ds	2
  2564  000045                     _printSortTimer$2364:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x44
  2568  000045                     	ds	2
  2569  000047                     printSortTimer@timeDiff:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x46
  2573  000047                     	ds	2
  2574  000049                     printSortTimer@i:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x48
  2578  000049                     	ds	2
  2579  00004B                     ??_handler:
  2580                           
  2581                           ; 1 bytes @ 0x4A
  2582  00004B                     	ds	16
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           postinc0	equ	0xFEE
  2588                           wreg	equ	0xFE8
  2589                           postdec1	equ	0xFE5
  2590                           fsr1l	equ	0xFE1
  2591                           
  2592 ;;
  2593 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2594 ;;
  2595 ;; *************** function _main *****************
  2596 ;; Defined at:
  2597 ;;		line 18 in file "main.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;Total ram usage:        0 bytes
  2616 ;; Hardware stack levels required when called:   13
  2617 ;; This function calls:
  2618 ;;		_Test
  2619 ;;		_UI
  2620 ;;		_initLCD
  2621 ;;		_initTime
  2622 ;;		_initUI
  2623 ;;		_logRun
  2624 ;;		_machineConfig
  2625 ;;		_sort
  2626 ;;		_stopSignals
  2627 ;; This function is called by:
  2628 ;;		Startup code after reset
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text0
  2633  003730                     __ptext0:
  2634                           	opt stack 0
  2635  003730                     _main:
  2636                           	opt stack 18
  2637                           
  2638                           ;main.c: 19: machineConfig();
  2639                           
  2640                           ;incstack = 0
  2641  003730  EC6B  F01E         	call	_machineConfig	;wreg free
  2642                           
  2643                           ;main.c: 20: initLCD();
  2644  003734  ECE2  F01F         	call	_initLCD	;wreg free
  2645                           
  2646                           ;main.c: 21: initTime(0x42, 0x25, 0x13, 0x04, 0x15, 0x03, 0x17);
  2647  003738  0E25               	movlw	37
  2648  00373A  0100               	movlb	0	; () banked
  2649  00373C  6F80               	movwf	initTime@m& (0+255),b
  2650  00373E  0E13               	movlw	19
  2651  003740  0100               	movlb	0	; () banked
  2652  003742  6F81               	movwf	initTime@h& (0+255),b
  2653  003744  0E04               	movlw	4
  2654  003746  0100               	movlb	0	; () banked
  2655  003748  6F82               	movwf	initTime@w& (0+255),b
  2656  00374A  0E15               	movlw	21
  2657  00374C  0100               	movlb	0	; () banked
  2658  00374E  6F83               	movwf	initTime@DD& (0+255),b
  2659  003750  0E03               	movlw	3
  2660  003752  0100               	movlb	0	; () banked
  2661  003754  6F84               	movwf	initTime@MM& (0+255),b
  2662  003756  0E17               	movlw	23
  2663  003758  0100               	movlb	0	; () banked
  2664  00375A  6F85               	movwf	initTime@YY& (0+255),b
  2665  00375C  0E42               	movlw	66
  2666  00375E  EC77  F022         	call	_initTime
  2667                           
  2668                           ;main.c: 22: initUI();
  2669  003762  EC42  F022         	call	_initUI	;wreg free
  2670                           
  2671                           ;main.c: 23: first = 1;
  2672  003766  0E00               	movlw	0
  2673  003768  0100               	movlb	0	; () banked
  2674  00376A  6FE5               	movwf	(_first+1)& (0+255),b
  2675  00376C  0E01               	movlw	1
  2676  00376E  6FE4               	movwf	_first& (0+255),b
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 34: switch(machine_state){
  2680                           
  2681                           ;main.c: 33: while(1){
  2682  003770  D018               	goto	l7940
  2683  003772                     l7922:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 36: UI();
  2687  003772  EC09  F000         	call	_UI	;wreg free
  2688                           
  2689                           ;main.c: 37: break;
  2690  003776  D015               	goto	l7940
  2691  003778                     l7924:
  2692                           
  2693                           ;main.c: 39: sort();
  2694  003778  EC66  F022         	call	_sort	;wreg free
  2695                           
  2696                           ;main.c: 40: break;
  2697  00377C  D012               	goto	l7940
  2698  00377E                     l7926:
  2699                           
  2700                           ;main.c: 42: stopSignals();
  2701  00377E  ECA3  F022         	call	_stopSignals	;wreg free
  2702                           
  2703                           ;main.c: 43: logRun();
  2704  003782  EC97  F016         	call	_logRun	;wreg free
  2705                           
  2706                           ;main.c: 44: first = 1;
  2707  003786  0E00               	movlw	0
  2708  003788  0100               	movlb	0	; () banked
  2709  00378A  6FE5               	movwf	(_first+1)& (0+255),b
  2710  00378C  0E01               	movlw	1
  2711  00378E  6FE4               	movwf	_first& (0+255),b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 45: UI();
  2715  003790  EC09  F000         	call	_UI	;wreg free
  2716                           
  2717                           ;main.c: 46: break;
  2718  003794  D006               	goto	l7940
  2719  003796                     l7934:
  2720                           
  2721                           ;main.c: 48: Test();
  2722  003796  EC53  F018         	call	_Test	;wreg free
  2723                           
  2724                           ;main.c: 49: break;
  2725  00379A  D003               	goto	l7940
  2726  00379C                     l7936:
  2727                           
  2728                           ;main.c: 51: stopSignals();
  2729  00379C  ECA3  F022         	call	_stopSignals	;wreg free
  2730  0037A0                     l478:
  2731  0037A0  D7FF               	goto	l478
  2732  0037A2                     l7940:
  2733  0037A2  0100               	movlb	0	; () banked
  2734  0037A4  51FC               	movf	_machine_state& (0+255),w,b
  2735                           
  2736                           ; Switch size 1, requested type "space"
  2737                           ; Number of cases is 5, Range of values is 0 to 4
  2738                           ; switch strategies available:
  2739                           ; Name         Instructions Cycles
  2740                           ; simple_byte           16     9 (average)
  2741                           ;	Chosen strategy is simple_byte
  2742  0037A6  0A00               	xorlw	0	; case 0
  2743  0037A8  B4D8               	btfsc	status,2,c
  2744  0037AA  D7E3               	goto	l7922
  2745  0037AC  0A01               	xorlw	1	; case 1
  2746  0037AE  B4D8               	btfsc	status,2,c
  2747  0037B0  D7E3               	goto	l7924
  2748  0037B2  0A03               	xorlw	3	; case 2
  2749  0037B4  B4D8               	btfsc	status,2,c
  2750  0037B6  D7E3               	goto	l7926
  2751  0037B8  0A01               	xorlw	1	; case 3
  2752  0037BA  B4D8               	btfsc	status,2,c
  2753  0037BC  D7EC               	goto	l7934
  2754  0037BE  0A07               	xorlw	7	; case 4
  2755  0037C0  B4D8               	btfsc	status,2,c
  2756  0037C2  D7EC               	goto	l7936
  2757                           
  2758                           ; BSR set to: 0
  2759                           
  2760                           ; BSR set to: 0
  2761  0037C4  D7EE               	goto	l7940
  2762  0037C6                     __end_of_main:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1l	equ	0xFE1
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _stopSignals *****************
  2775 ;; Defined at:
  2776 ;;		line 60 in file "main.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;Total ram usage:        0 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    7
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_main
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text1
  2805  004546                     __ptext1:
  2806                           	opt stack 0
  2807  004546                     _stopSignals:
  2808                           	opt stack 23
  2809                           
  2810                           ;main.c: 61: LATA = 0x00;
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;incstack = 0
  2814  004546  0E00               	movlw	0
  2815  004548  6E89               	movwf	3977,c	;volatile
  2816                           
  2817                           ;main.c: 62: LATB = 0x00;
  2818  00454A  0E00               	movlw	0
  2819  00454C  6E8A               	movwf	3978,c	;volatile
  2820                           
  2821                           ;main.c: 63: LATC = 0x00;
  2822  00454E  0E00               	movlw	0
  2823  004550  6E8B               	movwf	3979,c	;volatile
  2824                           
  2825                           ;main.c: 64: LATD = 0x00;
  2826  004552  0E00               	movlw	0
  2827  004554  6E8C               	movwf	3980,c	;volatile
  2828                           
  2829                           ;main.c: 65: LATE = 0x00;
  2830  004556  0E00               	movlw	0
  2831  004558  6E8D               	movwf	3981,c	;volatile
  2832  00455A  0012               	return		;funcret
  2833  00455C                     __end_of_stopSignals:
  2834                           	opt stack 0
  2835                           tblptru	equ	0xFF8
  2836                           tblptrh	equ	0xFF7
  2837                           tblptrl	equ	0xFF6
  2838                           tablat	equ	0xFF5
  2839                           postinc0	equ	0xFEE
  2840                           wreg	equ	0xFE8
  2841                           postdec1	equ	0xFE5
  2842                           fsr1l	equ	0xFE1
  2843                           status	equ	0xFD8
  2844                           
  2845 ;; *************** function _sort *****************
  2846 ;; Defined at:
  2847 ;;		line 55 in file "sort.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;		None
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;Total ram usage:        0 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:   12
  2868 ;; This function calls:
  2869 ;;		_Distribution
  2870 ;;		_ID
  2871 ;;		_Loading
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text2
  2878  0044CC                     __ptext2:
  2879                           	opt stack 0
  2880  0044CC                     _sort:
  2881                           	opt stack 18
  2882                           
  2883                           ;sort.c: 56: if(machine_state == Sorting_state){
  2884                           
  2885                           ;incstack = 0
  2886  0044CC  0100               	movlb	0	; () banked
  2887  0044CE  05FC               	decf	_machine_state& (0+255),w,b
  2888  0044D0  B4D8               	btfsc	status,2,c
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;sort.c: 57: Loading();
  2892  0044D2  EC50  F015         	call	_Loading	;wreg free
  2893                           
  2894                           ;sort.c: 58: }
  2895                           ;sort.c: 59: if(machine_state == Sorting_state){
  2896  0044D6  0100               	movlb	0	; () banked
  2897  0044D8  05FC               	decf	_machine_state& (0+255),w,b
  2898  0044DA  B4D8               	btfsc	status,2,c
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;sort.c: 60: ID();
  2902  0044DC  EC35  F017         	call	_ID	;wreg free
  2903                           
  2904                           ;sort.c: 61: }
  2905                           ;sort.c: 62: if(machine_state == Sorting_state){
  2906  0044E0  0100               	movlb	0	; () banked
  2907  0044E2  05FC               	decf	_machine_state& (0+255),w,b
  2908  0044E4  A4D8               	btfss	status,2,c
  2909  0044E6  0012               	return	
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;sort.c: 63: Distribution();
  2913  0044E8  ECF7  F015         	call	_Distribution	;wreg free
  2914  0044EC  0012               	return	
  2915  0044EE                     __end_of_sort:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           postdec1	equ	0xFE5
  2924                           fsr1l	equ	0xFE1
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _Loading *****************
  2928 ;; Defined at:
  2929 ;;		line 67 in file "sort.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  i               2   54[BANK0 ] int 
  2934 ;;  addr            2   51[BANK0 ] unsigned short 
  2935 ;;  byte1           1   53[BANK0 ] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;Total ram usage:        7 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:   11
  2952 ;; This function calls:
  2953 ;;		_EEPROM_read
  2954 ;;		_EEPROM_write
  2955 ;;		_delay_ms
  2956 ;;		_getIR
  2957 ;;		_initGlobalVars
  2958 ;;		_initServos
  2959 ;;		_initSortTimer
  2960 ;;		_lcdInst
  2961 ;; This function is called by:
  2962 ;;		_sort
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text3
  2967  002AA0                     __ptext3:
  2968                           	opt stack 0
  2969  002AA0                     _Loading:
  2970                           	opt stack 18
  2971                           
  2972                           ;sort.c: 68: if(first){
  2973                           
  2974                           ;incstack = 0
  2975  002AA0  0100               	movlb	0	; () banked
  2976  002AA2  51E4               	movf	_first& (0+255),w,b
  2977  002AA4  0100               	movlb	0	; () banked
  2978  002AA6  11E5               	iorwf	(_first+1)& (0+255),w,b
  2979  002AA8  B4D8               	btfsc	status,2,c
  2980  002AAA  D066               	goto	l6290
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;sort.c: 69: initGlobalVars();
  2984  002AAC  ECA2  F01D         	call	_initGlobalVars	;wreg free
  2985                           
  2986                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2987  002AB0  0E01               	movlw	1
  2988  002AB2  ECD4  F022         	call	_lcdInst
  2989  002AB6  0E68               	movlw	104
  2990  002AB8  0100               	movlb	0	; () banked
  2991  002ABA  6FB1               	movwf	??_Loading& (0+255),b
  2992  002ABC  0EE4               	movlw	228
  2993  002ABE                     u6857:
  2994  002ABE  2EE8               	decfsz	wreg,f,c
  2995  002AC0  D7FE               	bra	u6857
  2996  002AC2  2FB1               	decfsz	??_Loading& (0+255),f,b
  2997  002AC4  D7FC               	bra	u6857
  2998  002AC6  F000               	nop	
  2999                           
  3000                           ;sort.c: 71: initSortTimer();
  3001  002AC8  ECF2  F01A         	call	_initSortTimer	;wreg free
  3002                           
  3003                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3004  002ACC  8A8B               	bsf	3979,5,c	;volatile
  3005                           
  3006                           ;sort.c: 77: sel = EEPROM_read(0);
  3007  002ACE  0E00               	movlw	0
  3008  002AD0  0100               	movlb	0	; () banked
  3009  002AD2  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3010  002AD4  0E00               	movlw	0
  3011  002AD6  6F80               	movwf	EEPROM_read@address& (0+255),b
  3012  002AD8  EC97  F022         	call	_EEPROM_read	;wreg free
  3013  002ADC  0100               	movlb	0	; () banked
  3014  002ADE  6FFD               	movwf	_sel& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3018  002AE0  0100               	movlb	0	; () banked
  3019  002AE2  51FD               	movf	_sel& (0+255),w,b
  3020  002AE4  0D0B               	mullw	11
  3021  002AE6  0E01               	movlw	1
  3022  002AE8  24F3               	addwf	prodl,w,c
  3023  002AEA  0100               	movlb	0	; () banked
  3024  002AEC  6FB3               	movwf	Loading@addr& (0+255),b
  3025  002AEE  0E00               	movlw	0
  3026  002AF0  20F4               	addwfc	prodh,w,c
  3027  002AF2  0100               	movlb	0	; () banked
  3028  002AF4  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3032  002AF6  0E7F               	movlw	127
  3033  002AF8  0100               	movlb	0	; () banked
  3034  002AFA  6FB5               	movwf	Loading@byte1& (0+255),b
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3038  002AFC  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3039  002B00  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3040  002B04  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3041  002B08  EC56  F019         	call	_EEPROM_write	;wreg free
  3042                           
  3043                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3044  002B0C  9A89               	bcf	3977,5,c	;volatile
  3045                           
  3046                           ;sort.c: 84: for(int i=0; i<46; i++){
  3047  002B0E  0E00               	movlw	0
  3048  002B10  0100               	movlb	0	; () banked
  3049  002B12  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3050  002B14  0E00               	movlw	0
  3051  002B16  6FB6               	movwf	Loading@i& (0+255),b
  3052                           
  3053                           ; BSR set to: 0
  3054  002B18  0100               	movlb	0	; () banked
  3055  002B1A  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3056  002B1C  D008               	goto	l6280
  3057  002B1E  0100               	movlb	0	; () banked
  3058  002B20  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3059  002B22  E126               	bnz	l719
  3060  002B24  0E2E               	movlw	46
  3061  002B26  0100               	movlb	0	; () banked
  3062  002B28  5DB6               	subwf	Loading@i& (0+255),w,b
  3063  002B2A  B0D8               	btfsc	status,0,c
  3064  002B2C  D021               	goto	l719
  3065  002B2E                     l6280:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3069  002B2E  BA89               	btfsc	3977,5,c	;volatile
  3070  002B30  D004               	goto	u4710
  3071  002B32  0100               	movlb	0	; () banked
  3072  002B34  6BB1               	clrf	??_Loading& (0+255),b
  3073  002B36  2BB1               	incf	??_Loading& (0+255),f,b
  3074  002B38  D002               	goto	u4728
  3075  002B3A                     u4710:
  3076  002B3A  0100               	movlb	0	; () banked
  3077  002B3C  6BB1               	clrf	??_Loading& (0+255),b
  3078  002B3E                     u4728:
  3079  002B3E  0100               	movlb	0	; () banked
  3080  002B40  3BB1               	swapf	??_Loading& (0+255),f,b
  3081  002B42  47B1               	rlncf	??_Loading& (0+255),f,b
  3082  002B44  5089               	movf	3977,w,c	;volatile
  3083  002B46  0100               	movlb	0	; () banked
  3084  002B48  19B1               	xorwf	??_Loading& (0+255),w,b
  3085  002B4A  0BDF               	andlw	-33
  3086  002B4C  19B1               	xorwf	??_Loading& (0+255),w,b
  3087  002B4E  6E89               	movwf	3977,c	;volatile
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;sort.c: 86: delay_ms(45-i);
  3091  002B50  0100               	movlb	0	; () banked
  3092  002B52  51B6               	movf	Loading@i& (0+255),w,b
  3093  002B54  0800               	sublw	0
  3094  002B56  0F2D               	addlw	45
  3095  002B58  ECF4  F021         	call	_delay_ms
  3096  002B5C  0100               	movlb	0	; () banked
  3097  002B5E  4BB6               	infsnz	Loading@i& (0+255),f,b
  3098  002B60  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3099                           
  3100                           ; BSR set to: 0
  3101  002B62  0100               	movlb	0	; () banked
  3102  002B64  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3103  002B66  D7E3               	goto	l6280
  3104  002B68  0100               	movlb	0	; () banked
  3105  002B6A  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3106  002B6C  E101               	bnz	u4730
  3107  002B6E  D7DA               	goto	L1
  3108  002B70                     u4730:
  3109  002B70                     l719:
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;sort.c: 87: }
  3113                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3114  002B70  8A89               	bsf	3977,5,c	;volatile
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;sort.c: 91: initServos();
  3118  002B72  ECC7  F01E         	call	_initServos	;wreg free
  3119                           
  3120                           ;sort.c: 92: }
  3121  002B76  0012               	return	
  3122  002B78                     l6290:
  3123                           
  3124                           ;sort.c: 93: else{
  3125                           ;sort.c: 96: if(!f_loadingNewCan){
  3126  002B78  0100               	movlb	0	; () banked
  3127  002B7A  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3128  002B7C  0100               	movlb	0	; () banked
  3129  002B7E  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3130  002B80  A4D8               	btfss	status,2,c
  3131  002B82  D017               	goto	l6306
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;sort.c: 98: getIR();
  3135  002B84  EC6F  F01F         	call	_getIR	;wreg free
  3136                           
  3137                           ;sort.c: 100: if(!f_loadingNewCan){
  3138  002B88  0100               	movlb	0	; () banked
  3139  002B8A  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3140  002B8C  0100               	movlb	0	; () banked
  3141  002B8E  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3142  002B90  B4D8               	btfsc	status,2,c
  3143  002B92  0012               	return	
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;sort.c: 104: else{
  3147                           ;sort.c: 105: count_total++;
  3148                           
  3149                           ; BSR set to: 0
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;sort.c: 102: }
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;sort.c: 101: return;
  3156  002B94  0100               	movlb	0	; () banked
  3157  002B96  4BFE               	infsnz	_count_total& (0+255),f,b
  3158  002B98  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;sort.c: 106: if(count_total == 12){
  3162  002B9A  0E0C               	movlw	12
  3163  002B9C  0100               	movlb	0	; () banked
  3164  002B9E  19FE               	xorwf	_count_total& (0+255),w,b
  3165  002BA0  0100               	movlb	0	; () banked
  3166  002BA2  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3167  002BA4  A4D8               	btfss	status,2,c
  3168  002BA6  0012               	return	
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;sort.c: 107: f_lastCan = 1;
  3172  002BA8  0E00               	movlw	0
  3173  002BAA  6E74               	movwf	_f_lastCan+1,c
  3174  002BAC  0E01               	movlw	1
  3175  002BAE  6E73               	movwf	_f_lastCan,c
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;sort.c: 108: }
  3179                           ;sort.c: 109: }
  3180                           ;sort.c: 110: }
  3181                           
  3182                           ; BSR set to: 0
  3183  002BB0  0012               	return	
  3184  002BB2                     l6306:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;sort.c: 113: else if(f_ID_receive){
  3188  002BB2  506B               	movf	_f_ID_receive,w,c
  3189  002BB4  106C               	iorwf	_f_ID_receive+1,w,c
  3190  002BB6  B4D8               	btfsc	status,2,c
  3191  002BB8  0012               	return	
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;sort.c: 114: f_loadingNewCan = 0;
  3195  002BBA  0E00               	movlw	0
  3196  002BBC  0100               	movlb	0	; () banked
  3197  002BBE  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3198  002BC0  0E00               	movlw	0
  3199  002BC2  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;sort.c: 115: LATAbits.LATA4 = 1;
  3203  002BC4  8889               	bsf	3977,4,c	;volatile
  3204                           
  3205                           ;sort.c: 116: f_can_coming_to_ID = 1;
  3206  002BC6  0E00               	movlw	0
  3207  002BC8  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3208  002BCA  0E01               	movlw	1
  3209  002BCC  6E6D               	movwf	_f_can_coming_to_ID,c
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sort.c: 117: _delay((unsigned long)((300)*(32000000/4000.0)));
  3213  002BCE  0E0D               	movlw	13
  3214  002BD0  0100               	movlb	0	; () banked
  3215  002BD2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3216  002BD4  0E2D               	movlw	45
  3217  002BD6  0100               	movlb	0	; () banked
  3218  002BD8  6FB1               	movwf	??_Loading& (0+255),b
  3219  002BDA  0ED7               	movlw	215
  3220  002BDC                     u6867:
  3221  002BDC  2EE8               	decfsz	wreg,f,c
  3222  002BDE  D7FE               	bra	u6867
  3223  002BE0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3224  002BE2  D7FC               	bra	u6867
  3225  002BE4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3226  002BE6  D7FA               	bra	u6867
  3227  002BE8  D000               	nop2	
  3228                           
  3229                           ;sort.c: 118: LATAbits.LATA4 = 0;
  3230  002BEA  9889               	bcf	3977,4,c	;volatile
  3231  002BEC  0012               	return	
  3232  002BEE                     __end_of_Loading:
  3233                           	opt stack 0
  3234                           tblptru	equ	0xFF8
  3235                           tblptrh	equ	0xFF7
  3236                           tblptrl	equ	0xFF6
  3237                           tablat	equ	0xFF5
  3238                           prodh	equ	0xFF4
  3239                           prodl	equ	0xFF3
  3240                           postinc0	equ	0xFEE
  3241                           wreg	equ	0xFE8
  3242                           postdec1	equ	0xFE5
  3243                           fsr1l	equ	0xFE1
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _initSortTimer *****************
  3247 ;; Defined at:
  3248 ;;		line 234 in file "sort.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;		None
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  i               2    8[BANK0 ] int 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;Total ram usage:        5 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:   10
  3269 ;; This function calls:
  3270 ;;		_getRTC
  3271 ;; This function is called by:
  3272 ;;		_Loading
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text4
  3277  0035E4                     __ptext4:
  3278                           	opt stack 0
  3279  0035E4                     _initSortTimer:
  3280                           	opt stack 18
  3281                           
  3282                           ;sort.c: 236: getRTC();
  3283                           
  3284                           ;incstack = 0
  3285  0035E4  EC6D  F01C         	call	_getRTC	;wreg free
  3286                           
  3287                           ;sort.c: 237: for(int i = 0; i < 7; i++){
  3288  0035E8  0E00               	movlw	0
  3289  0035EA  0100               	movlb	0	; () banked
  3290  0035EC  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3291  0035EE  0E00               	movlw	0
  3292  0035F0  6F88               	movwf	initSortTimer@i& (0+255),b
  3293  0035F2                     l5886:
  3294                           
  3295                           ; BSR set to: 0
  3296  0035F2  0100               	movlb	0	; () banked
  3297  0035F4  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3298  0035F6  D008               	goto	l5890
  3299  0035F8  0100               	movlb	0	; () banked
  3300  0035FA  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3301  0035FC  E140               	bnz	l5896
  3302  0035FE  0E07               	movlw	7
  3303  003600  0100               	movlb	0	; () banked
  3304  003602  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3305  003604  B0D8               	btfsc	status,0,c
  3306  003606  D03B               	goto	l5896
  3307  003608                     l5890:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 238: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3311  003608  0E24               	movlw	low _time
  3312  00360A  0100               	movlb	0	; () banked
  3313  00360C  2588               	addwf	initSortTimer@i& (0+255),w,b
  3314  00360E  6ED9               	movwf	fsr2l,c
  3315  003610  0E01               	movlw	high _time
  3316  003612  0100               	movlb	0	; () banked
  3317  003614  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3318  003616  6EDA               	movwf	fsr2h,c
  3319  003618  50DF               	movf	indf2,w,c
  3320  00361A  0100               	movlb	0	; () banked
  3321  00361C  6F85               	movwf	??_initSortTimer& (0+255),b
  3322  00361E  0100               	movlb	0	; () banked
  3323  003620  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3324  003622  0E0F               	movlw	15
  3325  003624  1785               	andwf	??_initSortTimer& (0+255),f,b
  3326  003626  0E0F               	movlw	15
  3327  003628  0100               	movlb	0	; () banked
  3328  00362A  1785               	andwf	??_initSortTimer& (0+255),f,b
  3329  00362C  0100               	movlb	0	; () banked
  3330  00362E  5185               	movf	??_initSortTimer& (0+255),w,b
  3331  003630  0D0A               	mullw	10
  3332  003632  0E24               	movlw	low _time
  3333  003634  0100               	movlb	0	; () banked
  3334  003636  2588               	addwf	initSortTimer@i& (0+255),w,b
  3335  003638  6ED9               	movwf	fsr2l,c
  3336  00363A  0E01               	movlw	high _time
  3337  00363C  0100               	movlb	0	; () banked
  3338  00363E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3339  003640  6EDA               	movwf	fsr2h,c
  3340  003642  50DF               	movf	indf2,w,c
  3341  003644  0B0F               	andlw	15
  3342  003646  0100               	movlb	0	; () banked
  3343  003648  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3344  00364A  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3345  00364C  50F3               	movf	prodl,w,c
  3346  00364E  0100               	movlb	0	; () banked
  3347  003650  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3348  003652  50F4               	movf	prodh,w,c
  3349  003654  0100               	movlb	0	; () banked
  3350  003656  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3351  003658  90D8               	bcf	status,0,c
  3352  00365A  0100               	movlb	0	; () banked
  3353  00365C  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3354  00365E  6ED9               	movwf	fsr2l,c
  3355  003660  0100               	movlb	0	; () banked
  3356  003662  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3357  003664  6EDA               	movwf	fsr2h,c
  3358  003666  0E0E               	movlw	low _startTime
  3359  003668  26D9               	addwf	fsr2l,f,c
  3360  00366A  0E01               	movlw	high _startTime
  3361  00366C  22DA               	addwfc	fsr2h,f,c
  3362  00366E  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3363  003672  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3364                           
  3365                           ; BSR set to: 0
  3366  003676  0100               	movlb	0	; () banked
  3367  003678  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3368  00367A  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3369  00367C  D7BA               	goto	l5886
  3370  00367E                     l5896:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;sort.c: 239: }
  3374                           ;sort.c: 241: T0CON = 0b00010111;
  3375  00367E  0E17               	movlw	23
  3376  003680  6ED5               	movwf	4053,c	;volatile
  3377                           
  3378                           ;sort.c: 250: TMR0H = 0b10000101;
  3379  003682  0E85               	movlw	133
  3380  003684  6ED7               	movwf	4055,c	;volatile
  3381                           
  3382                           ;sort.c: 251: TMR0L = 0b11101110;
  3383  003686  0EEE               	movlw	238
  3384  003688  6ED6               	movwf	4054,c	;volatile
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;sort.c: 252: TMR0ON = 1;
  3388  00368A  8ED5               	bsf	4053,7,c	;volatile
  3389                           
  3390                           ; BSR set to: 0
  3391  00368C  0012               	return		;funcret
  3392  00368E                     __end_of_initSortTimer:
  3393                           	opt stack 0
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           prodh	equ	0xFF4
  3399                           prodl	equ	0xFF3
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _initGlobalVars *****************
  3412 ;; Defined at:
  3413 ;;		line 215 in file "sort.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      void 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;Total ram usage:        0 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    7
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_Loading
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text5
  3442  003B44                     __ptext5:
  3443                           	opt stack 0
  3444  003B44                     _initGlobalVars:
  3445                           	opt stack 21
  3446                           
  3447                           ;sort.c: 217: first = 0;
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;incstack = 0
  3451  003B44  0E00               	movlw	0
  3452  003B46  0100               	movlb	0	; () banked
  3453  003B48  6FE5               	movwf	(_first+1)& (0+255),b
  3454  003B4A  0E00               	movlw	0
  3455  003B4C  6FE4               	movwf	_first& (0+255),b
  3456                           
  3457                           ;sort.c: 220: f_loadingNewCan = 0;
  3458  003B4E  0E00               	movlw	0
  3459  003B50  0100               	movlb	0	; () banked
  3460  003B52  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3461  003B54  0E00               	movlw	0
  3462  003B56  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3463                           
  3464                           ;sort.c: 221: f_lastCan = 0;
  3465  003B58  0E00               	movlw	0
  3466  003B5A  6E74               	movwf	_f_lastCan+1,c
  3467  003B5C  0E00               	movlw	0
  3468  003B5E  6E73               	movwf	_f_lastCan,c
  3469                           
  3470                           ;sort.c: 222: f_ID_receive = 1;
  3471  003B60  0E00               	movlw	0
  3472  003B62  6E6C               	movwf	_f_ID_receive+1,c
  3473  003B64  0E01               	movlw	1
  3474  003B66  6E6B               	movwf	_f_ID_receive,c
  3475                           
  3476                           ;sort.c: 223: f_can_coming_to_ID = 0;
  3477  003B68  0E00               	movlw	0
  3478  003B6A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3479  003B6C  0E00               	movlw	0
  3480  003B6E  6E6D               	movwf	_f_can_coming_to_ID,c
  3481                           
  3482                           ;sort.c: 224: f_can_coming_to_distribution = 0;
  3483  003B70  0E00               	movlw	0
  3484  003B72  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3485  003B74  0E00               	movlw	0
  3486  003B76  6E6F               	movwf	_f_can_coming_to_distribution,c
  3487                           
  3488                           ;sort.c: 225: f_can_distributed = 0;
  3489  003B78  0E00               	movlw	0
  3490  003B7A  6E72               	movwf	_f_can_distributed+1,c
  3491  003B7C  0E00               	movlw	0
  3492  003B7E  6E71               	movwf	_f_can_distributed,c
  3493                           
  3494                           ;sort.c: 228: count_total = 0;
  3495  003B80  0E00               	movlw	0
  3496  003B82  0100               	movlb	0	; () banked
  3497  003B84  6FFF               	movwf	(_count_total+1)& (0+255),b
  3498  003B86  0E00               	movlw	0
  3499  003B88  6FFE               	movwf	_count_total& (0+255),b
  3500                           
  3501                           ;sort.c: 229: count_pop_no_tab = 0;
  3502  003B8A  0E00               	movlw	0
  3503  003B8C  6E62               	movwf	_count_pop_no_tab+1,c
  3504  003B8E  0E00               	movlw	0
  3505  003B90  6E61               	movwf	_count_pop_no_tab,c
  3506                           
  3507                           ;sort.c: 230: count_pop_w_tab = 0;
  3508  003B92  0E00               	movlw	0
  3509  003B94  6E64               	movwf	_count_pop_w_tab+1,c
  3510  003B96  0E00               	movlw	0
  3511  003B98  6E63               	movwf	_count_pop_w_tab,c
  3512                           
  3513                           ;sort.c: 231: count_can_w_lab = 0;
  3514  003B9A  0E00               	movlw	0
  3515  003B9C  6E60               	movwf	_count_can_w_lab+1,c
  3516  003B9E  0E00               	movlw	0
  3517  003BA0  6E5F               	movwf	_count_can_w_lab,c
  3518                           
  3519                           ;sort.c: 232: count_can_no_lab = 0;
  3520  003BA2  0E00               	movlw	0
  3521  003BA4  6E5E               	movwf	_count_can_no_lab+1,c
  3522  003BA6  0E00               	movlw	0
  3523  003BA8  6E5D               	movwf	_count_can_no_lab,c
  3524                           
  3525                           ; BSR set to: 0
  3526  003BAA  0012               	return		;funcret
  3527  003BAC                     __end_of_initGlobalVars:
  3528                           	opt stack 0
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           postdec1	equ	0xFE5
  3538                           fsr1l	equ	0xFE1
  3539                           indf2	equ	0xFDF
  3540                           postinc2	equ	0xFDE
  3541                           postdec2	equ	0xFDD
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _getIR *****************
  3547 ;; Defined at:
  3548 ;;		line 291 in file "sort.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, status,2, status,0, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;Total ram usage:        2 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    9
  3569 ;; This function calls:
  3570 ;;		_readIR
  3571 ;; This function is called by:
  3572 ;;		_Loading
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text6
  3577  003EDE                     __ptext6:
  3578                           	opt stack 0
  3579  003EDE                     _getIR:
  3580                           	opt stack 19
  3581                           
  3582                           ;sort.c: 292: readIR();
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;incstack = 0
  3586  003EDE  EC96  F01F         	call	_readIR	;wreg free
  3587                           
  3588                           ;sort.c: 293: if(IR_signal==1){
  3589  003EE2  0100               	movlb	0	; () banked
  3590  003EE4  05DA               	decf	_IR_signal& (0+255),w,b
  3591  003EE6  0100               	movlb	0	; () banked
  3592  003EE8  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3593  003EEA  A4D8               	btfss	status,2,c
  3594  003EEC  0012               	return	
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;sort.c: 294: _delay((unsigned long)((100)*(32000000/4000.0)));
  3598  003EEE  0E05               	movlw	5
  3599  003EF0  0100               	movlb	0	; () banked
  3600  003EF2  6F87               	movwf	(??_getIR+1)& (0+255),b
  3601  003EF4  0E0F               	movlw	15
  3602  003EF6  0100               	movlb	0	; () banked
  3603  003EF8  6F86               	movwf	??_getIR& (0+255),b
  3604  003EFA  0EF1               	movlw	241
  3605  003EFC                     u6877:
  3606  003EFC  2EE8               	decfsz	wreg,f,c
  3607  003EFE  D7FE               	bra	u6877
  3608  003F00  2F86               	decfsz	??_getIR& (0+255),f,b
  3609  003F02  D7FC               	bra	u6877
  3610  003F04  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3611  003F06  D7FA               	bra	u6877
  3612                           
  3613                           ;sort.c: 295: if(IR_signal==1){
  3614  003F08  0100               	movlb	0	; () banked
  3615  003F0A  05DA               	decf	_IR_signal& (0+255),w,b
  3616  003F0C  0100               	movlb	0	; () banked
  3617  003F0E  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3618  003F10  A4D8               	btfss	status,2,c
  3619  003F12  D006               	goto	l5984
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;sort.c: 296: f_loadingNewCan = 1;
  3623  003F14  0E00               	movlw	0
  3624  003F16  0100               	movlb	0	; () banked
  3625  003F18  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3626  003F1A  0E01               	movlw	1
  3627  003F1C  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3628                           
  3629                           ;sort.c: 297: }
  3630  003F1E  0012               	return	
  3631  003F20                     l5984:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;sort.c: 298: else{
  3635                           ;sort.c: 299: f_loadingNewCan = 0;
  3636  003F20  0E00               	movlw	0
  3637  003F22  0100               	movlb	0	; () banked
  3638  003F24  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3639  003F26  0E00               	movlw	0
  3640  003F28  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3641                           
  3642                           ; BSR set to: 0
  3643  003F2A  0012               	return	
  3644  003F2C                     __end_of_getIR:
  3645                           	opt stack 0
  3646                           tblptru	equ	0xFF8
  3647                           tblptrh	equ	0xFF7
  3648                           tblptrl	equ	0xFF6
  3649                           tablat	equ	0xFF5
  3650                           prodh	equ	0xFF4
  3651                           prodl	equ	0xFF3
  3652                           postinc0	equ	0xFEE
  3653                           wreg	equ	0xFE8
  3654                           postdec1	equ	0xFE5
  3655                           fsr1l	equ	0xFE1
  3656                           indf2	equ	0xFDF
  3657                           postinc2	equ	0xFDE
  3658                           postdec2	equ	0xFDD
  3659                           fsr2h	equ	0xFDA
  3660                           fsr2l	equ	0xFD9
  3661                           status	equ	0xFD8
  3662                           
  3663 ;; *************** function _readIR *****************
  3664 ;; Defined at:
  3665 ;;		line 23 in file "ADCFunctionality.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;		None
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;  res             2    4[BANK0 ] int 
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  1    wreg      void 
  3672 ;; Registers used:
  3673 ;;		wreg, status,2, status,0, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;Total ram usage:        4 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    8
  3686 ;; This function calls:
  3687 ;;		_readADC
  3688 ;; This function is called by:
  3689 ;;		_getIR
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text7
  3694  003F2C                     __ptext7:
  3695                           	opt stack 0
  3696  003F2C                     _readIR:
  3697                           	opt stack 19
  3698                           
  3699                           ;ADCFunctionality.c: 24: readADC(0);
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;incstack = 0
  3703  003F2C  0E00               	movlw	0
  3704  003F2E  ECC9  F021         	call	_readADC
  3705                           
  3706                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3707  003F32  50C3               	movf	4035,w,c	;volatile
  3708  003F34  CFC4 F082          	movff	4036,??_readIR	;volatile
  3709  003F38  0100               	movlb	0	; () banked
  3710  003F3A  6B83               	clrf	(??_readIR+1)& (0+255),b
  3711  003F3C  C082  F083         	movff	??_readIR,??_readIR+1
  3712  003F40  0100               	movlb	0	; () banked
  3713  003F42  6B82               	clrf	??_readIR& (0+255),b
  3714  003F44  0100               	movlb	0	; () banked
  3715  003F46  1182               	iorwf	??_readIR& (0+255),w,b
  3716  003F48  0100               	movlb	0	; () banked
  3717  003F4A  6F84               	movwf	readIR@res& (0+255),b
  3718  003F4C  0100               	movlb	0	; () banked
  3719  003F4E  5183               	movf	(??_readIR+1)& (0+255),w,b
  3720  003F50  0100               	movlb	0	; () banked
  3721  003F52  6F85               	movwf	(readIR@res+1)& (0+255),b
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  3725  003F54  0100               	movlb	0	; () banked
  3726  003F56  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3727  003F58  D00A               	goto	u3680
  3728  003F5A  0E85               	movlw	133
  3729  003F5C  0100               	movlb	0	; () banked
  3730  003F5E  5D84               	subwf	readIR@res& (0+255),w,b
  3731  003F60  0E03               	movlw	3
  3732  003F62  0100               	movlb	0	; () banked
  3733  003F64  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3734  003F66  A0D8               	btfss	status,0,c
  3735  003F68  D002               	goto	u3680
  3736  003F6A  0E01               	movlw	1
  3737  003F6C  D001               	goto	u3690
  3738  003F6E                     u3680:
  3739  003F6E  0E00               	movlw	0
  3740  003F70                     u3690:
  3741  003F70  0100               	movlb	0	; () banked
  3742  003F72  6FDA               	movwf	_IR_signal& (0+255),b
  3743  003F74  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3744                           
  3745                           ; BSR set to: 0
  3746  003F76  0012               	return		;funcret
  3747  003F78                     __end_of_readIR:
  3748                           	opt stack 0
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           postinc0	equ	0xFEE
  3756                           wreg	equ	0xFE8
  3757                           postdec1	equ	0xFE5
  3758                           fsr1l	equ	0xFE1
  3759                           indf2	equ	0xFDF
  3760                           postinc2	equ	0xFDE
  3761                           postdec2	equ	0xFDD
  3762                           fsr2h	equ	0xFDA
  3763                           fsr2l	equ	0xFD9
  3764                           status	equ	0xFD8
  3765                           
  3766 ;; *************** function _delay_ms *****************
  3767 ;; Defined at:
  3768 ;;		line 316 in file "sort.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  milliseconds    1    wreg     unsigned char 
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;Total ram usage:        2 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    7
  3789 ;; This function calls:
  3790 ;;		Nothing
  3791 ;; This function is called by:
  3792 ;;		_Loading
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text8
  3797  0043E8                     __ptext8:
  3798                           	opt stack 0
  3799  0043E8                     _delay_ms:
  3800                           	opt stack 21
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;incstack = 0
  3804                           ;delay_ms@milliseconds stored from wreg
  3805  0043E8  0100               	movlb	0	; () banked
  3806  0043EA  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3807                           
  3808                           ;sort.c: 317: while(milliseconds > 0)
  3809  0043EC  D00B               	goto	l5958
  3810  0043EE                     l5954:
  3811                           
  3812                           ;sort.c: 318: {
  3813                           ;sort.c: 319: milliseconds--;
  3814  0043EE  0100               	movlb	0	; () banked
  3815  0043F0  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;sort.c: 320: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3819  0043F2  0E0B               	movlw	11
  3820  0043F4  0100               	movlb	0	; () banked
  3821  0043F6  6F80               	movwf	??_delay_ms& (0+255),b
  3822  0043F8  0E47               	movlw	71
  3823  0043FA                     u6887:
  3824  0043FA  2EE8               	decfsz	wreg,f,c
  3825  0043FC  D7FE               	bra	u6887
  3826  0043FE  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3827  004400  D7FC               	bra	u6887
  3828  004402  D000               	nop2	
  3829  004404                     l5958:
  3830  004404  0100               	movlb	0	; () banked
  3831  004406  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3832  004408  0100               	movlb	0	; () banked
  3833  00440A  B4D8               	btfsc	status,2,c
  3834  00440C  0012               	return	
  3835  00440E  D7EF               	goto	l5954
  3836  004410                     __end_of_delay_ms:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           postinc0	equ	0xFEE
  3845                           wreg	equ	0xFE8
  3846                           postdec1	equ	0xFE5
  3847                           fsr1l	equ	0xFE1
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           fsr2h	equ	0xFDA
  3852                           fsr2l	equ	0xFD9
  3853                           status	equ	0xFD8
  3854                           
  3855 ;; *************** function _ID *****************
  3856 ;; Defined at:
  3857 ;;		line 122 in file "sort.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;Total ram usage:        8 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    9
  3878 ;; This function calls:
  3879 ;;		_readMAG
  3880 ;; This function is called by:
  3881 ;;		_sort
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text9
  3886  002E6A                     __ptext9:
  3887                           	opt stack 0
  3888  002E6A                     _ID:
  3889                           	opt stack 20
  3890                           
  3891                           ;sort.c: 123: if(f_can_coming_to_ID){
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;incstack = 0
  3895  002E6A  506D               	movf	_f_can_coming_to_ID,w,c
  3896  002E6C  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3897  002E6E  B4D8               	btfsc	status,2,c
  3898  002E70  0012               	return	
  3899                           
  3900                           ;sort.c: 125: _delay((unsigned long)((500)*(32000000/4000.0)));
  3901  002E72  0E15               	movlw	21
  3902  002E74  0100               	movlb	0	; () banked
  3903  002E76  6F87               	movwf	(??_ID+1)& (0+255),b
  3904  002E78  0E4B               	movlw	75
  3905  002E7A  0100               	movlb	0	; () banked
  3906  002E7C  6F86               	movwf	??_ID& (0+255),b
  3907  002E7E  0EBE               	movlw	190
  3908  002E80                     u6897:
  3909  002E80  2EE8               	decfsz	wreg,f,c
  3910  002E82  D7FE               	bra	u6897
  3911  002E84  2F86               	decfsz	??_ID& (0+255),f,b
  3912  002E86  D7FC               	bra	u6897
  3913  002E88  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3914  002E8A  D7FA               	bra	u6897
  3915  002E8C  F000               	nop	
  3916                           
  3917                           ;sort.c: 130: int sensor_outputs[3];
  3918                           ;sort.c: 134: sensor_outputs[0] = PORTAbits.RA2;
  3919  002E8E  A480               	btfss	3968,2,c	;volatile
  3920  002E90  D004               	goto	u4790
  3921  002E92  0100               	movlb	0	; () banked
  3922  002E94  6B86               	clrf	??_ID& (0+255),b
  3923  002E96  2B86               	incf	??_ID& (0+255),f,b
  3924  002E98  D002               	goto	u4798
  3925  002E9A                     u4790:
  3926  002E9A  0100               	movlb	0	; () banked
  3927  002E9C  6B86               	clrf	??_ID& (0+255),b
  3928  002E9E                     u4798:
  3929  002E9E  0100               	movlb	0	; () banked
  3930  002EA0  5186               	movf	??_ID& (0+255),w,b
  3931  002EA2  0100               	movlb	0	; () banked
  3932  002EA4  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3933  002EA6  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;sort.c: 136: if(!sensor_outputs[0]){
  3937  002EA8  0100               	movlb	0	; () banked
  3938  002EAA  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3939  002EAC  0100               	movlb	0	; () banked
  3940  002EAE  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3941  002EB0  A4D8               	btfss	status,2,c
  3942  002EB2  D029               	goto	l6338
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;sort.c: 137: readMAG();
  3946  002EB4  ECBC  F01F         	call	_readMAG	;wreg free
  3947                           
  3948                           ;sort.c: 138: sensor_outputs[1] = MAG_signal;
  3949  002EB8  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3950  002EBC  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3951                           
  3952                           ;sort.c: 139: if(!sensor_outputs[1]){
  3953  002EC0  0100               	movlb	0	; () banked
  3954  002EC2  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3955  002EC4  0100               	movlb	0	; () banked
  3956  002EC6  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3957  002EC8  A4D8               	btfss	status,2,c
  3958  002ECA  D01D               	goto	l6338
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;sort.c: 140: LATAbits.LATA3 = 1;
  3962  002ECC  8689               	bsf	3977,3,c	;volatile
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;sort.c: 142: _delay((unsigned long)((300)*(32000000/4000.0)));
  3966  002ECE  0E0D               	movlw	13
  3967  002ED0  0100               	movlb	0	; () banked
  3968  002ED2  6F87               	movwf	(??_ID+1)& (0+255),b
  3969  002ED4  0E2D               	movlw	45
  3970  002ED6  0100               	movlb	0	; () banked
  3971  002ED8  6F86               	movwf	??_ID& (0+255),b
  3972  002EDA  0ED7               	movlw	215
  3973  002EDC                     u6907:
  3974  002EDC  2EE8               	decfsz	wreg,f,c
  3975  002EDE  D7FE               	bra	u6907
  3976  002EE0  2F86               	decfsz	??_ID& (0+255),f,b
  3977  002EE2  D7FC               	bra	u6907
  3978  002EE4  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3979  002EE6  D7FA               	bra	u6907
  3980  002EE8  D000               	nop2	
  3981                           
  3982                           ;sort.c: 143: sensor_outputs[2] = PORTAbits.RA2;
  3983  002EEA  A480               	btfss	3968,2,c	;volatile
  3984  002EEC  D004               	goto	u4820
  3985  002EEE  0100               	movlb	0	; () banked
  3986  002EF0  6B86               	clrf	??_ID& (0+255),b
  3987  002EF2  2B86               	incf	??_ID& (0+255),f,b
  3988  002EF4  D002               	goto	u4828
  3989  002EF6                     u4820:
  3990  002EF6  0100               	movlb	0	; () banked
  3991  002EF8  6B86               	clrf	??_ID& (0+255),b
  3992  002EFA                     u4828:
  3993  002EFA  0100               	movlb	0	; () banked
  3994  002EFC  5186               	movf	??_ID& (0+255),w,b
  3995  002EFE  0100               	movlb	0	; () banked
  3996  002F00  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3997  002F02  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;sort.c: 144: LATAbits.LATA3 = 0;
  4001  002F04  9689               	bcf	3977,3,c	;volatile
  4002  002F06                     l6338:
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;sort.c: 145: }
  4006                           ;sort.c: 146: }
  4007                           ;sort.c: 149: if(!sensor_outputs[0]){
  4008  002F06  0100               	movlb	0	; () banked
  4009  002F08  5188               	movf	ID@sensor_outputs& (0+255),w,b
  4010  002F0A  0100               	movlb	0	; () banked
  4011  002F0C  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4012  002F0E  A4D8               	btfss	status,2,c
  4013  002F10  D01E               	goto	l6356
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;sort.c: 150: if(!sensor_outputs[1]){
  4017  002F12  0100               	movlb	0	; () banked
  4018  002F14  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4019  002F16  0100               	movlb	0	; () banked
  4020  002F18  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4021  002F1A  A4D8               	btfss	status,2,c
  4022  002F1C  D012               	goto	l6352
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;sort.c: 151: if(!sensor_outputs[2]){
  4026  002F1E  0100               	movlb	0	; () banked
  4027  002F20  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4028  002F22  0100               	movlb	0	; () banked
  4029  002F24  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4030  002F26  A4D8               	btfss	status,2,c
  4031  002F28  D006               	goto	l6348
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;sort.c: 152: count_pop_no_tab++;
  4035  002F2A  4A61               	infsnz	_count_pop_no_tab,f,c
  4036  002F2C  2A62               	incf	_count_pop_no_tab+1,f,c
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;sort.c: 153: cur_can = 0;
  4040  002F2E  0E00               	movlw	0
  4041  002F30  6E66               	movwf	_cur_can+1,c
  4042  002F32  0E00               	movlw	0
  4043  002F34  D011               	goto	L4
  4044  002F36                     l6348:
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;sort.c: 155: else{
  4048                           ;sort.c: 156: count_pop_w_tab++;
  4049  002F36  4A63               	infsnz	_count_pop_w_tab,f,c
  4050  002F38  2A64               	incf	_count_pop_w_tab+1,f,c
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;sort.c: 157: cur_can = 1;
  4054  002F3A  0E00               	movlw	0
  4055  002F3C  6E66               	movwf	_cur_can+1,c
  4056  002F3E  0E01               	movlw	1
  4057  002F40  D00B               	goto	L4
  4058  002F42                     l6352:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;sort.c: 160: else{
  4062                           ;sort.c: 161: count_can_w_lab++;
  4063  002F42  4A5F               	infsnz	_count_can_w_lab,f,c
  4064  002F44  2A60               	incf	_count_can_w_lab+1,f,c
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;sort.c: 162: cur_can = 2;
  4068  002F46  0E00               	movlw	0
  4069  002F48  6E66               	movwf	_cur_can+1,c
  4070  002F4A  0E02               	movlw	2
  4071  002F4C  D005               	goto	L4
  4072  002F4E                     l6356:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;sort.c: 165: else{
  4076                           ;sort.c: 166: count_can_no_lab++;
  4077  002F4E  4A5D               	infsnz	_count_can_no_lab,f,c
  4078  002F50  2A5E               	incf	_count_can_no_lab+1,f,c
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;sort.c: 167: cur_can = 3;
  4082  002F52  0E00               	movlw	0
  4083  002F54  6E66               	movwf	_cur_can+1,c
  4084  002F56  0E03               	movlw	3
  4085  002F58                     L4:
  4086  002F58  6E65               	movwf	_cur_can,c
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;sort.c: 168: }
  4090                           ;sort.c: 170: LATCbits.LATC0 = 1;
  4091                           
  4092                           ; BSR set to: 0
  4093  002F5A  808B               	bsf	3979,0,c	;volatile
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;sort.c: 171: f_can_coming_to_distribution = 1;
  4097  002F5C  0E00               	movlw	0
  4098  002F5E  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4099  002F60  0E01               	movlw	1
  4100  002F62  6E6F               	movwf	_f_can_coming_to_distribution,c
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;sort.c: 172: _delay((unsigned long)((500)*(32000000/4000.0)));
  4104  002F64  0E15               	movlw	21
  4105  002F66  0100               	movlb	0	; () banked
  4106  002F68  6F87               	movwf	(??_ID+1)& (0+255),b
  4107  002F6A  0E4B               	movlw	75
  4108  002F6C  0100               	movlb	0	; () banked
  4109  002F6E  6F86               	movwf	??_ID& (0+255),b
  4110  002F70  0EBE               	movlw	190
  4111  002F72                     u6917:
  4112  002F72  2EE8               	decfsz	wreg,f,c
  4113  002F74  D7FE               	bra	u6917
  4114  002F76  2F86               	decfsz	??_ID& (0+255),f,b
  4115  002F78  D7FC               	bra	u6917
  4116  002F7A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4117  002F7C  D7FA               	bra	u6917
  4118  002F7E  F000               	nop	
  4119                           
  4120                           ;sort.c: 173: LATCbits.LATC0 = 0;
  4121  002F80  908B               	bcf	3979,0,c	;volatile
  4122                           
  4123                           ;sort.c: 175: f_can_coming_to_ID = 0;
  4124  002F82  0E00               	movlw	0
  4125  002F84  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4126  002F86  0E00               	movlw	0
  4127  002F88  6E6D               	movwf	_f_can_coming_to_ID,c
  4128  002F8A  0012               	return	
  4129  002F8C                     __end_of_ID:
  4130                           	opt stack 0
  4131                           tblptru	equ	0xFF8
  4132                           tblptrh	equ	0xFF7
  4133                           tblptrl	equ	0xFF6
  4134                           tablat	equ	0xFF5
  4135                           prodh	equ	0xFF4
  4136                           prodl	equ	0xFF3
  4137                           postinc0	equ	0xFEE
  4138                           wreg	equ	0xFE8
  4139                           postdec1	equ	0xFE5
  4140                           fsr1l	equ	0xFE1
  4141                           indf2	equ	0xFDF
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148 ;; *************** function _Distribution *****************
  4149 ;; Defined at:
  4150 ;;		line 178 in file "sort.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		wreg, status,2, status,0, cstack
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;Total ram usage:        2 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    8
  4171 ;; This function calls:
  4172 ;;		_updateServoPosition
  4173 ;; This function is called by:
  4174 ;;		_sort
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text10
  4179  002BEE                     __ptext10:
  4180                           	opt stack 0
  4181  002BEE                     _Distribution:
  4182                           	opt stack 21
  4183                           
  4184                           ;sort.c: 179: if(f_can_coming_to_distribution){
  4185                           
  4186                           ;incstack = 0
  4187  002BEE  506F               	movf	_f_can_coming_to_distribution,w,c
  4188  002BF0  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4189  002BF2  B4D8               	btfsc	status,2,c
  4190  002BF4  0012               	return	
  4191  002BF6  D034               	goto	l6384
  4192  002BF8                     l6374:
  4193                           
  4194                           ;sort.c: 184: updateServoPosition(500, 1);
  4195  002BF8  0E01               	movlw	1
  4196  002BFA  0100               	movlb	0	; () banked
  4197  002BFC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4198  002BFE  0EF4               	movlw	244
  4199  002C00  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4200  002C02  0E00               	movlw	0
  4201  002C04  0100               	movlb	0	; () banked
  4202  002C06  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4203  002C08  0E01               	movlw	1
  4204  002C0A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4205  002C0C  EC2E  F01D         	call	_updateServoPosition	;wreg free
  4206                           
  4207                           ;sort.c: 185: break;
  4208  002C10  D03E               	goto	l6386
  4209  002C12                     l6376:
  4210                           
  4211                           ;sort.c: 187: updateServoPosition(750, 1);
  4212  002C12  0E02               	movlw	2
  4213  002C14  0100               	movlb	0	; () banked
  4214  002C16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4215  002C18  0EEE               	movlw	238
  4216  002C1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4217  002C1C  0E00               	movlw	0
  4218  002C1E  0100               	movlb	0	; () banked
  4219  002C20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4220  002C22  0E01               	movlw	1
  4221  002C24  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4222  002C26  EC2E  F01D         	call	_updateServoPosition	;wreg free
  4223                           
  4224                           ;sort.c: 188: break;
  4225  002C2A  D031               	goto	l6386
  4226  002C2C                     l6378:
  4227                           
  4228                           ;sort.c: 190: updateServoPosition(1700, 1);
  4229  002C2C  0E06               	movlw	6
  4230  002C2E  0100               	movlb	0	; () banked
  4231  002C30  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4232  002C32  0EA4               	movlw	164
  4233  002C34  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4234  002C36  0E00               	movlw	0
  4235  002C38  0100               	movlb	0	; () banked
  4236  002C3A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4237  002C3C  0E01               	movlw	1
  4238  002C3E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4239  002C40  EC2E  F01D         	call	_updateServoPosition	;wreg free
  4240                           
  4241                           ;sort.c: 191: break;
  4242  002C44  D024               	goto	l6386
  4243  002C46                     l6380:
  4244                           
  4245                           ;sort.c: 193: updateServoPosition(2000, 1);
  4246  002C46  0E07               	movlw	7
  4247  002C48  0100               	movlb	0	; () banked
  4248  002C4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4249  002C4C  0ED0               	movlw	208
  4250  002C4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4251  002C50  0E00               	movlw	0
  4252  002C52  0100               	movlb	0	; () banked
  4253  002C54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4254  002C56  0E01               	movlw	1
  4255  002C58  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4256  002C5A  EC2E  F01D         	call	_updateServoPosition	;wreg free
  4257                           
  4258                           ;sort.c: 197: }
  4259                           
  4260                           ;sort.c: 196: break;
  4261                           
  4262                           ;sort.c: 195: default:
  4263                           
  4264                           ;sort.c: 194: break;
  4265  002C5E  D017               	goto	l6386
  4266  002C60                     l6384:
  4267  002C60  C065  F088         	movff	_cur_can,??_Distribution
  4268  002C64  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4269                           
  4270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4271                           ; Switch size 1, requested type "space"
  4272                           ; Number of cases is 1, Range of values is 0 to 0
  4273                           ; switch strategies available:
  4274                           ; Name         Instructions Cycles
  4275                           ; simple_byte            4     3 (average)
  4276                           ;	Chosen strategy is simple_byte
  4277  002C68  0100               	movlb	0	; () banked
  4278  002C6A  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4279  002C6C  0A00               	xorlw	0	; case 0
  4280  002C6E  A4D8               	btfss	status,2,c
  4281  002C70  D00E               	goto	l6386
  4282                           
  4283                           ; BSR set to: 0
  4284                           ; Switch size 1, requested type "space"
  4285                           ; Number of cases is 4, Range of values is 0 to 3
  4286                           ; switch strategies available:
  4287                           ; Name         Instructions Cycles
  4288                           ; simple_byte           13     7 (average)
  4289                           ;	Chosen strategy is simple_byte
  4290  002C72  0100               	movlb	0	; () banked
  4291  002C74  5188               	movf	??_Distribution& (0+255),w,b
  4292  002C76  0A00               	xorlw	0	; case 0
  4293  002C78  B4D8               	btfsc	status,2,c
  4294  002C7A  D7BE               	goto	l6374
  4295  002C7C  0A01               	xorlw	1	; case 1
  4296  002C7E  B4D8               	btfsc	status,2,c
  4297  002C80  D7C8               	goto	l6376
  4298  002C82  0A03               	xorlw	3	; case 2
  4299  002C84  B4D8               	btfsc	status,2,c
  4300  002C86  D7D2               	goto	l6378
  4301  002C88  0A01               	xorlw	1	; case 3
  4302  002C8A  B4D8               	btfsc	status,2,c
  4303  002C8C  D7DC               	goto	l6380
  4304  002C8E                     l6386:
  4305                           
  4306                           ;sort.c: 198: _delay((unsigned long)((500)*(32000000/4000.0)));
  4307  002C8E  0E15               	movlw	21
  4308  002C90  0100               	movlb	0	; () banked
  4309  002C92  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4310  002C94  0E4B               	movlw	75
  4311  002C96  0100               	movlb	0	; () banked
  4312  002C98  6F88               	movwf	??_Distribution& (0+255),b
  4313  002C9A  0EBE               	movlw	190
  4314  002C9C                     u6927:
  4315  002C9C  2EE8               	decfsz	wreg,f,c
  4316  002C9E  D7FE               	bra	u6927
  4317  002CA0  2F88               	decfsz	??_Distribution& (0+255),f,b
  4318  002CA2  D7FC               	bra	u6927
  4319  002CA4  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4320  002CA6  D7FA               	bra	u6927
  4321  002CA8  F000               	nop	
  4322                           
  4323                           ;sort.c: 201: updateServoPosition(1350, 3);
  4324  002CAA  0E05               	movlw	5
  4325  002CAC  0100               	movlb	0	; () banked
  4326  002CAE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4327  002CB0  0E46               	movlw	70
  4328  002CB2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4329  002CB4  0E00               	movlw	0
  4330  002CB6  0100               	movlb	0	; () banked
  4331  002CB8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4332  002CBA  0E03               	movlw	3
  4333  002CBC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4334  002CBE  EC2E  F01D         	call	_updateServoPosition	;wreg free
  4335                           
  4336                           ;sort.c: 202: _delay((unsigned long)((500)*(32000000/4000.0)));
  4337  002CC2  0E15               	movlw	21
  4338  002CC4  0100               	movlb	0	; () banked
  4339  002CC6  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4340  002CC8  0E4B               	movlw	75
  4341  002CCA  0100               	movlb	0	; () banked
  4342  002CCC  6F88               	movwf	??_Distribution& (0+255),b
  4343  002CCE  0EBE               	movlw	190
  4344  002CD0                     u6937:
  4345  002CD0  2EE8               	decfsz	wreg,f,c
  4346  002CD2  D7FE               	bra	u6937
  4347  002CD4  2F88               	decfsz	??_Distribution& (0+255),f,b
  4348  002CD6  D7FC               	bra	u6937
  4349  002CD8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4350  002CDA  D7FA               	bra	u6937
  4351  002CDC  F000               	nop	
  4352                           
  4353                           ;sort.c: 205: updateServoPosition(1200, 1);
  4354  002CDE  0E04               	movlw	4
  4355  002CE0  0100               	movlb	0	; () banked
  4356  002CE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4357  002CE4  0EB0               	movlw	176
  4358  002CE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4359  002CE8  0E00               	movlw	0
  4360  002CEA  0100               	movlb	0	; () banked
  4361  002CEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4362  002CEE  0E01               	movlw	1
  4363  002CF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4364  002CF2  EC2E  F01D         	call	_updateServoPosition	;wreg free
  4365                           
  4366                           ;sort.c: 206: updateServoPosition(1190, 3);
  4367  002CF6  0E04               	movlw	4
  4368  002CF8  0100               	movlb	0	; () banked
  4369  002CFA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4370  002CFC  0EA6               	movlw	166
  4371  002CFE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4372  002D00  0E00               	movlw	0
  4373  002D02  0100               	movlb	0	; () banked
  4374  002D04  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4375  002D06  0E03               	movlw	3
  4376  002D08  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4377  002D0A  EC2E  F01D         	call	_updateServoPosition	;wreg free
  4378                           
  4379                           ;sort.c: 207: f_can_coming_to_distribution = 0;
  4380  002D0E  0E00               	movlw	0
  4381  002D10  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4382  002D12  0E00               	movlw	0
  4383  002D14  6E6F               	movwf	_f_can_coming_to_distribution,c
  4384                           
  4385                           ;sort.c: 208: f_can_distributed = 1;
  4386  002D16  0E00               	movlw	0
  4387  002D18  6E72               	movwf	_f_can_distributed+1,c
  4388  002D1A  0E01               	movlw	1
  4389  002D1C  6E71               	movwf	_f_can_distributed,c
  4390                           
  4391                           ;sort.c: 209: if(f_lastCan == 1){
  4392  002D1E  0473               	decf	_f_lastCan,w,c
  4393  002D20  1074               	iorwf	_f_lastCan+1,w,c
  4394  002D22  A4D8               	btfss	status,2,c
  4395  002D24  0012               	return	
  4396                           
  4397                           ;sort.c: 210: machine_state = DoneSorting_state;
  4398  002D26  0E02               	movlw	2
  4399  002D28  0100               	movlb	0	; () banked
  4400  002D2A  6FFC               	movwf	_machine_state& (0+255),b
  4401                           
  4402                           ; BSR set to: 0
  4403  002D2C  0012               	return	
  4404  002D2E                     __end_of_Distribution:
  4405                           	opt stack 0
  4406                           tblptru	equ	0xFF8
  4407                           tblptrh	equ	0xFF7
  4408                           tblptrl	equ	0xFF6
  4409                           tablat	equ	0xFF5
  4410                           prodh	equ	0xFF4
  4411                           prodl	equ	0xFF3
  4412                           postinc0	equ	0xFEE
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _machineConfig *****************
  4424 ;; Defined at:
  4425 ;;		line 15 in file "MachineConfig.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;		None
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;		None
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  1    wreg      void 
  4432 ;; Registers used:
  4433 ;;		wreg, status,2
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;Total ram usage:        0 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    7
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_main
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text11
  4454  003CD6                     __ptext11:
  4455                           	opt stack 0
  4456  003CD6                     _machineConfig:
  4457                           	opt stack 23
  4458                           
  4459                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4460                           
  4461                           ;incstack = 0
  4462  003CD6  0EF0               	movlw	240
  4463  003CD8  6ED3               	movwf	4051,c	;volatile
  4464                           
  4465                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4466  003CDA  8C9B               	bsf	3995,6,c	;volatile
  4467                           
  4468                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4469  003CDC  0E07               	movlw	7
  4470  003CDE  6E92               	movwf	3986,c	;volatile
  4471                           
  4472                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4473  003CE0  0EF2               	movlw	242
  4474  003CE2  6E93               	movwf	3987,c	;volatile
  4475                           
  4476                           ;MachineConfig.c: 27: TRISC = 0x00;
  4477  003CE4  0E00               	movlw	0
  4478  003CE6  6E94               	movwf	3988,c	;volatile
  4479                           
  4480                           ;MachineConfig.c: 31: TRISD = 0x00;
  4481  003CE8  0E00               	movlw	0
  4482  003CEA  6E95               	movwf	3989,c	;volatile
  4483                           
  4484                           ;MachineConfig.c: 34: TRISE = 0x00;
  4485  003CEC  0E00               	movlw	0
  4486  003CEE  6E96               	movwf	3990,c	;volatile
  4487                           
  4488                           ;MachineConfig.c: 37: LATA = 0x00;
  4489  003CF0  0E00               	movlw	0
  4490  003CF2  6E89               	movwf	3977,c	;volatile
  4491                           
  4492                           ;MachineConfig.c: 38: LATB = 0x00;
  4493  003CF4  0E00               	movlw	0
  4494  003CF6  6E8A               	movwf	3978,c	;volatile
  4495                           
  4496                           ;MachineConfig.c: 39: LATC = 0x00;
  4497  003CF8  0E00               	movlw	0
  4498  003CFA  6E8B               	movwf	3979,c	;volatile
  4499                           
  4500                           ;MachineConfig.c: 40: LATD = 0x00;
  4501  003CFC  0E00               	movlw	0
  4502  003CFE  6E8C               	movwf	3980,c	;volatile
  4503                           
  4504                           ;MachineConfig.c: 41: LATE = 0x00;
  4505  003D00  0E00               	movlw	0
  4506  003D02  6E8D               	movwf	3981,c	;volatile
  4507                           
  4508                           ;MachineConfig.c: 43: nRBPU = 0;
  4509  003D04  9EF1               	bcf	intcon2,7,c	;volatile
  4510                           
  4511                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4512  003D06  0E00               	movlw	0
  4513  003D08  6EC2               	movwf	4034,c	;volatile
  4514                           
  4515                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4516  003D0A  0E0D               	movlw	13
  4517  003D0C  6EC1               	movwf	4033,c	;volatile
  4518                           
  4519                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4520  003D0E  0E00               	movlw	0
  4521  003D10  6EB5               	movwf	4021,c	;volatile
  4522                           
  4523                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4524  003D12  96B4               	bcf	4020,3,c	;volatile
  4525                           
  4526                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4527  003D14  0EB1               	movlw	177
  4528  003D16  6EC0               	movwf	4032,c	;volatile
  4529                           
  4530                           ;MachineConfig.c: 55: INT1IE = 1;
  4531  003D18  86F0               	bsf	intcon3,3,c	;volatile
  4532                           
  4533                           ;MachineConfig.c: 57: TMR0IE = 1;
  4534  003D1A  8AF2               	bsf	intcon,5,c	;volatile
  4535                           
  4536                           ;MachineConfig.c: 58: TMR1IE = 1;
  4537  003D1C  809D               	bsf	3997,0,c	;volatile
  4538                           
  4539                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4540  003D1E  0EB0               	movlw	176
  4541  003D20  6ECD               	movwf	4045,c	;volatile
  4542                           
  4543                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4544  003D22  0EB0               	movlw	176
  4545  003D24  6EB1               	movwf	4017,c	;volatile
  4546                           
  4547                           ;MachineConfig.c: 61: TMR2IE = 1;
  4548  003D26  829D               	bsf	3997,1,c	;volatile
  4549                           
  4550                           ;MachineConfig.c: 62: TMR3IE = 1;
  4551  003D28  82A0               	bsf	4000,1,c	;volatile
  4552                           
  4553                           ;MachineConfig.c: 63: PEIE = 1;
  4554  003D2A  8CF2               	bsf	intcon,6,c	;volatile
  4555                           
  4556                           ;MachineConfig.c: 64: ADIE = 0;
  4557  003D2C  9C9D               	bcf	3997,6,c	;volatile
  4558                           
  4559                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4560  003D2E  9EF2               	bcf	intcon,7,c	;volatile
  4561  003D30  0012               	return		;funcret
  4562  003D32                     __end_of_machineConfig:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           intcon	equ	0xFF2
  4571                           intcon2	equ	0xFF1
  4572                           intcon3	equ	0xFF0
  4573                           postinc0	equ	0xFEE
  4574                           wreg	equ	0xFE8
  4575                           postdec1	equ	0xFE5
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _logRun *****************
  4585 ;; Defined at:
  4586 ;;		line 84 in file "EEPROM.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;		None
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4591 ;;  i               2   55[BANK0 ] int 
  4592 ;;  num             1   49[BANK0 ] unsigned char 
  4593 ;;  addr            2   57[BANK0 ] unsigned short 
  4594 ;;  byte11          1   54[BANK0 ] unsigned char 
  4595 ;;  byte3           1   52[BANK0 ] unsigned char 
  4596 ;;  byte2           1   51[BANK0 ] unsigned char 
  4597 ;;  byte1           1   50[BANK0 ] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;Total ram usage:       10 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:   11
  4614 ;; This function calls:
  4615 ;;		_EEPROM_read
  4616 ;;		_EEPROM_write
  4617 ;; This function is called by:
  4618 ;;		_main
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text12
  4623  002D2E                     __ptext12:
  4624                           	opt stack 0
  4625  002D2E                     _logRun:
  4626                           	opt stack 19
  4627                           
  4628                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4629                           
  4630                           ;incstack = 0
  4631  002D2E  0E00               	movlw	0
  4632  002D30  0100               	movlb	0	; () banked
  4633  002D32  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4634  002D34  0E00               	movlw	0
  4635  002D36  6F80               	movwf	EEPROM_read@address& (0+255),b
  4636  002D38  EC97  F022         	call	_EEPROM_read	;wreg free
  4637  002D3C  0100               	movlb	0	; () banked
  4638  002D3E  6FFD               	movwf	_sel& (0+255),b
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4642  002D40  0100               	movlb	0	; () banked
  4643  002D42  51FD               	movf	_sel& (0+255),w,b
  4644  002D44  0D0B               	mullw	11
  4645  002D46  0E01               	movlw	1
  4646  002D48  24F3               	addwf	prodl,w,c
  4647  002D4A  0100               	movlb	0	; () banked
  4648  002D4C  6FB9               	movwf	logRun@addr& (0+255),b
  4649  002D4E  0E00               	movlw	0
  4650  002D50  20F4               	addwfc	prodh,w,c
  4651  002D52  0100               	movlb	0	; () banked
  4652  002D54  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;EEPROM.c: 101: if (sel < 3){
  4656  002D56  0E03               	movlw	3
  4657  002D58  0100               	movlb	0	; () banked
  4658  002D5A  61FD               	cpfslt	_sel& (0+255),b
  4659  002D5C  D00E               	goto	l7786
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4663  002D5E  0100               	movlb	0	; () banked
  4664  002D60  29FD               	incf	_sel& (0+255),w,b
  4665  002D62  0100               	movlb	0	; () banked
  4666  002D64  6FB1               	movwf	logRun@num& (0+255),b
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4670  002D66  0E00               	movlw	0
  4671  002D68  0100               	movlb	0	; () banked
  4672  002D6A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4673  002D6C  0E00               	movlw	0
  4674  002D6E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4675  002D70  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4676  002D74  EC56  F019         	call	_EEPROM_write	;wreg free
  4677                           
  4678                           ;EEPROM.c: 104: }
  4679  002D78  D00A               	goto	l7788
  4680  002D7A                     l7786:
  4681                           
  4682                           ;EEPROM.c: 105: else{
  4683                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4684  002D7A  0E00               	movlw	0
  4685  002D7C  0100               	movlb	0	; () banked
  4686  002D7E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4687  002D80  0E00               	movlw	0
  4688  002D82  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4689  002D84  0E00               	movlw	0
  4690  002D86  0100               	movlb	0	; () banked
  4691  002D88  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4692  002D8A  EC56  F019         	call	_EEPROM_write	;wreg free
  4693  002D8E                     l7788:
  4694                           
  4695                           ;EEPROM.c: 107: }
  4696                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4697  002D8E  0100               	movlb	0	; () banked
  4698  002D90  51FE               	movf	_count_total& (0+255),w,b
  4699  002D92  0980               	iorlw	128
  4700  002D94  0100               	movlb	0	; () banked
  4701  002D96  6FB2               	movwf	logRun@byte1& (0+255),b
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4705  002D98  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4706  002D9C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4707  002DA0  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4708  002DA4  EC56  F019         	call	_EEPROM_write	;wreg free
  4709                           
  4710                           ;EEPROM.c: 112: addr++;
  4711  002DA8  0100               	movlb	0	; () banked
  4712  002DAA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4713  002DAC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4717  002DAE  3861               	swapf	_count_pop_no_tab,w,c
  4718  002DB0  0BF0               	andlw	240
  4719  002DB2  1063               	iorwf	_count_pop_w_tab,w,c
  4720  002DB4  0100               	movlb	0	; () banked
  4721  002DB6  6FB3               	movwf	logRun@byte2& (0+255),b
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4725  002DB8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4726  002DBC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4727  002DC0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4728  002DC4  EC56  F019         	call	_EEPROM_write	;wreg free
  4729                           
  4730                           ;EEPROM.c: 117: addr++;
  4731  002DC8  0100               	movlb	0	; () banked
  4732  002DCA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4733  002DCC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4737  002DCE  385F               	swapf	_count_can_w_lab,w,c
  4738  002DD0  0BF0               	andlw	240
  4739  002DD2  105D               	iorwf	_count_can_no_lab,w,c
  4740  002DD4  0100               	movlb	0	; () banked
  4741  002DD6  6FB4               	movwf	logRun@byte3& (0+255),b
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4745  002DD8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4746  002DDC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4747  002DE0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4748  002DE4  EC56  F019         	call	_EEPROM_write	;wreg free
  4749                           
  4750                           ;EEPROM.c: 120: addr++;
  4751  002DE8  0100               	movlb	0	; () banked
  4752  002DEA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4753  002DEC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4757  002DEE  0E00               	movlw	0
  4758  002DF0  0100               	movlb	0	; () banked
  4759  002DF2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4760  002DF4  0E00               	movlw	0
  4761  002DF6  6FB7               	movwf	logRun@i& (0+255),b
  4762                           
  4763                           ; BSR set to: 0
  4764  002DF8  0100               	movlb	0	; () banked
  4765  002DFA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4766  002DFC  D008               	goto	l7812
  4767  002DFE  0100               	movlb	0	; () banked
  4768  002E00  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4769  002E02  E128               	bnz	l935
  4770  002E04  0E07               	movlw	7
  4771  002E06  0100               	movlb	0	; () banked
  4772  002E08  5DB7               	subwf	logRun@i& (0+255),w,b
  4773  002E0A  B0D8               	btfsc	status,0,c
  4774  002E0C  D023               	goto	l935
  4775  002E0E                     l7812:
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4779  002E0E  90D8               	bcf	status,0,c
  4780  002E10  0100               	movlb	0	; () banked
  4781  002E12  35B7               	rlcf	logRun@i& (0+255),w,b
  4782  002E14  6ED9               	movwf	fsr2l,c
  4783  002E16  0100               	movlb	0	; () banked
  4784  002E18  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4785  002E1A  6EDA               	movwf	fsr2h,c
  4786  002E1C  0E0E               	movlw	low _startTime
  4787  002E1E  26D9               	addwf	fsr2l,f,c
  4788  002E20  0E01               	movlw	high _startTime
  4789  002E22  22DA               	addwfc	fsr2h,f,c
  4790  002E24  50DF               	movf	indf2,w,c
  4791  002E26  0100               	movlb	0	; () banked
  4792  002E28  6FB5               	movwf	logRun@byte_i& (0+255),b
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4796  002E2A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4797  002E2E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4798  002E32  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4799  002E36  EC56  F019         	call	_EEPROM_write	;wreg free
  4800                           
  4801                           ;EEPROM.c: 126: addr++;
  4802  002E3A  0100               	movlb	0	; () banked
  4803  002E3C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4804  002E3E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4805                           
  4806                           ; BSR set to: 0
  4807  002E40  0100               	movlb	0	; () banked
  4808  002E42  4BB7               	infsnz	logRun@i& (0+255),f,b
  4809  002E44  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4810                           
  4811                           ; BSR set to: 0
  4812  002E46  0100               	movlb	0	; () banked
  4813  002E48  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4814  002E4A  D7E1               	goto	l7812
  4815  002E4C  0100               	movlb	0	; () banked
  4816  002E4E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4817  002E50  E101               	bnz	u6680
  4818  002E52  D7D8               	goto	L5
  4819  002E54                     u6680:
  4820  002E54                     l935:
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;EEPROM.c: 127: }
  4824                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4825  002E54  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4829  002E58  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4830  002E5C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4831  002E60  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4832  002E64  EC56  F019         	call	_EEPROM_write	;wreg free
  4833  002E68  0012               	return		;funcret
  4834  002E6A                     __end_of_logRun:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           intcon2	equ	0xFF1
  4844                           intcon3	equ	0xFF0
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           postdec1	equ	0xFE5
  4848                           fsr1l	equ	0xFE1
  4849                           indf2	equ	0xFDF
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _EEPROM_write *****************
  4857 ;; Defined at:
  4858 ;;		line 32 in file "EEPROM.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  address         2   43[BANK0 ] unsigned short 
  4861 ;;  data            1   45[BANK0 ] unsigned char 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  i               1   48[BANK0 ] unsigned char 
  4864 ;;  i               1   47[BANK0 ] unsigned char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  1    wreg      void 
  4867 ;; Registers used:
  4868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4874 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;Total ram usage:        6 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:   10
  4881 ;; This function calls:
  4882 ;;		_EEPROM_read
  4883 ;;		_lcdInst
  4884 ;;		_printf
  4885 ;; This function is called by:
  4886 ;;		_Loading
  4887 ;;		_logRun
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text13
  4892  0032AC                     __ptext13:
  4893                           	opt stack 0
  4894  0032AC                     _EEPROM_write:
  4895                           	opt stack 18
  4896                           
  4897                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4898                           
  4899                           ;incstack = 0
  4900  0032AC  84A6               	bsf	4006,2,c	;volatile
  4901                           
  4902                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4903  0032AE  0100               	movlb	0	; () banked
  4904  0032B0  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4905  0032B2  6EAA               	movwf	4010,c	;volatile
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4909  0032B4  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;EEPROM.c: 39: EEDATA = data;
  4913  0032B8  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4917  0032BC  9EA6               	bcf	4006,7,c	;volatile
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4921  0032BE  9CA6               	bcf	4006,6,c	;volatile
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4925  0032C0  9EF2               	bcf	intcon,7,c	;volatile
  4926                           
  4927                           ;EEPROM.c: 45: EECON2 = 0x55;
  4928  0032C2  0E55               	movlw	85
  4929  0032C4  6EA7               	movwf	4007,c	;volatile
  4930                           
  4931                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4932  0032C6  0EAA               	movlw	170
  4933  0032C8  6EA7               	movwf	4007,c	;volatile
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4937  0032CA  82A6               	bsf	4006,1,c	;volatile
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4941  0032CC  8EF2               	bsf	intcon,7,c	;volatile
  4942  0032CE                     l913:
  4943  0032CE  A8A1               	btfss	4001,4,c	;volatile
  4944  0032D0  D7FE               	goto	l913
  4945                           
  4946                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4947  0032D2  98A1               	bcf	4001,4,c	;volatile
  4948                           
  4949                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4950  0032D4  94A6               	bcf	4006,2,c	;volatile
  4951                           
  4952                           ;EEPROM.c: 57: if(debug){
  4953  0032D6  0100               	movlb	0	; () banked
  4954  0032D8  51E0               	movf	_debug& (0+255),w,b
  4955  0032DA  0100               	movlb	0	; () banked
  4956  0032DC  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4957  0032DE  B4D8               	btfsc	status,2,c
  4958  0032E0  0012               	return	
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4962  0032E2  0E01               	movlw	1
  4963  0032E4  ECD4  F022         	call	_lcdInst
  4964  0032E8  0E68               	movlw	104
  4965  0032EA  0100               	movlb	0	; () banked
  4966  0032EC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4967  0032EE  0EE4               	movlw	228
  4968  0032F0                     u6947:
  4969  0032F0  2EE8               	decfsz	wreg,f,c
  4970  0032F2  D7FE               	bra	u6947
  4971  0032F4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4972  0032F6  D7FC               	bra	u6947
  4973  0032F8  F000               	nop	
  4974                           
  4975                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4976  0032FA  0E80               	movlw	128
  4977  0032FC  ECD4  F022         	call	_lcdInst
  4978                           
  4979                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4980  003300  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4981  003304  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4982  003308  EC97  F022         	call	_EEPROM_read	;wreg free
  4983  00330C  0100               	movlb	0	; () banked
  4984  00330E  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4985  003310  A4D8               	btfss	status,2,c
  4986  003312  D024               	goto	l5940
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4990  003314  0E5A               	movlw	low STR_66
  4991  003316  0100               	movlb	0	; () banked
  4992  003318  6F8E               	movwf	printf@f& (0+255),b
  4993  00331A  0EFB               	movlw	high STR_66
  4994  00331C  0100               	movlb	0	; () banked
  4995  00331E  6F8F               	movwf	(printf@f+1)& (0+255),b
  4996  003320  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4997  003324  0100               	movlb	0	; () banked
  4998  003326  6B91               	clrf	(?_printf+3)& (0+255),b
  4999  003328  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5000  00332C  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5001  003330  EC9C  F008         	call	_printf	;wreg free
  5002                           
  5003                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5004  003334  0E00               	movlw	0
  5005  003336  0100               	movlb	0	; () banked
  5006  003338  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5007  00333A                     l5932:
  5008                           
  5009                           ; BSR set to: 0
  5010  00333A  0E63               	movlw	99
  5011  00333C  0100               	movlb	0	; () banked
  5012  00333E  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5013  003340  D001               	goto	l5936
  5014  003342  0012               	return	
  5015  003344                     l5936:
  5016                           
  5017                           ; BSR set to: 0
  5018  003344  0E68               	movlw	104
  5019  003346  0100               	movlb	0	; () banked
  5020  003348  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5021  00334A  0EE4               	movlw	228
  5022  00334C                     u6957:
  5023  00334C  2EE8               	decfsz	wreg,f,c
  5024  00334E  D7FE               	bra	u6957
  5025  003350  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5026  003352  D7FC               	bra	u6957
  5027  003354  F000               	nop	
  5028  003356  0100               	movlb	0	; () banked
  5029  003358  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5030  00335A  D7EF               	goto	l5932
  5031  00335C                     l5940:
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5035  00335C  0EBC               	movlw	low STR_67
  5036  00335E  0100               	movlb	0	; () banked
  5037  003360  6F8E               	movwf	printf@f& (0+255),b
  5038  003362  0EFF               	movlw	high STR_67
  5039  003364  0100               	movlb	0	; () banked
  5040  003366  6F8F               	movwf	(printf@f+1)& (0+255),b
  5041  003368  EC9C  F008         	call	_printf	;wreg free
  5042  00336C  0E00               	movlw	0
  5043  00336E  0100               	movlb	0	; () banked
  5044  003370  6FB0               	movwf	EEPROM_write@i_1319& (0+255),b
  5045  003372                     l5944:
  5046                           
  5047                           ; BSR set to: 0
  5048  003372  0E63               	movlw	99
  5049  003374  0100               	movlb	0	; () banked
  5050  003376  65B0               	cpfsgt	EEPROM_write@i_1319& (0+255),b
  5051  003378  D001               	goto	l5948
  5052  00337A  0012               	return	
  5053  00337C                     l5948:
  5054                           
  5055                           ; BSR set to: 0
  5056  00337C  0E68               	movlw	104
  5057  00337E  0100               	movlb	0	; () banked
  5058  003380  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5059  003382  0EE4               	movlw	228
  5060  003384                     u6967:
  5061  003384  2EE8               	decfsz	wreg,f,c
  5062  003386  D7FE               	bra	u6967
  5063  003388  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5064  00338A  D7FC               	bra	u6967
  5065  00338C  F000               	nop	
  5066  00338E  0100               	movlb	0	; () banked
  5067  003390  2BB0               	incf	EEPROM_write@i_1319& (0+255),f,b
  5068  003392  D7EF               	goto	l5944
  5069  003394                     __end_of_EEPROM_write:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           intcon	equ	0xFF2
  5078                           intcon2	equ	0xFF1
  5079                           intcon3	equ	0xFF0
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           postdec1	equ	0xFE5
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _EEPROM_read *****************
  5092 ;; Defined at:
  5093 ;;		line 68 in file "EEPROM.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  address         2    0[BANK0 ] unsigned short 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      unsigned char 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        2 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    7
  5114 ;; This function calls:
  5115 ;;		Nothing
  5116 ;; This function is called by:
  5117 ;;		_Loading
  5118 ;;		_EEPROM_write
  5119 ;;		_logRun
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text14
  5124  00452E                     __ptext14:
  5125                           	opt stack 0
  5126  00452E                     _EEPROM_read:
  5127                           	opt stack 20
  5128                           
  5129                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;incstack = 0
  5133  00452E  0100               	movlb	0	; () banked
  5134  004530  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5135  004532  6EAA               	movwf	4010,c	;volatile
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5139  004534  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5143  004538  9EA6               	bcf	4006,7,c	;volatile
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5147  00453A  9CA6               	bcf	4006,6,c	;volatile
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5151  00453C  80A6               	bsf	4006,0,c	;volatile
  5152  00453E                     l926:
  5153  00453E  B0A6               	btfsc	4006,0,c	;volatile
  5154  004540  D7FE               	goto	l926
  5155                           
  5156                           ;EEPROM.c: 81: return EEDATA;
  5157  004542  50A8               	movf	4008,w,c	;volatile
  5158  004544  0012               	return	
  5159  004546                     __end_of_EEPROM_read:
  5160                           	opt stack 0
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           intcon2	equ	0xFF1
  5169                           intcon3	equ	0xFF0
  5170                           postinc0	equ	0xFEE
  5171                           wreg	equ	0xFE8
  5172                           postdec1	equ	0xFE5
  5173                           fsr1l	equ	0xFE1
  5174                           indf2	equ	0xFDF
  5175                           postinc2	equ	0xFDE
  5176                           postdec2	equ	0xFDD
  5177                           fsr2h	equ	0xFDA
  5178                           fsr2l	equ	0xFD9
  5179                           status	equ	0xFD8
  5180                           
  5181 ;; *************** function _initUI *****************
  5182 ;; Defined at:
  5183 ;;		line 62 in file "UI.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5201 ;;Total ram usage:        0 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:   12
  5204 ;; This function calls:
  5205 ;;		_change_state_to_menu_start
  5206 ;;		_loadRTC
  5207 ;; This function is called by:
  5208 ;;		_main
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text15
  5213  004484                     __ptext15:
  5214                           	opt stack 0
  5215  004484                     _initUI:
  5216                           	opt stack 18
  5217                           
  5218                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5219                           
  5220                           ;incstack = 0
  5221  004484  8EF2               	bsf	intcon,7,c	;volatile
  5222                           
  5223                           ;UI.c: 64: machine_state = UI_state;
  5224  004486  0E00               	movlw	0
  5225  004488  0100               	movlb	0	; () banked
  5226  00448A  6FFC               	movwf	_machine_state& (0+255),b
  5227                           
  5228                           ;UI.c: 65: logstate = 0;
  5229  00448C  0E00               	movlw	0
  5230  00448E  0100               	movlb	0	; () banked
  5231  004490  6FF7               	movwf	(_logstate+1)& (0+255),b
  5232  004492  0E00               	movlw	0
  5233  004494  6FF6               	movwf	_logstate& (0+255),b
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;UI.c: 67: loadRTC();
  5237  004496  ECE3  F01B         	call	_loadRTC	;wreg free
  5238                           
  5239                           ;UI.c: 69: change_state_to_menu_start();
  5240  00449A  ECB3  F021         	call	_change_state_to_menu_start	;wreg free
  5241                           
  5242                           ;UI.c: 70: firstboot = 1;
  5243  00449E  0E00               	movlw	0
  5244  0044A0  6E76               	movwf	_firstboot+1,c
  5245  0044A2  0E01               	movlw	1
  5246  0044A4  6E75               	movwf	_firstboot,c
  5247  0044A6  0012               	return		;funcret
  5248  0044A8                     __end_of_initUI:
  5249                           	opt stack 0
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           intcon	equ	0xFF2
  5257                           intcon2	equ	0xFF1
  5258                           intcon3	equ	0xFF0
  5259                           postinc0	equ	0xFEE
  5260                           wreg	equ	0xFE8
  5261                           postdec1	equ	0xFE5
  5262                           fsr1l	equ	0xFE1
  5263                           indf2	equ	0xFDF
  5264                           postinc2	equ	0xFDE
  5265                           postdec2	equ	0xFDD
  5266                           fsr2h	equ	0xFDA
  5267                           fsr2l	equ	0xFD9
  5268                           status	equ	0xFD8
  5269                           
  5270 ;; *************** function _loadRTC *****************
  5271 ;; Defined at:
  5272 ;;		line 28 in file "RTC.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;		None
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  i               2   22[BANK0 ] int 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      void 
  5279 ;; Registers used:
  5280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;Total ram usage:        3 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    9
  5293 ;; This function calls:
  5294 ;;		_I2C_Master_Init
  5295 ;;		_I2C_Master_Start
  5296 ;;		_I2C_Master_Stop
  5297 ;;		_I2C_Master_Write
  5298 ;; This function is called by:
  5299 ;;		_initUI
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text16
  5304  0037C6                     __ptext16:
  5305                           	opt stack 0
  5306  0037C6                     _loadRTC:
  5307                           	opt stack 20
  5308                           
  5309                           ;RTC.c: 30: I2C_Master_Init(10000);
  5310                           
  5311                           ;incstack = 0
  5312  0037C6  0E10               	movlw	16
  5313  0037C8  0100               	movlb	0	; () banked
  5314  0037CA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5315  0037CC  0E27               	movlw	39
  5316  0037CE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5317  0037D0  0E00               	movlw	0
  5318  0037D2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5319  0037D4  0E00               	movlw	0
  5320  0037D6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5321  0037D8  EC3B  F01E         	call	_I2C_Master_Init	;wreg free
  5322                           
  5323                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5324  0037DC  9EF2               	bcf	intcon,7,c	;volatile
  5325                           
  5326                           ;RTC.c: 34: I2C_Master_Start();
  5327  0037DE  ECFA  F022         	call	_I2C_Master_Start	;wreg free
  5328                           
  5329                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5330  0037E2  0E00               	movlw	0
  5331  0037E4  0100               	movlb	0	; () banked
  5332  0037E6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5333  0037E8  0ED0               	movlw	208
  5334  0037EA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5335  0037EC  ECE8  F022         	call	_I2C_Master_Write	;wreg free
  5336                           
  5337                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5338  0037F0  0E00               	movlw	0
  5339  0037F2  0100               	movlb	0	; () banked
  5340  0037F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5341  0037F6  0E00               	movlw	0
  5342  0037F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5343  0037FA  ECE8  F022         	call	_I2C_Master_Write	;wreg free
  5344                           
  5345                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5346  0037FE  0E00               	movlw	0
  5347  003800  0100               	movlb	0	; () banked
  5348  003802  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5349  003804  0E00               	movlw	0
  5350  003806  6F96               	movwf	loadRTC@i& (0+255),b
  5351  003808                     l6064:
  5352                           
  5353                           ; BSR set to: 0
  5354  003808  0100               	movlb	0	; () banked
  5355  00380A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5356  00380C  D008               	goto	l6068
  5357  00380E  0100               	movlb	0	; () banked
  5358  003810  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5359  003812  E11B               	bnz	l6074
  5360  003814  0E07               	movlw	7
  5361  003816  0100               	movlb	0	; () banked
  5362  003818  5D96               	subwf	loadRTC@i& (0+255),w,b
  5363  00381A  B0D8               	btfsc	status,0,c
  5364  00381C  D016               	goto	l6074
  5365  00381E                     l6068:
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5369  00381E  0E24               	movlw	low _time
  5370  003820  0100               	movlb	0	; () banked
  5371  003822  2596               	addwf	loadRTC@i& (0+255),w,b
  5372  003824  6ED9               	movwf	fsr2l,c
  5373  003826  0E01               	movlw	high _time
  5374  003828  0100               	movlb	0	; () banked
  5375  00382A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5376  00382C  6EDA               	movwf	fsr2h,c
  5377  00382E  50DF               	movf	indf2,w,c
  5378  003830  0100               	movlb	0	; () banked
  5379  003832  6F95               	movwf	??_loadRTC& (0+255),b
  5380  003834  0100               	movlb	0	; () banked
  5381  003836  5195               	movf	??_loadRTC& (0+255),w,b
  5382  003838  0100               	movlb	0	; () banked
  5383  00383A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5384  00383C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5385  00383E  ECE8  F022         	call	_I2C_Master_Write	;wreg free
  5386  003842  0100               	movlb	0	; () banked
  5387  003844  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5388  003846  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5389  003848  D7DF               	goto	l6064
  5390  00384A                     l6074:
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;RTC.c: 39: }
  5394                           ;RTC.c: 40: I2C_Master_Stop();
  5395  00384A  ECF6  F022         	call	_I2C_Master_Stop	;wreg free
  5396                           
  5397                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5398  00384E  8EF2               	bsf	intcon,7,c	;volatile
  5399  003850  0012               	return		;funcret
  5400  003852                     __end_of_loadRTC:
  5401                           	opt stack 0
  5402                           tblptru	equ	0xFF8
  5403                           tblptrh	equ	0xFF7
  5404                           tblptrl	equ	0xFF6
  5405                           tablat	equ	0xFF5
  5406                           prodh	equ	0xFF4
  5407                           prodl	equ	0xFF3
  5408                           intcon	equ	0xFF2
  5409                           intcon2	equ	0xFF1
  5410                           intcon3	equ	0xFF0
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           postdec1	equ	0xFE5
  5414                           fsr1l	equ	0xFE1
  5415                           indf2	equ	0xFDF
  5416                           postinc2	equ	0xFDE
  5417                           postdec2	equ	0xFDD
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _I2C_Master_Init *****************
  5423 ;; Defined at:
  5424 ;;		line 15 in file "I2C.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  c               4   13[BANK0 ] const unsigned long 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;Total ram usage:        8 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    8
  5445 ;; This function calls:
  5446 ;;		___lldiv
  5447 ;; This function is called by:
  5448 ;;		_loadRTC
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text17
  5453  003C76                     __ptext17:
  5454                           	opt stack 0
  5455  003C76                     _I2C_Master_Init:
  5456                           	opt stack 20
  5457                           
  5458                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5459                           
  5460                           ;incstack = 0
  5461  003C76  0E00               	movlw	0
  5462  003C78  6EC7               	movwf	4039,c	;volatile
  5463                           
  5464                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5465  003C7A  0E28               	movlw	40
  5466  003C7C  6EC6               	movwf	4038,c	;volatile
  5467                           
  5468                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5469  003C7E  0E00               	movlw	0
  5470  003C80  6EC5               	movwf	4037,c	;volatile
  5471                           
  5472                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5473  003C82  0E00               	movlw	0
  5474  003C84  0100               	movlb	0	; () banked
  5475  003C86  6F80               	movwf	___lldiv@dividend& (0+255),b
  5476  003C88  0E48               	movlw	72
  5477  003C8A  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5478  003C8C  0EE8               	movlw	232
  5479  003C8E  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5480  003C90  0E01               	movlw	1
  5481  003C92  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5482  003C94  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5483  003C98  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5484  003C9C  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5485  003CA0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5486  003CA4  0E02               	movlw	2
  5487  003CA6                     u4375:
  5488  003CA6  90D8               	bcf	status,0,c
  5489  003CA8  0100               	movlb	0	; () banked
  5490  003CAA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5491  003CAC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5492  003CAE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5493  003CB0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5494  003CB2  2EE8               	decfsz	wreg,f,c
  5495  003CB4  D7F8               	goto	u4375
  5496  003CB6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5497  003CBA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5498  003CBE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5499  003CC2  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5500  003CC6  EC94  F01A         	call	___lldiv	;wreg free
  5501  003CCA  0100               	movlb	0	; () banked
  5502  003CCC  0580               	decf	?___lldiv& (0+255),w,b
  5503  003CCE  6EC8               	movwf	4040,c	;volatile
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;I2C.c: 22: TRISC3 = 1;
  5507  003CD0  8694               	bsf	3988,3,c	;volatile
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;I2C.c: 23: TRISC4 = 1;
  5511  003CD2  8894               	bsf	3988,4,c	;volatile
  5512                           
  5513                           ; BSR set to: 0
  5514  003CD4  0012               	return		;funcret
  5515  003CD6                     __end_of_I2C_Master_Init:
  5516                           	opt stack 0
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           intcon2	equ	0xFF1
  5525                           intcon3	equ	0xFF0
  5526                           postinc0	equ	0xFEE
  5527                           wreg	equ	0xFE8
  5528                           postdec1	equ	0xFE5
  5529                           fsr1l	equ	0xFE1
  5530                           indf2	equ	0xFDF
  5531                           postinc2	equ	0xFDE
  5532                           postdec2	equ	0xFDD
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function ___lldiv *****************
  5538 ;; Defined at:
  5539 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  dividend        4    0[BANK0 ] unsigned long 
  5542 ;;  divisor         4    4[BANK0 ] unsigned long 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  quotient        4    8[BANK0 ] unsigned long 
  5545 ;;  counter         1   12[BANK0 ] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  4    0[BANK0 ] unsigned long 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5555 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;Total ram usage:       13 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    7
  5562 ;; This function calls:
  5563 ;;		Nothing
  5564 ;; This function is called by:
  5565 ;;		_I2C_Master_Init
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text18
  5570  003528                     __ptext18:
  5571                           	opt stack 0
  5572  003528                     ___lldiv:
  5573                           	opt stack 20
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;incstack = 0
  5577  003528  0E00               	movlw	0
  5578  00352A  0100               	movlb	0	; () banked
  5579  00352C  6F88               	movwf	___lldiv@quotient& (0+255),b
  5580  00352E  0E00               	movlw	0
  5581  003530  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5582  003532  0E00               	movlw	0
  5583  003534  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5584  003536  0E00               	movlw	0
  5585  003538  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588  00353A  0100               	movlb	0	; () banked
  5589  00353C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5590  00353E  0100               	movlb	0	; () banked
  5591  003540  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5592  003542  0100               	movlb	0	; () banked
  5593  003544  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5594  003546  0100               	movlb	0	; () banked
  5595  003548  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5596  00354A  B4D8               	btfsc	status,2,c
  5597  00354C  D042               	goto	l1622
  5598                           
  5599                           ; BSR set to: 0
  5600  00354E  0E01               	movlw	1
  5601  003550  0100               	movlb	0	; () banked
  5602  003552  6F8C               	movwf	___lldiv@counter& (0+255),b
  5603  003554  D008               	goto	l5504
  5604  003556                     l5502:
  5605                           
  5606                           ; BSR set to: 0
  5607  003556  0100               	movlb	0	; () banked
  5608  003558  90D8               	bcf	status,0,c
  5609  00355A  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5610  00355C  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5611  00355E  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5612  003560  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5613  003562  0100               	movlb	0	; () banked
  5614  003564  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5615  003566                     l5504:
  5616                           
  5617                           ; BSR set to: 0
  5618  003566  0100               	movlb	0	; () banked
  5619  003568  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5620  00356A  D7F5               	goto	l5502
  5621  00356C                     l5506:
  5622                           
  5623                           ; BSR set to: 0
  5624  00356C  0100               	movlb	0	; () banked
  5625  00356E  90D8               	bcf	status,0,c
  5626  003570  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5627  003572  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5628  003574  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5629  003576  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5630                           
  5631                           ; BSR set to: 0
  5632  003578  0100               	movlb	0	; () banked
  5633  00357A  5184               	movf	___lldiv@divisor& (0+255),w,b
  5634  00357C  0100               	movlb	0	; () banked
  5635  00357E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5636  003580  0100               	movlb	0	; () banked
  5637  003582  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5638  003584  0100               	movlb	0	; () banked
  5639  003586  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5640  003588  0100               	movlb	0	; () banked
  5641  00358A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5642  00358C  0100               	movlb	0	; () banked
  5643  00358E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5644  003590  0100               	movlb	0	; () banked
  5645  003592  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5646  003594  0100               	movlb	0	; () banked
  5647  003596  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5648  003598  A0D8               	btfss	status,0,c
  5649  00359A  D012               	goto	l5514
  5650                           
  5651                           ; BSR set to: 0
  5652  00359C  0100               	movlb	0	; () banked
  5653  00359E  5184               	movf	___lldiv@divisor& (0+255),w,b
  5654  0035A0  0100               	movlb	0	; () banked
  5655  0035A2  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5656  0035A4  0100               	movlb	0	; () banked
  5657  0035A6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5658  0035A8  0100               	movlb	0	; () banked
  5659  0035AA  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5660  0035AC  0100               	movlb	0	; () banked
  5661  0035AE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5662  0035B0  0100               	movlb	0	; () banked
  5663  0035B2  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5664  0035B4  0100               	movlb	0	; () banked
  5665  0035B6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5666  0035B8  0100               	movlb	0	; () banked
  5667  0035BA  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5668                           
  5669                           ; BSR set to: 0
  5670  0035BC  0100               	movlb	0	; () banked
  5671  0035BE  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5672  0035C0                     l5514:
  5673                           
  5674                           ; BSR set to: 0
  5675  0035C0  0100               	movlb	0	; () banked
  5676  0035C2  90D8               	bcf	status,0,c
  5677  0035C4  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5678  0035C6  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5679  0035C8  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5680  0035CA  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5681                           
  5682                           ; BSR set to: 0
  5683  0035CC  0100               	movlb	0	; () banked
  5684  0035CE  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5685  0035D0  D7CD               	goto	l5506
  5686  0035D2                     l1622:
  5687                           
  5688                           ; BSR set to: 0
  5689  0035D2  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5690  0035D6  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5691  0035DA  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5692  0035DE  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5693                           
  5694                           ; BSR set to: 0
  5695  0035E2  0012               	return		;funcret
  5696  0035E4                     __end_of___lldiv:
  5697                           	opt stack 0
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           prodh	equ	0xFF4
  5703                           prodl	equ	0xFF3
  5704                           intcon	equ	0xFF2
  5705                           intcon2	equ	0xFF1
  5706                           intcon3	equ	0xFF0
  5707                           postinc0	equ	0xFEE
  5708                           wreg	equ	0xFE8
  5709                           postdec1	equ	0xFE5
  5710                           fsr1l	equ	0xFE1
  5711                           indf2	equ	0xFDF
  5712                           postinc2	equ	0xFDE
  5713                           postdec2	equ	0xFDD
  5714                           fsr2h	equ	0xFDA
  5715                           fsr2l	equ	0xFD9
  5716                           status	equ	0xFD8
  5717                           
  5718 ;; *************** function _change_state_to_menu_start *****************
  5719 ;; Defined at:
  5720 ;;		line 472 in file "UI.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;		None
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;Total ram usage:        0 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:   11
  5741 ;; This function calls:
  5742 ;;		_lcdInst
  5743 ;;		_printRTC
  5744 ;;		_printf
  5745 ;; This function is called by:
  5746 ;;		_initUI
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text19
  5751  004366                     __ptext19:
  5752                           	opt stack 0
  5753  004366                     _change_state_to_menu_start:
  5754                           	opt stack 18
  5755                           
  5756                           ;UI.c: 473: cur_state = 0;
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;incstack = 0
  5760  004366  0E00               	movlw	0
  5761  004368  0100               	movlb	0	; () banked
  5762  00436A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5763  00436C  0E00               	movlw	0
  5764  00436E  6FDE               	movwf	_cur_state& (0+255),b
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;UI.c: 475: lcdInst(0b10000000);;
  5768  004370  0E80               	movlw	128
  5769  004372  ECD4  F022         	call	_lcdInst
  5770                           
  5771                           ;UI.c: 476: printRTC();
  5772  004376  ECE7  F00D         	call	_printRTC	;wreg free
  5773                           
  5774                           ;UI.c: 477: lcdInst(0b11000000);;
  5775  00437A  0EC0               	movlw	192
  5776  00437C  ECD4  F022         	call	_lcdInst
  5777                           
  5778                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5779  004380  0E1F               	movlw	low STR_30
  5780  004382  0100               	movlb	0	; () banked
  5781  004384  6F8E               	movwf	printf@f& (0+255),b
  5782  004386  0EFE               	movlw	high STR_30
  5783  004388  0100               	movlb	0	; () banked
  5784  00438A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5785  00438C  EC9C  F008         	call	_printf	;wreg free
  5786  004390  0012               	return		;funcret
  5787  004392                     __end_of_change_state_to_menu_start:
  5788                           	opt stack 0
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           prodh	equ	0xFF4
  5794                           prodl	equ	0xFF3
  5795                           intcon	equ	0xFF2
  5796                           intcon2	equ	0xFF1
  5797                           intcon3	equ	0xFF0
  5798                           postinc0	equ	0xFEE
  5799                           wreg	equ	0xFE8
  5800                           postdec1	equ	0xFE5
  5801                           fsr1l	equ	0xFE1
  5802                           indf2	equ	0xFDF
  5803                           postinc2	equ	0xFDE
  5804                           postdec2	equ	0xFDD
  5805                           fsr2h	equ	0xFDA
  5806                           fsr2l	equ	0xFD9
  5807                           status	equ	0xFD8
  5808                           
  5809 ;; *************** function _initTime *****************
  5810 ;; Defined at:
  5811 ;;		line 17 in file "RTC.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;  s               1    wreg     unsigned char 
  5814 ;;  m               1    0[BANK0 ] unsigned char 
  5815 ;;  h               1    1[BANK0 ] unsigned char 
  5816 ;;  w               1    2[BANK0 ] unsigned char 
  5817 ;;  DD              1    3[BANK0 ] unsigned char 
  5818 ;;  MM              1    4[BANK0 ] unsigned char 
  5819 ;;  YY              1    5[BANK0 ] unsigned char 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;  s               1    6[BANK0 ] unsigned char 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  1    wreg      void 
  5824 ;; Registers used:
  5825 ;;		wreg
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5831 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;Total ram usage:        7 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    7
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_main
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text20
  5846  0044EE                     __ptext20:
  5847                           	opt stack 0
  5848  0044EE                     _initTime:
  5849                           	opt stack 23
  5850                           
  5851                           ;incstack = 0
  5852                           ;initTime@s stored from wreg
  5853  0044EE  0100               	movlb	0	; () banked
  5854  0044F0  6F86               	movwf	initTime@s& (0+255),b
  5855                           
  5856                           ;RTC.c: 19: time[0] = s;
  5857  0044F2  C086  F124         	movff	initTime@s,_time
  5858                           
  5859                           ;RTC.c: 20: time[1] = m;
  5860  0044F6  C080  F125         	movff	initTime@m,_time+1
  5861                           
  5862                           ;RTC.c: 21: time[2] = h;
  5863  0044FA  C081  F126         	movff	initTime@h,_time+2
  5864                           
  5865                           ;RTC.c: 22: time[3] = w;
  5866  0044FE  C082  F127         	movff	initTime@w,_time+3
  5867                           
  5868                           ;RTC.c: 23: time[4] = DD;
  5869  004502  C083  F128         	movff	initTime@DD,_time+4
  5870                           
  5871                           ;RTC.c: 24: time[5] = MM;
  5872  004506  C084  F129         	movff	initTime@MM,_time+5
  5873                           
  5874                           ;RTC.c: 25: time[6] = YY;
  5875  00450A  C085  F12A         	movff	initTime@YY,_time+6
  5876  00450E  0012               	return		;funcret
  5877  004510                     __end_of_initTime:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           intcon2	equ	0xFF1
  5887                           intcon3	equ	0xFF0
  5888                           postinc0	equ	0xFEE
  5889                           wreg	equ	0xFE8
  5890                           postdec1	equ	0xFE5
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _initLCD *****************
  5900 ;; Defined at:
  5901 ;;		line 48 in file "lcd.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;Total ram usage:        1 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    9
  5922 ;; This function calls:
  5923 ;;		_lcdInst
  5924 ;; This function is called by:
  5925 ;;		_main
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text21
  5930  003FC4                     __ptext21:
  5931                           	opt stack 0
  5932  003FC4                     _initLCD:
  5933                           	opt stack 21
  5934                           
  5935                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5936                           
  5937                           ;incstack = 0
  5938  003FC4  0E9C               	movlw	156
  5939  003FC6  0100               	movlb	0	; () banked
  5940  003FC8  6F83               	movwf	??_initLCD& (0+255),b
  5941  003FCA  0ED7               	movlw	215
  5942  003FCC                     u6977:
  5943  003FCC  2EE8               	decfsz	wreg,f,c
  5944  003FCE  D7FE               	bra	u6977
  5945  003FD0  2F83               	decfsz	??_initLCD& (0+255),f,b
  5946  003FD2  D7FC               	bra	u6977
  5947                           
  5948                           ;lcd.c: 50: lcdInst(0b00110011);
  5949  003FD4  0E33               	movlw	51
  5950  003FD6  ECD4  F022         	call	_lcdInst
  5951                           
  5952                           ;lcd.c: 51: lcdInst(0b00110010);
  5953  003FDA  0E32               	movlw	50
  5954  003FDC  ECD4  F022         	call	_lcdInst
  5955                           
  5956                           ;lcd.c: 53: lcdInst(0b00101000);
  5957  003FE0  0E28               	movlw	40
  5958  003FE2  ECD4  F022         	call	_lcdInst
  5959                           
  5960                           ;lcd.c: 54: lcdInst(0b00001100);
  5961  003FE6  0E0C               	movlw	12
  5962  003FE8  ECD4  F022         	call	_lcdInst
  5963                           
  5964                           ;lcd.c: 55: lcdInst(0b00000110);
  5965  003FEC  0E06               	movlw	6
  5966  003FEE  ECD4  F022         	call	_lcdInst
  5967                           
  5968                           ;lcd.c: 56: lcdInst(0b00000001);
  5969  003FF2  0E01               	movlw	1
  5970  003FF4  ECD4  F022         	call	_lcdInst
  5971                           
  5972                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5973  003FF8  0E9C               	movlw	156
  5974  003FFA  0100               	movlb	0	; () banked
  5975  003FFC  6F83               	movwf	??_initLCD& (0+255),b
  5976  003FFE  0ED7               	movlw	215
  5977  004000                     u6987:
  5978  004000  2EE8               	decfsz	wreg,f,c
  5979  004002  D7FE               	bra	u6987
  5980  004004  2F83               	decfsz	??_initLCD& (0+255),f,b
  5981  004006  D7FC               	bra	u6987
  5982  004008  0012               	return		;funcret
  5983  00400A                     __end_of_initLCD:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           intcon	equ	0xFF2
  5992                           intcon2	equ	0xFF1
  5993                           intcon3	equ	0xFF0
  5994                           postinc0	equ	0xFEE
  5995                           wreg	equ	0xFE8
  5996                           postdec1	equ	0xFE5
  5997                           fsr1l	equ	0xFE1
  5998                           indf2	equ	0xFDF
  5999                           postinc2	equ	0xFDE
  6000                           postdec2	equ	0xFDD
  6001                           fsr2h	equ	0xFDA
  6002                           fsr2l	equ	0xFD9
  6003                           status	equ	0xFD8
  6004                           
  6005 ;; *************** function _UI *****************
  6006 ;; Defined at:
  6007 ;;		line 74 in file "UI.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;		None
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  i               1   73[BANK0 ] unsigned char 
  6012 ;;  i               1   85[BANK0 ] unsigned char 
  6013 ;;  i               1   84[BANK0 ] unsigned char 
  6014 ;;  i               1   83[BANK0 ] unsigned char 
  6015 ;;  i               1   82[BANK0 ] unsigned char 
  6016 ;;  i               1   81[BANK0 ] unsigned char 
  6017 ;;  i               1   80[BANK0 ] unsigned char 
  6018 ;;  i               1   79[BANK0 ] unsigned char 
  6019 ;;  i               1   78[BANK0 ] unsigned char 
  6020 ;;  i               1   77[BANK0 ] unsigned char 
  6021 ;;  i               1   76[BANK0 ] unsigned char 
  6022 ;;  i               1   75[BANK0 ] unsigned char 
  6023 ;;  i               1   74[BANK0 ] unsigned char 
  6024 ;;  month           4   86[BANK0 ] unsigned char [4]
  6025 ;;  i               1   72[BANK0 ] unsigned char 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;Total ram usage:       22 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:   11
  6042 ;; This function calls:
  6043 ;;		___awdiv
  6044 ;;		___awmod
  6045 ;;		_change_state_to_menu_12
  6046 ;;		_change_state_to_menu_22
  6047 ;;		_lcdInst
  6048 ;;		_printRTC
  6049 ;;		_printf
  6050 ;;		_strcpy
  6051 ;; This function is called by:
  6052 ;;		_main
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text22
  6057  000012                     __ptext22:
  6058                           	opt stack 0
  6059  000012                     _UI:
  6060                           	opt stack 19
  6061                           
  6062                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  6063                           
  6064                           ;incstack = 0
  6065  000012  0E02               	movlw	2
  6066  000014  0100               	movlb	0	; () banked
  6067  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  6068  000018  A4D8               	btfss	status,2,c
  6069  00001A  D075               	goto	l7214
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6073  00001C  0E01               	movlw	1
  6074  00001E  ECD4  F022         	call	_lcdInst
  6075  000022  0E68               	movlw	104
  6076  000024  0100               	movlb	0	; () banked
  6077  000026  6FC4               	movwf	??_UI& (0+255),b
  6078  000028  0EE4               	movlw	228
  6079  00002A                     u6997:
  6080  00002A  2EE8               	decfsz	wreg,f,c
  6081  00002C  D7FE               	bra	u6997
  6082  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  6083  000030  D7FC               	bra	u6997
  6084  000032  F000               	nop	
  6085                           
  6086                           ;UI.c: 77: lcdInst(0b10000000);;
  6087  000034  0E80               	movlw	128
  6088  000036  ECD4  F022         	call	_lcdInst
  6089                           
  6090                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  6091  00003A  0ECB               	movlw	low STR_1
  6092  00003C  0100               	movlb	0	; () banked
  6093  00003E  6F8E               	movwf	printf@f& (0+255),b
  6094  000040  0EFB               	movlw	high STR_1
  6095  000042  0100               	movlb	0	; () banked
  6096  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  6097  000046  0E01               	movlw	1
  6098  000048  0100               	movlb	0	; () banked
  6099  00004A  25FD               	addwf	_sel& (0+255),w,b
  6100  00004C  0100               	movlb	0	; () banked
  6101  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  6102  000050  0100               	movlb	0	; () banked
  6103  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  6104  000054  0E00               	movlw	0
  6105  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6106  000058  EC9C  F008         	call	_printf	;wreg free
  6107                           
  6108                           ;UI.c: 79: lcdInst(0b11000000);;
  6109  00005C  0EC0               	movlw	192
  6110  00005E  ECD4  F022         	call	_lcdInst
  6111                           
  6112                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6113  000062  0E0E               	movlw	14
  6114  000064  0100               	movlb	0	; () banked
  6115  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6116  000068  0E10               	movlw	16
  6117  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  6118  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  6119  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6120  000074  EC47  F01B         	call	___awmod	;wreg free
  6121  000078  C080  F0C6         	movff	?___awmod,_UI$2244
  6122  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2244+1
  6123                           
  6124                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6125  000080  0E2D               	movlw	low STR_2
  6126  000082  0100               	movlb	0	; () banked
  6127  000084  6F8E               	movwf	printf@f& (0+255),b
  6128  000086  0EFF               	movlw	high STR_2
  6129  000088  0100               	movlb	0	; () banked
  6130  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6131  00008C  0E0E               	movlw	14
  6132  00008E  0100               	movlb	0	; () banked
  6133  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6134  000092  0E10               	movlw	16
  6135  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  6136  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  6137  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6138  00009E  EC47  F01B         	call	___awmod	;wreg free
  6139  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6140  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6141  0000AA  0E00               	movlw	0
  6142  0000AC  0100               	movlb	0	; () banked
  6143  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6144  0000B0  0E3C               	movlw	60
  6145  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6146  0000B4  EC35  F01A         	call	___awdiv	;wreg free
  6147  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  6148  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6149  0000C0  C0C6  F080         	movff	_UI$2244,___awmod@dividend
  6150  0000C4  C0C7  F081         	movff	_UI$2244+1,___awmod@dividend+1
  6151  0000C8  0E00               	movlw	0
  6152  0000CA  0100               	movlb	0	; () banked
  6153  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6154  0000CE  0E3C               	movlw	60
  6155  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6156  0000D2  EC47  F01B         	call	___awmod	;wreg free
  6157  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  6158  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6159  0000DE  EC9C  F008         	call	_printf	;wreg free
  6160                           
  6161                           ;UI.c: 81: machine_state = UI_state;
  6162  0000E2  0E00               	movlw	0
  6163  0000E4  0100               	movlb	0	; () banked
  6164  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  6165  0000E8                     l177:
  6166  0000E8  A281               	btfss	3969,1,c	;volatile
  6167  0000EA  D7FE               	goto	l177
  6168                           
  6169                           ;UI.c: 84: }
  6170                           ;UI.c: 85: if(cur_state==12){
  6171  0000EC  0E0C               	movlw	12
  6172  0000EE  0100               	movlb	0	; () banked
  6173  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  6174  0000F2  0100               	movlb	0	; () banked
  6175  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6176  0000F6  A4D8               	btfss	status,2,c
  6177  0000F8  D003               	goto	l7212
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;UI.c: 86: change_state_to_menu_12();
  6181  0000FA  EC42  F020         	call	_change_state_to_menu_12	;wreg free
  6182                           
  6183                           ;UI.c: 87: }
  6184  0000FE  D3D5               	goto	l7534
  6185  000100                     l7212:
  6186                           
  6187                           ;UI.c: 88: else{
  6188                           ;UI.c: 89: change_state_to_menu_22();
  6189  000100  EC26  F020         	call	_change_state_to_menu_22	;wreg free
  6190                           
  6191                           ;UI.c: 90: }
  6192                           ;UI.c: 91: }
  6193  000104  D3D2               	goto	l7534
  6194  000106                     l7214:
  6195                           
  6196                           ;UI.c: 92: else if(cur_state == 0){
  6197  000106  0100               	movlb	0	; () banked
  6198  000108  51DE               	movf	_cur_state& (0+255),w,b
  6199  00010A  0100               	movlb	0	; () banked
  6200  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6201  00010E  A4D8               	btfss	status,2,c
  6202  000110  D3CC               	goto	l7534
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6206  000112  0E00               	movlw	0
  6207  000114  0100               	movlb	0	; () banked
  6208  000116  6FC8               	movwf	UI@i& (0+255),b
  6209  000118                     l7218:
  6210                           
  6211                           ; BSR set to: 0
  6212  000118  0E63               	movlw	99
  6213  00011A  0100               	movlb	0	; () banked
  6214  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6215  00011E  D001               	goto	l7222
  6216  000120  D00C               	goto	l7226
  6217  000122                     l7222:
  6218                           
  6219                           ; BSR set to: 0
  6220  000122  0E68               	movlw	104
  6221  000124  0100               	movlb	0	; () banked
  6222  000126  6FC4               	movwf	??_UI& (0+255),b
  6223  000128  0EE4               	movlw	228
  6224  00012A                     u7007:
  6225  00012A  2EE8               	decfsz	wreg,f,c
  6226  00012C  D7FE               	bra	u7007
  6227  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6228  000130  D7FC               	bra	u7007
  6229  000132  F000               	nop	
  6230  000134  0100               	movlb	0	; () banked
  6231  000136  2BC8               	incf	UI@i& (0+255),f,b
  6232  000138  D7EF               	goto	l7218
  6233  00013A                     l7226:
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;UI.c: 94: if(cur_state == 0){
  6237  00013A  0100               	movlb	0	; () banked
  6238  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6239  00013E  0100               	movlb	0	; () banked
  6240  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6241  000142  A4D8               	btfss	status,2,c
  6242  000144  D3B2               	goto	l7534
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;UI.c: 95: printRTC();
  6246  000146  ECE7  F00D         	call	_printRTC	;wreg free
  6247                           
  6248                           ;UI.c: 96: }
  6249                           ;UI.c: 97: }
  6250                           ;UI.c: 98: while(logstate){
  6251  00014A  D3AF               	goto	l7534
  6252  00014C                     l7230:
  6253                           
  6254                           ;UI.c: 100: if(!log_completion){
  6255  00014C  0100               	movlb	0	; () banked
  6256  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6257  000150  0100               	movlb	0	; () banked
  6258  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6259  000154  A4D8               	btfss	status,2,c
  6260  000156  D041               	goto	l7260
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6264  000158  0E01               	movlw	1
  6265  00015A  ECD4  F022         	call	_lcdInst
  6266  00015E  0E68               	movlw	104
  6267  000160  0100               	movlb	0	; () banked
  6268  000162  6FC4               	movwf	??_UI& (0+255),b
  6269  000164  0EE4               	movlw	228
  6270  000166                     u7017:
  6271  000166  2EE8               	decfsz	wreg,f,c
  6272  000168  D7FE               	bra	u7017
  6273  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6274  00016C  D7FC               	bra	u7017
  6275  00016E  F000               	nop	
  6276                           
  6277                           ;UI.c: 102: lcdInst(0b10000000);;
  6278  000170  0E80               	movlw	128
  6279  000172  ECD4  F022         	call	_lcdInst
  6280                           
  6281                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6282  000176  0EB9               	movlw	low STR_3
  6283  000178  0100               	movlb	0	; () banked
  6284  00017A  6F8E               	movwf	printf@f& (0+255),b
  6285  00017C  0EFB               	movlw	high STR_3
  6286  00017E  0100               	movlb	0	; () banked
  6287  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6288  000182  C0E6  F090         	movff	_log,?_printf+2
  6289  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6290  00018A  EC9C  F008         	call	_printf	;wreg free
  6291                           
  6292                           ;UI.c: 104: lcdInst(0b11000000);;
  6293  00018E  0EC0               	movlw	192
  6294  000190  ECD4  F022         	call	_lcdInst
  6295                           
  6296                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6297  000194  0E50               	movlw	low STR_4
  6298  000196  0100               	movlb	0	; () banked
  6299  000198  6F8E               	movwf	printf@f& (0+255),b
  6300  00019A  0EFE               	movlw	high STR_4
  6301  00019C  0100               	movlb	0	; () banked
  6302  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6303  0001A0  EC9C  F008         	call	_printf	;wreg free
  6304  0001A4                     l7244:
  6305  0001A4  0E00               	movlw	0
  6306  0001A6  0100               	movlb	0	; () banked
  6307  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6308  0001AA                     l7246:
  6309                           
  6310                           ; BSR set to: 0
  6311  0001AA  0E63               	movlw	99
  6312  0001AC  0100               	movlb	0	; () banked
  6313  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6314  0001B0  D001               	goto	l7250
  6315  0001B2  D00C               	goto	l7254
  6316  0001B4                     l7250:
  6317                           
  6318                           ; BSR set to: 0
  6319  0001B4  0E68               	movlw	104
  6320  0001B6  0100               	movlb	0	; () banked
  6321  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6322  0001BA  0EE4               	movlw	228
  6323  0001BC                     u7027:
  6324  0001BC  2EE8               	decfsz	wreg,f,c
  6325  0001BE  D7FE               	bra	u7027
  6326  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6327  0001C2  D7FC               	bra	u7027
  6328  0001C4  F000               	nop	
  6329  0001C6  0100               	movlb	0	; () banked
  6330  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6331  0001CA  D7EF               	goto	l7246
  6332  0001CC                     l7254:
  6333                           
  6334                           ; BSR set to: 0
  6335  0001CC  0100               	movlb	0	; () banked
  6336  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6337  0001D0  0100               	movlb	0	; () banked
  6338  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6339  0001D4  B4D8               	btfsc	status,2,c
  6340  0001D6  0012               	return	
  6341  0001D8  D7E5               	goto	l7244
  6342  0001DA                     l7260:
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;UI.c: 109: else{
  6346                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6347  0001DA  0E01               	movlw	1
  6348  0001DC  ECD4  F022         	call	_lcdInst
  6349  0001E0  0E68               	movlw	104
  6350  0001E2  0100               	movlb	0	; () banked
  6351  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6352  0001E6  0EE4               	movlw	228
  6353  0001E8                     u7037:
  6354  0001E8  2EE8               	decfsz	wreg,f,c
  6355  0001EA  D7FE               	bra	u7037
  6356  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6357  0001EE  D7FC               	bra	u7037
  6358  0001F0  F000               	nop	
  6359                           
  6360                           ;UI.c: 111: lcdInst(0b10000000);;
  6361  0001F2  0E80               	movlw	128
  6362  0001F4  ECD4  F022         	call	_lcdInst
  6363                           
  6364                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6365  0001F8  0EB9               	movlw	low STR_3
  6366  0001FA  0100               	movlb	0	; () banked
  6367  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6368  0001FE  0EFB               	movlw	high STR_3
  6369  000200  0100               	movlb	0	; () banked
  6370  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6371  000204  C0E6  F090         	movff	_log,?_printf+2
  6372  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6373  00020C  EC9C  F008         	call	_printf	;wreg free
  6374                           
  6375                           ;UI.c: 113: lcdInst(0b11000000);;
  6376  000210  0EC0               	movlw	192
  6377  000212  ECD4  F022         	call	_lcdInst
  6378                           
  6379                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6380  000216  0E0E               	movlw	low STR_6
  6381  000218  0100               	movlb	0	; () banked
  6382  00021A  6F8E               	movwf	printf@f& (0+255),b
  6383  00021C  0EFE               	movlw	high STR_6
  6384  00021E  0100               	movlb	0	; () banked
  6385  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6386  000222  EC9C  F008         	call	_printf	;wreg free
  6387                           
  6388                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6389  000226  0E00               	movlw	0
  6390  000228  0100               	movlb	0	; () banked
  6391  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6392  00022C                     l7274:
  6393                           
  6394                           ; BSR set to: 0
  6395  00022C  0E63               	movlw	99
  6396  00022E  0100               	movlb	0	; () banked
  6397  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6398  000232  D001               	goto	l7278
  6399  000234  D00C               	goto	l7282
  6400  000236                     l7278:
  6401                           
  6402                           ; BSR set to: 0
  6403  000236  0E68               	movlw	104
  6404  000238  0100               	movlb	0	; () banked
  6405  00023A  6FC4               	movwf	??_UI& (0+255),b
  6406  00023C  0EE4               	movlw	228
  6407  00023E                     u7047:
  6408  00023E  2EE8               	decfsz	wreg,f,c
  6409  000240  D7FE               	bra	u7047
  6410  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6411  000244  D7FC               	bra	u7047
  6412  000246  F000               	nop	
  6413  000248  0100               	movlb	0	; () banked
  6414  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6415  00024C  D7EF               	goto	l7274
  6416  00024E                     l7282:
  6417                           
  6418                           ; BSR set to: 0
  6419  00024E  0100               	movlb	0	; () banked
  6420  000250  51F6               	movf	_logstate& (0+255),w,b
  6421  000252  0100               	movlb	0	; () banked
  6422  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6423  000256  B4D8               	btfsc	status,2,c
  6424  000258  0012               	return	
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6428                           
  6429                           ; BSR set to: 0
  6430                           
  6431                           ; BSR set to: 0
  6432  00025A  0E00               	movlw	0
  6433  00025C  0100               	movlb	0	; () banked
  6434  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6435  000260                     l7288:
  6436                           
  6437                           ; BSR set to: 0
  6438  000260  0E63               	movlw	99
  6439  000262  0100               	movlb	0	; () banked
  6440  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6441  000266  D001               	goto	l7292
  6442  000268  D00C               	goto	l7296
  6443  00026A                     l7292:
  6444                           
  6445                           ; BSR set to: 0
  6446  00026A  0E68               	movlw	104
  6447  00026C  0100               	movlb	0	; () banked
  6448  00026E  6FC4               	movwf	??_UI& (0+255),b
  6449  000270  0EE4               	movlw	228
  6450  000272                     u7057:
  6451  000272  2EE8               	decfsz	wreg,f,c
  6452  000274  D7FE               	bra	u7057
  6453  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6454  000278  D7FC               	bra	u7057
  6455  00027A  F000               	nop	
  6456  00027C  0100               	movlb	0	; () banked
  6457  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6458  000280  D7EF               	goto	l7288
  6459  000282                     l7296:
  6460                           
  6461                           ; BSR set to: 0
  6462  000282  0100               	movlb	0	; () banked
  6463  000284  51F6               	movf	_logstate& (0+255),w,b
  6464  000286  0100               	movlb	0	; () banked
  6465  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6466  00028A  B4D8               	btfsc	status,2,c
  6467  00028C  0012               	return	
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6471                           
  6472                           ; BSR set to: 0
  6473                           
  6474                           ; BSR set to: 0
  6475  00028E  0E01               	movlw	1
  6476  000290  ECD4  F022         	call	_lcdInst
  6477  000294  0E68               	movlw	104
  6478  000296  0100               	movlb	0	; () banked
  6479  000298  6FC4               	movwf	??_UI& (0+255),b
  6480  00029A  0EE4               	movlw	228
  6481  00029C                     u7067:
  6482  00029C  2EE8               	decfsz	wreg,f,c
  6483  00029E  D7FE               	bra	u7067
  6484  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6485  0002A2  D7FC               	bra	u7067
  6486  0002A4  F000               	nop	
  6487                           
  6488                           ;UI.c: 120: lcdInst(0b10000000);;
  6489  0002A6  0E80               	movlw	128
  6490  0002A8  ECD4  F022         	call	_lcdInst
  6491                           
  6492                           ;UI.c: 121: printf("START:");
  6493  0002AC  0EC3               	movlw	low STR_7
  6494  0002AE  0100               	movlb	0	; () banked
  6495  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6496  0002B2  0EFF               	movlw	high STR_7
  6497  0002B4  0100               	movlb	0	; () banked
  6498  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6499  0002B8  EC9C  F008         	call	_printf	;wreg free
  6500                           
  6501                           ;UI.c: 122: lcdInst(0b11000000);;
  6502  0002BC  0EC0               	movlw	192
  6503  0002BE  ECD4  F022         	call	_lcdInst
  6504                           
  6505                           ;UI.c: 123: char month[] = "MMM";
  6506  0002C2  C12D  F0D6         	movff	UI@F3222,UI@month
  6507  0002C6  C12E  F0D7         	movff	UI@F3222+1,UI@month+1
  6508  0002CA  C12F  F0D8         	movff	UI@F3222+2,UI@month+2
  6509  0002CE  C130  F0D9         	movff	UI@F3222+3,UI@month+3
  6510                           
  6511                           ;UI.c: 124: switch(log_startTime[5]){
  6512  0002D2  D0C3               	goto	l7340
  6513  0002D4                     l7312:
  6514                           
  6515                           ;UI.c: 126: strcpy(month, "JAN");
  6516  0002D4  0ED6               	movlw	low UI@month
  6517  0002D6  0100               	movlb	0	; () banked
  6518  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6519  0002DA  0E00               	movlw	high UI@month
  6520  0002DC  0100               	movlb	0	; () banked
  6521  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6522  0002E0  0EDA               	movlw	low STR_8
  6523  0002E2  0100               	movlb	0	; () banked
  6524  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6525  0002E6  0EFF               	movlw	high STR_8
  6526  0002E8  0100               	movlb	0	; () banked
  6527  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6528  0002EC  EC5E  F020         	call	_strcpy	;wreg free
  6529                           
  6530                           ;UI.c: 127: break;
  6531  0002F0  D0E6               	goto	l7342
  6532  0002F2                     l7314:
  6533                           
  6534                           ;UI.c: 129: strcpy(month, "FEB");
  6535  0002F2  0ED6               	movlw	low UI@month
  6536  0002F4  0100               	movlb	0	; () banked
  6537  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6538  0002F8  0E00               	movlw	high UI@month
  6539  0002FA  0100               	movlb	0	; () banked
  6540  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6541  0002FE  0ECA               	movlw	low STR_9
  6542  000300  0100               	movlb	0	; () banked
  6543  000302  6F82               	movwf	strcpy@from& (0+255),b
  6544  000304  0EFF               	movlw	high STR_9
  6545  000306  0100               	movlb	0	; () banked
  6546  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6547  00030A  EC5E  F020         	call	_strcpy	;wreg free
  6548                           
  6549                           ;UI.c: 130: break;
  6550  00030E  D0D7               	goto	l7342
  6551  000310                     l7316:
  6552                           
  6553                           ;UI.c: 132: strcpy(month, "MAR");
  6554  000310  0ED6               	movlw	low UI@month
  6555  000312  0100               	movlb	0	; () banked
  6556  000314  6F80               	movwf	strcpy@to& (0+255),b
  6557  000316  0E00               	movlw	high UI@month
  6558  000318  0100               	movlb	0	; () banked
  6559  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6560  00031C  0EE6               	movlw	low STR_10
  6561  00031E  0100               	movlb	0	; () banked
  6562  000320  6F82               	movwf	strcpy@from& (0+255),b
  6563  000322  0EFF               	movlw	high STR_10
  6564  000324  0100               	movlb	0	; () banked
  6565  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6566  000328  EC5E  F020         	call	_strcpy	;wreg free
  6567                           
  6568                           ;UI.c: 133: break;
  6569  00032C  D0C8               	goto	l7342
  6570  00032E                     l7318:
  6571                           
  6572                           ;UI.c: 135: strcpy(month, "APR");
  6573  00032E  0ED6               	movlw	low UI@month
  6574  000330  0100               	movlb	0	; () banked
  6575  000332  6F80               	movwf	strcpy@to& (0+255),b
  6576  000334  0E00               	movlw	high UI@month
  6577  000336  0100               	movlb	0	; () banked
  6578  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6579  00033A  0EEA               	movlw	low STR_11
  6580  00033C  0100               	movlb	0	; () banked
  6581  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6582  000340  0EFF               	movlw	high STR_11
  6583  000342  0100               	movlb	0	; () banked
  6584  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6585  000346  EC5E  F020         	call	_strcpy	;wreg free
  6586                           
  6587                           ;UI.c: 136: break;
  6588  00034A  D0B9               	goto	l7342
  6589  00034C                     l7320:
  6590                           
  6591                           ;UI.c: 138: strcpy(month, "MAY");
  6592  00034C  0ED6               	movlw	low UI@month
  6593  00034E  0100               	movlb	0	; () banked
  6594  000350  6F80               	movwf	strcpy@to& (0+255),b
  6595  000352  0E00               	movlw	high UI@month
  6596  000354  0100               	movlb	0	; () banked
  6597  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6598  000358  0EFA               	movlw	low STR_12
  6599  00035A  0100               	movlb	0	; () banked
  6600  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6601  00035E  0EFF               	movlw	high STR_12
  6602  000360  0100               	movlb	0	; () banked
  6603  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6604  000364  EC5E  F020         	call	_strcpy	;wreg free
  6605                           
  6606                           ;UI.c: 139: break;
  6607  000368  D0AA               	goto	l7342
  6608  00036A                     l7322:
  6609                           
  6610                           ;UI.c: 141: strcpy(month, "JUN");
  6611  00036A  0ED6               	movlw	low UI@month
  6612  00036C  0100               	movlb	0	; () banked
  6613  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6614  000370  0E00               	movlw	high UI@month
  6615  000372  0100               	movlb	0	; () banked
  6616  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6617  000376  0EDE               	movlw	low STR_13
  6618  000378  0100               	movlb	0	; () banked
  6619  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6620  00037C  0EFF               	movlw	high STR_13
  6621  00037E  0100               	movlb	0	; () banked
  6622  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6623  000382  EC5E  F020         	call	_strcpy	;wreg free
  6624                           
  6625                           ;UI.c: 142: break;
  6626  000386  D09B               	goto	l7342
  6627  000388                     l7324:
  6628                           
  6629                           ;UI.c: 144: strcpy(month, "JUL");
  6630  000388  0ED6               	movlw	low UI@month
  6631  00038A  0100               	movlb	0	; () banked
  6632  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6633  00038E  0E00               	movlw	high UI@month
  6634  000390  0100               	movlb	0	; () banked
  6635  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6636  000394  0ED6               	movlw	low STR_14
  6637  000396  0100               	movlb	0	; () banked
  6638  000398  6F82               	movwf	strcpy@from& (0+255),b
  6639  00039A  0EFF               	movlw	high STR_14
  6640  00039C  0100               	movlb	0	; () banked
  6641  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6642  0003A0  EC5E  F020         	call	_strcpy	;wreg free
  6643                           
  6644                           ;UI.c: 145: break;
  6645  0003A4  D08C               	goto	l7342
  6646  0003A6                     l7326:
  6647                           
  6648                           ;UI.c: 147: strcpy(month, "AUG");
  6649  0003A6  0ED6               	movlw	low UI@month
  6650  0003A8  0100               	movlb	0	; () banked
  6651  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6652  0003AC  0E00               	movlw	high UI@month
  6653  0003AE  0100               	movlb	0	; () banked
  6654  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6655  0003B2  0ED2               	movlw	low STR_15
  6656  0003B4  0100               	movlb	0	; () banked
  6657  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6658  0003B8  0EFF               	movlw	high STR_15
  6659  0003BA  0100               	movlb	0	; () banked
  6660  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6661  0003BE  EC5E  F020         	call	_strcpy	;wreg free
  6662                           
  6663                           ;UI.c: 148: break;
  6664  0003C2  D07D               	goto	l7342
  6665  0003C4                     l7328:
  6666                           
  6667                           ;UI.c: 150: strcpy(month, "SEP");
  6668  0003C4  0ED6               	movlw	low UI@month
  6669  0003C6  0100               	movlb	0	; () banked
  6670  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6671  0003CA  0E00               	movlw	high UI@month
  6672  0003CC  0100               	movlb	0	; () banked
  6673  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6674  0003D0  0EE2               	movlw	low STR_16
  6675  0003D2  0100               	movlb	0	; () banked
  6676  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6677  0003D6  0EFF               	movlw	high STR_16
  6678  0003D8  0100               	movlb	0	; () banked
  6679  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6680  0003DC  EC5E  F020         	call	_strcpy	;wreg free
  6681                           
  6682                           ;UI.c: 151: break;
  6683  0003E0  D06E               	goto	l7342
  6684  0003E2                     l7330:
  6685                           
  6686                           ;UI.c: 153: strcpy(month, "OCT");
  6687  0003E2  0ED6               	movlw	low UI@month
  6688  0003E4  0100               	movlb	0	; () banked
  6689  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6690  0003E8  0E00               	movlw	high UI@month
  6691  0003EA  0100               	movlb	0	; () banked
  6692  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6693  0003EE  0EF2               	movlw	low STR_17
  6694  0003F0  0100               	movlb	0	; () banked
  6695  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6696  0003F4  0EFF               	movlw	high STR_17
  6697  0003F6  0100               	movlb	0	; () banked
  6698  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6699  0003FA  EC5E  F020         	call	_strcpy	;wreg free
  6700                           
  6701                           ;UI.c: 154: break;
  6702  0003FE  D05F               	goto	l7342
  6703  000400                     l7332:
  6704                           
  6705                           ;UI.c: 156: strcpy(month, "NOV");
  6706  000400  0ED6               	movlw	low UI@month
  6707  000402  0100               	movlb	0	; () banked
  6708  000404  6F80               	movwf	strcpy@to& (0+255),b
  6709  000406  0E00               	movlw	high UI@month
  6710  000408  0100               	movlb	0	; () banked
  6711  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6712  00040C  0EF6               	movlw	low STR_18
  6713  00040E  0100               	movlb	0	; () banked
  6714  000410  6F82               	movwf	strcpy@from& (0+255),b
  6715  000412  0EFF               	movlw	high STR_18
  6716  000414  0100               	movlb	0	; () banked
  6717  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6718  000418  EC5E  F020         	call	_strcpy	;wreg free
  6719                           
  6720                           ;UI.c: 157: break;
  6721  00041C  D050               	goto	l7342
  6722  00041E                     l7334:
  6723                           
  6724                           ;UI.c: 159: strcpy(month, "DEC");
  6725  00041E  0ED6               	movlw	low UI@month
  6726  000420  0100               	movlb	0	; () banked
  6727  000422  6F80               	movwf	strcpy@to& (0+255),b
  6728  000424  0E00               	movlw	high UI@month
  6729  000426  0100               	movlb	0	; () banked
  6730  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6731  00042A  0ECE               	movlw	low STR_19
  6732  00042C  0100               	movlb	0	; () banked
  6733  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6734  000430  0EFF               	movlw	high STR_19
  6735  000432  0100               	movlb	0	; () banked
  6736  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6737  000436  EC5E  F020         	call	_strcpy	;wreg free
  6738                           
  6739                           ;UI.c: 160: break;
  6740  00043A  D041               	goto	l7342
  6741  00043C                     l7336:
  6742                           
  6743                           ;UI.c: 162: strcpy(month, "ERR");
  6744  00043C  0ED6               	movlw	low UI@month
  6745  00043E  0100               	movlb	0	; () banked
  6746  000440  6F80               	movwf	strcpy@to& (0+255),b
  6747  000442  0E00               	movlw	high UI@month
  6748  000444  0100               	movlb	0	; () banked
  6749  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6750  000448  0EEE               	movlw	low STR_20
  6751  00044A  0100               	movlb	0	; () banked
  6752  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6753  00044E  0EFF               	movlw	high STR_20
  6754  000450  0100               	movlb	0	; () banked
  6755  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6756  000454  EC5E  F020         	call	_strcpy	;wreg free
  6757                           
  6758                           ;UI.c: 164: }
  6759                           
  6760                           ;UI.c: 163: break;
  6761  000458  D032               	goto	l7342
  6762  00045A                     l7340:
  6763  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6764  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6765  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6766                           
  6767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6768                           ; Switch size 1, requested type "space"
  6769                           ; Number of cases is 1, Range of values is 0 to 0
  6770                           ; switch strategies available:
  6771                           ; Name         Instructions Cycles
  6772                           ; simple_byte            4     3 (average)
  6773                           ;	Chosen strategy is simple_byte
  6774  000466  0100               	movlb	0	; () banked
  6775  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6776  00046A  0A00               	xorlw	0	; case 0
  6777  00046C  A4D8               	btfss	status,2,c
  6778  00046E  D7E6               	goto	l7336
  6779                           
  6780                           ; BSR set to: 0
  6781                           ; Switch size 1, requested type "space"
  6782                           ; Number of cases is 12, Range of values is 1 to 12
  6783                           ; switch strategies available:
  6784                           ; Name         Instructions Cycles
  6785                           ; simple_byte           37    19 (average)
  6786                           ;	Chosen strategy is simple_byte
  6787  000470  0100               	movlb	0	; () banked
  6788  000472  51C4               	movf	??_UI& (0+255),w,b
  6789  000474  0A01               	xorlw	1	; case 1
  6790  000476  B4D8               	btfsc	status,2,c
  6791  000478  D72D               	goto	l7312
  6792  00047A  0A03               	xorlw	3	; case 2
  6793  00047C  B4D8               	btfsc	status,2,c
  6794  00047E  D739               	goto	l7314
  6795  000480  0A01               	xorlw	1	; case 3
  6796  000482  B4D8               	btfsc	status,2,c
  6797  000484  D745               	goto	l7316
  6798  000486  0A07               	xorlw	7	; case 4
  6799  000488  B4D8               	btfsc	status,2,c
  6800  00048A  D751               	goto	l7318
  6801  00048C  0A01               	xorlw	1	; case 5
  6802  00048E  B4D8               	btfsc	status,2,c
  6803  000490  D75D               	goto	l7320
  6804  000492  0A03               	xorlw	3	; case 6
  6805  000494  B4D8               	btfsc	status,2,c
  6806  000496  D769               	goto	l7322
  6807  000498  0A01               	xorlw	1	; case 7
  6808  00049A  B4D8               	btfsc	status,2,c
  6809  00049C  D775               	goto	l7324
  6810  00049E  0A0F               	xorlw	15	; case 8
  6811  0004A0  B4D8               	btfsc	status,2,c
  6812  0004A2  D781               	goto	l7326
  6813  0004A4  0A01               	xorlw	1	; case 9
  6814  0004A6  B4D8               	btfsc	status,2,c
  6815  0004A8  D78D               	goto	l7328
  6816  0004AA  0A03               	xorlw	3	; case 10
  6817  0004AC  B4D8               	btfsc	status,2,c
  6818  0004AE  D799               	goto	l7330
  6819  0004B0  0A01               	xorlw	1	; case 11
  6820  0004B2  B4D8               	btfsc	status,2,c
  6821  0004B4  D7A5               	goto	l7332
  6822  0004B6  0A07               	xorlw	7	; case 12
  6823  0004B8  B4D8               	btfsc	status,2,c
  6824  0004BA  D7B1               	goto	l7334
  6825  0004BC  D7BF               	goto	l7336
  6826  0004BE                     l7342:
  6827                           
  6828                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6829  0004BE  0E42               	movlw	low STR_21
  6830  0004C0  0100               	movlb	0	; () banked
  6831  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6832  0004C4  0EFB               	movlw	high STR_21
  6833  0004C6  0100               	movlb	0	; () banked
  6834  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6835  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6836  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6837  0004D2  0ED6               	movlw	low UI@month
  6838  0004D4  0100               	movlb	0	; () banked
  6839  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6840  0004D8  0E00               	movlw	high UI@month
  6841  0004DA  0100               	movlb	0	; () banked
  6842  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6843  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6844  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6845  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6846  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6847  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6848  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6849  0004F6  EC9C  F008         	call	_printf	;wreg free
  6850                           
  6851                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6852  0004FA  0E00               	movlw	0
  6853  0004FC  0100               	movlb	0	; () banked
  6854  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6855  000500                     l7346:
  6856                           
  6857                           ; BSR set to: 0
  6858  000500  0E63               	movlw	99
  6859  000502  0100               	movlb	0	; () banked
  6860  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6861  000506  D001               	goto	l7350
  6862  000508  D00C               	goto	l7354
  6863  00050A                     l7350:
  6864                           
  6865                           ; BSR set to: 0
  6866  00050A  0E68               	movlw	104
  6867  00050C  0100               	movlb	0	; () banked
  6868  00050E  6FC4               	movwf	??_UI& (0+255),b
  6869  000510  0EE4               	movlw	228
  6870  000512                     u7077:
  6871  000512  2EE8               	decfsz	wreg,f,c
  6872  000514  D7FE               	bra	u7077
  6873  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6874  000518  D7FC               	bra	u7077
  6875  00051A  F000               	nop	
  6876  00051C  0100               	movlb	0	; () banked
  6877  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6878  000520  D7EF               	goto	l7346
  6879  000522                     l7354:
  6880                           
  6881                           ; BSR set to: 0
  6882  000522  0100               	movlb	0	; () banked
  6883  000524  51F6               	movf	_logstate& (0+255),w,b
  6884  000526  0100               	movlb	0	; () banked
  6885  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6886  00052A  B4D8               	btfsc	status,2,c
  6887  00052C  0012               	return	
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6891                           
  6892                           ; BSR set to: 0
  6893                           
  6894                           ; BSR set to: 0
  6895  00052E  0E00               	movlw	0
  6896  000530  0100               	movlb	0	; () banked
  6897  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6898  000534                     l7360:
  6899                           
  6900                           ; BSR set to: 0
  6901  000534  0E63               	movlw	99
  6902  000536  0100               	movlb	0	; () banked
  6903  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6904  00053A  D001               	goto	l7364
  6905  00053C  D00C               	goto	l7368
  6906  00053E                     l7364:
  6907                           
  6908                           ; BSR set to: 0
  6909  00053E  0E68               	movlw	104
  6910  000540  0100               	movlb	0	; () banked
  6911  000542  6FC4               	movwf	??_UI& (0+255),b
  6912  000544  0EE4               	movlw	228
  6913  000546                     u7087:
  6914  000546  2EE8               	decfsz	wreg,f,c
  6915  000548  D7FE               	bra	u7087
  6916  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6917  00054C  D7FC               	bra	u7087
  6918  00054E  F000               	nop	
  6919  000550  0100               	movlb	0	; () banked
  6920  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6921  000554  D7EF               	goto	l7360
  6922  000556                     l7368:
  6923                           
  6924                           ; BSR set to: 0
  6925  000556  0100               	movlb	0	; () banked
  6926  000558  51F6               	movf	_logstate& (0+255),w,b
  6927  00055A  0100               	movlb	0	; () banked
  6928  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6929  00055E  B4D8               	btfsc	status,2,c
  6930  000560  0012               	return	
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6934                           
  6935                           ; BSR set to: 0
  6936                           
  6937                           ; BSR set to: 0
  6938  000562  0E01               	movlw	1
  6939  000564  ECD4  F022         	call	_lcdInst
  6940  000568  0E68               	movlw	104
  6941  00056A  0100               	movlb	0	; () banked
  6942  00056C  6FC4               	movwf	??_UI& (0+255),b
  6943  00056E  0EE4               	movlw	228
  6944  000570                     u7097:
  6945  000570  2EE8               	decfsz	wreg,f,c
  6946  000572  D7FE               	bra	u7097
  6947  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6948  000576  D7FC               	bra	u7097
  6949  000578  F000               	nop	
  6950                           
  6951                           ;UI.c: 171: lcdInst(0b10000000);;
  6952  00057A  0E80               	movlw	128
  6953  00057C  ECD4  F022         	call	_lcdInst
  6954                           
  6955                           ;UI.c: 172: printf("DURATION:");
  6956  000580  0EA3               	movlw	low STR_22
  6957  000582  0100               	movlb	0	; () banked
  6958  000584  6F8E               	movwf	printf@f& (0+255),b
  6959  000586  0EFF               	movlw	high STR_22
  6960  000588  0100               	movlb	0	; () banked
  6961  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6962  00058C  EC9C  F008         	call	_printf	;wreg free
  6963                           
  6964                           ;UI.c: 173: lcdInst(0b11000000);;
  6965  000590  0EC0               	movlw	192
  6966  000592  ECD4  F022         	call	_lcdInst
  6967                           
  6968                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6969  000596  0E0E               	movlw	14
  6970  000598  0100               	movlb	0	; () banked
  6971  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6972  00059C  0E10               	movlw	16
  6973  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6974  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6975  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6976  0005A8  EC47  F01B         	call	___awmod	;wreg free
  6977  0005AC  C080  F0C6         	movff	?___awmod,_UI$2244
  6978  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2244+1
  6979                           
  6980                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6981  0005B4  0E1F               	movlw	low STR_23
  6982  0005B6  0100               	movlb	0	; () banked
  6983  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6984  0005BA  0EFF               	movlw	high STR_23
  6985  0005BC  0100               	movlb	0	; () banked
  6986  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6987  0005C0  0E0E               	movlw	14
  6988  0005C2  0100               	movlb	0	; () banked
  6989  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6990  0005C6  0E10               	movlw	16
  6991  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6992  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6993  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6994  0005D2  EC47  F01B         	call	___awmod	;wreg free
  6995  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6996  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6997  0005DE  0E00               	movlw	0
  6998  0005E0  0100               	movlb	0	; () banked
  6999  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7000  0005E4  0E3C               	movlw	60
  7001  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  7002  0005E8  EC35  F01A         	call	___awdiv	;wreg free
  7003  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  7004  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  7005  0005F4  C0C6  F080         	movff	_UI$2244,___awmod@dividend
  7006  0005F8  C0C7  F081         	movff	_UI$2244+1,___awmod@dividend+1
  7007  0005FC  0E00               	movlw	0
  7008  0005FE  0100               	movlb	0	; () banked
  7009  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7010  000602  0E3C               	movlw	60
  7011  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  7012  000606  EC47  F01B         	call	___awmod	;wreg free
  7013  00060A  C080  F092         	movff	?___awmod,?_printf+4
  7014  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  7015  000612  EC9C  F008         	call	_printf	;wreg free
  7016                           
  7017                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7018  000616  0E00               	movlw	0
  7019  000618  0100               	movlb	0	; () banked
  7020  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  7021  00061C                     l7388:
  7022                           
  7023                           ; BSR set to: 0
  7024  00061C  0E63               	movlw	99
  7025  00061E  0100               	movlb	0	; () banked
  7026  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  7027  000622  D001               	goto	l7392
  7028  000624  D00C               	goto	l7396
  7029  000626                     l7392:
  7030                           
  7031                           ; BSR set to: 0
  7032  000626  0E68               	movlw	104
  7033  000628  0100               	movlb	0	; () banked
  7034  00062A  6FC4               	movwf	??_UI& (0+255),b
  7035  00062C  0EE4               	movlw	228
  7036  00062E                     u7107:
  7037  00062E  2EE8               	decfsz	wreg,f,c
  7038  000630  D7FE               	bra	u7107
  7039  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  7040  000634  D7FC               	bra	u7107
  7041  000636  F000               	nop	
  7042  000638  0100               	movlb	0	; () banked
  7043  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  7044  00063C  D7EF               	goto	l7388
  7045  00063E                     l7396:
  7046                           
  7047                           ; BSR set to: 0
  7048  00063E  0100               	movlb	0	; () banked
  7049  000640  51F6               	movf	_logstate& (0+255),w,b
  7050  000642  0100               	movlb	0	; () banked
  7051  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7052  000646  B4D8               	btfsc	status,2,c
  7053  000648  0012               	return	
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7057                           
  7058                           ; BSR set to: 0
  7059                           
  7060                           ; BSR set to: 0
  7061  00064A  0E00               	movlw	0
  7062  00064C  0100               	movlb	0	; () banked
  7063  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  7064  000650                     l7402:
  7065                           
  7066                           ; BSR set to: 0
  7067  000650  0E63               	movlw	99
  7068  000652  0100               	movlb	0	; () banked
  7069  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  7070  000656  D001               	goto	l7406
  7071  000658  D00C               	goto	l7410
  7072  00065A                     l7406:
  7073                           
  7074                           ; BSR set to: 0
  7075  00065A  0E68               	movlw	104
  7076  00065C  0100               	movlb	0	; () banked
  7077  00065E  6FC4               	movwf	??_UI& (0+255),b
  7078  000660  0EE4               	movlw	228
  7079  000662                     u7117:
  7080  000662  2EE8               	decfsz	wreg,f,c
  7081  000664  D7FE               	bra	u7117
  7082  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  7083  000668  D7FC               	bra	u7117
  7084  00066A  F000               	nop	
  7085  00066C  0100               	movlb	0	; () banked
  7086  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  7087  000670  D7EF               	goto	l7402
  7088  000672                     l7410:
  7089                           
  7090                           ; BSR set to: 0
  7091  000672  0100               	movlb	0	; () banked
  7092  000674  51F6               	movf	_logstate& (0+255),w,b
  7093  000676  0100               	movlb	0	; () banked
  7094  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7095  00067A  B4D8               	btfsc	status,2,c
  7096  00067C  0012               	return	
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7100                           
  7101                           ; BSR set to: 0
  7102                           
  7103                           ; BSR set to: 0
  7104  00067E  0E01               	movlw	1
  7105  000680  ECD4  F022         	call	_lcdInst
  7106  000684  0E68               	movlw	104
  7107  000686  0100               	movlb	0	; () banked
  7108  000688  6FC4               	movwf	??_UI& (0+255),b
  7109  00068A  0EE4               	movlw	228
  7110  00068C                     u7127:
  7111  00068C  2EE8               	decfsz	wreg,f,c
  7112  00068E  D7FE               	bra	u7127
  7113  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  7114  000692  D7FC               	bra	u7127
  7115  000694  F000               	nop	
  7116                           
  7117                           ;UI.c: 180: lcdInst(0b10000000);;
  7118  000696  0E80               	movlw	128
  7119  000698  ECD4  F022         	call	_lcdInst
  7120                           
  7121                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7122  00069C  0E64               	movlw	low STR_24
  7123  00069E  0100               	movlb	0	; () banked
  7124  0006A0  6F8E               	movwf	printf@f& (0+255),b
  7125  0006A2  0EFD               	movlw	high STR_24
  7126  0006A4  0100               	movlb	0	; () banked
  7127  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7128  0006A8  EC9C  F008         	call	_printf	;wreg free
  7129                           
  7130                           ;UI.c: 182: lcdInst(0b11000000);;
  7131  0006AC  0EC0               	movlw	192
  7132  0006AE  ECD4  F022         	call	_lcdInst
  7133                           
  7134                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7135  0006B2  0E82               	movlw	low STR_25
  7136  0006B4  0100               	movlb	0	; () banked
  7137  0006B6  6F8E               	movwf	printf@f& (0+255),b
  7138  0006B8  0EFB               	movlw	high STR_25
  7139  0006BA  0100               	movlb	0	; () banked
  7140  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7141  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7142  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7143  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7144  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7145  0006CE  EC9C  F008         	call	_printf	;wreg free
  7146                           
  7147                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7148  0006D2  0E00               	movlw	0
  7149  0006D4  0100               	movlb	0	; () banked
  7150  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  7151  0006D8                     l7428:
  7152                           
  7153                           ; BSR set to: 0
  7154  0006D8  0E63               	movlw	99
  7155  0006DA  0100               	movlb	0	; () banked
  7156  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  7157  0006DE  D001               	goto	l7432
  7158  0006E0  D00C               	goto	l7436
  7159  0006E2                     l7432:
  7160                           
  7161                           ; BSR set to: 0
  7162  0006E2  0E68               	movlw	104
  7163  0006E4  0100               	movlb	0	; () banked
  7164  0006E6  6FC4               	movwf	??_UI& (0+255),b
  7165  0006E8  0EE4               	movlw	228
  7166  0006EA                     u7137:
  7167  0006EA  2EE8               	decfsz	wreg,f,c
  7168  0006EC  D7FE               	bra	u7137
  7169  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  7170  0006F0  D7FC               	bra	u7137
  7171  0006F2  F000               	nop	
  7172  0006F4  0100               	movlb	0	; () banked
  7173  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  7174  0006F8  D7EF               	goto	l7428
  7175  0006FA                     l7436:
  7176                           
  7177                           ; BSR set to: 0
  7178  0006FA  0100               	movlb	0	; () banked
  7179  0006FC  51F6               	movf	_logstate& (0+255),w,b
  7180  0006FE  0100               	movlb	0	; () banked
  7181  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7182  000702  B4D8               	btfsc	status,2,c
  7183  000704  0012               	return	
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7187                           
  7188                           ; BSR set to: 0
  7189                           
  7190                           ; BSR set to: 0
  7191  000706  0E00               	movlw	0
  7192  000708  0100               	movlb	0	; () banked
  7193  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  7194  00070C                     l7442:
  7195                           
  7196                           ; BSR set to: 0
  7197  00070C  0E63               	movlw	99
  7198  00070E  0100               	movlb	0	; () banked
  7199  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  7200  000712  D001               	goto	l7446
  7201  000714  D00C               	goto	l7450
  7202  000716                     l7446:
  7203                           
  7204                           ; BSR set to: 0
  7205  000716  0E68               	movlw	104
  7206  000718  0100               	movlb	0	; () banked
  7207  00071A  6FC4               	movwf	??_UI& (0+255),b
  7208  00071C  0EE4               	movlw	228
  7209  00071E                     u7147:
  7210  00071E  2EE8               	decfsz	wreg,f,c
  7211  000720  D7FE               	bra	u7147
  7212  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7213  000724  D7FC               	bra	u7147
  7214  000726  F000               	nop	
  7215  000728  0100               	movlb	0	; () banked
  7216  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  7217  00072C  D7EF               	goto	l7442
  7218  00072E                     l7450:
  7219                           
  7220                           ; BSR set to: 0
  7221  00072E  0100               	movlb	0	; () banked
  7222  000730  51F6               	movf	_logstate& (0+255),w,b
  7223  000732  0100               	movlb	0	; () banked
  7224  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7225  000736  B4D8               	btfsc	status,2,c
  7226  000738  0012               	return	
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7230                           
  7231                           ; BSR set to: 0
  7232                           
  7233                           ; BSR set to: 0
  7234  00073A  0E01               	movlw	1
  7235  00073C  ECD4  F022         	call	_lcdInst
  7236  000740  0E68               	movlw	104
  7237  000742  0100               	movlb	0	; () banked
  7238  000744  6FC4               	movwf	??_UI& (0+255),b
  7239  000746  0EE4               	movlw	228
  7240  000748                     u7157:
  7241  000748  2EE8               	decfsz	wreg,f,c
  7242  00074A  D7FE               	bra	u7157
  7243  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7244  00074E  D7FC               	bra	u7157
  7245  000750  F000               	nop	
  7246                           
  7247                           ;UI.c: 189: lcdInst(0b10000000);;
  7248  000752  0E80               	movlw	128
  7249  000754  ECD4  F022         	call	_lcdInst
  7250                           
  7251                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7252  000758  0E75               	movlw	low STR_26
  7253  00075A  0100               	movlb	0	; () banked
  7254  00075C  6F8E               	movwf	printf@f& (0+255),b
  7255  00075E  0EFD               	movlw	high STR_26
  7256  000760  0100               	movlb	0	; () banked
  7257  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7258  000764  EC9C  F008         	call	_printf	;wreg free
  7259                           
  7260                           ;UI.c: 191: lcdInst(0b11000000);;
  7261  000768  0EC0               	movlw	192
  7262  00076A  ECD4  F022         	call	_lcdInst
  7263                           
  7264                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7265  00076E  0E6F               	movlw	low STR_27
  7266  000770  0100               	movlb	0	; () banked
  7267  000772  6F8E               	movwf	printf@f& (0+255),b
  7268  000774  0EFB               	movlw	high STR_27
  7269  000776  0100               	movlb	0	; () banked
  7270  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7271  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7272  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7273  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7274  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7275  00078A  EC9C  F008         	call	_printf	;wreg free
  7276                           
  7277                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7278  00078E  0E00               	movlw	0
  7279  000790  0100               	movlb	0	; () banked
  7280  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7281  000794                     l7468:
  7282                           
  7283                           ; BSR set to: 0
  7284  000794  0E63               	movlw	99
  7285  000796  0100               	movlb	0	; () banked
  7286  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7287  00079A  D001               	goto	l7472
  7288  00079C  D00C               	goto	l7476
  7289  00079E                     l7472:
  7290                           
  7291                           ; BSR set to: 0
  7292  00079E  0E68               	movlw	104
  7293  0007A0  0100               	movlb	0	; () banked
  7294  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7295  0007A4  0EE4               	movlw	228
  7296  0007A6                     u7167:
  7297  0007A6  2EE8               	decfsz	wreg,f,c
  7298  0007A8  D7FE               	bra	u7167
  7299  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7300  0007AC  D7FC               	bra	u7167
  7301  0007AE  F000               	nop	
  7302  0007B0  0100               	movlb	0	; () banked
  7303  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7304  0007B4  D7EF               	goto	l7468
  7305  0007B6                     l7476:
  7306                           
  7307                           ; BSR set to: 0
  7308  0007B6  0100               	movlb	0	; () banked
  7309  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7310  0007BA  0100               	movlb	0	; () banked
  7311  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7312  0007BE  B4D8               	btfsc	status,2,c
  7313  0007C0  0012               	return	
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7317                           
  7318                           ; BSR set to: 0
  7319                           
  7320                           ; BSR set to: 0
  7321  0007C2  0E00               	movlw	0
  7322  0007C4  0100               	movlb	0	; () banked
  7323  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7324  0007C8                     l7482:
  7325                           
  7326                           ; BSR set to: 0
  7327  0007C8  0E63               	movlw	99
  7328  0007CA  0100               	movlb	0	; () banked
  7329  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7330  0007CE  D001               	goto	l7486
  7331  0007D0  D00C               	goto	l7490
  7332  0007D2                     l7486:
  7333                           
  7334                           ; BSR set to: 0
  7335  0007D2  0E68               	movlw	104
  7336  0007D4  0100               	movlb	0	; () banked
  7337  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7338  0007D8  0EE4               	movlw	228
  7339  0007DA                     u7177:
  7340  0007DA  2EE8               	decfsz	wreg,f,c
  7341  0007DC  D7FE               	bra	u7177
  7342  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7343  0007E0  D7FC               	bra	u7177
  7344  0007E2  F000               	nop	
  7345  0007E4  0100               	movlb	0	; () banked
  7346  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7347  0007E8  D7EF               	goto	l7482
  7348  0007EA                     l7490:
  7349                           
  7350                           ; BSR set to: 0
  7351  0007EA  0100               	movlb	0	; () banked
  7352  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7353  0007EE  0100               	movlb	0	; () banked
  7354  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7355  0007F2  B4D8               	btfsc	status,2,c
  7356  0007F4  0012               	return	
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7360                           
  7361                           ; BSR set to: 0
  7362                           
  7363                           ; BSR set to: 0
  7364  0007F6  0E01               	movlw	1
  7365  0007F8  ECD4  F022         	call	_lcdInst
  7366  0007FC  0E68               	movlw	104
  7367  0007FE  0100               	movlb	0	; () banked
  7368  000800  6FC4               	movwf	??_UI& (0+255),b
  7369  000802  0EE4               	movlw	228
  7370  000804                     u7187:
  7371  000804  2EE8               	decfsz	wreg,f,c
  7372  000806  D7FE               	bra	u7187
  7373  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7374  00080A  D7FC               	bra	u7187
  7375  00080C  F000               	nop	
  7376                           
  7377                           ;UI.c: 198: lcdInst(0b10000000);;
  7378  00080E  0E80               	movlw	128
  7379  000810  ECD4  F022         	call	_lcdInst
  7380                           
  7381                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7382  000814  0E86               	movlw	low STR_28
  7383  000816  0100               	movlb	0	; () banked
  7384  000818  6F8E               	movwf	printf@f& (0+255),b
  7385  00081A  0EFD               	movlw	high STR_28
  7386  00081C  0100               	movlb	0	; () banked
  7387  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7388  000820  EC9C  F008         	call	_printf	;wreg free
  7389                           
  7390                           ;UI.c: 200: lcdInst(0b11000000);;
  7391  000824  0EC0               	movlw	192
  7392  000826  ECD4  F022         	call	_lcdInst
  7393                           
  7394                           ;UI.c: 201: printf("%d", log_count_total);
  7395  00082A  0E7F               	movlw	low (STR_27+16)
  7396  00082C  0100               	movlb	0	; () banked
  7397  00082E  6F8E               	movwf	printf@f& (0+255),b
  7398  000830  0EFB               	movlw	high (STR_27+16)
  7399  000832  0100               	movlb	0	; () banked
  7400  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7401  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7402  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7403  00083E  EC9C  F008         	call	_printf	;wreg free
  7404                           
  7405                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7406  000842  0E00               	movlw	0
  7407  000844  0100               	movlb	0	; () banked
  7408  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7409  000848                     l7508:
  7410                           
  7411                           ; BSR set to: 0
  7412  000848  0E63               	movlw	99
  7413  00084A  0100               	movlb	0	; () banked
  7414  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7415  00084E  D001               	goto	l7512
  7416  000850  D00C               	goto	l7516
  7417  000852                     l7512:
  7418                           
  7419                           ; BSR set to: 0
  7420  000852  0E68               	movlw	104
  7421  000854  0100               	movlb	0	; () banked
  7422  000856  6FC4               	movwf	??_UI& (0+255),b
  7423  000858  0EE4               	movlw	228
  7424  00085A                     u7197:
  7425  00085A  2EE8               	decfsz	wreg,f,c
  7426  00085C  D7FE               	bra	u7197
  7427  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7428  000860  D7FC               	bra	u7197
  7429  000862  F000               	nop	
  7430  000864  0100               	movlb	0	; () banked
  7431  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7432  000868  D7EF               	goto	l7508
  7433  00086A                     l7516:
  7434                           
  7435                           ; BSR set to: 0
  7436  00086A  0100               	movlb	0	; () banked
  7437  00086C  51F6               	movf	_logstate& (0+255),w,b
  7438  00086E  0100               	movlb	0	; () banked
  7439  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7440  000872  B4D8               	btfsc	status,2,c
  7441  000874  0012               	return	
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7445                           
  7446                           ; BSR set to: 0
  7447                           
  7448                           ; BSR set to: 0
  7449  000876  0E00               	movlw	0
  7450  000878  0100               	movlb	0	; () banked
  7451  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7452  00087C                     l7522:
  7453                           
  7454                           ; BSR set to: 0
  7455  00087C  0E63               	movlw	99
  7456  00087E  0100               	movlb	0	; () banked
  7457  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7458  000882  D001               	goto	l7526
  7459  000884  D00C               	goto	l7530
  7460  000886                     l7526:
  7461                           
  7462                           ; BSR set to: 0
  7463  000886  0E68               	movlw	104
  7464  000888  0100               	movlb	0	; () banked
  7465  00088A  6FC4               	movwf	??_UI& (0+255),b
  7466  00088C  0EE4               	movlw	228
  7467  00088E                     u7207:
  7468  00088E  2EE8               	decfsz	wreg,f,c
  7469  000890  D7FE               	bra	u7207
  7470  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7471  000894  D7FC               	bra	u7207
  7472  000896  F000               	nop	
  7473  000898  0100               	movlb	0	; () banked
  7474  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7475  00089C  D7EF               	goto	l7522
  7476  00089E                     l7530:
  7477                           
  7478                           ; BSR set to: 0
  7479  00089E  0100               	movlb	0	; () banked
  7480  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7481  0008A2  0100               	movlb	0	; () banked
  7482  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7483  0008A6  B4D8               	btfsc	status,2,c
  7484  0008A8  0012               	return	
  7485  0008AA                     l7534:
  7486  0008AA  0100               	movlb	0	; () banked
  7487  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7488  0008AE  0100               	movlb	0	; () banked
  7489  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7490  0008B2  B4D8               	btfsc	status,2,c
  7491  0008B4  0012               	return	
  7492  0008B6  D44A               	goto	l7230
  7493  0008B8                     __end_of_UI:
  7494                           	opt stack 0
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodh	equ	0xFF4
  7500                           prodl	equ	0xFF3
  7501                           intcon	equ	0xFF2
  7502                           intcon2	equ	0xFF1
  7503                           intcon3	equ	0xFF0
  7504                           postinc0	equ	0xFEE
  7505                           wreg	equ	0xFE8
  7506                           postdec1	equ	0xFE5
  7507                           fsr1l	equ	0xFE1
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function _printRTC *****************
  7516 ;; Defined at:
  7517 ;;		line 63 in file "RTC.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;		None
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;  i               2   66[BANK0 ] int 
  7522 ;;  INT_time       14   46[BANK0 ] int [7]
  7523 ;;  month           4   62[BANK0 ] unsigned char [4]
  7524 ;;  RTC_month       2   60[BANK0 ] int 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  1    wreg      void 
  7527 ;; Registers used:
  7528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;Total ram usage:       25 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:   10
  7541 ;; This function calls:
  7542 ;;		_getRTC
  7543 ;;		_lcdInst
  7544 ;;		_printf
  7545 ;;		_strcpy
  7546 ;; This function is called by:
  7547 ;;		_UI
  7548 ;;		_change_state_to_menu_start
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           	psect	text23
  7553  001BCE                     __ptext23:
  7554                           	opt stack 0
  7555  001BCE                     _printRTC:
  7556                           	opt stack 18
  7557                           
  7558                           ;RTC.c: 64: getRTC();
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;incstack = 0
  7562  001BCE  EC6D  F01C         	call	_getRTC	;wreg free
  7563                           
  7564                           ;RTC.c: 65: char month[] = "MMM";
  7565  001BD2  C131  F0BE         	movff	printRTC@F3213,printRTC@month
  7566  001BD6  C132  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  7567  001BDA  C133  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  7568  001BDE  C134  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  7569                           
  7570                           ;RTC.c: 66: int INT_time[7];
  7571                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7572  001BE2  0E00               	movlw	0
  7573  001BE4  0100               	movlb	0	; () banked
  7574  001BE6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7575  001BE8  0E00               	movlw	0
  7576  001BEA  6FC2               	movwf	printRTC@i& (0+255),b
  7577                           
  7578                           ; BSR set to: 0
  7579  001BEC  0100               	movlb	0	; () banked
  7580  001BEE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7581  001BF0  D008               	goto	l5716
  7582  001BF2  0100               	movlb	0	; () banked
  7583  001BF4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7584  001BF6  E146               	bnz	l593
  7585  001BF8  0E07               	movlw	7
  7586  001BFA  0100               	movlb	0	; () banked
  7587  001BFC  5DC2               	subwf	printRTC@i& (0+255),w,b
  7588  001BFE  B0D8               	btfsc	status,0,c
  7589  001C00  D041               	goto	l593
  7590  001C02                     l5716:
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7594  001C02  0E24               	movlw	low _time
  7595  001C04  0100               	movlb	0	; () banked
  7596  001C06  25C2               	addwf	printRTC@i& (0+255),w,b
  7597  001C08  6ED9               	movwf	fsr2l,c
  7598  001C0A  0E01               	movlw	high _time
  7599  001C0C  0100               	movlb	0	; () banked
  7600  001C0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7601  001C10  6EDA               	movwf	fsr2h,c
  7602  001C12  50DF               	movf	indf2,w,c
  7603  001C14  0100               	movlb	0	; () banked
  7604  001C16  6FAB               	movwf	??_printRTC& (0+255),b
  7605  001C18  0100               	movlb	0	; () banked
  7606  001C1A  3BAB               	swapf	??_printRTC& (0+255),f,b
  7607  001C1C  0E0F               	movlw	15
  7608  001C1E  17AB               	andwf	??_printRTC& (0+255),f,b
  7609  001C20  0E0F               	movlw	15
  7610  001C22  0100               	movlb	0	; () banked
  7611  001C24  17AB               	andwf	??_printRTC& (0+255),f,b
  7612  001C26  0100               	movlb	0	; () banked
  7613  001C28  51AB               	movf	??_printRTC& (0+255),w,b
  7614  001C2A  0D0A               	mullw	10
  7615  001C2C  0E24               	movlw	low _time
  7616  001C2E  0100               	movlb	0	; () banked
  7617  001C30  25C2               	addwf	printRTC@i& (0+255),w,b
  7618  001C32  6ED9               	movwf	fsr2l,c
  7619  001C34  0E01               	movlw	high _time
  7620  001C36  0100               	movlb	0	; () banked
  7621  001C38  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7622  001C3A  6EDA               	movwf	fsr2h,c
  7623  001C3C  50DF               	movf	indf2,w,c
  7624  001C3E  0B0F               	andlw	15
  7625  001C40  0100               	movlb	0	; () banked
  7626  001C42  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7627  001C44  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7628  001C46  50F3               	movf	prodl,w,c
  7629  001C48  0100               	movlb	0	; () banked
  7630  001C4A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7631  001C4C  50F4               	movf	prodh,w,c
  7632  001C4E  0100               	movlb	0	; () banked
  7633  001C50  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7634  001C52  90D8               	bcf	status,0,c
  7635  001C54  0100               	movlb	0	; () banked
  7636  001C56  35C2               	rlcf	printRTC@i& (0+255),w,b
  7637  001C58  6ED9               	movwf	fsr2l,c
  7638  001C5A  0100               	movlb	0	; () banked
  7639  001C5C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7640  001C5E  6EDA               	movwf	fsr2h,c
  7641  001C60  0EAE               	movlw	low printRTC@INT_time
  7642  001C62  26D9               	addwf	fsr2l,f,c
  7643  001C64  0E00               	movlw	high printRTC@INT_time
  7644  001C66  22DA               	addwfc	fsr2h,f,c
  7645  001C68  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7646  001C6C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7647                           
  7648                           ; BSR set to: 0
  7649  001C70  0100               	movlb	0	; () banked
  7650  001C72  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7651  001C74  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7652                           
  7653                           ; BSR set to: 0
  7654  001C76  0100               	movlb	0	; () banked
  7655  001C78  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7656  001C7A  D7C3               	goto	l5716
  7657  001C7C  0100               	movlb	0	; () banked
  7658  001C7E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7659  001C80  E101               	bnz	u4390
  7660  001C82  D7BA               	goto	L6
  7661  001C84                     u4390:
  7662  001C84                     l593:
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;RTC.c: 69: }
  7666                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7667  001C84  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7668  001C88  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7669                           
  7670                           ;RTC.c: 71: switch(RTC_month){
  7671  001C8C  D0B4               	goto	l5748
  7672  001C8E                     l5722:
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;RTC.c: 73: strcpy(month, "JAN");
  7676  001C8E  0EBE               	movlw	low printRTC@month
  7677  001C90  0100               	movlb	0	; () banked
  7678  001C92  6F80               	movwf	strcpy@to& (0+255),b
  7679  001C94  0E00               	movlw	high printRTC@month
  7680  001C96  0100               	movlb	0	; () banked
  7681  001C98  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7682  001C9A  0EDA               	movlw	low STR_8
  7683  001C9C  0100               	movlb	0	; () banked
  7684  001C9E  6F82               	movwf	strcpy@from& (0+255),b
  7685  001CA0  0EFF               	movlw	high STR_8
  7686  001CA2  0100               	movlb	0	; () banked
  7687  001CA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7688  001CA6  EC5E  F020         	call	_strcpy	;wreg free
  7689                           
  7690                           ;RTC.c: 74: break;
  7691  001CAA  D0D4               	goto	l5750
  7692  001CAC                     l5724:
  7693                           
  7694                           ;RTC.c: 76: strcpy(month, "FEB");
  7695  001CAC  0EBE               	movlw	low printRTC@month
  7696  001CAE  0100               	movlb	0	; () banked
  7697  001CB0  6F80               	movwf	strcpy@to& (0+255),b
  7698  001CB2  0E00               	movlw	high printRTC@month
  7699  001CB4  0100               	movlb	0	; () banked
  7700  001CB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7701  001CB8  0ECA               	movlw	low STR_9
  7702  001CBA  0100               	movlb	0	; () banked
  7703  001CBC  6F82               	movwf	strcpy@from& (0+255),b
  7704  001CBE  0EFF               	movlw	high STR_9
  7705  001CC0  0100               	movlb	0	; () banked
  7706  001CC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7707  001CC4  EC5E  F020         	call	_strcpy	;wreg free
  7708                           
  7709                           ;RTC.c: 77: break;
  7710  001CC8  D0C5               	goto	l5750
  7711  001CCA                     l5726:
  7712                           
  7713                           ;RTC.c: 79: strcpy(month, "MAR");
  7714  001CCA  0EBE               	movlw	low printRTC@month
  7715  001CCC  0100               	movlb	0	; () banked
  7716  001CCE  6F80               	movwf	strcpy@to& (0+255),b
  7717  001CD0  0E00               	movlw	high printRTC@month
  7718  001CD2  0100               	movlb	0	; () banked
  7719  001CD4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7720  001CD6  0EE6               	movlw	low STR_10
  7721  001CD8  0100               	movlb	0	; () banked
  7722  001CDA  6F82               	movwf	strcpy@from& (0+255),b
  7723  001CDC  0EFF               	movlw	high STR_10
  7724  001CDE  0100               	movlb	0	; () banked
  7725  001CE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7726  001CE2  EC5E  F020         	call	_strcpy	;wreg free
  7727                           
  7728                           ;RTC.c: 80: break;
  7729  001CE6  D0B6               	goto	l5750
  7730  001CE8                     l5728:
  7731                           
  7732                           ;RTC.c: 82: strcpy(month, "APR");
  7733  001CE8  0EBE               	movlw	low printRTC@month
  7734  001CEA  0100               	movlb	0	; () banked
  7735  001CEC  6F80               	movwf	strcpy@to& (0+255),b
  7736  001CEE  0E00               	movlw	high printRTC@month
  7737  001CF0  0100               	movlb	0	; () banked
  7738  001CF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7739  001CF4  0EEA               	movlw	low STR_11
  7740  001CF6  0100               	movlb	0	; () banked
  7741  001CF8  6F82               	movwf	strcpy@from& (0+255),b
  7742  001CFA  0EFF               	movlw	high STR_11
  7743  001CFC  0100               	movlb	0	; () banked
  7744  001CFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7745  001D00  EC5E  F020         	call	_strcpy	;wreg free
  7746                           
  7747                           ;RTC.c: 83: break;
  7748  001D04  D0A7               	goto	l5750
  7749  001D06                     l5730:
  7750                           
  7751                           ;RTC.c: 85: strcpy(month, "MAY");
  7752  001D06  0EBE               	movlw	low printRTC@month
  7753  001D08  0100               	movlb	0	; () banked
  7754  001D0A  6F80               	movwf	strcpy@to& (0+255),b
  7755  001D0C  0E00               	movlw	high printRTC@month
  7756  001D0E  0100               	movlb	0	; () banked
  7757  001D10  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7758  001D12  0EFA               	movlw	low STR_12
  7759  001D14  0100               	movlb	0	; () banked
  7760  001D16  6F82               	movwf	strcpy@from& (0+255),b
  7761  001D18  0EFF               	movlw	high STR_12
  7762  001D1A  0100               	movlb	0	; () banked
  7763  001D1C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7764  001D1E  EC5E  F020         	call	_strcpy	;wreg free
  7765                           
  7766                           ;RTC.c: 86: break;
  7767  001D22  D098               	goto	l5750
  7768  001D24                     l5732:
  7769                           
  7770                           ;RTC.c: 88: strcpy(month, "JUN");
  7771  001D24  0EBE               	movlw	low printRTC@month
  7772  001D26  0100               	movlb	0	; () banked
  7773  001D28  6F80               	movwf	strcpy@to& (0+255),b
  7774  001D2A  0E00               	movlw	high printRTC@month
  7775  001D2C  0100               	movlb	0	; () banked
  7776  001D2E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7777  001D30  0EDE               	movlw	low STR_13
  7778  001D32  0100               	movlb	0	; () banked
  7779  001D34  6F82               	movwf	strcpy@from& (0+255),b
  7780  001D36  0EFF               	movlw	high STR_13
  7781  001D38  0100               	movlb	0	; () banked
  7782  001D3A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7783  001D3C  EC5E  F020         	call	_strcpy	;wreg free
  7784                           
  7785                           ;RTC.c: 89: break;
  7786  001D40  D089               	goto	l5750
  7787  001D42                     l5734:
  7788                           
  7789                           ;RTC.c: 91: strcpy(month, "JUL");
  7790  001D42  0EBE               	movlw	low printRTC@month
  7791  001D44  0100               	movlb	0	; () banked
  7792  001D46  6F80               	movwf	strcpy@to& (0+255),b
  7793  001D48  0E00               	movlw	high printRTC@month
  7794  001D4A  0100               	movlb	0	; () banked
  7795  001D4C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7796  001D4E  0ED6               	movlw	low STR_14
  7797  001D50  0100               	movlb	0	; () banked
  7798  001D52  6F82               	movwf	strcpy@from& (0+255),b
  7799  001D54  0EFF               	movlw	high STR_14
  7800  001D56  0100               	movlb	0	; () banked
  7801  001D58  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7802  001D5A  EC5E  F020         	call	_strcpy	;wreg free
  7803                           
  7804                           ;RTC.c: 92: break;
  7805  001D5E  D07A               	goto	l5750
  7806  001D60                     l5736:
  7807                           
  7808                           ;RTC.c: 94: strcpy(month, "AUG");
  7809  001D60  0EBE               	movlw	low printRTC@month
  7810  001D62  0100               	movlb	0	; () banked
  7811  001D64  6F80               	movwf	strcpy@to& (0+255),b
  7812  001D66  0E00               	movlw	high printRTC@month
  7813  001D68  0100               	movlb	0	; () banked
  7814  001D6A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7815  001D6C  0ED2               	movlw	low STR_15
  7816  001D6E  0100               	movlb	0	; () banked
  7817  001D70  6F82               	movwf	strcpy@from& (0+255),b
  7818  001D72  0EFF               	movlw	high STR_15
  7819  001D74  0100               	movlb	0	; () banked
  7820  001D76  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7821  001D78  EC5E  F020         	call	_strcpy	;wreg free
  7822                           
  7823                           ;RTC.c: 95: break;
  7824  001D7C  D06B               	goto	l5750
  7825  001D7E                     l5738:
  7826                           
  7827                           ;RTC.c: 97: strcpy(month, "SEP");
  7828  001D7E  0EBE               	movlw	low printRTC@month
  7829  001D80  0100               	movlb	0	; () banked
  7830  001D82  6F80               	movwf	strcpy@to& (0+255),b
  7831  001D84  0E00               	movlw	high printRTC@month
  7832  001D86  0100               	movlb	0	; () banked
  7833  001D88  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7834  001D8A  0EE2               	movlw	low STR_16
  7835  001D8C  0100               	movlb	0	; () banked
  7836  001D8E  6F82               	movwf	strcpy@from& (0+255),b
  7837  001D90  0EFF               	movlw	high STR_16
  7838  001D92  0100               	movlb	0	; () banked
  7839  001D94  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7840  001D96  EC5E  F020         	call	_strcpy	;wreg free
  7841                           
  7842                           ;RTC.c: 98: break;
  7843  001D9A  D05C               	goto	l5750
  7844  001D9C                     l5740:
  7845                           
  7846                           ;RTC.c: 100: strcpy(month, "OCT");
  7847  001D9C  0EBE               	movlw	low printRTC@month
  7848  001D9E  0100               	movlb	0	; () banked
  7849  001DA0  6F80               	movwf	strcpy@to& (0+255),b
  7850  001DA2  0E00               	movlw	high printRTC@month
  7851  001DA4  0100               	movlb	0	; () banked
  7852  001DA6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7853  001DA8  0EF2               	movlw	low STR_17
  7854  001DAA  0100               	movlb	0	; () banked
  7855  001DAC  6F82               	movwf	strcpy@from& (0+255),b
  7856  001DAE  0EFF               	movlw	high STR_17
  7857  001DB0  0100               	movlb	0	; () banked
  7858  001DB2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7859  001DB4  EC5E  F020         	call	_strcpy	;wreg free
  7860                           
  7861                           ;RTC.c: 101: break;
  7862  001DB8  D04D               	goto	l5750
  7863  001DBA                     l5742:
  7864                           
  7865                           ;RTC.c: 103: strcpy(month, "NOV");
  7866  001DBA  0EBE               	movlw	low printRTC@month
  7867  001DBC  0100               	movlb	0	; () banked
  7868  001DBE  6F80               	movwf	strcpy@to& (0+255),b
  7869  001DC0  0E00               	movlw	high printRTC@month
  7870  001DC2  0100               	movlb	0	; () banked
  7871  001DC4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7872  001DC6  0EF6               	movlw	low STR_18
  7873  001DC8  0100               	movlb	0	; () banked
  7874  001DCA  6F82               	movwf	strcpy@from& (0+255),b
  7875  001DCC  0EFF               	movlw	high STR_18
  7876  001DCE  0100               	movlb	0	; () banked
  7877  001DD0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7878  001DD2  EC5E  F020         	call	_strcpy	;wreg free
  7879                           
  7880                           ;RTC.c: 104: break;
  7881  001DD6  D03E               	goto	l5750
  7882  001DD8                     l5744:
  7883                           
  7884                           ;RTC.c: 106: strcpy(month, "DEC");
  7885  001DD8  0EBE               	movlw	low printRTC@month
  7886  001DDA  0100               	movlb	0	; () banked
  7887  001DDC  6F80               	movwf	strcpy@to& (0+255),b
  7888  001DDE  0E00               	movlw	high printRTC@month
  7889  001DE0  0100               	movlb	0	; () banked
  7890  001DE2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7891  001DE4  0ECE               	movlw	low STR_19
  7892  001DE6  0100               	movlb	0	; () banked
  7893  001DE8  6F82               	movwf	strcpy@from& (0+255),b
  7894  001DEA  0EFF               	movlw	high STR_19
  7895  001DEC  0100               	movlb	0	; () banked
  7896  001DEE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7897  001DF0  EC5E  F020         	call	_strcpy	;wreg free
  7898                           
  7899                           ;RTC.c: 108: }
  7900                           
  7901                           ;RTC.c: 107: break;
  7902  001DF4  D02F               	goto	l5750
  7903  001DF6                     l5748:
  7904  001DF6  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7905  001DFA  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7906                           
  7907                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7908                           ; Switch size 1, requested type "space"
  7909                           ; Number of cases is 1, Range of values is 0 to 0
  7910                           ; switch strategies available:
  7911                           ; Name         Instructions Cycles
  7912                           ; simple_byte            4     3 (average)
  7913                           ;	Chosen strategy is simple_byte
  7914  001DFE  0100               	movlb	0	; () banked
  7915  001E00  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7916  001E02  0A00               	xorlw	0	; case 0
  7917  001E04  A4D8               	btfss	status,2,c
  7918  001E06  D026               	goto	l5750
  7919                           
  7920                           ; BSR set to: 0
  7921                           ; Switch size 1, requested type "space"
  7922                           ; Number of cases is 12, Range of values is 1 to 12
  7923                           ; switch strategies available:
  7924                           ; Name         Instructions Cycles
  7925                           ; simple_byte           37    19 (average)
  7926                           ;	Chosen strategy is simple_byte
  7927  001E08  0100               	movlb	0	; () banked
  7928  001E0A  51AB               	movf	??_printRTC& (0+255),w,b
  7929  001E0C  0A01               	xorlw	1	; case 1
  7930  001E0E  B4D8               	btfsc	status,2,c
  7931  001E10  D73E               	goto	l5722
  7932  001E12  0A03               	xorlw	3	; case 2
  7933  001E14  B4D8               	btfsc	status,2,c
  7934  001E16  D74A               	goto	l5724
  7935  001E18  0A01               	xorlw	1	; case 3
  7936  001E1A  B4D8               	btfsc	status,2,c
  7937  001E1C  D756               	goto	l5726
  7938  001E1E  0A07               	xorlw	7	; case 4
  7939  001E20  B4D8               	btfsc	status,2,c
  7940  001E22  D762               	goto	l5728
  7941  001E24  0A01               	xorlw	1	; case 5
  7942  001E26  B4D8               	btfsc	status,2,c
  7943  001E28  D76E               	goto	l5730
  7944  001E2A  0A03               	xorlw	3	; case 6
  7945  001E2C  B4D8               	btfsc	status,2,c
  7946  001E2E  D77A               	goto	l5732
  7947  001E30  0A01               	xorlw	1	; case 7
  7948  001E32  B4D8               	btfsc	status,2,c
  7949  001E34  D786               	goto	l5734
  7950  001E36  0A0F               	xorlw	15	; case 8
  7951  001E38  B4D8               	btfsc	status,2,c
  7952  001E3A  D792               	goto	l5736
  7953  001E3C  0A01               	xorlw	1	; case 9
  7954  001E3E  B4D8               	btfsc	status,2,c
  7955  001E40  D79E               	goto	l5738
  7956  001E42  0A03               	xorlw	3	; case 10
  7957  001E44  B4D8               	btfsc	status,2,c
  7958  001E46  D7AA               	goto	l5740
  7959  001E48  0A01               	xorlw	1	; case 11
  7960  001E4A  B4D8               	btfsc	status,2,c
  7961  001E4C  D7B6               	goto	l5742
  7962  001E4E  0A07               	xorlw	7	; case 12
  7963  001E50  B4D8               	btfsc	status,2,c
  7964  001E52  D7C2               	goto	l5744
  7965  001E54                     l5750:
  7966                           
  7967                           ;RTC.c: 109: lcdInst(0b10000000);;
  7968  001E54  0E80               	movlw	128
  7969  001E56  ECD4  F022         	call	_lcdInst
  7970                           
  7971                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7972  001E5A  0E42               	movlw	low STR_21
  7973  001E5C  0100               	movlb	0	; () banked
  7974  001E5E  6F8E               	movwf	printf@f& (0+255),b
  7975  001E60  0EFB               	movlw	high STR_21
  7976  001E62  0100               	movlb	0	; () banked
  7977  001E64  6F8F               	movwf	(printf@f+1)& (0+255),b
  7978  001E66  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7979  001E6A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7980  001E6E  0EBE               	movlw	low printRTC@month
  7981  001E70  0100               	movlb	0	; () banked
  7982  001E72  6F92               	movwf	(?_printf+4)& (0+255),b
  7983  001E74  0E00               	movlw	high printRTC@month
  7984  001E76  0100               	movlb	0	; () banked
  7985  001E78  6F93               	movwf	(?_printf+5)& (0+255),b
  7986  001E7A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7987  001E7E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7988  001E82  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7989  001E86  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7990  001E8A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7991  001E8E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7992  001E92  EC9C  F008         	call	_printf	;wreg free
  7993  001E96  0012               	return		;funcret
  7994  001E98                     __end_of_printRTC:
  7995                           	opt stack 0
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           prodh	equ	0xFF4
  8001                           prodl	equ	0xFF3
  8002                           intcon	equ	0xFF2
  8003                           intcon2	equ	0xFF1
  8004                           intcon3	equ	0xFF0
  8005                           postinc0	equ	0xFEE
  8006                           wreg	equ	0xFE8
  8007                           postdec1	equ	0xFE5
  8008                           fsr1l	equ	0xFE1
  8009                           indf2	equ	0xFDF
  8010                           postinc2	equ	0xFDE
  8011                           postdec2	equ	0xFDD
  8012                           fsr2h	equ	0xFDA
  8013                           fsr2l	equ	0xFD9
  8014                           status	equ	0xFD8
  8015                           
  8016 ;; *************** function _strcpy *****************
  8017 ;; Defined at:
  8018 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8021 ;;		 -> printRTC@month(4), UI@month(4), 
  8022 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8023 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8024 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8025 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8026 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8027 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8028 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8029 ;;		 -> STR_8(4), 
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8032 ;;		 -> printRTC@month(4), UI@month(4), 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  2    0[BANK0 ] PTR unsigned char 
  8035 ;; Registers used:
  8036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8042 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;Total ram usage:        6 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    7
  8049 ;; This function calls:
  8050 ;;		Nothing
  8051 ;; This function is called by:
  8052 ;;		_UI
  8053 ;;		_printRTC
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           	psect	text24
  8058  0040BC                     __ptext24:
  8059                           	opt stack 0
  8060  0040BC                     _strcpy:
  8061                           	opt stack 20
  8062                           
  8063                           ;incstack = 0
  8064  0040BC  C080  F084         	movff	strcpy@to,strcpy@cp
  8065  0040C0  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8066  0040C4  D006               	goto	l5454
  8067  0040C6                     l5452:
  8068  0040C6  0100               	movlb	0	; () banked
  8069  0040C8  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8070  0040CA  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8071  0040CC  0100               	movlb	0	; () banked
  8072  0040CE  4B82               	infsnz	strcpy@from& (0+255),f,b
  8073  0040D0  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8074  0040D2                     l5454:
  8075  0040D2  C082  FFF6         	movff	strcpy@from,tblptrl
  8076  0040D6  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8077  0040DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8078  0040DA  6AF8               	clrf	tblptru,c
  8079  0040DC                     	endif
  8080  0040DC                     	if	0	;tblptru may be non-zero
  8081  0040DC                     	endif
  8082  0040DC  C084  FFD9         	movff	strcpy@cp,fsr2l
  8083  0040E0  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8084  0040E4  0008               	tblrd		*
  8085  0040E6  CFF5 FFDF          	movff	tablat,indf2
  8086  0040EA  50DF               	movf	indf2,w,c
  8087  0040EC  B4D8               	btfsc	status,2,c
  8088  0040EE  0012               	return	
  8089  0040F0  D7EA               	goto	l5452
  8090  0040F2                     __end_of_strcpy:
  8091                           	opt stack 0
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           intcon2	equ	0xFF1
  8100                           intcon3	equ	0xFF0
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           postdec1	equ	0xFE5
  8104                           fsr1l	equ	0xFE1
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _getRTC *****************
  8113 ;; Defined at:
  8114 ;;		line 44 in file "RTC.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;  i               2    3[BANK0 ] int 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;Total ram usage:        2 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    9
  8135 ;; This function calls:
  8136 ;;		_I2C_Master_Read
  8137 ;;		_I2C_Master_Start
  8138 ;;		_I2C_Master_Stop
  8139 ;;		_I2C_Master_Write
  8140 ;; This function is called by:
  8141 ;;		_printRTC
  8142 ;;		_initSortTimer
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text25
  8147  0038DA                     __ptext25:
  8148                           	opt stack 0
  8149  0038DA                     _getRTC:
  8150                           	opt stack 18
  8151                           
  8152                           ;RTC.c: 48: I2C_Master_Start();
  8153                           
  8154                           ;incstack = 0
  8155  0038DA  ECFA  F022         	call	_I2C_Master_Start	;wreg free
  8156                           
  8157                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8158  0038DE  0E00               	movlw	0
  8159  0038E0  0100               	movlb	0	; () banked
  8160  0038E2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8161  0038E4  0ED0               	movlw	208
  8162  0038E6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8163  0038E8  ECE8  F022         	call	_I2C_Master_Write	;wreg free
  8164                           
  8165                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8166  0038EC  0E00               	movlw	0
  8167  0038EE  0100               	movlb	0	; () banked
  8168  0038F0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8169  0038F2  0E00               	movlw	0
  8170  0038F4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8171  0038F6  ECE8  F022         	call	_I2C_Master_Write	;wreg free
  8172                           
  8173                           ;RTC.c: 51: I2C_Master_Stop();
  8174  0038FA  ECF6  F022         	call	_I2C_Master_Stop	;wreg free
  8175                           
  8176                           ;RTC.c: 54: I2C_Master_Start();
  8177  0038FE  ECFA  F022         	call	_I2C_Master_Start	;wreg free
  8178                           
  8179                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8180  003902  0E00               	movlw	0
  8181  003904  0100               	movlb	0	; () banked
  8182  003906  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8183  003908  0ED1               	movlw	209
  8184  00390A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8185  00390C  ECE8  F022         	call	_I2C_Master_Write	;wreg free
  8186                           
  8187                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8188  003910  0E00               	movlw	0
  8189  003912  0100               	movlb	0	; () banked
  8190  003914  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8191  003916  0E00               	movlw	0
  8192  003918  6F83               	movwf	getRTC@i& (0+255),b
  8193  00391A                     l5460:
  8194                           
  8195                           ; BSR set to: 0
  8196  00391A  0100               	movlb	0	; () banked
  8197  00391C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8198  00391E  D008               	goto	l5464
  8199  003920  0100               	movlb	0	; () banked
  8200  003922  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8201  003924  E115               	bnz	l5470
  8202  003926  0E06               	movlw	6
  8203  003928  0100               	movlb	0	; () banked
  8204  00392A  5D83               	subwf	getRTC@i& (0+255),w,b
  8205  00392C  B0D8               	btfsc	status,0,c
  8206  00392E  D010               	goto	l5470
  8207  003930                     l5464:
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8211  003930  0E24               	movlw	low _time
  8212  003932  0100               	movlb	0	; () banked
  8213  003934  2583               	addwf	getRTC@i& (0+255),w,b
  8214  003936  6ED9               	movwf	fsr2l,c
  8215  003938  0E01               	movlw	high _time
  8216  00393A  0100               	movlb	0	; () banked
  8217  00393C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8218  00393E  6EDA               	movwf	fsr2h,c
  8219  003940  0E01               	movlw	1
  8220  003942  EC85  F021         	call	_I2C_Master_Read
  8221  003946  6EDF               	movwf	indf2,c
  8222  003948  0100               	movlb	0	; () banked
  8223  00394A  4B83               	infsnz	getRTC@i& (0+255),f,b
  8224  00394C  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8225  00394E  D7E5               	goto	l5460
  8226  003950                     l5470:
  8227                           
  8228                           ; BSR set to: 0
  8229                           ;RTC.c: 58: }
  8230                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8231  003950  0E00               	movlw	0
  8232  003952  EC85  F021         	call	_I2C_Master_Read
  8233  003956  0101               	movlb	1	; () banked
  8234  003958  6F2A               	movwf	(_time+6)& (0+255),b
  8235                           
  8236                           ;RTC.c: 60: I2C_Master_Stop();
  8237  00395A  ECF6  F022         	call	_I2C_Master_Stop	;wreg free
  8238  00395E  0012               	return		;funcret
  8239  003960                     __end_of_getRTC:
  8240                           	opt stack 0
  8241                           tblptru	equ	0xFF8
  8242                           tblptrh	equ	0xFF7
  8243                           tblptrl	equ	0xFF6
  8244                           tablat	equ	0xFF5
  8245                           prodh	equ	0xFF4
  8246                           prodl	equ	0xFF3
  8247                           intcon	equ	0xFF2
  8248                           intcon2	equ	0xFF1
  8249                           intcon3	equ	0xFF0
  8250                           postinc0	equ	0xFEE
  8251                           wreg	equ	0xFE8
  8252                           postdec1	equ	0xFE5
  8253                           fsr1l	equ	0xFE1
  8254                           indf2	equ	0xFDF
  8255                           postinc2	equ	0xFDE
  8256                           postdec2	equ	0xFDD
  8257                           fsr2h	equ	0xFDA
  8258                           fsr2l	equ	0xFD9
  8259                           status	equ	0xFD8
  8260                           
  8261 ;; *************** function _I2C_Master_Write *****************
  8262 ;; Defined at:
  8263 ;;		line 49 in file "I2C.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;  d               2    1[BANK0 ] unsigned int 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;		None
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      void 
  8270 ;; Registers used:
  8271 ;;		wreg, status,2, status,0, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8277 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;Total ram usage:        2 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    8
  8284 ;; This function calls:
  8285 ;;		_I2C_Master_Wait
  8286 ;; This function is called by:
  8287 ;;		_loadRTC
  8288 ;;		_getRTC
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text26
  8293  0045D0                     __ptext26:
  8294                           	opt stack 0
  8295  0045D0                     _I2C_Master_Write:
  8296                           	opt stack 18
  8297                           
  8298                           ;I2C.c: 51: I2C_Master_Wait();
  8299                           
  8300                           ;incstack = 0
  8301  0045D0  ECB9  F022         	call	_I2C_Master_Wait	;wreg free
  8302                           
  8303                           ;I2C.c: 52: SSPBUF = d;
  8304  0045D4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8305  0045D8  0012               	return		;funcret
  8306  0045DA                     __end_of_I2C_Master_Write:
  8307                           	opt stack 0
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           intcon	equ	0xFF2
  8315                           intcon2	equ	0xFF1
  8316                           intcon3	equ	0xFF0
  8317                           postinc0	equ	0xFEE
  8318                           wreg	equ	0xFE8
  8319                           postdec1	equ	0xFE5
  8320                           fsr1l	equ	0xFE1
  8321                           indf2	equ	0xFDF
  8322                           postinc2	equ	0xFDE
  8323                           postdec2	equ	0xFDD
  8324                           fsr2h	equ	0xFDA
  8325                           fsr2l	equ	0xFD9
  8326                           status	equ	0xFD8
  8327                           
  8328 ;; *************** function _I2C_Master_Stop *****************
  8329 ;; Defined at:
  8330 ;;		line 43 in file "I2C.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;		None
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;		None
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      void 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;Total ram usage:        0 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    8
  8351 ;; This function calls:
  8352 ;;		_I2C_Master_Wait
  8353 ;; This function is called by:
  8354 ;;		_loadRTC
  8355 ;;		_getRTC
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text27
  8360  0045EC                     __ptext27:
  8361                           	opt stack 0
  8362  0045EC                     _I2C_Master_Stop:
  8363                           	opt stack 18
  8364                           
  8365                           ;I2C.c: 45: I2C_Master_Wait();
  8366                           
  8367                           ;incstack = 0
  8368  0045EC  ECB9  F022         	call	_I2C_Master_Wait	;wreg free
  8369                           
  8370                           ;I2C.c: 46: PEN = 1;
  8371  0045F0  84C5               	bsf	4037,2,c	;volatile
  8372  0045F2  0012               	return		;funcret
  8373  0045F4                     __end_of_I2C_Master_Stop:
  8374                           	opt stack 0
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           intcon3	equ	0xFF0
  8384                           postinc0	equ	0xFEE
  8385                           wreg	equ	0xFE8
  8386                           postdec1	equ	0xFE5
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _I2C_Master_Start *****************
  8396 ;; Defined at:
  8397 ;;		line 31 in file "I2C.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;Total ram usage:        0 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    8
  8418 ;; This function calls:
  8419 ;;		_I2C_Master_Wait
  8420 ;; This function is called by:
  8421 ;;		_loadRTC
  8422 ;;		_getRTC
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text28
  8427  0045F4                     __ptext28:
  8428                           	opt stack 0
  8429  0045F4                     _I2C_Master_Start:
  8430                           	opt stack 18
  8431                           
  8432                           ;I2C.c: 33: I2C_Master_Wait();
  8433                           
  8434                           ;incstack = 0
  8435  0045F4  ECB9  F022         	call	_I2C_Master_Wait	;wreg free
  8436                           
  8437                           ;I2C.c: 34: SEN = 1;
  8438  0045F8  80C5               	bsf	4037,0,c	;volatile
  8439  0045FA  0012               	return		;funcret
  8440  0045FC                     __end_of_I2C_Master_Start:
  8441                           	opt stack 0
  8442                           tblptru	equ	0xFF8
  8443                           tblptrh	equ	0xFF7
  8444                           tblptrl	equ	0xFF6
  8445                           tablat	equ	0xFF5
  8446                           prodh	equ	0xFF4
  8447                           prodl	equ	0xFF3
  8448                           intcon	equ	0xFF2
  8449                           intcon2	equ	0xFF1
  8450                           intcon3	equ	0xFF0
  8451                           postinc0	equ	0xFEE
  8452                           wreg	equ	0xFE8
  8453                           postdec1	equ	0xFE5
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           postdec2	equ	0xFDD
  8458                           fsr2h	equ	0xFDA
  8459                           fsr2l	equ	0xFD9
  8460                           status	equ	0xFD8
  8461                           
  8462 ;; *************** function _I2C_Master_Read *****************
  8463 ;; Defined at:
  8464 ;;		line 55 in file "I2C.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  a               1    wreg     unsigned char 
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;  a               1    1[BANK0 ] unsigned char 
  8469 ;;  temp            1    2[BANK0 ] unsigned char 
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      unsigned char 
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, status,0, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;Total ram usage:        2 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    8
  8486 ;; This function calls:
  8487 ;;		_I2C_Master_Wait
  8488 ;; This function is called by:
  8489 ;;		_getRTC
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           	psect	text29
  8494  00430A                     __ptext29:
  8495                           	opt stack 0
  8496  00430A                     _I2C_Master_Read:
  8497                           	opt stack 18
  8498                           
  8499                           ;incstack = 0
  8500                           ;I2C_Master_Read@a stored from wreg
  8501  00430A  0100               	movlb	0	; () banked
  8502  00430C  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8503                           
  8504                           ;I2C.c: 57: unsigned char temp;
  8505                           ;I2C.c: 58: I2C_Master_Wait();
  8506  00430E  ECB9  F022         	call	_I2C_Master_Wait	;wreg free
  8507                           
  8508                           ;I2C.c: 59: RCEN = 1;
  8509  004312  86C5               	bsf	4037,3,c	;volatile
  8510                           
  8511                           ;I2C.c: 60: I2C_Master_Wait();
  8512  004314  ECB9  F022         	call	_I2C_Master_Wait	;wreg free
  8513                           
  8514                           ;I2C.c: 61: temp = SSPBUF;
  8515  004318  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8516                           
  8517                           ;I2C.c: 62: I2C_Master_Wait();
  8518  00431C  ECB9  F022         	call	_I2C_Master_Wait	;wreg free
  8519                           
  8520                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8521  004320  0100               	movlb	0	; () banked
  8522  004322  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8523  004324  0100               	movlb	0	; () banked
  8524  004326  A4D8               	btfss	status,2,c
  8525  004328  D002               	goto	u3480
  8526  00432A  8AC5               	bsf	4037,5,c	;volatile
  8527  00432C  D001               	goto	l5154
  8528  00432E                     u3480:
  8529  00432E  9AC5               	bcf	4037,5,c	;volatile
  8530  004330                     l5154:
  8531                           
  8532                           ;I2C.c: 64: ACKEN = 1;
  8533  004330  88C5               	bsf	4037,4,c	;volatile
  8534                           
  8535                           ;I2C.c: 65: return temp;
  8536  004332  0100               	movlb	0	; () banked
  8537  004334  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8538  004336  0012               	return	
  8539  004338                     __end_of_I2C_Master_Read:
  8540                           	opt stack 0
  8541                           tblptru	equ	0xFF8
  8542                           tblptrh	equ	0xFF7
  8543                           tblptrl	equ	0xFF6
  8544                           tablat	equ	0xFF5
  8545                           prodh	equ	0xFF4
  8546                           prodl	equ	0xFF3
  8547                           intcon	equ	0xFF2
  8548                           intcon2	equ	0xFF1
  8549                           intcon3	equ	0xFF0
  8550                           postinc0	equ	0xFEE
  8551                           wreg	equ	0xFE8
  8552                           postdec1	equ	0xFE5
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           fsr2h	equ	0xFDA
  8558                           fsr2l	equ	0xFD9
  8559                           status	equ	0xFD8
  8560                           
  8561 ;; *************** function _I2C_Master_Wait *****************
  8562 ;; Defined at:
  8563 ;;		line 26 in file "I2C.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;		None
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;		None
  8568 ;; Return value:  Size  Location     Type
  8569 ;;                  1    wreg      void 
  8570 ;; Registers used:
  8571 ;;		wreg, status,2, status,0
  8572 ;; Tracked objects:
  8573 ;;		On entry : 0/0
  8574 ;;		On exit  : 0/0
  8575 ;;		Unchanged: 0/0
  8576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;Total ram usage:        1 bytes
  8582 ;; Hardware stack levels used:    1
  8583 ;; Hardware stack levels required when called:    7
  8584 ;; This function calls:
  8585 ;;		Nothing
  8586 ;; This function is called by:
  8587 ;;		_I2C_Master_Start
  8588 ;;		_I2C_Master_Stop
  8589 ;;		_I2C_Master_Write
  8590 ;;		_I2C_Master_Read
  8591 ;;		_I2C_Master_RepeatedStart
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           	psect	text30
  8596  004572                     __ptext30:
  8597                           	opt stack 0
  8598  004572                     _I2C_Master_Wait:
  8599                           	opt stack 18
  8600  004572                     l66:
  8601  004572  B4C7               	btfsc	4039,2,c	;volatile
  8602  004574  D7FE               	goto	l66
  8603  004576  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8604  00457A  0E1F               	movlw	31
  8605  00457C  0100               	movlb	0	; () banked
  8606  00457E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8607  004580  B4D8               	btfsc	status,2,c
  8608  004582  0012               	return	
  8609  004584  D7F6               	goto	l66
  8610  004586                     __end_of_I2C_Master_Wait:
  8611                           	opt stack 0
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           intcon	equ	0xFF2
  8619                           intcon2	equ	0xFF1
  8620                           intcon3	equ	0xFF0
  8621                           postinc0	equ	0xFEE
  8622                           wreg	equ	0xFE8
  8623                           postdec1	equ	0xFE5
  8624                           fsr1l	equ	0xFE1
  8625                           indf2	equ	0xFDF
  8626                           postinc2	equ	0xFDE
  8627                           postdec2	equ	0xFDD
  8628                           fsr2h	equ	0xFDA
  8629                           fsr2l	equ	0xFD9
  8630                           status	equ	0xFD8
  8631                           
  8632 ;; *************** function _change_state_to_menu_22 *****************
  8633 ;; Defined at:
  8634 ;;		line 496 in file "UI.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;		None
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;		None
  8639 ;; Return value:  Size  Location     Type
  8640 ;;                  1    wreg      void 
  8641 ;; Registers used:
  8642 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8643 ;; Tracked objects:
  8644 ;;		On entry : 0/0
  8645 ;;		On exit  : 0/0
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;Total ram usage:        0 bytes
  8653 ;; Hardware stack levels used:    1
  8654 ;; Hardware stack levels required when called:   10
  8655 ;; This function calls:
  8656 ;;		_lcdInst
  8657 ;;		_printf
  8658 ;; This function is called by:
  8659 ;;		_UI
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	text31
  8664  00404C                     __ptext31:
  8665                           	opt stack 0
  8666  00404C                     _change_state_to_menu_22:
  8667                           	opt stack 19
  8668                           
  8669                           ;UI.c: 497: cur_state = 22;
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;incstack = 0
  8673  00404C  0E00               	movlw	0
  8674  00404E  0100               	movlb	0	; () banked
  8675  004050  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8676  004052  0E16               	movlw	22
  8677  004054  6FDE               	movwf	_cur_state& (0+255),b
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;UI.c: 499: lcdInst(0b10000000);;
  8681  004056  0E80               	movlw	128
  8682  004058  ECD4  F022         	call	_lcdInst
  8683                           
  8684                           ;UI.c: 500: printf("2. SORT        <");
  8685  00405C  0EEC               	movlw	low STR_34
  8686  00405E  0100               	movlb	0	; () banked
  8687  004060  6F8E               	movwf	printf@f& (0+255),b
  8688  004062  0EFD               	movlw	high STR_34
  8689  004064  0100               	movlb	0	; () banked
  8690  004066  6F8F               	movwf	(printf@f+1)& (0+255),b
  8691  004068  EC9C  F008         	call	_printf	;wreg free
  8692                           
  8693                           ;UI.c: 501: lcdInst(0b11000000);;
  8694  00406C  0EC0               	movlw	192
  8695  00406E  ECD4  F022         	call	_lcdInst
  8696                           
  8697                           ;UI.c: 502: printf("3. LOGS         ");
  8698  004072  0E31               	movlw	low STR_36
  8699  004074  0100               	movlb	0	; () banked
  8700  004076  6F8E               	movwf	printf@f& (0+255),b
  8701  004078  0EFD               	movlw	high STR_36
  8702  00407A  0100               	movlb	0	; () banked
  8703  00407C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8704  00407E  EC9C  F008         	call	_printf	;wreg free
  8705  004082  0012               	return		;funcret
  8706  004084                     __end_of_change_state_to_menu_22:
  8707                           	opt stack 0
  8708                           tblptru	equ	0xFF8
  8709                           tblptrh	equ	0xFF7
  8710                           tblptrl	equ	0xFF6
  8711                           tablat	equ	0xFF5
  8712                           prodh	equ	0xFF4
  8713                           prodl	equ	0xFF3
  8714                           intcon	equ	0xFF2
  8715                           intcon2	equ	0xFF1
  8716                           intcon3	equ	0xFF0
  8717                           postinc0	equ	0xFEE
  8718                           wreg	equ	0xFE8
  8719                           postdec1	equ	0xFE5
  8720                           fsr1l	equ	0xFE1
  8721                           indf2	equ	0xFDF
  8722                           postinc2	equ	0xFDE
  8723                           postdec2	equ	0xFDD
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728 ;; *************** function _change_state_to_menu_12 *****************
  8729 ;; Defined at:
  8730 ;;		line 488 in file "UI.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;		None
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;		None
  8735 ;; Return value:  Size  Location     Type
  8736 ;;                  1    wreg      void 
  8737 ;; Registers used:
  8738 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 0/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;Total ram usage:        0 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; Hardware stack levels required when called:   10
  8751 ;; This function calls:
  8752 ;;		_lcdInst
  8753 ;;		_printf
  8754 ;; This function is called by:
  8755 ;;		_UI
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           	psect	text32
  8760  004084                     __ptext32:
  8761                           	opt stack 0
  8762  004084                     _change_state_to_menu_12:
  8763                           	opt stack 19
  8764                           
  8765                           ;UI.c: 489: cur_state = 12;
  8766                           
  8767                           ;incstack = 0
  8768  004084  0E00               	movlw	0
  8769  004086  0100               	movlb	0	; () banked
  8770  004088  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8771  00408A  0E0C               	movlw	12
  8772  00408C  6FDE               	movwf	_cur_state& (0+255),b
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;UI.c: 491: lcdInst(0b10000000);;
  8776  00408E  0E80               	movlw	128
  8777  004090  ECD4  F022         	call	_lcdInst
  8778                           
  8779                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8780  004094  0E53               	movlw	low STR_33
  8781  004096  0100               	movlb	0	; () banked
  8782  004098  6F8E               	movwf	printf@f& (0+255),b
  8783  00409A  0EFD               	movlw	high STR_33
  8784  00409C  0100               	movlb	0	; () banked
  8785  00409E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8786  0040A0  EC9C  F008         	call	_printf	;wreg free
  8787                           
  8788                           ;UI.c: 493: lcdInst(0b11000000);;
  8789  0040A4  0EC0               	movlw	192
  8790  0040A6  ECD4  F022         	call	_lcdInst
  8791                           
  8792                           ;UI.c: 494: printf("2. SORT        <");
  8793  0040AA  0EEC               	movlw	low STR_34
  8794  0040AC  0100               	movlb	0	; () banked
  8795  0040AE  6F8E               	movwf	printf@f& (0+255),b
  8796  0040B0  0EFD               	movlw	high STR_34
  8797  0040B2  0100               	movlb	0	; () banked
  8798  0040B4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8799  0040B6  EC9C  F008         	call	_printf	;wreg free
  8800  0040BA  0012               	return		;funcret
  8801  0040BC                     __end_of_change_state_to_menu_12:
  8802                           	opt stack 0
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           intcon2	equ	0xFF1
  8811                           intcon3	equ	0xFF0
  8812                           postinc0	equ	0xFEE
  8813                           wreg	equ	0xFE8
  8814                           postdec1	equ	0xFE5
  8815                           fsr1l	equ	0xFE1
  8816                           indf2	equ	0xFDF
  8817                           postinc2	equ	0xFDE
  8818                           postdec2	equ	0xFDD
  8819                           fsr2h	equ	0xFDA
  8820                           fsr2l	equ	0xFD9
  8821                           status	equ	0xFD8
  8822                           
  8823 ;; *************** function ___awmod *****************
  8824 ;; Defined at:
  8825 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;  dividend        2    0[BANK0 ] int 
  8828 ;;  divisor         2    2[BANK0 ] int 
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;  sign            1    5[BANK0 ] unsigned char 
  8831 ;;  counter         1    4[BANK0 ] unsigned char 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  2    0[BANK0 ] int 
  8834 ;; Registers used:
  8835 ;;		wreg, status,2, status,0
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8841 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;Total ram usage:        6 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    7
  8848 ;; This function calls:
  8849 ;;		Nothing
  8850 ;; This function is called by:
  8851 ;;		_UI
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           	psect	text33
  8856  00368E                     __ptext33:
  8857                           	opt stack 0
  8858  00368E                     ___awmod:
  8859                           	opt stack 22
  8860                           
  8861                           ;incstack = 0
  8862  00368E  0E00               	movlw	0
  8863  003690  0100               	movlb	0	; () banked
  8864  003692  6F85               	movwf	___awmod@sign& (0+255),b
  8865                           
  8866                           ; BSR set to: 0
  8867  003694  0100               	movlb	0	; () banked
  8868  003696  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8869  003698  D008               	goto	l7142
  8870                           
  8871                           ; BSR set to: 0
  8872  00369A  0100               	movlb	0	; () banked
  8873  00369C  6D80               	negf	___awmod@dividend& (0+255),b
  8874  00369E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8875  0036A0  B0D8               	btfsc	status,0,c
  8876  0036A2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8877                           
  8878                           ; BSR set to: 0
  8879  0036A4  0E01               	movlw	1
  8880  0036A6  0100               	movlb	0	; () banked
  8881  0036A8  6F85               	movwf	___awmod@sign& (0+255),b
  8882  0036AA                     l7142:
  8883                           
  8884                           ; BSR set to: 0
  8885  0036AA  0100               	movlb	0	; () banked
  8886  0036AC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8887  0036AE  D005               	goto	l7146
  8888                           
  8889                           ; BSR set to: 0
  8890  0036B0  0100               	movlb	0	; () banked
  8891  0036B2  6D82               	negf	___awmod@divisor& (0+255),b
  8892  0036B4  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8893  0036B6  B0D8               	btfsc	status,0,c
  8894  0036B8  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8895  0036BA                     l7146:
  8896                           
  8897                           ; BSR set to: 0
  8898  0036BA  0100               	movlb	0	; () banked
  8899  0036BC  5182               	movf	___awmod@divisor& (0+255),w,b
  8900  0036BE  0100               	movlb	0	; () banked
  8901  0036C0  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8902  0036C2  B4D8               	btfsc	status,2,c
  8903  0036C4  D026               	goto	l7162
  8904                           
  8905                           ; BSR set to: 0
  8906  0036C6  0E01               	movlw	1
  8907  0036C8  0100               	movlb	0	; () banked
  8908  0036CA  6F84               	movwf	___awmod@counter& (0+255),b
  8909  0036CC  D006               	goto	l7152
  8910  0036CE                     l7150:
  8911                           
  8912                           ; BSR set to: 0
  8913  0036CE  0100               	movlb	0	; () banked
  8914  0036D0  90D8               	bcf	status,0,c
  8915  0036D2  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8916  0036D4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8917  0036D6  0100               	movlb	0	; () banked
  8918  0036D8  2B84               	incf	___awmod@counter& (0+255),f,b
  8919  0036DA                     l7152:
  8920                           
  8921                           ; BSR set to: 0
  8922  0036DA  0100               	movlb	0	; () banked
  8923  0036DC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8924  0036DE  D7F7               	goto	l7150
  8925  0036E0                     l7154:
  8926                           
  8927                           ; BSR set to: 0
  8928  0036E0  0100               	movlb	0	; () banked
  8929  0036E2  5182               	movf	___awmod@divisor& (0+255),w,b
  8930  0036E4  0100               	movlb	0	; () banked
  8931  0036E6  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8932  0036E8  0100               	movlb	0	; () banked
  8933  0036EA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8934  0036EC  0100               	movlb	0	; () banked
  8935  0036EE  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8936  0036F0  A0D8               	btfss	status,0,c
  8937  0036F2  D008               	goto	l7158
  8938                           
  8939                           ; BSR set to: 0
  8940  0036F4  0100               	movlb	0	; () banked
  8941  0036F6  5182               	movf	___awmod@divisor& (0+255),w,b
  8942  0036F8  0100               	movlb	0	; () banked
  8943  0036FA  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8944  0036FC  0100               	movlb	0	; () banked
  8945  0036FE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8946  003700  0100               	movlb	0	; () banked
  8947  003702  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8948  003704                     l7158:
  8949                           
  8950                           ; BSR set to: 0
  8951  003704  0100               	movlb	0	; () banked
  8952  003706  90D8               	bcf	status,0,c
  8953  003708  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8954  00370A  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8955                           
  8956                           ; BSR set to: 0
  8957  00370C  0100               	movlb	0	; () banked
  8958  00370E  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8959  003710  D7E7               	goto	l7154
  8960  003712                     l7162:
  8961                           
  8962                           ; BSR set to: 0
  8963  003712  0100               	movlb	0	; () banked
  8964  003714  5185               	movf	___awmod@sign& (0+255),w,b
  8965  003716  0100               	movlb	0	; () banked
  8966  003718  B4D8               	btfsc	status,2,c
  8967  00371A  D005               	goto	l7166
  8968                           
  8969                           ; BSR set to: 0
  8970  00371C  0100               	movlb	0	; () banked
  8971  00371E  6D80               	negf	___awmod@dividend& (0+255),b
  8972  003720  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8973  003722  B0D8               	btfsc	status,0,c
  8974  003724  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8975  003726                     l7166:
  8976                           
  8977                           ; BSR set to: 0
  8978  003726  C080  F080         	movff	___awmod@dividend,?___awmod
  8979  00372A  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8980  00372E  0012               	return	
  8981  003730                     __end_of___awmod:
  8982                           	opt stack 0
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           prodh	equ	0xFF4
  8988                           prodl	equ	0xFF3
  8989                           intcon	equ	0xFF2
  8990                           intcon2	equ	0xFF1
  8991                           intcon3	equ	0xFF0
  8992                           postinc0	equ	0xFEE
  8993                           wreg	equ	0xFE8
  8994                           postdec1	equ	0xFE5
  8995                           fsr1l	equ	0xFE1
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function ___awdiv *****************
  9004 ;; Defined at:
  9005 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  dividend        2    6[BANK0 ] int 
  9008 ;;  divisor         2    8[BANK0 ] int 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;  quotient        2   12[BANK0 ] int 
  9011 ;;  sign            1   11[BANK0 ] unsigned char 
  9012 ;;  counter         1   10[BANK0 ] unsigned char 
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  2    6[BANK0 ] int 
  9015 ;; Registers used:
  9016 ;;		wreg, status,2, status,0
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9022 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;Total ram usage:        8 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:    7
  9029 ;; This function calls:
  9030 ;;		Nothing
  9031 ;; This function is called by:
  9032 ;;		_UI
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text34
  9037  00346A                     __ptext34:
  9038                           	opt stack 0
  9039  00346A                     ___awdiv:
  9040                           	opt stack 22
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;incstack = 0
  9044  00346A  0E00               	movlw	0
  9045  00346C  0100               	movlb	0	; () banked
  9046  00346E  6F8B               	movwf	___awdiv@sign& (0+255),b
  9047                           
  9048                           ; BSR set to: 0
  9049  003470  0100               	movlb	0	; () banked
  9050  003472  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9051  003474  D008               	goto	l7098
  9052                           
  9053                           ; BSR set to: 0
  9054  003476  0100               	movlb	0	; () banked
  9055  003478  6D88               	negf	___awdiv@divisor& (0+255),b
  9056  00347A  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9057  00347C  B0D8               	btfsc	status,0,c
  9058  00347E  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9059                           
  9060                           ; BSR set to: 0
  9061  003480  0E01               	movlw	1
  9062  003482  0100               	movlb	0	; () banked
  9063  003484  6F8B               	movwf	___awdiv@sign& (0+255),b
  9064  003486                     l7098:
  9065                           
  9066                           ; BSR set to: 0
  9067  003486  0100               	movlb	0	; () banked
  9068  003488  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9069  00348A  D008               	goto	l7104
  9070                           
  9071                           ; BSR set to: 0
  9072  00348C  0100               	movlb	0	; () banked
  9073  00348E  6D86               	negf	___awdiv@dividend& (0+255),b
  9074  003490  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9075  003492  B0D8               	btfsc	status,0,c
  9076  003494  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9077                           
  9078                           ; BSR set to: 0
  9079  003496  0E01               	movlw	1
  9080  003498  0100               	movlb	0	; () banked
  9081  00349A  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9082  00349C                     l7104:
  9083                           
  9084                           ; BSR set to: 0
  9085  00349C  0E00               	movlw	0
  9086  00349E  0100               	movlb	0	; () banked
  9087  0034A0  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9088  0034A2  0E00               	movlw	0
  9089  0034A4  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9090                           
  9091                           ; BSR set to: 0
  9092  0034A6  0100               	movlb	0	; () banked
  9093  0034A8  5188               	movf	___awdiv@divisor& (0+255),w,b
  9094  0034AA  0100               	movlb	0	; () banked
  9095  0034AC  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9096  0034AE  B4D8               	btfsc	status,2,c
  9097  0034B0  D02C               	goto	l7126
  9098                           
  9099                           ; BSR set to: 0
  9100  0034B2  0E01               	movlw	1
  9101  0034B4  0100               	movlb	0	; () banked
  9102  0034B6  6F8A               	movwf	___awdiv@counter& (0+255),b
  9103  0034B8  D006               	goto	l7112
  9104  0034BA                     l7110:
  9105                           
  9106                           ; BSR set to: 0
  9107  0034BA  0100               	movlb	0	; () banked
  9108  0034BC  90D8               	bcf	status,0,c
  9109  0034BE  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9110  0034C0  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9111  0034C2  0100               	movlb	0	; () banked
  9112  0034C4  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9113  0034C6                     l7112:
  9114                           
  9115                           ; BSR set to: 0
  9116  0034C6  0100               	movlb	0	; () banked
  9117  0034C8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9118  0034CA  D7F7               	goto	l7110
  9119  0034CC                     l7114:
  9120                           
  9121                           ; BSR set to: 0
  9122  0034CC  0100               	movlb	0	; () banked
  9123  0034CE  90D8               	bcf	status,0,c
  9124  0034D0  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9125  0034D2  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9126                           
  9127                           ; BSR set to: 0
  9128  0034D4  0100               	movlb	0	; () banked
  9129  0034D6  5188               	movf	___awdiv@divisor& (0+255),w,b
  9130  0034D8  0100               	movlb	0	; () banked
  9131  0034DA  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9132  0034DC  0100               	movlb	0	; () banked
  9133  0034DE  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9134  0034E0  0100               	movlb	0	; () banked
  9135  0034E2  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9136  0034E4  A0D8               	btfss	status,0,c
  9137  0034E6  D00A               	goto	l7122
  9138                           
  9139                           ; BSR set to: 0
  9140  0034E8  0100               	movlb	0	; () banked
  9141  0034EA  5188               	movf	___awdiv@divisor& (0+255),w,b
  9142  0034EC  0100               	movlb	0	; () banked
  9143  0034EE  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9144  0034F0  0100               	movlb	0	; () banked
  9145  0034F2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9146  0034F4  0100               	movlb	0	; () banked
  9147  0034F6  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9148                           
  9149                           ; BSR set to: 0
  9150  0034F8  0100               	movlb	0	; () banked
  9151  0034FA  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9152  0034FC                     l7122:
  9153                           
  9154                           ; BSR set to: 0
  9155  0034FC  0100               	movlb	0	; () banked
  9156  0034FE  90D8               	bcf	status,0,c
  9157  003500  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9158  003502  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9159                           
  9160                           ; BSR set to: 0
  9161  003504  0100               	movlb	0	; () banked
  9162  003506  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9163  003508  D7E1               	goto	l7114
  9164  00350A                     l7126:
  9165                           
  9166                           ; BSR set to: 0
  9167  00350A  0100               	movlb	0	; () banked
  9168  00350C  518B               	movf	___awdiv@sign& (0+255),w,b
  9169  00350E  0100               	movlb	0	; () banked
  9170  003510  B4D8               	btfsc	status,2,c
  9171  003512  D005               	goto	l7130
  9172                           
  9173                           ; BSR set to: 0
  9174  003514  0100               	movlb	0	; () banked
  9175  003516  6D8C               	negf	___awdiv@quotient& (0+255),b
  9176  003518  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9177  00351A  B0D8               	btfsc	status,0,c
  9178  00351C  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9179  00351E                     l7130:
  9180                           
  9181                           ; BSR set to: 0
  9182  00351E  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9183  003522  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9184  003526  0012               	return	
  9185  003528                     __end_of___awdiv:
  9186                           	opt stack 0
  9187                           tblptru	equ	0xFF8
  9188                           tblptrh	equ	0xFF7
  9189                           tblptrl	equ	0xFF6
  9190                           tablat	equ	0xFF5
  9191                           prodh	equ	0xFF4
  9192                           prodl	equ	0xFF3
  9193                           intcon	equ	0xFF2
  9194                           intcon2	equ	0xFF1
  9195                           intcon3	equ	0xFF0
  9196                           postinc0	equ	0xFEE
  9197                           wreg	equ	0xFE8
  9198                           postdec1	equ	0xFE5
  9199                           fsr1l	equ	0xFE1
  9200                           indf2	equ	0xFDF
  9201                           postinc2	equ	0xFDE
  9202                           postdec2	equ	0xFDD
  9203                           fsr2h	equ	0xFDA
  9204                           fsr2l	equ	0xFD9
  9205                           status	equ	0xFD8
  9206                           
  9207 ;; *************** function _Test *****************
  9208 ;; Defined at:
  9209 ;;		line 28 in file "Test.c"
  9210 ;; Parameters:    Size  Location     Type
  9211 ;;		None
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;		None
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  1    wreg      void 
  9216 ;; Registers used:
  9217 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;Total ram usage:        2 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:   11
  9230 ;; This function calls:
  9231 ;;		_BothServos
  9232 ;;		_EEPROMTest
  9233 ;;		_PortTestA5
  9234 ;;		_PortTests
  9235 ;;		_SolenoidTestA5
  9236 ;;		_ToggleTestA5
  9237 ;;		_actuatorTest
  9238 ;;		_algorithmTest
  9239 ;;		_lcdInst
  9240 ;;		_printf
  9241 ;;		_sensorTest
  9242 ;; This function is called by:
  9243 ;;		_main
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text35
  9248  0030A6                     __ptext35:
  9249                           	opt stack 0
  9250  0030A6                     _Test:
  9251                           	opt stack 19
  9252  0030A6                     
  9253                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9254  0030A6  0E01               	movlw	1
  9255  0030A8  ECD4  F022         	call	_lcdInst
  9256  0030AC  0E68               	movlw	104
  9257  0030AE  0100               	movlb	0	; () banked
  9258  0030B0  6FC6               	movwf	??_Test& (0+255),b
  9259  0030B2  0EE4               	movlw	228
  9260  0030B4                     u7217:
  9261  0030B4  2EE8               	decfsz	wreg,f,c
  9262  0030B6  D7FE               	bra	u7217
  9263  0030B8  2FC6               	decfsz	??_Test& (0+255),f,b
  9264  0030BA  D7FC               	bra	u7217
  9265  0030BC  F000               	nop	
  9266  0030BE  0E80               	movlw	128
  9267  0030C0  ECD4  F022         	call	_lcdInst
  9268                           
  9269                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9270  0030C4  0E98               	movlw	low STR_68
  9271  0030C6  0100               	movlb	0	; () banked
  9272  0030C8  6F8E               	movwf	printf@f& (0+255),b
  9273  0030CA  0EFC               	movlw	high STR_68
  9274  0030CC  0100               	movlb	0	; () banked
  9275  0030CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9276  0030D0  EC9C  F008         	call	_printf	;wreg free
  9277                           
  9278                           ;Test.c: 33: lcdInst(0b11000000);;
  9279  0030D4  0EC0               	movlw	192
  9280  0030D6  ECD4  F022         	call	_lcdInst
  9281                           
  9282                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9283  0030DA  0ECB               	movlw	low STR_69
  9284  0030DC  0100               	movlb	0	; () banked
  9285  0030DE  6F8E               	movwf	printf@f& (0+255),b
  9286  0030E0  0EFC               	movlw	high STR_69
  9287  0030E2  0100               	movlb	0	; () banked
  9288  0030E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9289  0030E6  EC9C  F008         	call	_printf	;wreg free
  9290                           
  9291                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9292  0030EA  0E05               	movlw	5
  9293  0030EC  0100               	movlb	0	; () banked
  9294  0030EE  6FC7               	movwf	(??_Test+1)& (0+255),b
  9295  0030F0  0E0F               	movlw	15
  9296  0030F2  0100               	movlb	0	; () banked
  9297  0030F4  6FC6               	movwf	??_Test& (0+255),b
  9298  0030F6  0EF1               	movlw	241
  9299  0030F8                     u7227:
  9300  0030F8  2EE8               	decfsz	wreg,f,c
  9301  0030FA  D7FE               	bra	u7227
  9302  0030FC  2FC6               	decfsz	??_Test& (0+255),f,b
  9303  0030FE  D7FC               	bra	u7227
  9304  003100  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9305  003102  D7FA               	bra	u7227
  9306  003104                     l1021:
  9307  003104  A281               	btfss	3969,1,c	;volatile
  9308  003106  D7FE               	goto	l1021
  9309                           
  9310                           ;Test.c: 37: var = PORTB >> 4;
  9311  003108  CF81 F0C6          	movff	3969,??_Test	;volatile
  9312  00310C  0100               	movlb	0	; () banked
  9313  00310E  3BC6               	swapf	??_Test& (0+255),f,b
  9314  003110  0E0F               	movlw	15
  9315  003112  17C6               	andwf	??_Test& (0+255),f,b
  9316  003114  0100               	movlb	0	; () banked
  9317  003116  51C6               	movf	??_Test& (0+255),w,b
  9318  003118  0100               	movlb	0	; () banked
  9319  00311A  6FFA               	movwf	_var& (0+255),b
  9320  00311C  6BFB               	clrf	(_var+1)& (0+255),b
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;Test.c: 38: var++;
  9324  00311E  0100               	movlb	0	; () banked
  9325  003120  4BFA               	infsnz	_var& (0+255),f,b
  9326  003122  2BFB               	incf	(_var+1)& (0+255),f,b
  9327  003124                     l1024:
  9328  003124  A281               	btfss	3969,1,c	;volatile
  9329  003126  D01C               	goto	l7862
  9330  003128  D7FD               	goto	l1024
  9331  00312A                     l7842:
  9332                           
  9333                           ;Test.c: 42: algorithmTest();
  9334  00312A  ECCA  F019         	call	_algorithmTest	;wreg free
  9335                           
  9336                           ;Test.c: 43: break;
  9337  00312E  D7BB               	goto	l7824
  9338  003130                     l7844:
  9339                           
  9340                           ;Test.c: 45: sensorTest();
  9341  003130  ECB3  F013         	call	_sensorTest	;wreg free
  9342                           
  9343                           ;Test.c: 46: break;
  9344  003134  D7B8               	goto	l7824
  9345  003136                     l7846:
  9346                           
  9347                           ;Test.c: 48: actuatorTest();
  9348  003136  EC5C  F004         	call	_actuatorTest	;wreg free
  9349                           
  9350                           ;Test.c: 49: break;
  9351  00313A  D7B5               	goto	l7824
  9352  00313C                     l7848:
  9353                           
  9354                           ;Test.c: 51: PortTestA5();
  9355  00313C  EC99  F01E         	call	_PortTestA5	;wreg free
  9356                           
  9357                           ;Test.c: 52: break;
  9358  003140  D7B2               	goto	l7824
  9359  003142                     l7850:
  9360                           
  9361                           ;Test.c: 54: ToggleTestA5();
  9362  003142  EC29  F01C         	call	_ToggleTestA5	;wreg free
  9363                           
  9364                           ;Test.c: 55: break;
  9365  003146  D7AF               	goto	l7824
  9366  003148                     l7852:
  9367                           
  9368                           ;Test.c: 57: EEPROMTest();
  9369  003148  EC06  F023         	call	_EEPROMTest	;wreg free
  9370                           
  9371                           ;Test.c: 58: break;
  9372  00314C  D7AC               	goto	l7824
  9373  00314E                     l7854:
  9374                           
  9375                           ;Test.c: 60: SolenoidTestA5();
  9376  00314E  ECD7  F018         	call	_SolenoidTestA5	;wreg free
  9377                           
  9378                           ;Test.c: 61: break;
  9379  003152  D7A9               	goto	l7824
  9380  003154                     l7856:
  9381                           
  9382                           ;Test.c: 63: PortTests();
  9383  003154  ECB0  F01C         	call	_PortTests	;wreg free
  9384                           
  9385                           ;Test.c: 64: break;
  9386  003158  D7A6               	goto	l7824
  9387  00315A                     l7858:
  9388                           
  9389                           ;Test.c: 66: BothServos();
  9390  00315A  EC6F  F00C         	call	_BothServos	;wreg free
  9391                           
  9392                           ;Test.c: 70: }
  9393                           
  9394                           ;Test.c: 69: break;
  9395                           
  9396                           ;Test.c: 68: default:
  9397                           
  9398                           ;Test.c: 67: break;
  9399  00315E  D7A3               	goto	l7824
  9400  003160                     l7862:
  9401  003160  C0FA  F0C6         	movff	_var,??_Test
  9402  003164  C0FB  F0C7         	movff	_var+1,??_Test+1
  9403                           
  9404                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9405                           ; Switch size 1, requested type "space"
  9406                           ; Number of cases is 1, Range of values is 0 to 0
  9407                           ; switch strategies available:
  9408                           ; Name         Instructions Cycles
  9409                           ; simple_byte            4     3 (average)
  9410                           ;	Chosen strategy is simple_byte
  9411  003168  0100               	movlb	0	; () banked
  9412  00316A  51C7               	movf	(??_Test+1)& (0+255),w,b
  9413  00316C  0A00               	xorlw	0	; case 0
  9414  00316E  A4D8               	btfss	status,2,c
  9415  003170  D79A               	goto	l7824
  9416                           
  9417                           ; BSR set to: 0
  9418                           ; Switch size 1, requested type "space"
  9419                           ; Number of cases is 9, Range of values is 1 to 10
  9420                           ; switch strategies available:
  9421                           ; Name         Instructions Cycles
  9422                           ; simple_byte           28    15 (average)
  9423                           ;	Chosen strategy is simple_byte
  9424  003172  0100               	movlb	0	; () banked
  9425  003174  51C6               	movf	??_Test& (0+255),w,b
  9426  003176  0A01               	xorlw	1	; case 1
  9427  003178  B4D8               	btfsc	status,2,c
  9428  00317A  D7D7               	goto	l7842
  9429  00317C  0A03               	xorlw	3	; case 2
  9430  00317E  B4D8               	btfsc	status,2,c
  9431  003180  D7D7               	goto	l7844
  9432  003182  0A01               	xorlw	1	; case 3
  9433  003184  B4D8               	btfsc	status,2,c
  9434  003186  D7D7               	goto	l7846
  9435  003188  0A06               	xorlw	6	; case 5
  9436  00318A  B4D8               	btfsc	status,2,c
  9437  00318C  D7D7               	goto	l7848
  9438  00318E  0A03               	xorlw	3	; case 6
  9439  003190  B4D8               	btfsc	status,2,c
  9440  003192  D7D7               	goto	l7850
  9441  003194  0A01               	xorlw	1	; case 7
  9442  003196  B4D8               	btfsc	status,2,c
  9443  003198  D7D7               	goto	l7852
  9444  00319A  0A0F               	xorlw	15	; case 8
  9445  00319C  B4D8               	btfsc	status,2,c
  9446  00319E  D7D7               	goto	l7854
  9447  0031A0  0A01               	xorlw	1	; case 9
  9448  0031A2  B4D8               	btfsc	status,2,c
  9449  0031A4  D7D7               	goto	l7856
  9450  0031A6  0A03               	xorlw	3	; case 10
  9451  0031A8  B4D8               	btfsc	status,2,c
  9452  0031AA  D7D7               	goto	l7858
  9453                           
  9454                           ; BSR set to: 0
  9455                           
  9456                           ; BSR set to: 0
  9457  0031AC  D77C               	goto	l7824
  9458  0031AE                     __end_of_Test:
  9459                           	opt stack 0
  9460                           tblptru	equ	0xFF8
  9461                           tblptrh	equ	0xFF7
  9462                           tblptrl	equ	0xFF6
  9463                           tablat	equ	0xFF5
  9464                           prodh	equ	0xFF4
  9465                           prodl	equ	0xFF3
  9466                           intcon	equ	0xFF2
  9467                           intcon2	equ	0xFF1
  9468                           intcon3	equ	0xFF0
  9469                           postinc0	equ	0xFEE
  9470                           wreg	equ	0xFE8
  9471                           postdec1	equ	0xFE5
  9472                           fsr1l	equ	0xFE1
  9473                           indf2	equ	0xFDF
  9474                           postinc2	equ	0xFDE
  9475                           postdec2	equ	0xFDD
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480 ;; *************** function _sensorTest *****************
  9481 ;; Defined at:
  9482 ;;		line 118 in file "Test.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  res             2   45[BANK0 ] int 
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;Total ram usage:        4 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:   10
  9503 ;; This function calls:
  9504 ;;		_lcdInst
  9505 ;;		_printf
  9506 ;;		_readADC
  9507 ;;		_readMAG
  9508 ;; This function is called by:
  9509 ;;		_Test
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           	psect	text36
  9514  002766                     __ptext36:
  9515                           	opt stack 0
  9516  002766                     _sensorTest:
  9517                           	opt stack 19
  9518                           
  9519                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;incstack = 0
  9523  002766  0E01               	movlw	1
  9524  002768  ECD4  F022         	call	_lcdInst
  9525  00276C  0E68               	movlw	104
  9526  00276E  0100               	movlb	0	; () banked
  9527  002770  6FAB               	movwf	??_sensorTest& (0+255),b
  9528  002772  0EE4               	movlw	228
  9529  002774                     u7237:
  9530  002774  2EE8               	decfsz	wreg,f,c
  9531  002776  D7FE               	bra	u7237
  9532  002778  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9533  00277A  D7FC               	bra	u7237
  9534  00277C  F000               	nop	
  9535  00277E  0E80               	movlw	128
  9536  002780  ECD4  F022         	call	_lcdInst
  9537                           
  9538                           ;Test.c: 121: printf("SENSORS");
  9539  002784  0EAD               	movlw	low STR_77
  9540  002786  0100               	movlb	0	; () banked
  9541  002788  6F8E               	movwf	printf@f& (0+255),b
  9542  00278A  0EFF               	movlw	high STR_77
  9543  00278C  0100               	movlb	0	; () banked
  9544  00278E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9545  002790  EC9C  F008         	call	_printf	;wreg free
  9546                           
  9547                           ;Test.c: 122: lcdInst(0b11000000);;
  9548  002794  0EC0               	movlw	192
  9549  002796  ECD4  F022         	call	_lcdInst
  9550                           
  9551                           ;Test.c: 123: printf("PUSH TO START");
  9552  00279A  0E11               	movlw	low STR_71
  9553  00279C  0100               	movlb	0	; () banked
  9554  00279E  6F8E               	movwf	printf@f& (0+255),b
  9555  0027A0  0EFF               	movlw	high STR_71
  9556  0027A2  0100               	movlb	0	; () banked
  9557  0027A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9558  0027A6  EC9C  F008         	call	_printf	;wreg free
  9559                           
  9560                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9561  0027AA  0E05               	movlw	5
  9562  0027AC  0100               	movlb	0	; () banked
  9563  0027AE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9564  0027B0  0E0F               	movlw	15
  9565  0027B2  0100               	movlb	0	; () banked
  9566  0027B4  6FAB               	movwf	??_sensorTest& (0+255),b
  9567  0027B6  0EF1               	movlw	241
  9568  0027B8                     u7247:
  9569  0027B8  2EE8               	decfsz	wreg,f,c
  9570  0027BA  D7FE               	bra	u7247
  9571  0027BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9572  0027BE  D7FC               	bra	u7247
  9573  0027C0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9574  0027C2  D7FA               	bra	u7247
  9575  0027C4                     l1053:
  9576  0027C4  A281               	btfss	3969,1,c	;volatile
  9577  0027C6  D7FE               	goto	l1053
  9578  0027C8                     l1056:
  9579  0027C8  B281               	btfsc	3969,1,c	;volatile
  9580  0027CA  D7FE               	goto	l1056
  9581                           
  9582                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9583  0027CC  0E01               	movlw	1
  9584  0027CE  ECD4  F022         	call	_lcdInst
  9585  0027D2  0E68               	movlw	104
  9586  0027D4  0100               	movlb	0	; () banked
  9587  0027D6  6FAB               	movwf	??_sensorTest& (0+255),b
  9588  0027D8  0EE4               	movlw	228
  9589  0027DA                     u7257:
  9590  0027DA  2EE8               	decfsz	wreg,f,c
  9591  0027DC  D7FE               	bra	u7257
  9592  0027DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9593  0027E0  D7FC               	bra	u7257
  9594  0027E2  F000               	nop	
  9595  0027E4  0E80               	movlw	128
  9596  0027E6  ECD4  F022         	call	_lcdInst
  9597                           
  9598                           ;Test.c: 132: printf("TST: IR SNSR");
  9599  0027EA  0E3B               	movlw	low STR_79
  9600  0027EC  0100               	movlb	0	; () banked
  9601  0027EE  6F8E               	movwf	printf@f& (0+255),b
  9602  0027F0  0EFF               	movlw	high STR_79
  9603  0027F2  0100               	movlb	0	; () banked
  9604  0027F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9605  0027F6  EC9C  F008         	call	_printf	;wreg free
  9606                           
  9607                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9608  0027FA  0E05               	movlw	5
  9609  0027FC  0100               	movlb	0	; () banked
  9610  0027FE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9611  002800  0E0F               	movlw	15
  9612  002802  0100               	movlb	0	; () banked
  9613  002804  6FAB               	movwf	??_sensorTest& (0+255),b
  9614  002806  0EF1               	movlw	241
  9615  002808                     u7267:
  9616  002808  2EE8               	decfsz	wreg,f,c
  9617  00280A  D7FE               	bra	u7267
  9618  00280C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9619  00280E  D7FC               	bra	u7267
  9620  002810  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9621  002812  D7FA               	bra	u7267
  9622                           
  9623                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9624  002814  8A8B               	bsf	3979,5,c	;volatile
  9625                           
  9626                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9627  002816  D050               	goto	l6472
  9628  002818                     l6460:
  9629                           
  9630                           ;Test.c: 136: readADC(0);
  9631  002818  0E00               	movlw	0
  9632  00281A  ECC9  F021         	call	_readADC
  9633                           
  9634                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9635  00281E  50C3               	movf	4035,w,c	;volatile
  9636  002820  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9637  002824  0100               	movlb	0	; () banked
  9638  002826  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9639  002828  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9640  00282C  0100               	movlb	0	; () banked
  9641  00282E  6BAB               	clrf	??_sensorTest& (0+255),b
  9642  002830  0100               	movlb	0	; () banked
  9643  002832  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9644  002834  0100               	movlb	0	; () banked
  9645  002836  6FAD               	movwf	sensorTest@res& (0+255),b
  9646  002838  0100               	movlb	0	; () banked
  9647  00283A  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9648  00283C  0100               	movlb	0	; () banked
  9649  00283E  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9650                           
  9651                           ; BSR set to: 0
  9652                           ;Test.c: 138: IR_signal = (res > 900) ? 1 : 0;
  9653  002840  0100               	movlb	0	; () banked
  9654  002842  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9655  002844  D00A               	goto	u4920
  9656  002846  0E85               	movlw	133
  9657  002848  0100               	movlb	0	; () banked
  9658  00284A  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9659  00284C  0E03               	movlw	3
  9660  00284E  0100               	movlb	0	; () banked
  9661  002850  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9662  002852  A0D8               	btfss	status,0,c
  9663  002854  D002               	goto	u4920
  9664  002856  0E01               	movlw	1
  9665  002858  D001               	goto	u4930
  9666  00285A                     u4920:
  9667  00285A  0E00               	movlw	0
  9668  00285C                     u4930:
  9669  00285C  0100               	movlb	0	; () banked
  9670  00285E  6FDA               	movwf	_IR_signal& (0+255),b
  9671  002860  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9672                           
  9673                           ;Test.c: 140: lcdInst(0b10000000);;
  9674  002862  0E80               	movlw	128
  9675  002864  ECD4  F022         	call	_lcdInst
  9676                           
  9677                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9678  002868  0E60               	movlw	low STR_80
  9679  00286A  0100               	movlb	0	; () banked
  9680  00286C  6F8E               	movwf	printf@f& (0+255),b
  9681  00286E  0EFE               	movlw	high STR_80
  9682  002870  0100               	movlb	0	; () banked
  9683  002872  6F8F               	movwf	(printf@f+1)& (0+255),b
  9684  002874  C0DA  F090         	movff	_IR_signal,?_printf+2
  9685  002878  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9686  00287C  EC9C  F008         	call	_printf	;wreg free
  9687                           
  9688                           ;Test.c: 142: lcdInst(0b11000000);;
  9689  002880  0EC0               	movlw	192
  9690  002882  ECD4  F022         	call	_lcdInst
  9691                           
  9692                           ;Test.c: 143: printf("%d", res);
  9693  002886  0E7F               	movlw	low (STR_27+16)
  9694  002888  0100               	movlb	0	; () banked
  9695  00288A  6F8E               	movwf	printf@f& (0+255),b
  9696  00288C  0EFB               	movlw	high (STR_27+16)
  9697  00288E  0100               	movlb	0	; () banked
  9698  002890  6F8F               	movwf	(printf@f+1)& (0+255),b
  9699  002892  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9700  002896  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9701  00289A  EC9C  F008         	call	_printf	;wreg free
  9702                           
  9703                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9704  00289E  0E05               	movlw	5
  9705  0028A0  0100               	movlb	0	; () banked
  9706  0028A2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9707  0028A4  0E0F               	movlw	15
  9708  0028A6  0100               	movlb	0	; () banked
  9709  0028A8  6FAB               	movwf	??_sensorTest& (0+255),b
  9710  0028AA  0EF1               	movlw	241
  9711  0028AC                     u7277:
  9712  0028AC  2EE8               	decfsz	wreg,f,c
  9713  0028AE  D7FE               	bra	u7277
  9714  0028B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9715  0028B2  D7FC               	bra	u7277
  9716  0028B4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9717  0028B6  D7FA               	bra	u7277
  9718  0028B8                     l6472:
  9719  0028B8  A281               	btfss	3969,1,c	;volatile
  9720  0028BA  D7AE               	goto	l6460
  9721                           
  9722                           ;Test.c: 145: }
  9723                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9724  0028BC  9A8B               	bcf	3979,5,c	;volatile
  9725                           
  9726                           ;Test.c: 153: printf("TST: MAGNETISM");
  9727  0028BE  0E8D               	movlw	low STR_82
  9728  0028C0  0100               	movlb	0	; () banked
  9729  0028C2  6F8E               	movwf	printf@f& (0+255),b
  9730  0028C4  0EFE               	movlw	high STR_82
  9731  0028C6  0100               	movlb	0	; () banked
  9732  0028C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9733  0028CA  EC9C  F008         	call	_printf	;wreg free
  9734                           
  9735                           ;Test.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  9736  0028CE  0E05               	movlw	5
  9737  0028D0  0100               	movlb	0	; () banked
  9738  0028D2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9739  0028D4  0E0F               	movlw	15
  9740  0028D6  0100               	movlb	0	; () banked
  9741  0028D8  6FAB               	movwf	??_sensorTest& (0+255),b
  9742  0028DA  0EF1               	movlw	241
  9743  0028DC                     u7287:
  9744  0028DC  2EE8               	decfsz	wreg,f,c
  9745  0028DE  D7FE               	bra	u7287
  9746  0028E0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9747  0028E2  D7FC               	bra	u7287
  9748  0028E4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9749  0028E6  D7FA               	bra	u7287
  9750                           
  9751                           ;Test.c: 155: while(PORTBbits.RB1 == 0){
  9752  0028E8  D021               	goto	l6484
  9753  0028EA                     l6478:
  9754                           
  9755                           ;Test.c: 156: readMAG();
  9756  0028EA  ECBC  F01F         	call	_readMAG	;wreg free
  9757                           
  9758                           ;Test.c: 157: lcdInst(0b10000000);;
  9759  0028EE  0E80               	movlw	128
  9760  0028F0  ECD4  F022         	call	_lcdInst
  9761                           
  9762                           ;Test.c: 158: lcdInst(0b11000000);;
  9763  0028F4  0EC0               	movlw	192
  9764  0028F6  ECD4  F022         	call	_lcdInst
  9765                           
  9766                           ;Test.c: 159: printf("MAG_signal: %d ", MAG_signal);
  9767  0028FA  0E30               	movlw	low STR_83
  9768  0028FC  0100               	movlb	0	; () banked
  9769  0028FE  6F8E               	movwf	printf@f& (0+255),b
  9770  002900  0EFE               	movlw	high STR_83
  9771  002902  0100               	movlb	0	; () banked
  9772  002904  6F8F               	movwf	(printf@f+1)& (0+255),b
  9773  002906  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9774  00290A  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9775  00290E  EC9C  F008         	call	_printf	;wreg free
  9776                           
  9777                           ;Test.c: 160: _delay((unsigned long)((100)*(32000000/4000.0)));
  9778  002912  0E05               	movlw	5
  9779  002914  0100               	movlb	0	; () banked
  9780  002916  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9781  002918  0E0F               	movlw	15
  9782  00291A  0100               	movlb	0	; () banked
  9783  00291C  6FAB               	movwf	??_sensorTest& (0+255),b
  9784  00291E  0EF1               	movlw	241
  9785  002920                     u7297:
  9786  002920  2EE8               	decfsz	wreg,f,c
  9787  002922  D7FE               	bra	u7297
  9788  002924  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9789  002926  D7FC               	bra	u7297
  9790  002928  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9791  00292A  D7FA               	bra	u7297
  9792  00292C                     l6484:
  9793  00292C  B281               	btfsc	3969,1,c	;volatile
  9794  00292E  0012               	return	
  9795  002930  D7DC               	goto	l6478
  9796  002932                     __end_of_sensorTest:
  9797                           	opt stack 0
  9798                           tblptru	equ	0xFF8
  9799                           tblptrh	equ	0xFF7
  9800                           tblptrl	equ	0xFF6
  9801                           tablat	equ	0xFF5
  9802                           prodh	equ	0xFF4
  9803                           prodl	equ	0xFF3
  9804                           intcon	equ	0xFF2
  9805                           intcon2	equ	0xFF1
  9806                           intcon3	equ	0xFF0
  9807                           postinc0	equ	0xFEE
  9808                           wreg	equ	0xFE8
  9809                           postdec1	equ	0xFE5
  9810                           fsr1l	equ	0xFE1
  9811                           indf2	equ	0xFDF
  9812                           postinc2	equ	0xFDE
  9813                           postdec2	equ	0xFDD
  9814                           fsr2h	equ	0xFDA
  9815                           fsr2l	equ	0xFD9
  9816                           status	equ	0xFD8
  9817                           
  9818 ;; *************** function _readMAG *****************
  9819 ;; Defined at:
  9820 ;;		line 29 in file "ADCFunctionality.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;		None
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;  res             2    4[BANK0 ] int 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  1    wreg      void 
  9827 ;; Registers used:
  9828 ;;		wreg, status,2, status,0, cstack
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;Total ram usage:        4 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    8
  9841 ;; This function calls:
  9842 ;;		_readADC
  9843 ;; This function is called by:
  9844 ;;		_ID
  9845 ;;		_sensorTest
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           	psect	text37
  9850  003F78                     __ptext37:
  9851                           	opt stack 0
  9852  003F78                     _readMAG:
  9853                           	opt stack 20
  9854                           
  9855                           ;ADCFunctionality.c: 30: readADC(1);
  9856                           
  9857                           ;incstack = 0
  9858  003F78  0E01               	movlw	1
  9859  003F7A  ECC9  F021         	call	_readADC
  9860                           
  9861                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9862  003F7E  50C3               	movf	4035,w,c	;volatile
  9863  003F80  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9864  003F84  0100               	movlb	0	; () banked
  9865  003F86  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9866  003F88  C082  F083         	movff	??_readMAG,??_readMAG+1
  9867  003F8C  0100               	movlb	0	; () banked
  9868  003F8E  6B82               	clrf	??_readMAG& (0+255),b
  9869  003F90  0100               	movlb	0	; () banked
  9870  003F92  1182               	iorwf	??_readMAG& (0+255),w,b
  9871  003F94  0100               	movlb	0	; () banked
  9872  003F96  6F84               	movwf	readMAG@res& (0+255),b
  9873  003F98  0100               	movlb	0	; () banked
  9874  003F9A  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9875  003F9C  0100               	movlb	0	; () banked
  9876  003F9E  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9880  003FA0  0100               	movlb	0	; () banked
  9881  003FA2  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9882  003FA4  D008               	goto	u4351
  9883  003FA6  0100               	movlb	0	; () banked
  9884  003FA8  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9885  003FAA  E107               	bnz	u4350
  9886  003FAC  0E96               	movlw	150
  9887  003FAE  0100               	movlb	0	; () banked
  9888  003FB0  5D84               	subwf	readMAG@res& (0+255),w,b
  9889  003FB2  B0D8               	btfsc	status,0,c
  9890  003FB4  D002               	goto	u4350
  9891  003FB6                     u4351:
  9892  003FB6  0E01               	movlw	1
  9893  003FB8  D001               	goto	u4360
  9894  003FBA                     u4350:
  9895  003FBA  0E00               	movlw	0
  9896  003FBC                     u4360:
  9897  003FBC  0100               	movlb	0	; () banked
  9898  003FBE  6FDC               	movwf	_MAG_signal& (0+255),b
  9899  003FC0  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9900                           
  9901                           ; BSR set to: 0
  9902  003FC2  0012               	return		;funcret
  9903  003FC4                     __end_of_readMAG:
  9904                           	opt stack 0
  9905                           tblptru	equ	0xFF8
  9906                           tblptrh	equ	0xFF7
  9907                           tblptrl	equ	0xFF6
  9908                           tablat	equ	0xFF5
  9909                           prodh	equ	0xFF4
  9910                           prodl	equ	0xFF3
  9911                           intcon	equ	0xFF2
  9912                           intcon2	equ	0xFF1
  9913                           intcon3	equ	0xFF0
  9914                           postinc0	equ	0xFEE
  9915                           wreg	equ	0xFE8
  9916                           postdec1	equ	0xFE5
  9917                           fsr1l	equ	0xFE1
  9918                           indf2	equ	0xFDF
  9919                           postinc2	equ	0xFDE
  9920                           postdec2	equ	0xFDD
  9921                           fsr2h	equ	0xFDA
  9922                           fsr2l	equ	0xFD9
  9923                           status	equ	0xFD8
  9924                           
  9925 ;; *************** function _readADC *****************
  9926 ;; Defined at:
  9927 ;;		line 15 in file "ADCFunctionality.c"
  9928 ;; Parameters:    Size  Location     Type
  9929 ;;  channel         1    wreg     unsigned char 
  9930 ;; Auto vars:     Size  Location     Type
  9931 ;;  channel         1    1[BANK0 ] unsigned char 
  9932 ;; Return value:  Size  Location     Type
  9933 ;;                  1    wreg      void 
  9934 ;; Registers used:
  9935 ;;		wreg, status,2, status,0, cstack
  9936 ;; Tracked objects:
  9937 ;;		On entry : 0/0
  9938 ;;		On exit  : 0/0
  9939 ;;		Unchanged: 0/0
  9940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;Total ram usage:        2 bytes
  9946 ;; Hardware stack levels used:    1
  9947 ;; Hardware stack levels required when called:    7
  9948 ;; This function calls:
  9949 ;;		Nothing
  9950 ;; This function is called by:
  9951 ;;		_readIR
  9952 ;;		_readMAG
  9953 ;;		_sensorTest
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           	psect	text38
  9958  004392                     __ptext38:
  9959                           	opt stack 0
  9960  004392                     _readADC:
  9961                           	opt stack 19
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;incstack = 0
  9965                           ;readADC@channel stored from wreg
  9966  004392  0100               	movlb	0	; () banked
  9967  004394  6F81               	movwf	readADC@channel& (0+255),b
  9968                           
  9969                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9970  004396  0100               	movlb	0	; () banked
  9971  004398  4581               	rlncf	readADC@channel& (0+255),w,b
  9972  00439A  46E8               	rlncf	wreg,f,c
  9973  00439C  0BFC               	andlw	252
  9974  00439E  6EC2               	movwf	4034,c	;volatile
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9978  0043A0  80C2               	bsf	4034,0,c	;volatile
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9982  0043A2  82C2               	bsf	4034,1,c	;volatile
  9983                           
  9984                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9985  0043A4  D009               	goto	l5132
  9986  0043A6                     l5130:
  9987  0043A6  0E34               	movlw	52
  9988  0043A8  0100               	movlb	0	; () banked
  9989  0043AA  6F80               	movwf	??_readADC& (0+255),b
  9990  0043AC  0EF1               	movlw	241
  9991  0043AE                     u7307:
  9992  0043AE  2EE8               	decfsz	wreg,f,c
  9993  0043B0  D7FE               	bra	u7307
  9994  0043B2  2F80               	decfsz	??_readADC& (0+255),f,b
  9995  0043B4  D7FC               	bra	u7307
  9996  0043B6  D000               	nop2	
  9997  0043B8                     l5132:
  9998  0043B8  A2C2               	btfss	4034,1,c	;volatile
  9999  0043BA  0012               	return	
 10000  0043BC  D7F4               	goto	l5130
 10001  0043BE                     __end_of_readADC:
 10002                           	opt stack 0
 10003                           tblptru	equ	0xFF8
 10004                           tblptrh	equ	0xFF7
 10005                           tblptrl	equ	0xFF6
 10006                           tablat	equ	0xFF5
 10007                           prodh	equ	0xFF4
 10008                           prodl	equ	0xFF3
 10009                           intcon	equ	0xFF2
 10010                           intcon2	equ	0xFF1
 10011                           intcon3	equ	0xFF0
 10012                           postinc0	equ	0xFEE
 10013                           wreg	equ	0xFE8
 10014                           postdec1	equ	0xFE5
 10015                           fsr1l	equ	0xFE1
 10016                           indf2	equ	0xFDF
 10017                           postinc2	equ	0xFDE
 10018                           postdec2	equ	0xFDD
 10019                           fsr2h	equ	0xFDA
 10020                           fsr2l	equ	0xFD9
 10021                           status	equ	0xFD8
 10022                           
 10023 ;; *************** function _algorithmTest *****************
 10024 ;; Defined at:
 10025 ;;		line 74 in file "Test.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;		None
 10028 ;; Auto vars:     Size  Location     Type
 10029 ;;		None
 10030 ;; Return value:  Size  Location     Type
 10031 ;;                  1    wreg      void 
 10032 ;; Registers used:
 10033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10034 ;; Tracked objects:
 10035 ;;		On entry : 0/0
 10036 ;;		On exit  : 0/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10041 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;Total ram usage:        2 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; Hardware stack levels required when called:   10
 10046 ;; This function calls:
 10047 ;;		_lcdInst
 10048 ;;		_printf
 10049 ;; This function is called by:
 10050 ;;		_Test
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           	psect	text39
 10055  003394                     __ptext39:
 10056                           	opt stack 0
 10057  003394                     _algorithmTest:
 10058                           	opt stack 19
 10059                           
 10060                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10061                           
 10062                           ;incstack = 0
 10063  003394  0E01               	movlw	1
 10064  003396  ECD4  F022         	call	_lcdInst
 10065  00339A  0E68               	movlw	104
 10066  00339C  0100               	movlb	0	; () banked
 10067  00339E  6FAB               	movwf	??_algorithmTest& (0+255),b
 10068  0033A0  0EE4               	movlw	228
 10069  0033A2                     u7317:
 10070  0033A2  2EE8               	decfsz	wreg,f,c
 10071  0033A4  D7FE               	bra	u7317
 10072  0033A6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10073  0033A8  D7FC               	bra	u7317
 10074  0033AA  F000               	nop	
 10075  0033AC  0E80               	movlw	128
 10076  0033AE  ECD4  F022         	call	_lcdInst
 10077                           
 10078                           ;Test.c: 77: printf("ALGORITHM TEST");
 10079  0033B2  0ED8               	movlw	low STR_70
 10080  0033B4  0100               	movlb	0	; () banked
 10081  0033B6  6F8E               	movwf	printf@f& (0+255),b
 10082  0033B8  0EFE               	movlw	high STR_70
 10083  0033BA  0100               	movlb	0	; () banked
 10084  0033BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10085  0033BE  EC9C  F008         	call	_printf	;wreg free
 10086                           
 10087                           ;Test.c: 78: lcdInst(0b11000000);;
 10088  0033C2  0EC0               	movlw	192
 10089  0033C4  ECD4  F022         	call	_lcdInst
 10090                           
 10091                           ;Test.c: 79: printf("PUSH TO START");
 10092  0033C8  0E11               	movlw	low STR_71
 10093  0033CA  0100               	movlb	0	; () banked
 10094  0033CC  6F8E               	movwf	printf@f& (0+255),b
 10095  0033CE  0EFF               	movlw	high STR_71
 10096  0033D0  0100               	movlb	0	; () banked
 10097  0033D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10098  0033D4  EC9C  F008         	call	_printf	;wreg free
 10099                           
 10100                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10101  0033D8  0E05               	movlw	5
 10102  0033DA  0100               	movlb	0	; () banked
 10103  0033DC  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10104  0033DE  0E0F               	movlw	15
 10105  0033E0  0100               	movlb	0	; () banked
 10106  0033E2  6FAB               	movwf	??_algorithmTest& (0+255),b
 10107  0033E4  0EF1               	movlw	241
 10108  0033E6                     u7327:
 10109  0033E6  2EE8               	decfsz	wreg,f,c
 10110  0033E8  D7FE               	bra	u7327
 10111  0033EA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10112  0033EC  D7FC               	bra	u7327
 10113  0033EE  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10114  0033F0  D7FA               	bra	u7327
 10115  0033F2                     l1044:
 10116  0033F2  A281               	btfss	3969,1,c	;volatile
 10117  0033F4  D7FE               	goto	l1044
 10118  0033F6                     l1047:
 10119  0033F6  B281               	btfsc	3969,1,c	;volatile
 10120  0033F8  D7FE               	goto	l1047
 10121                           
 10122                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10123  0033FA  0E01               	movlw	1
 10124  0033FC  ECD4  F022         	call	_lcdInst
 10125  003400  0E68               	movlw	104
 10126  003402  0100               	movlb	0	; () banked
 10127  003404  6FAB               	movwf	??_algorithmTest& (0+255),b
 10128  003406  0EE4               	movlw	228
 10129  003408                     u7337:
 10130  003408  2EE8               	decfsz	wreg,f,c
 10131  00340A  D7FE               	bra	u7337
 10132  00340C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10133  00340E  D7FC               	bra	u7337
 10134  003410  F000               	nop	
 10135  003412  0E80               	movlw	128
 10136  003414  ECD4  F022         	call	_lcdInst
 10137                           
 10138                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10139  003418  0E87               	movlw	low STR_72
 10140  00341A  0100               	movlb	0	; () banked
 10141  00341C  6F8E               	movwf	printf@f& (0+255),b
 10142  00341E  0EFC               	movlw	high STR_72
 10143  003420  0100               	movlb	0	; () banked
 10144  003422  6F8F               	movwf	(printf@f+1)& (0+255),b
 10145  003424  EC9C  F008         	call	_printf	;wreg free
 10146                           
 10147                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10148  003428  0EF5               	movlw	low STR_73
 10149  00342A  0100               	movlb	0	; () banked
 10150  00342C  6F8E               	movwf	printf@f& (0+255),b
 10151  00342E  0EFE               	movlw	high STR_73
 10152  003430  0100               	movlb	0	; () banked
 10153  003432  6F8F               	movwf	(printf@f+1)& (0+255),b
 10154  003434  EC9C  F008         	call	_printf	;wreg free
 10155                           
 10156                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10157  003438  0E62               	movlw	low STR_74
 10158  00343A  0100               	movlb	0	; () banked
 10159  00343C  6F8E               	movwf	printf@f& (0+255),b
 10160  00343E  0EFF               	movlw	high STR_74
 10161  003440  0100               	movlb	0	; () banked
 10162  003442  6F8F               	movwf	(printf@f+1)& (0+255),b
 10163  003444  EC9C  F008         	call	_printf	;wreg free
 10164                           
 10165                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10166  003448  0EBA               	movlw	low STR_75
 10167  00344A  0100               	movlb	0	; () banked
 10168  00344C  6F8E               	movwf	printf@f& (0+255),b
 10169  00344E  0EFE               	movlw	high STR_75
 10170  003450  0100               	movlb	0	; () banked
 10171  003452  6F8F               	movwf	(printf@f+1)& (0+255),b
 10172  003454  EC9C  F008         	call	_printf	;wreg free
 10173                           
 10174                           ;Test.c: 115: printf("ALG5: NO CANS");
 10175  003458  0E03               	movlw	low STR_76
 10176  00345A  0100               	movlb	0	; () banked
 10177  00345C  6F8E               	movwf	printf@f& (0+255),b
 10178  00345E  0EFF               	movlw	high STR_76
 10179  003460  0100               	movlb	0	; () banked
 10180  003462  6F8F               	movwf	(printf@f+1)& (0+255),b
 10181  003464  EC9C  F008         	call	_printf	;wreg free
 10182  003468  0012               	return		;funcret
 10183  00346A                     __end_of_algorithmTest:
 10184                           	opt stack 0
 10185                           tblptru	equ	0xFF8
 10186                           tblptrh	equ	0xFF7
 10187                           tblptrl	equ	0xFF6
 10188                           tablat	equ	0xFF5
 10189                           prodh	equ	0xFF4
 10190                           prodl	equ	0xFF3
 10191                           intcon	equ	0xFF2
 10192                           intcon2	equ	0xFF1
 10193                           intcon3	equ	0xFF0
 10194                           postinc0	equ	0xFEE
 10195                           wreg	equ	0xFE8
 10196                           postdec1	equ	0xFE5
 10197                           fsr1l	equ	0xFE1
 10198                           indf2	equ	0xFDF
 10199                           postinc2	equ	0xFDE
 10200                           postdec2	equ	0xFDD
 10201                           fsr2h	equ	0xFDA
 10202                           fsr2l	equ	0xFD9
 10203                           status	equ	0xFD8
 10204                           
 10205 ;; *************** function _actuatorTest *****************
 10206 ;; Defined at:
 10207 ;;		line 164 in file "Test.c"
 10208 ;; Parameters:    Size  Location     Type
 10209 ;;		None
 10210 ;; Auto vars:     Size  Location     Type
 10211 ;;  i               1   45[BANK0 ] unsigned char 
 10212 ;;  i               1   67[BANK0 ] unsigned char 
 10213 ;;  i               1   66[BANK0 ] unsigned char 
 10214 ;;  i               1   65[BANK0 ] unsigned char 
 10215 ;;  i               1   64[BANK0 ] unsigned char 
 10216 ;;  i               1   63[BANK0 ] unsigned char 
 10217 ;;  i               1   62[BANK0 ] unsigned char 
 10218 ;;  i               1   61[BANK0 ] unsigned char 
 10219 ;;  i               1   60[BANK0 ] unsigned char 
 10220 ;;  i               1   59[BANK0 ] unsigned char 
 10221 ;;  i               1   58[BANK0 ] unsigned char 
 10222 ;;  i               1   57[BANK0 ] unsigned char 
 10223 ;;  i               1   56[BANK0 ] unsigned char 
 10224 ;;  i               1   55[BANK0 ] unsigned char 
 10225 ;;  i               1   54[BANK0 ] unsigned char 
 10226 ;;  i               1   53[BANK0 ] unsigned char 
 10227 ;;  i               1   52[BANK0 ] unsigned char 
 10228 ;;  i               1   51[BANK0 ] unsigned char 
 10229 ;;  i               1   50[BANK0 ] unsigned char 
 10230 ;;  i               1   49[BANK0 ] unsigned char 
 10231 ;;  i               1   48[BANK0 ] unsigned char 
 10232 ;;  i               1   47[BANK0 ] unsigned char 
 10233 ;;  i               1   46[BANK0 ] unsigned char 
 10234 ;;  i               2   68[BANK0 ] int 
 10235 ;; Return value:  Size  Location     Type
 10236 ;;                  1    wreg      void 
 10237 ;; Registers used:
 10238 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10239 ;; Tracked objects:
 10240 ;;		On entry : 0/0
 10241 ;;		On exit  : 0/0
 10242 ;;		Unchanged: 0/0
 10243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10245 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;Total ram usage:       27 bytes
 10249 ;; Hardware stack levels used:    1
 10250 ;; Hardware stack levels required when called:   10
 10251 ;; This function calls:
 10252 ;;		_lcdInst
 10253 ;;		_printf
 10254 ;;		_updateServoPosition
 10255 ;; This function is called by:
 10256 ;;		_Test
 10257 ;; This function uses a non-reentrant model
 10258 ;;
 10259                           
 10260                           	psect	text40
 10261  0008B8                     __ptext40:
 10262                           	opt stack 0
 10263  0008B8                     _actuatorTest:
 10264                           	opt stack 19
 10265                           
 10266                           ;Test.c: 166: int i = 0;
 10267                           
 10268                           ;incstack = 0
 10269  0008B8  0E00               	movlw	0
 10270  0008BA  0100               	movlb	0	; () banked
 10271  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10272  0008BE  0E00               	movlw	0
 10273  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;Test.c: 168: (INTCONbits.GIE = 1);
 10277  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;Test.c: 169: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10281  0008C4  0E01               	movlw	1
 10282  0008C6  ECD4  F022         	call	_lcdInst
 10283  0008CA  0E68               	movlw	104
 10284  0008CC  0100               	movlb	0	; () banked
 10285  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10286  0008D0  0EE4               	movlw	228
 10287  0008D2                     u7347:
 10288  0008D2  2EE8               	decfsz	wreg,f,c
 10289  0008D4  D7FE               	bra	u7347
 10290  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10291  0008D8  D7FC               	bra	u7347
 10292  0008DA  F000               	nop	
 10293  0008DC  0E80               	movlw	128
 10294  0008DE  ECD4  F022         	call	_lcdInst
 10295                           
 10296                           ;Test.c: 170: printf("ACTUATORS");
 10297  0008E2  0E99               	movlw	low STR_84
 10298  0008E4  0100               	movlb	0	; () banked
 10299  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10300  0008E8  0EFF               	movlw	high STR_84
 10301  0008EA  0100               	movlb	0	; () banked
 10302  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10303  0008EE  EC9C  F008         	call	_printf	;wreg free
 10304                           
 10305                           ;Test.c: 171: lcdInst(0b11000000);;
 10306  0008F2  0EC0               	movlw	192
 10307  0008F4  ECD4  F022         	call	_lcdInst
 10308                           
 10309                           ;Test.c: 172: printf("PUSH TO START");
 10310  0008F8  0E11               	movlw	low STR_71
 10311  0008FA  0100               	movlb	0	; () banked
 10312  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10313  0008FE  0EFF               	movlw	high STR_71
 10314  000900  0100               	movlb	0	; () banked
 10315  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10316  000904  EC9C  F008         	call	_printf	;wreg free
 10317                           
 10318                           ;Test.c: 173: _delay((unsigned long)((100)*(32000000/4000.0)));
 10319  000908  0E05               	movlw	5
 10320  00090A  0100               	movlb	0	; () banked
 10321  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10322  00090E  0E0F               	movlw	15
 10323  000910  0100               	movlb	0	; () banked
 10324  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10325  000914  0EF1               	movlw	241
 10326  000916                     u7357:
 10327  000916  2EE8               	decfsz	wreg,f,c
 10328  000918  D7FE               	bra	u7357
 10329  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10330  00091C  D7FC               	bra	u7357
 10331  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10332  000920  D7FA               	bra	u7357
 10333  000922                     l1068:
 10334  000922  A281               	btfss	3969,1,c	;volatile
 10335  000924  D7FE               	goto	l1068
 10336  000926                     l1071:
 10337  000926  B281               	btfsc	3969,1,c	;volatile
 10338  000928  D7FE               	goto	l1071
 10339                           
 10340                           ;Test.c: 176: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10341  00092A  0E01               	movlw	1
 10342  00092C  ECD4  F022         	call	_lcdInst
 10343  000930  0E68               	movlw	104
 10344  000932  0100               	movlb	0	; () banked
 10345  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10346  000936  0EE4               	movlw	228
 10347  000938                     u7367:
 10348  000938  2EE8               	decfsz	wreg,f,c
 10349  00093A  D7FE               	bra	u7367
 10350  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10351  00093E  D7FC               	bra	u7367
 10352  000940  F000               	nop	
 10353  000942  0E80               	movlw	128
 10354  000944  ECD4  F022         	call	_lcdInst
 10355                           
 10356                           ;Test.c: 181: printf("TST: DC MOTORS");
 10357  000948  0EC9               	movlw	low STR_86
 10358  00094A  0100               	movlb	0	; () banked
 10359  00094C  6F8E               	movwf	printf@f& (0+255),b
 10360  00094E  0EFE               	movlw	high STR_86
 10361  000950  0100               	movlb	0	; () banked
 10362  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10363  000954  EC9C  F008         	call	_printf	;wreg free
 10364                           
 10365                           ;Test.c: 182: lcdInst(0b11000000);;
 10366  000958  0EC0               	movlw	192
 10367  00095A  ECD4  F022         	call	_lcdInst
 10368                           
 10369                           ;Test.c: 183: printf("PIN RA5 HIGH.");
 10370  00095E  0EE7               	movlw	low STR_87
 10371  000960  0100               	movlb	0	; () banked
 10372  000962  6F8E               	movwf	printf@f& (0+255),b
 10373  000964  0EFE               	movlw	high STR_87
 10374  000966  0100               	movlb	0	; () banked
 10375  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10376  00096A  EC9C  F008         	call	_printf	;wreg free
 10377                           
 10378                           ;Test.c: 184: LATAbits.LATA5 = 1;
 10379  00096E  8A89               	bsf	3977,5,c	;volatile
 10380                           
 10381                           ;Test.c: 185: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10382  000970  0E00               	movlw	0
 10383  000972  0100               	movlb	0	; () banked
 10384  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10385  000976  0E00               	movlw	0
 10386  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10387                           
 10388                           ; BSR set to: 0
 10389  00097A  0100               	movlb	0	; () banked
 10390  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10391  00097E  D008               	goto	l6524
 10392  000980  0100               	movlb	0	; () banked
 10393  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10394  000984  E123               	bnz	l1075
 10395  000986  0E05               	movlw	5
 10396  000988  0100               	movlb	0	; () banked
 10397  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10398  00098C  B0D8               	btfsc	status,0,c
 10399  00098E  D01E               	goto	l1075
 10400  000990                     l6524:
 10401                           
 10402                           ; BSR set to: 0
 10403  000990  0E00               	movlw	0
 10404  000992  0100               	movlb	0	; () banked
 10405  000994  6FAD               	movwf	actuatorTest@i_1582& (0+255),b
 10406  000996                     l6526:
 10407                           
 10408                           ; BSR set to: 0
 10409  000996  0E63               	movlw	99
 10410  000998  0100               	movlb	0	; () banked
 10411  00099A  65AD               	cpfsgt	actuatorTest@i_1582& (0+255),b
 10412  00099C  D001               	goto	l6530
 10413  00099E  D00C               	goto	l6534
 10414  0009A0                     l6530:
 10415                           
 10416                           ; BSR set to: 0
 10417  0009A0  0E68               	movlw	104
 10418  0009A2  0100               	movlb	0	; () banked
 10419  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10420  0009A6  0EE4               	movlw	228
 10421  0009A8                     u7377:
 10422  0009A8  2EE8               	decfsz	wreg,f,c
 10423  0009AA  D7FE               	bra	u7377
 10424  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10425  0009AE  D7FC               	bra	u7377
 10426  0009B0  F000               	nop	
 10427  0009B2  0100               	movlb	0	; () banked
 10428  0009B4  2BAD               	incf	actuatorTest@i_1582& (0+255),f,b
 10429  0009B6  D7EF               	goto	l6526
 10430  0009B8                     l6534:
 10431                           
 10432                           ; BSR set to: 0
 10433  0009B8  0100               	movlb	0	; () banked
 10434  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10435  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10436                           
 10437                           ; BSR set to: 0
 10438  0009BE  0100               	movlb	0	; () banked
 10439  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10440  0009C2  D7E6               	goto	l6524
 10441  0009C4  0100               	movlb	0	; () banked
 10442  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10443  0009C8  E101               	bnz	u5010
 10444  0009CA  D7DD               	goto	L7
 10445  0009CC                     u5010:
 10446  0009CC                     l1075:
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;Test.c: 186: LATAbits.LATA5 = 0;
 10450  0009CC  9A89               	bcf	3977,5,c	;volatile
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10454  0009CE  0E01               	movlw	1
 10455  0009D0  ECD4  F022         	call	_lcdInst
 10456  0009D4  0E68               	movlw	104
 10457  0009D6  0100               	movlb	0	; () banked
 10458  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10459  0009DA  0EE4               	movlw	228
 10460  0009DC                     u7387:
 10461  0009DC  2EE8               	decfsz	wreg,f,c
 10462  0009DE  D7FE               	bra	u7387
 10463  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10464  0009E2  D7FC               	bra	u7387
 10465  0009E4  F000               	nop	
 10466  0009E6  0E80               	movlw	128
 10467  0009E8  ECD4  F022         	call	_lcdInst
 10468                           
 10469                           ;Test.c: 193: printf("TST: COND SOLN'D");
 10470  0009EC  0EA9               	movlw	low STR_88
 10471  0009EE  0100               	movlb	0	; () banked
 10472  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10473  0009F2  0EFC               	movlw	high STR_88
 10474  0009F4  0100               	movlb	0	; () banked
 10475  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10476  0009F8  EC9C  F008         	call	_printf	;wreg free
 10477                           
 10478                           ;Test.c: 194: lcdInst(0b11000000);;
 10479  0009FC  0EC0               	movlw	192
 10480  0009FE  ECD4  F022         	call	_lcdInst
 10481                           
 10482                           ;Test.c: 195: printf("PIN RA3...");
 10483  000A02  0E6E               	movlw	low STR_89
 10484  000A04  0100               	movlb	0	; () banked
 10485  000A06  6F8E               	movwf	printf@f& (0+255),b
 10486  000A08  0EFF               	movlw	high STR_89
 10487  000A0A  0100               	movlb	0	; () banked
 10488  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10489  000A0E  EC9C  F008         	call	_printf	;wreg free
 10490                           
 10491                           ;Test.c: 196: for(i=0;i<5;i++){
 10492  000A12  0E00               	movlw	0
 10493  000A14  0100               	movlb	0	; () banked
 10494  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10495  000A18  0E00               	movlw	0
 10496  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10497                           
 10498                           ; BSR set to: 0
 10499  000A1C  0100               	movlb	0	; () banked
 10500  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10501  000A20  D008               	goto	l1078
 10502  000A22  0100               	movlb	0	; () banked
 10503  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10504  000A26  E12C               	bnz	l1079
 10505  000A28  0E05               	movlw	5
 10506  000A2A  0100               	movlb	0	; () banked
 10507  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10508  000A2E  B0D8               	btfsc	status,0,c
 10509  000A30  D027               	goto	l1079
 10510  000A32                     l1078:
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;Test.c: 197: LATAbits.LATA3 = 1;
 10514  000A32  8689               	bsf	3977,3,c	;volatile
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;Test.c: 198: _delay((unsigned long)((300)*(32000000/4000.0)));
 10518  000A34  0E0D               	movlw	13
 10519  000A36  0100               	movlb	0	; () banked
 10520  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10521  000A3A  0E2D               	movlw	45
 10522  000A3C  0100               	movlb	0	; () banked
 10523  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10524  000A40  0ED7               	movlw	215
 10525  000A42                     u7397:
 10526  000A42  2EE8               	decfsz	wreg,f,c
 10527  000A44  D7FE               	bra	u7397
 10528  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10529  000A48  D7FC               	bra	u7397
 10530  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10531  000A4C  D7FA               	bra	u7397
 10532  000A4E  D000               	nop2	
 10533                           
 10534                           ;Test.c: 199: LATAbits.LATA3 = ~1;
 10535  000A50  9689               	bcf	3977,3,c	;volatile
 10536                           
 10537                           ;Test.c: 200: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10538  000A52  0E1D               	movlw	29
 10539  000A54  0100               	movlb	0	; () banked
 10540  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10541  000A58  0E69               	movlw	105
 10542  000A5A  0100               	movlb	0	; () banked
 10543  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10544  000A5E  0EA5               	movlw	165
 10545  000A60                     u7407:
 10546  000A60  2EE8               	decfsz	wreg,f,c
 10547  000A62  D7FE               	bra	u7407
 10548  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10549  000A66  D7FC               	bra	u7407
 10550  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10551  000A6A  D7FA               	bra	u7407
 10552  000A6C  0100               	movlb	0	; () banked
 10553  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10554  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10555  000A72  0100               	movlb	0	; () banked
 10556  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10557  000A76  D7DD               	goto	l1078
 10558  000A78  0100               	movlb	0	; () banked
 10559  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10560  000A7C  E101               	bnz	u5030
 10561  000A7E  D7D4               	goto	L8
 10562  000A80                     u5030:
 10563  000A80                     l1079:
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;Test.c: 201: }
 10567                           ;Test.c: 202: LATAbits.LATA3 = ~1;
 10568  000A80  9689               	bcf	3977,3,c	;volatile
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;Test.c: 203: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10572  000A82  0E01               	movlw	1
 10573  000A84  ECD4  F022         	call	_lcdInst
 10574  000A88  0E68               	movlw	104
 10575  000A8A  0100               	movlb	0	; () banked
 10576  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10577  000A8E  0EE4               	movlw	228
 10578  000A90                     u7417:
 10579  000A90  2EE8               	decfsz	wreg,f,c
 10580  000A92  D7FE               	bra	u7417
 10581  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10582  000A96  D7FC               	bra	u7417
 10583  000A98  F000               	nop	
 10584  000A9A  0E80               	movlw	128
 10585  000A9C  ECD4  F022         	call	_lcdInst
 10586                           
 10587                           ;Test.c: 209: printf("TST: PUSH SOLN'D");
 10588  000AA0  0EBA               	movlw	low STR_90
 10589  000AA2  0100               	movlb	0	; () banked
 10590  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10591  000AA6  0EFC               	movlw	high STR_90
 10592  000AA8  0100               	movlb	0	; () banked
 10593  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10594  000AAC  EC9C  F008         	call	_printf	;wreg free
 10595                           
 10596                           ;Test.c: 210: lcdInst(0b11000000);;
 10597  000AB0  0EC0               	movlw	192
 10598  000AB2  ECD4  F022         	call	_lcdInst
 10599                           
 10600                           ;Test.c: 211: printf("PIN RA4...");
 10601  000AB6  0E79               	movlw	low STR_91
 10602  000AB8  0100               	movlb	0	; () banked
 10603  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10604  000ABC  0EFF               	movlw	high STR_91
 10605  000ABE  0100               	movlb	0	; () banked
 10606  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10607  000AC2  EC9C  F008         	call	_printf	;wreg free
 10608                           
 10609                           ;Test.c: 212: for(i=0;i<5;i++){
 10610  000AC6  0E00               	movlw	0
 10611  000AC8  0100               	movlb	0	; () banked
 10612  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10613  000ACC  0E00               	movlw	0
 10614  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10615                           
 10616                           ; BSR set to: 0
 10617  000AD0  0100               	movlb	0	; () banked
 10618  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10619  000AD4  D008               	goto	l1080
 10620  000AD6  0100               	movlb	0	; () banked
 10621  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10622  000ADA  E12C               	bnz	l1081
 10623  000ADC  0E05               	movlw	5
 10624  000ADE  0100               	movlb	0	; () banked
 10625  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10626  000AE2  B0D8               	btfsc	status,0,c
 10627  000AE4  D027               	goto	l1081
 10628  000AE6                     l1080:
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;Test.c: 213: LATAbits.LATA4 = 1;
 10632  000AE6  8889               	bsf	3977,4,c	;volatile
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;Test.c: 214: _delay((unsigned long)((300)*(32000000/4000.0)));
 10636  000AE8  0E0D               	movlw	13
 10637  000AEA  0100               	movlb	0	; () banked
 10638  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10639  000AEE  0E2D               	movlw	45
 10640  000AF0  0100               	movlb	0	; () banked
 10641  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10642  000AF4  0ED7               	movlw	215
 10643  000AF6                     u7427:
 10644  000AF6  2EE8               	decfsz	wreg,f,c
 10645  000AF8  D7FE               	bra	u7427
 10646  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10647  000AFC  D7FC               	bra	u7427
 10648  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10649  000B00  D7FA               	bra	u7427
 10650  000B02  D000               	nop2	
 10651                           
 10652                           ;Test.c: 215: LATAbits.LATA4 = ~1;
 10653  000B04  9889               	bcf	3977,4,c	;volatile
 10654                           
 10655                           ;Test.c: 216: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10656  000B06  0E1D               	movlw	29
 10657  000B08  0100               	movlb	0	; () banked
 10658  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10659  000B0C  0E69               	movlw	105
 10660  000B0E  0100               	movlb	0	; () banked
 10661  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 10662  000B12  0EA5               	movlw	165
 10663  000B14                     u7437:
 10664  000B14  2EE8               	decfsz	wreg,f,c
 10665  000B16  D7FE               	bra	u7437
 10666  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10667  000B1A  D7FC               	bra	u7437
 10668  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10669  000B1E  D7FA               	bra	u7437
 10670  000B20  0100               	movlb	0	; () banked
 10671  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10672  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10673  000B26  0100               	movlb	0	; () banked
 10674  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10675  000B2A  D7DD               	goto	l1080
 10676  000B2C  0100               	movlb	0	; () banked
 10677  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10678  000B30  E101               	bnz	u5050
 10679  000B32  D7D4               	goto	L9
 10680  000B34                     u5050:
 10681  000B34                     l1081:
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;Test.c: 217: }
 10685                           ;Test.c: 218: LATAbits.LATA4 = ~1;
 10686  000B34  9889               	bcf	3977,4,c	;volatile
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;Test.c: 219: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10690  000B36  0E01               	movlw	1
 10691  000B38  ECD4  F022         	call	_lcdInst
 10692  000B3C  0E68               	movlw	104
 10693  000B3E  0100               	movlb	0	; () banked
 10694  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10695  000B42  0EE4               	movlw	228
 10696  000B44                     u7447:
 10697  000B44  2EE8               	decfsz	wreg,f,c
 10698  000B46  D7FE               	bra	u7447
 10699  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10700  000B4A  D7FC               	bra	u7447
 10701  000B4C  F000               	nop	
 10702  000B4E  0E80               	movlw	128
 10703  000B50  ECD4  F022         	call	_lcdInst
 10704                           
 10705                           ;Test.c: 222: machine_state = Sorting_state;
 10706  000B54  0E01               	movlw	1
 10707  000B56  0100               	movlb	0	; () banked
 10708  000B58  6FFC               	movwf	_machine_state& (0+255),b
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;Test.c: 223: was_low_1 = 0;
 10712  000B5A  0E00               	movlw	0
 10713  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 10714  000B5E  0E00               	movlw	0
 10715  000B60  6E79               	movwf	_was_low_1,c	;volatile
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;Test.c: 224: was_low_1 = 0;
 10719  000B62  0E00               	movlw	0
 10720  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 10721  000B66  0E00               	movlw	0
 10722  000B68  6E79               	movwf	_was_low_1,c	;volatile
 10723                           
 10724                           ; BSR set to: 0
 10725                           ;Test.c: 231: printf("TST: PAN SERVO");
 10726  000B6A  0EAB               	movlw	low STR_92
 10727  000B6C  0100               	movlb	0	; () banked
 10728  000B6E  6F8E               	movwf	printf@f& (0+255),b
 10729  000B70  0EFE               	movlw	high STR_92
 10730  000B72  0100               	movlb	0	; () banked
 10731  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 10732  000B76  EC9C  F008         	call	_printf	;wreg free
 10733                           
 10734                           ;Test.c: 232: lcdInst(0b11000000);;
 10735  000B7A  0EC0               	movlw	192
 10736  000B7C  ECD4  F022         	call	_lcdInst
 10737                           
 10738                           ;Test.c: 233: printf("MIDDLE -- 2s    ");
 10739  000B80  0E32               	movlw	low STR_93
 10740  000B82  0100               	movlb	0	; () banked
 10741  000B84  6F8E               	movwf	printf@f& (0+255),b
 10742  000B86  0EFC               	movlw	high STR_93
 10743  000B88  0100               	movlb	0	; () banked
 10744  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10745  000B8C  EC9C  F008         	call	_printf	;wreg free
 10746                           
 10747                           ;Test.c: 234: updateServoPosition(1200, 1);
 10748  000B90  0E04               	movlw	4
 10749  000B92  0100               	movlb	0	; () banked
 10750  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10751  000B96  0EB0               	movlw	176
 10752  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10753  000B9A  0E00               	movlw	0
 10754  000B9C  0100               	movlb	0	; () banked
 10755  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10756  000BA0  0E01               	movlw	1
 10757  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10758  000BA4  EC2E  F01D         	call	_updateServoPosition	;wreg free
 10759                           
 10760                           ;Test.c: 235: TMR1ON = 1;
 10761  000BA8  80CD               	bsf	4045,0,c	;volatile
 10762                           
 10763                           ;Test.c: 236: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10764  000BAA  0E00               	movlw	0
 10765  000BAC  0100               	movlb	0	; () banked
 10766  000BAE  6FAE               	movwf	actuatorTest@i_1589& (0+255),b
 10767  000BB0                     l6610:
 10768                           
 10769                           ; BSR set to: 0
 10770  000BB0  0E63               	movlw	99
 10771  000BB2  0100               	movlb	0	; () banked
 10772  000BB4  65AE               	cpfsgt	actuatorTest@i_1589& (0+255),b
 10773  000BB6  D001               	goto	l6614
 10774  000BB8  D00C               	goto	l6618
 10775  000BBA                     l6614:
 10776                           
 10777                           ; BSR set to: 0
 10778  000BBA  0E68               	movlw	104
 10779  000BBC  0100               	movlb	0	; () banked
 10780  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10781  000BC0  0EE4               	movlw	228
 10782  000BC2                     u7457:
 10783  000BC2  2EE8               	decfsz	wreg,f,c
 10784  000BC4  D7FE               	bra	u7457
 10785  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10786  000BC8  D7FC               	bra	u7457
 10787  000BCA  F000               	nop	
 10788  000BCC  0100               	movlb	0	; () banked
 10789  000BCE  2BAE               	incf	actuatorTest@i_1589& (0+255),f,b
 10790  000BD0  D7EF               	goto	l6610
 10791  000BD2                     l6618:
 10792                           
 10793                           ; BSR set to: 0
 10794  000BD2  0E00               	movlw	0
 10795  000BD4  0100               	movlb	0	; () banked
 10796  000BD6  6FAF               	movwf	actuatorTest@i_1590& (0+255),b
 10797  000BD8                     l6620:
 10798                           
 10799                           ; BSR set to: 0
 10800  000BD8  0E63               	movlw	99
 10801  000BDA  0100               	movlb	0	; () banked
 10802  000BDC  65AF               	cpfsgt	actuatorTest@i_1590& (0+255),b
 10803  000BDE  D001               	goto	l6624
 10804  000BE0  D00C               	goto	l6628
 10805  000BE2                     l6624:
 10806                           
 10807                           ; BSR set to: 0
 10808  000BE2  0E68               	movlw	104
 10809  000BE4  0100               	movlb	0	; () banked
 10810  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10811  000BE8  0EE4               	movlw	228
 10812  000BEA                     u7467:
 10813  000BEA  2EE8               	decfsz	wreg,f,c
 10814  000BEC  D7FE               	bra	u7467
 10815  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10816  000BF0  D7FC               	bra	u7467
 10817  000BF2  F000               	nop	
 10818  000BF4  0100               	movlb	0	; () banked
 10819  000BF6  2BAF               	incf	actuatorTest@i_1590& (0+255),f,b
 10820  000BF8  D7EF               	goto	l6620
 10821  000BFA                     l6628:
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;Test.c: 238: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10825  000BFA  0E80               	movlw	128
 10826  000BFC  ECD4  F022         	call	_lcdInst
 10827  000C00  0EC0               	movlw	192
 10828  000C02  ECD4  F022         	call	_lcdInst
 10829                           
 10830                           ;Test.c: 239: printf("RIGHT -- 2s     ");
 10831  000C06  0E21               	movlw	low STR_94
 10832  000C08  0100               	movlb	0	; () banked
 10833  000C0A  6F8E               	movwf	printf@f& (0+255),b
 10834  000C0C  0EFC               	movlw	high STR_94
 10835  000C0E  0100               	movlb	0	; () banked
 10836  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 10837  000C12  EC9C  F008         	call	_printf	;wreg free
 10838                           
 10839                           ;Test.c: 240: updateServoPosition(500, 1);
 10840  000C16  0E01               	movlw	1
 10841  000C18  0100               	movlb	0	; () banked
 10842  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10843  000C1C  0EF4               	movlw	244
 10844  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10845  000C20  0E00               	movlw	0
 10846  000C22  0100               	movlb	0	; () banked
 10847  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10848  000C26  0E01               	movlw	1
 10849  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10850  000C2A  EC2E  F01D         	call	_updateServoPosition	;wreg free
 10851                           
 10852                           ;Test.c: 241: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10853  000C2E  0E00               	movlw	0
 10854  000C30  0100               	movlb	0	; () banked
 10855  000C32  6FB0               	movwf	actuatorTest@i_1592& (0+255),b
 10856  000C34                     l6636:
 10857                           
 10858                           ; BSR set to: 0
 10859  000C34  0E63               	movlw	99
 10860  000C36  0100               	movlb	0	; () banked
 10861  000C38  65B0               	cpfsgt	actuatorTest@i_1592& (0+255),b
 10862  000C3A  D001               	goto	l6640
 10863  000C3C  D00C               	goto	l6644
 10864  000C3E                     l6640:
 10865                           
 10866                           ; BSR set to: 0
 10867  000C3E  0E68               	movlw	104
 10868  000C40  0100               	movlb	0	; () banked
 10869  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 10870  000C44  0EE4               	movlw	228
 10871  000C46                     u7477:
 10872  000C46  2EE8               	decfsz	wreg,f,c
 10873  000C48  D7FE               	bra	u7477
 10874  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10875  000C4C  D7FC               	bra	u7477
 10876  000C4E  F000               	nop	
 10877  000C50  0100               	movlb	0	; () banked
 10878  000C52  2BB0               	incf	actuatorTest@i_1592& (0+255),f,b
 10879  000C54  D7EF               	goto	l6636
 10880  000C56                     l6644:
 10881                           
 10882                           ; BSR set to: 0
 10883  000C56  0E00               	movlw	0
 10884  000C58  0100               	movlb	0	; () banked
 10885  000C5A  6FB1               	movwf	actuatorTest@i_1593& (0+255),b
 10886  000C5C                     l6646:
 10887                           
 10888                           ; BSR set to: 0
 10889  000C5C  0E63               	movlw	99
 10890  000C5E  0100               	movlb	0	; () banked
 10891  000C60  65B1               	cpfsgt	actuatorTest@i_1593& (0+255),b
 10892  000C62  D001               	goto	l6650
 10893  000C64  D00C               	goto	l6654
 10894  000C66                     l6650:
 10895                           
 10896                           ; BSR set to: 0
 10897  000C66  0E68               	movlw	104
 10898  000C68  0100               	movlb	0	; () banked
 10899  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10900  000C6C  0EE4               	movlw	228
 10901  000C6E                     u7487:
 10902  000C6E  2EE8               	decfsz	wreg,f,c
 10903  000C70  D7FE               	bra	u7487
 10904  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10905  000C74  D7FC               	bra	u7487
 10906  000C76  F000               	nop	
 10907  000C78  0100               	movlb	0	; () banked
 10908  000C7A  2BB1               	incf	actuatorTest@i_1593& (0+255),f,b
 10909  000C7C  D7EF               	goto	l6646
 10910  000C7E                     l6654:
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;Test.c: 243: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10914  000C7E  0E80               	movlw	128
 10915  000C80  ECD4  F022         	call	_lcdInst
 10916  000C84  0EC0               	movlw	192
 10917  000C86  ECD4  F022         	call	_lcdInst
 10918                           
 10919                           ;Test.c: 244: printf("LEFT -- 2s      ");
 10920  000C8A  0EFF               	movlw	low STR_95
 10921  000C8C  0100               	movlb	0	; () banked
 10922  000C8E  6F8E               	movwf	printf@f& (0+255),b
 10923  000C90  0EFB               	movlw	high STR_95
 10924  000C92  0100               	movlb	0	; () banked
 10925  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10926  000C96  EC9C  F008         	call	_printf	;wreg free
 10927                           
 10928                           ;Test.c: 245: updateServoPosition(2000, 1);
 10929  000C9A  0E07               	movlw	7
 10930  000C9C  0100               	movlb	0	; () banked
 10931  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10932  000CA0  0ED0               	movlw	208
 10933  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10934  000CA4  0E00               	movlw	0
 10935  000CA6  0100               	movlb	0	; () banked
 10936  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10937  000CAA  0E01               	movlw	1
 10938  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10939  000CAE  EC2E  F01D         	call	_updateServoPosition	;wreg free
 10940                           
 10941                           ;Test.c: 246: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10942  000CB2  0E00               	movlw	0
 10943  000CB4  0100               	movlb	0	; () banked
 10944  000CB6  6FB2               	movwf	actuatorTest@i_1595& (0+255),b
 10945  000CB8                     l6662:
 10946                           
 10947                           ; BSR set to: 0
 10948  000CB8  0E63               	movlw	99
 10949  000CBA  0100               	movlb	0	; () banked
 10950  000CBC  65B2               	cpfsgt	actuatorTest@i_1595& (0+255),b
 10951  000CBE  D001               	goto	l6666
 10952  000CC0  D00C               	goto	l6670
 10953  000CC2                     l6666:
 10954                           
 10955                           ; BSR set to: 0
 10956  000CC2  0E68               	movlw	104
 10957  000CC4  0100               	movlb	0	; () banked
 10958  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10959  000CC8  0EE4               	movlw	228
 10960  000CCA                     u7497:
 10961  000CCA  2EE8               	decfsz	wreg,f,c
 10962  000CCC  D7FE               	bra	u7497
 10963  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10964  000CD0  D7FC               	bra	u7497
 10965  000CD2  F000               	nop	
 10966  000CD4  0100               	movlb	0	; () banked
 10967  000CD6  2BB2               	incf	actuatorTest@i_1595& (0+255),f,b
 10968  000CD8  D7EF               	goto	l6662
 10969  000CDA                     l6670:
 10970                           
 10971                           ; BSR set to: 0
 10972  000CDA  0E00               	movlw	0
 10973  000CDC  0100               	movlb	0	; () banked
 10974  000CDE  6FB3               	movwf	actuatorTest@i_1596& (0+255),b
 10975  000CE0                     l6672:
 10976                           
 10977                           ; BSR set to: 0
 10978  000CE0  0E63               	movlw	99
 10979  000CE2  0100               	movlb	0	; () banked
 10980  000CE4  65B3               	cpfsgt	actuatorTest@i_1596& (0+255),b
 10981  000CE6  D001               	goto	l6676
 10982  000CE8  D00C               	goto	l6680
 10983  000CEA                     l6676:
 10984                           
 10985                           ; BSR set to: 0
 10986  000CEA  0E68               	movlw	104
 10987  000CEC  0100               	movlb	0	; () banked
 10988  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10989  000CF0  0EE4               	movlw	228
 10990  000CF2                     u7507:
 10991  000CF2  2EE8               	decfsz	wreg,f,c
 10992  000CF4  D7FE               	bra	u7507
 10993  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10994  000CF8  D7FC               	bra	u7507
 10995  000CFA  F000               	nop	
 10996  000CFC  0100               	movlb	0	; () banked
 10997  000CFE  2BB3               	incf	actuatorTest@i_1596& (0+255),f,b
 10998  000D00  D7EF               	goto	l6672
 10999  000D02                     l6680:
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;Test.c: 248: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11003  000D02  0E80               	movlw	128
 11004  000D04  ECD4  F022         	call	_lcdInst
 11005  000D08  0EC0               	movlw	192
 11006  000D0A  ECD4  F022         	call	_lcdInst
 11007                           
 11008                           ;Test.c: 249: printf("MID-LEFT -- 2s  ");
 11009  000D0E  0E54               	movlw	low STR_96
 11010  000D10  0100               	movlb	0	; () banked
 11011  000D12  6F8E               	movwf	printf@f& (0+255),b
 11012  000D14  0EFC               	movlw	high STR_96
 11013  000D16  0100               	movlb	0	; () banked
 11014  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 11015  000D1A  EC9C  F008         	call	_printf	;wreg free
 11016                           
 11017                           ;Test.c: 250: updateServoPosition(1700, 1);
 11018  000D1E  0E06               	movlw	6
 11019  000D20  0100               	movlb	0	; () banked
 11020  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11021  000D24  0EA4               	movlw	164
 11022  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11023  000D28  0E00               	movlw	0
 11024  000D2A  0100               	movlb	0	; () banked
 11025  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11026  000D2E  0E01               	movlw	1
 11027  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11028  000D32  EC2E  F01D         	call	_updateServoPosition	;wreg free
 11029                           
 11030                           ;Test.c: 251: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11031  000D36  0E00               	movlw	0
 11032  000D38  0100               	movlb	0	; () banked
 11033  000D3A  6FB4               	movwf	actuatorTest@i_1598& (0+255),b
 11034  000D3C                     l6688:
 11035                           
 11036                           ; BSR set to: 0
 11037  000D3C  0E63               	movlw	99
 11038  000D3E  0100               	movlb	0	; () banked
 11039  000D40  65B4               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11040  000D42  D001               	goto	l6692
 11041  000D44  D00C               	goto	l6696
 11042  000D46                     l6692:
 11043                           
 11044                           ; BSR set to: 0
 11045  000D46  0E68               	movlw	104
 11046  000D48  0100               	movlb	0	; () banked
 11047  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11048  000D4C  0EE4               	movlw	228
 11049  000D4E                     u7517:
 11050  000D4E  2EE8               	decfsz	wreg,f,c
 11051  000D50  D7FE               	bra	u7517
 11052  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11053  000D54  D7FC               	bra	u7517
 11054  000D56  F000               	nop	
 11055  000D58  0100               	movlb	0	; () banked
 11056  000D5A  2BB4               	incf	actuatorTest@i_1598& (0+255),f,b
 11057  000D5C  D7EF               	goto	l6688
 11058  000D5E                     l6696:
 11059                           
 11060                           ; BSR set to: 0
 11061  000D5E  0E00               	movlw	0
 11062  000D60  0100               	movlb	0	; () banked
 11063  000D62  6FB5               	movwf	actuatorTest@i_1599& (0+255),b
 11064  000D64                     l6698:
 11065                           
 11066                           ; BSR set to: 0
 11067  000D64  0E63               	movlw	99
 11068  000D66  0100               	movlb	0	; () banked
 11069  000D68  65B5               	cpfsgt	actuatorTest@i_1599& (0+255),b
 11070  000D6A  D001               	goto	l6702
 11071  000D6C  D00C               	goto	l6706
 11072  000D6E                     l6702:
 11073                           
 11074                           ; BSR set to: 0
 11075  000D6E  0E68               	movlw	104
 11076  000D70  0100               	movlb	0	; () banked
 11077  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 11078  000D74  0EE4               	movlw	228
 11079  000D76                     u7527:
 11080  000D76  2EE8               	decfsz	wreg,f,c
 11081  000D78  D7FE               	bra	u7527
 11082  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11083  000D7C  D7FC               	bra	u7527
 11084  000D7E  F000               	nop	
 11085  000D80  0100               	movlb	0	; () banked
 11086  000D82  2BB5               	incf	actuatorTest@i_1599& (0+255),f,b
 11087  000D84  D7EF               	goto	l6698
 11088  000D86                     l6706:
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;Test.c: 253: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11092  000D86  0E80               	movlw	128
 11093  000D88  ECD4  F022         	call	_lcdInst
 11094  000D8C  0EC0               	movlw	192
 11095  000D8E  ECD4  F022         	call	_lcdInst
 11096                           
 11097                           ;Test.c: 254: printf("MID-RIGHT -- 2s ");
 11098  000D92  0E65               	movlw	low STR_97
 11099  000D94  0100               	movlb	0	; () banked
 11100  000D96  6F8E               	movwf	printf@f& (0+255),b
 11101  000D98  0EFC               	movlw	high STR_97
 11102  000D9A  0100               	movlb	0	; () banked
 11103  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11104  000D9E  EC9C  F008         	call	_printf	;wreg free
 11105                           
 11106                           ;Test.c: 255: updateServoPosition(750, 1);
 11107  000DA2  0E02               	movlw	2
 11108  000DA4  0100               	movlb	0	; () banked
 11109  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11110  000DA8  0EEE               	movlw	238
 11111  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11112  000DAC  0E00               	movlw	0
 11113  000DAE  0100               	movlb	0	; () banked
 11114  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11115  000DB2  0E01               	movlw	1
 11116  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11117  000DB6  EC2E  F01D         	call	_updateServoPosition	;wreg free
 11118                           
 11119                           ;Test.c: 256: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11120  000DBA  0E00               	movlw	0
 11121  000DBC  0100               	movlb	0	; () banked
 11122  000DBE  6FB6               	movwf	actuatorTest@i_1601& (0+255),b
 11123  000DC0                     l6714:
 11124                           
 11125                           ; BSR set to: 0
 11126  000DC0  0E63               	movlw	99
 11127  000DC2  0100               	movlb	0	; () banked
 11128  000DC4  65B6               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11129  000DC6  D001               	goto	l6718
 11130  000DC8  D00C               	goto	l6722
 11131  000DCA                     l6718:
 11132                           
 11133                           ; BSR set to: 0
 11134  000DCA  0E68               	movlw	104
 11135  000DCC  0100               	movlb	0	; () banked
 11136  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11137  000DD0  0EE4               	movlw	228
 11138  000DD2                     u7537:
 11139  000DD2  2EE8               	decfsz	wreg,f,c
 11140  000DD4  D7FE               	bra	u7537
 11141  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11142  000DD8  D7FC               	bra	u7537
 11143  000DDA  F000               	nop	
 11144  000DDC  0100               	movlb	0	; () banked
 11145  000DDE  2BB6               	incf	actuatorTest@i_1601& (0+255),f,b
 11146  000DE0  D7EF               	goto	l6714
 11147  000DE2                     l6722:
 11148                           
 11149                           ; BSR set to: 0
 11150  000DE2  0E00               	movlw	0
 11151  000DE4  0100               	movlb	0	; () banked
 11152  000DE6  6FB7               	movwf	actuatorTest@i_1602& (0+255),b
 11153  000DE8                     l6724:
 11154                           
 11155                           ; BSR set to: 0
 11156  000DE8  0E63               	movlw	99
 11157  000DEA  0100               	movlb	0	; () banked
 11158  000DEC  65B7               	cpfsgt	actuatorTest@i_1602& (0+255),b
 11159  000DEE  D001               	goto	l6728
 11160  000DF0  D00C               	goto	l6732
 11161  000DF2                     l6728:
 11162                           
 11163                           ; BSR set to: 0
 11164  000DF2  0E68               	movlw	104
 11165  000DF4  0100               	movlb	0	; () banked
 11166  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11167  000DF8  0EE4               	movlw	228
 11168  000DFA                     u7547:
 11169  000DFA  2EE8               	decfsz	wreg,f,c
 11170  000DFC  D7FE               	bra	u7547
 11171  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11172  000E00  D7FC               	bra	u7547
 11173  000E02  F000               	nop	
 11174  000E04  0100               	movlb	0	; () banked
 11175  000E06  2BB7               	incf	actuatorTest@i_1602& (0+255),f,b
 11176  000E08  D7EF               	goto	l6724
 11177  000E0A                     l6732:
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;Test.c: 258: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11181  000E0A  0E80               	movlw	128
 11182  000E0C  ECD4  F022         	call	_lcdInst
 11183  000E10  0EC0               	movlw	192
 11184  000E12  ECD4  F022         	call	_lcdInst
 11185                           
 11186                           ;Test.c: 259: printf("MID -- 2s       ");
 11187  000E16  0EDD               	movlw	low STR_98
 11188  000E18  0100               	movlb	0	; () banked
 11189  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11190  000E1C  0EFB               	movlw	high STR_98
 11191  000E1E  0100               	movlb	0	; () banked
 11192  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11193  000E22  EC9C  F008         	call	_printf	;wreg free
 11194                           
 11195                           ;Test.c: 260: updateServoPosition(1200, 1);
 11196  000E26  0E04               	movlw	4
 11197  000E28  0100               	movlb	0	; () banked
 11198  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11199  000E2C  0EB0               	movlw	176
 11200  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11201  000E30  0E00               	movlw	0
 11202  000E32  0100               	movlb	0	; () banked
 11203  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11204  000E36  0E01               	movlw	1
 11205  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11206  000E3A  EC2E  F01D         	call	_updateServoPosition	;wreg free
 11207                           
 11208                           ;Test.c: 261: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11209  000E3E  0E00               	movlw	0
 11210  000E40  0100               	movlb	0	; () banked
 11211  000E42  6FB8               	movwf	actuatorTest@i_1604& (0+255),b
 11212  000E44                     l6740:
 11213                           
 11214                           ; BSR set to: 0
 11215  000E44  0E63               	movlw	99
 11216  000E46  0100               	movlb	0	; () banked
 11217  000E48  65B8               	cpfsgt	actuatorTest@i_1604& (0+255),b
 11218  000E4A  D001               	goto	l6744
 11219  000E4C  D00C               	goto	l6748
 11220  000E4E                     l6744:
 11221                           
 11222                           ; BSR set to: 0
 11223  000E4E  0E68               	movlw	104
 11224  000E50  0100               	movlb	0	; () banked
 11225  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11226  000E54  0EE4               	movlw	228
 11227  000E56                     u7557:
 11228  000E56  2EE8               	decfsz	wreg,f,c
 11229  000E58  D7FE               	bra	u7557
 11230  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11231  000E5C  D7FC               	bra	u7557
 11232  000E5E  F000               	nop	
 11233  000E60  0100               	movlb	0	; () banked
 11234  000E62  2BB8               	incf	actuatorTest@i_1604& (0+255),f,b
 11235  000E64  D7EF               	goto	l6740
 11236  000E66                     l6748:
 11237                           
 11238                           ; BSR set to: 0
 11239  000E66  0E00               	movlw	0
 11240  000E68  0100               	movlb	0	; () banked
 11241  000E6A  6FB9               	movwf	actuatorTest@i_1605& (0+255),b
 11242  000E6C                     l6750:
 11243                           
 11244                           ; BSR set to: 0
 11245  000E6C  0E63               	movlw	99
 11246  000E6E  0100               	movlb	0	; () banked
 11247  000E70  65B9               	cpfsgt	actuatorTest@i_1605& (0+255),b
 11248  000E72  D001               	goto	l6754
 11249  000E74  D00C               	goto	l1105
 11250  000E76                     l6754:
 11251                           
 11252                           ; BSR set to: 0
 11253  000E76  0E68               	movlw	104
 11254  000E78  0100               	movlb	0	; () banked
 11255  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11256  000E7C  0EE4               	movlw	228
 11257  000E7E                     u7567:
 11258  000E7E  2EE8               	decfsz	wreg,f,c
 11259  000E80  D7FE               	bra	u7567
 11260  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11261  000E84  D7FC               	bra	u7567
 11262  000E86  F000               	nop	
 11263  000E88  0100               	movlb	0	; () banked
 11264  000E8A  2BB9               	incf	actuatorTest@i_1605& (0+255),f,b
 11265  000E8C  D7EF               	goto	l6750
 11266  000E8E                     l1105:
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;Test.c: 262: TMR1ON = 0;
 11270  000E8E  90CD               	bcf	4045,0,c	;volatile
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;Test.c: 269: printf("TST: TILT SERVO");
 11274  000E90  0E40               	movlw	low STR_99
 11275  000E92  0100               	movlb	0	; () banked
 11276  000E94  6F8E               	movwf	printf@f& (0+255),b
 11277  000E96  0EFE               	movlw	high STR_99
 11278  000E98  0100               	movlb	0	; () banked
 11279  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11280  000E9C  EC9C  F008         	call	_printf	;wreg free
 11281                           
 11282                           ;Test.c: 270: lcdInst(0b11000000);;
 11283  000EA0  0EC0               	movlw	192
 11284  000EA2  ECD4  F022         	call	_lcdInst
 11285                           
 11286                           ;Test.c: 271: printf("LEVEL -- 2s     ");
 11287  000EA6  0E10               	movlw	low STR_100
 11288  000EA8  0100               	movlb	0	; () banked
 11289  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11290  000EAC  0EFC               	movlw	high STR_100
 11291  000EAE  0100               	movlb	0	; () banked
 11292  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11293  000EB2  EC9C  F008         	call	_printf	;wreg free
 11294                           
 11295                           ;Test.c: 272: updateServoPosition(1190, 3);
 11296  000EB6  0E04               	movlw	4
 11297  000EB8  0100               	movlb	0	; () banked
 11298  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11299  000EBC  0EA6               	movlw	166
 11300  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11301  000EC0  0E00               	movlw	0
 11302  000EC2  0100               	movlb	0	; () banked
 11303  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11304  000EC6  0E03               	movlw	3
 11305  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11306  000ECA  EC2E  F01D         	call	_updateServoPosition	;wreg free
 11307                           
 11308                           ;Test.c: 273: TMR3ON = 1;
 11309  000ECE  80B1               	bsf	4017,0,c	;volatile
 11310                           
 11311                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11312  000ED0  0E00               	movlw	0
 11313  000ED2  0100               	movlb	0	; () banked
 11314  000ED4  6FBA               	movwf	actuatorTest@i_1608& (0+255),b
 11315  000ED6                     l6768:
 11316                           
 11317                           ; BSR set to: 0
 11318  000ED6  0E63               	movlw	99
 11319  000ED8  0100               	movlb	0	; () banked
 11320  000EDA  65BA               	cpfsgt	actuatorTest@i_1608& (0+255),b
 11321  000EDC  D001               	goto	l6772
 11322  000EDE  D00C               	goto	l6776
 11323  000EE0                     l6772:
 11324                           
 11325                           ; BSR set to: 0
 11326  000EE0  0E68               	movlw	104
 11327  000EE2  0100               	movlb	0	; () banked
 11328  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11329  000EE6  0EE4               	movlw	228
 11330  000EE8                     u7577:
 11331  000EE8  2EE8               	decfsz	wreg,f,c
 11332  000EEA  D7FE               	bra	u7577
 11333  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11334  000EEE  D7FC               	bra	u7577
 11335  000EF0  F000               	nop	
 11336  000EF2  0100               	movlb	0	; () banked
 11337  000EF4  2BBA               	incf	actuatorTest@i_1608& (0+255),f,b
 11338  000EF6  D7EF               	goto	l6768
 11339  000EF8                     l6776:
 11340                           
 11341                           ; BSR set to: 0
 11342  000EF8  0E00               	movlw	0
 11343  000EFA  0100               	movlb	0	; () banked
 11344  000EFC  6FBB               	movwf	actuatorTest@i_1609& (0+255),b
 11345  000EFE                     l6778:
 11346                           
 11347                           ; BSR set to: 0
 11348  000EFE  0E63               	movlw	99
 11349  000F00  0100               	movlb	0	; () banked
 11350  000F02  65BB               	cpfsgt	actuatorTest@i_1609& (0+255),b
 11351  000F04  D001               	goto	l6782
 11352  000F06  D00C               	goto	l6786
 11353  000F08                     l6782:
 11354                           
 11355                           ; BSR set to: 0
 11356  000F08  0E68               	movlw	104
 11357  000F0A  0100               	movlb	0	; () banked
 11358  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11359  000F0E  0EE4               	movlw	228
 11360  000F10                     u7587:
 11361  000F10  2EE8               	decfsz	wreg,f,c
 11362  000F12  D7FE               	bra	u7587
 11363  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11364  000F16  D7FC               	bra	u7587
 11365  000F18  F000               	nop	
 11366  000F1A  0100               	movlb	0	; () banked
 11367  000F1C  2BBB               	incf	actuatorTest@i_1609& (0+255),f,b
 11368  000F1E  D7EF               	goto	l6778
 11369  000F20                     l6786:
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11373  000F20  0E80               	movlw	128
 11374  000F22  ECD4  F022         	call	_lcdInst
 11375  000F26  0EC0               	movlw	192
 11376  000F28  ECD4  F022         	call	_lcdInst
 11377                           
 11378                           ;Test.c: 277: printf("DROP -- 2s      ");
 11379  000F2C  0EEE               	movlw	low STR_101
 11380  000F2E  0100               	movlb	0	; () banked
 11381  000F30  6F8E               	movwf	printf@f& (0+255),b
 11382  000F32  0EFB               	movlw	high STR_101
 11383  000F34  0100               	movlb	0	; () banked
 11384  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11385  000F38  EC9C  F008         	call	_printf	;wreg free
 11386                           
 11387                           ;Test.c: 278: updateServoPosition(1350, 3);
 11388  000F3C  0E05               	movlw	5
 11389  000F3E  0100               	movlb	0	; () banked
 11390  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11391  000F42  0E46               	movlw	70
 11392  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11393  000F46  0E00               	movlw	0
 11394  000F48  0100               	movlb	0	; () banked
 11395  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11396  000F4C  0E03               	movlw	3
 11397  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11398  000F50  EC2E  F01D         	call	_updateServoPosition	;wreg free
 11399                           
 11400                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11401  000F54  0E00               	movlw	0
 11402  000F56  0100               	movlb	0	; () banked
 11403  000F58  6FBC               	movwf	actuatorTest@i_1611& (0+255),b
 11404  000F5A                     l6794:
 11405                           
 11406                           ; BSR set to: 0
 11407  000F5A  0E63               	movlw	99
 11408  000F5C  0100               	movlb	0	; () banked
 11409  000F5E  65BC               	cpfsgt	actuatorTest@i_1611& (0+255),b
 11410  000F60  D001               	goto	l6798
 11411  000F62  D00C               	goto	l6802
 11412  000F64                     l6798:
 11413                           
 11414                           ; BSR set to: 0
 11415  000F64  0E68               	movlw	104
 11416  000F66  0100               	movlb	0	; () banked
 11417  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11418  000F6A  0EE4               	movlw	228
 11419  000F6C                     u7597:
 11420  000F6C  2EE8               	decfsz	wreg,f,c
 11421  000F6E  D7FE               	bra	u7597
 11422  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11423  000F72  D7FC               	bra	u7597
 11424  000F74  F000               	nop	
 11425  000F76  0100               	movlb	0	; () banked
 11426  000F78  2BBC               	incf	actuatorTest@i_1611& (0+255),f,b
 11427  000F7A  D7EF               	goto	l6794
 11428  000F7C                     l6802:
 11429                           
 11430                           ; BSR set to: 0
 11431  000F7C  0E00               	movlw	0
 11432  000F7E  0100               	movlb	0	; () banked
 11433  000F80  6FBD               	movwf	actuatorTest@i_1612& (0+255),b
 11434  000F82                     l6804:
 11435                           
 11436                           ; BSR set to: 0
 11437  000F82  0E63               	movlw	99
 11438  000F84  0100               	movlb	0	; () banked
 11439  000F86  65BD               	cpfsgt	actuatorTest@i_1612& (0+255),b
 11440  000F88  D001               	goto	l6808
 11441  000F8A  D00C               	goto	l6812
 11442  000F8C                     l6808:
 11443                           
 11444                           ; BSR set to: 0
 11445  000F8C  0E68               	movlw	104
 11446  000F8E  0100               	movlb	0	; () banked
 11447  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11448  000F92  0EE4               	movlw	228
 11449  000F94                     u7607:
 11450  000F94  2EE8               	decfsz	wreg,f,c
 11451  000F96  D7FE               	bra	u7607
 11452  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11453  000F9A  D7FC               	bra	u7607
 11454  000F9C  F000               	nop	
 11455  000F9E  0100               	movlb	0	; () banked
 11456  000FA0  2BBD               	incf	actuatorTest@i_1612& (0+255),f,b
 11457  000FA2  D7EF               	goto	l6804
 11458  000FA4                     l6812:
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11462  000FA4  0E80               	movlw	128
 11463  000FA6  ECD4  F022         	call	_lcdInst
 11464  000FAA  0EC0               	movlw	192
 11465  000FAC  ECD4  F022         	call	_lcdInst
 11466                           
 11467                           ;Test.c: 282: printf("LEVEL -- 2s     ");
 11468  000FB0  0E10               	movlw	low STR_100
 11469  000FB2  0100               	movlb	0	; () banked
 11470  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11471  000FB6  0EFC               	movlw	high STR_100
 11472  000FB8  0100               	movlb	0	; () banked
 11473  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11474  000FBC  EC9C  F008         	call	_printf	;wreg free
 11475                           
 11476                           ;Test.c: 283: updateServoPosition(1190, 3);
 11477  000FC0  0E04               	movlw	4
 11478  000FC2  0100               	movlb	0	; () banked
 11479  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11480  000FC6  0EA6               	movlw	166
 11481  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11482  000FCA  0E00               	movlw	0
 11483  000FCC  0100               	movlb	0	; () banked
 11484  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11485  000FD0  0E03               	movlw	3
 11486  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11487  000FD4  EC2E  F01D         	call	_updateServoPosition	;wreg free
 11488                           
 11489                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11490  000FD8  0E00               	movlw	0
 11491  000FDA  0100               	movlb	0	; () banked
 11492  000FDC  6FBE               	movwf	actuatorTest@i_1614& (0+255),b
 11493  000FDE                     l6820:
 11494                           
 11495                           ; BSR set to: 0
 11496  000FDE  0E63               	movlw	99
 11497  000FE0  0100               	movlb	0	; () banked
 11498  000FE2  65BE               	cpfsgt	actuatorTest@i_1614& (0+255),b
 11499  000FE4  D001               	goto	l6824
 11500  000FE6  D00C               	goto	l6828
 11501  000FE8                     l6824:
 11502                           
 11503                           ; BSR set to: 0
 11504  000FE8  0E68               	movlw	104
 11505  000FEA  0100               	movlb	0	; () banked
 11506  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11507  000FEE  0EE4               	movlw	228
 11508  000FF0                     u7617:
 11509  000FF0  2EE8               	decfsz	wreg,f,c
 11510  000FF2  D7FE               	bra	u7617
 11511  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11512  000FF6  D7FC               	bra	u7617
 11513  000FF8  F000               	nop	
 11514  000FFA  0100               	movlb	0	; () banked
 11515  000FFC  2BBE               	incf	actuatorTest@i_1614& (0+255),f,b
 11516  000FFE  D7EF               	goto	l6820
 11517  001000                     l6828:
 11518                           
 11519                           ; BSR set to: 0
 11520  001000  0E00               	movlw	0
 11521  001002  0100               	movlb	0	; () banked
 11522  001004  6FBF               	movwf	actuatorTest@i_1615& (0+255),b
 11523  001006                     l6830:
 11524                           
 11525                           ; BSR set to: 0
 11526  001006  0E63               	movlw	99
 11527  001008  0100               	movlb	0	; () banked
 11528  00100A  65BF               	cpfsgt	actuatorTest@i_1615& (0+255),b
 11529  00100C  D001               	goto	l6834
 11530  00100E  D00C               	goto	l1117
 11531  001010                     l6834:
 11532                           
 11533                           ; BSR set to: 0
 11534  001010  0E68               	movlw	104
 11535  001012  0100               	movlb	0	; () banked
 11536  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11537  001016  0EE4               	movlw	228
 11538  001018                     u7627:
 11539  001018  2EE8               	decfsz	wreg,f,c
 11540  00101A  D7FE               	bra	u7627
 11541  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11542  00101E  D7FC               	bra	u7627
 11543  001020  F000               	nop	
 11544  001022  0100               	movlb	0	; () banked
 11545  001024  2BBF               	incf	actuatorTest@i_1615& (0+255),f,b
 11546  001026  D7EF               	goto	l6830
 11547  001028                     l1117:
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;Test.c: 285: TMR3ON = 0;
 11551  001028  90B1               	bcf	4017,0,c	;volatile
 11552                           
 11553                           ;Test.c: 286: (INTCONbits.GIE = 0);
 11554  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11555                           
 11556                           ; BSR set to: 0
 11557                           ;Test.c: 291: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11558  00102C  0E01               	movlw	1
 11559  00102E  ECD4  F022         	call	_lcdInst
 11560  001032  0E68               	movlw	104
 11561  001034  0100               	movlb	0	; () banked
 11562  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11563  001038  0EE4               	movlw	228
 11564  00103A                     u7637:
 11565  00103A  2EE8               	decfsz	wreg,f,c
 11566  00103C  D7FE               	bra	u7637
 11567  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11568  001040  D7FC               	bra	u7637
 11569  001042  F000               	nop	
 11570  001044  0E80               	movlw	128
 11571  001046  ECD4  F022         	call	_lcdInst
 11572                           
 11573                           ;Test.c: 292: printf("TST: CAM SERVO");
 11574  00104A  0E9C               	movlw	low STR_103
 11575  00104C  0100               	movlb	0	; () banked
 11576  00104E  6F8E               	movwf	printf@f& (0+255),b
 11577  001050  0EFE               	movlw	high STR_103
 11578  001052  0100               	movlb	0	; () banked
 11579  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11580  001056  EC9C  F008         	call	_printf	;wreg free
 11581                           
 11582                           ;Test.c: 293: lcdInst(0b11000000);;
 11583  00105A  0EC0               	movlw	192
 11584  00105C  ECD4  F022         	call	_lcdInst
 11585                           
 11586                           ;Test.c: 294: printf("CAM UP  |RC0=1");
 11587  001060  0E7E               	movlw	low STR_104
 11588  001062  0100               	movlb	0	; () banked
 11589  001064  6F8E               	movwf	printf@f& (0+255),b
 11590  001066  0EFE               	movlw	high STR_104
 11591  001068  0100               	movlb	0	; () banked
 11592  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11593  00106C  EC9C  F008         	call	_printf	;wreg free
 11594                           
 11595                           ;Test.c: 305: LATCbits.LATC0 = 0;
 11596  001070  908B               	bcf	3979,0,c	;volatile
 11597                           
 11598                           ;Test.c: 306: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11599  001072  0E00               	movlw	0
 11600  001074  0100               	movlb	0	; () banked
 11601  001076  6FC0               	movwf	actuatorTest@i_1618& (0+255),b
 11602  001078                     l6854:
 11603                           
 11604                           ; BSR set to: 0
 11605  001078  0E63               	movlw	99
 11606  00107A  0100               	movlb	0	; () banked
 11607  00107C  65C0               	cpfsgt	actuatorTest@i_1618& (0+255),b
 11608  00107E  D001               	goto	l6858
 11609  001080  D00C               	goto	l6862
 11610  001082                     l6858:
 11611                           
 11612                           ; BSR set to: 0
 11613  001082  0E68               	movlw	104
 11614  001084  0100               	movlb	0	; () banked
 11615  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11616  001088  0EE4               	movlw	228
 11617  00108A                     u7647:
 11618  00108A  2EE8               	decfsz	wreg,f,c
 11619  00108C  D7FE               	bra	u7647
 11620  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11621  001090  D7FC               	bra	u7647
 11622  001092  F000               	nop	
 11623  001094  0100               	movlb	0	; () banked
 11624  001096  2BC0               	incf	actuatorTest@i_1618& (0+255),f,b
 11625  001098  D7EF               	goto	l6854
 11626  00109A                     l6862:
 11627                           
 11628                           ; BSR set to: 0
 11629  00109A  0E00               	movlw	0
 11630  00109C  0100               	movlb	0	; () banked
 11631  00109E  6FC1               	movwf	actuatorTest@i_1619& (0+255),b
 11632  0010A0                     l6864:
 11633                           
 11634                           ; BSR set to: 0
 11635  0010A0  0E63               	movlw	99
 11636  0010A2  0100               	movlb	0	; () banked
 11637  0010A4  65C1               	cpfsgt	actuatorTest@i_1619& (0+255),b
 11638  0010A6  D001               	goto	l6868
 11639  0010A8  D00C               	goto	l6872
 11640  0010AA                     l6868:
 11641                           
 11642                           ; BSR set to: 0
 11643  0010AA  0E68               	movlw	104
 11644  0010AC  0100               	movlb	0	; () banked
 11645  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11646  0010B0  0EE4               	movlw	228
 11647  0010B2                     u7657:
 11648  0010B2  2EE8               	decfsz	wreg,f,c
 11649  0010B4  D7FE               	bra	u7657
 11650  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11651  0010B8  D7FC               	bra	u7657
 11652  0010BA  F000               	nop	
 11653  0010BC  0100               	movlb	0	; () banked
 11654  0010BE  2BC1               	incf	actuatorTest@i_1619& (0+255),f,b
 11655  0010C0  D7EF               	goto	l6864
 11656  0010C2                     l6872:
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11660  0010C2  0E80               	movlw	128
 11661  0010C4  ECD4  F022         	call	_lcdInst
 11662  0010C8  0EC0               	movlw	192
 11663  0010CA  ECD4  F022         	call	_lcdInst
 11664                           
 11665                           ;Test.c: 308: LATCbits.LATC0 = 1;
 11666  0010CE  808B               	bsf	3979,0,c	;volatile
 11667                           
 11668                           ;Test.c: 309: printf("CAM DWN |RC0=0");
 11669  0010D0  0E6F               	movlw	low STR_105
 11670  0010D2  0100               	movlb	0	; () banked
 11671  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11672  0010D6  0EFE               	movlw	high STR_105
 11673  0010D8  0100               	movlb	0	; () banked
 11674  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11675  0010DC  EC9C  F008         	call	_printf	;wreg free
 11676                           
 11677                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11678  0010E0  0E00               	movlw	0
 11679  0010E2  0100               	movlb	0	; () banked
 11680  0010E4  6FC2               	movwf	actuatorTest@i_1621& (0+255),b
 11681  0010E6                     l6880:
 11682                           
 11683                           ; BSR set to: 0
 11684  0010E6  0E63               	movlw	99
 11685  0010E8  0100               	movlb	0	; () banked
 11686  0010EA  65C2               	cpfsgt	actuatorTest@i_1621& (0+255),b
 11687  0010EC  D001               	goto	l6884
 11688  0010EE  D00C               	goto	l6888
 11689  0010F0                     l6884:
 11690                           
 11691                           ; BSR set to: 0
 11692  0010F0  0E68               	movlw	104
 11693  0010F2  0100               	movlb	0	; () banked
 11694  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11695  0010F6  0EE4               	movlw	228
 11696  0010F8                     u7667:
 11697  0010F8  2EE8               	decfsz	wreg,f,c
 11698  0010FA  D7FE               	bra	u7667
 11699  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11700  0010FE  D7FC               	bra	u7667
 11701  001100  F000               	nop	
 11702  001102  0100               	movlb	0	; () banked
 11703  001104  2BC2               	incf	actuatorTest@i_1621& (0+255),f,b
 11704  001106  D7EF               	goto	l6880
 11705  001108                     l6888:
 11706                           
 11707                           ; BSR set to: 0
 11708  001108  0E00               	movlw	0
 11709  00110A  0100               	movlb	0	; () banked
 11710  00110C  6FC3               	movwf	actuatorTest@i_1622& (0+255),b
 11711  00110E                     l6890:
 11712                           
 11713                           ; BSR set to: 0
 11714  00110E  0E63               	movlw	99
 11715  001110  0100               	movlb	0	; () banked
 11716  001112  65C3               	cpfsgt	actuatorTest@i_1622& (0+255),b
 11717  001114  D001               	goto	l6894
 11718  001116  D00C               	goto	l6898
 11719  001118                     l6894:
 11720                           
 11721                           ; BSR set to: 0
 11722  001118  0E68               	movlw	104
 11723  00111A  0100               	movlb	0	; () banked
 11724  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11725  00111E  0EE4               	movlw	228
 11726  001120                     u7677:
 11727  001120  2EE8               	decfsz	wreg,f,c
 11728  001122  D7FE               	bra	u7677
 11729  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11730  001126  D7FC               	bra	u7677
 11731  001128  F000               	nop	
 11732  00112A  0100               	movlb	0	; () banked
 11733  00112C  2BC3               	incf	actuatorTest@i_1622& (0+255),f,b
 11734  00112E  D7EF               	goto	l6890
 11735  001130                     l6898:
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;Test.c: 311: machine_state = Testing_state;
 11739  001130  0E03               	movlw	3
 11740  001132  0100               	movlb	0	; () banked
 11741  001134  6FFC               	movwf	_machine_state& (0+255),b
 11742                           
 11743                           ; BSR set to: 0
 11744  001136  0012               	return		;funcret
 11745  001138                     __end_of_actuatorTest:
 11746                           	opt stack 0
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           intcon2	equ	0xFF1
 11755                           intcon3	equ	0xFF0
 11756                           postinc0	equ	0xFEE
 11757                           wreg	equ	0xFE8
 11758                           postdec1	equ	0xFE5
 11759                           fsr1l	equ	0xFE1
 11760                           indf2	equ	0xFDF
 11761                           postinc2	equ	0xFDE
 11762                           postdec2	equ	0xFDD
 11763                           fsr2h	equ	0xFDA
 11764                           fsr2l	equ	0xFD9
 11765                           status	equ	0xFD8
 11766                           
 11767 ;; *************** function _ToggleTestA5 *****************
 11768 ;; Defined at:
 11769 ;;		line 456 in file "Test.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;		None
 11772 ;; Auto vars:     Size  Location     Type
 11773 ;;  on              2   44[BANK0 ] int 
 11774 ;; Return value:  Size  Location     Type
 11775 ;;                  1    wreg      void 
 11776 ;; Registers used:
 11777 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11778 ;; Tracked objects:
 11779 ;;		On entry : 0/0
 11780 ;;		On exit  : 0/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11787 ;;Total ram usage:        3 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; Hardware stack levels required when called:   10
 11790 ;; This function calls:
 11791 ;;		_lcdInst
 11792 ;;		_printf
 11793 ;; This function is called by:
 11794 ;;		_Test
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           	psect	text41
 11799  003852                     __ptext41:
 11800                           	opt stack 0
 11801  003852                     _ToggleTestA5:
 11802                           	opt stack 19
 11803                           
 11804                           ;Test.c: 457: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;incstack = 0
 11808  003852  0E01               	movlw	1
 11809  003854  ECD4  F022         	call	_lcdInst
 11810  003858  0E68               	movlw	104
 11811  00385A  0100               	movlb	0	; () banked
 11812  00385C  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11813  00385E  0EE4               	movlw	228
 11814  003860                     u7687:
 11815  003860  2EE8               	decfsz	wreg,f,c
 11816  003862  D7FE               	bra	u7687
 11817  003864  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11818  003866  D7FC               	bra	u7687
 11819  003868  F000               	nop	
 11820  00386A  0E80               	movlw	128
 11821  00386C  ECD4  F022         	call	_lcdInst
 11822                           
 11823                           ;Test.c: 458: printf("D WILL RETURN   ");
 11824  003870  0E43               	movlw	low STR_111
 11825  003872  0100               	movlb	0	; () banked
 11826  003874  6F8E               	movwf	printf@f& (0+255),b
 11827  003876  0EFC               	movlw	high STR_111
 11828  003878  0100               	movlb	0	; () banked
 11829  00387A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11830  00387C  EC9C  F008         	call	_printf	;wreg free
 11831                           
 11832                           ;Test.c: 459: lcdInst(0b11000000);;
 11833  003880  0EC0               	movlw	192
 11834  003882  ECD4  F022         	call	_lcdInst
 11835                           
 11836                           ;Test.c: 460: printf("ELSE TOGGLES RA5");
 11837  003886  0E76               	movlw	low STR_112
 11838  003888  0100               	movlb	0	; () banked
 11839  00388A  6F8E               	movwf	printf@f& (0+255),b
 11840  00388C  0EFC               	movlw	high STR_112
 11841  00388E  0100               	movlb	0	; () banked
 11842  003890  6F8F               	movwf	(printf@f+1)& (0+255),b
 11843  003892  EC9C  F008         	call	_printf	;wreg free
 11844                           
 11845                           ;Test.c: 461: int on = 0;
 11846  003896  0E00               	movlw	0
 11847  003898  0100               	movlb	0	; () banked
 11848  00389A  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11849  00389C  0E00               	movlw	0
 11850  00389E  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11851  0038A0                     l1183:
 11852  0038A0  A281               	btfss	3969,1,c	;volatile
 11853  0038A2  D7FE               	goto	l1183
 11854                           
 11855                           ;Test.c: 466: }
 11856                           ;Test.c: 467: if(PORTB >> 4 == 0b1111){
 11857  0038A4  3881               	swapf	3969,w,c	;volatile
 11858  0038A6  0B0F               	andlw	15
 11859  0038A8  0A0F               	xorlw	15
 11860  0038AA  B4D8               	btfsc	status,2,c
 11861  0038AC  0012               	return	
 11862                           
 11863                           ;Test.c: 470: else{
 11864                           ;Test.c: 471: if(on == 0){
 11865                           
 11866                           ;Test.c: 469: }
 11867                           
 11868                           ;Test.c: 468: break;
 11869  0038AE  0100               	movlb	0	; () banked
 11870  0038B0  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11871  0038B2  0100               	movlb	0	; () banked
 11872  0038B4  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11873  0038B6  A4D8               	btfss	status,2,c
 11874  0038B8  D007               	goto	l6944
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;Test.c: 472: on = 1;
 11878  0038BA  0E00               	movlw	0
 11879  0038BC  0100               	movlb	0	; () banked
 11880  0038BE  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11881  0038C0  0E01               	movlw	1
 11882  0038C2  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;Test.c: 473: LATAbits.LATA5 = 1;
 11886  0038C4  8A89               	bsf	3977,5,c	;volatile
 11887                           
 11888                           ;Test.c: 474: }
 11889  0038C6  D006               	goto	l1191
 11890  0038C8                     l6944:
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;Test.c: 475: else{
 11894                           ;Test.c: 476: on = 0;
 11895  0038C8  0E00               	movlw	0
 11896  0038CA  0100               	movlb	0	; () banked
 11897  0038CC  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11898  0038CE  0E00               	movlw	0
 11899  0038D0  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11900                           
 11901                           ; BSR set to: 0
 11902                           ;Test.c: 477: LATAbits.LATA5 = 0;
 11903  0038D2  9A89               	bcf	3977,5,c	;volatile
 11904  0038D4                     l1191:
 11905  0038D4  A281               	btfss	3969,1,c	;volatile
 11906  0038D6  D7E4               	goto	l1183
 11907  0038D8  D7FD               	goto	l1191
 11908  0038DA                     __end_of_ToggleTestA5:
 11909                           	opt stack 0
 11910                           tblptru	equ	0xFF8
 11911                           tblptrh	equ	0xFF7
 11912                           tblptrl	equ	0xFF6
 11913                           tablat	equ	0xFF5
 11914                           prodh	equ	0xFF4
 11915                           prodl	equ	0xFF3
 11916                           intcon	equ	0xFF2
 11917                           intcon2	equ	0xFF1
 11918                           intcon3	equ	0xFF0
 11919                           postinc0	equ	0xFEE
 11920                           wreg	equ	0xFE8
 11921                           postdec1	equ	0xFE5
 11922                           fsr1l	equ	0xFE1
 11923                           indf2	equ	0xFDF
 11924                           postinc2	equ	0xFDE
 11925                           postdec2	equ	0xFDD
 11926                           fsr2h	equ	0xFDA
 11927                           fsr2l	equ	0xFD9
 11928                           status	equ	0xFD8
 11929                           
 11930 ;; *************** function _SolenoidTestA5 *****************
 11931 ;; Defined at:
 11932 ;;		line 432 in file "Test.c"
 11933 ;; Parameters:    Size  Location     Type
 11934 ;;		None
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;  i               1   47[BANK0 ] unsigned char 
 11937 ;;  i               1   48[BANK0 ] unsigned char 
 11938 ;;  i               2   45[BANK0 ] int 
 11939 ;; Return value:  Size  Location     Type
 11940 ;;                  1    wreg      void 
 11941 ;; Registers used:
 11942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11943 ;; Tracked objects:
 11944 ;;		On entry : 0/0
 11945 ;;		On exit  : 0/0
 11946 ;;		Unchanged: 0/0
 11947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11949 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;Total ram usage:        6 bytes
 11953 ;; Hardware stack levels used:    1
 11954 ;; Hardware stack levels required when called:   10
 11955 ;; This function calls:
 11956 ;;		_lcdInst
 11957 ;;		_printf
 11958 ;; This function is called by:
 11959 ;;		_Test
 11960 ;; This function uses a non-reentrant model
 11961 ;;
 11962                           
 11963                           	psect	text42
 11964  0031AE                     __ptext42:
 11965                           	opt stack 0
 11966  0031AE                     _SolenoidTestA5:
 11967                           	opt stack 19
 11968  0031AE                     
 11969                           ;Test.c: 434: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11970  0031AE  0E01               	movlw	1
 11971  0031B0  ECD4  F022         	call	_lcdInst
 11972  0031B4  0E68               	movlw	104
 11973  0031B6  0100               	movlb	0	; () banked
 11974  0031B8  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 11975  0031BA  0EE4               	movlw	228
 11976  0031BC                     u7697:
 11977  0031BC  2EE8               	decfsz	wreg,f,c
 11978  0031BE  D7FE               	bra	u7697
 11979  0031C0  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 11980  0031C2  D7FC               	bra	u7697
 11981  0031C4  F000               	nop	
 11982  0031C6  0E80               	movlw	128
 11983  0031C8  ECD4  F022         	call	_lcdInst
 11984                           
 11985                           ;Test.c: 435: printf("SOLENOID TST");
 11986  0031CC  0E48               	movlw	low STR_109
 11987  0031CE  0100               	movlb	0	; () banked
 11988  0031D0  6F8E               	movwf	printf@f& (0+255),b
 11989  0031D2  0EFF               	movlw	high STR_109
 11990  0031D4  0100               	movlb	0	; () banked
 11991  0031D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11992  0031D8  EC9C  F008         	call	_printf	;wreg free
 11993                           
 11994                           ;Test.c: 436: lcdInst(0b11000000);;
 11995  0031DC  0EC0               	movlw	192
 11996  0031DE  ECD4  F022         	call	_lcdInst
 11997  0031E2                     l1168:
 11998  0031E2  A281               	btfss	3969,1,c	;volatile
 11999  0031E4  D7FE               	goto	l1168
 12000                           
 12001                           ;Test.c: 441: }
 12002                           ;Test.c: 443: for(int i = 0; i < 3; i++){
 12003  0031E6  0E00               	movlw	0
 12004  0031E8  0100               	movlb	0	; () banked
 12005  0031EA  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12006  0031EC  0E00               	movlw	0
 12007  0031EE  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12008  0031F0                     l6960:
 12009                           
 12010                           ; BSR set to: 0
 12011  0031F0  0100               	movlb	0	; () banked
 12012  0031F2  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12013  0031F4  D008               	goto	l6964
 12014  0031F6  0100               	movlb	0	; () banked
 12015  0031F8  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12016  0031FA  E12D               	bnz	l6980
 12017  0031FC  0E03               	movlw	3
 12018  0031FE  0100               	movlb	0	; () banked
 12019  003200  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12020  003202  B0D8               	btfsc	status,0,c
 12021  003204  D028               	goto	l6980
 12022  003206                     l6964:
 12023                           
 12024                           ; BSR set to: 0
 12025                           ;Test.c: 444: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12026  003206  0E00               	movlw	0
 12027  003208  0100               	movlb	0	; () banked
 12028  00320A  6FAF               	movwf	SolenoidTestA5@i_1635& (0+255),b
 12029  00320C                     l6966:
 12030                           
 12031                           ; BSR set to: 0
 12032  00320C  0E63               	movlw	99
 12033  00320E  0100               	movlb	0	; () banked
 12034  003210  65AF               	cpfsgt	SolenoidTestA5@i_1635& (0+255),b
 12035  003212  D001               	goto	l6970
 12036  003214  D00C               	goto	l1174
 12037  003216                     l6970:
 12038                           
 12039                           ; BSR set to: 0
 12040  003216  0E68               	movlw	104
 12041  003218  0100               	movlb	0	; () banked
 12042  00321A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12043  00321C  0EE4               	movlw	228
 12044  00321E                     u7707:
 12045  00321E  2EE8               	decfsz	wreg,f,c
 12046  003220  D7FE               	bra	u7707
 12047  003222  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12048  003224  D7FC               	bra	u7707
 12049  003226  F000               	nop	
 12050  003228  0100               	movlb	0	; () banked
 12051  00322A  2BAF               	incf	SolenoidTestA5@i_1635& (0+255),f,b
 12052  00322C  D7EF               	goto	l6966
 12053  00322E                     l1174:
 12054                           
 12055                           ; BSR set to: 0
 12056                           ;Test.c: 445: LATAbits.LATA5 = 1;
 12057  00322E  8A89               	bsf	3977,5,c	;volatile
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;Test.c: 446: _delay((unsigned long)((150)*(32000000/4000.0)));
 12061  003230  0E07               	movlw	7
 12062  003232  0100               	movlb	0	; () banked
 12063  003234  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12064  003236  0E17               	movlw	23
 12065  003238  0100               	movlb	0	; () banked
 12066  00323A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12067  00323C  0E6A               	movlw	106
 12068  00323E                     u7717:
 12069  00323E  2EE8               	decfsz	wreg,f,c
 12070  003240  D7FE               	bra	u7717
 12071  003242  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12072  003244  D7FC               	bra	u7717
 12073  003246  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12074  003248  D7FA               	bra	u7717
 12075  00324A  F000               	nop	
 12076                           
 12077                           ;Test.c: 447: LATAbits.LATA5 = 0;
 12078  00324C  9A89               	bcf	3977,5,c	;volatile
 12079  00324E  0100               	movlb	0	; () banked
 12080  003250  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12081  003252  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12082  003254  D7CD               	goto	l6960
 12083  003256                     l6980:
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;Test.c: 448: }
 12087                           ;Test.c: 450: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12088  003256  0E01               	movlw	1
 12089  003258  ECD4  F022         	call	_lcdInst
 12090  00325C  0E68               	movlw	104
 12091  00325E  0100               	movlb	0	; () banked
 12092  003260  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12093  003262  0EE4               	movlw	228
 12094  003264                     u7727:
 12095  003264  2EE8               	decfsz	wreg,f,c
 12096  003266  D7FE               	bra	u7727
 12097  003268  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12098  00326A  D7FC               	bra	u7727
 12099  00326C  F000               	nop	
 12100  00326E  0E80               	movlw	128
 12101  003270  ECD4  F022         	call	_lcdInst
 12102                           
 12103                           ;Test.c: 451: printf("PUSH DONE");
 12104  003274  0E8F               	movlw	low STR_110
 12105  003276  0100               	movlb	0	; () banked
 12106  003278  6F8E               	movwf	printf@f& (0+255),b
 12107  00327A  0EFF               	movlw	high STR_110
 12108  00327C  0100               	movlb	0	; () banked
 12109  00327E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12110  003280  EC9C  F008         	call	_printf	;wreg free
 12111                           
 12112                           ;Test.c: 452: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12113  003284  0E00               	movlw	0
 12114  003286  0100               	movlb	0	; () banked
 12115  003288  6FB0               	movwf	SolenoidTestA5@i_1637& (0+255),b
 12116  00328A                     l6990:
 12117                           
 12118                           ; BSR set to: 0
 12119  00328A  0E63               	movlw	99
 12120  00328C  0100               	movlb	0	; () banked
 12121  00328E  65B0               	cpfsgt	SolenoidTestA5@i_1637& (0+255),b
 12122  003290  D001               	goto	l6994
 12123  003292  D78D               	goto	l6948
 12124  003294                     l6994:
 12125                           
 12126                           ; BSR set to: 0
 12127  003294  0E68               	movlw	104
 12128  003296  0100               	movlb	0	; () banked
 12129  003298  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12130  00329A  0EE4               	movlw	228
 12131  00329C                     u7737:
 12132  00329C  2EE8               	decfsz	wreg,f,c
 12133  00329E  D7FE               	bra	u7737
 12134  0032A0  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12135  0032A2  D7FC               	bra	u7737
 12136  0032A4  F000               	nop	
 12137  0032A6  0100               	movlb	0	; () banked
 12138  0032A8  2BB0               	incf	SolenoidTestA5@i_1637& (0+255),f,b
 12139  0032AA  D7EF               	goto	l6990
 12140  0032AC                     __end_of_SolenoidTestA5:
 12141                           	opt stack 0
 12142                           tblptru	equ	0xFF8
 12143                           tblptrh	equ	0xFF7
 12144                           tblptrl	equ	0xFF6
 12145                           tablat	equ	0xFF5
 12146                           prodh	equ	0xFF4
 12147                           prodl	equ	0xFF3
 12148                           intcon	equ	0xFF2
 12149                           intcon2	equ	0xFF1
 12150                           intcon3	equ	0xFF0
 12151                           postinc0	equ	0xFEE
 12152                           wreg	equ	0xFE8
 12153                           postdec1	equ	0xFE5
 12154                           fsr1l	equ	0xFE1
 12155                           indf2	equ	0xFDF
 12156                           postinc2	equ	0xFDE
 12157                           postdec2	equ	0xFDD
 12158                           fsr2h	equ	0xFDA
 12159                           fsr2l	equ	0xFD9
 12160                           status	equ	0xFD8
 12161                           
 12162 ;; *************** function _PortTests *****************
 12163 ;; Defined at:
 12164 ;;		line 363 in file "Test.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;		None
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;		None
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  1    wreg      void 
 12171 ;; Registers used:
 12172 ;;		wreg, status,2, status,0
 12173 ;; Tracked objects:
 12174 ;;		On entry : 0/0
 12175 ;;		On exit  : 0/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12182 ;;Total ram usage:        2 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; Hardware stack levels required when called:    7
 12185 ;; This function calls:
 12186 ;;		Nothing
 12187 ;; This function is called by:
 12188 ;;		_Test
 12189 ;; This function uses a non-reentrant model
 12190 ;;
 12191                           
 12192                           	psect	text43
 12193  003960                     __ptext43:
 12194                           	opt stack 0
 12195  003960                     _PortTests:
 12196                           	opt stack 22
 12197  003960                     l1133:
 12198  003960  A281               	btfss	3969,1,c	;volatile
 12199  003962  D7FE               	goto	l1133
 12200                           
 12201                           ;Test.c: 367: var = PORTB >> 4;
 12202  003964  CF81 F080          	movff	3969,??_PortTests	;volatile
 12203  003968  0100               	movlb	0	; () banked
 12204  00396A  3B80               	swapf	??_PortTests& (0+255),f,b
 12205  00396C  0E0F               	movlw	15
 12206  00396E  1780               	andwf	??_PortTests& (0+255),f,b
 12207  003970  0100               	movlb	0	; () banked
 12208  003972  5180               	movf	??_PortTests& (0+255),w,b
 12209  003974  0100               	movlb	0	; () banked
 12210  003976  6FFA               	movwf	_var& (0+255),b
 12211  003978  6BFB               	clrf	(_var+1)& (0+255),b
 12212                           
 12213                           ;Test.c: 368: switch(var){
 12214  00397A  D00C               	goto	l7002
 12215  00397C                     l1137:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;Test.c: 370: LATEbits.LATE0 = 1;
 12219  00397C  808D               	bsf	3981,0,c	;volatile
 12220                           
 12221                           ;Test.c: 371: break;
 12222  00397E  D027               	goto	l1145
 12223  003980                     l1139:
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;Test.c: 373: LATEbits.LATE1 = 1;
 12227  003980  828D               	bsf	3981,1,c	;volatile
 12228                           
 12229                           ;Test.c: 374: break;
 12230  003982  D025               	goto	l1145
 12231  003984                     l1140:
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;Test.c: 376: LATDbits.LATD0 = 1;
 12235  003984  808C               	bsf	3980,0,c	;volatile
 12236                           
 12237                           ;Test.c: 377: break;
 12238  003986  D023               	goto	l1145
 12239  003988                     l1141:
 12240                           
 12241                           ; BSR set to: 0
 12242                           ;Test.c: 379: LATAbits.LATA3 = 1;
 12243  003988  8689               	bsf	3977,3,c	;volatile
 12244                           
 12245                           ;Test.c: 380: break;
 12246  00398A  D021               	goto	l1145
 12247  00398C                     l1142:
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;Test.c: 382: LATAbits.LATA4 = 1;
 12251  00398C  8889               	bsf	3977,4,c	;volatile
 12252                           
 12253                           ;Test.c: 383: break;
 12254  00398E  D01F               	goto	l1145
 12255  003990                     l1143:
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;Test.c: 385: LATAbits.LATA5 = 1;
 12259  003990  8A89               	bsf	3977,5,c	;volatile
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;Test.c: 389: }
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;Test.c: 388: break;
 12266                           
 12267                           ;Test.c: 387: default:
 12268                           
 12269                           ;Test.c: 386: break;
 12270  003992  D01D               	goto	l1145
 12271  003994                     l7002:
 12272                           
 12273                           ; BSR set to: 0
 12274  003994  C0FA  F080         	movff	_var,??_PortTests
 12275  003998  C0FB  F081         	movff	_var+1,??_PortTests+1
 12276                           
 12277                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12278                           ; Switch size 1, requested type "space"
 12279                           ; Number of cases is 1, Range of values is 0 to 0
 12280                           ; switch strategies available:
 12281                           ; Name         Instructions Cycles
 12282                           ; simple_byte            4     3 (average)
 12283                           ;	Chosen strategy is simple_byte
 12284  00399C  0100               	movlb	0	; () banked
 12285  00399E  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12286  0039A0  0A00               	xorlw	0	; case 0
 12287  0039A2  A4D8               	btfss	status,2,c
 12288  0039A4  D014               	goto	l1145
 12289                           
 12290                           ; BSR set to: 0
 12291                           ; Switch size 1, requested type "space"
 12292                           ; Number of cases is 6, Range of values is 0 to 5
 12293                           ; switch strategies available:
 12294                           ; Name         Instructions Cycles
 12295                           ; simple_byte           19    10 (average)
 12296                           ;	Chosen strategy is simple_byte
 12297  0039A6  0100               	movlb	0	; () banked
 12298  0039A8  5180               	movf	??_PortTests& (0+255),w,b
 12299  0039AA  0A00               	xorlw	0	; case 0
 12300  0039AC  B4D8               	btfsc	status,2,c
 12301  0039AE  D7E6               	goto	l1137
 12302  0039B0  0A01               	xorlw	1	; case 1
 12303  0039B2  B4D8               	btfsc	status,2,c
 12304  0039B4  D7E5               	goto	l1139
 12305  0039B6  0A03               	xorlw	3	; case 2
 12306  0039B8  B4D8               	btfsc	status,2,c
 12307  0039BA  D7E4               	goto	l1140
 12308  0039BC  0A01               	xorlw	1	; case 3
 12309  0039BE  B4D8               	btfsc	status,2,c
 12310  0039C0  D7E3               	goto	l1141
 12311  0039C2  0A07               	xorlw	7	; case 4
 12312  0039C4  B4D8               	btfsc	status,2,c
 12313  0039C6  D7E2               	goto	l1142
 12314  0039C8  0A01               	xorlw	1	; case 5
 12315  0039CA  B4D8               	btfsc	status,2,c
 12316  0039CC  D7E1               	goto	l1143
 12317  0039CE                     l1145:
 12318  0039CE  B281               	btfsc	3969,1,c	;volatile
 12319  0039D0  D7FE               	goto	l1145
 12320                           
 12321                           ;Test.c: 391: __nop();
 12322  0039D2  F000               	nop	
 12323                           
 12324                           ;Test.c: 392: __nop();
 12325  0039D4  F000               	nop	
 12326                           
 12327                           ;Test.c: 393: LATA = 0x00;
 12328  0039D6  0E00               	movlw	0
 12329  0039D8  6E89               	movwf	3977,c	;volatile
 12330                           
 12331                           ;Test.c: 394: LATE = 0x00;
 12332  0039DA  0E00               	movlw	0
 12333  0039DC  6E8D               	movwf	3981,c	;volatile
 12334                           
 12335                           ;Test.c: 395: LATD = 0x00; }
 12336  0039DE  0E00               	movlw	0
 12337  0039E0  6E8C               	movwf	3980,c	;volatile
 12338  0039E2  D7BE               	goto	l1133
 12339  0039E4                     __end_of_PortTests:
 12340                           	opt stack 0
 12341                           tblptru	equ	0xFF8
 12342                           tblptrh	equ	0xFF7
 12343                           tblptrl	equ	0xFF6
 12344                           tablat	equ	0xFF5
 12345                           prodh	equ	0xFF4
 12346                           prodl	equ	0xFF3
 12347                           intcon	equ	0xFF2
 12348                           intcon2	equ	0xFF1
 12349                           intcon3	equ	0xFF0
 12350                           postinc0	equ	0xFEE
 12351                           wreg	equ	0xFE8
 12352                           postdec1	equ	0xFE5
 12353                           fsr1l	equ	0xFE1
 12354                           indf2	equ	0xFDF
 12355                           postinc2	equ	0xFDE
 12356                           postdec2	equ	0xFDD
 12357                           fsr2h	equ	0xFDA
 12358                           fsr2l	equ	0xFD9
 12359                           status	equ	0xFD8
 12360                           
 12361 ;; *************** function _PortTestA5 *****************
 12362 ;; Defined at:
 12363 ;;		line 398 in file "Test.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;		None
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;		None
 12368 ;; Return value:  Size  Location     Type
 12369 ;;                  1    wreg      void 
 12370 ;; Registers used:
 12371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12381 ;;Total ram usage:        1 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:   10
 12384 ;; This function calls:
 12385 ;;		_lcdInst
 12386 ;;		_printf
 12387 ;; This function is called by:
 12388 ;;		_Test
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           	psect	text44
 12393  003D32                     __ptext44:
 12394                           	opt stack 0
 12395  003D32                     _PortTestA5:
 12396                           	opt stack 19
 12397                           
 12398                           ;Test.c: 399: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12399                           
 12400                           ;incstack = 0
 12401  003D32  0E01               	movlw	1
 12402  003D34  ECD4  F022         	call	_lcdInst
 12403  003D38  0E68               	movlw	104
 12404  003D3A  0100               	movlb	0	; () banked
 12405  003D3C  6FAB               	movwf	??_PortTestA5& (0+255),b
 12406  003D3E  0EE4               	movlw	228
 12407  003D40                     u7747:
 12408  003D40  2EE8               	decfsz	wreg,f,c
 12409  003D42  D7FE               	bra	u7747
 12410  003D44  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12411  003D46  D7FC               	bra	u7747
 12412  003D48  F000               	nop	
 12413  003D4A  0E80               	movlw	128
 12414  003D4C  ECD4  F022         	call	_lcdInst
 12415                           
 12416                           ;Test.c: 400: printf("D WILL RETURN    ");
 12417  003D50  0E95               	movlw	low STR_107
 12418  003D52  0100               	movlb	0	; () banked
 12419  003D54  6F8E               	movwf	printf@f& (0+255),b
 12420  003D56  0EFB               	movlw	high STR_107
 12421  003D58  0100               	movlb	0	; () banked
 12422  003D5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12423  003D5C  EC9C  F008         	call	_printf	;wreg free
 12424                           
 12425                           ;Test.c: 401: lcdInst(0b11000000);;
 12426  003D60  0EC0               	movlw	192
 12427  003D62  ECD4  F022         	call	_lcdInst
 12428                           
 12429                           ;Test.c: 402: printf("OTHER SETS RA5   ");
 12430  003D66  0EA7               	movlw	low STR_108
 12431  003D68  0100               	movlb	0	; () banked
 12432  003D6A  6F8E               	movwf	printf@f& (0+255),b
 12433  003D6C  0EFB               	movlw	high STR_108
 12434  003D6E  0100               	movlb	0	; () banked
 12435  003D70  6F8F               	movwf	(printf@f+1)& (0+255),b
 12436  003D72  EC9C  F008         	call	_printf	;wreg free
 12437  003D76                     l1154:
 12438  003D76  A281               	btfss	3969,1,c	;volatile
 12439  003D78  D7FE               	goto	l1154
 12440                           
 12441                           ;Test.c: 407: }
 12442                           ;Test.c: 408: if(PORTB >> 4 == 0b1111){
 12443  003D7A  3881               	swapf	3969,w,c	;volatile
 12444  003D7C  0B0F               	andlw	15
 12445  003D7E  0A0F               	xorlw	15
 12446  003D80  B4D8               	btfsc	status,2,c
 12447  003D82  0012               	return	
 12448                           
 12449                           ;Test.c: 411: else{
 12450                           ;Test.c: 412: LATAbits.LATA5 = 1;
 12451                           
 12452                           ;Test.c: 410: }
 12453                           
 12454                           ;Test.c: 409: break;
 12455  003D84  8A89               	bsf	3977,5,c	;volatile
 12456  003D86                     l1160:
 12457  003D86  B281               	btfsc	3969,1,c	;volatile
 12458  003D88  D7FE               	goto	l1160
 12459                           
 12460                           ;Test.c: 415: }
 12461                           ;Test.c: 427: LATAbits.LATA5 = 0;
 12462  003D8A  9A89               	bcf	3977,5,c	;volatile
 12463  003D8C  D7F4               	goto	l1154
 12464  003D8E                     __end_of_PortTestA5:
 12465                           	opt stack 0
 12466                           tblptru	equ	0xFF8
 12467                           tblptrh	equ	0xFF7
 12468                           tblptrl	equ	0xFF6
 12469                           tablat	equ	0xFF5
 12470                           prodh	equ	0xFF4
 12471                           prodl	equ	0xFF3
 12472                           intcon	equ	0xFF2
 12473                           intcon2	equ	0xFF1
 12474                           intcon3	equ	0xFF0
 12475                           postinc0	equ	0xFEE
 12476                           wreg	equ	0xFE8
 12477                           postdec1	equ	0xFE5
 12478                           fsr1l	equ	0xFE1
 12479                           indf2	equ	0xFDF
 12480                           postinc2	equ	0xFDE
 12481                           postdec2	equ	0xFDD
 12482                           fsr2h	equ	0xFDA
 12483                           fsr2l	equ	0xFD9
 12484                           status	equ	0xFD8
 12485                           
 12486 ;; *************** function _EEPROMTest *****************
 12487 ;; Defined at:
 12488 ;;		line 484 in file "Test.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;		None
 12491 ;; Auto vars:     Size  Location     Type
 12492 ;;		None
 12493 ;; Return value:  Size  Location     Type
 12494 ;;                  1    wreg      void 
 12495 ;; Registers used:
 12496 ;;		None
 12497 ;; Tracked objects:
 12498 ;;		On entry : 0/0
 12499 ;;		On exit  : 0/0
 12500 ;;		Unchanged: 0/0
 12501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12506 ;;Total ram usage:        0 bytes
 12507 ;; Hardware stack levels used:    1
 12508 ;; Hardware stack levels required when called:    7
 12509 ;; This function calls:
 12510 ;;		Nothing
 12511 ;; This function is called by:
 12512 ;;		_Test
 12513 ;; This function uses a non-reentrant model
 12514 ;;
 12515                           
 12516                           	psect	text45
 12517  00460C                     __ptext45:
 12518                           	opt stack 0
 12519  00460C                     _EEPROMTest:
 12520                           	opt stack 22
 12521                           
 12522                           ;incstack = 0
 12523  00460C  0012               	return		;funcret
 12524  00460E                     __end_of_EEPROMTest:
 12525                           	opt stack 0
 12526                           tblptru	equ	0xFF8
 12527                           tblptrh	equ	0xFF7
 12528                           tblptrl	equ	0xFF6
 12529                           tablat	equ	0xFF5
 12530                           prodh	equ	0xFF4
 12531                           prodl	equ	0xFF3
 12532                           intcon	equ	0xFF2
 12533                           intcon2	equ	0xFF1
 12534                           intcon3	equ	0xFF0
 12535                           postinc0	equ	0xFEE
 12536                           wreg	equ	0xFE8
 12537                           postdec1	equ	0xFE5
 12538                           fsr1l	equ	0xFE1
 12539                           indf2	equ	0xFDF
 12540                           postinc2	equ	0xFDE
 12541                           postdec2	equ	0xFDD
 12542                           fsr2h	equ	0xFDA
 12543                           fsr2l	equ	0xFD9
 12544                           status	equ	0xFD8
 12545                           
 12546 ;; *************** function _BothServos *****************
 12547 ;; Defined at:
 12548 ;;		line 314 in file "Test.c"
 12549 ;; Parameters:    Size  Location     Type
 12550 ;;		None
 12551 ;; Auto vars:     Size  Location     Type
 12552 ;;		None
 12553 ;; Return value:  Size  Location     Type
 12554 ;;                  1    wreg      void 
 12555 ;; Registers used:
 12556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12557 ;; Tracked objects:
 12558 ;;		On entry : 0/0
 12559 ;;		On exit  : 0/0
 12560 ;;		Unchanged: 0/0
 12561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;Total ram usage:        2 bytes
 12567 ;; Hardware stack levels used:    1
 12568 ;; Hardware stack levels required when called:   10
 12569 ;; This function calls:
 12570 ;;		_initServos
 12571 ;;		_lcdInst
 12572 ;;		_printf
 12573 ;;		_updateServoPosition
 12574 ;; This function is called by:
 12575 ;;		_Test
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           	psect	text46
 12580  0018DE                     __ptext46:
 12581                           	opt stack 0
 12582  0018DE                     _BothServos:
 12583                           	opt stack 19
 12584                           
 12585                           ;Test.c: 315: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12586                           
 12587                           ;incstack = 0
 12588  0018DE  0E01               	movlw	1
 12589  0018E0  ECD4  F022         	call	_lcdInst
 12590  0018E4  0E68               	movlw	104
 12591  0018E6  0100               	movlb	0	; () banked
 12592  0018E8  6FAB               	movwf	??_BothServos& (0+255),b
 12593  0018EA  0EE4               	movlw	228
 12594  0018EC                     u7757:
 12595  0018EC  2EE8               	decfsz	wreg,f,c
 12596  0018EE  D7FE               	bra	u7757
 12597  0018F0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12598  0018F2  D7FC               	bra	u7757
 12599  0018F4  F000               	nop	
 12600  0018F6  0E80               	movlw	128
 12601  0018F8  ECD4  F022         	call	_lcdInst
 12602                           
 12603                           ;Test.c: 316: printf("TST: BOTH SERVOS");
 12604  0018FC  0EDC               	movlw	low STR_106
 12605  0018FE  0100               	movlb	0	; () banked
 12606  001900  6F8E               	movwf	printf@f& (0+255),b
 12607  001902  0EFC               	movlw	high STR_106
 12608  001904  0100               	movlb	0	; () banked
 12609  001906  6F8F               	movwf	(printf@f+1)& (0+255),b
 12610  001908  EC9C  F008         	call	_printf	;wreg free
 12611                           
 12612                           ;Test.c: 317: TMR1ON = 1;
 12613  00190C  80CD               	bsf	4045,0,c	;volatile
 12614                           
 12615                           ;Test.c: 318: TMR3ON = 1;
 12616  00190E  80B1               	bsf	4017,0,c	;volatile
 12617                           
 12618                           ;Test.c: 319: machine_state = Sorting_state;
 12619  001910  0E01               	movlw	1
 12620  001912  0100               	movlb	0	; () banked
 12621  001914  6FFC               	movwf	_machine_state& (0+255),b
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;Test.c: 320: was_low_1 = 0;
 12625  001916  0E00               	movlw	0
 12626  001918  6E7A               	movwf	_was_low_1+1,c	;volatile
 12627  00191A  0E00               	movlw	0
 12628  00191C  6E79               	movwf	_was_low_1,c	;volatile
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;Test.c: 321: was_low_1 = 0;
 12632  00191E  0E00               	movlw	0
 12633  001920  6E7A               	movwf	_was_low_1+1,c	;volatile
 12634  001922  0E00               	movlw	0
 12635  001924  6E79               	movwf	_was_low_1,c	;volatile
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;Test.c: 327: initServos();
 12639  001926  ECC7  F01E         	call	_initServos	;wreg free
 12640                           
 12641                           ;Test.c: 328: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12642  00192A  0E3D               	movlw	61
 12643  00192C  0100               	movlb	0	; () banked
 12644  00192E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12645  001930  0EE1               	movlw	225
 12646  001932  0100               	movlb	0	; () banked
 12647  001934  6FAB               	movwf	??_BothServos& (0+255),b
 12648  001936  0E3F               	movlw	63
 12649  001938                     u7767:
 12650  001938  2EE8               	decfsz	wreg,f,c
 12651  00193A  D7FE               	bra	u7767
 12652  00193C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12653  00193E  D7FC               	bra	u7767
 12654  001940  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12655  001942  D7FA               	bra	u7767
 12656  001944  D000               	nop2	
 12657                           
 12658                           ;Test.c: 329: updateServoPosition(500, 1);
 12659  001946  0E01               	movlw	1
 12660  001948  0100               	movlb	0	; () banked
 12661  00194A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12662  00194C  0EF4               	movlw	244
 12663  00194E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12664  001950  0E00               	movlw	0
 12665  001952  0100               	movlb	0	; () banked
 12666  001954  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12667  001956  0E01               	movlw	1
 12668  001958  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12669  00195A  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12670                           
 12671                           ;Test.c: 330: updateServoPosition(1350, 3);
 12672  00195E  0E05               	movlw	5
 12673  001960  0100               	movlb	0	; () banked
 12674  001962  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12675  001964  0E46               	movlw	70
 12676  001966  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12677  001968  0E00               	movlw	0
 12678  00196A  0100               	movlb	0	; () banked
 12679  00196C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12680  00196E  0E03               	movlw	3
 12681  001970  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12682  001972  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12683                           
 12684                           ;Test.c: 331: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12685  001976  0E3D               	movlw	61
 12686  001978  0100               	movlb	0	; () banked
 12687  00197A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12688  00197C  0EE1               	movlw	225
 12689  00197E  0100               	movlb	0	; () banked
 12690  001980  6FAB               	movwf	??_BothServos& (0+255),b
 12691  001982  0E3F               	movlw	63
 12692  001984                     u7777:
 12693  001984  2EE8               	decfsz	wreg,f,c
 12694  001986  D7FE               	bra	u7777
 12695  001988  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12696  00198A  D7FC               	bra	u7777
 12697  00198C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12698  00198E  D7FA               	bra	u7777
 12699  001990  D000               	nop2	
 12700                           
 12701                           ;Test.c: 332: updateServoPosition(1190, 3);
 12702  001992  0E04               	movlw	4
 12703  001994  0100               	movlb	0	; () banked
 12704  001996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12705  001998  0EA6               	movlw	166
 12706  00199A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12707  00199C  0E00               	movlw	0
 12708  00199E  0100               	movlb	0	; () banked
 12709  0019A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12710  0019A2  0E03               	movlw	3
 12711  0019A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12712  0019A6  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12713                           
 12714                           ;Test.c: 333: _delay((unsigned long)((750)*(32000000/4000.0)));
 12715  0019AA  0E1F               	movlw	31
 12716  0019AC  0100               	movlb	0	; () banked
 12717  0019AE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12718  0019B0  0E71               	movlw	113
 12719  0019B2  0100               	movlb	0	; () banked
 12720  0019B4  6FAB               	movwf	??_BothServos& (0+255),b
 12721  0019B6  0E1E               	movlw	30
 12722  0019B8                     u7787:
 12723  0019B8  2EE8               	decfsz	wreg,f,c
 12724  0019BA  D7FE               	bra	u7787
 12725  0019BC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12726  0019BE  D7FC               	bra	u7787
 12727  0019C0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12728  0019C2  D7FA               	bra	u7787
 12729  0019C4  F000               	nop	
 12730                           
 12731                           ;Test.c: 335: updateServoPosition(750, 1);
 12732  0019C6  0E02               	movlw	2
 12733  0019C8  0100               	movlb	0	; () banked
 12734  0019CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12735  0019CC  0EEE               	movlw	238
 12736  0019CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12737  0019D0  0E00               	movlw	0
 12738  0019D2  0100               	movlb	0	; () banked
 12739  0019D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12740  0019D6  0E01               	movlw	1
 12741  0019D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12742  0019DA  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12743                           
 12744                           ;Test.c: 336: updateServoPosition(1350, 3);
 12745  0019DE  0E05               	movlw	5
 12746  0019E0  0100               	movlb	0	; () banked
 12747  0019E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12748  0019E4  0E46               	movlw	70
 12749  0019E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12750  0019E8  0E00               	movlw	0
 12751  0019EA  0100               	movlb	0	; () banked
 12752  0019EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12753  0019EE  0E03               	movlw	3
 12754  0019F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12755  0019F2  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12756                           
 12757                           ;Test.c: 337: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12758  0019F6  0E3D               	movlw	61
 12759  0019F8  0100               	movlb	0	; () banked
 12760  0019FA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12761  0019FC  0EE1               	movlw	225
 12762  0019FE  0100               	movlb	0	; () banked
 12763  001A00  6FAB               	movwf	??_BothServos& (0+255),b
 12764  001A02  0E3F               	movlw	63
 12765  001A04                     u7797:
 12766  001A04  2EE8               	decfsz	wreg,f,c
 12767  001A06  D7FE               	bra	u7797
 12768  001A08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12769  001A0A  D7FC               	bra	u7797
 12770  001A0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12771  001A0E  D7FA               	bra	u7797
 12772  001A10  D000               	nop2	
 12773                           
 12774                           ;Test.c: 338: updateServoPosition(1190, 3);
 12775  001A12  0E04               	movlw	4
 12776  001A14  0100               	movlb	0	; () banked
 12777  001A16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12778  001A18  0EA6               	movlw	166
 12779  001A1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12780  001A1C  0E00               	movlw	0
 12781  001A1E  0100               	movlb	0	; () banked
 12782  001A20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12783  001A22  0E03               	movlw	3
 12784  001A24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12785  001A26  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12786                           
 12787                           ;Test.c: 339: _delay((unsigned long)((750)*(32000000/4000.0)));
 12788  001A2A  0E1F               	movlw	31
 12789  001A2C  0100               	movlb	0	; () banked
 12790  001A2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12791  001A30  0E71               	movlw	113
 12792  001A32  0100               	movlb	0	; () banked
 12793  001A34  6FAB               	movwf	??_BothServos& (0+255),b
 12794  001A36  0E1E               	movlw	30
 12795  001A38                     u7807:
 12796  001A38  2EE8               	decfsz	wreg,f,c
 12797  001A3A  D7FE               	bra	u7807
 12798  001A3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12799  001A3E  D7FC               	bra	u7807
 12800  001A40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12801  001A42  D7FA               	bra	u7807
 12802  001A44  F000               	nop	
 12803                           
 12804                           ;Test.c: 341: updateServoPosition(1200, 1);
 12805  001A46  0E04               	movlw	4
 12806  001A48  0100               	movlb	0	; () banked
 12807  001A4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12808  001A4C  0EB0               	movlw	176
 12809  001A4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12810  001A50  0E00               	movlw	0
 12811  001A52  0100               	movlb	0	; () banked
 12812  001A54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12813  001A56  0E01               	movlw	1
 12814  001A58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12815  001A5A  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12816                           
 12817                           ;Test.c: 342: updateServoPosition(1350, 3);
 12818  001A5E  0E05               	movlw	5
 12819  001A60  0100               	movlb	0	; () banked
 12820  001A62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12821  001A64  0E46               	movlw	70
 12822  001A66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12823  001A68  0E00               	movlw	0
 12824  001A6A  0100               	movlb	0	; () banked
 12825  001A6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12826  001A6E  0E03               	movlw	3
 12827  001A70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12828  001A72  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12829                           
 12830                           ;Test.c: 343: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12831  001A76  0E3D               	movlw	61
 12832  001A78  0100               	movlb	0	; () banked
 12833  001A7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12834  001A7C  0EE1               	movlw	225
 12835  001A7E  0100               	movlb	0	; () banked
 12836  001A80  6FAB               	movwf	??_BothServos& (0+255),b
 12837  001A82  0E3F               	movlw	63
 12838  001A84                     u7817:
 12839  001A84  2EE8               	decfsz	wreg,f,c
 12840  001A86  D7FE               	bra	u7817
 12841  001A88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12842  001A8A  D7FC               	bra	u7817
 12843  001A8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12844  001A8E  D7FA               	bra	u7817
 12845  001A90  D000               	nop2	
 12846                           
 12847                           ;Test.c: 344: updateServoPosition(1190, 3);
 12848  001A92  0E04               	movlw	4
 12849  001A94  0100               	movlb	0	; () banked
 12850  001A96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12851  001A98  0EA6               	movlw	166
 12852  001A9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12853  001A9C  0E00               	movlw	0
 12854  001A9E  0100               	movlb	0	; () banked
 12855  001AA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12856  001AA2  0E03               	movlw	3
 12857  001AA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12858  001AA6  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12859                           
 12860                           ;Test.c: 345: _delay((unsigned long)((750)*(32000000/4000.0)));
 12861  001AAA  0E1F               	movlw	31
 12862  001AAC  0100               	movlb	0	; () banked
 12863  001AAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12864  001AB0  0E71               	movlw	113
 12865  001AB2  0100               	movlb	0	; () banked
 12866  001AB4  6FAB               	movwf	??_BothServos& (0+255),b
 12867  001AB6  0E1E               	movlw	30
 12868  001AB8                     u7827:
 12869  001AB8  2EE8               	decfsz	wreg,f,c
 12870  001ABA  D7FE               	bra	u7827
 12871  001ABC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12872  001ABE  D7FC               	bra	u7827
 12873  001AC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12874  001AC2  D7FA               	bra	u7827
 12875  001AC4  F000               	nop	
 12876                           
 12877                           ;Test.c: 347: updateServoPosition(1700, 1);
 12878  001AC6  0E06               	movlw	6
 12879  001AC8  0100               	movlb	0	; () banked
 12880  001ACA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12881  001ACC  0EA4               	movlw	164
 12882  001ACE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12883  001AD0  0E00               	movlw	0
 12884  001AD2  0100               	movlb	0	; () banked
 12885  001AD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12886  001AD6  0E01               	movlw	1
 12887  001AD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12888  001ADA  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12889                           
 12890                           ;Test.c: 348: updateServoPosition(1350, 3);
 12891  001ADE  0E05               	movlw	5
 12892  001AE0  0100               	movlb	0	; () banked
 12893  001AE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12894  001AE4  0E46               	movlw	70
 12895  001AE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12896  001AE8  0E00               	movlw	0
 12897  001AEA  0100               	movlb	0	; () banked
 12898  001AEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12899  001AEE  0E03               	movlw	3
 12900  001AF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12901  001AF2  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12902                           
 12903                           ;Test.c: 349: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12904  001AF6  0E3D               	movlw	61
 12905  001AF8  0100               	movlb	0	; () banked
 12906  001AFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12907  001AFC  0EE1               	movlw	225
 12908  001AFE  0100               	movlb	0	; () banked
 12909  001B00  6FAB               	movwf	??_BothServos& (0+255),b
 12910  001B02  0E3F               	movlw	63
 12911  001B04                     u7837:
 12912  001B04  2EE8               	decfsz	wreg,f,c
 12913  001B06  D7FE               	bra	u7837
 12914  001B08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12915  001B0A  D7FC               	bra	u7837
 12916  001B0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12917  001B0E  D7FA               	bra	u7837
 12918  001B10  D000               	nop2	
 12919                           
 12920                           ;Test.c: 350: updateServoPosition(1190, 3);
 12921  001B12  0E04               	movlw	4
 12922  001B14  0100               	movlb	0	; () banked
 12923  001B16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12924  001B18  0EA6               	movlw	166
 12925  001B1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12926  001B1C  0E00               	movlw	0
 12927  001B1E  0100               	movlb	0	; () banked
 12928  001B20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12929  001B22  0E03               	movlw	3
 12930  001B24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12931  001B26  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12932                           
 12933                           ;Test.c: 351: _delay((unsigned long)((750)*(32000000/4000.0)));
 12934  001B2A  0E1F               	movlw	31
 12935  001B2C  0100               	movlb	0	; () banked
 12936  001B2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12937  001B30  0E71               	movlw	113
 12938  001B32  0100               	movlb	0	; () banked
 12939  001B34  6FAB               	movwf	??_BothServos& (0+255),b
 12940  001B36  0E1E               	movlw	30
 12941  001B38                     u7847:
 12942  001B38  2EE8               	decfsz	wreg,f,c
 12943  001B3A  D7FE               	bra	u7847
 12944  001B3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12945  001B3E  D7FC               	bra	u7847
 12946  001B40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12947  001B42  D7FA               	bra	u7847
 12948  001B44  F000               	nop	
 12949                           
 12950                           ;Test.c: 353: updateServoPosition(2000, 1);
 12951  001B46  0E07               	movlw	7
 12952  001B48  0100               	movlb	0	; () banked
 12953  001B4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12954  001B4C  0ED0               	movlw	208
 12955  001B4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12956  001B50  0E00               	movlw	0
 12957  001B52  0100               	movlb	0	; () banked
 12958  001B54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12959  001B56  0E01               	movlw	1
 12960  001B58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12961  001B5A  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12962                           
 12963                           ;Test.c: 354: updateServoPosition(1350, 3);
 12964  001B5E  0E05               	movlw	5
 12965  001B60  0100               	movlb	0	; () banked
 12966  001B62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12967  001B64  0E46               	movlw	70
 12968  001B66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12969  001B68  0E00               	movlw	0
 12970  001B6A  0100               	movlb	0	; () banked
 12971  001B6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12972  001B6E  0E03               	movlw	3
 12973  001B70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12974  001B72  EC2E  F01D         	call	_updateServoPosition	;wreg free
 12975                           
 12976                           ;Test.c: 355: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12977  001B76  0E3D               	movlw	61
 12978  001B78  0100               	movlb	0	; () banked
 12979  001B7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12980  001B7C  0EE1               	movlw	225
 12981  001B7E  0100               	movlb	0	; () banked
 12982  001B80  6FAB               	movwf	??_BothServos& (0+255),b
 12983  001B82  0E3F               	movlw	63
 12984  001B84                     u7857:
 12985  001B84  2EE8               	decfsz	wreg,f,c
 12986  001B86  D7FE               	bra	u7857
 12987  001B88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12988  001B8A  D7FC               	bra	u7857
 12989  001B8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12990  001B8E  D7FA               	bra	u7857
 12991  001B90  D000               	nop2	
 12992                           
 12993                           ;Test.c: 356: updateServoPosition(1190, 3);
 12994  001B92  0E04               	movlw	4
 12995  001B94  0100               	movlb	0	; () banked
 12996  001B96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12997  001B98  0EA6               	movlw	166
 12998  001B9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12999  001B9C  0E00               	movlw	0
 13000  001B9E  0100               	movlb	0	; () banked
 13001  001BA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13002  001BA2  0E03               	movlw	3
 13003  001BA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13004  001BA6  EC2E  F01D         	call	_updateServoPosition	;wreg free
 13005                           
 13006                           ;Test.c: 357: _delay((unsigned long)((750)*(32000000/4000.0)));
 13007  001BAA  0E1F               	movlw	31
 13008  001BAC  0100               	movlb	0	; () banked
 13009  001BAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13010  001BB0  0E71               	movlw	113
 13011  001BB2  0100               	movlb	0	; () banked
 13012  001BB4  6FAB               	movwf	??_BothServos& (0+255),b
 13013  001BB6  0E1E               	movlw	30
 13014  001BB8                     u7867:
 13015  001BB8  2EE8               	decfsz	wreg,f,c
 13016  001BBA  D7FE               	bra	u7867
 13017  001BBC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13018  001BBE  D7FC               	bra	u7867
 13019  001BC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13020  001BC2  D7FA               	bra	u7867
 13021  001BC4  F000               	nop	
 13022                           
 13023                           ;Test.c: 359: TMR1ON = 0;
 13024  001BC6  90CD               	bcf	4045,0,c	;volatile
 13025                           
 13026                           ;Test.c: 360: TMR3ON = 0;
 13027  001BC8  90B1               	bcf	4017,0,c	;volatile
 13028                           
 13029                           ;Test.c: 361: (INTCONbits.GIE = 0);
 13030  001BCA  9EF2               	bcf	intcon,7,c	;volatile
 13031  001BCC  0012               	return		;funcret
 13032  001BCE                     __end_of_BothServos:
 13033                           	opt stack 0
 13034                           tblptru	equ	0xFF8
 13035                           tblptrh	equ	0xFF7
 13036                           tblptrl	equ	0xFF6
 13037                           tablat	equ	0xFF5
 13038                           prodh	equ	0xFF4
 13039                           prodl	equ	0xFF3
 13040                           intcon	equ	0xFF2
 13041                           intcon2	equ	0xFF1
 13042                           intcon3	equ	0xFF0
 13043                           postinc0	equ	0xFEE
 13044                           wreg	equ	0xFE8
 13045                           postdec1	equ	0xFE5
 13046                           fsr1l	equ	0xFE1
 13047                           indf2	equ	0xFDF
 13048                           postinc2	equ	0xFDE
 13049                           postdec2	equ	0xFDD
 13050                           fsr2h	equ	0xFDA
 13051                           fsr2l	equ	0xFD9
 13052                           status	equ	0xFD8
 13053                           
 13054 ;; *************** function _printf *****************
 13055 ;; Defined at:
 13056 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13059 ;;		 -> STR_112(17), STR_111(17), STR_110(10), STR_109(13), 
 13060 ;;		 -> STR_108(18), STR_107(18), STR_106(17), STR_105(15), 
 13061 ;;		 -> STR_104(15), STR_103(15), STR_102(17), STR_101(17), 
 13062 ;;		 -> STR_100(17), STR_99(16), STR_98(17), STR_97(17), 
 13063 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 13064 ;;		 -> STR_92(15), STR_91(11), STR_90(17), STR_89(11), 
 13065 ;;		 -> STR_88(17), STR_87(14), STR_86(15), STR_85(14), 
 13066 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 13067 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 13068 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 13069 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 13070 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 13071 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 13072 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 13073 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 13074 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 13075 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 13076 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 13077 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 13078 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 13079 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 13080 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 13081 ;; Auto vars:     Size  Location     Type
 13082 ;;  tmpval          4    0        struct .
 13083 ;;  width           2   41[BANK0 ] int 
 13084 ;;  val             2   37[BANK0 ] unsigned int 
 13085 ;;  len             2   35[BANK0 ] unsigned int 
 13086 ;;  ap              2   33[BANK0 ] PTR void [1]
 13087 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13088 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13089 ;;		 -> STR_113(7), count_total(2), printRTC@month(4), UI@month(4), 
 13090 ;;  c               1   40[BANK0 ] char 
 13091 ;;  flag            1   39[BANK0 ] unsigned char 
 13092 ;;  prec            1   30[BANK0 ] char 
 13093 ;; Return value:  Size  Location     Type
 13094 ;;                  2   14[BANK0 ] int 
 13095 ;; Registers used:
 13096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13097 ;; Tracked objects:
 13098 ;;		On entry : 0/0
 13099 ;;		On exit  : 0/0
 13100 ;;		Unchanged: 0/0
 13101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13102 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;Total ram usage:       29 bytes
 13107 ;; Hardware stack levels used:    1
 13108 ;; Hardware stack levels required when called:    9
 13109 ;; This function calls:
 13110 ;;		___lwdiv
 13111 ;;		___lwmod
 13112 ;;		___wmul
 13113 ;;		_isdigit
 13114 ;;		_putch
 13115 ;; This function is called by:
 13116 ;;		_UI
 13117 ;;		_change_state_to_menu_start
 13118 ;;		_change_state_to_menu_12
 13119 ;;		_change_state_to_menu_22
 13120 ;;		_printRTC
 13121 ;;		_EEPROM_write
 13122 ;;		_Test
 13123 ;;		_algorithmTest
 13124 ;;		_sensorTest
 13125 ;;		_actuatorTest
 13126 ;;		_BothServos
 13127 ;;		_PortTestA5
 13128 ;;		_SolenoidTestA5
 13129 ;;		_ToggleTestA5
 13130 ;; This function uses a non-reentrant model
 13131 ;;
 13132                           
 13133                           	psect	text47
 13134  001138                     __ptext47:
 13135                           	opt stack 0
 13136  001138                     _printf:
 13137                           	opt stack 18
 13138                           
 13139                           ;doprnt.c: 466: va_list ap;
 13140                           ;doprnt.c: 499: signed char c;
 13141                           ;doprnt.c: 501: int width;
 13142                           ;doprnt.c: 506: signed char prec;
 13143                           ;doprnt.c: 508: unsigned char flag;
 13144                           ;doprnt.c: 523: union {
 13145                           ;doprnt.c: 524: unsigned long vd;
 13146                           ;doprnt.c: 525: double integ;
 13147                           ;doprnt.c: 526: } tmpval;
 13148                           ;doprnt.c: 528: unsigned int val;
 13149                           ;doprnt.c: 529: unsigned len;
 13150                           ;doprnt.c: 530: const char * cp;
 13151                           ;doprnt.c: 533: *ap = __va_start();
 13152                           
 13153                           ;incstack = 0
 13154  001138  0E90               	movlw	low (?_printf+2)
 13155  00113A  0100               	movlb	0	; () banked
 13156  00113C  6FA1               	movwf	printf@ap& (0+255),b
 13157  00113E  0E00               	movlw	high (?_printf+2)
 13158  001140  0100               	movlb	0	; () banked
 13159  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13160                           
 13161                           ;doprnt.c: 536: while(c = *f++) {
 13162  001144  D205               	goto	l5448
 13163  001146                     l5318:
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;doprnt.c: 538: if(c != '%')
 13167  001146  0E25               	movlw	37
 13168  001148  0100               	movlb	0	; () banked
 13169  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 13170  00114C  B4D8               	btfsc	status,2,c
 13171  00114E  D005               	goto	l5322
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;doprnt.c: 540: {
 13175                           ;doprnt.c: 541: (putch(c) );
 13176  001150  0100               	movlb	0	; () banked
 13177  001152  51A8               	movf	printf@c& (0+255),w,b
 13178  001154  ECCC  F022         	call	_putch
 13179                           
 13180                           ;doprnt.c: 542: continue;
 13181  001158  D1FB               	goto	l5448
 13182  00115A                     l5322:
 13183                           
 13184                           ;doprnt.c: 543: }
 13185                           ;doprnt.c: 546: width = 0;
 13186  00115A  0E00               	movlw	0
 13187  00115C  0100               	movlb	0	; () banked
 13188  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 13189  001160  0E00               	movlw	0
 13190  001162  6FA9               	movwf	printf@width& (0+255),b
 13191                           
 13192                           ;doprnt.c: 548: flag = 0;
 13193  001164  0E00               	movlw	0
 13194  001166  0100               	movlb	0	; () banked
 13195  001168  6FA7               	movwf	printf@flag& (0+255),b
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;doprnt.c: 551: switch(*f) {
 13199                           
 13200                           ;doprnt.c: 550: for(;;) {
 13201  00116A  D005               	goto	l5328
 13202  00116C                     l5324:
 13203                           
 13204                           ;doprnt.c: 580: flag |= 0x04;
 13205  00116C  0100               	movlb	0	; () banked
 13206  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 13207                           
 13208                           ;doprnt.c: 581: f++;
 13209  001170  0100               	movlb	0	; () banked
 13210  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 13211  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13212  001176                     l5328:
 13213  001176  C08E  FFF6         	movff	printf@f,tblptrl
 13214  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13215  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13216  00117E  6AF8               	clrf	tblptru,c
 13217  001180                     	endif
 13218  001180                     	if	0	;tblptru may be non-zero
 13219  001180                     	endif
 13220  001180  0008               	tblrd		*
 13221  001182  50F5               	movf	tablat,w,c
 13222                           
 13223                           ; Switch size 1, requested type "space"
 13224                           ; Number of cases is 1, Range of values is 48 to 48
 13225                           ; switch strategies available:
 13226                           ; Name         Instructions Cycles
 13227                           ; simple_byte            4     3 (average)
 13228                           ;	Chosen strategy is simple_byte
 13229  001184  0A30               	xorlw	48	; case 48
 13230  001186  B4D8               	btfsc	status,2,c
 13231  001188  D7F1               	goto	l5324
 13232                           
 13233                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13234                           
 13235                           ;doprnt.c: 586: }
 13236                           
 13237                           ;doprnt.c: 585: break;
 13238  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 13239  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 13240  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13241  001192  6AF8               	clrf	tblptru,c
 13242  001194                     	endif
 13243  001194                     	if	0	;tblptru may be non-zero
 13244  001194                     	endif
 13245  001194  0008               	tblrd		*
 13246  001196  50F5               	movf	tablat,w,c
 13247  001198  ECDF  F021         	call	_isdigit
 13248  00119C  A0D8               	btfss	status,0,c
 13249  00119E  D0D2               	goto	l5376
 13250                           
 13251                           ;doprnt.c: 598: width = 0;
 13252  0011A0  0E00               	movlw	0
 13253  0011A2  0100               	movlb	0	; () banked
 13254  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13255  0011A6  0E00               	movlw	0
 13256  0011A8  6FA9               	movwf	printf@width& (0+255),b
 13257  0011AA                     l5334:
 13258                           
 13259                           ;doprnt.c: 600: width *= 10;
 13260  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13261  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13262  0011B2  0E00               	movlw	0
 13263  0011B4  0100               	movlb	0	; () banked
 13264  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13265  0011B8  0E0A               	movlw	10
 13266  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13267  0011BC  EC79  F020         	call	___wmul	;wreg free
 13268  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 13269  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13270                           
 13271                           ;doprnt.c: 601: width += *f++ - '0';
 13272  0011C8  0ED0               	movlw	208
 13273  0011CA  0100               	movlb	0	; () banked
 13274  0011CC  6F9A               	movwf	??_printf& (0+255),b
 13275  0011CE  0EFF               	movlw	255
 13276  0011D0  0100               	movlb	0	; () banked
 13277  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 13278  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 13279  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 13280  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13281  0011DC  6AF8               	clrf	tblptru,c
 13282  0011DE                     	endif
 13283  0011DE                     	if	0	;tblptru may be non-zero
 13284  0011DE                     	endif
 13285  0011DE  0008               	tblrd		*
 13286  0011E0  50F5               	movf	tablat,w,c
 13287  0011E2  0100               	movlb	0	; () banked
 13288  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 13289  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 13290  0011E8  0100               	movlb	0	; () banked
 13291  0011EA  519A               	movf	??_printf& (0+255),w,b
 13292  0011EC  0100               	movlb	0	; () banked
 13293  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 13294  0011F0  0100               	movlb	0	; () banked
 13295  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 13296  0011F4  0100               	movlb	0	; () banked
 13297  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13298  0011F8  0100               	movlb	0	; () banked
 13299  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 13300  0011FC  0100               	movlb	0	; () banked
 13301  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 13302  001200  0100               	movlb	0	; () banked
 13303  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 13304  001204  0100               	movlb	0	; () banked
 13305  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13306                           
 13307                           ; BSR set to: 0
 13308  001208  0100               	movlb	0	; () banked
 13309  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 13310  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13311                           
 13312                           ; BSR set to: 0
 13313                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13314  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 13315  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 13316  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13317  001216  6AF8               	clrf	tblptru,c
 13318  001218                     	endif
 13319  001218                     	if	0	;tblptru may be non-zero
 13320  001218                     	endif
 13321  001218  0008               	tblrd		*
 13322  00121A  50F5               	movf	tablat,w,c
 13323  00121C  ECDF  F021         	call	_isdigit
 13324  001220  A0D8               	btfss	status,0,c
 13325  001222  D090               	goto	l5376
 13326  001224  D7C2               	goto	l5334
 13327  001226                     l5342:
 13328                           
 13329                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13330  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 13331  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13332  00122E  CFDE F09F          	movff	postinc2,printf@cp
 13333  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 13334  001236  0E02               	movlw	2
 13335  001238  0100               	movlb	0	; () banked
 13336  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 13337  00123C  0E00               	movlw	0
 13338  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13339                           
 13340                           ; BSR set to: 0
 13341                           ;doprnt.c: 740: if(!cp)
 13342  001240  0100               	movlb	0	; () banked
 13343  001242  519F               	movf	printf@cp& (0+255),w,b
 13344  001244  0100               	movlb	0	; () banked
 13345  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13346  001248  A4D8               	btfss	status,2,c
 13347  00124A  D006               	goto	l5350
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;doprnt.c: 741: cp = "(null)";
 13351  00124C  0EB5               	movlw	low STR_113
 13352  00124E  0100               	movlb	0	; () banked
 13353  001250  6F9F               	movwf	printf@cp& (0+255),b
 13354  001252  0EFF               	movlw	high STR_113
 13355  001254  0100               	movlb	0	; () banked
 13356  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13357  001258                     l5350:
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;doprnt.c: 745: len = 0;
 13361  001258  0E00               	movlw	0
 13362  00125A  0100               	movlb	0	; () banked
 13363  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 13364  00125E  0E00               	movlw	0
 13365  001260  6FA3               	movwf	printf@len& (0+255),b
 13366                           
 13367                           ;doprnt.c: 746: while(cp[len])
 13368  001262  D003               	goto	l5354
 13369  001264                     l5352:
 13370                           
 13371                           ;doprnt.c: 747: len++;
 13372  001264  0100               	movlb	0	; () banked
 13373  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 13374  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13375  00126A                     l5354:
 13376                           
 13377                           ; BSR set to: 0
 13378  00126A  0100               	movlb	0	; () banked
 13379  00126C  51A3               	movf	printf@len& (0+255),w,b
 13380  00126E  0100               	movlb	0	; () banked
 13381  001270  259F               	addwf	printf@cp& (0+255),w,b
 13382  001272  0100               	movlb	0	; () banked
 13383  001274  6F9A               	movwf	??_printf& (0+255),b
 13384  001276  0100               	movlb	0	; () banked
 13385  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 13386  00127A  0100               	movlb	0	; () banked
 13387  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13388  00127E  0100               	movlb	0	; () banked
 13389  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 13390  001282  C09A  FFF6         	movff	??_printf,tblptrl
 13391  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 13392  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 13393  00128C  6EF8               	movwf	tblptru,c
 13394  00128E  0E0F               	movlw	(high __ramtop+-1)
 13395  001290  64F7               	cpfsgt	tblptrh,c
 13396  001292  D003               	bra	u3747
 13397  001294  0008               	tblrd		*
 13398  001296  50F5               	movf	tablat,w,c
 13399  001298  D005               	bra	u3740
 13400  00129A                     u3747:
 13401  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13402  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13403  0012A2  50EF               	movf	indf0,w,c
 13404  0012A4                     u3740:
 13405  0012A4  0900               	iorlw	0
 13406  0012A6  A4D8               	btfss	status,2,c
 13407  0012A8  D7DD               	goto	l5352
 13408                           
 13409                           ;doprnt.c: 757: if(width > len)
 13410  0012AA  0100               	movlb	0	; () banked
 13411  0012AC  51A9               	movf	printf@width& (0+255),w,b
 13412  0012AE  0100               	movlb	0	; () banked
 13413  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 13414  0012B2  0100               	movlb	0	; () banked
 13415  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 13416  0012B6  0100               	movlb	0	; () banked
 13417  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13418  0012BA  B0D8               	btfsc	status,0,c
 13419  0012BC  D009               	goto	l5360
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;doprnt.c: 758: width -= len;
 13423  0012BE  0100               	movlb	0	; () banked
 13424  0012C0  51A3               	movf	printf@len& (0+255),w,b
 13425  0012C2  0100               	movlb	0	; () banked
 13426  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 13427  0012C6  0100               	movlb	0	; () banked
 13428  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 13429  0012CA  0100               	movlb	0	; () banked
 13430  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13431  0012CE  D009               	goto	l5364
 13432  0012D0                     l5360:
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;doprnt.c: 759: else
 13436                           ;doprnt.c: 760: width = 0;
 13437  0012D0  0E00               	movlw	0
 13438  0012D2  0100               	movlb	0	; () banked
 13439  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13440  0012D6  0E00               	movlw	0
 13441  0012D8  6FA9               	movwf	printf@width& (0+255),b
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;doprnt.c: 764: while(width--)
 13445  0012DA  D003               	goto	l5364
 13446  0012DC                     l5362:
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;doprnt.c: 765: (putch(' ') );
 13450  0012DC  0E20               	movlw	32
 13451  0012DE  ECCC  F022         	call	_putch
 13452  0012E2                     l5364:
 13453  0012E2  0100               	movlb	0	; () banked
 13454  0012E4  07A9               	decf	printf@width& (0+255),f,b
 13455  0012E6  A0D8               	btfss	status,0,c
 13456  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13457  0012EA  0100               	movlb	0	; () banked
 13458  0012EC  29A9               	incf	printf@width& (0+255),w,b
 13459  0012EE  E1F6               	bnz	l5362
 13460  0012F0  0100               	movlb	0	; () banked
 13461  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 13462  0012F4  B4D8               	btfsc	status,2,c
 13463  0012F6  D017               	goto	l5370
 13464  0012F8  D7F1               	goto	l5362
 13465  0012FA                     l5366:
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;doprnt.c: 768: (putch(*cp++) );
 13469  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 13470  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13471  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 13472  001304  6EF8               	movwf	tblptru,c
 13473  001306  0E0F               	movlw	(high __ramtop+-1)
 13474  001308  64F7               	cpfsgt	tblptrh,c
 13475  00130A  D003               	bra	u3787
 13476  00130C  0008               	tblrd		*
 13477  00130E  50F5               	movf	tablat,w,c
 13478  001310  D005               	bra	u3780
 13479  001312                     u3787:
 13480  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 13481  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 13482  00131A  50EF               	movf	indf0,w,c
 13483  00131C                     u3780:
 13484  00131C  ECCC  F022         	call	_putch
 13485  001320  0100               	movlb	0	; () banked
 13486  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 13487  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13488  001326                     l5370:
 13489                           
 13490                           ; BSR set to: 0
 13491  001326  0100               	movlb	0	; () banked
 13492  001328  07A3               	decf	printf@len& (0+255),f,b
 13493  00132A  A0D8               	btfss	status,0,c
 13494  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 13495  00132E  0100               	movlb	0	; () banked
 13496  001330  29A3               	incf	printf@len& (0+255),w,b
 13497  001332  E1E3               	bnz	l5366
 13498  001334  0100               	movlb	0	; () banked
 13499  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 13500  001338  B4D8               	btfsc	status,2,c
 13501  00133A  D10A               	goto	l5448
 13502  00133C  D7DE               	goto	l5366
 13503  00133E                     l5372:
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;doprnt.c: 818: flag |= 0x40;
 13507  00133E  0100               	movlb	0	; () banked
 13508  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;doprnt.c: 822: }
 13512                           
 13513                           ;doprnt.c: 819: break;
 13514  001342  D01D               	goto	l1228
 13515  001344                     l5376:
 13516  001344  C08E  FFF6         	movff	printf@f,tblptrl
 13517  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 13518  00134C  0100               	movlb	0	; () banked
 13519  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 13520  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13521  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13522  001352  6AF8               	clrf	tblptru,c
 13523  001354                     	endif
 13524  001354                     	if	0	;tblptru may be non-zero
 13525  001354                     	endif
 13526  001354  0008               	tblrd		*
 13527  001356  CFF5 F0A8          	movff	tablat,printf@c
 13528  00135A  0100               	movlb	0	; () banked
 13529  00135C  51A8               	movf	printf@c& (0+255),w,b
 13530                           
 13531                           ; Switch size 1, requested type "space"
 13532                           ; Number of cases is 5, Range of values is 0 to 117
 13533                           ; switch strategies available:
 13534                           ; Name         Instructions Cycles
 13535                           ; simple_byte           16     9 (average)
 13536                           ;	Chosen strategy is simple_byte
 13537  00135E  0A00               	xorlw	0	; case 0
 13538  001360  B4D8               	btfsc	status,2,c
 13539  001362  0012               	return	
 13540  001364  0A64               	xorlw	100	; case 100
 13541  001366  B4D8               	btfsc	status,2,c
 13542  001368  D00A               	goto	l1228
 13543  00136A  0A0D               	xorlw	13	; case 105
 13544  00136C  B4D8               	btfsc	status,2,c
 13545  00136E  D007               	goto	l1228
 13546  001370  0A1A               	xorlw	26	; case 115
 13547  001372  B4D8               	btfsc	status,2,c
 13548  001374  D758               	goto	l5342
 13549  001376  0A06               	xorlw	6	; case 117
 13550  001378  B4D8               	btfsc	status,2,c
 13551  00137A  D7E1               	goto	l5372
 13552  00137C  D0E9               	goto	l5448
 13553  00137E                     l1228:
 13554                           
 13555                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13556  00137E  0100               	movlb	0	; () banked
 13557  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13558  001382  D019               	goto	l5388
 13559                           
 13560                           ; BSR set to: 0
 13561                           ;doprnt.c: 1253: {
 13562                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13563  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13564  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13565  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13566  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13567                           
 13568                           ; BSR set to: 0
 13569  001394  0E02               	movlw	2
 13570  001396  0100               	movlb	0	; () banked
 13571  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13572  00139A  0E00               	movlw	0
 13573  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;doprnt.c: 1261: if((int)val < 0) {
 13577  00139E  0100               	movlb	0	; () banked
 13578  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13579  0013A2  D016               	goto	l5392
 13580                           
 13581                           ; BSR set to: 0
 13582                           ;doprnt.c: 1262: flag |= 0x03;
 13583  0013A4  0E03               	movlw	3
 13584  0013A6  0100               	movlb	0	; () banked
 13585  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;doprnt.c: 1263: val = -val;
 13589  0013AA  0100               	movlb	0	; () banked
 13590  0013AC  6DA5               	negf	printf@val& (0+255),b
 13591  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13592  0013B0  B0D8               	btfsc	status,0,c
 13593  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13594                           
 13595                           ; BSR set to: 0
 13596                           ;doprnt.c: 1264: }
 13597                           ;doprnt.c: 1266: }
 13598  0013B4  D00D               	goto	l5392
 13599  0013B6                     l5388:
 13600                           
 13601                           ; BSR set to: 0
 13602                           ;doprnt.c: 1268: else
 13603                           ;doprnt.c: 1273: {
 13604                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13605  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13606  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13607  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13608  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13609                           
 13610                           ; BSR set to: 0
 13611  0013C6  0E02               	movlw	2
 13612  0013C8  0100               	movlb	0	; () banked
 13613  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13614  0013CC  0E00               	movlw	0
 13615  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13616  0013D0                     l5392:
 13617                           
 13618                           ; BSR set to: 0
 13619                           ;doprnt.c: 1287: }
 13620                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13621  0013D0  0E01               	movlw	1
 13622  0013D2  0100               	movlb	0	; () banked
 13623  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13624  0013D6                     l5394:
 13625                           
 13626                           ; BSR set to: 0
 13627  0013D6  0E05               	movlw	5
 13628  0013D8  0100               	movlb	0	; () banked
 13629  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13630  0013DC  B4D8               	btfsc	status,2,c
 13631  0013DE  D019               	goto	l5406
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;doprnt.c: 1306: if(val < dpowers[c])
 13635                           
 13636                           ; BSR set to: 0
 13637                           
 13638                           ; BSR set to: 0
 13639  0013E0  0100               	movlb	0	; () banked
 13640  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13641  0013E4  0D02               	mullw	2
 13642  0013E6  0E38               	movlw	low _dpowers
 13643  0013E8  24F3               	addwf	prodl,w,c
 13644  0013EA  6EF6               	movwf	tblptrl,c
 13645  0013EC  0EFB               	movlw	high _dpowers
 13646  0013EE  20F4               	addwfc	prodh,w,c
 13647  0013F0  6EF7               	movwf	tblptrh,c
 13648  0013F2                     	if	1	;There are 3 active tblptr bytes
 13649  0013F2  6AF8               	clrf	tblptru,c
 13650  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13651  0013F6  22F8               	addwfc	tblptru,f,c
 13652  0013F8                     	endif
 13653  0013F8  0009               	tblrd		*+
 13654  0013FA  50F5               	movf	tablat,w,c
 13655  0013FC  0100               	movlb	0	; () banked
 13656  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13657  001400  0009               	tblrd		*+
 13658  001402  50F5               	movf	tablat,w,c
 13659  001404  0100               	movlb	0	; () banked
 13660  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13661  001408  A0D8               	btfss	status,0,c
 13662  00140A  D003               	goto	l5406
 13663                           
 13664                           ; BSR set to: 0
 13665                           
 13666                           ; BSR set to: 0
 13667                           
 13668                           ; BSR set to: 0
 13669                           ;doprnt.c: 1307: break;
 13670  00140C  0100               	movlb	0	; () banked
 13671  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13672  001410  D7E2               	goto	l5394
 13673  001412                     l5406:
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13677  001412  0100               	movlb	0	; () banked
 13678  001414  51A9               	movf	printf@width& (0+255),w,b
 13679  001416  0100               	movlb	0	; () banked
 13680  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13681  00141A  B4D8               	btfsc	status,2,c
 13682  00141C  D00B               	goto	l5412
 13683                           
 13684                           ; BSR set to: 0
 13685  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13686  001422  0E03               	movlw	3
 13687  001424  0100               	movlb	0	; () banked
 13688  001426  179A               	andwf	??_printf& (0+255),f,b
 13689  001428  B4D8               	btfsc	status,2,c
 13690  00142A  D004               	goto	l5412
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;doprnt.c: 1346: width--;
 13694  00142C  0100               	movlb	0	; () banked
 13695  00142E  07A9               	decf	printf@width& (0+255),f,b
 13696  001430  A0D8               	btfss	status,0,c
 13697  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13698  001434                     l5412:
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;doprnt.c: 1381: if(width > c)
 13702  001434  0E80               	movlw	128
 13703  001436  0100               	movlb	0	; () banked
 13704  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13705  00143A  0E7F               	movlw	127
 13706  00143C  0100               	movlb	0	; () banked
 13707  00143E  6F9A               	movwf	??_printf& (0+255),b
 13708  001440  0100               	movlb	0	; () banked
 13709  001442  51A9               	movf	printf@width& (0+255),w,b
 13710  001444  0100               	movlb	0	; () banked
 13711  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13712  001448  0100               	movlb	0	; () banked
 13713  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13714  00144C  0A80               	xorlw	128
 13715  00144E  0100               	movlb	0	; () banked
 13716  001450  599A               	subwfb	??_printf& (0+255),w,b
 13717  001452  B0D8               	btfsc	status,0,c
 13718  001454  D00B               	goto	l5416
 13719                           
 13720                           ; BSR set to: 0
 13721                           ;doprnt.c: 1382: width -= c;
 13722  001456  0100               	movlb	0	; () banked
 13723  001458  51A8               	movf	printf@c& (0+255),w,b
 13724  00145A  0100               	movlb	0	; () banked
 13725  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13726  00145E  0E00               	movlw	0
 13727  001460  0100               	movlb	0	; () banked
 13728  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13729  001464  0EFF               	movlw	255
 13730  001466  0100               	movlb	0	; () banked
 13731  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13732  00146A  D005               	goto	l5418
 13733  00146C                     l5416:
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;doprnt.c: 1383: else
 13737                           ;doprnt.c: 1384: width = 0;
 13738  00146C  0E00               	movlw	0
 13739  00146E  0100               	movlb	0	; () banked
 13740  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13741  001472  0E00               	movlw	0
 13742  001474  6FA9               	movwf	printf@width& (0+255),b
 13743  001476                     l5418:
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;doprnt.c: 1387: if(flag & 0x04) {
 13747  001476  0100               	movlb	0	; () banked
 13748  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13749  00147A  D018               	goto	l5430
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;doprnt.c: 1392: if(flag & 0x03)
 13753  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13754  001480  0E03               	movlw	3
 13755  001482  0100               	movlb	0	; () banked
 13756  001484  179A               	andwf	??_printf& (0+255),f,b
 13757  001486  B4D8               	btfsc	status,2,c
 13758  001488  D003               	goto	l5424
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;doprnt.c: 1393: (putch('-') );
 13762  00148A  0E2D               	movlw	45
 13763  00148C  ECCC  F022         	call	_putch
 13764  001490                     l5424:
 13765                           
 13766                           ;doprnt.c: 1415: if(width)
 13767  001490  0100               	movlb	0	; () banked
 13768  001492  51A9               	movf	printf@width& (0+255),w,b
 13769  001494  0100               	movlb	0	; () banked
 13770  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13771  001498  B4D8               	btfsc	status,2,c
 13772  00149A  D025               	goto	l5440
 13773                           
 13774                           ; BSR set to: 0
 13775                           ;doprnt.c: 1417: (putch('0') );
 13776                           
 13777                           ; BSR set to: 0
 13778                           
 13779                           ;doprnt.c: 1416: do
 13780  00149C  0E30               	movlw	48
 13781  00149E  ECCC  F022         	call	_putch
 13782                           
 13783                           ;doprnt.c: 1418: while(--width);
 13784  0014A2  0100               	movlb	0	; () banked
 13785  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13786  0014A6  A0D8               	btfss	status,0,c
 13787  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13788  0014AA  D7F2               	goto	l5424
 13789  0014AC                     l5430:
 13790                           
 13791                           ; BSR set to: 0
 13792                           ;doprnt.c: 1422: {
 13793                           ;doprnt.c: 1424: if(width
 13794                           ;doprnt.c: 1428: )
 13795  0014AC  0100               	movlb	0	; () banked
 13796  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13797  0014B0  0100               	movlb	0	; () banked
 13798  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13799  0014B4  B4D8               	btfsc	status,2,c
 13800  0014B6  D00D               	goto	l5436
 13801  0014B8                     l5432:
 13802                           
 13803                           ; BSR set to: 0
 13804                           ;doprnt.c: 1430: (putch(' ') );
 13805  0014B8  0E20               	movlw	32
 13806  0014BA  ECCC  F022         	call	_putch
 13807                           
 13808                           ;doprnt.c: 1431: while(--width);
 13809  0014BE  0100               	movlb	0	; () banked
 13810  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13811  0014C2  A0D8               	btfss	status,0,c
 13812  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13813  0014C6  0100               	movlb	0	; () banked
 13814  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13815  0014CA  0100               	movlb	0	; () banked
 13816  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13817  0014CE  A4D8               	btfss	status,2,c
 13818  0014D0  D7F3               	goto	l5432
 13819  0014D2                     l5436:
 13820                           
 13821                           ; BSR set to: 0
 13822                           ;doprnt.c: 1438: if(flag & 0x03)
 13823  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13824  0014D6  0E03               	movlw	3
 13825  0014D8  0100               	movlb	0	; () banked
 13826  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13827  0014DC  B4D8               	btfsc	status,2,c
 13828  0014DE  D003               	goto	l5440
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;doprnt.c: 1439: (putch('-') );
 13832  0014E0  0E2D               	movlw	45
 13833  0014E2  ECCC  F022         	call	_putch
 13834  0014E6                     l5440:
 13835                           
 13836                           ;doprnt.c: 1469: }
 13837                           ;doprnt.c: 1472: prec = c;
 13838  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13839                           
 13840                           ;doprnt.c: 1474: while(prec--) {
 13841  0014EA  D02C               	goto	l5446
 13842  0014EC                     l5442:
 13843                           
 13844                           ;doprnt.c: 1478: {
 13845                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13846  0014EC  0100               	movlb	0	; () banked
 13847  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13848  0014F0  0D02               	mullw	2
 13849  0014F2  0E38               	movlw	low _dpowers
 13850  0014F4  24F3               	addwf	prodl,w,c
 13851  0014F6  6EF6               	movwf	tblptrl,c
 13852  0014F8  0EFB               	movlw	high _dpowers
 13853  0014FA  20F4               	addwfc	prodh,w,c
 13854  0014FC  6EF7               	movwf	tblptrh,c
 13855  0014FE                     	if	1	;There are 3 active tblptr bytes
 13856  0014FE  6AF8               	clrf	tblptru,c
 13857  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13858  001502  22F8               	addwfc	tblptru,f,c
 13859  001504                     	endif
 13860  001504  0009               	tblrd		*+
 13861  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13862  00150A  000A               	tblrd		*-
 13863  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13864  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13865  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13866  001518  ECF2  F01C         	call	___lwdiv	;wreg free
 13867  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13868  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13869  001524  0E00               	movlw	0
 13870  001526  0100               	movlb	0	; () banked
 13871  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13872  00152A  0E0A               	movlw	10
 13873  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13874  00152E  EC0A  F01E         	call	___lwmod	;wreg free
 13875  001532  0100               	movlb	0	; () banked
 13876  001534  5187               	movf	?___lwmod& (0+255),w,b
 13877  001536  0F30               	addlw	48
 13878  001538  0100               	movlb	0	; () banked
 13879  00153A  6FA8               	movwf	printf@c& (0+255),b
 13880                           
 13881                           ; BSR set to: 0
 13882                           ;doprnt.c: 1523: }
 13883                           ;doprnt.c: 1524: (putch(c) );
 13884  00153C  0100               	movlb	0	; () banked
 13885  00153E  51A8               	movf	printf@c& (0+255),w,b
 13886  001540  ECCC  F022         	call	_putch
 13887  001544                     l5446:
 13888  001544  0100               	movlb	0	; () banked
 13889  001546  079E               	decf	printf@prec& (0+255),f,b
 13890  001548  0100               	movlb	0	; () banked
 13891  00154A  299E               	incf	printf@prec& (0+255),w,b
 13892  00154C  A4D8               	btfss	status,2,c
 13893  00154E  D7CE               	goto	l5442
 13894  001550                     l5448:
 13895  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13896  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13897  001558  0100               	movlb	0	; () banked
 13898  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13899  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13900  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13901  00155E  6AF8               	clrf	tblptru,c
 13902  001560                     	endif
 13903  001560                     	if	0	;tblptru may be non-zero
 13904  001560                     	endif
 13905  001560  0008               	tblrd		*
 13906  001562  CFF5 F0A8          	movff	tablat,printf@c
 13907  001566  0100               	movlb	0	; () banked
 13908  001568  51A8               	movf	printf@c& (0+255),w,b
 13909  00156A  B4D8               	btfsc	status,2,c
 13910  00156C  0012               	return	
 13911  00156E  D5EB               	goto	l5318
 13912  001570                     __end_of_printf:
 13913                           	opt stack 0
 13914                           tblptru	equ	0xFF8
 13915                           tblptrh	equ	0xFF7
 13916                           tblptrl	equ	0xFF6
 13917                           tablat	equ	0xFF5
 13918                           prodh	equ	0xFF4
 13919                           prodl	equ	0xFF3
 13920                           intcon	equ	0xFF2
 13921                           intcon2	equ	0xFF1
 13922                           intcon3	equ	0xFF0
 13923                           indf0	equ	0xFEF
 13924                           postinc0	equ	0xFEE
 13925                           fsr0h	equ	0xFEA
 13926                           fsr0l	equ	0xFE9
 13927                           wreg	equ	0xFE8
 13928                           postdec1	equ	0xFE5
 13929                           fsr1l	equ	0xFE1
 13930                           indf2	equ	0xFDF
 13931                           postinc2	equ	0xFDE
 13932                           postdec2	equ	0xFDD
 13933                           fsr2h	equ	0xFDA
 13934                           fsr2l	equ	0xFD9
 13935                           status	equ	0xFD8
 13936                           
 13937 ;; *************** function _putch *****************
 13938 ;; Defined at:
 13939 ;;		line 20 in file "lcd.c"
 13940 ;; Parameters:    Size  Location     Type
 13941 ;;  data            1    wreg     unsigned char 
 13942 ;; Auto vars:     Size  Location     Type
 13943 ;;  data            1    2[BANK0 ] unsigned char 
 13944 ;; Return value:  Size  Location     Type
 13945 ;;                  1    wreg      void 
 13946 ;; Registers used:
 13947 ;;		wreg, status,2, status,0, cstack
 13948 ;; Tracked objects:
 13949 ;;		On entry : 0/0
 13950 ;;		On exit  : 0/0
 13951 ;;		Unchanged: 0/0
 13952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13954 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13956 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13957 ;;Total ram usage:        1 bytes
 13958 ;; Hardware stack levels used:    1
 13959 ;; Hardware stack levels required when called:    8
 13960 ;; This function calls:
 13961 ;;		_lcdNibble
 13962 ;; This function is called by:
 13963 ;;		_printf
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           	psect	text48
 13968  004598                     __ptext48:
 13969                           	opt stack 0
 13970  004598                     _putch:
 13971                           	opt stack 18
 13972                           
 13973                           ;incstack = 0
 13974                           ;putch@data stored from wreg
 13975  004598  0100               	movlb	0	; () banked
 13976  00459A  6F82               	movwf	putch@data& (0+255),b
 13977                           
 13978                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13979  00459C  848C               	bsf	3980,2,c	;volatile
 13980                           
 13981                           ;lcd.c: 22: lcdNibble(data);
 13982  00459E  0100               	movlb	0	; () banked
 13983  0045A0  5182               	movf	putch@data& (0+255),w,b
 13984  0045A2  ECD6  F01D         	call	_lcdNibble
 13985  0045A6  0012               	return		;funcret
 13986  0045A8                     __end_of_putch:
 13987                           	opt stack 0
 13988                           tblptru	equ	0xFF8
 13989                           tblptrh	equ	0xFF7
 13990                           tblptrl	equ	0xFF6
 13991                           tablat	equ	0xFF5
 13992                           prodh	equ	0xFF4
 13993                           prodl	equ	0xFF3
 13994                           intcon	equ	0xFF2
 13995                           intcon2	equ	0xFF1
 13996                           intcon3	equ	0xFF0
 13997                           indf0	equ	0xFEF
 13998                           postinc0	equ	0xFEE
 13999                           fsr0h	equ	0xFEA
 14000                           fsr0l	equ	0xFE9
 14001                           wreg	equ	0xFE8
 14002                           postdec1	equ	0xFE5
 14003                           fsr1l	equ	0xFE1
 14004                           indf2	equ	0xFDF
 14005                           postinc2	equ	0xFDE
 14006                           postdec2	equ	0xFDD
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function _isdigit *****************
 14012 ;; Defined at:
 14013 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  c               1    wreg     unsigned char 
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;  c               1    2[BANK0 ] unsigned char 
 14018 ;; Return value:  Size  Location     Type
 14019 ;;		None               void
 14020 ;; Registers used:
 14021 ;;		wreg, status,2, status,0
 14022 ;; Tracked objects:
 14023 ;;		On entry : 0/0
 14024 ;;		On exit  : 0/0
 14025 ;;		Unchanged: 0/0
 14026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;Total ram usage:        3 bytes
 14032 ;; Hardware stack levels used:    1
 14033 ;; Hardware stack levels required when called:    7
 14034 ;; This function calls:
 14035 ;;		Nothing
 14036 ;; This function is called by:
 14037 ;;		_printf
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           	psect	text49
 14042  0043BE                     __ptext49:
 14043                           	opt stack 0
 14044  0043BE                     _isdigit:
 14045                           	opt stack 19
 14046                           
 14047                           ;incstack = 0
 14048                           ;isdigit@c stored from wreg
 14049  0043BE  0100               	movlb	0	; () banked
 14050  0043C0  6F82               	movwf	isdigit@c& (0+255),b
 14051  0043C2  0E00               	movlw	0
 14052  0043C4  0100               	movlb	0	; () banked
 14053  0043C6  6F81               	movwf	_isdigit$1891& (0+255),b
 14054                           
 14055                           ; BSR set to: 0
 14056  0043C8  0E3A               	movlw	58
 14057  0043CA  0100               	movlb	0	; () banked
 14058  0043CC  6182               	cpfslt	isdigit@c& (0+255),b
 14059  0043CE  D007               	goto	l5172
 14060                           
 14061                           ; BSR set to: 0
 14062  0043D0  0E2F               	movlw	47
 14063  0043D2  0100               	movlb	0	; () banked
 14064  0043D4  6582               	cpfsgt	isdigit@c& (0+255),b
 14065  0043D6  D003               	goto	l5172
 14066                           
 14067                           ; BSR set to: 0
 14068  0043D8  0E01               	movlw	1
 14069  0043DA  0100               	movlb	0	; () banked
 14070  0043DC  6F81               	movwf	_isdigit$1891& (0+255),b
 14071  0043DE                     l5172:
 14072                           
 14073                           ; BSR set to: 0
 14074  0043DE  C081  F080         	movff	_isdigit$1891,??_isdigit
 14075  0043E2  0100               	movlb	0	; () banked
 14076  0043E4  3180               	rrcf	??_isdigit& (0+255),w,b
 14077  0043E6  0012               	return	
 14078  0043E8                     __end_of_isdigit:
 14079                           	opt stack 0
 14080                           tblptru	equ	0xFF8
 14081                           tblptrh	equ	0xFF7
 14082                           tblptrl	equ	0xFF6
 14083                           tablat	equ	0xFF5
 14084                           prodh	equ	0xFF4
 14085                           prodl	equ	0xFF3
 14086                           intcon	equ	0xFF2
 14087                           intcon2	equ	0xFF1
 14088                           intcon3	equ	0xFF0
 14089                           indf0	equ	0xFEF
 14090                           postinc0	equ	0xFEE
 14091                           fsr0h	equ	0xFEA
 14092                           fsr0l	equ	0xFE9
 14093                           wreg	equ	0xFE8
 14094                           postdec1	equ	0xFE5
 14095                           fsr1l	equ	0xFE1
 14096                           indf2	equ	0xFDF
 14097                           postinc2	equ	0xFDE
 14098                           postdec2	equ	0xFDD
 14099                           fsr2h	equ	0xFDA
 14100                           fsr2l	equ	0xFD9
 14101                           status	equ	0xFD8
 14102                           
 14103 ;; *************** function ___wmul *****************
 14104 ;; Defined at:
 14105 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14106 ;; Parameters:    Size  Location     Type
 14107 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14108 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14109 ;; Auto vars:     Size  Location     Type
 14110 ;;  product         2    4[BANK0 ] unsigned int 
 14111 ;; Return value:  Size  Location     Type
 14112 ;;                  2    0[BANK0 ] unsigned int 
 14113 ;; Registers used:
 14114 ;;		wreg, status,2, status,0, prodl, prodh
 14115 ;; Tracked objects:
 14116 ;;		On entry : 0/0
 14117 ;;		On exit  : 0/0
 14118 ;;		Unchanged: 0/0
 14119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14120 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14123 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14124 ;;Total ram usage:        6 bytes
 14125 ;; Hardware stack levels used:    1
 14126 ;; Hardware stack levels required when called:    7
 14127 ;; This function calls:
 14128 ;;		Nothing
 14129 ;; This function is called by:
 14130 ;;		_printf
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           	psect	text50
 14135  0040F2                     __ptext50:
 14136                           	opt stack 0
 14137  0040F2                     ___wmul:
 14138                           	opt stack 19
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;incstack = 0
 14142  0040F2  0100               	movlb	0	; () banked
 14143  0040F4  5180               	movf	___wmul@multiplier& (0+255),w,b
 14144  0040F6  0100               	movlb	0	; () banked
 14145  0040F8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14146  0040FA  CFF3 F084          	movff	prodl,___wmul@product
 14147  0040FE  CFF4 F085          	movff	prodh,___wmul@product+1
 14148  004102  0100               	movlb	0	; () banked
 14149  004104  5180               	movf	___wmul@multiplier& (0+255),w,b
 14150  004106  0100               	movlb	0	; () banked
 14151  004108  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14152  00410A  50F3               	movf	prodl,w,c
 14153  00410C  0100               	movlb	0	; () banked
 14154  00410E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14155  004110  0100               	movlb	0	; () banked
 14156  004112  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14157  004114  0100               	movlb	0	; () banked
 14158  004116  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14159  004118  50F3               	movf	prodl,w,c
 14160  00411A  0100               	movlb	0	; () banked
 14161  00411C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14162                           
 14163                           ; BSR set to: 0
 14164  00411E  C084  F080         	movff	___wmul@product,?___wmul
 14165  004122  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14166  004126  0012               	return	
 14167  004128                     __end_of___wmul:
 14168                           	opt stack 0
 14169                           tblptru	equ	0xFF8
 14170                           tblptrh	equ	0xFF7
 14171                           tblptrl	equ	0xFF6
 14172                           tablat	equ	0xFF5
 14173                           prodh	equ	0xFF4
 14174                           prodl	equ	0xFF3
 14175                           intcon	equ	0xFF2
 14176                           intcon2	equ	0xFF1
 14177                           intcon3	equ	0xFF0
 14178                           indf0	equ	0xFEF
 14179                           postinc0	equ	0xFEE
 14180                           fsr0h	equ	0xFEA
 14181                           fsr0l	equ	0xFE9
 14182                           wreg	equ	0xFE8
 14183                           postdec1	equ	0xFE5
 14184                           fsr1l	equ	0xFE1
 14185                           indf2	equ	0xFDF
 14186                           postinc2	equ	0xFDE
 14187                           postdec2	equ	0xFDD
 14188                           fsr2h	equ	0xFDA
 14189                           fsr2l	equ	0xFD9
 14190                           status	equ	0xFD8
 14191                           
 14192 ;; *************** function ___lwmod *****************
 14193 ;; Defined at:
 14194 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14195 ;; Parameters:    Size  Location     Type
 14196 ;;  dividend        2    7[BANK0 ] unsigned int 
 14197 ;;  divisor         2    9[BANK0 ] unsigned int 
 14198 ;; Auto vars:     Size  Location     Type
 14199 ;;  counter         1   11[BANK0 ] unsigned char 
 14200 ;; Return value:  Size  Location     Type
 14201 ;;                  2    7[BANK0 ] unsigned int 
 14202 ;; Registers used:
 14203 ;;		wreg, status,2, status,0
 14204 ;; Tracked objects:
 14205 ;;		On entry : 0/0
 14206 ;;		On exit  : 0/0
 14207 ;;		Unchanged: 0/0
 14208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14209 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14212 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;Total ram usage:        5 bytes
 14214 ;; Hardware stack levels used:    1
 14215 ;; Hardware stack levels required when called:    7
 14216 ;; This function calls:
 14217 ;;		Nothing
 14218 ;; This function is called by:
 14219 ;;		_printf
 14220 ;; This function uses a non-reentrant model
 14221 ;;
 14222                           
 14223                           	psect	text51
 14224  003C14                     __ptext51:
 14225                           	opt stack 0
 14226  003C14                     ___lwmod:
 14227                           	opt stack 19
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;incstack = 0
 14231  003C14  0100               	movlb	0	; () banked
 14232  003C16  5189               	movf	___lwmod@divisor& (0+255),w,b
 14233  003C18  0100               	movlb	0	; () banked
 14234  003C1A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14235  003C1C  B4D8               	btfsc	status,2,c
 14236  003C1E  D026               	goto	l1685
 14237                           
 14238                           ; BSR set to: 0
 14239  003C20  0E01               	movlw	1
 14240  003C22  0100               	movlb	0	; () banked
 14241  003C24  6F8B               	movwf	___lwmod@counter& (0+255),b
 14242  003C26  D006               	goto	l5210
 14243  003C28                     l5208:
 14244                           
 14245                           ; BSR set to: 0
 14246  003C28  0100               	movlb	0	; () banked
 14247  003C2A  90D8               	bcf	status,0,c
 14248  003C2C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14249  003C2E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14250  003C30  0100               	movlb	0	; () banked
 14251  003C32  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14252  003C34                     l5210:
 14253                           
 14254                           ; BSR set to: 0
 14255  003C34  0100               	movlb	0	; () banked
 14256  003C36  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14257  003C38  D7F7               	goto	l5208
 14258  003C3A                     l5212:
 14259                           
 14260                           ; BSR set to: 0
 14261  003C3A  0100               	movlb	0	; () banked
 14262  003C3C  5189               	movf	___lwmod@divisor& (0+255),w,b
 14263  003C3E  0100               	movlb	0	; () banked
 14264  003C40  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14265  003C42  0100               	movlb	0	; () banked
 14266  003C44  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14267  003C46  0100               	movlb	0	; () banked
 14268  003C48  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14269  003C4A  A0D8               	btfss	status,0,c
 14270  003C4C  D008               	goto	l5216
 14271                           
 14272                           ; BSR set to: 0
 14273  003C4E  0100               	movlb	0	; () banked
 14274  003C50  5189               	movf	___lwmod@divisor& (0+255),w,b
 14275  003C52  0100               	movlb	0	; () banked
 14276  003C54  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14277  003C56  0100               	movlb	0	; () banked
 14278  003C58  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14279  003C5A  0100               	movlb	0	; () banked
 14280  003C5C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14281  003C5E                     l5216:
 14282                           
 14283                           ; BSR set to: 0
 14284  003C5E  0100               	movlb	0	; () banked
 14285  003C60  90D8               	bcf	status,0,c
 14286  003C62  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14287  003C64  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14288                           
 14289                           ; BSR set to: 0
 14290  003C66  0100               	movlb	0	; () banked
 14291  003C68  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14292  003C6A  D7E7               	goto	l5212
 14293  003C6C                     l1685:
 14294                           
 14295                           ; BSR set to: 0
 14296  003C6C  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14297  003C70  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14298                           
 14299                           ; BSR set to: 0
 14300  003C74  0012               	return		;funcret
 14301  003C76                     __end_of___lwmod:
 14302                           	opt stack 0
 14303                           tblptru	equ	0xFF8
 14304                           tblptrh	equ	0xFF7
 14305                           tblptrl	equ	0xFF6
 14306                           tablat	equ	0xFF5
 14307                           prodh	equ	0xFF4
 14308                           prodl	equ	0xFF3
 14309                           intcon	equ	0xFF2
 14310                           intcon2	equ	0xFF1
 14311                           intcon3	equ	0xFF0
 14312                           indf0	equ	0xFEF
 14313                           postinc0	equ	0xFEE
 14314                           fsr0h	equ	0xFEA
 14315                           fsr0l	equ	0xFE9
 14316                           wreg	equ	0xFE8
 14317                           postdec1	equ	0xFE5
 14318                           fsr1l	equ	0xFE1
 14319                           indf2	equ	0xFDF
 14320                           postinc2	equ	0xFDE
 14321                           postdec2	equ	0xFDD
 14322                           fsr2h	equ	0xFDA
 14323                           fsr2l	equ	0xFD9
 14324                           status	equ	0xFD8
 14325                           
 14326 ;; *************** function ___lwdiv *****************
 14327 ;; Defined at:
 14328 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14329 ;; Parameters:    Size  Location     Type
 14330 ;;  dividend        2    0[BANK0 ] unsigned int 
 14331 ;;  divisor         2    2[BANK0 ] unsigned int 
 14332 ;; Auto vars:     Size  Location     Type
 14333 ;;  quotient        2    4[BANK0 ] unsigned int 
 14334 ;;  counter         1    6[BANK0 ] unsigned char 
 14335 ;; Return value:  Size  Location     Type
 14336 ;;                  2    0[BANK0 ] unsigned int 
 14337 ;; Registers used:
 14338 ;;		wreg, status,2, status,0
 14339 ;; Tracked objects:
 14340 ;;		On entry : 0/0
 14341 ;;		On exit  : 0/0
 14342 ;;		Unchanged: 0/0
 14343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14344 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14345 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14347 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14348 ;;Total ram usage:        7 bytes
 14349 ;; Hardware stack levels used:    1
 14350 ;; Hardware stack levels required when called:    7
 14351 ;; This function calls:
 14352 ;;		Nothing
 14353 ;; This function is called by:
 14354 ;;		_printf
 14355 ;; This function uses a non-reentrant model
 14356 ;;
 14357                           
 14358                           	psect	text52
 14359  0039E4                     __ptext52:
 14360                           	opt stack 0
 14361  0039E4                     ___lwdiv:
 14362                           	opt stack 19
 14363                           
 14364                           ; BSR set to: 0
 14365                           ;incstack = 0
 14366  0039E4  0E00               	movlw	0
 14367  0039E6  0100               	movlb	0	; () banked
 14368  0039E8  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14369  0039EA  0E00               	movlw	0
 14370  0039EC  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14371                           
 14372                           ; BSR set to: 0
 14373  0039EE  0100               	movlb	0	; () banked
 14374  0039F0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14375  0039F2  0100               	movlb	0	; () banked
 14376  0039F4  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14377  0039F6  B4D8               	btfsc	status,2,c
 14378  0039F8  D02C               	goto	l1675
 14379                           
 14380                           ; BSR set to: 0
 14381  0039FA  0E01               	movlw	1
 14382  0039FC  0100               	movlb	0	; () banked
 14383  0039FE  6F86               	movwf	___lwdiv@counter& (0+255),b
 14384  003A00  D006               	goto	l5190
 14385  003A02                     l5188:
 14386                           
 14387                           ; BSR set to: 0
 14388  003A02  0100               	movlb	0	; () banked
 14389  003A04  90D8               	bcf	status,0,c
 14390  003A06  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14391  003A08  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14392  003A0A  0100               	movlb	0	; () banked
 14393  003A0C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14394  003A0E                     l5190:
 14395                           
 14396                           ; BSR set to: 0
 14397  003A0E  0100               	movlb	0	; () banked
 14398  003A10  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14399  003A12  D7F7               	goto	l5188
 14400  003A14                     l5192:
 14401                           
 14402                           ; BSR set to: 0
 14403  003A14  0100               	movlb	0	; () banked
 14404  003A16  90D8               	bcf	status,0,c
 14405  003A18  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14406  003A1A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14407                           
 14408                           ; BSR set to: 0
 14409  003A1C  0100               	movlb	0	; () banked
 14410  003A1E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14411  003A20  0100               	movlb	0	; () banked
 14412  003A22  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14413  003A24  0100               	movlb	0	; () banked
 14414  003A26  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14415  003A28  0100               	movlb	0	; () banked
 14416  003A2A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14417  003A2C  A0D8               	btfss	status,0,c
 14418  003A2E  D00A               	goto	l5200
 14419                           
 14420                           ; BSR set to: 0
 14421  003A30  0100               	movlb	0	; () banked
 14422  003A32  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14423  003A34  0100               	movlb	0	; () banked
 14424  003A36  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14425  003A38  0100               	movlb	0	; () banked
 14426  003A3A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14427  003A3C  0100               	movlb	0	; () banked
 14428  003A3E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14429                           
 14430                           ; BSR set to: 0
 14431  003A40  0100               	movlb	0	; () banked
 14432  003A42  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14433  003A44                     l5200:
 14434                           
 14435                           ; BSR set to: 0
 14436  003A44  0100               	movlb	0	; () banked
 14437  003A46  90D8               	bcf	status,0,c
 14438  003A48  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14439  003A4A  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14440                           
 14441                           ; BSR set to: 0
 14442  003A4C  0100               	movlb	0	; () banked
 14443  003A4E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14444  003A50  D7E1               	goto	l5192
 14445  003A52                     l1675:
 14446                           
 14447                           ; BSR set to: 0
 14448  003A52  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14449  003A56  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14450                           
 14451                           ; BSR set to: 0
 14452  003A5A  0012               	return		;funcret
 14453  003A5C                     __end_of___lwdiv:
 14454                           	opt stack 0
 14455                           tblptru	equ	0xFF8
 14456                           tblptrh	equ	0xFF7
 14457                           tblptrl	equ	0xFF6
 14458                           tablat	equ	0xFF5
 14459                           prodh	equ	0xFF4
 14460                           prodl	equ	0xFF3
 14461                           intcon	equ	0xFF2
 14462                           intcon2	equ	0xFF1
 14463                           intcon3	equ	0xFF0
 14464                           indf0	equ	0xFEF
 14465                           postinc0	equ	0xFEE
 14466                           fsr0h	equ	0xFEA
 14467                           fsr0l	equ	0xFE9
 14468                           wreg	equ	0xFE8
 14469                           postdec1	equ	0xFE5
 14470                           fsr1l	equ	0xFE1
 14471                           indf2	equ	0xFDF
 14472                           postinc2	equ	0xFDE
 14473                           postdec2	equ	0xFDD
 14474                           fsr2h	equ	0xFDA
 14475                           fsr2l	equ	0xFD9
 14476                           status	equ	0xFD8
 14477                           
 14478 ;; *************** function _lcdInst *****************
 14479 ;; Defined at:
 14480 ;;		line 15 in file "lcd.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;  data            1    wreg     unsigned char 
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;  data            1    2[BANK0 ] unsigned char 
 14485 ;; Return value:  Size  Location     Type
 14486 ;;                  1    wreg      void 
 14487 ;; Registers used:
 14488 ;;		wreg, status,2, status,0, cstack
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;Total ram usage:        1 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; Hardware stack levels required when called:    8
 14501 ;; This function calls:
 14502 ;;		_lcdNibble
 14503 ;; This function is called by:
 14504 ;;		_UI
 14505 ;;		_change_state_to_menu_start
 14506 ;;		_change_state_to_menu_12
 14507 ;;		_change_state_to_menu_22
 14508 ;;		_initLCD
 14509 ;;		_printRTC
 14510 ;;		_Loading
 14511 ;;		_EEPROM_write
 14512 ;;		_Test
 14513 ;;		_algorithmTest
 14514 ;;		_sensorTest
 14515 ;;		_actuatorTest
 14516 ;;		_BothServos
 14517 ;;		_PortTestA5
 14518 ;;		_SolenoidTestA5
 14519 ;;		_ToggleTestA5
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523                           	psect	text53
 14524  0045A8                     __ptext53:
 14525                           	opt stack 0
 14526  0045A8                     _lcdInst:
 14527                           	opt stack 20
 14528                           
 14529                           ; BSR set to: 0
 14530                           ;incstack = 0
 14531                           ;lcdInst@data stored from wreg
 14532  0045A8  0100               	movlb	0	; () banked
 14533  0045AA  6F82               	movwf	lcdInst@data& (0+255),b
 14534                           
 14535                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14536  0045AC  948C               	bcf	3980,2,c	;volatile
 14537                           
 14538                           ;lcd.c: 17: lcdNibble(data);
 14539  0045AE  0100               	movlb	0	; () banked
 14540  0045B0  5182               	movf	lcdInst@data& (0+255),w,b
 14541  0045B2  ECD6  F01D         	call	_lcdNibble
 14542  0045B6  0012               	return		;funcret
 14543  0045B8                     __end_of_lcdInst:
 14544                           	opt stack 0
 14545                           tblptru	equ	0xFF8
 14546                           tblptrh	equ	0xFF7
 14547                           tblptrl	equ	0xFF6
 14548                           tablat	equ	0xFF5
 14549                           prodh	equ	0xFF4
 14550                           prodl	equ	0xFF3
 14551                           intcon	equ	0xFF2
 14552                           intcon2	equ	0xFF1
 14553                           intcon3	equ	0xFF0
 14554                           indf0	equ	0xFEF
 14555                           postinc0	equ	0xFEE
 14556                           fsr0h	equ	0xFEA
 14557                           fsr0l	equ	0xFE9
 14558                           wreg	equ	0xFE8
 14559                           postdec1	equ	0xFE5
 14560                           fsr1l	equ	0xFE1
 14561                           indf2	equ	0xFDF
 14562                           postinc2	equ	0xFDE
 14563                           postdec2	equ	0xFDD
 14564                           fsr2h	equ	0xFDA
 14565                           fsr2l	equ	0xFD9
 14566                           status	equ	0xFD8
 14567                           
 14568 ;; *************** function _lcdNibble *****************
 14569 ;; Defined at:
 14570 ;;		line 25 in file "lcd.c"
 14571 ;; Parameters:    Size  Location     Type
 14572 ;;  data            1    wreg     unsigned char 
 14573 ;; Auto vars:     Size  Location     Type
 14574 ;;  data            1    1[BANK0 ] unsigned char 
 14575 ;;  temp            1    0[BANK0 ] unsigned char 
 14576 ;; Return value:  Size  Location     Type
 14577 ;;                  1    wreg      void 
 14578 ;; Registers used:
 14579 ;;		wreg, status,2, status,0
 14580 ;; Tracked objects:
 14581 ;;		On entry : 0/0
 14582 ;;		On exit  : 0/0
 14583 ;;		Unchanged: 0/0
 14584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14589 ;;Total ram usage:        2 bytes
 14590 ;; Hardware stack levels used:    1
 14591 ;; Hardware stack levels required when called:    7
 14592 ;; This function calls:
 14593 ;;		Nothing
 14594 ;; This function is called by:
 14595 ;;		_lcdInst
 14596 ;;		_putch
 14597 ;; This function uses a non-reentrant model
 14598 ;;
 14599                           
 14600                           	psect	text54
 14601  003BAC                     __ptext54:
 14602                           	opt stack 0
 14603  003BAC                     _lcdNibble:
 14604                           	opt stack 20
 14605                           
 14606                           ;incstack = 0
 14607                           ;lcdNibble@data stored from wreg
 14608  003BAC  0100               	movlb	0	; () banked
 14609  003BAE  6F81               	movwf	lcdNibble@data& (0+255),b
 14610                           
 14611                           ;lcd.c: 27: char temp = data & 0xF0;
 14612  003BB0  0100               	movlb	0	; () banked
 14613  003BB2  5181               	movf	lcdNibble@data& (0+255),w,b
 14614  003BB4  0BF0               	andlw	240
 14615  003BB6  0100               	movlb	0	; () banked
 14616  003BB8  6F80               	movwf	lcdNibble@temp& (0+255),b
 14617                           
 14618                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14619  003BBA  508C               	movf	3980,w,c	;volatile
 14620  003BBC  0B0F               	andlw	15
 14621  003BBE  6E8C               	movwf	3980,c	;volatile
 14622                           
 14623                           ;lcd.c: 29: LATD = temp | LATD;
 14624  003BC0  0100               	movlb	0	; () banked
 14625  003BC2  5180               	movf	lcdNibble@temp& (0+255),w,b
 14626  003BC4  108C               	iorwf	3980,w,c	;volatile
 14627  003BC6  6E8C               	movwf	3980,c	;volatile
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14631  003BC8  868C               	bsf	3980,3,c	;volatile
 14632                           
 14633                           ; BSR set to: 0
 14634                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14635  003BCA  0E42               	movlw	66
 14636  003BCC                     u7877:
 14637  003BCC  2EE8               	decfsz	wreg,f,c
 14638  003BCE  D7FE               	bra	u7877
 14639  003BD0  D000               	nop2	
 14640                           
 14641                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14642  003BD2  968C               	bcf	3980,3,c	;volatile
 14643                           
 14644                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14645  003BD4  0E42               	movlw	66
 14646  003BD6                     u7887:
 14647  003BD6  2EE8               	decfsz	wreg,f,c
 14648  003BD8  D7FE               	bra	u7887
 14649  003BDA  D000               	nop2	
 14650                           
 14651                           ;lcd.c: 36: data = data << 4;
 14652  003BDC  0100               	movlb	0	; () banked
 14653  003BDE  3981               	swapf	lcdNibble@data& (0+255),w,b
 14654  003BE0  0BF0               	andlw	240
 14655  003BE2  0100               	movlb	0	; () banked
 14656  003BE4  6F81               	movwf	lcdNibble@data& (0+255),b
 14657                           
 14658                           ;lcd.c: 38: temp = data & 0xF0;
 14659  003BE6  0100               	movlb	0	; () banked
 14660  003BE8  5181               	movf	lcdNibble@data& (0+255),w,b
 14661  003BEA  0BF0               	andlw	240
 14662  003BEC  0100               	movlb	0	; () banked
 14663  003BEE  6F80               	movwf	lcdNibble@temp& (0+255),b
 14664                           
 14665                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14666  003BF0  508C               	movf	3980,w,c	;volatile
 14667  003BF2  0B0F               	andlw	15
 14668  003BF4  6E8C               	movwf	3980,c	;volatile
 14669                           
 14670                           ;lcd.c: 40: LATD = temp | LATD;
 14671  003BF6  0100               	movlb	0	; () banked
 14672  003BF8  5180               	movf	lcdNibble@temp& (0+255),w,b
 14673  003BFA  108C               	iorwf	3980,w,c	;volatile
 14674  003BFC  6E8C               	movwf	3980,c	;volatile
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14678  003BFE  868C               	bsf	3980,3,c	;volatile
 14679                           
 14680                           ; BSR set to: 0
 14681                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14682  003C00  0E42               	movlw	66
 14683  003C02                     u7897:
 14684  003C02  2EE8               	decfsz	wreg,f,c
 14685  003C04  D7FE               	bra	u7897
 14686  003C06  D000               	nop2	
 14687                           
 14688                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14689  003C08  968C               	bcf	3980,3,c	;volatile
 14690                           
 14691                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14692  003C0A  0E42               	movlw	66
 14693  003C0C                     u7907:
 14694  003C0C  2EE8               	decfsz	wreg,f,c
 14695  003C0E  D7FE               	bra	u7907
 14696  003C10  D000               	nop2	
 14697  003C12  0012               	return		;funcret
 14698  003C14                     __end_of_lcdNibble:
 14699                           	opt stack 0
 14700                           tblptru	equ	0xFF8
 14701                           tblptrh	equ	0xFF7
 14702                           tblptrl	equ	0xFF6
 14703                           tablat	equ	0xFF5
 14704                           prodh	equ	0xFF4
 14705                           prodl	equ	0xFF3
 14706                           intcon	equ	0xFF2
 14707                           intcon2	equ	0xFF1
 14708                           intcon3	equ	0xFF0
 14709                           indf0	equ	0xFEF
 14710                           postinc0	equ	0xFEE
 14711                           fsr0h	equ	0xFEA
 14712                           fsr0l	equ	0xFE9
 14713                           wreg	equ	0xFE8
 14714                           postdec1	equ	0xFE5
 14715                           fsr1l	equ	0xFE1
 14716                           indf2	equ	0xFDF
 14717                           postinc2	equ	0xFDE
 14718                           postdec2	equ	0xFDD
 14719                           fsr2h	equ	0xFDA
 14720                           fsr2l	equ	0xFD9
 14721                           status	equ	0xFD8
 14722                           
 14723 ;; *************** function _initServos *****************
 14724 ;; Defined at:
 14725 ;;		line 254 in file "sort.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;		None
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;		None
 14730 ;; Return value:  Size  Location     Type
 14731 ;;                  1    wreg      void 
 14732 ;; Registers used:
 14733 ;;		wreg, status,2, status,0, cstack
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14742 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14743 ;;Total ram usage:        1 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; Hardware stack levels required when called:    8
 14746 ;; This function calls:
 14747 ;;		_updateServoPosition
 14748 ;; This function is called by:
 14749 ;;		_Loading
 14750 ;;		_BothServos
 14751 ;; This function uses a non-reentrant model
 14752 ;;
 14753                           
 14754                           	psect	text55
 14755  003D8E                     __ptext55:
 14756                           	opt stack 0
 14757  003D8E                     _initServos:
 14758                           	opt stack 20
 14759                           
 14760                           ;sort.c: 255: updateServoPosition(1200, 1);
 14761                           
 14762                           ;incstack = 0
 14763  003D8E  0E04               	movlw	4
 14764  003D90  0100               	movlb	0	; () banked
 14765  003D92  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14766  003D94  0EB0               	movlw	176
 14767  003D96  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14768  003D98  0E00               	movlw	0
 14769  003D9A  0100               	movlb	0	; () banked
 14770  003D9C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14771  003D9E  0E01               	movlw	1
 14772  003DA0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14773  003DA2  EC2E  F01D         	call	_updateServoPosition	;wreg free
 14774                           
 14775                           ;sort.c: 256: updateServoPosition(1190, 3);
 14776  003DA6  0E04               	movlw	4
 14777  003DA8  0100               	movlb	0	; () banked
 14778  003DAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14779  003DAC  0EA6               	movlw	166
 14780  003DAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14781  003DB0  0E00               	movlw	0
 14782  003DB2  0100               	movlb	0	; () banked
 14783  003DB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14784  003DB6  0E03               	movlw	3
 14785  003DB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14786  003DBA  EC2E  F01D         	call	_updateServoPosition	;wreg free
 14787                           
 14788                           ;sort.c: 257: TMR1ON = 1;
 14789  003DBE  80CD               	bsf	4045,0,c	;volatile
 14790                           
 14791                           ;sort.c: 258: was_low_1 = 0;
 14792  003DC0  0E00               	movlw	0
 14793  003DC2  6E7A               	movwf	_was_low_1+1,c	;volatile
 14794  003DC4  0E00               	movlw	0
 14795  003DC6  6E79               	movwf	_was_low_1,c	;volatile
 14796                           
 14797                           ;sort.c: 259: _delay((unsigned long)((5)*(32000000/4000.0)));
 14798  003DC8  0E34               	movlw	52
 14799  003DCA  0100               	movlb	0	; () banked
 14800  003DCC  6F88               	movwf	??_initServos& (0+255),b
 14801  003DCE  0EF1               	movlw	241
 14802  003DD0                     u7917:
 14803  003DD0  2EE8               	decfsz	wreg,f,c
 14804  003DD2  D7FE               	bra	u7917
 14805  003DD4  2F88               	decfsz	??_initServos& (0+255),f,b
 14806  003DD6  D7FC               	bra	u7917
 14807  003DD8  D000               	nop2	
 14808                           
 14809                           ;sort.c: 260: TMR3ON = 1;
 14810  003DDA  80B1               	bsf	4017,0,c	;volatile
 14811                           
 14812                           ;sort.c: 261: was_low_3 = 0;
 14813  003DDC  0E00               	movlw	0
 14814  003DDE  6E7C               	movwf	_was_low_3+1,c	;volatile
 14815  003DE0  0E00               	movlw	0
 14816  003DE2  6E7B               	movwf	_was_low_3,c	;volatile
 14817                           
 14818                           ;sort.c: 262: LATCbits.LATC0 = 0;
 14819  003DE4  908B               	bcf	3979,0,c	;volatile
 14820  003DE6  0012               	return		;funcret
 14821  003DE8                     __end_of_initServos:
 14822                           	opt stack 0
 14823                           tblptru	equ	0xFF8
 14824                           tblptrh	equ	0xFF7
 14825                           tblptrl	equ	0xFF6
 14826                           tablat	equ	0xFF5
 14827                           prodh	equ	0xFF4
 14828                           prodl	equ	0xFF3
 14829                           intcon	equ	0xFF2
 14830                           intcon2	equ	0xFF1
 14831                           intcon3	equ	0xFF0
 14832                           indf0	equ	0xFEF
 14833                           postinc0	equ	0xFEE
 14834                           fsr0h	equ	0xFEA
 14835                           fsr0l	equ	0xFE9
 14836                           wreg	equ	0xFE8
 14837                           postdec1	equ	0xFE5
 14838                           fsr1l	equ	0xFE1
 14839                           indf2	equ	0xFDF
 14840                           postinc2	equ	0xFDE
 14841                           postdec2	equ	0xFDD
 14842                           fsr2h	equ	0xFDA
 14843                           fsr2l	equ	0xFD9
 14844                           status	equ	0xFD8
 14845                           
 14846 ;; *************** function _updateServoPosition *****************
 14847 ;; Defined at:
 14848 ;;		line 304 in file "sort.c"
 14849 ;; Parameters:    Size  Location     Type
 14850 ;;  time_us         2    0[BANK0 ] int 
 14851 ;;  timer           2    2[BANK0 ] int 
 14852 ;; Auto vars:     Size  Location     Type
 14853 ;;  my_time         2    6[BANK0 ] unsigned int 
 14854 ;; Return value:  Size  Location     Type
 14855 ;;                  1    wreg      void 
 14856 ;; Registers used:
 14857 ;;		wreg, status,2, status,0
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14863 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14864 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14866 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14867 ;;Total ram usage:        8 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:    7
 14870 ;; This function calls:
 14871 ;;		Nothing
 14872 ;; This function is called by:
 14873 ;;		_Distribution
 14874 ;;		_initServos
 14875 ;;		_actuatorTest
 14876 ;;		_BothServos
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           	psect	text56
 14881  003A5C                     __ptext56:
 14882                           	opt stack 0
 14883  003A5C                     _updateServoPosition:
 14884                           	opt stack 20
 14885                           
 14886                           ;sort.c: 305: unsigned int my_time = 65535 - time_us;
 14887                           
 14888                           ;incstack = 0
 14889  003A5C  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14890  003A60  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14891  003A64  0100               	movlb	0	; () banked
 14892  003A66  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14893  003A68  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14894  003A6A  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14895  003A6C  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14896  003A6E  0EFF               	movlw	255
 14897  003A70  0100               	movlb	0	; () banked
 14898  003A72  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14899  003A74  0100               	movlb	0	; () banked
 14900  003A76  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14901  003A78  0EFF               	movlw	255
 14902  003A7A  0100               	movlb	0	; () banked
 14903  003A7C  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14904  003A7E  0100               	movlb	0	; () banked
 14905  003A80  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14906                           
 14907                           ;sort.c: 306: switch(timer){
 14908  003A82  D015               	goto	l5490
 14909  003A84                     l5488:
 14910                           
 14911                           ; BSR set to: 0
 14912                           ;sort.c: 308: servoTimes[0] = my_time >> 8;
 14913  003A84  0100               	movlb	0	; () banked
 14914  003A86  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14915  003A88  0101               	movlb	1	; () banked
 14916  003A8A  6F1C               	movwf	_servoTimes& (0+255),b
 14917  003A8C  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14918                           
 14919                           ;sort.c: 309: servoTimes[1] = my_time & 0xFF;
 14920  003A8E  0100               	movlb	0	; () banked
 14921  003A90  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14922  003A92  0101               	movlb	1	; () banked
 14923  003A94  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14924  003A96  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14925  003A98                     l779:
 14926                           
 14927                           ;sort.c: 311: servoTimes[2] = my_time >> 8;
 14928  003A98  0100               	movlb	0	; () banked
 14929  003A9A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14930  003A9C  0101               	movlb	1	; () banked
 14931  003A9E  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14932  003AA0  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14933                           
 14934                           ;sort.c: 312: servoTimes[3] = my_time & 0xFF;
 14935  003AA2  0100               	movlb	0	; () banked
 14936  003AA4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14937  003AA6  0101               	movlb	1	; () banked
 14938  003AA8  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14939  003AAA  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14940                           
 14941                           ;sort.c: 313: }
 14942  003AAC  0012               	return	
 14943  003AAE                     l5490:
 14944  003AAE  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14945  003AB2  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14946                           
 14947                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14948                           ; Switch size 1, requested type "space"
 14949                           ; Number of cases is 1, Range of values is 0 to 0
 14950                           ; switch strategies available:
 14951                           ; Name         Instructions Cycles
 14952                           ; simple_byte            4     3 (average)
 14953                           ;	Chosen strategy is simple_byte
 14954  003AB6  0100               	movlb	0	; () banked
 14955  003AB8  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14956  003ABA  0A00               	xorlw	0	; case 0
 14957  003ABC  A4D8               	btfss	status,2,c
 14958  003ABE  0012               	return	
 14959                           
 14960                           ; BSR set to: 0
 14961                           ; Switch size 1, requested type "space"
 14962                           ; Number of cases is 2, Range of values is 1 to 3
 14963                           ; switch strategies available:
 14964                           ; Name         Instructions Cycles
 14965                           ; simple_byte            7     4 (average)
 14966                           ;	Chosen strategy is simple_byte
 14967  003AC0  0100               	movlb	0	; () banked
 14968  003AC2  5184               	movf	??_updateServoPosition& (0+255),w,b
 14969  003AC4  0A01               	xorlw	1	; case 1
 14970  003AC6  B4D8               	btfsc	status,2,c
 14971  003AC8  D7DD               	goto	l5488
 14972  003ACA  0A02               	xorlw	2	; case 3
 14973  003ACC  A4D8               	btfss	status,2,c
 14974  003ACE  0012               	return	
 14975  003AD0  D7E3               	goto	l779
 14976  003AD2                     __end_of_updateServoPosition:
 14977                           	opt stack 0
 14978                           tblptru	equ	0xFF8
 14979                           tblptrh	equ	0xFF7
 14980                           tblptrl	equ	0xFF6
 14981                           tablat	equ	0xFF5
 14982                           prodh	equ	0xFF4
 14983                           prodl	equ	0xFF3
 14984                           intcon	equ	0xFF2
 14985                           intcon2	equ	0xFF1
 14986                           intcon3	equ	0xFF0
 14987                           indf0	equ	0xFEF
 14988                           postinc0	equ	0xFEE
 14989                           fsr0h	equ	0xFEA
 14990                           fsr0l	equ	0xFE9
 14991                           wreg	equ	0xFE8
 14992                           postdec1	equ	0xFE5
 14993                           fsr1l	equ	0xFE1
 14994                           indf2	equ	0xFDF
 14995                           postinc2	equ	0xFDE
 14996                           postdec2	equ	0xFDD
 14997                           fsr2h	equ	0xFDA
 14998                           fsr2l	equ	0xFD9
 14999                           status	equ	0xFD8
 15000                           
 15001 ;; *************** function _handler *****************
 15002 ;; Defined at:
 15003 ;;		line 16 in file "interruptHandler.c"
 15004 ;; Parameters:    Size  Location     Type
 15005 ;;		None
 15006 ;; Auto vars:     Size  Location     Type
 15007 ;;		None
 15008 ;; Return value:  Size  Location     Type
 15009 ;;                  1    wreg      void 
 15010 ;; Registers used:
 15011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15012 ;; Tracked objects:
 15013 ;;		On entry : 0/0
 15014 ;;		On exit  : 0/0
 15015 ;;		Unchanged: 0/0
 15016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15019 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15020 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15021 ;;Total ram usage:       16 bytes
 15022 ;; Hardware stack levels used:    1
 15023 ;; Hardware stack levels required when called:    6
 15024 ;; This function calls:
 15025 ;;		_printSortTimer
 15026 ;;		_updateMenu
 15027 ;; This function is called by:
 15028 ;;		Interrupt level 2
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032                           	psect	intcode
 15033  000008                     __pintcode:
 15034                           	opt stack 0
 15035  000008                     _handler:
 15036                           	opt stack 18
 15037                           
 15038                           ;incstack = 0
 15039  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15040  00000A  ED99  F014         	call	int_func,f	;refresh shadow registers
 15041                           tblptru	equ	0xFF8
 15042                           tblptrh	equ	0xFF7
 15043                           tblptrl	equ	0xFF6
 15044                           tablat	equ	0xFF5
 15045                           prodh	equ	0xFF4
 15046                           prodl	equ	0xFF3
 15047                           intcon	equ	0xFF2
 15048                           intcon2	equ	0xFF1
 15049                           intcon3	equ	0xFF0
 15050                           indf0	equ	0xFEF
 15051                           postinc0	equ	0xFEE
 15052                           fsr0h	equ	0xFEA
 15053                           fsr0l	equ	0xFE9
 15054                           wreg	equ	0xFE8
 15055                           postdec1	equ	0xFE5
 15056                           fsr1l	equ	0xFE1
 15057                           indf2	equ	0xFDF
 15058                           postinc2	equ	0xFDE
 15059                           postdec2	equ	0xFDD
 15060                           fsr2h	equ	0xFDA
 15061                           fsr2l	equ	0xFD9
 15062                           status	equ	0xFD8
 15063                           
 15064                           	psect	intcode_body
 15065  002932                     __pintcode_body:
 15066                           	opt stack 18
 15067  002932                     int_func:
 15068                           	opt stack 18
 15069  002932  0006               	pop		; remove dummy address from shadow register refresh
 15070  002934  CFFA F04D          	movff	pclath,??_handler+2
 15071  002938  CFFB F04E          	movff	pclatu,??_handler+3
 15072  00293C  CFE9 F04F          	movff	fsr0l,??_handler+4
 15073  002940  CFEA F050          	movff	fsr0h,??_handler+5
 15074  002944  CFE1 F051          	movff	fsr1l,??_handler+6
 15075  002948  CFE2 F052          	movff	fsr1h,??_handler+7
 15076  00294C  CFD9 F053          	movff	fsr2l,??_handler+8
 15077  002950  CFDA F054          	movff	fsr2h,??_handler+9
 15078  002954  CFF3 F055          	movff	prodl,??_handler+10
 15079  002958  CFF4 F056          	movff	prodh,??_handler+11
 15080  00295C  CFF6 F057          	movff	tblptrl,??_handler+12
 15081  002960  CFF7 F058          	movff	tblptrh,??_handler+13
 15082  002964  CFF8 F059          	movff	tblptru,??_handler+14
 15083  002968  CFF5 F05A          	movff	tablat,??_handler+15
 15084                           
 15085                           ;interruptHandler.c: 18: if(INT1IF){
 15086  00296C  A0F0               	btfss	intcon3,0,c	;volatile
 15087  00296E  D020               	goto	i2l7956
 15088                           
 15089                           ;interruptHandler.c: 19: INT1IF = 0;
 15090  002970  90F0               	bcf	intcon3,0,c	;volatile
 15091                           
 15092                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15093  002972  0100               	movlb	0	; () banked
 15094  002974  51FC               	movf	_machine_state& (0+255),w,b
 15095  002976  A4D8               	btfss	status,2,c
 15096  002978  D01B               	goto	i2l7956
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15100  00297A  3881               	swapf	3969,w,c	;volatile
 15101  00297C  0B0F               	andlw	15
 15102  00297E  0B0F               	andlw	15
 15103  002980  6E4B               	movwf	??_handler& (0+255),c
 15104  002982  6A4C               	clrf	(??_handler+1)& (0+255),c
 15105  002984  0E27               	movlw	low _keys
 15106  002986  244B               	addwf	??_handler,w,c
 15107  002988  6EF6               	movwf	tblptrl,c
 15108  00298A  0EFB               	movlw	high _keys
 15109  00298C  204C               	addwfc	??_handler+1,w,c
 15110  00298E  6EF7               	movwf	tblptrh,c
 15111  002990                     	if	1	;There are 3 active tblptr bytes
 15112  002990  6AF8               	clrf	tblptru,c
 15113  002992  0E00               	movlw	low (__mediumconst shr (0+16))
 15114  002994  22F8               	addwfc	tblptru,f,c
 15115  002996                     	endif
 15116  002996  0008               	tblrd		*
 15117  002998  CFF5 F07D          	movff	tablat,_input	;volatile
 15118                           
 15119                           ; BSR set to: 0
 15120                           ;interruptHandler.c: 23: if(input == '*'){
 15121  00299C  0E2A               	movlw	42
 15122  00299E  187D               	xorwf	_input,w,c	;volatile
 15123  0029A0  A4D8               	btfss	status,2,c
 15124  0029A2  D004               	goto	i2l7954
 15125                           
 15126                           ; BSR set to: 0
 15127                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15128  0029A4  0E03               	movlw	3
 15129  0029A6  0100               	movlb	0	; () banked
 15130  0029A8  6FFC               	movwf	_machine_state& (0+255),b
 15131                           
 15132                           ;interruptHandler.c: 25: }
 15133  0029AA  D002               	goto	i2l7956
 15134  0029AC                     i2l7954:
 15135                           
 15136                           ; BSR set to: 0
 15137                           ;interruptHandler.c: 26: else{
 15138                           ;interruptHandler.c: 27: updateMenu();
 15139  0029AC  EC4C  F00F         	call	_updateMenu	;wreg free
 15140  0029B0                     i2l7956:
 15141                           
 15142                           ;interruptHandler.c: 28: }
 15143                           ;interruptHandler.c: 29: }
 15144                           ;interruptHandler.c: 30: }
 15145                           ;interruptHandler.c: 33: if(TMR0IF){
 15146  0029B0  A4F2               	btfss	intcon,2,c	;volatile
 15147  0029B2  D00C               	goto	i2l7970
 15148                           
 15149                           ;interruptHandler.c: 34: TMR0IF = 0;
 15150  0029B4  94F2               	bcf	intcon,2,c	;volatile
 15151                           
 15152                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15153  0029B6  0100               	movlb	0	; () banked
 15154  0029B8  05FC               	decf	_machine_state& (0+255),w,b
 15155  0029BA  A4D8               	btfss	status,2,c
 15156  0029BC  D007               	goto	i2l7970
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;interruptHandler.c: 36: printSortTimer();
 15160  0029BE  ECC7  F011         	call	_printSortTimer	;wreg free
 15161                           
 15162                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15163  0029C2  0E85               	movlw	133
 15164  0029C4  6ED7               	movwf	4055,c	;volatile
 15165                           
 15166                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15167  0029C6  0EEE               	movlw	238
 15168  0029C8  6ED6               	movwf	4054,c	;volatile
 15169                           
 15170                           ;interruptHandler.c: 40: TMR0ON = 1;
 15171  0029CA  8ED5               	bsf	4053,7,c	;volatile
 15172  0029CC                     i2l7970:
 15173                           
 15174                           ;interruptHandler.c: 41: }
 15175                           ;interruptHandler.c: 42: }
 15176                           ;interruptHandler.c: 45: if(TMR1IF){
 15177  0029CC  A09E               	btfss	3998,0,c	;volatile
 15178  0029CE  D024               	goto	i2l7994
 15179                           
 15180                           ;interruptHandler.c: 46: TMR1IF = 0;
 15181  0029D0  909E               	bcf	3998,0,c	;volatile
 15182                           
 15183                           ;interruptHandler.c: 47: TMR1ON = 0;
 15184  0029D2  90CD               	bcf	4045,0,c	;volatile
 15185                           
 15186                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15187  0029D4  0100               	movlb	0	; () banked
 15188  0029D6  05FC               	decf	_machine_state& (0+255),w,b
 15189  0029D8  A4D8               	btfss	status,2,c
 15190  0029DA  D01E               	goto	i2l7994
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;interruptHandler.c: 49: if(was_low_1){
 15194  0029DC  5079               	movf	_was_low_1,w,c	;volatile
 15195  0029DE  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15196  0029E0  B4D8               	btfsc	status,2,c
 15197  0029E2  D00A               	goto	i2l844
 15198                           
 15199                           ; BSR set to: 0
 15200                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15201  0029E4  828B               	bsf	3979,1,c	;volatile
 15202                           
 15203                           ; BSR set to: 0
 15204                           ;interruptHandler.c: 51: was_low_1 = 0;
 15205  0029E6  0E00               	movlw	0
 15206  0029E8  6E7A               	movwf	_was_low_1+1,c	;volatile
 15207  0029EA  0E00               	movlw	0
 15208  0029EC  6E79               	movwf	_was_low_1,c	;volatile
 15209                           
 15210                           ; BSR set to: 0
 15211                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15212  0029EE  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15213                           
 15214                           ; BSR set to: 0
 15215                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15216  0029F2  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15217                           
 15218                           ;interruptHandler.c: 54: }
 15219  0029F6  D00F               	goto	i2l7992
 15220  0029F8                     i2l844:
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;interruptHandler.c: 55: else{
 15224                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15225  0029F8  928B               	bcf	3979,1,c	;volatile
 15226                           
 15227                           ; BSR set to: 0
 15228                           ;interruptHandler.c: 57: was_low_1 = 1;
 15229  0029FA  0E00               	movlw	0
 15230  0029FC  6E7A               	movwf	_was_low_1+1,c	;volatile
 15231  0029FE  0E01               	movlw	1
 15232  002A00  6E79               	movwf	_was_low_1,c	;volatile
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15236  002A02  0101               	movlb	1	; () banked
 15237  002A04  511C               	movf	_servoTimes& (0+255),w,b
 15238  002A06  0800               	sublw	0
 15239  002A08  0F20               	addlw	32
 15240  002A0A  6ECF               	movwf	4047,c	;volatile
 15241                           
 15242                           ; BSR set to: 1
 15243                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15244  002A0C  0101               	movlb	1	; () banked
 15245  002A0E  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15246  002A10  0800               	sublw	0
 15247  002A12  0F20               	addlw	32
 15248  002A14  6ECE               	movwf	4046,c	;volatile
 15249  002A16                     i2l7992:
 15250                           
 15251                           ;interruptHandler.c: 60: }
 15252                           ;interruptHandler.c: 61: TMR1ON = 1;
 15253  002A16  80CD               	bsf	4045,0,c	;volatile
 15254  002A18                     i2l7994:
 15255                           
 15256                           ;interruptHandler.c: 62: }
 15257                           ;interruptHandler.c: 63: }
 15258                           ;interruptHandler.c: 65: if(TMR3IF){
 15259  002A18  A2A1               	btfss	4001,1,c	;volatile
 15260  002A1A  D024               	goto	i2l850
 15261                           
 15262                           ;interruptHandler.c: 66: TMR3IF = 0;
 15263  002A1C  92A1               	bcf	4001,1,c	;volatile
 15264                           
 15265                           ;interruptHandler.c: 67: TMR3ON = 0;
 15266  002A1E  90B1               	bcf	4017,0,c	;volatile
 15267                           
 15268                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15269  002A20  0100               	movlb	0	; () banked
 15270  002A22  05FC               	decf	_machine_state& (0+255),w,b
 15271  002A24  A4D8               	btfss	status,2,c
 15272  002A26  D01E               	goto	i2l850
 15273                           
 15274                           ; BSR set to: 0
 15275                           ;interruptHandler.c: 69: if(was_low_3){
 15276  002A28  507B               	movf	_was_low_3,w,c	;volatile
 15277  002A2A  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15278  002A2C  B4D8               	btfsc	status,2,c
 15279  002A2E  D00A               	goto	i2l848
 15280                           
 15281                           ; BSR set to: 0
 15282                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15283  002A30  848B               	bsf	3979,2,c	;volatile
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;interruptHandler.c: 71: was_low_3 = 0;
 15287  002A32  0E00               	movlw	0
 15288  002A34  6E7C               	movwf	_was_low_3+1,c	;volatile
 15289  002A36  0E00               	movlw	0
 15290  002A38  6E7B               	movwf	_was_low_3,c	;volatile
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15294  002A3A  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15295                           
 15296                           ; BSR set to: 0
 15297                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15298  002A3E  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15299                           
 15300                           ;interruptHandler.c: 74: }
 15301  002A42  D00F               	goto	i2l8016
 15302  002A44                     i2l848:
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;interruptHandler.c: 75: else{
 15306                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15307  002A44  948B               	bcf	3979,2,c	;volatile
 15308                           
 15309                           ; BSR set to: 0
 15310                           ;interruptHandler.c: 77: was_low_3 = 1;
 15311  002A46  0E00               	movlw	0
 15312  002A48  6E7C               	movwf	_was_low_3+1,c	;volatile
 15313  002A4A  0E01               	movlw	1
 15314  002A4C  6E7B               	movwf	_was_low_3,c	;volatile
 15315                           
 15316                           ; BSR set to: 0
 15317                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15318  002A4E  0101               	movlb	1	; () banked
 15319  002A50  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15320  002A52  0800               	sublw	0
 15321  002A54  0F20               	addlw	32
 15322  002A56  6EB3               	movwf	4019,c	;volatile
 15323                           
 15324                           ; BSR set to: 1
 15325                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15326  002A58  0101               	movlb	1	; () banked
 15327  002A5A  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15328  002A5C  0800               	sublw	0
 15329  002A5E  0F20               	addlw	32
 15330  002A60  6EB2               	movwf	4018,c	;volatile
 15331  002A62                     i2l8016:
 15332                           
 15333                           ;interruptHandler.c: 80: }
 15334                           ;interruptHandler.c: 81: TMR3ON = 1;
 15335  002A62  80B1               	bsf	4017,0,c	;volatile
 15336  002A64                     i2l850:
 15337  002A64  C05A  FFF5         	movff	??_handler+15,tablat
 15338  002A68  C059  FFF8         	movff	??_handler+14,tblptru
 15339  002A6C  C058  FFF7         	movff	??_handler+13,tblptrh
 15340  002A70  C057  FFF6         	movff	??_handler+12,tblptrl
 15341  002A74  C056  FFF4         	movff	??_handler+11,prodh
 15342  002A78  C055  FFF3         	movff	??_handler+10,prodl
 15343  002A7C  C054  FFDA         	movff	??_handler+9,fsr2h
 15344  002A80  C053  FFD9         	movff	??_handler+8,fsr2l
 15345  002A84  C052  FFE2         	movff	??_handler+7,fsr1h
 15346  002A88  C051  FFE1         	movff	??_handler+6,fsr1l
 15347  002A8C  C050  FFEA         	movff	??_handler+5,fsr0h
 15348  002A90  C04F  FFE9         	movff	??_handler+4,fsr0l
 15349  002A94  C04E  FFFB         	movff	??_handler+3,pclatu
 15350  002A98  C04D  FFFA         	movff	??_handler+2,pclath
 15351  002A9C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15352  002A9E  0011               	retfie		f
 15353  002AA0                     __end_of_handler:
 15354                           	opt stack 0
 15355                           pclatu	equ	0xFFB
 15356                           pclath	equ	0xFFA
 15357                           tblptru	equ	0xFF8
 15358                           tblptrh	equ	0xFF7
 15359                           tblptrl	equ	0xFF6
 15360                           tablat	equ	0xFF5
 15361                           prodh	equ	0xFF4
 15362                           prodl	equ	0xFF3
 15363                           intcon	equ	0xFF2
 15364                           intcon2	equ	0xFF1
 15365                           intcon3	equ	0xFF0
 15366                           indf0	equ	0xFEF
 15367                           postinc0	equ	0xFEE
 15368                           fsr0h	equ	0xFEA
 15369                           fsr0l	equ	0xFE9
 15370                           wreg	equ	0xFE8
 15371                           postdec1	equ	0xFE5
 15372                           fsr1h	equ	0xFE2
 15373                           fsr1l	equ	0xFE1
 15374                           indf2	equ	0xFDF
 15375                           postinc2	equ	0xFDE
 15376                           postdec2	equ	0xFDD
 15377                           fsr2h	equ	0xFDA
 15378                           fsr2l	equ	0xFD9
 15379                           status	equ	0xFD8
 15380                           
 15381 ;; *************** function _updateMenu *****************
 15382 ;; Defined at:
 15383 ;;		line 211 in file "UI.c"
 15384 ;; Parameters:    Size  Location     Type
 15385 ;;		None
 15386 ;; Auto vars:     Size  Location     Type
 15387 ;;		None
 15388 ;; Return value:  Size  Location     Type
 15389 ;;                  1    wreg      void 
 15390 ;; Registers used:
 15391 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15392 ;; Tracked objects:
 15393 ;;		On entry : 0/0
 15394 ;;		On exit  : 0/0
 15395 ;;		Unchanged: 0/0
 15396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15399 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15400 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15401 ;;Total ram usage:        2 bytes
 15402 ;; Hardware stack levels used:    1
 15403 ;; Hardware stack levels required when called:    5
 15404 ;; This function calls:
 15405 ;;		_change_state_to_logs_11
 15406 ;;		_change_state_to_logs_12
 15407 ;;		_change_state_to_logs_22
 15408 ;;		_change_state_to_logs_23
 15409 ;;		_change_state_to_logs_33
 15410 ;;		_change_state_to_logs_34
 15411 ;;		_change_state_to_menu_11
 15412 ;;		_change_state_to_menu_23
 15413 ;;		_dispLogs
 15414 ;;		_inputHandler
 15415 ;;		i2_change_state_to_menu_12
 15416 ;;		i2_change_state_to_menu_22
 15417 ;;		i2_change_state_to_menu_start
 15418 ;; This function is called by:
 15419 ;;		_handler
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           	psect	text58
 15424  001E98                     __ptext58:
 15425                           	opt stack 0
 15426  001E98                     _updateMenu:
 15427                           	opt stack 18
 15428                           
 15429                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15430                           
 15431                           ;incstack = 0
 15432  001E98  0E00               	movlw	0
 15433  001E9A  6E78               	movwf	_up+1,c
 15434  001E9C  0E00               	movlw	0
 15435  001E9E  6E77               	movwf	_up,c
 15436  001EA0  0E00               	movlw	0
 15437  001EA2  6E68               	movwf	_down+1,c
 15438  001EA4  0E00               	movlw	0
 15439  001EA6  6E67               	movwf	_down,c
 15440  001EA8  0E00               	movlw	0
 15441  001EAA  6E6A               	movwf	_enter+1,c
 15442  001EAC  0E00               	movlw	0
 15443  001EAE  6E69               	movwf	_enter,c
 15444  001EB0  0E00               	movlw	0
 15445  001EB2  6E5C               	movwf	_back+1,c
 15446  001EB4  0E00               	movlw	0
 15447  001EB6  6E5B               	movwf	_back,c
 15448                           
 15449                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15450  001EB8  9EF2               	bcf	intcon,7,c	;volatile
 15451                           
 15452                           ;UI.c: 215: if (inputHandler()
 15453                           ;UI.c: 218: ){
 15454  001EBA  ECC0  F012         	call	_inputHandler	;wreg free
 15455  001EBE  502A               	movf	?_inputHandler,w,c
 15456  001EC0  102B               	iorwf	?_inputHandler+1,w,c
 15457  001EC2  A4D8               	btfss	status,2,c
 15458  001EC4  D112               	goto	i2l7696
 15459  001EC6  D146               	goto	i2l254
 15460  001EC8                     i2l7548:
 15461                           
 15462                           ;UI.c: 222: change_state_to_menu_11();
 15463  001EC8  ECF5  F020         	call	_change_state_to_menu_11	;wreg free
 15464                           
 15465                           ;UI.c: 223: break;
 15466  001ECC  D143               	goto	i2l254
 15467  001ECE                     i2l7550:
 15468                           
 15469                           ;UI.c: 226: if(up){
 15470  001ECE  5077               	movf	_up,w,c
 15471  001ED0  1078               	iorwf	_up+1,w,c
 15472  001ED2  B4D8               	btfsc	status,2,c
 15473  001ED4  D003               	goto	i2l7554
 15474                           
 15475                           ;UI.c: 227: change_state_to_menu_23();
 15476  001ED6  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15477                           
 15478                           ;UI.c: 228: }
 15479  001EDA  D13C               	goto	i2l254
 15480  001EDC                     i2l7554:
 15481                           
 15482                           ;UI.c: 229: else if(down){
 15483  001EDC  5067               	movf	_down,w,c
 15484  001EDE  1068               	iorwf	_down+1,w,c
 15485  001EE0  B4D8               	btfsc	status,2,c
 15486  001EE2  D003               	goto	i2l7558
 15487                           
 15488                           ;UI.c: 230: change_state_to_menu_12();
 15489  001EE4  ECC5  F020         	call	i2_change_state_to_menu_12	;wreg free
 15490                           
 15491                           ;UI.c: 231: }
 15492  001EE8  D135               	goto	i2l254
 15493  001EEA                     i2l7558:
 15494                           
 15495                           ;UI.c: 232: else if(enter){
 15496  001EEA  5069               	movf	_enter,w,c
 15497  001EEC  106A               	iorwf	_enter+1,w,c
 15498  001EEE  B4D8               	btfsc	status,2,c
 15499  001EF0  D131               	goto	i2l254
 15500                           
 15501                           ;UI.c: 233: change_state_to_menu_start();
 15502  001EF2  EC08  F022         	call	i2_change_state_to_menu_start	;wreg free
 15503                           
 15504                           ;UI.c: 234: }
 15505                           ;UI.c: 235: break;
 15506  001EF6  D12E               	goto	i2l254
 15507  001EF8                     i2l7562:
 15508                           
 15509                           ;UI.c: 238: if(up){
 15510  001EF8  5077               	movf	_up,w,c
 15511  001EFA  1078               	iorwf	_up+1,w,c
 15512  001EFC  B4D8               	btfsc	status,2,c
 15513  001EFE  D003               	goto	i2l7566
 15514                           
 15515                           ;UI.c: 239: change_state_to_menu_11();
 15516  001F00  ECF5  F020         	call	_change_state_to_menu_11	;wreg free
 15517                           
 15518                           ;UI.c: 240: }
 15519  001F04  D127               	goto	i2l254
 15520  001F06                     i2l7566:
 15521                           
 15522                           ;UI.c: 241: else if(down){
 15523  001F06  5067               	movf	_down,w,c
 15524  001F08  1068               	iorwf	_down+1,w,c
 15525  001F0A  B4D8               	btfsc	status,2,c
 15526  001F0C  D011               	goto	i2l7582
 15527                           
 15528                           ;UI.c: 242: change_state_to_menu_23();
 15529  001F0E  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15530                           
 15531                           ;UI.c: 243: }
 15532  001F12  D120               	goto	i2l254
 15533  001F14                     i2l7574:
 15534                           
 15535                           ;UI.c: 250: if(up){
 15536  001F14  5077               	movf	_up,w,c
 15537  001F16  1078               	iorwf	_up+1,w,c
 15538  001F18  B4D8               	btfsc	status,2,c
 15539  001F1A  D003               	goto	i2l7578
 15540                           
 15541                           ;UI.c: 251: change_state_to_menu_11();
 15542  001F1C  ECF5  F020         	call	_change_state_to_menu_11	;wreg free
 15543                           
 15544                           ;UI.c: 252: }
 15545  001F20  D119               	goto	i2l254
 15546  001F22                     i2l7578:
 15547                           
 15548                           ;UI.c: 253: else if(down){
 15549  001F22  5067               	movf	_down,w,c
 15550  001F24  1068               	iorwf	_down+1,w,c
 15551  001F26  B4D8               	btfsc	status,2,c
 15552  001F28  D003               	goto	i2l7582
 15553                           
 15554                           ;UI.c: 254: change_state_to_menu_23();
 15555  001F2A  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15556                           
 15557                           ;UI.c: 255: }
 15558  001F2E  D112               	goto	i2l254
 15559  001F30                     i2l7582:
 15560                           
 15561                           ;UI.c: 256: else if(enter){
 15562  001F30  5069               	movf	_enter,w,c
 15563  001F32  106A               	iorwf	_enter+1,w,c
 15564  001F34  B4D8               	btfsc	status,2,c
 15565  001F36  D10E               	goto	i2l254
 15566                           
 15567                           ;UI.c: 257: machine_state = Sorting_state;
 15568  001F38  0E01               	movlw	1
 15569  001F3A  0100               	movlb	0	; () banked
 15570  001F3C  6FFC               	movwf	_machine_state& (0+255),b
 15571                           
 15572                           ; BSR set to: 0
 15573                           ;UI.c: 258: }
 15574                           ;UI.c: 259: break;
 15575                           
 15576                           ; BSR set to: 0
 15577                           
 15578                           ; BSR set to: 0
 15579  001F3E  D10A               	goto	i2l254
 15580  001F40                     i2l7586:
 15581                           
 15582                           ;UI.c: 262: if(up){
 15583  001F40  5077               	movf	_up,w,c
 15584  001F42  1078               	iorwf	_up+1,w,c
 15585  001F44  B4D8               	btfsc	status,2,c
 15586  001F46  D003               	goto	i2l7590
 15587                           
 15588                           ;UI.c: 263: change_state_to_menu_22();
 15589  001F48  ECAD  F020         	call	i2_change_state_to_menu_22	;wreg free
 15590                           
 15591                           ;UI.c: 264: }
 15592  001F4C  D103               	goto	i2l254
 15593  001F4E                     i2l7590:
 15594                           
 15595                           ;UI.c: 265: else if(down){
 15596  001F4E  5067               	movf	_down,w,c
 15597  001F50  1068               	iorwf	_down+1,w,c
 15598  001F52  B4D8               	btfsc	status,2,c
 15599  001F54  D003               	goto	i2l7594
 15600                           
 15601                           ;UI.c: 266: change_state_to_menu_11();
 15602  001F56  ECF5  F020         	call	_change_state_to_menu_11	;wreg free
 15603                           
 15604                           ;UI.c: 267: }
 15605  001F5A  D0FC               	goto	i2l254
 15606  001F5C                     i2l7594:
 15607                           
 15608                           ;UI.c: 268: else if(enter){
 15609  001F5C  5069               	movf	_enter,w,c
 15610  001F5E  106A               	iorwf	_enter+1,w,c
 15611  001F60  B4D8               	btfsc	status,2,c
 15612  001F62  D0F8               	goto	i2l254
 15613                           
 15614                           ;UI.c: 269: change_state_to_logs_11();
 15615  001F64  EC6D  F021         	call	_change_state_to_logs_11	;wreg free
 15616                           
 15617                           ;UI.c: 270: }
 15618                           ;UI.c: 271: break;
 15619  001F68  D0F5               	goto	i2l254
 15620  001F6A                     i2l7598:
 15621                           
 15622                           ;UI.c: 274: if(up){
 15623  001F6A  5077               	movf	_up,w,c
 15624  001F6C  1078               	iorwf	_up+1,w,c
 15625  001F6E  B4D8               	btfsc	status,2,c
 15626  001F70  D003               	goto	i2l7602
 15627                           
 15628                           ;UI.c: 275: change_state_to_logs_34();
 15629  001F72  EC0D  F021         	call	_change_state_to_logs_34	;wreg free
 15630                           
 15631                           ;UI.c: 276: }
 15632  001F76  D0EE               	goto	i2l254
 15633  001F78                     i2l7602:
 15634                           
 15635                           ;UI.c: 277: else if(down){
 15636  001F78  5067               	movf	_down,w,c
 15637  001F7A  1068               	iorwf	_down+1,w,c
 15638  001F7C  B4D8               	btfsc	status,2,c
 15639  001F7E  D003               	goto	i2l7606
 15640                           
 15641                           ;UI.c: 278: change_state_to_logs_12();
 15642  001F80  EC55  F021         	call	_change_state_to_logs_12	;wreg free
 15643                           
 15644                           ;UI.c: 279: }
 15645  001F84  D0E7               	goto	i2l254
 15646  001F86                     i2l7606:
 15647                           
 15648                           ;UI.c: 280: else if(enter){
 15649  001F86  5069               	movf	_enter,w,c
 15650  001F88  106A               	iorwf	_enter+1,w,c
 15651  001F8A  B4D8               	btfsc	status,2,c
 15652  001F8C  D007               	goto	i2l7610
 15653                           
 15654                           ;UI.c: 281: dispLogs(1);
 15655  001F8E  0E00               	movlw	0
 15656  001F90  6E13               	movwf	dispLogs@myLog+1,c
 15657  001F92  0E01               	movlw	1
 15658  001F94  6E12               	movwf	dispLogs@myLog,c
 15659  001F96  EC54  F022         	call	_dispLogs	;wreg free
 15660                           
 15661                           ;UI.c: 282: }
 15662  001F9A  D0DC               	goto	i2l254
 15663  001F9C                     i2l7610:
 15664                           
 15665                           ;UI.c: 283: else if(back){
 15666  001F9C  505B               	movf	_back,w,c
 15667  001F9E  105C               	iorwf	_back+1,w,c
 15668  001FA0  B4D8               	btfsc	status,2,c
 15669  001FA2  D0D8               	goto	i2l254
 15670                           
 15671                           ;UI.c: 284: change_state_to_menu_23();
 15672  001FA4  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15673                           
 15674                           ;UI.c: 285: }
 15675                           ;UI.c: 286: break;
 15676  001FA8  D0D5               	goto	i2l254
 15677  001FAA                     i2l7614:
 15678                           
 15679                           ;UI.c: 289: if(up){
 15680  001FAA  5077               	movf	_up,w,c
 15681  001FAC  1078               	iorwf	_up+1,w,c
 15682  001FAE  B4D8               	btfsc	status,2,c
 15683  001FB0  D003               	goto	i2l7618
 15684                           
 15685                           ;UI.c: 290: change_state_to_logs_11();
 15686  001FB2  EC6D  F021         	call	_change_state_to_logs_11	;wreg free
 15687                           
 15688                           ;UI.c: 291: }
 15689  001FB6  D0CE               	goto	i2l254
 15690  001FB8                     i2l7618:
 15691                           
 15692                           ;UI.c: 292: else if(down){
 15693  001FB8  5067               	movf	_down,w,c
 15694  001FBA  1068               	iorwf	_down+1,w,c
 15695  001FBC  B4D8               	btfsc	status,2,c
 15696  001FBE  D003               	goto	i2l7622
 15697                           
 15698                           ;UI.c: 293: change_state_to_logs_23();
 15699  001FC0  EC9C  F021         	call	_change_state_to_logs_23	;wreg free
 15700                           
 15701                           ;UI.c: 294: }
 15702  001FC4  D0C7               	goto	i2l254
 15703  001FC6                     i2l7622:
 15704                           
 15705                           ;UI.c: 295: else if(enter){
 15706  001FC6  5069               	movf	_enter,w,c
 15707  001FC8  106A               	iorwf	_enter+1,w,c
 15708  001FCA  B4D8               	btfsc	status,2,c
 15709  001FCC  D007               	goto	i2l7626
 15710                           
 15711                           ;UI.c: 296: dispLogs(2);
 15712  001FCE  0E00               	movlw	0
 15713  001FD0  6E13               	movwf	dispLogs@myLog+1,c
 15714  001FD2  0E02               	movlw	2
 15715  001FD4  6E12               	movwf	dispLogs@myLog,c
 15716  001FD6  EC54  F022         	call	_dispLogs	;wreg free
 15717                           
 15718                           ;UI.c: 297: }
 15719  001FDA  D0BC               	goto	i2l254
 15720  001FDC                     i2l7626:
 15721                           
 15722                           ;UI.c: 298: else if(back){
 15723  001FDC  505B               	movf	_back,w,c
 15724  001FDE  105C               	iorwf	_back+1,w,c
 15725  001FE0  B4D8               	btfsc	status,2,c
 15726  001FE2  D0B8               	goto	i2l254
 15727                           
 15728                           ;UI.c: 299: change_state_to_menu_23();
 15729  001FE4  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15730                           
 15731                           ;UI.c: 300: }
 15732                           ;UI.c: 301: break;
 15733  001FE8  D0B5               	goto	i2l254
 15734  001FEA                     i2l7630:
 15735                           
 15736                           ;UI.c: 304: if(up){
 15737  001FEA  5077               	movf	_up,w,c
 15738  001FEC  1078               	iorwf	_up+1,w,c
 15739  001FEE  B4D8               	btfsc	status,2,c
 15740  001FF0  D003               	goto	i2l7634
 15741                           
 15742                           ;UI.c: 305: change_state_to_logs_11();
 15743  001FF2  EC6D  F021         	call	_change_state_to_logs_11	;wreg free
 15744                           
 15745                           ;UI.c: 306: }
 15746  001FF6  D0AE               	goto	i2l254
 15747  001FF8                     i2l7634:
 15748                           
 15749                           ;UI.c: 307: else if(down){
 15750  001FF8  5067               	movf	_down,w,c
 15751  001FFA  1068               	iorwf	_down+1,w,c
 15752  001FFC  B4D8               	btfsc	status,2,c
 15753  001FFE  D003               	goto	i2l7638
 15754                           
 15755                           ;UI.c: 308: change_state_to_logs_23();
 15756  002000  EC9C  F021         	call	_change_state_to_logs_23	;wreg free
 15757                           
 15758                           ;UI.c: 309: }
 15759  002004  D0A7               	goto	i2l254
 15760  002006                     i2l7638:
 15761                           
 15762                           ;UI.c: 310: else if(enter){
 15763  002006  5069               	movf	_enter,w,c
 15764  002008  106A               	iorwf	_enter+1,w,c
 15765  00200A  B4D8               	btfsc	status,2,c
 15766  00200C  D007               	goto	i2l7642
 15767                           
 15768                           ;UI.c: 311: dispLogs(2);
 15769  00200E  0E00               	movlw	0
 15770  002010  6E13               	movwf	dispLogs@myLog+1,c
 15771  002012  0E02               	movlw	2
 15772  002014  6E12               	movwf	dispLogs@myLog,c
 15773  002016  EC54  F022         	call	_dispLogs	;wreg free
 15774                           
 15775                           ;UI.c: 312: }
 15776  00201A  D09C               	goto	i2l254
 15777  00201C                     i2l7642:
 15778                           
 15779                           ;UI.c: 313: else if(back){
 15780  00201C  505B               	movf	_back,w,c
 15781  00201E  105C               	iorwf	_back+1,w,c
 15782  002020  B4D8               	btfsc	status,2,c
 15783  002022  D098               	goto	i2l254
 15784                           
 15785                           ;UI.c: 314: change_state_to_menu_23();
 15786  002024  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15787                           
 15788                           ;UI.c: 315: }
 15789                           ;UI.c: 316: break;
 15790  002028  D095               	goto	i2l254
 15791  00202A                     i2l7646:
 15792                           
 15793                           ;UI.c: 319: if(up){
 15794  00202A  5077               	movf	_up,w,c
 15795  00202C  1078               	iorwf	_up+1,w,c
 15796  00202E  B4D8               	btfsc	status,2,c
 15797  002030  D003               	goto	i2l7650
 15798                           
 15799                           ;UI.c: 320: change_state_to_logs_22();
 15800  002032  EC3D  F021         	call	_change_state_to_logs_22	;wreg free
 15801                           
 15802                           ;UI.c: 321: }
 15803  002036  D08E               	goto	i2l254
 15804  002038                     i2l7650:
 15805                           
 15806                           ;UI.c: 322: else if(down){
 15807  002038  5067               	movf	_down,w,c
 15808  00203A  1068               	iorwf	_down+1,w,c
 15809  00203C  B4D8               	btfsc	status,2,c
 15810  00203E  D003               	goto	i2l7654
 15811                           
 15812                           ;UI.c: 323: change_state_to_logs_34();
 15813  002040  EC0D  F021         	call	_change_state_to_logs_34	;wreg free
 15814                           
 15815                           ;UI.c: 324: }
 15816  002044  D087               	goto	i2l254
 15817  002046                     i2l7654:
 15818                           
 15819                           ;UI.c: 325: else if(enter){
 15820  002046  5069               	movf	_enter,w,c
 15821  002048  106A               	iorwf	_enter+1,w,c
 15822  00204A  B4D8               	btfsc	status,2,c
 15823  00204C  D007               	goto	i2l7658
 15824                           
 15825                           ;UI.c: 326: dispLogs(3);
 15826  00204E  0E00               	movlw	0
 15827  002050  6E13               	movwf	dispLogs@myLog+1,c
 15828  002052  0E03               	movlw	3
 15829  002054  6E12               	movwf	dispLogs@myLog,c
 15830  002056  EC54  F022         	call	_dispLogs	;wreg free
 15831                           
 15832                           ;UI.c: 327: }
 15833  00205A  D07C               	goto	i2l254
 15834  00205C                     i2l7658:
 15835                           
 15836                           ;UI.c: 328: else if(back){
 15837  00205C  505B               	movf	_back,w,c
 15838  00205E  105C               	iorwf	_back+1,w,c
 15839  002060  B4D8               	btfsc	status,2,c
 15840  002062  D078               	goto	i2l254
 15841                           
 15842                           ;UI.c: 329: change_state_to_menu_23();
 15843  002064  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15844                           
 15845                           ;UI.c: 330: }
 15846                           ;UI.c: 331: break;
 15847  002068  D075               	goto	i2l254
 15848  00206A                     i2l7662:
 15849                           
 15850                           ;UI.c: 334: if(up){
 15851  00206A  5077               	movf	_up,w,c
 15852  00206C  1078               	iorwf	_up+1,w,c
 15853  00206E  B4D8               	btfsc	status,2,c
 15854  002070  D003               	goto	i2l7666
 15855                           
 15856                           ;UI.c: 335: change_state_to_logs_22();
 15857  002072  EC3D  F021         	call	_change_state_to_logs_22	;wreg free
 15858                           
 15859                           ;UI.c: 336: }
 15860  002076  D06E               	goto	i2l254
 15861  002078                     i2l7666:
 15862                           
 15863                           ;UI.c: 337: else if(down){
 15864  002078  5067               	movf	_down,w,c
 15865  00207A  1068               	iorwf	_down+1,w,c
 15866  00207C  B4D8               	btfsc	status,2,c
 15867  00207E  D003               	goto	i2l7670
 15868                           
 15869                           ;UI.c: 338: change_state_to_logs_34();
 15870  002080  EC0D  F021         	call	_change_state_to_logs_34	;wreg free
 15871                           
 15872                           ;UI.c: 339: }
 15873  002084  D067               	goto	i2l254
 15874  002086                     i2l7670:
 15875                           
 15876                           ;UI.c: 340: else if(enter){
 15877  002086  5069               	movf	_enter,w,c
 15878  002088  106A               	iorwf	_enter+1,w,c
 15879  00208A  B4D8               	btfsc	status,2,c
 15880  00208C  D007               	goto	i2l7674
 15881                           
 15882                           ;UI.c: 341: dispLogs(3);
 15883  00208E  0E00               	movlw	0
 15884  002090  6E13               	movwf	dispLogs@myLog+1,c
 15885  002092  0E03               	movlw	3
 15886  002094  6E12               	movwf	dispLogs@myLog,c
 15887  002096  EC54  F022         	call	_dispLogs	;wreg free
 15888                           
 15889                           ;UI.c: 342: }
 15890  00209A  D05C               	goto	i2l254
 15891  00209C                     i2l7674:
 15892                           
 15893                           ;UI.c: 343: else if(back){
 15894  00209C  505B               	movf	_back,w,c
 15895  00209E  105C               	iorwf	_back+1,w,c
 15896  0020A0  B4D8               	btfsc	status,2,c
 15897  0020A2  D058               	goto	i2l254
 15898                           
 15899                           ;UI.c: 344: change_state_to_menu_23();
 15900  0020A4  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15901                           
 15902                           ;UI.c: 345: }
 15903                           ;UI.c: 346: break;
 15904  0020A8  D055               	goto	i2l254
 15905  0020AA                     i2l7678:
 15906                           
 15907                           ;UI.c: 349: if(up){
 15908  0020AA  5077               	movf	_up,w,c
 15909  0020AC  1078               	iorwf	_up+1,w,c
 15910  0020AE  B4D8               	btfsc	status,2,c
 15911  0020B0  D003               	goto	i2l7682
 15912                           
 15913                           ;UI.c: 350: change_state_to_logs_33();
 15914  0020B2  EC25  F021         	call	_change_state_to_logs_33	;wreg free
 15915                           
 15916                           ;UI.c: 351: }
 15917  0020B6  D04E               	goto	i2l254
 15918  0020B8                     i2l7682:
 15919                           
 15920                           ;UI.c: 352: else if(down){
 15921  0020B8  5067               	movf	_down,w,c
 15922  0020BA  1068               	iorwf	_down+1,w,c
 15923  0020BC  B4D8               	btfsc	status,2,c
 15924  0020BE  D003               	goto	i2l7686
 15925                           
 15926                           ;UI.c: 353: change_state_to_logs_11();
 15927  0020C0  EC6D  F021         	call	_change_state_to_logs_11	;wreg free
 15928                           
 15929                           ;UI.c: 354: }
 15930  0020C4  D047               	goto	i2l254
 15931  0020C6                     i2l7686:
 15932                           
 15933                           ;UI.c: 355: else if(enter){
 15934  0020C6  5069               	movf	_enter,w,c
 15935  0020C8  106A               	iorwf	_enter+1,w,c
 15936  0020CA  B4D8               	btfsc	status,2,c
 15937  0020CC  D007               	goto	i2l7690
 15938                           
 15939                           ;UI.c: 356: dispLogs(4);
 15940  0020CE  0E00               	movlw	0
 15941  0020D0  6E13               	movwf	dispLogs@myLog+1,c
 15942  0020D2  0E04               	movlw	4
 15943  0020D4  6E12               	movwf	dispLogs@myLog,c
 15944  0020D6  EC54  F022         	call	_dispLogs	;wreg free
 15945                           
 15946                           ;UI.c: 357: }
 15947  0020DA  D03C               	goto	i2l254
 15948  0020DC                     i2l7690:
 15949                           
 15950                           ;UI.c: 358: else if(back){
 15951  0020DC  505B               	movf	_back,w,c
 15952  0020DE  105C               	iorwf	_back+1,w,c
 15953  0020E0  B4D8               	btfsc	status,2,c
 15954  0020E2  D038               	goto	i2l254
 15955                           
 15956                           ;UI.c: 359: change_state_to_menu_23();
 15957  0020E4  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 15958                           
 15959                           ;UI.c: 365: }
 15960                           
 15961                           ;UI.c: 364: break;
 15962                           
 15963                           ;UI.c: 363: default:
 15964                           
 15965                           ;UI.c: 360: }
 15966                           ;UI.c: 361: break;
 15967  0020E8  D035               	goto	i2l254
 15968  0020EA                     i2l7696:
 15969  0020EA  C0DE  F043         	movff	_cur_state,??_updateMenu
 15970  0020EE  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 15971                           
 15972                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 15973                           ; Switch size 1, requested type "space"
 15974                           ; Number of cases is 3, Range of values is 0 to 4
 15975                           ; switch strategies available:
 15976                           ; Name         Instructions Cycles
 15977                           ; simple_byte           10     6 (average)
 15978                           ;	Chosen strategy is simple_byte
 15979  0020F2  5044               	movf	??_updateMenu+1,w,c
 15980  0020F4  0A00               	xorlw	0	; case 0
 15981  0020F6  B4D8               	btfsc	status,2,c
 15982  0020F8  D007               	goto	i2l8280
 15983  0020FA  0A03               	xorlw	3	; case 3
 15984  0020FC  B4D8               	btfsc	status,2,c
 15985  0020FE  D015               	goto	i2l8282
 15986  002100  0A07               	xorlw	7	; case 4
 15987  002102  B4D8               	btfsc	status,2,c
 15988  002104  D020               	goto	i2l8284
 15989  002106  D026               	goto	i2l254
 15990  002108                     i2l8280:
 15991                           
 15992                           ; Switch size 1, requested type "space"
 15993                           ; Number of cases is 5, Range of values is 0 to 23
 15994                           ; switch strategies available:
 15995                           ; Name         Instructions Cycles
 15996                           ; simple_byte           16     9 (average)
 15997                           ;	Chosen strategy is simple_byte
 15998  002108  5043               	movf	??_updateMenu,w,c
 15999  00210A  0A00               	xorlw	0	; case 0
 16000  00210C  B4D8               	btfsc	status,2,c
 16001  00210E  D6DC               	goto	i2l7548
 16002  002110  0A0B               	xorlw	11	; case 11
 16003  002112  B4D8               	btfsc	status,2,c
 16004  002114  D6DC               	goto	i2l7550
 16005  002116  0A07               	xorlw	7	; case 12
 16006  002118  B4D8               	btfsc	status,2,c
 16007  00211A  D6EE               	goto	i2l7562
 16008  00211C  0A1A               	xorlw	26	; case 22
 16009  00211E  B4D8               	btfsc	status,2,c
 16010  002120  D6F9               	goto	i2l7574
 16011  002122  0A01               	xorlw	1	; case 23
 16012  002124  B4D8               	btfsc	status,2,c
 16013  002126  D70C               	goto	i2l7586
 16014  002128  D015               	goto	i2l254
 16015  00212A                     i2l8282:
 16016                           
 16017                           ; Switch size 1, requested type "space"
 16018                           ; Number of cases is 4, Range of values is 243 to 255
 16019                           ; switch strategies available:
 16020                           ; Name         Instructions Cycles
 16021                           ; simple_byte           13     7 (average)
 16022                           ;	Chosen strategy is simple_byte
 16023  00212A  5043               	movf	??_updateMenu,w,c
 16024  00212C  0AF3               	xorlw	243	; case 243
 16025  00212E  B4D8               	btfsc	status,2,c
 16026  002130  D71C               	goto	i2l7598
 16027  002132  0A07               	xorlw	7	; case 244
 16028  002134  B4D8               	btfsc	status,2,c
 16029  002136  D739               	goto	i2l7614
 16030  002138  0A0A               	xorlw	10	; case 254
 16031  00213A  B4D8               	btfsc	status,2,c
 16032  00213C  D756               	goto	i2l7630
 16033  00213E  0A01               	xorlw	1	; case 255
 16034  002140  B4D8               	btfsc	status,2,c
 16035  002142  D773               	goto	i2l7646
 16036  002144  D007               	goto	i2l254
 16037  002146                     i2l8284:
 16038                           
 16039                           ; Switch size 1, requested type "space"
 16040                           ; Number of cases is 2, Range of values is 9 to 10
 16041                           ; switch strategies available:
 16042                           ; Name         Instructions Cycles
 16043                           ; simple_byte            7     4 (average)
 16044                           ;	Chosen strategy is simple_byte
 16045  002146  5043               	movf	??_updateMenu,w,c
 16046  002148  0A09               	xorlw	9	; case 9
 16047  00214A  B4D8               	btfsc	status,2,c
 16048  00214C  D78E               	goto	i2l7662
 16049  00214E  0A03               	xorlw	3	; case 10
 16050  002150  B4D8               	btfsc	status,2,c
 16051  002152  D7AB               	goto	i2l7678
 16052  002154                     i2l254:
 16053                           
 16054                           ;UI.c: 366: }
 16055                           ;UI.c: 367: (INTCONbits.GIE = 1);
 16056  002154  8EF2               	bsf	intcon,7,c	;volatile
 16057  002156  0012               	return		;funcret
 16058  002158                     __end_of_updateMenu:
 16059                           	opt stack 0
 16060                           pclatu	equ	0xFFB
 16061                           pclath	equ	0xFFA
 16062                           tblptru	equ	0xFF8
 16063                           tblptrh	equ	0xFF7
 16064                           tblptrl	equ	0xFF6
 16065                           tablat	equ	0xFF5
 16066                           prodh	equ	0xFF4
 16067                           prodl	equ	0xFF3
 16068                           intcon	equ	0xFF2
 16069                           intcon2	equ	0xFF1
 16070                           intcon3	equ	0xFF0
 16071                           indf0	equ	0xFEF
 16072                           postinc0	equ	0xFEE
 16073                           fsr0h	equ	0xFEA
 16074                           fsr0l	equ	0xFE9
 16075                           wreg	equ	0xFE8
 16076                           postdec1	equ	0xFE5
 16077                           fsr1h	equ	0xFE2
 16078                           fsr1l	equ	0xFE1
 16079                           indf2	equ	0xFDF
 16080                           postinc2	equ	0xFDE
 16081                           postdec2	equ	0xFDD
 16082                           fsr2h	equ	0xFDA
 16083                           fsr2l	equ	0xFD9
 16084                           status	equ	0xFD8
 16085                           
 16086 ;; *************** function i2_change_state_to_menu_start *****************
 16087 ;; Defined at:
 16088 ;;		line 472 in file "UI.c"
 16089 ;; Parameters:    Size  Location     Type
 16090 ;;		None
 16091 ;; Auto vars:     Size  Location     Type
 16092 ;;		None
 16093 ;; Return value:  Size  Location     Type
 16094 ;;                  1    wreg      void 
 16095 ;; Registers used:
 16096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16097 ;; Tracked objects:
 16098 ;;		On entry : 0/0
 16099 ;;		On exit  : 0/0
 16100 ;;		Unchanged: 0/0
 16101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16106 ;;Total ram usage:        0 bytes
 16107 ;; Hardware stack levels used:    1
 16108 ;; Hardware stack levels required when called:    4
 16109 ;; This function calls:
 16110 ;;		i2_lcdInst
 16111 ;;		i2_printRTC
 16112 ;;		i2_printf
 16113 ;; This function is called by:
 16114 ;;		_updateMenu
 16115 ;; This function uses a non-reentrant model
 16116 ;;
 16117                           
 16118                           	psect	text59
 16119  004410                     __ptext59:
 16120                           	opt stack 0
 16121  004410                     i2_change_state_to_menu_start:
 16122                           	opt stack 18
 16123                           
 16124                           ;UI.c: 473: cur_state = 0;
 16125                           
 16126                           ;incstack = 0
 16127  004410  0E00               	movlw	0
 16128  004412  0100               	movlb	0	; () banked
 16129  004414  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16130  004416  0E00               	movlw	0
 16131  004418  6FDE               	movwf	_cur_state& (0+255),b
 16132                           
 16133                           ; BSR set to: 0
 16134                           ;UI.c: 475: lcdInst(0b10000000);;
 16135  00441A  0E80               	movlw	128
 16136  00441C  ECE2  F022         	call	i2_lcdInst
 16137                           
 16138                           ;UI.c: 476: printRTC();
 16139  004420  ECAC  F010         	call	i2_printRTC	;wreg free
 16140                           
 16141                           ;UI.c: 477: lcdInst(0b11000000);;
 16142  004424  0EC0               	movlw	192
 16143  004426  ECE2  F022         	call	i2_lcdInst
 16144                           
 16145                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 16146  00442A  0E1F               	movlw	low STR_30
 16147  00442C  6E0D               	movwf	i2printf@f,c
 16148  00442E  0EFE               	movlw	high STR_30
 16149  004430  6E0E               	movwf	i2printf@f+1,c
 16150  004432  ECB8  F00A         	call	i2_printf	;wreg free
 16151  004436  0012               	return		;funcret
 16152  004438                     __end_ofi2_change_state_to_menu_start:
 16153                           	opt stack 0
 16154                           pclatu	equ	0xFFB
 16155                           pclath	equ	0xFFA
 16156                           tblptru	equ	0xFF8
 16157                           tblptrh	equ	0xFF7
 16158                           tblptrl	equ	0xFF6
 16159                           tablat	equ	0xFF5
 16160                           prodh	equ	0xFF4
 16161                           prodl	equ	0xFF3
 16162                           intcon	equ	0xFF2
 16163                           intcon2	equ	0xFF1
 16164                           intcon3	equ	0xFF0
 16165                           indf0	equ	0xFEF
 16166                           postinc0	equ	0xFEE
 16167                           fsr0h	equ	0xFEA
 16168                           fsr0l	equ	0xFE9
 16169                           wreg	equ	0xFE8
 16170                           postdec1	equ	0xFE5
 16171                           fsr1h	equ	0xFE2
 16172                           fsr1l	equ	0xFE1
 16173                           indf2	equ	0xFDF
 16174                           postinc2	equ	0xFDE
 16175                           postdec2	equ	0xFDD
 16176                           fsr2h	equ	0xFDA
 16177                           fsr2l	equ	0xFD9
 16178                           status	equ	0xFD8
 16179                           
 16180 ;; *************** function i2_printRTC *****************
 16181 ;; Defined at:
 16182 ;;		line 63 in file "RTC.c"
 16183 ;; Parameters:    Size  Location     Type
 16184 ;;		None
 16185 ;; Auto vars:     Size  Location     Type
 16186 ;;  printRTC       14   44[COMRAM] int [7]
 16187 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16188 ;;  printRTC        2   64[COMRAM] int 
 16189 ;;  printRTC        2   58[COMRAM] int 
 16190 ;; Return value:  Size  Location     Type
 16191 ;;                  1    wreg      void 
 16192 ;; Registers used:
 16193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16194 ;; Tracked objects:
 16195 ;;		On entry : 0/0
 16196 ;;		On exit  : 0/0
 16197 ;;		Unchanged: 0/0
 16198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16200 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16201 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16202 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16203 ;;Total ram usage:       25 bytes
 16204 ;; Hardware stack levels used:    1
 16205 ;; Hardware stack levels required when called:    3
 16206 ;; This function calls:
 16207 ;;		i2_getRTC
 16208 ;;		i2_lcdInst
 16209 ;;		i2_printf
 16210 ;;		i2_strcpy
 16211 ;; This function is called by:
 16212 ;;		i2_change_state_to_menu_start
 16213 ;; This function uses a non-reentrant model
 16214 ;;
 16215                           
 16216                           	psect	text60
 16217  002158                     __ptext60:
 16218                           	opt stack 0
 16219  002158                     i2_printRTC:
 16220                           	opt stack 18
 16221                           
 16222                           ;RTC.c: 64: getRTC();
 16223                           
 16224                           ;incstack = 0
 16225  002158  EC69  F01D         	call	i2_getRTC	;wreg free
 16226                           
 16227                           ;RTC.c: 65: char month[] = "MMM";
 16228  00215C  C131  F03D         	movff	printRTC@F3213,i2printRTC@month
 16229  002160  C132  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 16230  002164  C133  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 16231  002168  C134  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 16232                           
 16233                           ;RTC.c: 66: int INT_time[7];
 16234                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16235  00216C  0E00               	movlw	0
 16236  00216E  6E42               	movwf	i2printRTC@i+1,c
 16237  002170  0E00               	movlw	0
 16238  002172  6E41               	movwf	i2printRTC@i,c
 16239  002174  BE42               	btfsc	i2printRTC@i+1,7,c
 16240  002176  D006               	goto	i2l6016
 16241  002178  5042               	movf	i2printRTC@i+1,w,c
 16242  00217A  E135               	bnz	i2l593
 16243  00217C  0E07               	movlw	7
 16244  00217E  5C41               	subwf	i2printRTC@i,w,c
 16245  002180  B0D8               	btfsc	status,0,c
 16246  002182  D031               	goto	i2l593
 16247  002184                     i2l6016:
 16248                           
 16249                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16250  002184  0E24               	movlw	low _time
 16251  002186  2441               	addwf	i2printRTC@i,w,c
 16252  002188  6ED9               	movwf	fsr2l,c
 16253  00218A  0E01               	movlw	high _time
 16254  00218C  2042               	addwfc	i2printRTC@i+1,w,c
 16255  00218E  6EDA               	movwf	fsr2h,c
 16256  002190  50DF               	movf	indf2,w,c
 16257  002192  6E2A               	movwf	??i2_printRTC& (0+255),c
 16258  002194  3A2A               	swapf	??i2_printRTC,f,c
 16259  002196  0E0F               	movlw	15
 16260  002198  162A               	andwf	??i2_printRTC,f,c
 16261  00219A  0E0F               	movlw	15
 16262  00219C  162A               	andwf	??i2_printRTC,f,c
 16263  00219E  502A               	movf	??i2_printRTC,w,c
 16264  0021A0  0D0A               	mullw	10
 16265  0021A2  0E24               	movlw	low _time
 16266  0021A4  2441               	addwf	i2printRTC@i,w,c
 16267  0021A6  6ED9               	movwf	fsr2l,c
 16268  0021A8  0E01               	movlw	high _time
 16269  0021AA  2042               	addwfc	i2printRTC@i+1,w,c
 16270  0021AC  6EDA               	movwf	fsr2h,c
 16271  0021AE  50DF               	movf	indf2,w,c
 16272  0021B0  0B0F               	andlw	15
 16273  0021B2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16274  0021B4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16275  0021B6  50F3               	movf	prodl,w,c
 16276  0021B8  262B               	addwf	??i2_printRTC+1,f,c
 16277  0021BA  50F4               	movf	prodh,w,c
 16278  0021BC  222C               	addwfc	??i2_printRTC+2,f,c
 16279  0021BE  90D8               	bcf	status,0,c
 16280  0021C0  3441               	rlcf	i2printRTC@i,w,c
 16281  0021C2  6ED9               	movwf	fsr2l,c
 16282  0021C4  3442               	rlcf	i2printRTC@i+1,w,c
 16283  0021C6  6EDA               	movwf	fsr2h,c
 16284  0021C8  0E2D               	movlw	low i2printRTC@INT_time
 16285  0021CA  26D9               	addwf	fsr2l,f,c
 16286  0021CC  0E00               	movlw	high i2printRTC@INT_time
 16287  0021CE  22DA               	addwfc	fsr2h,f,c
 16288  0021D0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16289  0021D4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16290  0021D8  4A41               	infsnz	i2printRTC@i,f,c
 16291  0021DA  2A42               	incf	i2printRTC@i+1,f,c
 16292  0021DC  BE42               	btfsc	i2printRTC@i+1,7,c
 16293  0021DE  D7D2               	goto	i2l6016
 16294  0021E0  5042               	movf	i2printRTC@i+1,w,c
 16295  0021E2  E101               	bnz	i2u455_40
 16296  0021E4  D7CB               	goto	L10
 16297  0021E6                     i2u455_40:
 16298  0021E6                     i2l593:
 16299                           
 16300                           ;RTC.c: 69: }
 16301                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16302  0021E6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16303  0021EA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16304                           
 16305                           ;RTC.c: 71: switch(RTC_month){
 16306  0021EE  D084               	goto	i2l6048
 16307  0021F0                     i2l6022:
 16308                           
 16309                           ;RTC.c: 73: strcpy(month, "JAN");
 16310  0021F0  0E3D               	movlw	low i2printRTC@month
 16311  0021F2  6E01               	movwf	i2strcpy@to,c
 16312  0021F4  0E00               	movlw	high i2printRTC@month
 16313  0021F6  6E02               	movwf	i2strcpy@to+1,c
 16314  0021F8  0EDA               	movlw	low STR_8
 16315  0021FA  6E03               	movwf	i2strcpy@from,c
 16316  0021FC  0EFF               	movlw	high STR_8
 16317  0021FE  6E04               	movwf	i2strcpy@from+1,c
 16318  002200  EC94  F020         	call	i2_strcpy	;wreg free
 16319                           
 16320                           ;RTC.c: 74: break;
 16321  002204  D0A6               	goto	i2l6050
 16322  002206                     i2l6024:
 16323                           
 16324                           ;RTC.c: 76: strcpy(month, "FEB");
 16325  002206  0E3D               	movlw	low i2printRTC@month
 16326  002208  6E01               	movwf	i2strcpy@to,c
 16327  00220A  0E00               	movlw	high i2printRTC@month
 16328  00220C  6E02               	movwf	i2strcpy@to+1,c
 16329  00220E  0ECA               	movlw	low STR_9
 16330  002210  6E03               	movwf	i2strcpy@from,c
 16331  002212  0EFF               	movlw	high STR_9
 16332  002214  6E04               	movwf	i2strcpy@from+1,c
 16333  002216  EC94  F020         	call	i2_strcpy	;wreg free
 16334                           
 16335                           ;RTC.c: 77: break;
 16336  00221A  D09B               	goto	i2l6050
 16337  00221C                     i2l6026:
 16338                           
 16339                           ;RTC.c: 79: strcpy(month, "MAR");
 16340  00221C  0E3D               	movlw	low i2printRTC@month
 16341  00221E  6E01               	movwf	i2strcpy@to,c
 16342  002220  0E00               	movlw	high i2printRTC@month
 16343  002222  6E02               	movwf	i2strcpy@to+1,c
 16344  002224  0EE6               	movlw	low STR_10
 16345  002226  6E03               	movwf	i2strcpy@from,c
 16346  002228  0EFF               	movlw	high STR_10
 16347  00222A  6E04               	movwf	i2strcpy@from+1,c
 16348  00222C  EC94  F020         	call	i2_strcpy	;wreg free
 16349                           
 16350                           ;RTC.c: 80: break;
 16351  002230  D090               	goto	i2l6050
 16352  002232                     i2l6028:
 16353                           
 16354                           ;RTC.c: 82: strcpy(month, "APR");
 16355  002232  0E3D               	movlw	low i2printRTC@month
 16356  002234  6E01               	movwf	i2strcpy@to,c
 16357  002236  0E00               	movlw	high i2printRTC@month
 16358  002238  6E02               	movwf	i2strcpy@to+1,c
 16359  00223A  0EEA               	movlw	low STR_11
 16360  00223C  6E03               	movwf	i2strcpy@from,c
 16361  00223E  0EFF               	movlw	high STR_11
 16362  002240  6E04               	movwf	i2strcpy@from+1,c
 16363  002242  EC94  F020         	call	i2_strcpy	;wreg free
 16364                           
 16365                           ;RTC.c: 83: break;
 16366  002246  D085               	goto	i2l6050
 16367  002248                     i2l6030:
 16368                           
 16369                           ;RTC.c: 85: strcpy(month, "MAY");
 16370  002248  0E3D               	movlw	low i2printRTC@month
 16371  00224A  6E01               	movwf	i2strcpy@to,c
 16372  00224C  0E00               	movlw	high i2printRTC@month
 16373  00224E  6E02               	movwf	i2strcpy@to+1,c
 16374  002250  0EFA               	movlw	low STR_12
 16375  002252  6E03               	movwf	i2strcpy@from,c
 16376  002254  0EFF               	movlw	high STR_12
 16377  002256  6E04               	movwf	i2strcpy@from+1,c
 16378  002258  EC94  F020         	call	i2_strcpy	;wreg free
 16379                           
 16380                           ;RTC.c: 86: break;
 16381  00225C  D07A               	goto	i2l6050
 16382  00225E                     i2l6032:
 16383                           
 16384                           ;RTC.c: 88: strcpy(month, "JUN");
 16385  00225E  0E3D               	movlw	low i2printRTC@month
 16386  002260  6E01               	movwf	i2strcpy@to,c
 16387  002262  0E00               	movlw	high i2printRTC@month
 16388  002264  6E02               	movwf	i2strcpy@to+1,c
 16389  002266  0EDE               	movlw	low STR_13
 16390  002268  6E03               	movwf	i2strcpy@from,c
 16391  00226A  0EFF               	movlw	high STR_13
 16392  00226C  6E04               	movwf	i2strcpy@from+1,c
 16393  00226E  EC94  F020         	call	i2_strcpy	;wreg free
 16394                           
 16395                           ;RTC.c: 89: break;
 16396  002272  D06F               	goto	i2l6050
 16397  002274                     i2l6034:
 16398                           
 16399                           ;RTC.c: 91: strcpy(month, "JUL");
 16400  002274  0E3D               	movlw	low i2printRTC@month
 16401  002276  6E01               	movwf	i2strcpy@to,c
 16402  002278  0E00               	movlw	high i2printRTC@month
 16403  00227A  6E02               	movwf	i2strcpy@to+1,c
 16404  00227C  0ED6               	movlw	low STR_14
 16405  00227E  6E03               	movwf	i2strcpy@from,c
 16406  002280  0EFF               	movlw	high STR_14
 16407  002282  6E04               	movwf	i2strcpy@from+1,c
 16408  002284  EC94  F020         	call	i2_strcpy	;wreg free
 16409                           
 16410                           ;RTC.c: 92: break;
 16411  002288  D064               	goto	i2l6050
 16412  00228A                     i2l6036:
 16413                           
 16414                           ;RTC.c: 94: strcpy(month, "AUG");
 16415  00228A  0E3D               	movlw	low i2printRTC@month
 16416  00228C  6E01               	movwf	i2strcpy@to,c
 16417  00228E  0E00               	movlw	high i2printRTC@month
 16418  002290  6E02               	movwf	i2strcpy@to+1,c
 16419  002292  0ED2               	movlw	low STR_15
 16420  002294  6E03               	movwf	i2strcpy@from,c
 16421  002296  0EFF               	movlw	high STR_15
 16422  002298  6E04               	movwf	i2strcpy@from+1,c
 16423  00229A  EC94  F020         	call	i2_strcpy	;wreg free
 16424                           
 16425                           ;RTC.c: 95: break;
 16426  00229E  D059               	goto	i2l6050
 16427  0022A0                     i2l6038:
 16428                           
 16429                           ;RTC.c: 97: strcpy(month, "SEP");
 16430  0022A0  0E3D               	movlw	low i2printRTC@month
 16431  0022A2  6E01               	movwf	i2strcpy@to,c
 16432  0022A4  0E00               	movlw	high i2printRTC@month
 16433  0022A6  6E02               	movwf	i2strcpy@to+1,c
 16434  0022A8  0EE2               	movlw	low STR_16
 16435  0022AA  6E03               	movwf	i2strcpy@from,c
 16436  0022AC  0EFF               	movlw	high STR_16
 16437  0022AE  6E04               	movwf	i2strcpy@from+1,c
 16438  0022B0  EC94  F020         	call	i2_strcpy	;wreg free
 16439                           
 16440                           ;RTC.c: 98: break;
 16441  0022B4  D04E               	goto	i2l6050
 16442  0022B6                     i2l6040:
 16443                           
 16444                           ;RTC.c: 100: strcpy(month, "OCT");
 16445  0022B6  0E3D               	movlw	low i2printRTC@month
 16446  0022B8  6E01               	movwf	i2strcpy@to,c
 16447  0022BA  0E00               	movlw	high i2printRTC@month
 16448  0022BC  6E02               	movwf	i2strcpy@to+1,c
 16449  0022BE  0EF2               	movlw	low STR_17
 16450  0022C0  6E03               	movwf	i2strcpy@from,c
 16451  0022C2  0EFF               	movlw	high STR_17
 16452  0022C4  6E04               	movwf	i2strcpy@from+1,c
 16453  0022C6  EC94  F020         	call	i2_strcpy	;wreg free
 16454                           
 16455                           ;RTC.c: 101: break;
 16456  0022CA  D043               	goto	i2l6050
 16457  0022CC                     i2l6042:
 16458                           
 16459                           ;RTC.c: 103: strcpy(month, "NOV");
 16460  0022CC  0E3D               	movlw	low i2printRTC@month
 16461  0022CE  6E01               	movwf	i2strcpy@to,c
 16462  0022D0  0E00               	movlw	high i2printRTC@month
 16463  0022D2  6E02               	movwf	i2strcpy@to+1,c
 16464  0022D4  0EF6               	movlw	low STR_18
 16465  0022D6  6E03               	movwf	i2strcpy@from,c
 16466  0022D8  0EFF               	movlw	high STR_18
 16467  0022DA  6E04               	movwf	i2strcpy@from+1,c
 16468  0022DC  EC94  F020         	call	i2_strcpy	;wreg free
 16469                           
 16470                           ;RTC.c: 104: break;
 16471  0022E0  D038               	goto	i2l6050
 16472  0022E2                     i2l6044:
 16473                           
 16474                           ;RTC.c: 106: strcpy(month, "DEC");
 16475  0022E2  0E3D               	movlw	low i2printRTC@month
 16476  0022E4  6E01               	movwf	i2strcpy@to,c
 16477  0022E6  0E00               	movlw	high i2printRTC@month
 16478  0022E8  6E02               	movwf	i2strcpy@to+1,c
 16479  0022EA  0ECE               	movlw	low STR_19
 16480  0022EC  6E03               	movwf	i2strcpy@from,c
 16481  0022EE  0EFF               	movlw	high STR_19
 16482  0022F0  6E04               	movwf	i2strcpy@from+1,c
 16483  0022F2  EC94  F020         	call	i2_strcpy	;wreg free
 16484                           
 16485                           ;RTC.c: 108: }
 16486                           
 16487                           ;RTC.c: 107: break;
 16488  0022F6  D02D               	goto	i2l6050
 16489  0022F8                     i2l6048:
 16490  0022F8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16491  0022FC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16492                           
 16493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16494                           ; Switch size 1, requested type "space"
 16495                           ; Number of cases is 1, Range of values is 0 to 0
 16496                           ; switch strategies available:
 16497                           ; Name         Instructions Cycles
 16498                           ; simple_byte            4     3 (average)
 16499                           ;	Chosen strategy is simple_byte
 16500  002300  502B               	movf	??i2_printRTC+1,w,c
 16501  002302  0A00               	xorlw	0	; case 0
 16502  002304  A4D8               	btfss	status,2,c
 16503  002306  D025               	goto	i2l6050
 16504                           
 16505                           ; Switch size 1, requested type "space"
 16506                           ; Number of cases is 12, Range of values is 1 to 12
 16507                           ; switch strategies available:
 16508                           ; Name         Instructions Cycles
 16509                           ; simple_byte           37    19 (average)
 16510                           ;	Chosen strategy is simple_byte
 16511  002308  502A               	movf	??i2_printRTC,w,c
 16512  00230A  0A01               	xorlw	1	; case 1
 16513  00230C  B4D8               	btfsc	status,2,c
 16514  00230E  D770               	goto	i2l6022
 16515  002310  0A03               	xorlw	3	; case 2
 16516  002312  B4D8               	btfsc	status,2,c
 16517  002314  D778               	goto	i2l6024
 16518  002316  0A01               	xorlw	1	; case 3
 16519  002318  B4D8               	btfsc	status,2,c
 16520  00231A  D780               	goto	i2l6026
 16521  00231C  0A07               	xorlw	7	; case 4
 16522  00231E  B4D8               	btfsc	status,2,c
 16523  002320  D788               	goto	i2l6028
 16524  002322  0A01               	xorlw	1	; case 5
 16525  002324  B4D8               	btfsc	status,2,c
 16526  002326  D790               	goto	i2l6030
 16527  002328  0A03               	xorlw	3	; case 6
 16528  00232A  B4D8               	btfsc	status,2,c
 16529  00232C  D798               	goto	i2l6032
 16530  00232E  0A01               	xorlw	1	; case 7
 16531  002330  B4D8               	btfsc	status,2,c
 16532  002332  D7A0               	goto	i2l6034
 16533  002334  0A0F               	xorlw	15	; case 8
 16534  002336  B4D8               	btfsc	status,2,c
 16535  002338  D7A8               	goto	i2l6036
 16536  00233A  0A01               	xorlw	1	; case 9
 16537  00233C  B4D8               	btfsc	status,2,c
 16538  00233E  D7B0               	goto	i2l6038
 16539  002340  0A03               	xorlw	3	; case 10
 16540  002342  B4D8               	btfsc	status,2,c
 16541  002344  D7B8               	goto	i2l6040
 16542  002346  0A01               	xorlw	1	; case 11
 16543  002348  B4D8               	btfsc	status,2,c
 16544  00234A  D7C0               	goto	i2l6042
 16545  00234C  0A07               	xorlw	7	; case 12
 16546  00234E  B4D8               	btfsc	status,2,c
 16547  002350  D7C8               	goto	i2l6044
 16548  002352                     i2l6050:
 16549                           
 16550                           ;RTC.c: 109: lcdInst(0b10000000);;
 16551  002352  0E80               	movlw	128
 16552  002354  ECE2  F022         	call	i2_lcdInst
 16553                           
 16554                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16555  002358  0E42               	movlw	low STR_21
 16556  00235A  6E0D               	movwf	i2printf@f,c
 16557  00235C  0EFB               	movlw	high STR_21
 16558  00235E  6E0E               	movwf	i2printf@f+1,c
 16559  002360  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16560  002364  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16561  002368  0E3D               	movlw	low i2printRTC@month
 16562  00236A  6E11               	movwf	?i2_printf+4,c
 16563  00236C  0E00               	movlw	high i2printRTC@month
 16564  00236E  6E12               	movwf	?i2_printf+5,c
 16565  002370  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16566  002374  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16567  002378  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16568  00237C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16569  002380  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16570  002384  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16571  002388  ECB8  F00A         	call	i2_printf	;wreg free
 16572  00238C  0012               	return		;funcret
 16573  00238E                     __end_ofi2_printRTC:
 16574                           	opt stack 0
 16575                           pclatu	equ	0xFFB
 16576                           pclath	equ	0xFFA
 16577                           tblptru	equ	0xFF8
 16578                           tblptrh	equ	0xFF7
 16579                           tblptrl	equ	0xFF6
 16580                           tablat	equ	0xFF5
 16581                           prodh	equ	0xFF4
 16582                           prodl	equ	0xFF3
 16583                           intcon	equ	0xFF2
 16584                           intcon2	equ	0xFF1
 16585                           intcon3	equ	0xFF0
 16586                           indf0	equ	0xFEF
 16587                           postinc0	equ	0xFEE
 16588                           fsr0h	equ	0xFEA
 16589                           fsr0l	equ	0xFE9
 16590                           wreg	equ	0xFE8
 16591                           postdec1	equ	0xFE5
 16592                           fsr1h	equ	0xFE2
 16593                           fsr1l	equ	0xFE1
 16594                           indf2	equ	0xFDF
 16595                           postinc2	equ	0xFDE
 16596                           postdec2	equ	0xFDD
 16597                           fsr2h	equ	0xFDA
 16598                           fsr2l	equ	0xFD9
 16599                           status	equ	0xFD8
 16600                           
 16601 ;; *************** function i2_strcpy *****************
 16602 ;; Defined at:
 16603 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  to              2    0[COMRAM] PTR unsigned char 
 16606 ;;		 -> printRTC@month(4), UI@month(4), 
 16607 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16608 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16609 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16610 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16611 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16612 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16613 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16614 ;;		 -> STR_8(4), 
 16615 ;; Auto vars:     Size  Location     Type
 16616 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16617 ;;		 -> printRTC@month(4), UI@month(4), 
 16618 ;; Return value:  Size  Location     Type
 16619 ;;                  2    0[COMRAM] PTR unsigned char 
 16620 ;; Registers used:
 16621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16622 ;; Tracked objects:
 16623 ;;		On entry : 0/0
 16624 ;;		On exit  : 0/0
 16625 ;;		Unchanged: 0/0
 16626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16627 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16630 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16631 ;;Total ram usage:        6 bytes
 16632 ;; Hardware stack levels used:    1
 16633 ;; This function calls:
 16634 ;;		Nothing
 16635 ;; This function is called by:
 16636 ;;		i2_printRTC
 16637 ;; This function uses a non-reentrant model
 16638 ;;
 16639                           
 16640                           	psect	text61
 16641  004128                     __ptext61:
 16642                           	opt stack 0
 16643  004128                     i2_strcpy:
 16644                           	opt stack 20
 16645                           
 16646                           ;incstack = 0
 16647  004128  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16648  00412C  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16649  004130  D004               	goto	i2l5690
 16650  004132                     i2l5688:
 16651  004132  4A05               	infsnz	i2strcpy@cp,f,c
 16652  004134  2A06               	incf	i2strcpy@cp+1,f,c
 16653  004136  4A03               	infsnz	i2strcpy@from,f,c
 16654  004138  2A04               	incf	i2strcpy@from+1,f,c
 16655  00413A                     i2l5690:
 16656  00413A  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16657  00413E  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16658  004142                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16659  004142  6AF8               	clrf	tblptru,c
 16660  004144                     	endif
 16661  004144                     	if	0	;tblptru may be non-zero
 16662  004144                     	endif
 16663  004144  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16664  004148  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16665  00414C  0008               	tblrd		*
 16666  00414E  CFF5 FFDF          	movff	tablat,indf2
 16667  004152  50DF               	movf	indf2,w,c
 16668  004154  B4D8               	btfsc	status,2,c
 16669  004156  0012               	return	
 16670  004158  D7EC               	goto	i2l5688
 16671  00415A                     __end_ofi2_strcpy:
 16672                           	opt stack 0
 16673                           pclatu	equ	0xFFB
 16674                           pclath	equ	0xFFA
 16675                           tblptru	equ	0xFF8
 16676                           tblptrh	equ	0xFF7
 16677                           tblptrl	equ	0xFF6
 16678                           tablat	equ	0xFF5
 16679                           prodh	equ	0xFF4
 16680                           prodl	equ	0xFF3
 16681                           intcon	equ	0xFF2
 16682                           intcon2	equ	0xFF1
 16683                           intcon3	equ	0xFF0
 16684                           indf0	equ	0xFEF
 16685                           postinc0	equ	0xFEE
 16686                           fsr0h	equ	0xFEA
 16687                           fsr0l	equ	0xFE9
 16688                           wreg	equ	0xFE8
 16689                           postdec1	equ	0xFE5
 16690                           fsr1h	equ	0xFE2
 16691                           fsr1l	equ	0xFE1
 16692                           indf2	equ	0xFDF
 16693                           postinc2	equ	0xFDE
 16694                           postdec2	equ	0xFDD
 16695                           fsr2h	equ	0xFDA
 16696                           fsr2l	equ	0xFD9
 16697                           status	equ	0xFD8
 16698                           
 16699 ;; *************** function _inputHandler *****************
 16700 ;; Defined at:
 16701 ;;		line 370 in file "UI.c"
 16702 ;; Parameters:    Size  Location     Type
 16703 ;;		None
 16704 ;; Auto vars:     Size  Location     Type
 16705 ;;		None
 16706 ;; Return value:  Size  Location     Type
 16707 ;;                  2   41[COMRAM] int 
 16708 ;; Registers used:
 16709 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16710 ;; Tracked objects:
 16711 ;;		On entry : 0/0
 16712 ;;		On exit  : 0/0
 16713 ;;		Unchanged: 0/0
 16714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16718 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16719 ;;Total ram usage:        4 bytes
 16720 ;; Hardware stack levels used:    1
 16721 ;; Hardware stack levels required when called:    4
 16722 ;; This function calls:
 16723 ;;		_change_state_to_logs_11
 16724 ;;		_change_state_to_logs_12
 16725 ;;		_change_state_to_logs_22
 16726 ;;		_change_state_to_logs_23
 16727 ;;		_change_state_to_logs_33
 16728 ;;		_change_state_to_logs_34
 16729 ;;		_change_state_to_menu_11
 16730 ;;		_change_state_to_menu_23
 16731 ;;		i2_change_state_to_menu_12
 16732 ;;		i2_change_state_to_menu_22
 16733 ;; This function is called by:
 16734 ;;		_updateMenu
 16735 ;; This function uses a non-reentrant model
 16736 ;;
 16737                           
 16738                           	psect	text62
 16739  002580                     __ptext62:
 16740                           	opt stack 0
 16741  002580                     _inputHandler:
 16742                           	opt stack 18
 16743                           
 16744                           ;UI.c: 375: if(firstboot){
 16745                           
 16746                           ;incstack = 0
 16747  002580  5075               	movf	_firstboot,w,c
 16748  002582  1076               	iorwf	_firstboot+1,w,c
 16749  002584  B4D8               	btfsc	status,2,c
 16750  002586  D00B               	goto	i2l6118
 16751                           
 16752                           ;UI.c: 376: change_state_to_menu_11();
 16753  002588  ECF5  F020         	call	_change_state_to_menu_11	;wreg free
 16754                           
 16755                           ;UI.c: 377: firstboot = 0;
 16756  00258C  0E00               	movlw	0
 16757  00258E  6E76               	movwf	_firstboot+1,c
 16758  002590  0E00               	movlw	0
 16759  002592  6E75               	movwf	_firstboot,c
 16760                           
 16761                           ;UI.c: 378: return 0;
 16762  002594  0E00               	movlw	0
 16763  002596  6E2B               	movwf	?_inputHandler+1,c
 16764  002598  0E00               	movlw	0
 16765  00259A  6E2A               	movwf	?_inputHandler,c
 16766  00259C  0012               	return	
 16767  00259E                     i2l6118:
 16768                           
 16769                           ;UI.c: 379: }
 16770                           ;UI.c: 380: if (logstate){
 16771  00259E  0100               	movlb	0	; () banked
 16772  0025A0  51F6               	movf	_logstate& (0+255),w,b
 16773  0025A2  0100               	movlb	0	; () banked
 16774  0025A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16775  0025A6  B4D8               	btfsc	status,2,c
 16776  0025A8  D0C7               	goto	i2l6236
 16777                           
 16778                           ; BSR set to: 0
 16779                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16780  0025AA  0E43               	movlw	67
 16781  0025AC  187D               	xorwf	_input,w,c	;volatile
 16782  0025AE  A4D8               	btfss	status,2,c
 16783  0025B0  D012               	goto	i2l6136
 16784                           
 16785                           ; BSR set to: 0
 16786  0025B2  B281               	btfsc	3969,1,c	;volatile
 16787  0025B4  D009               	goto	i2l6128
 16788  0025B6  D00F               	goto	i2l6136
 16789  0025B8                     i2l6126:
 16790                           
 16791                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16792  0025B8  0E68               	movlw	104
 16793  0025BA  6E2C               	movwf	??_inputHandler& (0+255),c
 16794  0025BC  0EE4               	movlw	228
 16795  0025BE                     i2u792_47:
 16796  0025BE  2EE8               	decfsz	wreg,f,c
 16797  0025C0  D7FE               	bra	i2u792_47
 16798  0025C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16799  0025C4  D7FC               	bra	i2u792_47
 16800  0025C6  D000               	nop2	
 16801  0025C8                     i2l6128:
 16802  0025C8  B281               	btfsc	3969,1,c	;volatile
 16803  0025CA  D7F6               	goto	i2l6126
 16804  0025CC                     i2l6130:
 16805                           
 16806                           ;UI.c: 385: }
 16807                           ;UI.c: 386: return 0;
 16808  0025CC  0E00               	movlw	0
 16809  0025CE  6E2B               	movwf	?_inputHandler+1,c
 16810  0025D0  0E00               	movlw	0
 16811  0025D2  6E2A               	movwf	?_inputHandler,c
 16812  0025D4  0012               	return	
 16813  0025D6                     i2l6136:
 16814                           
 16815                           ;UI.c: 388: else if (input == 'D'){
 16816  0025D6  0E44               	movlw	68
 16817  0025D8  187D               	xorwf	_input,w,c	;volatile
 16818  0025DA  A4D8               	btfss	status,2,c
 16819  0025DC  D7F7               	goto	i2l6130
 16820                           
 16821                           ;UI.c: 390: logstate = 0;
 16822  0025DE  0E00               	movlw	0
 16823  0025E0  0100               	movlb	0	; () banked
 16824  0025E2  6FF7               	movwf	(_logstate+1)& (0+255),b
 16825  0025E4  0E00               	movlw	0
 16826  0025E6  6FF6               	movwf	_logstate& (0+255),b
 16827                           
 16828                           ;UI.c: 391: switch(cur_state){
 16829  0025E8  D012               	goto	i2l6154
 16830  0025EA                     i2l6140:
 16831                           
 16832                           ;UI.c: 393: change_state_to_logs_11();
 16833  0025EA  EC6D  F021         	call	_change_state_to_logs_11	;wreg free
 16834                           
 16835                           ;UI.c: 394: break;
 16836  0025EE  D7EE               	goto	i2l6130
 16837  0025F0                     i2l6142:
 16838                           
 16839                           ;UI.c: 396: change_state_to_logs_12();
 16840  0025F0  EC55  F021         	call	_change_state_to_logs_12	;wreg free
 16841                           
 16842                           ;UI.c: 397: break;
 16843  0025F4  D7EB               	goto	i2l6130
 16844  0025F6                     i2l6144:
 16845                           
 16846                           ;UI.c: 399: change_state_to_logs_22();
 16847  0025F6  EC3D  F021         	call	_change_state_to_logs_22	;wreg free
 16848                           
 16849                           ;UI.c: 400: break;
 16850  0025FA  D7E8               	goto	i2l6130
 16851  0025FC                     i2l6146:
 16852                           
 16853                           ;UI.c: 402: change_state_to_logs_23();
 16854  0025FC  EC9C  F021         	call	_change_state_to_logs_23	;wreg free
 16855                           
 16856                           ;UI.c: 403: break;
 16857  002600  D7E5               	goto	i2l6130
 16858  002602                     i2l6148:
 16859                           
 16860                           ;UI.c: 405: change_state_to_logs_33();
 16861  002602  EC25  F021         	call	_change_state_to_logs_33	;wreg free
 16862                           
 16863                           ;UI.c: 406: break;
 16864  002606  D7E2               	goto	i2l6130
 16865  002608                     i2l6150:
 16866                           
 16867                           ;UI.c: 408: change_state_to_logs_34();
 16868  002608  EC0D  F021         	call	_change_state_to_logs_34	;wreg free
 16869                           
 16870                           ;UI.c: 410: }
 16871                           
 16872                           ;UI.c: 409: break;
 16873  00260C  D7DF               	goto	i2l6130
 16874  00260E                     i2l6154:
 16875  00260E  C0DE  F02C         	movff	_cur_state,??_inputHandler
 16876  002612  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 16877                           
 16878                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16879                           ; Switch size 1, requested type "space"
 16880                           ; Number of cases is 2, Range of values is 3 to 4
 16881                           ; switch strategies available:
 16882                           ; Name         Instructions Cycles
 16883                           ; simple_byte            7     4 (average)
 16884                           ;	Chosen strategy is simple_byte
 16885  002616  502D               	movf	??_inputHandler+1,w,c
 16886  002618  0A03               	xorlw	3	; case 3
 16887  00261A  B4D8               	btfsc	status,2,c
 16888  00261C  D004               	goto	i2l8288
 16889  00261E  0A07               	xorlw	7	; case 4
 16890  002620  B4D8               	btfsc	status,2,c
 16891  002622  D00F               	goto	i2l8290
 16892  002624  D7D3               	goto	i2l6130
 16893  002626                     i2l8288:
 16894                           
 16895                           ; Switch size 1, requested type "space"
 16896                           ; Number of cases is 4, Range of values is 243 to 255
 16897                           ; switch strategies available:
 16898                           ; Name         Instructions Cycles
 16899                           ; simple_byte           13     7 (average)
 16900                           ;	Chosen strategy is simple_byte
 16901  002626  502C               	movf	??_inputHandler,w,c
 16902  002628  0AF3               	xorlw	243	; case 243
 16903  00262A  B4D8               	btfsc	status,2,c
 16904  00262C  D7DE               	goto	i2l6140
 16905  00262E  0A07               	xorlw	7	; case 244
 16906  002630  B4D8               	btfsc	status,2,c
 16907  002632  D7DE               	goto	i2l6142
 16908  002634  0A0A               	xorlw	10	; case 254
 16909  002636  B4D8               	btfsc	status,2,c
 16910  002638  D7DE               	goto	i2l6144
 16911  00263A  0A01               	xorlw	1	; case 255
 16912  00263C  B4D8               	btfsc	status,2,c
 16913  00263E  D7DE               	goto	i2l6146
 16914  002640  D7C5               	goto	i2l6130
 16915  002642                     i2l8290:
 16916                           
 16917                           ; Switch size 1, requested type "space"
 16918                           ; Number of cases is 2, Range of values is 9 to 10
 16919                           ; switch strategies available:
 16920                           ; Name         Instructions Cycles
 16921                           ; simple_byte            7     4 (average)
 16922                           ;	Chosen strategy is simple_byte
 16923  002642  502C               	movf	??_inputHandler,w,c
 16924  002644  0A09               	xorlw	9	; case 9
 16925  002646  B4D8               	btfsc	status,2,c
 16926  002648  D7DC               	goto	i2l6148
 16927  00264A  0A03               	xorlw	3	; case 10
 16928  00264C  B4D8               	btfsc	status,2,c
 16929  00264E  D7DC               	goto	i2l6150
 16930  002650  D7BD               	goto	i2l6130
 16931  002652                     i2l6166:
 16932                           
 16933                           ;UI.c: 420: if(cur_state == 11){
 16934  002652  0E0B               	movlw	11
 16935  002654  0100               	movlb	0	; () banked
 16936  002656  19DE               	xorwf	_cur_state& (0+255),w,b
 16937  002658  0100               	movlb	0	; () banked
 16938  00265A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16939  00265C  A4D8               	btfss	status,2,c
 16940  00265E  D005               	goto	i2l6174
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;UI.c: 421: return 0;
 16944  002660  0E00               	movlw	0
 16945  002662  6E2B               	movwf	?_inputHandler+1,c
 16946  002664  0E00               	movlw	0
 16947  002666  6E2A               	movwf	?_inputHandler,c
 16948                           
 16949                           ; BSR set to: 0
 16950  002668  0012               	return	
 16951  00266A                     i2l6174:
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;UI.c: 423: else{
 16955                           ;UI.c: 424: change_state_to_menu_11();
 16956  00266A  ECF5  F020         	call	_change_state_to_menu_11	;wreg free
 16957                           
 16958                           ;UI.c: 425: }
 16959                           ;UI.c: 426: return 0;
 16960  00266E  0E00               	movlw	0
 16961  002670  6E2B               	movwf	?_inputHandler+1,c
 16962  002672  0E00               	movlw	0
 16963  002674  6E2A               	movwf	?_inputHandler,c
 16964  002676  0012               	return	
 16965  002678                     i2l6180:
 16966                           
 16967                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 16968  002678  0E16               	movlw	22
 16969  00267A  0100               	movlb	0	; () banked
 16970  00267C  19DE               	xorwf	_cur_state& (0+255),w,b
 16971  00267E  0100               	movlb	0	; () banked
 16972  002680  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16973  002682  B4D8               	btfsc	status,2,c
 16974  002684  D007               	goto	i2l6184
 16975                           
 16976                           ; BSR set to: 0
 16977  002686  0E0C               	movlw	12
 16978  002688  0100               	movlb	0	; () banked
 16979  00268A  19DE               	xorwf	_cur_state& (0+255),w,b
 16980  00268C  0100               	movlb	0	; () banked
 16981  00268E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16982  002690  A4D8               	btfss	status,2,c
 16983  002692  D005               	goto	i2l6190
 16984  002694                     i2l6184:
 16985                           
 16986                           ; BSR set to: 0
 16987                           ;UI.c: 429: return 0;
 16988  002694  0E00               	movlw	0
 16989  002696  6E2B               	movwf	?_inputHandler+1,c
 16990  002698  0E00               	movlw	0
 16991  00269A  6E2A               	movwf	?_inputHandler,c
 16992                           
 16993                           ; BSR set to: 0
 16994  00269C  0012               	return	
 16995  00269E                     i2l6190:
 16996                           
 16997                           ; BSR set to: 0
 16998                           ;UI.c: 431: else if(cur_state == 23){
 16999  00269E  0E17               	movlw	23
 17000  0026A0  0100               	movlb	0	; () banked
 17001  0026A2  19DE               	xorwf	_cur_state& (0+255),w,b
 17002  0026A4  0100               	movlb	0	; () banked
 17003  0026A6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17004  0026A8  A4D8               	btfss	status,2,c
 17005  0026AA  D003               	goto	i2l6194
 17006                           
 17007                           ; BSR set to: 0
 17008                           ;UI.c: 432: change_state_to_menu_22();
 17009  0026AC  ECAD  F020         	call	i2_change_state_to_menu_22	;wreg free
 17010                           
 17011                           ;UI.c: 433: }
 17012  0026B0  D002               	goto	i2l6196
 17013  0026B2                     i2l6194:
 17014                           
 17015                           ;UI.c: 434: else{
 17016                           ;UI.c: 435: change_state_to_menu_12();
 17017  0026B2  ECC5  F020         	call	i2_change_state_to_menu_12	;wreg free
 17018  0026B6                     i2l6196:
 17019                           
 17020                           ;UI.c: 436: }
 17021                           ;UI.c: 437: return 0;
 17022  0026B6  0E00               	movlw	0
 17023  0026B8  6E2B               	movwf	?_inputHandler+1,c
 17024  0026BA  0E00               	movlw	0
 17025  0026BC  6E2A               	movwf	?_inputHandler,c
 17026  0026BE  0012               	return	
 17027  0026C0                     i2l6200:
 17028                           
 17029                           ;UI.c: 439: if(cur_state == 23){
 17030  0026C0  0E17               	movlw	23
 17031  0026C2  0100               	movlb	0	; () banked
 17032  0026C4  19DE               	xorwf	_cur_state& (0+255),w,b
 17033  0026C6  0100               	movlb	0	; () banked
 17034  0026C8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17035  0026CA  A4D8               	btfss	status,2,c
 17036  0026CC  D005               	goto	i2l6208
 17037                           
 17038                           ; BSR set to: 0
 17039                           ;UI.c: 440: return 0;
 17040  0026CE  0E00               	movlw	0
 17041  0026D0  6E2B               	movwf	?_inputHandler+1,c
 17042  0026D2  0E00               	movlw	0
 17043  0026D4  6E2A               	movwf	?_inputHandler,c
 17044                           
 17045                           ; BSR set to: 0
 17046  0026D6  0012               	return	
 17047  0026D8                     i2l6208:
 17048                           
 17049                           ; BSR set to: 0
 17050                           ;UI.c: 442: else{
 17051                           ;UI.c: 443: change_state_to_menu_23();
 17052  0026D8  ECDD  F020         	call	_change_state_to_menu_23	;wreg free
 17053                           
 17054                           ;UI.c: 444: }
 17055                           ;UI.c: 445: return 0;
 17056  0026DC  0E00               	movlw	0
 17057  0026DE  6E2B               	movwf	?_inputHandler+1,c
 17058  0026E0  0E00               	movlw	0
 17059  0026E2  6E2A               	movwf	?_inputHandler,c
 17060  0026E4  0012               	return	
 17061  0026E6                     i2l6214:
 17062                           
 17063                           ;UI.c: 448: up = 1;
 17064  0026E6  0E00               	movlw	0
 17065  0026E8  6E78               	movwf	_up+1,c
 17066  0026EA  0E01               	movlw	1
 17067  0026EC  6E77               	movwf	_up,c
 17068                           
 17069                           ;UI.c: 449: return 1;
 17070  0026EE  0E00               	movlw	0
 17071  0026F0  6E2B               	movwf	?_inputHandler+1,c
 17072  0026F2  0E01               	movlw	1
 17073  0026F4  6E2A               	movwf	?_inputHandler,c
 17074  0026F6  0012               	return	
 17075  0026F8                     i2l6218:
 17076                           
 17077                           ;UI.c: 451: down = 1;
 17078  0026F8  0E00               	movlw	0
 17079  0026FA  6E68               	movwf	_down+1,c
 17080  0026FC  0E01               	movlw	1
 17081  0026FE  6E67               	movwf	_down,c
 17082                           
 17083                           ;UI.c: 452: return 1;
 17084  002700  0E00               	movlw	0
 17085  002702  6E2B               	movwf	?_inputHandler+1,c
 17086  002704  0E01               	movlw	1
 17087  002706  6E2A               	movwf	?_inputHandler,c
 17088  002708  0012               	return	
 17089  00270A                     i2l6222:
 17090                           
 17091                           ;UI.c: 454: enter = 1;
 17092  00270A  0E00               	movlw	0
 17093  00270C  6E6A               	movwf	_enter+1,c
 17094  00270E  0E01               	movlw	1
 17095  002710  6E69               	movwf	_enter,c
 17096                           
 17097                           ;UI.c: 455: return 1;
 17098  002712  0E00               	movlw	0
 17099  002714  6E2B               	movwf	?_inputHandler+1,c
 17100  002716  0E01               	movlw	1
 17101  002718  6E2A               	movwf	?_inputHandler,c
 17102  00271A  0012               	return	
 17103  00271C                     i2l6226:
 17104                           
 17105                           ;UI.c: 457: back = 1;
 17106  00271C  0E00               	movlw	0
 17107  00271E  6E5C               	movwf	_back+1,c
 17108  002720  0E01               	movlw	1
 17109  002722  6E5B               	movwf	_back,c
 17110                           
 17111                           ;UI.c: 458: return 1;
 17112  002724  0E00               	movlw	0
 17113  002726  6E2B               	movwf	?_inputHandler+1,c
 17114  002728  0E01               	movlw	1
 17115  00272A  6E2A               	movwf	?_inputHandler,c
 17116  00272C  0012               	return	
 17117  00272E                     i2l6230:
 17118                           
 17119                           ;UI.c: 461: return 1;
 17120  00272E  0E00               	movlw	0
 17121  002730  6E2B               	movwf	?_inputHandler+1,c
 17122  002732  0E01               	movlw	1
 17123  002734  6E2A               	movwf	?_inputHandler,c
 17124                           
 17125                           ;UI.c: 462: }
 17126  002736  0012               	return	
 17127  002738                     i2l6236:
 17128  002738  507D               	movf	_input,w,c	;volatile
 17129                           
 17130                           ; Switch size 1, requested type "space"
 17131                           ; Number of cases is 7, Range of values is 49 to 68
 17132                           ; switch strategies available:
 17133                           ; Name         Instructions Cycles
 17134                           ; simple_byte           22    12 (average)
 17135                           ;	Chosen strategy is simple_byte
 17136  00273A  0A31               	xorlw	49	; case 49
 17137  00273C  B4D8               	btfsc	status,2,c
 17138  00273E  D789               	goto	i2l6166
 17139  002740  0A03               	xorlw	3	; case 50
 17140  002742  B4D8               	btfsc	status,2,c
 17141  002744  D799               	goto	i2l6180
 17142  002746  0A01               	xorlw	1	; case 51
 17143  002748  B4D8               	btfsc	status,2,c
 17144  00274A  D7BA               	goto	i2l6200
 17145  00274C  0A72               	xorlw	114	; case 65
 17146  00274E  B4D8               	btfsc	status,2,c
 17147  002750  D7CA               	goto	i2l6214
 17148  002752  0A03               	xorlw	3	; case 66
 17149  002754  B4D8               	btfsc	status,2,c
 17150  002756  D7D0               	goto	i2l6218
 17151  002758  0A01               	xorlw	1	; case 67
 17152  00275A  B4D8               	btfsc	status,2,c
 17153  00275C  D7D6               	goto	i2l6222
 17154  00275E  0A07               	xorlw	7	; case 68
 17155  002760  B4D8               	btfsc	status,2,c
 17156  002762  D7DC               	goto	i2l6226
 17157  002764  D7E4               	goto	i2l6230
 17158  002766                     __end_of_inputHandler:
 17159                           	opt stack 0
 17160                           pclatu	equ	0xFFB
 17161                           pclath	equ	0xFFA
 17162                           tblptru	equ	0xFF8
 17163                           tblptrh	equ	0xFF7
 17164                           tblptrl	equ	0xFF6
 17165                           tablat	equ	0xFF5
 17166                           prodh	equ	0xFF4
 17167                           prodl	equ	0xFF3
 17168                           intcon	equ	0xFF2
 17169                           intcon2	equ	0xFF1
 17170                           intcon3	equ	0xFF0
 17171                           indf0	equ	0xFEF
 17172                           postinc0	equ	0xFEE
 17173                           fsr0h	equ	0xFEA
 17174                           fsr0l	equ	0xFE9
 17175                           wreg	equ	0xFE8
 17176                           postdec1	equ	0xFE5
 17177                           fsr1h	equ	0xFE2
 17178                           fsr1l	equ	0xFE1
 17179                           indf2	equ	0xFDF
 17180                           postinc2	equ	0xFDE
 17181                           postdec2	equ	0xFDD
 17182                           fsr2h	equ	0xFDA
 17183                           fsr2l	equ	0xFD9
 17184                           status	equ	0xFD8
 17185                           
 17186 ;; *************** function i2_change_state_to_menu_22 *****************
 17187 ;; Defined at:
 17188 ;;		line 496 in file "UI.c"
 17189 ;; Parameters:    Size  Location     Type
 17190 ;;		None
 17191 ;; Auto vars:     Size  Location     Type
 17192 ;;		None
 17193 ;; Return value:  Size  Location     Type
 17194 ;;                  1    wreg      void 
 17195 ;; Registers used:
 17196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17197 ;; Tracked objects:
 17198 ;;		On entry : 0/0
 17199 ;;		On exit  : 0/0
 17200 ;;		Unchanged: 0/0
 17201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;Total ram usage:        0 bytes
 17207 ;; Hardware stack levels used:    1
 17208 ;; Hardware stack levels required when called:    3
 17209 ;; This function calls:
 17210 ;;		i2_lcdInst
 17211 ;;		i2_printf
 17212 ;; This function is called by:
 17213 ;;		_updateMenu
 17214 ;;		_inputHandler
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           	psect	text63
 17219  00415A                     __ptext63:
 17220                           	opt stack 0
 17221  00415A                     i2_change_state_to_menu_22:
 17222                           	opt stack 19
 17223                           
 17224                           ;UI.c: 497: cur_state = 22;
 17225                           
 17226                           ;incstack = 0
 17227  00415A  0E00               	movlw	0
 17228  00415C  0100               	movlb	0	; () banked
 17229  00415E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17230  004160  0E16               	movlw	22
 17231  004162  6FDE               	movwf	_cur_state& (0+255),b
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;UI.c: 499: lcdInst(0b10000000);;
 17235  004164  0E80               	movlw	128
 17236  004166  ECE2  F022         	call	i2_lcdInst
 17237                           
 17238                           ;UI.c: 500: printf("2. SORT        <");
 17239  00416A  0EEC               	movlw	low STR_34
 17240  00416C  6E0D               	movwf	i2printf@f,c
 17241  00416E  0EFD               	movlw	high STR_34
 17242  004170  6E0E               	movwf	i2printf@f+1,c
 17243  004172  ECB8  F00A         	call	i2_printf	;wreg free
 17244                           
 17245                           ;UI.c: 501: lcdInst(0b11000000);;
 17246  004176  0EC0               	movlw	192
 17247  004178  ECE2  F022         	call	i2_lcdInst
 17248                           
 17249                           ;UI.c: 502: printf("3. LOGS         ");
 17250  00417C  0E31               	movlw	low STR_36
 17251  00417E  6E0D               	movwf	i2printf@f,c
 17252  004180  0EFD               	movlw	high STR_36
 17253  004182  6E0E               	movwf	i2printf@f+1,c
 17254  004184  ECB8  F00A         	call	i2_printf	;wreg free
 17255  004188  0012               	return		;funcret
 17256  00418A                     __end_ofi2_change_state_to_menu_22:
 17257                           	opt stack 0
 17258                           pclatu	equ	0xFFB
 17259                           pclath	equ	0xFFA
 17260                           tblptru	equ	0xFF8
 17261                           tblptrh	equ	0xFF7
 17262                           tblptrl	equ	0xFF6
 17263                           tablat	equ	0xFF5
 17264                           prodh	equ	0xFF4
 17265                           prodl	equ	0xFF3
 17266                           intcon	equ	0xFF2
 17267                           intcon2	equ	0xFF1
 17268                           intcon3	equ	0xFF0
 17269                           indf0	equ	0xFEF
 17270                           postinc0	equ	0xFEE
 17271                           fsr0h	equ	0xFEA
 17272                           fsr0l	equ	0xFE9
 17273                           wreg	equ	0xFE8
 17274                           postdec1	equ	0xFE5
 17275                           fsr1h	equ	0xFE2
 17276                           fsr1l	equ	0xFE1
 17277                           indf2	equ	0xFDF
 17278                           postinc2	equ	0xFDE
 17279                           postdec2	equ	0xFDD
 17280                           fsr2h	equ	0xFDA
 17281                           fsr2l	equ	0xFD9
 17282                           status	equ	0xFD8
 17283                           
 17284 ;; *************** function i2_change_state_to_menu_12 *****************
 17285 ;; Defined at:
 17286 ;;		line 488 in file "UI.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;		None
 17289 ;; Auto vars:     Size  Location     Type
 17290 ;;		None
 17291 ;; Return value:  Size  Location     Type
 17292 ;;                  1    wreg      void 
 17293 ;; Registers used:
 17294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17295 ;; Tracked objects:
 17296 ;;		On entry : 0/0
 17297 ;;		On exit  : 0/0
 17298 ;;		Unchanged: 0/0
 17299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;Total ram usage:        0 bytes
 17305 ;; Hardware stack levels used:    1
 17306 ;; Hardware stack levels required when called:    3
 17307 ;; This function calls:
 17308 ;;		i2_lcdInst
 17309 ;;		i2_printf
 17310 ;; This function is called by:
 17311 ;;		_updateMenu
 17312 ;;		_inputHandler
 17313 ;; This function uses a non-reentrant model
 17314 ;;
 17315                           
 17316                           	psect	text64
 17317  00418A                     __ptext64:
 17318                           	opt stack 0
 17319  00418A                     i2_change_state_to_menu_12:
 17320                           	opt stack 19
 17321                           
 17322                           ;UI.c: 489: cur_state = 12;
 17323                           
 17324                           ;incstack = 0
 17325  00418A  0E00               	movlw	0
 17326  00418C  0100               	movlb	0	; () banked
 17327  00418E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17328  004190  0E0C               	movlw	12
 17329  004192  6FDE               	movwf	_cur_state& (0+255),b
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;UI.c: 491: lcdInst(0b10000000);;
 17333  004194  0E80               	movlw	128
 17334  004196  ECE2  F022         	call	i2_lcdInst
 17335                           
 17336                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17337  00419A  0E53               	movlw	low STR_33
 17338  00419C  6E0D               	movwf	i2printf@f,c
 17339  00419E  0EFD               	movlw	high STR_33
 17340  0041A0  6E0E               	movwf	i2printf@f+1,c
 17341  0041A2  ECB8  F00A         	call	i2_printf	;wreg free
 17342                           
 17343                           ;UI.c: 493: lcdInst(0b11000000);;
 17344  0041A6  0EC0               	movlw	192
 17345  0041A8  ECE2  F022         	call	i2_lcdInst
 17346                           
 17347                           ;UI.c: 494: printf("2. SORT        <");
 17348  0041AC  0EEC               	movlw	low STR_34
 17349  0041AE  6E0D               	movwf	i2printf@f,c
 17350  0041B0  0EFD               	movlw	high STR_34
 17351  0041B2  6E0E               	movwf	i2printf@f+1,c
 17352  0041B4  ECB8  F00A         	call	i2_printf	;wreg free
 17353  0041B8  0012               	return		;funcret
 17354  0041BA                     __end_ofi2_change_state_to_menu_12:
 17355                           	opt stack 0
 17356                           pclatu	equ	0xFFB
 17357                           pclath	equ	0xFFA
 17358                           tblptru	equ	0xFF8
 17359                           tblptrh	equ	0xFF7
 17360                           tblptrl	equ	0xFF6
 17361                           tablat	equ	0xFF5
 17362                           prodh	equ	0xFF4
 17363                           prodl	equ	0xFF3
 17364                           intcon	equ	0xFF2
 17365                           intcon2	equ	0xFF1
 17366                           intcon3	equ	0xFF0
 17367                           indf0	equ	0xFEF
 17368                           postinc0	equ	0xFEE
 17369                           fsr0h	equ	0xFEA
 17370                           fsr0l	equ	0xFE9
 17371                           wreg	equ	0xFE8
 17372                           postdec1	equ	0xFE5
 17373                           fsr1h	equ	0xFE2
 17374                           fsr1l	equ	0xFE1
 17375                           indf2	equ	0xFDF
 17376                           postinc2	equ	0xFDE
 17377                           postdec2	equ	0xFDD
 17378                           fsr2h	equ	0xFDA
 17379                           fsr2l	equ	0xFD9
 17380                           status	equ	0xFD8
 17381                           
 17382 ;; *************** function _change_state_to_menu_23 *****************
 17383 ;; Defined at:
 17384 ;;		line 504 in file "UI.c"
 17385 ;; Parameters:    Size  Location     Type
 17386 ;;		None
 17387 ;; Auto vars:     Size  Location     Type
 17388 ;;		None
 17389 ;; Return value:  Size  Location     Type
 17390 ;;                  1    wreg      void 
 17391 ;; Registers used:
 17392 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17393 ;; Tracked objects:
 17394 ;;		On entry : 0/0
 17395 ;;		On exit  : 0/0
 17396 ;;		Unchanged: 0/0
 17397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17402 ;;Total ram usage:        0 bytes
 17403 ;; Hardware stack levels used:    1
 17404 ;; Hardware stack levels required when called:    3
 17405 ;; This function calls:
 17406 ;;		i2_lcdInst
 17407 ;;		i2_printf
 17408 ;; This function is called by:
 17409 ;;		_updateMenu
 17410 ;;		_inputHandler
 17411 ;; This function uses a non-reentrant model
 17412 ;;
 17413                           
 17414                           	psect	text65
 17415  0041BA                     __ptext65:
 17416                           	opt stack 0
 17417  0041BA                     _change_state_to_menu_23:
 17418                           	opt stack 18
 17419                           
 17420                           ;UI.c: 505: cur_state = 23;
 17421                           
 17422                           ;incstack = 0
 17423  0041BA  0E00               	movlw	0
 17424  0041BC  0100               	movlb	0	; () banked
 17425  0041BE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17426  0041C0  0E17               	movlw	23
 17427  0041C2  6FDE               	movwf	_cur_state& (0+255),b
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;UI.c: 507: lcdInst(0b10000000);;
 17431  0041C4  0E80               	movlw	128
 17432  0041C6  ECE2  F022         	call	i2_lcdInst
 17433                           
 17434                           ;UI.c: 508: printf("2. SORT         ");
 17435  0041CA  0E42               	movlw	low STR_32
 17436  0041CC  6E0D               	movwf	i2printf@f,c
 17437  0041CE  0EFD               	movlw	high STR_32
 17438  0041D0  6E0E               	movwf	i2printf@f+1,c
 17439  0041D2  ECB8  F00A         	call	i2_printf	;wreg free
 17440                           
 17441                           ;UI.c: 509: lcdInst(0b11000000);;
 17442  0041D6  0EC0               	movlw	192
 17443  0041D8  ECE2  F022         	call	i2_lcdInst
 17444                           
 17445                           ;UI.c: 510: printf("3. LOGS        <");
 17446  0041DC  0EDB               	movlw	low STR_38
 17447  0041DE  6E0D               	movwf	i2printf@f,c
 17448  0041E0  0EFD               	movlw	high STR_38
 17449  0041E2  6E0E               	movwf	i2printf@f+1,c
 17450  0041E4  ECB8  F00A         	call	i2_printf	;wreg free
 17451  0041E8  0012               	return		;funcret
 17452  0041EA                     __end_of_change_state_to_menu_23:
 17453                           	opt stack 0
 17454                           pclatu	equ	0xFFB
 17455                           pclath	equ	0xFFA
 17456                           tblptru	equ	0xFF8
 17457                           tblptrh	equ	0xFF7
 17458                           tblptrl	equ	0xFF6
 17459                           tablat	equ	0xFF5
 17460                           prodh	equ	0xFF4
 17461                           prodl	equ	0xFF3
 17462                           intcon	equ	0xFF2
 17463                           intcon2	equ	0xFF1
 17464                           intcon3	equ	0xFF0
 17465                           indf0	equ	0xFEF
 17466                           postinc0	equ	0xFEE
 17467                           fsr0h	equ	0xFEA
 17468                           fsr0l	equ	0xFE9
 17469                           wreg	equ	0xFE8
 17470                           postdec1	equ	0xFE5
 17471                           fsr1h	equ	0xFE2
 17472                           fsr1l	equ	0xFE1
 17473                           indf2	equ	0xFDF
 17474                           postinc2	equ	0xFDE
 17475                           postdec2	equ	0xFDD
 17476                           fsr2h	equ	0xFDA
 17477                           fsr2l	equ	0xFD9
 17478                           status	equ	0xFD8
 17479                           
 17480 ;; *************** function _change_state_to_menu_11 *****************
 17481 ;; Defined at:
 17482 ;;		line 480 in file "UI.c"
 17483 ;; Parameters:    Size  Location     Type
 17484 ;;		None
 17485 ;; Auto vars:     Size  Location     Type
 17486 ;;		None
 17487 ;; Return value:  Size  Location     Type
 17488 ;;                  1    wreg      void 
 17489 ;; Registers used:
 17490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17491 ;; Tracked objects:
 17492 ;;		On entry : 0/0
 17493 ;;		On exit  : 0/0
 17494 ;;		Unchanged: 0/0
 17495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17500 ;;Total ram usage:        0 bytes
 17501 ;; Hardware stack levels used:    1
 17502 ;; Hardware stack levels required when called:    3
 17503 ;; This function calls:
 17504 ;;		i2_lcdInst
 17505 ;;		i2_printf
 17506 ;; This function is called by:
 17507 ;;		_updateMenu
 17508 ;;		_inputHandler
 17509 ;; This function uses a non-reentrant model
 17510 ;;
 17511                           
 17512                           	psect	text66
 17513  0041EA                     __ptext66:
 17514                           	opt stack 0
 17515  0041EA                     _change_state_to_menu_11:
 17516                           	opt stack 18
 17517                           
 17518                           ;UI.c: 481: cur_state = 11;
 17519                           
 17520                           ;incstack = 0
 17521  0041EA  0E00               	movlw	0
 17522  0041EC  0100               	movlb	0	; () banked
 17523  0041EE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17524  0041F0  0E0B               	movlw	11
 17525  0041F2  6FDE               	movwf	_cur_state& (0+255),b
 17526                           
 17527                           ; BSR set to: 0
 17528                           ;UI.c: 483: lcdInst(0b10000000);;
 17529  0041F4  0E80               	movlw	128
 17530  0041F6  ECE2  F022         	call	i2_lcdInst
 17531                           
 17532                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17533  0041FA  0EFD               	movlw	low STR_31
 17534  0041FC  6E0D               	movwf	i2printf@f,c
 17535  0041FE  0EFD               	movlw	high STR_31
 17536  004200  6E0E               	movwf	i2printf@f+1,c
 17537  004202  ECB8  F00A         	call	i2_printf	;wreg free
 17538                           
 17539                           ;UI.c: 485: lcdInst(0b11000000);;
 17540  004206  0EC0               	movlw	192
 17541  004208  ECE2  F022         	call	i2_lcdInst
 17542                           
 17543                           ;UI.c: 486: printf("2. SORT         ");
 17544  00420C  0E42               	movlw	low STR_32
 17545  00420E  6E0D               	movwf	i2printf@f,c
 17546  004210  0EFD               	movlw	high STR_32
 17547  004212  6E0E               	movwf	i2printf@f+1,c
 17548  004214  ECB8  F00A         	call	i2_printf	;wreg free
 17549  004218  0012               	return		;funcret
 17550  00421A                     __end_of_change_state_to_menu_11:
 17551                           	opt stack 0
 17552                           pclatu	equ	0xFFB
 17553                           pclath	equ	0xFFA
 17554                           tblptru	equ	0xFF8
 17555                           tblptrh	equ	0xFF7
 17556                           tblptrl	equ	0xFF6
 17557                           tablat	equ	0xFF5
 17558                           prodh	equ	0xFF4
 17559                           prodl	equ	0xFF3
 17560                           intcon	equ	0xFF2
 17561                           intcon2	equ	0xFF1
 17562                           intcon3	equ	0xFF0
 17563                           indf0	equ	0xFEF
 17564                           postinc0	equ	0xFEE
 17565                           fsr0h	equ	0xFEA
 17566                           fsr0l	equ	0xFE9
 17567                           wreg	equ	0xFE8
 17568                           postdec1	equ	0xFE5
 17569                           fsr1h	equ	0xFE2
 17570                           fsr1l	equ	0xFE1
 17571                           indf2	equ	0xFDF
 17572                           postinc2	equ	0xFDE
 17573                           postdec2	equ	0xFDD
 17574                           fsr2h	equ	0xFDA
 17575                           fsr2l	equ	0xFD9
 17576                           status	equ	0xFD8
 17577                           
 17578 ;; *************** function _change_state_to_logs_34 *****************
 17579 ;; Defined at:
 17580 ;;		line 547 in file "UI.c"
 17581 ;; Parameters:    Size  Location     Type
 17582 ;;		None
 17583 ;; Auto vars:     Size  Location     Type
 17584 ;;		None
 17585 ;; Return value:  Size  Location     Type
 17586 ;;                  1    wreg      void 
 17587 ;; Registers used:
 17588 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17589 ;; Tracked objects:
 17590 ;;		On entry : 0/0
 17591 ;;		On exit  : 0/0
 17592 ;;		Unchanged: 0/0
 17593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17598 ;;Total ram usage:        0 bytes
 17599 ;; Hardware stack levels used:    1
 17600 ;; Hardware stack levels required when called:    3
 17601 ;; This function calls:
 17602 ;;		i2_lcdInst
 17603 ;;		i2_printf
 17604 ;; This function is called by:
 17605 ;;		_updateMenu
 17606 ;;		_inputHandler
 17607 ;; This function uses a non-reentrant model
 17608 ;;
 17609                           
 17610                           	psect	text67
 17611  00421A                     __ptext67:
 17612                           	opt stack 0
 17613  00421A                     _change_state_to_logs_34:
 17614                           	opt stack 18
 17615                           
 17616                           ;UI.c: 548: cur_state = 1034;
 17617                           
 17618                           ;incstack = 0
 17619  00421A  0E04               	movlw	4
 17620  00421C  0100               	movlb	0	; () banked
 17621  00421E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17622  004220  0E0A               	movlw	10
 17623  004222  6FDE               	movwf	_cur_state& (0+255),b
 17624                           
 17625                           ; BSR set to: 0
 17626                           ;UI.c: 549: lcdInst(0b10000000);;
 17627  004224  0E80               	movlw	128
 17628  004226  ECE2  F022         	call	i2_lcdInst
 17629                           
 17630                           ;UI.c: 550: printf("LOG 3           ");
 17631  00422A  0E0F               	movlw	low STR_44
 17632  00422C  6E0D               	movwf	i2printf@f,c
 17633  00422E  0EFD               	movlw	high STR_44
 17634  004230  6E0E               	movwf	i2printf@f+1,c
 17635  004232  ECB8  F00A         	call	i2_printf	;wreg free
 17636                           
 17637                           ;UI.c: 551: lcdInst(0b11000000);;
 17638  004236  0EC0               	movlw	192
 17639  004238  ECE2  F022         	call	i2_lcdInst
 17640                           
 17641                           ;UI.c: 552: printf("LOG 4          <");
 17642  00423C  0ECA               	movlw	low STR_50
 17643  00423E  6E0D               	movwf	i2printf@f,c
 17644  004240  0EFD               	movlw	high STR_50
 17645  004242  6E0E               	movwf	i2printf@f+1,c
 17646  004244  ECB8  F00A         	call	i2_printf	;wreg free
 17647  004248  0012               	return		;funcret
 17648  00424A                     __end_of_change_state_to_logs_34:
 17649                           	opt stack 0
 17650                           pclatu	equ	0xFFB
 17651                           pclath	equ	0xFFA
 17652                           tblptru	equ	0xFF8
 17653                           tblptrh	equ	0xFF7
 17654                           tblptrl	equ	0xFF6
 17655                           tablat	equ	0xFF5
 17656                           prodh	equ	0xFF4
 17657                           prodl	equ	0xFF3
 17658                           intcon	equ	0xFF2
 17659                           intcon2	equ	0xFF1
 17660                           intcon3	equ	0xFF0
 17661                           indf0	equ	0xFEF
 17662                           postinc0	equ	0xFEE
 17663                           fsr0h	equ	0xFEA
 17664                           fsr0l	equ	0xFE9
 17665                           wreg	equ	0xFE8
 17666                           postdec1	equ	0xFE5
 17667                           fsr1h	equ	0xFE2
 17668                           fsr1l	equ	0xFE1
 17669                           indf2	equ	0xFDF
 17670                           postinc2	equ	0xFDE
 17671                           postdec2	equ	0xFDD
 17672                           fsr2h	equ	0xFDA
 17673                           fsr2l	equ	0xFD9
 17674                           status	equ	0xFD8
 17675                           
 17676 ;; *************** function _change_state_to_logs_33 *****************
 17677 ;; Defined at:
 17678 ;;		line 540 in file "UI.c"
 17679 ;; Parameters:    Size  Location     Type
 17680 ;;		None
 17681 ;; Auto vars:     Size  Location     Type
 17682 ;;		None
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  1    wreg      void 
 17685 ;; Registers used:
 17686 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17696 ;;Total ram usage:        0 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    3
 17699 ;; This function calls:
 17700 ;;		i2_lcdInst
 17701 ;;		i2_printf
 17702 ;; This function is called by:
 17703 ;;		_updateMenu
 17704 ;;		_inputHandler
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           	psect	text68
 17709  00424A                     __ptext68:
 17710                           	opt stack 0
 17711  00424A                     _change_state_to_logs_33:
 17712                           	opt stack 18
 17713                           
 17714                           ;UI.c: 541: cur_state = 1033;
 17715                           
 17716                           ;incstack = 0
 17717  00424A  0E04               	movlw	4
 17718  00424C  0100               	movlb	0	; () banked
 17719  00424E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17720  004250  0E09               	movlw	9
 17721  004252  6FDE               	movwf	_cur_state& (0+255),b
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;UI.c: 542: lcdInst(0b10000000);;
 17725  004254  0E80               	movlw	128
 17726  004256  ECE2  F022         	call	i2_lcdInst
 17727                           
 17728                           ;UI.c: 543: printf("LOG 3          <");
 17729  00425A  0EB9               	movlw	low STR_46
 17730  00425C  6E0D               	movwf	i2printf@f,c
 17731  00425E  0EFD               	movlw	high STR_46
 17732  004260  6E0E               	movwf	i2printf@f+1,c
 17733  004262  ECB8  F00A         	call	i2_printf	;wreg free
 17734                           
 17735                           ;UI.c: 544: lcdInst(0b11000000);;
 17736  004266  0EC0               	movlw	192
 17737  004268  ECE2  F022         	call	i2_lcdInst
 17738                           
 17739                           ;UI.c: 545: printf("LOG 4           ");
 17740  00426C  0E20               	movlw	low STR_48
 17741  00426E  6E0D               	movwf	i2printf@f,c
 17742  004270  0EFD               	movlw	high STR_48
 17743  004272  6E0E               	movwf	i2printf@f+1,c
 17744  004274  ECB8  F00A         	call	i2_printf	;wreg free
 17745  004278  0012               	return		;funcret
 17746  00427A                     __end_of_change_state_to_logs_33:
 17747                           	opt stack 0
 17748                           pclatu	equ	0xFFB
 17749                           pclath	equ	0xFFA
 17750                           tblptru	equ	0xFF8
 17751                           tblptrh	equ	0xFF7
 17752                           tblptrl	equ	0xFF6
 17753                           tablat	equ	0xFF5
 17754                           prodh	equ	0xFF4
 17755                           prodl	equ	0xFF3
 17756                           intcon	equ	0xFF2
 17757                           intcon2	equ	0xFF1
 17758                           intcon3	equ	0xFF0
 17759                           indf0	equ	0xFEF
 17760                           postinc0	equ	0xFEE
 17761                           fsr0h	equ	0xFEA
 17762                           fsr0l	equ	0xFE9
 17763                           wreg	equ	0xFE8
 17764                           postdec1	equ	0xFE5
 17765                           fsr1h	equ	0xFE2
 17766                           fsr1l	equ	0xFE1
 17767                           indf2	equ	0xFDF
 17768                           postinc2	equ	0xFDE
 17769                           postdec2	equ	0xFDD
 17770                           fsr2h	equ	0xFDA
 17771                           fsr2l	equ	0xFD9
 17772                           status	equ	0xFD8
 17773                           
 17774 ;; *************** function _change_state_to_logs_23 *****************
 17775 ;; Defined at:
 17776 ;;		line 533 in file "UI.c"
 17777 ;; Parameters:    Size  Location     Type
 17778 ;;		None
 17779 ;; Auto vars:     Size  Location     Type
 17780 ;;		None
 17781 ;; Return value:  Size  Location     Type
 17782 ;;                  1    wreg      void 
 17783 ;; Registers used:
 17784 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17785 ;; Tracked objects:
 17786 ;;		On entry : 0/0
 17787 ;;		On exit  : 0/0
 17788 ;;		Unchanged: 0/0
 17789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17794 ;;Total ram usage:        0 bytes
 17795 ;; Hardware stack levels used:    1
 17796 ;; Hardware stack levels required when called:    3
 17797 ;; This function calls:
 17798 ;;		i2_lcdInst
 17799 ;;		i2_printf
 17800 ;; This function is called by:
 17801 ;;		_updateMenu
 17802 ;;		_inputHandler
 17803 ;; This function uses a non-reentrant model
 17804 ;;
 17805                           
 17806                           	psect	text69
 17807  004338                     __ptext69:
 17808                           	opt stack 0
 17809  004338                     _change_state_to_logs_23:
 17810                           	opt stack 18
 17811                           
 17812                           ;UI.c: 534: cur_state = 1023;
 17813                           
 17814                           ;incstack = 0
 17815  004338  0E03               	movlw	3
 17816  00433A  0100               	movlb	0	; () banked
 17817  00433C  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17818  00433E  69DE               	setf	_cur_state& (0+255),b
 17819                           
 17820                           ; BSR set to: 0
 17821                           ;UI.c: 535: lcdInst(0b10000000);;
 17822  004340  0E80               	movlw	128
 17823  004342  ECE2  F022         	call	i2_lcdInst
 17824                           
 17825                           ;UI.c: 536: printf("LOG 2           ");
 17826  004346  0EFE               	movlw	low STR_40
 17827  004348  6E0D               	movwf	i2printf@f,c
 17828  00434A  0EFC               	movlw	high STR_40
 17829  00434C  6E0E               	movwf	i2printf@f+1,c
 17830  00434E  ECB8  F00A         	call	i2_printf	;wreg free
 17831                           
 17832                           ;UI.c: 537: lcdInst(0b11000000);;
 17833  004352  0EC0               	movlw	192
 17834  004354  ECE2  F022         	call	i2_lcdInst
 17835                           
 17836                           ;UI.c: 538: printf("LOG 3          <");
 17837  004358  0EB9               	movlw	low STR_46
 17838  00435A  6E0D               	movwf	i2printf@f,c
 17839  00435C  0EFD               	movlw	high STR_46
 17840  00435E  6E0E               	movwf	i2printf@f+1,c
 17841  004360  ECB8  F00A         	call	i2_printf	;wreg free
 17842  004364  0012               	return		;funcret
 17843  004366                     __end_of_change_state_to_logs_23:
 17844                           	opt stack 0
 17845                           pclatu	equ	0xFFB
 17846                           pclath	equ	0xFFA
 17847                           tblptru	equ	0xFF8
 17848                           tblptrh	equ	0xFF7
 17849                           tblptrl	equ	0xFF6
 17850                           tablat	equ	0xFF5
 17851                           prodh	equ	0xFF4
 17852                           prodl	equ	0xFF3
 17853                           intcon	equ	0xFF2
 17854                           intcon2	equ	0xFF1
 17855                           intcon3	equ	0xFF0
 17856                           indf0	equ	0xFEF
 17857                           postinc0	equ	0xFEE
 17858                           fsr0h	equ	0xFEA
 17859                           fsr0l	equ	0xFE9
 17860                           wreg	equ	0xFE8
 17861                           postdec1	equ	0xFE5
 17862                           fsr1h	equ	0xFE2
 17863                           fsr1l	equ	0xFE1
 17864                           indf2	equ	0xFDF
 17865                           postinc2	equ	0xFDE
 17866                           postdec2	equ	0xFDD
 17867                           fsr2h	equ	0xFDA
 17868                           fsr2l	equ	0xFD9
 17869                           status	equ	0xFD8
 17870                           
 17871 ;; *************** function _change_state_to_logs_22 *****************
 17872 ;; Defined at:
 17873 ;;		line 526 in file "UI.c"
 17874 ;; Parameters:    Size  Location     Type
 17875 ;;		None
 17876 ;; Auto vars:     Size  Location     Type
 17877 ;;		None
 17878 ;; Return value:  Size  Location     Type
 17879 ;;                  1    wreg      void 
 17880 ;; Registers used:
 17881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17882 ;; Tracked objects:
 17883 ;;		On entry : 0/0
 17884 ;;		On exit  : 0/0
 17885 ;;		Unchanged: 0/0
 17886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17891 ;;Total ram usage:        0 bytes
 17892 ;; Hardware stack levels used:    1
 17893 ;; Hardware stack levels required when called:    3
 17894 ;; This function calls:
 17895 ;;		i2_lcdInst
 17896 ;;		i2_printf
 17897 ;; This function is called by:
 17898 ;;		_updateMenu
 17899 ;;		_inputHandler
 17900 ;; This function uses a non-reentrant model
 17901 ;;
 17902                           
 17903                           	psect	text70
 17904  00427A                     __ptext70:
 17905                           	opt stack 0
 17906  00427A                     _change_state_to_logs_22:
 17907                           	opt stack 18
 17908                           
 17909                           ;UI.c: 527: cur_state = 1022;
 17910                           
 17911                           ;incstack = 0
 17912  00427A  0E03               	movlw	3
 17913  00427C  0100               	movlb	0	; () banked
 17914  00427E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17915  004280  0EFE               	movlw	254
 17916  004282  6FDE               	movwf	_cur_state& (0+255),b
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;UI.c: 528: lcdInst(0b10000000);;
 17920  004284  0E80               	movlw	128
 17921  004286  ECE2  F022         	call	i2_lcdInst
 17922                           
 17923                           ;UI.c: 529: printf("LOG 2          <");
 17924  00428A  0EA8               	movlw	low STR_42
 17925  00428C  6E0D               	movwf	i2printf@f,c
 17926  00428E  0EFD               	movlw	high STR_42
 17927  004290  6E0E               	movwf	i2printf@f+1,c
 17928  004292  ECB8  F00A         	call	i2_printf	;wreg free
 17929                           
 17930                           ;UI.c: 530: lcdInst(0b11000000);;
 17931  004296  0EC0               	movlw	192
 17932  004298  ECE2  F022         	call	i2_lcdInst
 17933                           
 17934                           ;UI.c: 531: printf("LOG 3           ");
 17935  00429C  0E0F               	movlw	low STR_44
 17936  00429E  6E0D               	movwf	i2printf@f,c
 17937  0042A0  0EFD               	movlw	high STR_44
 17938  0042A2  6E0E               	movwf	i2printf@f+1,c
 17939  0042A4  ECB8  F00A         	call	i2_printf	;wreg free
 17940  0042A8  0012               	return		;funcret
 17941  0042AA                     __end_of_change_state_to_logs_22:
 17942                           	opt stack 0
 17943                           pclatu	equ	0xFFB
 17944                           pclath	equ	0xFFA
 17945                           tblptru	equ	0xFF8
 17946                           tblptrh	equ	0xFF7
 17947                           tblptrl	equ	0xFF6
 17948                           tablat	equ	0xFF5
 17949                           prodh	equ	0xFF4
 17950                           prodl	equ	0xFF3
 17951                           intcon	equ	0xFF2
 17952                           intcon2	equ	0xFF1
 17953                           intcon3	equ	0xFF0
 17954                           indf0	equ	0xFEF
 17955                           postinc0	equ	0xFEE
 17956                           fsr0h	equ	0xFEA
 17957                           fsr0l	equ	0xFE9
 17958                           wreg	equ	0xFE8
 17959                           postdec1	equ	0xFE5
 17960                           fsr1h	equ	0xFE2
 17961                           fsr1l	equ	0xFE1
 17962                           indf2	equ	0xFDF
 17963                           postinc2	equ	0xFDE
 17964                           postdec2	equ	0xFDD
 17965                           fsr2h	equ	0xFDA
 17966                           fsr2l	equ	0xFD9
 17967                           status	equ	0xFD8
 17968                           
 17969 ;; *************** function _change_state_to_logs_12 *****************
 17970 ;; Defined at:
 17971 ;;		line 519 in file "UI.c"
 17972 ;; Parameters:    Size  Location     Type
 17973 ;;		None
 17974 ;; Auto vars:     Size  Location     Type
 17975 ;;		None
 17976 ;; Return value:  Size  Location     Type
 17977 ;;                  1    wreg      void 
 17978 ;; Registers used:
 17979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17980 ;; Tracked objects:
 17981 ;;		On entry : 0/0
 17982 ;;		On exit  : 0/0
 17983 ;;		Unchanged: 0/0
 17984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17989 ;;Total ram usage:        0 bytes
 17990 ;; Hardware stack levels used:    1
 17991 ;; Hardware stack levels required when called:    3
 17992 ;; This function calls:
 17993 ;;		i2_lcdInst
 17994 ;;		i2_printf
 17995 ;; This function is called by:
 17996 ;;		_updateMenu
 17997 ;;		_inputHandler
 17998 ;; This function uses a non-reentrant model
 17999 ;;
 18000                           
 18001                           	psect	text71
 18002  0042AA                     __ptext71:
 18003                           	opt stack 0
 18004  0042AA                     _change_state_to_logs_12:
 18005                           	opt stack 18
 18006                           
 18007                           ;UI.c: 520: cur_state = 1012;
 18008                           
 18009                           ;incstack = 0
 18010  0042AA  0E03               	movlw	3
 18011  0042AC  0100               	movlb	0	; () banked
 18012  0042AE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18013  0042B0  0EF4               	movlw	244
 18014  0042B2  6FDE               	movwf	_cur_state& (0+255),b
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;UI.c: 521: lcdInst(0b10000000);;
 18018  0042B4  0E80               	movlw	128
 18019  0042B6  ECE2  F022         	call	i2_lcdInst
 18020                           
 18021                           ;UI.c: 522: printf("LOG 1           ");
 18022  0042BA  0EED               	movlw	low STR_41
 18023  0042BC  6E0D               	movwf	i2printf@f,c
 18024  0042BE  0EFC               	movlw	high STR_41
 18025  0042C0  6E0E               	movwf	i2printf@f+1,c
 18026  0042C2  ECB8  F00A         	call	i2_printf	;wreg free
 18027                           
 18028                           ;UI.c: 523: lcdInst(0b11000000);;
 18029  0042C6  0EC0               	movlw	192
 18030  0042C8  ECE2  F022         	call	i2_lcdInst
 18031                           
 18032                           ;UI.c: 524: printf("LOG 2          <");
 18033  0042CC  0EA8               	movlw	low STR_42
 18034  0042CE  6E0D               	movwf	i2printf@f,c
 18035  0042D0  0EFD               	movlw	high STR_42
 18036  0042D2  6E0E               	movwf	i2printf@f+1,c
 18037  0042D4  ECB8  F00A         	call	i2_printf	;wreg free
 18038  0042D8  0012               	return		;funcret
 18039  0042DA                     __end_of_change_state_to_logs_12:
 18040                           	opt stack 0
 18041                           pclatu	equ	0xFFB
 18042                           pclath	equ	0xFFA
 18043                           tblptru	equ	0xFF8
 18044                           tblptrh	equ	0xFF7
 18045                           tblptrl	equ	0xFF6
 18046                           tablat	equ	0xFF5
 18047                           prodh	equ	0xFF4
 18048                           prodl	equ	0xFF3
 18049                           intcon	equ	0xFF2
 18050                           intcon2	equ	0xFF1
 18051                           intcon3	equ	0xFF0
 18052                           indf0	equ	0xFEF
 18053                           postinc0	equ	0xFEE
 18054                           fsr0h	equ	0xFEA
 18055                           fsr0l	equ	0xFE9
 18056                           wreg	equ	0xFE8
 18057                           postdec1	equ	0xFE5
 18058                           fsr1h	equ	0xFE2
 18059                           fsr1l	equ	0xFE1
 18060                           indf2	equ	0xFDF
 18061                           postinc2	equ	0xFDE
 18062                           postdec2	equ	0xFDD
 18063                           fsr2h	equ	0xFDA
 18064                           fsr2l	equ	0xFD9
 18065                           status	equ	0xFD8
 18066                           
 18067 ;; *************** function _change_state_to_logs_11 *****************
 18068 ;; Defined at:
 18069 ;;		line 512 in file "UI.c"
 18070 ;; Parameters:    Size  Location     Type
 18071 ;;		None
 18072 ;; Auto vars:     Size  Location     Type
 18073 ;;		None
 18074 ;; Return value:  Size  Location     Type
 18075 ;;                  1    wreg      void 
 18076 ;; Registers used:
 18077 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18078 ;; Tracked objects:
 18079 ;;		On entry : 0/0
 18080 ;;		On exit  : 0/0
 18081 ;;		Unchanged: 0/0
 18082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18087 ;;Total ram usage:        0 bytes
 18088 ;; Hardware stack levels used:    1
 18089 ;; Hardware stack levels required when called:    3
 18090 ;; This function calls:
 18091 ;;		i2_lcdInst
 18092 ;;		i2_printf
 18093 ;; This function is called by:
 18094 ;;		_updateMenu
 18095 ;;		_inputHandler
 18096 ;; This function uses a non-reentrant model
 18097 ;;
 18098                           
 18099                           	psect	text72
 18100  0042DA                     __ptext72:
 18101                           	opt stack 0
 18102  0042DA                     _change_state_to_logs_11:
 18103                           	opt stack 18
 18104                           
 18105                           ;UI.c: 513: cur_state = 1011;
 18106                           
 18107                           ;incstack = 0
 18108  0042DA  0E03               	movlw	3
 18109  0042DC  0100               	movlb	0	; () banked
 18110  0042DE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18111  0042E0  0EF3               	movlw	243
 18112  0042E2  6FDE               	movwf	_cur_state& (0+255),b
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;UI.c: 514: lcdInst(0b10000000);;
 18116  0042E4  0E80               	movlw	128
 18117  0042E6  ECE2  F022         	call	i2_lcdInst
 18118                           
 18119                           ;UI.c: 515: printf("LOG 1          <");
 18120  0042EA  0E97               	movlw	low STR_39
 18121  0042EC  6E0D               	movwf	i2printf@f,c
 18122  0042EE  0EFD               	movlw	high STR_39
 18123  0042F0  6E0E               	movwf	i2printf@f+1,c
 18124  0042F2  ECB8  F00A         	call	i2_printf	;wreg free
 18125                           
 18126                           ;UI.c: 516: lcdInst(0b11000000);;
 18127  0042F6  0EC0               	movlw	192
 18128  0042F8  ECE2  F022         	call	i2_lcdInst
 18129                           
 18130                           ;UI.c: 517: printf("LOG 2           ");
 18131  0042FC  0EFE               	movlw	low STR_40
 18132  0042FE  6E0D               	movwf	i2printf@f,c
 18133  004300  0EFC               	movlw	high STR_40
 18134  004302  6E0E               	movwf	i2printf@f+1,c
 18135  004304  ECB8  F00A         	call	i2_printf	;wreg free
 18136  004308  0012               	return		;funcret
 18137  00430A                     __end_of_change_state_to_logs_11:
 18138                           	opt stack 0
 18139                           pclatu	equ	0xFFB
 18140                           pclath	equ	0xFFA
 18141                           tblptru	equ	0xFF8
 18142                           tblptrh	equ	0xFF7
 18143                           tblptrl	equ	0xFF6
 18144                           tablat	equ	0xFF5
 18145                           prodh	equ	0xFF4
 18146                           prodl	equ	0xFF3
 18147                           intcon	equ	0xFF2
 18148                           intcon2	equ	0xFF1
 18149                           intcon3	equ	0xFF0
 18150                           indf0	equ	0xFEF
 18151                           postinc0	equ	0xFEE
 18152                           fsr0h	equ	0xFEA
 18153                           fsr0l	equ	0xFE9
 18154                           wreg	equ	0xFE8
 18155                           postdec1	equ	0xFE5
 18156                           fsr1h	equ	0xFE2
 18157                           fsr1l	equ	0xFE1
 18158                           indf2	equ	0xFDF
 18159                           postinc2	equ	0xFDE
 18160                           postdec2	equ	0xFDD
 18161                           fsr2h	equ	0xFDA
 18162                           fsr2l	equ	0xFD9
 18163                           status	equ	0xFD8
 18164                           
 18165 ;; *************** function _dispLogs *****************
 18166 ;; Defined at:
 18167 ;;		line 465 in file "UI.c"
 18168 ;; Parameters:    Size  Location     Type
 18169 ;;  myLog           2   17[COMRAM] int 
 18170 ;; Auto vars:     Size  Location     Type
 18171 ;;		None
 18172 ;; Return value:  Size  Location     Type
 18173 ;;                  1    wreg      void 
 18174 ;; Registers used:
 18175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18176 ;; Tracked objects:
 18177 ;;		On entry : 0/0
 18178 ;;		On exit  : 0/0
 18179 ;;		Unchanged: 0/0
 18180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18185 ;;Total ram usage:        2 bytes
 18186 ;; Hardware stack levels used:    1
 18187 ;; Hardware stack levels required when called:    2
 18188 ;; This function calls:
 18189 ;;		_retrieveLog
 18190 ;; This function is called by:
 18191 ;;		_updateMenu
 18192 ;; This function uses a non-reentrant model
 18193 ;;
 18194                           
 18195                           	psect	text73
 18196  0044A8                     __ptext73:
 18197                           	opt stack 0
 18198  0044A8                     _dispLogs:
 18199                           	opt stack 20
 18200                           
 18201                           ;UI.c: 466: logstate = 1;
 18202                           
 18203                           ;incstack = 0
 18204  0044A8  0E00               	movlw	0
 18205  0044AA  0100               	movlb	0	; () banked
 18206  0044AC  6FF7               	movwf	(_logstate+1)& (0+255),b
 18207  0044AE  0E01               	movlw	1
 18208  0044B0  6FF6               	movwf	_logstate& (0+255),b
 18209                           
 18210                           ; BSR set to: 0
 18211                           ;UI.c: 467: log = myLog;
 18212  0044B2  C012  F0E6         	movff	dispLogs@myLog,_log
 18213  0044B6  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18214                           
 18215                           ; BSR set to: 0
 18216                           ;UI.c: 468: retrieveLog(myLog - 1);
 18217  0044BA  0EFF               	movlw	255
 18218  0044BC  2412               	addwf	dispLogs@myLog,w,c
 18219  0044BE  6E07               	movwf	retrieveLog@logNum,c
 18220  0044C0  0EFF               	movlw	255
 18221  0044C2  2013               	addwfc	dispLogs@myLog+1,w,c
 18222  0044C4  6E08               	movwf	retrieveLog@logNum+1,c
 18223  0044C6  ECC6  F017         	call	_retrieveLog	;wreg free
 18224  0044CA  0012               	return		;funcret
 18225  0044CC                     __end_of_dispLogs:
 18226                           	opt stack 0
 18227                           pclatu	equ	0xFFB
 18228                           pclath	equ	0xFFA
 18229                           tblptru	equ	0xFF8
 18230                           tblptrh	equ	0xFF7
 18231                           tblptrl	equ	0xFF6
 18232                           tablat	equ	0xFF5
 18233                           prodh	equ	0xFF4
 18234                           prodl	equ	0xFF3
 18235                           intcon	equ	0xFF2
 18236                           intcon2	equ	0xFF1
 18237                           intcon3	equ	0xFF0
 18238                           indf0	equ	0xFEF
 18239                           postinc0	equ	0xFEE
 18240                           fsr0h	equ	0xFEA
 18241                           fsr0l	equ	0xFE9
 18242                           wreg	equ	0xFE8
 18243                           postdec1	equ	0xFE5
 18244                           fsr1h	equ	0xFE2
 18245                           fsr1l	equ	0xFE1
 18246                           indf2	equ	0xFDF
 18247                           postinc2	equ	0xFDE
 18248                           postdec2	equ	0xFDD
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function _retrieveLog *****************
 18254 ;; Defined at:
 18255 ;;		line 134 in file "EEPROM.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;  logNum          2    6[COMRAM] int 
 18258 ;; Auto vars:     Size  Location     Type
 18259 ;;  i               2   13[COMRAM] int 
 18260 ;;  addr            2   15[COMRAM] unsigned short 
 18261 ;;  byte3           1   12[COMRAM] unsigned char 
 18262 ;;  byte2           1   11[COMRAM] unsigned char 
 18263 ;;  byte1           1   10[COMRAM] unsigned char 
 18264 ;; Return value:  Size  Location     Type
 18265 ;;                  1    wreg      void 
 18266 ;; Registers used:
 18267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18268 ;; Tracked objects:
 18269 ;;		On entry : 0/0
 18270 ;;		On exit  : 0/0
 18271 ;;		Unchanged: 0/0
 18272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18273 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18274 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18276 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18277 ;;Total ram usage:       11 bytes
 18278 ;; Hardware stack levels used:    1
 18279 ;; Hardware stack levels required when called:    1
 18280 ;; This function calls:
 18281 ;;		i2_EEPROM_read
 18282 ;;		i2___wmul
 18283 ;; This function is called by:
 18284 ;;		_dispLogs
 18285 ;; This function uses a non-reentrant model
 18286 ;;
 18287                           
 18288                           	psect	text74
 18289  002F8C                     __ptext74:
 18290                           	opt stack 0
 18291  002F8C                     _retrieveLog:
 18292                           	opt stack 20
 18293                           
 18294                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18295                           
 18296                           ;incstack = 0
 18297  002F8C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18298  002F90  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18299  002F94  0E00               	movlw	0
 18300  002F96  6E04               	movwf	i2___wmul@multiplicand+1,c
 18301  002F98  0E0B               	movlw	11
 18302  002F9A  6E03               	movwf	i2___wmul@multiplicand,c
 18303  002F9C  EC1C  F022         	call	i2___wmul	;wreg free
 18304  002FA0  0E01               	movlw	1
 18305  002FA2  2401               	addwf	?i2___wmul,w,c
 18306  002FA4  6E10               	movwf	retrieveLog@addr,c
 18307  002FA6  0E00               	movlw	0
 18308  002FA8  2002               	addwfc	?i2___wmul+1,w,c
 18309  002FAA  6E11               	movwf	retrieveLog@addr+1,c
 18310                           
 18311                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18312  002FAC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18313  002FB0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18314  002FB4  ECAE  F022         	call	i2_EEPROM_read	;wreg free
 18315  002FB8  6E0B               	movwf	retrieveLog@byte1,c
 18316                           
 18317                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18318  002FBA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18319  002FBE  0E80               	movlw	128
 18320  002FC0  1609               	andwf	??_retrieveLog,f,c
 18321  002FC2  5009               	movf	??_retrieveLog,w,c
 18322  002FC4  0100               	movlb	0	; () banked
 18323  002FC6  6FE8               	movwf	_log_completion& (0+255),b
 18324  002FC8  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18325                           
 18326                           ; BSR set to: 0
 18327                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18328  002FCA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18329  002FCE  0E0F               	movlw	15
 18330  002FD0  1609               	andwf	??_retrieveLog,f,c
 18331  002FD2  5009               	movf	??_retrieveLog,w,c
 18332  002FD4  0100               	movlb	0	; () banked
 18333  002FD6  6FF2               	movwf	_log_count_total& (0+255),b
 18334  002FD8  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18335                           
 18336                           ; BSR set to: 0
 18337                           ;EEPROM.c: 146: addr++;
 18338  002FDA  4A10               	infsnz	retrieveLog@addr,f,c
 18339  002FDC  2A11               	incf	retrieveLog@addr+1,f,c
 18340                           
 18341                           ; BSR set to: 0
 18342                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18343  002FDE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18344  002FE2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18345  002FE6  ECAE  F022         	call	i2_EEPROM_read	;wreg free
 18346  002FEA  6E0C               	movwf	retrieveLog@byte2,c
 18347                           
 18348                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18349  002FEC  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18350  002FF0  0EF0               	movlw	240
 18351  002FF2  1609               	andwf	??_retrieveLog,f,c
 18352  002FF4  5009               	movf	??_retrieveLog,w,c
 18353  002FF6  0100               	movlb	0	; () banked
 18354  002FF8  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18355  002FFA  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18356                           
 18357                           ; BSR set to: 0
 18358                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18359  002FFC  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18360  003000  0E0F               	movlw	15
 18361  003002  1609               	andwf	??_retrieveLog,f,c
 18362  003004  5009               	movf	??_retrieveLog,w,c
 18363  003006  0100               	movlb	0	; () banked
 18364  003008  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18365  00300A  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;EEPROM.c: 152: addr++;
 18369  00300C  4A10               	infsnz	retrieveLog@addr,f,c
 18370  00300E  2A11               	incf	retrieveLog@addr+1,f,c
 18371                           
 18372                           ; BSR set to: 0
 18373                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18374  003010  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18375  003014  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18376  003018  ECAE  F022         	call	i2_EEPROM_read	;wreg free
 18377  00301C  6E0D               	movwf	retrieveLog@byte3,c
 18378                           
 18379                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18380  00301E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18381  003022  0EF0               	movlw	240
 18382  003024  1609               	andwf	??_retrieveLog,f,c
 18383  003026  5009               	movf	??_retrieveLog,w,c
 18384  003028  0100               	movlb	0	; () banked
 18385  00302A  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18386  00302C  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18387                           
 18388                           ; BSR set to: 0
 18389                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18390  00302E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18391  003032  0E0F               	movlw	15
 18392  003034  1609               	andwf	??_retrieveLog,f,c
 18393  003036  5009               	movf	??_retrieveLog,w,c
 18394  003038  0100               	movlb	0	; () banked
 18395  00303A  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18396  00303C  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;EEPROM.c: 156: addr++;
 18400  00303E  4A10               	infsnz	retrieveLog@addr,f,c
 18401  003040  2A11               	incf	retrieveLog@addr+1,f,c
 18402                           
 18403                           ; BSR set to: 0
 18404                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18405  003042  0E00               	movlw	0
 18406  003044  6E0F               	movwf	retrieveLog@i+1,c
 18407  003046  0E00               	movlw	0
 18408  003048  6E0E               	movwf	retrieveLog@i,c
 18409  00304A                     i2l5866:
 18410                           
 18411                           ; BSR set to: 0
 18412  00304A  BE0F               	btfsc	retrieveLog@i+1,7,c
 18413  00304C  D006               	goto	i2l5870
 18414  00304E  500F               	movf	retrieveLog@i+1,w,c
 18415  003050  E11E               	bnz	i2l5878
 18416  003052  0E07               	movlw	7
 18417  003054  5C0E               	subwf	retrieveLog@i,w,c
 18418  003056  B0D8               	btfsc	status,0,c
 18419  003058  D01A               	goto	i2l5878
 18420  00305A                     i2l5870:
 18421                           
 18422                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18423  00305A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18424  00305E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18425  003062  ECAE  F022         	call	i2_EEPROM_read	;wreg free
 18426  003066  6E09               	movwf	??_retrieveLog& (0+255),c
 18427  003068  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18428  00306A  90D8               	bcf	status,0,c
 18429  00306C  340E               	rlcf	retrieveLog@i,w,c
 18430  00306E  6ED9               	movwf	fsr2l,c
 18431  003070  340F               	rlcf	retrieveLog@i+1,w,c
 18432  003072  6EDA               	movwf	fsr2h,c
 18433  003074  0E00               	movlw	low _log_startTime
 18434  003076  26D9               	addwf	fsr2l,f,c
 18435  003078  0E01               	movlw	high _log_startTime
 18436  00307A  22DA               	addwfc	fsr2h,f,c
 18437  00307C  C009  FFDE         	movff	??_retrieveLog,postinc2
 18438  003080  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18439                           
 18440                           ;EEPROM.c: 161: addr++;
 18441  003084  4A10               	infsnz	retrieveLog@addr,f,c
 18442  003086  2A11               	incf	retrieveLog@addr+1,f,c
 18443  003088  4A0E               	infsnz	retrieveLog@i,f,c
 18444  00308A  2A0F               	incf	retrieveLog@i+1,f,c
 18445  00308C  D7DE               	goto	i2l5866
 18446  00308E                     i2l5878:
 18447                           
 18448                           ;EEPROM.c: 162: }
 18449                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18450  00308E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18451  003092  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18452  003096  ECAE  F022         	call	i2_EEPROM_read	;wreg free
 18453  00309A  6E09               	movwf	??_retrieveLog& (0+255),c
 18454  00309C  5009               	movf	??_retrieveLog,w,c
 18455  00309E  0100               	movlb	0	; () banked
 18456  0030A0  6FF4               	movwf	_log_total_time& (0+255),b
 18457  0030A2  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18458                           
 18459                           ; BSR set to: 0
 18460  0030A4  0012               	return		;funcret
 18461  0030A6                     __end_of_retrieveLog:
 18462                           	opt stack 0
 18463                           pclatu	equ	0xFFB
 18464                           pclath	equ	0xFFA
 18465                           tblptru	equ	0xFF8
 18466                           tblptrh	equ	0xFF7
 18467                           tblptrl	equ	0xFF6
 18468                           tablat	equ	0xFF5
 18469                           prodh	equ	0xFF4
 18470                           prodl	equ	0xFF3
 18471                           intcon	equ	0xFF2
 18472                           intcon2	equ	0xFF1
 18473                           intcon3	equ	0xFF0
 18474                           indf0	equ	0xFEF
 18475                           postinc0	equ	0xFEE
 18476                           fsr0h	equ	0xFEA
 18477                           fsr0l	equ	0xFE9
 18478                           wreg	equ	0xFE8
 18479                           postdec1	equ	0xFE5
 18480                           fsr1h	equ	0xFE2
 18481                           fsr1l	equ	0xFE1
 18482                           indf2	equ	0xFDF
 18483                           postinc2	equ	0xFDE
 18484                           postdec2	equ	0xFDD
 18485                           fsr2h	equ	0xFDA
 18486                           fsr2l	equ	0xFD9
 18487                           status	equ	0xFD8
 18488                           
 18489 ;; *************** function i2_EEPROM_read *****************
 18490 ;; Defined at:
 18491 ;;		line 68 in file "EEPROM.c"
 18492 ;; Parameters:    Size  Location     Type
 18493 ;;  address         2    0[COMRAM] unsigned short 
 18494 ;; Auto vars:     Size  Location     Type
 18495 ;;		None
 18496 ;; Return value:  Size  Location     Type
 18497 ;;                  1    wreg      unsigned char 
 18498 ;; Registers used:
 18499 ;;		wreg, status,2
 18500 ;; Tracked objects:
 18501 ;;		On entry : 0/0
 18502 ;;		On exit  : 0/0
 18503 ;;		Unchanged: 0/0
 18504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18505 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18509 ;;Total ram usage:        2 bytes
 18510 ;; Hardware stack levels used:    1
 18511 ;; This function calls:
 18512 ;;		Nothing
 18513 ;; This function is called by:
 18514 ;;		_retrieveLog
 18515 ;; This function uses a non-reentrant model
 18516 ;;
 18517                           
 18518                           	psect	text75
 18519  00455C                     __ptext75:
 18520                           	opt stack 0
 18521  00455C                     i2_EEPROM_read:
 18522                           	opt stack 20
 18523                           
 18524                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;incstack = 0
 18528  00455C  5002               	movf	i2EEPROM_read@address+1,w,c
 18529  00455E  6EAA               	movwf	4010,c	;volatile
 18530                           
 18531                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18532  004560  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18533                           
 18534                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18535  004564  9EA6               	bcf	4006,7,c	;volatile
 18536                           
 18537                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18538  004566  9CA6               	bcf	4006,6,c	;volatile
 18539                           
 18540                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18541  004568  80A6               	bsf	4006,0,c	;volatile
 18542  00456A                     i2l926:
 18543  00456A  B0A6               	btfsc	4006,0,c	;volatile
 18544  00456C  D7FE               	goto	i2l926
 18545                           
 18546                           ;EEPROM.c: 81: return EEDATA;
 18547  00456E  50A8               	movf	4008,w,c	;volatile
 18548  004570  0012               	return	
 18549  004572                     __end_ofi2_EEPROM_read:
 18550                           	opt stack 0
 18551                           pclatu	equ	0xFFB
 18552                           pclath	equ	0xFFA
 18553                           tblptru	equ	0xFF8
 18554                           tblptrh	equ	0xFF7
 18555                           tblptrl	equ	0xFF6
 18556                           tablat	equ	0xFF5
 18557                           prodh	equ	0xFF4
 18558                           prodl	equ	0xFF3
 18559                           intcon	equ	0xFF2
 18560                           intcon2	equ	0xFF1
 18561                           intcon3	equ	0xFF0
 18562                           indf0	equ	0xFEF
 18563                           postinc0	equ	0xFEE
 18564                           fsr0h	equ	0xFEA
 18565                           fsr0l	equ	0xFE9
 18566                           wreg	equ	0xFE8
 18567                           postdec1	equ	0xFE5
 18568                           fsr1h	equ	0xFE2
 18569                           fsr1l	equ	0xFE1
 18570                           indf2	equ	0xFDF
 18571                           postinc2	equ	0xFDE
 18572                           postdec2	equ	0xFDD
 18573                           fsr2h	equ	0xFDA
 18574                           fsr2l	equ	0xFD9
 18575                           status	equ	0xFD8
 18576                           
 18577 ;; *************** function _printSortTimer *****************
 18578 ;; Defined at:
 18579 ;;		line 264 in file "sort.c"
 18580 ;; Parameters:    Size  Location     Type
 18581 ;;		None
 18582 ;; Auto vars:     Size  Location     Type
 18583 ;;  i               2   72[COMRAM] int 
 18584 ;;  curTime        14   46[COMRAM] int [7]
 18585 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18586 ;;  sec             2   66[COMRAM] int 
 18587 ;;  min             2   64[COMRAM] int 
 18588 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18589 ;;  start_sec       2   60[COMRAM] unsigned int 
 18590 ;;  hour            2   44[COMRAM] int 
 18591 ;; Return value:  Size  Location     Type
 18592 ;;                  1    wreg      void 
 18593 ;; Registers used:
 18594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18595 ;; Tracked objects:
 18596 ;;		On entry : 0/0
 18597 ;;		On exit  : 0/0
 18598 ;;		Unchanged: 0/0
 18599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18601 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18602 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18603 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18604 ;;Total ram usage:       33 bytes
 18605 ;; Hardware stack levels used:    1
 18606 ;; Hardware stack levels required when called:    3
 18607 ;; This function calls:
 18608 ;;		i2___lwdiv
 18609 ;;		i2___lwmod
 18610 ;;		i2___wmul
 18611 ;;		i2_getRTC
 18612 ;;		i2_lcdInst
 18613 ;;		i2_printf
 18614 ;; This function is called by:
 18615 ;;		_handler
 18616 ;; This function uses a non-reentrant model
 18617 ;;
 18618                           
 18619                           	psect	text76
 18620  00238E                     __ptext76:
 18621                           	opt stack 0
 18622  00238E                     _printSortTimer:
 18623                           	opt stack 20
 18624                           
 18625                           ;sort.c: 265: getRTC();
 18626                           
 18627                           ;incstack = 0
 18628  00238E  EC69  F01D         	call	i2_getRTC	;wreg free
 18629                           
 18630                           ;sort.c: 266: int curTime[7];
 18631                           ;sort.c: 267: for(int i = 0; i < 7; i++){
 18632  002392  0E00               	movlw	0
 18633  002394  6E4A               	movwf	printSortTimer@i+1,c
 18634  002396  0E00               	movlw	0
 18635  002398  6E49               	movwf	printSortTimer@i,c
 18636  00239A                     i2l7872:
 18637  00239A  BE4A               	btfsc	printSortTimer@i+1,7,c
 18638  00239C  D006               	goto	i2l7876
 18639  00239E  504A               	movf	printSortTimer@i+1,w,c
 18640  0023A0  E131               	bnz	i2l7882
 18641  0023A2  0E07               	movlw	7
 18642  0023A4  5C49               	subwf	printSortTimer@i,w,c
 18643  0023A6  B0D8               	btfsc	status,0,c
 18644  0023A8  D02D               	goto	i2l7882
 18645  0023AA                     i2l7876:
 18646                           
 18647                           ;sort.c: 268: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18648  0023AA  0E24               	movlw	low _time
 18649  0023AC  2449               	addwf	printSortTimer@i,w,c
 18650  0023AE  6ED9               	movwf	fsr2l,c
 18651  0023B0  0E01               	movlw	high _time
 18652  0023B2  204A               	addwfc	printSortTimer@i+1,w,c
 18653  0023B4  6EDA               	movwf	fsr2h,c
 18654  0023B6  50DF               	movf	indf2,w,c
 18655  0023B8  6E2A               	movwf	??_printSortTimer& (0+255),c
 18656  0023BA  3A2A               	swapf	??_printSortTimer,f,c
 18657  0023BC  0E0F               	movlw	15
 18658  0023BE  162A               	andwf	??_printSortTimer,f,c
 18659  0023C0  0E0F               	movlw	15
 18660  0023C2  162A               	andwf	??_printSortTimer,f,c
 18661  0023C4  502A               	movf	??_printSortTimer,w,c
 18662  0023C6  0D0A               	mullw	10
 18663  0023C8  0E24               	movlw	low _time
 18664  0023CA  2449               	addwf	printSortTimer@i,w,c
 18665  0023CC  6ED9               	movwf	fsr2l,c
 18666  0023CE  0E01               	movlw	high _time
 18667  0023D0  204A               	addwfc	printSortTimer@i+1,w,c
 18668  0023D2  6EDA               	movwf	fsr2h,c
 18669  0023D4  50DF               	movf	indf2,w,c
 18670  0023D6  0B0F               	andlw	15
 18671  0023D8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18672  0023DA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18673  0023DC  50F3               	movf	prodl,w,c
 18674  0023DE  262B               	addwf	??_printSortTimer+1,f,c
 18675  0023E0  50F4               	movf	prodh,w,c
 18676  0023E2  222C               	addwfc	??_printSortTimer+2,f,c
 18677  0023E4  90D8               	bcf	status,0,c
 18678  0023E6  3449               	rlcf	printSortTimer@i,w,c
 18679  0023E8  6ED9               	movwf	fsr2l,c
 18680  0023EA  344A               	rlcf	printSortTimer@i+1,w,c
 18681  0023EC  6EDA               	movwf	fsr2h,c
 18682  0023EE  0E2F               	movlw	low printSortTimer@curTime
 18683  0023F0  26D9               	addwf	fsr2l,f,c
 18684  0023F2  0E00               	movlw	high printSortTimer@curTime
 18685  0023F4  22DA               	addwfc	fsr2h,f,c
 18686  0023F6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18687  0023FA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18688  0023FE  4A49               	infsnz	printSortTimer@i,f,c
 18689  002400  2A4A               	incf	printSortTimer@i+1,f,c
 18690  002402  D7CB               	goto	i2l7872
 18691  002404                     i2l7882:
 18692                           
 18693                           ;sort.c: 269: }
 18694                           ;sort.c: 270: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18695  002404  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18696  002408  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18697  00240C  0E00               	movlw	0
 18698  00240E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18699  002410  0E3C               	movlw	60
 18700  002412  6E03               	movwf	i2___wmul@multiplicand,c
 18701  002414  EC1C  F022         	call	i2___wmul	;wreg free
 18702  002418  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18703  00241C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18704  002420  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18705  002424  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18706  002428  0E0E               	movlw	14
 18707  00242A  6E04               	movwf	i2___wmul@multiplicand+1,c
 18708  00242C  0E10               	movlw	16
 18709  00242E  6E03               	movwf	i2___wmul@multiplicand,c
 18710  002430  EC1C  F022         	call	i2___wmul	;wreg free
 18711  002434  5001               	movf	?i2___wmul,w,c
 18712  002436  262A               	addwf	??_printSortTimer,f,c
 18713  002438  5002               	movf	?i2___wmul+1,w,c
 18714  00243A  222B               	addwfc	??_printSortTimer+1,f,c
 18715  00243C  0101               	movlb	1	; () banked
 18716  00243E  510E               	movf	_startTime& (0+255),w,b
 18717  002440  242A               	addwf	??_printSortTimer,w,c
 18718  002442  6E3D               	movwf	printSortTimer@start_sec,c
 18719  002444  0101               	movlb	1	; () banked
 18720  002446  510F               	movf	(_startTime+1)& (0+255),w,b
 18721  002448  202B               	addwfc	??_printSortTimer+1,w,c
 18722  00244A  6E3E               	movwf	printSortTimer@start_sec+1,c
 18723                           
 18724                           ;sort.c: 271: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18725  00244C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18726  002450  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18727  002454  0E00               	movlw	0
 18728  002456  6E04               	movwf	i2___wmul@multiplicand+1,c
 18729  002458  0E3C               	movlw	60
 18730  00245A  6E03               	movwf	i2___wmul@multiplicand,c
 18731  00245C  EC1C  F022         	call	i2___wmul	;wreg free
 18732  002460  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18733  002464  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18734  002468  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18735  00246C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18736  002470  0E0E               	movlw	14
 18737  002472  6E04               	movwf	i2___wmul@multiplicand+1,c
 18738  002474  0E10               	movlw	16
 18739  002476  6E03               	movwf	i2___wmul@multiplicand,c
 18740  002478  EC1C  F022         	call	i2___wmul	;wreg free
 18741  00247C  5001               	movf	?i2___wmul,w,c
 18742  00247E  262A               	addwf	??_printSortTimer,f,c
 18743  002480  5002               	movf	?i2___wmul+1,w,c
 18744  002482  222B               	addwfc	??_printSortTimer+1,f,c
 18745  002484  502F               	movf	printSortTimer@curTime,w,c
 18746  002486  242A               	addwf	??_printSortTimer,w,c
 18747  002488  6E3F               	movwf	printSortTimer@cur_sec,c
 18748  00248A  5030               	movf	printSortTimer@curTime+1,w,c
 18749  00248C  202B               	addwfc	??_printSortTimer+1,w,c
 18750  00248E  6E40               	movwf	printSortTimer@cur_sec+1,c
 18751                           
 18752                           ;sort.c: 272: unsigned int timeDiff = cur_sec - start_sec;
 18753  002490  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18754  002494  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18755  002498  1E2A               	comf	??_printSortTimer,f,c
 18756  00249A  1E2B               	comf	??_printSortTimer+1,f,c
 18757  00249C  4A2A               	infsnz	??_printSortTimer,f,c
 18758  00249E  2A2B               	incf	??_printSortTimer+1,f,c
 18759  0024A0  503F               	movf	printSortTimer@cur_sec,w,c
 18760  0024A2  242A               	addwf	??_printSortTimer,w,c
 18761  0024A4  6E47               	movwf	printSortTimer@timeDiff,c
 18762  0024A6  5040               	movf	printSortTimer@cur_sec+1,w,c
 18763  0024A8  202B               	addwfc	??_printSortTimer+1,w,c
 18764  0024AA  6E48               	movwf	printSortTimer@timeDiff+1,c
 18765                           
 18766                           ;sort.c: 274: total_time = timeDiff;
 18767  0024AC  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18768  0024B0  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18769                           
 18770                           ;sort.c: 276: if(timeDiff >= 10){
 18771  0024B4  5048               	movf	printSortTimer@timeDiff+1,w,c
 18772  0024B6  E104               	bnz	i2u673_40
 18773  0024B8  0E0A               	movlw	10
 18774  0024BA  5C47               	subwf	printSortTimer@timeDiff,w,c
 18775  0024BC  A0D8               	btfss	status,0,c
 18776  0024BE  D003               	goto	i2l7892
 18777  0024C0                     i2u673_40:
 18778                           
 18779                           ;sort.c: 277: machine_state = DoneSorting_state;
 18780  0024C0  0E02               	movlw	2
 18781  0024C2  0100               	movlb	0	; () banked
 18782  0024C4  6FFC               	movwf	_machine_state& (0+255),b
 18783  0024C6                     i2l7892:
 18784                           
 18785                           ;sort.c: 279: }
 18786                           ;sort.c: 281: int hour = timeDiff / 3600;
 18787  0024C6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18788  0024CA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18789  0024CE  0E0E               	movlw	14
 18790  0024D0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18791  0024D2  0E10               	movlw	16
 18792  0024D4  6E08               	movwf	i2___lwdiv@divisor,c
 18793  0024D6  EC1F  F01F         	call	i2___lwdiv	;wreg free
 18794  0024DA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18795  0024DE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18796                           
 18797                           ;sort.c: 282: int min = (timeDiff % 3600) / 60;
 18798  0024E2  0E0E               	movlw	14
 18799  0024E4  6E04               	movwf	i2___lwmod@divisor+1,c
 18800  0024E6  0E10               	movlw	16
 18801  0024E8  6E03               	movwf	i2___lwmod@divisor,c
 18802  0024EA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18803  0024EE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18804  0024F2  EC05  F020         	call	i2___lwmod	;wreg free
 18805  0024F6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18806  0024FA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18807  0024FE  0E00               	movlw	0
 18808  002500  6E09               	movwf	i2___lwdiv@divisor+1,c
 18809  002502  0E3C               	movlw	60
 18810  002504  6E08               	movwf	i2___lwdiv@divisor,c
 18811  002506  EC1F  F01F         	call	i2___lwdiv	;wreg free
 18812  00250A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18813  00250E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18814                           
 18815                           ;sort.c: 283: int sec = (timeDiff % 3600) % 60;
 18816  002512  0E0E               	movlw	14
 18817  002514  6E04               	movwf	i2___lwmod@divisor+1,c
 18818  002516  0E10               	movlw	16
 18819  002518  6E03               	movwf	i2___lwmod@divisor,c
 18820  00251A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18821  00251E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18822  002522  EC05  F020         	call	i2___lwmod	;wreg free
 18823  002526  C001  F045         	movff	?i2___lwmod,_printSortTimer$2364
 18824  00252A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2364+1
 18825                           
 18826                           ;sort.c: 283: int sec = (timeDiff % 3600) % 60;
 18827  00252E  C045  F001         	movff	_printSortTimer$2364,i2___lwmod@dividend
 18828  002532  C046  F002         	movff	_printSortTimer$2364+1,i2___lwmod@dividend+1
 18829  002536  0E00               	movlw	0
 18830  002538  6E04               	movwf	i2___lwmod@divisor+1,c
 18831  00253A  0E3C               	movlw	60
 18832  00253C  6E03               	movwf	i2___lwmod@divisor,c
 18833  00253E  EC05  F020         	call	i2___lwmod	;wreg free
 18834  002542  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18835  002546  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18836                           
 18837                           ;sort.c: 285: lcdInst(0b10000000);;
 18838  00254A  0E80               	movlw	128
 18839  00254C  ECE2  F022         	call	i2_lcdInst
 18840                           
 18841                           ;sort.c: 286: printf("SORTING...");
 18842  002550  0E84               	movlw	low STR_64
 18843  002552  6E0D               	movwf	i2printf@f,c
 18844  002554  0EFF               	movlw	high STR_64
 18845  002556  6E0E               	movwf	i2printf@f+1,c
 18846  002558  ECB8  F00A         	call	i2_printf	;wreg free
 18847                           
 18848                           ;sort.c: 287: lcdInst(0b11000000);;
 18849  00255C  0EC0               	movlw	192
 18850  00255E  ECE2  F022         	call	i2_lcdInst
 18851                           
 18852                           ;sort.c: 288: printf("TIME %d:%02d", min, sec);
 18853  002562  0E55               	movlw	low STR_65
 18854  002564  6E0D               	movwf	i2printf@f,c
 18855  002566  0EFF               	movlw	high STR_65
 18856  002568  6E0E               	movwf	i2printf@f+1,c
 18857  00256A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18858  00256E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18859  002572  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18860  002576  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18861  00257A  ECB8  F00A         	call	i2_printf	;wreg free
 18862  00257E  0012               	return		;funcret
 18863  002580                     __end_of_printSortTimer:
 18864                           	opt stack 0
 18865                           pclatu	equ	0xFFB
 18866                           pclath	equ	0xFFA
 18867                           tblptru	equ	0xFF8
 18868                           tblptrh	equ	0xFF7
 18869                           tblptrl	equ	0xFF6
 18870                           tablat	equ	0xFF5
 18871                           prodh	equ	0xFF4
 18872                           prodl	equ	0xFF3
 18873                           intcon	equ	0xFF2
 18874                           intcon2	equ	0xFF1
 18875                           intcon3	equ	0xFF0
 18876                           indf0	equ	0xFEF
 18877                           postinc0	equ	0xFEE
 18878                           fsr0h	equ	0xFEA
 18879                           fsr0l	equ	0xFE9
 18880                           wreg	equ	0xFE8
 18881                           postdec1	equ	0xFE5
 18882                           fsr1h	equ	0xFE2
 18883                           fsr1l	equ	0xFE1
 18884                           indf2	equ	0xFDF
 18885                           postinc2	equ	0xFDE
 18886                           postdec2	equ	0xFDD
 18887                           fsr2h	equ	0xFDA
 18888                           fsr2l	equ	0xFD9
 18889                           status	equ	0xFD8
 18890                           
 18891 ;; *************** function i2_printf *****************
 18892 ;; Defined at:
 18893 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18894 ;; Parameters:    Size  Location     Type
 18895 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18896 ;;		 -> STR_112(17), STR_111(17), STR_110(10), STR_109(13), 
 18897 ;;		 -> STR_108(18), STR_107(18), STR_106(17), STR_105(15), 
 18898 ;;		 -> STR_104(15), STR_103(15), STR_102(17), STR_101(17), 
 18899 ;;		 -> STR_100(17), STR_99(16), STR_98(17), STR_97(17), 
 18900 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 18901 ;;		 -> STR_92(15), STR_91(11), STR_90(17), STR_89(11), 
 18902 ;;		 -> STR_88(17), STR_87(14), STR_86(15), STR_85(14), 
 18903 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 18904 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 18905 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 18906 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 18907 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 18908 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 18909 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 18910 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 18911 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 18912 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 18913 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 18914 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 18915 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 18916 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 18917 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 18918 ;; Auto vars:     Size  Location     Type
 18919 ;;  printf          4    0        struct .
 18920 ;;  printf          2   39[COMRAM] int 
 18921 ;;  printf          2   35[COMRAM] unsigned int 
 18922 ;;  printf          2   33[COMRAM] unsigned int 
 18923 ;;  printf          2   31[COMRAM] PTR void [1]
 18924 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18925 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18926 ;;		 -> STR_113(7), count_total(2), printRTC@month(4), UI@month(4), 
 18927 ;;  printf          1   38[COMRAM] char 
 18928 ;;  printf          1   37[COMRAM] unsigned char 
 18929 ;;  printf          1   28[COMRAM] char 
 18930 ;; Return value:  Size  Location     Type
 18931 ;;                  2   12[COMRAM] int 
 18932 ;; Registers used:
 18933 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18934 ;; Tracked objects:
 18935 ;;		On entry : 0/0
 18936 ;;		On exit  : 0/0
 18937 ;;		Unchanged: 0/0
 18938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18939 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18943 ;;Total ram usage:       29 bytes
 18944 ;; Hardware stack levels used:    1
 18945 ;; Hardware stack levels required when called:    2
 18946 ;; This function calls:
 18947 ;;		i2___lwdiv
 18948 ;;		i2___lwmod
 18949 ;;		i2___wmul
 18950 ;;		i2_isdigit
 18951 ;;		i2_putch
 18952 ;; This function is called by:
 18953 ;;		_change_state_to_menu_11
 18954 ;;		_change_state_to_menu_23
 18955 ;;		_change_state_to_logs_11
 18956 ;;		_change_state_to_logs_12
 18957 ;;		_change_state_to_logs_22
 18958 ;;		_change_state_to_logs_23
 18959 ;;		_change_state_to_logs_33
 18960 ;;		_change_state_to_logs_34
 18961 ;;		_printSortTimer
 18962 ;;		i2_change_state_to_menu_start
 18963 ;;		i2_change_state_to_menu_12
 18964 ;;		i2_change_state_to_menu_22
 18965 ;;		i2_printRTC
 18966 ;; This function uses a non-reentrant model
 18967 ;;
 18968                           
 18969                           	psect	text77
 18970  001570                     __ptext77:
 18971                           	opt stack 0
 18972  001570                     i2_printf:
 18973                           	opt stack 19
 18974                           
 18975                           ;doprnt.c: 466: va_list ap;
 18976                           ;doprnt.c: 499: signed char c;
 18977                           ;doprnt.c: 501: int width;
 18978                           ;doprnt.c: 506: signed char prec;
 18979                           ;doprnt.c: 508: unsigned char flag;
 18980                           ;doprnt.c: 523: union {
 18981                           ;doprnt.c: 524: unsigned long vd;
 18982                           ;doprnt.c: 525: double integ;
 18983                           ;doprnt.c: 526: } tmpval;
 18984                           ;doprnt.c: 528: unsigned int val;
 18985                           ;doprnt.c: 529: unsigned len;
 18986                           ;doprnt.c: 530: const char * cp;
 18987                           ;doprnt.c: 533: *ap = __va_start();
 18988                           
 18989                           ;incstack = 0
 18990  001570  0E0F               	movlw	low (?i2_printf+2)
 18991  001572  6E20               	movwf	i2printf@ap,c
 18992  001574  0E00               	movlw	high (?i2_printf+2)
 18993  001576  6E21               	movwf	i2printf@ap+1,c
 18994                           
 18995                           ;doprnt.c: 536: while(c = *f++) {
 18996  001578  D1A4               	goto	i2l5684
 18997  00157A                     i2l5554:
 18998                           
 18999                           ;doprnt.c: 538: if(c != '%')
 19000  00157A  0E25               	movlw	37
 19001  00157C  1827               	xorwf	i2printf@c,w,c
 19002  00157E  B4D8               	btfsc	status,2,c
 19003  001580  D004               	goto	i2l5558
 19004                           
 19005                           ;doprnt.c: 540: {
 19006                           ;doprnt.c: 541: (putch(c) );
 19007  001582  5027               	movf	i2printf@c,w,c
 19008  001584  ECDC  F022         	call	i2_putch
 19009                           
 19010                           ;doprnt.c: 542: continue;
 19011  001588  D19C               	goto	i2l5684
 19012  00158A                     i2l5558:
 19013                           
 19014                           ;doprnt.c: 543: }
 19015                           ;doprnt.c: 546: width = 0;
 19016  00158A  0E00               	movlw	0
 19017  00158C  6E29               	movwf	i2printf@width+1,c
 19018  00158E  0E00               	movlw	0
 19019  001590  6E28               	movwf	i2printf@width,c
 19020                           
 19021                           ;doprnt.c: 548: flag = 0;
 19022  001592  0E00               	movlw	0
 19023  001594  6E26               	movwf	i2printf@flag,c
 19024                           
 19025                           ;doprnt.c: 551: switch(*f) {
 19026                           
 19027                           ;doprnt.c: 550: for(;;) {
 19028  001596  D003               	goto	i2l5564
 19029  001598                     i2l5560:
 19030                           
 19031                           ;doprnt.c: 580: flag |= 0x04;
 19032  001598  8426               	bsf	i2printf@flag,2,c
 19033                           
 19034                           ;doprnt.c: 581: f++;
 19035  00159A  4A0D               	infsnz	i2printf@f,f,c
 19036  00159C  2A0E               	incf	i2printf@f+1,f,c
 19037  00159E                     i2l5564:
 19038  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 19039  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19040  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19041  0015A6  6AF8               	clrf	tblptru,c
 19042  0015A8                     	endif
 19043  0015A8                     	if	0	;tblptru may be non-zero
 19044  0015A8                     	endif
 19045  0015A8  0008               	tblrd		*
 19046  0015AA  50F5               	movf	tablat,w,c
 19047                           
 19048                           ; Switch size 1, requested type "space"
 19049                           ; Number of cases is 1, Range of values is 48 to 48
 19050                           ; switch strategies available:
 19051                           ; Name         Instructions Cycles
 19052                           ; simple_byte            4     3 (average)
 19053                           ;	Chosen strategy is simple_byte
 19054  0015AC  0A30               	xorlw	48	; case 48
 19055  0015AE  B4D8               	btfsc	status,2,c
 19056  0015B0  D7F3               	goto	i2l5560
 19057                           
 19058                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19059                           
 19060                           ;doprnt.c: 586: }
 19061                           
 19062                           ;doprnt.c: 585: break;
 19063  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19064  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19065  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19066  0015BA  6AF8               	clrf	tblptru,c
 19067  0015BC                     	endif
 19068  0015BC                     	if	0	;tblptru may be non-zero
 19069  0015BC                     	endif
 19070  0015BC  0008               	tblrd		*
 19071  0015BE  50F5               	movf	tablat,w,c
 19072  0015C0  EC88  F022         	call	i2_isdigit
 19073  0015C4  A0D8               	btfss	status,0,c
 19074  0015C6  D0A6               	goto	i2l5612
 19075                           
 19076                           ;doprnt.c: 598: width = 0;
 19077  0015C8  0E00               	movlw	0
 19078  0015CA  6E29               	movwf	i2printf@width+1,c
 19079  0015CC  0E00               	movlw	0
 19080  0015CE  6E28               	movwf	i2printf@width,c
 19081  0015D0                     i2l5570:
 19082                           
 19083                           ;doprnt.c: 600: width *= 10;
 19084  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19085  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19086  0015D8  0E00               	movlw	0
 19087  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 19088  0015DC  0E0A               	movlw	10
 19089  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 19090  0015E0  EC1C  F022         	call	i2___wmul	;wreg free
 19091  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 19092  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19093                           
 19094                           ;doprnt.c: 601: width += *f++ - '0';
 19095  0015EC  0ED0               	movlw	208
 19096  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 19097  0015F0  0EFF               	movlw	255
 19098  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19099  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 19100  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19101  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19102  0015FC  6AF8               	clrf	tblptru,c
 19103  0015FE                     	endif
 19104  0015FE                     	if	0	;tblptru may be non-zero
 19105  0015FE                     	endif
 19106  0015FE  0008               	tblrd		*
 19107  001600  50F5               	movf	tablat,w,c
 19108  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19109  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19110  001606  5019               	movf	??i2_printf,w,c
 19111  001608  261B               	addwf	??i2_printf+2,f,c
 19112  00160A  501A               	movf	??i2_printf+1,w,c
 19113  00160C  221C               	addwfc	??i2_printf+3,f,c
 19114  00160E  501B               	movf	??i2_printf+2,w,c
 19115  001610  2628               	addwf	i2printf@width,f,c
 19116  001612  501C               	movf	??i2_printf+3,w,c
 19117  001614  2229               	addwfc	i2printf@width+1,f,c
 19118  001616  4A0D               	infsnz	i2printf@f,f,c
 19119  001618  2A0E               	incf	i2printf@f+1,f,c
 19120                           
 19121                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19122  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 19123  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19124  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19125  001622  6AF8               	clrf	tblptru,c
 19126  001624                     	endif
 19127  001624                     	if	0	;tblptru may be non-zero
 19128  001624                     	endif
 19129  001624  0008               	tblrd		*
 19130  001626  50F5               	movf	tablat,w,c
 19131  001628  EC88  F022         	call	i2_isdigit
 19132  00162C  A0D8               	btfss	status,0,c
 19133  00162E  D072               	goto	i2l5612
 19134  001630  D7CF               	goto	i2l5570
 19135  001632                     i2l5578:
 19136                           
 19137                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19138  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 19139  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19140  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 19141  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19142  001642  0E02               	movlw	2
 19143  001644  2620               	addwf	i2printf@ap,f,c
 19144  001646  0E00               	movlw	0
 19145  001648  2221               	addwfc	i2printf@ap+1,f,c
 19146                           
 19147                           ;doprnt.c: 740: if(!cp)
 19148  00164A  501E               	movf	i2printf@cp,w,c
 19149  00164C  101F               	iorwf	i2printf@cp+1,w,c
 19150  00164E  A4D8               	btfss	status,2,c
 19151  001650  D004               	goto	i2l5586
 19152                           
 19153                           ;doprnt.c: 741: cp = "(null)";
 19154  001652  0EB5               	movlw	low STR_113
 19155  001654  6E1E               	movwf	i2printf@cp,c
 19156  001656  0EFF               	movlw	high STR_113
 19157  001658  6E1F               	movwf	i2printf@cp+1,c
 19158  00165A                     i2l5586:
 19159                           
 19160                           ;doprnt.c: 745: len = 0;
 19161  00165A  0E00               	movlw	0
 19162  00165C  6E23               	movwf	i2printf@len+1,c
 19163  00165E  0E00               	movlw	0
 19164  001660  6E22               	movwf	i2printf@len,c
 19165                           
 19166                           ;doprnt.c: 746: while(cp[len])
 19167  001662  D002               	goto	i2l5590
 19168  001664                     i2l5588:
 19169                           
 19170                           ;doprnt.c: 747: len++;
 19171  001664  4A22               	infsnz	i2printf@len,f,c
 19172  001666  2A23               	incf	i2printf@len+1,f,c
 19173  001668                     i2l5590:
 19174  001668  5022               	movf	i2printf@len,w,c
 19175  00166A  241E               	addwf	i2printf@cp,w,c
 19176  00166C  6E19               	movwf	??i2_printf& (0+255),c
 19177  00166E  5023               	movf	i2printf@len+1,w,c
 19178  001670  201F               	addwfc	i2printf@cp+1,w,c
 19179  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19180  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 19181  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19182  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 19183  00167E  6EF8               	movwf	tblptru,c
 19184  001680  0E0F               	movlw	(high __ramtop+-1)
 19185  001682  64F7               	cpfsgt	tblptrh,c
 19186  001684  D003               	bra	i2u411_47
 19187  001686  0008               	tblrd		*
 19188  001688  50F5               	movf	tablat,w,c
 19189  00168A  D005               	bra	i2u411_40
 19190  00168C                     i2u411_47:
 19191  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 19192  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 19193  001694  50EF               	movf	indf0,w,c
 19194  001696                     i2u411_40:
 19195  001696  0900               	iorlw	0
 19196  001698  A4D8               	btfss	status,2,c
 19197  00169A  D7E4               	goto	i2l5588
 19198                           
 19199                           ;doprnt.c: 757: if(width > len)
 19200  00169C  5028               	movf	i2printf@width,w,c
 19201  00169E  5C22               	subwf	i2printf@len,w,c
 19202  0016A0  5029               	movf	i2printf@width+1,w,c
 19203  0016A2  5823               	subwfb	i2printf@len+1,w,c
 19204  0016A4  B0D8               	btfsc	status,0,c
 19205  0016A6  D005               	goto	i2l5596
 19206                           
 19207                           ;doprnt.c: 758: width -= len;
 19208  0016A8  5022               	movf	i2printf@len,w,c
 19209  0016AA  5E28               	subwf	i2printf@width,f,c
 19210  0016AC  5023               	movf	i2printf@len+1,w,c
 19211  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 19212  0016B0  D008               	goto	i2l5600
 19213  0016B2                     i2l5596:
 19214                           
 19215                           ;doprnt.c: 759: else
 19216                           ;doprnt.c: 760: width = 0;
 19217  0016B2  0E00               	movlw	0
 19218  0016B4  6E29               	movwf	i2printf@width+1,c
 19219  0016B6  0E00               	movlw	0
 19220  0016B8  6E28               	movwf	i2printf@width,c
 19221                           
 19222                           ;doprnt.c: 764: while(width--)
 19223  0016BA  D003               	goto	i2l5600
 19224  0016BC                     i2l5598:
 19225                           
 19226                           ;doprnt.c: 765: (putch(' ') );
 19227  0016BC  0E20               	movlw	32
 19228  0016BE  ECDC  F022         	call	i2_putch
 19229  0016C2                     i2l5600:
 19230  0016C2  0628               	decf	i2printf@width,f,c
 19231  0016C4  A0D8               	btfss	status,0,c
 19232  0016C6  0629               	decf	i2printf@width+1,f,c
 19233  0016C8  2828               	incf	i2printf@width,w,c
 19234  0016CA  E1F8               	bnz	i2l5598
 19235  0016CC  2829               	incf	i2printf@width+1,w,c
 19236  0016CE  B4D8               	btfsc	status,2,c
 19237  0016D0  D016               	goto	i2l5606
 19238  0016D2  D7F4               	goto	i2l5598
 19239  0016D4                     i2l5602:
 19240                           
 19241                           ;doprnt.c: 768: (putch(*cp++) );
 19242  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19243  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19244  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 19245  0016DE  6EF8               	movwf	tblptru,c
 19246  0016E0  0E0F               	movlw	(high __ramtop+-1)
 19247  0016E2  64F7               	cpfsgt	tblptrh,c
 19248  0016E4  D003               	bra	i2u415_47
 19249  0016E6  0008               	tblrd		*
 19250  0016E8  50F5               	movf	tablat,w,c
 19251  0016EA  D005               	bra	i2u415_40
 19252  0016EC                     i2u415_47:
 19253  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 19254  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 19255  0016F4  50EF               	movf	indf0,w,c
 19256  0016F6                     i2u415_40:
 19257  0016F6  ECDC  F022         	call	i2_putch
 19258  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 19259  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 19260  0016FE                     i2l5606:
 19261  0016FE  0622               	decf	i2printf@len,f,c
 19262  001700  A0D8               	btfss	status,0,c
 19263  001702  0623               	decf	i2printf@len+1,f,c
 19264  001704  2822               	incf	i2printf@len,w,c
 19265  001706  E1E6               	bnz	i2l5602
 19266  001708  2823               	incf	i2printf@len+1,w,c
 19267  00170A  B4D8               	btfsc	status,2,c
 19268  00170C  D0DA               	goto	i2l5684
 19269  00170E  D7E2               	goto	i2l5602
 19270  001710                     i2l5608:
 19271                           
 19272                           ;doprnt.c: 818: flag |= 0x40;
 19273  001710  8C26               	bsf	i2printf@flag,6,c
 19274                           
 19275                           ;doprnt.c: 822: }
 19276                           
 19277                           ;doprnt.c: 819: break;
 19278  001712  D01B               	goto	i2l1228
 19279  001714                     i2l5612:
 19280  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 19281  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19282  00171C  4A0D               	infsnz	i2printf@f,f,c
 19283  00171E  2A0E               	incf	i2printf@f+1,f,c
 19284  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19285  001720  6AF8               	clrf	tblptru,c
 19286  001722                     	endif
 19287  001722                     	if	0	;tblptru may be non-zero
 19288  001722                     	endif
 19289  001722  0008               	tblrd		*
 19290  001724  CFF5 F027          	movff	tablat,i2printf@c
 19291  001728  5027               	movf	i2printf@c,w,c
 19292                           
 19293                           ; Switch size 1, requested type "space"
 19294                           ; Number of cases is 5, Range of values is 0 to 117
 19295                           ; switch strategies available:
 19296                           ; Name         Instructions Cycles
 19297                           ; simple_byte           16     9 (average)
 19298                           ;	Chosen strategy is simple_byte
 19299  00172A  0A00               	xorlw	0	; case 0
 19300  00172C  B4D8               	btfsc	status,2,c
 19301  00172E  0012               	return	
 19302  001730  0A64               	xorlw	100	; case 100
 19303  001732  B4D8               	btfsc	status,2,c
 19304  001734  D00A               	goto	i2l1228
 19305  001736  0A0D               	xorlw	13	; case 105
 19306  001738  B4D8               	btfsc	status,2,c
 19307  00173A  D007               	goto	i2l1228
 19308  00173C  0A1A               	xorlw	26	; case 115
 19309  00173E  B4D8               	btfsc	status,2,c
 19310  001740  D778               	goto	i2l5578
 19311  001742  0A06               	xorlw	6	; case 117
 19312  001744  B4D8               	btfsc	status,2,c
 19313  001746  D7E4               	goto	i2l5608
 19314  001748  D0BC               	goto	i2l5684
 19315  00174A                     i2l1228:
 19316                           
 19317                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19318  00174A  BC26               	btfsc	i2printf@flag,6,c
 19319  00174C  D015               	goto	i2l5624
 19320                           
 19321                           ;doprnt.c: 1253: {
 19322                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19323  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 19324  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19325  001756  CFDE F024          	movff	postinc2,i2printf@val
 19326  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 19327  00175E  0E02               	movlw	2
 19328  001760  2620               	addwf	i2printf@ap,f,c
 19329  001762  0E00               	movlw	0
 19330  001764  2221               	addwfc	i2printf@ap+1,f,c
 19331                           
 19332                           ;doprnt.c: 1261: if((int)val < 0) {
 19333  001766  AE25               	btfss	i2printf@val+1,7,c
 19334  001768  D013               	goto	i2l5628
 19335                           
 19336                           ;doprnt.c: 1262: flag |= 0x03;
 19337  00176A  0E03               	movlw	3
 19338  00176C  1226               	iorwf	i2printf@flag,f,c
 19339                           
 19340                           ;doprnt.c: 1263: val = -val;
 19341  00176E  6C24               	negf	i2printf@val,c
 19342  001770  1E25               	comf	i2printf@val+1,f,c
 19343  001772  B0D8               	btfsc	status,0,c
 19344  001774  2A25               	incf	i2printf@val+1,f,c
 19345                           
 19346                           ;doprnt.c: 1264: }
 19347                           ;doprnt.c: 1266: }
 19348  001776  D00C               	goto	i2l5628
 19349  001778                     i2l5624:
 19350                           
 19351                           ;doprnt.c: 1268: else
 19352                           ;doprnt.c: 1273: {
 19353                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19354  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 19355  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19356  001780  CFDE F024          	movff	postinc2,i2printf@val
 19357  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 19358  001788  0E02               	movlw	2
 19359  00178A  2620               	addwf	i2printf@ap,f,c
 19360  00178C  0E00               	movlw	0
 19361  00178E  2221               	addwfc	i2printf@ap+1,f,c
 19362  001790                     i2l5628:
 19363                           
 19364                           ;doprnt.c: 1287: }
 19365                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19366  001790  0E01               	movlw	1
 19367  001792  6E27               	movwf	i2printf@c,c
 19368  001794                     i2l5630:
 19369  001794  0E05               	movlw	5
 19370  001796  1827               	xorwf	i2printf@c,w,c
 19371  001798  B4D8               	btfsc	status,2,c
 19372  00179A  D015               	goto	i2l5642
 19373                           
 19374                           ;doprnt.c: 1306: if(val < dpowers[c])
 19375  00179C  5027               	movf	i2printf@c,w,c
 19376  00179E  0D02               	mullw	2
 19377  0017A0  0E38               	movlw	low _dpowers
 19378  0017A2  24F3               	addwf	prodl,w,c
 19379  0017A4  6EF6               	movwf	tblptrl,c
 19380  0017A6  0EFB               	movlw	high _dpowers
 19381  0017A8  20F4               	addwfc	prodh,w,c
 19382  0017AA  6EF7               	movwf	tblptrh,c
 19383  0017AC                     	if	1	;There are 3 active tblptr bytes
 19384  0017AC  6AF8               	clrf	tblptru,c
 19385  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 19386  0017B0  22F8               	addwfc	tblptru,f,c
 19387  0017B2                     	endif
 19388  0017B2  0009               	tblrd		*+
 19389  0017B4  50F5               	movf	tablat,w,c
 19390  0017B6  5C24               	subwf	i2printf@val,w,c
 19391  0017B8  0009               	tblrd		*+
 19392  0017BA  50F5               	movf	tablat,w,c
 19393  0017BC  5825               	subwfb	i2printf@val+1,w,c
 19394  0017BE  A0D8               	btfss	status,0,c
 19395  0017C0  D002               	goto	i2l5642
 19396                           
 19397                           ;doprnt.c: 1307: break;
 19398  0017C2  2A27               	incf	i2printf@c,f,c
 19399  0017C4  D7E7               	goto	i2l5630
 19400  0017C6                     i2l5642:
 19401                           
 19402                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19403  0017C6  5028               	movf	i2printf@width,w,c
 19404  0017C8  1029               	iorwf	i2printf@width+1,w,c
 19405  0017CA  B4D8               	btfsc	status,2,c
 19406  0017CC  D009               	goto	i2l5648
 19407  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 19408  0017D2  0E03               	movlw	3
 19409  0017D4  1619               	andwf	??i2_printf,f,c
 19410  0017D6  B4D8               	btfsc	status,2,c
 19411  0017D8  D003               	goto	i2l5648
 19412                           
 19413                           ;doprnt.c: 1346: width--;
 19414  0017DA  0628               	decf	i2printf@width,f,c
 19415  0017DC  A0D8               	btfss	status,0,c
 19416  0017DE  0629               	decf	i2printf@width+1,f,c
 19417  0017E0                     i2l5648:
 19418                           
 19419                           ;doprnt.c: 1381: if(width > c)
 19420  0017E0  0E80               	movlw	128
 19421  0017E2  BE27               	btfsc	i2printf@c,7,c
 19422  0017E4  0E7F               	movlw	127
 19423  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 19424  0017E8  5028               	movf	i2printf@width,w,c
 19425  0017EA  5C27               	subwf	i2printf@c,w,c
 19426  0017EC  5029               	movf	i2printf@width+1,w,c
 19427  0017EE  0A80               	xorlw	128
 19428  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 19429  0017F2  B0D8               	btfsc	status,0,c
 19430  0017F4  D007               	goto	i2l5652
 19431                           
 19432                           ;doprnt.c: 1382: width -= c;
 19433  0017F6  5027               	movf	i2printf@c,w,c
 19434  0017F8  5E28               	subwf	i2printf@width,f,c
 19435  0017FA  0E00               	movlw	0
 19436  0017FC  BE27               	btfsc	i2printf@c,7,c
 19437  0017FE  0EFF               	movlw	255
 19438  001800  5A29               	subwfb	i2printf@width+1,f,c
 19439  001802  D004               	goto	i2l5654
 19440  001804                     i2l5652:
 19441                           
 19442                           ;doprnt.c: 1383: else
 19443                           ;doprnt.c: 1384: width = 0;
 19444  001804  0E00               	movlw	0
 19445  001806  6E29               	movwf	i2printf@width+1,c
 19446  001808  0E00               	movlw	0
 19447  00180A  6E28               	movwf	i2printf@width,c
 19448  00180C                     i2l5654:
 19449                           
 19450                           ;doprnt.c: 1387: if(flag & 0x04) {
 19451  00180C  A426               	btfss	i2printf@flag,2,c
 19452  00180E  D014               	goto	i2l5666
 19453                           
 19454                           ;doprnt.c: 1392: if(flag & 0x03)
 19455  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 19456  001814  0E03               	movlw	3
 19457  001816  1619               	andwf	??i2_printf,f,c
 19458  001818  B4D8               	btfsc	status,2,c
 19459  00181A  D003               	goto	i2l5660
 19460                           
 19461                           ;doprnt.c: 1393: (putch('-') );
 19462  00181C  0E2D               	movlw	45
 19463  00181E  ECDC  F022         	call	i2_putch
 19464  001822                     i2l5660:
 19465                           
 19466                           ;doprnt.c: 1415: if(width)
 19467  001822  5028               	movf	i2printf@width,w,c
 19468  001824  1029               	iorwf	i2printf@width+1,w,c
 19469  001826  B4D8               	btfsc	status,2,c
 19470  001828  D01E               	goto	i2l5676
 19471                           
 19472                           ;doprnt.c: 1417: (putch('0') );
 19473                           
 19474                           ;doprnt.c: 1416: do
 19475  00182A  0E30               	movlw	48
 19476  00182C  ECDC  F022         	call	i2_putch
 19477                           
 19478                           ;doprnt.c: 1418: while(--width);
 19479  001830  0628               	decf	i2printf@width,f,c
 19480  001832  A0D8               	btfss	status,0,c
 19481  001834  0629               	decf	i2printf@width+1,f,c
 19482  001836  D7F5               	goto	i2l5660
 19483  001838                     i2l5666:
 19484                           
 19485                           ;doprnt.c: 1422: {
 19486                           ;doprnt.c: 1424: if(width
 19487                           ;doprnt.c: 1428: )
 19488  001838  5028               	movf	i2printf@width,w,c
 19489  00183A  1029               	iorwf	i2printf@width+1,w,c
 19490  00183C  B4D8               	btfsc	status,2,c
 19491  00183E  D00A               	goto	i2l5672
 19492  001840                     i2l5668:
 19493                           
 19494                           ;doprnt.c: 1430: (putch(' ') );
 19495  001840  0E20               	movlw	32
 19496  001842  ECDC  F022         	call	i2_putch
 19497                           
 19498                           ;doprnt.c: 1431: while(--width);
 19499  001846  0628               	decf	i2printf@width,f,c
 19500  001848  A0D8               	btfss	status,0,c
 19501  00184A  0629               	decf	i2printf@width+1,f,c
 19502  00184C  5028               	movf	i2printf@width,w,c
 19503  00184E  1029               	iorwf	i2printf@width+1,w,c
 19504  001850  A4D8               	btfss	status,2,c
 19505  001852  D7F6               	goto	i2l5668
 19506  001854                     i2l5672:
 19507                           
 19508                           ;doprnt.c: 1438: if(flag & 0x03)
 19509  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 19510  001858  0E03               	movlw	3
 19511  00185A  1619               	andwf	??i2_printf,f,c
 19512  00185C  B4D8               	btfsc	status,2,c
 19513  00185E  D003               	goto	i2l5676
 19514                           
 19515                           ;doprnt.c: 1439: (putch('-') );
 19516  001860  0E2D               	movlw	45
 19517  001862  ECDC  F022         	call	i2_putch
 19518  001866                     i2l5676:
 19519                           
 19520                           ;doprnt.c: 1469: }
 19521                           ;doprnt.c: 1472: prec = c;
 19522  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 19523                           
 19524                           ;doprnt.c: 1474: while(prec--) {
 19525  00186A  D027               	goto	i2l5682
 19526  00186C                     i2l5678:
 19527                           
 19528                           ;doprnt.c: 1478: {
 19529                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19530  00186C  501D               	movf	i2printf@prec,w,c
 19531  00186E  0D02               	mullw	2
 19532  001870  0E38               	movlw	low _dpowers
 19533  001872  24F3               	addwf	prodl,w,c
 19534  001874  6EF6               	movwf	tblptrl,c
 19535  001876  0EFB               	movlw	high _dpowers
 19536  001878  20F4               	addwfc	prodh,w,c
 19537  00187A  6EF7               	movwf	tblptrh,c
 19538  00187C                     	if	1	;There are 3 active tblptr bytes
 19539  00187C  6AF8               	clrf	tblptru,c
 19540  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 19541  001880  22F8               	addwfc	tblptru,f,c
 19542  001882                     	endif
 19543  001882  0009               	tblrd		*+
 19544  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19545  001888  000A               	tblrd		*-
 19546  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19547  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19548  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19549  001896  EC1F  F01F         	call	i2___lwdiv	;wreg free
 19550  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19551  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19552  0018A2  0E00               	movlw	0
 19553  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 19554  0018A6  0E0A               	movlw	10
 19555  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 19556  0018AA  EC05  F020         	call	i2___lwmod	;wreg free
 19557  0018AE  5001               	movf	?i2___lwmod,w,c
 19558  0018B0  0F30               	addlw	48
 19559  0018B2  6E27               	movwf	i2printf@c,c
 19560                           
 19561                           ;doprnt.c: 1523: }
 19562                           ;doprnt.c: 1524: (putch(c) );
 19563  0018B4  5027               	movf	i2printf@c,w,c
 19564  0018B6  ECDC  F022         	call	i2_putch
 19565  0018BA                     i2l5682:
 19566  0018BA  061D               	decf	i2printf@prec,f,c
 19567  0018BC  281D               	incf	i2printf@prec,w,c
 19568  0018BE  A4D8               	btfss	status,2,c
 19569  0018C0  D7D5               	goto	i2l5678
 19570  0018C2                     i2l5684:
 19571  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19572  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19573  0018CA  4A0D               	infsnz	i2printf@f,f,c
 19574  0018CC  2A0E               	incf	i2printf@f+1,f,c
 19575  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19576  0018CE  6AF8               	clrf	tblptru,c
 19577  0018D0                     	endif
 19578  0018D0                     	if	0	;tblptru may be non-zero
 19579  0018D0                     	endif
 19580  0018D0  0008               	tblrd		*
 19581  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 19582  0018D6  5027               	movf	i2printf@c,w,c
 19583  0018D8  B4D8               	btfsc	status,2,c
 19584  0018DA  0012               	return	
 19585  0018DC  D64E               	goto	i2l5554
 19586  0018DE                     __end_ofi2_printf:
 19587                           	opt stack 0
 19588                           pclatu	equ	0xFFB
 19589                           pclath	equ	0xFFA
 19590                           tblptru	equ	0xFF8
 19591                           tblptrh	equ	0xFF7
 19592                           tblptrl	equ	0xFF6
 19593                           tablat	equ	0xFF5
 19594                           prodh	equ	0xFF4
 19595                           prodl	equ	0xFF3
 19596                           intcon	equ	0xFF2
 19597                           intcon2	equ	0xFF1
 19598                           intcon3	equ	0xFF0
 19599                           indf0	equ	0xFEF
 19600                           postinc0	equ	0xFEE
 19601                           fsr0h	equ	0xFEA
 19602                           fsr0l	equ	0xFE9
 19603                           wreg	equ	0xFE8
 19604                           postdec1	equ	0xFE5
 19605                           fsr1h	equ	0xFE2
 19606                           fsr1l	equ	0xFE1
 19607                           indf2	equ	0xFDF
 19608                           postinc2	equ	0xFDE
 19609                           postdec2	equ	0xFDD
 19610                           fsr2h	equ	0xFDA
 19611                           fsr2l	equ	0xFD9
 19612                           status	equ	0xFD8
 19613                           
 19614 ;; *************** function i2_putch *****************
 19615 ;; Defined at:
 19616 ;;		line 20 in file "lcd.c"
 19617 ;; Parameters:    Size  Location     Type
 19618 ;;  data            1    wreg     unsigned char 
 19619 ;; Auto vars:     Size  Location     Type
 19620 ;;  data            1    2[COMRAM] unsigned char 
 19621 ;; Return value:  Size  Location     Type
 19622 ;;                  1    wreg      void 
 19623 ;; Registers used:
 19624 ;;		wreg, status,2, status,0, cstack
 19625 ;; Tracked objects:
 19626 ;;		On entry : 0/0
 19627 ;;		On exit  : 0/0
 19628 ;;		Unchanged: 0/0
 19629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19633 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19634 ;;Total ram usage:        1 bytes
 19635 ;; Hardware stack levels used:    1
 19636 ;; Hardware stack levels required when called:    1
 19637 ;; This function calls:
 19638 ;;		i2_lcdNibble
 19639 ;; This function is called by:
 19640 ;;		i2_printf
 19641 ;; This function uses a non-reentrant model
 19642 ;;
 19643                           
 19644                           	psect	text78
 19645  0045B8                     __ptext78:
 19646                           	opt stack 0
 19647  0045B8                     i2_putch:
 19648                           	opt stack 19
 19649                           
 19650                           ;incstack = 0
 19651                           ;i2putch@data stored from wreg
 19652  0045B8  6E03               	movwf	i2putch@data,c
 19653                           
 19654                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19655  0045BA  848C               	bsf	3980,2,c	;volatile
 19656                           
 19657                           ;lcd.c: 22: lcdNibble(data);
 19658  0045BC  5003               	movf	i2putch@data,w,c
 19659  0045BE  ECF4  F01E         	call	i2_lcdNibble
 19660  0045C2  0012               	return		;funcret
 19661  0045C4                     __end_ofi2_putch:
 19662                           	opt stack 0
 19663                           pclatu	equ	0xFFB
 19664                           pclath	equ	0xFFA
 19665                           tblptru	equ	0xFF8
 19666                           tblptrh	equ	0xFF7
 19667                           tblptrl	equ	0xFF6
 19668                           tablat	equ	0xFF5
 19669                           prodh	equ	0xFF4
 19670                           prodl	equ	0xFF3
 19671                           intcon	equ	0xFF2
 19672                           intcon2	equ	0xFF1
 19673                           intcon3	equ	0xFF0
 19674                           indf0	equ	0xFEF
 19675                           postinc0	equ	0xFEE
 19676                           fsr0h	equ	0xFEA
 19677                           fsr0l	equ	0xFE9
 19678                           wreg	equ	0xFE8
 19679                           postdec1	equ	0xFE5
 19680                           fsr1h	equ	0xFE2
 19681                           fsr1l	equ	0xFE1
 19682                           indf2	equ	0xFDF
 19683                           postinc2	equ	0xFDE
 19684                           postdec2	equ	0xFDD
 19685                           fsr2h	equ	0xFDA
 19686                           fsr2l	equ	0xFD9
 19687                           status	equ	0xFD8
 19688                           
 19689 ;; *************** function i2_isdigit *****************
 19690 ;; Defined at:
 19691 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19692 ;; Parameters:    Size  Location     Type
 19693 ;;  c               1    wreg     unsigned char 
 19694 ;; Auto vars:     Size  Location     Type
 19695 ;;  c               1    2[COMRAM] unsigned char 
 19696 ;; Return value:  Size  Location     Type
 19697 ;;		None               void
 19698 ;; Registers used:
 19699 ;;		wreg, status,2, status,0
 19700 ;; Tracked objects:
 19701 ;;		On entry : 0/0
 19702 ;;		On exit  : 0/0
 19703 ;;		Unchanged: 0/0
 19704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19708 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19709 ;;Total ram usage:        3 bytes
 19710 ;; Hardware stack levels used:    1
 19711 ;; This function calls:
 19712 ;;		Nothing
 19713 ;; This function is called by:
 19714 ;;		i2_printf
 19715 ;; This function uses a non-reentrant model
 19716 ;;
 19717                           
 19718                           	psect	text79
 19719  004510                     __ptext79:
 19720                           	opt stack 0
 19721  004510                     i2_isdigit:
 19722                           	opt stack 20
 19723                           
 19724                           ;incstack = 0
 19725                           ;i2isdigit@c stored from wreg
 19726  004510  6E03               	movwf	i2isdigit@c,c
 19727  004512  0E00               	movlw	0
 19728  004514  6E02               	movwf	i2_isdigit$1891,c
 19729  004516  0E3A               	movlw	58
 19730  004518  6003               	cpfslt	i2isdigit@c,c
 19731  00451A  D005               	goto	i2l5264
 19732  00451C  0E2F               	movlw	47
 19733  00451E  6403               	cpfsgt	i2isdigit@c,c
 19734  004520  D002               	goto	i2l5264
 19735  004522  0E01               	movlw	1
 19736  004524  6E02               	movwf	i2_isdigit$1891,c
 19737  004526                     i2l5264:
 19738  004526  C002  F001         	movff	i2_isdigit$1891,??i2_isdigit
 19739  00452A  3001               	rrcf	??i2_isdigit,w,c
 19740  00452C  0012               	return	
 19741  00452E                     __end_ofi2_isdigit:
 19742                           	opt stack 0
 19743                           pclatu	equ	0xFFB
 19744                           pclath	equ	0xFFA
 19745                           tblptru	equ	0xFF8
 19746                           tblptrh	equ	0xFF7
 19747                           tblptrl	equ	0xFF6
 19748                           tablat	equ	0xFF5
 19749                           prodh	equ	0xFF4
 19750                           prodl	equ	0xFF3
 19751                           intcon	equ	0xFF2
 19752                           intcon2	equ	0xFF1
 19753                           intcon3	equ	0xFF0
 19754                           indf0	equ	0xFEF
 19755                           postinc0	equ	0xFEE
 19756                           fsr0h	equ	0xFEA
 19757                           fsr0l	equ	0xFE9
 19758                           wreg	equ	0xFE8
 19759                           postdec1	equ	0xFE5
 19760                           fsr1h	equ	0xFE2
 19761                           fsr1l	equ	0xFE1
 19762                           indf2	equ	0xFDF
 19763                           postinc2	equ	0xFDE
 19764                           postdec2	equ	0xFDD
 19765                           fsr2h	equ	0xFDA
 19766                           fsr2l	equ	0xFD9
 19767                           status	equ	0xFD8
 19768                           
 19769 ;; *************** function i2___wmul *****************
 19770 ;; Defined at:
 19771 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19772 ;; Parameters:    Size  Location     Type
 19773 ;;  multiplier      2    0[COMRAM] unsigned int 
 19774 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19775 ;; Auto vars:     Size  Location     Type
 19776 ;;  __wmul          2    4[COMRAM] unsigned int 
 19777 ;; Return value:  Size  Location     Type
 19778 ;;                  2    0[COMRAM] unsigned int 
 19779 ;; Registers used:
 19780 ;;		wreg, status,2, status,0, prodl, prodh
 19781 ;; Tracked objects:
 19782 ;;		On entry : 0/0
 19783 ;;		On exit  : 0/0
 19784 ;;		Unchanged: 0/0
 19785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19786 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19787 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19789 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19790 ;;Total ram usage:        6 bytes
 19791 ;; Hardware stack levels used:    1
 19792 ;; This function calls:
 19793 ;;		Nothing
 19794 ;; This function is called by:
 19795 ;;		_printSortTimer
 19796 ;;		_retrieveLog
 19797 ;;		i2_printf
 19798 ;; This function uses a non-reentrant model
 19799 ;;
 19800                           
 19801                           	psect	text80
 19802  004438                     __ptext80:
 19803                           	opt stack 0
 19804  004438                     i2___wmul:
 19805                           	opt stack 20
 19806                           
 19807                           ;incstack = 0
 19808  004438  5001               	movf	i2___wmul@multiplier,w,c
 19809  00443A  0203               	mulwf	i2___wmul@multiplicand,c
 19810  00443C  CFF3 F005          	movff	prodl,i2___wmul@product
 19811  004440  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19812  004444  5001               	movf	i2___wmul@multiplier,w,c
 19813  004446  0204               	mulwf	i2___wmul@multiplicand+1,c
 19814  004448  50F3               	movf	prodl,w,c
 19815  00444A  2606               	addwf	i2___wmul@product+1,f,c
 19816  00444C  5002               	movf	i2___wmul@multiplier+1,w,c
 19817  00444E  0203               	mulwf	i2___wmul@multiplicand,c
 19818  004450  50F3               	movf	prodl,w,c
 19819  004452  2606               	addwf	i2___wmul@product+1,f,c
 19820  004454  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19821  004458  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19822  00445C  0012               	return	
 19823  00445E                     __end_ofi2___wmul:
 19824                           	opt stack 0
 19825                           pclatu	equ	0xFFB
 19826                           pclath	equ	0xFFA
 19827                           tblptru	equ	0xFF8
 19828                           tblptrh	equ	0xFF7
 19829                           tblptrl	equ	0xFF6
 19830                           tablat	equ	0xFF5
 19831                           prodh	equ	0xFF4
 19832                           prodl	equ	0xFF3
 19833                           intcon	equ	0xFF2
 19834                           intcon2	equ	0xFF1
 19835                           intcon3	equ	0xFF0
 19836                           indf0	equ	0xFEF
 19837                           postinc0	equ	0xFEE
 19838                           fsr0h	equ	0xFEA
 19839                           fsr0l	equ	0xFE9
 19840                           wreg	equ	0xFE8
 19841                           postdec1	equ	0xFE5
 19842                           fsr1h	equ	0xFE2
 19843                           fsr1l	equ	0xFE1
 19844                           indf2	equ	0xFDF
 19845                           postinc2	equ	0xFDE
 19846                           postdec2	equ	0xFDD
 19847                           fsr2h	equ	0xFDA
 19848                           fsr2l	equ	0xFD9
 19849                           status	equ	0xFD8
 19850                           
 19851 ;; *************** function i2___lwmod *****************
 19852 ;; Defined at:
 19853 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19854 ;; Parameters:    Size  Location     Type
 19855 ;;  dividend        2    0[COMRAM] unsigned int 
 19856 ;;  divisor         2    2[COMRAM] unsigned int 
 19857 ;; Auto vars:     Size  Location     Type
 19858 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19859 ;; Return value:  Size  Location     Type
 19860 ;;                  2    0[COMRAM] unsigned int 
 19861 ;; Registers used:
 19862 ;;		wreg, status,2, status,0
 19863 ;; Tracked objects:
 19864 ;;		On entry : 0/0
 19865 ;;		On exit  : 0/0
 19866 ;;		Unchanged: 0/0
 19867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19871 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19872 ;;Total ram usage:        5 bytes
 19873 ;; Hardware stack levels used:    1
 19874 ;; This function calls:
 19875 ;;		Nothing
 19876 ;; This function is called by:
 19877 ;;		_printSortTimer
 19878 ;;		i2_printf
 19879 ;; This function uses a non-reentrant model
 19880 ;;
 19881                           
 19882                           	psect	text81
 19883  00400A                     __ptext81:
 19884                           	opt stack 0
 19885  00400A                     i2___lwmod:
 19886                           	opt stack 20
 19887                           
 19888                           ;incstack = 0
 19889  00400A  5003               	movf	i2___lwmod@divisor,w,c
 19890  00400C  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19891  00400E  B4D8               	btfsc	status,2,c
 19892  004010  D018               	goto	i2l1685
 19893  004012  0E01               	movlw	1
 19894  004014  6E05               	movwf	i2___lwmod@counter,c
 19895  004016  D004               	goto	i2l5296
 19896  004018                     i2l5294:
 19897  004018  90D8               	bcf	status,0,c
 19898  00401A  3603               	rlcf	i2___lwmod@divisor,f,c
 19899  00401C  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19900  00401E  2A05               	incf	i2___lwmod@counter,f,c
 19901  004020                     i2l5296:
 19902  004020  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19903  004022  D7FA               	goto	i2l5294
 19904  004024                     i2l5298:
 19905  004024  5003               	movf	i2___lwmod@divisor,w,c
 19906  004026  5C01               	subwf	i2___lwmod@dividend,w,c
 19907  004028  5004               	movf	i2___lwmod@divisor+1,w,c
 19908  00402A  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19909  00402C  A0D8               	btfss	status,0,c
 19910  00402E  D004               	goto	i2l5302
 19911  004030  5003               	movf	i2___lwmod@divisor,w,c
 19912  004032  5E01               	subwf	i2___lwmod@dividend,f,c
 19913  004034  5004               	movf	i2___lwmod@divisor+1,w,c
 19914  004036  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19915  004038                     i2l5302:
 19916  004038  90D8               	bcf	status,0,c
 19917  00403A  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19918  00403C  3203               	rrcf	i2___lwmod@divisor,f,c
 19919  00403E  2E05               	decfsz	i2___lwmod@counter,f,c
 19920  004040  D7F1               	goto	i2l5298
 19921  004042                     i2l1685:
 19922  004042  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19923  004046  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19924  00404A  0012               	return		;funcret
 19925  00404C                     __end_ofi2___lwmod:
 19926                           	opt stack 0
 19927                           pclatu	equ	0xFFB
 19928                           pclath	equ	0xFFA
 19929                           tblptru	equ	0xFF8
 19930                           tblptrh	equ	0xFF7
 19931                           tblptrl	equ	0xFF6
 19932                           tablat	equ	0xFF5
 19933                           prodh	equ	0xFF4
 19934                           prodl	equ	0xFF3
 19935                           intcon	equ	0xFF2
 19936                           intcon2	equ	0xFF1
 19937                           intcon3	equ	0xFF0
 19938                           indf0	equ	0xFEF
 19939                           postinc0	equ	0xFEE
 19940                           fsr0h	equ	0xFEA
 19941                           fsr0l	equ	0xFE9
 19942                           wreg	equ	0xFE8
 19943                           postdec1	equ	0xFE5
 19944                           fsr1h	equ	0xFE2
 19945                           fsr1l	equ	0xFE1
 19946                           indf2	equ	0xFDF
 19947                           postinc2	equ	0xFDE
 19948                           postdec2	equ	0xFDD
 19949                           fsr2h	equ	0xFDA
 19950                           fsr2l	equ	0xFD9
 19951                           status	equ	0xFD8
 19952                           
 19953 ;; *************** function i2___lwdiv *****************
 19954 ;; Defined at:
 19955 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19956 ;; Parameters:    Size  Location     Type
 19957 ;;  dividend        2    5[COMRAM] unsigned int 
 19958 ;;  divisor         2    7[COMRAM] unsigned int 
 19959 ;; Auto vars:     Size  Location     Type
 19960 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 19961 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 19962 ;; Return value:  Size  Location     Type
 19963 ;;                  2    5[COMRAM] unsigned int 
 19964 ;; Registers used:
 19965 ;;		wreg, status,2, status,0
 19966 ;; Tracked objects:
 19967 ;;		On entry : 0/0
 19968 ;;		On exit  : 0/0
 19969 ;;		Unchanged: 0/0
 19970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19971 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19972 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19974 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19975 ;;Total ram usage:        7 bytes
 19976 ;; Hardware stack levels used:    1
 19977 ;; This function calls:
 19978 ;;		Nothing
 19979 ;; This function is called by:
 19980 ;;		_printSortTimer
 19981 ;;		i2_printf
 19982 ;; This function uses a non-reentrant model
 19983 ;;
 19984                           
 19985                           	psect	text82
 19986  003E3E                     __ptext82:
 19987                           	opt stack 0
 19988  003E3E                     i2___lwdiv:
 19989                           	opt stack 20
 19990                           
 19991                           ;incstack = 0
 19992  003E3E  0E00               	movlw	0
 19993  003E40  6E0B               	movwf	i2___lwdiv@quotient+1,c
 19994  003E42  0E00               	movlw	0
 19995  003E44  6E0A               	movwf	i2___lwdiv@quotient,c
 19996  003E46  5008               	movf	i2___lwdiv@divisor,w,c
 19997  003E48  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 19998  003E4A  B4D8               	btfsc	status,2,c
 19999  003E4C  D01C               	goto	i2l1675
 20000  003E4E  0E01               	movlw	1
 20001  003E50  6E0C               	movwf	i2___lwdiv@counter,c
 20002  003E52  D004               	goto	i2l5276
 20003  003E54                     i2l5274:
 20004  003E54  90D8               	bcf	status,0,c
 20005  003E56  3608               	rlcf	i2___lwdiv@divisor,f,c
 20006  003E58  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20007  003E5A  2A0C               	incf	i2___lwdiv@counter,f,c
 20008  003E5C                     i2l5276:
 20009  003E5C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20010  003E5E  D7FA               	goto	i2l5274
 20011  003E60                     i2l5278:
 20012  003E60  90D8               	bcf	status,0,c
 20013  003E62  360A               	rlcf	i2___lwdiv@quotient,f,c
 20014  003E64  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20015  003E66  5008               	movf	i2___lwdiv@divisor,w,c
 20016  003E68  5C06               	subwf	i2___lwdiv@dividend,w,c
 20017  003E6A  5009               	movf	i2___lwdiv@divisor+1,w,c
 20018  003E6C  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20019  003E6E  A0D8               	btfss	status,0,c
 20020  003E70  D005               	goto	i2l5286
 20021  003E72  5008               	movf	i2___lwdiv@divisor,w,c
 20022  003E74  5E06               	subwf	i2___lwdiv@dividend,f,c
 20023  003E76  5009               	movf	i2___lwdiv@divisor+1,w,c
 20024  003E78  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20025  003E7A  800A               	bsf	i2___lwdiv@quotient,0,c
 20026  003E7C                     i2l5286:
 20027  003E7C  90D8               	bcf	status,0,c
 20028  003E7E  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20029  003E80  3208               	rrcf	i2___lwdiv@divisor,f,c
 20030  003E82  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20031  003E84  D7ED               	goto	i2l5278
 20032  003E86                     i2l1675:
 20033  003E86  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20034  003E8A  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20035  003E8E  0012               	return		;funcret
 20036  003E90                     __end_ofi2___lwdiv:
 20037                           	opt stack 0
 20038                           pclatu	equ	0xFFB
 20039                           pclath	equ	0xFFA
 20040                           tblptru	equ	0xFF8
 20041                           tblptrh	equ	0xFF7
 20042                           tblptrl	equ	0xFF6
 20043                           tablat	equ	0xFF5
 20044                           prodh	equ	0xFF4
 20045                           prodl	equ	0xFF3
 20046                           intcon	equ	0xFF2
 20047                           intcon2	equ	0xFF1
 20048                           intcon3	equ	0xFF0
 20049                           indf0	equ	0xFEF
 20050                           postinc0	equ	0xFEE
 20051                           fsr0h	equ	0xFEA
 20052                           fsr0l	equ	0xFE9
 20053                           wreg	equ	0xFE8
 20054                           postdec1	equ	0xFE5
 20055                           fsr1h	equ	0xFE2
 20056                           fsr1l	equ	0xFE1
 20057                           indf2	equ	0xFDF
 20058                           postinc2	equ	0xFDE
 20059                           postdec2	equ	0xFDD
 20060                           fsr2h	equ	0xFDA
 20061                           fsr2l	equ	0xFD9
 20062                           status	equ	0xFD8
 20063                           
 20064 ;; *************** function i2_lcdInst *****************
 20065 ;; Defined at:
 20066 ;;		line 15 in file "lcd.c"
 20067 ;; Parameters:    Size  Location     Type
 20068 ;;  data            1    wreg     unsigned char 
 20069 ;; Auto vars:     Size  Location     Type
 20070 ;;  data            1    2[COMRAM] unsigned char 
 20071 ;; Return value:  Size  Location     Type
 20072 ;;                  1    wreg      void 
 20073 ;; Registers used:
 20074 ;;		wreg, status,2, status,0, cstack
 20075 ;; Tracked objects:
 20076 ;;		On entry : 0/0
 20077 ;;		On exit  : 0/0
 20078 ;;		Unchanged: 0/0
 20079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20083 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20084 ;;Total ram usage:        1 bytes
 20085 ;; Hardware stack levels used:    1
 20086 ;; Hardware stack levels required when called:    1
 20087 ;; This function calls:
 20088 ;;		i2_lcdNibble
 20089 ;; This function is called by:
 20090 ;;		_change_state_to_menu_11
 20091 ;;		_change_state_to_menu_23
 20092 ;;		_change_state_to_logs_11
 20093 ;;		_change_state_to_logs_12
 20094 ;;		_change_state_to_logs_22
 20095 ;;		_change_state_to_logs_23
 20096 ;;		_change_state_to_logs_33
 20097 ;;		_change_state_to_logs_34
 20098 ;;		_printSortTimer
 20099 ;;		i2_change_state_to_menu_start
 20100 ;;		i2_change_state_to_menu_12
 20101 ;;		i2_change_state_to_menu_22
 20102 ;;		i2_printRTC
 20103 ;; This function uses a non-reentrant model
 20104 ;;
 20105                           
 20106                           	psect	text83
 20107  0045C4                     __ptext83:
 20108                           	opt stack 0
 20109  0045C4                     i2_lcdInst:
 20110                           	opt stack 19
 20111                           
 20112                           ;incstack = 0
 20113                           ;i2lcdInst@data stored from wreg
 20114  0045C4  6E03               	movwf	i2lcdInst@data,c
 20115                           
 20116                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20117  0045C6  948C               	bcf	3980,2,c	;volatile
 20118                           
 20119                           ;lcd.c: 17: lcdNibble(data);
 20120  0045C8  5003               	movf	i2lcdInst@data,w,c
 20121  0045CA  ECF4  F01E         	call	i2_lcdNibble
 20122  0045CE  0012               	return		;funcret
 20123  0045D0                     __end_ofi2_lcdInst:
 20124                           	opt stack 0
 20125                           pclatu	equ	0xFFB
 20126                           pclath	equ	0xFFA
 20127                           tblptru	equ	0xFF8
 20128                           tblptrh	equ	0xFF7
 20129                           tblptrl	equ	0xFF6
 20130                           tablat	equ	0xFF5
 20131                           prodh	equ	0xFF4
 20132                           prodl	equ	0xFF3
 20133                           intcon	equ	0xFF2
 20134                           intcon2	equ	0xFF1
 20135                           intcon3	equ	0xFF0
 20136                           indf0	equ	0xFEF
 20137                           postinc0	equ	0xFEE
 20138                           fsr0h	equ	0xFEA
 20139                           fsr0l	equ	0xFE9
 20140                           wreg	equ	0xFE8
 20141                           postdec1	equ	0xFE5
 20142                           fsr1h	equ	0xFE2
 20143                           fsr1l	equ	0xFE1
 20144                           indf2	equ	0xFDF
 20145                           postinc2	equ	0xFDE
 20146                           postdec2	equ	0xFDD
 20147                           fsr2h	equ	0xFDA
 20148                           fsr2l	equ	0xFD9
 20149                           status	equ	0xFD8
 20150                           
 20151 ;; *************** function i2_lcdNibble *****************
 20152 ;; Defined at:
 20153 ;;		line 25 in file "lcd.c"
 20154 ;; Parameters:    Size  Location     Type
 20155 ;;  data            1    wreg     unsigned char 
 20156 ;; Auto vars:     Size  Location     Type
 20157 ;;  data            1    1[COMRAM] unsigned char 
 20158 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20159 ;; Return value:  Size  Location     Type
 20160 ;;                  1    wreg      void 
 20161 ;; Registers used:
 20162 ;;		wreg, status,2, status,0
 20163 ;; Tracked objects:
 20164 ;;		On entry : 0/0
 20165 ;;		On exit  : 0/0
 20166 ;;		Unchanged: 0/0
 20167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20169 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20172 ;;Total ram usage:        2 bytes
 20173 ;; Hardware stack levels used:    1
 20174 ;; This function calls:
 20175 ;;		Nothing
 20176 ;; This function is called by:
 20177 ;;		i2_lcdInst
 20178 ;;		i2_putch
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text84
 20183  003DE8                     __ptext84:
 20184                           	opt stack 0
 20185  003DE8                     i2_lcdNibble:
 20186                           	opt stack 19
 20187                           
 20188                           ;incstack = 0
 20189                           ;i2lcdNibble@data stored from wreg
 20190  003DE8  6E02               	movwf	i2lcdNibble@data,c
 20191                           
 20192                           ;lcd.c: 27: char temp = data & 0xF0;
 20193  003DEA  5002               	movf	i2lcdNibble@data,w,c
 20194  003DEC  0BF0               	andlw	240
 20195  003DEE  6E01               	movwf	i2lcdNibble@temp,c
 20196                           
 20197                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20198  003DF0  508C               	movf	3980,w,c	;volatile
 20199  003DF2  0B0F               	andlw	15
 20200  003DF4  6E8C               	movwf	3980,c	;volatile
 20201                           
 20202                           ;lcd.c: 29: LATD = temp | LATD;
 20203  003DF6  5001               	movf	i2lcdNibble@temp,w,c
 20204  003DF8  108C               	iorwf	3980,w,c	;volatile
 20205  003DFA  6E8C               	movwf	3980,c	;volatile
 20206                           
 20207                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20208  003DFC  868C               	bsf	3980,3,c	;volatile
 20209                           
 20210                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20211  003DFE  0E42               	movlw	66
 20212  003E00                     i2u793_47:
 20213  003E00  2EE8               	decfsz	wreg,f,c
 20214  003E02  D7FE               	bra	i2u793_47
 20215  003E04  D000               	nop2	
 20216                           
 20217                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20218  003E06  968C               	bcf	3980,3,c	;volatile
 20219                           
 20220                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20221  003E08  0E42               	movlw	66
 20222  003E0A                     i2u794_47:
 20223  003E0A  2EE8               	decfsz	wreg,f,c
 20224  003E0C  D7FE               	bra	i2u794_47
 20225  003E0E  D000               	nop2	
 20226                           
 20227                           ;lcd.c: 36: data = data << 4;
 20228  003E10  3802               	swapf	i2lcdNibble@data,w,c
 20229  003E12  0BF0               	andlw	240
 20230  003E14  6E02               	movwf	i2lcdNibble@data,c
 20231                           
 20232                           ;lcd.c: 38: temp = data & 0xF0;
 20233  003E16  5002               	movf	i2lcdNibble@data,w,c
 20234  003E18  0BF0               	andlw	240
 20235  003E1A  6E01               	movwf	i2lcdNibble@temp,c
 20236                           
 20237                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20238  003E1C  508C               	movf	3980,w,c	;volatile
 20239  003E1E  0B0F               	andlw	15
 20240  003E20  6E8C               	movwf	3980,c	;volatile
 20241                           
 20242                           ;lcd.c: 40: LATD = temp | LATD;
 20243  003E22  5001               	movf	i2lcdNibble@temp,w,c
 20244  003E24  108C               	iorwf	3980,w,c	;volatile
 20245  003E26  6E8C               	movwf	3980,c	;volatile
 20246                           
 20247                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20248  003E28  868C               	bsf	3980,3,c	;volatile
 20249                           
 20250                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20251  003E2A  0E42               	movlw	66
 20252  003E2C                     i2u795_47:
 20253  003E2C  2EE8               	decfsz	wreg,f,c
 20254  003E2E  D7FE               	bra	i2u795_47
 20255  003E30  D000               	nop2	
 20256                           
 20257                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20258  003E32  968C               	bcf	3980,3,c	;volatile
 20259                           
 20260                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20261  003E34  0E42               	movlw	66
 20262  003E36                     i2u796_47:
 20263  003E36  2EE8               	decfsz	wreg,f,c
 20264  003E38  D7FE               	bra	i2u796_47
 20265  003E3A  D000               	nop2	
 20266  003E3C  0012               	return		;funcret
 20267  003E3E                     __end_ofi2_lcdNibble:
 20268                           	opt stack 0
 20269                           pclatu	equ	0xFFB
 20270                           pclath	equ	0xFFA
 20271                           tblptru	equ	0xFF8
 20272                           tblptrh	equ	0xFF7
 20273                           tblptrl	equ	0xFF6
 20274                           tablat	equ	0xFF5
 20275                           prodh	equ	0xFF4
 20276                           prodl	equ	0xFF3
 20277                           intcon	equ	0xFF2
 20278                           intcon2	equ	0xFF1
 20279                           intcon3	equ	0xFF0
 20280                           indf0	equ	0xFEF
 20281                           postinc0	equ	0xFEE
 20282                           fsr0h	equ	0xFEA
 20283                           fsr0l	equ	0xFE9
 20284                           wreg	equ	0xFE8
 20285                           postdec1	equ	0xFE5
 20286                           fsr1h	equ	0xFE2
 20287                           fsr1l	equ	0xFE1
 20288                           indf2	equ	0xFDF
 20289                           postinc2	equ	0xFDE
 20290                           postdec2	equ	0xFDD
 20291                           fsr2h	equ	0xFDA
 20292                           fsr2l	equ	0xFD9
 20293                           status	equ	0xFD8
 20294                           
 20295 ;; *************** function i2_getRTC *****************
 20296 ;; Defined at:
 20297 ;;		line 44 in file "RTC.c"
 20298 ;; Parameters:    Size  Location     Type
 20299 ;;		None
 20300 ;; Auto vars:     Size  Location     Type
 20301 ;;  getRTC          2    3[COMRAM] int 
 20302 ;; Return value:  Size  Location     Type
 20303 ;;                  1    wreg      void 
 20304 ;; Registers used:
 20305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20306 ;; Tracked objects:
 20307 ;;		On entry : 0/0
 20308 ;;		On exit  : 0/0
 20309 ;;		Unchanged: 0/0
 20310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20314 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20315 ;;Total ram usage:        2 bytes
 20316 ;; Hardware stack levels used:    1
 20317 ;; Hardware stack levels required when called:    2
 20318 ;; This function calls:
 20319 ;;		i2_I2C_Master_Read
 20320 ;;		i2_I2C_Master_Start
 20321 ;;		i2_I2C_Master_Stop
 20322 ;;		i2_I2C_Master_Write
 20323 ;; This function is called by:
 20324 ;;		_printSortTimer
 20325 ;;		i2_printRTC
 20326 ;; This function uses a non-reentrant model
 20327 ;;
 20328                           
 20329                           	psect	text85
 20330  003AD2                     __ptext85:
 20331                           	opt stack 0
 20332  003AD2                     i2_getRTC:
 20333                           	opt stack 18
 20334                           
 20335                           ;RTC.c: 48: I2C_Master_Start();
 20336                           
 20337                           ;incstack = 0
 20338  003AD2  EC02  F023         	call	i2_I2C_Master_Start	;wreg free
 20339                           
 20340                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20341  003AD6  0E00               	movlw	0
 20342  003AD8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20343  003ADA  0ED0               	movlw	208
 20344  003ADC  6E02               	movwf	i2I2C_Master_Write@d,c
 20345  003ADE  ECED  F022         	call	i2_I2C_Master_Write	;wreg free
 20346                           
 20347                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20348  003AE2  0E00               	movlw	0
 20349  003AE4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20350  003AE6  0E00               	movlw	0
 20351  003AE8  6E02               	movwf	i2I2C_Master_Write@d,c
 20352  003AEA  ECED  F022         	call	i2_I2C_Master_Write	;wreg free
 20353                           
 20354                           ;RTC.c: 51: I2C_Master_Stop();
 20355  003AEE  ECFE  F022         	call	i2_I2C_Master_Stop	;wreg free
 20356                           
 20357                           ;RTC.c: 54: I2C_Master_Start();
 20358  003AF2  EC02  F023         	call	i2_I2C_Master_Start	;wreg free
 20359                           
 20360                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20361  003AF6  0E00               	movlw	0
 20362  003AF8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20363  003AFA  0ED1               	movlw	209
 20364  003AFC  6E02               	movwf	i2I2C_Master_Write@d,c
 20365  003AFE  ECED  F022         	call	i2_I2C_Master_Write	;wreg free
 20366                           
 20367                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20368  003B02  0E00               	movlw	0
 20369  003B04  6E05               	movwf	i2getRTC@i+1,c
 20370  003B06  0E00               	movlw	0
 20371  003B08  6E04               	movwf	i2getRTC@i,c
 20372  003B0A                     i2l5526:
 20373  003B0A  BE05               	btfsc	i2getRTC@i+1,7,c
 20374  003B0C  D006               	goto	i2l5530
 20375  003B0E  5005               	movf	i2getRTC@i+1,w,c
 20376  003B10  E111               	bnz	i2l5536
 20377  003B12  0E06               	movlw	6
 20378  003B14  5C04               	subwf	i2getRTC@i,w,c
 20379  003B16  B0D8               	btfsc	status,0,c
 20380  003B18  D00D               	goto	i2l5536
 20381  003B1A                     i2l5530:
 20382                           
 20383                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20384  003B1A  0E24               	movlw	low _time
 20385  003B1C  2404               	addwf	i2getRTC@i,w,c
 20386  003B1E  6ED9               	movwf	fsr2l,c
 20387  003B20  0E01               	movlw	high _time
 20388  003B22  2005               	addwfc	i2getRTC@i+1,w,c
 20389  003B24  6EDA               	movwf	fsr2h,c
 20390  003B26  0E01               	movlw	1
 20391  003B28  EC2F  F022         	call	i2_I2C_Master_Read
 20392  003B2C  6EDF               	movwf	indf2,c
 20393  003B2E  4A04               	infsnz	i2getRTC@i,f,c
 20394  003B30  2A05               	incf	i2getRTC@i+1,f,c
 20395  003B32  D7EB               	goto	i2l5526
 20396  003B34                     i2l5536:
 20397                           
 20398                           ;RTC.c: 58: }
 20399                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20400  003B34  0E00               	movlw	0
 20401  003B36  EC2F  F022         	call	i2_I2C_Master_Read
 20402  003B3A  0101               	movlb	1	; () banked
 20403  003B3C  6F2A               	movwf	(_time+6)& (0+255),b
 20404                           
 20405                           ;RTC.c: 60: I2C_Master_Stop();
 20406  003B3E  ECFE  F022         	call	i2_I2C_Master_Stop	;wreg free
 20407  003B42  0012               	return		;funcret
 20408  003B44                     __end_ofi2_getRTC:
 20409                           	opt stack 0
 20410                           pclatu	equ	0xFFB
 20411                           pclath	equ	0xFFA
 20412                           tblptru	equ	0xFF8
 20413                           tblptrh	equ	0xFF7
 20414                           tblptrl	equ	0xFF6
 20415                           tablat	equ	0xFF5
 20416                           prodh	equ	0xFF4
 20417                           prodl	equ	0xFF3
 20418                           intcon	equ	0xFF2
 20419                           intcon2	equ	0xFF1
 20420                           intcon3	equ	0xFF0
 20421                           indf0	equ	0xFEF
 20422                           postinc0	equ	0xFEE
 20423                           fsr0h	equ	0xFEA
 20424                           fsr0l	equ	0xFE9
 20425                           wreg	equ	0xFE8
 20426                           postdec1	equ	0xFE5
 20427                           fsr1h	equ	0xFE2
 20428                           fsr1l	equ	0xFE1
 20429                           indf2	equ	0xFDF
 20430                           postinc2	equ	0xFDE
 20431                           postdec2	equ	0xFDD
 20432                           fsr2h	equ	0xFDA
 20433                           fsr2l	equ	0xFD9
 20434                           status	equ	0xFD8
 20435                           
 20436 ;; *************** function i2_I2C_Master_Write *****************
 20437 ;; Defined at:
 20438 ;;		line 49 in file "I2C.c"
 20439 ;; Parameters:    Size  Location     Type
 20440 ;;  d               2    1[COMRAM] unsigned int 
 20441 ;; Auto vars:     Size  Location     Type
 20442 ;;		None
 20443 ;; Return value:  Size  Location     Type
 20444 ;;                  1    wreg      void 
 20445 ;; Registers used:
 20446 ;;		wreg, status,2, status,0, cstack
 20447 ;; Tracked objects:
 20448 ;;		On entry : 0/0
 20449 ;;		On exit  : 0/0
 20450 ;;		Unchanged: 0/0
 20451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20452 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;Total ram usage:        2 bytes
 20457 ;; Hardware stack levels used:    1
 20458 ;; Hardware stack levels required when called:    1
 20459 ;; This function calls:
 20460 ;;		i2_I2C_Master_Wait
 20461 ;; This function is called by:
 20462 ;;		i2_getRTC
 20463 ;; This function uses a non-reentrant model
 20464 ;;
 20465                           
 20466                           	psect	text86
 20467  0045DA                     __ptext86:
 20468                           	opt stack 0
 20469  0045DA                     i2_I2C_Master_Write:
 20470                           	opt stack 18
 20471                           
 20472                           ;I2C.c: 51: I2C_Master_Wait();
 20473                           
 20474                           ;incstack = 0
 20475  0045DA  ECC3  F022         	call	i2_I2C_Master_Wait	;wreg free
 20476                           
 20477                           ;I2C.c: 52: SSPBUF = d;
 20478  0045DE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20479  0045E2  0012               	return		;funcret
 20480  0045E4                     __end_ofi2_I2C_Master_Write:
 20481                           	opt stack 0
 20482                           pclatu	equ	0xFFB
 20483                           pclath	equ	0xFFA
 20484                           tblptru	equ	0xFF8
 20485                           tblptrh	equ	0xFF7
 20486                           tblptrl	equ	0xFF6
 20487                           tablat	equ	0xFF5
 20488                           prodh	equ	0xFF4
 20489                           prodl	equ	0xFF3
 20490                           intcon	equ	0xFF2
 20491                           intcon2	equ	0xFF1
 20492                           intcon3	equ	0xFF0
 20493                           indf0	equ	0xFEF
 20494                           postinc0	equ	0xFEE
 20495                           fsr0h	equ	0xFEA
 20496                           fsr0l	equ	0xFE9
 20497                           wreg	equ	0xFE8
 20498                           postdec1	equ	0xFE5
 20499                           fsr1h	equ	0xFE2
 20500                           fsr1l	equ	0xFE1
 20501                           indf2	equ	0xFDF
 20502                           postinc2	equ	0xFDE
 20503                           postdec2	equ	0xFDD
 20504                           fsr2h	equ	0xFDA
 20505                           fsr2l	equ	0xFD9
 20506                           status	equ	0xFD8
 20507                           
 20508 ;; *************** function i2_I2C_Master_Stop *****************
 20509 ;; Defined at:
 20510 ;;		line 43 in file "I2C.c"
 20511 ;; Parameters:    Size  Location     Type
 20512 ;;		None
 20513 ;; Auto vars:     Size  Location     Type
 20514 ;;		None
 20515 ;; Return value:  Size  Location     Type
 20516 ;;                  1    wreg      void 
 20517 ;; Registers used:
 20518 ;;		wreg, status,2, status,0, cstack
 20519 ;; Tracked objects:
 20520 ;;		On entry : 0/0
 20521 ;;		On exit  : 0/0
 20522 ;;		Unchanged: 0/0
 20523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20528 ;;Total ram usage:        0 bytes
 20529 ;; Hardware stack levels used:    1
 20530 ;; Hardware stack levels required when called:    1
 20531 ;; This function calls:
 20532 ;;		i2_I2C_Master_Wait
 20533 ;; This function is called by:
 20534 ;;		i2_getRTC
 20535 ;; This function uses a non-reentrant model
 20536 ;;
 20537                           
 20538                           	psect	text87
 20539  0045FC                     __ptext87:
 20540                           	opt stack 0
 20541  0045FC                     i2_I2C_Master_Stop:
 20542                           	opt stack 18
 20543                           
 20544                           ;I2C.c: 45: I2C_Master_Wait();
 20545                           
 20546                           ;incstack = 0
 20547  0045FC  ECC3  F022         	call	i2_I2C_Master_Wait	;wreg free
 20548                           
 20549                           ;I2C.c: 46: PEN = 1;
 20550  004600  84C5               	bsf	4037,2,c	;volatile
 20551  004602  0012               	return		;funcret
 20552  004604                     __end_ofi2_I2C_Master_Stop:
 20553                           	opt stack 0
 20554                           pclatu	equ	0xFFB
 20555                           pclath	equ	0xFFA
 20556                           tblptru	equ	0xFF8
 20557                           tblptrh	equ	0xFF7
 20558                           tblptrl	equ	0xFF6
 20559                           tablat	equ	0xFF5
 20560                           prodh	equ	0xFF4
 20561                           prodl	equ	0xFF3
 20562                           intcon	equ	0xFF2
 20563                           intcon2	equ	0xFF1
 20564                           intcon3	equ	0xFF0
 20565                           indf0	equ	0xFEF
 20566                           postinc0	equ	0xFEE
 20567                           fsr0h	equ	0xFEA
 20568                           fsr0l	equ	0xFE9
 20569                           wreg	equ	0xFE8
 20570                           postdec1	equ	0xFE5
 20571                           fsr1h	equ	0xFE2
 20572                           fsr1l	equ	0xFE1
 20573                           indf2	equ	0xFDF
 20574                           postinc2	equ	0xFDE
 20575                           postdec2	equ	0xFDD
 20576                           fsr2h	equ	0xFDA
 20577                           fsr2l	equ	0xFD9
 20578                           status	equ	0xFD8
 20579                           
 20580 ;; *************** function i2_I2C_Master_Start *****************
 20581 ;; Defined at:
 20582 ;;		line 31 in file "I2C.c"
 20583 ;; Parameters:    Size  Location     Type
 20584 ;;		None
 20585 ;; Auto vars:     Size  Location     Type
 20586 ;;		None
 20587 ;; Return value:  Size  Location     Type
 20588 ;;                  1    wreg      void 
 20589 ;; Registers used:
 20590 ;;		wreg, status,2, status,0, cstack
 20591 ;; Tracked objects:
 20592 ;;		On entry : 0/0
 20593 ;;		On exit  : 0/0
 20594 ;;		Unchanged: 0/0
 20595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20600 ;;Total ram usage:        0 bytes
 20601 ;; Hardware stack levels used:    1
 20602 ;; Hardware stack levels required when called:    1
 20603 ;; This function calls:
 20604 ;;		i2_I2C_Master_Wait
 20605 ;; This function is called by:
 20606 ;;		i2_getRTC
 20607 ;; This function uses a non-reentrant model
 20608 ;;
 20609                           
 20610                           	psect	text88
 20611  004604                     __ptext88:
 20612                           	opt stack 0
 20613  004604                     i2_I2C_Master_Start:
 20614                           	opt stack 18
 20615                           
 20616                           ;I2C.c: 33: I2C_Master_Wait();
 20617                           
 20618                           ;incstack = 0
 20619  004604  ECC3  F022         	call	i2_I2C_Master_Wait	;wreg free
 20620                           
 20621                           ;I2C.c: 34: SEN = 1;
 20622  004608  80C5               	bsf	4037,0,c	;volatile
 20623  00460A  0012               	return		;funcret
 20624  00460C                     __end_ofi2_I2C_Master_Start:
 20625                           	opt stack 0
 20626                           pclatu	equ	0xFFB
 20627                           pclath	equ	0xFFA
 20628                           tblptru	equ	0xFF8
 20629                           tblptrh	equ	0xFF7
 20630                           tblptrl	equ	0xFF6
 20631                           tablat	equ	0xFF5
 20632                           prodh	equ	0xFF4
 20633                           prodl	equ	0xFF3
 20634                           intcon	equ	0xFF2
 20635                           intcon2	equ	0xFF1
 20636                           intcon3	equ	0xFF0
 20637                           indf0	equ	0xFEF
 20638                           postinc0	equ	0xFEE
 20639                           fsr0h	equ	0xFEA
 20640                           fsr0l	equ	0xFE9
 20641                           wreg	equ	0xFE8
 20642                           postdec1	equ	0xFE5
 20643                           fsr1h	equ	0xFE2
 20644                           fsr1l	equ	0xFE1
 20645                           indf2	equ	0xFDF
 20646                           postinc2	equ	0xFDE
 20647                           postdec2	equ	0xFDD
 20648                           fsr2h	equ	0xFDA
 20649                           fsr2l	equ	0xFD9
 20650                           status	equ	0xFD8
 20651                           
 20652 ;; *************** function i2_I2C_Master_Read *****************
 20653 ;; Defined at:
 20654 ;;		line 55 in file "I2C.c"
 20655 ;; Parameters:    Size  Location     Type
 20656 ;;  a               1    wreg     unsigned char 
 20657 ;; Auto vars:     Size  Location     Type
 20658 ;;  a               1    1[COMRAM] unsigned char 
 20659 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20660 ;; Return value:  Size  Location     Type
 20661 ;;                  1    wreg      unsigned char 
 20662 ;; Registers used:
 20663 ;;		wreg, status,2, status,0, cstack
 20664 ;; Tracked objects:
 20665 ;;		On entry : 0/0
 20666 ;;		On exit  : 0/0
 20667 ;;		Unchanged: 0/0
 20668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20672 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20673 ;;Total ram usage:        2 bytes
 20674 ;; Hardware stack levels used:    1
 20675 ;; Hardware stack levels required when called:    1
 20676 ;; This function calls:
 20677 ;;		i2_I2C_Master_Wait
 20678 ;; This function is called by:
 20679 ;;		i2_getRTC
 20680 ;; This function uses a non-reentrant model
 20681 ;;
 20682                           
 20683                           	psect	text89
 20684  00445E                     __ptext89:
 20685                           	opt stack 0
 20686  00445E                     i2_I2C_Master_Read:
 20687                           	opt stack 18
 20688                           
 20689                           ;incstack = 0
 20690                           ;i2I2C_Master_Read@a stored from wreg
 20691  00445E  6E02               	movwf	i2I2C_Master_Read@a,c
 20692                           
 20693                           ;I2C.c: 57: unsigned char temp;
 20694                           ;I2C.c: 58: I2C_Master_Wait();
 20695  004460  ECC3  F022         	call	i2_I2C_Master_Wait	;wreg free
 20696                           
 20697                           ;I2C.c: 59: RCEN = 1;
 20698  004464  86C5               	bsf	4037,3,c	;volatile
 20699                           
 20700                           ;I2C.c: 60: I2C_Master_Wait();
 20701  004466  ECC3  F022         	call	i2_I2C_Master_Wait	;wreg free
 20702                           
 20703                           ;I2C.c: 61: temp = SSPBUF;
 20704  00446A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20705                           
 20706                           ;I2C.c: 62: I2C_Master_Wait();
 20707  00446E  ECC3  F022         	call	i2_I2C_Master_Wait	;wreg free
 20708                           
 20709                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20710  004472  5002               	movf	i2I2C_Master_Read@a,w,c
 20711  004474  A4D8               	btfss	status,2,c
 20712  004476  D002               	goto	i2u358_40
 20713  004478  8AC5               	bsf	4037,5,c	;volatile
 20714  00447A  D001               	goto	i2l5240
 20715  00447C                     i2u358_40:
 20716  00447C  9AC5               	bcf	4037,5,c	;volatile
 20717  00447E                     i2l5240:
 20718                           
 20719                           ;I2C.c: 64: ACKEN = 1;
 20720  00447E  88C5               	bsf	4037,4,c	;volatile
 20721                           
 20722                           ;I2C.c: 65: return temp;
 20723  004480  5003               	movf	i2I2C_Master_Read@temp,w,c
 20724  004482  0012               	return	
 20725  004484                     __end_ofi2_I2C_Master_Read:
 20726                           	opt stack 0
 20727                           pclatu	equ	0xFFB
 20728                           pclath	equ	0xFFA
 20729                           tblptru	equ	0xFF8
 20730                           tblptrh	equ	0xFF7
 20731                           tblptrl	equ	0xFF6
 20732                           tablat	equ	0xFF5
 20733                           prodh	equ	0xFF4
 20734                           prodl	equ	0xFF3
 20735                           intcon	equ	0xFF2
 20736                           intcon2	equ	0xFF1
 20737                           intcon3	equ	0xFF0
 20738                           indf0	equ	0xFEF
 20739                           postinc0	equ	0xFEE
 20740                           fsr0h	equ	0xFEA
 20741                           fsr0l	equ	0xFE9
 20742                           wreg	equ	0xFE8
 20743                           postdec1	equ	0xFE5
 20744                           fsr1h	equ	0xFE2
 20745                           fsr1l	equ	0xFE1
 20746                           indf2	equ	0xFDF
 20747                           postinc2	equ	0xFDE
 20748                           postdec2	equ	0xFDD
 20749                           fsr2h	equ	0xFDA
 20750                           fsr2l	equ	0xFD9
 20751                           status	equ	0xFD8
 20752                           
 20753 ;; *************** function i2_I2C_Master_Wait *****************
 20754 ;; Defined at:
 20755 ;;		line 26 in file "I2C.c"
 20756 ;; Parameters:    Size  Location     Type
 20757 ;;		None
 20758 ;; Auto vars:     Size  Location     Type
 20759 ;;		None
 20760 ;; Return value:  Size  Location     Type
 20761 ;;                  1    wreg      void 
 20762 ;; Registers used:
 20763 ;;		wreg, status,2, status,0
 20764 ;; Tracked objects:
 20765 ;;		On entry : 0/0
 20766 ;;		On exit  : 0/0
 20767 ;;		Unchanged: 0/0
 20768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20773 ;;Total ram usage:        1 bytes
 20774 ;; Hardware stack levels used:    1
 20775 ;; This function calls:
 20776 ;;		Nothing
 20777 ;; This function is called by:
 20778 ;;		i2_I2C_Master_Start
 20779 ;;		i2_I2C_Master_Stop
 20780 ;;		i2_I2C_Master_Write
 20781 ;;		i2_I2C_Master_Read
 20782 ;; This function uses a non-reentrant model
 20783 ;;
 20784                           
 20785                           	psect	text90
 20786  004586                     __ptext90:
 20787                           	opt stack 0
 20788  004586                     i2_I2C_Master_Wait:
 20789                           	opt stack 18
 20790  004586                     i2l66:
 20791  004586  B4C7               	btfsc	4039,2,c	;volatile
 20792  004588  D7FE               	goto	i2l66
 20793  00458A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20794  00458E  0E1F               	movlw	31
 20795  004590  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20796  004592  B4D8               	btfsc	status,2,c
 20797  004594  0012               	return	
 20798  004596  D7F7               	goto	i2l66
 20799  004598                     __end_ofi2_I2C_Master_Wait:
 20800                           	opt stack 0
 20801                           pclatu	equ	0xFFB
 20802                           pclath	equ	0xFFA
 20803                           tblptru	equ	0xFF8
 20804                           tblptrh	equ	0xFF7
 20805                           tblptrl	equ	0xFF6
 20806                           tablat	equ	0xFF5
 20807                           prodh	equ	0xFF4
 20808                           prodl	equ	0xFF3
 20809                           intcon	equ	0xFF2
 20810                           intcon2	equ	0xFF1
 20811                           intcon3	equ	0xFF0
 20812                           indf0	equ	0xFEF
 20813                           postinc0	equ	0xFEE
 20814                           fsr0h	equ	0xFEA
 20815                           fsr0l	equ	0xFE9
 20816                           wreg	equ	0xFE8
 20817                           postdec1	equ	0xFE5
 20818                           fsr1h	equ	0xFE2
 20819                           fsr1l	equ	0xFE1
 20820                           indf2	equ	0xFDF
 20821                           postinc2	equ	0xFDE
 20822                           postdec2	equ	0xFDD
 20823                           fsr2h	equ	0xFDA
 20824                           fsr2l	equ	0xFD9
 20825                           status	equ	0xFD8
 20826                           pclatu	equ	0xFFB
 20827                           pclath	equ	0xFFA
 20828                           tblptru	equ	0xFF8
 20829                           tblptrh	equ	0xFF7
 20830                           tblptrl	equ	0xFF6
 20831                           tablat	equ	0xFF5
 20832                           prodh	equ	0xFF4
 20833                           prodl	equ	0xFF3
 20834                           intcon	equ	0xFF2
 20835                           intcon2	equ	0xFF1
 20836                           intcon3	equ	0xFF0
 20837                           indf0	equ	0xFEF
 20838                           postinc0	equ	0xFEE
 20839                           fsr0h	equ	0xFEA
 20840                           fsr0l	equ	0xFE9
 20841                           wreg	equ	0xFE8
 20842                           postdec1	equ	0xFE5
 20843                           fsr1h	equ	0xFE2
 20844                           fsr1l	equ	0xFE1
 20845                           indf2	equ	0xFDF
 20846                           postinc2	equ	0xFDE
 20847                           postdec2	equ	0xFDD
 20848                           fsr2h	equ	0xFDA
 20849                           fsr2l	equ	0xFD9
 20850                           status	equ	0xFD8
 20851                           
 20852                           	psect	rparam
 20853  0000                     pclatu	equ	0xFFB
 20854                           pclath	equ	0xFFA
 20855                           tblptru	equ	0xFF8
 20856                           tblptrh	equ	0xFF7
 20857                           tblptrl	equ	0xFF6
 20858                           tablat	equ	0xFF5
 20859                           prodh	equ	0xFF4
 20860                           prodl	equ	0xFF3
 20861                           intcon	equ	0xFF2
 20862                           intcon2	equ	0xFF1
 20863                           intcon3	equ	0xFF0
 20864                           indf0	equ	0xFEF
 20865                           postinc0	equ	0xFEE
 20866                           fsr0h	equ	0xFEA
 20867                           fsr0l	equ	0xFE9
 20868                           wreg	equ	0xFE8
 20869                           postdec1	equ	0xFE5
 20870                           fsr1h	equ	0xFE2
 20871                           fsr1l	equ	0xFE1
 20872                           indf2	equ	0xFDF
 20873                           postinc2	equ	0xFDE
 20874                           postdec2	equ	0xFDD
 20875                           fsr2h	equ	0xFDA
 20876                           fsr2l	equ	0xFD9
 20877                           status	equ	0xFD8
 20878                           
 20879                           	psect	temp
 20880  00007E                     btemp:
 20881                           	opt stack 0
 20882  00007E                     	ds	1
 20883  0000                     int$flags	set	btemp
 20884                           pclatu	equ	0xFFB
 20885                           pclath	equ	0xFFA
 20886                           tblptru	equ	0xFF8
 20887                           tblptrh	equ	0xFF7
 20888                           tblptrl	equ	0xFF6
 20889                           tablat	equ	0xFF5
 20890                           prodh	equ	0xFF4
 20891                           prodl	equ	0xFF3
 20892                           intcon	equ	0xFF2
 20893                           intcon2	equ	0xFF1
 20894                           intcon3	equ	0xFF0
 20895                           indf0	equ	0xFEF
 20896                           postinc0	equ	0xFEE
 20897                           fsr0h	equ	0xFEA
 20898                           fsr0l	equ	0xFE9
 20899                           wreg	equ	0xFE8
 20900                           postdec1	equ	0xFE5
 20901                           fsr1h	equ	0xFE2
 20902                           fsr1l	equ	0xFE1
 20903                           indf2	equ	0xFDF
 20904                           postinc2	equ	0xFDE
 20905                           postdec2	equ	0xFDD
 20906                           fsr2h	equ	0xFDA
 20907                           fsr2l	equ	0xFD9
 20908                           status	equ	0xFD8


Data Sizes:
    Strings     1212
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_113(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_112(CODE[17]), STR_111(CODE[17]), STR_110(CODE[10]), STR_109(CODE[13]), 
		 -> STR_108(CODE[18]), STR_107(CODE[18]), STR_106(CODE[17]), STR_105(CODE[15]), 
		 -> STR_104(CODE[15]), STR_103(CODE[15]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[16]), STR_98(CODE[17]), STR_97(CODE[17]), 
		 -> STR_96(CODE[17]), STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), 
		 -> STR_92(CODE[15]), STR_91(CODE[11]), STR_90(CODE[17]), STR_89(CODE[11]), 
		 -> STR_88(CODE[17]), STR_87(CODE[14]), STR_86(CODE[15]), STR_85(CODE[14]), 
		 -> STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  174576
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20078
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15514
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10530
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9783
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21392
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20542
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42664
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12455
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79239
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8199
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8087
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13641
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8112
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8225
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8087
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16801
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7952
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 13:25:07 2017

                                    _i 012B                     i2_I2C_Master_Start 4604  
                   i2_I2C_Master_Write 45DA                                     l66 4572  
                                   _ID 2E6A                            __CFG_CPD$ON 000000  
                                   _UI 0012                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l177 00E8                                    l478 37A0  
                                  l719 2B70                                    l593 1C84  
                                  l913 32CE                                    l926 453E  
                                  l935 2E54                                    l779 3A98  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 421A  
      __end_of_change_state_to_menu_12 40BC        __end_of_change_state_to_menu_22 4084  
      __end_of_change_state_to_menu_23 41EA           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 430A  
      __end_of_change_state_to_logs_12 42DA        __end_of_change_state_to_logs_22 42AA  
      __end_of_change_state_to_logs_23 4366        __end_of_change_state_to_logs_33 427A  
      __end_of_change_state_to_logs_34 424A                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1021 3104  
                                 l1024 3124                                   l1105 0E8E  
                                 l1140 3984                                   l1044 33F2  
                                 l1141 3988                                   l1133 3960  
                                 l1117 1028                                   l1053 27C4  
                                 l1142 398C                                   l1143 3990  
                                 l1071 0926                                   l1047 33F6  
                                 l1160 3D86                                   l1080 0AE6  
                                 l1056 27C8                                   l1145 39CE  
                                 l1137 397C                                   l1081 0B34  
                                 l1154 3D76                                   l1139 3980  
                                 l1075 09CC                                   l1228 137E  
                                 l1068 0922                                   l1174 322E  
                                 l1078 0A32                                   l1191 38D4  
                                 l1183 38A0                                   l1079 0A80  
                                 l1168 31E2                                   l1622 35D2  
                                 l5200 3A44                                   l5210 3C34  
                                 l5130 43A6                                   l1675 3A52  
                                 l5212 3C3A                                   l5132 43B8  
                                 l1685 3C6C                                   l5216 3C5E  
                                 l5208 3C28                                   l5322 115A  
                                 l7002 3994                                   l5154 4330  
                                 l5172 43DE                                   l5412 1434  
                                 l5324 116C                                   l5190 3A0E  
                                 l5430 14AC                                   l5406 1412  
                                 l5350 1258                                   l5342 1226  
                                 l5334 11AA                                   l5318 1146  
                                 l7110 34BA                                   l5502 3556  
                                 l5192 3A14                                   l5432 14B8  
                                 l5440 14E6                                   l5424 1490  
                                 l5416 146C                                   l5360 12D0  
                                 l5352 1264                                   l5328 1176  
                                 l7112 34C6                                   l7104 349C  
                                 l5504 3566                                   l6064 3808  
                                 l5442 14EC                                   l5418 1476  
                                 l5370 1326                                   l5362 12DC  
                                 l5354 126A                                   l7130 351E  
                                 l7122 34FC                                   l7114 34CC  
                                 l5514 35C0                                   l5506 356C  
                                 l6074 384A                                   l6306 2BB2  
                                 l5188 3A02                                   l5436 14D2  
                                 l5372 133E                                   l5364 12E2  
                                 l5460 391A                                   l5452 40C6  
                                 l7212 0100                                   l6068 381E  
                                 l5446 1544                                   l5366 12FA  
                                 l7126 350A                                   l7150 36CE  
                                 l7142 36AA                                   l5470 3950  
                                 l5454 40D2                                   l7230 014C  
                                 l7222 0122                                   l7214 0106  
                                 l5392 13D0                                   l5376 1344  
                                 l5448 1550                                   l7152 36DA  
                                 l5464 3930                                   l7320 034C  
                                 l7312 02D4                                   l6352 2F42  
                                 l6280 2B2E                                   l5490 3AAE  
                                 l5394 13D6                                   l6610 0BB0  
                                 l6530 09A0                                   l7154 36E0  
                                 l7162 3712                                   l7146 36BA  
                                 l5730 1D06                                   l5722 1C8E  
                                 l7410 0672                                   l7402 0650  
                                 l7330 03E2                                   l7322 036A  
                                 l7314 02F2                                   l7250 01B4  
                                 l7226 013A                                   l7218 0118  
                                 l6338 2F06                                   l6290 2B78  
                                 l5388 13B6                                   l6620 0BD8  
                                 l6524 0990                                   l6460 2818  
                                 l5740 1D9C                                   l5732 1D24  
                                 l5724 1CAC                                   l5716 1C02  
                                 l7332 0400                                   l7324 0388  
                                 l7316 0310                                   l7340 045A  
                                 l7244 01A4                                   l7260 01DA  
                                 l6380 2C46                                   l6348 2F36  
                                 l6356 2F4E                                   l6702 0D6E  
                                 l6614 0BBA                                   l6534 09B8  
                                 l6526 0996                                   l7166 3726  
                                 l7158 3704                                   l5742 1DBA  
                                 l5734 1D42                                   l5726 1CCA  
                                 l5750 1E54                                   l7406 065A  
                                 l7350 050A                                   l7334 041E  
                                 l7326 03A6                                   l7318 032E  
                                 l7342 04BE                                   l7254 01CC  
                                 l7246 01AA                                   l6374 2BF8  
                                 _ADIE 007CEE                                   l5488 3A84  
                                 l6640 0C3E                                   l6624 0BE2  
                                 l6472 28B8                                   l5744 1DD8  
                                 l5736 1D60                                   l5728 1CE8  
                                 l7512 0852                                   l7432 06E2  
                                 l7360 0534                                   l7336 043C  
                                 l7328 03C4                                   l6376 2C12  
                                 l6384 2C60                                   l6802 0F7C  
                                 l6722 0DE2                                   l6714 0DC0  
                                 l6706 0D86                                   l6650 0C66  
                                 l6618 0BD2                                   l7098 3486  
                                 l5738 1D7E                                   l7530 089E  
                                 l7522 087C                                   l7450 072E  
                                 l7442 070C                                   l7354 0522  
                                 l7346 0500                                   l7282 024E  
                                 l7274 022C                                   l6378 2C2C  
                                 l6386 2C8E                                   l6820 0FDE  
                                 l6812 0FA4                                   l6804 0F82  
                                 l6740 0E44                                   l6732 0E0A  
                                 l6724 0DE8                                   l6644 0C56  
                                 l6636 0C34                                   l6628 0BFA  
                                 l6484 292C                                   l5748 1DF6  
                                 l7516 086A                                   l7508 0848  
                                 l7436 06FA                                   l7428 06D8  
                                 l7364 053E                                   l7292 026A  
                                 l5932 333A                                   l5940 335C  
                                 l6830 1006                                   l6750 0E6C  
                                 l6718 0DCA                                   l6670 0CDA  
                                 l6662 0CB8                                   l6654 0C7E  
                                 l6646 0C5C                                   l6478 28EA  
                                 l7526 0886                                   l7446 0716  
                                 l7278 0236                                   l7534 08AA  
                                 l6824 0FE8                                   l6808 0F8C  
                                 l6744 0E4E                                   l6728 0DF2  
                                 l6680 0D02                                   l6672 0CE0  
                                 l7472 079E                                   l7392 0626  
                                 l7368 0556                                   l7296 0282  
                                 l7288 0260                                   l5944 3372  
                                 l5936 3344                                   l6834 1010  
                                 l6754 0E76                                   l6666 0CC2  
                                 l7490 07EA                                   l7482 07C8  
                                 l5954 43EE                                   l5890 3608  
                                 l6828 1000                                   l6772 0EE0  
                                 l6748 0E66                                   l6692 0D46  
                                 l6676 0CEA                                   l7476 07B6  
                                 l7468 0794                                   l7396 063E  
                                 l7388 061C                                   l5948 337C  
                                 l7812 2E0E                                   l6862 109A  
                                 l6854 1078                                   l6782 0F08  
                                 l7486 07D2                                   l5958 4404  
                                 l5886 35F2                                   l6960 31F0  
                                 l6944 38C8                                   l6880 10E6  
                                 l6872 10C2                                   l6864 10A0  
                                 l6776 0EF8                                   l6768 0ED6  
                                 l6696 0D5E                                   l6688 0D3C  
                                 l7824 30A6                                   l5984 3F20  
                                 l5896 367E                                   l6970 3216  
                                 l6890 110E                                   l6858 1082  
                                 l6794 0F5A                                   l6786 0F20  
                                 l6778 0EFE                                   l6698 0D64  
                                 l7850 3142                                   l7842 312A  
                                 l7922 3772                                   l6980 3256  
                                 l6964 3206                                   l6948 31AE  
                                 l6884 10F0                                   l6868 10AA  
                                 l7852 3148                                   l7844 3130  
                                 l7924 3778                                   l7940 37A2  
                                 l6990 328A                                   l6966 320C  
                                 l6894 1118                                   l6798 0F64  
                                 l7854 314E                                   l7846 3136  
                                 l7862 3160                                   l7934 3796  
                                 l7926 377E                                   l6888 1108  
                                 l7856 3154                                   l7848 313C  
                                 l7936 379C                                   l6994 3294  
                                 l6898 1130                                   l7858 315A  
                                 l7786 2D7A                                   l7788 2D8E  
                                 STR_1 FBCB                                   STR_2 FF2D  
                                 STR_3 FBB9                                   STR_4 FE50  
                                 STR_5 FBB9                                   STR_6 FE0E  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5010 09CC                                   u5030 0A80  
                                 u5050 0B34                                   u4350 3FBA  
                                 u4351 3FB6                                   u4360 3FBC  
                                 u3480 432E                                   _PEIE 007F96  
                                 u3740 12A4                                   u4390 1C84  
                                 u4710 2B3A                                   u7007 012A  
                                 u4375 3CA6                                   u3680 3F6E  
                                 u7017 0166                                   u3690 3F70  
                                 u4730 2B70                                   u3747 129A  
                                 u7107 062E                                   u7027 01BC  
                                 u3780 131C                                   u4820 2EF6  
                                 _RCEN 007E2B                                   u7117 0662  
                                 u7037 01E8                                   u7207 088E  
                                 u7127 068C                                   u7047 023E  
                                 u4920 285A                                   u4728 2B3E  
                                 u7217 30B4                                   u7137 06EA  
                                 u7057 0272                                   u4930 285C  
                                 u3787 1312                                   u7307 43AE  
                                 u7227 30F8                                   u7147 071E  
                                 u7067 029C                                   u4828 2EFA  
                                 u7317 33A2                                   u7237 2774  
                                 u7157 0748                                   u7077 0512  
                                 u4790 2E9A                                   u7407 0A60  
                                 u7327 33E6                                   u7247 27B8  
                                 u7167 07A6                                   u7087 0546  
                                 u7417 0A90                                   u7337 3408  
                                 u7257 27DA                                   u7177 07DA  
                                 u7097 0570                                   i2l66 4586  
                                 u7507 0CF2                                   u7427 0AF6  
                                 u7347 08D2                                   u7267 2808  
                                 u7187 0804                                   u7517 0D4E  
                                 u7437 0B14                                   u7357 0916  
                                 u7277 28AC                                   u7197 085A  
                                 u4798 2E9E                                   u7607 0F94  
                                 u7527 0D76                                   u7447 0B44  
                                 u7367 0938                                   u7287 28DC  
                                 u6680 2E54                                   u7617 0FF0  
                                 u7537 0DD2                                   u7457 0BC2  
                                 u7377 09A8                                   u7297 2920  
                                 u7707 321E                                   u7627 1018  
                                 u7547 0DFA                                   u7467 0BEA  
                                 u7387 09DC                                   u6907 2EDC  
                                 u7717 323E                                   u7637 103A  
                                 u7557 0E56                                   u7477 0C46  
                                 u7397 0A42                                   u6917 2F72  
                                 u7807 1A38                                   u7727 3264  
                                 u7647 108A                                   u7567 0E7E  
                                 u7487 0C6E                                   u6927 2C9C  
                                 u7817 1A84                                   u7737 329C  
                                 u7657 10B2                                   u7577 0EE8  
                                 u7497 0CCA                                   u6937 2CD0  
                                 u6857 2ABE                                   u7907 3C0C  
                                 u7827 1AB8                                   u7747 3D40  
                                 u7667 10F8                                   u7587 0F10  
                                 u6947 32F0                                   u6867 2BDC  
                                 u7917 3DD0                                   u7837 1B04  
                                 u7757 18EC                                   u7677 1120  
                                 u7597 0F6C                                   u6957 334C  
                                 u6877 3EFC                                   u7847 1B38  
                                 u7767 1938                                   u7687 3860  
                                 u6967 3384                                   u6887 43FA  
                                 u7857 1B84                                   u7777 1984  
                                 u7697 31BC                                   u6977 3FCC  
                                 u6897 2E80                                   u7867 1BB8  
                                 u7787 19B8                                   u6987 4000  
                                 u7877 3BCC                                   u7797 1A04  
                                 u6997 002A                                   u7887 3BD6  
                                 u7897 3C02                                   _RSEN 007E29  
                          _stopSignals 4546                                   _Test 30A6  
                                 _back 005B                                   _main 3730  
                                 _down 0067                                   _keys FB27  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 44CC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 45C4                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2158                            i2_lcdNibble 3DE8  
                      __end_of_Loading 2BEE                   __end_of_actuatorTest 1138  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3394  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 3528  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FB42                                  STR_14 FFD6  
                                STR_22 FFA3                                  STR_30 FE1F  
                                STR_15 FFD2                                  STR_23 FF1F  
                                STR_31 FDFD                                  STR_16 FFE2  
                                STR_24 FD64                                  STR_32 FD42  
                                STR_40 FCFE                                  STR_17 FFF2  
                                STR_33 FD53                                  STR_41 FCED  
                                STR_25 FB82                                  STR_18 FFF6  
                                STR_34 FDEC                                  STR_50 FDCA  
                                STR_42 FDA8                                  STR_26 FD75  
                                STR_43 FDA8                                  STR_35 FDEC  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FB6F                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD86  
                                STR_36 FD31                                  STR_44 FD0F  
                      __end_of___awmod 3730                                  STR_45 FCFE  
                                STR_37 FD42                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FB7F  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FED8                                  STR_38 FDDB  
                                STR_46 FDB9                                  STR_47 FDB9  
                                STR_55 FFFA                                  STR_63 FB42  
                                STR_71 FF11                                  STR_39 FD97  
                                STR_56 FFDE                                  STR_64 FF84  
                                STR_80 FE60                                  STR_48 FD20  
                                STR_72 FC87                                  STR_49 FD0F  
                                STR_57 FFD6                                  STR_81 FB7F  
                                STR_65 FF55                                  STR_73 FEF5  
                                STR_58 FFD2                                  STR_74 FF62  
                                STR_82 FE8D                                  STR_90 FCBA  
                                STR_66 FB5A                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_91 FF79  
                                STR_75 FEBA                                  STR_83 FE30  
                                STR_84 FF99                                  STR_76 FF03  
                                STR_92 FEAB                                  STR_68 FC98  
                                STR_85 FF11                                  STR_77 FFAD  
                                STR_69 FCCB                                  STR_93 FC32  
                                STR_78 FF11                                  STR_86 FEC9  
                                STR_94 FC21                                  STR_79 FF3B  
                                STR_87 FEE7                                  STR_95 FBFF  
                                STR_88 FCA9                                  STR_96 FC54  
                                STR_89 FF6E                                  STR_97 FC65  
                                STR_98 FBDD                                  STR_99 FE40  
                                ?_sort 0001                        __end_of___lldiv 35E4  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3A5C                        __end_of___lwmod 3C76  
                                i2l254 2154                                  i2l593 21E6  
                                i2l850 2A64                                  i2l844 29F8  
                                i2l926 456A                                  i2l848 2A44  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 18DE  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 45B8  
                      __end_of_handler 2AA0                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 43BE                        __end_of_initLCD 400A  
                       __CFG_EBTRB$OFF 000000                                  _debug 00E0  
                           i2isdigit@c 0003                                  _getIR 3EDE  
                      __end_of_loadRTC 3852                        __end_of_readMAG 3FC4  
                      __end_of_dpowers FB42                                  _first 00E4  
                                _enter 0069                        __end_of_isdigit 43E8  
                                _input 007D                                  _putch 4598  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 445E                       __end_ofi2_getRTC 3B44  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 18DE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 415A  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 3E90  
                         __end_of_Test 31AE                     __size_ofi2_lcdInst 000C  
                         __end_of_main 37C6                           __end_of_keys FB38  
                         __end_of_sort 44EE                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC10                                 STR_101 FBEE  
                               STR_102 FC10                                 STR_110 FF8F  
                               STR_103 FE9C                                 STR_111 FC43  
                               STR_104 FE7E                                 STR_112 FC76  
                               STR_113 FFB5                                 STR_105 FE6F  
                               STR_106 FCDC                                 _ADRESH 000FC4  
                               STR_107 FB95                                 STR_108 FBA7  
                               _EEADRH 000FAA                                 STR_109 FF48  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 418A              i2_change_state_to_menu_22 415A  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1228 174A  
                               i2l1675 3E86                                 i2l1685 4042  
                               i2l5302 4038                                 i2l6030 2248  
                               i2l6022 21F0                                 i2l5240 447E  
                               i2l6200 26C0                                 i2l6040 22B6  
                               i2l6032 225E                                 i2l6024 2206  
                               i2l6016 2184                                 i2l6130 25CC  
                               i2l6042 22CC                                 i2l6034 2274  
                               i2l6026 221C                                 i2l6050 2352  
                               i2l6140 25EA                                 i2l6044 22E2  
                               i2l6036 228A                                 i2l6028 2232  
                               i2l6230 272E                                 i2l6222 270A  
                               i2l6214 26E6                                 i2l6150 2608  
                               i2l6142 25F0                                 i2l6126 25B8  
                               i2l6118 259E                                 i2l6038 22A0  
                               i2l5264 4526                                 i2l5600 16C2  
                               i2l6208 26D8                                 i2l6144 25F6  
                               i2l6128 25C8                                 i2l6136 25D6  
                               i2l6048 22F8                                 i2l5530 3B1A  
                               i2l5274 3E54                                 i2l5602 16D4  
                               i2l6226 271C                                 i2l6218 26F8  
                               i2l6146 25FC                                 i2l6154 260E  
                               i2l5276 3E5C                                 i2l5612 1714  
                               i2l6180 2678                                 i2l6148 2602  
                               i2l6236 2738                                 i2l5526 3B0A  
                               i2l5286 3E7C                                 i2l5278 3E60  
                               i2l5294 4018                                 i2l5630 1794  
                               i2l5606 16FE                                 i2l6190 269E  
                               i2l6174 266A                                 i2l6166 2652  
                               i2l5536 3B34                                 i2l5296 4020  
                               i2l5624 1778                                 i2l5608 1710  
                               i2l5560 1598                                 i2l6184 2694  
                               i2l8016 2A62                                 i2l5298 4024  
                               i2l5642 17C6                                 i2l5570 15D0  
                               i2l5554 157A                                 i2l6194 26B2  
                               i2l5660 1822                                 i2l5652 1804  
                               i2l5628 1790                                 i2l5564 159E  
                               i2l6196 26B6                                 i2l5654 180C  
                               i2l5590 1668                                 i2l5558 158A  
                               i2l5672 1854                                 i2l5648 17E0  
                               i2l5682 18BA                                 i2l5666 1838  
                               i2l5586 165A                                 i2l5578 1632  
                               i2l5690 413A                                 i2l7610 1F9C  
                               i2l7602 1F78                                 i2l5668 1840  
                               i2l5676 1866                                 i2l5596 16B2  
                               i2l5588 1664                                 i2l5684 18C2  
                               i2l5678 186C                                 i2l5598 16BC  
                               i2l5870 305A                                 i2l7630 1FEA  
                               i2l7622 1FC6                                 i2l7614 1FAA  
                               i2l7606 1F86                                 i2l7550 1ECE  
                               i2l5688 4132                                 i2l8280 2108  
                               i2l5866 304A                                 i2l8290 2642  
                               i2l8282 212A                                 i2l7650 2038  
                               i2l7642 201C                                 i2l7634 1FF8  
                               i2l7626 1FDC                                 i2l7618 1FB8  
                               i2l7562 1EF8                                 i2l7554 1EDC  
                               i2l8284 2146                                 i2l7548 1EC8  
                               i2l5878 308E                                 i2l7670 2086  
                               i2l7662 206A                                 i2l7654 2046  
                               i2l7646 202A                                 i2l7638 2006  
                               i2l7590 1F4E                                 i2l7582 1F30  
                               i2l7574 1F14                                 i2l7566 1F06  
                               i2l7558 1EEA                                 i2l8288 2626  
                               i2l7690 20DC                                 i2l7682 20B8  
                               i2l7674 209C                                 i2l7666 2078  
                               i2l7658 205C                                 i2l7594 1F5C  
                               i2l7586 1F40                                 i2l7578 1F22  
                               i2l7686 20C6                                 i2l7678 20AA  
                               i2l7598 1F6A                                 i2l7872 239A  
                               i2l7696 20EA                                 i2l7882 2404  
                               i2l7970 29CC                                 i2l7954 29AC  
                               i2l7892 24C6                                 i2l7876 23AA  
                               i2l7956 29B0                                 i2l7992 2A16  
                               i2l7994 2A18                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4410                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 44CC                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2D2E  
                               ___wmul 40F2                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 38DA  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4510                                 _initUI 4484  
                               _readIR 3F2C                                 _logRun 2D2E  
                               clear_0 3EB6                                 clear_1 3EC2  
                               clear_2 3ECE                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 3D32  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1138                              ??_handler 004B  
              __size_of_initGlobalVars 0068                           ?_retrieveLog 0007  
                               _strcpy 40BC                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4438  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 4410  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 3E90                       __end_of_printRTC 1E98  
                         __mediumconst FB26                      __end_ofi2___lwmod 404C  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 346A                      __end_ofi2_lcdInst 45D0  
                    __end_ofi2_isdigit 452E                             __accesstop 0080  
              __end_of__initialization 3ED4                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0880                          i2_EEPROM_read 455C  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 460E                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 45E4  
                        __end_of_getIR 3F2C                            i2printRTC@i 0041  
                        _initSortTimer 35E4            __end_of_updateServoPosition 3AD2  
                        __end_of_putch 45A8                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2F8C  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 4392  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 4366  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 32AC                                UI@F3222 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 02F0  
                    __end_of_PortTests 39E4                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_411 00CA  
                              UI@i_412 00CB                                UI@i_430 00CC  
                              UI@i_431 00CD                                UI@i_408 00C9  
                              UI@i_442 00D2                                UI@i_434 00CE  
                              UI@i_443 00D3                                UI@i_435 00CF  
                              UI@i_446 00D4                                UI@i_438 00D0  
                              UI@i_447 00D5                                UI@i_439 00D1  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2244 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 45B8  
                            ?_initTime 0080                        _f_loadingNewCan 00E2  
                      i2printRTC@month 003D                  __size_of_Distribution 0140  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3C14  
                              _Loading 2AA0            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 346A                                ___awmod 368E  
                           _initServos 3D8E                                ___lldiv 3528  
                      __size_of___wmul 0036                                ___lwdiv 39E4  
                              ___lwmod 3C14                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 004C  
                              __pcinit 3E90                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3B44  
                              _lcdInst 45A8                                _handler 0008  
                              __ptext0 3730                                __ptext1 4546  
                              __ptext2 44CC                                __ptext3 2AA0  
                              __ptext4 35E4                                __ptext5 3B44  
                              __ptext6 3EDE                                __ptext7 3F2C  
                              __ptext8 43E8                                __ptext9 2E6A  
                      __size_of_printf 0438                                _readADC 4392  
                      __size_of_strcpy 0036                                _initLCD 3FC4  
                              _cur_can 0065                                _loadRTC 37C6  
                              _readMAG 3F78                                _dpowers FB38  
                   actuatorTest@i_1601 00B6                     actuatorTest@i_1602 00B7  
                   actuatorTest@i_1611 00BC                     actuatorTest@i_1612 00BD  
                   actuatorTest@i_1604 00B8                     actuatorTest@i_1621 00C2  
                   actuatorTest@i_1605 00B9                     actuatorTest@i_1622 00C3  
                   actuatorTest@i_1614 00BE                     actuatorTest@i_1615 00BF  
                   actuatorTest@i_1608 00BA                     actuatorTest@i_1609 00BB  
                   actuatorTest@i_1618 00C0                     actuatorTest@i_1619 00C1  
                   actuatorTest@i_1590 00AF                     actuatorTest@i_1582 00AD  
                   actuatorTest@i_1592 00B0                     actuatorTest@i_1593 00B1  
                   actuatorTest@i_1595 00B2                     actuatorTest@i_1596 00B3  
                   actuatorTest@i_1589 00AE                     actuatorTest@i_1598 00B4  
                   actuatorTest@i_1599 00B5                                _isdigit 43BE  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2BEE  
                       __pintcode_body 2932                   end_of_initialization 3ED4  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                   SolenoidTestA5@i_1635 00AF  
                 SolenoidTestA5@i_1637 00B0                                int_func 2932  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3BAC                             _sensorTest 2766  
              __size_of_SolenoidTestA5 00FE                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2766                           ??_BothServos 00AB  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3D32  
                           _updateMenu 1E98                      i2_I2C_Master_Read 445E  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4586  
                    i2_I2C_Master_Stop 45FC                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3E3E  
                            i2___lwmod 400A                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 238E                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 45C4                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 4510  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1BCE  
                  __end_of_EEPROM_read 4546                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4128  
                       __end_of_getRTC 3960                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 44A8                         __end_of_readIR 3F78  
                       __end_of_logRun 2E6A                       i2___wmul@product 0005  
                       __end_of_printf 1570                           i2printf@flag 0026  
                       __end_of_strcpy 40F2              __end_ofi2_I2C_Master_Read 4484  
            __end_ofi2_I2C_Master_Wait 4598                           i2printf@prec 001D  
                  start_initialization 3E90              __end_ofi2_I2C_Master_Stop 4604  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1319 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 3960                            ?_sensorTest 0001  
                          __pdataBANK1 012D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2364 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1891 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 452E                     __end_of_PortTestA5 3D8E  
                     _I2C_Master_Start 45F4                              _f_lastCan 0073  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 45D0                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 38DA                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB26                              _lcdNibble 3BAC  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                         _SolenoidTestA5 31AE  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 3394  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0122  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 01CC             __end_ofi2_I2C_Master_Start 460C  
           __end_ofi2_I2C_Master_Write 45E4                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2580  
                          ??i2_isdigit 0001                               i2u411_40 1696  
                             i2u411_47 168C                               i2u415_40 16F6  
                             i2u415_47 16EC                               _PIR2bits 000FA1  
                             i2u358_40 447C                               i2u455_40 21E6  
                             i2u673_40 24C0                               i2u792_47 25BE  
                             i2u793_47 3E00                               i2u794_47 3E0A  
                             i2u795_47 3E2C                               i2u796_47 3E36  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                 __end_of_SolenoidTestA5 32AC  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4438  
                        lcdNibble@data 0081                               i2_getRTC 3AD2  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B6  
                             i2_printf 1570                               i2_strcpy 4128  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 3EA4                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4572                            _count_total 00FE  
                     ??_initGlobalVars 0080                        SolenoidTestA5@i 00AD  
                             __Hrparam 0000                       __size_of_Loading 014E  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                        ?_SolenoidTestA5 0001  
                __end_of_initSortTimer 368E                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 41EA  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4084  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 404C  
              _change_state_to_menu_23 41BA                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 42DA                _change_state_to_logs_12 42AA  
              _change_state_to_logs_22 427A                _change_state_to_logs_23 4338  
              _change_state_to_logs_33 424A                _change_state_to_logs_34 421A  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2A98                             _EEPROMTest 460C  
                      _I2C_Master_Init 3C76                       __size_of_readADC 002C  
                      _I2C_Master_Read 430A                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4572  
                      _I2C_Master_Stop 45EC                       __size_of_isdigit 002A  
                             _delay_ms 43E8                         _printSortTimer 238E  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 30A6                               __ptext10 2BEE  
                             __ptext11 3CD6                               __ptext20 44EE  
                             __ptext12 2D2E                               __ptext21 3FC4  
                             __ptext13 32AC                               __ptext30 4572  
                             __ptext22 0012                               __ptext14 452E  
                             __ptext31 404C                               __ptext23 1BCE  
                             __ptext15 4484                               __ptext40 08B8  
                             __ptext32 4084                               __ptext24 40BC  
                             __ptext16 37C6                               __ptext41 3852  
                             __ptext33 368E                               __ptext25 38DA  
                             __ptext17 3C76                               __ptext50 40F2  
                             __ptext42 31AE                               __ptext34 346A  
                             __ptext26 45D0                               __ptext18 3528  
                             __ptext51 3C14                               __ptext43 3960  
                             __ptext35 30A6                               __ptext27 45EC  
                             __ptext19 4366                               __ptext60 2158  
                             __ptext52 39E4                               __ptext44 3D32  
                             __ptext36 2766                               __ptext28 45F4  
                             __ptext61 4128                               __ptext53 45A8  
                             __ptext45 460C                               __ptext37 3F78  
                             __ptext29 430A                               __ptext70 427A  
                             __ptext62 2580                               __ptext54 3BAC  
                             __ptext46 18DE                               __ptext38 4392  
                             __ptext71 42AA                               __ptext63 415A  
                             __ptext55 3D8E                               __ptext47 1138  
                             __ptext39 3394                               __ptext80 4438  
                             __ptext72 42DA                               __ptext64 418A  
                             __ptext56 3A5C                               __ptext48 4598  
                             __ptext81 400A                               __ptext73 44A8  
                             __ptext65 41BA                               __ptext49 43BE  
                             __ptext90 4586                               __ptext82 3E3E  
                             __ptext74 2F8C                               __ptext66 41EA  
                             __ptext58 1E98                               __ptext83 45C4  
                             __ptext75 455C                               __ptext67 421A  
                             __ptext59 4410                               __ptext84 3DE8  
                             __ptext76 238E                               __ptext68 424A  
                             __ptext85 3AD2                               __ptext77 1570  
                             __ptext69 4338                               __ptext86 45DA  
                             __ptext78 45B8                               __ptext87 45FC  
                             __ptext79 4510                               __ptext88 4604  
                             __ptext89 445E                               _dispLogs 44A8  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1891 0002                     __end_of_initServos 3DE8  
                        __size_of_Test 0108                          ?_EEPROM_write 00AB  
                             _initTime 44EE                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 3A5C  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 1BCE                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 41BA  
    __end_ofi2_change_state_to_menu_22 418A                               loadRTC@i 0096  
               __end_of_printSortTimer 2580                              putch@data 0082  
             __end_of_I2C_Master_Start 45FC                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 45DA                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 3852  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 2932                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 455C              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2158  
              __end_of_I2C_Master_Init 3CD6                __end_of_I2C_Master_Read 4338  
              __end_of_I2C_Master_Wait 4586                __end_of_I2C_Master_Stop 45F4  
                        printRTC@F3213 0131                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 2F8C  
                  __end_ofi2_lcdNibble 3E3E                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3CD6                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
