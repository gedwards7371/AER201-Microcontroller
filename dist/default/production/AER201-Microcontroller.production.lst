

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 21 00:24:47 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           ; Version 1.40
    91                           ; Generated 01/12/2016 GMT
    92                           ; 
    93                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F4620 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	idataBANK0
   126  0028BC                     __pidataBANK0:
   127                           	opt stack 0
   128                           
   129                           ;initializer for printRTC@F3177
   130  0028BC  4D                 	db	77
   131  0028BD  4D                 	db	77
   132  0028BE  4D                 	db	77
   133  0028BF  00                 	db	0
   134                           
   135                           ;initializer for _f_ID_receive
   136  0028C0  0001               	dw	1
   137                           
   138                           ;initializer for _first
   139  0028C2  0001               	dw	1
   140                           
   141                           	psect	mediumconst
   142  00FDB8                     __pmediumconst:
   143                           	opt stack 0
   144  00FDB8  00                 	db	0
   145  00FDB9                     _keys:
   146                           	opt stack 0
   147  00FDB9  31                 	db	49
   148  00FDBA  32                 	db	50
   149  00FDBB  33                 	db	51
   150  00FDBC  41                 	db	65
   151  00FDBD  34                 	db	52
   152  00FDBE  35                 	db	53
   153  00FDBF  36                 	db	54
   154  00FDC0  42                 	db	66
   155  00FDC1  37                 	db	55
   156  00FDC2  38                 	db	56
   157  00FDC3  39                 	db	57
   158  00FDC4  43                 	db	67
   159  00FDC5  2A                 	db	42
   160  00FDC6  30                 	db	48
   161  00FDC7  23                 	db	35
   162  00FDC8  44                 	db	68
   163  00FDC9  00                 	db	0
   164  00FDCA                     __end_of_keys:
   165                           	opt stack 0
   166  00FDCA                     _dpowers:
   167                           	opt stack 0
   168  00FDCA  0001               	dw	1
   169  00FDCC  000A               	dw	10
   170  00FDCE  0064               	dw	100
   171  00FDD0  03E8               	dw	1000
   172  00FDD2  2710               	dw	10000
   173  00FDD4                     __end_of_dpowers:
   174                           	opt stack 0
   175  0000                     _ADCON0	set	4034
   176  0000                     _ADCON0bits	set	4034
   177  0000                     _ADCON1	set	4033
   178  0000                     _CMCONbits	set	4020
   179  0000                     _CVRCON	set	4021
   180  0000                     _INTCONbits	set	4082
   181  0000                     _LATA	set	3977
   182  0000                     _LATAbits	set	3977
   183  0000                     _LATB	set	3978
   184  0000                     _LATC	set	3979
   185  0000                     _LATD	set	3980
   186  0000                     _LATDbits	set	3980
   187  0000                     _LATE	set	3981
   188  0000                     _OSCCON	set	4051
   189  0000                     _OSCTUNEbits	set	3995
   190  0000                     _PORTAbits	set	3968
   191  0000                     _PORTB	set	3969
   192  0000                     _PORTBbits	set	3969
   193  0000                     _SSPADD	set	4040
   194  0000                     _SSPBUF	set	4041
   195  0000                     _SSPCON1	set	4038
   196  0000                     _SSPCON2	set	4037
   197  0000                     _SSPSTAT	set	4039
   198  0000                     _T0CON	set	4053
   199  0000                     _T1CON	set	4045
   200  0000                     _TMR0H	set	4055
   201  0000                     _TMR0L	set	4054
   202  0000                     _TRISA	set	3986
   203  0000                     _TRISB	set	3987
   204  0000                     _TRISC	set	3988
   205  0000                     _TRISD	set	3989
   206  0000                     _TRISE	set	3990
   207  0000                     _ACKDT	set	32301
   208  0000                     _ACKEN	set	32300
   209  0000                     _ADFM	set	32263
   210  0000                     _ADON	set	32272
   211  0000                     _INT1IE	set	32643
   212  0000                     _INT1IF	set	32640
   213  0000                     _PEN	set	32298
   214  0000                     _RCEN	set	32299
   215  0000                     _RSEN	set	32297
   216  0000                     _SEN	set	32296
   217  0000                     _TMR0IE	set	32661
   218  0000                     _TMR0IF	set	32658
   219  0000                     _TMR1IE	set	31976
   220  0000                     _TRISC3	set	31907
   221  0000                     _TRISC4	set	31908
   222  00FDD4                     STR_48:
   223  00FDD4  25                 	db	37
   224  00FDD5  30                 	db	48	;'0'
   225  00FDD6  32                 	db	50	;'2'
   226  00FDD7  64                 	db	100	;'d'
   227  00FDD8  25                 	db	37
   228  00FDD9  73                 	db	115	;'s'
   229  00FDDA  20                 	db	32
   230  00FDDB  7C                 	db	124
   231  00FDDC  20                 	db	32
   232  00FDDD  25                 	db	37
   233  00FDDE  30                 	db	48	;'0'
   234  00FDDF  32                 	db	50	;'2'
   235  00FDE0  64                 	db	100	;'d'
   236  00FDE1  3A                 	db	58	;':'
   237  00FDE2  25                 	db	37
   238  00FDE3  30                 	db	48	;'0'
   239  00FDE4  32                 	db	50	;'2'
   240  00FDE5  64                 	db	100	;'d'
   241  00FDE6  3A                 	db	58	;':'
   242  00FDE7  25                 	db	37
   243  00FDE8  30                 	db	48	;'0'
   244  00FDE9  32                 	db	50	;'2'
   245  00FDEA  64                 	db	100	;'d'
   246  00FDEB  00                 	db	0
   247  00FDEC                     STR_2:
   248  00FDEC  54                 	db	84	;'T'
   249  00FDED  69                 	db	105	;'i'
   250  00FDEE  6D                 	db	109	;'m'
   251  00FDEF  65                 	db	101	;'e'
   252  00FDF0  3A                 	db	58	;':'
   253  00FDF1  20                 	db	32
   254  00FDF2  25                 	db	37
   255  00FDF3  30                 	db	48	;'0'
   256  00FDF4  32                 	db	50	;'2'
   257  00FDF5  64                 	db	100	;'d'
   258  00FDF6  3A                 	db	58	;':'
   259  00FDF7  25                 	db	37
   260  00FDF8  30                 	db	48	;'0'
   261  00FDF9  32                 	db	50	;'2'
   262  00FDFA  64                 	db	100	;'d'
   263  00FDFB  3A                 	db	58	;':'
   264  00FDFC  25                 	db	37
   265  00FDFD  30                 	db	48	;'0'
   266  00FDFE  32                 	db	50	;'2'
   267  00FDFF  64                 	db	100	;'d'
   268  00FE00  00                 	db	0
   269  00FE01                     STR_3:
   270  00FE01  2D                 	db	45
   271  00FE02  2D                 	db	45
   272  00FE03  20                 	db	32
   273  00FE04  4C                 	db	76	;'L'
   274  00FE05  6F                 	db	111	;'o'
   275  00FE06  67                 	db	103	;'g'
   276  00FE07  20                 	db	32
   277  00FE08  25                 	db	37
   278  00FE09  32                 	db	50	;'2'
   279  00FE0A  64                 	db	100	;'d'
   280  00FE0B  20                 	db	32
   281  00FE0C  68                 	db	104	;'h'
   282  00FE0D  65                 	db	101	;'e'
   283  00FE0E  72                 	db	114	;'r'
   284  00FE0F  65                 	db	101	;'e'
   285  00FE10  2D                 	db	45
   286  00FE11  2D                 	db	45
   287  00FE12  00                 	db	0
   288  00FE13                     STR_8:
   289  00FE13  25                 	db	37
   290  00FE14  64                 	db	100	;'d'
   291  00FE15  20                 	db	32
   292  00FE16  6D                 	db	109	;'m'
   293  00FE17  69                 	db	105	;'i'
   294  00FE18  6E                 	db	110	;'n'
   295  00FE19  28                 	db	40
   296  00FE1A  73                 	db	115	;'s'
   297  00FE1B  29                 	db	41
   298  00FE1C  20                 	db	32
   299  00FE1D  25                 	db	37
   300  00FE1E  64                 	db	100	;'d'
   301  00FE1F  20                 	db	32
   302  00FE20  73                 	db	115	;'s'
   303  00FE21  65                 	db	101	;'e'
   304  00FE22  63                 	db	99	;'c'
   305  00FE23  73                 	db	115	;'s'
   306  00FE24  00                 	db	0
   307  00FE25                     STR_26:
   308  00FE25  4C                 	db	76	;'L'
   309  00FE26  4F                 	db	79	;'O'
   310  00FE27  47                 	db	71	;'G'
   311  00FE28  20                 	db	32
   312  00FE29  31                 	db	49	;'1'
   313  00FE2A  20                 	db	32
   314  00FE2B  20                 	db	32
   315  00FE2C  20                 	db	32
   316  00FE2D  20                 	db	32
   317  00FE2E  20                 	db	32
   318  00FE2F  20                 	db	32
   319  00FE30  20                 	db	32
   320  00FE31  20                 	db	32
   321  00FE32  20                 	db	32
   322  00FE33  20                 	db	32
   323  00FE34  20                 	db	32
   324  00FE35  00                 	db	0
   325  00FE36                     STR_25:
   326  00FE36  4C                 	db	76	;'L'
   327  00FE37  4F                 	db	79	;'O'
   328  00FE38  47                 	db	71	;'G'
   329  00FE39  20                 	db	32
   330  00FE3A  32                 	db	50	;'2'
   331  00FE3B  20                 	db	32
   332  00FE3C  20                 	db	32
   333  00FE3D  20                 	db	32
   334  00FE3E  20                 	db	32
   335  00FE3F  20                 	db	32
   336  00FE40  20                 	db	32
   337  00FE41  20                 	db	32
   338  00FE42  20                 	db	32
   339  00FE43  20                 	db	32
   340  00FE44  20                 	db	32
   341  00FE45  20                 	db	32
   342  00FE46  00                 	db	0
   343  00FE47                     STR_29:
   344  00FE47  4C                 	db	76	;'L'
   345  00FE48  4F                 	db	79	;'O'
   346  00FE49  47                 	db	71	;'G'
   347  00FE4A  20                 	db	32
   348  00FE4B  33                 	db	51	;'3'
   349  00FE4C  20                 	db	32
   350  00FE4D  20                 	db	32
   351  00FE4E  20                 	db	32
   352  00FE4F  20                 	db	32
   353  00FE50  20                 	db	32
   354  00FE51  20                 	db	32
   355  00FE52  20                 	db	32
   356  00FE53  20                 	db	32
   357  00FE54  20                 	db	32
   358  00FE55  20                 	db	32
   359  00FE56  20                 	db	32
   360  00FE57  00                 	db	0
   361  00FE58                     STR_33:
   362  00FE58  4C                 	db	76	;'L'
   363  00FE59  4F                 	db	79	;'O'
   364  00FE5A  47                 	db	71	;'G'
   365  00FE5B  20                 	db	32
   366  00FE5C  34                 	db	52	;'4'
   367  00FE5D  20                 	db	32
   368  00FE5E  20                 	db	32
   369  00FE5F  20                 	db	32
   370  00FE60  20                 	db	32
   371  00FE61  20                 	db	32
   372  00FE62  20                 	db	32
   373  00FE63  20                 	db	32
   374  00FE64  20                 	db	32
   375  00FE65  20                 	db	32
   376  00FE66  20                 	db	32
   377  00FE67  20                 	db	32
   378  00FE68  00                 	db	0
   379  00FE69                     STR_21:
   380  00FE69  33                 	db	51	;'3'
   381  00FE6A  2E                 	db	46
   382  00FE6B  20                 	db	32
   383  00FE6C  4C                 	db	76	;'L'
   384  00FE6D  4F                 	db	79	;'O'
   385  00FE6E  47                 	db	71	;'G'
   386  00FE6F  53                 	db	83	;'S'
   387  00FE70  20                 	db	32
   388  00FE71  20                 	db	32
   389  00FE72  20                 	db	32
   390  00FE73  20                 	db	32
   391  00FE74  20                 	db	32
   392  00FE75  20                 	db	32
   393  00FE76  20                 	db	32
   394  00FE77  20                 	db	32
   395  00FE78  20                 	db	32
   396  00FE79  00                 	db	0
   397  00FE7A                     STR_17:
   398  00FE7A  32                 	db	50	;'2'
   399  00FE7B  2E                 	db	46
   400  00FE7C  20                 	db	32
   401  00FE7D  53                 	db	83	;'S'
   402  00FE7E  4F                 	db	79	;'O'
   403  00FE7F  52                 	db	82	;'R'
   404  00FE80  54                 	db	84	;'T'
   405  00FE81  20                 	db	32
   406  00FE82  20                 	db	32
   407  00FE83  20                 	db	32
   408  00FE84  20                 	db	32
   409  00FE85  20                 	db	32
   410  00FE86  20                 	db	32
   411  00FE87  20                 	db	32
   412  00FE88  20                 	db	32
   413  00FE89  20                 	db	32
   414  00FE8A  00                 	db	0
   415  00FE8B                     STR_18:
   416  00FE8B  31                 	db	49	;'1'
   417  00FE8C  2E                 	db	46
   418  00FE8D  20                 	db	32
   419  00FE8E  44                 	db	68	;'D'
   420  00FE8F  41                 	db	65	;'A'
   421  00FE90  54                 	db	84	;'T'
   422  00FE91  45                 	db	69	;'E'
   423  00FE92  2F                 	db	47
   424  00FE93  54                 	db	84	;'T'
   425  00FE94  49                 	db	73	;'I'
   426  00FE95  4D                 	db	77	;'M'
   427  00FE96  45                 	db	69	;'E'
   428  00FE97  20                 	db	32
   429  00FE98  20                 	db	32
   430  00FE99  20                 	db	32
   431  00FE9A  20                 	db	32
   432  00FE9B  00                 	db	0
   433  00FE9C                     STR_9:
   434  00FE9C  20                 	db	32
   435  00FE9D  2D                 	db	45
   436  00FE9E  2D                 	db	45
   437  00FE9F  20                 	db	32
   438  00FEA0  50                 	db	80	;'P'
   439  00FEA1  6F                 	db	111	;'o'
   440  00FEA2  70                 	db	112	;'p'
   441  00FEA3  20                 	db	32
   442  00FEA4  20                 	db	32
   443  00FEA5  63                 	db	99	;'c'
   444  00FEA6  61                 	db	97	;'a'
   445  00FEA7  6E                 	db	110	;'n'
   446  00FEA8  20                 	db	32
   447  00FEA9  2D                 	db	45
   448  00FEAA  2D                 	db	45
   449  00FEAB  20                 	db	32
   450  00FEAC  00                 	db	0
   451  00FEAD                     STR_11:
   452  00FEAD  20                 	db	32
   453  00FEAE  2D                 	db	45
   454  00FEAF  2D                 	db	45
   455  00FEB0  20                 	db	32
   456  00FEB1  53                 	db	83	;'S'
   457  00FEB2  6F                 	db	111	;'o'
   458  00FEB3  75                 	db	117	;'u'
   459  00FEB4  70                 	db	112	;'p'
   460  00FEB5  20                 	db	32
   461  00FEB6  63                 	db	99	;'c'
   462  00FEB7  61                 	db	97	;'a'
   463  00FEB8  6E                 	db	110	;'n'
   464  00FEB9  20                 	db	32
   465  00FEBA  2D                 	db	45
   466  00FEBB  2D                 	db	45
   467  00FEBC  20                 	db	32
   468  00FEBD  00                 	db	0
   469  00FEBE                     STR_13:
   470  00FEBE  2D                 	db	45
   471  00FEBF  2D                 	db	45
   472  00FEC0  20                 	db	32
   473  00FEC1  54                 	db	84	;'T'
   474  00FEC2  6F                 	db	111	;'o'
   475  00FEC3  74                 	db	116	;'t'
   476  00FEC4  61                 	db	97	;'a'
   477  00FEC5  6C                 	db	108	;'l'
   478  00FEC6  20                 	db	32
   479  00FEC7  63                 	db	99	;'c'
   480  00FEC8  61                 	db	97	;'a'
   481  00FEC9  6E                 	db	110	;'n'
   482  00FECA  73                 	db	115	;'s'
   483  00FECB  20                 	db	32
   484  00FECC  2D                 	db	45
   485  00FECD  2D                 	db	45
   486  00FECE  00                 	db	0
   487  00FECF                     STR_10:
   488  00FECF  4E                 	db	78	;'N'
   489  00FED0  6F                 	db	111	;'o'
   490  00FED1  20                 	db	32
   491  00FED2  74                 	db	116	;'t'
   492  00FED3  61                 	db	97	;'a'
   493  00FED4  62                 	db	98	;'b'
   494  00FED5  3A                 	db	58	;':'
   495  00FED6  20                 	db	32
   496  00FED7  39                 	db	57	;'9'
   497  00FED8  7C                 	db	124
   498  00FED9  54                 	db	84	;'T'
   499  00FEDA  61                 	db	97	;'a'
   500  00FEDB  62                 	db	98	;'b'
   501  00FEDC  3A                 	db	58	;':'
   502  00FEDD  20                 	db	32
   503  00FEDE  31                 	db	49	;'1'
   504  00FEDF  00                 	db	0
   505  00FEE0                     STR_12:
   506  00FEE0  4E                 	db	78	;'N'
   507  00FEE1  6F                 	db	111	;'o'
   508  00FEE2  20                 	db	32
   509  00FEE3  6C                 	db	108	;'l'
   510  00FEE4  62                 	db	98	;'b'
   511  00FEE5  6C                 	db	108	;'l'
   512  00FEE6  3A                 	db	58	;':'
   513  00FEE7  20                 	db	32
   514  00FEE8  31                 	db	49	;'1'
   515  00FEE9  7C                 	db	124
   516  00FEEA  6C                 	db	108	;'l'
   517  00FEEB  62                 	db	98	;'b'
   518  00FEEC  6C                 	db	108	;'l'
   519  00FEED  3A                 	db	58	;':'
   520  00FEEE  20                 	db	32
   521  00FEEF  31                 	db	49	;'1'
   522  00FEF0  00                 	db	0
   523  00FEF1                     STR_6:
   524  00FEF1  30                 	db	48	;'0'
   525  00FEF2  36                 	db	54	;'6'
   526  00FEF3  46                 	db	70	;'F'
   527  00FEF4  65                 	db	101	;'e'
   528  00FEF5  62                 	db	98	;'b'
   529  00FEF6  20                 	db	32
   530  00FEF7  7C                 	db	124
   531  00FEF8  20                 	db	32
   532  00FEF9  30                 	db	48	;'0'
   533  00FEFA  31                 	db	49	;'1'
   534  00FEFB  3A                 	db	58	;':'
   535  00FEFC  30                 	db	48	;'0'
   536  00FEFD  38                 	db	56	;'8'
   537  00FEFE  3A                 	db	58	;':'
   538  00FEFF  35                 	db	53	;'5'
   539  00FF00  36                 	db	54	;'6'
   540  00FF01  00                 	db	0
   541  00FF02                     STR_24:
   542  00FF02  4C                 	db	76	;'L'
   543  00FF03  4F                 	db	79	;'O'
   544  00FF04  47                 	db	71	;'G'
   545  00FF05  20                 	db	32
   546  00FF06  31                 	db	49	;'1'
   547  00FF07  20                 	db	32
   548  00FF08  20                 	db	32
   549  00FF09  20                 	db	32
   550  00FF0A  20                 	db	32
   551  00FF0B  20                 	db	32
   552  00FF0C  20                 	db	32
   553  00FF0D  20                 	db	32
   554  00FF0E  20                 	db	32
   555  00FF0F  20                 	db	32
   556  00FF10  20                 	db	32
   557  00FF11  3C                 	db	60	;'<'
   558  00FF12  00                 	db	0
   559  00FF13                     STR_27:
   560  00FF13  4C                 	db	76	;'L'
   561  00FF14  4F                 	db	79	;'O'
   562  00FF15  47                 	db	71	;'G'
   563  00FF16  20                 	db	32
   564  00FF17  32                 	db	50	;'2'
   565  00FF18  20                 	db	32
   566  00FF19  20                 	db	32
   567  00FF1A  20                 	db	32
   568  00FF1B  20                 	db	32
   569  00FF1C  20                 	db	32
   570  00FF1D  20                 	db	32
   571  00FF1E  20                 	db	32
   572  00FF1F  20                 	db	32
   573  00FF20  20                 	db	32
   574  00FF21  20                 	db	32
   575  00FF22  3C                 	db	60	;'<'
   576  00FF23  00                 	db	0
   577  00FF24                     STR_31:
   578  00FF24  4C                 	db	76	;'L'
   579  00FF25  4F                 	db	79	;'O'
   580  00FF26  47                 	db	71	;'G'
   581  00FF27  20                 	db	32
   582  00FF28  33                 	db	51	;'3'
   583  00FF29  20                 	db	32
   584  00FF2A  20                 	db	32
   585  00FF2B  20                 	db	32
   586  00FF2C  20                 	db	32
   587  00FF2D  20                 	db	32
   588  00FF2E  20                 	db	32
   589  00FF2F  20                 	db	32
   590  00FF30  20                 	db	32
   591  00FF31  20                 	db	32
   592  00FF32  20                 	db	32
   593  00FF33  3C                 	db	60	;'<'
   594  00FF34  00                 	db	0
   595  00FF35                     STR_35:
   596  00FF35  4C                 	db	76	;'L'
   597  00FF36  4F                 	db	79	;'O'
   598  00FF37  47                 	db	71	;'G'
   599  00FF38  20                 	db	32
   600  00FF39  34                 	db	52	;'4'
   601  00FF3A  20                 	db	32
   602  00FF3B  20                 	db	32
   603  00FF3C  20                 	db	32
   604  00FF3D  20                 	db	32
   605  00FF3E  20                 	db	32
   606  00FF3F  20                 	db	32
   607  00FF40  20                 	db	32
   608  00FF41  20                 	db	32
   609  00FF42  20                 	db	32
   610  00FF43  20                 	db	32
   611  00FF44  3C                 	db	60	;'<'
   612  00FF45  00                 	db	0
   613  00FF46                     STR_23:
   614  00FF46  33                 	db	51	;'3'
   615  00FF47  2E                 	db	46
   616  00FF48  20                 	db	32
   617  00FF49  4C                 	db	76	;'L'
   618  00FF4A  4F                 	db	79	;'O'
   619  00FF4B  47                 	db	71	;'G'
   620  00FF4C  53                 	db	83	;'S'
   621  00FF4D  20                 	db	32
   622  00FF4E  20                 	db	32
   623  00FF4F  20                 	db	32
   624  00FF50  20                 	db	32
   625  00FF51  20                 	db	32
   626  00FF52  20                 	db	32
   627  00FF53  20                 	db	32
   628  00FF54  20                 	db	32
   629  00FF55  3C                 	db	60	;'<'
   630  00FF56  00                 	db	0
   631  00FF57                     STR_19:
   632  00FF57  32                 	db	50	;'2'
   633  00FF58  2E                 	db	46
   634  00FF59  20                 	db	32
   635  00FF5A  53                 	db	83	;'S'
   636  00FF5B  4F                 	db	79	;'O'
   637  00FF5C  52                 	db	82	;'R'
   638  00FF5D  54                 	db	84	;'T'
   639  00FF5E  20                 	db	32
   640  00FF5F  20                 	db	32
   641  00FF60  20                 	db	32
   642  00FF61  20                 	db	32
   643  00FF62  20                 	db	32
   644  00FF63  20                 	db	32
   645  00FF64  20                 	db	32
   646  00FF65  20                 	db	32
   647  00FF66  3C                 	db	60	;'<'
   648  00FF67  00                 	db	0
   649  00FF68                     STR_16:
   650  00FF68  31                 	db	49	;'1'
   651  00FF69  2E                 	db	46
   652  00FF6A  20                 	db	32
   653  00FF6B  44                 	db	68	;'D'
   654  00FF6C  41                 	db	65	;'A'
   655  00FF6D  54                 	db	84	;'T'
   656  00FF6E  45                 	db	69	;'E'
   657  00FF6F  2F                 	db	47
   658  00FF70  54                 	db	84	;'T'
   659  00FF71  49                 	db	73	;'I'
   660  00FF72  4D                 	db	77	;'M'
   661  00FF73  45                 	db	69	;'E'
   662  00FF74  20                 	db	32
   663  00FF75  20                 	db	32
   664  00FF76  20                 	db	32
   665  00FF77  3C                 	db	60	;'<'
   666  00FF78  00                 	db	0
   667  00FF79                     STR_4:
   668  00FF79  50                 	db	80	;'P'
   669  00FF7A  61                 	db	97	;'a'
   670  00FF7B  75                 	db	117	;'u'
   671  00FF7C  73                 	db	115	;'s'
   672  00FF7D  65                 	db	101	;'e'
   673  00FF7E  3A                 	db	58	;':'
   674  00FF7F  3C                 	db	60	;'<'
   675  00FF80  20                 	db	32
   676  00FF81  7C                 	db	124
   677  00FF82  20                 	db	32
   678  00FF83  42                 	db	66	;'B'
   679  00FF84  61                 	db	97	;'a'
   680  00FF85  63                 	db	99	;'c'
   681  00FF86  6B                 	db	107	;'k'
   682  00FF87  3A                 	db	58	;':'
   683  00FF88  3E                 	db	62	;'>'
   684  00FF89  00                 	db	0
   685  00FF8A                     STR_15:
   686  00FF8A  50                 	db	80	;'P'
   687  00FF8B  55                 	db	85	;'U'
   688  00FF8C  53                 	db	83	;'S'
   689  00FF8D  48                 	db	72	;'H'
   690  00FF8E  20                 	db	32
   691  00FF8F  54                 	db	84	;'T'
   692  00FF90  4F                 	db	79	;'O'
   693  00FF91  20                 	db	32
   694  00FF92  43                 	db	67	;'C'
   695  00FF93  4F                 	db	79	;'O'
   696  00FF94  4E                 	db	78	;'N'
   697  00FF95  54                 	db	84	;'T'
   698  00FF96  49                 	db	73	;'I'
   699  00FF97  4E                 	db	78	;'N'
   700  00FF98  55                 	db	85	;'U'
   701  00FF99  45                 	db	69	;'E'
   702  00FF9A  00                 	db	0
   703  00FF9B                     STR_1:
   704  00FF9B  53                 	db	83	;'S'
   705  00FF9C  6F                 	db	111	;'o'
   706  00FF9D  72                 	db	114	;'r'
   707  00FF9E  74                 	db	116	;'t'
   708  00FF9F  20                 	db	32
   709  00FFA0  63                 	db	99	;'c'
   710  00FFA1  6F                 	db	111	;'o'
   711  00FFA2  6D                 	db	109	;'m'
   712  00FFA3  70                 	db	112	;'p'
   713  00FFA4  6C                 	db	108	;'l'
   714  00FFA5  65                 	db	101	;'e'
   715  00FFA6  74                 	db	116	;'t'
   716  00FFA7  65                 	db	101	;'e'
   717  00FFA8  00                 	db	0
   718  00FFA9                     STR_49:
   719  00FFA9  53                 	db	83	;'S'
   720  00FFAA  6F                 	db	111	;'o'
   721  00FFAB  72                 	db	114	;'r'
   722  00FFAC  74                 	db	116	;'t'
   723  00FFAD  69                 	db	105	;'i'
   724  00FFAE  6E                 	db	110	;'n'
   725  00FFAF  67                 	db	103	;'g'
   726  00FFB0  2E                 	db	46
   727  00FFB1  2E                 	db	46
   728  00FFB2  2E                 	db	46
   729  00FFB3  00                 	db	0
   730  00FFB4                     STR_7:
   731  00FFB4  44                 	db	68	;'D'
   732  00FFB5  75                 	db	117	;'u'
   733  00FFB6  72                 	db	114	;'r'
   734  00FFB7  61                 	db	97	;'a'
   735  00FFB8  74                 	db	116	;'t'
   736  00FFB9  69                 	db	105	;'i'
   737  00FFBA  6F                 	db	111	;'o'
   738  00FFBB  6E                 	db	110	;'n'
   739  00FFBC  3A                 	db	58	;':'
   740  00FFBD  00                 	db	0
   741  00FFBE                     STR_51:
   742  00FFBE  28                 	db	40
   743  00FFBF  6E                 	db	110	;'n'
   744  00FFC0  75                 	db	117	;'u'
   745  00FFC1  6C                 	db	108	;'l'
   746  00FFC2  6C                 	db	108	;'l'
   747  00FFC3  29                 	db	41
   748  00FFC4  00                 	db	0
   749  00FFC5                     STR_5:
   750  00FFC5  53                 	db	83	;'S'
   751  00FFC6  74                 	db	116	;'t'
   752  00FFC7  61                 	db	97	;'a'
   753  00FFC8  72                 	db	114	;'r'
   754  00FFC9  74                 	db	116	;'t'
   755  00FFCA  3A                 	db	58	;':'
   756  00FFCB  00                 	db	0
   757  00FFCC                     STR_37:
   758  00FFCC  46                 	db	70	;'F'
   759  00FFCD  65                 	db	101	;'e'
   760  00FFCE  62                 	db	98	;'b'
   761  00FFCF  00                 	db	0
   762  00FFD0                     STR_47:
   763  00FFD0  44                 	db	68	;'D'
   764  00FFD1  65                 	db	101	;'e'
   765  00FFD2  63                 	db	99	;'c'
   766  00FFD3  00                 	db	0
   767  00FFD4                     STR_43:
   768  00FFD4  41                 	db	65	;'A'
   769  00FFD5  75                 	db	117	;'u'
   770  00FFD6  67                 	db	103	;'g'
   771  00FFD7  00                 	db	0
   772  00FFD8                     STR_42:
   773  00FFD8  4A                 	db	74	;'J'
   774  00FFD9  75                 	db	117	;'u'
   775  00FFDA  6C                 	db	108	;'l'
   776  00FFDB  00                 	db	0
   777  00FFDC                     STR_36:
   778  00FFDC  4A                 	db	74	;'J'
   779  00FFDD  61                 	db	97	;'a'
   780  00FFDE  6E                 	db	110	;'n'
   781  00FFDF  00                 	db	0
   782  00FFE0                     STR_41:
   783  00FFE0  4A                 	db	74	;'J'
   784  00FFE1  75                 	db	117	;'u'
   785  00FFE2  6E                 	db	110	;'n'
   786  00FFE3  00                 	db	0
   787  00FFE4                     STR_44:
   788  00FFE4  53                 	db	83	;'S'
   789  00FFE5  65                 	db	101	;'e'
   790  00FFE6  70                 	db	112	;'p'
   791  00FFE7  00                 	db	0
   792  00FFE8                     STR_38:
   793  00FFE8  4D                 	db	77	;'M'
   794  00FFE9  61                 	db	97	;'a'
   795  00FFEA  72                 	db	114	;'r'
   796  00FFEB  00                 	db	0
   797  00FFEC                     STR_39:
   798  00FFEC  41                 	db	65	;'A'
   799  00FFED  70                 	db	112	;'p'
   800  00FFEE  72                 	db	114	;'r'
   801  00FFEF  00                 	db	0
   802  00FFF0                     STR_45:
   803  00FFF0  4F                 	db	79	;'O'
   804  00FFF1  63                 	db	99	;'c'
   805  00FFF2  74                 	db	116	;'t'
   806  00FFF3  00                 	db	0
   807  00FFF4                     STR_46:
   808  00FFF4  4E                 	db	78	;'N'
   809  00FFF5  6F                 	db	111	;'o'
   810  00FFF6  76                 	db	118	;'v'
   811  00FFF7  00                 	db	0
   812  00FFF8                     STR_40:
   813  00FFF8  4D                 	db	77	;'M'
   814  00FFF9  61                 	db	97	;'a'
   815  00FFFA  79                 	db	121	;'y'
   816  00FFFB  00                 	db	0
   817  00FFFC                     STR_14:
   818  00FFFC  31                 	db	49	;'1'
   819  00FFFD  32                 	db	50	;'2'
   820  00FFFE  00                 	db	0
   821  0000                     
   822                           ; #config settings
   823  00FFFF  00                 	db	0	; dummy byte at the end
   824  0000                     
   825                           	psect	cinit
   826  0022A2                     __pcinit:
   827                           	opt stack 0
   828  0022A2                     start_initialization:
   829                           	opt stack 0
   830  0022A2                     __initialization:
   831                           	opt stack 0
   832                           
   833                           ; Initialize objects allocated to BANK0 (8 bytes)
   834                           ; load TBLPTR registers with __pidataBANK0
   835  0022A2  0EBC               	movlw	low __pidataBANK0
   836  0022A4  6EF6               	movwf	tblptrl,c
   837  0022A6  0E28               	movlw	high __pidataBANK0
   838  0022A8  6EF7               	movwf	tblptrh,c
   839  0022AA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   840  0022AC  6EF8               	movwf	tblptru,c
   841  0022AE  EE00  F0F5         	lfsr	0,__pdataBANK0
   842  0022B2  EE10 F008          	lfsr	1,8
   843  0022B6                     copy_data0:
   844  0022B6  0009               	tblrd		*+
   845  0022B8  CFF5 FFEE          	movff	tablat,postinc0
   846  0022BC  50E5               	movf	postdec1,w,c
   847  0022BE  50E1               	movf	fsr1l,w,c
   848  0022C0  E1FA               	bnz	copy_data0
   849                           
   850                           ; Clear objects allocated to BANK1 (14 bytes)
   851  0022C2  EE01  F000         	lfsr	0,__pbssBANK1
   852  0022C6  0E0E               	movlw	14
   853  0022C8                     clear_0:
   854  0022C8  6AEE               	clrf	postinc0,c
   855  0022CA  06E8               	decf	wreg,f,c
   856  0022CC  E1FD               	bnz	clear_0
   857                           
   858                           ; Clear objects allocated to BANK0 (33 bytes)
   859  0022CE  EE00  F0D4         	lfsr	0,__pbssBANK0
   860  0022D2  0E21               	movlw	33
   861  0022D4                     clear_1:
   862  0022D4  6AEE               	clrf	postinc0,c
   863  0022D6  06E8               	decf	wreg,f,c
   864  0022D8  E1FD               	bnz	clear_1
   865                           
   866                           ; Clear objects allocated to COMRAM (30 bytes)
   867  0022DA  EE00  F05B         	lfsr	0,__pbssCOMRAM
   868  0022DE  0E1E               	movlw	30
   869  0022E0                     clear_2:
   870  0022E0  6AEE               	clrf	postinc0,c
   871  0022E2  06E8               	decf	wreg,f,c
   872  0022E4  E1FD               	bnz	clear_2
   873  0022E6                     end_of_initialization:
   874                           	opt stack 0
   875  0022E6                     __end_of__initialization:
   876                           	opt stack 0
   877  0022E6  9079               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   878  0022E8  9279               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   879  0022EA  0100               	movlb	0
   880  0022EC  EF7C  F00F         	goto	_main	;jump to C main() function
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1l	equ	0xFE1
   889                           
   890                           	psect	bssCOMRAM
   891  00005B                     __pbssCOMRAM:
   892                           	opt stack 0
   893  00005B                     _PWMTimerCounter:
   894                           	opt stack 0
   895  00005B                     	ds	2
   896  00005D                     _UIenabled:
   897                           	opt stack 0
   898  00005D                     	ds	2
   899  00005F                     _back:
   900                           	opt stack 0
   901  00005F                     	ds	2
   902  000061                     _count_can_no_lab:
   903                           	opt stack 0
   904  000061                     	ds	2
   905  000063                     _count_can_w_lab:
   906                           	opt stack 0
   907  000063                     	ds	2
   908  000065                     _count_pop_no_tab:
   909                           	opt stack 0
   910  000065                     	ds	2
   911  000067                     _count_pop_w_tab:
   912                           	opt stack 0
   913  000067                     	ds	2
   914  000069                     _down:
   915                           	opt stack 0
   916  000069                     	ds	2
   917  00006B                     _enter:
   918                           	opt stack 0
   919  00006B                     	ds	2
   920  00006D                     _firstboot:
   921                           	opt stack 0
   922  00006D                     	ds	2
   923  00006F                     _servoSelectFlag:
   924                           	opt stack 0
   925  00006F                     	ds	2
   926  000071                     _sortTimerCounter:
   927                           	opt stack 0
   928  000071                     	ds	2
   929  000073                     _up:
   930                           	opt stack 0
   931  000073                     	ds	2
   932  000075                     _was_low:
   933                           	opt stack 0
   934  000075                     	ds	2
   935  000077                     _block:
   936                           	opt stack 0
   937  000077                     	ds	1
   938  000078                     _input:
   939                           	opt stack 0
   940  000078                     	ds	1
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           postinc0	equ	0xFEE
   946                           wreg	equ	0xFE8
   947                           postdec1	equ	0xFE5
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK0
   951  0000D4                     __pbssBANK0:
   952                           	opt stack 0
   953  0000D4                     _time:
   954                           	opt stack 0
   955  0000D4                     	ds	7
   956  0000DB                     _IR_in:
   957                           	opt stack 0
   958  0000DB                     	ds	2
   959  0000DD                     _beamTimerCounter:
   960                           	opt stack 0
   961  0000DD                     	ds	2
   962  0000DF                     _count_total:
   963                           	opt stack 0
   964  0000DF                     	ds	2
   965  0000E1                     _cur_state:
   966                           	opt stack 0
   967  0000E1                     	ds	2
   968  0000E3                     _f_can_coming_to_ID:
   969                           	opt stack 0
   970  0000E3                     	ds	2
   971  0000E5                     _f_can_coming_to_distribution:
   972                           	opt stack 0
   973  0000E5                     	ds	2
   974  0000E7                     _f_can_distributed:
   975                           	opt stack 0
   976  0000E7                     	ds	2
   977  0000E9                     _f_lastCan:
   978                           	opt stack 0
   979  0000E9                     	ds	2
   980  0000EB                     _f_loadingNewCan:
   981                           	opt stack 0
   982  0000EB                     	ds	2
   983  0000ED                     _log:
   984                           	opt stack 0
   985  0000ED                     	ds	2
   986  0000EF                     _logstate:
   987                           	opt stack 0
   988  0000EF                     	ds	2
   989  0000F1                     _total_time:
   990                           	opt stack 0
   991  0000F1                     	ds	2
   992  0000F3                     _canType:
   993                           	opt stack 0
   994  0000F3                     	ds	1
   995  0000F4                     _machine_state:
   996                           	opt stack 0
   997  0000F4                     	ds	1
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           postdec1	equ	0xFE5
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	dataBANK0
  1008  0000F5                     __pdataBANK0:
  1009                           	opt stack 0
  1010  0000F5                     printRTC@F3177:
  1011                           	opt stack 0
  1012  0000F5                     	ds	4
  1013  0000F9                     _f_ID_receive:
  1014                           	opt stack 0
  1015  0000F9                     	ds	2
  1016  0000FB                     _first:
  1017                           	opt stack 0
  1018  0000FB                     	ds	2
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postdec1	equ	0xFE5
  1026                           fsr1l	equ	0xFE1
  1027                           
  1028                           	psect	bssBANK1
  1029  000100                     __pbssBANK1:
  1030                           	opt stack 0
  1031  000100                     _startTime:
  1032                           	opt stack 0
  1033  000100                     	ds	14
  1034                           tblptru	equ	0xFF8
  1035                           tblptrh	equ	0xFF7
  1036                           tblptrl	equ	0xFF6
  1037                           tablat	equ	0xFF5
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           postdec1	equ	0xFE5
  1041                           fsr1l	equ	0xFE1
  1042                           
  1043                           	psect	cstackBANK0
  1044  000080                     __pcstackBANK0:
  1045                           	opt stack 0
  1046  000080                     ??_isdigit:
  1047  000080                     ??_I2C_Master_Wait:
  1048  000080                     ?_MAGNETISM_in:
  1049  000080                     ?___wmul:
  1050                           	opt stack 0
  1051  000080                     ?___awmod:
  1052                           	opt stack 0
  1053  000080                     ?___lwdiv:
  1054                           	opt stack 0
  1055  000080                     ?___lldiv:
  1056                           	opt stack 0
  1057  000080                     lcdNibble@temp:
  1058                           	opt stack 0
  1059  000080                     initTime@m:
  1060                           	opt stack 0
  1061  000080                     moveServoCup@myPosition:
  1062                           	opt stack 0
  1063  000080                     moveServoBlock@pwmTimer:
  1064                           	opt stack 0
  1065  000080                     ___wmul@multiplier:
  1066                           	opt stack 0
  1067  000080                     ___awmod@dividend:
  1068                           	opt stack 0
  1069  000080                     ___lwdiv@dividend:
  1070                           	opt stack 0
  1071  000080                     strcpy@to:
  1072                           	opt stack 0
  1073  000080                     ___lldiv@dividend:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x0
  1077  000080                     	ds	1
  1078  000081                     I2C_Master_Read@a:
  1079                           	opt stack 0
  1080  000081                     lcdNibble@data:
  1081                           	opt stack 0
  1082  000081                     initTime@h:
  1083                           	opt stack 0
  1084  000081                     _isdigit$1565:
  1085                           	opt stack 0
  1086  000081                     I2C_Master_Write@d:
  1087                           	opt stack 0
  1088  000081                     moveServoCup@pwmTimer:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x1
  1092  000081                     	ds	1
  1093  000082                     I2C_Master_Read@temp:
  1094                           	opt stack 0
  1095  000082                     lcdInst@data:
  1096                           	opt stack 0
  1097  000082                     putch@data:
  1098                           	opt stack 0
  1099  000082                     initTime@w:
  1100                           	opt stack 0
  1101  000082                     moveServoBlock@myPosition:
  1102                           	opt stack 0
  1103  000082                     isdigit@c:
  1104                           	opt stack 0
  1105  000082                     ___wmul@multiplicand:
  1106                           	opt stack 0
  1107  000082                     ___awmod@divisor:
  1108                           	opt stack 0
  1109  000082                     ___lwdiv@divisor:
  1110                           	opt stack 0
  1111  000082                     strcpy@from:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x2
  1115  000082                     	ds	1
  1116  000083                     ??_ID:
  1117  000083                     ??_initLCD:
  1118  000083                     initTime@DD:
  1119                           	opt stack 0
  1120  000083                     getRTC@i:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x3
  1124  000083                     	ds	1
  1125  000084                     initTime@MM:
  1126                           	opt stack 0
  1127  000084                     ___awmod@counter:
  1128                           	opt stack 0
  1129  000084                     ID@top_bottom_conductivity:
  1130                           	opt stack 0
  1131  000084                     ___wmul@product:
  1132                           	opt stack 0
  1133  000084                     ___lwdiv@quotient:
  1134                           	opt stack 0
  1135  000084                     strcpy@cp:
  1136                           	opt stack 0
  1137  000084                     ___lldiv@divisor:
  1138                           	opt stack 0
  1139                           
  1140                           ; 4 bytes @ 0x4
  1141  000084                     	ds	1
  1142  000085                     ??_initSortTimer:
  1143  000085                     ??_getIR:
  1144  000085                     initTime@YY:
  1145                           	opt stack 0
  1146  000085                     ___awmod@sign:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x5
  1150  000085                     	ds	1
  1151  000086                     ?___awdiv:
  1152                           	opt stack 0
  1153  000086                     initTime@s:
  1154                           	opt stack 0
  1155  000086                     ___lwdiv@counter:
  1156                           	opt stack 0
  1157  000086                     ID@side_conductivity:
  1158                           	opt stack 0
  1159  000086                     ___awdiv@dividend:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x6
  1163  000086                     	ds	1
  1164  000087                     ?___lwmod:
  1165                           	opt stack 0
  1166  000087                     ___lwmod@dividend:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x7
  1170  000087                     	ds	1
  1171  000088                     ID@magnetic:
  1172                           	opt stack 0
  1173  000088                     initSortTimer@i:
  1174                           	opt stack 0
  1175  000088                     ___awdiv@divisor:
  1176                           	opt stack 0
  1177  000088                     ___lldiv@quotient:
  1178                           	opt stack 0
  1179  000088                     getIR@timeBroken:
  1180                           	opt stack 0
  1181                           
  1182                           ; 14 bytes @ 0x8
  1183  000088                     	ds	1
  1184  000089                     ___lwmod@divisor:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x9
  1188  000089                     	ds	1
  1189  00008A                     ___awdiv@counter:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0xA
  1193  00008A                     	ds	1
  1194  00008B                     ___awdiv@sign:
  1195                           	opt stack 0
  1196  00008B                     ___lwmod@counter:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0xB
  1200  00008B                     	ds	1
  1201  00008C                     ___lldiv@counter:
  1202                           	opt stack 0
  1203  00008C                     ___awdiv@quotient:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0xC
  1207  00008C                     	ds	1
  1208  00008D                     I2C_Master_Init@c:
  1209                           	opt stack 0
  1210                           
  1211                           ; 4 bytes @ 0xD
  1212  00008D                     	ds	1
  1213  00008E                     ?_printf:
  1214                           	opt stack 0
  1215  00008E                     printf@f:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0xE
  1219  00008E                     	ds	3
  1220  000091                     ??_I2C_Master_Init:
  1221                           
  1222                           ; 1 bytes @ 0x11
  1223  000091                     	ds	4
  1224  000095                     ??_loadRTC:
  1225                           
  1226                           ; 1 bytes @ 0x15
  1227  000095                     	ds	1
  1228  000096                     loadRTC@i:
  1229                           	opt stack 0
  1230  000096                     getIR@i:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x16
  1234  000096                     	ds	2
  1235  000098                     ??_Loading:
  1236                           
  1237                           ; 1 bytes @ 0x18
  1238  000098                     	ds	1
  1239  000099                     
  1240                           ; 1 bytes @ 0x19
  1241  000099                     	ds	1
  1242  00009A                     ??_printf:
  1243                           
  1244                           ; 1 bytes @ 0x1A
  1245  00009A                     	ds	4
  1246  00009E                     printf@prec:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x1E
  1250  00009E                     	ds	1
  1251  00009F                     printf@ap:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x1F
  1255  00009F                     	ds	2
  1256  0000A1                     printf@cp:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x21
  1260  0000A1                     	ds	2
  1261  0000A3                     printf@val:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x23
  1265  0000A3                     	ds	2
  1266  0000A5                     printf@len:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x25
  1270  0000A5                     	ds	2
  1271  0000A7                     printf@flag:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x27
  1275  0000A7                     	ds	1
  1276  0000A8                     printf@c:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x28
  1280  0000A8                     	ds	1
  1281  0000A9                     printf@width:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x29
  1285  0000A9                     	ds	2
  1286  0000AB                     ??_printRTC:
  1287                           
  1288                           ; 1 bytes @ 0x2B
  1289  0000AB                     	ds	3
  1290  0000AE                     printRTC@INT_time:
  1291                           	opt stack 0
  1292                           
  1293                           ; 14 bytes @ 0x2E
  1294  0000AE                     	ds	14
  1295  0000BC                     printRTC@RTC_month:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x3C
  1299  0000BC                     	ds	2
  1300  0000BE                     printRTC@month:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x3E
  1304  0000BE                     	ds	4
  1305  0000C2                     printRTC@i:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x42
  1309  0000C2                     	ds	2
  1310  0000C4                     ??_UI:
  1311                           
  1312                           ; 1 bytes @ 0x44
  1313  0000C4                     	ds	1
  1314  0000C5                     _UI$1921:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x45
  1318  0000C5                     	ds	2
  1319  0000C7                     UI@i:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x47
  1323  0000C7                     	ds	1
  1324  0000C8                     UI@i_636:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x48
  1328  0000C8                     	ds	1
  1329  0000C9                     UI@i_637:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x49
  1333  0000C9                     	ds	1
  1334  0000CA                     UI@i_640:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x4A
  1338  0000CA                     	ds	1
  1339  0000CB                     UI@i_641:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x4B
  1343  0000CB                     	ds	1
  1344  0000CC                     UI@i_644:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x4C
  1348  0000CC                     	ds	1
  1349  0000CD                     UI@i_645:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x4D
  1353  0000CD                     	ds	1
  1354  0000CE                     UI@i_648:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x4E
  1358  0000CE                     	ds	1
  1359  0000CF                     UI@i_649:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x4F
  1363  0000CF                     	ds	1
  1364  0000D0                     UI@i_652:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x50
  1368  0000D0                     	ds	1
  1369  0000D1                     UI@i_653:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x51
  1373  0000D1                     	ds	1
  1374  0000D2                     UI@i_656:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x52
  1378  0000D2                     	ds	1
  1379  0000D3                     UI@i_657:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x53
  1383  0000D3                     	ds	1
  1384  0000D4                     tblptru	equ	0xFF8
  1385                           tblptrh	equ	0xFF7
  1386                           tblptrl	equ	0xFF6
  1387                           tablat	equ	0xFF5
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           postdec1	equ	0xFE5
  1391                           fsr1l	equ	0xFE1
  1392                           
  1393                           ; 1 bytes @ 0x54
  1394                           
  1395                           	psect	cstackCOMRAM
  1396  000001                     __pcstackCOMRAM:
  1397                           	opt stack 0
  1398  000001                     ??i2_I2C_Master_Wait:
  1399  000001                     ??i2_isdigit:
  1400  000001                     ?i2___wmul:
  1401                           	opt stack 0
  1402  000001                     ?i2___lwmod:
  1403                           	opt stack 0
  1404  000001                     i2lcdNibble@temp:
  1405                           	opt stack 0
  1406  000001                     dispLogs@myLog:
  1407                           	opt stack 0
  1408  000001                     i2___wmul@multiplier:
  1409                           	opt stack 0
  1410  000001                     i2___lwmod@dividend:
  1411                           	opt stack 0
  1412  000001                     i2strcpy@to:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x0
  1416  000001                     	ds	1
  1417  000002                     i2I2C_Master_Read@a:
  1418                           	opt stack 0
  1419  000002                     i2lcdNibble@data:
  1420                           	opt stack 0
  1421  000002                     i2_isdigit$1565:
  1422                           	opt stack 0
  1423  000002                     i2I2C_Master_Write@d:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x1
  1427  000002                     	ds	1
  1428  000003                     i2I2C_Master_Read@temp:
  1429                           	opt stack 0
  1430  000003                     i2lcdInst@data:
  1431                           	opt stack 0
  1432  000003                     i2putch@data:
  1433                           	opt stack 0
  1434  000003                     i2isdigit@c:
  1435                           	opt stack 0
  1436  000003                     i2___wmul@multiplicand:
  1437                           	opt stack 0
  1438  000003                     i2___lwmod@divisor:
  1439                           	opt stack 0
  1440  000003                     i2strcpy@from:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x2
  1444  000003                     	ds	1
  1445  000004                     i2getRTC@i:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x3
  1449  000004                     	ds	1
  1450  000005                     i2___lwmod@counter:
  1451                           	opt stack 0
  1452  000005                     i2___wmul@product:
  1453                           	opt stack 0
  1454  000005                     i2strcpy@cp:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x4
  1458  000005                     	ds	1
  1459  000006                     ?i2___lwdiv:
  1460                           	opt stack 0
  1461  000006                     i2___lwdiv@dividend:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x5
  1465  000006                     	ds	2
  1466  000008                     i2___lwdiv@divisor:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x7
  1470  000008                     	ds	2
  1471  00000A                     i2___lwdiv@quotient:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x9
  1475  00000A                     	ds	2
  1476  00000C                     i2___lwdiv@counter:
  1477                           	opt stack 0
  1478                           
  1479                           ; 1 bytes @ 0xB
  1480  00000C                     	ds	1
  1481  00000D                     ?i2_printf:
  1482                           	opt stack 0
  1483  00000D                     i2printf@f:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0xC
  1487  00000D                     	ds	12
  1488  000019                     ??i2_printf:
  1489                           
  1490                           ; 1 bytes @ 0x18
  1491  000019                     	ds	4
  1492  00001D                     i2printf@prec:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x1C
  1496  00001D                     	ds	1
  1497  00001E                     i2printf@ap:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x1D
  1501  00001E                     	ds	2
  1502  000020                     i2printf@cp:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x1F
  1506  000020                     	ds	2
  1507  000022                     i2printf@val:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x21
  1511  000022                     	ds	2
  1512  000024                     i2printf@len:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x23
  1516  000024                     	ds	2
  1517  000026                     i2printf@flag:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x25
  1521  000026                     	ds	1
  1522  000027                     i2printf@c:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x26
  1526  000027                     	ds	1
  1527  000028                     i2printf@width:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x27
  1531  000028                     	ds	2
  1532  00002A                     ??_printSortTimer:
  1533  00002A                     ??i2_printRTC:
  1534  00002A                     ?_inputHandler:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x29
  1538  00002A                     	ds	2
  1539  00002C                     ??_inputHandler:
  1540                           
  1541                           ; 1 bytes @ 0x2B
  1542  00002C                     	ds	1
  1543  00002D                     printSortTimer@curTime:
  1544                           	opt stack 0
  1545  00002D                     i2printRTC@INT_time:
  1546                           	opt stack 0
  1547                           
  1548                           ; 14 bytes @ 0x2C
  1549  00002D                     	ds	14
  1550  00003B                     printSortTimer@start_sec:
  1551                           	opt stack 0
  1552  00003B                     i2printRTC@RTC_month:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x3A
  1556  00003B                     	ds	2
  1557  00003D                     printSortTimer@cur_sec:
  1558                           	opt stack 0
  1559  00003D                     i2printRTC@month:
  1560                           	opt stack 0
  1561                           
  1562                           ; 4 bytes @ 0x3C
  1563  00003D                     	ds	2
  1564  00003F                     printSortTimer@hour:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x3E
  1568  00003F                     	ds	2
  1569  000041                     printSortTimer@min:
  1570                           	opt stack 0
  1571  000041                     i2printRTC@i:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x40
  1575  000041                     	ds	2
  1576  000043                     ??_updateMenu:
  1577  000043                     printSortTimer@sec:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x42
  1581  000043                     	ds	2
  1582  000045                     _printSortTimer$2028:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x44
  1586  000045                     	ds	2
  1587  000047                     printSortTimer@timeDiff:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x46
  1591  000047                     	ds	2
  1592  000049                     printSortTimer@i:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x48
  1596  000049                     	ds	2
  1597  00004B                     ??_handler:
  1598                           
  1599                           ; 1 bytes @ 0x4A
  1600  00004B                     	ds	16
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postdec1	equ	0xFE5
  1608                           fsr1l	equ	0xFE1
  1609                           
  1610 ;;
  1611 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1612 ;;
  1613 ;; *************** function _main *****************
  1614 ;; Defined at:
  1615 ;;		line 15 in file "main.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;		None
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;		None
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1633 ;;Total ram usage:        0 bytes
  1634 ;; Hardware stack levels required when called:   13
  1635 ;; This function calls:
  1636 ;;		_PortTestA5
  1637 ;;		_UI
  1638 ;;		_initLCD
  1639 ;;		_initTime
  1640 ;;		_initUI
  1641 ;;		_machineConfig
  1642 ;;		_sort
  1643 ;;		_stopSignals
  1644 ;; This function is called by:
  1645 ;;		Startup code after reset
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text0
  1650  001EF8                     __ptext0:
  1651                           	opt stack 0
  1652  001EF8                     _main:
  1653                           	opt stack 18
  1654                           
  1655                           ;main.c: 16: machineConfig();
  1656                           
  1657                           ;incstack = 0
  1658  001EF8  EC78  F011         	call	_machineConfig	;wreg free
  1659                           
  1660                           ;main.c: 17: initLCD();
  1661  001EFC  EC9C  F011         	call	_initLCD	;wreg free
  1662                           
  1663                           ;main.c: 18: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1664  001F00  0E32               	movlw	50
  1665  001F02  0100               	movlb	0	; () banked
  1666  001F04  6F80               	movwf	initTime@m& (0+255),b
  1667  001F06  0E13               	movlw	19
  1668  001F08  0100               	movlb	0	; () banked
  1669  001F0A  6F81               	movwf	initTime@h& (0+255),b
  1670  001F0C  0E04               	movlw	4
  1671  001F0E  0100               	movlb	0	; () banked
  1672  001F10  6F82               	movwf	initTime@w& (0+255),b
  1673  001F12  0E09               	movlw	9
  1674  001F14  0100               	movlb	0	; () banked
  1675  001F16  6F83               	movwf	initTime@DD& (0+255),b
  1676  001F18  0E02               	movlw	2
  1677  001F1A  0100               	movlb	0	; () banked
  1678  001F1C  6F84               	movwf	initTime@MM& (0+255),b
  1679  001F1E  0E17               	movlw	23
  1680  001F20  0100               	movlb	0	; () banked
  1681  001F22  6F85               	movwf	initTime@YY& (0+255),b
  1682  001F24  0E42               	movlw	66
  1683  001F26  ECCF  F013         	call	_initTime
  1684                           
  1685                           ;main.c: 19: initUI();
  1686  001F2A  ECEF  F013         	call	_initUI	;wreg free
  1687                           
  1688                           ;main.c: 24: switch(machine_state){
  1689                           
  1690                           ;main.c: 23: while(1){
  1691  001F2E  D00F               	goto	l5345
  1692  001F30                     l5333:
  1693                           
  1694                           ;main.c: 26: UI();
  1695  001F30  EC09  F000         	call	_UI	;wreg free
  1696                           
  1697                           ;main.c: 27: break;
  1698  001F34  D00C               	goto	l5345
  1699  001F36                     l5335:
  1700                           
  1701                           ;main.c: 29: sort();
  1702  001F36  EC07  F014         	call	_sort	;wreg free
  1703                           
  1704                           ;main.c: 30: break;
  1705  001F3A  D009               	goto	l5345
  1706  001F3C                     l5337:
  1707                           
  1708                           ;main.c: 32: stopSignals();
  1709  001F3C  ECFC  F013         	call	_stopSignals	;wreg free
  1710                           
  1711                           ;main.c: 33: UI();
  1712  001F40  EC09  F000         	call	_UI	;wreg free
  1713                           
  1714                           ;main.c: 34: break;
  1715  001F44  D004               	goto	l5345
  1716  001F46                     l5341:
  1717                           
  1718                           ;main.c: 36: PortTestA5();
  1719  001F46  EC26  F014         	call	_PortTestA5	;wreg free
  1720                           
  1721                           ;main.c: 37: break;
  1722  001F4A  D001               	goto	l5345
  1723  001F4C                     l657:
  1724  001F4C  D7FF               	goto	l657
  1725  001F4E                     l5345:
  1726  001F4E  0100               	movlb	0	; () banked
  1727  001F50  51F4               	movf	_machine_state& (0+255),w,b
  1728                           
  1729                           ; Switch size 1, requested type "space"
  1730                           ; Number of cases is 5, Range of values is 0 to 4
  1731                           ; switch strategies available:
  1732                           ; Name         Instructions Cycles
  1733                           ; simple_byte           16     9 (average)
  1734                           ;	Chosen strategy is simple_byte
  1735  001F52  0A00               	xorlw	0	; case 0
  1736  001F54  B4D8               	btfsc	status,2,c
  1737  001F56  D7EC               	goto	l5333
  1738  001F58  0A01               	xorlw	1	; case 1
  1739  001F5A  B4D8               	btfsc	status,2,c
  1740  001F5C  D7EC               	goto	l5335
  1741  001F5E  0A03               	xorlw	3	; case 2
  1742  001F60  B4D8               	btfsc	status,2,c
  1743  001F62  D7EC               	goto	l5337
  1744  001F64  0A01               	xorlw	1	; case 3
  1745  001F66  B4D8               	btfsc	status,2,c
  1746  001F68  D7EE               	goto	l5341
  1747  001F6A  0A07               	xorlw	7	; case 4
  1748  001F6C  B4D8               	btfsc	status,2,c
  1749  001F6E  D7EE               	goto	l657
  1750                           
  1751                           ; BSR set to: 0
  1752                           
  1753                           ; BSR set to: 0
  1754  001F70  D7EE               	goto	l5345
  1755  001F72                     __end_of_main:
  1756                           	opt stack 0
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function _stopSignals *****************
  1768 ;; Defined at:
  1769 ;;		line 48 in file "main.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    7
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_main
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text1
  1798  0027F8                     __ptext1:
  1799                           	opt stack 0
  1800  0027F8                     _stopSignals:
  1801                           	opt stack 23
  1802                           
  1803                           ;main.c: 49: LATA = 0x00;
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;incstack = 0
  1807  0027F8  0E00               	movlw	0
  1808  0027FA  6E89               	movwf	3977,c	;volatile
  1809                           
  1810                           ;main.c: 50: LATB = 0x00;
  1811  0027FC  0E00               	movlw	0
  1812  0027FE  6E8A               	movwf	3978,c	;volatile
  1813                           
  1814                           ;main.c: 51: LATC = 0x00;
  1815  002800  0E00               	movlw	0
  1816  002802  6E8B               	movwf	3979,c	;volatile
  1817                           
  1818                           ;main.c: 52: LATD = 0x00;
  1819  002804  0E00               	movlw	0
  1820  002806  6E8C               	movwf	3980,c	;volatile
  1821                           
  1822                           ;main.c: 53: LATE = 0x00;
  1823  002808  0E00               	movlw	0
  1824  00280A  6E8D               	movwf	3981,c	;volatile
  1825  00280C  0012               	return		;funcret
  1826  00280E                     __end_of_stopSignals:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           postinc0	equ	0xFEE
  1833                           wreg	equ	0xFE8
  1834                           postdec1	equ	0xFE5
  1835                           fsr1l	equ	0xFE1
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _sort *****************
  1839 ;; Defined at:
  1840 ;;		line 30 in file "sort.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;		None
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;		None
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  1    wreg      void 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;Total ram usage:        0 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:   12
  1861 ;; This function calls:
  1862 ;;		_Distribution
  1863 ;;		_ID
  1864 ;;		_Loading
  1865 ;; This function is called by:
  1866 ;;		_main
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           	psect	text2
  1871  00280E                     __ptext2:
  1872                           	opt stack 0
  1873  00280E                     _sort:
  1874                           	opt stack 18
  1875                           
  1876                           ;sort.c: 31: if(machine_state == Sorting_state){
  1877                           
  1878                           ;incstack = 0
  1879  00280E  0100               	movlb	0	; () banked
  1880  002810  05F4               	decf	_machine_state& (0+255),w,b
  1881  002812  A4D8               	btfss	status,2,c
  1882  002814  0012               	return	
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;sort.c: 32: Loading();
  1886  002816  ECA7  F00E         	call	_Loading	;wreg free
  1887                           
  1888                           ;sort.c: 33: ID();
  1889  00281A  EC02  F00E         	call	_ID	;wreg free
  1890                           
  1891                           ;sort.c: 34: Distribution();
  1892  00281E  EC4C  F012         	call	_Distribution	;wreg free
  1893  002822  0012               	return	
  1894  002824                     __end_of_sort:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           postinc0	equ	0xFEE
  1901                           wreg	equ	0xFE8
  1902                           postdec1	equ	0xFE5
  1903                           fsr1l	equ	0xFE1
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _Loading *****************
  1907 ;; Defined at:
  1908 ;;		line 37 in file "sort.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;Total ram usage:        1 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:   11
  1929 ;; This function calls:
  1930 ;;		_getIR
  1931 ;;		_initSortTimer
  1932 ;;		_lcdInst
  1933 ;; This function is called by:
  1934 ;;		_sort
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text3
  1939  001D4E                     __ptext3:
  1940                           	opt stack 0
  1941  001D4E                     _Loading:
  1942                           	opt stack 18
  1943                           
  1944                           ;sort.c: 38: if(first){
  1945                           
  1946                           ;incstack = 0
  1947  001D4E  0100               	movlb	0	; () banked
  1948  001D50  51FB               	movf	_first& (0+255),w,b
  1949  001D52  0100               	movlb	0	; () banked
  1950  001D54  11FC               	iorwf	(_first+1)& (0+255),w,b
  1951  001D56  B4D8               	btfsc	status,2,c
  1952  001D58  D015               	goto	l4601
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;sort.c: 39: first = 0;
  1956  001D5A  0E00               	movlw	0
  1957  001D5C  0100               	movlb	0	; () banked
  1958  001D5E  6FFC               	movwf	(_first+1)& (0+255),b
  1959  001D60  0E00               	movlw	0
  1960  001D62  6FFB               	movwf	_first& (0+255),b
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;sort.c: 40: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  1964  001D64  0E01               	movlw	1
  1965  001D66  EC40  F014         	call	_lcdInst
  1966  001D6A  0E68               	movlw	104
  1967  001D6C  0100               	movlb	0	; () banked
  1968  001D6E  6F98               	movwf	??_Loading& (0+255),b
  1969  001D70  0EE4               	movlw	228
  1970  001D72                     u4477:
  1971  001D72  2EE8               	decfsz	wreg,f,c
  1972  001D74  D7FE               	bra	u4477
  1973  001D76  2F98               	decfsz	??_Loading& (0+255),f,b
  1974  001D78  D7FC               	bra	u4477
  1975  001D7A  F000               	nop	
  1976                           
  1977                           ;sort.c: 41: initSortTimer();
  1978  001D7C  ECAB  F00D         	call	_initSortTimer	;wreg free
  1979                           
  1980                           ;sort.c: 42: LATAbits.LATA5 = 1;
  1981  001D80  8A89               	bsf	3977,5,c	;volatile
  1982                           
  1983                           ;sort.c: 43: }
  1984  001D82  0012               	return	
  1985  001D84                     l4601:
  1986                           
  1987                           ;sort.c: 44: else{
  1988                           ;sort.c: 45: if(!f_loadingNewCan){
  1989  001D84  0100               	movlb	0	; () banked
  1990  001D86  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  1991  001D88  0100               	movlb	0	; () banked
  1992  001D8A  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  1993  001D8C  A4D8               	btfss	status,2,c
  1994  001D8E  D018               	goto	l4617
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;sort.c: 48: getIR();
  1998  001D90  EC89  F00C         	call	_getIR	;wreg free
  1999                           
  2000                           ;sort.c: 49: if(!f_loadingNewCan){
  2001  001D94  0100               	movlb	0	; () banked
  2002  001D96  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  2003  001D98  0100               	movlb	0	; () banked
  2004  001D9A  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2005  001D9C  B4D8               	btfsc	status,2,c
  2006  001D9E  0012               	return	
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;sort.c: 52: else{
  2010                           ;sort.c: 53: count_total++;
  2011                           
  2012                           ; BSR set to: 0
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;sort.c: 51: }
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;sort.c: 50: return;
  2019  001DA0  0100               	movlb	0	; () banked
  2020  001DA2  4BDF               	infsnz	_count_total& (0+255),f,b
  2021  001DA4  2BE0               	incf	(_count_total+1)& (0+255),f,b
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;sort.c: 54: if(count_total == 12){
  2025  001DA6  0E0C               	movlw	12
  2026  001DA8  0100               	movlb	0	; () banked
  2027  001DAA  19DF               	xorwf	_count_total& (0+255),w,b
  2028  001DAC  0100               	movlb	0	; () banked
  2029  001DAE  11E0               	iorwf	(_count_total+1)& (0+255),w,b
  2030  001DB0  A4D8               	btfss	status,2,c
  2031  001DB2  D017               	goto	l4623
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;sort.c: 55: f_lastCan = 1;
  2035  001DB4  0E00               	movlw	0
  2036  001DB6  0100               	movlb	0	; () banked
  2037  001DB8  6FEA               	movwf	(_f_lastCan+1)& (0+255),b
  2038  001DBA  0E01               	movlw	1
  2039  001DBC  6FE9               	movwf	_f_lastCan& (0+255),b
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;sort.c: 56: }
  2043                           ;sort.c: 57: }
  2044                           ;sort.c: 58: }
  2045                           
  2046                           ; BSR set to: 0
  2047  001DBE  D011               	goto	l4623
  2048  001DC0                     l4617:
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;sort.c: 63: else if(f_ID_receive){
  2052  001DC0  0100               	movlb	0	; () banked
  2053  001DC2  51F9               	movf	_f_ID_receive& (0+255),w,b
  2054  001DC4  0100               	movlb	0	; () banked
  2055  001DC6  11FA               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2056  001DC8  B4D8               	btfsc	status,2,c
  2057  001DCA  D00B               	goto	l4623
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;sort.c: 64: f_loadingNewCan = 0;
  2061  001DCC  0E00               	movlw	0
  2062  001DCE  0100               	movlb	0	; () banked
  2063  001DD0  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2064  001DD2  0E00               	movlw	0
  2065  001DD4  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;sort.c: 65: LATAbits.LATA4 = 1;
  2069  001DD6  8889               	bsf	3977,4,c	;volatile
  2070                           
  2071                           ;sort.c: 66: f_can_coming_to_ID = 1;
  2072  001DD8  0E00               	movlw	0
  2073  001DDA  0100               	movlb	0	; () banked
  2074  001DDC  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2075  001DDE  0E01               	movlw	1
  2076  001DE0  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2077  001DE2                     l4623:
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;sort.c: 67: }
  2081                           ;sort.c: 69: LATAbits.LATA4 = 0;
  2082  001DE2  9889               	bcf	3977,4,c	;volatile
  2083  001DE4  0012               	return	
  2084  001DE6                     __end_of_Loading:
  2085                           	opt stack 0
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           postdec1	equ	0xFE5
  2093                           fsr1l	equ	0xFE1
  2094                           status	equ	0xFD8
  2095                           
  2096 ;; *************** function _initSortTimer *****************
  2097 ;; Defined at:
  2098 ;;		line 112 in file "sort.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  i               2    8[BANK0 ] int 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;Total ram usage:        5 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:   10
  2119 ;; This function calls:
  2120 ;;		_getRTC
  2121 ;; This function is called by:
  2122 ;;		_Loading
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text4
  2127  001B56                     __ptext4:
  2128                           	opt stack 0
  2129  001B56                     _initSortTimer:
  2130                           	opt stack 18
  2131                           
  2132                           ;sort.c: 115: getRTC();
  2133                           
  2134                           ;incstack = 0
  2135  001B56  EC39  F00F         	call	_getRTC	;wreg free
  2136                           
  2137                           ;sort.c: 116: for(int i = 0; i < 7; i++){
  2138  001B5A  0E00               	movlw	0
  2139  001B5C  0100               	movlb	0	; () banked
  2140  001B5E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2141  001B60  0E00               	movlw	0
  2142  001B62  6F88               	movwf	initSortTimer@i& (0+255),b
  2143  001B64                     l4303:
  2144                           
  2145                           ; BSR set to: 0
  2146  001B64  0100               	movlb	0	; () banked
  2147  001B66  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2148  001B68  D008               	goto	l4307
  2149  001B6A  0100               	movlb	0	; () banked
  2150  001B6C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2151  001B6E  E140               	bnz	l4313
  2152  001B70  0E07               	movlw	7
  2153  001B72  0100               	movlb	0	; () banked
  2154  001B74  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2155  001B76  B0D8               	btfsc	status,0,c
  2156  001B78  D03B               	goto	l4313
  2157  001B7A                     l4307:
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;sort.c: 117: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2161  001B7A  0ED4               	movlw	low _time
  2162  001B7C  0100               	movlb	0	; () banked
  2163  001B7E  2588               	addwf	initSortTimer@i& (0+255),w,b
  2164  001B80  6ED9               	movwf	fsr2l,c
  2165  001B82  0E00               	movlw	high _time
  2166  001B84  0100               	movlb	0	; () banked
  2167  001B86  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2168  001B88  6EDA               	movwf	fsr2h,c
  2169  001B8A  50DF               	movf	indf2,w,c
  2170  001B8C  0100               	movlb	0	; () banked
  2171  001B8E  6F85               	movwf	??_initSortTimer& (0+255),b
  2172  001B90  0100               	movlb	0	; () banked
  2173  001B92  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2174  001B94  0E0F               	movlw	15
  2175  001B96  1785               	andwf	??_initSortTimer& (0+255),f,b
  2176  001B98  0E0F               	movlw	15
  2177  001B9A  0100               	movlb	0	; () banked
  2178  001B9C  1785               	andwf	??_initSortTimer& (0+255),f,b
  2179  001B9E  0100               	movlb	0	; () banked
  2180  001BA0  5185               	movf	??_initSortTimer& (0+255),w,b
  2181  001BA2  0D0A               	mullw	10
  2182  001BA4  0ED4               	movlw	low _time
  2183  001BA6  0100               	movlb	0	; () banked
  2184  001BA8  2588               	addwf	initSortTimer@i& (0+255),w,b
  2185  001BAA  6ED9               	movwf	fsr2l,c
  2186  001BAC  0E00               	movlw	high _time
  2187  001BAE  0100               	movlb	0	; () banked
  2188  001BB0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2189  001BB2  6EDA               	movwf	fsr2h,c
  2190  001BB4  50DF               	movf	indf2,w,c
  2191  001BB6  0B0F               	andlw	15
  2192  001BB8  0100               	movlb	0	; () banked
  2193  001BBA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2194  001BBC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2195  001BBE  50F3               	movf	prodl,w,c
  2196  001BC0  0100               	movlb	0	; () banked
  2197  001BC2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2198  001BC4  50F4               	movf	prodh,w,c
  2199  001BC6  0100               	movlb	0	; () banked
  2200  001BC8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2201  001BCA  90D8               	bcf	status,0,c
  2202  001BCC  0100               	movlb	0	; () banked
  2203  001BCE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2204  001BD0  6ED9               	movwf	fsr2l,c
  2205  001BD2  0100               	movlb	0	; () banked
  2206  001BD4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2207  001BD6  6EDA               	movwf	fsr2h,c
  2208  001BD8  0E00               	movlw	low _startTime
  2209  001BDA  26D9               	addwf	fsr2l,f,c
  2210  001BDC  0E01               	movlw	high _startTime
  2211  001BDE  22DA               	addwfc	fsr2h,f,c
  2212  001BE0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2213  001BE4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2214                           
  2215                           ; BSR set to: 0
  2216  001BE8  0100               	movlb	0	; () banked
  2217  001BEA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2218  001BEC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2219  001BEE  D7BA               	goto	l4303
  2220  001BF0                     l4313:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;sort.c: 118: }
  2224                           ;sort.c: 121: T0CON = 0b00010111;
  2225  001BF0  0E17               	movlw	23
  2226  001BF2  6ED5               	movwf	4053,c	;volatile
  2227                           
  2228                           ;sort.c: 131: TMR0H = 0b10000101;
  2229  001BF4  0E85               	movlw	133
  2230  001BF6  6ED7               	movwf	4055,c	;volatile
  2231                           
  2232                           ;sort.c: 132: TMR0L = 0b11101110;
  2233  001BF8  0EEE               	movlw	238
  2234  001BFA  6ED6               	movwf	4054,c	;volatile
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;sort.c: 134: T0CON = T0CON | 0b10000000;
  2238  001BFC  50D5               	movf	4053,w,c	;volatile
  2239  001BFE  0980               	iorlw	128
  2240  001C00  6ED5               	movwf	4053,c	;volatile
  2241                           
  2242                           ; BSR set to: 0
  2243  001C02  0012               	return		;funcret
  2244  001C04                     __end_of_initSortTimer:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           postdec1	equ	0xFE5
  2255                           fsr1l	equ	0xFE1
  2256                           indf2	equ	0xFDF
  2257                           postinc2	equ	0xFDE
  2258                           postdec2	equ	0xFDD
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function _getIR *****************
  2264 ;; Defined at:
  2265 ;;		line 165 in file "sort.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  i               2   22[BANK0 ] int 
  2270 ;;  timeBroken     14    8[BANK0 ] int [7]
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;Total ram usage:       19 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:   10
  2287 ;; This function calls:
  2288 ;;		_getRTC
  2289 ;; This function is called by:
  2290 ;;		_Loading
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text5
  2295  001912                     __ptext5:
  2296                           	opt stack 0
  2297  001912                     _getIR:
  2298                           	opt stack 18
  2299                           
  2300                           ;sort.c: 167: getRTC();
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;incstack = 0
  2304  001912  EC39  F00F         	call	_getRTC	;wreg free
  2305                           
  2306                           ;sort.c: 168: int timeBroken[7];
  2307                           ;sort.c: 169: for(int i = 0; i < 7; i++){
  2308  001916  0E00               	movlw	0
  2309  001918  0100               	movlb	0	; () banked
  2310  00191A  6F97               	movwf	(getIR@i+1)& (0+255),b
  2311  00191C  0E00               	movlw	0
  2312  00191E  6F96               	movwf	getIR@i& (0+255),b
  2313  001920                     l4321:
  2314                           
  2315                           ; BSR set to: 0
  2316  001920  0100               	movlb	0	; () banked
  2317  001922  BF97               	btfsc	(getIR@i+1)& (0+255),7,b
  2318  001924  D008               	goto	l4325
  2319  001926  0100               	movlb	0	; () banked
  2320  001928  5197               	movf	(getIR@i+1)& (0+255),w,b
  2321  00192A  E151               	bnz	l4337
  2322  00192C  0E07               	movlw	7
  2323  00192E  0100               	movlb	0	; () banked
  2324  001930  5D96               	subwf	getIR@i& (0+255),w,b
  2325  001932  B0D8               	btfsc	status,0,c
  2326  001934  D04C               	goto	l4337
  2327  001936                     l4325:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;sort.c: 170: timeBroken[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2331  001936  0ED4               	movlw	low _time
  2332  001938  0100               	movlb	0	; () banked
  2333  00193A  2596               	addwf	getIR@i& (0+255),w,b
  2334  00193C  6ED9               	movwf	fsr2l,c
  2335  00193E  0E00               	movlw	high _time
  2336  001940  0100               	movlb	0	; () banked
  2337  001942  2197               	addwfc	(getIR@i+1)& (0+255),w,b
  2338  001944  6EDA               	movwf	fsr2h,c
  2339  001946  50DF               	movf	indf2,w,c
  2340  001948  0100               	movlb	0	; () banked
  2341  00194A  6F85               	movwf	??_getIR& (0+255),b
  2342  00194C  0100               	movlb	0	; () banked
  2343  00194E  3B85               	swapf	??_getIR& (0+255),f,b
  2344  001950  0E0F               	movlw	15
  2345  001952  1785               	andwf	??_getIR& (0+255),f,b
  2346  001954  0E0F               	movlw	15
  2347  001956  0100               	movlb	0	; () banked
  2348  001958  1785               	andwf	??_getIR& (0+255),f,b
  2349  00195A  0100               	movlb	0	; () banked
  2350  00195C  5185               	movf	??_getIR& (0+255),w,b
  2351  00195E  0D0A               	mullw	10
  2352  001960  0ED4               	movlw	low _time
  2353  001962  0100               	movlb	0	; () banked
  2354  001964  2596               	addwf	getIR@i& (0+255),w,b
  2355  001966  6ED9               	movwf	fsr2l,c
  2356  001968  0E00               	movlw	high _time
  2357  00196A  0100               	movlb	0	; () banked
  2358  00196C  2197               	addwfc	(getIR@i+1)& (0+255),w,b
  2359  00196E  6EDA               	movwf	fsr2h,c
  2360  001970  50DF               	movf	indf2,w,c
  2361  001972  0B0F               	andlw	15
  2362  001974  0100               	movlb	0	; () banked
  2363  001976  6F86               	movwf	(??_getIR+1)& (0+255),b
  2364  001978  6B87               	clrf	(??_getIR+2)& (0+255),b
  2365  00197A  50F3               	movf	prodl,w,c
  2366  00197C  0100               	movlb	0	; () banked
  2367  00197E  2786               	addwf	(??_getIR+1)& (0+255),f,b
  2368  001980  50F4               	movf	prodh,w,c
  2369  001982  0100               	movlb	0	; () banked
  2370  001984  2387               	addwfc	(??_getIR+2)& (0+255),f,b
  2371  001986  90D8               	bcf	status,0,c
  2372  001988  0100               	movlb	0	; () banked
  2373  00198A  3596               	rlcf	getIR@i& (0+255),w,b
  2374  00198C  6ED9               	movwf	fsr2l,c
  2375  00198E  0100               	movlb	0	; () banked
  2376  001990  3597               	rlcf	(getIR@i+1)& (0+255),w,b
  2377  001992  6EDA               	movwf	fsr2h,c
  2378  001994  0E88               	movlw	low getIR@timeBroken
  2379  001996  26D9               	addwf	fsr2l,f,c
  2380  001998  0E00               	movlw	high getIR@timeBroken
  2381  00199A  22DA               	addwfc	fsr2h,f,c
  2382  00199C  C086  FFDE         	movff	??_getIR+1,postinc2
  2383  0019A0  C087  FFDD         	movff	??_getIR+2,postdec2
  2384                           
  2385                           ; BSR set to: 0
  2386  0019A4  0100               	movlb	0	; () banked
  2387  0019A6  4B96               	infsnz	getIR@i& (0+255),f,b
  2388  0019A8  2B97               	incf	(getIR@i+1)& (0+255),f,b
  2389  0019AA  D7BA               	goto	l4321
  2390  0019AC                     l4331:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;sort.c: 175: if (beamTimerCounter > 3125){
  2394  0019AC  0100               	movlb	0	; () banked
  2395  0019AE  BFDE               	btfsc	(_beamTimerCounter+1)& (0+255),7,b
  2396  0019B0  D00E               	goto	l4337
  2397  0019B2  0E36               	movlw	54
  2398  0019B4  0100               	movlb	0	; () banked
  2399  0019B6  5DDD               	subwf	_beamTimerCounter& (0+255),w,b
  2400  0019B8  0E0C               	movlw	12
  2401  0019BA  0100               	movlb	0	; () banked
  2402  0019BC  59DE               	subwfb	(_beamTimerCounter+1)& (0+255),w,b
  2403  0019BE  A0D8               	btfss	status,0,c
  2404  0019C0  D006               	goto	l4337
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;sort.c: 176: f_loadingNewCan = 1;
  2408  0019C2  0E00               	movlw	0
  2409  0019C4  0100               	movlb	0	; () banked
  2410  0019C6  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2411  0019C8  0E01               	movlw	1
  2412  0019CA  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;sort.c: 177: return;
  2416  0019CC  0012               	return	
  2417  0019CE                     l4337:
  2418                           
  2419                           ; BSR set to: 0
  2420  0019CE  0100               	movlb	0	; () banked
  2421  0019D0  51DB               	movf	_IR_in& (0+255),w,b
  2422  0019D2  0100               	movlb	0	; () banked
  2423  0019D4  11DC               	iorwf	(_IR_in+1)& (0+255),w,b
  2424  0019D6  A4D8               	btfss	status,2,c
  2425  0019D8  0012               	return	
  2426  0019DA  D7E8               	goto	l4331
  2427  0019DC                     __end_of_getIR:
  2428                           	opt stack 0
  2429                           tblptru	equ	0xFF8
  2430                           tblptrh	equ	0xFF7
  2431                           tblptrl	equ	0xFF6
  2432                           tablat	equ	0xFF5
  2433                           prodh	equ	0xFF4
  2434                           prodl	equ	0xFF3
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           postdec1	equ	0xFE5
  2438                           fsr1l	equ	0xFE1
  2439                           indf2	equ	0xFDF
  2440                           postinc2	equ	0xFDE
  2441                           postdec2	equ	0xFDD
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _ID *****************
  2447 ;; Defined at:
  2448 ;;		line 72 in file "sort.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  magnetic        2    8[BANK0 ] int 
  2453 ;;  side_conduct    2    6[BANK0 ] int 
  2454 ;;  top_bottom_c    2    4[BANK0 ] int 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  1    wreg      void 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0, cstack
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2465 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2467 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;Total ram usage:        7 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    8
  2471 ;; This function calls:
  2472 ;;		_MAGNETISM_in
  2473 ;;		_moveServoBlock
  2474 ;; This function is called by:
  2475 ;;		_sort
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text6
  2480  001C04                     __ptext6:
  2481                           	opt stack 0
  2482  001C04                     _ID:
  2483                           	opt stack 21
  2484                           
  2485                           ;sort.c: 73: if(f_can_coming_to_ID){
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;incstack = 0
  2489  001C04  0100               	movlb	0	; () banked
  2490  001C06  51E3               	movf	_f_can_coming_to_ID& (0+255),w,b
  2491  001C08  0100               	movlb	0	; () banked
  2492  001C0A  11E4               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2493  001C0C  B4D8               	btfsc	status,2,c
  2494  001C0E  0012               	return	
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;sort.c: 78: int side_conductivity = 0;
  2498  001C10  0E00               	movlw	0
  2499  001C12  0100               	movlb	0	; () banked
  2500  001C14  6F87               	movwf	(ID@side_conductivity+1)& (0+255),b
  2501  001C16  0E00               	movlw	0
  2502  001C18  6F86               	movwf	ID@side_conductivity& (0+255),b
  2503                           
  2504                           ;sort.c: 79: int magnetic = 0;
  2505  001C1A  0E00               	movlw	0
  2506  001C1C  0100               	movlb	0	; () banked
  2507  001C1E  6F89               	movwf	(ID@magnetic+1)& (0+255),b
  2508  001C20  0E00               	movlw	0
  2509  001C22  6F88               	movwf	ID@magnetic& (0+255),b
  2510                           
  2511                           ;sort.c: 80: int top_bottom_conductivity = 0;
  2512  001C24  0E00               	movlw	0
  2513  001C26  0100               	movlb	0	; () banked
  2514  001C28  6F85               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2515  001C2A  0E00               	movlw	0
  2516  001C2C  6F84               	movwf	ID@top_bottom_conductivity& (0+255),b
  2517                           
  2518                           ;sort.c: 82: side_conductivity = PORTAbits.RA2;
  2519  001C2E  A480               	btfss	3968,2,c	;volatile
  2520  001C30  D004               	goto	u3410
  2521  001C32  0100               	movlb	0	; () banked
  2522  001C34  6B83               	clrf	??_ID& (0+255),b
  2523  001C36  2B83               	incf	??_ID& (0+255),f,b
  2524  001C38  D002               	goto	u3418
  2525  001C3A                     u3410:
  2526  001C3A  0100               	movlb	0	; () banked
  2527  001C3C  6B83               	clrf	??_ID& (0+255),b
  2528  001C3E                     u3418:
  2529  001C3E  0100               	movlb	0	; () banked
  2530  001C40  5183               	movf	??_ID& (0+255),w,b
  2531  001C42  0100               	movlb	0	; () banked
  2532  001C44  6F86               	movwf	ID@side_conductivity& (0+255),b
  2533  001C46  6B87               	clrf	(ID@side_conductivity+1)& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;sort.c: 83: if(!side_conductivity){
  2537  001C48  0100               	movlb	0	; () banked
  2538  001C4A  5186               	movf	ID@side_conductivity& (0+255),w,b
  2539  001C4C  0100               	movlb	0	; () banked
  2540  001C4E  1187               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2541  001C50  A4D8               	btfss	status,2,c
  2542  001C52  D01B               	goto	l4641
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;sort.c: 84: magnetic = MAGNETISM_in();
  2546  001C54  EC72  F014         	call	_MAGNETISM_in	;wreg free
  2547  001C58  C080  F088         	movff	?_MAGNETISM_in,ID@magnetic
  2548  001C5C  C081  F089         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2549                           
  2550                           ;sort.c: 85: if(!magnetic){
  2551  001C60  0100               	movlb	0	; () banked
  2552  001C62  5188               	movf	ID@magnetic& (0+255),w,b
  2553  001C64  0100               	movlb	0	; () banked
  2554  001C66  1189               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2555  001C68  A4D8               	btfss	status,2,c
  2556  001C6A  D00F               	goto	l4641
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;sort.c: 86: LATAbits.LATA3 = 1;
  2560  001C6C  8689               	bsf	3977,3,c	;volatile
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;sort.c: 88: top_bottom_conductivity = PORTAbits.RA2;
  2564  001C6E  A480               	btfss	3968,2,c	;volatile
  2565  001C70  D004               	goto	u3440
  2566  001C72  0100               	movlb	0	; () banked
  2567  001C74  6B83               	clrf	??_ID& (0+255),b
  2568  001C76  2B83               	incf	??_ID& (0+255),f,b
  2569  001C78  D002               	goto	u3448
  2570  001C7A                     u3440:
  2571  001C7A  0100               	movlb	0	; () banked
  2572  001C7C  6B83               	clrf	??_ID& (0+255),b
  2573  001C7E                     u3448:
  2574  001C7E  0100               	movlb	0	; () banked
  2575  001C80  5183               	movf	??_ID& (0+255),w,b
  2576  001C82  0100               	movlb	0	; () banked
  2577  001C84  6F84               	movwf	ID@top_bottom_conductivity& (0+255),b
  2578  001C86  6B85               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;sort.c: 89: LATAbits.LATA3 = 0;
  2582  001C88  9689               	bcf	3977,3,c	;volatile
  2583  001C8A                     l4641:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;sort.c: 90: }
  2587                           ;sort.c: 91: }
  2588                           ;sort.c: 94: moveServoBlock(Lower);
  2589  001C8A  0E01               	movlw	1
  2590  001C8C  ECE0  F011         	call	_moveServoBlock
  2591                           
  2592                           ;sort.c: 96: f_can_coming_to_distribution = 1;
  2593  001C90  0E00               	movlw	0
  2594  001C92  0100               	movlb	0	; () banked
  2595  001C94  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2596  001C96  0E01               	movlw	1
  2597  001C98  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2598                           
  2599                           ;sort.c: 97: moveServoBlock(Raise);
  2600  001C9A  0E00               	movlw	0
  2601  001C9C  ECE0  F011         	call	_moveServoBlock
  2602                           
  2603                           ;sort.c: 98: f_can_coming_to_ID = 0;
  2604  001CA0  0E00               	movlw	0
  2605  001CA2  0100               	movlb	0	; () banked
  2606  001CA4  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2607  001CA6  0E00               	movlw	0
  2608  001CA8  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2609  001CAA  0012               	return	
  2610  001CAC                     __end_of_ID:
  2611                           	opt stack 0
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           prodh	equ	0xFF4
  2617                           prodl	equ	0xFF3
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           postdec1	equ	0xFE5
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           postinc2	equ	0xFDE
  2624                           postdec2	equ	0xFDD
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _moveServoBlock *****************
  2630 ;; Defined at:
  2631 ;;		line 187 in file "sort.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  myPosition      1    wreg     enum E3130
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  myPosition      1    2[BANK0 ] enum E3130
  2636 ;;  pwmTimer        2    0[BANK0 ] int 
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;Total ram usage:        3 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    7
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_ID
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text7
  2661  0023C0                     __ptext7:
  2662                           	opt stack 0
  2663  0023C0                     _moveServoBlock:
  2664                           	opt stack 21
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;incstack = 0
  2668                           ;moveServoBlock@myPosition stored from wreg
  2669  0023C0  0100               	movlb	0	; () banked
  2670  0023C2  6F82               	movwf	moveServoBlock@myPosition& (0+255),b
  2671                           
  2672                           ;sort.c: 190: int pwmTimer = 0b0;
  2673  0023C4  0E00               	movlw	0
  2674  0023C6  0100               	movlb	0	; () banked
  2675  0023C8  6F81               	movwf	(moveServoBlock@pwmTimer+1)& (0+255),b
  2676  0023CA  0E00               	movlw	0
  2677  0023CC  6F80               	movwf	moveServoBlock@pwmTimer& (0+255),b
  2678                           
  2679                           ;sort.c: 192: switch(myPosition){
  2680  0023CE  D00C               	goto	l4347
  2681  0023D0                     l4341:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;sort.c: 194: pwmTimer = 2;
  2685  0023D0  0E00               	movlw	0
  2686  0023D2  0100               	movlb	0	; () banked
  2687  0023D4  6F81               	movwf	(moveServoBlock@pwmTimer+1)& (0+255),b
  2688  0023D6  0E02               	movlw	2
  2689  0023D8  6F80               	movwf	moveServoBlock@pwmTimer& (0+255),b
  2690                           
  2691                           ;sort.c: 195: break;
  2692  0023DA  0012               	return	
  2693  0023DC                     l4343:
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;sort.c: 197: pwmTimer = 1;
  2697  0023DC  0E00               	movlw	0
  2698  0023DE  0100               	movlb	0	; () banked
  2699  0023E0  6F81               	movwf	(moveServoBlock@pwmTimer+1)& (0+255),b
  2700  0023E2  0E01               	movlw	1
  2701  0023E4  6F80               	movwf	moveServoBlock@pwmTimer& (0+255),b
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;sort.c: 201: }
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;sort.c: 200: break;
  2708                           
  2709                           ;sort.c: 199: default:
  2710                           
  2711                           ;sort.c: 198: break;
  2712  0023E6  0012               	return	
  2713  0023E8                     l4347:
  2714                           
  2715                           ; BSR set to: 0
  2716  0023E8  0100               	movlb	0	; () banked
  2717  0023EA  5182               	movf	moveServoBlock@myPosition& (0+255),w,b
  2718                           
  2719                           ; Switch size 1, requested type "space"
  2720                           ; Number of cases is 2, Range of values is 0 to 1
  2721                           ; switch strategies available:
  2722                           ; Name         Instructions Cycles
  2723                           ; simple_byte            7     4 (average)
  2724                           ;	Chosen strategy is simple_byte
  2725  0023EC  0A00               	xorlw	0	; case 0
  2726  0023EE  B4D8               	btfsc	status,2,c
  2727  0023F0  D7EF               	goto	l4341
  2728  0023F2  0A01               	xorlw	1	; case 1
  2729  0023F4  A4D8               	btfss	status,2,c
  2730  0023F6  0012               	return	
  2731  0023F8  D7F1               	goto	l4343
  2732  0023FA                     __end_of_moveServoBlock:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           postinc0	equ	0xFEE
  2741                           wreg	equ	0xFE8
  2742                           postdec1	equ	0xFE5
  2743                           fsr1l	equ	0xFE1
  2744                           indf2	equ	0xFDF
  2745                           postinc2	equ	0xFDE
  2746                           postdec2	equ	0xFDD
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _MAGNETISM_in *****************
  2752 ;; Defined at:
  2753 ;;		line 182 in file "sort.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  2    0[BANK0 ] int 
  2760 ;; Registers used:
  2761 ;;		None
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2767 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;Total ram usage:        2 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    7
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_ID
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text8
  2782  0028E4                     __ptext8:
  2783                           	opt stack 0
  2784  0028E4                     _MAGNETISM_in:
  2785                           	opt stack 21
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;incstack = 0
  2789  0028E4  0012               	return		;funcret
  2790  0028E6                     __end_of_MAGNETISM_in:
  2791                           	opt stack 0
  2792                           tblptru	equ	0xFF8
  2793                           tblptrh	equ	0xFF7
  2794                           tblptrl	equ	0xFF6
  2795                           tablat	equ	0xFF5
  2796                           prodh	equ	0xFF4
  2797                           prodl	equ	0xFF3
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postdec1	equ	0xFE5
  2801                           fsr1l	equ	0xFE1
  2802                           indf2	equ	0xFDF
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _Distribution *****************
  2810 ;; Defined at:
  2811 ;;		line 101 in file "sort.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;Total ram usage:        0 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    8
  2832 ;; This function calls:
  2833 ;;		_moveServoCup
  2834 ;; This function is called by:
  2835 ;;		_sort
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text9
  2840  002498                     __ptext9:
  2841                           	opt stack 0
  2842  002498                     _Distribution:
  2843                           	opt stack 21
  2844                           
  2845                           ;sort.c: 102: if(f_can_coming_to_distribution){
  2846                           
  2847                           ;incstack = 0
  2848  002498  0100               	movlb	0	; () banked
  2849  00249A  51E5               	movf	_f_can_coming_to_distribution& (0+255),w,b
  2850  00249C  0100               	movlb	0	; () banked
  2851  00249E  11E6               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  2852  0024A0  B4D8               	btfsc	status,2,c
  2853  0024A2  0012               	return	
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;sort.c: 104: moveServoCup(canType);
  2857  0024A4  0100               	movlb	0	; () banked
  2858  0024A6  51F3               	movf	_canType& (0+255),w,b
  2859  0024A8  ECF5  F00F         	call	_moveServoCup
  2860                           
  2861                           ;sort.c: 106: moveServoCup(Home);
  2862  0024AC  0E00               	movlw	0
  2863  0024AE  ECF5  F00F         	call	_moveServoCup
  2864                           
  2865                           ;sort.c: 107: f_can_coming_to_distribution = 0;
  2866  0024B2  0E00               	movlw	0
  2867  0024B4  0100               	movlb	0	; () banked
  2868  0024B6  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2869  0024B8  0E00               	movlw	0
  2870  0024BA  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;sort.c: 108: f_can_distributed = 1;
  2874  0024BC  0E00               	movlw	0
  2875  0024BE  0100               	movlb	0	; () banked
  2876  0024C0  6FE8               	movwf	(_f_can_distributed+1)& (0+255),b
  2877  0024C2  0E01               	movlw	1
  2878  0024C4  6FE7               	movwf	_f_can_distributed& (0+255),b
  2879  0024C6  0012               	return	
  2880  0024C8                     __end_of_Distribution:
  2881                           	opt stack 0
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1l	equ	0xFE1
  2892                           indf2	equ	0xFDF
  2893                           postinc2	equ	0xFDE
  2894                           postdec2	equ	0xFDD
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _moveServoCup *****************
  2900 ;; Defined at:
  2901 ;;		line 204 in file "sort.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  myPosition      1    wreg     enum E3123
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  myPosition      1    0[BANK0 ] enum E3123
  2906 ;;  pwmTimer        2    1[BANK0 ] int 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, status,2, status,0
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;Total ram usage:        3 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    7
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_Distribution
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text10
  2931  001FEA                     __ptext10:
  2932                           	opt stack 0
  2933  001FEA                     _moveServoCup:
  2934                           	opt stack 21
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;incstack = 0
  2938                           ;moveServoCup@myPosition stored from wreg
  2939  001FEA  0100               	movlb	0	; () banked
  2940  001FEC  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  2941                           
  2942                           ;sort.c: 207: int pwmTimer = 0b0;
  2943  001FEE  0E00               	movlw	0
  2944  001FF0  0100               	movlb	0	; () banked
  2945  001FF2  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2946  001FF4  0E00               	movlw	0
  2947  001FF6  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2948                           
  2949                           ;sort.c: 208: T1CON = 0b1011;
  2950  001FF8  0E0B               	movlw	11
  2951  001FFA  6ECD               	movwf	4045,c	;volatile
  2952                           
  2953                           ;sort.c: 210: switch(myPosition){
  2954  001FFC  D01E               	goto	l4363
  2955  001FFE                     l4351:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;sort.c: 212: pwmTimer = 1.5;
  2959  001FFE  0E00               	movlw	0
  2960  002000  0100               	movlb	0	; () banked
  2961  002002  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2962  002004  0E01               	movlw	1
  2963  002006  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2964                           
  2965                           ;sort.c: 213: break;
  2966  002008  0012               	return	
  2967  00200A                     l4353:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;sort.c: 215: pwmTimer = 1;
  2971  00200A  0E00               	movlw	0
  2972  00200C  0100               	movlb	0	; () banked
  2973  00200E  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2974  002010  0E01               	movlw	1
  2975  002012  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2976                           
  2977                           ;sort.c: 216: break;
  2978  002014  0012               	return	
  2979  002016                     l4355:
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;sort.c: 218: pwmTimer = 1.25;
  2983  002016  0E00               	movlw	0
  2984  002018  0100               	movlb	0	; () banked
  2985  00201A  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2986  00201C  0E01               	movlw	1
  2987  00201E  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2988                           
  2989                           ;sort.c: 219: break;
  2990  002020  0012               	return	
  2991  002022                     l4357:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;sort.c: 221: pwmTimer = 1.75;
  2995  002022  0E00               	movlw	0
  2996  002024  0100               	movlb	0	; () banked
  2997  002026  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2998  002028  0E01               	movlw	1
  2999  00202A  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  3000                           
  3001                           ;sort.c: 222: break;
  3002  00202C  0012               	return	
  3003  00202E                     l4359:
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;sort.c: 224: pwmTimer = 2;
  3007  00202E  0E00               	movlw	0
  3008  002030  0100               	movlb	0	; () banked
  3009  002032  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  3010  002034  0E02               	movlw	2
  3011  002036  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;sort.c: 228: }
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;sort.c: 227: break;
  3018                           
  3019                           ;sort.c: 226: default:
  3020                           
  3021                           ;sort.c: 225: break;
  3022  002038  0012               	return	
  3023  00203A                     l4363:
  3024                           
  3025                           ; BSR set to: 0
  3026  00203A  0100               	movlb	0	; () banked
  3027  00203C  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  3028                           
  3029                           ; Switch size 1, requested type "space"
  3030                           ; Number of cases is 5, Range of values is 0 to 4
  3031                           ; switch strategies available:
  3032                           ; Name         Instructions Cycles
  3033                           ; simple_byte           16     9 (average)
  3034                           ;	Chosen strategy is simple_byte
  3035  00203E  0A00               	xorlw	0	; case 0
  3036  002040  B4D8               	btfsc	status,2,c
  3037  002042  D7DD               	goto	l4351
  3038  002044  0A01               	xorlw	1	; case 1
  3039  002046  B4D8               	btfsc	status,2,c
  3040  002048  D7E0               	goto	l4353
  3041  00204A  0A03               	xorlw	3	; case 2
  3042  00204C  B4D8               	btfsc	status,2,c
  3043  00204E  D7E3               	goto	l4355
  3044  002050  0A01               	xorlw	1	; case 3
  3045  002052  B4D8               	btfsc	status,2,c
  3046  002054  D7E6               	goto	l4357
  3047  002056  0A07               	xorlw	7	; case 4
  3048  002058  A4D8               	btfss	status,2,c
  3049  00205A  0012               	return	
  3050  00205C  D7E8               	goto	l4359
  3051  00205E                     __end_of_moveServoCup:
  3052                           	opt stack 0
  3053                           tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           prodh	equ	0xFF4
  3058                           prodl	equ	0xFF3
  3059                           postinc0	equ	0xFEE
  3060                           wreg	equ	0xFE8
  3061                           postdec1	equ	0xFE5
  3062                           fsr1l	equ	0xFE1
  3063                           indf2	equ	0xFDF
  3064                           postinc2	equ	0xFDE
  3065                           postdec2	equ	0xFDD
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070 ;; *************** function _machineConfig *****************
  3071 ;; Defined at:
  3072 ;;		line 13 in file "MachineConfig.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;		None
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  2  586[None  ] int 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;Total ram usage:        0 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    7
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_main
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text11
  3101  0022F0                     __ptext11:
  3102                           	opt stack 0
  3103  0022F0                     _machineConfig:
  3104                           	opt stack 23
  3105                           
  3106                           ;MachineConfig.c: 15: OSCCON = 0b11110000;
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;incstack = 0
  3110  0022F0  0EF0               	movlw	240
  3111  0022F2  6ED3               	movwf	4051,c	;volatile
  3112                           
  3113                           ;MachineConfig.c: 16: OSCTUNEbits.PLLEN = 1;
  3114  0022F4  8C9B               	bsf	3995,6,c	;volatile
  3115                           
  3116                           ;MachineConfig.c: 20: TRISA = 0b01000111;
  3117  0022F6  0E47               	movlw	71
  3118  0022F8  6E92               	movwf	3986,c	;volatile
  3119                           
  3120                           ;MachineConfig.c: 22: TRISB = 0b11110010;
  3121  0022FA  0EF2               	movlw	242
  3122  0022FC  6E93               	movwf	3987,c	;volatile
  3123                           
  3124                           ;MachineConfig.c: 25: TRISC = 0x00;
  3125  0022FE  0E00               	movlw	0
  3126  002300  6E94               	movwf	3988,c	;volatile
  3127                           
  3128                           ;MachineConfig.c: 29: TRISD = 0x00;
  3129  002302  0E00               	movlw	0
  3130  002304  6E95               	movwf	3989,c	;volatile
  3131                           
  3132                           ;MachineConfig.c: 32: TRISE = 0x00;
  3133  002306  0E00               	movlw	0
  3134  002308  6E96               	movwf	3990,c	;volatile
  3135                           
  3136                           ;MachineConfig.c: 35: LATA = 0x00;
  3137  00230A  0E00               	movlw	0
  3138  00230C  6E89               	movwf	3977,c	;volatile
  3139                           
  3140                           ;MachineConfig.c: 36: LATB = 0x00;
  3141  00230E  0E00               	movlw	0
  3142  002310  6E8A               	movwf	3978,c	;volatile
  3143                           
  3144                           ;MachineConfig.c: 37: LATC = 0x00;
  3145  002312  0E00               	movlw	0
  3146  002314  6E8B               	movwf	3979,c	;volatile
  3147                           
  3148                           ;MachineConfig.c: 38: LATD = 0x00;
  3149  002316  0E00               	movlw	0
  3150  002318  6E8C               	movwf	3980,c	;volatile
  3151                           
  3152                           ;MachineConfig.c: 39: LATE = 0x00;
  3153  00231A  0E00               	movlw	0
  3154  00231C  6E8D               	movwf	3981,c	;volatile
  3155                           
  3156                           ;MachineConfig.c: 42: ADCON0 = 0x00;
  3157  00231E  0E00               	movlw	0
  3158  002320  6EC2               	movwf	4034,c	;volatile
  3159                           
  3160                           ;MachineConfig.c: 43: ADCON1 = 0x0D;
  3161  002322  0E0D               	movlw	13
  3162  002324  6EC1               	movwf	4033,c	;volatile
  3163                           
  3164                           ;MachineConfig.c: 46: CVRCON = 0x00;
  3165  002326  0E00               	movlw	0
  3166  002328  6EB5               	movwf	4021,c	;volatile
  3167                           
  3168                           ;MachineConfig.c: 47: CMCONbits.CIS = 0;
  3169  00232A  96B4               	bcf	4020,3,c	;volatile
  3170                           
  3171                           ;MachineConfig.c: 48: ADFM = 1;
  3172  00232C  8EC0               	bsf	4032,7,c	;volatile
  3173                           
  3174                           ;MachineConfig.c: 51: INT1IE = 1;
  3175  00232E  86F0               	bsf	intcon3,3,c	;volatile
  3176                           
  3177                           ;MachineConfig.c: 52: TMR0IE = 1;
  3178  002330  8AF2               	bsf	intcon,5,c	;volatile
  3179                           
  3180                           ;MachineConfig.c: 53: TMR1IE = 1;
  3181  002332  809D               	bsf	3997,0,c	;volatile
  3182                           
  3183                           ;MachineConfig.c: 54: (INTCONbits.GIE = 0);
  3184  002334  9EF2               	bcf	intcon,7,c	;volatile
  3185  002336  0012               	return		;funcret
  3186  002338                     __end_of_machineConfig:
  3187                           	opt stack 0
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           prodh	equ	0xFF4
  3193                           prodl	equ	0xFF3
  3194                           intcon	equ	0xFF2
  3195                           intcon3	equ	0xFF0
  3196                           postinc0	equ	0xFEE
  3197                           wreg	equ	0xFE8
  3198                           postdec1	equ	0xFE5
  3199                           fsr1l	equ	0xFE1
  3200                           indf2	equ	0xFDF
  3201                           postinc2	equ	0xFDE
  3202                           postdec2	equ	0xFDD
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _initUI *****************
  3208 ;; Defined at:
  3209 ;;		line 62 in file "UI.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;Total ram usage:        0 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:   12
  3230 ;; This function calls:
  3231 ;;		_change_state_to_menu_start
  3232 ;;		_loadRTC
  3233 ;; This function is called by:
  3234 ;;		_main
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text12
  3239  0027DE                     __ptext12:
  3240                           	opt stack 0
  3241  0027DE                     _initUI:
  3242                           	opt stack 18
  3243                           
  3244                           ;UI.c: 63: (INTCONbits.GIE = 1);
  3245                           
  3246                           ;incstack = 0
  3247  0027DE  8EF2               	bsf	intcon,7,c	;volatile
  3248                           
  3249                           ;UI.c: 64: machine_state = UI_state;
  3250  0027E0  0E00               	movlw	0
  3251  0027E2  0100               	movlb	0	; () banked
  3252  0027E4  6FF4               	movwf	_machine_state& (0+255),b
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;UI.c: 66: loadRTC();
  3256  0027E6  ECF3  F00E         	call	_loadRTC	;wreg free
  3257                           
  3258                           ;UI.c: 68: change_state_to_menu_start();
  3259  0027EA  EC6A  F013         	call	_change_state_to_menu_start	;wreg free
  3260                           
  3261                           ;UI.c: 69: firstboot = 1;
  3262  0027EE  0E00               	movlw	0
  3263  0027F0  6E6E               	movwf	_firstboot+1,c
  3264  0027F2  0E01               	movlw	1
  3265  0027F4  6E6D               	movwf	_firstboot,c
  3266  0027F6  0012               	return		;funcret
  3267  0027F8                     __end_of_initUI:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           intcon	equ	0xFF2
  3276                           intcon3	equ	0xFF0
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           postdec1	equ	0xFE5
  3280                           fsr1l	equ	0xFE1
  3281                           indf2	equ	0xFDF
  3282                           postinc2	equ	0xFDE
  3283                           postdec2	equ	0xFDD
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function _loadRTC *****************
  3289 ;; Defined at:
  3290 ;;		line 26 in file "RTC.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;		None
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  i               2   22[BANK0 ] int 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;Total ram usage:        3 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    9
  3311 ;; This function calls:
  3312 ;;		_I2C_Master_Init
  3313 ;;		_I2C_Master_Start
  3314 ;;		_I2C_Master_Stop
  3315 ;;		_I2C_Master_Write
  3316 ;; This function is called by:
  3317 ;;		_initUI
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text13
  3322  001DE6                     __ptext13:
  3323                           	opt stack 0
  3324  001DE6                     _loadRTC:
  3325                           	opt stack 20
  3326                           
  3327                           ;RTC.c: 28: I2C_Master_Init(10000);
  3328                           
  3329                           ;incstack = 0
  3330  001DE6  0E10               	movlw	16
  3331  001DE8  0100               	movlb	0	; () banked
  3332  001DEA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3333  001DEC  0E27               	movlw	39
  3334  001DEE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3335  001DF0  0E00               	movlw	0
  3336  001DF2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3337  001DF4  0E00               	movlw	0
  3338  001DF6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3339  001DF8  ECCD  F010         	call	_I2C_Master_Init	;wreg free
  3340                           
  3341                           ;RTC.c: 30: (INTCONbits.GIE = 0);
  3342  001DFC  9EF2               	bcf	intcon,7,c	;volatile
  3343                           
  3344                           ;RTC.c: 32: I2C_Master_Start();
  3345  001DFE  EC66  F014         	call	_I2C_Master_Start	;wreg free
  3346                           
  3347                           ;RTC.c: 33: I2C_Master_Write(0b11010000);
  3348  001E02  0E00               	movlw	0
  3349  001E04  0100               	movlb	0	; () banked
  3350  001E06  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3351  001E08  0ED0               	movlw	208
  3352  001E0A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3353  001E0C  EC54  F014         	call	_I2C_Master_Write	;wreg free
  3354                           
  3355                           ;RTC.c: 34: I2C_Master_Write(0x00);
  3356  001E10  0E00               	movlw	0
  3357  001E12  0100               	movlb	0	; () banked
  3358  001E14  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3359  001E16  0E00               	movlw	0
  3360  001E18  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3361  001E1A  EC54  F014         	call	_I2C_Master_Write	;wreg free
  3362                           
  3363                           ;RTC.c: 35: for(int i = 0; i<7; i++){
  3364  001E1E  0E00               	movlw	0
  3365  001E20  0100               	movlb	0	; () banked
  3366  001E22  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3367  001E24  0E00               	movlw	0
  3368  001E26  6F96               	movwf	loadRTC@i& (0+255),b
  3369  001E28                     l4423:
  3370                           
  3371                           ; BSR set to: 0
  3372  001E28  0100               	movlb	0	; () banked
  3373  001E2A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3374  001E2C  D008               	goto	l4427
  3375  001E2E  0100               	movlb	0	; () banked
  3376  001E30  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3377  001E32  E11B               	bnz	l4433
  3378  001E34  0E07               	movlw	7
  3379  001E36  0100               	movlb	0	; () banked
  3380  001E38  5D96               	subwf	loadRTC@i& (0+255),w,b
  3381  001E3A  B0D8               	btfsc	status,0,c
  3382  001E3C  D016               	goto	l4433
  3383  001E3E                     l4427:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;RTC.c: 36: I2C_Master_Write(time[i]);
  3387  001E3E  0ED4               	movlw	low _time
  3388  001E40  0100               	movlb	0	; () banked
  3389  001E42  2596               	addwf	loadRTC@i& (0+255),w,b
  3390  001E44  6ED9               	movwf	fsr2l,c
  3391  001E46  0E00               	movlw	high _time
  3392  001E48  0100               	movlb	0	; () banked
  3393  001E4A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3394  001E4C  6EDA               	movwf	fsr2h,c
  3395  001E4E  50DF               	movf	indf2,w,c
  3396  001E50  0100               	movlb	0	; () banked
  3397  001E52  6F95               	movwf	??_loadRTC& (0+255),b
  3398  001E54  0100               	movlb	0	; () banked
  3399  001E56  5195               	movf	??_loadRTC& (0+255),w,b
  3400  001E58  0100               	movlb	0	; () banked
  3401  001E5A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3402  001E5C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3403  001E5E  EC54  F014         	call	_I2C_Master_Write	;wreg free
  3404  001E62  0100               	movlb	0	; () banked
  3405  001E64  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3406  001E66  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3407  001E68  D7DF               	goto	l4423
  3408  001E6A                     l4433:
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;RTC.c: 37: }
  3412                           ;RTC.c: 38: I2C_Master_Stop();
  3413  001E6A  EC62  F014         	call	_I2C_Master_Stop	;wreg free
  3414                           
  3415                           ;RTC.c: 39: (INTCONbits.GIE = 1);
  3416  001E6E  8EF2               	bsf	intcon,7,c	;volatile
  3417  001E70  0012               	return		;funcret
  3418  001E72                     __end_of_loadRTC:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           intcon	equ	0xFF2
  3427                           intcon3	equ	0xFF0
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postdec1	equ	0xFE5
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           postinc2	equ	0xFDE
  3434                           postdec2	equ	0xFDD
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           
  3439 ;; *************** function _I2C_Master_Init *****************
  3440 ;; Defined at:
  3441 ;;		line 13 in file "I2C.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  c               4   13[BANK0 ] const unsigned long 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:        8 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    8
  3462 ;; This function calls:
  3463 ;;		___lldiv
  3464 ;; This function is called by:
  3465 ;;		_loadRTC
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text14
  3470  00219A                     __ptext14:
  3471                           	opt stack 0
  3472  00219A                     _I2C_Master_Init:
  3473                           	opt stack 20
  3474                           
  3475                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3476                           
  3477                           ;incstack = 0
  3478  00219A  0E00               	movlw	0
  3479  00219C  6EC7               	movwf	4039,c	;volatile
  3480                           
  3481                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3482  00219E  0E28               	movlw	40
  3483  0021A0  6EC6               	movwf	4038,c	;volatile
  3484                           
  3485                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3486  0021A2  0E00               	movlw	0
  3487  0021A4  6EC5               	movwf	4037,c	;volatile
  3488                           
  3489                           ;I2C.c: 19: SSPADD = (32000000/(4*c))-1;
  3490  0021A6  0E00               	movlw	0
  3491  0021A8  0100               	movlb	0	; () banked
  3492  0021AA  6F80               	movwf	___lldiv@dividend& (0+255),b
  3493  0021AC  0E48               	movlw	72
  3494  0021AE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3495  0021B0  0EE8               	movlw	232
  3496  0021B2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3497  0021B4  0E01               	movlw	1
  3498  0021B6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3499  0021B8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3500  0021BC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3501  0021C0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3502  0021C4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3503  0021C8  0E02               	movlw	2
  3504  0021CA                     u3115:
  3505  0021CA  90D8               	bcf	status,0,c
  3506  0021CC  0100               	movlb	0	; () banked
  3507  0021CE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3508  0021D0  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3509  0021D2  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3510  0021D4  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3511  0021D6  2EE8               	decfsz	wreg,f,c
  3512  0021D8  D7F8               	goto	u3115
  3513  0021DA  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3514  0021DE  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3515  0021E2  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3516  0021E6  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3517  0021EA  EC4D  F00D         	call	___lldiv	;wreg free
  3518  0021EE  0100               	movlb	0	; () banked
  3519  0021F0  0580               	decf	?___lldiv& (0+255),w,b
  3520  0021F2  6EC8               	movwf	4040,c	;volatile
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;I2C.c: 20: TRISC3 = 1;
  3524  0021F4  8694               	bsf	3988,3,c	;volatile
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;I2C.c: 21: TRISC4 = 1;
  3528  0021F6  8894               	bsf	3988,4,c	;volatile
  3529                           
  3530                           ; BSR set to: 0
  3531  0021F8  0012               	return		;funcret
  3532  0021FA                     __end_of_I2C_Master_Init:
  3533                           	opt stack 0
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           intcon3	equ	0xFF0
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function ___lldiv *****************
  3554 ;; Defined at:
  3555 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  dividend        4    0[BANK0 ] unsigned long 
  3558 ;;  divisor         4    4[BANK0 ] unsigned long 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  quotient        4    8[BANK0 ] unsigned long 
  3561 ;;  counter         1   12[BANK0 ] unsigned char 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  4    0[BANK0 ] unsigned long 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3571 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;Total ram usage:       13 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    7
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_I2C_Master_Init
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text15
  3586  001A9A                     __ptext15:
  3587                           	opt stack 0
  3588  001A9A                     ___lldiv:
  3589                           	opt stack 20
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;incstack = 0
  3593  001A9A  0E00               	movlw	0
  3594  001A9C  0100               	movlb	0	; () banked
  3595  001A9E  6F88               	movwf	___lldiv@quotient& (0+255),b
  3596  001AA0  0E00               	movlw	0
  3597  001AA2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3598  001AA4  0E00               	movlw	0
  3599  001AA6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3600  001AA8  0E00               	movlw	0
  3601  001AAA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604  001AAC  0100               	movlb	0	; () banked
  3605  001AAE  5184               	movf	___lldiv@divisor& (0+255),w,b
  3606  001AB0  0100               	movlb	0	; () banked
  3607  001AB2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3608  001AB4  0100               	movlb	0	; () banked
  3609  001AB6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3610  001AB8  0100               	movlb	0	; () banked
  3611  001ABA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3612  001ABC  B4D8               	btfsc	status,2,c
  3613  001ABE  D042               	goto	l1411
  3614                           
  3615                           ; BSR set to: 0
  3616  001AC0  0E01               	movlw	1
  3617  001AC2  0100               	movlb	0	; () banked
  3618  001AC4  6F8C               	movwf	___lldiv@counter& (0+255),b
  3619  001AC6  D008               	goto	l3971
  3620  001AC8                     l3969:
  3621                           
  3622                           ; BSR set to: 0
  3623  001AC8  0100               	movlb	0	; () banked
  3624  001ACA  90D8               	bcf	status,0,c
  3625  001ACC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3626  001ACE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3627  001AD0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3628  001AD2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3629  001AD4  0100               	movlb	0	; () banked
  3630  001AD6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3631  001AD8                     l3971:
  3632                           
  3633                           ; BSR set to: 0
  3634  001AD8  0100               	movlb	0	; () banked
  3635  001ADA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3636  001ADC  D7F5               	goto	l3969
  3637  001ADE                     l3973:
  3638                           
  3639                           ; BSR set to: 0
  3640  001ADE  0100               	movlb	0	; () banked
  3641  001AE0  90D8               	bcf	status,0,c
  3642  001AE2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3643  001AE4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3644  001AE6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3645  001AE8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3646                           
  3647                           ; BSR set to: 0
  3648  001AEA  0100               	movlb	0	; () banked
  3649  001AEC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3650  001AEE  0100               	movlb	0	; () banked
  3651  001AF0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3652  001AF2  0100               	movlb	0	; () banked
  3653  001AF4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3654  001AF6  0100               	movlb	0	; () banked
  3655  001AF8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3656  001AFA  0100               	movlb	0	; () banked
  3657  001AFC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3658  001AFE  0100               	movlb	0	; () banked
  3659  001B00  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3660  001B02  0100               	movlb	0	; () banked
  3661  001B04  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3662  001B06  0100               	movlb	0	; () banked
  3663  001B08  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3664  001B0A  A0D8               	btfss	status,0,c
  3665  001B0C  D012               	goto	l3981
  3666                           
  3667                           ; BSR set to: 0
  3668  001B0E  0100               	movlb	0	; () banked
  3669  001B10  5184               	movf	___lldiv@divisor& (0+255),w,b
  3670  001B12  0100               	movlb	0	; () banked
  3671  001B14  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3672  001B16  0100               	movlb	0	; () banked
  3673  001B18  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3674  001B1A  0100               	movlb	0	; () banked
  3675  001B1C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3676  001B1E  0100               	movlb	0	; () banked
  3677  001B20  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3678  001B22  0100               	movlb	0	; () banked
  3679  001B24  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3680  001B26  0100               	movlb	0	; () banked
  3681  001B28  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3682  001B2A  0100               	movlb	0	; () banked
  3683  001B2C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3684                           
  3685                           ; BSR set to: 0
  3686  001B2E  0100               	movlb	0	; () banked
  3687  001B30  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3688  001B32                     l3981:
  3689                           
  3690                           ; BSR set to: 0
  3691  001B32  0100               	movlb	0	; () banked
  3692  001B34  90D8               	bcf	status,0,c
  3693  001B36  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3694  001B38  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3695  001B3A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3696  001B3C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3697                           
  3698                           ; BSR set to: 0
  3699  001B3E  0100               	movlb	0	; () banked
  3700  001B40  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3701  001B42  D7CD               	goto	l3973
  3702  001B44                     l1411:
  3703                           
  3704                           ; BSR set to: 0
  3705  001B44  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3706  001B48  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3707  001B4C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3708  001B50  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3709                           
  3710                           ; BSR set to: 0
  3711  001B54  0012               	return		;funcret
  3712  001B56                     __end_of___lldiv:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           intcon	equ	0xFF2
  3721                           intcon3	equ	0xFF0
  3722                           postinc0	equ	0xFEE
  3723                           wreg	equ	0xFE8
  3724                           postdec1	equ	0xFE5
  3725                           fsr1l	equ	0xFE1
  3726                           indf2	equ	0xFDF
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733 ;; *************** function _change_state_to_menu_start *****************
  3734 ;; Defined at:
  3735 ;;		line 407 in file "UI.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;		None
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;Total ram usage:        0 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:   11
  3756 ;; This function calls:
  3757 ;;		_lcdInst
  3758 ;;		_printRTC
  3759 ;;		_printf
  3760 ;; This function is called by:
  3761 ;;		_initUI
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text16
  3766  0026D4                     __ptext16:
  3767                           	opt stack 0
  3768  0026D4                     _change_state_to_menu_start:
  3769                           	opt stack 18
  3770                           
  3771                           ;UI.c: 408: cur_state = 0;
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;incstack = 0
  3775  0026D4  0E00               	movlw	0
  3776  0026D6  0100               	movlb	0	; () banked
  3777  0026D8  6FE2               	movwf	(_cur_state+1)& (0+255),b
  3778  0026DA  0E00               	movlw	0
  3779  0026DC  6FE1               	movwf	_cur_state& (0+255),b
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;UI.c: 410: lcdInst(0b10000000);;
  3783  0026DE  0E80               	movlw	128
  3784  0026E0  EC40  F014         	call	_lcdInst
  3785                           
  3786                           ;UI.c: 411: printRTC();
  3787  0026E4  EC52  F006         	call	_printRTC	;wreg free
  3788                           
  3789                           ;UI.c: 412: lcdInst(0b11000000);;
  3790  0026E8  0EC0               	movlw	192
  3791  0026EA  EC40  F014         	call	_lcdInst
  3792                           
  3793                           ;UI.c: 413: printf("PUSH TO CONTINUE");
  3794  0026EE  0E8A               	movlw	low STR_15
  3795  0026F0  0100               	movlb	0	; () banked
  3796  0026F2  6F8E               	movwf	printf@f& (0+255),b
  3797  0026F4  0EFF               	movlw	high STR_15
  3798  0026F6  0100               	movlb	0	; () banked
  3799  0026F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  3800  0026FA  ECAA  F002         	call	_printf	;wreg free
  3801  0026FE  0012               	return		;funcret
  3802  002700                     __end_of_change_state_to_menu_start:
  3803                           	opt stack 0
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           intcon	equ	0xFF2
  3811                           intcon3	equ	0xFF0
  3812                           postinc0	equ	0xFEE
  3813                           wreg	equ	0xFE8
  3814                           postdec1	equ	0xFE5
  3815                           fsr1l	equ	0xFE1
  3816                           indf2	equ	0xFDF
  3817                           postinc2	equ	0xFDE
  3818                           postdec2	equ	0xFDD
  3819                           fsr2h	equ	0xFDA
  3820                           fsr2l	equ	0xFD9
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _initTime *****************
  3824 ;; Defined at:
  3825 ;;		line 15 in file "RTC.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  s               1    wreg     unsigned char 
  3828 ;;  m               1    0[BANK0 ] unsigned char 
  3829 ;;  h               1    1[BANK0 ] unsigned char 
  3830 ;;  w               1    2[BANK0 ] unsigned char 
  3831 ;;  DD              1    3[BANK0 ] unsigned char 
  3832 ;;  MM              1    4[BANK0 ] unsigned char 
  3833 ;;  YY              1    5[BANK0 ] unsigned char 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  s               1    6[BANK0 ] unsigned char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		wreg
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3845 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;Total ram usage:        7 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    7
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text17
  3860  00279E                     __ptext17:
  3861                           	opt stack 0
  3862  00279E                     _initTime:
  3863                           	opt stack 23
  3864                           
  3865                           ;incstack = 0
  3866                           ;initTime@s stored from wreg
  3867  00279E  0100               	movlb	0	; () banked
  3868  0027A0  6F86               	movwf	initTime@s& (0+255),b
  3869                           
  3870                           ;RTC.c: 17: time[0] = s;
  3871  0027A2  C086  F0D4         	movff	initTime@s,_time
  3872                           
  3873                           ;RTC.c: 18: time[1] = m;
  3874  0027A6  C080  F0D5         	movff	initTime@m,_time+1
  3875                           
  3876                           ;RTC.c: 19: time[2] = h;
  3877  0027AA  C081  F0D6         	movff	initTime@h,_time+2
  3878                           
  3879                           ;RTC.c: 20: time[3] = w;
  3880  0027AE  C082  F0D7         	movff	initTime@w,_time+3
  3881                           
  3882                           ;RTC.c: 21: time[4] = DD;
  3883  0027B2  C083  F0D8         	movff	initTime@DD,_time+4
  3884                           
  3885                           ;RTC.c: 22: time[5] = MM;
  3886  0027B6  C084  F0D9         	movff	initTime@MM,_time+5
  3887                           
  3888                           ;RTC.c: 23: time[6] = YY;
  3889  0027BA  C085  F0DA         	movff	initTime@YY,_time+6
  3890  0027BE  0012               	return		;funcret
  3891  0027C0                     __end_of_initTime:
  3892                           	opt stack 0
  3893                           tblptru	equ	0xFF8
  3894                           tblptrh	equ	0xFF7
  3895                           tblptrl	equ	0xFF6
  3896                           tablat	equ	0xFF5
  3897                           prodh	equ	0xFF4
  3898                           prodl	equ	0xFF3
  3899                           intcon	equ	0xFF2
  3900                           intcon3	equ	0xFF0
  3901                           postinc0	equ	0xFEE
  3902                           wreg	equ	0xFE8
  3903                           postdec1	equ	0xFE5
  3904                           fsr1l	equ	0xFE1
  3905                           indf2	equ	0xFDF
  3906                           postinc2	equ	0xFDE
  3907                           postdec2	equ	0xFDD
  3908                           fsr2h	equ	0xFDA
  3909                           fsr2l	equ	0xFD9
  3910                           status	equ	0xFD8
  3911                           
  3912 ;; *************** function _initLCD *****************
  3913 ;; Defined at:
  3914 ;;		line 46 in file "lcd.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;		None
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;		None
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      void 
  3921 ;; Registers used:
  3922 ;;		wreg, status,2, status,0, cstack
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;Total ram usage:        1 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    9
  3935 ;; This function calls:
  3936 ;;		_lcdInst
  3937 ;; This function is called by:
  3938 ;;		_main
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text18
  3943  002338                     __ptext18:
  3944                           	opt stack 0
  3945  002338                     _initLCD:
  3946                           	opt stack 21
  3947                           
  3948                           ;lcd.c: 47: _delay((unsigned long)((15)*(32000000/4000.0)));
  3949                           
  3950                           ;incstack = 0
  3951  002338  0E9C               	movlw	156
  3952  00233A  0100               	movlb	0	; () banked
  3953  00233C  6F83               	movwf	??_initLCD& (0+255),b
  3954  00233E  0ED7               	movlw	215
  3955  002340                     u4487:
  3956  002340  2EE8               	decfsz	wreg,f,c
  3957  002342  D7FE               	bra	u4487
  3958  002344  2F83               	decfsz	??_initLCD& (0+255),f,b
  3959  002346  D7FC               	bra	u4487
  3960                           
  3961                           ;lcd.c: 48: lcdInst(0b00110011);
  3962  002348  0E33               	movlw	51
  3963  00234A  EC40  F014         	call	_lcdInst
  3964                           
  3965                           ;lcd.c: 49: lcdInst(0b00110010);
  3966  00234E  0E32               	movlw	50
  3967  002350  EC40  F014         	call	_lcdInst
  3968                           
  3969                           ;lcd.c: 51: lcdInst(0b00101000);
  3970  002354  0E28               	movlw	40
  3971  002356  EC40  F014         	call	_lcdInst
  3972                           
  3973                           ;lcd.c: 52: lcdInst(0b00001100);
  3974  00235A  0E0C               	movlw	12
  3975  00235C  EC40  F014         	call	_lcdInst
  3976                           
  3977                           ;lcd.c: 53: lcdInst(0b00000110);
  3978  002360  0E06               	movlw	6
  3979  002362  EC40  F014         	call	_lcdInst
  3980                           
  3981                           ;lcd.c: 54: lcdInst(0b00000001);
  3982  002366  0E01               	movlw	1
  3983  002368  EC40  F014         	call	_lcdInst
  3984                           
  3985                           ;lcd.c: 55: _delay((unsigned long)((15)*(32000000/4000.0)));
  3986  00236C  0E9C               	movlw	156
  3987  00236E  0100               	movlb	0	; () banked
  3988  002370  6F83               	movwf	??_initLCD& (0+255),b
  3989  002372  0ED7               	movlw	215
  3990  002374                     u4497:
  3991  002374  2EE8               	decfsz	wreg,f,c
  3992  002376  D7FE               	bra	u4497
  3993  002378  2F83               	decfsz	??_initLCD& (0+255),f,b
  3994  00237A  D7FC               	bra	u4497
  3995  00237C  0012               	return		;funcret
  3996  00237E                     __end_of_initLCD:
  3997                           	opt stack 0
  3998                           tblptru	equ	0xFF8
  3999                           tblptrh	equ	0xFF7
  4000                           tblptrl	equ	0xFF6
  4001                           tablat	equ	0xFF5
  4002                           prodh	equ	0xFF4
  4003                           prodl	equ	0xFF3
  4004                           intcon	equ	0xFF2
  4005                           intcon3	equ	0xFF0
  4006                           postinc0	equ	0xFEE
  4007                           wreg	equ	0xFE8
  4008                           postdec1	equ	0xFE5
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           postdec2	equ	0xFDD
  4013                           fsr2h	equ	0xFDA
  4014                           fsr2l	equ	0xFD9
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _UI *****************
  4018 ;; Defined at:
  4019 ;;		line 73 in file "UI.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;		None
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  i               1   83[BANK0 ] unsigned char 
  4024 ;;  i               1   82[BANK0 ] unsigned char 
  4025 ;;  i               1   81[BANK0 ] unsigned char 
  4026 ;;  i               1   80[BANK0 ] unsigned char 
  4027 ;;  i               1   79[BANK0 ] unsigned char 
  4028 ;;  i               1   78[BANK0 ] unsigned char 
  4029 ;;  i               1   77[BANK0 ] unsigned char 
  4030 ;;  i               1   76[BANK0 ] unsigned char 
  4031 ;;  i               1   75[BANK0 ] unsigned char 
  4032 ;;  i               1   74[BANK0 ] unsigned char 
  4033 ;;  i               1   73[BANK0 ] unsigned char 
  4034 ;;  i               1   72[BANK0 ] unsigned char 
  4035 ;;  i               1   71[BANK0 ] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      void 
  4038 ;; Registers used:
  4039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;Total ram usage:       16 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:   11
  4052 ;; This function calls:
  4053 ;;		___awdiv
  4054 ;;		___awmod
  4055 ;;		_lcdInst
  4056 ;;		_printRTC
  4057 ;;		_printf
  4058 ;; This function is called by:
  4059 ;;		_main
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text19
  4064  000012                     __ptext19:
  4065                           	opt stack 0
  4066  000012                     _UI:
  4067                           	opt stack 19
  4068                           
  4069                           ;UI.c: 74: if(machine_state == DoneSorting_state){
  4070                           
  4071                           ;incstack = 0
  4072  000012  0E02               	movlw	2
  4073  000014  0100               	movlb	0	; () banked
  4074  000016  19F4               	xorwf	_machine_state& (0+255),w,b
  4075  000018  A4D8               	btfss	status,2,c
  4076  00001A  D060               	goto	l4773
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;UI.c: 75: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4080  00001C  0E01               	movlw	1
  4081  00001E  EC40  F014         	call	_lcdInst
  4082  000022  0E68               	movlw	104
  4083  000024  0100               	movlb	0	; () banked
  4084  000026  6FC4               	movwf	??_UI& (0+255),b
  4085  000028  0EE4               	movlw	228
  4086  00002A                     u4507:
  4087  00002A  2EE8               	decfsz	wreg,f,c
  4088  00002C  D7FE               	bra	u4507
  4089  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4090  000030  D7FC               	bra	u4507
  4091  000032  F000               	nop	
  4092                           
  4093                           ;UI.c: 76: lcdInst(0b10000000);;
  4094  000034  0E80               	movlw	128
  4095  000036  EC40  F014         	call	_lcdInst
  4096                           
  4097                           ;UI.c: 77: printf("Sort complete");
  4098  00003A  0E9B               	movlw	low STR_1
  4099  00003C  0100               	movlb	0	; () banked
  4100  00003E  6F8E               	movwf	printf@f& (0+255),b
  4101  000040  0EFF               	movlw	high STR_1
  4102  000042  0100               	movlb	0	; () banked
  4103  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4104  000046  ECAA  F002         	call	_printf	;wreg free
  4105                           
  4106                           ;UI.c: 78: lcdInst(0b11000000);;
  4107  00004A  0EC0               	movlw	192
  4108  00004C  EC40  F014         	call	_lcdInst
  4109                           
  4110                           ;UI.c: 79: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4111  000050  0E0E               	movlw	14
  4112  000052  0100               	movlb	0	; () banked
  4113  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4114  000056  0E10               	movlw	16
  4115  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4116  00005A  C0F1  F080         	movff	_total_time,___awmod@dividend
  4117  00005E  C0F2  F081         	movff	_total_time+1,___awmod@dividend+1
  4118  000062  EC56  F00E         	call	___awmod	;wreg free
  4119  000066  C080  F0C5         	movff	?___awmod,_UI$1921
  4120  00006A  C081  F0C6         	movff	?___awmod+1,_UI$1921+1
  4121                           
  4122                           ;UI.c: 79: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4123  00006E  0EEC               	movlw	low STR_2
  4124  000070  0100               	movlb	0	; () banked
  4125  000072  6F8E               	movwf	printf@f& (0+255),b
  4126  000074  0EFD               	movlw	high STR_2
  4127  000076  0100               	movlb	0	; () banked
  4128  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4129  00007A  0E00               	movlw	0
  4130  00007C  0100               	movlb	0	; () banked
  4131  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4132  000080  0E00               	movlw	0
  4133  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4134  000084  0E0E               	movlw	14
  4135  000086  0100               	movlb	0	; () banked
  4136  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4137  00008A  0E10               	movlw	16
  4138  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4139  00008E  C0F1  F080         	movff	_total_time,___awmod@dividend
  4140  000092  C0F2  F081         	movff	_total_time+1,___awmod@dividend+1
  4141  000096  EC56  F00E         	call	___awmod	;wreg free
  4142  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4143  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4144  0000A2  0E00               	movlw	0
  4145  0000A4  0100               	movlb	0	; () banked
  4146  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4147  0000A8  0E3C               	movlw	60
  4148  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4149  0000AC  ECEE  F00C         	call	___awdiv	;wreg free
  4150  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4151  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4152  0000B8  C0C5  F080         	movff	_UI$1921,___awmod@dividend
  4153  0000BC  C0C6  F081         	movff	_UI$1921+1,___awmod@dividend+1
  4154  0000C0  0E00               	movlw	0
  4155  0000C2  0100               	movlb	0	; () banked
  4156  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4157  0000C6  0E3C               	movlw	60
  4158  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4159  0000CA  EC56  F00E         	call	___awmod	;wreg free
  4160  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4161  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4162  0000D6  ECAA  F002         	call	_printf	;wreg free
  4163                           
  4164                           ;UI.c: 80: }
  4165  0000DA  D235               	goto	l5029
  4166  0000DC                     l4773:
  4167                           
  4168                           ;UI.c: 81: else if(cur_state == 0){
  4169  0000DC  0100               	movlb	0	; () banked
  4170  0000DE  51E1               	movf	_cur_state& (0+255),w,b
  4171  0000E0  0100               	movlb	0	; () banked
  4172  0000E2  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4173  0000E4  A4D8               	btfss	status,2,c
  4174  0000E6  D22F               	goto	l5029
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;UI.c: 82: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4178  0000E8  0E00               	movlw	0
  4179  0000EA  0100               	movlb	0	; () banked
  4180  0000EC  6FC7               	movwf	UI@i& (0+255),b
  4181  0000EE                     l4777:
  4182                           
  4183                           ; BSR set to: 0
  4184  0000EE  0E63               	movlw	99
  4185  0000F0  0100               	movlb	0	; () banked
  4186  0000F2  65C7               	cpfsgt	UI@i& (0+255),b
  4187  0000F4  D001               	goto	l4781
  4188  0000F6  D00C               	goto	l4785
  4189  0000F8                     l4781:
  4190                           
  4191                           ; BSR set to: 0
  4192  0000F8  0E68               	movlw	104
  4193  0000FA  0100               	movlb	0	; () banked
  4194  0000FC  6FC4               	movwf	??_UI& (0+255),b
  4195  0000FE  0EE4               	movlw	228
  4196  000100                     u4517:
  4197  000100  2EE8               	decfsz	wreg,f,c
  4198  000102  D7FE               	bra	u4517
  4199  000104  2FC4               	decfsz	??_UI& (0+255),f,b
  4200  000106  D7FC               	bra	u4517
  4201  000108  F000               	nop	
  4202  00010A  0100               	movlb	0	; () banked
  4203  00010C  2BC7               	incf	UI@i& (0+255),f,b
  4204  00010E  D7EF               	goto	l4777
  4205  000110                     l4785:
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;UI.c: 83: if(cur_state == 0){
  4209  000110  0100               	movlb	0	; () banked
  4210  000112  51E1               	movf	_cur_state& (0+255),w,b
  4211  000114  0100               	movlb	0	; () banked
  4212  000116  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4213  000118  A4D8               	btfss	status,2,c
  4214  00011A  D215               	goto	l5029
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;UI.c: 84: printRTC();
  4218  00011C  EC52  F006         	call	_printRTC	;wreg free
  4219                           
  4220                           ;UI.c: 85: }
  4221                           ;UI.c: 86: }
  4222                           ;UI.c: 87: while(logstate){
  4223  000120  D212               	goto	l5029
  4224  000122                     l4789:
  4225                           
  4226                           ;UI.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4227  000122  0E01               	movlw	1
  4228  000124  EC40  F014         	call	_lcdInst
  4229  000128  0E68               	movlw	104
  4230  00012A  0100               	movlb	0	; () banked
  4231  00012C  6FC4               	movwf	??_UI& (0+255),b
  4232  00012E  0EE4               	movlw	228
  4233  000130                     u4527:
  4234  000130  2EE8               	decfsz	wreg,f,c
  4235  000132  D7FE               	bra	u4527
  4236  000134  2FC4               	decfsz	??_UI& (0+255),f,b
  4237  000136  D7FC               	bra	u4527
  4238  000138  F000               	nop	
  4239                           
  4240                           ;UI.c: 90: lcdInst(0b10000000);;
  4241  00013A  0E80               	movlw	128
  4242  00013C  EC40  F014         	call	_lcdInst
  4243                           
  4244                           ;UI.c: 91: printf("-- Log %2d here--", log);
  4245  000140  0E01               	movlw	low STR_3
  4246  000142  0100               	movlb	0	; () banked
  4247  000144  6F8E               	movwf	printf@f& (0+255),b
  4248  000146  0EFE               	movlw	high STR_3
  4249  000148  0100               	movlb	0	; () banked
  4250  00014A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4251  00014C  C0ED  F090         	movff	_log,?_printf+2
  4252  000150  C0EE  F091         	movff	_log+1,?_printf+3
  4253  000154  ECAA  F002         	call	_printf	;wreg free
  4254                           
  4255                           ;UI.c: 92: lcdInst(0b11000000);;
  4256  000158  0EC0               	movlw	192
  4257  00015A  EC40  F014         	call	_lcdInst
  4258                           
  4259                           ;UI.c: 93: printf("Pause:< | Back:>");
  4260  00015E  0E79               	movlw	low STR_4
  4261  000160  0100               	movlb	0	; () banked
  4262  000162  6F8E               	movwf	printf@f& (0+255),b
  4263  000164  0EFF               	movlw	high STR_4
  4264  000166  0100               	movlb	0	; () banked
  4265  000168  6F8F               	movwf	(printf@f+1)& (0+255),b
  4266  00016A  ECAA  F002         	call	_printf	;wreg free
  4267                           
  4268                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if(
      +                          !logstate){break;}
  4269  00016E  0E00               	movlw	0
  4270  000170  0100               	movlb	0	; () banked
  4271  000172  6FC8               	movwf	UI@i_636& (0+255),b
  4272  000174                     l4803:
  4273                           
  4274                           ; BSR set to: 0
  4275  000174  0E63               	movlw	99
  4276  000176  0100               	movlb	0	; () banked
  4277  000178  65C8               	cpfsgt	UI@i_636& (0+255),b
  4278  00017A  D001               	goto	l4807
  4279  00017C  D00C               	goto	l4811
  4280  00017E                     l4807:
  4281                           
  4282                           ; BSR set to: 0
  4283  00017E  0E68               	movlw	104
  4284  000180  0100               	movlb	0	; () banked
  4285  000182  6FC4               	movwf	??_UI& (0+255),b
  4286  000184  0EE4               	movlw	228
  4287  000186                     u4537:
  4288  000186  2EE8               	decfsz	wreg,f,c
  4289  000188  D7FE               	bra	u4537
  4290  00018A  2FC4               	decfsz	??_UI& (0+255),f,b
  4291  00018C  D7FC               	bra	u4537
  4292  00018E  F000               	nop	
  4293  000190  0100               	movlb	0	; () banked
  4294  000192  2BC8               	incf	UI@i_636& (0+255),f,b
  4295  000194  D7EF               	goto	l4803
  4296  000196                     l4811:
  4297                           
  4298                           ; BSR set to: 0
  4299  000196  0100               	movlb	0	; () banked
  4300  000198  51EF               	movf	_logstate& (0+255),w,b
  4301  00019A  0100               	movlb	0	; () banked
  4302  00019C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4303  00019E  B4D8               	btfsc	status,2,c
  4304  0001A0  0012               	return	
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;UI.c: 96: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if(
      +                          !logstate){break;}
  4308                           
  4309                           ; BSR set to: 0
  4310                           
  4311                           ; BSR set to: 0
  4312  0001A2  0E00               	movlw	0
  4313  0001A4  0100               	movlb	0	; () banked
  4314  0001A6  6FC9               	movwf	UI@i_637& (0+255),b
  4315  0001A8                     l4817:
  4316                           
  4317                           ; BSR set to: 0
  4318  0001A8  0E63               	movlw	99
  4319  0001AA  0100               	movlb	0	; () banked
  4320  0001AC  65C9               	cpfsgt	UI@i_637& (0+255),b
  4321  0001AE  D001               	goto	l4821
  4322  0001B0  D00C               	goto	l4825
  4323  0001B2                     l4821:
  4324                           
  4325                           ; BSR set to: 0
  4326  0001B2  0E68               	movlw	104
  4327  0001B4  0100               	movlb	0	; () banked
  4328  0001B6  6FC4               	movwf	??_UI& (0+255),b
  4329  0001B8  0EE4               	movlw	228
  4330  0001BA                     u4547:
  4331  0001BA  2EE8               	decfsz	wreg,f,c
  4332  0001BC  D7FE               	bra	u4547
  4333  0001BE  2FC4               	decfsz	??_UI& (0+255),f,b
  4334  0001C0  D7FC               	bra	u4547
  4335  0001C2  F000               	nop	
  4336  0001C4  0100               	movlb	0	; () banked
  4337  0001C6  2BC9               	incf	UI@i_637& (0+255),f,b
  4338  0001C8  D7EF               	goto	l4817
  4339  0001CA                     l4825:
  4340                           
  4341                           ; BSR set to: 0
  4342  0001CA  0100               	movlb	0	; () banked
  4343  0001CC  51EF               	movf	_logstate& (0+255),w,b
  4344  0001CE  0100               	movlb	0	; () banked
  4345  0001D0  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4346  0001D2  B4D8               	btfsc	status,2,c
  4347  0001D4  0012               	return	
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;UI.c: 98: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4351                           
  4352                           ; BSR set to: 0
  4353                           
  4354                           ; BSR set to: 0
  4355  0001D6  0E01               	movlw	1
  4356  0001D8  EC40  F014         	call	_lcdInst
  4357  0001DC  0E68               	movlw	104
  4358  0001DE  0100               	movlb	0	; () banked
  4359  0001E0  6FC4               	movwf	??_UI& (0+255),b
  4360  0001E2  0EE4               	movlw	228
  4361  0001E4                     u4557:
  4362  0001E4  2EE8               	decfsz	wreg,f,c
  4363  0001E6  D7FE               	bra	u4557
  4364  0001E8  2FC4               	decfsz	??_UI& (0+255),f,b
  4365  0001EA  D7FC               	bra	u4557
  4366  0001EC  F000               	nop	
  4367                           
  4368                           ;UI.c: 99: lcdInst(0b10000000);;
  4369  0001EE  0E80               	movlw	128
  4370  0001F0  EC40  F014         	call	_lcdInst
  4371                           
  4372                           ;UI.c: 100: printf("Start:");
  4373  0001F4  0EC5               	movlw	low STR_5
  4374  0001F6  0100               	movlb	0	; () banked
  4375  0001F8  6F8E               	movwf	printf@f& (0+255),b
  4376  0001FA  0EFF               	movlw	high STR_5
  4377  0001FC  0100               	movlb	0	; () banked
  4378  0001FE  6F8F               	movwf	(printf@f+1)& (0+255),b
  4379  000200  ECAA  F002         	call	_printf	;wreg free
  4380                           
  4381                           ;UI.c: 101: lcdInst(0b11000000);;
  4382  000204  0EC0               	movlw	192
  4383  000206  EC40  F014         	call	_lcdInst
  4384                           
  4385                           ;UI.c: 102: printf("06Feb | 01:08:56");
  4386  00020A  0EF1               	movlw	low STR_6
  4387  00020C  0100               	movlb	0	; () banked
  4388  00020E  6F8E               	movwf	printf@f& (0+255),b
  4389  000210  0EFE               	movlw	high STR_6
  4390  000212  0100               	movlb	0	; () banked
  4391  000214  6F8F               	movwf	(printf@f+1)& (0+255),b
  4392  000216  ECAA  F002         	call	_printf	;wreg free
  4393                           
  4394                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4395  00021A  0E00               	movlw	0
  4396  00021C  0100               	movlb	0	; () banked
  4397  00021E  6FCA               	movwf	UI@i_640& (0+255),b
  4398  000220                     l4843:
  4399                           
  4400                           ; BSR set to: 0
  4401  000220  0E63               	movlw	99
  4402  000222  0100               	movlb	0	; () banked
  4403  000224  65CA               	cpfsgt	UI@i_640& (0+255),b
  4404  000226  D001               	goto	l4847
  4405  000228  D00C               	goto	l4851
  4406  00022A                     l4847:
  4407                           
  4408                           ; BSR set to: 0
  4409  00022A  0E68               	movlw	104
  4410  00022C  0100               	movlb	0	; () banked
  4411  00022E  6FC4               	movwf	??_UI& (0+255),b
  4412  000230  0EE4               	movlw	228
  4413  000232                     u4567:
  4414  000232  2EE8               	decfsz	wreg,f,c
  4415  000234  D7FE               	bra	u4567
  4416  000236  2FC4               	decfsz	??_UI& (0+255),f,b
  4417  000238  D7FC               	bra	u4567
  4418  00023A  F000               	nop	
  4419  00023C  0100               	movlb	0	; () banked
  4420  00023E  2BCA               	incf	UI@i_640& (0+255),f,b
  4421  000240  D7EF               	goto	l4843
  4422  000242                     l4851:
  4423                           
  4424                           ; BSR set to: 0
  4425  000242  0100               	movlb	0	; () banked
  4426  000244  51EF               	movf	_logstate& (0+255),w,b
  4427  000246  0100               	movlb	0	; () banked
  4428  000248  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4429  00024A  B4D8               	btfsc	status,2,c
  4430  00024C  0012               	return	
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4434                           
  4435                           ; BSR set to: 0
  4436                           
  4437                           ; BSR set to: 0
  4438  00024E  0E00               	movlw	0
  4439  000250  0100               	movlb	0	; () banked
  4440  000252  6FCB               	movwf	UI@i_641& (0+255),b
  4441  000254                     l4857:
  4442                           
  4443                           ; BSR set to: 0
  4444  000254  0E63               	movlw	99
  4445  000256  0100               	movlb	0	; () banked
  4446  000258  65CB               	cpfsgt	UI@i_641& (0+255),b
  4447  00025A  D001               	goto	l4861
  4448  00025C  D00C               	goto	l4865
  4449  00025E                     l4861:
  4450                           
  4451                           ; BSR set to: 0
  4452  00025E  0E68               	movlw	104
  4453  000260  0100               	movlb	0	; () banked
  4454  000262  6FC4               	movwf	??_UI& (0+255),b
  4455  000264  0EE4               	movlw	228
  4456  000266                     u4577:
  4457  000266  2EE8               	decfsz	wreg,f,c
  4458  000268  D7FE               	bra	u4577
  4459  00026A  2FC4               	decfsz	??_UI& (0+255),f,b
  4460  00026C  D7FC               	bra	u4577
  4461  00026E  F000               	nop	
  4462  000270  0100               	movlb	0	; () banked
  4463  000272  2BCB               	incf	UI@i_641& (0+255),f,b
  4464  000274  D7EF               	goto	l4857
  4465  000276                     l4865:
  4466                           
  4467                           ; BSR set to: 0
  4468  000276  0100               	movlb	0	; () banked
  4469  000278  51EF               	movf	_logstate& (0+255),w,b
  4470  00027A  0100               	movlb	0	; () banked
  4471  00027C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4472  00027E  B4D8               	btfsc	status,2,c
  4473  000280  0012               	return	
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;UI.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4477                           
  4478                           ; BSR set to: 0
  4479                           
  4480                           ; BSR set to: 0
  4481  000282  0E01               	movlw	1
  4482  000284  EC40  F014         	call	_lcdInst
  4483  000288  0E68               	movlw	104
  4484  00028A  0100               	movlb	0	; () banked
  4485  00028C  6FC4               	movwf	??_UI& (0+255),b
  4486  00028E  0EE4               	movlw	228
  4487  000290                     u4587:
  4488  000290  2EE8               	decfsz	wreg,f,c
  4489  000292  D7FE               	bra	u4587
  4490  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  4491  000296  D7FC               	bra	u4587
  4492  000298  F000               	nop	
  4493                           
  4494                           ;UI.c: 108: lcdInst(0b10000000);;
  4495  00029A  0E80               	movlw	128
  4496  00029C  EC40  F014         	call	_lcdInst
  4497                           
  4498                           ;UI.c: 109: printf("Duration:");
  4499  0002A0  0EB4               	movlw	low STR_7
  4500  0002A2  0100               	movlb	0	; () banked
  4501  0002A4  6F8E               	movwf	printf@f& (0+255),b
  4502  0002A6  0EFF               	movlw	high STR_7
  4503  0002A8  0100               	movlb	0	; () banked
  4504  0002AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4505  0002AC  ECAA  F002         	call	_printf	;wreg free
  4506                           
  4507                           ;UI.c: 110: lcdInst(0b11000000);;
  4508  0002B0  0EC0               	movlw	192
  4509  0002B2  EC40  F014         	call	_lcdInst
  4510                           
  4511                           ;UI.c: 111: printf("%d min(s) %d secs", 2, 42);
  4512  0002B6  0E13               	movlw	low STR_8
  4513  0002B8  0100               	movlb	0	; () banked
  4514  0002BA  6F8E               	movwf	printf@f& (0+255),b
  4515  0002BC  0EFE               	movlw	high STR_8
  4516  0002BE  0100               	movlb	0	; () banked
  4517  0002C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  4518  0002C2  0E00               	movlw	0
  4519  0002C4  0100               	movlb	0	; () banked
  4520  0002C6  6F91               	movwf	(?_printf+3)& (0+255),b
  4521  0002C8  0E02               	movlw	2
  4522  0002CA  6F90               	movwf	(?_printf+2)& (0+255),b
  4523  0002CC  0E00               	movlw	0
  4524  0002CE  0100               	movlb	0	; () banked
  4525  0002D0  6F93               	movwf	(?_printf+5)& (0+255),b
  4526  0002D2  0E2A               	movlw	42
  4527  0002D4  6F92               	movwf	(?_printf+4)& (0+255),b
  4528  0002D6  ECAA  F002         	call	_printf	;wreg free
  4529                           
  4530                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4531  0002DA  0E00               	movlw	0
  4532  0002DC  0100               	movlb	0	; () banked
  4533  0002DE  6FCC               	movwf	UI@i_644& (0+255),b
  4534  0002E0                     l4883:
  4535                           
  4536                           ; BSR set to: 0
  4537  0002E0  0E63               	movlw	99
  4538  0002E2  0100               	movlb	0	; () banked
  4539  0002E4  65CC               	cpfsgt	UI@i_644& (0+255),b
  4540  0002E6  D001               	goto	l4887
  4541  0002E8  D00C               	goto	l4891
  4542  0002EA                     l4887:
  4543                           
  4544                           ; BSR set to: 0
  4545  0002EA  0E68               	movlw	104
  4546  0002EC  0100               	movlb	0	; () banked
  4547  0002EE  6FC4               	movwf	??_UI& (0+255),b
  4548  0002F0  0EE4               	movlw	228
  4549  0002F2                     u4597:
  4550  0002F2  2EE8               	decfsz	wreg,f,c
  4551  0002F4  D7FE               	bra	u4597
  4552  0002F6  2FC4               	decfsz	??_UI& (0+255),f,b
  4553  0002F8  D7FC               	bra	u4597
  4554  0002FA  F000               	nop	
  4555  0002FC  0100               	movlb	0	; () banked
  4556  0002FE  2BCC               	incf	UI@i_644& (0+255),f,b
  4557  000300  D7EF               	goto	l4883
  4558  000302                     l4891:
  4559                           
  4560                           ; BSR set to: 0
  4561  000302  0100               	movlb	0	; () banked
  4562  000304  51EF               	movf	_logstate& (0+255),w,b
  4563  000306  0100               	movlb	0	; () banked
  4564  000308  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4565  00030A  B4D8               	btfsc	status,2,c
  4566  00030C  0012               	return	
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4570                           
  4571                           ; BSR set to: 0
  4572                           
  4573                           ; BSR set to: 0
  4574  00030E  0E00               	movlw	0
  4575  000310  0100               	movlb	0	; () banked
  4576  000312  6FCD               	movwf	UI@i_645& (0+255),b
  4577  000314                     l4897:
  4578                           
  4579                           ; BSR set to: 0
  4580  000314  0E63               	movlw	99
  4581  000316  0100               	movlb	0	; () banked
  4582  000318  65CD               	cpfsgt	UI@i_645& (0+255),b
  4583  00031A  D001               	goto	l4901
  4584  00031C  D00C               	goto	l4905
  4585  00031E                     l4901:
  4586                           
  4587                           ; BSR set to: 0
  4588  00031E  0E68               	movlw	104
  4589  000320  0100               	movlb	0	; () banked
  4590  000322  6FC4               	movwf	??_UI& (0+255),b
  4591  000324  0EE4               	movlw	228
  4592  000326                     u4607:
  4593  000326  2EE8               	decfsz	wreg,f,c
  4594  000328  D7FE               	bra	u4607
  4595  00032A  2FC4               	decfsz	??_UI& (0+255),f,b
  4596  00032C  D7FC               	bra	u4607
  4597  00032E  F000               	nop	
  4598  000330  0100               	movlb	0	; () banked
  4599  000332  2BCD               	incf	UI@i_645& (0+255),f,b
  4600  000334  D7EF               	goto	l4897
  4601  000336                     l4905:
  4602                           
  4603                           ; BSR set to: 0
  4604  000336  0100               	movlb	0	; () banked
  4605  000338  51EF               	movf	_logstate& (0+255),w,b
  4606  00033A  0100               	movlb	0	; () banked
  4607  00033C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4608  00033E  B4D8               	btfsc	status,2,c
  4609  000340  0012               	return	
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;UI.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4613                           
  4614                           ; BSR set to: 0
  4615                           
  4616                           ; BSR set to: 0
  4617  000342  0E01               	movlw	1
  4618  000344  EC40  F014         	call	_lcdInst
  4619  000348  0E68               	movlw	104
  4620  00034A  0100               	movlb	0	; () banked
  4621  00034C  6FC4               	movwf	??_UI& (0+255),b
  4622  00034E  0EE4               	movlw	228
  4623  000350                     u4617:
  4624  000350  2EE8               	decfsz	wreg,f,c
  4625  000352  D7FE               	bra	u4617
  4626  000354  2FC4               	decfsz	??_UI& (0+255),f,b
  4627  000356  D7FC               	bra	u4617
  4628  000358  F000               	nop	
  4629                           
  4630                           ;UI.c: 117: lcdInst(0b10000000);;
  4631  00035A  0E80               	movlw	128
  4632  00035C  EC40  F014         	call	_lcdInst
  4633                           
  4634                           ;UI.c: 118: printf(" -- Pop  can -- ");
  4635  000360  0E9C               	movlw	low STR_9
  4636  000362  0100               	movlb	0	; () banked
  4637  000364  6F8E               	movwf	printf@f& (0+255),b
  4638  000366  0EFE               	movlw	high STR_9
  4639  000368  0100               	movlb	0	; () banked
  4640  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4641  00036C  ECAA  F002         	call	_printf	;wreg free
  4642                           
  4643                           ;UI.c: 119: lcdInst(0b11000000);;
  4644  000370  0EC0               	movlw	192
  4645  000372  EC40  F014         	call	_lcdInst
  4646                           
  4647                           ;UI.c: 120: printf("No tab: 9|Tab: 1");
  4648  000376  0ECF               	movlw	low STR_10
  4649  000378  0100               	movlb	0	; () banked
  4650  00037A  6F8E               	movwf	printf@f& (0+255),b
  4651  00037C  0EFE               	movlw	high STR_10
  4652  00037E  0100               	movlb	0	; () banked
  4653  000380  6F8F               	movwf	(printf@f+1)& (0+255),b
  4654  000382  ECAA  F002         	call	_printf	;wreg free
  4655                           
  4656                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4657  000386  0E00               	movlw	0
  4658  000388  0100               	movlb	0	; () banked
  4659  00038A  6FCE               	movwf	UI@i_648& (0+255),b
  4660  00038C                     l4923:
  4661                           
  4662                           ; BSR set to: 0
  4663  00038C  0E63               	movlw	99
  4664  00038E  0100               	movlb	0	; () banked
  4665  000390  65CE               	cpfsgt	UI@i_648& (0+255),b
  4666  000392  D001               	goto	l4927
  4667  000394  D00C               	goto	l4931
  4668  000396                     l4927:
  4669                           
  4670                           ; BSR set to: 0
  4671  000396  0E68               	movlw	104
  4672  000398  0100               	movlb	0	; () banked
  4673  00039A  6FC4               	movwf	??_UI& (0+255),b
  4674  00039C  0EE4               	movlw	228
  4675  00039E                     u4627:
  4676  00039E  2EE8               	decfsz	wreg,f,c
  4677  0003A0  D7FE               	bra	u4627
  4678  0003A2  2FC4               	decfsz	??_UI& (0+255),f,b
  4679  0003A4  D7FC               	bra	u4627
  4680  0003A6  F000               	nop	
  4681  0003A8  0100               	movlb	0	; () banked
  4682  0003AA  2BCE               	incf	UI@i_648& (0+255),f,b
  4683  0003AC  D7EF               	goto	l4923
  4684  0003AE                     l4931:
  4685                           
  4686                           ; BSR set to: 0
  4687  0003AE  0100               	movlb	0	; () banked
  4688  0003B0  51EF               	movf	_logstate& (0+255),w,b
  4689  0003B2  0100               	movlb	0	; () banked
  4690  0003B4  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4691  0003B6  B4D8               	btfsc	status,2,c
  4692  0003B8  0012               	return	
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4696                           
  4697                           ; BSR set to: 0
  4698                           
  4699                           ; BSR set to: 0
  4700  0003BA  0E00               	movlw	0
  4701  0003BC  0100               	movlb	0	; () banked
  4702  0003BE  6FCF               	movwf	UI@i_649& (0+255),b
  4703  0003C0                     l4937:
  4704                           
  4705                           ; BSR set to: 0
  4706  0003C0  0E63               	movlw	99
  4707  0003C2  0100               	movlb	0	; () banked
  4708  0003C4  65CF               	cpfsgt	UI@i_649& (0+255),b
  4709  0003C6  D001               	goto	l4941
  4710  0003C8  D00C               	goto	l4945
  4711  0003CA                     l4941:
  4712                           
  4713                           ; BSR set to: 0
  4714  0003CA  0E68               	movlw	104
  4715  0003CC  0100               	movlb	0	; () banked
  4716  0003CE  6FC4               	movwf	??_UI& (0+255),b
  4717  0003D0  0EE4               	movlw	228
  4718  0003D2                     u4637:
  4719  0003D2  2EE8               	decfsz	wreg,f,c
  4720  0003D4  D7FE               	bra	u4637
  4721  0003D6  2FC4               	decfsz	??_UI& (0+255),f,b
  4722  0003D8  D7FC               	bra	u4637
  4723  0003DA  F000               	nop	
  4724  0003DC  0100               	movlb	0	; () banked
  4725  0003DE  2BCF               	incf	UI@i_649& (0+255),f,b
  4726  0003E0  D7EF               	goto	l4937
  4727  0003E2                     l4945:
  4728                           
  4729                           ; BSR set to: 0
  4730  0003E2  0100               	movlb	0	; () banked
  4731  0003E4  51EF               	movf	_logstate& (0+255),w,b
  4732  0003E6  0100               	movlb	0	; () banked
  4733  0003E8  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4734  0003EA  B4D8               	btfsc	status,2,c
  4735  0003EC  0012               	return	
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;UI.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4739                           
  4740                           ; BSR set to: 0
  4741                           
  4742                           ; BSR set to: 0
  4743  0003EE  0E01               	movlw	1
  4744  0003F0  EC40  F014         	call	_lcdInst
  4745  0003F4  0E68               	movlw	104
  4746  0003F6  0100               	movlb	0	; () banked
  4747  0003F8  6FC4               	movwf	??_UI& (0+255),b
  4748  0003FA  0EE4               	movlw	228
  4749  0003FC                     u4647:
  4750  0003FC  2EE8               	decfsz	wreg,f,c
  4751  0003FE  D7FE               	bra	u4647
  4752  000400  2FC4               	decfsz	??_UI& (0+255),f,b
  4753  000402  D7FC               	bra	u4647
  4754  000404  F000               	nop	
  4755                           
  4756                           ;UI.c: 126: lcdInst(0b10000000);;
  4757  000406  0E80               	movlw	128
  4758  000408  EC40  F014         	call	_lcdInst
  4759                           
  4760                           ;UI.c: 127: printf(" -- Soup can -- ");
  4761  00040C  0EAD               	movlw	low STR_11
  4762  00040E  0100               	movlb	0	; () banked
  4763  000410  6F8E               	movwf	printf@f& (0+255),b
  4764  000412  0EFE               	movlw	high STR_11
  4765  000414  0100               	movlb	0	; () banked
  4766  000416  6F8F               	movwf	(printf@f+1)& (0+255),b
  4767  000418  ECAA  F002         	call	_printf	;wreg free
  4768                           
  4769                           ;UI.c: 128: lcdInst(0b11000000);;
  4770  00041C  0EC0               	movlw	192
  4771  00041E  EC40  F014         	call	_lcdInst
  4772                           
  4773                           ;UI.c: 129: printf("No lbl: 1|lbl: 1");
  4774  000422  0EE0               	movlw	low STR_12
  4775  000424  0100               	movlb	0	; () banked
  4776  000426  6F8E               	movwf	printf@f& (0+255),b
  4777  000428  0EFE               	movlw	high STR_12
  4778  00042A  0100               	movlb	0	; () banked
  4779  00042C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4780  00042E  ECAA  F002         	call	_printf	;wreg free
  4781                           
  4782                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4783  000432  0E00               	movlw	0
  4784  000434  0100               	movlb	0	; () banked
  4785  000436  6FD0               	movwf	UI@i_652& (0+255),b
  4786  000438                     l4963:
  4787                           
  4788                           ; BSR set to: 0
  4789  000438  0E63               	movlw	99
  4790  00043A  0100               	movlb	0	; () banked
  4791  00043C  65D0               	cpfsgt	UI@i_652& (0+255),b
  4792  00043E  D001               	goto	l4967
  4793  000440  D00C               	goto	l4971
  4794  000442                     l4967:
  4795                           
  4796                           ; BSR set to: 0
  4797  000442  0E68               	movlw	104
  4798  000444  0100               	movlb	0	; () banked
  4799  000446  6FC4               	movwf	??_UI& (0+255),b
  4800  000448  0EE4               	movlw	228
  4801  00044A                     u4657:
  4802  00044A  2EE8               	decfsz	wreg,f,c
  4803  00044C  D7FE               	bra	u4657
  4804  00044E  2FC4               	decfsz	??_UI& (0+255),f,b
  4805  000450  D7FC               	bra	u4657
  4806  000452  F000               	nop	
  4807  000454  0100               	movlb	0	; () banked
  4808  000456  2BD0               	incf	UI@i_652& (0+255),f,b
  4809  000458  D7EF               	goto	l4963
  4810  00045A                     l4971:
  4811                           
  4812                           ; BSR set to: 0
  4813  00045A  0100               	movlb	0	; () banked
  4814  00045C  51EF               	movf	_logstate& (0+255),w,b
  4815  00045E  0100               	movlb	0	; () banked
  4816  000460  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4817  000462  B4D8               	btfsc	status,2,c
  4818  000464  0012               	return	
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4822                           
  4823                           ; BSR set to: 0
  4824                           
  4825                           ; BSR set to: 0
  4826  000466  0E00               	movlw	0
  4827  000468  0100               	movlb	0	; () banked
  4828  00046A  6FD1               	movwf	UI@i_653& (0+255),b
  4829  00046C                     l4977:
  4830                           
  4831                           ; BSR set to: 0
  4832  00046C  0E63               	movlw	99
  4833  00046E  0100               	movlb	0	; () banked
  4834  000470  65D1               	cpfsgt	UI@i_653& (0+255),b
  4835  000472  D001               	goto	l4981
  4836  000474  D00C               	goto	l4985
  4837  000476                     l4981:
  4838                           
  4839                           ; BSR set to: 0
  4840  000476  0E68               	movlw	104
  4841  000478  0100               	movlb	0	; () banked
  4842  00047A  6FC4               	movwf	??_UI& (0+255),b
  4843  00047C  0EE4               	movlw	228
  4844  00047E                     u4667:
  4845  00047E  2EE8               	decfsz	wreg,f,c
  4846  000480  D7FE               	bra	u4667
  4847  000482  2FC4               	decfsz	??_UI& (0+255),f,b
  4848  000484  D7FC               	bra	u4667
  4849  000486  F000               	nop	
  4850  000488  0100               	movlb	0	; () banked
  4851  00048A  2BD1               	incf	UI@i_653& (0+255),f,b
  4852  00048C  D7EF               	goto	l4977
  4853  00048E                     l4985:
  4854                           
  4855                           ; BSR set to: 0
  4856  00048E  0100               	movlb	0	; () banked
  4857  000490  51EF               	movf	_logstate& (0+255),w,b
  4858  000492  0100               	movlb	0	; () banked
  4859  000494  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4860  000496  B4D8               	btfsc	status,2,c
  4861  000498  0012               	return	
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;UI.c: 134: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4865                           
  4866                           ; BSR set to: 0
  4867                           
  4868                           ; BSR set to: 0
  4869  00049A  0E01               	movlw	1
  4870  00049C  EC40  F014         	call	_lcdInst
  4871  0004A0  0E68               	movlw	104
  4872  0004A2  0100               	movlb	0	; () banked
  4873  0004A4  6FC4               	movwf	??_UI& (0+255),b
  4874  0004A6  0EE4               	movlw	228
  4875  0004A8                     u4677:
  4876  0004A8  2EE8               	decfsz	wreg,f,c
  4877  0004AA  D7FE               	bra	u4677
  4878  0004AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4879  0004AE  D7FC               	bra	u4677
  4880  0004B0  F000               	nop	
  4881                           
  4882                           ;UI.c: 135: lcdInst(0b10000000);;
  4883  0004B2  0E80               	movlw	128
  4884  0004B4  EC40  F014         	call	_lcdInst
  4885                           
  4886                           ;UI.c: 136: printf("-- Total cans --");
  4887  0004B8  0EBE               	movlw	low STR_13
  4888  0004BA  0100               	movlb	0	; () banked
  4889  0004BC  6F8E               	movwf	printf@f& (0+255),b
  4890  0004BE  0EFE               	movlw	high STR_13
  4891  0004C0  0100               	movlb	0	; () banked
  4892  0004C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4893  0004C4  ECAA  F002         	call	_printf	;wreg free
  4894                           
  4895                           ;UI.c: 137: lcdInst(0b11000000);;
  4896  0004C8  0EC0               	movlw	192
  4897  0004CA  EC40  F014         	call	_lcdInst
  4898                           
  4899                           ;UI.c: 138: printf("12");
  4900  0004CE  0EFC               	movlw	low STR_14
  4901  0004D0  0100               	movlb	0	; () banked
  4902  0004D2  6F8E               	movwf	printf@f& (0+255),b
  4903  0004D4  0EFF               	movlw	high STR_14
  4904  0004D6  0100               	movlb	0	; () banked
  4905  0004D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  4906  0004DA  ECAA  F002         	call	_printf	;wreg free
  4907                           
  4908                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4909  0004DE  0E00               	movlw	0
  4910  0004E0  0100               	movlb	0	; () banked
  4911  0004E2  6FD2               	movwf	UI@i_656& (0+255),b
  4912  0004E4                     l5003:
  4913                           
  4914                           ; BSR set to: 0
  4915  0004E4  0E63               	movlw	99
  4916  0004E6  0100               	movlb	0	; () banked
  4917  0004E8  65D2               	cpfsgt	UI@i_656& (0+255),b
  4918  0004EA  D001               	goto	l5007
  4919  0004EC  D00C               	goto	l5011
  4920  0004EE                     l5007:
  4921                           
  4922                           ; BSR set to: 0
  4923  0004EE  0E68               	movlw	104
  4924  0004F0  0100               	movlb	0	; () banked
  4925  0004F2  6FC4               	movwf	??_UI& (0+255),b
  4926  0004F4  0EE4               	movlw	228
  4927  0004F6                     u4687:
  4928  0004F6  2EE8               	decfsz	wreg,f,c
  4929  0004F8  D7FE               	bra	u4687
  4930  0004FA  2FC4               	decfsz	??_UI& (0+255),f,b
  4931  0004FC  D7FC               	bra	u4687
  4932  0004FE  F000               	nop	
  4933  000500  0100               	movlb	0	; () banked
  4934  000502  2BD2               	incf	UI@i_656& (0+255),f,b
  4935  000504  D7EF               	goto	l5003
  4936  000506                     l5011:
  4937                           
  4938                           ; BSR set to: 0
  4939  000506  0100               	movlb	0	; () banked
  4940  000508  51EF               	movf	_logstate& (0+255),w,b
  4941  00050A  0100               	movlb	0	; () banked
  4942  00050C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4943  00050E  B4D8               	btfsc	status,2,c
  4944  000510  0012               	return	
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4948                           
  4949                           ; BSR set to: 0
  4950                           
  4951                           ; BSR set to: 0
  4952  000512  0E00               	movlw	0
  4953  000514  0100               	movlb	0	; () banked
  4954  000516  6FD3               	movwf	UI@i_657& (0+255),b
  4955  000518                     l5017:
  4956                           
  4957                           ; BSR set to: 0
  4958  000518  0E63               	movlw	99
  4959  00051A  0100               	movlb	0	; () banked
  4960  00051C  65D3               	cpfsgt	UI@i_657& (0+255),b
  4961  00051E  D001               	goto	l5021
  4962  000520  D00C               	goto	l5025
  4963  000522                     l5021:
  4964                           
  4965                           ; BSR set to: 0
  4966  000522  0E68               	movlw	104
  4967  000524  0100               	movlb	0	; () banked
  4968  000526  6FC4               	movwf	??_UI& (0+255),b
  4969  000528  0EE4               	movlw	228
  4970  00052A                     u4697:
  4971  00052A  2EE8               	decfsz	wreg,f,c
  4972  00052C  D7FE               	bra	u4697
  4973  00052E  2FC4               	decfsz	??_UI& (0+255),f,b
  4974  000530  D7FC               	bra	u4697
  4975  000532  F000               	nop	
  4976  000534  0100               	movlb	0	; () banked
  4977  000536  2BD3               	incf	UI@i_657& (0+255),f,b
  4978  000538  D7EF               	goto	l5017
  4979  00053A                     l5025:
  4980                           
  4981                           ; BSR set to: 0
  4982  00053A  0100               	movlb	0	; () banked
  4983  00053C  51EF               	movf	_logstate& (0+255),w,b
  4984  00053E  0100               	movlb	0	; () banked
  4985  000540  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4986  000542  B4D8               	btfsc	status,2,c
  4987  000544  0012               	return	
  4988  000546                     l5029:
  4989  000546  0100               	movlb	0	; () banked
  4990  000548  51EF               	movf	_logstate& (0+255),w,b
  4991  00054A  0100               	movlb	0	; () banked
  4992  00054C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4993  00054E  B4D8               	btfsc	status,2,c
  4994  000550  0012               	return	
  4995  000552  D5E7               	goto	l4789
  4996  000554                     __end_of_UI:
  4997                           	opt stack 0
  4998                           tblptru	equ	0xFF8
  4999                           tblptrh	equ	0xFF7
  5000                           tblptrl	equ	0xFF6
  5001                           tablat	equ	0xFF5
  5002                           prodh	equ	0xFF4
  5003                           prodl	equ	0xFF3
  5004                           intcon	equ	0xFF2
  5005                           intcon3	equ	0xFF0
  5006                           postinc0	equ	0xFEE
  5007                           wreg	equ	0xFE8
  5008                           postdec1	equ	0xFE5
  5009                           fsr1l	equ	0xFE1
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _printRTC *****************
  5018 ;; Defined at:
  5019 ;;		line 61 in file "RTC.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  i               2   66[BANK0 ] int 
  5024 ;;  INT_time       14   46[BANK0 ] int [7]
  5025 ;;  month           4   62[BANK0 ] unsigned char [4]
  5026 ;;  RTC_month       2   60[BANK0 ] int 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  1    wreg      void 
  5029 ;; Registers used:
  5030 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;Total ram usage:       25 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:   10
  5043 ;; This function calls:
  5044 ;;		_getRTC
  5045 ;;		_lcdInst
  5046 ;;		_printf
  5047 ;;		_strcpy
  5048 ;; This function is called by:
  5049 ;;		_UI
  5050 ;;		_change_state_to_menu_start
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text20
  5055  000CA4                     __ptext20:
  5056                           	opt stack 0
  5057  000CA4                     _printRTC:
  5058                           	opt stack 18
  5059                           
  5060                           ;RTC.c: 62: getRTC();
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;incstack = 0
  5064  000CA4  EC39  F00F         	call	_getRTC	;wreg free
  5065                           
  5066                           ;RTC.c: 63: char month[] = "MMM";
  5067  000CA8  C0F5  F0BE         	movff	printRTC@F3177,printRTC@month
  5068  000CAC  C0F6  F0BF         	movff	printRTC@F3177+1,printRTC@month+1
  5069  000CB0  C0F7  F0C0         	movff	printRTC@F3177+2,printRTC@month+2
  5070  000CB4  C0F8  F0C1         	movff	printRTC@F3177+3,printRTC@month+3
  5071                           
  5072                           ;RTC.c: 64: int INT_time[7];
  5073                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  5074  000CB8  0E00               	movlw	0
  5075  000CBA  0100               	movlb	0	; () banked
  5076  000CBC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5077  000CBE  0E00               	movlw	0
  5078  000CC0  6FC2               	movwf	printRTC@i& (0+255),b
  5079                           
  5080                           ; BSR set to: 0
  5081  000CC2  0100               	movlb	0	; () banked
  5082  000CC4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5083  000CC6  D008               	goto	l4157
  5084  000CC8  0100               	movlb	0	; () banked
  5085  000CCA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5086  000CCC  E146               	bnz	l820
  5087  000CCE  0E07               	movlw	7
  5088  000CD0  0100               	movlb	0	; () banked
  5089  000CD2  5DC2               	subwf	printRTC@i& (0+255),w,b
  5090  000CD4  B0D8               	btfsc	status,0,c
  5091  000CD6  D041               	goto	l820
  5092  000CD8                     l4157:
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5096  000CD8  0ED4               	movlw	low _time
  5097  000CDA  0100               	movlb	0	; () banked
  5098  000CDC  25C2               	addwf	printRTC@i& (0+255),w,b
  5099  000CDE  6ED9               	movwf	fsr2l,c
  5100  000CE0  0E00               	movlw	high _time
  5101  000CE2  0100               	movlb	0	; () banked
  5102  000CE4  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5103  000CE6  6EDA               	movwf	fsr2h,c
  5104  000CE8  50DF               	movf	indf2,w,c
  5105  000CEA  0100               	movlb	0	; () banked
  5106  000CEC  6FAB               	movwf	??_printRTC& (0+255),b
  5107  000CEE  0100               	movlb	0	; () banked
  5108  000CF0  3BAB               	swapf	??_printRTC& (0+255),f,b
  5109  000CF2  0E0F               	movlw	15
  5110  000CF4  17AB               	andwf	??_printRTC& (0+255),f,b
  5111  000CF6  0E0F               	movlw	15
  5112  000CF8  0100               	movlb	0	; () banked
  5113  000CFA  17AB               	andwf	??_printRTC& (0+255),f,b
  5114  000CFC  0100               	movlb	0	; () banked
  5115  000CFE  51AB               	movf	??_printRTC& (0+255),w,b
  5116  000D00  0D0A               	mullw	10
  5117  000D02  0ED4               	movlw	low _time
  5118  000D04  0100               	movlb	0	; () banked
  5119  000D06  25C2               	addwf	printRTC@i& (0+255),w,b
  5120  000D08  6ED9               	movwf	fsr2l,c
  5121  000D0A  0E00               	movlw	high _time
  5122  000D0C  0100               	movlb	0	; () banked
  5123  000D0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5124  000D10  6EDA               	movwf	fsr2h,c
  5125  000D12  50DF               	movf	indf2,w,c
  5126  000D14  0B0F               	andlw	15
  5127  000D16  0100               	movlb	0	; () banked
  5128  000D18  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5129  000D1A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5130  000D1C  50F3               	movf	prodl,w,c
  5131  000D1E  0100               	movlb	0	; () banked
  5132  000D20  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5133  000D22  50F4               	movf	prodh,w,c
  5134  000D24  0100               	movlb	0	; () banked
  5135  000D26  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5136  000D28  90D8               	bcf	status,0,c
  5137  000D2A  0100               	movlb	0	; () banked
  5138  000D2C  35C2               	rlcf	printRTC@i& (0+255),w,b
  5139  000D2E  6ED9               	movwf	fsr2l,c
  5140  000D30  0100               	movlb	0	; () banked
  5141  000D32  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5142  000D34  6EDA               	movwf	fsr2h,c
  5143  000D36  0EAE               	movlw	low printRTC@INT_time
  5144  000D38  26D9               	addwf	fsr2l,f,c
  5145  000D3A  0E00               	movlw	high printRTC@INT_time
  5146  000D3C  22DA               	addwfc	fsr2h,f,c
  5147  000D3E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5148  000D42  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5149                           
  5150                           ; BSR set to: 0
  5151  000D46  0100               	movlb	0	; () banked
  5152  000D48  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5153  000D4A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5154                           
  5155                           ; BSR set to: 0
  5156  000D4C  0100               	movlb	0	; () banked
  5157  000D4E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5158  000D50  D7C3               	goto	l4157
  5159  000D52  0100               	movlb	0	; () banked
  5160  000D54  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5161  000D56  E101               	bnz	u3130
  5162  000D58  D7BA               	goto	L1
  5163  000D5A                     u3130:
  5164  000D5A                     l820:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;RTC.c: 67: }
  5168                           ;RTC.c: 68: int RTC_month = INT_time[5];
  5169  000D5A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5170  000D5E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5171                           
  5172                           ;RTC.c: 69: switch(RTC_month){
  5173  000D62  D0B4               	goto	l4189
  5174  000D64                     l4163:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;RTC.c: 71: strcpy(month, "Jan");
  5178  000D64  0EBE               	movlw	low printRTC@month
  5179  000D66  0100               	movlb	0	; () banked
  5180  000D68  6F80               	movwf	strcpy@to& (0+255),b
  5181  000D6A  0E00               	movlw	high printRTC@month
  5182  000D6C  0100               	movlb	0	; () banked
  5183  000D6E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5184  000D70  0EDC               	movlw	low STR_36
  5185  000D72  0100               	movlb	0	; () banked
  5186  000D74  6F82               	movwf	strcpy@from& (0+255),b
  5187  000D76  0EFF               	movlw	high STR_36
  5188  000D78  0100               	movlb	0	; () banked
  5189  000D7A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5190  000D7C  ECFD  F011         	call	_strcpy	;wreg free
  5191                           
  5192                           ;RTC.c: 72: break;
  5193  000D80  D0D4               	goto	l4191
  5194  000D82                     l4165:
  5195                           
  5196                           ;RTC.c: 74: strcpy(month, "Feb");
  5197  000D82  0EBE               	movlw	low printRTC@month
  5198  000D84  0100               	movlb	0	; () banked
  5199  000D86  6F80               	movwf	strcpy@to& (0+255),b
  5200  000D88  0E00               	movlw	high printRTC@month
  5201  000D8A  0100               	movlb	0	; () banked
  5202  000D8C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5203  000D8E  0ECC               	movlw	low STR_37
  5204  000D90  0100               	movlb	0	; () banked
  5205  000D92  6F82               	movwf	strcpy@from& (0+255),b
  5206  000D94  0EFF               	movlw	high STR_37
  5207  000D96  0100               	movlb	0	; () banked
  5208  000D98  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5209  000D9A  ECFD  F011         	call	_strcpy	;wreg free
  5210                           
  5211                           ;RTC.c: 75: break;
  5212  000D9E  D0C5               	goto	l4191
  5213  000DA0                     l4167:
  5214                           
  5215                           ;RTC.c: 77: strcpy(month, "Mar");
  5216  000DA0  0EBE               	movlw	low printRTC@month
  5217  000DA2  0100               	movlb	0	; () banked
  5218  000DA4  6F80               	movwf	strcpy@to& (0+255),b
  5219  000DA6  0E00               	movlw	high printRTC@month
  5220  000DA8  0100               	movlb	0	; () banked
  5221  000DAA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5222  000DAC  0EE8               	movlw	low STR_38
  5223  000DAE  0100               	movlb	0	; () banked
  5224  000DB0  6F82               	movwf	strcpy@from& (0+255),b
  5225  000DB2  0EFF               	movlw	high STR_38
  5226  000DB4  0100               	movlb	0	; () banked
  5227  000DB6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5228  000DB8  ECFD  F011         	call	_strcpy	;wreg free
  5229                           
  5230                           ;RTC.c: 78: break;
  5231  000DBC  D0B6               	goto	l4191
  5232  000DBE                     l4169:
  5233                           
  5234                           ;RTC.c: 80: strcpy(month, "Apr");
  5235  000DBE  0EBE               	movlw	low printRTC@month
  5236  000DC0  0100               	movlb	0	; () banked
  5237  000DC2  6F80               	movwf	strcpy@to& (0+255),b
  5238  000DC4  0E00               	movlw	high printRTC@month
  5239  000DC6  0100               	movlb	0	; () banked
  5240  000DC8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5241  000DCA  0EEC               	movlw	low STR_39
  5242  000DCC  0100               	movlb	0	; () banked
  5243  000DCE  6F82               	movwf	strcpy@from& (0+255),b
  5244  000DD0  0EFF               	movlw	high STR_39
  5245  000DD2  0100               	movlb	0	; () banked
  5246  000DD4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5247  000DD6  ECFD  F011         	call	_strcpy	;wreg free
  5248                           
  5249                           ;RTC.c: 81: break;
  5250  000DDA  D0A7               	goto	l4191
  5251  000DDC                     l4171:
  5252                           
  5253                           ;RTC.c: 83: strcpy(month, "May");
  5254  000DDC  0EBE               	movlw	low printRTC@month
  5255  000DDE  0100               	movlb	0	; () banked
  5256  000DE0  6F80               	movwf	strcpy@to& (0+255),b
  5257  000DE2  0E00               	movlw	high printRTC@month
  5258  000DE4  0100               	movlb	0	; () banked
  5259  000DE6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5260  000DE8  0EF8               	movlw	low STR_40
  5261  000DEA  0100               	movlb	0	; () banked
  5262  000DEC  6F82               	movwf	strcpy@from& (0+255),b
  5263  000DEE  0EFF               	movlw	high STR_40
  5264  000DF0  0100               	movlb	0	; () banked
  5265  000DF2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5266  000DF4  ECFD  F011         	call	_strcpy	;wreg free
  5267                           
  5268                           ;RTC.c: 84: break;
  5269  000DF8  D098               	goto	l4191
  5270  000DFA                     l4173:
  5271                           
  5272                           ;RTC.c: 86: strcpy(month, "Jun");
  5273  000DFA  0EBE               	movlw	low printRTC@month
  5274  000DFC  0100               	movlb	0	; () banked
  5275  000DFE  6F80               	movwf	strcpy@to& (0+255),b
  5276  000E00  0E00               	movlw	high printRTC@month
  5277  000E02  0100               	movlb	0	; () banked
  5278  000E04  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5279  000E06  0EE0               	movlw	low STR_41
  5280  000E08  0100               	movlb	0	; () banked
  5281  000E0A  6F82               	movwf	strcpy@from& (0+255),b
  5282  000E0C  0EFF               	movlw	high STR_41
  5283  000E0E  0100               	movlb	0	; () banked
  5284  000E10  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5285  000E12  ECFD  F011         	call	_strcpy	;wreg free
  5286                           
  5287                           ;RTC.c: 87: break;
  5288  000E16  D089               	goto	l4191
  5289  000E18                     l4175:
  5290                           
  5291                           ;RTC.c: 89: strcpy(month, "Jul");
  5292  000E18  0EBE               	movlw	low printRTC@month
  5293  000E1A  0100               	movlb	0	; () banked
  5294  000E1C  6F80               	movwf	strcpy@to& (0+255),b
  5295  000E1E  0E00               	movlw	high printRTC@month
  5296  000E20  0100               	movlb	0	; () banked
  5297  000E22  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5298  000E24  0ED8               	movlw	low STR_42
  5299  000E26  0100               	movlb	0	; () banked
  5300  000E28  6F82               	movwf	strcpy@from& (0+255),b
  5301  000E2A  0EFF               	movlw	high STR_42
  5302  000E2C  0100               	movlb	0	; () banked
  5303  000E2E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5304  000E30  ECFD  F011         	call	_strcpy	;wreg free
  5305                           
  5306                           ;RTC.c: 90: break;
  5307  000E34  D07A               	goto	l4191
  5308  000E36                     l4177:
  5309                           
  5310                           ;RTC.c: 92: strcpy(month, "Aug");
  5311  000E36  0EBE               	movlw	low printRTC@month
  5312  000E38  0100               	movlb	0	; () banked
  5313  000E3A  6F80               	movwf	strcpy@to& (0+255),b
  5314  000E3C  0E00               	movlw	high printRTC@month
  5315  000E3E  0100               	movlb	0	; () banked
  5316  000E40  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5317  000E42  0ED4               	movlw	low STR_43
  5318  000E44  0100               	movlb	0	; () banked
  5319  000E46  6F82               	movwf	strcpy@from& (0+255),b
  5320  000E48  0EFF               	movlw	high STR_43
  5321  000E4A  0100               	movlb	0	; () banked
  5322  000E4C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5323  000E4E  ECFD  F011         	call	_strcpy	;wreg free
  5324                           
  5325                           ;RTC.c: 93: break;
  5326  000E52  D06B               	goto	l4191
  5327  000E54                     l4179:
  5328                           
  5329                           ;RTC.c: 95: strcpy(month, "Sep");
  5330  000E54  0EBE               	movlw	low printRTC@month
  5331  000E56  0100               	movlb	0	; () banked
  5332  000E58  6F80               	movwf	strcpy@to& (0+255),b
  5333  000E5A  0E00               	movlw	high printRTC@month
  5334  000E5C  0100               	movlb	0	; () banked
  5335  000E5E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5336  000E60  0EE4               	movlw	low STR_44
  5337  000E62  0100               	movlb	0	; () banked
  5338  000E64  6F82               	movwf	strcpy@from& (0+255),b
  5339  000E66  0EFF               	movlw	high STR_44
  5340  000E68  0100               	movlb	0	; () banked
  5341  000E6A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5342  000E6C  ECFD  F011         	call	_strcpy	;wreg free
  5343                           
  5344                           ;RTC.c: 96: break;
  5345  000E70  D05C               	goto	l4191
  5346  000E72                     l4181:
  5347                           
  5348                           ;RTC.c: 98: strcpy(month, "Oct");
  5349  000E72  0EBE               	movlw	low printRTC@month
  5350  000E74  0100               	movlb	0	; () banked
  5351  000E76  6F80               	movwf	strcpy@to& (0+255),b
  5352  000E78  0E00               	movlw	high printRTC@month
  5353  000E7A  0100               	movlb	0	; () banked
  5354  000E7C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5355  000E7E  0EF0               	movlw	low STR_45
  5356  000E80  0100               	movlb	0	; () banked
  5357  000E82  6F82               	movwf	strcpy@from& (0+255),b
  5358  000E84  0EFF               	movlw	high STR_45
  5359  000E86  0100               	movlb	0	; () banked
  5360  000E88  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5361  000E8A  ECFD  F011         	call	_strcpy	;wreg free
  5362                           
  5363                           ;RTC.c: 99: break;
  5364  000E8E  D04D               	goto	l4191
  5365  000E90                     l4183:
  5366                           
  5367                           ;RTC.c: 101: strcpy(month, "Nov");
  5368  000E90  0EBE               	movlw	low printRTC@month
  5369  000E92  0100               	movlb	0	; () banked
  5370  000E94  6F80               	movwf	strcpy@to& (0+255),b
  5371  000E96  0E00               	movlw	high printRTC@month
  5372  000E98  0100               	movlb	0	; () banked
  5373  000E9A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5374  000E9C  0EF4               	movlw	low STR_46
  5375  000E9E  0100               	movlb	0	; () banked
  5376  000EA0  6F82               	movwf	strcpy@from& (0+255),b
  5377  000EA2  0EFF               	movlw	high STR_46
  5378  000EA4  0100               	movlb	0	; () banked
  5379  000EA6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5380  000EA8  ECFD  F011         	call	_strcpy	;wreg free
  5381                           
  5382                           ;RTC.c: 102: break;
  5383  000EAC  D03E               	goto	l4191
  5384  000EAE                     l4185:
  5385                           
  5386                           ;RTC.c: 104: strcpy(month, "Dec");
  5387  000EAE  0EBE               	movlw	low printRTC@month
  5388  000EB0  0100               	movlb	0	; () banked
  5389  000EB2  6F80               	movwf	strcpy@to& (0+255),b
  5390  000EB4  0E00               	movlw	high printRTC@month
  5391  000EB6  0100               	movlb	0	; () banked
  5392  000EB8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5393  000EBA  0ED0               	movlw	low STR_47
  5394  000EBC  0100               	movlb	0	; () banked
  5395  000EBE  6F82               	movwf	strcpy@from& (0+255),b
  5396  000EC0  0EFF               	movlw	high STR_47
  5397  000EC2  0100               	movlb	0	; () banked
  5398  000EC4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5399  000EC6  ECFD  F011         	call	_strcpy	;wreg free
  5400                           
  5401                           ;RTC.c: 106: }
  5402                           
  5403                           ;RTC.c: 105: break;
  5404  000ECA  D02F               	goto	l4191
  5405  000ECC                     l4189:
  5406  000ECC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5407  000ED0  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5408                           
  5409                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5410                           ; Switch size 1, requested type "space"
  5411                           ; Number of cases is 1, Range of values is 0 to 0
  5412                           ; switch strategies available:
  5413                           ; Name         Instructions Cycles
  5414                           ; simple_byte            4     3 (average)
  5415                           ;	Chosen strategy is simple_byte
  5416  000ED4  0100               	movlb	0	; () banked
  5417  000ED6  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5418  000ED8  0A00               	xorlw	0	; case 0
  5419  000EDA  A4D8               	btfss	status,2,c
  5420  000EDC  D026               	goto	l4191
  5421                           
  5422                           ; BSR set to: 0
  5423                           ; Switch size 1, requested type "space"
  5424                           ; Number of cases is 12, Range of values is 1 to 12
  5425                           ; switch strategies available:
  5426                           ; Name         Instructions Cycles
  5427                           ; simple_byte           37    19 (average)
  5428                           ;	Chosen strategy is simple_byte
  5429  000EDE  0100               	movlb	0	; () banked
  5430  000EE0  51AB               	movf	??_printRTC& (0+255),w,b
  5431  000EE2  0A01               	xorlw	1	; case 1
  5432  000EE4  B4D8               	btfsc	status,2,c
  5433  000EE6  D73E               	goto	l4163
  5434  000EE8  0A03               	xorlw	3	; case 2
  5435  000EEA  B4D8               	btfsc	status,2,c
  5436  000EEC  D74A               	goto	l4165
  5437  000EEE  0A01               	xorlw	1	; case 3
  5438  000EF0  B4D8               	btfsc	status,2,c
  5439  000EF2  D756               	goto	l4167
  5440  000EF4  0A07               	xorlw	7	; case 4
  5441  000EF6  B4D8               	btfsc	status,2,c
  5442  000EF8  D762               	goto	l4169
  5443  000EFA  0A01               	xorlw	1	; case 5
  5444  000EFC  B4D8               	btfsc	status,2,c
  5445  000EFE  D76E               	goto	l4171
  5446  000F00  0A03               	xorlw	3	; case 6
  5447  000F02  B4D8               	btfsc	status,2,c
  5448  000F04  D77A               	goto	l4173
  5449  000F06  0A01               	xorlw	1	; case 7
  5450  000F08  B4D8               	btfsc	status,2,c
  5451  000F0A  D786               	goto	l4175
  5452  000F0C  0A0F               	xorlw	15	; case 8
  5453  000F0E  B4D8               	btfsc	status,2,c
  5454  000F10  D792               	goto	l4177
  5455  000F12  0A01               	xorlw	1	; case 9
  5456  000F14  B4D8               	btfsc	status,2,c
  5457  000F16  D79E               	goto	l4179
  5458  000F18  0A03               	xorlw	3	; case 10
  5459  000F1A  B4D8               	btfsc	status,2,c
  5460  000F1C  D7AA               	goto	l4181
  5461  000F1E  0A01               	xorlw	1	; case 11
  5462  000F20  B4D8               	btfsc	status,2,c
  5463  000F22  D7B6               	goto	l4183
  5464  000F24  0A07               	xorlw	7	; case 12
  5465  000F26  B4D8               	btfsc	status,2,c
  5466  000F28  D7C2               	goto	l4185
  5467  000F2A                     l4191:
  5468                           
  5469                           ;RTC.c: 107: lcdInst(0b10000000);;
  5470  000F2A  0E80               	movlw	128
  5471  000F2C  EC40  F014         	call	_lcdInst
  5472                           
  5473                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5474  000F30  0ED4               	movlw	low STR_48
  5475  000F32  0100               	movlb	0	; () banked
  5476  000F34  6F8E               	movwf	printf@f& (0+255),b
  5477  000F36  0EFD               	movlw	high STR_48
  5478  000F38  0100               	movlb	0	; () banked
  5479  000F3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5480  000F3C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5481  000F40  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5482  000F44  0EBE               	movlw	low printRTC@month
  5483  000F46  0100               	movlb	0	; () banked
  5484  000F48  6F92               	movwf	(?_printf+4)& (0+255),b
  5485  000F4A  0E00               	movlw	high printRTC@month
  5486  000F4C  0100               	movlb	0	; () banked
  5487  000F4E  6F93               	movwf	(?_printf+5)& (0+255),b
  5488  000F50  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5489  000F54  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5490  000F58  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5491  000F5C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5492  000F60  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5493  000F64  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5494  000F68  ECAA  F002         	call	_printf	;wreg free
  5495  000F6C  0012               	return		;funcret
  5496  000F6E                     __end_of_printRTC:
  5497                           	opt stack 0
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           intcon	equ	0xFF2
  5505                           intcon3	equ	0xFF0
  5506                           postinc0	equ	0xFEE
  5507                           wreg	equ	0xFE8
  5508                           postdec1	equ	0xFE5
  5509                           fsr1l	equ	0xFE1
  5510                           indf2	equ	0xFDF
  5511                           postinc2	equ	0xFDE
  5512                           postdec2	equ	0xFDD
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _strcpy *****************
  5518 ;; Defined at:
  5519 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5522 ;;		 -> printRTC@month(4), 
  5523 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5524 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5525 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5526 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5529 ;;		 -> printRTC@month(4), 
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  2    0[BANK0 ] PTR unsigned char 
  5532 ;; Registers used:
  5533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5539 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;Total ram usage:        6 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    7
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_printRTC
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text21
  5554  0023FA                     __ptext21:
  5555                           	opt stack 0
  5556  0023FA                     _strcpy:
  5557                           	opt stack 20
  5558                           
  5559                           ;incstack = 0
  5560  0023FA  C080  F084         	movff	strcpy@to,strcpy@cp
  5561  0023FE  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5562  002402  D006               	goto	l3961
  5563  002404                     l3959:
  5564  002404  0100               	movlb	0	; () banked
  5565  002406  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5566  002408  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5567  00240A  0100               	movlb	0	; () banked
  5568  00240C  4B82               	infsnz	strcpy@from& (0+255),f,b
  5569  00240E  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5570  002410                     l3961:
  5571  002410  C082  FFF6         	movff	strcpy@from,tblptrl
  5572  002414  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5573  002418                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5574  002418  6AF8               	clrf	tblptru,c
  5575  00241A                     	endif
  5576  00241A                     	if	0	;tblptru may be non-zero
  5577  00241A                     	endif
  5578  00241A  C084  FFD9         	movff	strcpy@cp,fsr2l
  5579  00241E  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5580  002422  0008               	tblrd		*
  5581  002424  CFF5 FFDF          	movff	tablat,indf2
  5582  002428  50DF               	movf	indf2,w,c
  5583  00242A  B4D8               	btfsc	status,2,c
  5584  00242C  0012               	return	
  5585  00242E  D7EA               	goto	l3959
  5586  002430                     __end_of_strcpy:
  5587                           	opt stack 0
  5588                           tblptru	equ	0xFF8
  5589                           tblptrh	equ	0xFF7
  5590                           tblptrl	equ	0xFF6
  5591                           tablat	equ	0xFF5
  5592                           prodh	equ	0xFF4
  5593                           prodl	equ	0xFF3
  5594                           intcon	equ	0xFF2
  5595                           intcon3	equ	0xFF0
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _printf *****************
  5608 ;; Defined at:
  5609 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5612 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  5613 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  5614 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  5615 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  5616 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  5617 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  5618 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  5619 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  5620 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  5621 ;;		 -> STR_2(21), STR_1(14), 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  tmpval          4    0        struct .
  5624 ;;  width           2   41[BANK0 ] int 
  5625 ;;  len             2   37[BANK0 ] unsigned int 
  5626 ;;  val             2   35[BANK0 ] unsigned int 
  5627 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  5628 ;;		 -> STR_51(7), printRTC@month(4), 
  5629 ;;  ap              2   31[BANK0 ] PTR void [1]
  5630 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5631 ;;  c               1   40[BANK0 ] char 
  5632 ;;  flag            1   39[BANK0 ] unsigned char 
  5633 ;;  prec            1   30[BANK0 ] char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  2   14[BANK0 ] int 
  5636 ;; Registers used:
  5637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5643 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;Total ram usage:       29 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    9
  5650 ;; This function calls:
  5651 ;;		___lwdiv
  5652 ;;		___lwmod
  5653 ;;		___wmul
  5654 ;;		_isdigit
  5655 ;;		_putch
  5656 ;; This function is called by:
  5657 ;;		_UI
  5658 ;;		_change_state_to_menu_start
  5659 ;;		_printRTC
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text22
  5664  000554                     __ptext22:
  5665                           	opt stack 0
  5666  000554                     _printf:
  5667                           	opt stack 19
  5668                           
  5669                           ;doprnt.c: 466: va_list ap;
  5670                           ;doprnt.c: 499: signed char c;
  5671                           ;doprnt.c: 501: int width;
  5672                           ;doprnt.c: 506: signed char prec;
  5673                           ;doprnt.c: 508: unsigned char flag;
  5674                           ;doprnt.c: 523: union {
  5675                           ;doprnt.c: 524: unsigned long vd;
  5676                           ;doprnt.c: 525: double integ;
  5677                           ;doprnt.c: 526: } tmpval;
  5678                           ;doprnt.c: 528: unsigned int val;
  5679                           ;doprnt.c: 529: unsigned len;
  5680                           ;doprnt.c: 530: const char * cp;
  5681                           ;doprnt.c: 533: *ap = __va_start();
  5682                           
  5683                           ;incstack = 0
  5684  000554  0E90               	movlw	low (?_printf+2)
  5685  000556  0100               	movlb	0	; () banked
  5686  000558  6F9F               	movwf	printf@ap& (0+255),b
  5687  00055A  0E00               	movlw	high (?_printf+2)
  5688  00055C  0100               	movlb	0	; () banked
  5689  00055E  6FA0               	movwf	(printf@ap+1)& (0+255),b
  5690                           
  5691                           ;doprnt.c: 536: while(c = *f++) {
  5692  000560  D1EE               	goto	l3939
  5693  000562                     l3815:
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;doprnt.c: 538: if(c != '%')
  5697  000562  0E25               	movlw	37
  5698  000564  0100               	movlb	0	; () banked
  5699  000566  19A8               	xorwf	printf@c& (0+255),w,b
  5700  000568  B4D8               	btfsc	status,2,c
  5701  00056A  D005               	goto	l3819
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;doprnt.c: 540: {
  5705                           ;doprnt.c: 541: (putch(c) );
  5706  00056C  0100               	movlb	0	; () banked
  5707  00056E  51A8               	movf	printf@c& (0+255),w,b
  5708  000570  EC38  F014         	call	_putch
  5709                           
  5710                           ;doprnt.c: 542: continue;
  5711  000574  D1E4               	goto	l3939
  5712  000576                     l3819:
  5713                           
  5714                           ;doprnt.c: 543: }
  5715                           ;doprnt.c: 546: width = 0;
  5716  000576  0E00               	movlw	0
  5717  000578  0100               	movlb	0	; () banked
  5718  00057A  6FAA               	movwf	(printf@width+1)& (0+255),b
  5719  00057C  0E00               	movlw	0
  5720  00057E  6FA9               	movwf	printf@width& (0+255),b
  5721                           
  5722                           ;doprnt.c: 548: flag = 0;
  5723  000580  0E00               	movlw	0
  5724  000582  0100               	movlb	0	; () banked
  5725  000584  6FA7               	movwf	printf@flag& (0+255),b
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;doprnt.c: 551: switch(*f) {
  5729                           
  5730                           ;doprnt.c: 550: for(;;) {
  5731  000586  D005               	goto	l3825
  5732  000588                     l3821:
  5733                           
  5734                           ;doprnt.c: 580: flag |= 0x04;
  5735  000588  0100               	movlb	0	; () banked
  5736  00058A  85A7               	bsf	printf@flag& (0+255),2,b
  5737                           
  5738                           ;doprnt.c: 581: f++;
  5739  00058C  0100               	movlb	0	; () banked
  5740  00058E  4B8E               	infsnz	printf@f& (0+255),f,b
  5741  000590  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5742  000592                     l3825:
  5743  000592  C08E  FFF6         	movff	printf@f,tblptrl
  5744  000596  C08F  FFF7         	movff	printf@f+1,tblptrh
  5745  00059A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5746  00059A  6AF8               	clrf	tblptru,c
  5747  00059C                     	endif
  5748  00059C                     	if	0	;tblptru may be non-zero
  5749  00059C                     	endif
  5750  00059C  0008               	tblrd		*
  5751  00059E  50F5               	movf	tablat,w,c
  5752                           
  5753                           ; Switch size 1, requested type "space"
  5754                           ; Number of cases is 1, Range of values is 48 to 48
  5755                           ; switch strategies available:
  5756                           ; Name         Instructions Cycles
  5757                           ; simple_byte            4     3 (average)
  5758                           ;	Chosen strategy is simple_byte
  5759  0005A0  0A30               	xorlw	48	; case 48
  5760  0005A2  B4D8               	btfsc	status,2,c
  5761  0005A4  D7F1               	goto	l3821
  5762                           
  5763                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5764                           
  5765                           ;doprnt.c: 586: }
  5766                           
  5767                           ;doprnt.c: 585: break;
  5768  0005A6  C08E  FFF6         	movff	printf@f,tblptrl
  5769  0005AA  C08F  FFF7         	movff	printf@f+1,tblptrh
  5770  0005AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5771  0005AE  6AF8               	clrf	tblptru,c
  5772  0005B0                     	endif
  5773  0005B0                     	if	0	;tblptru may be non-zero
  5774  0005B0                     	endif
  5775  0005B0  0008               	tblrd		*
  5776  0005B2  50F5               	movf	tablat,w,c
  5777  0005B4  EC80  F013         	call	_isdigit
  5778  0005B8  A0D8               	btfss	status,0,c
  5779  0005BA  D0CF               	goto	l3871
  5780                           
  5781                           ;doprnt.c: 598: width = 0;
  5782  0005BC  0E00               	movlw	0
  5783  0005BE  0100               	movlb	0	; () banked
  5784  0005C0  6FAA               	movwf	(printf@width+1)& (0+255),b
  5785  0005C2  0E00               	movlw	0
  5786  0005C4  6FA9               	movwf	printf@width& (0+255),b
  5787  0005C6                     l3831:
  5788                           
  5789                           ;doprnt.c: 600: width *= 10;
  5790  0005C6  C0A9  F080         	movff	printf@width,___wmul@multiplier
  5791  0005CA  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  5792  0005CE  0E00               	movlw	0
  5793  0005D0  0100               	movlb	0	; () banked
  5794  0005D2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5795  0005D4  0E0A               	movlw	10
  5796  0005D6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5797  0005D8  EC18  F012         	call	___wmul	;wreg free
  5798  0005DC  C080  F0A9         	movff	?___wmul,printf@width
  5799  0005E0  C081  F0AA         	movff	?___wmul+1,printf@width+1
  5800                           
  5801                           ;doprnt.c: 601: width += *f++ - '0';
  5802  0005E4  0ED0               	movlw	208
  5803  0005E6  0100               	movlb	0	; () banked
  5804  0005E8  6F9A               	movwf	??_printf& (0+255),b
  5805  0005EA  0EFF               	movlw	255
  5806  0005EC  0100               	movlb	0	; () banked
  5807  0005EE  6F9B               	movwf	(??_printf+1)& (0+255),b
  5808  0005F0  C08E  FFF6         	movff	printf@f,tblptrl
  5809  0005F4  C08F  FFF7         	movff	printf@f+1,tblptrh
  5810  0005F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5811  0005F8  6AF8               	clrf	tblptru,c
  5812  0005FA                     	endif
  5813  0005FA                     	if	0	;tblptru may be non-zero
  5814  0005FA                     	endif
  5815  0005FA  0008               	tblrd		*
  5816  0005FC  50F5               	movf	tablat,w,c
  5817  0005FE  0100               	movlb	0	; () banked
  5818  000600  6F9C               	movwf	(??_printf+2)& (0+255),b
  5819  000602  6B9D               	clrf	(??_printf+3)& (0+255),b
  5820  000604  0100               	movlb	0	; () banked
  5821  000606  519A               	movf	??_printf& (0+255),w,b
  5822  000608  0100               	movlb	0	; () banked
  5823  00060A  279C               	addwf	(??_printf+2)& (0+255),f,b
  5824  00060C  0100               	movlb	0	; () banked
  5825  00060E  519B               	movf	(??_printf+1)& (0+255),w,b
  5826  000610  0100               	movlb	0	; () banked
  5827  000612  239D               	addwfc	(??_printf+3)& (0+255),f,b
  5828  000614  0100               	movlb	0	; () banked
  5829  000616  519C               	movf	(??_printf+2)& (0+255),w,b
  5830  000618  0100               	movlb	0	; () banked
  5831  00061A  27A9               	addwf	printf@width& (0+255),f,b
  5832  00061C  0100               	movlb	0	; () banked
  5833  00061E  519D               	movf	(??_printf+3)& (0+255),w,b
  5834  000620  0100               	movlb	0	; () banked
  5835  000622  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  5836                           
  5837                           ; BSR set to: 0
  5838  000624  0100               	movlb	0	; () banked
  5839  000626  4B8E               	infsnz	printf@f& (0+255),f,b
  5840  000628  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5844  00062A  C08E  FFF6         	movff	printf@f,tblptrl
  5845  00062E  C08F  FFF7         	movff	printf@f+1,tblptrh
  5846  000632                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5847  000632  6AF8               	clrf	tblptru,c
  5848  000634                     	endif
  5849  000634                     	if	0	;tblptru may be non-zero
  5850  000634                     	endif
  5851  000634  0008               	tblrd		*
  5852  000636  50F5               	movf	tablat,w,c
  5853  000638  EC80  F013         	call	_isdigit
  5854  00063C  A0D8               	btfss	status,0,c
  5855  00063E  D08D               	goto	l3871
  5856  000640  D7C2               	goto	l3831
  5857  000642                     l3839:
  5858                           
  5859                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5860  000642  C09F  FFD9         	movff	printf@ap,fsr2l
  5861  000646  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  5862  00064A  CFDE F0A1          	movff	postinc2,printf@cp
  5863  00064E  CFDD F0A2          	movff	postdec2,printf@cp+1
  5864  000652  0E02               	movlw	2
  5865  000654  0100               	movlb	0	; () banked
  5866  000656  279F               	addwf	printf@ap& (0+255),f,b
  5867  000658  0E00               	movlw	0
  5868  00065A  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;doprnt.c: 740: if(!cp)
  5872  00065C  0100               	movlb	0	; () banked
  5873  00065E  51A1               	movf	printf@cp& (0+255),w,b
  5874  000660  0100               	movlb	0	; () banked
  5875  000662  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  5876  000664  A4D8               	btfss	status,2,c
  5877  000666  D006               	goto	l3847
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;doprnt.c: 741: cp = "(null)";
  5881  000668  0EBE               	movlw	low STR_51
  5882  00066A  0100               	movlb	0	; () banked
  5883  00066C  6FA1               	movwf	printf@cp& (0+255),b
  5884  00066E  0EFF               	movlw	high STR_51
  5885  000670  0100               	movlb	0	; () banked
  5886  000672  6FA2               	movwf	(printf@cp+1)& (0+255),b
  5887  000674                     l3847:
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;doprnt.c: 745: len = 0;
  5891  000674  0E00               	movlw	0
  5892  000676  0100               	movlb	0	; () banked
  5893  000678  6FA6               	movwf	(printf@len+1)& (0+255),b
  5894  00067A  0E00               	movlw	0
  5895  00067C  6FA5               	movwf	printf@len& (0+255),b
  5896                           
  5897                           ;doprnt.c: 746: while(cp[len])
  5898  00067E  D003               	goto	l3851
  5899  000680                     l3849:
  5900                           
  5901                           ;doprnt.c: 747: len++;
  5902  000680  0100               	movlb	0	; () banked
  5903  000682  4BA5               	infsnz	printf@len& (0+255),f,b
  5904  000684  2BA6               	incf	(printf@len+1)& (0+255),f,b
  5905  000686                     l3851:
  5906                           
  5907                           ; BSR set to: 0
  5908  000686  0100               	movlb	0	; () banked
  5909  000688  51A5               	movf	printf@len& (0+255),w,b
  5910  00068A  0100               	movlb	0	; () banked
  5911  00068C  25A1               	addwf	printf@cp& (0+255),w,b
  5912  00068E  0100               	movlb	0	; () banked
  5913  000690  6F9A               	movwf	??_printf& (0+255),b
  5914  000692  0100               	movlb	0	; () banked
  5915  000694  51A6               	movf	(printf@len+1)& (0+255),w,b
  5916  000696  0100               	movlb	0	; () banked
  5917  000698  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  5918  00069A  0100               	movlb	0	; () banked
  5919  00069C  6F9B               	movwf	(??_printf+1)& (0+255),b
  5920  00069E  C09A  FFF6         	movff	??_printf,tblptrl
  5921  0006A2  C09B  FFF7         	movff	??_printf+1,tblptrh
  5922  0006A6  0E00               	movlw	low (__mediumconst shr (0+16))
  5923  0006A8  6EF8               	movwf	tblptru,c
  5924  0006AA  0E0F               	movlw	(high __ramtop+-1)
  5925  0006AC  64F7               	cpfsgt	tblptrh,c
  5926  0006AE  D003               	bra	u2547
  5927  0006B0  0008               	tblrd		*
  5928  0006B2  50F5               	movf	tablat,w,c
  5929  0006B4  D005               	bra	u2540
  5930  0006B6                     u2547:
  5931  0006B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  5932  0006BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  5933  0006BE  50EF               	movf	indf0,w,c
  5934  0006C0                     u2540:
  5935  0006C0  0900               	iorlw	0
  5936  0006C2  A4D8               	btfss	status,2,c
  5937  0006C4  D7DD               	goto	l3849
  5938                           
  5939                           ;doprnt.c: 757: if(width > len)
  5940  0006C6  0100               	movlb	0	; () banked
  5941  0006C8  51A9               	movf	printf@width& (0+255),w,b
  5942  0006CA  0100               	movlb	0	; () banked
  5943  0006CC  5DA5               	subwf	printf@len& (0+255),w,b
  5944  0006CE  0100               	movlb	0	; () banked
  5945  0006D0  51AA               	movf	(printf@width+1)& (0+255),w,b
  5946  0006D2  0100               	movlb	0	; () banked
  5947  0006D4  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  5948  0006D6  B0D8               	btfsc	status,0,c
  5949  0006D8  D009               	goto	l3857
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;doprnt.c: 758: width -= len;
  5953  0006DA  0100               	movlb	0	; () banked
  5954  0006DC  51A5               	movf	printf@len& (0+255),w,b
  5955  0006DE  0100               	movlb	0	; () banked
  5956  0006E0  5FA9               	subwf	printf@width& (0+255),f,b
  5957  0006E2  0100               	movlb	0	; () banked
  5958  0006E4  51A6               	movf	(printf@len+1)& (0+255),w,b
  5959  0006E6  0100               	movlb	0	; () banked
  5960  0006E8  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  5961  0006EA  D009               	goto	l3861
  5962  0006EC                     l3857:
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;doprnt.c: 759: else
  5966                           ;doprnt.c: 760: width = 0;
  5967  0006EC  0E00               	movlw	0
  5968  0006EE  0100               	movlb	0	; () banked
  5969  0006F0  6FAA               	movwf	(printf@width+1)& (0+255),b
  5970  0006F2  0E00               	movlw	0
  5971  0006F4  6FA9               	movwf	printf@width& (0+255),b
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;doprnt.c: 764: while(width--)
  5975  0006F6  D003               	goto	l3861
  5976  0006F8                     l3859:
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;doprnt.c: 765: (putch(' ') );
  5980  0006F8  0E20               	movlw	32
  5981  0006FA  EC38  F014         	call	_putch
  5982  0006FE                     l3861:
  5983  0006FE  0100               	movlb	0	; () banked
  5984  000700  07A9               	decf	printf@width& (0+255),f,b
  5985  000702  A0D8               	btfss	status,0,c
  5986  000704  07AA               	decf	(printf@width+1)& (0+255),f,b
  5987  000706  0100               	movlb	0	; () banked
  5988  000708  29A9               	incf	printf@width& (0+255),w,b
  5989  00070A  E1F6               	bnz	l3859
  5990  00070C  0100               	movlb	0	; () banked
  5991  00070E  29AA               	incf	(printf@width+1)& (0+255),w,b
  5992  000710  B4D8               	btfsc	status,2,c
  5993  000712  D017               	goto	l3867
  5994  000714  D7F1               	goto	l3859
  5995  000716                     l3863:
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;doprnt.c: 768: (putch(*cp++) );
  5999  000716  C0A1  FFF6         	movff	printf@cp,tblptrl
  6000  00071A  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  6001  00071E  0E00               	movlw	low (__mediumconst shr (0+16))
  6002  000720  6EF8               	movwf	tblptru,c
  6003  000722  0E0F               	movlw	(high __ramtop+-1)
  6004  000724  64F7               	cpfsgt	tblptrh,c
  6005  000726  D003               	bra	u2587
  6006  000728  0008               	tblrd		*
  6007  00072A  50F5               	movf	tablat,w,c
  6008  00072C  D005               	bra	u2580
  6009  00072E                     u2587:
  6010  00072E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6011  000732  CFF7 FFEA          	movff	tblptrh,fsr0h
  6012  000736  50EF               	movf	indf0,w,c
  6013  000738                     u2580:
  6014  000738  EC38  F014         	call	_putch
  6015  00073C  0100               	movlb	0	; () banked
  6016  00073E  4BA1               	infsnz	printf@cp& (0+255),f,b
  6017  000740  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  6018  000742                     l3867:
  6019                           
  6020                           ; BSR set to: 0
  6021  000742  0100               	movlb	0	; () banked
  6022  000744  07A5               	decf	printf@len& (0+255),f,b
  6023  000746  A0D8               	btfss	status,0,c
  6024  000748  07A6               	decf	(printf@len+1)& (0+255),f,b
  6025  00074A  0100               	movlb	0	; () banked
  6026  00074C  29A5               	incf	printf@len& (0+255),w,b
  6027  00074E  E1E3               	bnz	l3863
  6028  000750  0100               	movlb	0	; () banked
  6029  000752  29A6               	incf	(printf@len+1)& (0+255),w,b
  6030  000754  B4D8               	btfsc	status,2,c
  6031  000756  D0F3               	goto	l3939
  6032  000758  D7DE               	goto	l3863
  6033  00075A                     l3871:
  6034  00075A  C08E  FFF6         	movff	printf@f,tblptrl
  6035  00075E  C08F  FFF7         	movff	printf@f+1,tblptrh
  6036  000762  0100               	movlb	0	; () banked
  6037  000764  4B8E               	infsnz	printf@f& (0+255),f,b
  6038  000766  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6039  000768                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6040  000768  6AF8               	clrf	tblptru,c
  6041  00076A                     	endif
  6042  00076A                     	if	0	;tblptru may be non-zero
  6043  00076A                     	endif
  6044  00076A  0008               	tblrd		*
  6045  00076C  CFF5 F0A8          	movff	tablat,printf@c
  6046  000770  0100               	movlb	0	; () banked
  6047  000772  51A8               	movf	printf@c& (0+255),w,b
  6048                           
  6049                           ; Switch size 1, requested type "space"
  6050                           ; Number of cases is 4, Range of values is 0 to 115
  6051                           ; switch strategies available:
  6052                           ; Name         Instructions Cycles
  6053                           ; simple_byte           13     7 (average)
  6054                           ;	Chosen strategy is simple_byte
  6055  000774  0A00               	xorlw	0	; case 0
  6056  000776  B4D8               	btfsc	status,2,c
  6057  000778  0012               	return	
  6058  00077A  0A64               	xorlw	100	; case 100
  6059  00077C  B4D8               	btfsc	status,2,c
  6060  00077E  D007               	goto	l3873
  6061  000780  0A0D               	xorlw	13	; case 105
  6062  000782  B4D8               	btfsc	status,2,c
  6063  000784  D004               	goto	l3873
  6064  000786  0A1A               	xorlw	26	; case 115
  6065  000788  B4D8               	btfsc	status,2,c
  6066  00078A  D75B               	goto	l3839
  6067  00078C  D0D8               	goto	l3939
  6068  00078E                     l3873:
  6069                           
  6070                           ;doprnt.c: 1253: {
  6071                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6072  00078E  C09F  FFD9         	movff	printf@ap,fsr2l
  6073  000792  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6074  000796  CFDE F0A3          	movff	postinc2,printf@val
  6075  00079A  CFDD F0A4          	movff	postdec2,printf@val+1
  6076  00079E  0E02               	movlw	2
  6077  0007A0  0100               	movlb	0	; () banked
  6078  0007A2  279F               	addwf	printf@ap& (0+255),f,b
  6079  0007A4  0E00               	movlw	0
  6080  0007A6  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;doprnt.c: 1261: if((int)val < 0) {
  6084  0007A8  0100               	movlb	0	; () banked
  6085  0007AA  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  6086  0007AC  D008               	goto	l3883
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;doprnt.c: 1262: flag |= 0x03;
  6090  0007AE  0E03               	movlw	3
  6091  0007B0  0100               	movlb	0	; () banked
  6092  0007B2  13A7               	iorwf	printf@flag& (0+255),f,b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;doprnt.c: 1263: val = -val;
  6096  0007B4  0100               	movlb	0	; () banked
  6097  0007B6  6DA3               	negf	printf@val& (0+255),b
  6098  0007B8  1FA4               	comf	(printf@val+1)& (0+255),f,b
  6099  0007BA  B0D8               	btfsc	status,0,c
  6100  0007BC  2BA4               	incf	(printf@val+1)& (0+255),f,b
  6101  0007BE                     l3883:
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;doprnt.c: 1264: }
  6105                           ;doprnt.c: 1266: }
  6106                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6107  0007BE  0E01               	movlw	1
  6108  0007C0  0100               	movlb	0	; () banked
  6109  0007C2  6FA8               	movwf	printf@c& (0+255),b
  6110  0007C4                     l3885:
  6111                           
  6112                           ; BSR set to: 0
  6113  0007C4  0E05               	movlw	5
  6114  0007C6  0100               	movlb	0	; () banked
  6115  0007C8  19A8               	xorwf	printf@c& (0+255),w,b
  6116  0007CA  B4D8               	btfsc	status,2,c
  6117  0007CC  D019               	goto	l3897
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;doprnt.c: 1306: if(val < dpowers[c])
  6121                           
  6122                           ; BSR set to: 0
  6123                           
  6124                           ; BSR set to: 0
  6125  0007CE  0100               	movlb	0	; () banked
  6126  0007D0  51A8               	movf	printf@c& (0+255),w,b
  6127  0007D2  0D02               	mullw	2
  6128  0007D4  0ECA               	movlw	low _dpowers
  6129  0007D6  24F3               	addwf	prodl,w,c
  6130  0007D8  6EF6               	movwf	tblptrl,c
  6131  0007DA  0EFD               	movlw	high _dpowers
  6132  0007DC  20F4               	addwfc	prodh,w,c
  6133  0007DE  6EF7               	movwf	tblptrh,c
  6134  0007E0                     	if	1	;There are 3 active tblptr bytes
  6135  0007E0  6AF8               	clrf	tblptru,c
  6136  0007E2  0E00               	movlw	low (__mediumconst shr (0+16))
  6137  0007E4  22F8               	addwfc	tblptru,f,c
  6138  0007E6                     	endif
  6139  0007E6  0009               	tblrd		*+
  6140  0007E8  50F5               	movf	tablat,w,c
  6141  0007EA  0100               	movlb	0	; () banked
  6142  0007EC  5DA3               	subwf	printf@val& (0+255),w,b
  6143  0007EE  0009               	tblrd		*+
  6144  0007F0  50F5               	movf	tablat,w,c
  6145  0007F2  0100               	movlb	0	; () banked
  6146  0007F4  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  6147  0007F6  A0D8               	btfss	status,0,c
  6148  0007F8  D003               	goto	l3897
  6149                           
  6150                           ; BSR set to: 0
  6151                           
  6152                           ; BSR set to: 0
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;doprnt.c: 1307: break;
  6156  0007FA  0100               	movlb	0	; () banked
  6157  0007FC  2BA8               	incf	printf@c& (0+255),f,b
  6158  0007FE  D7E2               	goto	l3885
  6159  000800                     l3897:
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6163  000800  0100               	movlb	0	; () banked
  6164  000802  51A9               	movf	printf@width& (0+255),w,b
  6165  000804  0100               	movlb	0	; () banked
  6166  000806  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6167  000808  B4D8               	btfsc	status,2,c
  6168  00080A  D00B               	goto	l3903
  6169                           
  6170                           ; BSR set to: 0
  6171  00080C  C0A7  F09A         	movff	printf@flag,??_printf
  6172  000810  0E03               	movlw	3
  6173  000812  0100               	movlb	0	; () banked
  6174  000814  179A               	andwf	??_printf& (0+255),f,b
  6175  000816  B4D8               	btfsc	status,2,c
  6176  000818  D004               	goto	l3903
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;doprnt.c: 1346: width--;
  6180  00081A  0100               	movlb	0	; () banked
  6181  00081C  07A9               	decf	printf@width& (0+255),f,b
  6182  00081E  A0D8               	btfss	status,0,c
  6183  000820  07AA               	decf	(printf@width+1)& (0+255),f,b
  6184  000822                     l3903:
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;doprnt.c: 1381: if(width > c)
  6188  000822  0E80               	movlw	128
  6189  000824  0100               	movlb	0	; () banked
  6190  000826  BFA8               	btfsc	printf@c& (0+255),7,b
  6191  000828  0E7F               	movlw	127
  6192  00082A  0100               	movlb	0	; () banked
  6193  00082C  6F9A               	movwf	??_printf& (0+255),b
  6194  00082E  0100               	movlb	0	; () banked
  6195  000830  51A9               	movf	printf@width& (0+255),w,b
  6196  000832  0100               	movlb	0	; () banked
  6197  000834  5DA8               	subwf	printf@c& (0+255),w,b
  6198  000836  0100               	movlb	0	; () banked
  6199  000838  51AA               	movf	(printf@width+1)& (0+255),w,b
  6200  00083A  0A80               	xorlw	128
  6201  00083C  0100               	movlb	0	; () banked
  6202  00083E  599A               	subwfb	??_printf& (0+255),w,b
  6203  000840  B0D8               	btfsc	status,0,c
  6204  000842  D00B               	goto	l3907
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;doprnt.c: 1382: width -= c;
  6208  000844  0100               	movlb	0	; () banked
  6209  000846  51A8               	movf	printf@c& (0+255),w,b
  6210  000848  0100               	movlb	0	; () banked
  6211  00084A  5FA9               	subwf	printf@width& (0+255),f,b
  6212  00084C  0E00               	movlw	0
  6213  00084E  0100               	movlb	0	; () banked
  6214  000850  BFA8               	btfsc	printf@c& (0+255),7,b
  6215  000852  0EFF               	movlw	255
  6216  000854  0100               	movlb	0	; () banked
  6217  000856  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6218  000858  D005               	goto	l3909
  6219  00085A                     l3907:
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;doprnt.c: 1383: else
  6223                           ;doprnt.c: 1384: width = 0;
  6224  00085A  0E00               	movlw	0
  6225  00085C  0100               	movlb	0	; () banked
  6226  00085E  6FAA               	movwf	(printf@width+1)& (0+255),b
  6227  000860  0E00               	movlw	0
  6228  000862  6FA9               	movwf	printf@width& (0+255),b
  6229  000864                     l3909:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;doprnt.c: 1387: if(flag & 0x04) {
  6233  000864  0100               	movlb	0	; () banked
  6234  000866  A5A7               	btfss	printf@flag& (0+255),2,b
  6235  000868  D018               	goto	l3921
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;doprnt.c: 1392: if(flag & 0x03)
  6239  00086A  C0A7  F09A         	movff	printf@flag,??_printf
  6240  00086E  0E03               	movlw	3
  6241  000870  0100               	movlb	0	; () banked
  6242  000872  179A               	andwf	??_printf& (0+255),f,b
  6243  000874  B4D8               	btfsc	status,2,c
  6244  000876  D003               	goto	l3915
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;doprnt.c: 1393: (putch('-') );
  6248  000878  0E2D               	movlw	45
  6249  00087A  EC38  F014         	call	_putch
  6250  00087E                     l3915:
  6251                           
  6252                           ;doprnt.c: 1415: if(width)
  6253  00087E  0100               	movlb	0	; () banked
  6254  000880  51A9               	movf	printf@width& (0+255),w,b
  6255  000882  0100               	movlb	0	; () banked
  6256  000884  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6257  000886  B4D8               	btfsc	status,2,c
  6258  000888  D025               	goto	l3931
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;doprnt.c: 1417: (putch('0') );
  6262                           
  6263                           ; BSR set to: 0
  6264                           
  6265                           ;doprnt.c: 1416: do
  6266  00088A  0E30               	movlw	48
  6267  00088C  EC38  F014         	call	_putch
  6268                           
  6269                           ;doprnt.c: 1418: while(--width);
  6270  000890  0100               	movlb	0	; () banked
  6271  000892  07A9               	decf	printf@width& (0+255),f,b
  6272  000894  A0D8               	btfss	status,0,c
  6273  000896  07AA               	decf	(printf@width+1)& (0+255),f,b
  6274  000898  D7F2               	goto	l3915
  6275  00089A                     l3921:
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;doprnt.c: 1422: {
  6279                           ;doprnt.c: 1424: if(width
  6280                           ;doprnt.c: 1428: )
  6281  00089A  0100               	movlb	0	; () banked
  6282  00089C  51A9               	movf	printf@width& (0+255),w,b
  6283  00089E  0100               	movlb	0	; () banked
  6284  0008A0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6285  0008A2  B4D8               	btfsc	status,2,c
  6286  0008A4  D00D               	goto	l3927
  6287  0008A6                     l3923:
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;doprnt.c: 1430: (putch(' ') );
  6291  0008A6  0E20               	movlw	32
  6292  0008A8  EC38  F014         	call	_putch
  6293                           
  6294                           ;doprnt.c: 1431: while(--width);
  6295  0008AC  0100               	movlb	0	; () banked
  6296  0008AE  07A9               	decf	printf@width& (0+255),f,b
  6297  0008B0  A0D8               	btfss	status,0,c
  6298  0008B2  07AA               	decf	(printf@width+1)& (0+255),f,b
  6299  0008B4  0100               	movlb	0	; () banked
  6300  0008B6  51A9               	movf	printf@width& (0+255),w,b
  6301  0008B8  0100               	movlb	0	; () banked
  6302  0008BA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6303  0008BC  A4D8               	btfss	status,2,c
  6304  0008BE  D7F3               	goto	l3923
  6305  0008C0                     l3927:
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;doprnt.c: 1438: if(flag & 0x03)
  6309  0008C0  C0A7  F09A         	movff	printf@flag,??_printf
  6310  0008C4  0E03               	movlw	3
  6311  0008C6  0100               	movlb	0	; () banked
  6312  0008C8  179A               	andwf	??_printf& (0+255),f,b
  6313  0008CA  B4D8               	btfsc	status,2,c
  6314  0008CC  D003               	goto	l3931
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;doprnt.c: 1439: (putch('-') );
  6318  0008CE  0E2D               	movlw	45
  6319  0008D0  EC38  F014         	call	_putch
  6320  0008D4                     l3931:
  6321                           
  6322                           ;doprnt.c: 1469: }
  6323                           ;doprnt.c: 1472: prec = c;
  6324  0008D4  C0A8  F09E         	movff	printf@c,printf@prec
  6325                           
  6326                           ;doprnt.c: 1474: while(prec--) {
  6327  0008D8  D02C               	goto	l3937
  6328  0008DA                     l3933:
  6329                           
  6330                           ;doprnt.c: 1478: {
  6331                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6332  0008DA  0100               	movlb	0	; () banked
  6333  0008DC  519E               	movf	printf@prec& (0+255),w,b
  6334  0008DE  0D02               	mullw	2
  6335  0008E0  0ECA               	movlw	low _dpowers
  6336  0008E2  24F3               	addwf	prodl,w,c
  6337  0008E4  6EF6               	movwf	tblptrl,c
  6338  0008E6  0EFD               	movlw	high _dpowers
  6339  0008E8  20F4               	addwfc	prodh,w,c
  6340  0008EA  6EF7               	movwf	tblptrh,c
  6341  0008EC                     	if	1	;There are 3 active tblptr bytes
  6342  0008EC  6AF8               	clrf	tblptru,c
  6343  0008EE  0E00               	movlw	low (__mediumconst shr (0+16))
  6344  0008F0  22F8               	addwfc	tblptru,f,c
  6345  0008F2                     	endif
  6346  0008F2  0009               	tblrd		*+
  6347  0008F4  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6348  0008F8  000A               	tblrd		*-
  6349  0008FA  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6350  0008FE  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  6351  000902  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  6352  000906  ECB9  F00F         	call	___lwdiv	;wreg free
  6353  00090A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6354  00090E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6355  000912  0E00               	movlw	0
  6356  000914  0100               	movlb	0	; () banked
  6357  000916  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6358  000918  0E0A               	movlw	10
  6359  00091A  6F89               	movwf	___lwmod@divisor& (0+255),b
  6360  00091C  EC9C  F010         	call	___lwmod	;wreg free
  6361  000920  0100               	movlb	0	; () banked
  6362  000922  5187               	movf	?___lwmod& (0+255),w,b
  6363  000924  0F30               	addlw	48
  6364  000926  0100               	movlb	0	; () banked
  6365  000928  6FA8               	movwf	printf@c& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;doprnt.c: 1523: }
  6369                           ;doprnt.c: 1524: (putch(c) );
  6370  00092A  0100               	movlb	0	; () banked
  6371  00092C  51A8               	movf	printf@c& (0+255),w,b
  6372  00092E  EC38  F014         	call	_putch
  6373  000932                     l3937:
  6374  000932  0100               	movlb	0	; () banked
  6375  000934  079E               	decf	printf@prec& (0+255),f,b
  6376  000936  0100               	movlb	0	; () banked
  6377  000938  299E               	incf	printf@prec& (0+255),w,b
  6378  00093A  A4D8               	btfss	status,2,c
  6379  00093C  D7CE               	goto	l3933
  6380  00093E                     l3939:
  6381  00093E  C08E  FFF6         	movff	printf@f,tblptrl
  6382  000942  C08F  FFF7         	movff	printf@f+1,tblptrh
  6383  000946  0100               	movlb	0	; () banked
  6384  000948  4B8E               	infsnz	printf@f& (0+255),f,b
  6385  00094A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6386  00094C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6387  00094C  6AF8               	clrf	tblptru,c
  6388  00094E                     	endif
  6389  00094E                     	if	0	;tblptru may be non-zero
  6390  00094E                     	endif
  6391  00094E  0008               	tblrd		*
  6392  000950  CFF5 F0A8          	movff	tablat,printf@c
  6393  000954  0100               	movlb	0	; () banked
  6394  000956  51A8               	movf	printf@c& (0+255),w,b
  6395  000958  B4D8               	btfsc	status,2,c
  6396  00095A  0012               	return	
  6397  00095C  D602               	goto	l3815
  6398  00095E                     __end_of_printf:
  6399                           	opt stack 0
  6400                           tblptru	equ	0xFF8
  6401                           tblptrh	equ	0xFF7
  6402                           tblptrl	equ	0xFF6
  6403                           tablat	equ	0xFF5
  6404                           prodh	equ	0xFF4
  6405                           prodl	equ	0xFF3
  6406                           intcon	equ	0xFF2
  6407                           intcon3	equ	0xFF0
  6408                           indf0	equ	0xFEF
  6409                           postinc0	equ	0xFEE
  6410                           fsr0h	equ	0xFEA
  6411                           fsr0l	equ	0xFE9
  6412                           wreg	equ	0xFE8
  6413                           postdec1	equ	0xFE5
  6414                           fsr1l	equ	0xFE1
  6415                           indf2	equ	0xFDF
  6416                           postinc2	equ	0xFDE
  6417                           postdec2	equ	0xFDD
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function _putch *****************
  6423 ;; Defined at:
  6424 ;;		line 18 in file "lcd.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  data            1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  data            1    2[BANK0 ] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		wreg, status,2, status,0, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;Total ram usage:        1 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    8
  6445 ;; This function calls:
  6446 ;;		_lcdNibble
  6447 ;; This function is called by:
  6448 ;;		_printf
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           	psect	text23
  6453  002870                     __ptext23:
  6454                           	opt stack 0
  6455  002870                     _putch:
  6456                           	opt stack 19
  6457                           
  6458                           ;incstack = 0
  6459                           ;putch@data stored from wreg
  6460  002870  0100               	movlb	0	; () banked
  6461  002872  6F82               	movwf	putch@data& (0+255),b
  6462                           
  6463                           ;lcd.c: 19: LATDbits.LATD2 = 1;
  6464  002874  848C               	bsf	3980,2,c	;volatile
  6465                           
  6466                           ;lcd.c: 20: lcdNibble(data);
  6467  002876  0100               	movlb	0	; () banked
  6468  002878  5182               	movf	putch@data& (0+255),w,b
  6469  00287A  EC68  F010         	call	_lcdNibble
  6470  00287E  0012               	return		;funcret
  6471  002880                     __end_of_putch:
  6472                           	opt stack 0
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           intcon	equ	0xFF2
  6480                           intcon3	equ	0xFF0
  6481                           indf0	equ	0xFEF
  6482                           postinc0	equ	0xFEE
  6483                           fsr0h	equ	0xFEA
  6484                           fsr0l	equ	0xFE9
  6485                           wreg	equ	0xFE8
  6486                           postdec1	equ	0xFE5
  6487                           fsr1l	equ	0xFE1
  6488                           indf2	equ	0xFDF
  6489                           postinc2	equ	0xFDE
  6490                           postdec2	equ	0xFDD
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495 ;; *************** function _isdigit *****************
  6496 ;; Defined at:
  6497 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  c               1    wreg     unsigned char 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  c               1    2[BANK0 ] unsigned char 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;		None               void
  6504 ;; Registers used:
  6505 ;;		wreg, status,2, status,0
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;Total ram usage:        3 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    7
  6518 ;; This function calls:
  6519 ;;		Nothing
  6520 ;; This function is called by:
  6521 ;;		_printf
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           	psect	text24
  6526  002700                     __ptext24:
  6527                           	opt stack 0
  6528  002700                     _isdigit:
  6529                           	opt stack 20
  6530                           
  6531                           ;incstack = 0
  6532                           ;isdigit@c stored from wreg
  6533  002700  0100               	movlb	0	; () banked
  6534  002702  6F82               	movwf	isdigit@c& (0+255),b
  6535  002704  0E00               	movlw	0
  6536  002706  0100               	movlb	0	; () banked
  6537  002708  6F81               	movwf	_isdigit$1565& (0+255),b
  6538                           
  6539                           ; BSR set to: 0
  6540  00270A  0E3A               	movlw	58
  6541  00270C  0100               	movlb	0	; () banked
  6542  00270E  6182               	cpfslt	isdigit@c& (0+255),b
  6543  002710  D007               	goto	l3675
  6544                           
  6545                           ; BSR set to: 0
  6546  002712  0E2F               	movlw	47
  6547  002714  0100               	movlb	0	; () banked
  6548  002716  6582               	cpfsgt	isdigit@c& (0+255),b
  6549  002718  D003               	goto	l3675
  6550                           
  6551                           ; BSR set to: 0
  6552  00271A  0E01               	movlw	1
  6553  00271C  0100               	movlb	0	; () banked
  6554  00271E  6F81               	movwf	_isdigit$1565& (0+255),b
  6555  002720                     l3675:
  6556                           
  6557                           ; BSR set to: 0
  6558  002720  C081  F080         	movff	_isdigit$1565,??_isdigit
  6559  002724  0100               	movlb	0	; () banked
  6560  002726  3180               	rrcf	??_isdigit& (0+255),w,b
  6561  002728  0012               	return	
  6562  00272A                     __end_of_isdigit:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon3	equ	0xFF0
  6572                           indf0	equ	0xFEF
  6573                           postinc0	equ	0xFEE
  6574                           fsr0h	equ	0xFEA
  6575                           fsr0l	equ	0xFE9
  6576                           wreg	equ	0xFE8
  6577                           postdec1	equ	0xFE5
  6578                           fsr1l	equ	0xFE1
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function ___wmul *****************
  6587 ;; Defined at:
  6588 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6591 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  product         2    4[BANK0 ] unsigned int 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  2    0[BANK0 ] unsigned int 
  6596 ;; Registers used:
  6597 ;;		wreg, status,2, status,0, prodl, prodh
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6603 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;Total ram usage:        6 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    7
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_printf
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text25
  6618  002430                     __ptext25:
  6619                           	opt stack 0
  6620  002430                     ___wmul:
  6621                           	opt stack 20
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;incstack = 0
  6625  002430  0100               	movlb	0	; () banked
  6626  002432  5180               	movf	___wmul@multiplier& (0+255),w,b
  6627  002434  0100               	movlb	0	; () banked
  6628  002436  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6629  002438  CFF3 F084          	movff	prodl,___wmul@product
  6630  00243C  CFF4 F085          	movff	prodh,___wmul@product+1
  6631  002440  0100               	movlb	0	; () banked
  6632  002442  5180               	movf	___wmul@multiplier& (0+255),w,b
  6633  002444  0100               	movlb	0	; () banked
  6634  002446  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6635  002448  50F3               	movf	prodl,w,c
  6636  00244A  0100               	movlb	0	; () banked
  6637  00244C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6638  00244E  0100               	movlb	0	; () banked
  6639  002450  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6640  002452  0100               	movlb	0	; () banked
  6641  002454  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6642  002456  50F3               	movf	prodl,w,c
  6643  002458  0100               	movlb	0	; () banked
  6644  00245A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6645                           
  6646                           ; BSR set to: 0
  6647  00245C  C084  F080         	movff	___wmul@product,?___wmul
  6648  002460  C085  F081         	movff	___wmul@product+1,?___wmul+1
  6649  002464  0012               	return	
  6650  002466                     __end_of___wmul:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           intcon3	equ	0xFF0
  6660                           indf0	equ	0xFEF
  6661                           postinc0	equ	0xFEE
  6662                           fsr0h	equ	0xFEA
  6663                           fsr0l	equ	0xFE9
  6664                           wreg	equ	0xFE8
  6665                           postdec1	equ	0xFE5
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function ___lwmod *****************
  6675 ;; Defined at:
  6676 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  dividend        2    7[BANK0 ] unsigned int 
  6679 ;;  divisor         2    9[BANK0 ] unsigned int 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  counter         1   11[BANK0 ] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  2    7[BANK0 ] unsigned int 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6691 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;Total ram usage:        5 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    7
  6698 ;; This function calls:
  6699 ;;		Nothing
  6700 ;; This function is called by:
  6701 ;;		_printf
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text26
  6706  002138                     __ptext26:
  6707                           	opt stack 0
  6708  002138                     ___lwmod:
  6709                           	opt stack 20
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;incstack = 0
  6713  002138  0100               	movlb	0	; () banked
  6714  00213A  5189               	movf	___lwmod@divisor& (0+255),w,b
  6715  00213C  0100               	movlb	0	; () banked
  6716  00213E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6717  002140  B4D8               	btfsc	status,2,c
  6718  002142  D026               	goto	l1474
  6719                           
  6720                           ; BSR set to: 0
  6721  002144  0E01               	movlw	1
  6722  002146  0100               	movlb	0	; () banked
  6723  002148  6F8B               	movwf	___lwmod@counter& (0+255),b
  6724  00214A  D006               	goto	l3713
  6725  00214C                     l3711:
  6726                           
  6727                           ; BSR set to: 0
  6728  00214C  0100               	movlb	0	; () banked
  6729  00214E  90D8               	bcf	status,0,c
  6730  002150  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6731  002152  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6732  002154  0100               	movlb	0	; () banked
  6733  002156  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6734  002158                     l3713:
  6735                           
  6736                           ; BSR set to: 0
  6737  002158  0100               	movlb	0	; () banked
  6738  00215A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6739  00215C  D7F7               	goto	l3711
  6740  00215E                     l3715:
  6741                           
  6742                           ; BSR set to: 0
  6743  00215E  0100               	movlb	0	; () banked
  6744  002160  5189               	movf	___lwmod@divisor& (0+255),w,b
  6745  002162  0100               	movlb	0	; () banked
  6746  002164  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6747  002166  0100               	movlb	0	; () banked
  6748  002168  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6749  00216A  0100               	movlb	0	; () banked
  6750  00216C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6751  00216E  A0D8               	btfss	status,0,c
  6752  002170  D008               	goto	l3719
  6753                           
  6754                           ; BSR set to: 0
  6755  002172  0100               	movlb	0	; () banked
  6756  002174  5189               	movf	___lwmod@divisor& (0+255),w,b
  6757  002176  0100               	movlb	0	; () banked
  6758  002178  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6759  00217A  0100               	movlb	0	; () banked
  6760  00217C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6761  00217E  0100               	movlb	0	; () banked
  6762  002180  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6763  002182                     l3719:
  6764                           
  6765                           ; BSR set to: 0
  6766  002182  0100               	movlb	0	; () banked
  6767  002184  90D8               	bcf	status,0,c
  6768  002186  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6769  002188  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6770                           
  6771                           ; BSR set to: 0
  6772  00218A  0100               	movlb	0	; () banked
  6773  00218C  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6774  00218E  D7E7               	goto	l3715
  6775  002190                     l1474:
  6776                           
  6777                           ; BSR set to: 0
  6778  002190  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6779  002194  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6780                           
  6781                           ; BSR set to: 0
  6782  002198  0012               	return		;funcret
  6783  00219A                     __end_of___lwmod:
  6784                           	opt stack 0
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           intcon3	equ	0xFF0
  6793                           indf0	equ	0xFEF
  6794                           postinc0	equ	0xFEE
  6795                           fsr0h	equ	0xFEA
  6796                           fsr0l	equ	0xFE9
  6797                           wreg	equ	0xFE8
  6798                           postdec1	equ	0xFE5
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           fsr2h	equ	0xFDA
  6804                           fsr2l	equ	0xFD9
  6805                           status	equ	0xFD8
  6806                           
  6807 ;; *************** function ___lwdiv *****************
  6808 ;; Defined at:
  6809 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;  dividend        2    0[BANK0 ] unsigned int 
  6812 ;;  divisor         2    2[BANK0 ] unsigned int 
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  quotient        2    4[BANK0 ] unsigned int 
  6815 ;;  counter         1    6[BANK0 ] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  2    0[BANK0 ] unsigned int 
  6818 ;; Registers used:
  6819 ;;		wreg, status,2, status,0
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6825 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6826 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;Total ram usage:        7 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    7
  6832 ;; This function calls:
  6833 ;;		Nothing
  6834 ;; This function is called by:
  6835 ;;		_printf
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text27
  6840  001F72                     __ptext27:
  6841                           	opt stack 0
  6842  001F72                     ___lwdiv:
  6843                           	opt stack 20
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;incstack = 0
  6847  001F72  0E00               	movlw	0
  6848  001F74  0100               	movlb	0	; () banked
  6849  001F76  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6850  001F78  0E00               	movlw	0
  6851  001F7A  6F84               	movwf	___lwdiv@quotient& (0+255),b
  6852                           
  6853                           ; BSR set to: 0
  6854  001F7C  0100               	movlb	0	; () banked
  6855  001F7E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6856  001F80  0100               	movlb	0	; () banked
  6857  001F82  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6858  001F84  B4D8               	btfsc	status,2,c
  6859  001F86  D02C               	goto	l1464
  6860                           
  6861                           ; BSR set to: 0
  6862  001F88  0E01               	movlw	1
  6863  001F8A  0100               	movlb	0	; () banked
  6864  001F8C  6F86               	movwf	___lwdiv@counter& (0+255),b
  6865  001F8E  D006               	goto	l3693
  6866  001F90                     l3691:
  6867                           
  6868                           ; BSR set to: 0
  6869  001F90  0100               	movlb	0	; () banked
  6870  001F92  90D8               	bcf	status,0,c
  6871  001F94  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6872  001F96  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6873  001F98  0100               	movlb	0	; () banked
  6874  001F9A  2B86               	incf	___lwdiv@counter& (0+255),f,b
  6875  001F9C                     l3693:
  6876                           
  6877                           ; BSR set to: 0
  6878  001F9C  0100               	movlb	0	; () banked
  6879  001F9E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6880  001FA0  D7F7               	goto	l3691
  6881  001FA2                     l3695:
  6882                           
  6883                           ; BSR set to: 0
  6884  001FA2  0100               	movlb	0	; () banked
  6885  001FA4  90D8               	bcf	status,0,c
  6886  001FA6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  6887  001FA8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6888                           
  6889                           ; BSR set to: 0
  6890  001FAA  0100               	movlb	0	; () banked
  6891  001FAC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6892  001FAE  0100               	movlb	0	; () banked
  6893  001FB0  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6894  001FB2  0100               	movlb	0	; () banked
  6895  001FB4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6896  001FB6  0100               	movlb	0	; () banked
  6897  001FB8  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6898  001FBA  A0D8               	btfss	status,0,c
  6899  001FBC  D00A               	goto	l3703
  6900                           
  6901                           ; BSR set to: 0
  6902  001FBE  0100               	movlb	0	; () banked
  6903  001FC0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6904  001FC2  0100               	movlb	0	; () banked
  6905  001FC4  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6906  001FC6  0100               	movlb	0	; () banked
  6907  001FC8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6908  001FCA  0100               	movlb	0	; () banked
  6909  001FCC  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6910                           
  6911                           ; BSR set to: 0
  6912  001FCE  0100               	movlb	0	; () banked
  6913  001FD0  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  6914  001FD2                     l3703:
  6915                           
  6916                           ; BSR set to: 0
  6917  001FD2  0100               	movlb	0	; () banked
  6918  001FD4  90D8               	bcf	status,0,c
  6919  001FD6  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6920  001FD8  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6921                           
  6922                           ; BSR set to: 0
  6923  001FDA  0100               	movlb	0	; () banked
  6924  001FDC  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  6925  001FDE  D7E1               	goto	l3695
  6926  001FE0                     l1464:
  6927                           
  6928                           ; BSR set to: 0
  6929  001FE0  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  6930  001FE4  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6931                           
  6932                           ; BSR set to: 0
  6933  001FE8  0012               	return		;funcret
  6934  001FEA                     __end_of___lwdiv:
  6935                           	opt stack 0
  6936                           tblptru	equ	0xFF8
  6937                           tblptrh	equ	0xFF7
  6938                           tblptrl	equ	0xFF6
  6939                           tablat	equ	0xFF5
  6940                           prodh	equ	0xFF4
  6941                           prodl	equ	0xFF3
  6942                           intcon	equ	0xFF2
  6943                           intcon3	equ	0xFF0
  6944                           indf0	equ	0xFEF
  6945                           postinc0	equ	0xFEE
  6946                           fsr0h	equ	0xFEA
  6947                           fsr0l	equ	0xFE9
  6948                           wreg	equ	0xFE8
  6949                           postdec1	equ	0xFE5
  6950                           fsr1l	equ	0xFE1
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958 ;; *************** function _lcdInst *****************
  6959 ;; Defined at:
  6960 ;;		line 13 in file "lcd.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;  data            1    wreg     unsigned char 
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  data            1    2[BANK0 ] unsigned char 
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      void 
  6967 ;; Registers used:
  6968 ;;		wreg, status,2, status,0, cstack
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;Total ram usage:        1 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    8
  6981 ;; This function calls:
  6982 ;;		_lcdNibble
  6983 ;; This function is called by:
  6984 ;;		_UI
  6985 ;;		_change_state_to_menu_start
  6986 ;;		_initLCD
  6987 ;;		_printRTC
  6988 ;;		_Loading
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text28
  6993  002880                     __ptext28:
  6994                           	opt stack 0
  6995  002880                     _lcdInst:
  6996                           	opt stack 20
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;incstack = 0
  7000                           ;lcdInst@data stored from wreg
  7001  002880  0100               	movlb	0	; () banked
  7002  002882  6F82               	movwf	lcdInst@data& (0+255),b
  7003                           
  7004                           ;lcd.c: 14: LATDbits.LATD2 = 0;
  7005  002884  948C               	bcf	3980,2,c	;volatile
  7006                           
  7007                           ;lcd.c: 15: lcdNibble(data);
  7008  002886  0100               	movlb	0	; () banked
  7009  002888  5182               	movf	lcdInst@data& (0+255),w,b
  7010  00288A  EC68  F010         	call	_lcdNibble
  7011  00288E  0012               	return		;funcret
  7012  002890                     __end_of_lcdInst:
  7013                           	opt stack 0
  7014                           tblptru	equ	0xFF8
  7015                           tblptrh	equ	0xFF7
  7016                           tblptrl	equ	0xFF6
  7017                           tablat	equ	0xFF5
  7018                           prodh	equ	0xFF4
  7019                           prodl	equ	0xFF3
  7020                           intcon	equ	0xFF2
  7021                           intcon3	equ	0xFF0
  7022                           indf0	equ	0xFEF
  7023                           postinc0	equ	0xFEE
  7024                           fsr0h	equ	0xFEA
  7025                           fsr0l	equ	0xFE9
  7026                           wreg	equ	0xFE8
  7027                           postdec1	equ	0xFE5
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           postinc2	equ	0xFDE
  7031                           postdec2	equ	0xFDD
  7032                           fsr2h	equ	0xFDA
  7033                           fsr2l	equ	0xFD9
  7034                           status	equ	0xFD8
  7035                           
  7036 ;; *************** function _lcdNibble *****************
  7037 ;; Defined at:
  7038 ;;		line 23 in file "lcd.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;  data            1    wreg     unsigned char 
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;  data            1    1[BANK0 ] unsigned char 
  7043 ;;  temp            1    0[BANK0 ] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg, status,2, status,0
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;Total ram usage:        2 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    7
  7060 ;; This function calls:
  7061 ;;		Nothing
  7062 ;; This function is called by:
  7063 ;;		_lcdInst
  7064 ;;		_putch
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           	psect	text29
  7069  0020D0                     __ptext29:
  7070                           	opt stack 0
  7071  0020D0                     _lcdNibble:
  7072                           	opt stack 20
  7073                           
  7074                           ;incstack = 0
  7075                           ;lcdNibble@data stored from wreg
  7076  0020D0  0100               	movlb	0	; () banked
  7077  0020D2  6F81               	movwf	lcdNibble@data& (0+255),b
  7078                           
  7079                           ;lcd.c: 25: char temp = data & 0xF0;
  7080  0020D4  0100               	movlb	0	; () banked
  7081  0020D6  5181               	movf	lcdNibble@data& (0+255),w,b
  7082  0020D8  0BF0               	andlw	240
  7083  0020DA  0100               	movlb	0	; () banked
  7084  0020DC  6F80               	movwf	lcdNibble@temp& (0+255),b
  7085                           
  7086                           ;lcd.c: 26: LATD = LATD & 0x0F;
  7087  0020DE  508C               	movf	3980,w,c	;volatile
  7088  0020E0  0B0F               	andlw	15
  7089  0020E2  6E8C               	movwf	3980,c	;volatile
  7090                           
  7091                           ;lcd.c: 27: LATD = temp | LATD;
  7092  0020E4  0100               	movlb	0	; () banked
  7093  0020E6  5180               	movf	lcdNibble@temp& (0+255),w,b
  7094  0020E8  108C               	iorwf	3980,w,c	;volatile
  7095  0020EA  6E8C               	movwf	3980,c	;volatile
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;lcd.c: 29: LATDbits.LATD3 = 1;
  7099  0020EC  868C               	bsf	3980,3,c	;volatile
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7103  0020EE  0E42               	movlw	66
  7104  0020F0                     u4707:
  7105  0020F0  2EE8               	decfsz	wreg,f,c
  7106  0020F2  D7FE               	bra	u4707
  7107  0020F4  D000               	nop2	
  7108                           
  7109                           ;lcd.c: 31: LATDbits.LATD3 = 0;
  7110  0020F6  968C               	bcf	3980,3,c	;volatile
  7111                           
  7112                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7113  0020F8  0E42               	movlw	66
  7114  0020FA                     u4717:
  7115  0020FA  2EE8               	decfsz	wreg,f,c
  7116  0020FC  D7FE               	bra	u4717
  7117  0020FE  D000               	nop2	
  7118                           
  7119                           ;lcd.c: 34: data = data << 4;
  7120  002100  0100               	movlb	0	; () banked
  7121  002102  3981               	swapf	lcdNibble@data& (0+255),w,b
  7122  002104  0BF0               	andlw	240
  7123  002106  0100               	movlb	0	; () banked
  7124  002108  6F81               	movwf	lcdNibble@data& (0+255),b
  7125                           
  7126                           ;lcd.c: 36: temp = data & 0xF0;
  7127  00210A  0100               	movlb	0	; () banked
  7128  00210C  5181               	movf	lcdNibble@data& (0+255),w,b
  7129  00210E  0BF0               	andlw	240
  7130  002110  0100               	movlb	0	; () banked
  7131  002112  6F80               	movwf	lcdNibble@temp& (0+255),b
  7132                           
  7133                           ;lcd.c: 37: LATD = LATD & 0x0F;
  7134  002114  508C               	movf	3980,w,c	;volatile
  7135  002116  0B0F               	andlw	15
  7136  002118  6E8C               	movwf	3980,c	;volatile
  7137                           
  7138                           ;lcd.c: 38: LATD = temp | LATD;
  7139  00211A  0100               	movlb	0	; () banked
  7140  00211C  5180               	movf	lcdNibble@temp& (0+255),w,b
  7141  00211E  108C               	iorwf	3980,w,c	;volatile
  7142  002120  6E8C               	movwf	3980,c	;volatile
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  7146  002122  868C               	bsf	3980,3,c	;volatile
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7150  002124  0E42               	movlw	66
  7151  002126                     u4727:
  7152  002126  2EE8               	decfsz	wreg,f,c
  7153  002128  D7FE               	bra	u4727
  7154  00212A  D000               	nop2	
  7155                           
  7156                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7157  00212C  968C               	bcf	3980,3,c	;volatile
  7158                           
  7159                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7160  00212E  0E42               	movlw	66
  7161  002130                     u4737:
  7162  002130  2EE8               	decfsz	wreg,f,c
  7163  002132  D7FE               	bra	u4737
  7164  002134  D000               	nop2	
  7165  002136  0012               	return		;funcret
  7166  002138                     __end_of_lcdNibble:
  7167                           	opt stack 0
  7168                           tblptru	equ	0xFF8
  7169                           tblptrh	equ	0xFF7
  7170                           tblptrl	equ	0xFF6
  7171                           tablat	equ	0xFF5
  7172                           prodh	equ	0xFF4
  7173                           prodl	equ	0xFF3
  7174                           intcon	equ	0xFF2
  7175                           intcon3	equ	0xFF0
  7176                           indf0	equ	0xFEF
  7177                           postinc0	equ	0xFEE
  7178                           fsr0h	equ	0xFEA
  7179                           fsr0l	equ	0xFE9
  7180                           wreg	equ	0xFE8
  7181                           postdec1	equ	0xFE5
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _getRTC *****************
  7191 ;; Defined at:
  7192 ;;		line 42 in file "RTC.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  i               2    3[BANK0 ] int 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      void 
  7199 ;; Registers used:
  7200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:        2 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    9
  7213 ;; This function calls:
  7214 ;;		_I2C_Master_Read
  7215 ;;		_I2C_Master_Start
  7216 ;;		_I2C_Master_Stop
  7217 ;;		_I2C_Master_Write
  7218 ;; This function is called by:
  7219 ;;		_printRTC
  7220 ;;		_initSortTimer
  7221 ;;		_getIR
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text30
  7226  001E72                     __ptext30:
  7227                           	opt stack 0
  7228  001E72                     _getRTC:
  7229                           	opt stack 18
  7230                           
  7231                           ;RTC.c: 46: I2C_Master_Start();
  7232                           
  7233                           ;incstack = 0
  7234  001E72  EC66  F014         	call	_I2C_Master_Start	;wreg free
  7235                           
  7236                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
  7237  001E76  0E00               	movlw	0
  7238  001E78  0100               	movlb	0	; () banked
  7239  001E7A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7240  001E7C  0ED0               	movlw	208
  7241  001E7E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7242  001E80  EC54  F014         	call	_I2C_Master_Write	;wreg free
  7243                           
  7244                           ;RTC.c: 48: I2C_Master_Write(0x00);
  7245  001E84  0E00               	movlw	0
  7246  001E86  0100               	movlb	0	; () banked
  7247  001E88  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7248  001E8A  0E00               	movlw	0
  7249  001E8C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7250  001E8E  EC54  F014         	call	_I2C_Master_Write	;wreg free
  7251                           
  7252                           ;RTC.c: 49: I2C_Master_Stop();
  7253  001E92  EC62  F014         	call	_I2C_Master_Stop	;wreg free
  7254                           
  7255                           ;RTC.c: 52: I2C_Master_Start();
  7256  001E96  EC66  F014         	call	_I2C_Master_Start	;wreg free
  7257                           
  7258                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
  7259  001E9A  0E00               	movlw	0
  7260  001E9C  0100               	movlb	0	; () banked
  7261  001E9E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7262  001EA0  0ED1               	movlw	209
  7263  001EA2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7264  001EA4  EC54  F014         	call	_I2C_Master_Write	;wreg free
  7265                           
  7266                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
  7267  001EA8  0E00               	movlw	0
  7268  001EAA  0100               	movlb	0	; () banked
  7269  001EAC  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7270  001EAE  0E00               	movlw	0
  7271  001EB0  6F83               	movwf	getRTC@i& (0+255),b
  7272  001EB2                     l3945:
  7273                           
  7274                           ; BSR set to: 0
  7275  001EB2  0100               	movlb	0	; () banked
  7276  001EB4  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7277  001EB6  D008               	goto	l3949
  7278  001EB8  0100               	movlb	0	; () banked
  7279  001EBA  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7280  001EBC  E115               	bnz	l3955
  7281  001EBE  0E06               	movlw	6
  7282  001EC0  0100               	movlb	0	; () banked
  7283  001EC2  5D83               	subwf	getRTC@i& (0+255),w,b
  7284  001EC4  B0D8               	btfsc	status,0,c
  7285  001EC6  D010               	goto	l3955
  7286  001EC8                     l3949:
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
  7290  001EC8  0ED4               	movlw	low _time
  7291  001ECA  0100               	movlb	0	; () banked
  7292  001ECC  2583               	addwf	getRTC@i& (0+255),w,b
  7293  001ECE  6ED9               	movwf	fsr2l,c
  7294  001ED0  0E00               	movlw	high _time
  7295  001ED2  0100               	movlb	0	; () banked
  7296  001ED4  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7297  001ED6  6EDA               	movwf	fsr2h,c
  7298  001ED8  0E01               	movlw	1
  7299  001EDA  EC3C  F013         	call	_I2C_Master_Read
  7300  001EDE  6EDF               	movwf	indf2,c
  7301  001EE0  0100               	movlb	0	; () banked
  7302  001EE2  4B83               	infsnz	getRTC@i& (0+255),f,b
  7303  001EE4  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7304  001EE6  D7E5               	goto	l3945
  7305  001EE8                     l3955:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;RTC.c: 56: }
  7309                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
  7310  001EE8  0E00               	movlw	0
  7311  001EEA  EC3C  F013         	call	_I2C_Master_Read
  7312  001EEE  0100               	movlb	0	; () banked
  7313  001EF0  6FDA               	movwf	(_time+6)& (0+255),b
  7314                           
  7315                           ;RTC.c: 58: I2C_Master_Stop();
  7316  001EF2  EC62  F014         	call	_I2C_Master_Stop	;wreg free
  7317  001EF6  0012               	return		;funcret
  7318  001EF8                     __end_of_getRTC:
  7319                           	opt stack 0
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           intcon	equ	0xFF2
  7327                           intcon3	equ	0xFF0
  7328                           indf0	equ	0xFEF
  7329                           postinc0	equ	0xFEE
  7330                           fsr0h	equ	0xFEA
  7331                           fsr0l	equ	0xFE9
  7332                           wreg	equ	0xFE8
  7333                           postdec1	equ	0xFE5
  7334                           fsr1l	equ	0xFE1
  7335                           indf2	equ	0xFDF
  7336                           postinc2	equ	0xFDE
  7337                           postdec2	equ	0xFDD
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8
  7341                           
  7342 ;; *************** function _I2C_Master_Write *****************
  7343 ;; Defined at:
  7344 ;;		line 47 in file "I2C.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;  d               2    1[BANK0 ] unsigned int 
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  1    wreg      void 
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;Total ram usage:        2 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    8
  7365 ;; This function calls:
  7366 ;;		_I2C_Master_Wait
  7367 ;; This function is called by:
  7368 ;;		_loadRTC
  7369 ;;		_getRTC
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text31
  7374  0028A8                     __ptext31:
  7375                           	opt stack 0
  7376  0028A8                     _I2C_Master_Write:
  7377                           	opt stack 18
  7378                           
  7379                           ;I2C.c: 49: I2C_Master_Wait();
  7380                           
  7381                           ;incstack = 0
  7382  0028A8  EC12  F014         	call	_I2C_Master_Wait	;wreg free
  7383                           
  7384                           ;I2C.c: 50: SSPBUF = d;
  7385  0028AC  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7386  0028B0  0012               	return		;funcret
  7387  0028B2                     __end_of_I2C_Master_Write:
  7388                           	opt stack 0
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           intcon	equ	0xFF2
  7396                           intcon3	equ	0xFF0
  7397                           indf0	equ	0xFEF
  7398                           postinc0	equ	0xFEE
  7399                           fsr0h	equ	0xFEA
  7400                           fsr0l	equ	0xFE9
  7401                           wreg	equ	0xFE8
  7402                           postdec1	equ	0xFE5
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8
  7410                           
  7411 ;; *************** function _I2C_Master_Stop *****************
  7412 ;; Defined at:
  7413 ;;		line 41 in file "I2C.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;		None
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg, status,2, status,0, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;Total ram usage:        0 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:    8
  7434 ;; This function calls:
  7435 ;;		_I2C_Master_Wait
  7436 ;; This function is called by:
  7437 ;;		_loadRTC
  7438 ;;		_getRTC
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           	psect	text32
  7443  0028C4                     __ptext32:
  7444                           	opt stack 0
  7445  0028C4                     _I2C_Master_Stop:
  7446                           	opt stack 18
  7447                           
  7448                           ;I2C.c: 43: I2C_Master_Wait();
  7449                           
  7450                           ;incstack = 0
  7451  0028C4  EC12  F014         	call	_I2C_Master_Wait	;wreg free
  7452                           
  7453                           ;I2C.c: 44: PEN = 1;
  7454  0028C8  84C5               	bsf	4037,2,c	;volatile
  7455  0028CA  0012               	return		;funcret
  7456  0028CC                     __end_of_I2C_Master_Stop:
  7457                           	opt stack 0
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           prodh	equ	0xFF4
  7463                           prodl	equ	0xFF3
  7464                           intcon	equ	0xFF2
  7465                           intcon3	equ	0xFF0
  7466                           indf0	equ	0xFEF
  7467                           postinc0	equ	0xFEE
  7468                           fsr0h	equ	0xFEA
  7469                           fsr0l	equ	0xFE9
  7470                           wreg	equ	0xFE8
  7471                           postdec1	equ	0xFE5
  7472                           fsr1l	equ	0xFE1
  7473                           indf2	equ	0xFDF
  7474                           postinc2	equ	0xFDE
  7475                           postdec2	equ	0xFDD
  7476                           fsr2h	equ	0xFDA
  7477                           fsr2l	equ	0xFD9
  7478                           status	equ	0xFD8
  7479                           
  7480 ;; *************** function _I2C_Master_Start *****************
  7481 ;; Defined at:
  7482 ;;		line 29 in file "I2C.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;		None
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;		None
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      void 
  7489 ;; Registers used:
  7490 ;;		wreg, status,2, status,0, cstack
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;Total ram usage:        0 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    8
  7503 ;; This function calls:
  7504 ;;		_I2C_Master_Wait
  7505 ;; This function is called by:
  7506 ;;		_loadRTC
  7507 ;;		_getRTC
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           	psect	text33
  7512  0028CC                     __ptext33:
  7513                           	opt stack 0
  7514  0028CC                     _I2C_Master_Start:
  7515                           	opt stack 18
  7516                           
  7517                           ;I2C.c: 31: I2C_Master_Wait();
  7518                           
  7519                           ;incstack = 0
  7520  0028CC  EC12  F014         	call	_I2C_Master_Wait	;wreg free
  7521                           
  7522                           ;I2C.c: 32: SEN = 1;
  7523  0028D0  80C5               	bsf	4037,0,c	;volatile
  7524  0028D2  0012               	return		;funcret
  7525  0028D4                     __end_of_I2C_Master_Start:
  7526                           	opt stack 0
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           intcon3	equ	0xFF0
  7535                           indf0	equ	0xFEF
  7536                           postinc0	equ	0xFEE
  7537                           fsr0h	equ	0xFEA
  7538                           fsr0l	equ	0xFE9
  7539                           wreg	equ	0xFE8
  7540                           postdec1	equ	0xFE5
  7541                           fsr1l	equ	0xFE1
  7542                           indf2	equ	0xFDF
  7543                           postinc2	equ	0xFDE
  7544                           postdec2	equ	0xFDD
  7545                           fsr2h	equ	0xFDA
  7546                           fsr2l	equ	0xFD9
  7547                           status	equ	0xFD8
  7548                           
  7549 ;; *************** function _I2C_Master_Read *****************
  7550 ;; Defined at:
  7551 ;;		line 53 in file "I2C.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  a               1    wreg     unsigned char 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;  a               1    1[BANK0 ] unsigned char 
  7556 ;;  temp            1    2[BANK0 ] unsigned char 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      unsigned char 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;Total ram usage:        2 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    8
  7573 ;; This function calls:
  7574 ;;		_I2C_Master_Wait
  7575 ;; This function is called by:
  7576 ;;		_getRTC
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           	psect	text34
  7581  002678                     __ptext34:
  7582                           	opt stack 0
  7583  002678                     _I2C_Master_Read:
  7584                           	opt stack 18
  7585                           
  7586                           ;incstack = 0
  7587                           ;I2C_Master_Read@a stored from wreg
  7588  002678  0100               	movlb	0	; () banked
  7589  00267A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7590                           
  7591                           ;I2C.c: 55: unsigned char temp;
  7592                           ;I2C.c: 56: I2C_Master_Wait();
  7593  00267C  EC12  F014         	call	_I2C_Master_Wait	;wreg free
  7594                           
  7595                           ;I2C.c: 57: RCEN = 1;
  7596  002680  86C5               	bsf	4037,3,c	;volatile
  7597                           
  7598                           ;I2C.c: 58: I2C_Master_Wait();
  7599  002682  EC12  F014         	call	_I2C_Master_Wait	;wreg free
  7600                           
  7601                           ;I2C.c: 59: temp = SSPBUF;
  7602  002686  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7603                           
  7604                           ;I2C.c: 60: I2C_Master_Wait();
  7605  00268A  EC12  F014         	call	_I2C_Master_Wait	;wreg free
  7606                           
  7607                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7608  00268E  0100               	movlb	0	; () banked
  7609  002690  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7610  002692  0100               	movlb	0	; () banked
  7611  002694  A4D8               	btfss	status,2,c
  7612  002696  D002               	goto	u2300
  7613  002698  8AC5               	bsf	4037,5,c	;volatile
  7614  00269A  D001               	goto	l3657
  7615  00269C                     u2300:
  7616  00269C  9AC5               	bcf	4037,5,c	;volatile
  7617  00269E                     l3657:
  7618                           
  7619                           ;I2C.c: 62: ACKEN = 1;
  7620  00269E  88C5               	bsf	4037,4,c	;volatile
  7621                           
  7622                           ;I2C.c: 63: return temp;
  7623  0026A0  0100               	movlb	0	; () banked
  7624  0026A2  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7625  0026A4  0012               	return	
  7626  0026A6                     __end_of_I2C_Master_Read:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           intcon3	equ	0xFF0
  7636                           indf0	equ	0xFEF
  7637                           postinc0	equ	0xFEE
  7638                           fsr0h	equ	0xFEA
  7639                           fsr0l	equ	0xFE9
  7640                           wreg	equ	0xFE8
  7641                           postdec1	equ	0xFE5
  7642                           fsr1l	equ	0xFE1
  7643                           indf2	equ	0xFDF
  7644                           postinc2	equ	0xFDE
  7645                           postdec2	equ	0xFDD
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function _I2C_Master_Wait *****************
  7651 ;; Defined at:
  7652 ;;		line 24 in file "I2C.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;Total ram usage:        1 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    7
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_I2C_Master_Start
  7677 ;;		_I2C_Master_Stop
  7678 ;;		_I2C_Master_Write
  7679 ;;		_I2C_Master_Read
  7680 ;;		_I2C_Master_RepeatedStart
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           	psect	text35
  7685  002824                     __ptext35:
  7686                           	opt stack 0
  7687  002824                     _I2C_Master_Wait:
  7688                           	opt stack 18
  7689  002824                     l120:
  7690  002824  B4C7               	btfsc	4039,2,c	;volatile
  7691  002826  D7FE               	goto	l120
  7692  002828  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7693  00282C  0E1F               	movlw	31
  7694  00282E  0100               	movlb	0	; () banked
  7695  002830  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7696  002832  B4D8               	btfsc	status,2,c
  7697  002834  0012               	return	
  7698  002836  D7F6               	goto	l120
  7699  002838                     __end_of_I2C_Master_Wait:
  7700                           	opt stack 0
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           intcon	equ	0xFF2
  7708                           intcon3	equ	0xFF0
  7709                           indf0	equ	0xFEF
  7710                           postinc0	equ	0xFEE
  7711                           fsr0h	equ	0xFEA
  7712                           fsr0l	equ	0xFE9
  7713                           wreg	equ	0xFE8
  7714                           postdec1	equ	0xFE5
  7715                           fsr1l	equ	0xFE1
  7716                           indf2	equ	0xFDF
  7717                           postinc2	equ	0xFDE
  7718                           postdec2	equ	0xFDD
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function ___awmod *****************
  7724 ;; Defined at:
  7725 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  dividend        2    0[BANK0 ] int 
  7728 ;;  divisor         2    2[BANK0 ] int 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  sign            1    5[BANK0 ] unsigned char 
  7731 ;;  counter         1    4[BANK0 ] unsigned char 
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  2    0[BANK0 ] int 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;Total ram usage:        6 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    7
  7748 ;; This function calls:
  7749 ;;		Nothing
  7750 ;; This function is called by:
  7751 ;;		_UI
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           	psect	text36
  7756  001CAC                     __ptext36:
  7757                           	opt stack 0
  7758  001CAC                     ___awmod:
  7759                           	opt stack 22
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;incstack = 0
  7763  001CAC  0E00               	movlw	0
  7764  001CAE  0100               	movlb	0	; () banked
  7765  001CB0  6F85               	movwf	___awmod@sign& (0+255),b
  7766                           
  7767                           ; BSR set to: 0
  7768  001CB2  0100               	movlb	0	; () banked
  7769  001CB4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7770  001CB6  D008               	goto	l4707
  7771                           
  7772                           ; BSR set to: 0
  7773  001CB8  0100               	movlb	0	; () banked
  7774  001CBA  6D80               	negf	___awmod@dividend& (0+255),b
  7775  001CBC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7776  001CBE  B0D8               	btfsc	status,0,c
  7777  001CC0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7778                           
  7779                           ; BSR set to: 0
  7780  001CC2  0E01               	movlw	1
  7781  001CC4  0100               	movlb	0	; () banked
  7782  001CC6  6F85               	movwf	___awmod@sign& (0+255),b
  7783  001CC8                     l4707:
  7784                           
  7785                           ; BSR set to: 0
  7786  001CC8  0100               	movlb	0	; () banked
  7787  001CCA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7788  001CCC  D005               	goto	l4711
  7789                           
  7790                           ; BSR set to: 0
  7791  001CCE  0100               	movlb	0	; () banked
  7792  001CD0  6D82               	negf	___awmod@divisor& (0+255),b
  7793  001CD2  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  7794  001CD4  B0D8               	btfsc	status,0,c
  7795  001CD6  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  7796  001CD8                     l4711:
  7797                           
  7798                           ; BSR set to: 0
  7799  001CD8  0100               	movlb	0	; () banked
  7800  001CDA  5182               	movf	___awmod@divisor& (0+255),w,b
  7801  001CDC  0100               	movlb	0	; () banked
  7802  001CDE  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7803  001CE0  B4D8               	btfsc	status,2,c
  7804  001CE2  D026               	goto	l4727
  7805                           
  7806                           ; BSR set to: 0
  7807  001CE4  0E01               	movlw	1
  7808  001CE6  0100               	movlb	0	; () banked
  7809  001CE8  6F84               	movwf	___awmod@counter& (0+255),b
  7810  001CEA  D006               	goto	l4717
  7811  001CEC                     l4715:
  7812                           
  7813                           ; BSR set to: 0
  7814  001CEC  0100               	movlb	0	; () banked
  7815  001CEE  90D8               	bcf	status,0,c
  7816  001CF0  3782               	rlcf	___awmod@divisor& (0+255),f,b
  7817  001CF2  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7818  001CF4  0100               	movlb	0	; () banked
  7819  001CF6  2B84               	incf	___awmod@counter& (0+255),f,b
  7820  001CF8                     l4717:
  7821                           
  7822                           ; BSR set to: 0
  7823  001CF8  0100               	movlb	0	; () banked
  7824  001CFA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7825  001CFC  D7F7               	goto	l4715
  7826  001CFE                     l4719:
  7827                           
  7828                           ; BSR set to: 0
  7829  001CFE  0100               	movlb	0	; () banked
  7830  001D00  5182               	movf	___awmod@divisor& (0+255),w,b
  7831  001D02  0100               	movlb	0	; () banked
  7832  001D04  5D80               	subwf	___awmod@dividend& (0+255),w,b
  7833  001D06  0100               	movlb	0	; () banked
  7834  001D08  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7835  001D0A  0100               	movlb	0	; () banked
  7836  001D0C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7837  001D0E  A0D8               	btfss	status,0,c
  7838  001D10  D008               	goto	l4723
  7839                           
  7840                           ; BSR set to: 0
  7841  001D12  0100               	movlb	0	; () banked
  7842  001D14  5182               	movf	___awmod@divisor& (0+255),w,b
  7843  001D16  0100               	movlb	0	; () banked
  7844  001D18  5F80               	subwf	___awmod@dividend& (0+255),f,b
  7845  001D1A  0100               	movlb	0	; () banked
  7846  001D1C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7847  001D1E  0100               	movlb	0	; () banked
  7848  001D20  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7849  001D22                     l4723:
  7850                           
  7851                           ; BSR set to: 0
  7852  001D22  0100               	movlb	0	; () banked
  7853  001D24  90D8               	bcf	status,0,c
  7854  001D26  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7855  001D28  3382               	rrcf	___awmod@divisor& (0+255),f,b
  7856                           
  7857                           ; BSR set to: 0
  7858  001D2A  0100               	movlb	0	; () banked
  7859  001D2C  2F84               	decfsz	___awmod@counter& (0+255),f,b
  7860  001D2E  D7E7               	goto	l4719
  7861  001D30                     l4727:
  7862                           
  7863                           ; BSR set to: 0
  7864  001D30  0100               	movlb	0	; () banked
  7865  001D32  5185               	movf	___awmod@sign& (0+255),w,b
  7866  001D34  0100               	movlb	0	; () banked
  7867  001D36  B4D8               	btfsc	status,2,c
  7868  001D38  D005               	goto	l4731
  7869                           
  7870                           ; BSR set to: 0
  7871  001D3A  0100               	movlb	0	; () banked
  7872  001D3C  6D80               	negf	___awmod@dividend& (0+255),b
  7873  001D3E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7874  001D40  B0D8               	btfsc	status,0,c
  7875  001D42  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7876  001D44                     l4731:
  7877                           
  7878                           ; BSR set to: 0
  7879  001D44  C080  F080         	movff	___awmod@dividend,?___awmod
  7880  001D48  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  7881  001D4C  0012               	return	
  7882  001D4E                     __end_of___awmod:
  7883                           	opt stack 0
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           intcon	equ	0xFF2
  7891                           intcon3	equ	0xFF0
  7892                           indf0	equ	0xFEF
  7893                           postinc0	equ	0xFEE
  7894                           fsr0h	equ	0xFEA
  7895                           fsr0l	equ	0xFE9
  7896                           wreg	equ	0xFE8
  7897                           postdec1	equ	0xFE5
  7898                           fsr1l	equ	0xFE1
  7899                           indf2	equ	0xFDF
  7900                           postinc2	equ	0xFDE
  7901                           postdec2	equ	0xFDD
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8
  7905                           
  7906 ;; *************** function ___awdiv *****************
  7907 ;; Defined at:
  7908 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;  dividend        2    6[BANK0 ] int 
  7911 ;;  divisor         2    8[BANK0 ] int 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  quotient        2   12[BANK0 ] int 
  7914 ;;  sign            1   11[BANK0 ] unsigned char 
  7915 ;;  counter         1   10[BANK0 ] unsigned char 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  2    6[BANK0 ] int 
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7925 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;Total ram usage:        8 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    7
  7932 ;; This function calls:
  7933 ;;		Nothing
  7934 ;; This function is called by:
  7935 ;;		_UI
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text37
  7940  0019DC                     __ptext37:
  7941                           	opt stack 0
  7942  0019DC                     ___awdiv:
  7943                           	opt stack 22
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;incstack = 0
  7947  0019DC  0E00               	movlw	0
  7948  0019DE  0100               	movlb	0	; () banked
  7949  0019E0  6F8B               	movwf	___awdiv@sign& (0+255),b
  7950                           
  7951                           ; BSR set to: 0
  7952  0019E2  0100               	movlb	0	; () banked
  7953  0019E4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7954  0019E6  D008               	goto	l4663
  7955                           
  7956                           ; BSR set to: 0
  7957  0019E8  0100               	movlb	0	; () banked
  7958  0019EA  6D88               	negf	___awdiv@divisor& (0+255),b
  7959  0019EC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7960  0019EE  B0D8               	btfsc	status,0,c
  7961  0019F0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7962                           
  7963                           ; BSR set to: 0
  7964  0019F2  0E01               	movlw	1
  7965  0019F4  0100               	movlb	0	; () banked
  7966  0019F6  6F8B               	movwf	___awdiv@sign& (0+255),b
  7967  0019F8                     l4663:
  7968                           
  7969                           ; BSR set to: 0
  7970  0019F8  0100               	movlb	0	; () banked
  7971  0019FA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7972  0019FC  D008               	goto	l4669
  7973                           
  7974                           ; BSR set to: 0
  7975  0019FE  0100               	movlb	0	; () banked
  7976  001A00  6D86               	negf	___awdiv@dividend& (0+255),b
  7977  001A02  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7978  001A04  B0D8               	btfsc	status,0,c
  7979  001A06  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7980                           
  7981                           ; BSR set to: 0
  7982  001A08  0E01               	movlw	1
  7983  001A0A  0100               	movlb	0	; () banked
  7984  001A0C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  7985  001A0E                     l4669:
  7986                           
  7987                           ; BSR set to: 0
  7988  001A0E  0E00               	movlw	0
  7989  001A10  0100               	movlb	0	; () banked
  7990  001A12  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  7991  001A14  0E00               	movlw	0
  7992  001A16  6F8C               	movwf	___awdiv@quotient& (0+255),b
  7993                           
  7994                           ; BSR set to: 0
  7995  001A18  0100               	movlb	0	; () banked
  7996  001A1A  5188               	movf	___awdiv@divisor& (0+255),w,b
  7997  001A1C  0100               	movlb	0	; () banked
  7998  001A1E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7999  001A20  B4D8               	btfsc	status,2,c
  8000  001A22  D02C               	goto	l4691
  8001                           
  8002                           ; BSR set to: 0
  8003  001A24  0E01               	movlw	1
  8004  001A26  0100               	movlb	0	; () banked
  8005  001A28  6F8A               	movwf	___awdiv@counter& (0+255),b
  8006  001A2A  D006               	goto	l4677
  8007  001A2C                     l4675:
  8008                           
  8009                           ; BSR set to: 0
  8010  001A2C  0100               	movlb	0	; () banked
  8011  001A2E  90D8               	bcf	status,0,c
  8012  001A30  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8013  001A32  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8014  001A34  0100               	movlb	0	; () banked
  8015  001A36  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8016  001A38                     l4677:
  8017                           
  8018                           ; BSR set to: 0
  8019  001A38  0100               	movlb	0	; () banked
  8020  001A3A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8021  001A3C  D7F7               	goto	l4675
  8022  001A3E                     l4679:
  8023                           
  8024                           ; BSR set to: 0
  8025  001A3E  0100               	movlb	0	; () banked
  8026  001A40  90D8               	bcf	status,0,c
  8027  001A42  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8028  001A44  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8029                           
  8030                           ; BSR set to: 0
  8031  001A46  0100               	movlb	0	; () banked
  8032  001A48  5188               	movf	___awdiv@divisor& (0+255),w,b
  8033  001A4A  0100               	movlb	0	; () banked
  8034  001A4C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8035  001A4E  0100               	movlb	0	; () banked
  8036  001A50  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8037  001A52  0100               	movlb	0	; () banked
  8038  001A54  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8039  001A56  A0D8               	btfss	status,0,c
  8040  001A58  D00A               	goto	l4687
  8041                           
  8042                           ; BSR set to: 0
  8043  001A5A  0100               	movlb	0	; () banked
  8044  001A5C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8045  001A5E  0100               	movlb	0	; () banked
  8046  001A60  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8047  001A62  0100               	movlb	0	; () banked
  8048  001A64  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8049  001A66  0100               	movlb	0	; () banked
  8050  001A68  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8051                           
  8052                           ; BSR set to: 0
  8053  001A6A  0100               	movlb	0	; () banked
  8054  001A6C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8055  001A6E                     l4687:
  8056                           
  8057                           ; BSR set to: 0
  8058  001A6E  0100               	movlb	0	; () banked
  8059  001A70  90D8               	bcf	status,0,c
  8060  001A72  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8061  001A74  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8062                           
  8063                           ; BSR set to: 0
  8064  001A76  0100               	movlb	0	; () banked
  8065  001A78  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8066  001A7A  D7E1               	goto	l4679
  8067  001A7C                     l4691:
  8068                           
  8069                           ; BSR set to: 0
  8070  001A7C  0100               	movlb	0	; () banked
  8071  001A7E  518B               	movf	___awdiv@sign& (0+255),w,b
  8072  001A80  0100               	movlb	0	; () banked
  8073  001A82  B4D8               	btfsc	status,2,c
  8074  001A84  D005               	goto	l4695
  8075                           
  8076                           ; BSR set to: 0
  8077  001A86  0100               	movlb	0	; () banked
  8078  001A88  6D8C               	negf	___awdiv@quotient& (0+255),b
  8079  001A8A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8080  001A8C  B0D8               	btfsc	status,0,c
  8081  001A8E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8082  001A90                     l4695:
  8083                           
  8084                           ; BSR set to: 0
  8085  001A90  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8086  001A94  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8087  001A98  0012               	return	
  8088  001A9A                     __end_of___awdiv:
  8089                           	opt stack 0
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           intcon	equ	0xFF2
  8097                           intcon3	equ	0xFF0
  8098                           indf0	equ	0xFEF
  8099                           postinc0	equ	0xFEE
  8100                           fsr0h	equ	0xFEA
  8101                           fsr0l	equ	0xFE9
  8102                           wreg	equ	0xFE8
  8103                           postdec1	equ	0xFE5
  8104                           fsr1l	equ	0xFE1
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _PortTestA5 *****************
  8113 ;; Defined at:
  8114 ;;		line 27 in file "PortHigh.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		None
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    7
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_main
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text38
  8143  00284C                     __ptext38:
  8144                           	opt stack 0
  8145  00284C                     _PortTestA5:
  8146                           	opt stack 23
  8147  00284C                     l200:
  8148  00284C  A281               	btfss	3969,1,c	;volatile
  8149  00284E  D7FE               	goto	l200
  8150                           
  8151                           ;PortHigh.c: 31: }
  8152                           ;PortHigh.c: 32: LATAbits.LATA5 = 1;
  8153  002850  8A89               	bsf	3977,5,c	;volatile
  8154  002852                     l203:
  8155  002852  B281               	btfsc	3969,1,c	;volatile
  8156  002854  D7FE               	goto	l203
  8157                           
  8158                           ;PortHigh.c: 35: }
  8159                           ;PortHigh.c: 36: __nop();
  8160  002856  F000               	nop	
  8161                           
  8162                           ;PortHigh.c: 37: __nop();
  8163  002858  F000               	nop	
  8164                           
  8165                           ;PortHigh.c: 38: LATAbits.LATA5 = 0;
  8166  00285A  9A89               	bcf	3977,5,c	;volatile
  8167  00285C  0012               	return		;funcret
  8168  00285E                     __end_of_PortTestA5:
  8169                           	opt stack 0
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           intcon3	equ	0xFF0
  8178                           indf0	equ	0xFEF
  8179                           postinc0	equ	0xFEE
  8180                           fsr0h	equ	0xFEA
  8181                           fsr0l	equ	0xFE9
  8182                           wreg	equ	0xFE8
  8183                           postdec1	equ	0xFE5
  8184                           fsr1l	equ	0xFE1
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function _handler *****************
  8193 ;; Defined at:
  8194 ;;		line 491 in file "UI.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;		None
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;		None
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      void 
  8201 ;; Registers used:
  8202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;Total ram usage:       16 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    6
  8215 ;; This function calls:
  8216 ;;		_printSortTimer
  8217 ;;		_updateMenu
  8218 ;; This function is called by:
  8219 ;;		Interrupt level 2
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	intcode
  8224  000008                     __pintcode:
  8225                           	opt stack 0
  8226  000008                     _handler:
  8227                           	opt stack 18
  8228                           
  8229                           ;incstack = 0
  8230  000008  8279               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8231  00000A  ED22  F00C         	call	int_func,f	;refresh shadow registers
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           prodh	equ	0xFF4
  8237                           prodl	equ	0xFF3
  8238                           intcon	equ	0xFF2
  8239                           intcon3	equ	0xFF0
  8240                           indf0	equ	0xFEF
  8241                           postinc0	equ	0xFEE
  8242                           fsr0h	equ	0xFEA
  8243                           fsr0l	equ	0xFE9
  8244                           wreg	equ	0xFE8
  8245                           postdec1	equ	0xFE5
  8246                           fsr1l	equ	0xFE1
  8247                           indf2	equ	0xFDF
  8248                           postinc2	equ	0xFDE
  8249                           postdec2	equ	0xFDD
  8250                           fsr2h	equ	0xFDA
  8251                           fsr2l	equ	0xFD9
  8252                           status	equ	0xFD8
  8253                           
  8254                           	psect	intcode_body
  8255  001844                     __pintcode_body:
  8256                           	opt stack 18
  8257  001844                     int_func:
  8258                           	opt stack 18
  8259  001844  0006               	pop		; remove dummy address from shadow register refresh
  8260  001846  CFFA F04D          	movff	pclath,??_handler+2
  8261  00184A  CFFB F04E          	movff	pclatu,??_handler+3
  8262  00184E  CFE9 F04F          	movff	fsr0l,??_handler+4
  8263  001852  CFEA F050          	movff	fsr0h,??_handler+5
  8264  001856  CFE1 F051          	movff	fsr1l,??_handler+6
  8265  00185A  CFE2 F052          	movff	fsr1h,??_handler+7
  8266  00185E  CFD9 F053          	movff	fsr2l,??_handler+8
  8267  001862  CFDA F054          	movff	fsr2h,??_handler+9
  8268  001866  CFF3 F055          	movff	prodl,??_handler+10
  8269  00186A  CFF4 F056          	movff	prodh,??_handler+11
  8270  00186E  CFF6 F057          	movff	tblptrl,??_handler+12
  8271  001872  CFF7 F058          	movff	tblptrh,??_handler+13
  8272  001876  CFF8 F059          	movff	tblptru,??_handler+14
  8273  00187A  CFF5 F05A          	movff	tablat,??_handler+15
  8274                           
  8275                           ;UI.c: 493: if(INT1IF){
  8276  00187E  A0F0               	btfss	intcon3,0,c	;volatile
  8277  001880  D018               	goto	i2l5309
  8278                           
  8279                           ;UI.c: 494: INT1IF = 0;
  8280  001882  90F0               	bcf	intcon3,0,c	;volatile
  8281                           
  8282                           ;UI.c: 495: if(machine_state == UI_state) {
  8283  001884  0100               	movlb	0	; () banked
  8284  001886  51F4               	movf	_machine_state& (0+255),w,b
  8285  001888  A4D8               	btfss	status,2,c
  8286  00188A  D013               	goto	i2l5309
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;UI.c: 496: input = keys[(PORTB & 0xF0) >> 4];
  8290  00188C  3881               	swapf	3969,w,c	;volatile
  8291  00188E  0B0F               	andlw	15
  8292  001890  0B0F               	andlw	15
  8293  001892  6E4B               	movwf	??_handler& (0+255),c
  8294  001894  6A4C               	clrf	(??_handler+1)& (0+255),c
  8295  001896  0EB9               	movlw	low _keys
  8296  001898  244B               	addwf	??_handler,w,c
  8297  00189A  6EF6               	movwf	tblptrl,c
  8298  00189C  0EFD               	movlw	high _keys
  8299  00189E  204C               	addwfc	??_handler+1,w,c
  8300  0018A0  6EF7               	movwf	tblptrh,c
  8301  0018A2                     	if	1	;There are 3 active tblptr bytes
  8302  0018A2  6AF8               	clrf	tblptru,c
  8303  0018A4  0E00               	movlw	low (__mediumconst shr (0+16))
  8304  0018A6  22F8               	addwfc	tblptru,f,c
  8305  0018A8                     	endif
  8306  0018A8  0008               	tblrd		*
  8307  0018AA  CFF5 F078          	movff	tablat,_input
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;UI.c: 497: updateMenu();
  8311  0018AE  ECB7  F007         	call	_updateMenu	;wreg free
  8312  0018B2                     i2l5309:
  8313                           
  8314                           ;UI.c: 498: }
  8315                           ;UI.c: 499: }
  8316                           ;UI.c: 502: if(TMR0IF){
  8317  0018B2  A4F2               	btfss	intcon,2,c	;volatile
  8318  0018B4  D010               	goto	i2l528
  8319                           
  8320                           ;UI.c: 503: TMR0IF = 0;
  8321  0018B6  94F2               	bcf	intcon,2,c	;volatile
  8322                           
  8323                           ;UI.c: 504: if(machine_state == Sorting_state){
  8324  0018B8  0100               	movlb	0	; () banked
  8325  0018BA  05F4               	decf	_machine_state& (0+255),w,b
  8326  0018BC  A4D8               	btfss	status,2,c
  8327  0018BE  D00B               	goto	i2l528
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;UI.c: 505: printSortTimer();
  8331  0018C0  EC32  F00A         	call	_printSortTimer	;wreg free
  8332                           
  8333                           ;UI.c: 508: T0CON = 0b00010111;
  8334  0018C4  0E17               	movlw	23
  8335  0018C6  6ED5               	movwf	4053,c	;volatile
  8336                           
  8337                           ;UI.c: 509: TMR0H = 0b10000101;
  8338  0018C8  0E85               	movlw	133
  8339  0018CA  6ED7               	movwf	4055,c	;volatile
  8340                           
  8341                           ;UI.c: 510: TMR0L = 0b11101110;
  8342  0018CC  0EEE               	movlw	238
  8343  0018CE  6ED6               	movwf	4054,c	;volatile
  8344                           
  8345                           ;UI.c: 511: T0CON = T0CON | 0b10000000;
  8346  0018D0  50D5               	movf	4053,w,c	;volatile
  8347  0018D2  0980               	iorlw	128
  8348  0018D4  6ED5               	movwf	4053,c	;volatile
  8349  0018D6                     i2l528:
  8350  0018D6  C05A  FFF5         	movff	??_handler+15,tablat
  8351  0018DA  C059  FFF8         	movff	??_handler+14,tblptru
  8352  0018DE  C058  FFF7         	movff	??_handler+13,tblptrh
  8353  0018E2  C057  FFF6         	movff	??_handler+12,tblptrl
  8354  0018E6  C056  FFF4         	movff	??_handler+11,prodh
  8355  0018EA  C055  FFF3         	movff	??_handler+10,prodl
  8356  0018EE  C054  FFDA         	movff	??_handler+9,fsr2h
  8357  0018F2  C053  FFD9         	movff	??_handler+8,fsr2l
  8358  0018F6  C052  FFE2         	movff	??_handler+7,fsr1h
  8359  0018FA  C051  FFE1         	movff	??_handler+6,fsr1l
  8360  0018FE  C050  FFEA         	movff	??_handler+5,fsr0h
  8361  001902  C04F  FFE9         	movff	??_handler+4,fsr0l
  8362  001906  C04E  FFFB         	movff	??_handler+3,pclatu
  8363  00190A  C04D  FFFA         	movff	??_handler+2,pclath
  8364  00190E  9279               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8365  001910  0011               	retfie		f
  8366  001912                     __end_of_handler:
  8367                           	opt stack 0
  8368                           pclatu	equ	0xFFB
  8369                           pclath	equ	0xFFA
  8370                           tblptru	equ	0xFF8
  8371                           tblptrh	equ	0xFF7
  8372                           tblptrl	equ	0xFF6
  8373                           tablat	equ	0xFF5
  8374                           prodh	equ	0xFF4
  8375                           prodl	equ	0xFF3
  8376                           intcon	equ	0xFF2
  8377                           intcon3	equ	0xFF0
  8378                           indf0	equ	0xFEF
  8379                           postinc0	equ	0xFEE
  8380                           fsr0h	equ	0xFEA
  8381                           fsr0l	equ	0xFE9
  8382                           wreg	equ	0xFE8
  8383                           postdec1	equ	0xFE5
  8384                           fsr1h	equ	0xFE2
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8
  8392                           
  8393 ;; *************** function _updateMenu *****************
  8394 ;; Defined at:
  8395 ;;		line 147 in file "UI.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;		None
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;		None
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  1    wreg      void 
  8402 ;; Registers used:
  8403 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;Total ram usage:        2 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    5
  8416 ;; This function calls:
  8417 ;;		_change_state_to_logs_11
  8418 ;;		_change_state_to_logs_12
  8419 ;;		_change_state_to_logs_22
  8420 ;;		_change_state_to_logs_23
  8421 ;;		_change_state_to_logs_33
  8422 ;;		_change_state_to_logs_34
  8423 ;;		_change_state_to_menu_11
  8424 ;;		_change_state_to_menu_12
  8425 ;;		_change_state_to_menu_22
  8426 ;;		_change_state_to_menu_23
  8427 ;;		_dispLogs
  8428 ;;		_inputHandler
  8429 ;;		i2_change_state_to_menu_start
  8430 ;; This function is called by:
  8431 ;;		_handler
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           	psect	text40
  8436  000F6E                     __ptext40:
  8437                           	opt stack 0
  8438  000F6E                     _updateMenu:
  8439                           	opt stack 18
  8440                           
  8441                           ;UI.c: 148: up = 0; down = 0; enter = 0; back = 0;
  8442                           
  8443                           ;incstack = 0
  8444  000F6E  0E00               	movlw	0
  8445  000F70  6E74               	movwf	_up+1,c
  8446  000F72  0E00               	movlw	0
  8447  000F74  6E73               	movwf	_up,c
  8448  000F76  0E00               	movlw	0
  8449  000F78  6E6A               	movwf	_down+1,c
  8450  000F7A  0E00               	movlw	0
  8451  000F7C  6E69               	movwf	_down,c
  8452  000F7E  0E00               	movlw	0
  8453  000F80  6E6C               	movwf	_enter+1,c
  8454  000F82  0E00               	movlw	0
  8455  000F84  6E6B               	movwf	_enter,c
  8456  000F86  0E00               	movlw	0
  8457  000F88  6E60               	movwf	_back+1,c
  8458  000F8A  0E00               	movlw	0
  8459  000F8C  6E5F               	movwf	_back,c
  8460                           
  8461                           ;UI.c: 149: (INTCONbits.GIE = 0);
  8462  000F8E  9EF2               	bcf	intcon,7,c	;volatile
  8463                           
  8464                           ;UI.c: 151: if (inputHandler()
  8465                           ;UI.c: 154: ){
  8466  000F90  EC2F  F00B         	call	_inputHandler	;wreg free
  8467  000F94  502A               	movf	?_inputHandler,w,c
  8468  000F96  102B               	iorwf	?_inputHandler+1,w,c
  8469  000F98  A4D8               	btfss	status,2,c
  8470  000F9A  D112               	goto	i2l5187
  8471  000F9C  D146               	goto	i2l368
  8472  000F9E                     i2l5039:
  8473                           
  8474                           ;UI.c: 158: change_state_to_menu_11();
  8475  000F9E  ECAC  F012         	call	_change_state_to_menu_11	;wreg free
  8476                           
  8477                           ;UI.c: 159: break;
  8478  000FA2  D143               	goto	i2l368
  8479  000FA4                     i2l5041:
  8480                           
  8481                           ;UI.c: 162: if(up){
  8482  000FA4  5073               	movf	_up,w,c
  8483  000FA6  1074               	iorwf	_up+1,w,c
  8484  000FA8  B4D8               	btfsc	status,2,c
  8485  000FAA  D003               	goto	i2l5045
  8486                           
  8487                           ;UI.c: 163: change_state_to_menu_23();
  8488  000FAC  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8489                           
  8490                           ;UI.c: 164: }
  8491  000FB0  D13C               	goto	i2l368
  8492  000FB2                     i2l5045:
  8493                           
  8494                           ;UI.c: 165: else if(down){
  8495  000FB2  5069               	movf	_down,w,c
  8496  000FB4  106A               	iorwf	_down+1,w,c
  8497  000FB6  B4D8               	btfsc	status,2,c
  8498  000FB8  D003               	goto	i2l5049
  8499                           
  8500                           ;UI.c: 166: change_state_to_menu_12();
  8501  000FBA  EC94  F012         	call	_change_state_to_menu_12	;wreg free
  8502                           
  8503                           ;UI.c: 167: }
  8504  000FBE  D135               	goto	i2l368
  8505  000FC0                     i2l5049:
  8506                           
  8507                           ;UI.c: 168: else if(enter){
  8508  000FC0  506B               	movf	_enter,w,c
  8509  000FC2  106C               	iorwf	_enter+1,w,c
  8510  000FC4  B4D8               	btfsc	status,2,c
  8511  000FC6  D131               	goto	i2l368
  8512                           
  8513                           ;UI.c: 169: change_state_to_menu_start();
  8514  000FC8  EC95  F013         	call	i2_change_state_to_menu_start	;wreg free
  8515                           
  8516                           ;UI.c: 170: }
  8517                           ;UI.c: 171: break;
  8518  000FCC  D12E               	goto	i2l368
  8519  000FCE                     i2l5053:
  8520                           
  8521                           ;UI.c: 174: if(up){
  8522  000FCE  5073               	movf	_up,w,c
  8523  000FD0  1074               	iorwf	_up+1,w,c
  8524  000FD2  B4D8               	btfsc	status,2,c
  8525  000FD4  D003               	goto	i2l5057
  8526                           
  8527                           ;UI.c: 175: change_state_to_menu_11();
  8528  000FD6  ECAC  F012         	call	_change_state_to_menu_11	;wreg free
  8529                           
  8530                           ;UI.c: 176: }
  8531  000FDA  D127               	goto	i2l368
  8532  000FDC                     i2l5057:
  8533                           
  8534                           ;UI.c: 177: else if(down){
  8535  000FDC  5069               	movf	_down,w,c
  8536  000FDE  106A               	iorwf	_down+1,w,c
  8537  000FE0  B4D8               	btfsc	status,2,c
  8538  000FE2  D011               	goto	i2l5073
  8539                           
  8540                           ;UI.c: 178: change_state_to_menu_23();
  8541  000FE4  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8542                           
  8543                           ;UI.c: 179: }
  8544  000FE8  D120               	goto	i2l368
  8545  000FEA                     i2l5065:
  8546                           
  8547                           ;UI.c: 186: if(up){
  8548  000FEA  5073               	movf	_up,w,c
  8549  000FEC  1074               	iorwf	_up+1,w,c
  8550  000FEE  B4D8               	btfsc	status,2,c
  8551  000FF0  D003               	goto	i2l5069
  8552                           
  8553                           ;UI.c: 187: change_state_to_menu_11();
  8554  000FF2  ECAC  F012         	call	_change_state_to_menu_11	;wreg free
  8555                           
  8556                           ;UI.c: 188: }
  8557  000FF6  D119               	goto	i2l368
  8558  000FF8                     i2l5069:
  8559                           
  8560                           ;UI.c: 189: else if(down){
  8561  000FF8  5069               	movf	_down,w,c
  8562  000FFA  106A               	iorwf	_down+1,w,c
  8563  000FFC  B4D8               	btfsc	status,2,c
  8564  000FFE  D003               	goto	i2l5073
  8565                           
  8566                           ;UI.c: 190: change_state_to_menu_23();
  8567  001000  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8568                           
  8569                           ;UI.c: 191: }
  8570  001004  D112               	goto	i2l368
  8571  001006                     i2l5073:
  8572                           
  8573                           ;UI.c: 192: else if(enter){
  8574  001006  506B               	movf	_enter,w,c
  8575  001008  106C               	iorwf	_enter+1,w,c
  8576  00100A  B4D8               	btfsc	status,2,c
  8577  00100C  D10E               	goto	i2l368
  8578                           
  8579                           ;UI.c: 193: machine_state = Sorting_state;
  8580  00100E  0E01               	movlw	1
  8581  001010  0100               	movlb	0	; () banked
  8582  001012  6FF4               	movwf	_machine_state& (0+255),b
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;UI.c: 194: }
  8586                           ;UI.c: 195: break;
  8587                           
  8588                           ; BSR set to: 0
  8589                           
  8590                           ; BSR set to: 0
  8591  001014  D10A               	goto	i2l368
  8592  001016                     i2l5077:
  8593                           
  8594                           ;UI.c: 198: if(up){
  8595  001016  5073               	movf	_up,w,c
  8596  001018  1074               	iorwf	_up+1,w,c
  8597  00101A  B4D8               	btfsc	status,2,c
  8598  00101C  D003               	goto	i2l5081
  8599                           
  8600                           ;UI.c: 199: change_state_to_menu_22();
  8601  00101E  EC7C  F012         	call	_change_state_to_menu_22	;wreg free
  8602                           
  8603                           ;UI.c: 200: }
  8604  001022  D103               	goto	i2l368
  8605  001024                     i2l5081:
  8606                           
  8607                           ;UI.c: 201: else if(down){
  8608  001024  5069               	movf	_down,w,c
  8609  001026  106A               	iorwf	_down+1,w,c
  8610  001028  B4D8               	btfsc	status,2,c
  8611  00102A  D003               	goto	i2l5085
  8612                           
  8613                           ;UI.c: 202: change_state_to_menu_11();
  8614  00102C  ECAC  F012         	call	_change_state_to_menu_11	;wreg free
  8615                           
  8616                           ;UI.c: 203: }
  8617  001030  D0FC               	goto	i2l368
  8618  001032                     i2l5085:
  8619                           
  8620                           ;UI.c: 204: else if(enter){
  8621  001032  506B               	movf	_enter,w,c
  8622  001034  106C               	iorwf	_enter+1,w,c
  8623  001036  B4D8               	btfsc	status,2,c
  8624  001038  D0F8               	goto	i2l368
  8625                           
  8626                           ;UI.c: 205: change_state_to_logs_11();
  8627  00103A  EC24  F013         	call	_change_state_to_logs_11	;wreg free
  8628                           
  8629                           ;UI.c: 206: }
  8630                           ;UI.c: 207: break;
  8631  00103E  D0F5               	goto	i2l368
  8632  001040                     i2l5089:
  8633                           
  8634                           ;UI.c: 210: if(up){
  8635  001040  5073               	movf	_up,w,c
  8636  001042  1074               	iorwf	_up+1,w,c
  8637  001044  B4D8               	btfsc	status,2,c
  8638  001046  D003               	goto	i2l5093
  8639                           
  8640                           ;UI.c: 211: change_state_to_logs_34();
  8641  001048  ECC4  F012         	call	_change_state_to_logs_34	;wreg free
  8642                           
  8643                           ;UI.c: 212: }
  8644  00104C  D0EE               	goto	i2l368
  8645  00104E                     i2l5093:
  8646                           
  8647                           ;UI.c: 213: else if(down){
  8648  00104E  5069               	movf	_down,w,c
  8649  001050  106A               	iorwf	_down+1,w,c
  8650  001052  B4D8               	btfsc	status,2,c
  8651  001054  D003               	goto	i2l5097
  8652                           
  8653                           ;UI.c: 214: change_state_to_logs_12();
  8654  001056  EC0C  F013         	call	_change_state_to_logs_12	;wreg free
  8655                           
  8656                           ;UI.c: 215: }
  8657  00105A  D0E7               	goto	i2l368
  8658  00105C                     i2l5097:
  8659                           
  8660                           ;UI.c: 216: else if(enter){
  8661  00105C  506B               	movf	_enter,w,c
  8662  00105E  106C               	iorwf	_enter+1,w,c
  8663  001060  B4D8               	btfsc	status,2,c
  8664  001062  D007               	goto	i2l5101
  8665                           
  8666                           ;UI.c: 217: dispLogs(1);
  8667  001064  0E00               	movlw	0
  8668  001066  6E02               	movwf	dispLogs@myLog+1,c
  8669  001068  0E01               	movlw	1
  8670  00106A  6E01               	movwf	dispLogs@myLog,c
  8671  00106C  EC1C  F014         	call	_dispLogs	;wreg free
  8672                           
  8673                           ;UI.c: 218: }
  8674  001070  D0DC               	goto	i2l368
  8675  001072                     i2l5101:
  8676                           
  8677                           ;UI.c: 219: else if(back){
  8678  001072  505F               	movf	_back,w,c
  8679  001074  1060               	iorwf	_back+1,w,c
  8680  001076  B4D8               	btfsc	status,2,c
  8681  001078  D0D8               	goto	i2l368
  8682                           
  8683                           ;UI.c: 220: change_state_to_menu_23();
  8684  00107A  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8685                           
  8686                           ;UI.c: 221: }
  8687                           ;UI.c: 222: break;
  8688  00107E  D0D5               	goto	i2l368
  8689  001080                     i2l5105:
  8690                           
  8691                           ;UI.c: 225: if(up){
  8692  001080  5073               	movf	_up,w,c
  8693  001082  1074               	iorwf	_up+1,w,c
  8694  001084  B4D8               	btfsc	status,2,c
  8695  001086  D003               	goto	i2l5109
  8696                           
  8697                           ;UI.c: 226: change_state_to_logs_11();
  8698  001088  EC24  F013         	call	_change_state_to_logs_11	;wreg free
  8699                           
  8700                           ;UI.c: 227: }
  8701  00108C  D0CE               	goto	i2l368
  8702  00108E                     i2l5109:
  8703                           
  8704                           ;UI.c: 228: else if(down){
  8705  00108E  5069               	movf	_down,w,c
  8706  001090  106A               	iorwf	_down+1,w,c
  8707  001092  B4D8               	btfsc	status,2,c
  8708  001094  D003               	goto	i2l5113
  8709                           
  8710                           ;UI.c: 229: change_state_to_logs_23();
  8711  001096  EC53  F013         	call	_change_state_to_logs_23	;wreg free
  8712                           
  8713                           ;UI.c: 230: }
  8714  00109A  D0C7               	goto	i2l368
  8715  00109C                     i2l5113:
  8716                           
  8717                           ;UI.c: 231: else if(enter){
  8718  00109C  506B               	movf	_enter,w,c
  8719  00109E  106C               	iorwf	_enter+1,w,c
  8720  0010A0  B4D8               	btfsc	status,2,c
  8721  0010A2  D007               	goto	i2l5117
  8722                           
  8723                           ;UI.c: 232: dispLogs(2);
  8724  0010A4  0E00               	movlw	0
  8725  0010A6  6E02               	movwf	dispLogs@myLog+1,c
  8726  0010A8  0E02               	movlw	2
  8727  0010AA  6E01               	movwf	dispLogs@myLog,c
  8728  0010AC  EC1C  F014         	call	_dispLogs	;wreg free
  8729                           
  8730                           ;UI.c: 233: }
  8731  0010B0  D0BC               	goto	i2l368
  8732  0010B2                     i2l5117:
  8733                           
  8734                           ;UI.c: 234: else if(back){
  8735  0010B2  505F               	movf	_back,w,c
  8736  0010B4  1060               	iorwf	_back+1,w,c
  8737  0010B6  B4D8               	btfsc	status,2,c
  8738  0010B8  D0B8               	goto	i2l368
  8739                           
  8740                           ;UI.c: 235: change_state_to_menu_23();
  8741  0010BA  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8742                           
  8743                           ;UI.c: 236: }
  8744                           ;UI.c: 237: break;
  8745  0010BE  D0B5               	goto	i2l368
  8746  0010C0                     i2l5121:
  8747                           
  8748                           ;UI.c: 240: if(up){
  8749  0010C0  5073               	movf	_up,w,c
  8750  0010C2  1074               	iorwf	_up+1,w,c
  8751  0010C4  B4D8               	btfsc	status,2,c
  8752  0010C6  D003               	goto	i2l5125
  8753                           
  8754                           ;UI.c: 241: change_state_to_logs_11();
  8755  0010C8  EC24  F013         	call	_change_state_to_logs_11	;wreg free
  8756                           
  8757                           ;UI.c: 242: }
  8758  0010CC  D0AE               	goto	i2l368
  8759  0010CE                     i2l5125:
  8760                           
  8761                           ;UI.c: 243: else if(down){
  8762  0010CE  5069               	movf	_down,w,c
  8763  0010D0  106A               	iorwf	_down+1,w,c
  8764  0010D2  B4D8               	btfsc	status,2,c
  8765  0010D4  D003               	goto	i2l5129
  8766                           
  8767                           ;UI.c: 244: change_state_to_logs_23();
  8768  0010D6  EC53  F013         	call	_change_state_to_logs_23	;wreg free
  8769                           
  8770                           ;UI.c: 245: }
  8771  0010DA  D0A7               	goto	i2l368
  8772  0010DC                     i2l5129:
  8773                           
  8774                           ;UI.c: 246: else if(enter){
  8775  0010DC  506B               	movf	_enter,w,c
  8776  0010DE  106C               	iorwf	_enter+1,w,c
  8777  0010E0  B4D8               	btfsc	status,2,c
  8778  0010E2  D007               	goto	i2l5133
  8779                           
  8780                           ;UI.c: 247: dispLogs(2);
  8781  0010E4  0E00               	movlw	0
  8782  0010E6  6E02               	movwf	dispLogs@myLog+1,c
  8783  0010E8  0E02               	movlw	2
  8784  0010EA  6E01               	movwf	dispLogs@myLog,c
  8785  0010EC  EC1C  F014         	call	_dispLogs	;wreg free
  8786                           
  8787                           ;UI.c: 248: }
  8788  0010F0  D09C               	goto	i2l368
  8789  0010F2                     i2l5133:
  8790                           
  8791                           ;UI.c: 249: else if(back){
  8792  0010F2  505F               	movf	_back,w,c
  8793  0010F4  1060               	iorwf	_back+1,w,c
  8794  0010F6  B4D8               	btfsc	status,2,c
  8795  0010F8  D098               	goto	i2l368
  8796                           
  8797                           ;UI.c: 250: change_state_to_menu_23();
  8798  0010FA  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8799                           
  8800                           ;UI.c: 251: }
  8801                           ;UI.c: 252: break;
  8802  0010FE  D095               	goto	i2l368
  8803  001100                     i2l5137:
  8804                           
  8805                           ;UI.c: 255: if(up){
  8806  001100  5073               	movf	_up,w,c
  8807  001102  1074               	iorwf	_up+1,w,c
  8808  001104  B4D8               	btfsc	status,2,c
  8809  001106  D003               	goto	i2l5141
  8810                           
  8811                           ;UI.c: 256: change_state_to_logs_22();
  8812  001108  ECF4  F012         	call	_change_state_to_logs_22	;wreg free
  8813                           
  8814                           ;UI.c: 257: }
  8815  00110C  D08E               	goto	i2l368
  8816  00110E                     i2l5141:
  8817                           
  8818                           ;UI.c: 258: else if(down){
  8819  00110E  5069               	movf	_down,w,c
  8820  001110  106A               	iorwf	_down+1,w,c
  8821  001112  B4D8               	btfsc	status,2,c
  8822  001114  D003               	goto	i2l5145
  8823                           
  8824                           ;UI.c: 259: change_state_to_logs_34();
  8825  001116  ECC4  F012         	call	_change_state_to_logs_34	;wreg free
  8826                           
  8827                           ;UI.c: 260: }
  8828  00111A  D087               	goto	i2l368
  8829  00111C                     i2l5145:
  8830                           
  8831                           ;UI.c: 261: else if(enter){
  8832  00111C  506B               	movf	_enter,w,c
  8833  00111E  106C               	iorwf	_enter+1,w,c
  8834  001120  B4D8               	btfsc	status,2,c
  8835  001122  D007               	goto	i2l5149
  8836                           
  8837                           ;UI.c: 262: dispLogs(3);
  8838  001124  0E00               	movlw	0
  8839  001126  6E02               	movwf	dispLogs@myLog+1,c
  8840  001128  0E03               	movlw	3
  8841  00112A  6E01               	movwf	dispLogs@myLog,c
  8842  00112C  EC1C  F014         	call	_dispLogs	;wreg free
  8843                           
  8844                           ;UI.c: 263: }
  8845  001130  D07C               	goto	i2l368
  8846  001132                     i2l5149:
  8847                           
  8848                           ;UI.c: 264: else if(back){
  8849  001132  505F               	movf	_back,w,c
  8850  001134  1060               	iorwf	_back+1,w,c
  8851  001136  B4D8               	btfsc	status,2,c
  8852  001138  D078               	goto	i2l368
  8853                           
  8854                           ;UI.c: 265: change_state_to_menu_23();
  8855  00113A  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8856                           
  8857                           ;UI.c: 266: }
  8858                           ;UI.c: 267: break;
  8859  00113E  D075               	goto	i2l368
  8860  001140                     i2l5153:
  8861                           
  8862                           ;UI.c: 270: if(up){
  8863  001140  5073               	movf	_up,w,c
  8864  001142  1074               	iorwf	_up+1,w,c
  8865  001144  B4D8               	btfsc	status,2,c
  8866  001146  D003               	goto	i2l5157
  8867                           
  8868                           ;UI.c: 271: change_state_to_logs_22();
  8869  001148  ECF4  F012         	call	_change_state_to_logs_22	;wreg free
  8870                           
  8871                           ;UI.c: 272: }
  8872  00114C  D06E               	goto	i2l368
  8873  00114E                     i2l5157:
  8874                           
  8875                           ;UI.c: 273: else if(down){
  8876  00114E  5069               	movf	_down,w,c
  8877  001150  106A               	iorwf	_down+1,w,c
  8878  001152  B4D8               	btfsc	status,2,c
  8879  001154  D003               	goto	i2l5161
  8880                           
  8881                           ;UI.c: 274: change_state_to_logs_34();
  8882  001156  ECC4  F012         	call	_change_state_to_logs_34	;wreg free
  8883                           
  8884                           ;UI.c: 275: }
  8885  00115A  D067               	goto	i2l368
  8886  00115C                     i2l5161:
  8887                           
  8888                           ;UI.c: 276: else if(enter){
  8889  00115C  506B               	movf	_enter,w,c
  8890  00115E  106C               	iorwf	_enter+1,w,c
  8891  001160  B4D8               	btfsc	status,2,c
  8892  001162  D007               	goto	i2l5165
  8893                           
  8894                           ;UI.c: 277: dispLogs(3);
  8895  001164  0E00               	movlw	0
  8896  001166  6E02               	movwf	dispLogs@myLog+1,c
  8897  001168  0E03               	movlw	3
  8898  00116A  6E01               	movwf	dispLogs@myLog,c
  8899  00116C  EC1C  F014         	call	_dispLogs	;wreg free
  8900                           
  8901                           ;UI.c: 278: }
  8902  001170  D05C               	goto	i2l368
  8903  001172                     i2l5165:
  8904                           
  8905                           ;UI.c: 279: else if(back){
  8906  001172  505F               	movf	_back,w,c
  8907  001174  1060               	iorwf	_back+1,w,c
  8908  001176  B4D8               	btfsc	status,2,c
  8909  001178  D058               	goto	i2l368
  8910                           
  8911                           ;UI.c: 280: change_state_to_menu_23();
  8912  00117A  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8913                           
  8914                           ;UI.c: 281: }
  8915                           ;UI.c: 282: break;
  8916  00117E  D055               	goto	i2l368
  8917  001180                     i2l5169:
  8918                           
  8919                           ;UI.c: 285: if(up){
  8920  001180  5073               	movf	_up,w,c
  8921  001182  1074               	iorwf	_up+1,w,c
  8922  001184  B4D8               	btfsc	status,2,c
  8923  001186  D003               	goto	i2l5173
  8924                           
  8925                           ;UI.c: 286: change_state_to_logs_33();
  8926  001188  ECDC  F012         	call	_change_state_to_logs_33	;wreg free
  8927                           
  8928                           ;UI.c: 287: }
  8929  00118C  D04E               	goto	i2l368
  8930  00118E                     i2l5173:
  8931                           
  8932                           ;UI.c: 288: else if(down){
  8933  00118E  5069               	movf	_down,w,c
  8934  001190  106A               	iorwf	_down+1,w,c
  8935  001192  B4D8               	btfsc	status,2,c
  8936  001194  D003               	goto	i2l5177
  8937                           
  8938                           ;UI.c: 289: change_state_to_logs_11();
  8939  001196  EC24  F013         	call	_change_state_to_logs_11	;wreg free
  8940                           
  8941                           ;UI.c: 290: }
  8942  00119A  D047               	goto	i2l368
  8943  00119C                     i2l5177:
  8944                           
  8945                           ;UI.c: 291: else if(enter){
  8946  00119C  506B               	movf	_enter,w,c
  8947  00119E  106C               	iorwf	_enter+1,w,c
  8948  0011A0  B4D8               	btfsc	status,2,c
  8949  0011A2  D007               	goto	i2l5181
  8950                           
  8951                           ;UI.c: 292: dispLogs(4);
  8952  0011A4  0E00               	movlw	0
  8953  0011A6  6E02               	movwf	dispLogs@myLog+1,c
  8954  0011A8  0E04               	movlw	4
  8955  0011AA  6E01               	movwf	dispLogs@myLog,c
  8956  0011AC  EC1C  F014         	call	_dispLogs	;wreg free
  8957                           
  8958                           ;UI.c: 293: }
  8959  0011B0  D03C               	goto	i2l368
  8960  0011B2                     i2l5181:
  8961                           
  8962                           ;UI.c: 294: else if(back){
  8963  0011B2  505F               	movf	_back,w,c
  8964  0011B4  1060               	iorwf	_back+1,w,c
  8965  0011B6  B4D8               	btfsc	status,2,c
  8966  0011B8  D038               	goto	i2l368
  8967                           
  8968                           ;UI.c: 295: change_state_to_menu_23();
  8969  0011BA  EC64  F012         	call	_change_state_to_menu_23	;wreg free
  8970                           
  8971                           ;UI.c: 301: }
  8972                           
  8973                           ;UI.c: 300: break;
  8974                           
  8975                           ;UI.c: 299: default:
  8976                           
  8977                           ;UI.c: 296: }
  8978                           ;UI.c: 297: break;
  8979  0011BE  D035               	goto	i2l368
  8980  0011C0                     i2l5187:
  8981  0011C0  C0E1  F043         	movff	_cur_state,??_updateMenu
  8982  0011C4  C0E2  F044         	movff	_cur_state+1,??_updateMenu+1
  8983                           
  8984                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  8985                           ; Switch size 1, requested type "space"
  8986                           ; Number of cases is 3, Range of values is 0 to 4
  8987                           ; switch strategies available:
  8988                           ; Name         Instructions Cycles
  8989                           ; simple_byte           10     6 (average)
  8990                           ;	Chosen strategy is simple_byte
  8991  0011C8  5044               	movf	??_updateMenu+1,w,c
  8992  0011CA  0A00               	xorlw	0	; case 0
  8993  0011CC  B4D8               	btfsc	status,2,c
  8994  0011CE  D007               	goto	i2l5489
  8995  0011D0  0A03               	xorlw	3	; case 3
  8996  0011D2  B4D8               	btfsc	status,2,c
  8997  0011D4  D015               	goto	i2l5491
  8998  0011D6  0A07               	xorlw	7	; case 4
  8999  0011D8  B4D8               	btfsc	status,2,c
  9000  0011DA  D020               	goto	i2l5493
  9001  0011DC  D026               	goto	i2l368
  9002  0011DE                     i2l5489:
  9003                           
  9004                           ; Switch size 1, requested type "space"
  9005                           ; Number of cases is 5, Range of values is 0 to 23
  9006                           ; switch strategies available:
  9007                           ; Name         Instructions Cycles
  9008                           ; simple_byte           16     9 (average)
  9009                           ;	Chosen strategy is simple_byte
  9010  0011DE  5043               	movf	??_updateMenu,w,c
  9011  0011E0  0A00               	xorlw	0	; case 0
  9012  0011E2  B4D8               	btfsc	status,2,c
  9013  0011E4  D6DC               	goto	i2l5039
  9014  0011E6  0A0B               	xorlw	11	; case 11
  9015  0011E8  B4D8               	btfsc	status,2,c
  9016  0011EA  D6DC               	goto	i2l5041
  9017  0011EC  0A07               	xorlw	7	; case 12
  9018  0011EE  B4D8               	btfsc	status,2,c
  9019  0011F0  D6EE               	goto	i2l5053
  9020  0011F2  0A1A               	xorlw	26	; case 22
  9021  0011F4  B4D8               	btfsc	status,2,c
  9022  0011F6  D6F9               	goto	i2l5065
  9023  0011F8  0A01               	xorlw	1	; case 23
  9024  0011FA  B4D8               	btfsc	status,2,c
  9025  0011FC  D70C               	goto	i2l5077
  9026  0011FE  D015               	goto	i2l368
  9027  001200                     i2l5491:
  9028                           
  9029                           ; Switch size 1, requested type "space"
  9030                           ; Number of cases is 4, Range of values is 243 to 255
  9031                           ; switch strategies available:
  9032                           ; Name         Instructions Cycles
  9033                           ; simple_byte           13     7 (average)
  9034                           ;	Chosen strategy is simple_byte
  9035  001200  5043               	movf	??_updateMenu,w,c
  9036  001202  0AF3               	xorlw	243	; case 243
  9037  001204  B4D8               	btfsc	status,2,c
  9038  001206  D71C               	goto	i2l5089
  9039  001208  0A07               	xorlw	7	; case 244
  9040  00120A  B4D8               	btfsc	status,2,c
  9041  00120C  D739               	goto	i2l5105
  9042  00120E  0A0A               	xorlw	10	; case 254
  9043  001210  B4D8               	btfsc	status,2,c
  9044  001212  D756               	goto	i2l5121
  9045  001214  0A01               	xorlw	1	; case 255
  9046  001216  B4D8               	btfsc	status,2,c
  9047  001218  D773               	goto	i2l5137
  9048  00121A  D007               	goto	i2l368
  9049  00121C                     i2l5493:
  9050                           
  9051                           ; Switch size 1, requested type "space"
  9052                           ; Number of cases is 2, Range of values is 9 to 10
  9053                           ; switch strategies available:
  9054                           ; Name         Instructions Cycles
  9055                           ; simple_byte            7     4 (average)
  9056                           ;	Chosen strategy is simple_byte
  9057  00121C  5043               	movf	??_updateMenu,w,c
  9058  00121E  0A09               	xorlw	9	; case 9
  9059  001220  B4D8               	btfsc	status,2,c
  9060  001222  D78E               	goto	i2l5153
  9061  001224  0A03               	xorlw	3	; case 10
  9062  001226  B4D8               	btfsc	status,2,c
  9063  001228  D7AB               	goto	i2l5169
  9064  00122A                     i2l368:
  9065                           
  9066                           ;UI.c: 302: }
  9067                           ;UI.c: 303: (INTCONbits.GIE = 1);
  9068  00122A  8EF2               	bsf	intcon,7,c	;volatile
  9069  00122C  0012               	return		;funcret
  9070  00122E                     __end_of_updateMenu:
  9071                           	opt stack 0
  9072                           pclatu	equ	0xFFB
  9073                           pclath	equ	0xFFA
  9074                           tblptru	equ	0xFF8
  9075                           tblptrh	equ	0xFF7
  9076                           tblptrl	equ	0xFF6
  9077                           tablat	equ	0xFF5
  9078                           prodh	equ	0xFF4
  9079                           prodl	equ	0xFF3
  9080                           intcon	equ	0xFF2
  9081                           intcon3	equ	0xFF0
  9082                           indf0	equ	0xFEF
  9083                           postinc0	equ	0xFEE
  9084                           fsr0h	equ	0xFEA
  9085                           fsr0l	equ	0xFE9
  9086                           wreg	equ	0xFE8
  9087                           postdec1	equ	0xFE5
  9088                           fsr1h	equ	0xFE2
  9089                           fsr1l	equ	0xFE1
  9090                           indf2	equ	0xFDF
  9091                           postinc2	equ	0xFDE
  9092                           postdec2	equ	0xFDD
  9093                           fsr2h	equ	0xFDA
  9094                           fsr2l	equ	0xFD9
  9095                           status	equ	0xFD8
  9096                           
  9097 ;; *************** function i2_change_state_to_menu_start *****************
  9098 ;; Defined at:
  9099 ;;		line 407 in file "UI.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;		None
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;		None
  9104 ;; Return value:  Size  Location     Type
  9105 ;;                  1    wreg      void 
  9106 ;; Registers used:
  9107 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;Total ram usage:        0 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; Hardware stack levels required when called:    4
  9120 ;; This function calls:
  9121 ;;		i2_lcdInst
  9122 ;;		i2_printRTC
  9123 ;;		i2_printf
  9124 ;; This function is called by:
  9125 ;;		_updateMenu
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text41
  9130  00272A                     __ptext41:
  9131                           	opt stack 0
  9132  00272A                     i2_change_state_to_menu_start:
  9133                           	opt stack 18
  9134                           
  9135                           ;UI.c: 408: cur_state = 0;
  9136                           
  9137                           ;incstack = 0
  9138  00272A  0E00               	movlw	0
  9139  00272C  0100               	movlb	0	; () banked
  9140  00272E  6FE2               	movwf	(_cur_state+1)& (0+255),b
  9141  002730  0E00               	movlw	0
  9142  002732  6FE1               	movwf	_cur_state& (0+255),b
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;UI.c: 410: lcdInst(0b10000000);;
  9146  002734  0E80               	movlw	128
  9147  002736  EC4E  F014         	call	i2_lcdInst
  9148                           
  9149                           ;UI.c: 411: printRTC();
  9150  00273A  EC17  F009         	call	i2_printRTC	;wreg free
  9151                           
  9152                           ;UI.c: 412: lcdInst(0b11000000);;
  9153  00273E  0EC0               	movlw	192
  9154  002740  EC4E  F014         	call	i2_lcdInst
  9155                           
  9156                           ;UI.c: 413: printf("PUSH TO CONTINUE");
  9157  002744  0E8A               	movlw	low STR_15
  9158  002746  6E0D               	movwf	i2printf@f,c
  9159  002748  0EFF               	movlw	high STR_15
  9160  00274A  6E0E               	movwf	i2printf@f+1,c
  9161  00274C  ECAF  F004         	call	i2_printf	;wreg free
  9162  002750  0012               	return		;funcret
  9163  002752                     __end_ofi2_change_state_to_menu_start:
  9164                           	opt stack 0
  9165                           pclatu	equ	0xFFB
  9166                           pclath	equ	0xFFA
  9167                           tblptru	equ	0xFF8
  9168                           tblptrh	equ	0xFF7
  9169                           tblptrl	equ	0xFF6
  9170                           tablat	equ	0xFF5
  9171                           prodh	equ	0xFF4
  9172                           prodl	equ	0xFF3
  9173                           intcon	equ	0xFF2
  9174                           intcon3	equ	0xFF0
  9175                           indf0	equ	0xFEF
  9176                           postinc0	equ	0xFEE
  9177                           fsr0h	equ	0xFEA
  9178                           fsr0l	equ	0xFE9
  9179                           wreg	equ	0xFE8
  9180                           postdec1	equ	0xFE5
  9181                           fsr1h	equ	0xFE2
  9182                           fsr1l	equ	0xFE1
  9183                           indf2	equ	0xFDF
  9184                           postinc2	equ	0xFDE
  9185                           postdec2	equ	0xFDD
  9186                           fsr2h	equ	0xFDA
  9187                           fsr2l	equ	0xFD9
  9188                           status	equ	0xFD8
  9189                           
  9190 ;; *************** function i2_printRTC *****************
  9191 ;; Defined at:
  9192 ;;		line 61 in file "RTC.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;  printRTC       14   44[COMRAM] int [7]
  9197 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9198 ;;  printRTC        2   64[COMRAM] int 
  9199 ;;  printRTC        2   58[COMRAM] int 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;                  1    wreg      void 
  9202 ;; Registers used:
  9203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9212 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;Total ram usage:       25 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    3
  9216 ;; This function calls:
  9217 ;;		i2_getRTC
  9218 ;;		i2_lcdInst
  9219 ;;		i2_printf
  9220 ;;		i2_strcpy
  9221 ;; This function is called by:
  9222 ;;		i2_change_state_to_menu_start
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           	psect	text42
  9227  00122E                     __ptext42:
  9228                           	opt stack 0
  9229  00122E                     i2_printRTC:
  9230                           	opt stack 18
  9231                           
  9232                           ;RTC.c: 62: getRTC();
  9233                           
  9234                           ;incstack = 0
  9235  00122E  EC2F  F010         	call	i2_getRTC	;wreg free
  9236                           
  9237                           ;RTC.c: 63: char month[] = "MMM";
  9238  001232  C0F5  F03D         	movff	printRTC@F3177,i2printRTC@month
  9239  001236  C0F6  F03E         	movff	printRTC@F3177+1,i2printRTC@month+1
  9240  00123A  C0F7  F03F         	movff	printRTC@F3177+2,i2printRTC@month+2
  9241  00123E  C0F8  F040         	movff	printRTC@F3177+3,i2printRTC@month+3
  9242                           
  9243                           ;RTC.c: 64: int INT_time[7];
  9244                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  9245  001242  0E00               	movlw	0
  9246  001244  6E42               	movwf	i2printRTC@i+1,c
  9247  001246  0E00               	movlw	0
  9248  001248  6E41               	movwf	i2printRTC@i,c
  9249  00124A  BE42               	btfsc	i2printRTC@i+1,7,c
  9250  00124C  D006               	goto	i2l4375
  9251  00124E  5042               	movf	i2printRTC@i+1,w,c
  9252  001250  E135               	bnz	i2l820
  9253  001252  0E07               	movlw	7
  9254  001254  5C41               	subwf	i2printRTC@i,w,c
  9255  001256  B0D8               	btfsc	status,0,c
  9256  001258  D031               	goto	i2l820
  9257  00125A                     i2l4375:
  9258                           
  9259                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9260  00125A  0ED4               	movlw	low _time
  9261  00125C  2441               	addwf	i2printRTC@i,w,c
  9262  00125E  6ED9               	movwf	fsr2l,c
  9263  001260  0E00               	movlw	high _time
  9264  001262  2042               	addwfc	i2printRTC@i+1,w,c
  9265  001264  6EDA               	movwf	fsr2h,c
  9266  001266  50DF               	movf	indf2,w,c
  9267  001268  6E2A               	movwf	??i2_printRTC& (0+255),c
  9268  00126A  3A2A               	swapf	??i2_printRTC,f,c
  9269  00126C  0E0F               	movlw	15
  9270  00126E  162A               	andwf	??i2_printRTC,f,c
  9271  001270  0E0F               	movlw	15
  9272  001272  162A               	andwf	??i2_printRTC,f,c
  9273  001274  502A               	movf	??i2_printRTC,w,c
  9274  001276  0D0A               	mullw	10
  9275  001278  0ED4               	movlw	low _time
  9276  00127A  2441               	addwf	i2printRTC@i,w,c
  9277  00127C  6ED9               	movwf	fsr2l,c
  9278  00127E  0E00               	movlw	high _time
  9279  001280  2042               	addwfc	i2printRTC@i+1,w,c
  9280  001282  6EDA               	movwf	fsr2h,c
  9281  001284  50DF               	movf	indf2,w,c
  9282  001286  0B0F               	andlw	15
  9283  001288  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
  9284  00128A  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
  9285  00128C  50F3               	movf	prodl,w,c
  9286  00128E  262B               	addwf	??i2_printRTC+1,f,c
  9287  001290  50F4               	movf	prodh,w,c
  9288  001292  222C               	addwfc	??i2_printRTC+2,f,c
  9289  001294  90D8               	bcf	status,0,c
  9290  001296  3441               	rlcf	i2printRTC@i,w,c
  9291  001298  6ED9               	movwf	fsr2l,c
  9292  00129A  3442               	rlcf	i2printRTC@i+1,w,c
  9293  00129C  6EDA               	movwf	fsr2h,c
  9294  00129E  0E2D               	movlw	low i2printRTC@INT_time
  9295  0012A0  26D9               	addwf	fsr2l,f,c
  9296  0012A2  0E00               	movlw	high i2printRTC@INT_time
  9297  0012A4  22DA               	addwfc	fsr2h,f,c
  9298  0012A6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
  9299  0012AA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
  9300  0012AE  4A41               	infsnz	i2printRTC@i,f,c
  9301  0012B0  2A42               	incf	i2printRTC@i+1,f,c
  9302  0012B2  BE42               	btfsc	i2printRTC@i+1,7,c
  9303  0012B4  D7D2               	goto	i2l4375
  9304  0012B6  5042               	movf	i2printRTC@i+1,w,c
  9305  0012B8  E101               	bnz	i2u321_40
  9306  0012BA  D7CB               	goto	L2
  9307  0012BC                     i2u321_40:
  9308  0012BC                     i2l820:
  9309                           
  9310                           ;RTC.c: 67: }
  9311                           ;RTC.c: 68: int RTC_month = INT_time[5];
  9312  0012BC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
  9313  0012C0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
  9314                           
  9315                           ;RTC.c: 69: switch(RTC_month){
  9316  0012C4  D084               	goto	i2l4407
  9317  0012C6                     i2l4381:
  9318                           
  9319                           ;RTC.c: 71: strcpy(month, "Jan");
  9320  0012C6  0E3D               	movlw	low i2printRTC@month
  9321  0012C8  6E01               	movwf	i2strcpy@to,c
  9322  0012CA  0E00               	movlw	high i2printRTC@month
  9323  0012CC  6E02               	movwf	i2strcpy@to+1,c
  9324  0012CE  0EDC               	movlw	low STR_36
  9325  0012D0  6E03               	movwf	i2strcpy@from,c
  9326  0012D2  0EFF               	movlw	high STR_36
  9327  0012D4  6E04               	movwf	i2strcpy@from+1,c
  9328  0012D6  EC33  F012         	call	i2_strcpy	;wreg free
  9329                           
  9330                           ;RTC.c: 72: break;
  9331  0012DA  D0A6               	goto	i2l4409
  9332  0012DC                     i2l4383:
  9333                           
  9334                           ;RTC.c: 74: strcpy(month, "Feb");
  9335  0012DC  0E3D               	movlw	low i2printRTC@month
  9336  0012DE  6E01               	movwf	i2strcpy@to,c
  9337  0012E0  0E00               	movlw	high i2printRTC@month
  9338  0012E2  6E02               	movwf	i2strcpy@to+1,c
  9339  0012E4  0ECC               	movlw	low STR_37
  9340  0012E6  6E03               	movwf	i2strcpy@from,c
  9341  0012E8  0EFF               	movlw	high STR_37
  9342  0012EA  6E04               	movwf	i2strcpy@from+1,c
  9343  0012EC  EC33  F012         	call	i2_strcpy	;wreg free
  9344                           
  9345                           ;RTC.c: 75: break;
  9346  0012F0  D09B               	goto	i2l4409
  9347  0012F2                     i2l4385:
  9348                           
  9349                           ;RTC.c: 77: strcpy(month, "Mar");
  9350  0012F2  0E3D               	movlw	low i2printRTC@month
  9351  0012F4  6E01               	movwf	i2strcpy@to,c
  9352  0012F6  0E00               	movlw	high i2printRTC@month
  9353  0012F8  6E02               	movwf	i2strcpy@to+1,c
  9354  0012FA  0EE8               	movlw	low STR_38
  9355  0012FC  6E03               	movwf	i2strcpy@from,c
  9356  0012FE  0EFF               	movlw	high STR_38
  9357  001300  6E04               	movwf	i2strcpy@from+1,c
  9358  001302  EC33  F012         	call	i2_strcpy	;wreg free
  9359                           
  9360                           ;RTC.c: 78: break;
  9361  001306  D090               	goto	i2l4409
  9362  001308                     i2l4387:
  9363                           
  9364                           ;RTC.c: 80: strcpy(month, "Apr");
  9365  001308  0E3D               	movlw	low i2printRTC@month
  9366  00130A  6E01               	movwf	i2strcpy@to,c
  9367  00130C  0E00               	movlw	high i2printRTC@month
  9368  00130E  6E02               	movwf	i2strcpy@to+1,c
  9369  001310  0EEC               	movlw	low STR_39
  9370  001312  6E03               	movwf	i2strcpy@from,c
  9371  001314  0EFF               	movlw	high STR_39
  9372  001316  6E04               	movwf	i2strcpy@from+1,c
  9373  001318  EC33  F012         	call	i2_strcpy	;wreg free
  9374                           
  9375                           ;RTC.c: 81: break;
  9376  00131C  D085               	goto	i2l4409
  9377  00131E                     i2l4389:
  9378                           
  9379                           ;RTC.c: 83: strcpy(month, "May");
  9380  00131E  0E3D               	movlw	low i2printRTC@month
  9381  001320  6E01               	movwf	i2strcpy@to,c
  9382  001322  0E00               	movlw	high i2printRTC@month
  9383  001324  6E02               	movwf	i2strcpy@to+1,c
  9384  001326  0EF8               	movlw	low STR_40
  9385  001328  6E03               	movwf	i2strcpy@from,c
  9386  00132A  0EFF               	movlw	high STR_40
  9387  00132C  6E04               	movwf	i2strcpy@from+1,c
  9388  00132E  EC33  F012         	call	i2_strcpy	;wreg free
  9389                           
  9390                           ;RTC.c: 84: break;
  9391  001332  D07A               	goto	i2l4409
  9392  001334                     i2l4391:
  9393                           
  9394                           ;RTC.c: 86: strcpy(month, "Jun");
  9395  001334  0E3D               	movlw	low i2printRTC@month
  9396  001336  6E01               	movwf	i2strcpy@to,c
  9397  001338  0E00               	movlw	high i2printRTC@month
  9398  00133A  6E02               	movwf	i2strcpy@to+1,c
  9399  00133C  0EE0               	movlw	low STR_41
  9400  00133E  6E03               	movwf	i2strcpy@from,c
  9401  001340  0EFF               	movlw	high STR_41
  9402  001342  6E04               	movwf	i2strcpy@from+1,c
  9403  001344  EC33  F012         	call	i2_strcpy	;wreg free
  9404                           
  9405                           ;RTC.c: 87: break;
  9406  001348  D06F               	goto	i2l4409
  9407  00134A                     i2l4393:
  9408                           
  9409                           ;RTC.c: 89: strcpy(month, "Jul");
  9410  00134A  0E3D               	movlw	low i2printRTC@month
  9411  00134C  6E01               	movwf	i2strcpy@to,c
  9412  00134E  0E00               	movlw	high i2printRTC@month
  9413  001350  6E02               	movwf	i2strcpy@to+1,c
  9414  001352  0ED8               	movlw	low STR_42
  9415  001354  6E03               	movwf	i2strcpy@from,c
  9416  001356  0EFF               	movlw	high STR_42
  9417  001358  6E04               	movwf	i2strcpy@from+1,c
  9418  00135A  EC33  F012         	call	i2_strcpy	;wreg free
  9419                           
  9420                           ;RTC.c: 90: break;
  9421  00135E  D064               	goto	i2l4409
  9422  001360                     i2l4395:
  9423                           
  9424                           ;RTC.c: 92: strcpy(month, "Aug");
  9425  001360  0E3D               	movlw	low i2printRTC@month
  9426  001362  6E01               	movwf	i2strcpy@to,c
  9427  001364  0E00               	movlw	high i2printRTC@month
  9428  001366  6E02               	movwf	i2strcpy@to+1,c
  9429  001368  0ED4               	movlw	low STR_43
  9430  00136A  6E03               	movwf	i2strcpy@from,c
  9431  00136C  0EFF               	movlw	high STR_43
  9432  00136E  6E04               	movwf	i2strcpy@from+1,c
  9433  001370  EC33  F012         	call	i2_strcpy	;wreg free
  9434                           
  9435                           ;RTC.c: 93: break;
  9436  001374  D059               	goto	i2l4409
  9437  001376                     i2l4397:
  9438                           
  9439                           ;RTC.c: 95: strcpy(month, "Sep");
  9440  001376  0E3D               	movlw	low i2printRTC@month
  9441  001378  6E01               	movwf	i2strcpy@to,c
  9442  00137A  0E00               	movlw	high i2printRTC@month
  9443  00137C  6E02               	movwf	i2strcpy@to+1,c
  9444  00137E  0EE4               	movlw	low STR_44
  9445  001380  6E03               	movwf	i2strcpy@from,c
  9446  001382  0EFF               	movlw	high STR_44
  9447  001384  6E04               	movwf	i2strcpy@from+1,c
  9448  001386  EC33  F012         	call	i2_strcpy	;wreg free
  9449                           
  9450                           ;RTC.c: 96: break;
  9451  00138A  D04E               	goto	i2l4409
  9452  00138C                     i2l4399:
  9453                           
  9454                           ;RTC.c: 98: strcpy(month, "Oct");
  9455  00138C  0E3D               	movlw	low i2printRTC@month
  9456  00138E  6E01               	movwf	i2strcpy@to,c
  9457  001390  0E00               	movlw	high i2printRTC@month
  9458  001392  6E02               	movwf	i2strcpy@to+1,c
  9459  001394  0EF0               	movlw	low STR_45
  9460  001396  6E03               	movwf	i2strcpy@from,c
  9461  001398  0EFF               	movlw	high STR_45
  9462  00139A  6E04               	movwf	i2strcpy@from+1,c
  9463  00139C  EC33  F012         	call	i2_strcpy	;wreg free
  9464                           
  9465                           ;RTC.c: 99: break;
  9466  0013A0  D043               	goto	i2l4409
  9467  0013A2                     i2l4401:
  9468                           
  9469                           ;RTC.c: 101: strcpy(month, "Nov");
  9470  0013A2  0E3D               	movlw	low i2printRTC@month
  9471  0013A4  6E01               	movwf	i2strcpy@to,c
  9472  0013A6  0E00               	movlw	high i2printRTC@month
  9473  0013A8  6E02               	movwf	i2strcpy@to+1,c
  9474  0013AA  0EF4               	movlw	low STR_46
  9475  0013AC  6E03               	movwf	i2strcpy@from,c
  9476  0013AE  0EFF               	movlw	high STR_46
  9477  0013B0  6E04               	movwf	i2strcpy@from+1,c
  9478  0013B2  EC33  F012         	call	i2_strcpy	;wreg free
  9479                           
  9480                           ;RTC.c: 102: break;
  9481  0013B6  D038               	goto	i2l4409
  9482  0013B8                     i2l4403:
  9483                           
  9484                           ;RTC.c: 104: strcpy(month, "Dec");
  9485  0013B8  0E3D               	movlw	low i2printRTC@month
  9486  0013BA  6E01               	movwf	i2strcpy@to,c
  9487  0013BC  0E00               	movlw	high i2printRTC@month
  9488  0013BE  6E02               	movwf	i2strcpy@to+1,c
  9489  0013C0  0ED0               	movlw	low STR_47
  9490  0013C2  6E03               	movwf	i2strcpy@from,c
  9491  0013C4  0EFF               	movlw	high STR_47
  9492  0013C6  6E04               	movwf	i2strcpy@from+1,c
  9493  0013C8  EC33  F012         	call	i2_strcpy	;wreg free
  9494                           
  9495                           ;RTC.c: 106: }
  9496                           
  9497                           ;RTC.c: 105: break;
  9498  0013CC  D02D               	goto	i2l4409
  9499  0013CE                     i2l4407:
  9500  0013CE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
  9501  0013D2  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
  9502                           
  9503                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9504                           ; Switch size 1, requested type "space"
  9505                           ; Number of cases is 1, Range of values is 0 to 0
  9506                           ; switch strategies available:
  9507                           ; Name         Instructions Cycles
  9508                           ; simple_byte            4     3 (average)
  9509                           ;	Chosen strategy is simple_byte
  9510  0013D6  502B               	movf	??i2_printRTC+1,w,c
  9511  0013D8  0A00               	xorlw	0	; case 0
  9512  0013DA  A4D8               	btfss	status,2,c
  9513  0013DC  D025               	goto	i2l4409
  9514                           
  9515                           ; Switch size 1, requested type "space"
  9516                           ; Number of cases is 12, Range of values is 1 to 12
  9517                           ; switch strategies available:
  9518                           ; Name         Instructions Cycles
  9519                           ; simple_byte           37    19 (average)
  9520                           ;	Chosen strategy is simple_byte
  9521  0013DE  502A               	movf	??i2_printRTC,w,c
  9522  0013E0  0A01               	xorlw	1	; case 1
  9523  0013E2  B4D8               	btfsc	status,2,c
  9524  0013E4  D770               	goto	i2l4381
  9525  0013E6  0A03               	xorlw	3	; case 2
  9526  0013E8  B4D8               	btfsc	status,2,c
  9527  0013EA  D778               	goto	i2l4383
  9528  0013EC  0A01               	xorlw	1	; case 3
  9529  0013EE  B4D8               	btfsc	status,2,c
  9530  0013F0  D780               	goto	i2l4385
  9531  0013F2  0A07               	xorlw	7	; case 4
  9532  0013F4  B4D8               	btfsc	status,2,c
  9533  0013F6  D788               	goto	i2l4387
  9534  0013F8  0A01               	xorlw	1	; case 5
  9535  0013FA  B4D8               	btfsc	status,2,c
  9536  0013FC  D790               	goto	i2l4389
  9537  0013FE  0A03               	xorlw	3	; case 6
  9538  001400  B4D8               	btfsc	status,2,c
  9539  001402  D798               	goto	i2l4391
  9540  001404  0A01               	xorlw	1	; case 7
  9541  001406  B4D8               	btfsc	status,2,c
  9542  001408  D7A0               	goto	i2l4393
  9543  00140A  0A0F               	xorlw	15	; case 8
  9544  00140C  B4D8               	btfsc	status,2,c
  9545  00140E  D7A8               	goto	i2l4395
  9546  001410  0A01               	xorlw	1	; case 9
  9547  001412  B4D8               	btfsc	status,2,c
  9548  001414  D7B0               	goto	i2l4397
  9549  001416  0A03               	xorlw	3	; case 10
  9550  001418  B4D8               	btfsc	status,2,c
  9551  00141A  D7B8               	goto	i2l4399
  9552  00141C  0A01               	xorlw	1	; case 11
  9553  00141E  B4D8               	btfsc	status,2,c
  9554  001420  D7C0               	goto	i2l4401
  9555  001422  0A07               	xorlw	7	; case 12
  9556  001424  B4D8               	btfsc	status,2,c
  9557  001426  D7C8               	goto	i2l4403
  9558  001428                     i2l4409:
  9559                           
  9560                           ;RTC.c: 107: lcdInst(0b10000000);;
  9561  001428  0E80               	movlw	128
  9562  00142A  EC4E  F014         	call	i2_lcdInst
  9563                           
  9564                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9565  00142E  0ED4               	movlw	low STR_48
  9566  001430  6E0D               	movwf	i2printf@f,c
  9567  001432  0EFD               	movlw	high STR_48
  9568  001434  6E0E               	movwf	i2printf@f+1,c
  9569  001436  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
  9570  00143A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
  9571  00143E  0E3D               	movlw	low i2printRTC@month
  9572  001440  6E11               	movwf	?i2_printf+4,c
  9573  001442  0E00               	movlw	high i2printRTC@month
  9574  001444  6E12               	movwf	?i2_printf+5,c
  9575  001446  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
  9576  00144A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
  9577  00144E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
  9578  001452  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
  9579  001456  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
  9580  00145A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
  9581  00145E  ECAF  F004         	call	i2_printf	;wreg free
  9582  001462  0012               	return		;funcret
  9583  001464                     __end_ofi2_printRTC:
  9584                           	opt stack 0
  9585                           pclatu	equ	0xFFB
  9586                           pclath	equ	0xFFA
  9587                           tblptru	equ	0xFF8
  9588                           tblptrh	equ	0xFF7
  9589                           tblptrl	equ	0xFF6
  9590                           tablat	equ	0xFF5
  9591                           prodh	equ	0xFF4
  9592                           prodl	equ	0xFF3
  9593                           intcon	equ	0xFF2
  9594                           intcon3	equ	0xFF0
  9595                           indf0	equ	0xFEF
  9596                           postinc0	equ	0xFEE
  9597                           fsr0h	equ	0xFEA
  9598                           fsr0l	equ	0xFE9
  9599                           wreg	equ	0xFE8
  9600                           postdec1	equ	0xFE5
  9601                           fsr1h	equ	0xFE2
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           fsr2h	equ	0xFDA
  9607                           fsr2l	equ	0xFD9
  9608                           status	equ	0xFD8
  9609                           
  9610 ;; *************** function i2_strcpy *****************
  9611 ;; Defined at:
  9612 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;  to              2    0[COMRAM] PTR unsigned char 
  9615 ;;		 -> printRTC@month(4), 
  9616 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9617 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9618 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  9619 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  9622 ;;		 -> printRTC@month(4), 
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  2    0[COMRAM] PTR unsigned char 
  9625 ;; Registers used:
  9626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;Total ram usage:        6 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; This function calls:
  9639 ;;		Nothing
  9640 ;; This function is called by:
  9641 ;;		i2_printRTC
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           	psect	text43
  9646  002466                     __ptext43:
  9647                           	opt stack 0
  9648  002466                     i2_strcpy:
  9649                           	opt stack 20
  9650                           
  9651                           ;incstack = 0
  9652  002466  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  9653  00246A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  9654  00246E  D004               	goto	i2l4137
  9655  002470                     i2l4135:
  9656  002470  4A05               	infsnz	i2strcpy@cp,f,c
  9657  002472  2A06               	incf	i2strcpy@cp+1,f,c
  9658  002474  4A03               	infsnz	i2strcpy@from,f,c
  9659  002476  2A04               	incf	i2strcpy@from+1,f,c
  9660  002478                     i2l4137:
  9661  002478  C003  FFF6         	movff	i2strcpy@from,tblptrl
  9662  00247C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  9663  002480                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9664  002480  6AF8               	clrf	tblptru,c
  9665  002482                     	endif
  9666  002482                     	if	0	;tblptru may be non-zero
  9667  002482                     	endif
  9668  002482  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  9669  002486  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  9670  00248A  0008               	tblrd		*
  9671  00248C  CFF5 FFDF          	movff	tablat,indf2
  9672  002490  50DF               	movf	indf2,w,c
  9673  002492  B4D8               	btfsc	status,2,c
  9674  002494  0012               	return	
  9675  002496  D7EC               	goto	i2l4135
  9676  002498                     __end_ofi2_strcpy:
  9677                           	opt stack 0
  9678                           pclatu	equ	0xFFB
  9679                           pclath	equ	0xFFA
  9680                           tblptru	equ	0xFF8
  9681                           tblptrh	equ	0xFF7
  9682                           tblptrl	equ	0xFF6
  9683                           tablat	equ	0xFF5
  9684                           prodh	equ	0xFF4
  9685                           prodl	equ	0xFF3
  9686                           intcon	equ	0xFF2
  9687                           intcon3	equ	0xFF0
  9688                           indf0	equ	0xFEF
  9689                           postinc0	equ	0xFEE
  9690                           fsr0h	equ	0xFEA
  9691                           fsr0l	equ	0xFE9
  9692                           wreg	equ	0xFE8
  9693                           postdec1	equ	0xFE5
  9694                           fsr1h	equ	0xFE2
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           
  9703 ;; *************** function _inputHandler *****************
  9704 ;; Defined at:
  9705 ;;		line 306 in file "UI.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;		None
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;		None
  9710 ;; Return value:  Size  Location     Type
  9711 ;;                  2   41[COMRAM] int 
  9712 ;; Registers used:
  9713 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9714 ;; Tracked objects:
  9715 ;;		On entry : 0/0
  9716 ;;		On exit  : 0/0
  9717 ;;		Unchanged: 0/0
  9718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;Total ram usage:        4 bytes
  9724 ;; Hardware stack levels used:    1
  9725 ;; Hardware stack levels required when called:    4
  9726 ;; This function calls:
  9727 ;;		_change_state_to_logs_11
  9728 ;;		_change_state_to_logs_12
  9729 ;;		_change_state_to_logs_22
  9730 ;;		_change_state_to_logs_23
  9731 ;;		_change_state_to_logs_33
  9732 ;;		_change_state_to_logs_34
  9733 ;;		_change_state_to_menu_11
  9734 ;;		_change_state_to_menu_12
  9735 ;;		_change_state_to_menu_22
  9736 ;;		_change_state_to_menu_23
  9737 ;; This function is called by:
  9738 ;;		_updateMenu
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           	psect	text44
  9743  00165E                     __ptext44:
  9744                           	opt stack 0
  9745  00165E                     _inputHandler:
  9746                           	opt stack 18
  9747                           
  9748                           ;UI.c: 311: if(firstboot){
  9749                           
  9750                           ;incstack = 0
  9751  00165E  506D               	movf	_firstboot,w,c
  9752  001660  106E               	iorwf	_firstboot+1,w,c
  9753  001662  B4D8               	btfsc	status,2,c
  9754  001664  D00B               	goto	i2l4457
  9755                           
  9756                           ;UI.c: 312: change_state_to_menu_11();
  9757  001666  ECAC  F012         	call	_change_state_to_menu_11	;wreg free
  9758                           
  9759                           ;UI.c: 313: firstboot = 0;
  9760  00166A  0E00               	movlw	0
  9761  00166C  6E6E               	movwf	_firstboot+1,c
  9762  00166E  0E00               	movlw	0
  9763  001670  6E6D               	movwf	_firstboot,c
  9764                           
  9765                           ;UI.c: 314: return 0;
  9766  001672  0E00               	movlw	0
  9767  001674  6E2B               	movwf	?_inputHandler+1,c
  9768  001676  0E00               	movlw	0
  9769  001678  6E2A               	movwf	?_inputHandler,c
  9770  00167A  0012               	return	
  9771  00167C                     i2l4457:
  9772                           
  9773                           ;UI.c: 315: }
  9774                           ;UI.c: 316: if (logstate){
  9775  00167C  0100               	movlb	0	; () banked
  9776  00167E  51EF               	movf	_logstate& (0+255),w,b
  9777  001680  0100               	movlb	0	; () banked
  9778  001682  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  9779  001684  B4D8               	btfsc	status,2,c
  9780  001686  D0C7               	goto	i2l4575
  9781                           
  9782                           ; BSR set to: 0
  9783                           ;UI.c: 317: if(input == 'C' && PORTBbits.RB1 == 1){
  9784  001688  0E43               	movlw	67
  9785  00168A  1878               	xorwf	_input,w,c
  9786  00168C  A4D8               	btfss	status,2,c
  9787  00168E  D012               	goto	i2l4475
  9788                           
  9789                           ; BSR set to: 0
  9790  001690  B281               	btfsc	3969,1,c	;volatile
  9791  001692  D009               	goto	i2l4467
  9792  001694  D00F               	goto	i2l4475
  9793  001696                     i2l4465:
  9794                           
  9795                           ;UI.c: 320: _delay((unsigned long)((10)*(32000000/4000.0)));
  9796  001696  0E68               	movlw	104
  9797  001698  6E2C               	movwf	??_inputHandler& (0+255),c
  9798  00169A  0EE4               	movlw	228
  9799  00169C                     i2u474_47:
  9800  00169C  2EE8               	decfsz	wreg,f,c
  9801  00169E  D7FE               	bra	i2u474_47
  9802  0016A0  2E2C               	decfsz	??_inputHandler& (0+255),f,c
  9803  0016A2  D7FC               	bra	i2u474_47
  9804  0016A4  D000               	nop2	
  9805  0016A6                     i2l4467:
  9806  0016A6  B281               	btfsc	3969,1,c	;volatile
  9807  0016A8  D7F6               	goto	i2l4465
  9808  0016AA                     i2l4469:
  9809                           
  9810                           ;UI.c: 321: }
  9811                           ;UI.c: 322: return 0;
  9812  0016AA  0E00               	movlw	0
  9813  0016AC  6E2B               	movwf	?_inputHandler+1,c
  9814  0016AE  0E00               	movlw	0
  9815  0016B0  6E2A               	movwf	?_inputHandler,c
  9816  0016B2  0012               	return	
  9817  0016B4                     i2l4475:
  9818                           
  9819                           ;UI.c: 324: else if (input == 'D'){
  9820  0016B4  0E44               	movlw	68
  9821  0016B6  1878               	xorwf	_input,w,c
  9822  0016B8  A4D8               	btfss	status,2,c
  9823  0016BA  D7F7               	goto	i2l4469
  9824                           
  9825                           ;UI.c: 326: logstate = 0;
  9826  0016BC  0E00               	movlw	0
  9827  0016BE  0100               	movlb	0	; () banked
  9828  0016C0  6FF0               	movwf	(_logstate+1)& (0+255),b
  9829  0016C2  0E00               	movlw	0
  9830  0016C4  6FEF               	movwf	_logstate& (0+255),b
  9831                           
  9832                           ;UI.c: 327: switch(cur_state){
  9833  0016C6  D012               	goto	i2l4493
  9834  0016C8                     i2l4479:
  9835                           
  9836                           ;UI.c: 329: change_state_to_logs_11();
  9837  0016C8  EC24  F013         	call	_change_state_to_logs_11	;wreg free
  9838                           
  9839                           ;UI.c: 330: break;
  9840  0016CC  D7EE               	goto	i2l4469
  9841  0016CE                     i2l4481:
  9842                           
  9843                           ;UI.c: 332: change_state_to_logs_12();
  9844  0016CE  EC0C  F013         	call	_change_state_to_logs_12	;wreg free
  9845                           
  9846                           ;UI.c: 333: break;
  9847  0016D2  D7EB               	goto	i2l4469
  9848  0016D4                     i2l4483:
  9849                           
  9850                           ;UI.c: 335: change_state_to_logs_22();
  9851  0016D4  ECF4  F012         	call	_change_state_to_logs_22	;wreg free
  9852                           
  9853                           ;UI.c: 336: break;
  9854  0016D8  D7E8               	goto	i2l4469
  9855  0016DA                     i2l4485:
  9856                           
  9857                           ;UI.c: 338: change_state_to_logs_23();
  9858  0016DA  EC53  F013         	call	_change_state_to_logs_23	;wreg free
  9859                           
  9860                           ;UI.c: 339: break;
  9861  0016DE  D7E5               	goto	i2l4469
  9862  0016E0                     i2l4487:
  9863                           
  9864                           ;UI.c: 341: change_state_to_logs_33();
  9865  0016E0  ECDC  F012         	call	_change_state_to_logs_33	;wreg free
  9866                           
  9867                           ;UI.c: 342: break;
  9868  0016E4  D7E2               	goto	i2l4469
  9869  0016E6                     i2l4489:
  9870                           
  9871                           ;UI.c: 344: change_state_to_logs_34();
  9872  0016E6  ECC4  F012         	call	_change_state_to_logs_34	;wreg free
  9873                           
  9874                           ;UI.c: 346: }
  9875                           
  9876                           ;UI.c: 345: break;
  9877  0016EA  D7DF               	goto	i2l4469
  9878  0016EC                     i2l4493:
  9879  0016EC  C0E1  F02C         	movff	_cur_state,??_inputHandler
  9880  0016F0  C0E2  F02D         	movff	_cur_state+1,??_inputHandler+1
  9881                           
  9882                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  9883                           ; Switch size 1, requested type "space"
  9884                           ; Number of cases is 2, Range of values is 3 to 4
  9885                           ; switch strategies available:
  9886                           ; Name         Instructions Cycles
  9887                           ; simple_byte            7     4 (average)
  9888                           ;	Chosen strategy is simple_byte
  9889  0016F4  502D               	movf	??_inputHandler+1,w,c
  9890  0016F6  0A03               	xorlw	3	; case 3
  9891  0016F8  B4D8               	btfsc	status,2,c
  9892  0016FA  D004               	goto	i2l5497
  9893  0016FC  0A07               	xorlw	7	; case 4
  9894  0016FE  B4D8               	btfsc	status,2,c
  9895  001700  D00F               	goto	i2l5499
  9896  001702  D7D3               	goto	i2l4469
  9897  001704                     i2l5497:
  9898                           
  9899                           ; Switch size 1, requested type "space"
  9900                           ; Number of cases is 4, Range of values is 243 to 255
  9901                           ; switch strategies available:
  9902                           ; Name         Instructions Cycles
  9903                           ; simple_byte           13     7 (average)
  9904                           ;	Chosen strategy is simple_byte
  9905  001704  502C               	movf	??_inputHandler,w,c
  9906  001706  0AF3               	xorlw	243	; case 243
  9907  001708  B4D8               	btfsc	status,2,c
  9908  00170A  D7DE               	goto	i2l4479
  9909  00170C  0A07               	xorlw	7	; case 244
  9910  00170E  B4D8               	btfsc	status,2,c
  9911  001710  D7DE               	goto	i2l4481
  9912  001712  0A0A               	xorlw	10	; case 254
  9913  001714  B4D8               	btfsc	status,2,c
  9914  001716  D7DE               	goto	i2l4483
  9915  001718  0A01               	xorlw	1	; case 255
  9916  00171A  B4D8               	btfsc	status,2,c
  9917  00171C  D7DE               	goto	i2l4485
  9918  00171E  D7C5               	goto	i2l4469
  9919  001720                     i2l5499:
  9920                           
  9921                           ; Switch size 1, requested type "space"
  9922                           ; Number of cases is 2, Range of values is 9 to 10
  9923                           ; switch strategies available:
  9924                           ; Name         Instructions Cycles
  9925                           ; simple_byte            7     4 (average)
  9926                           ;	Chosen strategy is simple_byte
  9927  001720  502C               	movf	??_inputHandler,w,c
  9928  001722  0A09               	xorlw	9	; case 9
  9929  001724  B4D8               	btfsc	status,2,c
  9930  001726  D7DC               	goto	i2l4487
  9931  001728  0A03               	xorlw	3	; case 10
  9932  00172A  B4D8               	btfsc	status,2,c
  9933  00172C  D7DC               	goto	i2l4489
  9934  00172E  D7BD               	goto	i2l4469
  9935  001730                     i2l4505:
  9936                           
  9937                           ;UI.c: 356: if(cur_state == 11){
  9938  001730  0E0B               	movlw	11
  9939  001732  0100               	movlb	0	; () banked
  9940  001734  19E1               	xorwf	_cur_state& (0+255),w,b
  9941  001736  0100               	movlb	0	; () banked
  9942  001738  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9943  00173A  A4D8               	btfss	status,2,c
  9944  00173C  D005               	goto	i2l4513
  9945                           
  9946                           ; BSR set to: 0
  9947                           ;UI.c: 357: return 0;
  9948  00173E  0E00               	movlw	0
  9949  001740  6E2B               	movwf	?_inputHandler+1,c
  9950  001742  0E00               	movlw	0
  9951  001744  6E2A               	movwf	?_inputHandler,c
  9952                           
  9953                           ; BSR set to: 0
  9954  001746  0012               	return	
  9955  001748                     i2l4513:
  9956                           
  9957                           ; BSR set to: 0
  9958                           ;UI.c: 359: else{
  9959                           ;UI.c: 360: change_state_to_menu_11();
  9960  001748  ECAC  F012         	call	_change_state_to_menu_11	;wreg free
  9961                           
  9962                           ;UI.c: 361: }
  9963                           ;UI.c: 362: return 0;
  9964  00174C  0E00               	movlw	0
  9965  00174E  6E2B               	movwf	?_inputHandler+1,c
  9966  001750  0E00               	movlw	0
  9967  001752  6E2A               	movwf	?_inputHandler,c
  9968  001754  0012               	return	
  9969  001756                     i2l4519:
  9970                           
  9971                           ;UI.c: 364: if(cur_state == 22 | cur_state == 12){
  9972  001756  0E16               	movlw	22
  9973  001758  0100               	movlb	0	; () banked
  9974  00175A  19E1               	xorwf	_cur_state& (0+255),w,b
  9975  00175C  0100               	movlb	0	; () banked
  9976  00175E  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9977  001760  B4D8               	btfsc	status,2,c
  9978  001762  D007               	goto	i2l4523
  9979                           
  9980                           ; BSR set to: 0
  9981  001764  0E0C               	movlw	12
  9982  001766  0100               	movlb	0	; () banked
  9983  001768  19E1               	xorwf	_cur_state& (0+255),w,b
  9984  00176A  0100               	movlb	0	; () banked
  9985  00176C  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9986  00176E  A4D8               	btfss	status,2,c
  9987  001770  D005               	goto	i2l4529
  9988  001772                     i2l4523:
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;UI.c: 365: return 0;
  9992  001772  0E00               	movlw	0
  9993  001774  6E2B               	movwf	?_inputHandler+1,c
  9994  001776  0E00               	movlw	0
  9995  001778  6E2A               	movwf	?_inputHandler,c
  9996                           
  9997                           ; BSR set to: 0
  9998  00177A  0012               	return	
  9999  00177C                     i2l4529:
 10000                           
 10001                           ; BSR set to: 0
 10002                           ;UI.c: 367: else if(cur_state == 23){
 10003  00177C  0E17               	movlw	23
 10004  00177E  0100               	movlb	0	; () banked
 10005  001780  19E1               	xorwf	_cur_state& (0+255),w,b
 10006  001782  0100               	movlb	0	; () banked
 10007  001784  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10008  001786  A4D8               	btfss	status,2,c
 10009  001788  D003               	goto	i2l4533
 10010                           
 10011                           ; BSR set to: 0
 10012                           ;UI.c: 368: change_state_to_menu_22();
 10013  00178A  EC7C  F012         	call	_change_state_to_menu_22	;wreg free
 10014                           
 10015                           ;UI.c: 369: }
 10016  00178E  D002               	goto	i2l4535
 10017  001790                     i2l4533:
 10018                           
 10019                           ;UI.c: 370: else{
 10020                           ;UI.c: 371: change_state_to_menu_12();
 10021  001790  EC94  F012         	call	_change_state_to_menu_12	;wreg free
 10022  001794                     i2l4535:
 10023                           
 10024                           ;UI.c: 372: }
 10025                           ;UI.c: 373: return 0;
 10026  001794  0E00               	movlw	0
 10027  001796  6E2B               	movwf	?_inputHandler+1,c
 10028  001798  0E00               	movlw	0
 10029  00179A  6E2A               	movwf	?_inputHandler,c
 10030  00179C  0012               	return	
 10031  00179E                     i2l4539:
 10032                           
 10033                           ;UI.c: 375: if(cur_state == 23){
 10034  00179E  0E17               	movlw	23
 10035  0017A0  0100               	movlb	0	; () banked
 10036  0017A2  19E1               	xorwf	_cur_state& (0+255),w,b
 10037  0017A4  0100               	movlb	0	; () banked
 10038  0017A6  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10039  0017A8  A4D8               	btfss	status,2,c
 10040  0017AA  D005               	goto	i2l4547
 10041                           
 10042                           ; BSR set to: 0
 10043                           ;UI.c: 376: return 0;
 10044  0017AC  0E00               	movlw	0
 10045  0017AE  6E2B               	movwf	?_inputHandler+1,c
 10046  0017B0  0E00               	movlw	0
 10047  0017B2  6E2A               	movwf	?_inputHandler,c
 10048                           
 10049                           ; BSR set to: 0
 10050  0017B4  0012               	return	
 10051  0017B6                     i2l4547:
 10052                           
 10053                           ; BSR set to: 0
 10054                           ;UI.c: 378: else{
 10055                           ;UI.c: 379: change_state_to_menu_23();
 10056  0017B6  EC64  F012         	call	_change_state_to_menu_23	;wreg free
 10057                           
 10058                           ;UI.c: 380: }
 10059                           ;UI.c: 381: return 0;
 10060  0017BA  0E00               	movlw	0
 10061  0017BC  6E2B               	movwf	?_inputHandler+1,c
 10062  0017BE  0E00               	movlw	0
 10063  0017C0  6E2A               	movwf	?_inputHandler,c
 10064  0017C2  0012               	return	
 10065  0017C4                     i2l4553:
 10066                           
 10067                           ;UI.c: 384: up = 1;
 10068  0017C4  0E00               	movlw	0
 10069  0017C6  6E74               	movwf	_up+1,c
 10070  0017C8  0E01               	movlw	1
 10071  0017CA  6E73               	movwf	_up,c
 10072                           
 10073                           ;UI.c: 385: return 1;
 10074  0017CC  0E00               	movlw	0
 10075  0017CE  6E2B               	movwf	?_inputHandler+1,c
 10076  0017D0  0E01               	movlw	1
 10077  0017D2  6E2A               	movwf	?_inputHandler,c
 10078  0017D4  0012               	return	
 10079  0017D6                     i2l4557:
 10080                           
 10081                           ;UI.c: 387: down = 1;
 10082  0017D6  0E00               	movlw	0
 10083  0017D8  6E6A               	movwf	_down+1,c
 10084  0017DA  0E01               	movlw	1
 10085  0017DC  6E69               	movwf	_down,c
 10086                           
 10087                           ;UI.c: 388: return 1;
 10088  0017DE  0E00               	movlw	0
 10089  0017E0  6E2B               	movwf	?_inputHandler+1,c
 10090  0017E2  0E01               	movlw	1
 10091  0017E4  6E2A               	movwf	?_inputHandler,c
 10092  0017E6  0012               	return	
 10093  0017E8                     i2l4561:
 10094                           
 10095                           ;UI.c: 390: enter = 1;
 10096  0017E8  0E00               	movlw	0
 10097  0017EA  6E6C               	movwf	_enter+1,c
 10098  0017EC  0E01               	movlw	1
 10099  0017EE  6E6B               	movwf	_enter,c
 10100                           
 10101                           ;UI.c: 391: return 1;
 10102  0017F0  0E00               	movlw	0
 10103  0017F2  6E2B               	movwf	?_inputHandler+1,c
 10104  0017F4  0E01               	movlw	1
 10105  0017F6  6E2A               	movwf	?_inputHandler,c
 10106  0017F8  0012               	return	
 10107  0017FA                     i2l4565:
 10108                           
 10109                           ;UI.c: 393: back = 1;
 10110  0017FA  0E00               	movlw	0
 10111  0017FC  6E60               	movwf	_back+1,c
 10112  0017FE  0E01               	movlw	1
 10113  001800  6E5F               	movwf	_back,c
 10114                           
 10115                           ;UI.c: 394: return 1;
 10116  001802  0E00               	movlw	0
 10117  001804  6E2B               	movwf	?_inputHandler+1,c
 10118  001806  0E01               	movlw	1
 10119  001808  6E2A               	movwf	?_inputHandler,c
 10120  00180A  0012               	return	
 10121  00180C                     i2l4569:
 10122                           
 10123                           ;UI.c: 397: return 1;
 10124  00180C  0E00               	movlw	0
 10125  00180E  6E2B               	movwf	?_inputHandler+1,c
 10126  001810  0E01               	movlw	1
 10127  001812  6E2A               	movwf	?_inputHandler,c
 10128                           
 10129                           ;UI.c: 398: }
 10130  001814  0012               	return	
 10131  001816                     i2l4575:
 10132  001816  5078               	movf	_input,w,c
 10133                           
 10134                           ; Switch size 1, requested type "space"
 10135                           ; Number of cases is 7, Range of values is 49 to 68
 10136                           ; switch strategies available:
 10137                           ; Name         Instructions Cycles
 10138                           ; simple_byte           22    12 (average)
 10139                           ;	Chosen strategy is simple_byte
 10140  001818  0A31               	xorlw	49	; case 49
 10141  00181A  B4D8               	btfsc	status,2,c
 10142  00181C  D789               	goto	i2l4505
 10143  00181E  0A03               	xorlw	3	; case 50
 10144  001820  B4D8               	btfsc	status,2,c
 10145  001822  D799               	goto	i2l4519
 10146  001824  0A01               	xorlw	1	; case 51
 10147  001826  B4D8               	btfsc	status,2,c
 10148  001828  D7BA               	goto	i2l4539
 10149  00182A  0A72               	xorlw	114	; case 65
 10150  00182C  B4D8               	btfsc	status,2,c
 10151  00182E  D7CA               	goto	i2l4553
 10152  001830  0A03               	xorlw	3	; case 66
 10153  001832  B4D8               	btfsc	status,2,c
 10154  001834  D7D0               	goto	i2l4557
 10155  001836  0A01               	xorlw	1	; case 67
 10156  001838  B4D8               	btfsc	status,2,c
 10157  00183A  D7D6               	goto	i2l4561
 10158  00183C  0A07               	xorlw	7	; case 68
 10159  00183E  B4D8               	btfsc	status,2,c
 10160  001840  D7DC               	goto	i2l4565
 10161  001842  D7E4               	goto	i2l4569
 10162  001844                     __end_of_inputHandler:
 10163                           	opt stack 0
 10164                           pclatu	equ	0xFFB
 10165                           pclath	equ	0xFFA
 10166                           tblptru	equ	0xFF8
 10167                           tblptrh	equ	0xFF7
 10168                           tblptrl	equ	0xFF6
 10169                           tablat	equ	0xFF5
 10170                           prodh	equ	0xFF4
 10171                           prodl	equ	0xFF3
 10172                           intcon	equ	0xFF2
 10173                           intcon3	equ	0xFF0
 10174                           indf0	equ	0xFEF
 10175                           postinc0	equ	0xFEE
 10176                           fsr0h	equ	0xFEA
 10177                           fsr0l	equ	0xFE9
 10178                           wreg	equ	0xFE8
 10179                           postdec1	equ	0xFE5
 10180                           fsr1h	equ	0xFE2
 10181                           fsr1l	equ	0xFE1
 10182                           indf2	equ	0xFDF
 10183                           postinc2	equ	0xFDE
 10184                           postdec2	equ	0xFDD
 10185                           fsr2h	equ	0xFDA
 10186                           fsr2l	equ	0xFD9
 10187                           status	equ	0xFD8
 10188                           
 10189 ;; *************** function _change_state_to_menu_23 *****************
 10190 ;; Defined at:
 10191 ;;		line 439 in file "UI.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;		None
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      void 
 10198 ;; Registers used:
 10199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10209 ;;Total ram usage:        0 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    3
 10212 ;; This function calls:
 10213 ;;		i2_lcdInst
 10214 ;;		i2_printf
 10215 ;; This function is called by:
 10216 ;;		_updateMenu
 10217 ;;		_inputHandler
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           	psect	text45
 10222  0024C8                     __ptext45:
 10223                           	opt stack 0
 10224  0024C8                     _change_state_to_menu_23:
 10225                           	opt stack 18
 10226                           
 10227                           ;UI.c: 440: cur_state = 23;
 10228                           
 10229                           ;incstack = 0
 10230  0024C8  0E00               	movlw	0
 10231  0024CA  0100               	movlb	0	; () banked
 10232  0024CC  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10233  0024CE  0E17               	movlw	23
 10234  0024D0  6FE1               	movwf	_cur_state& (0+255),b
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;UI.c: 442: lcdInst(0b10000000);;
 10238  0024D2  0E80               	movlw	128
 10239  0024D4  EC4E  F014         	call	i2_lcdInst
 10240                           
 10241                           ;UI.c: 443: printf("2. SORT         ");
 10242  0024D8  0E7A               	movlw	low STR_17
 10243  0024DA  6E0D               	movwf	i2printf@f,c
 10244  0024DC  0EFE               	movlw	high STR_17
 10245  0024DE  6E0E               	movwf	i2printf@f+1,c
 10246  0024E0  ECAF  F004         	call	i2_printf	;wreg free
 10247                           
 10248                           ;UI.c: 444: lcdInst(0b11000000);;
 10249  0024E4  0EC0               	movlw	192
 10250  0024E6  EC4E  F014         	call	i2_lcdInst
 10251                           
 10252                           ;UI.c: 445: printf("3. LOGS        <");
 10253  0024EA  0E46               	movlw	low STR_23
 10254  0024EC  6E0D               	movwf	i2printf@f,c
 10255  0024EE  0EFF               	movlw	high STR_23
 10256  0024F0  6E0E               	movwf	i2printf@f+1,c
 10257  0024F2  ECAF  F004         	call	i2_printf	;wreg free
 10258  0024F6  0012               	return		;funcret
 10259  0024F8                     __end_of_change_state_to_menu_23:
 10260                           	opt stack 0
 10261                           pclatu	equ	0xFFB
 10262                           pclath	equ	0xFFA
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           prodh	equ	0xFF4
 10268                           prodl	equ	0xFF3
 10269                           intcon	equ	0xFF2
 10270                           intcon3	equ	0xFF0
 10271                           indf0	equ	0xFEF
 10272                           postinc0	equ	0xFEE
 10273                           fsr0h	equ	0xFEA
 10274                           fsr0l	equ	0xFE9
 10275                           wreg	equ	0xFE8
 10276                           postdec1	equ	0xFE5
 10277                           fsr1h	equ	0xFE2
 10278                           fsr1l	equ	0xFE1
 10279                           indf2	equ	0xFDF
 10280                           postinc2	equ	0xFDE
 10281                           postdec2	equ	0xFDD
 10282                           fsr2h	equ	0xFDA
 10283                           fsr2l	equ	0xFD9
 10284                           status	equ	0xFD8
 10285                           
 10286 ;; *************** function _change_state_to_menu_22 *****************
 10287 ;; Defined at:
 10288 ;;		line 431 in file "UI.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;		None
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  1    wreg      void 
 10295 ;; Registers used:
 10296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;Total ram usage:        0 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    3
 10309 ;; This function calls:
 10310 ;;		i2_lcdInst
 10311 ;;		i2_printf
 10312 ;; This function is called by:
 10313 ;;		_updateMenu
 10314 ;;		_inputHandler
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           	psect	text46
 10319  0024F8                     __ptext46:
 10320                           	opt stack 0
 10321  0024F8                     _change_state_to_menu_22:
 10322                           	opt stack 18
 10323                           
 10324                           ;UI.c: 432: cur_state = 22;
 10325                           
 10326                           ;incstack = 0
 10327  0024F8  0E00               	movlw	0
 10328  0024FA  0100               	movlb	0	; () banked
 10329  0024FC  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10330  0024FE  0E16               	movlw	22
 10331  002500  6FE1               	movwf	_cur_state& (0+255),b
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;UI.c: 434: lcdInst(0b10000000);;
 10335  002502  0E80               	movlw	128
 10336  002504  EC4E  F014         	call	i2_lcdInst
 10337                           
 10338                           ;UI.c: 435: printf("2. SORT        <");
 10339  002508  0E57               	movlw	low STR_19
 10340  00250A  6E0D               	movwf	i2printf@f,c
 10341  00250C  0EFF               	movlw	high STR_19
 10342  00250E  6E0E               	movwf	i2printf@f+1,c
 10343  002510  ECAF  F004         	call	i2_printf	;wreg free
 10344                           
 10345                           ;UI.c: 436: lcdInst(0b11000000);;
 10346  002514  0EC0               	movlw	192
 10347  002516  EC4E  F014         	call	i2_lcdInst
 10348                           
 10349                           ;UI.c: 437: printf("3. LOGS         ");
 10350  00251A  0E69               	movlw	low STR_21
 10351  00251C  6E0D               	movwf	i2printf@f,c
 10352  00251E  0EFE               	movlw	high STR_21
 10353  002520  6E0E               	movwf	i2printf@f+1,c
 10354  002522  ECAF  F004         	call	i2_printf	;wreg free
 10355  002526  0012               	return		;funcret
 10356  002528                     __end_of_change_state_to_menu_22:
 10357                           	opt stack 0
 10358                           pclatu	equ	0xFFB
 10359                           pclath	equ	0xFFA
 10360                           tblptru	equ	0xFF8
 10361                           tblptrh	equ	0xFF7
 10362                           tblptrl	equ	0xFF6
 10363                           tablat	equ	0xFF5
 10364                           prodh	equ	0xFF4
 10365                           prodl	equ	0xFF3
 10366                           intcon	equ	0xFF2
 10367                           intcon3	equ	0xFF0
 10368                           indf0	equ	0xFEF
 10369                           postinc0	equ	0xFEE
 10370                           fsr0h	equ	0xFEA
 10371                           fsr0l	equ	0xFE9
 10372                           wreg	equ	0xFE8
 10373                           postdec1	equ	0xFE5
 10374                           fsr1h	equ	0xFE2
 10375                           fsr1l	equ	0xFE1
 10376                           indf2	equ	0xFDF
 10377                           postinc2	equ	0xFDE
 10378                           postdec2	equ	0xFDD
 10379                           fsr2h	equ	0xFDA
 10380                           fsr2l	equ	0xFD9
 10381                           status	equ	0xFD8
 10382                           
 10383 ;; *************** function _change_state_to_menu_12 *****************
 10384 ;; Defined at:
 10385 ;;		line 423 in file "UI.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;		None
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;		None
 10390 ;; Return value:  Size  Location     Type
 10391 ;;                  1    wreg      void 
 10392 ;; Registers used:
 10393 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10394 ;; Tracked objects:
 10395 ;;		On entry : 0/0
 10396 ;;		On exit  : 0/0
 10397 ;;		Unchanged: 0/0
 10398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;Total ram usage:        0 bytes
 10404 ;; Hardware stack levels used:    1
 10405 ;; Hardware stack levels required when called:    3
 10406 ;; This function calls:
 10407 ;;		i2_lcdInst
 10408 ;;		i2_printf
 10409 ;; This function is called by:
 10410 ;;		_updateMenu
 10411 ;;		_inputHandler
 10412 ;; This function uses a non-reentrant model
 10413 ;;
 10414                           
 10415                           	psect	text47
 10416  002528                     __ptext47:
 10417                           	opt stack 0
 10418  002528                     _change_state_to_menu_12:
 10419                           	opt stack 18
 10420                           
 10421                           ;UI.c: 424: cur_state = 12;
 10422                           
 10423                           ;incstack = 0
 10424  002528  0E00               	movlw	0
 10425  00252A  0100               	movlb	0	; () banked
 10426  00252C  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10427  00252E  0E0C               	movlw	12
 10428  002530  6FE1               	movwf	_cur_state& (0+255),b
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;UI.c: 426: lcdInst(0b10000000);;
 10432  002532  0E80               	movlw	128
 10433  002534  EC4E  F014         	call	i2_lcdInst
 10434                           
 10435                           ;UI.c: 427: printf("1. DATE/TIME    ");
 10436  002538  0E8B               	movlw	low STR_18
 10437  00253A  6E0D               	movwf	i2printf@f,c
 10438  00253C  0EFE               	movlw	high STR_18
 10439  00253E  6E0E               	movwf	i2printf@f+1,c
 10440  002540  ECAF  F004         	call	i2_printf	;wreg free
 10441                           
 10442                           ;UI.c: 428: lcdInst(0b11000000);;
 10443  002544  0EC0               	movlw	192
 10444  002546  EC4E  F014         	call	i2_lcdInst
 10445                           
 10446                           ;UI.c: 429: printf("2. SORT        <");
 10447  00254A  0E57               	movlw	low STR_19
 10448  00254C  6E0D               	movwf	i2printf@f,c
 10449  00254E  0EFF               	movlw	high STR_19
 10450  002550  6E0E               	movwf	i2printf@f+1,c
 10451  002552  ECAF  F004         	call	i2_printf	;wreg free
 10452  002556  0012               	return		;funcret
 10453  002558                     __end_of_change_state_to_menu_12:
 10454                           	opt stack 0
 10455                           pclatu	equ	0xFFB
 10456                           pclath	equ	0xFFA
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           prodh	equ	0xFF4
 10462                           prodl	equ	0xFF3
 10463                           intcon	equ	0xFF2
 10464                           intcon3	equ	0xFF0
 10465                           indf0	equ	0xFEF
 10466                           postinc0	equ	0xFEE
 10467                           fsr0h	equ	0xFEA
 10468                           fsr0l	equ	0xFE9
 10469                           wreg	equ	0xFE8
 10470                           postdec1	equ	0xFE5
 10471                           fsr1h	equ	0xFE2
 10472                           fsr1l	equ	0xFE1
 10473                           indf2	equ	0xFDF
 10474                           postinc2	equ	0xFDE
 10475                           postdec2	equ	0xFDD
 10476                           fsr2h	equ	0xFDA
 10477                           fsr2l	equ	0xFD9
 10478                           status	equ	0xFD8
 10479                           
 10480 ;; *************** function _change_state_to_menu_11 *****************
 10481 ;; Defined at:
 10482 ;;		line 415 in file "UI.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;		None
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;		None
 10487 ;; Return value:  Size  Location     Type
 10488 ;;                  1    wreg      void 
 10489 ;; Registers used:
 10490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;Total ram usage:        0 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    3
 10503 ;; This function calls:
 10504 ;;		i2_lcdInst
 10505 ;;		i2_printf
 10506 ;; This function is called by:
 10507 ;;		_updateMenu
 10508 ;;		_inputHandler
 10509 ;; This function uses a non-reentrant model
 10510 ;;
 10511                           
 10512                           	psect	text48
 10513  002558                     __ptext48:
 10514                           	opt stack 0
 10515  002558                     _change_state_to_menu_11:
 10516                           	opt stack 18
 10517                           
 10518                           ;UI.c: 416: cur_state = 11;
 10519                           
 10520                           ;incstack = 0
 10521  002558  0E00               	movlw	0
 10522  00255A  0100               	movlb	0	; () banked
 10523  00255C  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10524  00255E  0E0B               	movlw	11
 10525  002560  6FE1               	movwf	_cur_state& (0+255),b
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;UI.c: 418: lcdInst(0b10000000);;
 10529  002562  0E80               	movlw	128
 10530  002564  EC4E  F014         	call	i2_lcdInst
 10531                           
 10532                           ;UI.c: 419: printf("1. DATE/TIME   <");
 10533  002568  0E68               	movlw	low STR_16
 10534  00256A  6E0D               	movwf	i2printf@f,c
 10535  00256C  0EFF               	movlw	high STR_16
 10536  00256E  6E0E               	movwf	i2printf@f+1,c
 10537  002570  ECAF  F004         	call	i2_printf	;wreg free
 10538                           
 10539                           ;UI.c: 420: lcdInst(0b11000000);;
 10540  002574  0EC0               	movlw	192
 10541  002576  EC4E  F014         	call	i2_lcdInst
 10542                           
 10543                           ;UI.c: 421: printf("2. SORT         ");
 10544  00257A  0E7A               	movlw	low STR_17
 10545  00257C  6E0D               	movwf	i2printf@f,c
 10546  00257E  0EFE               	movlw	high STR_17
 10547  002580  6E0E               	movwf	i2printf@f+1,c
 10548  002582  ECAF  F004         	call	i2_printf	;wreg free
 10549  002586  0012               	return		;funcret
 10550  002588                     __end_of_change_state_to_menu_11:
 10551                           	opt stack 0
 10552                           pclatu	equ	0xFFB
 10553                           pclath	equ	0xFFA
 10554                           tblptru	equ	0xFF8
 10555                           tblptrh	equ	0xFF7
 10556                           tblptrl	equ	0xFF6
 10557                           tablat	equ	0xFF5
 10558                           prodh	equ	0xFF4
 10559                           prodl	equ	0xFF3
 10560                           intcon	equ	0xFF2
 10561                           intcon3	equ	0xFF0
 10562                           indf0	equ	0xFEF
 10563                           postinc0	equ	0xFEE
 10564                           fsr0h	equ	0xFEA
 10565                           fsr0l	equ	0xFE9
 10566                           wreg	equ	0xFE8
 10567                           postdec1	equ	0xFE5
 10568                           fsr1h	equ	0xFE2
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function _change_state_to_logs_34 *****************
 10578 ;; Defined at:
 10579 ;;		line 482 in file "UI.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;		None
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      void 
 10586 ;; Registers used:
 10587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;Total ram usage:        0 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    3
 10600 ;; This function calls:
 10601 ;;		i2_lcdInst
 10602 ;;		i2_printf
 10603 ;; This function is called by:
 10604 ;;		_updateMenu
 10605 ;;		_inputHandler
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text49
 10610  002588                     __ptext49:
 10611                           	opt stack 0
 10612  002588                     _change_state_to_logs_34:
 10613                           	opt stack 18
 10614                           
 10615                           ;UI.c: 483: cur_state = 1034;
 10616                           
 10617                           ;incstack = 0
 10618  002588  0E04               	movlw	4
 10619  00258A  0100               	movlb	0	; () banked
 10620  00258C  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10621  00258E  0E0A               	movlw	10
 10622  002590  6FE1               	movwf	_cur_state& (0+255),b
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;UI.c: 484: lcdInst(0b10000000);;
 10626  002592  0E80               	movlw	128
 10627  002594  EC4E  F014         	call	i2_lcdInst
 10628                           
 10629                           ;UI.c: 485: printf("LOG 3           ");
 10630  002598  0E47               	movlw	low STR_29
 10631  00259A  6E0D               	movwf	i2printf@f,c
 10632  00259C  0EFE               	movlw	high STR_29
 10633  00259E  6E0E               	movwf	i2printf@f+1,c
 10634  0025A0  ECAF  F004         	call	i2_printf	;wreg free
 10635                           
 10636                           ;UI.c: 486: lcdInst(0b11000000);;
 10637  0025A4  0EC0               	movlw	192
 10638  0025A6  EC4E  F014         	call	i2_lcdInst
 10639                           
 10640                           ;UI.c: 487: printf("LOG 4          <");
 10641  0025AA  0E35               	movlw	low STR_35
 10642  0025AC  6E0D               	movwf	i2printf@f,c
 10643  0025AE  0EFF               	movlw	high STR_35
 10644  0025B0  6E0E               	movwf	i2printf@f+1,c
 10645  0025B2  ECAF  F004         	call	i2_printf	;wreg free
 10646  0025B6  0012               	return		;funcret
 10647  0025B8                     __end_of_change_state_to_logs_34:
 10648                           	opt stack 0
 10649                           pclatu	equ	0xFFB
 10650                           pclath	equ	0xFFA
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           intcon	equ	0xFF2
 10658                           intcon3	equ	0xFF0
 10659                           indf0	equ	0xFEF
 10660                           postinc0	equ	0xFEE
 10661                           fsr0h	equ	0xFEA
 10662                           fsr0l	equ	0xFE9
 10663                           wreg	equ	0xFE8
 10664                           postdec1	equ	0xFE5
 10665                           fsr1h	equ	0xFE2
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           postdec2	equ	0xFDD
 10670                           fsr2h	equ	0xFDA
 10671                           fsr2l	equ	0xFD9
 10672                           status	equ	0xFD8
 10673                           
 10674 ;; *************** function _change_state_to_logs_33 *****************
 10675 ;; Defined at:
 10676 ;;		line 475 in file "UI.c"
 10677 ;; Parameters:    Size  Location     Type
 10678 ;;		None
 10679 ;; Auto vars:     Size  Location     Type
 10680 ;;		None
 10681 ;; Return value:  Size  Location     Type
 10682 ;;                  1    wreg      void 
 10683 ;; Registers used:
 10684 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10685 ;; Tracked objects:
 10686 ;;		On entry : 0/0
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10694 ;;Total ram usage:        0 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    3
 10697 ;; This function calls:
 10698 ;;		i2_lcdInst
 10699 ;;		i2_printf
 10700 ;; This function is called by:
 10701 ;;		_updateMenu
 10702 ;;		_inputHandler
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           	psect	text50
 10707  0025B8                     __ptext50:
 10708                           	opt stack 0
 10709  0025B8                     _change_state_to_logs_33:
 10710                           	opt stack 18
 10711                           
 10712                           ;UI.c: 476: cur_state = 1033;
 10713                           
 10714                           ;incstack = 0
 10715  0025B8  0E04               	movlw	4
 10716  0025BA  0100               	movlb	0	; () banked
 10717  0025BC  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10718  0025BE  0E09               	movlw	9
 10719  0025C0  6FE1               	movwf	_cur_state& (0+255),b
 10720                           
 10721                           ; BSR set to: 0
 10722                           ;UI.c: 477: lcdInst(0b10000000);;
 10723  0025C2  0E80               	movlw	128
 10724  0025C4  EC4E  F014         	call	i2_lcdInst
 10725                           
 10726                           ;UI.c: 478: printf("LOG 3          <");
 10727  0025C8  0E24               	movlw	low STR_31
 10728  0025CA  6E0D               	movwf	i2printf@f,c
 10729  0025CC  0EFF               	movlw	high STR_31
 10730  0025CE  6E0E               	movwf	i2printf@f+1,c
 10731  0025D0  ECAF  F004         	call	i2_printf	;wreg free
 10732                           
 10733                           ;UI.c: 479: lcdInst(0b11000000);;
 10734  0025D4  0EC0               	movlw	192
 10735  0025D6  EC4E  F014         	call	i2_lcdInst
 10736                           
 10737                           ;UI.c: 480: printf("LOG 4           ");
 10738  0025DA  0E58               	movlw	low STR_33
 10739  0025DC  6E0D               	movwf	i2printf@f,c
 10740  0025DE  0EFE               	movlw	high STR_33
 10741  0025E0  6E0E               	movwf	i2printf@f+1,c
 10742  0025E2  ECAF  F004         	call	i2_printf	;wreg free
 10743  0025E6  0012               	return		;funcret
 10744  0025E8                     __end_of_change_state_to_logs_33:
 10745                           	opt stack 0
 10746                           pclatu	equ	0xFFB
 10747                           pclath	equ	0xFFA
 10748                           tblptru	equ	0xFF8
 10749                           tblptrh	equ	0xFF7
 10750                           tblptrl	equ	0xFF6
 10751                           tablat	equ	0xFF5
 10752                           prodh	equ	0xFF4
 10753                           prodl	equ	0xFF3
 10754                           intcon	equ	0xFF2
 10755                           intcon3	equ	0xFF0
 10756                           indf0	equ	0xFEF
 10757                           postinc0	equ	0xFEE
 10758                           fsr0h	equ	0xFEA
 10759                           fsr0l	equ	0xFE9
 10760                           wreg	equ	0xFE8
 10761                           postdec1	equ	0xFE5
 10762                           fsr1h	equ	0xFE2
 10763                           fsr1l	equ	0xFE1
 10764                           indf2	equ	0xFDF
 10765                           postinc2	equ	0xFDE
 10766                           postdec2	equ	0xFDD
 10767                           fsr2h	equ	0xFDA
 10768                           fsr2l	equ	0xFD9
 10769                           status	equ	0xFD8
 10770                           
 10771 ;; *************** function _change_state_to_logs_23 *****************
 10772 ;; Defined at:
 10773 ;;		line 468 in file "UI.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;		None
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;		None
 10778 ;; Return value:  Size  Location     Type
 10779 ;;                  1    wreg      void 
 10780 ;; Registers used:
 10781 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10782 ;; Tracked objects:
 10783 ;;		On entry : 0/0
 10784 ;;		On exit  : 0/0
 10785 ;;		Unchanged: 0/0
 10786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;Total ram usage:        0 bytes
 10792 ;; Hardware stack levels used:    1
 10793 ;; Hardware stack levels required when called:    3
 10794 ;; This function calls:
 10795 ;;		i2_lcdInst
 10796 ;;		i2_printf
 10797 ;; This function is called by:
 10798 ;;		_updateMenu
 10799 ;;		_inputHandler
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           	psect	text51
 10804  0026A6                     __ptext51:
 10805                           	opt stack 0
 10806  0026A6                     _change_state_to_logs_23:
 10807                           	opt stack 18
 10808                           
 10809                           ;UI.c: 469: cur_state = 1023;
 10810                           
 10811                           ;incstack = 0
 10812  0026A6  0E03               	movlw	3
 10813  0026A8  0100               	movlb	0	; () banked
 10814  0026AA  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10815  0026AC  69E1               	setf	_cur_state& (0+255),b
 10816                           
 10817                           ; BSR set to: 0
 10818                           ;UI.c: 470: lcdInst(0b10000000);;
 10819  0026AE  0E80               	movlw	128
 10820  0026B0  EC4E  F014         	call	i2_lcdInst
 10821                           
 10822                           ;UI.c: 471: printf("LOG 2           ");
 10823  0026B4  0E36               	movlw	low STR_25
 10824  0026B6  6E0D               	movwf	i2printf@f,c
 10825  0026B8  0EFE               	movlw	high STR_25
 10826  0026BA  6E0E               	movwf	i2printf@f+1,c
 10827  0026BC  ECAF  F004         	call	i2_printf	;wreg free
 10828                           
 10829                           ;UI.c: 472: lcdInst(0b11000000);;
 10830  0026C0  0EC0               	movlw	192
 10831  0026C2  EC4E  F014         	call	i2_lcdInst
 10832                           
 10833                           ;UI.c: 473: printf("LOG 3          <");
 10834  0026C6  0E24               	movlw	low STR_31
 10835  0026C8  6E0D               	movwf	i2printf@f,c
 10836  0026CA  0EFF               	movlw	high STR_31
 10837  0026CC  6E0E               	movwf	i2printf@f+1,c
 10838  0026CE  ECAF  F004         	call	i2_printf	;wreg free
 10839  0026D2  0012               	return		;funcret
 10840  0026D4                     __end_of_change_state_to_logs_23:
 10841                           	opt stack 0
 10842                           pclatu	equ	0xFFB
 10843                           pclath	equ	0xFFA
 10844                           tblptru	equ	0xFF8
 10845                           tblptrh	equ	0xFF7
 10846                           tblptrl	equ	0xFF6
 10847                           tablat	equ	0xFF5
 10848                           prodh	equ	0xFF4
 10849                           prodl	equ	0xFF3
 10850                           intcon	equ	0xFF2
 10851                           intcon3	equ	0xFF0
 10852                           indf0	equ	0xFEF
 10853                           postinc0	equ	0xFEE
 10854                           fsr0h	equ	0xFEA
 10855                           fsr0l	equ	0xFE9
 10856                           wreg	equ	0xFE8
 10857                           postdec1	equ	0xFE5
 10858                           fsr1h	equ	0xFE2
 10859                           fsr1l	equ	0xFE1
 10860                           indf2	equ	0xFDF
 10861                           postinc2	equ	0xFDE
 10862                           postdec2	equ	0xFDD
 10863                           fsr2h	equ	0xFDA
 10864                           fsr2l	equ	0xFD9
 10865                           status	equ	0xFD8
 10866                           
 10867 ;; *************** function _change_state_to_logs_22 *****************
 10868 ;; Defined at:
 10869 ;;		line 461 in file "UI.c"
 10870 ;; Parameters:    Size  Location     Type
 10871 ;;		None
 10872 ;; Auto vars:     Size  Location     Type
 10873 ;;		None
 10874 ;; Return value:  Size  Location     Type
 10875 ;;                  1    wreg      void 
 10876 ;; Registers used:
 10877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10878 ;; Tracked objects:
 10879 ;;		On entry : 0/0
 10880 ;;		On exit  : 0/0
 10881 ;;		Unchanged: 0/0
 10882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;Total ram usage:        0 bytes
 10888 ;; Hardware stack levels used:    1
 10889 ;; Hardware stack levels required when called:    3
 10890 ;; This function calls:
 10891 ;;		i2_lcdInst
 10892 ;;		i2_printf
 10893 ;; This function is called by:
 10894 ;;		_updateMenu
 10895 ;;		_inputHandler
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899                           	psect	text52
 10900  0025E8                     __ptext52:
 10901                           	opt stack 0
 10902  0025E8                     _change_state_to_logs_22:
 10903                           	opt stack 18
 10904                           
 10905                           ;UI.c: 462: cur_state = 1022;
 10906                           
 10907                           ;incstack = 0
 10908  0025E8  0E03               	movlw	3
 10909  0025EA  0100               	movlb	0	; () banked
 10910  0025EC  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10911  0025EE  0EFE               	movlw	254
 10912  0025F0  6FE1               	movwf	_cur_state& (0+255),b
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;UI.c: 463: lcdInst(0b10000000);;
 10916  0025F2  0E80               	movlw	128
 10917  0025F4  EC4E  F014         	call	i2_lcdInst
 10918                           
 10919                           ;UI.c: 464: printf("LOG 2          <");
 10920  0025F8  0E13               	movlw	low STR_27
 10921  0025FA  6E0D               	movwf	i2printf@f,c
 10922  0025FC  0EFF               	movlw	high STR_27
 10923  0025FE  6E0E               	movwf	i2printf@f+1,c
 10924  002600  ECAF  F004         	call	i2_printf	;wreg free
 10925                           
 10926                           ;UI.c: 465: lcdInst(0b11000000);;
 10927  002604  0EC0               	movlw	192
 10928  002606  EC4E  F014         	call	i2_lcdInst
 10929                           
 10930                           ;UI.c: 466: printf("LOG 3           ");
 10931  00260A  0E47               	movlw	low STR_29
 10932  00260C  6E0D               	movwf	i2printf@f,c
 10933  00260E  0EFE               	movlw	high STR_29
 10934  002610  6E0E               	movwf	i2printf@f+1,c
 10935  002612  ECAF  F004         	call	i2_printf	;wreg free
 10936  002616  0012               	return		;funcret
 10937  002618                     __end_of_change_state_to_logs_22:
 10938                           	opt stack 0
 10939                           pclatu	equ	0xFFB
 10940                           pclath	equ	0xFFA
 10941                           tblptru	equ	0xFF8
 10942                           tblptrh	equ	0xFF7
 10943                           tblptrl	equ	0xFF6
 10944                           tablat	equ	0xFF5
 10945                           prodh	equ	0xFF4
 10946                           prodl	equ	0xFF3
 10947                           intcon	equ	0xFF2
 10948                           intcon3	equ	0xFF0
 10949                           indf0	equ	0xFEF
 10950                           postinc0	equ	0xFEE
 10951                           fsr0h	equ	0xFEA
 10952                           fsr0l	equ	0xFE9
 10953                           wreg	equ	0xFE8
 10954                           postdec1	equ	0xFE5
 10955                           fsr1h	equ	0xFE2
 10956                           fsr1l	equ	0xFE1
 10957                           indf2	equ	0xFDF
 10958                           postinc2	equ	0xFDE
 10959                           postdec2	equ	0xFDD
 10960                           fsr2h	equ	0xFDA
 10961                           fsr2l	equ	0xFD9
 10962                           status	equ	0xFD8
 10963                           
 10964 ;; *************** function _change_state_to_logs_12 *****************
 10965 ;; Defined at:
 10966 ;;		line 454 in file "UI.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;		None
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;		None
 10971 ;; Return value:  Size  Location     Type
 10972 ;;                  1    wreg      void 
 10973 ;; Registers used:
 10974 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;Total ram usage:        0 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    3
 10987 ;; This function calls:
 10988 ;;		i2_lcdInst
 10989 ;;		i2_printf
 10990 ;; This function is called by:
 10991 ;;		_updateMenu
 10992 ;;		_inputHandler
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           	psect	text53
 10997  002618                     __ptext53:
 10998                           	opt stack 0
 10999  002618                     _change_state_to_logs_12:
 11000                           	opt stack 18
 11001                           
 11002                           ;UI.c: 455: cur_state = 1012;
 11003                           
 11004                           ;incstack = 0
 11005  002618  0E03               	movlw	3
 11006  00261A  0100               	movlb	0	; () banked
 11007  00261C  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11008  00261E  0EF4               	movlw	244
 11009  002620  6FE1               	movwf	_cur_state& (0+255),b
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;UI.c: 456: lcdInst(0b10000000);;
 11013  002622  0E80               	movlw	128
 11014  002624  EC4E  F014         	call	i2_lcdInst
 11015                           
 11016                           ;UI.c: 457: printf("LOG 1           ");
 11017  002628  0E25               	movlw	low STR_26
 11018  00262A  6E0D               	movwf	i2printf@f,c
 11019  00262C  0EFE               	movlw	high STR_26
 11020  00262E  6E0E               	movwf	i2printf@f+1,c
 11021  002630  ECAF  F004         	call	i2_printf	;wreg free
 11022                           
 11023                           ;UI.c: 458: lcdInst(0b11000000);;
 11024  002634  0EC0               	movlw	192
 11025  002636  EC4E  F014         	call	i2_lcdInst
 11026                           
 11027                           ;UI.c: 459: printf("LOG 2          <");
 11028  00263A  0E13               	movlw	low STR_27
 11029  00263C  6E0D               	movwf	i2printf@f,c
 11030  00263E  0EFF               	movlw	high STR_27
 11031  002640  6E0E               	movwf	i2printf@f+1,c
 11032  002642  ECAF  F004         	call	i2_printf	;wreg free
 11033  002646  0012               	return		;funcret
 11034  002648                     __end_of_change_state_to_logs_12:
 11035                           	opt stack 0
 11036                           pclatu	equ	0xFFB
 11037                           pclath	equ	0xFFA
 11038                           tblptru	equ	0xFF8
 11039                           tblptrh	equ	0xFF7
 11040                           tblptrl	equ	0xFF6
 11041                           tablat	equ	0xFF5
 11042                           prodh	equ	0xFF4
 11043                           prodl	equ	0xFF3
 11044                           intcon	equ	0xFF2
 11045                           intcon3	equ	0xFF0
 11046                           indf0	equ	0xFEF
 11047                           postinc0	equ	0xFEE
 11048                           fsr0h	equ	0xFEA
 11049                           fsr0l	equ	0xFE9
 11050                           wreg	equ	0xFE8
 11051                           postdec1	equ	0xFE5
 11052                           fsr1h	equ	0xFE2
 11053                           fsr1l	equ	0xFE1
 11054                           indf2	equ	0xFDF
 11055                           postinc2	equ	0xFDE
 11056                           postdec2	equ	0xFDD
 11057                           fsr2h	equ	0xFDA
 11058                           fsr2l	equ	0xFD9
 11059                           status	equ	0xFD8
 11060                           
 11061 ;; *************** function _change_state_to_logs_11 *****************
 11062 ;; Defined at:
 11063 ;;		line 447 in file "UI.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;		None
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;		None
 11068 ;; Return value:  Size  Location     Type
 11069 ;;                  1    wreg      void 
 11070 ;; Registers used:
 11071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11081 ;;Total ram usage:        0 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    3
 11084 ;; This function calls:
 11085 ;;		i2_lcdInst
 11086 ;;		i2_printf
 11087 ;; This function is called by:
 11088 ;;		_updateMenu
 11089 ;;		_inputHandler
 11090 ;; This function uses a non-reentrant model
 11091 ;;
 11092                           
 11093                           	psect	text54
 11094  002648                     __ptext54:
 11095                           	opt stack 0
 11096  002648                     _change_state_to_logs_11:
 11097                           	opt stack 18
 11098                           
 11099                           ;UI.c: 448: cur_state = 1011;
 11100                           
 11101                           ;incstack = 0
 11102  002648  0E03               	movlw	3
 11103  00264A  0100               	movlb	0	; () banked
 11104  00264C  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11105  00264E  0EF3               	movlw	243
 11106  002650  6FE1               	movwf	_cur_state& (0+255),b
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;UI.c: 449: lcdInst(0b10000000);;
 11110  002652  0E80               	movlw	128
 11111  002654  EC4E  F014         	call	i2_lcdInst
 11112                           
 11113                           ;UI.c: 450: printf("LOG 1          <");
 11114  002658  0E02               	movlw	low STR_24
 11115  00265A  6E0D               	movwf	i2printf@f,c
 11116  00265C  0EFF               	movlw	high STR_24
 11117  00265E  6E0E               	movwf	i2printf@f+1,c
 11118  002660  ECAF  F004         	call	i2_printf	;wreg free
 11119                           
 11120                           ;UI.c: 451: lcdInst(0b11000000);;
 11121  002664  0EC0               	movlw	192
 11122  002666  EC4E  F014         	call	i2_lcdInst
 11123                           
 11124                           ;UI.c: 452: printf("LOG 2           ");
 11125  00266A  0E36               	movlw	low STR_25
 11126  00266C  6E0D               	movwf	i2printf@f,c
 11127  00266E  0EFE               	movlw	high STR_25
 11128  002670  6E0E               	movwf	i2printf@f+1,c
 11129  002672  ECAF  F004         	call	i2_printf	;wreg free
 11130  002676  0012               	return		;funcret
 11131  002678                     __end_of_change_state_to_logs_11:
 11132                           	opt stack 0
 11133                           pclatu	equ	0xFFB
 11134                           pclath	equ	0xFFA
 11135                           tblptru	equ	0xFF8
 11136                           tblptrh	equ	0xFF7
 11137                           tblptrl	equ	0xFF6
 11138                           tablat	equ	0xFF5
 11139                           prodh	equ	0xFF4
 11140                           prodl	equ	0xFF3
 11141                           intcon	equ	0xFF2
 11142                           intcon3	equ	0xFF0
 11143                           indf0	equ	0xFEF
 11144                           postinc0	equ	0xFEE
 11145                           fsr0h	equ	0xFEA
 11146                           fsr0l	equ	0xFE9
 11147                           wreg	equ	0xFE8
 11148                           postdec1	equ	0xFE5
 11149                           fsr1h	equ	0xFE2
 11150                           fsr1l	equ	0xFE1
 11151                           indf2	equ	0xFDF
 11152                           postinc2	equ	0xFDE
 11153                           postdec2	equ	0xFDD
 11154                           fsr2h	equ	0xFDA
 11155                           fsr2l	equ	0xFD9
 11156                           status	equ	0xFD8
 11157                           
 11158 ;; *************** function _dispLogs *****************
 11159 ;; Defined at:
 11160 ;;		line 401 in file "UI.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;  myLog           2    0[COMRAM] int 
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;		None
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      void 
 11167 ;; Registers used:
 11168 ;;		wreg, status,2
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11174 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11178 ;;Total ram usage:        2 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; This function calls:
 11181 ;;		Nothing
 11182 ;; This function is called by:
 11183 ;;		_updateMenu
 11184 ;; This function uses a non-reentrant model
 11185 ;;
 11186                           
 11187                           	psect	text55
 11188  002838                     __ptext55:
 11189                           	opt stack 0
 11190  002838                     _dispLogs:
 11191                           	opt stack 22
 11192                           
 11193                           ;UI.c: 402: logstate = 1;
 11194                           
 11195                           ;incstack = 0
 11196  002838  0E00               	movlw	0
 11197  00283A  0100               	movlb	0	; () banked
 11198  00283C  6FF0               	movwf	(_logstate+1)& (0+255),b
 11199  00283E  0E01               	movlw	1
 11200  002840  6FEF               	movwf	_logstate& (0+255),b
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;UI.c: 403: log = myLog;
 11204  002842  C001  F0ED         	movff	dispLogs@myLog,_log
 11205  002846  C002  F0EE         	movff	dispLogs@myLog+1,_log+1
 11206                           
 11207                           ; BSR set to: 0
 11208  00284A  0012               	return		;funcret
 11209  00284C                     __end_of_dispLogs:
 11210                           	opt stack 0
 11211                           pclatu	equ	0xFFB
 11212                           pclath	equ	0xFFA
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           intcon	equ	0xFF2
 11220                           intcon3	equ	0xFF0
 11221                           indf0	equ	0xFEF
 11222                           postinc0	equ	0xFEE
 11223                           fsr0h	equ	0xFEA
 11224                           fsr0l	equ	0xFE9
 11225                           wreg	equ	0xFE8
 11226                           postdec1	equ	0xFE5
 11227                           fsr1h	equ	0xFE2
 11228                           fsr1l	equ	0xFE1
 11229                           indf2	equ	0xFDF
 11230                           postinc2	equ	0xFDE
 11231                           postdec2	equ	0xFDD
 11232                           fsr2h	equ	0xFDA
 11233                           fsr2l	equ	0xFD9
 11234                           status	equ	0xFD8
 11235                           
 11236 ;; *************** function _printSortTimer *****************
 11237 ;; Defined at:
 11238 ;;		line 138 in file "sort.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;		None
 11241 ;; Auto vars:     Size  Location     Type
 11242 ;;  i               2   72[COMRAM] int 
 11243 ;;  curTime        14   44[COMRAM] int [7]
 11244 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11245 ;;  sec             2   66[COMRAM] int 
 11246 ;;  min             2   64[COMRAM] int 
 11247 ;;  hour            2   62[COMRAM] int 
 11248 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11249 ;;  start_sec       2   58[COMRAM] unsigned int 
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  1    wreg      void 
 11252 ;; Registers used:
 11253 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;Total ram usage:       33 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    3
 11266 ;; This function calls:
 11267 ;;		i2___lwdiv
 11268 ;;		i2___lwmod
 11269 ;;		i2___wmul
 11270 ;;		i2_getRTC
 11271 ;;		i2_lcdInst
 11272 ;;		i2_printf
 11273 ;; This function is called by:
 11274 ;;		_handler
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text56
 11279  001464                     __ptext56:
 11280                           	opt stack 0
 11281  001464                     _printSortTimer:
 11282                           	opt stack 20
 11283                           
 11284                           ;sort.c: 139: getRTC();
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;incstack = 0
 11288  001464  EC2F  F010         	call	i2_getRTC	;wreg free
 11289                           
 11290                           ;sort.c: 140: int curTime[7];
 11291                           ;sort.c: 141: for(int i = 0; i < 7; i++){
 11292  001468  0E00               	movlw	0
 11293  00146A  6E4A               	movwf	printSortTimer@i+1,c
 11294  00146C  0E00               	movlw	0
 11295  00146E  6E49               	movwf	printSortTimer@i,c
 11296  001470                     i2l5205:
 11297  001470  BE4A               	btfsc	printSortTimer@i+1,7,c
 11298  001472  D006               	goto	i2l5209
 11299  001474  504A               	movf	printSortTimer@i+1,w,c
 11300  001476  E131               	bnz	i2l5215
 11301  001478  0E07               	movlw	7
 11302  00147A  5C49               	subwf	printSortTimer@i,w,c
 11303  00147C  B0D8               	btfsc	status,0,c
 11304  00147E  D02D               	goto	i2l5215
 11305  001480                     i2l5209:
 11306                           
 11307                           ;sort.c: 142: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11308  001480  0ED4               	movlw	low _time
 11309  001482  2449               	addwf	printSortTimer@i,w,c
 11310  001484  6ED9               	movwf	fsr2l,c
 11311  001486  0E00               	movlw	high _time
 11312  001488  204A               	addwfc	printSortTimer@i+1,w,c
 11313  00148A  6EDA               	movwf	fsr2h,c
 11314  00148C  50DF               	movf	indf2,w,c
 11315  00148E  6E2A               	movwf	??_printSortTimer& (0+255),c
 11316  001490  3A2A               	swapf	??_printSortTimer,f,c
 11317  001492  0E0F               	movlw	15
 11318  001494  162A               	andwf	??_printSortTimer,f,c
 11319  001496  0E0F               	movlw	15
 11320  001498  162A               	andwf	??_printSortTimer,f,c
 11321  00149A  502A               	movf	??_printSortTimer,w,c
 11322  00149C  0D0A               	mullw	10
 11323  00149E  0ED4               	movlw	low _time
 11324  0014A0  2449               	addwf	printSortTimer@i,w,c
 11325  0014A2  6ED9               	movwf	fsr2l,c
 11326  0014A4  0E00               	movlw	high _time
 11327  0014A6  204A               	addwfc	printSortTimer@i+1,w,c
 11328  0014A8  6EDA               	movwf	fsr2h,c
 11329  0014AA  50DF               	movf	indf2,w,c
 11330  0014AC  0B0F               	andlw	15
 11331  0014AE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 11332  0014B0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 11333  0014B2  50F3               	movf	prodl,w,c
 11334  0014B4  262B               	addwf	??_printSortTimer+1,f,c
 11335  0014B6  50F4               	movf	prodh,w,c
 11336  0014B8  222C               	addwfc	??_printSortTimer+2,f,c
 11337  0014BA  90D8               	bcf	status,0,c
 11338  0014BC  3449               	rlcf	printSortTimer@i,w,c
 11339  0014BE  6ED9               	movwf	fsr2l,c
 11340  0014C0  344A               	rlcf	printSortTimer@i+1,w,c
 11341  0014C2  6EDA               	movwf	fsr2h,c
 11342  0014C4  0E2D               	movlw	low printSortTimer@curTime
 11343  0014C6  26D9               	addwf	fsr2l,f,c
 11344  0014C8  0E00               	movlw	high printSortTimer@curTime
 11345  0014CA  22DA               	addwfc	fsr2h,f,c
 11346  0014CC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 11347  0014D0  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 11348  0014D4  4A49               	infsnz	printSortTimer@i,f,c
 11349  0014D6  2A4A               	incf	printSortTimer@i+1,f,c
 11350  0014D8  D7CB               	goto	i2l5205
 11351  0014DA                     i2l5215:
 11352                           
 11353                           ;sort.c: 143: }
 11354                           ;sort.c: 144: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 11355  0014DA  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 11356  0014DE  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 11357  0014E2  0E00               	movlw	0
 11358  0014E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 11359  0014E6  0E3C               	movlw	60
 11360  0014E8  6E03               	movwf	i2___wmul@multiplicand,c
 11361  0014EA  ECA9  F013         	call	i2___wmul	;wreg free
 11362  0014EE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11363  0014F2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11364  0014F6  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 11365  0014FA  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 11366  0014FE  0E0E               	movlw	14
 11367  001500  6E04               	movwf	i2___wmul@multiplicand+1,c
 11368  001502  0E10               	movlw	16
 11369  001504  6E03               	movwf	i2___wmul@multiplicand,c
 11370  001506  ECA9  F013         	call	i2___wmul	;wreg free
 11371  00150A  5001               	movf	?i2___wmul,w,c
 11372  00150C  262A               	addwf	??_printSortTimer,f,c
 11373  00150E  5002               	movf	?i2___wmul+1,w,c
 11374  001510  222B               	addwfc	??_printSortTimer+1,f,c
 11375  001512  0101               	movlb	1	; () banked
 11376  001514  5100               	movf	_startTime& (0+255),w,b
 11377  001516  242A               	addwf	??_printSortTimer,w,c
 11378  001518  6E3B               	movwf	printSortTimer@start_sec,c
 11379  00151A  0101               	movlb	1	; () banked
 11380  00151C  5101               	movf	(_startTime+1)& (0+255),w,b
 11381  00151E  202B               	addwfc	??_printSortTimer+1,w,c
 11382  001520  6E3C               	movwf	printSortTimer@start_sec+1,c
 11383                           
 11384                           ;sort.c: 145: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 11385  001522  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 11386  001526  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 11387  00152A  0E00               	movlw	0
 11388  00152C  6E04               	movwf	i2___wmul@multiplicand+1,c
 11389  00152E  0E3C               	movlw	60
 11390  001530  6E03               	movwf	i2___wmul@multiplicand,c
 11391  001532  ECA9  F013         	call	i2___wmul	;wreg free
 11392  001536  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11393  00153A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11394  00153E  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 11395  001542  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 11396  001546  0E0E               	movlw	14
 11397  001548  6E04               	movwf	i2___wmul@multiplicand+1,c
 11398  00154A  0E10               	movlw	16
 11399  00154C  6E03               	movwf	i2___wmul@multiplicand,c
 11400  00154E  ECA9  F013         	call	i2___wmul	;wreg free
 11401  001552  5001               	movf	?i2___wmul,w,c
 11402  001554  262A               	addwf	??_printSortTimer,f,c
 11403  001556  5002               	movf	?i2___wmul+1,w,c
 11404  001558  222B               	addwfc	??_printSortTimer+1,f,c
 11405  00155A  502D               	movf	printSortTimer@curTime,w,c
 11406  00155C  242A               	addwf	??_printSortTimer,w,c
 11407  00155E  6E3D               	movwf	printSortTimer@cur_sec,c
 11408  001560  502E               	movf	printSortTimer@curTime+1,w,c
 11409  001562  202B               	addwfc	??_printSortTimer+1,w,c
 11410  001564  6E3E               	movwf	printSortTimer@cur_sec+1,c
 11411                           
 11412                           ;sort.c: 146: unsigned int timeDiff = cur_sec - start_sec;
 11413  001566  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 11414  00156A  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 11415  00156E  1E2A               	comf	??_printSortTimer,f,c
 11416  001570  1E2B               	comf	??_printSortTimer+1,f,c
 11417  001572  4A2A               	infsnz	??_printSortTimer,f,c
 11418  001574  2A2B               	incf	??_printSortTimer+1,f,c
 11419  001576  503D               	movf	printSortTimer@cur_sec,w,c
 11420  001578  242A               	addwf	??_printSortTimer,w,c
 11421  00157A  6E47               	movwf	printSortTimer@timeDiff,c
 11422  00157C  503E               	movf	printSortTimer@cur_sec+1,w,c
 11423  00157E  202B               	addwfc	??_printSortTimer+1,w,c
 11424  001580  6E48               	movwf	printSortTimer@timeDiff+1,c
 11425                           
 11426                           ;sort.c: 148: total_time = timeDiff;
 11427  001582  C047  F0F1         	movff	printSortTimer@timeDiff,_total_time
 11428  001586  C048  F0F2         	movff	printSortTimer@timeDiff+1,_total_time+1
 11429                           
 11430                           ;sort.c: 150: if(timeDiff >= 179){
 11431  00158A  5048               	movf	printSortTimer@timeDiff+1,w,c
 11432  00158C  E104               	bnz	i2u441_40
 11433  00158E  0EB3               	movlw	179
 11434  001590  5C47               	subwf	printSortTimer@timeDiff,w,c
 11435  001592  A0D8               	btfss	status,0,c
 11436  001594  D003               	goto	i2l5225
 11437  001596                     i2u441_40:
 11438                           
 11439                           ;sort.c: 151: machine_state = DoneSorting_state;
 11440  001596  0E02               	movlw	2
 11441  001598  0100               	movlb	0	; () banked
 11442  00159A  6FF4               	movwf	_machine_state& (0+255),b
 11443  00159C                     i2l5225:
 11444                           
 11445                           ;sort.c: 153: }
 11446                           ;sort.c: 155: int hour = timeDiff / 3600;
 11447  00159C  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 11448  0015A0  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 11449  0015A4  0E0E               	movlw	14
 11450  0015A6  6E09               	movwf	i2___lwdiv@divisor+1,c
 11451  0015A8  0E10               	movlw	16
 11452  0015AA  6E08               	movwf	i2___lwdiv@divisor,c
 11453  0015AC  EC28  F011         	call	i2___lwdiv	;wreg free
 11454  0015B0  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 11455  0015B4  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 11456                           
 11457                           ;sort.c: 156: int min = (timeDiff % 3600) / 60;
 11458  0015B8  0E0E               	movlw	14
 11459  0015BA  6E04               	movwf	i2___lwmod@divisor+1,c
 11460  0015BC  0E10               	movlw	16
 11461  0015BE  6E03               	movwf	i2___lwmod@divisor,c
 11462  0015C0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11463  0015C4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11464  0015C8  ECBF  F011         	call	i2___lwmod	;wreg free
 11465  0015CC  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 11466  0015D0  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 11467  0015D4  0E00               	movlw	0
 11468  0015D6  6E09               	movwf	i2___lwdiv@divisor+1,c
 11469  0015D8  0E3C               	movlw	60
 11470  0015DA  6E08               	movwf	i2___lwdiv@divisor,c
 11471  0015DC  EC28  F011         	call	i2___lwdiv	;wreg free
 11472  0015E0  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 11473  0015E4  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 11474                           
 11475                           ;sort.c: 157: int sec = (timeDiff % 3600) % 60;
 11476  0015E8  0E0E               	movlw	14
 11477  0015EA  6E04               	movwf	i2___lwmod@divisor+1,c
 11478  0015EC  0E10               	movlw	16
 11479  0015EE  6E03               	movwf	i2___lwmod@divisor,c
 11480  0015F0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11481  0015F4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11482  0015F8  ECBF  F011         	call	i2___lwmod	;wreg free
 11483  0015FC  C001  F045         	movff	?i2___lwmod,_printSortTimer$2028
 11484  001600  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2028+1
 11485                           
 11486                           ;sort.c: 157: int sec = (timeDiff % 3600) % 60;
 11487  001604  C045  F001         	movff	_printSortTimer$2028,i2___lwmod@dividend
 11488  001608  C046  F002         	movff	_printSortTimer$2028+1,i2___lwmod@dividend+1
 11489  00160C  0E00               	movlw	0
 11490  00160E  6E04               	movwf	i2___lwmod@divisor+1,c
 11491  001610  0E3C               	movlw	60
 11492  001612  6E03               	movwf	i2___lwmod@divisor,c
 11493  001614  ECBF  F011         	call	i2___lwmod	;wreg free
 11494  001618  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 11495  00161C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 11496                           
 11497                           ;sort.c: 159: lcdInst(0b10000000);;
 11498  001620  0E80               	movlw	128
 11499  001622  EC4E  F014         	call	i2_lcdInst
 11500                           
 11501                           ;sort.c: 160: printf("Sorting...");
 11502  001626  0EA9               	movlw	low STR_49
 11503  001628  6E0D               	movwf	i2printf@f,c
 11504  00162A  0EFF               	movlw	high STR_49
 11505  00162C  6E0E               	movwf	i2printf@f+1,c
 11506  00162E  ECAF  F004         	call	i2_printf	;wreg free
 11507                           
 11508                           ;sort.c: 161: lcdInst(0b11000000);;
 11509  001632  0EC0               	movlw	192
 11510  001634  EC4E  F014         	call	i2_lcdInst
 11511                           
 11512                           ;sort.c: 162: printf("Time: %02d:%02d:%02d", hour, min, sec);
 11513  001638  0EEC               	movlw	low STR_2
 11514  00163A  6E0D               	movwf	i2printf@f,c
 11515  00163C  0EFD               	movlw	high STR_2
 11516  00163E  6E0E               	movwf	i2printf@f+1,c
 11517  001640  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 11518  001644  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 11519  001648  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 11520  00164C  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 11521  001650  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 11522  001654  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 11523  001658  ECAF  F004         	call	i2_printf	;wreg free
 11524  00165C  0012               	return		;funcret
 11525  00165E                     __end_of_printSortTimer:
 11526                           	opt stack 0
 11527                           pclatu	equ	0xFFB
 11528                           pclath	equ	0xFFA
 11529                           tblptru	equ	0xFF8
 11530                           tblptrh	equ	0xFF7
 11531                           tblptrl	equ	0xFF6
 11532                           tablat	equ	0xFF5
 11533                           prodh	equ	0xFF4
 11534                           prodl	equ	0xFF3
 11535                           intcon	equ	0xFF2
 11536                           intcon3	equ	0xFF0
 11537                           indf0	equ	0xFEF
 11538                           postinc0	equ	0xFEE
 11539                           fsr0h	equ	0xFEA
 11540                           fsr0l	equ	0xFE9
 11541                           wreg	equ	0xFE8
 11542                           postdec1	equ	0xFE5
 11543                           fsr1h	equ	0xFE2
 11544                           fsr1l	equ	0xFE1
 11545                           indf2	equ	0xFDF
 11546                           postinc2	equ	0xFDE
 11547                           postdec2	equ	0xFDD
 11548                           fsr2h	equ	0xFDA
 11549                           fsr2l	equ	0xFD9
 11550                           status	equ	0xFD8
 11551                           
 11552 ;; *************** function i2_printf *****************
 11553 ;; Defined at:
 11554 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11555 ;; Parameters:    Size  Location     Type
 11556 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11557 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 11558 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 11559 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 11560 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 11561 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 11562 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 11563 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 11564 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 11565 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 11566 ;;		 -> STR_2(21), STR_1(14), 
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;  printf          4    0        struct .
 11569 ;;  printf          2   39[COMRAM] int 
 11570 ;;  printf          2   35[COMRAM] unsigned int 
 11571 ;;  printf          2   33[COMRAM] unsigned int 
 11572 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 11573 ;;		 -> STR_51(7), printRTC@month(4), 
 11574 ;;  printf          2   29[COMRAM] PTR void [1]
 11575 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11576 ;;  printf          1   38[COMRAM] char 
 11577 ;;  printf          1   37[COMRAM] unsigned char 
 11578 ;;  printf          1   28[COMRAM] char 
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  2   12[COMRAM] int 
 11581 ;; Registers used:
 11582 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11588 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;Total ram usage:       29 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    2
 11595 ;; This function calls:
 11596 ;;		i2___lwdiv
 11597 ;;		i2___lwmod
 11598 ;;		i2___wmul
 11599 ;;		i2_isdigit
 11600 ;;		i2_putch
 11601 ;; This function is called by:
 11602 ;;		_change_state_to_menu_11
 11603 ;;		_change_state_to_menu_12
 11604 ;;		_change_state_to_menu_22
 11605 ;;		_change_state_to_menu_23
 11606 ;;		_change_state_to_logs_11
 11607 ;;		_change_state_to_logs_12
 11608 ;;		_change_state_to_logs_22
 11609 ;;		_change_state_to_logs_23
 11610 ;;		_change_state_to_logs_33
 11611 ;;		_change_state_to_logs_34
 11612 ;;		_printSortTimer
 11613 ;;		i2_change_state_to_menu_start
 11614 ;;		i2_printRTC
 11615 ;; This function uses a non-reentrant model
 11616 ;;
 11617                           
 11618                           	psect	text57
 11619  00095E                     __ptext57:
 11620                           	opt stack 0
 11621  00095E                     i2_printf:
 11622                           	opt stack 19
 11623                           
 11624                           ;doprnt.c: 466: va_list ap;
 11625                           ;doprnt.c: 499: signed char c;
 11626                           ;doprnt.c: 501: int width;
 11627                           ;doprnt.c: 506: signed char prec;
 11628                           ;doprnt.c: 508: unsigned char flag;
 11629                           ;doprnt.c: 523: union {
 11630                           ;doprnt.c: 524: unsigned long vd;
 11631                           ;doprnt.c: 525: double integ;
 11632                           ;doprnt.c: 526: } tmpval;
 11633                           ;doprnt.c: 528: unsigned int val;
 11634                           ;doprnt.c: 529: unsigned len;
 11635                           ;doprnt.c: 530: const char * cp;
 11636                           ;doprnt.c: 533: *ap = __va_start();
 11637                           
 11638                           ;incstack = 0
 11639  00095E  0E0F               	movlw	low (?i2_printf+2)
 11640  000960  6E1E               	movwf	i2printf@ap,c
 11641  000962  0E00               	movlw	high (?i2_printf+2)
 11642  000964  6E1F               	movwf	i2printf@ap+1,c
 11643                           
 11644                           ;doprnt.c: 536: while(c = *f++) {
 11645  000966  D190               	goto	i2l4131
 11646  000968                     i2l4007:
 11647                           
 11648                           ;doprnt.c: 538: if(c != '%')
 11649  000968  0E25               	movlw	37
 11650  00096A  1827               	xorwf	i2printf@c,w,c
 11651  00096C  B4D8               	btfsc	status,2,c
 11652  00096E  D004               	goto	i2l4011
 11653                           
 11654                           ;doprnt.c: 540: {
 11655                           ;doprnt.c: 541: (putch(c) );
 11656  000970  5027               	movf	i2printf@c,w,c
 11657  000972  EC48  F014         	call	i2_putch
 11658                           
 11659                           ;doprnt.c: 542: continue;
 11660  000976  D188               	goto	i2l4131
 11661  000978                     i2l4011:
 11662                           
 11663                           ;doprnt.c: 543: }
 11664                           ;doprnt.c: 546: width = 0;
 11665  000978  0E00               	movlw	0
 11666  00097A  6E29               	movwf	i2printf@width+1,c
 11667  00097C  0E00               	movlw	0
 11668  00097E  6E28               	movwf	i2printf@width,c
 11669                           
 11670                           ;doprnt.c: 548: flag = 0;
 11671  000980  0E00               	movlw	0
 11672  000982  6E26               	movwf	i2printf@flag,c
 11673                           
 11674                           ;doprnt.c: 551: switch(*f) {
 11675                           
 11676                           ;doprnt.c: 550: for(;;) {
 11677  000984  D003               	goto	i2l4017
 11678  000986                     i2l4013:
 11679                           
 11680                           ;doprnt.c: 580: flag |= 0x04;
 11681  000986  8426               	bsf	i2printf@flag,2,c
 11682                           
 11683                           ;doprnt.c: 581: f++;
 11684  000988  4A0D               	infsnz	i2printf@f,f,c
 11685  00098A  2A0E               	incf	i2printf@f+1,f,c
 11686  00098C                     i2l4017:
 11687  00098C  C00D  FFF6         	movff	i2printf@f,tblptrl
 11688  000990  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11689  000994                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11690  000994  6AF8               	clrf	tblptru,c
 11691  000996                     	endif
 11692  000996                     	if	0	;tblptru may be non-zero
 11693  000996                     	endif
 11694  000996  0008               	tblrd		*
 11695  000998  50F5               	movf	tablat,w,c
 11696                           
 11697                           ; Switch size 1, requested type "space"
 11698                           ; Number of cases is 1, Range of values is 48 to 48
 11699                           ; switch strategies available:
 11700                           ; Name         Instructions Cycles
 11701                           ; simple_byte            4     3 (average)
 11702                           ;	Chosen strategy is simple_byte
 11703  00099A  0A30               	xorlw	48	; case 48
 11704  00099C  B4D8               	btfsc	status,2,c
 11705  00099E  D7F3               	goto	i2l4013
 11706                           
 11707                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11708                           
 11709                           ;doprnt.c: 586: }
 11710                           
 11711                           ;doprnt.c: 585: break;
 11712  0009A0  C00D  FFF6         	movff	i2printf@f,tblptrl
 11713  0009A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11714  0009A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11715  0009A8  6AF8               	clrf	tblptru,c
 11716  0009AA                     	endif
 11717  0009AA                     	if	0	;tblptru may be non-zero
 11718  0009AA                     	endif
 11719  0009AA  0008               	tblrd		*
 11720  0009AC  50F5               	movf	tablat,w,c
 11721  0009AE  ECE0  F013         	call	i2_isdigit
 11722  0009B2  A0D8               	btfss	status,0,c
 11723  0009B4  D0A4               	goto	i2l4063
 11724                           
 11725                           ;doprnt.c: 598: width = 0;
 11726  0009B6  0E00               	movlw	0
 11727  0009B8  6E29               	movwf	i2printf@width+1,c
 11728  0009BA  0E00               	movlw	0
 11729  0009BC  6E28               	movwf	i2printf@width,c
 11730  0009BE                     i2l4023:
 11731                           
 11732                           ;doprnt.c: 600: width *= 10;
 11733  0009BE  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11734  0009C2  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11735  0009C6  0E00               	movlw	0
 11736  0009C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 11737  0009CA  0E0A               	movlw	10
 11738  0009CC  6E03               	movwf	i2___wmul@multiplicand,c
 11739  0009CE  ECA9  F013         	call	i2___wmul	;wreg free
 11740  0009D2  C001  F028         	movff	?i2___wmul,i2printf@width
 11741  0009D6  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11742                           
 11743                           ;doprnt.c: 601: width += *f++ - '0';
 11744  0009DA  0ED0               	movlw	208
 11745  0009DC  6E19               	movwf	??i2_printf& (0+255),c
 11746  0009DE  0EFF               	movlw	255
 11747  0009E0  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11748  0009E2  C00D  FFF6         	movff	i2printf@f,tblptrl
 11749  0009E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11750  0009EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11751  0009EA  6AF8               	clrf	tblptru,c
 11752  0009EC                     	endif
 11753  0009EC                     	if	0	;tblptru may be non-zero
 11754  0009EC                     	endif
 11755  0009EC  0008               	tblrd		*
 11756  0009EE  50F5               	movf	tablat,w,c
 11757  0009F0  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11758  0009F2  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11759  0009F4  5019               	movf	??i2_printf,w,c
 11760  0009F6  261B               	addwf	??i2_printf+2,f,c
 11761  0009F8  501A               	movf	??i2_printf+1,w,c
 11762  0009FA  221C               	addwfc	??i2_printf+3,f,c
 11763  0009FC  501B               	movf	??i2_printf+2,w,c
 11764  0009FE  2628               	addwf	i2printf@width,f,c
 11765  000A00  501C               	movf	??i2_printf+3,w,c
 11766  000A02  2229               	addwfc	i2printf@width+1,f,c
 11767  000A04  4A0D               	infsnz	i2printf@f,f,c
 11768  000A06  2A0E               	incf	i2printf@f+1,f,c
 11769                           
 11770                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11771  000A08  C00D  FFF6         	movff	i2printf@f,tblptrl
 11772  000A0C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11773  000A10                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11774  000A10  6AF8               	clrf	tblptru,c
 11775  000A12                     	endif
 11776  000A12                     	if	0	;tblptru may be non-zero
 11777  000A12                     	endif
 11778  000A12  0008               	tblrd		*
 11779  000A14  50F5               	movf	tablat,w,c
 11780  000A16  ECE0  F013         	call	i2_isdigit
 11781  000A1A  A0D8               	btfss	status,0,c
 11782  000A1C  D070               	goto	i2l4063
 11783  000A1E  D7CF               	goto	i2l4023
 11784  000A20                     i2l4031:
 11785                           
 11786                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11787  000A20  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11788  000A24  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11789  000A28  CFDE F020          	movff	postinc2,i2printf@cp
 11790  000A2C  CFDD F021          	movff	postdec2,i2printf@cp+1
 11791  000A30  0E02               	movlw	2
 11792  000A32  261E               	addwf	i2printf@ap,f,c
 11793  000A34  0E00               	movlw	0
 11794  000A36  221F               	addwfc	i2printf@ap+1,f,c
 11795                           
 11796                           ;doprnt.c: 740: if(!cp)
 11797  000A38  5020               	movf	i2printf@cp,w,c
 11798  000A3A  1021               	iorwf	i2printf@cp+1,w,c
 11799  000A3C  A4D8               	btfss	status,2,c
 11800  000A3E  D004               	goto	i2l4039
 11801                           
 11802                           ;doprnt.c: 741: cp = "(null)";
 11803  000A40  0EBE               	movlw	low STR_51
 11804  000A42  6E20               	movwf	i2printf@cp,c
 11805  000A44  0EFF               	movlw	high STR_51
 11806  000A46  6E21               	movwf	i2printf@cp+1,c
 11807  000A48                     i2l4039:
 11808                           
 11809                           ;doprnt.c: 745: len = 0;
 11810  000A48  0E00               	movlw	0
 11811  000A4A  6E25               	movwf	i2printf@len+1,c
 11812  000A4C  0E00               	movlw	0
 11813  000A4E  6E24               	movwf	i2printf@len,c
 11814                           
 11815                           ;doprnt.c: 746: while(cp[len])
 11816  000A50  D002               	goto	i2l4043
 11817  000A52                     i2l4041:
 11818                           
 11819                           ;doprnt.c: 747: len++;
 11820  000A52  4A24               	infsnz	i2printf@len,f,c
 11821  000A54  2A25               	incf	i2printf@len+1,f,c
 11822  000A56                     i2l4043:
 11823  000A56  5024               	movf	i2printf@len,w,c
 11824  000A58  2420               	addwf	i2printf@cp,w,c
 11825  000A5A  6E19               	movwf	??i2_printf& (0+255),c
 11826  000A5C  5025               	movf	i2printf@len+1,w,c
 11827  000A5E  2021               	addwfc	i2printf@cp+1,w,c
 11828  000A60  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11829  000A62  C019  FFF6         	movff	??i2_printf,tblptrl
 11830  000A66  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11831  000A6A  0E00               	movlw	low (__mediumconst shr (0+16))
 11832  000A6C  6EF8               	movwf	tblptru,c
 11833  000A6E  0E0F               	movlw	(high __ramtop+-1)
 11834  000A70  64F7               	cpfsgt	tblptrh,c
 11835  000A72  D003               	bra	i2u288_47
 11836  000A74  0008               	tblrd		*
 11837  000A76  50F5               	movf	tablat,w,c
 11838  000A78  D005               	bra	i2u288_40
 11839  000A7A                     i2u288_47:
 11840  000A7A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11841  000A7E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11842  000A82  50EF               	movf	indf0,w,c
 11843  000A84                     i2u288_40:
 11844  000A84  0900               	iorlw	0
 11845  000A86  A4D8               	btfss	status,2,c
 11846  000A88  D7E4               	goto	i2l4041
 11847                           
 11848                           ;doprnt.c: 757: if(width > len)
 11849  000A8A  5028               	movf	i2printf@width,w,c
 11850  000A8C  5C24               	subwf	i2printf@len,w,c
 11851  000A8E  5029               	movf	i2printf@width+1,w,c
 11852  000A90  5825               	subwfb	i2printf@len+1,w,c
 11853  000A92  B0D8               	btfsc	status,0,c
 11854  000A94  D005               	goto	i2l4049
 11855                           
 11856                           ;doprnt.c: 758: width -= len;
 11857  000A96  5024               	movf	i2printf@len,w,c
 11858  000A98  5E28               	subwf	i2printf@width,f,c
 11859  000A9A  5025               	movf	i2printf@len+1,w,c
 11860  000A9C  5A29               	subwfb	i2printf@width+1,f,c
 11861  000A9E  D008               	goto	i2l4053
 11862  000AA0                     i2l4049:
 11863                           
 11864                           ;doprnt.c: 759: else
 11865                           ;doprnt.c: 760: width = 0;
 11866  000AA0  0E00               	movlw	0
 11867  000AA2  6E29               	movwf	i2printf@width+1,c
 11868  000AA4  0E00               	movlw	0
 11869  000AA6  6E28               	movwf	i2printf@width,c
 11870                           
 11871                           ;doprnt.c: 764: while(width--)
 11872  000AA8  D003               	goto	i2l4053
 11873  000AAA                     i2l4051:
 11874                           
 11875                           ;doprnt.c: 765: (putch(' ') );
 11876  000AAA  0E20               	movlw	32
 11877  000AAC  EC48  F014         	call	i2_putch
 11878  000AB0                     i2l4053:
 11879  000AB0  0628               	decf	i2printf@width,f,c
 11880  000AB2  A0D8               	btfss	status,0,c
 11881  000AB4  0629               	decf	i2printf@width+1,f,c
 11882  000AB6  2828               	incf	i2printf@width,w,c
 11883  000AB8  E1F8               	bnz	i2l4051
 11884  000ABA  2829               	incf	i2printf@width+1,w,c
 11885  000ABC  B4D8               	btfsc	status,2,c
 11886  000ABE  D016               	goto	i2l4059
 11887  000AC0  D7F4               	goto	i2l4051
 11888  000AC2                     i2l4055:
 11889                           
 11890                           ;doprnt.c: 768: (putch(*cp++) );
 11891  000AC2  C020  FFF6         	movff	i2printf@cp,tblptrl
 11892  000AC6  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 11893  000ACA  0E00               	movlw	low (__mediumconst shr (0+16))
 11894  000ACC  6EF8               	movwf	tblptru,c
 11895  000ACE  0E0F               	movlw	(high __ramtop+-1)
 11896  000AD0  64F7               	cpfsgt	tblptrh,c
 11897  000AD2  D003               	bra	i2u292_47
 11898  000AD4  0008               	tblrd		*
 11899  000AD6  50F5               	movf	tablat,w,c
 11900  000AD8  D005               	bra	i2u292_40
 11901  000ADA                     i2u292_47:
 11902  000ADA  CFF6 FFE9          	movff	tblptrl,fsr0l
 11903  000ADE  CFF7 FFEA          	movff	tblptrh,fsr0h
 11904  000AE2  50EF               	movf	indf0,w,c
 11905  000AE4                     i2u292_40:
 11906  000AE4  EC48  F014         	call	i2_putch
 11907  000AE8  4A20               	infsnz	i2printf@cp,f,c
 11908  000AEA  2A21               	incf	i2printf@cp+1,f,c
 11909  000AEC                     i2l4059:
 11910  000AEC  0624               	decf	i2printf@len,f,c
 11911  000AEE  A0D8               	btfss	status,0,c
 11912  000AF0  0625               	decf	i2printf@len+1,f,c
 11913  000AF2  2824               	incf	i2printf@len,w,c
 11914  000AF4  E1E6               	bnz	i2l4055
 11915  000AF6  2825               	incf	i2printf@len+1,w,c
 11916  000AF8  B4D8               	btfsc	status,2,c
 11917  000AFA  D0C6               	goto	i2l4131
 11918  000AFC  D7E2               	goto	i2l4055
 11919  000AFE                     i2l4063:
 11920  000AFE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11921  000B02  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11922  000B06  4A0D               	infsnz	i2printf@f,f,c
 11923  000B08  2A0E               	incf	i2printf@f+1,f,c
 11924  000B0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11925  000B0A  6AF8               	clrf	tblptru,c
 11926  000B0C                     	endif
 11927  000B0C                     	if	0	;tblptru may be non-zero
 11928  000B0C                     	endif
 11929  000B0C  0008               	tblrd		*
 11930  000B0E  CFF5 F027          	movff	tablat,i2printf@c
 11931  000B12  5027               	movf	i2printf@c,w,c
 11932                           
 11933                           ; Switch size 1, requested type "space"
 11934                           ; Number of cases is 4, Range of values is 0 to 115
 11935                           ; switch strategies available:
 11936                           ; Name         Instructions Cycles
 11937                           ; simple_byte           13     7 (average)
 11938                           ;	Chosen strategy is simple_byte
 11939  000B14  0A00               	xorlw	0	; case 0
 11940  000B16  B4D8               	btfsc	status,2,c
 11941  000B18  0012               	return	
 11942  000B1A  0A64               	xorlw	100	; case 100
 11943  000B1C  B4D8               	btfsc	status,2,c
 11944  000B1E  D007               	goto	i2l4065
 11945  000B20  0A0D               	xorlw	13	; case 105
 11946  000B22  B4D8               	btfsc	status,2,c
 11947  000B24  D004               	goto	i2l4065
 11948  000B26  0A1A               	xorlw	26	; case 115
 11949  000B28  B4D8               	btfsc	status,2,c
 11950  000B2A  D77A               	goto	i2l4031
 11951  000B2C  D0AD               	goto	i2l4131
 11952  000B2E                     i2l4065:
 11953                           
 11954                           ;doprnt.c: 1253: {
 11955                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11956  000B2E  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11957  000B32  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11958  000B36  CFDE F022          	movff	postinc2,i2printf@val
 11959  000B3A  CFDD F023          	movff	postdec2,i2printf@val+1
 11960  000B3E  0E02               	movlw	2
 11961  000B40  261E               	addwf	i2printf@ap,f,c
 11962  000B42  0E00               	movlw	0
 11963  000B44  221F               	addwfc	i2printf@ap+1,f,c
 11964                           
 11965                           ;doprnt.c: 1261: if((int)val < 0) {
 11966  000B46  AE23               	btfss	i2printf@val+1,7,c
 11967  000B48  D006               	goto	i2l4075
 11968                           
 11969                           ;doprnt.c: 1262: flag |= 0x03;
 11970  000B4A  0E03               	movlw	3
 11971  000B4C  1226               	iorwf	i2printf@flag,f,c
 11972                           
 11973                           ;doprnt.c: 1263: val = -val;
 11974  000B4E  6C22               	negf	i2printf@val,c
 11975  000B50  1E23               	comf	i2printf@val+1,f,c
 11976  000B52  B0D8               	btfsc	status,0,c
 11977  000B54  2A23               	incf	i2printf@val+1,f,c
 11978  000B56                     i2l4075:
 11979                           
 11980                           ;doprnt.c: 1264: }
 11981                           ;doprnt.c: 1266: }
 11982                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11983  000B56  0E01               	movlw	1
 11984  000B58  6E27               	movwf	i2printf@c,c
 11985  000B5A                     i2l4077:
 11986  000B5A  0E05               	movlw	5
 11987  000B5C  1827               	xorwf	i2printf@c,w,c
 11988  000B5E  B4D8               	btfsc	status,2,c
 11989  000B60  D015               	goto	i2l4089
 11990                           
 11991                           ;doprnt.c: 1306: if(val < dpowers[c])
 11992  000B62  5027               	movf	i2printf@c,w,c
 11993  000B64  0D02               	mullw	2
 11994  000B66  0ECA               	movlw	low _dpowers
 11995  000B68  24F3               	addwf	prodl,w,c
 11996  000B6A  6EF6               	movwf	tblptrl,c
 11997  000B6C  0EFD               	movlw	high _dpowers
 11998  000B6E  20F4               	addwfc	prodh,w,c
 11999  000B70  6EF7               	movwf	tblptrh,c
 12000  000B72                     	if	1	;There are 3 active tblptr bytes
 12001  000B72  6AF8               	clrf	tblptru,c
 12002  000B74  0E00               	movlw	low (__mediumconst shr (0+16))
 12003  000B76  22F8               	addwfc	tblptru,f,c
 12004  000B78                     	endif
 12005  000B78  0009               	tblrd		*+
 12006  000B7A  50F5               	movf	tablat,w,c
 12007  000B7C  5C22               	subwf	i2printf@val,w,c
 12008  000B7E  0009               	tblrd		*+
 12009  000B80  50F5               	movf	tablat,w,c
 12010  000B82  5823               	subwfb	i2printf@val+1,w,c
 12011  000B84  A0D8               	btfss	status,0,c
 12012  000B86  D002               	goto	i2l4089
 12013                           
 12014                           ;doprnt.c: 1307: break;
 12015  000B88  2A27               	incf	i2printf@c,f,c
 12016  000B8A  D7E7               	goto	i2l4077
 12017  000B8C                     i2l4089:
 12018                           
 12019                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12020  000B8C  5028               	movf	i2printf@width,w,c
 12021  000B8E  1029               	iorwf	i2printf@width+1,w,c
 12022  000B90  B4D8               	btfsc	status,2,c
 12023  000B92  D009               	goto	i2l4095
 12024  000B94  C026  F019         	movff	i2printf@flag,??i2_printf
 12025  000B98  0E03               	movlw	3
 12026  000B9A  1619               	andwf	??i2_printf,f,c
 12027  000B9C  B4D8               	btfsc	status,2,c
 12028  000B9E  D003               	goto	i2l4095
 12029                           
 12030                           ;doprnt.c: 1346: width--;
 12031  000BA0  0628               	decf	i2printf@width,f,c
 12032  000BA2  A0D8               	btfss	status,0,c
 12033  000BA4  0629               	decf	i2printf@width+1,f,c
 12034  000BA6                     i2l4095:
 12035                           
 12036                           ;doprnt.c: 1381: if(width > c)
 12037  000BA6  0E80               	movlw	128
 12038  000BA8  BE27               	btfsc	i2printf@c,7,c
 12039  000BAA  0E7F               	movlw	127
 12040  000BAC  6E19               	movwf	??i2_printf& (0+255),c
 12041  000BAE  5028               	movf	i2printf@width,w,c
 12042  000BB0  5C27               	subwf	i2printf@c,w,c
 12043  000BB2  5029               	movf	i2printf@width+1,w,c
 12044  000BB4  0A80               	xorlw	128
 12045  000BB6  5819               	subwfb	??i2_printf& (0+255),w,c
 12046  000BB8  B0D8               	btfsc	status,0,c
 12047  000BBA  D007               	goto	i2l4099
 12048                           
 12049                           ;doprnt.c: 1382: width -= c;
 12050  000BBC  5027               	movf	i2printf@c,w,c
 12051  000BBE  5E28               	subwf	i2printf@width,f,c
 12052  000BC0  0E00               	movlw	0
 12053  000BC2  BE27               	btfsc	i2printf@c,7,c
 12054  000BC4  0EFF               	movlw	255
 12055  000BC6  5A29               	subwfb	i2printf@width+1,f,c
 12056  000BC8  D004               	goto	i2l4101
 12057  000BCA                     i2l4099:
 12058                           
 12059                           ;doprnt.c: 1383: else
 12060                           ;doprnt.c: 1384: width = 0;
 12061  000BCA  0E00               	movlw	0
 12062  000BCC  6E29               	movwf	i2printf@width+1,c
 12063  000BCE  0E00               	movlw	0
 12064  000BD0  6E28               	movwf	i2printf@width,c
 12065  000BD2                     i2l4101:
 12066                           
 12067                           ;doprnt.c: 1387: if(flag & 0x04) {
 12068  000BD2  A426               	btfss	i2printf@flag,2,c
 12069  000BD4  D014               	goto	i2l4113
 12070                           
 12071                           ;doprnt.c: 1392: if(flag & 0x03)
 12072  000BD6  C026  F019         	movff	i2printf@flag,??i2_printf
 12073  000BDA  0E03               	movlw	3
 12074  000BDC  1619               	andwf	??i2_printf,f,c
 12075  000BDE  B4D8               	btfsc	status,2,c
 12076  000BE0  D003               	goto	i2l4107
 12077                           
 12078                           ;doprnt.c: 1393: (putch('-') );
 12079  000BE2  0E2D               	movlw	45
 12080  000BE4  EC48  F014         	call	i2_putch
 12081  000BE8                     i2l4107:
 12082                           
 12083                           ;doprnt.c: 1415: if(width)
 12084  000BE8  5028               	movf	i2printf@width,w,c
 12085  000BEA  1029               	iorwf	i2printf@width+1,w,c
 12086  000BEC  B4D8               	btfsc	status,2,c
 12087  000BEE  D01E               	goto	i2l4123
 12088                           
 12089                           ;doprnt.c: 1417: (putch('0') );
 12090                           
 12091                           ;doprnt.c: 1416: do
 12092  000BF0  0E30               	movlw	48
 12093  000BF2  EC48  F014         	call	i2_putch
 12094                           
 12095                           ;doprnt.c: 1418: while(--width);
 12096  000BF6  0628               	decf	i2printf@width,f,c
 12097  000BF8  A0D8               	btfss	status,0,c
 12098  000BFA  0629               	decf	i2printf@width+1,f,c
 12099  000BFC  D7F5               	goto	i2l4107
 12100  000BFE                     i2l4113:
 12101                           
 12102                           ;doprnt.c: 1422: {
 12103                           ;doprnt.c: 1424: if(width
 12104                           ;doprnt.c: 1428: )
 12105  000BFE  5028               	movf	i2printf@width,w,c
 12106  000C00  1029               	iorwf	i2printf@width+1,w,c
 12107  000C02  B4D8               	btfsc	status,2,c
 12108  000C04  D00A               	goto	i2l4119
 12109  000C06                     i2l4115:
 12110                           
 12111                           ;doprnt.c: 1430: (putch(' ') );
 12112  000C06  0E20               	movlw	32
 12113  000C08  EC48  F014         	call	i2_putch
 12114                           
 12115                           ;doprnt.c: 1431: while(--width);
 12116  000C0C  0628               	decf	i2printf@width,f,c
 12117  000C0E  A0D8               	btfss	status,0,c
 12118  000C10  0629               	decf	i2printf@width+1,f,c
 12119  000C12  5028               	movf	i2printf@width,w,c
 12120  000C14  1029               	iorwf	i2printf@width+1,w,c
 12121  000C16  A4D8               	btfss	status,2,c
 12122  000C18  D7F6               	goto	i2l4115
 12123  000C1A                     i2l4119:
 12124                           
 12125                           ;doprnt.c: 1438: if(flag & 0x03)
 12126  000C1A  C026  F019         	movff	i2printf@flag,??i2_printf
 12127  000C1E  0E03               	movlw	3
 12128  000C20  1619               	andwf	??i2_printf,f,c
 12129  000C22  B4D8               	btfsc	status,2,c
 12130  000C24  D003               	goto	i2l4123
 12131                           
 12132                           ;doprnt.c: 1439: (putch('-') );
 12133  000C26  0E2D               	movlw	45
 12134  000C28  EC48  F014         	call	i2_putch
 12135  000C2C                     i2l4123:
 12136                           
 12137                           ;doprnt.c: 1469: }
 12138                           ;doprnt.c: 1472: prec = c;
 12139  000C2C  C027  F01D         	movff	i2printf@c,i2printf@prec
 12140                           
 12141                           ;doprnt.c: 1474: while(prec--) {
 12142  000C30  D027               	goto	i2l4129
 12143  000C32                     i2l4125:
 12144                           
 12145                           ;doprnt.c: 1478: {
 12146                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12147  000C32  501D               	movf	i2printf@prec,w,c
 12148  000C34  0D02               	mullw	2
 12149  000C36  0ECA               	movlw	low _dpowers
 12150  000C38  24F3               	addwf	prodl,w,c
 12151  000C3A  6EF6               	movwf	tblptrl,c
 12152  000C3C  0EFD               	movlw	high _dpowers
 12153  000C3E  20F4               	addwfc	prodh,w,c
 12154  000C40  6EF7               	movwf	tblptrh,c
 12155  000C42                     	if	1	;There are 3 active tblptr bytes
 12156  000C42  6AF8               	clrf	tblptru,c
 12157  000C44  0E00               	movlw	low (__mediumconst shr (0+16))
 12158  000C46  22F8               	addwfc	tblptru,f,c
 12159  000C48                     	endif
 12160  000C48  0009               	tblrd		*+
 12161  000C4A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12162  000C4E  000A               	tblrd		*-
 12163  000C50  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12164  000C54  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12165  000C58  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12166  000C5C  EC28  F011         	call	i2___lwdiv	;wreg free
 12167  000C60  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12168  000C64  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12169  000C68  0E00               	movlw	0
 12170  000C6A  6E04               	movwf	i2___lwmod@divisor+1,c
 12171  000C6C  0E0A               	movlw	10
 12172  000C6E  6E03               	movwf	i2___lwmod@divisor,c
 12173  000C70  ECBF  F011         	call	i2___lwmod	;wreg free
 12174  000C74  5001               	movf	?i2___lwmod,w,c
 12175  000C76  0F30               	addlw	48
 12176  000C78  6E27               	movwf	i2printf@c,c
 12177                           
 12178                           ;doprnt.c: 1523: }
 12179                           ;doprnt.c: 1524: (putch(c) );
 12180  000C7A  5027               	movf	i2printf@c,w,c
 12181  000C7C  EC48  F014         	call	i2_putch
 12182  000C80                     i2l4129:
 12183  000C80  061D               	decf	i2printf@prec,f,c
 12184  000C82  281D               	incf	i2printf@prec,w,c
 12185  000C84  A4D8               	btfss	status,2,c
 12186  000C86  D7D5               	goto	i2l4125
 12187  000C88                     i2l4131:
 12188  000C88  C00D  FFF6         	movff	i2printf@f,tblptrl
 12189  000C8C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12190  000C90  4A0D               	infsnz	i2printf@f,f,c
 12191  000C92  2A0E               	incf	i2printf@f+1,f,c
 12192  000C94                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12193  000C94  6AF8               	clrf	tblptru,c
 12194  000C96                     	endif
 12195  000C96                     	if	0	;tblptru may be non-zero
 12196  000C96                     	endif
 12197  000C96  0008               	tblrd		*
 12198  000C98  CFF5 F027          	movff	tablat,i2printf@c
 12199  000C9C  5027               	movf	i2printf@c,w,c
 12200  000C9E  B4D8               	btfsc	status,2,c
 12201  000CA0  0012               	return	
 12202  000CA2  D662               	goto	i2l4007
 12203  000CA4                     __end_ofi2_printf:
 12204                           	opt stack 0
 12205                           pclatu	equ	0xFFB
 12206                           pclath	equ	0xFFA
 12207                           tblptru	equ	0xFF8
 12208                           tblptrh	equ	0xFF7
 12209                           tblptrl	equ	0xFF6
 12210                           tablat	equ	0xFF5
 12211                           prodh	equ	0xFF4
 12212                           prodl	equ	0xFF3
 12213                           intcon	equ	0xFF2
 12214                           intcon3	equ	0xFF0
 12215                           indf0	equ	0xFEF
 12216                           postinc0	equ	0xFEE
 12217                           fsr0h	equ	0xFEA
 12218                           fsr0l	equ	0xFE9
 12219                           wreg	equ	0xFE8
 12220                           postdec1	equ	0xFE5
 12221                           fsr1h	equ	0xFE2
 12222                           fsr1l	equ	0xFE1
 12223                           indf2	equ	0xFDF
 12224                           postinc2	equ	0xFDE
 12225                           postdec2	equ	0xFDD
 12226                           fsr2h	equ	0xFDA
 12227                           fsr2l	equ	0xFD9
 12228                           status	equ	0xFD8
 12229                           
 12230 ;; *************** function i2_putch *****************
 12231 ;; Defined at:
 12232 ;;		line 18 in file "lcd.c"
 12233 ;; Parameters:    Size  Location     Type
 12234 ;;  data            1    wreg     unsigned char 
 12235 ;; Auto vars:     Size  Location     Type
 12236 ;;  data            1    2[COMRAM] unsigned char 
 12237 ;; Return value:  Size  Location     Type
 12238 ;;                  1    wreg      void 
 12239 ;; Registers used:
 12240 ;;		wreg, status,2, status,0, cstack
 12241 ;; Tracked objects:
 12242 ;;		On entry : 0/0
 12243 ;;		On exit  : 0/0
 12244 ;;		Unchanged: 0/0
 12245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12249 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12250 ;;Total ram usage:        1 bytes
 12251 ;; Hardware stack levels used:    1
 12252 ;; Hardware stack levels required when called:    1
 12253 ;; This function calls:
 12254 ;;		i2_lcdNibble
 12255 ;; This function is called by:
 12256 ;;		i2_printf
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260                           	psect	text58
 12261  002890                     __ptext58:
 12262                           	opt stack 0
 12263  002890                     i2_putch:
 12264                           	opt stack 19
 12265                           
 12266                           ;incstack = 0
 12267                           ;i2putch@data stored from wreg
 12268  002890  6E03               	movwf	i2putch@data,c
 12269                           
 12270                           ;lcd.c: 19: LATDbits.LATD2 = 1;
 12271  002892  848C               	bsf	3980,2,c	;volatile
 12272                           
 12273                           ;lcd.c: 20: lcdNibble(data);
 12274  002894  5003               	movf	i2putch@data,w,c
 12275  002896  ECFD  F010         	call	i2_lcdNibble
 12276  00289A  0012               	return		;funcret
 12277  00289C                     __end_ofi2_putch:
 12278                           	opt stack 0
 12279                           pclatu	equ	0xFFB
 12280                           pclath	equ	0xFFA
 12281                           tblptru	equ	0xFF8
 12282                           tblptrh	equ	0xFF7
 12283                           tblptrl	equ	0xFF6
 12284                           tablat	equ	0xFF5
 12285                           prodh	equ	0xFF4
 12286                           prodl	equ	0xFF3
 12287                           intcon	equ	0xFF2
 12288                           intcon3	equ	0xFF0
 12289                           indf0	equ	0xFEF
 12290                           postinc0	equ	0xFEE
 12291                           fsr0h	equ	0xFEA
 12292                           fsr0l	equ	0xFE9
 12293                           wreg	equ	0xFE8
 12294                           postdec1	equ	0xFE5
 12295                           fsr1h	equ	0xFE2
 12296                           fsr1l	equ	0xFE1
 12297                           indf2	equ	0xFDF
 12298                           postinc2	equ	0xFDE
 12299                           postdec2	equ	0xFDD
 12300                           fsr2h	equ	0xFDA
 12301                           fsr2l	equ	0xFD9
 12302                           status	equ	0xFD8
 12303                           
 12304 ;; *************** function i2_isdigit *****************
 12305 ;; Defined at:
 12306 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  c               1    wreg     unsigned char 
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;  c               1    2[COMRAM] unsigned char 
 12311 ;; Return value:  Size  Location     Type
 12312 ;;		None               void
 12313 ;; Registers used:
 12314 ;;		wreg, status,2, status,0
 12315 ;; Tracked objects:
 12316 ;;		On entry : 0/0
 12317 ;;		On exit  : 0/0
 12318 ;;		Unchanged: 0/0
 12319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12324 ;;Total ram usage:        3 bytes
 12325 ;; Hardware stack levels used:    1
 12326 ;; This function calls:
 12327 ;;		Nothing
 12328 ;; This function is called by:
 12329 ;;		i2_printf
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           	psect	text59
 12334  0027C0                     __ptext59:
 12335                           	opt stack 0
 12336  0027C0                     i2_isdigit:
 12337                           	opt stack 20
 12338                           
 12339                           ;incstack = 0
 12340                           ;i2isdigit@c stored from wreg
 12341  0027C0  6E03               	movwf	i2isdigit@c,c
 12342  0027C2  0E00               	movlw	0
 12343  0027C4  6E02               	movwf	i2_isdigit$1565,c
 12344  0027C6  0E3A               	movlw	58
 12345  0027C8  6003               	cpfslt	i2isdigit@c,c
 12346  0027CA  D005               	goto	i2l3767
 12347  0027CC  0E2F               	movlw	47
 12348  0027CE  6403               	cpfsgt	i2isdigit@c,c
 12349  0027D0  D002               	goto	i2l3767
 12350  0027D2  0E01               	movlw	1
 12351  0027D4  6E02               	movwf	i2_isdigit$1565,c
 12352  0027D6                     i2l3767:
 12353  0027D6  C002  F001         	movff	i2_isdigit$1565,??i2_isdigit
 12354  0027DA  3001               	rrcf	??i2_isdigit,w,c
 12355  0027DC  0012               	return	
 12356  0027DE                     __end_ofi2_isdigit:
 12357                           	opt stack 0
 12358                           pclatu	equ	0xFFB
 12359                           pclath	equ	0xFFA
 12360                           tblptru	equ	0xFF8
 12361                           tblptrh	equ	0xFF7
 12362                           tblptrl	equ	0xFF6
 12363                           tablat	equ	0xFF5
 12364                           prodh	equ	0xFF4
 12365                           prodl	equ	0xFF3
 12366                           intcon	equ	0xFF2
 12367                           intcon3	equ	0xFF0
 12368                           indf0	equ	0xFEF
 12369                           postinc0	equ	0xFEE
 12370                           fsr0h	equ	0xFEA
 12371                           fsr0l	equ	0xFE9
 12372                           wreg	equ	0xFE8
 12373                           postdec1	equ	0xFE5
 12374                           fsr1h	equ	0xFE2
 12375                           fsr1l	equ	0xFE1
 12376                           indf2	equ	0xFDF
 12377                           postinc2	equ	0xFDE
 12378                           postdec2	equ	0xFDD
 12379                           fsr2h	equ	0xFDA
 12380                           fsr2l	equ	0xFD9
 12381                           status	equ	0xFD8
 12382                           
 12383 ;; *************** function i2___wmul *****************
 12384 ;; Defined at:
 12385 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;  multiplier      2    0[COMRAM] unsigned int 
 12388 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12389 ;; Auto vars:     Size  Location     Type
 12390 ;;  __wmul          2    4[COMRAM] unsigned int 
 12391 ;; Return value:  Size  Location     Type
 12392 ;;                  2    0[COMRAM] unsigned int 
 12393 ;; Registers used:
 12394 ;;		wreg, status,2, status,0, prodl, prodh
 12395 ;; Tracked objects:
 12396 ;;		On entry : 0/0
 12397 ;;		On exit  : 0/0
 12398 ;;		Unchanged: 0/0
 12399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12400 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12401 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12403 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12404 ;;Total ram usage:        6 bytes
 12405 ;; Hardware stack levels used:    1
 12406 ;; This function calls:
 12407 ;;		Nothing
 12408 ;; This function is called by:
 12409 ;;		_printSortTimer
 12410 ;;		i2_printf
 12411 ;; This function uses a non-reentrant model
 12412 ;;
 12413                           
 12414                           	psect	text60
 12415  002752                     __ptext60:
 12416                           	opt stack 0
 12417  002752                     i2___wmul:
 12418                           	opt stack 20
 12419                           
 12420                           ;incstack = 0
 12421  002752  5001               	movf	i2___wmul@multiplier,w,c
 12422  002754  0203               	mulwf	i2___wmul@multiplicand,c
 12423  002756  CFF3 F005          	movff	prodl,i2___wmul@product
 12424  00275A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12425  00275E  5001               	movf	i2___wmul@multiplier,w,c
 12426  002760  0204               	mulwf	i2___wmul@multiplicand+1,c
 12427  002762  50F3               	movf	prodl,w,c
 12428  002764  2606               	addwf	i2___wmul@product+1,f,c
 12429  002766  5002               	movf	i2___wmul@multiplier+1,w,c
 12430  002768  0203               	mulwf	i2___wmul@multiplicand,c
 12431  00276A  50F3               	movf	prodl,w,c
 12432  00276C  2606               	addwf	i2___wmul@product+1,f,c
 12433  00276E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12434  002772  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12435  002776  0012               	return	
 12436  002778                     __end_ofi2___wmul:
 12437                           	opt stack 0
 12438                           pclatu	equ	0xFFB
 12439                           pclath	equ	0xFFA
 12440                           tblptru	equ	0xFF8
 12441                           tblptrh	equ	0xFF7
 12442                           tblptrl	equ	0xFF6
 12443                           tablat	equ	0xFF5
 12444                           prodh	equ	0xFF4
 12445                           prodl	equ	0xFF3
 12446                           intcon	equ	0xFF2
 12447                           intcon3	equ	0xFF0
 12448                           indf0	equ	0xFEF
 12449                           postinc0	equ	0xFEE
 12450                           fsr0h	equ	0xFEA
 12451                           fsr0l	equ	0xFE9
 12452                           wreg	equ	0xFE8
 12453                           postdec1	equ	0xFE5
 12454                           fsr1h	equ	0xFE2
 12455                           fsr1l	equ	0xFE1
 12456                           indf2	equ	0xFDF
 12457                           postinc2	equ	0xFDE
 12458                           postdec2	equ	0xFDD
 12459                           fsr2h	equ	0xFDA
 12460                           fsr2l	equ	0xFD9
 12461                           status	equ	0xFD8
 12462                           
 12463 ;; *************** function i2___lwmod *****************
 12464 ;; Defined at:
 12465 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  dividend        2    0[COMRAM] unsigned int 
 12468 ;;  divisor         2    2[COMRAM] unsigned int 
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  2    0[COMRAM] unsigned int 
 12473 ;; Registers used:
 12474 ;;		wreg, status,2, status,0
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12484 ;;Total ram usage:        5 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; This function calls:
 12487 ;;		Nothing
 12488 ;; This function is called by:
 12489 ;;		_printSortTimer
 12490 ;;		i2_printf
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text61
 12495  00237E                     __ptext61:
 12496                           	opt stack 0
 12497  00237E                     i2___lwmod:
 12498                           	opt stack 20
 12499                           
 12500                           ;incstack = 0
 12501  00237E  5003               	movf	i2___lwmod@divisor,w,c
 12502  002380  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12503  002382  B4D8               	btfsc	status,2,c
 12504  002384  D018               	goto	i2l1474
 12505  002386  0E01               	movlw	1
 12506  002388  6E05               	movwf	i2___lwmod@counter,c
 12507  00238A  D004               	goto	i2l3799
 12508  00238C                     i2l3797:
 12509  00238C  90D8               	bcf	status,0,c
 12510  00238E  3603               	rlcf	i2___lwmod@divisor,f,c
 12511  002390  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12512  002392  2A05               	incf	i2___lwmod@counter,f,c
 12513  002394                     i2l3799:
 12514  002394  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12515  002396  D7FA               	goto	i2l3797
 12516  002398                     i2l3801:
 12517  002398  5003               	movf	i2___lwmod@divisor,w,c
 12518  00239A  5C01               	subwf	i2___lwmod@dividend,w,c
 12519  00239C  5004               	movf	i2___lwmod@divisor+1,w,c
 12520  00239E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12521  0023A0  A0D8               	btfss	status,0,c
 12522  0023A2  D004               	goto	i2l3805
 12523  0023A4  5003               	movf	i2___lwmod@divisor,w,c
 12524  0023A6  5E01               	subwf	i2___lwmod@dividend,f,c
 12525  0023A8  5004               	movf	i2___lwmod@divisor+1,w,c
 12526  0023AA  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12527  0023AC                     i2l3805:
 12528  0023AC  90D8               	bcf	status,0,c
 12529  0023AE  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12530  0023B0  3203               	rrcf	i2___lwmod@divisor,f,c
 12531  0023B2  2E05               	decfsz	i2___lwmod@counter,f,c
 12532  0023B4  D7F1               	goto	i2l3801
 12533  0023B6                     i2l1474:
 12534  0023B6  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12535  0023BA  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12536  0023BE  0012               	return		;funcret
 12537  0023C0                     __end_ofi2___lwmod:
 12538                           	opt stack 0
 12539                           pclatu	equ	0xFFB
 12540                           pclath	equ	0xFFA
 12541                           tblptru	equ	0xFF8
 12542                           tblptrh	equ	0xFF7
 12543                           tblptrl	equ	0xFF6
 12544                           tablat	equ	0xFF5
 12545                           prodh	equ	0xFF4
 12546                           prodl	equ	0xFF3
 12547                           intcon	equ	0xFF2
 12548                           intcon3	equ	0xFF0
 12549                           indf0	equ	0xFEF
 12550                           postinc0	equ	0xFEE
 12551                           fsr0h	equ	0xFEA
 12552                           fsr0l	equ	0xFE9
 12553                           wreg	equ	0xFE8
 12554                           postdec1	equ	0xFE5
 12555                           fsr1h	equ	0xFE2
 12556                           fsr1l	equ	0xFE1
 12557                           indf2	equ	0xFDF
 12558                           postinc2	equ	0xFDE
 12559                           postdec2	equ	0xFDD
 12560                           fsr2h	equ	0xFDA
 12561                           fsr2l	equ	0xFD9
 12562                           status	equ	0xFD8
 12563                           
 12564 ;; *************** function i2___lwdiv *****************
 12565 ;; Defined at:
 12566 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  dividend        2    5[COMRAM] unsigned int 
 12569 ;;  divisor         2    7[COMRAM] unsigned int 
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 12572 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 12573 ;; Return value:  Size  Location     Type
 12574 ;;                  2    5[COMRAM] unsigned int 
 12575 ;; Registers used:
 12576 ;;		wreg, status,2, status,0
 12577 ;; Tracked objects:
 12578 ;;		On entry : 0/0
 12579 ;;		On exit  : 0/0
 12580 ;;		Unchanged: 0/0
 12581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12583 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12585 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;Total ram usage:        7 bytes
 12587 ;; Hardware stack levels used:    1
 12588 ;; This function calls:
 12589 ;;		Nothing
 12590 ;; This function is called by:
 12591 ;;		_printSortTimer
 12592 ;;		i2_printf
 12593 ;; This function uses a non-reentrant model
 12594 ;;
 12595                           
 12596                           	psect	text62
 12597  002250                     __ptext62:
 12598                           	opt stack 0
 12599  002250                     i2___lwdiv:
 12600                           	opt stack 20
 12601                           
 12602                           ;incstack = 0
 12603  002250  0E00               	movlw	0
 12604  002252  6E0B               	movwf	i2___lwdiv@quotient+1,c
 12605  002254  0E00               	movlw	0
 12606  002256  6E0A               	movwf	i2___lwdiv@quotient,c
 12607  002258  5008               	movf	i2___lwdiv@divisor,w,c
 12608  00225A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 12609  00225C  B4D8               	btfsc	status,2,c
 12610  00225E  D01C               	goto	i2l1464
 12611  002260  0E01               	movlw	1
 12612  002262  6E0C               	movwf	i2___lwdiv@counter,c
 12613  002264  D004               	goto	i2l3779
 12614  002266                     i2l3777:
 12615  002266  90D8               	bcf	status,0,c
 12616  002268  3608               	rlcf	i2___lwdiv@divisor,f,c
 12617  00226A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 12618  00226C  2A0C               	incf	i2___lwdiv@counter,f,c
 12619  00226E                     i2l3779:
 12620  00226E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 12621  002270  D7FA               	goto	i2l3777
 12622  002272                     i2l3781:
 12623  002272  90D8               	bcf	status,0,c
 12624  002274  360A               	rlcf	i2___lwdiv@quotient,f,c
 12625  002276  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 12626  002278  5008               	movf	i2___lwdiv@divisor,w,c
 12627  00227A  5C06               	subwf	i2___lwdiv@dividend,w,c
 12628  00227C  5009               	movf	i2___lwdiv@divisor+1,w,c
 12629  00227E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 12630  002280  A0D8               	btfss	status,0,c
 12631  002282  D005               	goto	i2l3789
 12632  002284  5008               	movf	i2___lwdiv@divisor,w,c
 12633  002286  5E06               	subwf	i2___lwdiv@dividend,f,c
 12634  002288  5009               	movf	i2___lwdiv@divisor+1,w,c
 12635  00228A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 12636  00228C  800A               	bsf	i2___lwdiv@quotient,0,c
 12637  00228E                     i2l3789:
 12638  00228E  90D8               	bcf	status,0,c
 12639  002290  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 12640  002292  3208               	rrcf	i2___lwdiv@divisor,f,c
 12641  002294  2E0C               	decfsz	i2___lwdiv@counter,f,c
 12642  002296  D7ED               	goto	i2l3781
 12643  002298                     i2l1464:
 12644  002298  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12645  00229C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12646  0022A0  0012               	return		;funcret
 12647  0022A2                     __end_ofi2___lwdiv:
 12648                           	opt stack 0
 12649                           pclatu	equ	0xFFB
 12650                           pclath	equ	0xFFA
 12651                           tblptru	equ	0xFF8
 12652                           tblptrh	equ	0xFF7
 12653                           tblptrl	equ	0xFF6
 12654                           tablat	equ	0xFF5
 12655                           prodh	equ	0xFF4
 12656                           prodl	equ	0xFF3
 12657                           intcon	equ	0xFF2
 12658                           intcon3	equ	0xFF0
 12659                           indf0	equ	0xFEF
 12660                           postinc0	equ	0xFEE
 12661                           fsr0h	equ	0xFEA
 12662                           fsr0l	equ	0xFE9
 12663                           wreg	equ	0xFE8
 12664                           postdec1	equ	0xFE5
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function i2_lcdInst *****************
 12675 ;; Defined at:
 12676 ;;		line 13 in file "lcd.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  data            1    wreg     unsigned char 
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  data            1    2[COMRAM] unsigned char 
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  1    wreg      void 
 12683 ;; Registers used:
 12684 ;;		wreg, status,2, status,0, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;Total ram usage:        1 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; Hardware stack levels required when called:    1
 12697 ;; This function calls:
 12698 ;;		i2_lcdNibble
 12699 ;; This function is called by:
 12700 ;;		_change_state_to_menu_11
 12701 ;;		_change_state_to_menu_12
 12702 ;;		_change_state_to_menu_22
 12703 ;;		_change_state_to_menu_23
 12704 ;;		_change_state_to_logs_11
 12705 ;;		_change_state_to_logs_12
 12706 ;;		_change_state_to_logs_22
 12707 ;;		_change_state_to_logs_23
 12708 ;;		_change_state_to_logs_33
 12709 ;;		_change_state_to_logs_34
 12710 ;;		_printSortTimer
 12711 ;;		i2_change_state_to_menu_start
 12712 ;;		i2_printRTC
 12713 ;; This function uses a non-reentrant model
 12714 ;;
 12715                           
 12716                           	psect	text63
 12717  00289C                     __ptext63:
 12718                           	opt stack 0
 12719  00289C                     i2_lcdInst:
 12720                           	opt stack 19
 12721                           
 12722                           ;incstack = 0
 12723                           ;i2lcdInst@data stored from wreg
 12724  00289C  6E03               	movwf	i2lcdInst@data,c
 12725                           
 12726                           ;lcd.c: 14: LATDbits.LATD2 = 0;
 12727  00289E  948C               	bcf	3980,2,c	;volatile
 12728                           
 12729                           ;lcd.c: 15: lcdNibble(data);
 12730  0028A0  5003               	movf	i2lcdInst@data,w,c
 12731  0028A2  ECFD  F010         	call	i2_lcdNibble
 12732  0028A6  0012               	return		;funcret
 12733  0028A8                     __end_ofi2_lcdInst:
 12734                           	opt stack 0
 12735                           pclatu	equ	0xFFB
 12736                           pclath	equ	0xFFA
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           intcon3	equ	0xFF0
 12745                           indf0	equ	0xFEF
 12746                           postinc0	equ	0xFEE
 12747                           fsr0h	equ	0xFEA
 12748                           fsr0l	equ	0xFE9
 12749                           wreg	equ	0xFE8
 12750                           postdec1	equ	0xFE5
 12751                           fsr1h	equ	0xFE2
 12752                           fsr1l	equ	0xFE1
 12753                           indf2	equ	0xFDF
 12754                           postinc2	equ	0xFDE
 12755                           postdec2	equ	0xFDD
 12756                           fsr2h	equ	0xFDA
 12757                           fsr2l	equ	0xFD9
 12758                           status	equ	0xFD8
 12759                           
 12760 ;; *************** function i2_lcdNibble *****************
 12761 ;; Defined at:
 12762 ;;		line 23 in file "lcd.c"
 12763 ;; Parameters:    Size  Location     Type
 12764 ;;  data            1    wreg     unsigned char 
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;  data            1    1[COMRAM] unsigned char 
 12767 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  1    wreg      void 
 12770 ;; Registers used:
 12771 ;;		wreg, status,2, status,0
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;Total ram usage:        2 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; This function calls:
 12784 ;;		Nothing
 12785 ;; This function is called by:
 12786 ;;		i2_lcdInst
 12787 ;;		i2_putch
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           	psect	text64
 12792  0021FA                     __ptext64:
 12793                           	opt stack 0
 12794  0021FA                     i2_lcdNibble:
 12795                           	opt stack 19
 12796                           
 12797                           ;incstack = 0
 12798                           ;i2lcdNibble@data stored from wreg
 12799  0021FA  6E02               	movwf	i2lcdNibble@data,c
 12800                           
 12801                           ;lcd.c: 25: char temp = data & 0xF0;
 12802  0021FC  5002               	movf	i2lcdNibble@data,w,c
 12803  0021FE  0BF0               	andlw	240
 12804  002200  6E01               	movwf	i2lcdNibble@temp,c
 12805                           
 12806                           ;lcd.c: 26: LATD = LATD & 0x0F;
 12807  002202  508C               	movf	3980,w,c	;volatile
 12808  002204  0B0F               	andlw	15
 12809  002206  6E8C               	movwf	3980,c	;volatile
 12810                           
 12811                           ;lcd.c: 27: LATD = temp | LATD;
 12812  002208  5001               	movf	i2lcdNibble@temp,w,c
 12813  00220A  108C               	iorwf	3980,w,c	;volatile
 12814  00220C  6E8C               	movwf	3980,c	;volatile
 12815                           
 12816                           ;lcd.c: 29: LATDbits.LATD3 = 1;
 12817  00220E  868C               	bsf	3980,3,c	;volatile
 12818                           
 12819                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12820  002210  0E42               	movlw	66
 12821  002212                     i2u475_47:
 12822  002212  2EE8               	decfsz	wreg,f,c
 12823  002214  D7FE               	bra	i2u475_47
 12824  002216  D000               	nop2	
 12825                           
 12826                           ;lcd.c: 31: LATDbits.LATD3 = 0;
 12827  002218  968C               	bcf	3980,3,c	;volatile
 12828                           
 12829                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12830  00221A  0E42               	movlw	66
 12831  00221C                     i2u476_47:
 12832  00221C  2EE8               	decfsz	wreg,f,c
 12833  00221E  D7FE               	bra	i2u476_47
 12834  002220  D000               	nop2	
 12835                           
 12836                           ;lcd.c: 34: data = data << 4;
 12837  002222  3802               	swapf	i2lcdNibble@data,w,c
 12838  002224  0BF0               	andlw	240
 12839  002226  6E02               	movwf	i2lcdNibble@data,c
 12840                           
 12841                           ;lcd.c: 36: temp = data & 0xF0;
 12842  002228  5002               	movf	i2lcdNibble@data,w,c
 12843  00222A  0BF0               	andlw	240
 12844  00222C  6E01               	movwf	i2lcdNibble@temp,c
 12845                           
 12846                           ;lcd.c: 37: LATD = LATD & 0x0F;
 12847  00222E  508C               	movf	3980,w,c	;volatile
 12848  002230  0B0F               	andlw	15
 12849  002232  6E8C               	movwf	3980,c	;volatile
 12850                           
 12851                           ;lcd.c: 38: LATD = temp | LATD;
 12852  002234  5001               	movf	i2lcdNibble@temp,w,c
 12853  002236  108C               	iorwf	3980,w,c	;volatile
 12854  002238  6E8C               	movwf	3980,c	;volatile
 12855                           
 12856                           ;lcd.c: 40: LATDbits.LATD3 = 1;
 12857  00223A  868C               	bsf	3980,3,c	;volatile
 12858                           
 12859                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12860  00223C  0E42               	movlw	66
 12861  00223E                     i2u477_47:
 12862  00223E  2EE8               	decfsz	wreg,f,c
 12863  002240  D7FE               	bra	i2u477_47
 12864  002242  D000               	nop2	
 12865                           
 12866                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 12867  002244  968C               	bcf	3980,3,c	;volatile
 12868                           
 12869                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12870  002246  0E42               	movlw	66
 12871  002248                     i2u478_47:
 12872  002248  2EE8               	decfsz	wreg,f,c
 12873  00224A  D7FE               	bra	i2u478_47
 12874  00224C  D000               	nop2	
 12875  00224E  0012               	return		;funcret
 12876  002250                     __end_ofi2_lcdNibble:
 12877                           	opt stack 0
 12878                           pclatu	equ	0xFFB
 12879                           pclath	equ	0xFFA
 12880                           tblptru	equ	0xFF8
 12881                           tblptrh	equ	0xFF7
 12882                           tblptrl	equ	0xFF6
 12883                           tablat	equ	0xFF5
 12884                           prodh	equ	0xFF4
 12885                           prodl	equ	0xFF3
 12886                           intcon	equ	0xFF2
 12887                           intcon3	equ	0xFF0
 12888                           indf0	equ	0xFEF
 12889                           postinc0	equ	0xFEE
 12890                           fsr0h	equ	0xFEA
 12891                           fsr0l	equ	0xFE9
 12892                           wreg	equ	0xFE8
 12893                           postdec1	equ	0xFE5
 12894                           fsr1h	equ	0xFE2
 12895                           fsr1l	equ	0xFE1
 12896                           indf2	equ	0xFDF
 12897                           postinc2	equ	0xFDE
 12898                           postdec2	equ	0xFDD
 12899                           fsr2h	equ	0xFDA
 12900                           fsr2l	equ	0xFD9
 12901                           status	equ	0xFD8
 12902                           
 12903 ;; *************** function i2_getRTC *****************
 12904 ;; Defined at:
 12905 ;;		line 42 in file "RTC.c"
 12906 ;; Parameters:    Size  Location     Type
 12907 ;;		None
 12908 ;; Auto vars:     Size  Location     Type
 12909 ;;  getRTC          2    3[COMRAM] int 
 12910 ;; Return value:  Size  Location     Type
 12911 ;;                  1    wreg      void 
 12912 ;; Registers used:
 12913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12914 ;; Tracked objects:
 12915 ;;		On entry : 0/0
 12916 ;;		On exit  : 0/0
 12917 ;;		Unchanged: 0/0
 12918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12920 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12923 ;;Total ram usage:        2 bytes
 12924 ;; Hardware stack levels used:    1
 12925 ;; Hardware stack levels required when called:    2
 12926 ;; This function calls:
 12927 ;;		i2_I2C_Master_Read
 12928 ;;		i2_I2C_Master_Start
 12929 ;;		i2_I2C_Master_Stop
 12930 ;;		i2_I2C_Master_Write
 12931 ;; This function is called by:
 12932 ;;		_printSortTimer
 12933 ;;		i2_printRTC
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           	psect	text65
 12938  00205E                     __ptext65:
 12939                           	opt stack 0
 12940  00205E                     i2_getRTC:
 12941                           	opt stack 18
 12942                           
 12943                           ;RTC.c: 46: I2C_Master_Start();
 12944                           
 12945                           ;incstack = 0
 12946  00205E  EC6E  F014         	call	i2_I2C_Master_Start	;wreg free
 12947                           
 12948                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
 12949  002062  0E00               	movlw	0
 12950  002064  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12951  002066  0ED0               	movlw	208
 12952  002068  6E02               	movwf	i2I2C_Master_Write@d,c
 12953  00206A  EC59  F014         	call	i2_I2C_Master_Write	;wreg free
 12954                           
 12955                           ;RTC.c: 48: I2C_Master_Write(0x00);
 12956  00206E  0E00               	movlw	0
 12957  002070  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12958  002072  0E00               	movlw	0
 12959  002074  6E02               	movwf	i2I2C_Master_Write@d,c
 12960  002076  EC59  F014         	call	i2_I2C_Master_Write	;wreg free
 12961                           
 12962                           ;RTC.c: 49: I2C_Master_Stop();
 12963  00207A  EC6A  F014         	call	i2_I2C_Master_Stop	;wreg free
 12964                           
 12965                           ;RTC.c: 52: I2C_Master_Start();
 12966  00207E  EC6E  F014         	call	i2_I2C_Master_Start	;wreg free
 12967                           
 12968                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
 12969  002082  0E00               	movlw	0
 12970  002084  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12971  002086  0ED1               	movlw	209
 12972  002088  6E02               	movwf	i2I2C_Master_Write@d,c
 12973  00208A  EC59  F014         	call	i2_I2C_Master_Write	;wreg free
 12974                           
 12975                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
 12976  00208E  0E00               	movlw	0
 12977  002090  6E05               	movwf	i2getRTC@i+1,c
 12978  002092  0E00               	movlw	0
 12979  002094  6E04               	movwf	i2getRTC@i,c
 12980  002096                     i2l3993:
 12981  002096  BE05               	btfsc	i2getRTC@i+1,7,c
 12982  002098  D006               	goto	i2l3997
 12983  00209A  5005               	movf	i2getRTC@i+1,w,c
 12984  00209C  E111               	bnz	i2l4003
 12985  00209E  0E06               	movlw	6
 12986  0020A0  5C04               	subwf	i2getRTC@i,w,c
 12987  0020A2  B0D8               	btfsc	status,0,c
 12988  0020A4  D00D               	goto	i2l4003
 12989  0020A6                     i2l3997:
 12990                           
 12991                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
 12992  0020A6  0ED4               	movlw	low _time
 12993  0020A8  2404               	addwf	i2getRTC@i,w,c
 12994  0020AA  6ED9               	movwf	fsr2l,c
 12995  0020AC  0E00               	movlw	high _time
 12996  0020AE  2005               	addwfc	i2getRTC@i+1,w,c
 12997  0020B0  6EDA               	movwf	fsr2h,c
 12998  0020B2  0E01               	movlw	1
 12999  0020B4  ECBC  F013         	call	i2_I2C_Master_Read
 13000  0020B8  6EDF               	movwf	indf2,c
 13001  0020BA  4A04               	infsnz	i2getRTC@i,f,c
 13002  0020BC  2A05               	incf	i2getRTC@i+1,f,c
 13003  0020BE  D7EB               	goto	i2l3993
 13004  0020C0                     i2l4003:
 13005                           
 13006                           ;RTC.c: 56: }
 13007                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
 13008  0020C0  0E00               	movlw	0
 13009  0020C2  ECBC  F013         	call	i2_I2C_Master_Read
 13010  0020C6  0100               	movlb	0	; () banked
 13011  0020C8  6FDA               	movwf	(_time+6)& (0+255),b
 13012                           
 13013                           ;RTC.c: 58: I2C_Master_Stop();
 13014  0020CA  EC6A  F014         	call	i2_I2C_Master_Stop	;wreg free
 13015  0020CE  0012               	return		;funcret
 13016  0020D0                     __end_ofi2_getRTC:
 13017                           	opt stack 0
 13018                           pclatu	equ	0xFFB
 13019                           pclath	equ	0xFFA
 13020                           tblptru	equ	0xFF8
 13021                           tblptrh	equ	0xFF7
 13022                           tblptrl	equ	0xFF6
 13023                           tablat	equ	0xFF5
 13024                           prodh	equ	0xFF4
 13025                           prodl	equ	0xFF3
 13026                           intcon	equ	0xFF2
 13027                           intcon3	equ	0xFF0
 13028                           indf0	equ	0xFEF
 13029                           postinc0	equ	0xFEE
 13030                           fsr0h	equ	0xFEA
 13031                           fsr0l	equ	0xFE9
 13032                           wreg	equ	0xFE8
 13033                           postdec1	equ	0xFE5
 13034                           fsr1h	equ	0xFE2
 13035                           fsr1l	equ	0xFE1
 13036                           indf2	equ	0xFDF
 13037                           postinc2	equ	0xFDE
 13038                           postdec2	equ	0xFDD
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043 ;; *************** function i2_I2C_Master_Write *****************
 13044 ;; Defined at:
 13045 ;;		line 47 in file "I2C.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  d               2    1[COMRAM] unsigned int 
 13048 ;; Auto vars:     Size  Location     Type
 13049 ;;		None
 13050 ;; Return value:  Size  Location     Type
 13051 ;;                  1    wreg      void 
 13052 ;; Registers used:
 13053 ;;		wreg, status,2, status,0, cstack
 13054 ;; Tracked objects:
 13055 ;;		On entry : 0/0
 13056 ;;		On exit  : 0/0
 13057 ;;		Unchanged: 0/0
 13058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;Total ram usage:        2 bytes
 13064 ;; Hardware stack levels used:    1
 13065 ;; Hardware stack levels required when called:    1
 13066 ;; This function calls:
 13067 ;;		i2_I2C_Master_Wait
 13068 ;; This function is called by:
 13069 ;;		i2_getRTC
 13070 ;; This function uses a non-reentrant model
 13071 ;;
 13072                           
 13073                           	psect	text66
 13074  0028B2                     __ptext66:
 13075                           	opt stack 0
 13076  0028B2                     i2_I2C_Master_Write:
 13077                           	opt stack 18
 13078                           
 13079                           ;I2C.c: 49: I2C_Master_Wait();
 13080                           
 13081                           ;incstack = 0
 13082  0028B2  EC2F  F014         	call	i2_I2C_Master_Wait	;wreg free
 13083                           
 13084                           ;I2C.c: 50: SSPBUF = d;
 13085  0028B6  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13086  0028BA  0012               	return		;funcret
 13087  0028BC                     __end_ofi2_I2C_Master_Write:
 13088                           	opt stack 0
 13089                           pclatu	equ	0xFFB
 13090                           pclath	equ	0xFFA
 13091                           tblptru	equ	0xFF8
 13092                           tblptrh	equ	0xFF7
 13093                           tblptrl	equ	0xFF6
 13094                           tablat	equ	0xFF5
 13095                           prodh	equ	0xFF4
 13096                           prodl	equ	0xFF3
 13097                           intcon	equ	0xFF2
 13098                           intcon3	equ	0xFF0
 13099                           indf0	equ	0xFEF
 13100                           postinc0	equ	0xFEE
 13101                           fsr0h	equ	0xFEA
 13102                           fsr0l	equ	0xFE9
 13103                           wreg	equ	0xFE8
 13104                           postdec1	equ	0xFE5
 13105                           fsr1h	equ	0xFE2
 13106                           fsr1l	equ	0xFE1
 13107                           indf2	equ	0xFDF
 13108                           postinc2	equ	0xFDE
 13109                           postdec2	equ	0xFDD
 13110                           fsr2h	equ	0xFDA
 13111                           fsr2l	equ	0xFD9
 13112                           status	equ	0xFD8
 13113                           
 13114 ;; *************** function i2_I2C_Master_Stop *****************
 13115 ;; Defined at:
 13116 ;;		line 41 in file "I2C.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;		None
 13119 ;; Auto vars:     Size  Location     Type
 13120 ;;		None
 13121 ;; Return value:  Size  Location     Type
 13122 ;;                  1    wreg      void 
 13123 ;; Registers used:
 13124 ;;		wreg, status,2, status,0, cstack
 13125 ;; Tracked objects:
 13126 ;;		On entry : 0/0
 13127 ;;		On exit  : 0/0
 13128 ;;		Unchanged: 0/0
 13129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13134 ;;Total ram usage:        0 bytes
 13135 ;; Hardware stack levels used:    1
 13136 ;; Hardware stack levels required when called:    1
 13137 ;; This function calls:
 13138 ;;		i2_I2C_Master_Wait
 13139 ;; This function is called by:
 13140 ;;		i2_getRTC
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           	psect	text67
 13145  0028D4                     __ptext67:
 13146                           	opt stack 0
 13147  0028D4                     i2_I2C_Master_Stop:
 13148                           	opt stack 18
 13149                           
 13150                           ;I2C.c: 43: I2C_Master_Wait();
 13151                           
 13152                           ;incstack = 0
 13153  0028D4  EC2F  F014         	call	i2_I2C_Master_Wait	;wreg free
 13154                           
 13155                           ;I2C.c: 44: PEN = 1;
 13156  0028D8  84C5               	bsf	4037,2,c	;volatile
 13157  0028DA  0012               	return		;funcret
 13158  0028DC                     __end_ofi2_I2C_Master_Stop:
 13159                           	opt stack 0
 13160                           pclatu	equ	0xFFB
 13161                           pclath	equ	0xFFA
 13162                           tblptru	equ	0xFF8
 13163                           tblptrh	equ	0xFF7
 13164                           tblptrl	equ	0xFF6
 13165                           tablat	equ	0xFF5
 13166                           prodh	equ	0xFF4
 13167                           prodl	equ	0xFF3
 13168                           intcon	equ	0xFF2
 13169                           intcon3	equ	0xFF0
 13170                           indf0	equ	0xFEF
 13171                           postinc0	equ	0xFEE
 13172                           fsr0h	equ	0xFEA
 13173                           fsr0l	equ	0xFE9
 13174                           wreg	equ	0xFE8
 13175                           postdec1	equ	0xFE5
 13176                           fsr1h	equ	0xFE2
 13177                           fsr1l	equ	0xFE1
 13178                           indf2	equ	0xFDF
 13179                           postinc2	equ	0xFDE
 13180                           postdec2	equ	0xFDD
 13181                           fsr2h	equ	0xFDA
 13182                           fsr2l	equ	0xFD9
 13183                           status	equ	0xFD8
 13184                           
 13185 ;; *************** function i2_I2C_Master_Start *****************
 13186 ;; Defined at:
 13187 ;;		line 29 in file "I2C.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;		None
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;		None
 13192 ;; Return value:  Size  Location     Type
 13193 ;;                  1    wreg      void 
 13194 ;; Registers used:
 13195 ;;		wreg, status,2, status,0, cstack
 13196 ;; Tracked objects:
 13197 ;;		On entry : 0/0
 13198 ;;		On exit  : 0/0
 13199 ;;		Unchanged: 0/0
 13200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;Total ram usage:        0 bytes
 13206 ;; Hardware stack levels used:    1
 13207 ;; Hardware stack levels required when called:    1
 13208 ;; This function calls:
 13209 ;;		i2_I2C_Master_Wait
 13210 ;; This function is called by:
 13211 ;;		i2_getRTC
 13212 ;; This function uses a non-reentrant model
 13213 ;;
 13214                           
 13215                           	psect	text68
 13216  0028DC                     __ptext68:
 13217                           	opt stack 0
 13218  0028DC                     i2_I2C_Master_Start:
 13219                           	opt stack 18
 13220                           
 13221                           ;I2C.c: 31: I2C_Master_Wait();
 13222                           
 13223                           ;incstack = 0
 13224  0028DC  EC2F  F014         	call	i2_I2C_Master_Wait	;wreg free
 13225                           
 13226                           ;I2C.c: 32: SEN = 1;
 13227  0028E0  80C5               	bsf	4037,0,c	;volatile
 13228  0028E2  0012               	return		;funcret
 13229  0028E4                     __end_ofi2_I2C_Master_Start:
 13230                           	opt stack 0
 13231                           pclatu	equ	0xFFB
 13232                           pclath	equ	0xFFA
 13233                           tblptru	equ	0xFF8
 13234                           tblptrh	equ	0xFF7
 13235                           tblptrl	equ	0xFF6
 13236                           tablat	equ	0xFF5
 13237                           prodh	equ	0xFF4
 13238                           prodl	equ	0xFF3
 13239                           intcon	equ	0xFF2
 13240                           intcon3	equ	0xFF0
 13241                           indf0	equ	0xFEF
 13242                           postinc0	equ	0xFEE
 13243                           fsr0h	equ	0xFEA
 13244                           fsr0l	equ	0xFE9
 13245                           wreg	equ	0xFE8
 13246                           postdec1	equ	0xFE5
 13247                           fsr1h	equ	0xFE2
 13248                           fsr1l	equ	0xFE1
 13249                           indf2	equ	0xFDF
 13250                           postinc2	equ	0xFDE
 13251                           postdec2	equ	0xFDD
 13252                           fsr2h	equ	0xFDA
 13253                           fsr2l	equ	0xFD9
 13254                           status	equ	0xFD8
 13255                           
 13256 ;; *************** function i2_I2C_Master_Read *****************
 13257 ;; Defined at:
 13258 ;;		line 53 in file "I2C.c"
 13259 ;; Parameters:    Size  Location     Type
 13260 ;;  a               1    wreg     unsigned char 
 13261 ;; Auto vars:     Size  Location     Type
 13262 ;;  a               1    1[COMRAM] unsigned char 
 13263 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13264 ;; Return value:  Size  Location     Type
 13265 ;;                  1    wreg      unsigned char 
 13266 ;; Registers used:
 13267 ;;		wreg, status,2, status,0, cstack
 13268 ;; Tracked objects:
 13269 ;;		On entry : 0/0
 13270 ;;		On exit  : 0/0
 13271 ;;		Unchanged: 0/0
 13272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13277 ;;Total ram usage:        2 bytes
 13278 ;; Hardware stack levels used:    1
 13279 ;; Hardware stack levels required when called:    1
 13280 ;; This function calls:
 13281 ;;		i2_I2C_Master_Wait
 13282 ;; This function is called by:
 13283 ;;		i2_getRTC
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           	psect	text69
 13288  002778                     __ptext69:
 13289                           	opt stack 0
 13290  002778                     i2_I2C_Master_Read:
 13291                           	opt stack 18
 13292                           
 13293                           ;incstack = 0
 13294                           ;i2I2C_Master_Read@a stored from wreg
 13295  002778  6E02               	movwf	i2I2C_Master_Read@a,c
 13296                           
 13297                           ;I2C.c: 55: unsigned char temp;
 13298                           ;I2C.c: 56: I2C_Master_Wait();
 13299  00277A  EC2F  F014         	call	i2_I2C_Master_Wait	;wreg free
 13300                           
 13301                           ;I2C.c: 57: RCEN = 1;
 13302  00277E  86C5               	bsf	4037,3,c	;volatile
 13303                           
 13304                           ;I2C.c: 58: I2C_Master_Wait();
 13305  002780  EC2F  F014         	call	i2_I2C_Master_Wait	;wreg free
 13306                           
 13307                           ;I2C.c: 59: temp = SSPBUF;
 13308  002784  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 13309                           
 13310                           ;I2C.c: 60: I2C_Master_Wait();
 13311  002788  EC2F  F014         	call	i2_I2C_Master_Wait	;wreg free
 13312                           
 13313                           ;I2C.c: 61: ACKDT = (a)?0:1;
 13314  00278C  5002               	movf	i2I2C_Master_Read@a,w,c
 13315  00278E  A4D8               	btfss	status,2,c
 13316  002790  D002               	goto	i2u240_40
 13317  002792  8AC5               	bsf	4037,5,c	;volatile
 13318  002794  D001               	goto	i2l3743
 13319  002796                     i2u240_40:
 13320  002796  9AC5               	bcf	4037,5,c	;volatile
 13321  002798                     i2l3743:
 13322                           
 13323                           ;I2C.c: 62: ACKEN = 1;
 13324  002798  88C5               	bsf	4037,4,c	;volatile
 13325                           
 13326                           ;I2C.c: 63: return temp;
 13327  00279A  5003               	movf	i2I2C_Master_Read@temp,w,c
 13328  00279C  0012               	return	
 13329  00279E                     __end_ofi2_I2C_Master_Read:
 13330                           	opt stack 0
 13331                           pclatu	equ	0xFFB
 13332                           pclath	equ	0xFFA
 13333                           tblptru	equ	0xFF8
 13334                           tblptrh	equ	0xFF7
 13335                           tblptrl	equ	0xFF6
 13336                           tablat	equ	0xFF5
 13337                           prodh	equ	0xFF4
 13338                           prodl	equ	0xFF3
 13339                           intcon	equ	0xFF2
 13340                           intcon3	equ	0xFF0
 13341                           indf0	equ	0xFEF
 13342                           postinc0	equ	0xFEE
 13343                           fsr0h	equ	0xFEA
 13344                           fsr0l	equ	0xFE9
 13345                           wreg	equ	0xFE8
 13346                           postdec1	equ	0xFE5
 13347                           fsr1h	equ	0xFE2
 13348                           fsr1l	equ	0xFE1
 13349                           indf2	equ	0xFDF
 13350                           postinc2	equ	0xFDE
 13351                           postdec2	equ	0xFDD
 13352                           fsr2h	equ	0xFDA
 13353                           fsr2l	equ	0xFD9
 13354                           status	equ	0xFD8
 13355                           
 13356 ;; *************** function i2_I2C_Master_Wait *****************
 13357 ;; Defined at:
 13358 ;;		line 24 in file "I2C.c"
 13359 ;; Parameters:    Size  Location     Type
 13360 ;;		None
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;		None
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  1    wreg      void 
 13365 ;; Registers used:
 13366 ;;		wreg, status,2, status,0
 13367 ;; Tracked objects:
 13368 ;;		On entry : 0/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13376 ;;Total ram usage:        1 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; This function calls:
 13379 ;;		Nothing
 13380 ;; This function is called by:
 13381 ;;		i2_I2C_Master_Start
 13382 ;;		i2_I2C_Master_Stop
 13383 ;;		i2_I2C_Master_Write
 13384 ;;		i2_I2C_Master_Read
 13385 ;; This function uses a non-reentrant model
 13386 ;;
 13387                           
 13388                           	psect	text70
 13389  00285E                     __ptext70:
 13390                           	opt stack 0
 13391  00285E                     i2_I2C_Master_Wait:
 13392                           	opt stack 18
 13393  00285E                     i2l120:
 13394  00285E  B4C7               	btfsc	4039,2,c	;volatile
 13395  002860  D7FE               	goto	i2l120
 13396  002862  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13397  002866  0E1F               	movlw	31
 13398  002868  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13399  00286A  B4D8               	btfsc	status,2,c
 13400  00286C  0012               	return	
 13401  00286E  D7F7               	goto	i2l120
 13402  002870                     __end_ofi2_I2C_Master_Wait:
 13403                           	opt stack 0
 13404                           pclatu	equ	0xFFB
 13405                           pclath	equ	0xFFA
 13406                           tblptru	equ	0xFF8
 13407                           tblptrh	equ	0xFF7
 13408                           tblptrl	equ	0xFF6
 13409                           tablat	equ	0xFF5
 13410                           prodh	equ	0xFF4
 13411                           prodl	equ	0xFF3
 13412                           intcon	equ	0xFF2
 13413                           intcon3	equ	0xFF0
 13414                           indf0	equ	0xFEF
 13415                           postinc0	equ	0xFEE
 13416                           fsr0h	equ	0xFEA
 13417                           fsr0l	equ	0xFE9
 13418                           wreg	equ	0xFE8
 13419                           postdec1	equ	0xFE5
 13420                           fsr1h	equ	0xFE2
 13421                           fsr1l	equ	0xFE1
 13422                           indf2	equ	0xFDF
 13423                           postinc2	equ	0xFDE
 13424                           postdec2	equ	0xFDD
 13425                           fsr2h	equ	0xFDA
 13426                           fsr2l	equ	0xFD9
 13427                           status	equ	0xFD8
 13428                           pclatu	equ	0xFFB
 13429                           pclath	equ	0xFFA
 13430                           tblptru	equ	0xFF8
 13431                           tblptrh	equ	0xFF7
 13432                           tblptrl	equ	0xFF6
 13433                           tablat	equ	0xFF5
 13434                           prodh	equ	0xFF4
 13435                           prodl	equ	0xFF3
 13436                           intcon	equ	0xFF2
 13437                           intcon3	equ	0xFF0
 13438                           indf0	equ	0xFEF
 13439                           postinc0	equ	0xFEE
 13440                           fsr0h	equ	0xFEA
 13441                           fsr0l	equ	0xFE9
 13442                           wreg	equ	0xFE8
 13443                           postdec1	equ	0xFE5
 13444                           fsr1h	equ	0xFE2
 13445                           fsr1l	equ	0xFE1
 13446                           indf2	equ	0xFDF
 13447                           postinc2	equ	0xFDE
 13448                           postdec2	equ	0xFDD
 13449                           fsr2h	equ	0xFDA
 13450                           fsr2l	equ	0xFD9
 13451                           status	equ	0xFD8
 13452                           
 13453                           	psect	rparam
 13454  0000                     pclatu	equ	0xFFB
 13455                           pclath	equ	0xFFA
 13456                           tblptru	equ	0xFF8
 13457                           tblptrh	equ	0xFF7
 13458                           tblptrl	equ	0xFF6
 13459                           tablat	equ	0xFF5
 13460                           prodh	equ	0xFF4
 13461                           prodl	equ	0xFF3
 13462                           intcon	equ	0xFF2
 13463                           intcon3	equ	0xFF0
 13464                           indf0	equ	0xFEF
 13465                           postinc0	equ	0xFEE
 13466                           fsr0h	equ	0xFEA
 13467                           fsr0l	equ	0xFE9
 13468                           wreg	equ	0xFE8
 13469                           postdec1	equ	0xFE5
 13470                           fsr1h	equ	0xFE2
 13471                           fsr1l	equ	0xFE1
 13472                           indf2	equ	0xFDF
 13473                           postinc2	equ	0xFDE
 13474                           postdec2	equ	0xFDD
 13475                           fsr2h	equ	0xFDA
 13476                           fsr2l	equ	0xFD9
 13477                           status	equ	0xFD8
 13478                           
 13479                           	psect	temp
 13480  000079                     btemp:
 13481                           	opt stack 0
 13482  000079                     	ds	1
 13483  0000                     int$flags	set	btemp
 13484                           pclatu	equ	0xFFB
 13485                           pclath	equ	0xFFA
 13486                           tblptru	equ	0xFF8
 13487                           tblptrh	equ	0xFF7
 13488                           tblptrl	equ	0xFF6
 13489                           tablat	equ	0xFF5
 13490                           prodh	equ	0xFF4
 13491                           prodl	equ	0xFF3
 13492                           intcon	equ	0xFF2
 13493                           intcon3	equ	0xFF0
 13494                           indf0	equ	0xFEF
 13495                           postinc0	equ	0xFEE
 13496                           fsr0h	equ	0xFEA
 13497                           fsr0l	equ	0xFE9
 13498                           wreg	equ	0xFE8
 13499                           postdec1	equ	0xFE5
 13500                           fsr1h	equ	0xFE2
 13501                           fsr1l	equ	0xFE1
 13502                           indf2	equ	0xFDF
 13503                           postinc2	equ	0xFDE
 13504                           postdec2	equ	0xFDD
 13505                           fsr2h	equ	0xFDA
 13506                           fsr2l	equ	0xFD9
 13507                           status	equ	0xFD8


Data Sizes:
    Strings     555
    Constant    27
    Data        8
    BSS         77
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     120
    BANK0           128     84     125
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_22->i2_printf
    _change_state_to_menu_12->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_getIR
    _initSortTimer->_getRTC
    _getIR->_getRTC
    _ID->_moveServoBlock
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29080
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    1524
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0    1421
                                             24 BANK0      1     1      0
                              _getIR
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _getIR                                               19    19      0     655
                                              5 BANK0     19    19      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      75
                                              3 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       3     3      0      25
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      28
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         3     3      0      28
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13002
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12152
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   13881
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7428
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4589
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_12
            _change_state_to_menu_22
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_12
            _change_state_to_menu_22
            _change_state_to_menu_23
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _getIR
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      78       1       95.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     103      34        0.0%
DATA                 0      0     103       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 21 00:24:47 2017

                   i2_I2C_Master_Start 28DC                     i2_I2C_Master_Write 28B2  
                                   _ID 1C04                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0073  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l200 284C                                    l120 2824  
                                  l203 2852                                    l820 0D5A  
                                  l657 1F4C                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00ED                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
      __end_of_change_state_to_menu_11 2588        __end_of_change_state_to_menu_12 2558  
      __end_of_change_state_to_menu_22 2528        __end_of_change_state_to_menu_23 24F8  
         _f_can_coming_to_distribution 00E5                         ??_Distribution 0083  
      __end_of_change_state_to_logs_11 2678        __end_of_change_state_to_logs_12 2648  
      __end_of_change_state_to_logs_22 2618        __end_of_change_state_to_logs_23 26D4  
      __end_of_change_state_to_logs_33 25E8        __end_of_change_state_to_logs_34 25B8  
                                 ??_ID 0083                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1411 1B44                                   l1464 1FE0  
                                 l1474 2190                                   l5011 0506  
                                 l5003 04E4                                   l5021 0522  
                                 l5007 04EE                                   l4303 1B64  
                                 l5025 053A                                   l5017 0518  
                                 l4321 1920                                   l4313 1BF0  
                                 l4171 0DDC                                   l4163 0D64  
                                 l4331 19AC                                   l4307 1B7A  
                                 l4181 0E72                                   l4173 0DFA  
                                 l4165 0D82                                   l4157 0CD8  
                                 l5029 0546                                   l4341 23D0  
                                 l4325 1936                                   l3703 1FD2  
                                 l3711 214C                                   l4183 0E90  
                                 l4175 0E18                                   l4167 0DA0  
                                 l4191 0F2A                                   l4423 1E28  
                                 l4351 1FFE                                   l4343 23DC  
                                 l3713 2158                                   l4185 0EAE  
                                 l4177 0E36                                   l4169 0DBE  
                                 l4433 1E6A                                   l4353 200A  
                                 l4337 19CE                                   l4601 1D84  
                                 l3715 215E                                   l4179 0E54  
                                 l4427 1E3E                                   l4355 2016  
                                 l4363 203A                                   l4347 23E8  
                                 l3821 0588                                   l4189 0ECC  
                                 l4357 2022                                   l5341 1F46  
                                 l5333 1F30                                   l4711 1CD8  
                                 l3719 2182                                   l3903 0822  
                                 l3831 05C6                                   l3815 0562  
                                 l4359 202E                                   l4623 1DE2  
                                 l5335 1F36                                   l3657 269E  
                                 l3921 089A                                   l3825 0592  
                                 l4641 1C8A                                   l4617 1DC0  
                                 l5337 1F3C                                   l5345 1F4E  
                                 l4731 1D44                                   l4723 1D22  
                                 l4715 1CEC                                   l4707 1CC8  
                                 l3691 1F90                                   l3675 2720  
                                 l3923 08A6                                   l3931 08D4  
                                 l3915 087E                                   l3907 085A  
                                 l3851 0686                                   l3819 0576  
                                 l4811 0196                                   l4803 0174  
                                 l4717 1CF8                                   l3693 1F9C  
                                 l3933 08DA                                   l3909 0864  
                                 l3861 06FE                                   l4901 031E  
                                 l4821 01B2                                   l4663 19F8  
                                 l4719 1CFE                                   l4727 1D30  
                                 l3695 1FA2                                   l3927 08C0  
                                 l3863 0716                                   l3847 0674  
                                 l3839 0642                                   l3871 075A  
                                 l4807 017E                                   l3945 1EB2  
                                 l3937 0932                                   l3857 06EC  
                                 l3849 0680                                   l3873 078E  
                                 l3961 2410                                   l4905 0336  
                                 l4825 01CA                                   l4817 01A8  
                                 l4675 1A2C                                   l4691 1A7C  
                                 l3955 1EE8                                   l3883 07BE  
                                 l3867 0742                                   l3859 06F8  
                                 l3939 093E                                   l4931 03AE  
                                 l4923 038C                                   l4851 0242  
                                 l4843 0220                                   l3971 1AD8  
                                 l4677 1A38                                   l4669 1A0E  
                                 l3949 1EC8                                   l3885 07C4  
                                 l4941 03CA                                   l4861 025E  
                                 l4781 00F8                                   l4773 00DC  
                                 l3981 1B32                                   l3973 1ADE  
                                 l4695 1A90                                   l4687 1A6E  
                                 l4679 1A3E                                   l3959 2404  
                                 l4927 0396                                   l4847 022A  
                                 l3897 0800                                   l4945 03E2  
                                 l4937 03C0                                   l4865 0276  
                                 l4857 0254                                   l4785 0110  
                                 l4777 00EE                                   l3969 1AC8  
                                 _ADFM 007E07                                   l4971 045A  
                                 l4963 0438                                   l4891 0302  
                                 l4883 02E0                                   l4981 0476  
                                 l4789 0122                                   l4967 0442  
                                 l4887 02EA                                   l4985 048E  
                                 l4977 046C                                   l4897 0314  
                                 _ADON 007E10                                   STR_1 FF9B  
                                 STR_2 FDEC                                   STR_3 FE01  
                                 STR_4 FF79                                   STR_5 FFC5  
                                 STR_6 FEF1                                   STR_7 FFB4  
                                 STR_8 FE13                                   STR_9 FE9C  
                                 u2300 269C                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3130 0D5A                                   u3115 21CA  
                                 u3410 1C3A                                   u2540 06C0  
                                 u3440 1C7A                                   u3418 1C3E  
                                 u2547 06B6                                   u2580 0738  
                                 u3448 1C7E                                   u2587 072E  
                                 u4507 002A                                   u4517 0100  
                                 u4607 0326                                   u4527 0130  
                                 u4617 0350                                   u4537 0186  
                                 u4707 20F0                                   u4627 039E  
                                 u4547 01BA                                   _RCEN 007E2B  
                                 u4717 20FA                                   u4637 03D2  
                                 u4557 01E4                                   u4477 1D72  
                                 u4727 2126                                   u4647 03FC  
                                 u4567 0232                                   u4487 2340  
                                 u4737 2130                                   u4657 044A  
                                 u4577 0266                                   u4497 2374  
                                 u4667 047E                                   u4587 0290  
                                 u4677 04A8                                   u4597 02F2  
                                 u4687 04F6                                   u4697 052A  
                                 _RSEN 007E29                            _stopSignals 27F8  
                                 _back 005F                                   _main 1EF8  
                                 _down 0069                                   _keys FDB9  
                                 _time 00D4                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 280E                                   btemp 0079  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 289C                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 122E  
                          i2_lcdNibble 21FA                        __end_of_Loading 1DE6  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 1A9A  
                                STR_10 FECF                                  STR_11 FEAD  
                                STR_20 FF57                                  STR_12 FEE0  
                                STR_13 FEBE                                  STR_21 FE69  
                                STR_30 FE36                                  STR_22 FE7A  
                                STR_14 FFFC                                  STR_15 FF8A  
                                STR_23 FF46                                  STR_31 FF24  
                                STR_32 FF24                                  STR_40 FFF8  
                                STR_16 FF68                                  STR_24 FF02  
                                STR_41 FFE0                                  STR_17 FE7A  
                                STR_33 FE58                                  STR_25 FE36  
                                STR_34 FE47                                  STR_50 FDEC  
                                STR_42 FFD8                                  STR_18 FE8B  
                                STR_26 FE25                                  STR_43 FFD4  
                                STR_51 FFBE                                  STR_19 FF57  
                                STR_35 FF35                                  STR_27 FF13  
                                STR_28 FF13                                  STR_44 FFE4  
                                STR_36 FFDC                        __end_of___awmod 1D4E  
                                STR_45 FFF0                                  STR_37 FFCC  
                                STR_29 FE47                                  STR_46 FFF4  
                                STR_38 FFE8                                  STR_39 FFEC  
                                STR_47 FFD0                                  STR_48 FDD4  
                                STR_49 FFA9                                  ?_sort 0001  
                      __end_of___lldiv 1B56                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 1FEA                                  i2l120 285E  
                      __end_of___lwmod 219A                                  i2l368 122A  
                                i2l528 18D6                                  i2l820 12BC  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR0L 000FD6                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _IR_in 00DB                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 2890  
                      __end_of_handler 1912                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_initLCD 237E  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _getIR 1912                        __end_of_loadRTC 1E72  
                                _block 0077                        __end_of_dpowers FDD4  
                                _first 00FB                                  _enter 006B  
                      __end_of_isdigit 272A                                  _input 0078  
                                _putch 2870                                  pclath 000FFA  
                                tablat 000FF5                __size_of_moveServoBlock 003A  
                     __end_ofi2___wmul 2778                       __end_ofi2_getRTC 20D0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CA4  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
               moveServoCup@myPosition 0080                       __end_ofi2_strcpy 2498  
                     _count_can_no_lab 0061                        __initialization 22A2  
                   __size_ofi2_lcdInst 000C                           __end_of_main 1F72  
                         __end_of_keys FDCA                           __end_of_sort 2824  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                 __end_of_MAGNETISM_in 28E6                                 ??_sort 0099  
                        __activetblptr 000003                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AE  
                      i2lcdNibble@temp 0001                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l4003 20C0                                 i2l4011 0978  
                               i2l4101 0BD2                                 i2l4013 0986  
                               i2l4031 0A20                                 i2l4023 09BE  
                               i2l4007 0968                                 i2l1464 2298  
                               i2l4113 0BFE                                 i2l4041 0A52  
                               i2l4017 098C                                 i2l1474 23B6  
                               i2l4115 0C06                                 i2l4123 0C2C  
                               i2l4107 0BE8                                 i2l4051 0AAA  
                               i2l4043 0A56                                 i2l4131 0C88  
                               i2l4125 0C32                                 i2l4053 0AB0  
                               i2l5101 1072                                 i2l4119 0C1A  
                               i2l4055 0AC2                                 i2l4039 0A48  
                               i2l4063 0AFE                                 i2l4135 2470  
                               i2l4129 0C80                                 i2l4049 0AA0  
                               i2l4065 0B2E                                 i2l4137 2478  
                               i2l4401 13A2                                 i2l5121 10C0  
                               i2l5113 109C                                 i2l5105 1080  
                               i2l5041 0FA4                                 i2l4075 0B56  
                               i2l4059 0AEC                                 i2l4403 13B8  
                               i2l4077 0B5A                                 i2l5205 1470  
                               i2l5141 110E                                 i2l5133 10F2  
                               i2l5125 10CE                                 i2l5117 10B2  
                               i2l5109 108E                                 i2l5053 0FCE  
                               i2l5045 0FB2                                 i2l4095 0BA6  
                               i2l5215 14DA                                 i2l4407 13CE  
                               i2l5039 0F9E                                 i2l3801 2398  
                               i2l4089 0B8C                                 i2l5225 159C  
                               i2l5209 1480                                 i2l4513 1748  
                               i2l4505 1730                                 i2l4409 1428  
                               i2l5161 115C                                 i2l5153 1140  
                               i2l5145 111C                                 i2l5137 1100  
                               i2l5129 10DC                                 i2l5081 1024  
                               i2l5073 1006                                 i2l5065 0FEA  
                               i2l5057 0FDC                                 i2l5049 0FC0  
                               i2l4099 0BCA                                 i2l4523 1772  
                               i2l3805 23AC                                 i2l4533 1790  
                               i2l4381 12C6                                 i2l5181 11B2  
                               i2l5173 118E                                 i2l5165 1172  
                               i2l5157 114E                                 i2l5149 1132  
                               i2l5093 104E                                 i2l5085 1032  
                               i2l5077 1016                                 i2l5069 0FF8  
                               i2l5309 18B2                                 i2l3743 2798  
                               i2l4535 1794                                 i2l4519 1756  
                               i2l4391 1334                                 i2l4383 12DC  
                               i2l4375 125A                                 i2l4561 17E8  
                               i2l4553 17C4                                 i2l4529 177C  
                               i2l4481 16CE                                 i2l4465 1696  
                               i2l4457 167C                                 i2l4393 134A  
                               i2l4385 12F2                                 i2l5177 119C  
                               i2l5169 1180                                 i2l5097 105C  
                               i2l5089 1040                                 i2l4547 17B6  
                               i2l4539 179E                                 i2l4483 16D4  
                               i2l4467 16A6                                 i2l4475 16B4  
                               i2l4395 1360                                 i2l4387 1308  
                               i2l5187 11C0                                 i2l3781 2272  
                               i2l4565 17FA                                 i2l4557 17D6  
                               i2l4485 16DA                                 i2l4493 16EC  
                               i2l4469 16AA                                 i2l4397 1376  
                               i2l4389 131E                                 i2l3767 27D6  
                               i2l4487 16E0                                 i2l4479 16C8  
                               i2l4575 1816                                 i2l4399 138C  
                               i2l3777 2266                                 i2l4569 180C  
                               i2l4489 16E6                                 i2l3779 226E  
                               i2l5491 1200                                 i2l3789 228E  
                               i2l3797 238C                                 i2l5493 121C  
                               i2l3799 2394                                 i2l3993 2096  
                               i2l5497 1704                                 i2l5489 11DE  
                               i2l5499 1720                                 i2l3997 20A6  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 0098  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 284C  
                          ?i2_printRTC 0001                   __end_of_Distribution 24C8  
                               ___wmul 2430                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 1E72                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 27C0  
                               _initUI 27DE                                 getIR@i 0096  
                               clear_0 22C8                                 clear_1 22D4  
                               clear_2 22E0                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 284C  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 0554                              ??_handler 004B  
                               _strcpy 23FA                              ??_initLCD 0083  
                            ??_loadRTC 0095   __end_ofi2_change_state_to_menu_start 2752  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 272A  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 22A2  
                     __end_of_printRTC 0F6E                           __mediumconst FDB8  
                    __end_ofi2___lwmod 23C0                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_ofi2_lcdInst 28A8                      __end_ofi2_isdigit 27DE  
                           __accesstop 0080                __end_of__initialization 22E6  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                           __pidataBANK0 28BC  
                        __end_of_getIR 19DC                            i2printRTC@i 0041  
                        _initSortTimer 1B56                       _beamTimerCounter 00DD  
                        __end_of_putch 2880                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1CAC  
                           __end_of_UI 0554                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2700  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 26D4  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0085                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0065                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                         _moveServoBlock 23C0  
                           __pbssBANK0 00D4                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_640 00CA                                UI@i_641 00CB  
                       ?_initSortTimer 0001                                UI@i_652 00D0  
                              UI@i_644 00CC                                UI@i_636 00C8  
                              UI@i_653 00D1                                UI@i_645 00CD  
                              UI@i_637 00C9                                UI@i_656 00D2  
                              UI@i_648 00CE                                UI@i_657 00D3  
                              UI@i_649 00CF                                ?___wmul 0080  
                __size_of_MAGNETISM_in 0002                                ?_getRTC 0001  
                              ?_initUI 0001                            ?_PortTestA5 0001  
                              ?_printf 008E              ID@top_bottom_conductivity 0084  
                              _UI$1921 00C5                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                        ?_moveServoCup 0001                             ??i2_printf 0019  
               __end_of_moveServoBlock 23FA                             ??i2_strcpy 0005  
                            ?_dispLogs 0001                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 2890                              ?_initTime 0080  
                         _MAGNETISM_in 28E4                        _f_loadingNewCan 00EB  
                      i2printRTC@month 003D                  __size_of_Distribution 0030  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 2138  
                              _Loading 1D4E            __size_ofi2_I2C_Master_Write 000A  
                              __Hparam 0000                                __Lparam 0000  
                            ?_printRTC 0001                                ___awdiv 19DC  
                              ___awmod 1CAC                                ___lldiv 1A9A  
                      __size_of___wmul 0036                                ___lwdiv 1F72  
                              ___lwmod 2138                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                              _canType 00F3                        __size_of_initUI 001A  
                              __pcinit 22A2                                __ramtop 1000  
                              _lcdInst 2880                                _handler 0008  
                              __ptext0 1EF8                                __ptext1 27F8  
                              __ptext2 280E                                __ptext3 1D4E  
                              __ptext4 1B56                                __ptext5 1912  
                              __ptext6 1C04                                __ptext7 23C0  
                              __ptext8 28E4                                __ptext9 2498  
                      __size_of_printf 040A                         ??_moveServoCup 0080  
                      __size_of_strcpy 0036                                _initLCD 2338  
                              _loadRTC 1DE6                                _dpowers FDCA  
                              _isdigit 2700                       ___awmod@dividend 0080  
                              getRTC@i 0083               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                                _was_low 0075  
                      ?_moveServoBlock 0001                             ??_dispLogs 0003  
                         _Distribution 2498                         __pintcode_body 1844  
                 end_of_initialization 22E6                        _servoSelectFlag 006F  
                           ??_initTime 0086                                int_func 1844  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1844  
                __end_of_machineConfig 2338                             _updateMenu 0F6E  
                    i2_I2C_Master_Read 2778                      i2_I2C_Master_Wait 285E  
                    i2_I2C_Master_Stop 28D4                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 2250                              i2___lwmod 237E  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1464  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                      getIR@timeBroken 0088                              i2_lcdInst 289C  
                           _total_time 00F1                            printf@width 00A9  
                      _PWMTimerCounter 005B                   __size_of_stopSignals 0016  
                           ID@magnetic 0088                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 27C0                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 005D                   moveServoCup@pwmTimer 0081  
                       __end_of___wmul 2466                         __end_of_getRTC 1EF8  
                 __size_ofi2_lcdNibble 0056                          i2lcdInst@data 0003  
                       __end_of_initUI 27F8                       i2___wmul@product 0005  
                       __end_of_printf 095E                           i2printf@flag 0026  
                       __end_of_strcpy 2430              __end_ofi2_I2C_Master_Read 279E  
            __end_ofi2_I2C_Master_Wait 2870                           i2printf@prec 001D  
                  start_initialization 22A2              __end_ofi2_I2C_Master_Stop 28DC  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0063  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 205E  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F5                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0030       __size_of_change_state_to_menu_22 0030  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2028 0045  
                          __pbssCOMRAM 005B                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1565 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0067                     __end_of_PortTestA5 285E  
                     _I2C_Master_Start 28CC                              _f_lastCan 00E9  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 28A8                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB8  
                            _lcdNibble 20D0                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                     ??_moveServoBlock 0080                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 006D  
                            _cur_state 00E1                       ___lwdiv@quotient 0084  
                       __size_of_getIR 00CA                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 00A8                            __size_of_UI 0542  
           __end_ofi2_I2C_Master_Start 28E4             __end_ofi2_I2C_Master_Write 28BC  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATDbits 000F8C  
                         _inputHandler 165E                            ??i2_isdigit 0001  
                             i2u240_40 2796                               i2u321_40 12BC  
                             i2u441_40 1596                               i2u292_40 0AE4  
                             i2u292_47 0ADA                               i2u288_40 0A84  
                             i2u288_47 0A7A                               i2u474_47 169C  
                             i2u475_47 2212                               i2u476_47 221C  
                             i2u477_47 223E                               i2u478_47 2248  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 0086  
                           _ADCON0bits 000FC2                 moveServoBlock@pwmTimer 0080  
                    ___wmul@multiplier 0080                              _startTime 0100  
                             i2___wmul 2752                          lcdNibble@data 0081  
                             i2_getRTC 205E                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 095E                               i2_strcpy 2466  
                  I2C_Master_Read@temp 0082                              copy_data0 22B6  
                __size_of_moveServoCup 0074                       __size_ofi2_putch 000C  
                          _count_total 00DF                               __Hrparam 0000  
                     __size_of_Loading 0098                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1C04  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 2558                _change_state_to_menu_12 2528  
              _change_state_to_menu_22 24F8                _change_state_to_menu_23 24C8  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2648  
              _change_state_to_logs_12 2618                _change_state_to_logs_22 25E8  
              _change_state_to_logs_23 26A6                _change_state_to_logs_33 25B8  
              _change_state_to_logs_34 2588                       __size_of___lwmod 0062  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 190A                        _I2C_Master_Init 219A  
                      _I2C_Master_Read 2678                       __size_of_initLCD 0046  
                         _f_ID_receive 00F9                           _moveServoCup 1FEA  
                     __size_of_loadRTC 008C                        _I2C_Master_Wait 2824  
                      _I2C_Master_Stop 28C4                       __size_of_isdigit 002A  
                       _printSortTimer 1464                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                               __ptext10 1FEA  
                             __ptext11 22F0                               __ptext20 0CA4  
                             __ptext12 27DE                               __ptext21 23FA  
                             __ptext13 1DE6                               __ptext30 1E72  
                             __ptext22 0554                               __ptext14 219A  
                             __ptext31 28A8                               __ptext23 2870  
                             __ptext15 1A9A                               __ptext40 0F6E  
                             __ptext32 28C4                               __ptext24 2700  
                             __ptext16 26D4                               __ptext41 272A  
                             __ptext33 28CC                               __ptext25 2430  
                             __ptext17 279E                               __ptext50 25B8  
                             __ptext42 122E                               __ptext34 2678  
                             __ptext26 2138                               __ptext18 2338  
                             __ptext51 26A6                               __ptext43 2466  
                             __ptext35 2824                               __ptext27 1F72  
                             __ptext19 0012                               __ptext60 2752  
                             __ptext52 25E8                               __ptext44 165E  
                             __ptext36 1CAC                               __ptext28 2880  
                             __ptext61 237E                               __ptext53 2618  
                             __ptext45 24C8                               __ptext37 19DC  
                             __ptext29 20D0                               __ptext70 285E  
                             __ptext62 2250                               __ptext54 2648  
                             __ptext46 24F8                               __ptext38 284C  
                             __ptext63 289C                               __ptext55 2838  
                             __ptext47 2528                               __ptext64 21FA  
                             __ptext56 1464                               __ptext48 2558  
                             __ptext65 205E                               __ptext57 095E  
                             __ptext49 2588                               __ptext66 28B2  
                             __ptext58 2890                               __ptext67 28D4  
                             __ptext59 27C0                               __ptext68 28DC  
                             __ptext69 2778                               _dispLogs 2838  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1565 0002                               _initTime 279E  
                        __size_of_main 007A                          __size_of_sort 0016  
       ??i2_change_state_to_menu_start 0043                               _logstate 00EF  
               __size_of_machineConfig 0048                          ??i2_lcdNibble 0001  
                             _printRTC 0CA4                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 0079  
                   _f_can_coming_to_ID 00E3                              printf@len 00A5  
                            printf@val 00A3                               loadRTC@i 0096  
               __end_of_printSortTimer 165E                              putch@data 0082  
             __end_of_I2C_Master_Start 28D4                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 28B2                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                               isdigit@c 0082  
                             intlevel2 0000                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                          ?_MAGNETISM_in 0080  
                  __end_of_stopSignals 280E              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 002A              ??_change_state_to_menu_22 002A  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 009F  
                             printf@cp 00A1                     __end_of_updateMenu 122E  
              __end_of_I2C_Master_Init 21FA                __end_of_I2C_Master_Read 26A6  
              __end_of_I2C_Master_Wait 2838                __end_of_I2C_Master_Stop 28CC  
                          lcdInst@data 0082                          printRTC@F3177 00F5  
                  __end_ofi2_lcdNibble 2250                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 00E7  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 22F0                        ___lwmod@counter 008B  
             moveServoBlock@myPosition 0082                       _sortTimerCounter 0071  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00F4                         ??_MAGNETISM_in 0082  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
