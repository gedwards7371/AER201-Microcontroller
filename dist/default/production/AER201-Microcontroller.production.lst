

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 19 17:37:35 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.40
   112                           ; Generated 01/12/2016 GMT
   113                           ; 
   114                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F4620 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK1
   147  0047FE                     __pidataBANK1:
   148                           	opt stack 0
   149                           
   150                           ;initializer for UI@F3225
   151  0047FE  4D                 	db	77
   152  0047FF  4D                 	db	77
   153  004800  4D                 	db	77
   154  004801  00                 	db	0
   155                           
   156                           ;initializer for printRTC@F3216
   157  004802  4D                 	db	77
   158  004803  4D                 	db	77
   159  004804  4D                 	db	77
   160  004805  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FB20                     __pmediumconst:
   164                           	opt stack 0
   165  00FB20  00                 	db	0
   166  00FB21                     _keys:
   167                           	opt stack 0
   168  00FB21  31                 	db	49
   169  00FB22  32                 	db	50
   170  00FB23  33                 	db	51
   171  00FB24  41                 	db	65
   172  00FB25  34                 	db	52
   173  00FB26  35                 	db	53
   174  00FB27  36                 	db	54
   175  00FB28  42                 	db	66
   176  00FB29  37                 	db	55
   177  00FB2A  38                 	db	56
   178  00FB2B  39                 	db	57
   179  00FB2C  43                 	db	67
   180  00FB2D  2A                 	db	42
   181  00FB2E  30                 	db	48
   182  00FB2F  23                 	db	35
   183  00FB30  44                 	db	68
   184  00FB31  00                 	db	0
   185  00FB32                     __end_of_keys:
   186                           	opt stack 0
   187  00FB32                     _dpowers:
   188                           	opt stack 0
   189  00FB32  0001               	dw	1
   190  00FB34  000A               	dw	10
   191  00FB36  0064               	dw	100
   192  00FB38  03E8               	dw	1000
   193  00FB3A  2710               	dw	10000
   194  00FB3C                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADCON2	set	4032
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _CMCONbits	set	4020
   203  0000                     _CVRCON	set	4021
   204  0000                     _EEADR	set	4009
   205  0000                     _EEADRH	set	4010
   206  0000                     _EECON1bits	set	4006
   207  0000                     _EECON2	set	4007
   208  0000                     _EEDATA	set	4008
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATA	set	3977
   211  0000                     _LATAbits	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATCbits	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATDbits	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _LATEbits	set	3981
   219  0000                     _OSCCON	set	4051
   220  0000                     _OSCTUNEbits	set	3995
   221  0000                     _PIR2bits	set	4001
   222  0000                     _PORTAbits	set	3968
   223  0000                     _PORTB	set	3969
   224  0000                     _PORTBbits	set	3969
   225  0000                     _SSPADD	set	4040
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON1	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _T0CON	set	4053
   231  0000                     _T1CON	set	4045
   232  0000                     _T3CON	set	4017
   233  0000                     _TMR0H	set	4055
   234  0000                     _TMR0L	set	4054
   235  0000                     _TMR1H	set	4047
   236  0000                     _TMR1L	set	4046
   237  0000                     _TMR3H	set	4019
   238  0000                     _TMR3L	set	4018
   239  0000                     _TRISA	set	3986
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISD	set	3989
   243  0000                     _TRISE	set	3990
   244  0000                     _ACKDT	set	32301
   245  0000                     _ACKEN	set	32300
   246  0000                     _ADIE	set	31982
   247  0000                     _INT1IE	set	32643
   248  0000                     _INT1IF	set	32640
   249  0000                     _PEIE	set	32662
   250  0000                     _PEN	set	32298
   251  0000                     _RCEN	set	32299
   252  0000                     _RSEN	set	32297
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR0ON	set	32431
   257  0000                     _TMR1IE	set	31976
   258  0000                     _TMR1IF	set	31984
   259  0000                     _TMR1ON	set	32360
   260  0000                     _TMR2IE	set	31977
   261  0000                     _TMR3IE	set	32001
   262  0000                     _TMR3IF	set	32009
   263  0000                     _TMR3ON	set	32136
   264  0000                     _TRISC3	set	31907
   265  0000                     _TRISC4	set	31908
   266  0000                     _nRBPU	set	32655
   267  00FB3C                     STR_21:
   268  00FB3C  25                 	db	37
   269  00FB3D  30                 	db	48	;'0'
   270  00FB3E  32                 	db	50	;'2'
   271  00FB3F  64                 	db	100	;'d'
   272  00FB40  25                 	db	37
   273  00FB41  73                 	db	115	;'s'
   274  00FB42  20                 	db	32
   275  00FB43  7C                 	db	124
   276  00FB44  20                 	db	32
   277  00FB45  25                 	db	37
   278  00FB46  30                 	db	48	;'0'
   279  00FB47  32                 	db	50	;'2'
   280  00FB48  64                 	db	100	;'d'
   281  00FB49  3A                 	db	58	;':'
   282  00FB4A  25                 	db	37
   283  00FB4B  30                 	db	48	;'0'
   284  00FB4C  32                 	db	50	;'2'
   285  00FB4D  64                 	db	100	;'d'
   286  00FB4E  3A                 	db	58	;':'
   287  00FB4F  25                 	db	37
   288  00FB50  30                 	db	48	;'0'
   289  00FB51  32                 	db	50	;'2'
   290  00FB52  64                 	db	100	;'d'
   291  00FB53  00                 	db	0
   292  00FB54                     STR_66:
   293  00FB54  28                 	db	40
   294  00FB55  64                 	db	100	;'d'
   295  00FB56  61                 	db	97	;'a'
   296  00FB57  74                 	db	116	;'t'
   297  00FB58  61                 	db	97	;'a'
   298  00FB59  3A                 	db	58	;':'
   299  00FB5A  20                 	db	32
   300  00FB5B  25                 	db	37
   301  00FB5C  75                 	db	117	;'u'
   302  00FB5D  2C                 	db	44
   303  00FB5E  20                 	db	32
   304  00FB5F  61                 	db	97	;'a'
   305  00FB60  64                 	db	100	;'d'
   306  00FB61  64                 	db	100	;'d'
   307  00FB62  72                 	db	114	;'r'
   308  00FB63  3A                 	db	58	;':'
   309  00FB64  20                 	db	32
   310  00FB65  25                 	db	37
   311  00FB66  75                 	db	117	;'u'
   312  00FB67  29                 	db	41
   313  00FB68  00                 	db	0
   314  00FB69                     STR_27:
   315  00FB69  4E                 	db	78	;'N'
   316  00FB6A  4F                 	db	79	;'O'
   317  00FB6B  20                 	db	32
   318  00FB6C  4C                 	db	76	;'L'
   319  00FB6D  41                 	db	65	;'A'
   320  00FB6E  42                 	db	66	;'B'
   321  00FB6F  3A                 	db	58	;':'
   322  00FB70  20                 	db	32
   323  00FB71  25                 	db	37
   324  00FB72  64                 	db	100	;'d'
   325  00FB73  7C                 	db	124
   326  00FB74  4C                 	db	76	;'L'
   327  00FB75  41                 	db	65	;'A'
   328  00FB76  42                 	db	66	;'B'
   329  00FB77  3A                 	db	58	;':'
   330  00FB78  20                 	db	32
   331  00FB79  25                 	db	37
   332  00FB7A  64                 	db	100	;'d'
   333  00FB7B  00                 	db	0
   334  00FB7C                     STR_25:
   335  00FB7C  4E                 	db	78	;'N'
   336  00FB7D  4F                 	db	79	;'O'
   337  00FB7E  20                 	db	32
   338  00FB7F  54                 	db	84	;'T'
   339  00FB80  41                 	db	65	;'A'
   340  00FB81  42                 	db	66	;'B'
   341  00FB82  3A                 	db	58	;':'
   342  00FB83  20                 	db	32
   343  00FB84  25                 	db	37
   344  00FB85  64                 	db	100	;'d'
   345  00FB86  7C                 	db	124
   346  00FB87  54                 	db	84	;'T'
   347  00FB88  41                 	db	65	;'A'
   348  00FB89  42                 	db	66	;'B'
   349  00FB8A  3A                 	db	58	;':'
   350  00FB8B  20                 	db	32
   351  00FB8C  25                 	db	37
   352  00FB8D  64                 	db	100	;'d'
   353  00FB8E  00                 	db	0
   354  00FB8F                     STR_111:
   355  00FB8F  44                 	db	68	;'D'
   356  00FB90  20                 	db	32
   357  00FB91  57                 	db	87	;'W'
   358  00FB92  49                 	db	73	;'I'
   359  00FB93  4C                 	db	76	;'L'
   360  00FB94  4C                 	db	76	;'L'
   361  00FB95  20                 	db	32
   362  00FB96  52                 	db	82	;'R'
   363  00FB97  45                 	db	69	;'E'
   364  00FB98  54                 	db	84	;'T'
   365  00FB99  55                 	db	85	;'U'
   366  00FB9A  52                 	db	82	;'R'
   367  00FB9B  4E                 	db	78	;'N'
   368  00FB9C  20                 	db	32
   369  00FB9D  20                 	db	32
   370  00FB9E  20                 	db	32
   371  00FB9F  20                 	db	32
   372  00FBA0  00                 	db	0
   373  00FBA1                     STR_112:
   374  00FBA1  4F                 	db	79	;'O'
   375  00FBA2  54                 	db	84	;'T'
   376  00FBA3  48                 	db	72	;'H'
   377  00FBA4  45                 	db	69	;'E'
   378  00FBA5  52                 	db	82	;'R'
   379  00FBA6  20                 	db	32
   380  00FBA7  53                 	db	83	;'S'
   381  00FBA8  45                 	db	69	;'E'
   382  00FBA9  54                 	db	84	;'T'
   383  00FBAA  53                 	db	83	;'S'
   384  00FBAB  20                 	db	32
   385  00FBAC  52                 	db	82	;'R'
   386  00FBAD  41                 	db	65	;'A'
   387  00FBAE  35                 	db	53	;'5'
   388  00FBAF  20                 	db	32
   389  00FBB0  20                 	db	32
   390  00FBB1  20                 	db	32
   391  00FBB2  00                 	db	0
   392  00FBB3                     STR_3:
   393  00FBB3  2D                 	db	45
   394  00FBB4  2D                 	db	45
   395  00FBB5  20                 	db	32
   396  00FBB6  4C                 	db	76	;'L'
   397  00FBB7  4F                 	db	79	;'O'
   398  00FBB8  47                 	db	71	;'G'
   399  00FBB9  20                 	db	32
   400  00FBBA  25                 	db	37
   401  00FBBB  32                 	db	50	;'2'
   402  00FBBC  64                 	db	100	;'d'
   403  00FBBD  20                 	db	32
   404  00FBBE  48                 	db	72	;'H'
   405  00FBBF  45                 	db	69	;'E'
   406  00FBC0  52                 	db	82	;'R'
   407  00FBC1  45                 	db	69	;'E'
   408  00FBC2  2D                 	db	45
   409  00FBC3  2D                 	db	45
   410  00FBC4  00                 	db	0
   411  00FBC5                     STR_1:
   412  00FBC5  52                 	db	82	;'R'
   413  00FBC6  45                 	db	69	;'E'
   414  00FBC7  53                 	db	83	;'S'
   415  00FBC8  55                 	db	85	;'U'
   416  00FBC9  4C                 	db	76	;'L'
   417  00FBCA  54                 	db	84	;'T'
   418  00FBCB  53                 	db	83	;'S'
   419  00FBCC  20                 	db	32
   420  00FBCD  49                 	db	73	;'I'
   421  00FBCE  4E                 	db	78	;'N'
   422  00FBCF  20                 	db	32
   423  00FBD0  4C                 	db	76	;'L'
   424  00FBD1  4F                 	db	79	;'O'
   425  00FBD2  47                 	db	71	;'G'
   426  00FBD3  20                 	db	32
   427  00FBD4  25                 	db	37
   428  00FBD5  64                 	db	100	;'d'
   429  00FBD6  00                 	db	0
   430  00FBD7                     STR_102:
   431  00FBD7  4D                 	db	77	;'M'
   432  00FBD8  49                 	db	73	;'I'
   433  00FBD9  44                 	db	68	;'D'
   434  00FBDA  20                 	db	32
   435  00FBDB  2D                 	db	45
   436  00FBDC  2D                 	db	45
   437  00FBDD  20                 	db	32
   438  00FBDE  32                 	db	50	;'2'
   439  00FBDF  73                 	db	115	;'s'
   440  00FBE0  20                 	db	32
   441  00FBE1  20                 	db	32
   442  00FBE2  20                 	db	32
   443  00FBE3  20                 	db	32
   444  00FBE4  20                 	db	32
   445  00FBE5  20                 	db	32
   446  00FBE6  20                 	db	32
   447  00FBE7  00                 	db	0
   448  00FBE8                     STR_105:
   449  00FBE8  44                 	db	68	;'D'
   450  00FBE9  52                 	db	82	;'R'
   451  00FBEA  4F                 	db	79	;'O'
   452  00FBEB  50                 	db	80	;'P'
   453  00FBEC  20                 	db	32
   454  00FBED  2D                 	db	45
   455  00FBEE  2D                 	db	45
   456  00FBEF  20                 	db	32
   457  00FBF0  32                 	db	50	;'2'
   458  00FBF1  73                 	db	115	;'s'
   459  00FBF2  20                 	db	32
   460  00FBF3  20                 	db	32
   461  00FBF4  20                 	db	32
   462  00FBF5  20                 	db	32
   463  00FBF6  20                 	db	32
   464  00FBF7  20                 	db	32
   465  00FBF8  00                 	db	0
   466  00FBF9                     STR_99:
   467  00FBF9  4C                 	db	76	;'L'
   468  00FBFA  45                 	db	69	;'E'
   469  00FBFB  46                 	db	70	;'F'
   470  00FBFC  54                 	db	84	;'T'
   471  00FBFD  20                 	db	32
   472  00FBFE  2D                 	db	45
   473  00FBFF  2D                 	db	45
   474  00FC00  20                 	db	32
   475  00FC01  32                 	db	50	;'2'
   476  00FC02  73                 	db	115	;'s'
   477  00FC03  20                 	db	32
   478  00FC04  20                 	db	32
   479  00FC05  20                 	db	32
   480  00FC06  20                 	db	32
   481  00FC07  20                 	db	32
   482  00FC08  20                 	db	32
   483  00FC09  00                 	db	0
   484  00FC0A                     STR_104:
   485  00FC0A  4C                 	db	76	;'L'
   486  00FC0B  45                 	db	69	;'E'
   487  00FC0C  56                 	db	86	;'V'
   488  00FC0D  45                 	db	69	;'E'
   489  00FC0E  4C                 	db	76	;'L'
   490  00FC0F  20                 	db	32
   491  00FC10  2D                 	db	45
   492  00FC11  2D                 	db	45
   493  00FC12  20                 	db	32
   494  00FC13  32                 	db	50	;'2'
   495  00FC14  73                 	db	115	;'s'
   496  00FC15  20                 	db	32
   497  00FC16  20                 	db	32
   498  00FC17  20                 	db	32
   499  00FC18  20                 	db	32
   500  00FC19  20                 	db	32
   501  00FC1A  00                 	db	0
   502  00FC1B                     STR_98:
   503  00FC1B  52                 	db	82	;'R'
   504  00FC1C  49                 	db	73	;'I'
   505  00FC1D  47                 	db	71	;'G'
   506  00FC1E  48                 	db	72	;'H'
   507  00FC1F  54                 	db	84	;'T'
   508  00FC20  20                 	db	32
   509  00FC21  2D                 	db	45
   510  00FC22  2D                 	db	45
   511  00FC23  20                 	db	32
   512  00FC24  32                 	db	50	;'2'
   513  00FC25  73                 	db	115	;'s'
   514  00FC26  20                 	db	32
   515  00FC27  20                 	db	32
   516  00FC28  20                 	db	32
   517  00FC29  20                 	db	32
   518  00FC2A  20                 	db	32
   519  00FC2B  00                 	db	0
   520  00FC2C                     STR_97:
   521  00FC2C  4D                 	db	77	;'M'
   522  00FC2D  49                 	db	73	;'I'
   523  00FC2E  44                 	db	68	;'D'
   524  00FC2F  44                 	db	68	;'D'
   525  00FC30  4C                 	db	76	;'L'
   526  00FC31  45                 	db	69	;'E'
   527  00FC32  20                 	db	32
   528  00FC33  2D                 	db	45
   529  00FC34  2D                 	db	45
   530  00FC35  20                 	db	32
   531  00FC36  32                 	db	50	;'2'
   532  00FC37  73                 	db	115	;'s'
   533  00FC38  20                 	db	32
   534  00FC39  20                 	db	32
   535  00FC3A  20                 	db	32
   536  00FC3B  20                 	db	32
   537  00FC3C  00                 	db	0
   538  00FC3D                     STR_114:
   539  00FC3D  44                 	db	68	;'D'
   540  00FC3E  20                 	db	32
   541  00FC3F  57                 	db	87	;'W'
   542  00FC40  49                 	db	73	;'I'
   543  00FC41  4C                 	db	76	;'L'
   544  00FC42  4C                 	db	76	;'L'
   545  00FC43  20                 	db	32
   546  00FC44  52                 	db	82	;'R'
   547  00FC45  45                 	db	69	;'E'
   548  00FC46  54                 	db	84	;'T'
   549  00FC47  55                 	db	85	;'U'
   550  00FC48  52                 	db	82	;'R'
   551  00FC49  4E                 	db	78	;'N'
   552  00FC4A  20                 	db	32
   553  00FC4B  20                 	db	32
   554  00FC4C  20                 	db	32
   555  00FC4D  00                 	db	0
   556  00FC4E                     STR_100:
   557  00FC4E  4D                 	db	77	;'M'
   558  00FC4F  49                 	db	73	;'I'
   559  00FC50  44                 	db	68	;'D'
   560  00FC51  2D                 	db	45
   561  00FC52  4C                 	db	76	;'L'
   562  00FC53  45                 	db	69	;'E'
   563  00FC54  46                 	db	70	;'F'
   564  00FC55  54                 	db	84	;'T'
   565  00FC56  20                 	db	32
   566  00FC57  2D                 	db	45
   567  00FC58  2D                 	db	45
   568  00FC59  20                 	db	32
   569  00FC5A  32                 	db	50	;'2'
   570  00FC5B  73                 	db	115	;'s'
   571  00FC5C  20                 	db	32
   572  00FC5D  20                 	db	32
   573  00FC5E  00                 	db	0
   574  00FC5F                     STR_101:
   575  00FC5F  4D                 	db	77	;'M'
   576  00FC60  49                 	db	73	;'I'
   577  00FC61  44                 	db	68	;'D'
   578  00FC62  2D                 	db	45
   579  00FC63  52                 	db	82	;'R'
   580  00FC64  49                 	db	73	;'I'
   581  00FC65  47                 	db	71	;'G'
   582  00FC66  48                 	db	72	;'H'
   583  00FC67  54                 	db	84	;'T'
   584  00FC68  20                 	db	32
   585  00FC69  2D                 	db	45
   586  00FC6A  2D                 	db	45
   587  00FC6B  20                 	db	32
   588  00FC6C  32                 	db	50	;'2'
   589  00FC6D  73                 	db	115	;'s'
   590  00FC6E  20                 	db	32
   591  00FC6F  00                 	db	0
   592  00FC70                     STR_115:
   593  00FC70  45                 	db	69	;'E'
   594  00FC71  4C                 	db	76	;'L'
   595  00FC72  53                 	db	83	;'S'
   596  00FC73  45                 	db	69	;'E'
   597  00FC74  20                 	db	32
   598  00FC75  54                 	db	84	;'T'
   599  00FC76  4F                 	db	79	;'O'
   600  00FC77  47                 	db	71	;'G'
   601  00FC78  47                 	db	71	;'G'
   602  00FC79  4C                 	db	76	;'L'
   603  00FC7A  45                 	db	69	;'E'
   604  00FC7B  53                 	db	83	;'S'
   605  00FC7C  20                 	db	32
   606  00FC7D  52                 	db	82	;'R'
   607  00FC7E  41                 	db	65	;'A'
   608  00FC7F  35                 	db	53	;'5'
   609  00FC80  00                 	db	0
   610  00FC81                     STR_72:
   611  00FC81  41                 	db	65	;'A'
   612  00FC82  4C                 	db	76	;'L'
   613  00FC83  47                 	db	71	;'G'
   614  00FC84  31                 	db	49	;'1'
   615  00FC85  3A                 	db	58	;':'
   616  00FC86  20                 	db	32
   617  00FC87  39                 	db	57	;'9'
   618  00FC88  20                 	db	32
   619  00FC89  50                 	db	80	;'P'
   620  00FC8A  4F                 	db	79	;'O'
   621  00FC8B  50                 	db	80	;'P'
   622  00FC8C  4E                 	db	78	;'N'
   623  00FC8D  4F                 	db	79	;'O'
   624  00FC8E  54                 	db	84	;'T'
   625  00FC8F  41                 	db	65	;'A'
   626  00FC90  42                 	db	66	;'B'
   627  00FC91  00                 	db	0
   628  00FC92                     STR_68:
   629  00FC92  31                 	db	49	;'1'
   630  00FC93  2E                 	db	46
   631  00FC94  41                 	db	65	;'A'
   632  00FC95  4C                 	db	76	;'L'
   633  00FC96  47                 	db	71	;'G'
   634  00FC97  7C                 	db	124
   635  00FC98  32                 	db	50	;'2'
   636  00FC99  2E                 	db	46
   637  00FC9A  53                 	db	83	;'S'
   638  00FC9B  4E                 	db	78	;'N'
   639  00FC9C  52                 	db	82	;'R'
   640  00FC9D  7C                 	db	124
   641  00FC9E  33                 	db	51	;'3'
   642  00FC9F  2E                 	db	46
   643  00FCA0  41                 	db	65	;'A'
   644  00FCA1  43                 	db	67	;'C'
   645  00FCA2  00                 	db	0
   646  00FCA3                     STR_92:
   647  00FCA3  54                 	db	84	;'T'
   648  00FCA4  53                 	db	83	;'S'
   649  00FCA5  54                 	db	84	;'T'
   650  00FCA6  3A                 	db	58	;':'
   651  00FCA7  20                 	db	32
   652  00FCA8  43                 	db	67	;'C'
   653  00FCA9  4F                 	db	79	;'O'
   654  00FCAA  4E                 	db	78	;'N'
   655  00FCAB  44                 	db	68	;'D'
   656  00FCAC  20                 	db	32
   657  00FCAD  53                 	db	83	;'S'
   658  00FCAE  4F                 	db	79	;'O'
   659  00FCAF  4C                 	db	76	;'L'
   660  00FCB0  4E                 	db	78	;'N'
   661  00FCB1  27                 	db	39
   662  00FCB2  44                 	db	68	;'D'
   663  00FCB3  00                 	db	0
   664  00FCB4                     STR_94:
   665  00FCB4  54                 	db	84	;'T'
   666  00FCB5  53                 	db	83	;'S'
   667  00FCB6  54                 	db	84	;'T'
   668  00FCB7  3A                 	db	58	;':'
   669  00FCB8  20                 	db	32
   670  00FCB9  50                 	db	80	;'P'
   671  00FCBA  55                 	db	85	;'U'
   672  00FCBB  53                 	db	83	;'S'
   673  00FCBC  48                 	db	72	;'H'
   674  00FCBD  20                 	db	32
   675  00FCBE  53                 	db	83	;'S'
   676  00FCBF  4F                 	db	79	;'O'
   677  00FCC0  4C                 	db	76	;'L'
   678  00FCC1  4E                 	db	78	;'N'
   679  00FCC2  27                 	db	39
   680  00FCC3  44                 	db	68	;'D'
   681  00FCC4  00                 	db	0
   682  00FCC5                     STR_69:
   683  00FCC5  34                 	db	52	;'4'
   684  00FCC6  2E                 	db	46
   685  00FCC7  48                 	db	72	;'H'
   686  00FCC8  49                 	db	73	;'I'
   687  00FCC9  7C                 	db	124
   688  00FCCA  35                 	db	53	;'5'
   689  00FCCB  2E                 	db	46
   690  00FCCC  54                 	db	84	;'T'
   691  00FCCD  4F                 	db	79	;'O'
   692  00FCCE  47                 	db	71	;'G'
   693  00FCCF  7C                 	db	124
   694  00FCD0  36                 	db	54	;'6'
   695  00FCD1  2E                 	db	46
   696  00FCD2  45                 	db	69	;'E'
   697  00FCD3  45                 	db	69	;'E'
   698  00FCD4  50                 	db	80	;'P'
   699  00FCD5  00                 	db	0
   700  00FCD6                     STR_110:
   701  00FCD6  54                 	db	84	;'T'
   702  00FCD7  53                 	db	83	;'S'
   703  00FCD8  54                 	db	84	;'T'
   704  00FCD9  3A                 	db	58	;':'
   705  00FCDA  20                 	db	32
   706  00FCDB  42                 	db	66	;'B'
   707  00FCDC  4F                 	db	79	;'O'
   708  00FCDD  54                 	db	84	;'T'
   709  00FCDE  48                 	db	72	;'H'
   710  00FCDF  20                 	db	32
   711  00FCE0  53                 	db	83	;'S'
   712  00FCE1  45                 	db	69	;'E'
   713  00FCE2  52                 	db	82	;'R'
   714  00FCE3  56                 	db	86	;'V'
   715  00FCE4  4F                 	db	79	;'O'
   716  00FCE5  53                 	db	83	;'S'
   717  00FCE6  00                 	db	0
   718  00FCE7                     STR_41:
   719  00FCE7  4C                 	db	76	;'L'
   720  00FCE8  4F                 	db	79	;'O'
   721  00FCE9  47                 	db	71	;'G'
   722  00FCEA  20                 	db	32
   723  00FCEB  31                 	db	49	;'1'
   724  00FCEC  20                 	db	32
   725  00FCED  20                 	db	32
   726  00FCEE  20                 	db	32
   727  00FCEF  20                 	db	32
   728  00FCF0  20                 	db	32
   729  00FCF1  20                 	db	32
   730  00FCF2  20                 	db	32
   731  00FCF3  20                 	db	32
   732  00FCF4  20                 	db	32
   733  00FCF5  20                 	db	32
   734  00FCF6  20                 	db	32
   735  00FCF7  00                 	db	0
   736  00FCF8                     STR_40:
   737  00FCF8  4C                 	db	76	;'L'
   738  00FCF9  4F                 	db	79	;'O'
   739  00FCFA  47                 	db	71	;'G'
   740  00FCFB  20                 	db	32
   741  00FCFC  32                 	db	50	;'2'
   742  00FCFD  20                 	db	32
   743  00FCFE  20                 	db	32
   744  00FCFF  20                 	db	32
   745  00FD00  20                 	db	32
   746  00FD01  20                 	db	32
   747  00FD02  20                 	db	32
   748  00FD03  20                 	db	32
   749  00FD04  20                 	db	32
   750  00FD05  20                 	db	32
   751  00FD06  20                 	db	32
   752  00FD07  20                 	db	32
   753  00FD08  00                 	db	0
   754  00FD09                     STR_44:
   755  00FD09  4C                 	db	76	;'L'
   756  00FD0A  4F                 	db	79	;'O'
   757  00FD0B  47                 	db	71	;'G'
   758  00FD0C  20                 	db	32
   759  00FD0D  33                 	db	51	;'3'
   760  00FD0E  20                 	db	32
   761  00FD0F  20                 	db	32
   762  00FD10  20                 	db	32
   763  00FD11  20                 	db	32
   764  00FD12  20                 	db	32
   765  00FD13  20                 	db	32
   766  00FD14  20                 	db	32
   767  00FD15  20                 	db	32
   768  00FD16  20                 	db	32
   769  00FD17  20                 	db	32
   770  00FD18  20                 	db	32
   771  00FD19  00                 	db	0
   772  00FD1A                     STR_48:
   773  00FD1A  4C                 	db	76	;'L'
   774  00FD1B  4F                 	db	79	;'O'
   775  00FD1C  47                 	db	71	;'G'
   776  00FD1D  20                 	db	32
   777  00FD1E  34                 	db	52	;'4'
   778  00FD1F  20                 	db	32
   779  00FD20  20                 	db	32
   780  00FD21  20                 	db	32
   781  00FD22  20                 	db	32
   782  00FD23  20                 	db	32
   783  00FD24  20                 	db	32
   784  00FD25  20                 	db	32
   785  00FD26  20                 	db	32
   786  00FD27  20                 	db	32
   787  00FD28  20                 	db	32
   788  00FD29  20                 	db	32
   789  00FD2A  00                 	db	0
   790  00FD2B                     STR_36:
   791  00FD2B  33                 	db	51	;'3'
   792  00FD2C  2E                 	db	46
   793  00FD2D  20                 	db	32
   794  00FD2E  4C                 	db	76	;'L'
   795  00FD2F  4F                 	db	79	;'O'
   796  00FD30  47                 	db	71	;'G'
   797  00FD31  53                 	db	83	;'S'
   798  00FD32  20                 	db	32
   799  00FD33  20                 	db	32
   800  00FD34  20                 	db	32
   801  00FD35  20                 	db	32
   802  00FD36  20                 	db	32
   803  00FD37  20                 	db	32
   804  00FD38  20                 	db	32
   805  00FD39  20                 	db	32
   806  00FD3A  20                 	db	32
   807  00FD3B  00                 	db	0
   808  00FD3C                     STR_32:
   809  00FD3C  32                 	db	50	;'2'
   810  00FD3D  2E                 	db	46
   811  00FD3E  20                 	db	32
   812  00FD3F  53                 	db	83	;'S'
   813  00FD40  4F                 	db	79	;'O'
   814  00FD41  52                 	db	82	;'R'
   815  00FD42  54                 	db	84	;'T'
   816  00FD43  20                 	db	32
   817  00FD44  20                 	db	32
   818  00FD45  20                 	db	32
   819  00FD46  20                 	db	32
   820  00FD47  20                 	db	32
   821  00FD48  20                 	db	32
   822  00FD49  20                 	db	32
   823  00FD4A  20                 	db	32
   824  00FD4B  20                 	db	32
   825  00FD4C  00                 	db	0
   826  00FD4D                     STR_33:
   827  00FD4D  31                 	db	49	;'1'
   828  00FD4E  2E                 	db	46
   829  00FD4F  20                 	db	32
   830  00FD50  44                 	db	68	;'D'
   831  00FD51  41                 	db	65	;'A'
   832  00FD52  54                 	db	84	;'T'
   833  00FD53  45                 	db	69	;'E'
   834  00FD54  2F                 	db	47
   835  00FD55  54                 	db	84	;'T'
   836  00FD56  49                 	db	73	;'I'
   837  00FD57  4D                 	db	77	;'M'
   838  00FD58  45                 	db	69	;'E'
   839  00FD59  20                 	db	32
   840  00FD5A  20                 	db	32
   841  00FD5B  20                 	db	32
   842  00FD5C  20                 	db	32
   843  00FD5D  00                 	db	0
   844  00FD5E                     STR_24:
   845  00FD5E  20                 	db	32
   846  00FD5F  2D                 	db	45
   847  00FD60  2D                 	db	45
   848  00FD61  20                 	db	32
   849  00FD62  50                 	db	80	;'P'
   850  00FD63  4F                 	db	79	;'O'
   851  00FD64  50                 	db	80	;'P'
   852  00FD65  20                 	db	32
   853  00FD66  20                 	db	32
   854  00FD67  43                 	db	67	;'C'
   855  00FD68  41                 	db	65	;'A'
   856  00FD69  4E                 	db	78	;'N'
   857  00FD6A  20                 	db	32
   858  00FD6B  2D                 	db	45
   859  00FD6C  2D                 	db	45
   860  00FD6D  20                 	db	32
   861  00FD6E  00                 	db	0
   862  00FD6F                     STR_26:
   863  00FD6F  20                 	db	32
   864  00FD70  2D                 	db	45
   865  00FD71  2D                 	db	45
   866  00FD72  20                 	db	32
   867  00FD73  53                 	db	83	;'S'
   868  00FD74  4F                 	db	79	;'O'
   869  00FD75  55                 	db	85	;'U'
   870  00FD76  50                 	db	80	;'P'
   871  00FD77  20                 	db	32
   872  00FD78  43                 	db	67	;'C'
   873  00FD79  41                 	db	65	;'A'
   874  00FD7A  4E                 	db	78	;'N'
   875  00FD7B  20                 	db	32
   876  00FD7C  2D                 	db	45
   877  00FD7D  2D                 	db	45
   878  00FD7E  20                 	db	32
   879  00FD7F  00                 	db	0
   880  00FD80                     STR_28:
   881  00FD80  2D                 	db	45
   882  00FD81  2D                 	db	45
   883  00FD82  20                 	db	32
   884  00FD83  54                 	db	84	;'T'
   885  00FD84  4F                 	db	79	;'O'
   886  00FD85  54                 	db	84	;'T'
   887  00FD86  41                 	db	65	;'A'
   888  00FD87  4C                 	db	76	;'L'
   889  00FD88  20                 	db	32
   890  00FD89  43                 	db	67	;'C'
   891  00FD8A  41                 	db	65	;'A'
   892  00FD8B  4E                 	db	78	;'N'
   893  00FD8C  53                 	db	83	;'S'
   894  00FD8D  20                 	db	32
   895  00FD8E  2D                 	db	45
   896  00FD8F  2D                 	db	45
   897  00FD90  00                 	db	0
   898  00FD91                     STR_39:
   899  00FD91  4C                 	db	76	;'L'
   900  00FD92  4F                 	db	79	;'O'
   901  00FD93  47                 	db	71	;'G'
   902  00FD94  20                 	db	32
   903  00FD95  31                 	db	49	;'1'
   904  00FD96  20                 	db	32
   905  00FD97  20                 	db	32
   906  00FD98  20                 	db	32
   907  00FD99  20                 	db	32
   908  00FD9A  20                 	db	32
   909  00FD9B  20                 	db	32
   910  00FD9C  20                 	db	32
   911  00FD9D  20                 	db	32
   912  00FD9E  20                 	db	32
   913  00FD9F  20                 	db	32
   914  00FDA0  3C                 	db	60	;'<'
   915  00FDA1  00                 	db	0
   916  00FDA2                     STR_42:
   917  00FDA2  4C                 	db	76	;'L'
   918  00FDA3  4F                 	db	79	;'O'
   919  00FDA4  47                 	db	71	;'G'
   920  00FDA5  20                 	db	32
   921  00FDA6  32                 	db	50	;'2'
   922  00FDA7  20                 	db	32
   923  00FDA8  20                 	db	32
   924  00FDA9  20                 	db	32
   925  00FDAA  20                 	db	32
   926  00FDAB  20                 	db	32
   927  00FDAC  20                 	db	32
   928  00FDAD  20                 	db	32
   929  00FDAE  20                 	db	32
   930  00FDAF  20                 	db	32
   931  00FDB0  20                 	db	32
   932  00FDB1  3C                 	db	60	;'<'
   933  00FDB2  00                 	db	0
   934  00FDB3                     STR_46:
   935  00FDB3  4C                 	db	76	;'L'
   936  00FDB4  4F                 	db	79	;'O'
   937  00FDB5  47                 	db	71	;'G'
   938  00FDB6  20                 	db	32
   939  00FDB7  33                 	db	51	;'3'
   940  00FDB8  20                 	db	32
   941  00FDB9  20                 	db	32
   942  00FDBA  20                 	db	32
   943  00FDBB  20                 	db	32
   944  00FDBC  20                 	db	32
   945  00FDBD  20                 	db	32
   946  00FDBE  20                 	db	32
   947  00FDBF  20                 	db	32
   948  00FDC0  20                 	db	32
   949  00FDC1  20                 	db	32
   950  00FDC2  3C                 	db	60	;'<'
   951  00FDC3  00                 	db	0
   952  00FDC4                     STR_50:
   953  00FDC4  4C                 	db	76	;'L'
   954  00FDC5  4F                 	db	79	;'O'
   955  00FDC6  47                 	db	71	;'G'
   956  00FDC7  20                 	db	32
   957  00FDC8  34                 	db	52	;'4'
   958  00FDC9  20                 	db	32
   959  00FDCA  20                 	db	32
   960  00FDCB  20                 	db	32
   961  00FDCC  20                 	db	32
   962  00FDCD  20                 	db	32
   963  00FDCE  20                 	db	32
   964  00FDCF  20                 	db	32
   965  00FDD0  20                 	db	32
   966  00FDD1  20                 	db	32
   967  00FDD2  20                 	db	32
   968  00FDD3  3C                 	db	60	;'<'
   969  00FDD4  00                 	db	0
   970  00FDD5                     STR_38:
   971  00FDD5  33                 	db	51	;'3'
   972  00FDD6  2E                 	db	46
   973  00FDD7  20                 	db	32
   974  00FDD8  4C                 	db	76	;'L'
   975  00FDD9  4F                 	db	79	;'O'
   976  00FDDA  47                 	db	71	;'G'
   977  00FDDB  53                 	db	83	;'S'
   978  00FDDC  20                 	db	32
   979  00FDDD  20                 	db	32
   980  00FDDE  20                 	db	32
   981  00FDDF  20                 	db	32
   982  00FDE0  20                 	db	32
   983  00FDE1  20                 	db	32
   984  00FDE2  20                 	db	32
   985  00FDE3  20                 	db	32
   986  00FDE4  3C                 	db	60	;'<'
   987  00FDE5  00                 	db	0
   988  00FDE6                     STR_34:
   989  00FDE6  32                 	db	50	;'2'
   990  00FDE7  2E                 	db	46
   991  00FDE8  20                 	db	32
   992  00FDE9  53                 	db	83	;'S'
   993  00FDEA  4F                 	db	79	;'O'
   994  00FDEB  52                 	db	82	;'R'
   995  00FDEC  54                 	db	84	;'T'
   996  00FDED  20                 	db	32
   997  00FDEE  20                 	db	32
   998  00FDEF  20                 	db	32
   999  00FDF0  20                 	db	32
  1000  00FDF1  20                 	db	32
  1001  00FDF2  20                 	db	32
  1002  00FDF3  20                 	db	32
  1003  00FDF4  20                 	db	32
  1004  00FDF5  3C                 	db	60	;'<'
  1005  00FDF6  00                 	db	0
  1006  00FDF7                     STR_31:
  1007  00FDF7  31                 	db	49	;'1'
  1008  00FDF8  2E                 	db	46
  1009  00FDF9  20                 	db	32
  1010  00FDFA  44                 	db	68	;'D'
  1011  00FDFB  41                 	db	65	;'A'
  1012  00FDFC  54                 	db	84	;'T'
  1013  00FDFD  45                 	db	69	;'E'
  1014  00FDFE  2F                 	db	47
  1015  00FDFF  54                 	db	84	;'T'
  1016  00FE00  49                 	db	73	;'I'
  1017  00FE01  4D                 	db	77	;'M'
  1018  00FE02  45                 	db	69	;'E'
  1019  00FE03  20                 	db	32
  1020  00FE04  20                 	db	32
  1021  00FE05  20                 	db	32
  1022  00FE06  3C                 	db	60	;'<'
  1023  00FE07  00                 	db	0
  1024  00FE08                     STR_6:
  1025  00FE08  50                 	db	80	;'P'
  1026  00FE09  41                 	db	65	;'A'
  1027  00FE0A  55                 	db	85	;'U'
  1028  00FE0B  53                 	db	83	;'S'
  1029  00FE0C  45                 	db	69	;'E'
  1030  00FE0D  20                 	db	32
  1031  00FE0E  3C                 	db	60	;'<'
  1032  00FE0F  20                 	db	32
  1033  00FE10  7C                 	db	124
  1034  00FE11  20                 	db	32
  1035  00FE12  42                 	db	66	;'B'
  1036  00FE13  41                 	db	65	;'A'
  1037  00FE14  43                 	db	67	;'C'
  1038  00FE15  4B                 	db	75	;'K'
  1039  00FE16  20                 	db	32
  1040  00FE17  3E                 	db	62	;'>'
  1041  00FE18  00                 	db	0
  1042  00FE19                     STR_30:
  1043  00FE19  50                 	db	80	;'P'
  1044  00FE1A  55                 	db	85	;'U'
  1045  00FE1B  53                 	db	83	;'S'
  1046  00FE1C  48                 	db	72	;'H'
  1047  00FE1D  20                 	db	32
  1048  00FE1E  54                 	db	84	;'T'
  1049  00FE1F  4F                 	db	79	;'O'
  1050  00FE20  20                 	db	32
  1051  00FE21  43                 	db	67	;'C'
  1052  00FE22  4F                 	db	79	;'O'
  1053  00FE23  4E                 	db	78	;'N'
  1054  00FE24  54                 	db	84	;'T'
  1055  00FE25  49                 	db	73	;'I'
  1056  00FE26  4E                 	db	78	;'N'
  1057  00FE27  55                 	db	85	;'U'
  1058  00FE28  45                 	db	69	;'E'
  1059  00FE29  00                 	db	0
  1060  00FE2A                     STR_83:
  1061  00FE2A  4D                 	db	77	;'M'
  1062  00FE2B  41                 	db	65	;'A'
  1063  00FE2C  47                 	db	71	;'G'
  1064  00FE2D  5F                 	db	95	;'_'
  1065  00FE2E  73                 	db	115	;'s'
  1066  00FE2F  69                 	db	105	;'i'
  1067  00FE30  67                 	db	103	;'g'
  1068  00FE31  6E                 	db	110	;'n'
  1069  00FE32  61                 	db	97	;'a'
  1070  00FE33  6C                 	db	108	;'l'
  1071  00FE34  3A                 	db	58	;':'
  1072  00FE35  20                 	db	32
  1073  00FE36  25                 	db	37
  1074  00FE37  64                 	db	100	;'d'
  1075  00FE38  20                 	db	32
  1076  00FE39  00                 	db	0
  1077  00FE3A                     STR_103:
  1078  00FE3A  54                 	db	84	;'T'
  1079  00FE3B  53                 	db	83	;'S'
  1080  00FE3C  54                 	db	84	;'T'
  1081  00FE3D  3A                 	db	58	;':'
  1082  00FE3E  20                 	db	32
  1083  00FE3F  54                 	db	84	;'T'
  1084  00FE40  49                 	db	73	;'I'
  1085  00FE41  4C                 	db	76	;'L'
  1086  00FE42  54                 	db	84	;'T'
  1087  00FE43  20                 	db	32
  1088  00FE44  53                 	db	83	;'S'
  1089  00FE45  45                 	db	69	;'E'
  1090  00FE46  52                 	db	82	;'R'
  1091  00FE47  56                 	db	86	;'V'
  1092  00FE48  4F                 	db	79	;'O'
  1093  00FE49  00                 	db	0
  1094  00FE4A                     STR_4:
  1095  00FE4A  44                 	db	68	;'D'
  1096  00FE4B  49                 	db	73	;'I'
  1097  00FE4C  44                 	db	68	;'D'
  1098  00FE4D  4E                 	db	78	;'N'
  1099  00FE4E  27                 	db	39
  1100  00FE4F  54                 	db	84	;'T'
  1101  00FE50  20                 	db	32
  1102  00FE51  43                 	db	67	;'C'
  1103  00FE52  4F                 	db	79	;'O'
  1104  00FE53  4D                 	db	77	;'M'
  1105  00FE54  50                 	db	80	;'P'
  1106  00FE55  4C                 	db	76	;'L'
  1107  00FE56  45                 	db	69	;'E'
  1108  00FE57  54                 	db	84	;'T'
  1109  00FE58  45                 	db	69	;'E'
  1110  00FE59  00                 	db	0
  1111  00FE5A                     STR_80:
  1112  00FE5A  49                 	db	73	;'I'
  1113  00FE5B  52                 	db	82	;'R'
  1114  00FE5C  5F                 	db	95	;'_'
  1115  00FE5D  73                 	db	115	;'s'
  1116  00FE5E  69                 	db	105	;'i'
  1117  00FE5F  67                 	db	103	;'g'
  1118  00FE60  6E                 	db	110	;'n'
  1119  00FE61  61                 	db	97	;'a'
  1120  00FE62  6C                 	db	108	;'l'
  1121  00FE63  3A                 	db	58	;':'
  1122  00FE64  20                 	db	32
  1123  00FE65  25                 	db	37
  1124  00FE66  64                 	db	100	;'d'
  1125  00FE67  20                 	db	32
  1126  00FE68  00                 	db	0
  1127  00FE69                     STR_109:
  1128  00FE69  43                 	db	67	;'C'
  1129  00FE6A  41                 	db	65	;'A'
  1130  00FE6B  4D                 	db	77	;'M'
  1131  00FE6C  20                 	db	32
  1132  00FE6D  44                 	db	68	;'D'
  1133  00FE6E  57                 	db	87	;'W'
  1134  00FE6F  4E                 	db	78	;'N'
  1135  00FE70  20                 	db	32
  1136  00FE71  7C                 	db	124
  1137  00FE72  52                 	db	82	;'R'
  1138  00FE73  43                 	db	67	;'C'
  1139  00FE74  30                 	db	48	;'0'
  1140  00FE75  3D                 	db	61	;'='
  1141  00FE76  30                 	db	48	;'0'
  1142  00FE77  00                 	db	0
  1143  00FE78                     STR_108:
  1144  00FE78  43                 	db	67	;'C'
  1145  00FE79  41                 	db	65	;'A'
  1146  00FE7A  4D                 	db	77	;'M'
  1147  00FE7B  20                 	db	32
  1148  00FE7C  55                 	db	85	;'U'
  1149  00FE7D  50                 	db	80	;'P'
  1150  00FE7E  20                 	db	32
  1151  00FE7F  20                 	db	32
  1152  00FE80  7C                 	db	124
  1153  00FE81  52                 	db	82	;'R'
  1154  00FE82  43                 	db	67	;'C'
  1155  00FE83  30                 	db	48	;'0'
  1156  00FE84  3D                 	db	61	;'='
  1157  00FE85  31                 	db	49	;'1'
  1158  00FE86  00                 	db	0
  1159  00FE87                     STR_82:
  1160  00FE87  54                 	db	84	;'T'
  1161  00FE88  53                 	db	83	;'S'
  1162  00FE89  54                 	db	84	;'T'
  1163  00FE8A  3A                 	db	58	;':'
  1164  00FE8B  20                 	db	32
  1165  00FE8C  4D                 	db	77	;'M'
  1166  00FE8D  41                 	db	65	;'A'
  1167  00FE8E  47                 	db	71	;'G'
  1168  00FE8F  4E                 	db	78	;'N'
  1169  00FE90  45                 	db	69	;'E'
  1170  00FE91  54                 	db	84	;'T'
  1171  00FE92  49                 	db	73	;'I'
  1172  00FE93  53                 	db	83	;'S'
  1173  00FE94  4D                 	db	77	;'M'
  1174  00FE95  00                 	db	0
  1175  00FE96                     STR_107:
  1176  00FE96  54                 	db	84	;'T'
  1177  00FE97  53                 	db	83	;'S'
  1178  00FE98  54                 	db	84	;'T'
  1179  00FE99  3A                 	db	58	;':'
  1180  00FE9A  20                 	db	32
  1181  00FE9B  43                 	db	67	;'C'
  1182  00FE9C  41                 	db	65	;'A'
  1183  00FE9D  4D                 	db	77	;'M'
  1184  00FE9E  20                 	db	32
  1185  00FE9F  53                 	db	83	;'S'
  1186  00FEA0  45                 	db	69	;'E'
  1187  00FEA1  52                 	db	82	;'R'
  1188  00FEA2  56                 	db	86	;'V'
  1189  00FEA3  4F                 	db	79	;'O'
  1190  00FEA4  00                 	db	0
  1191  00FEA5                     STR_96:
  1192  00FEA5  54                 	db	84	;'T'
  1193  00FEA6  53                 	db	83	;'S'
  1194  00FEA7  54                 	db	84	;'T'
  1195  00FEA8  3A                 	db	58	;':'
  1196  00FEA9  20                 	db	32
  1197  00FEAA  50                 	db	80	;'P'
  1198  00FEAB  41                 	db	65	;'A'
  1199  00FEAC  4E                 	db	78	;'N'
  1200  00FEAD  20                 	db	32
  1201  00FEAE  53                 	db	83	;'S'
  1202  00FEAF  45                 	db	69	;'E'
  1203  00FEB0  52                 	db	82	;'R'
  1204  00FEB1  56                 	db	86	;'V'
  1205  00FEB2  4F                 	db	79	;'O'
  1206  00FEB3  00                 	db	0
  1207  00FEB4                     STR_75:
  1208  00FEB4  41                 	db	65	;'A'
  1209  00FEB5  4C                 	db	76	;'L'
  1210  00FEB6  47                 	db	71	;'G'
  1211  00FEB7  34                 	db	52	;'4'
  1212  00FEB8  3A                 	db	58	;':'
  1213  00FEB9  20                 	db	32
  1214  00FEBA  41                 	db	65	;'A'
  1215  00FEBB  4C                 	db	76	;'L'
  1216  00FEBC  4C                 	db	76	;'L'
  1217  00FEBD  20                 	db	32
  1218  00FEBE  43                 	db	67	;'C'
  1219  00FEBF  41                 	db	65	;'A'
  1220  00FEC0  4E                 	db	78	;'N'
  1221  00FEC1  53                 	db	83	;'S'
  1222  00FEC2  00                 	db	0
  1223  00FEC3                     STR_90:
  1224  00FEC3  54                 	db	84	;'T'
  1225  00FEC4  53                 	db	83	;'S'
  1226  00FEC5  54                 	db	84	;'T'
  1227  00FEC6  3A                 	db	58	;':'
  1228  00FEC7  20                 	db	32
  1229  00FEC8  44                 	db	68	;'D'
  1230  00FEC9  43                 	db	67	;'C'
  1231  00FECA  20                 	db	32
  1232  00FECB  4D                 	db	77	;'M'
  1233  00FECC  4F                 	db	79	;'O'
  1234  00FECD  54                 	db	84	;'T'
  1235  00FECE  4F                 	db	79	;'O'
  1236  00FECF  52                 	db	82	;'R'
  1237  00FED0  53                 	db	83	;'S'
  1238  00FED1  00                 	db	0
  1239  00FED2                     STR_70:
  1240  00FED2  41                 	db	65	;'A'
  1241  00FED3  4C                 	db	76	;'L'
  1242  00FED4  47                 	db	71	;'G'
  1243  00FED5  4F                 	db	79	;'O'
  1244  00FED6  52                 	db	82	;'R'
  1245  00FED7  49                 	db	73	;'I'
  1246  00FED8  54                 	db	84	;'T'
  1247  00FED9  48                 	db	72	;'H'
  1248  00FEDA  4D                 	db	77	;'M'
  1249  00FEDB  20                 	db	32
  1250  00FEDC  54                 	db	84	;'T'
  1251  00FEDD  45                 	db	69	;'E'
  1252  00FEDE  53                 	db	83	;'S'
  1253  00FEDF  54                 	db	84	;'T'
  1254  00FEE0  00                 	db	0
  1255  00FEE1                     STR_91:
  1256  00FEE1  50                 	db	80	;'P'
  1257  00FEE2  49                 	db	73	;'I'
  1258  00FEE3  4E                 	db	78	;'N'
  1259  00FEE4  20                 	db	32
  1260  00FEE5  52                 	db	82	;'R'
  1261  00FEE6  41                 	db	65	;'A'
  1262  00FEE7  35                 	db	53	;'5'
  1263  00FEE8  20                 	db	32
  1264  00FEE9  48                 	db	72	;'H'
  1265  00FEEA  49                 	db	73	;'I'
  1266  00FEEB  47                 	db	71	;'G'
  1267  00FEEC  48                 	db	72	;'H'
  1268  00FEED  2E                 	db	46
  1269  00FEEE  00                 	db	0
  1270  00FEEF                     STR_73:
  1271  00FEEF  41                 	db	65	;'A'
  1272  00FEF0  4C                 	db	76	;'L'
  1273  00FEF1  47                 	db	71	;'G'
  1274  00FEF2  32                 	db	50	;'2'
  1275  00FEF3  3A                 	db	58	;':'
  1276  00FEF4  20                 	db	32
  1277  00FEF5  31                 	db	49	;'1'
  1278  00FEF6  32                 	db	50	;'2'
  1279  00FEF7  20                 	db	32
  1280  00FEF8  43                 	db	67	;'C'
  1281  00FEF9  41                 	db	65	;'A'
  1282  00FEFA  4E                 	db	78	;'N'
  1283  00FEFB  53                 	db	83	;'S'
  1284  00FEFC  00                 	db	0
  1285  00FEFD                     STR_76:
  1286  00FEFD  41                 	db	65	;'A'
  1287  00FEFE  4C                 	db	76	;'L'
  1288  00FEFF  47                 	db	71	;'G'
  1289  00FF00  35                 	db	53	;'5'
  1290  00FF01  3A                 	db	58	;':'
  1291  00FF02  20                 	db	32
  1292  00FF03  4E                 	db	78	;'N'
  1293  00FF04  4F                 	db	79	;'O'
  1294  00FF05  20                 	db	32
  1295  00FF06  43                 	db	67	;'C'
  1296  00FF07  41                 	db	65	;'A'
  1297  00FF08  4E                 	db	78	;'N'
  1298  00FF09  53                 	db	83	;'S'
  1299  00FF0A  00                 	db	0
  1300  00FF0B                     STR_71:
  1301  00FF0B  50                 	db	80	;'P'
  1302  00FF0C  55                 	db	85	;'U'
  1303  00FF0D  53                 	db	83	;'S'
  1304  00FF0E  48                 	db	72	;'H'
  1305  00FF0F  20                 	db	32
  1306  00FF10  54                 	db	84	;'T'
  1307  00FF11  4F                 	db	79	;'O'
  1308  00FF12  20                 	db	32
  1309  00FF13  53                 	db	83	;'S'
  1310  00FF14  54                 	db	84	;'T'
  1311  00FF15  41                 	db	65	;'A'
  1312  00FF16  52                 	db	82	;'R'
  1313  00FF17  54                 	db	84	;'T'
  1314  00FF18  00                 	db	0
  1315  00FF19                     STR_23:
  1316  00FF19  25                 	db	37
  1317  00FF1A  64                 	db	100	;'d'
  1318  00FF1B  20                 	db	32
  1319  00FF1C  4D                 	db	77	;'M'
  1320  00FF1D  49                 	db	73	;'I'
  1321  00FF1E  4E                 	db	78	;'N'
  1322  00FF1F  20                 	db	32
  1323  00FF20  25                 	db	37
  1324  00FF21  64                 	db	100	;'d'
  1325  00FF22  20                 	db	32
  1326  00FF23  53                 	db	83	;'S'
  1327  00FF24  45                 	db	69	;'E'
  1328  00FF25  43                 	db	67	;'C'
  1329  00FF26  00                 	db	0
  1330  00FF27                     STR_2:
  1331  00FF27  54                 	db	84	;'T'
  1332  00FF28  49                 	db	73	;'I'
  1333  00FF29  4D                 	db	77	;'M'
  1334  00FF2A  45                 	db	69	;'E'
  1335  00FF2B  3A                 	db	58	;':'
  1336  00FF2C  20                 	db	32
  1337  00FF2D  25                 	db	37
  1338  00FF2E  64                 	db	100	;'d'
  1339  00FF2F  3A                 	db	58	;':'
  1340  00FF30  25                 	db	37
  1341  00FF31  30                 	db	48	;'0'
  1342  00FF32  32                 	db	50	;'2'
  1343  00FF33  64                 	db	100	;'d'
  1344  00FF34  00                 	db	0
  1345  00FF35                     STR_79:
  1346  00FF35  54                 	db	84	;'T'
  1347  00FF36  53                 	db	83	;'S'
  1348  00FF37  54                 	db	84	;'T'
  1349  00FF38  3A                 	db	58	;':'
  1350  00FF39  20                 	db	32
  1351  00FF3A  49                 	db	73	;'I'
  1352  00FF3B  52                 	db	82	;'R'
  1353  00FF3C  20                 	db	32
  1354  00FF3D  53                 	db	83	;'S'
  1355  00FF3E  4E                 	db	78	;'N'
  1356  00FF3F  53                 	db	83	;'S'
  1357  00FF40  52                 	db	82	;'R'
  1358  00FF41  00                 	db	0
  1359  00FF42                     STR_65:
  1360  00FF42  54                 	db	84	;'T'
  1361  00FF43  49                 	db	73	;'I'
  1362  00FF44  4D                 	db	77	;'M'
  1363  00FF45  45                 	db	69	;'E'
  1364  00FF46  20                 	db	32
  1365  00FF47  25                 	db	37
  1366  00FF48  64                 	db	100	;'d'
  1367  00FF49  3A                 	db	58	;':'
  1368  00FF4A  25                 	db	37
  1369  00FF4B  30                 	db	48	;'0'
  1370  00FF4C  32                 	db	50	;'2'
  1371  00FF4D  64                 	db	100	;'d'
  1372  00FF4E  00                 	db	0
  1373  00FF4F                     STR_74:
  1374  00FF4F  41                 	db	65	;'A'
  1375  00FF50  4C                 	db	76	;'L'
  1376  00FF51  47                 	db	71	;'G'
  1377  00FF52  33                 	db	51	;'3'
  1378  00FF53  3A                 	db	58	;':'
  1379  00FF54  20                 	db	32
  1380  00FF55  31                 	db	49	;'1'
  1381  00FF56  20                 	db	32
  1382  00FF57  43                 	db	67	;'C'
  1383  00FF58  41                 	db	65	;'A'
  1384  00FF59  4E                 	db	78	;'N'
  1385  00FF5A  00                 	db	0
  1386  00FF5B                     STR_93:
  1387  00FF5B  50                 	db	80	;'P'
  1388  00FF5C  49                 	db	73	;'I'
  1389  00FF5D  4E                 	db	78	;'N'
  1390  00FF5E  20                 	db	32
  1391  00FF5F  52                 	db	82	;'R'
  1392  00FF60  41                 	db	65	;'A'
  1393  00FF61  33                 	db	51	;'3'
  1394  00FF62  2E                 	db	46
  1395  00FF63  2E                 	db	46
  1396  00FF64  2E                 	db	46
  1397  00FF65  00                 	db	0
  1398  00FF66                     STR_95:
  1399  00FF66  50                 	db	80	;'P'
  1400  00FF67  49                 	db	73	;'I'
  1401  00FF68  4E                 	db	78	;'N'
  1402  00FF69  20                 	db	32
  1403  00FF6A  52                 	db	82	;'R'
  1404  00FF6B  41                 	db	65	;'A'
  1405  00FF6C  34                 	db	52	;'4'
  1406  00FF6D  2E                 	db	46
  1407  00FF6E  2E                 	db	46
  1408  00FF6F  2E                 	db	46
  1409  00FF70  00                 	db	0
  1410  00FF71                     STR_113:
  1411  00FF71  50                 	db	80	;'P'
  1412  00FF72  55                 	db	85	;'U'
  1413  00FF73  53                 	db	83	;'S'
  1414  00FF74  48                 	db	72	;'H'
  1415  00FF75  45                 	db	69	;'E'
  1416  00FF76  52                 	db	82	;'R'
  1417  00FF77  20                 	db	32
  1418  00FF78  54                 	db	84	;'T'
  1419  00FF79  53                 	db	83	;'S'
  1420  00FF7A  54                 	db	84	;'T'
  1421  00FF7B  00                 	db	0
  1422  00FF7C                     STR_64:
  1423  00FF7C  53                 	db	83	;'S'
  1424  00FF7D  4F                 	db	79	;'O'
  1425  00FF7E  52                 	db	82	;'R'
  1426  00FF7F  54                 	db	84	;'T'
  1427  00FF80  49                 	db	73	;'I'
  1428  00FF81  4E                 	db	78	;'N'
  1429  00FF82  47                 	db	71	;'G'
  1430  00FF83  2E                 	db	46
  1431  00FF84  2E                 	db	46
  1432  00FF85  2E                 	db	46
  1433  00FF86  00                 	db	0
  1434  00FF87                     STR_84:
  1435  00FF87  54                 	db	84	;'T'
  1436  00FF88  53                 	db	83	;'S'
  1437  00FF89  54                 	db	84	;'T'
  1438  00FF8A  3A                 	db	58	;':'
  1439  00FF8B  20                 	db	32
  1440  00FF8C  43                 	db	67	;'C'
  1441  00FF8D  4F                 	db	79	;'O'
  1442  00FF8E  4E                 	db	78	;'N'
  1443  00FF8F  44                 	db	68	;'D'
  1444  00FF90  00                 	db	0
  1445  00FF91                     STR_88:
  1446  00FF91  41                 	db	65	;'A'
  1447  00FF92  43                 	db	67	;'C'
  1448  00FF93  54                 	db	84	;'T'
  1449  00FF94  55                 	db	85	;'U'
  1450  00FF95  41                 	db	65	;'A'
  1451  00FF96  54                 	db	84	;'T'
  1452  00FF97  4F                 	db	79	;'O'
  1453  00FF98  52                 	db	82	;'R'
  1454  00FF99  53                 	db	83	;'S'
  1455  00FF9A  00                 	db	0
  1456  00FF9B                     STR_22:
  1457  00FF9B  44                 	db	68	;'D'
  1458  00FF9C  55                 	db	85	;'U'
  1459  00FF9D  52                 	db	82	;'R'
  1460  00FF9E  41                 	db	65	;'A'
  1461  00FF9F  54                 	db	84	;'T'
  1462  00FFA0  49                 	db	73	;'I'
  1463  00FFA1  4F                 	db	79	;'O'
  1464  00FFA2  4E                 	db	78	;'N'
  1465  00FFA3  3A                 	db	58	;':'
  1466  00FFA4  00                 	db	0
  1467  00FFA5                     STR_86:
  1468  00FFA5  43                 	db	67	;'C'
  1469  00FFA6  4F                 	db	79	;'O'
  1470  00FFA7  4E                 	db	78	;'N'
  1471  00FFA8  44                 	db	68	;'D'
  1472  00FFA9  3A                 	db	58	;':'
  1473  00FFAA  20                 	db	32
  1474  00FFAB  25                 	db	37
  1475  00FFAC  64                 	db	100	;'d'
  1476  00FFAD  00                 	db	0
  1477  00FFAE                     STR_77:
  1478  00FFAE  53                 	db	83	;'S'
  1479  00FFAF  45                 	db	69	;'E'
  1480  00FFB0  4E                 	db	78	;'N'
  1481  00FFB1  53                 	db	83	;'S'
  1482  00FFB2  4F                 	db	79	;'O'
  1483  00FFB3  52                 	db	82	;'R'
  1484  00FFB4  53                 	db	83	;'S'
  1485  00FFB5  00                 	db	0
  1486  00FFB6                     STR_116:
  1487  00FFB6  28                 	db	40
  1488  00FFB7  6E                 	db	110	;'n'
  1489  00FFB8  75                 	db	117	;'u'
  1490  00FFB9  6C                 	db	108	;'l'
  1491  00FFBA  6C                 	db	108	;'l'
  1492  00FFBB  29                 	db	41
  1493  00FFBC  00                 	db	0
  1494  00FFBD                     STR_67:
  1495  00FFBD  46                 	db	70	;'F'
  1496  00FFBE  41                 	db	65	;'A'
  1497  00FFBF  49                 	db	73	;'I'
  1498  00FFC0  4C                 	db	76	;'L'
  1499  00FFC1  45                 	db	69	;'E'
  1500  00FFC2  44                 	db	68	;'D'
  1501  00FFC3  00                 	db	0
  1502  00FFC4                     STR_7:
  1503  00FFC4  53                 	db	83	;'S'
  1504  00FFC5  54                 	db	84	;'T'
  1505  00FFC6  41                 	db	65	;'A'
  1506  00FFC7  52                 	db	82	;'R'
  1507  00FFC8  54                 	db	84	;'T'
  1508  00FFC9  3A                 	db	58	;':'
  1509  00FFCA  00                 	db	0
  1510  00FFCB                     STR_9:
  1511  00FFCB  46                 	db	70	;'F'
  1512  00FFCC  45                 	db	69	;'E'
  1513  00FFCD  42                 	db	66	;'B'
  1514  00FFCE  00                 	db	0
  1515  00FFCF                     STR_19:
  1516  00FFCF  44                 	db	68	;'D'
  1517  00FFD0  45                 	db	69	;'E'
  1518  00FFD1  43                 	db	67	;'C'
  1519  00FFD2  00                 	db	0
  1520  00FFD3                     STR_15:
  1521  00FFD3  41                 	db	65	;'A'
  1522  00FFD4  55                 	db	85	;'U'
  1523  00FFD5  47                 	db	71	;'G'
  1524  00FFD6  00                 	db	0
  1525  00FFD7                     STR_14:
  1526  00FFD7  4A                 	db	74	;'J'
  1527  00FFD8  55                 	db	85	;'U'
  1528  00FFD9  4C                 	db	76	;'L'
  1529  00FFDA  00                 	db	0
  1530  00FFDB                     STR_8:
  1531  00FFDB  4A                 	db	74	;'J'
  1532  00FFDC  41                 	db	65	;'A'
  1533  00FFDD  4E                 	db	78	;'N'
  1534  00FFDE  00                 	db	0
  1535  00FFDF                     STR_13:
  1536  00FFDF  4A                 	db	74	;'J'
  1537  00FFE0  55                 	db	85	;'U'
  1538  00FFE1  4E                 	db	78	;'N'
  1539  00FFE2  00                 	db	0
  1540  00FFE3                     STR_16:
  1541  00FFE3  53                 	db	83	;'S'
  1542  00FFE4  45                 	db	69	;'E'
  1543  00FFE5  50                 	db	80	;'P'
  1544  00FFE6  00                 	db	0
  1545  00FFE7                     STR_10:
  1546  00FFE7  4D                 	db	77	;'M'
  1547  00FFE8  41                 	db	65	;'A'
  1548  00FFE9  52                 	db	82	;'R'
  1549  00FFEA  00                 	db	0
  1550  00FFEB                     STR_11:
  1551  00FFEB  41                 	db	65	;'A'
  1552  00FFEC  50                 	db	80	;'P'
  1553  00FFED  52                 	db	82	;'R'
  1554  00FFEE  00                 	db	0
  1555  00FFEF                     STR_20:
  1556  00FFEF  45                 	db	69	;'E'
  1557  00FFF0  52                 	db	82	;'R'
  1558  00FFF1  52                 	db	82	;'R'
  1559  00FFF2  00                 	db	0
  1560  00FFF3                     STR_17:
  1561  00FFF3  4F                 	db	79	;'O'
  1562  00FFF4  43                 	db	67	;'C'
  1563  00FFF5  54                 	db	84	;'T'
  1564  00FFF6  00                 	db	0
  1565  00FFF7                     STR_18:
  1566  00FFF7  4E                 	db	78	;'N'
  1567  00FFF8  4F                 	db	79	;'O'
  1568  00FFF9  56                 	db	86	;'V'
  1569  00FFFA  00                 	db	0
  1570  00FFFB                     STR_12:
  1571  00FFFB  4D                 	db	77	;'M'
  1572  00FFFC  41                 	db	65	;'A'
  1573  00FFFD  59                 	db	89	;'Y'
  1574  00FFFE  00                 	db	0
  1575  0000                     
  1576                           ; #config settings
  1577  00FFFF  00                 	db	0	; dummy byte at the end
  1578  0000                     
  1579                           	psect	cinit
  1580  0040BC                     __pcinit:
  1581                           	opt stack 0
  1582  0040BC                     start_initialization:
  1583                           	opt stack 0
  1584  0040BC                     __initialization:
  1585                           	opt stack 0
  1586                           
  1587                           ; Initialize objects allocated to BANK1 (8 bytes)
  1588                           ; load TBLPTR registers with __pidataBANK1
  1589  0040BC  0EFE               	movlw	low __pidataBANK1
  1590  0040BE  6EF6               	movwf	tblptrl,c
  1591  0040C0  0E47               	movlw	high __pidataBANK1
  1592  0040C2  6EF7               	movwf	tblptrh,c
  1593  0040C4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1594  0040C6  6EF8               	movwf	tblptru,c
  1595  0040C8  EE01  F02F         	lfsr	0,__pdataBANK1
  1596  0040CC  EE10 F008          	lfsr	1,8
  1597  0040D0                     copy_data0:
  1598  0040D0  0009               	tblrd		*+
  1599  0040D2  CFF5 FFEE          	movff	tablat,postinc0
  1600  0040D6  50E5               	movf	postdec1,w,c
  1601  0040D8  50E1               	movf	fsr1l,w,c
  1602  0040DA  E1FA               	bnz	copy_data0
  1603                           
  1604                           ; Clear objects allocated to BANK1 (47 bytes)
  1605  0040DC  EE01  F000         	lfsr	0,__pbssBANK1
  1606  0040E0  0E2F               	movlw	47
  1607  0040E2                     clear_0:
  1608  0040E2  6AEE               	clrf	postinc0,c
  1609  0040E4  06E8               	decf	wreg,f,c
  1610  0040E6  E1FD               	bnz	clear_0
  1611                           
  1612                           ; Clear objects allocated to BANK0 (38 bytes)
  1613  0040E8  EE00  F0DA         	lfsr	0,__pbssBANK0
  1614  0040EC  0E26               	movlw	38
  1615  0040EE                     clear_1:
  1616  0040EE  6AEE               	clrf	postinc0,c
  1617  0040F0  06E8               	decf	wreg,f,c
  1618  0040F2  E1FD               	bnz	clear_1
  1619                           
  1620                           ; Clear objects allocated to COMRAM (35 bytes)
  1621  0040F4  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1622  0040F8  0E23               	movlw	35
  1623  0040FA                     clear_2:
  1624  0040FA  6AEE               	clrf	postinc0,c
  1625  0040FC  06E8               	decf	wreg,f,c
  1626  0040FE  E1FD               	bnz	clear_2
  1627  004100                     end_of_initialization:
  1628                           	opt stack 0
  1629  004100                     __end_of__initialization:
  1630                           	opt stack 0
  1631  004100  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1632  004102  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1633  004104  0100               	movlb	0
  1634  004106  EFC4  F01A         	goto	_main	;jump to C main() function
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postdec1	equ	0xFE5
  1642                           fsr1l	equ	0xFE1
  1643                           
  1644                           	psect	bssCOMRAM
  1645  00005B                     __pbssCOMRAM:
  1646                           	opt stack 0
  1647  00005B                     _back:
  1648                           	opt stack 0
  1649  00005B                     	ds	2
  1650  00005D                     _count_can_no_lab:
  1651                           	opt stack 0
  1652  00005D                     	ds	2
  1653  00005F                     _count_can_w_lab:
  1654                           	opt stack 0
  1655  00005F                     	ds	2
  1656  000061                     _count_pop_no_tab:
  1657                           	opt stack 0
  1658  000061                     	ds	2
  1659  000063                     _count_pop_w_tab:
  1660                           	opt stack 0
  1661  000063                     	ds	2
  1662  000065                     _debug:
  1663                           	opt stack 0
  1664  000065                     	ds	2
  1665  000067                     _down:
  1666                           	opt stack 0
  1667  000067                     	ds	2
  1668  000069                     _enter:
  1669                           	opt stack 0
  1670  000069                     	ds	2
  1671  00006B                     _f_ID_receive:
  1672                           	opt stack 0
  1673  00006B                     	ds	2
  1674  00006D                     _f_can_coming_to_ID:
  1675                           	opt stack 0
  1676  00006D                     	ds	2
  1677  00006F                     _f_can_coming_to_distribution:
  1678                           	opt stack 0
  1679  00006F                     	ds	2
  1680  000071                     _f_lastCan:
  1681                           	opt stack 0
  1682  000071                     	ds	2
  1683  000073                     _first:
  1684                           	opt stack 0
  1685  000073                     	ds	2
  1686  000075                     _firstboot:
  1687                           	opt stack 0
  1688  000075                     	ds	2
  1689  000077                     _up:
  1690                           	opt stack 0
  1691  000077                     	ds	2
  1692  000079                     _was_low_1:
  1693                           	opt stack 0
  1694  000079                     	ds	2
  1695  00007B                     _was_low_3:
  1696                           	opt stack 0
  1697  00007B                     	ds	2
  1698  00007D                     _input:
  1699                           	opt stack 0
  1700  00007D                     	ds	1
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postdec1	equ	0xFE5
  1708                           fsr1l	equ	0xFE1
  1709                           
  1710                           	psect	bssBANK0
  1711  0000DA                     __pbssBANK0:
  1712                           	opt stack 0
  1713  0000DA                     _IR_signal:
  1714                           	opt stack 0
  1715  0000DA                     	ds	2
  1716  0000DC                     _MAG_signal:
  1717                           	opt stack 0
  1718  0000DC                     	ds	2
  1719  0000DE                     _RTCflag:
  1720                           	opt stack 0
  1721  0000DE                     	ds	2
  1722  0000E0                     _cur_state:
  1723                           	opt stack 0
  1724  0000E0                     	ds	2
  1725  0000E2                     _f_loadingNewCan:
  1726                           	opt stack 0
  1727  0000E2                     	ds	2
  1728  0000E4                     _i:
  1729                           	opt stack 0
  1730  0000E4                     	ds	2
  1731  0000E6                     _log:
  1732                           	opt stack 0
  1733  0000E6                     	ds	2
  1734  0000E8                     _log_completion:
  1735                           	opt stack 0
  1736  0000E8                     	ds	2
  1737  0000EA                     _log_count_can_no_lab:
  1738                           	opt stack 0
  1739  0000EA                     	ds	2
  1740  0000EC                     _log_count_can_w_lab:
  1741                           	opt stack 0
  1742  0000EC                     	ds	2
  1743  0000EE                     _log_count_pop_no_tab:
  1744                           	opt stack 0
  1745  0000EE                     	ds	2
  1746  0000F0                     _log_count_pop_w_tab:
  1747                           	opt stack 0
  1748  0000F0                     	ds	2
  1749  0000F2                     _log_count_total:
  1750                           	opt stack 0
  1751  0000F2                     	ds	2
  1752  0000F4                     _log_total_time:
  1753                           	opt stack 0
  1754  0000F4                     	ds	2
  1755  0000F6                     _logstate:
  1756                           	opt stack 0
  1757  0000F6                     	ds	2
  1758  0000F8                     _total_time:
  1759                           	opt stack 0
  1760  0000F8                     	ds	2
  1761  0000FA                     _var:
  1762                           	opt stack 0
  1763  0000FA                     	ds	2
  1764  0000FC                     _machine_state:
  1765                           	opt stack 0
  1766  0000FC                     	ds	1
  1767  0000FD                     _sel:
  1768                           	opt stack 0
  1769  0000FD                     	ds	1
  1770  0000FE                     _count_total:
  1771                           	opt stack 0
  1772  0000FE                     	ds	2
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postdec1	equ	0xFE5
  1780                           fsr1l	equ	0xFE1
  1781                           
  1782                           	psect	bssBANK1
  1783  000100                     __pbssBANK1:
  1784                           	opt stack 0
  1785  000100                     _log_startTime:
  1786                           	opt stack 0
  1787  000100                     	ds	14
  1788  00010E                     _startTime:
  1789                           	opt stack 0
  1790  00010E                     	ds	14
  1791  00011C                     _servoTimes:
  1792                           	opt stack 0
  1793  00011C                     	ds	8
  1794  000124                     _time:
  1795                           	opt stack 0
  1796  000124                     	ds	7
  1797  00012B                     _cur_can:
  1798                           	opt stack 0
  1799  00012B                     	ds	2
  1800  00012D                     _f_can_distributed:
  1801                           	opt stack 0
  1802  00012D                     	ds	2
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           
  1812                           	psect	dataBANK1
  1813  00012F                     __pdataBANK1:
  1814                           	opt stack 0
  1815  00012F                     UI@F3225:
  1816                           	opt stack 0
  1817  00012F                     	ds	4
  1818  000133                     printRTC@F3216:
  1819                           	opt stack 0
  1820  000133                     	ds	4
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           postdec1	equ	0xFE5
  1828                           fsr1l	equ	0xFE1
  1829                           
  1830                           	psect	cstackBANK0
  1831  000080                     __pcstackBANK0:
  1832                           	opt stack 0
  1833  000080                     ??_delay_ms:
  1834  000080                     ??_PortTests:
  1835  000080                     ??_isdigit:
  1836  000080                     ??_readADC:
  1837  000080                     ??_I2C_Master_Wait:
  1838  000080                     ?___wmul:
  1839                           	opt stack 0
  1840  000080                     ?___awmod:
  1841                           	opt stack 0
  1842  000080                     ?___lwdiv:
  1843                           	opt stack 0
  1844  000080                     ?___lldiv:
  1845                           	opt stack 0
  1846  000080                     lcdNibble@temp:
  1847                           	opt stack 0
  1848  000080                     initTime@m:
  1849                           	opt stack 0
  1850  000080                     updateServoPosition@time_us:
  1851                           	opt stack 0
  1852  000080                     EEPROM_read@address:
  1853                           	opt stack 0
  1854  000080                     ___wmul@multiplier:
  1855                           	opt stack 0
  1856  000080                     ___awmod@dividend:
  1857                           	opt stack 0
  1858  000080                     ___lwdiv@dividend:
  1859                           	opt stack 0
  1860  000080                     strcpy@to:
  1861                           	opt stack 0
  1862  000080                     ___lldiv@dividend:
  1863                           	opt stack 0
  1864                           
  1865                           ; 4 bytes @ 0x0
  1866  000080                     	ds	1
  1867  000081                     readADC@channel:
  1868                           	opt stack 0
  1869  000081                     I2C_Master_Read@a:
  1870                           	opt stack 0
  1871  000081                     lcdNibble@data:
  1872                           	opt stack 0
  1873  000081                     initTime@h:
  1874                           	opt stack 0
  1875  000081                     delay_ms@milliseconds:
  1876                           	opt stack 0
  1877  000081                     _isdigit$1942:
  1878                           	opt stack 0
  1879  000081                     I2C_Master_Write@d:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x1
  1883  000081                     	ds	1
  1884  000082                     ??_readIR:
  1885  000082                     ??_readMAG:
  1886  000082                     I2C_Master_Read@temp:
  1887                           	opt stack 0
  1888  000082                     lcdInst@data:
  1889                           	opt stack 0
  1890  000082                     putch@data:
  1891                           	opt stack 0
  1892  000082                     initTime@w:
  1893                           	opt stack 0
  1894  000082                     isdigit@c:
  1895                           	opt stack 0
  1896  000082                     updateServoPosition@timer:
  1897                           	opt stack 0
  1898  000082                     ___wmul@multiplicand:
  1899                           	opt stack 0
  1900  000082                     ___awmod@divisor:
  1901                           	opt stack 0
  1902  000082                     ___lwdiv@divisor:
  1903                           	opt stack 0
  1904  000082                     strcpy@from:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x2
  1908  000082                     	ds	1
  1909  000083                     ??_initLCD:
  1910  000083                     initTime@DD:
  1911                           	opt stack 0
  1912  000083                     getRTC@i:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x3
  1916  000083                     	ds	1
  1917  000084                     ??_updateServoPosition:
  1918  000084                     initTime@MM:
  1919                           	opt stack 0
  1920  000084                     ___awmod@counter:
  1921                           	opt stack 0
  1922  000084                     readIR@res:
  1923                           	opt stack 0
  1924  000084                     readMAG@res:
  1925                           	opt stack 0
  1926  000084                     ___wmul@product:
  1927                           	opt stack 0
  1928  000084                     ___lwdiv@quotient:
  1929                           	opt stack 0
  1930  000084                     strcpy@cp:
  1931                           	opt stack 0
  1932  000084                     ___lldiv@divisor:
  1933                           	opt stack 0
  1934                           
  1935                           ; 4 bytes @ 0x4
  1936  000084                     	ds	1
  1937  000085                     ??_initSortTimer:
  1938  000085                     initTime@YY:
  1939                           	opt stack 0
  1940  000085                     ___awmod@sign:
  1941                           	opt stack 0
  1942                           
  1943                           ; 1 bytes @ 0x5
  1944  000085                     	ds	1
  1945  000086                     ??_getIR:
  1946  000086                     ??_getMAG:
  1947  000086                     ?___awdiv:
  1948                           	opt stack 0
  1949  000086                     initTime@s:
  1950                           	opt stack 0
  1951  000086                     ___lwdiv@counter:
  1952                           	opt stack 0
  1953  000086                     updateServoPosition@my_time:
  1954                           	opt stack 0
  1955  000086                     ___awdiv@dividend:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0x6
  1959  000086                     	ds	1
  1960  000087                     ?___lwmod:
  1961                           	opt stack 0
  1962  000087                     ___lwmod@dividend:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x7
  1966  000087                     	ds	1
  1967  000088                     ??_ID:
  1968  000088                     ??_Distribution:
  1969  000088                     ??_initServos:
  1970  000088                     initSortTimer@i:
  1971                           	opt stack 0
  1972  000088                     ___awdiv@divisor:
  1973                           	opt stack 0
  1974  000088                     ___lldiv@quotient:
  1975                           	opt stack 0
  1976                           
  1977                           ; 4 bytes @ 0x8
  1978  000088                     	ds	1
  1979  000089                     ___lwmod@divisor:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x9
  1983  000089                     	ds	1
  1984  00008A                     ___awdiv@counter:
  1985                           	opt stack 0
  1986  00008A                     ID@i:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0xA
  1990  00008A                     	ds	1
  1991  00008B                     ___awdiv@sign:
  1992                           	opt stack 0
  1993  00008B                     ___lwmod@counter:
  1994                           	opt stack 0
  1995                           
  1996                           ; 1 bytes @ 0xB
  1997  00008B                     	ds	1
  1998  00008C                     ___lldiv@counter:
  1999                           	opt stack 0
  2000  00008C                     ___awdiv@quotient:
  2001                           	opt stack 0
  2002  00008C                     ID@sensor_outputs:
  2003                           	opt stack 0
  2004                           
  2005                           ; 6 bytes @ 0xC
  2006  00008C                     	ds	1
  2007  00008D                     I2C_Master_Init@c:
  2008                           	opt stack 0
  2009                           
  2010                           ; 4 bytes @ 0xD
  2011  00008D                     	ds	1
  2012  00008E                     ?_printf:
  2013                           	opt stack 0
  2014  00008E                     printf@f:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0xE
  2018  00008E                     	ds	3
  2019  000091                     ??_I2C_Master_Init:
  2020                           
  2021                           ; 1 bytes @ 0x11
  2022  000091                     	ds	4
  2023  000095                     ??_loadRTC:
  2024                           
  2025                           ; 1 bytes @ 0x15
  2026  000095                     	ds	1
  2027  000096                     loadRTC@i:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x16
  2031  000096                     	ds	4
  2032  00009A                     ??_printf:
  2033                           
  2034                           ; 1 bytes @ 0x1A
  2035  00009A                     	ds	4
  2036  00009E                     printf@prec:
  2037                           	opt stack 0
  2038                           
  2039                           ; 1 bytes @ 0x1E
  2040  00009E                     	ds	1
  2041  00009F                     printf@cp:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x1F
  2045  00009F                     	ds	2
  2046  0000A1                     printf@ap:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x21
  2050  0000A1                     	ds	2
  2051  0000A3                     printf@len:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x23
  2055  0000A3                     	ds	2
  2056  0000A5                     printf@val:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x25
  2060  0000A5                     	ds	2
  2061  0000A7                     printf@flag:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0x27
  2065  0000A7                     	ds	1
  2066  0000A8                     printf@c:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x28
  2070  0000A8                     	ds	1
  2071  0000A9                     printf@width:
  2072                           	opt stack 0
  2073                           
  2074                           ; 2 bytes @ 0x29
  2075  0000A9                     	ds	2
  2076  0000AB                     ??_printRTC:
  2077  0000AB                     ??_algorithmTest:
  2078  0000AB                     ??_sensorTest:
  2079  0000AB                     ??_actuatorTest:
  2080  0000AB                     ??_PortTestA5:
  2081  0000AB                     ??_ToggleTestA5:
  2082  0000AB                     ??_PusherTestA5:
  2083  0000AB                     ??_BothServos:
  2084  0000AB                     EEPROM_write@address:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x2B
  2088  0000AB                     	ds	1
  2089  0000AC                     ToggleTestA5@on:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x2C
  2093  0000AC                     	ds	1
  2094  0000AD                     EEPROM_write@data:
  2095                           	opt stack 0
  2096  0000AD                     actuatorTest@i_1637:
  2097                           	opt stack 0
  2098  0000AD                     sensorTest@res:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x2D
  2102  0000AD                     	ds	1
  2103  0000AE                     ??_EEPROM_write:
  2104  0000AE                     actuatorTest@i_1644:
  2105                           	opt stack 0
  2106  0000AE                     printRTC@INT_time:
  2107                           	opt stack 0
  2108                           
  2109                           ; 14 bytes @ 0x2E
  2110  0000AE                     	ds	1
  2111  0000AF                     EEPROM_write@i:
  2112                           	opt stack 0
  2113  0000AF                     actuatorTest@i_1645:
  2114                           	opt stack 0
  2115                           
  2116                           ; 1 bytes @ 0x2F
  2117  0000AF                     	ds	1
  2118  0000B0                     EEPROM_write@i_1328:
  2119                           	opt stack 0
  2120  0000B0                     actuatorTest@i_1647:
  2121                           	opt stack 0
  2122                           
  2123                           ; 1 bytes @ 0x30
  2124  0000B0                     	ds	1
  2125  0000B1                     ??_Loading:
  2126  0000B1                     logRun@num:
  2127                           	opt stack 0
  2128  0000B1                     actuatorTest@i_1648:
  2129                           	opt stack 0
  2130                           
  2131                           ; 1 bytes @ 0x31
  2132  0000B1                     	ds	1
  2133  0000B2                     logRun@byte1:
  2134                           	opt stack 0
  2135  0000B2                     actuatorTest@i_1650:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0x32
  2139  0000B2                     	ds	1
  2140  0000B3                     logRun@byte2:
  2141                           	opt stack 0
  2142  0000B3                     actuatorTest@i_1651:
  2143                           	opt stack 0
  2144  0000B3                     Loading@addr:
  2145                           	opt stack 0
  2146                           
  2147                           ; 2 bytes @ 0x33
  2148  0000B3                     	ds	1
  2149  0000B4                     logRun@byte3:
  2150                           	opt stack 0
  2151  0000B4                     actuatorTest@i_1653:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x34
  2155  0000B4                     	ds	1
  2156  0000B5                     Loading@byte1:
  2157                           	opt stack 0
  2158  0000B5                     logRun@byte_i:
  2159                           	opt stack 0
  2160  0000B5                     actuatorTest@i_1654:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x35
  2164  0000B5                     	ds	1
  2165  0000B6                     logRun@byte11:
  2166                           	opt stack 0
  2167  0000B6                     actuatorTest@i_1656:
  2168                           	opt stack 0
  2169  0000B6                     Loading@i:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x36
  2173  0000B6                     	ds	1
  2174  0000B7                     actuatorTest@i_1657:
  2175                           	opt stack 0
  2176  0000B7                     logRun@i:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x37
  2180  0000B7                     	ds	1
  2181  0000B8                     actuatorTest@i_1659:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x38
  2185  0000B8                     	ds	1
  2186  0000B9                     actuatorTest@i_1660:
  2187                           	opt stack 0
  2188  0000B9                     logRun@addr:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x39
  2192  0000B9                     	ds	1
  2193  0000BA                     actuatorTest@i_1663:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x3A
  2197  0000BA                     	ds	1
  2198  0000BB                     actuatorTest@i_1664:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x3B
  2202  0000BB                     	ds	1
  2203  0000BC                     actuatorTest@i_1666:
  2204                           	opt stack 0
  2205  0000BC                     printRTC@RTC_month:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x3C
  2209  0000BC                     	ds	1
  2210  0000BD                     actuatorTest@i_1667:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x3D
  2214  0000BD                     	ds	1
  2215  0000BE                     actuatorTest@i_1669:
  2216                           	opt stack 0
  2217  0000BE                     printRTC@month:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x3E
  2221  0000BE                     	ds	1
  2222  0000BF                     actuatorTest@i_1670:
  2223                           	opt stack 0
  2224                           
  2225                           ; 1 bytes @ 0x3F
  2226  0000BF                     	ds	1
  2227  0000C0                     actuatorTest@i_1673:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x40
  2231  0000C0                     	ds	1
  2232  0000C1                     actuatorTest@i_1674:
  2233                           	opt stack 0
  2234                           
  2235                           ; 1 bytes @ 0x41
  2236  0000C1                     	ds	1
  2237  0000C2                     actuatorTest@i_1676:
  2238                           	opt stack 0
  2239  0000C2                     printRTC@i:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x42
  2243  0000C2                     	ds	1
  2244  0000C3                     actuatorTest@i_1677:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x43
  2248  0000C3                     	ds	1
  2249  0000C4                     ??_UI:
  2250  0000C4                     actuatorTest@i:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x44
  2254  0000C4                     	ds	2
  2255  0000C6                     ??_Test:
  2256  0000C6                     _UI$2295:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x46
  2260  0000C6                     	ds	2
  2261  0000C8                     UI@i:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x48
  2265  0000C8                     	ds	1
  2266  0000C9                     UI@i_409:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x49
  2270  0000C9                     	ds	1
  2271  0000CA                     UI@i_412:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x4A
  2275  0000CA                     	ds	1
  2276  0000CB                     UI@i_413:
  2277                           	opt stack 0
  2278                           
  2279                           ; 1 bytes @ 0x4B
  2280  0000CB                     	ds	1
  2281  0000CC                     UI@i_431:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x4C
  2285  0000CC                     	ds	1
  2286  0000CD                     UI@i_432:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x4D
  2290  0000CD                     	ds	1
  2291  0000CE                     UI@i_435:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x4E
  2295  0000CE                     	ds	1
  2296  0000CF                     UI@i_436:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x4F
  2300  0000CF                     	ds	1
  2301  0000D0                     UI@i_439:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x50
  2305  0000D0                     	ds	1
  2306  0000D1                     UI@i_440:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x51
  2310  0000D1                     	ds	1
  2311  0000D2                     UI@i_443:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x52
  2315  0000D2                     	ds	1
  2316  0000D3                     UI@i_444:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x53
  2320  0000D3                     	ds	1
  2321  0000D4                     UI@i_447:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x54
  2325  0000D4                     	ds	1
  2326  0000D5                     UI@i_448:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x55
  2330  0000D5                     	ds	1
  2331  0000D6                     UI@month:
  2332                           	opt stack 0
  2333                           
  2334                           ; 4 bytes @ 0x56
  2335  0000D6                     	ds	4
  2336  0000DA                     tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           postdec1	equ	0xFE5
  2343                           fsr1l	equ	0xFE1
  2344                           
  2345                           ; 1 bytes @ 0x5A
  2346                           
  2347                           	psect	cstackCOMRAM
  2348  000001                     __pcstackCOMRAM:
  2349                           	opt stack 0
  2350  000001                     ??i2_I2C_Master_Wait:
  2351  000001                     ??i2_isdigit:
  2352  000001                     ?i2___wmul:
  2353                           	opt stack 0
  2354  000001                     ?i2___lwmod:
  2355                           	opt stack 0
  2356  000001                     i2lcdNibble@temp:
  2357                           	opt stack 0
  2358  000001                     i2EEPROM_read@address:
  2359                           	opt stack 0
  2360  000001                     i2___wmul@multiplier:
  2361                           	opt stack 0
  2362  000001                     i2___lwmod@dividend:
  2363                           	opt stack 0
  2364  000001                     i2strcpy@to:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x0
  2368  000001                     	ds	1
  2369  000002                     i2I2C_Master_Read@a:
  2370                           	opt stack 0
  2371  000002                     i2lcdNibble@data:
  2372                           	opt stack 0
  2373  000002                     i2_isdigit$1942:
  2374                           	opt stack 0
  2375  000002                     i2I2C_Master_Write@d:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0x1
  2379  000002                     	ds	1
  2380  000003                     i2I2C_Master_Read@temp:
  2381                           	opt stack 0
  2382  000003                     i2lcdInst@data:
  2383                           	opt stack 0
  2384  000003                     i2putch@data:
  2385                           	opt stack 0
  2386  000003                     i2isdigit@c:
  2387                           	opt stack 0
  2388  000003                     i2___wmul@multiplicand:
  2389                           	opt stack 0
  2390  000003                     i2___lwmod@divisor:
  2391                           	opt stack 0
  2392  000003                     i2strcpy@from:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x2
  2396  000003                     	ds	1
  2397  000004                     i2getRTC@i:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x3
  2401  000004                     	ds	1
  2402  000005                     i2___lwmod@counter:
  2403                           	opt stack 0
  2404  000005                     i2___wmul@product:
  2405                           	opt stack 0
  2406  000005                     i2strcpy@cp:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x4
  2410  000005                     	ds	1
  2411  000006                     ?i2___lwdiv:
  2412                           	opt stack 0
  2413  000006                     i2___lwdiv@dividend:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x5
  2417  000006                     	ds	1
  2418  000007                     retrieveLog@logNum:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x6
  2422  000007                     	ds	1
  2423  000008                     i2___lwdiv@divisor:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x7
  2427  000008                     	ds	1
  2428  000009                     ??_retrieveLog:
  2429                           
  2430                           ; 1 bytes @ 0x8
  2431  000009                     	ds	1
  2432  00000A                     i2___lwdiv@quotient:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x9
  2436  00000A                     	ds	1
  2437  00000B                     retrieveLog@byte1:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0xA
  2441  00000B                     	ds	1
  2442  00000C                     retrieveLog@byte2:
  2443                           	opt stack 0
  2444  00000C                     i2___lwdiv@counter:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0xB
  2448  00000C                     	ds	1
  2449  00000D                     ?i2_printf:
  2450                           	opt stack 0
  2451  00000D                     retrieveLog@byte3:
  2452                           	opt stack 0
  2453  00000D                     i2printf@f:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0xC
  2457  00000D                     	ds	1
  2458  00000E                     retrieveLog@i:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0xD
  2462  00000E                     	ds	2
  2463  000010                     retrieveLog@addr:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0xF
  2467  000010                     	ds	2
  2468  000012                     dispLogs@myLog:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0x11
  2472  000012                     	ds	2
  2473  000014                     
  2474                           ; 1 bytes @ 0x13
  2475  000014                     	ds	5
  2476  000019                     ??i2_printf:
  2477                           
  2478                           ; 1 bytes @ 0x18
  2479  000019                     	ds	4
  2480  00001D                     i2printf@prec:
  2481                           	opt stack 0
  2482                           
  2483                           ; 1 bytes @ 0x1C
  2484  00001D                     	ds	1
  2485  00001E                     i2printf@cp:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x1D
  2489  00001E                     	ds	2
  2490  000020                     i2printf@ap:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x1F
  2494  000020                     	ds	2
  2495  000022                     i2printf@len:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0x21
  2499  000022                     	ds	2
  2500  000024                     i2printf@val:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x23
  2504  000024                     	ds	2
  2505  000026                     i2printf@flag:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x25
  2509  000026                     	ds	1
  2510  000027                     i2printf@c:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x26
  2514  000027                     	ds	1
  2515  000028                     i2printf@width:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x27
  2519  000028                     	ds	2
  2520  00002A                     ??_printSortTimer:
  2521  00002A                     ??i2_printRTC:
  2522  00002A                     ?_inputHandler:
  2523                           	opt stack 0
  2524                           
  2525                           ; 2 bytes @ 0x29
  2526  00002A                     	ds	2
  2527  00002C                     ??_inputHandler:
  2528                           
  2529                           ; 1 bytes @ 0x2B
  2530  00002C                     	ds	1
  2531  00002D                     printSortTimer@hour:
  2532                           	opt stack 0
  2533  00002D                     i2printRTC@INT_time:
  2534                           	opt stack 0
  2535                           
  2536                           ; 14 bytes @ 0x2C
  2537  00002D                     	ds	2
  2538  00002F                     printSortTimer@curTime:
  2539                           	opt stack 0
  2540                           
  2541                           ; 14 bytes @ 0x2E
  2542  00002F                     	ds	12
  2543  00003B                     i2printRTC@RTC_month:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x3A
  2547  00003B                     	ds	2
  2548  00003D                     printSortTimer@start_sec:
  2549                           	opt stack 0
  2550  00003D                     i2printRTC@month:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x3C
  2554  00003D                     	ds	2
  2555  00003F                     printSortTimer@cur_sec:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x3E
  2559  00003F                     	ds	2
  2560  000041                     printSortTimer@min:
  2561                           	opt stack 0
  2562  000041                     i2printRTC@i:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x40
  2566  000041                     	ds	2
  2567  000043                     ??_updateMenu:
  2568  000043                     printSortTimer@sec:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x42
  2572  000043                     	ds	2
  2573  000045                     _printSortTimer$2415:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0x44
  2577  000045                     	ds	2
  2578  000047                     printSortTimer@timeDiff:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x46
  2582  000047                     	ds	2
  2583  000049                     printSortTimer@i:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x48
  2587  000049                     	ds	2
  2588  00004B                     ??_handler:
  2589                           
  2590                           ; 1 bytes @ 0x4A
  2591  00004B                     	ds	16
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           fsr1l	equ	0xFE1
  2600                           
  2601 ;;
  2602 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2603 ;;
  2604 ;; *************** function _main *****************
  2605 ;; Defined at:
  2606 ;;		line 19 in file "main.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;Total ram usage:        0 bytes
  2625 ;; Hardware stack levels required when called:   13
  2626 ;; This function calls:
  2627 ;;		_I2C_Master_Init
  2628 ;;		_Test
  2629 ;;		_UI
  2630 ;;		_initLCD
  2631 ;;		_initTime
  2632 ;;		_initUI
  2633 ;;		_logRun
  2634 ;;		_machineConfig
  2635 ;;		_sort
  2636 ;;		_stopSignals
  2637 ;; This function is called by:
  2638 ;;		Startup code after reset
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text0
  2643  003588                     __ptext0:
  2644                           	opt stack 0
  2645  003588                     _main:
  2646                           	opt stack 18
  2647                           
  2648                           ;main.c: 20: machineConfig();
  2649                           
  2650                           ;incstack = 0
  2651  003588  EC5A  F01F         	call	_machineConfig	;wreg free
  2652                           
  2653                           ;main.c: 21: initLCD();
  2654  00358C  ECD1  F020         	call	_initLCD	;wreg free
  2655                           
  2656                           ;main.c: 24: RTCflag = 0;
  2657  003590  0E00               	movlw	0
  2658  003592  0100               	movlb	0	; () banked
  2659  003594  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2660  003596  0E00               	movlw	0
  2661  003598  6FDE               	movwf	_RTCflag& (0+255),b
  2662                           
  2663                           ;main.c: 25: if(RTCflag){
  2664  00359A  0100               	movlb	0	; () banked
  2665  00359C  51DE               	movf	_RTCflag& (0+255),w,b
  2666  00359E  0100               	movlb	0	; () banked
  2667  0035A0  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2668  0035A2  B4D8               	btfsc	status,2,c
  2669  0035A4  D016               	goto	l8083
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2673  0035A6  0E20               	movlw	32
  2674  0035A8  0100               	movlb	0	; () banked
  2675  0035AA  6F80               	movwf	initTime@m& (0+255),b
  2676  0035AC  0E15               	movlw	21
  2677  0035AE  0100               	movlb	0	; () banked
  2678  0035B0  6F81               	movwf	initTime@h& (0+255),b
  2679  0035B2  0E04               	movlw	4
  2680  0035B4  0100               	movlb	0	; () banked
  2681  0035B6  6F82               	movwf	initTime@w& (0+255),b
  2682  0035B8  0E15               	movlw	21
  2683  0035BA  0100               	movlb	0	; () banked
  2684  0035BC  6F83               	movwf	initTime@DD& (0+255),b
  2685  0035BE  0E03               	movlw	3
  2686  0035C0  0100               	movlb	0	; () banked
  2687  0035C2  6F84               	movwf	initTime@MM& (0+255),b
  2688  0035C4  0E17               	movlw	23
  2689  0035C6  0100               	movlb	0	; () banked
  2690  0035C8  6F85               	movwf	initTime@YY& (0+255),b
  2691  0035CA  0E42               	movlw	66
  2692  0035CC  EC84  F023         	call	_initTime
  2693                           
  2694                           ;main.c: 27: }
  2695  0035D0  D00B               	goto	l8085
  2696  0035D2                     l8083:
  2697                           
  2698                           ;main.c: 28: else{
  2699                           ;main.c: 29: I2C_Master_Init(10000);
  2700  0035D2  0E10               	movlw	16
  2701  0035D4  0100               	movlb	0	; () banked
  2702  0035D6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2703  0035D8  0E27               	movlw	39
  2704  0035DA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2705  0035DC  0E00               	movlw	0
  2706  0035DE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2707  0035E0  0E00               	movlw	0
  2708  0035E2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2709  0035E4  EC2A  F01F         	call	_I2C_Master_Init	;wreg free
  2710  0035E8                     l8085:
  2711                           
  2712                           ;main.c: 30: }
  2713                           ;main.c: 32: initUI();
  2714  0035E8  EC8D  F022         	call	_initUI	;wreg free
  2715                           
  2716                           ;main.c: 33: first = 1;
  2717  0035EC  0E00               	movlw	0
  2718  0035EE  6E74               	movwf	_first+1,c
  2719  0035F0  0E01               	movlw	1
  2720  0035F2  6E73               	movwf	_first,c
  2721                           
  2722                           ;main.c: 44: switch(machine_state){
  2723                           
  2724                           ;main.c: 43: while(1){
  2725  0035F4  D017               	goto	l8107
  2726  0035F6                     l8089:
  2727                           
  2728                           ;main.c: 46: UI();
  2729  0035F6  EC65  F004         	call	_UI	;wreg free
  2730                           
  2731                           ;main.c: 47: break;
  2732  0035FA  D014               	goto	l8107
  2733  0035FC                     l8091:
  2734                           
  2735                           ;main.c: 49: sort();
  2736  0035FC  EC73  F023         	call	_sort	;wreg free
  2737                           
  2738                           ;main.c: 50: break;
  2739  003600  D011               	goto	l8107
  2740  003602                     l8093:
  2741                           
  2742                           ;main.c: 52: stopSignals();
  2743  003602  ECB0  F023         	call	_stopSignals	;wreg free
  2744                           
  2745                           ;main.c: 53: logRun();
  2746  003606  EC38  F018         	call	_logRun	;wreg free
  2747                           
  2748                           ;main.c: 54: first = 1;
  2749  00360A  0E00               	movlw	0
  2750  00360C  6E74               	movwf	_first+1,c
  2751  00360E  0E01               	movlw	1
  2752  003610  6E73               	movwf	_first,c
  2753                           
  2754                           ;main.c: 55: UI();
  2755  003612  EC65  F004         	call	_UI	;wreg free
  2756                           
  2757                           ;main.c: 56: break;
  2758  003616  D006               	goto	l8107
  2759  003618                     l8101:
  2760                           
  2761                           ;main.c: 58: Test();
  2762  003618  EC63  F019         	call	_Test	;wreg free
  2763                           
  2764                           ;main.c: 59: break;
  2765  00361C  D003               	goto	l8107
  2766  00361E                     l8103:
  2767                           
  2768                           ;main.c: 61: stopSignals();
  2769  00361E  ECB0  F023         	call	_stopSignals	;wreg free
  2770  003622                     l487:
  2771  003622  D7FF               	goto	l487
  2772  003624                     l8107:
  2773  003624  0100               	movlb	0	; () banked
  2774  003626  51FC               	movf	_machine_state& (0+255),w,b
  2775                           
  2776                           ; Switch size 1, requested type "space"
  2777                           ; Number of cases is 5, Range of values is 0 to 4
  2778                           ; switch strategies available:
  2779                           ; Name         Instructions Cycles
  2780                           ; simple_byte           16     9 (average)
  2781                           ;	Chosen strategy is simple_byte
  2782  003628  0A00               	xorlw	0	; case 0
  2783  00362A  B4D8               	btfsc	status,2,c
  2784  00362C  D7E4               	goto	l8089
  2785  00362E  0A01               	xorlw	1	; case 1
  2786  003630  B4D8               	btfsc	status,2,c
  2787  003632  D7E4               	goto	l8091
  2788  003634  0A03               	xorlw	3	; case 2
  2789  003636  B4D8               	btfsc	status,2,c
  2790  003638  D7E4               	goto	l8093
  2791  00363A  0A01               	xorlw	1	; case 3
  2792  00363C  B4D8               	btfsc	status,2,c
  2793  00363E  D7EC               	goto	l8101
  2794  003640  0A07               	xorlw	7	; case 4
  2795  003642  B4D8               	btfsc	status,2,c
  2796  003644  D7EC               	goto	l8103
  2797                           
  2798                           ; BSR set to: 0
  2799                           
  2800                           ; BSR set to: 0
  2801  003646  D7EE               	goto	l8107
  2802  003648                     __end_of_main:
  2803                           	opt stack 0
  2804                           tblptru	equ	0xFF8
  2805                           tblptrh	equ	0xFF7
  2806                           tblptrl	equ	0xFF6
  2807                           tablat	equ	0xFF5
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           postdec1	equ	0xFE5
  2811                           fsr1l	equ	0xFE1
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _stopSignals *****************
  2815 ;; Defined at:
  2816 ;;		line 70 in file "main.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, status,2
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;Total ram usage:        0 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    7
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text1
  2845  004760                     __ptext1:
  2846                           	opt stack 0
  2847  004760                     _stopSignals:
  2848                           	opt stack 23
  2849                           
  2850                           ;main.c: 71: LATA = 0x00;
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;incstack = 0
  2854  004760  0E00               	movlw	0
  2855  004762  6E89               	movwf	3977,c	;volatile
  2856                           
  2857                           ;main.c: 72: LATB = 0x00;
  2858  004764  0E00               	movlw	0
  2859  004766  6E8A               	movwf	3978,c	;volatile
  2860                           
  2861                           ;main.c: 73: LATC = 0x00;
  2862  004768  0E00               	movlw	0
  2863  00476A  6E8B               	movwf	3979,c	;volatile
  2864                           
  2865                           ;main.c: 74: LATD = 0x00;
  2866  00476C  0E00               	movlw	0
  2867  00476E  6E8C               	movwf	3980,c	;volatile
  2868                           
  2869                           ;main.c: 75: LATE = 0x00;
  2870  004770  0E00               	movlw	0
  2871  004772  6E8D               	movwf	3981,c	;volatile
  2872  004774  0012               	return		;funcret
  2873  004776                     __end_of_stopSignals:
  2874                           	opt stack 0
  2875                           tblptru	equ	0xFF8
  2876                           tblptrh	equ	0xFF7
  2877                           tblptrl	equ	0xFF6
  2878                           tablat	equ	0xFF5
  2879                           postinc0	equ	0xFEE
  2880                           wreg	equ	0xFE8
  2881                           postdec1	equ	0xFE5
  2882                           fsr1l	equ	0xFE1
  2883                           status	equ	0xFD8
  2884                           
  2885 ;; *************** function _sort *****************
  2886 ;; Defined at:
  2887 ;;		line 55 in file "sort.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;		None
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;		None
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;Total ram usage:        0 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:   12
  2908 ;; This function calls:
  2909 ;;		_Distribution
  2910 ;;		_ID
  2911 ;;		_Loading
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text2
  2918  0046E6                     __ptext2:
  2919                           	opt stack 0
  2920  0046E6                     _sort:
  2921                           	opt stack 18
  2922                           
  2923                           ;sort.c: 56: if(machine_state == Sorting_state){
  2924                           
  2925                           ;incstack = 0
  2926  0046E6  0100               	movlb	0	; () banked
  2927  0046E8  05FC               	decf	_machine_state& (0+255),w,b
  2928  0046EA  B4D8               	btfsc	status,2,c
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;sort.c: 57: Loading();
  2932  0046EC  EC60  F015         	call	_Loading	;wreg free
  2933                           
  2934                           ;sort.c: 58: }
  2935                           ;sort.c: 59: if(machine_state == Sorting_state){
  2936  0046F0  0100               	movlb	0	; () banked
  2937  0046F2  05FC               	decf	_machine_state& (0+255),w,b
  2938  0046F4  B4D8               	btfsc	status,2,c
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;sort.c: 60: ID();
  2942  0046F6  ECD7  F016         	call	_ID	;wreg free
  2943                           
  2944                           ;sort.c: 61: }
  2945                           ;sort.c: 62: if(machine_state == Sorting_state){
  2946  0046FA  0100               	movlb	0	; () banked
  2947  0046FC  05FC               	decf	_machine_state& (0+255),w,b
  2948  0046FE  A4D8               	btfss	status,2,c
  2949  004700  0012               	return	
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;sort.c: 63: Distribution();
  2953  004702  EC89  F017         	call	_Distribution	;wreg free
  2954  004706  0012               	return	
  2955  004708                     __end_of_sort:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           postdec1	equ	0xFE5
  2964                           fsr1l	equ	0xFE1
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _Loading *****************
  2968 ;; Defined at:
  2969 ;;		line 67 in file "sort.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  i               2   54[BANK0 ] int 
  2974 ;;  addr            2   51[BANK0 ] unsigned short 
  2975 ;;  byte1           1   53[BANK0 ] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;Total ram usage:        7 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:   11
  2992 ;; This function calls:
  2993 ;;		_EEPROM_read
  2994 ;;		_EEPROM_write
  2995 ;;		_delay_ms
  2996 ;;		_getIR
  2997 ;;		_initGlobalVars
  2998 ;;		_initServos
  2999 ;;		_initSortTimer
  3000 ;;		_lcdInst
  3001 ;; This function is called by:
  3002 ;;		_sort
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text3
  3007  002AC0                     __ptext3:
  3008                           	opt stack 0
  3009  002AC0                     _Loading:
  3010                           	opt stack 18
  3011                           
  3012                           ;sort.c: 68: if(first){
  3013                           
  3014                           ;incstack = 0
  3015  002AC0  5073               	movf	_first,w,c
  3016  002AC2  1074               	iorwf	_first+1,w,c
  3017  002AC4  B4D8               	btfsc	status,2,c
  3018  002AC6  D074               	goto	l6401
  3019                           
  3020                           ;sort.c: 69: initGlobalVars();
  3021  002AC8  EC91  F01E         	call	_initGlobalVars	;wreg free
  3022                           
  3023                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3024  002ACC  0E01               	movlw	1
  3025  002ACE  ECE1  F023         	call	_lcdInst
  3026  002AD2  0E68               	movlw	104
  3027  002AD4  0100               	movlb	0	; () banked
  3028  002AD6  6FB1               	movwf	??_Loading& (0+255),b
  3029  002AD8  0EE4               	movlw	228
  3030  002ADA                     u7037:
  3031  002ADA  2EE8               	decfsz	wreg,f,c
  3032  002ADC  D7FE               	bra	u7037
  3033  002ADE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3034  002AE0  D7FC               	bra	u7037
  3035  002AE2  F000               	nop	
  3036                           
  3037                           ;sort.c: 71: initSortTimer();
  3038  002AE4  ECE1  F01B         	call	_initSortTimer	;wreg free
  3039                           
  3040                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3041  002AE8  8A8B               	bsf	3979,5,c	;volatile
  3042                           
  3043                           ;sort.c: 77: sel = EEPROM_read(0);
  3044  002AEA  0E00               	movlw	0
  3045  002AEC  0100               	movlb	0	; () banked
  3046  002AEE  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3047  002AF0  0E00               	movlw	0
  3048  002AF2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3049  002AF4  ECA4  F023         	call	_EEPROM_read	;wreg free
  3050  002AF8  0100               	movlb	0	; () banked
  3051  002AFA  6FFD               	movwf	_sel& (0+255),b
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3055  002AFC  0100               	movlb	0	; () banked
  3056  002AFE  51FD               	movf	_sel& (0+255),w,b
  3057  002B00  0D0B               	mullw	11
  3058  002B02  0E01               	movlw	1
  3059  002B04  24F3               	addwf	prodl,w,c
  3060  002B06  0100               	movlb	0	; () banked
  3061  002B08  6FB3               	movwf	Loading@addr& (0+255),b
  3062  002B0A  0E00               	movlw	0
  3063  002B0C  20F4               	addwfc	prodh,w,c
  3064  002B0E  0100               	movlb	0	; () banked
  3065  002B10  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3069  002B12  0E7F               	movlw	127
  3070  002B14  0100               	movlb	0	; () banked
  3071  002B16  6FB5               	movwf	Loading@byte1& (0+255),b
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3075  002B18  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3076  002B1C  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3077  002B20  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3078  002B24  ECE7  F019         	call	_EEPROM_write	;wreg free
  3079                           
  3080                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3081  002B28  9A89               	bcf	3977,5,c	;volatile
  3082                           
  3083                           ;sort.c: 84: for(int i=0; i<46; i++){
  3084  002B2A  0E00               	movlw	0
  3085  002B2C  0100               	movlb	0	; () banked
  3086  002B2E  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3087  002B30  0E00               	movlw	0
  3088  002B32  6FB6               	movwf	Loading@i& (0+255),b
  3089                           
  3090                           ; BSR set to: 0
  3091  002B34  0100               	movlb	0	; () banked
  3092  002B36  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3093  002B38  D008               	goto	l6389
  3094  002B3A  0100               	movlb	0	; () banked
  3095  002B3C  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3096  002B3E  E126               	bnz	l730
  3097  002B40  0E2E               	movlw	46
  3098  002B42  0100               	movlb	0	; () banked
  3099  002B44  5DB6               	subwf	Loading@i& (0+255),w,b
  3100  002B46  B0D8               	btfsc	status,0,c
  3101  002B48  D021               	goto	l730
  3102  002B4A                     l6389:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3106  002B4A  BA89               	btfsc	3977,5,c	;volatile
  3107  002B4C  D004               	goto	u4810
  3108  002B4E  0100               	movlb	0	; () banked
  3109  002B50  6BB1               	clrf	??_Loading& (0+255),b
  3110  002B52  2BB1               	incf	??_Loading& (0+255),f,b
  3111  002B54  D002               	goto	u4828
  3112  002B56                     u4810:
  3113  002B56  0100               	movlb	0	; () banked
  3114  002B58  6BB1               	clrf	??_Loading& (0+255),b
  3115  002B5A                     u4828:
  3116  002B5A  0100               	movlb	0	; () banked
  3117  002B5C  3BB1               	swapf	??_Loading& (0+255),f,b
  3118  002B5E  47B1               	rlncf	??_Loading& (0+255),f,b
  3119  002B60  5089               	movf	3977,w,c	;volatile
  3120  002B62  0100               	movlb	0	; () banked
  3121  002B64  19B1               	xorwf	??_Loading& (0+255),w,b
  3122  002B66  0BDF               	andlw	-33
  3123  002B68  19B1               	xorwf	??_Loading& (0+255),w,b
  3124  002B6A  6E89               	movwf	3977,c	;volatile
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;sort.c: 86: delay_ms(45-i);
  3128  002B6C  0100               	movlb	0	; () banked
  3129  002B6E  51B6               	movf	Loading@i& (0+255),w,b
  3130  002B70  0800               	sublw	0
  3131  002B72  0F2D               	addlw	45
  3132  002B74  EC13  F023         	call	_delay_ms
  3133  002B78  0100               	movlb	0	; () banked
  3134  002B7A  4BB6               	infsnz	Loading@i& (0+255),f,b
  3135  002B7C  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3136                           
  3137                           ; BSR set to: 0
  3138  002B7E  0100               	movlb	0	; () banked
  3139  002B80  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3140  002B82  D7E3               	goto	l6389
  3141  002B84  0100               	movlb	0	; () banked
  3142  002B86  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3143  002B88  E101               	bnz	u4830
  3144  002B8A  D7DA               	goto	L1
  3145  002B8C                     u4830:
  3146  002B8C                     l730:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;sort.c: 87: }
  3150                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3151  002B8C  8A89               	bsf	3977,5,c	;volatile
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;sort.c: 91: initServos();
  3155  002B8E  EC88  F01F         	call	_initServos	;wreg free
  3156                           
  3157                           ;sort.c: 92: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3158  002B92  0ECB               	movlw	203
  3159  002B94  0100               	movlb	0	; () banked
  3160  002B96  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3161  002B98  0EEC               	movlw	236
  3162  002B9A  0100               	movlb	0	; () banked
  3163  002B9C  6FB1               	movwf	??_Loading& (0+255),b
  3164  002B9E  0E84               	movlw	132
  3165  002BA0                     u7047:
  3166  002BA0  2EE8               	decfsz	wreg,f,c
  3167  002BA2  D7FE               	bra	u7047
  3168  002BA4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3169  002BA6  D7FC               	bra	u7047
  3170  002BA8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3171  002BAA  D7FA               	bra	u7047
  3172  002BAC  F000               	nop	
  3173                           
  3174                           ;sort.c: 93: }
  3175  002BAE  0012               	return	
  3176  002BB0                     l6401:
  3177                           
  3178                           ;sort.c: 94: else{
  3179                           ;sort.c: 97: if(!f_loadingNewCan){
  3180  002BB0  0100               	movlb	0	; () banked
  3181  002BB2  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3182  002BB4  0100               	movlb	0	; () banked
  3183  002BB6  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3184  002BB8  A4D8               	btfss	status,2,c
  3185  002BBA  D017               	goto	l6417
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;sort.c: 99: getIR();
  3189  002BBC  EC0B  F020         	call	_getIR	;wreg free
  3190                           
  3191                           ;sort.c: 101: if(!f_loadingNewCan){
  3192  002BC0  0100               	movlb	0	; () banked
  3193  002BC2  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3194  002BC4  0100               	movlb	0	; () banked
  3195  002BC6  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3196  002BC8  B4D8               	btfsc	status,2,c
  3197  002BCA  0012               	return	
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;sort.c: 105: else{
  3201                           ;sort.c: 106: count_total++;
  3202                           
  3203                           ; BSR set to: 0
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;sort.c: 103: }
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 102: return;
  3210  002BCC  0100               	movlb	0	; () banked
  3211  002BCE  4BFE               	infsnz	_count_total& (0+255),f,b
  3212  002BD0  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 107: if(count_total == 12){
  3216  002BD2  0E0C               	movlw	12
  3217  002BD4  0100               	movlb	0	; () banked
  3218  002BD6  19FE               	xorwf	_count_total& (0+255),w,b
  3219  002BD8  0100               	movlb	0	; () banked
  3220  002BDA  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3221  002BDC  A4D8               	btfss	status,2,c
  3222  002BDE  0012               	return	
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;sort.c: 108: f_lastCan = 1;
  3226  002BE0  0E00               	movlw	0
  3227  002BE2  6E72               	movwf	_f_lastCan+1,c
  3228  002BE4  0E01               	movlw	1
  3229  002BE6  6E71               	movwf	_f_lastCan,c
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;sort.c: 109: }
  3233                           ;sort.c: 110: }
  3234                           ;sort.c: 111: }
  3235                           
  3236                           ; BSR set to: 0
  3237  002BE8  0012               	return	
  3238  002BEA                     l6417:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 114: else if(f_ID_receive){
  3242  002BEA  506B               	movf	_f_ID_receive,w,c
  3243  002BEC  106C               	iorwf	_f_ID_receive+1,w,c
  3244  002BEE  B4D8               	btfsc	status,2,c
  3245  002BF0  0012               	return	
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;sort.c: 115: f_loadingNewCan = 0;
  3249  002BF2  0E00               	movlw	0
  3250  002BF4  0100               	movlb	0	; () banked
  3251  002BF6  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3252  002BF8  0E00               	movlw	0
  3253  002BFA  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;sort.c: 116: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3257  002BFC  0E3D               	movlw	61
  3258  002BFE  0100               	movlb	0	; () banked
  3259  002C00  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3260  002C02  0EE1               	movlw	225
  3261  002C04  0100               	movlb	0	; () banked
  3262  002C06  6FB1               	movwf	??_Loading& (0+255),b
  3263  002C08  0E3F               	movlw	63
  3264  002C0A                     u7057:
  3265  002C0A  2EE8               	decfsz	wreg,f,c
  3266  002C0C  D7FE               	bra	u7057
  3267  002C0E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3268  002C10  D7FC               	bra	u7057
  3269  002C12  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3270  002C14  D7FA               	bra	u7057
  3271  002C16  D000               	nop2	
  3272                           
  3273                           ;sort.c: 117: LATAbits.LATA4 = 1;
  3274  002C18  8889               	bsf	3977,4,c	;volatile
  3275                           
  3276                           ;sort.c: 118: _delay((unsigned long)((100)*(32000000/4000.0)));
  3277  002C1A  0E05               	movlw	5
  3278  002C1C  0100               	movlb	0	; () banked
  3279  002C1E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3280  002C20  0E0F               	movlw	15
  3281  002C22  0100               	movlb	0	; () banked
  3282  002C24  6FB1               	movwf	??_Loading& (0+255),b
  3283  002C26  0EF1               	movlw	241
  3284  002C28                     u7067:
  3285  002C28  2EE8               	decfsz	wreg,f,c
  3286  002C2A  D7FE               	bra	u7067
  3287  002C2C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3288  002C2E  D7FC               	bra	u7067
  3289  002C30  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3290  002C32  D7FA               	bra	u7067
  3291                           
  3292                           ;sort.c: 119: LATAbits.LATA4 = 0;
  3293  002C34  9889               	bcf	3977,4,c	;volatile
  3294                           
  3295                           ;sort.c: 120: f_can_coming_to_ID = 1;
  3296  002C36  0E00               	movlw	0
  3297  002C38  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3298  002C3A  0E01               	movlw	1
  3299  002C3C  6E6D               	movwf	_f_can_coming_to_ID,c
  3300  002C3E  0012               	return	
  3301  002C40                     __end_of_Loading:
  3302                           	opt stack 0
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postdec1	equ	0xFE5
  3312                           fsr1l	equ	0xFE1
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _initSortTimer *****************
  3316 ;; Defined at:
  3317 ;;		line 252 in file "sort.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  i               2    8[BANK0 ] int 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;Total ram usage:        5 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:   10
  3338 ;; This function calls:
  3339 ;;		_getRTC
  3340 ;; This function is called by:
  3341 ;;		_Loading
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text4
  3346  0037C2                     __ptext4:
  3347                           	opt stack 0
  3348  0037C2                     _initSortTimer:
  3349                           	opt stack 18
  3350                           
  3351                           ;sort.c: 254: getRTC();
  3352                           
  3353                           ;incstack = 0
  3354  0037C2  EC5C  F01D         	call	_getRTC	;wreg free
  3355                           
  3356                           ;sort.c: 255: for(int i = 0; i < 7; i++){
  3357  0037C6  0E00               	movlw	0
  3358  0037C8  0100               	movlb	0	; () banked
  3359  0037CA  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3360  0037CC  0E00               	movlw	0
  3361  0037CE  6F88               	movwf	initSortTimer@i& (0+255),b
  3362  0037D0                     l5985:
  3363                           
  3364                           ; BSR set to: 0
  3365  0037D0  0100               	movlb	0	; () banked
  3366  0037D2  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3367  0037D4  D008               	goto	l5989
  3368  0037D6  0100               	movlb	0	; () banked
  3369  0037D8  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3370  0037DA  E140               	bnz	l5995
  3371  0037DC  0E07               	movlw	7
  3372  0037DE  0100               	movlb	0	; () banked
  3373  0037E0  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3374  0037E2  B0D8               	btfsc	status,0,c
  3375  0037E4  D03B               	goto	l5995
  3376  0037E6                     l5989:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;sort.c: 256: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3380  0037E6  0E24               	movlw	low _time
  3381  0037E8  0100               	movlb	0	; () banked
  3382  0037EA  2588               	addwf	initSortTimer@i& (0+255),w,b
  3383  0037EC  6ED9               	movwf	fsr2l,c
  3384  0037EE  0E01               	movlw	high _time
  3385  0037F0  0100               	movlb	0	; () banked
  3386  0037F2  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3387  0037F4  6EDA               	movwf	fsr2h,c
  3388  0037F6  50DF               	movf	indf2,w,c
  3389  0037F8  0100               	movlb	0	; () banked
  3390  0037FA  6F85               	movwf	??_initSortTimer& (0+255),b
  3391  0037FC  0100               	movlb	0	; () banked
  3392  0037FE  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3393  003800  0E0F               	movlw	15
  3394  003802  1785               	andwf	??_initSortTimer& (0+255),f,b
  3395  003804  0E0F               	movlw	15
  3396  003806  0100               	movlb	0	; () banked
  3397  003808  1785               	andwf	??_initSortTimer& (0+255),f,b
  3398  00380A  0100               	movlb	0	; () banked
  3399  00380C  5185               	movf	??_initSortTimer& (0+255),w,b
  3400  00380E  0D0A               	mullw	10
  3401  003810  0E24               	movlw	low _time
  3402  003812  0100               	movlb	0	; () banked
  3403  003814  2588               	addwf	initSortTimer@i& (0+255),w,b
  3404  003816  6ED9               	movwf	fsr2l,c
  3405  003818  0E01               	movlw	high _time
  3406  00381A  0100               	movlb	0	; () banked
  3407  00381C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3408  00381E  6EDA               	movwf	fsr2h,c
  3409  003820  50DF               	movf	indf2,w,c
  3410  003822  0B0F               	andlw	15
  3411  003824  0100               	movlb	0	; () banked
  3412  003826  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3413  003828  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3414  00382A  50F3               	movf	prodl,w,c
  3415  00382C  0100               	movlb	0	; () banked
  3416  00382E  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3417  003830  50F4               	movf	prodh,w,c
  3418  003832  0100               	movlb	0	; () banked
  3419  003834  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3420  003836  90D8               	bcf	status,0,c
  3421  003838  0100               	movlb	0	; () banked
  3422  00383A  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3423  00383C  6ED9               	movwf	fsr2l,c
  3424  00383E  0100               	movlb	0	; () banked
  3425  003840  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3426  003842  6EDA               	movwf	fsr2h,c
  3427  003844  0E0E               	movlw	low _startTime
  3428  003846  26D9               	addwf	fsr2l,f,c
  3429  003848  0E01               	movlw	high _startTime
  3430  00384A  22DA               	addwfc	fsr2h,f,c
  3431  00384C  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3432  003850  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3433                           
  3434                           ; BSR set to: 0
  3435  003854  0100               	movlb	0	; () banked
  3436  003856  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3437  003858  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3438  00385A  D7BA               	goto	l5985
  3439  00385C                     l5995:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;sort.c: 257: }
  3443                           ;sort.c: 259: T0CON = 0b00010111;
  3444  00385C  0E17               	movlw	23
  3445  00385E  6ED5               	movwf	4053,c	;volatile
  3446                           
  3447                           ;sort.c: 268: TMR0H = 0b10000101;
  3448  003860  0E85               	movlw	133
  3449  003862  6ED7               	movwf	4055,c	;volatile
  3450                           
  3451                           ;sort.c: 269: TMR0L = 0b11101110;
  3452  003864  0EEE               	movlw	238
  3453  003866  6ED6               	movwf	4054,c	;volatile
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;sort.c: 270: TMR0ON = 1;
  3457  003868  8ED5               	bsf	4053,7,c	;volatile
  3458                           
  3459                           ; BSR set to: 0
  3460  00386A  0012               	return		;funcret
  3461  00386C                     __end_of_initSortTimer:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           postinc0	equ	0xFEE
  3470                           wreg	equ	0xFE8
  3471                           postdec1	equ	0xFE5
  3472                           fsr1l	equ	0xFE1
  3473                           indf2	equ	0xFDF
  3474                           postinc2	equ	0xFDE
  3475                           postdec2	equ	0xFDD
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _initGlobalVars *****************
  3481 ;; Defined at:
  3482 ;;		line 233 in file "sort.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;Total ram usage:        0 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    7
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_Loading
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text5
  3511  003D22                     __ptext5:
  3512                           	opt stack 0
  3513  003D22                     _initGlobalVars:
  3514                           	opt stack 21
  3515                           
  3516                           ;sort.c: 235: first = 0;
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;incstack = 0
  3520  003D22  0E00               	movlw	0
  3521  003D24  6E74               	movwf	_first+1,c
  3522  003D26  0E00               	movlw	0
  3523  003D28  6E73               	movwf	_first,c
  3524                           
  3525                           ;sort.c: 238: f_loadingNewCan = 0;
  3526  003D2A  0E00               	movlw	0
  3527  003D2C  0100               	movlb	0	; () banked
  3528  003D2E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3529  003D30  0E00               	movlw	0
  3530  003D32  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3531                           
  3532                           ;sort.c: 239: f_lastCan = 0;
  3533  003D34  0E00               	movlw	0
  3534  003D36  6E72               	movwf	_f_lastCan+1,c
  3535  003D38  0E00               	movlw	0
  3536  003D3A  6E71               	movwf	_f_lastCan,c
  3537                           
  3538                           ;sort.c: 240: f_ID_receive = 1;
  3539  003D3C  0E00               	movlw	0
  3540  003D3E  6E6C               	movwf	_f_ID_receive+1,c
  3541  003D40  0E01               	movlw	1
  3542  003D42  6E6B               	movwf	_f_ID_receive,c
  3543                           
  3544                           ;sort.c: 241: f_can_coming_to_ID = 0;
  3545  003D44  0E00               	movlw	0
  3546  003D46  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3547  003D48  0E00               	movlw	0
  3548  003D4A  6E6D               	movwf	_f_can_coming_to_ID,c
  3549                           
  3550                           ;sort.c: 242: f_can_coming_to_distribution = 0;
  3551  003D4C  0E00               	movlw	0
  3552  003D4E  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3553  003D50  0E00               	movlw	0
  3554  003D52  6E6F               	movwf	_f_can_coming_to_distribution,c
  3555                           
  3556                           ;sort.c: 243: f_can_distributed = 0;
  3557  003D54  0E00               	movlw	0
  3558  003D56  0101               	movlb	1	; () banked
  3559  003D58  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3560  003D5A  0E00               	movlw	0
  3561  003D5C  6F2D               	movwf	_f_can_distributed& (0+255),b
  3562                           
  3563                           ;sort.c: 246: count_total = 0;
  3564  003D5E  0E00               	movlw	0
  3565  003D60  0100               	movlb	0	; () banked
  3566  003D62  6FFF               	movwf	(_count_total+1)& (0+255),b
  3567  003D64  0E00               	movlw	0
  3568  003D66  6FFE               	movwf	_count_total& (0+255),b
  3569                           
  3570                           ;sort.c: 247: count_pop_no_tab = 0;
  3571  003D68  0E00               	movlw	0
  3572  003D6A  6E62               	movwf	_count_pop_no_tab+1,c
  3573  003D6C  0E00               	movlw	0
  3574  003D6E  6E61               	movwf	_count_pop_no_tab,c
  3575                           
  3576                           ;sort.c: 248: count_pop_w_tab = 0;
  3577  003D70  0E00               	movlw	0
  3578  003D72  6E64               	movwf	_count_pop_w_tab+1,c
  3579  003D74  0E00               	movlw	0
  3580  003D76  6E63               	movwf	_count_pop_w_tab,c
  3581                           
  3582                           ;sort.c: 249: count_can_w_lab = 0;
  3583  003D78  0E00               	movlw	0
  3584  003D7A  6E60               	movwf	_count_can_w_lab+1,c
  3585  003D7C  0E00               	movlw	0
  3586  003D7E  6E5F               	movwf	_count_can_w_lab,c
  3587                           
  3588                           ;sort.c: 250: count_can_no_lab = 0;
  3589  003D80  0E00               	movlw	0
  3590  003D82  6E5E               	movwf	_count_can_no_lab+1,c
  3591  003D84  0E00               	movlw	0
  3592  003D86  6E5D               	movwf	_count_can_no_lab,c
  3593                           
  3594                           ; BSR set to: 0
  3595  003D88  0012               	return		;funcret
  3596  003D8A                     __end_of_initGlobalVars:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           postinc0	equ	0xFEE
  3605                           wreg	equ	0xFE8
  3606                           postdec1	equ	0xFE5
  3607                           fsr1l	equ	0xFE1
  3608                           indf2	equ	0xFDF
  3609                           postinc2	equ	0xFDE
  3610                           postdec2	equ	0xFDD
  3611                           fsr2h	equ	0xFDA
  3612                           fsr2l	equ	0xFD9
  3613                           status	equ	0xFD8
  3614                           
  3615 ;; *************** function _getIR *****************
  3616 ;; Defined at:
  3617 ;;		line 310 in file "sort.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;		None
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;		None
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      void 
  3624 ;; Registers used:
  3625 ;;		wreg, status,2, status,0, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;Total ram usage:        2 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    9
  3638 ;; This function calls:
  3639 ;;		_readIR
  3640 ;; This function is called by:
  3641 ;;		_Loading
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text6
  3646  004016                     __ptext6:
  3647                           	opt stack 0
  3648  004016                     _getIR:
  3649                           	opt stack 19
  3650                           
  3651                           ;sort.c: 311: readIR();
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;incstack = 0
  3655  004016  EC85  F020         	call	_readIR	;wreg free
  3656                           
  3657                           ;sort.c: 313: if(IR_signal==1){
  3658  00401A  0100               	movlb	0	; () banked
  3659  00401C  05DA               	decf	_IR_signal& (0+255),w,b
  3660  00401E  0100               	movlb	0	; () banked
  3661  004020  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3662  004022  A4D8               	btfss	status,2,c
  3663  004024  0012               	return	
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 314: _delay((unsigned long)((500)*(32000000/4000.0)));
  3667  004026  0E15               	movlw	21
  3668  004028  0100               	movlb	0	; () banked
  3669  00402A  6F87               	movwf	(??_getIR+1)& (0+255),b
  3670  00402C  0E4B               	movlw	75
  3671  00402E  0100               	movlb	0	; () banked
  3672  004030  6F86               	movwf	??_getIR& (0+255),b
  3673  004032  0EBE               	movlw	190
  3674  004034                     u7077:
  3675  004034  2EE8               	decfsz	wreg,f,c
  3676  004036  D7FE               	bra	u7077
  3677  004038  2F86               	decfsz	??_getIR& (0+255),f,b
  3678  00403A  D7FC               	bra	u7077
  3679  00403C  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3680  00403E  D7FA               	bra	u7077
  3681  004040  F000               	nop	
  3682                           
  3683                           ;sort.c: 315: readIR();
  3684  004042  EC85  F020         	call	_readIR	;wreg free
  3685                           
  3686                           ;sort.c: 316: if(IR_signal==1){
  3687  004046  0100               	movlb	0	; () banked
  3688  004048  05DA               	decf	_IR_signal& (0+255),w,b
  3689  00404A  0100               	movlb	0	; () banked
  3690  00404C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3691  00404E  A4D8               	btfss	status,2,c
  3692  004050  D006               	goto	l6085
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;sort.c: 317: f_loadingNewCan = 1;
  3696  004052  0E00               	movlw	0
  3697  004054  0100               	movlb	0	; () banked
  3698  004056  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3699  004058  0E01               	movlw	1
  3700  00405A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3701                           
  3702                           ;sort.c: 318: }
  3703  00405C  0012               	return	
  3704  00405E                     l6085:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;sort.c: 319: else{
  3708                           ;sort.c: 320: f_loadingNewCan = 0;
  3709  00405E  0E00               	movlw	0
  3710  004060  0100               	movlb	0	; () banked
  3711  004062  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3712  004064  0E00               	movlw	0
  3713  004066  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3714                           
  3715                           ; BSR set to: 0
  3716  004068  0012               	return	
  3717  00406A                     __end_of_getIR:
  3718                           	opt stack 0
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           postdec1	equ	0xFE5
  3728                           fsr1l	equ	0xFE1
  3729                           indf2	equ	0xFDF
  3730                           postinc2	equ	0xFDE
  3731                           postdec2	equ	0xFDD
  3732                           fsr2h	equ	0xFDA
  3733                           fsr2l	equ	0xFD9
  3734                           status	equ	0xFD8
  3735                           
  3736 ;; *************** function _readIR *****************
  3737 ;; Defined at:
  3738 ;;		line 23 in file "ADCFunctionality.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;		None
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  res             2    4[BANK0 ] int 
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      void 
  3745 ;; Registers used:
  3746 ;;		wreg, status,2, status,0, cstack
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;Total ram usage:        4 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:    8
  3759 ;; This function calls:
  3760 ;;		_readADC
  3761 ;; This function is called by:
  3762 ;;		_getIR
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text7
  3767  00410A                     __ptext7:
  3768                           	opt stack 0
  3769  00410A                     _readIR:
  3770                           	opt stack 19
  3771                           
  3772                           ;ADCFunctionality.c: 24: readADC(0);
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;incstack = 0
  3776  00410A  0E00               	movlw	0
  3777  00410C  ECE8  F022         	call	_readADC
  3778                           
  3779                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3780  004110  50C3               	movf	4035,w,c	;volatile
  3781  004112  CFC4 F082          	movff	4036,??_readIR	;volatile
  3782  004116  0100               	movlb	0	; () banked
  3783  004118  6B83               	clrf	(??_readIR+1)& (0+255),b
  3784  00411A  C082  F083         	movff	??_readIR,??_readIR+1
  3785  00411E  0100               	movlb	0	; () banked
  3786  004120  6B82               	clrf	??_readIR& (0+255),b
  3787  004122  0100               	movlb	0	; () banked
  3788  004124  1182               	iorwf	??_readIR& (0+255),w,b
  3789  004126  0100               	movlb	0	; () banked
  3790  004128  6F84               	movwf	readIR@res& (0+255),b
  3791  00412A  0100               	movlb	0	; () banked
  3792  00412C  5183               	movf	(??_readIR+1)& (0+255),w,b
  3793  00412E  0100               	movlb	0	; () banked
  3794  004130  6F85               	movwf	(readIR@res+1)& (0+255),b
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  3798  004132  0100               	movlb	0	; () banked
  3799  004134  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3800  004136  D00A               	goto	u3770
  3801  004138  0E21               	movlw	33
  3802  00413A  0100               	movlb	0	; () banked
  3803  00413C  5D84               	subwf	readIR@res& (0+255),w,b
  3804  00413E  0E03               	movlw	3
  3805  004140  0100               	movlb	0	; () banked
  3806  004142  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3807  004144  A0D8               	btfss	status,0,c
  3808  004146  D002               	goto	u3770
  3809  004148  0E01               	movlw	1
  3810  00414A  D001               	goto	u3780
  3811  00414C                     u3770:
  3812  00414C  0E00               	movlw	0
  3813  00414E                     u3780:
  3814  00414E  0100               	movlb	0	; () banked
  3815  004150  6FDA               	movwf	_IR_signal& (0+255),b
  3816  004152  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3817                           
  3818                           ; BSR set to: 0
  3819  004154  0012               	return		;funcret
  3820  004156                     __end_of_readIR:
  3821                           	opt stack 0
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           postinc0	equ	0xFEE
  3829                           wreg	equ	0xFE8
  3830                           postdec1	equ	0xFE5
  3831                           fsr1l	equ	0xFE1
  3832                           indf2	equ	0xFDF
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _delay_ms *****************
  3840 ;; Defined at:
  3841 ;;		line 345 in file "sort.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  milliseconds    1    wreg     unsigned char 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, status,2, status,0, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;Total ram usage:        2 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    7
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_Loading
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text8
  3870  004626                     __ptext8:
  3871                           	opt stack 0
  3872  004626                     _delay_ms:
  3873                           	opt stack 21
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;incstack = 0
  3877                           ;delay_ms@milliseconds stored from wreg
  3878  004626  0100               	movlb	0	; () banked
  3879  004628  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3880                           
  3881                           ;sort.c: 346: while(milliseconds > 0)
  3882  00462A  D00B               	goto	l6057
  3883  00462C                     l6053:
  3884                           
  3885                           ;sort.c: 347: {
  3886                           ;sort.c: 348: milliseconds--;
  3887  00462C  0100               	movlb	0	; () banked
  3888  00462E  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;sort.c: 349: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3892  004630  0E0B               	movlw	11
  3893  004632  0100               	movlb	0	; () banked
  3894  004634  6F80               	movwf	??_delay_ms& (0+255),b
  3895  004636  0E47               	movlw	71
  3896  004638                     u7087:
  3897  004638  2EE8               	decfsz	wreg,f,c
  3898  00463A  D7FE               	bra	u7087
  3899  00463C  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3900  00463E  D7FC               	bra	u7087
  3901  004640  D000               	nop2	
  3902  004642                     l6057:
  3903  004642  0100               	movlb	0	; () banked
  3904  004644  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3905  004646  0100               	movlb	0	; () banked
  3906  004648  B4D8               	btfsc	status,2,c
  3907  00464A  0012               	return	
  3908  00464C  D7EF               	goto	l6053
  3909  00464E                     __end_of_delay_ms:
  3910                           	opt stack 0
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           postdec1	equ	0xFE5
  3920                           fsr1l	equ	0xFE1
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _ID *****************
  3929 ;; Defined at:
  3930 ;;		line 124 in file "sort.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  i               2   10[BANK0 ] int 
  3935 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      void 
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;Total ram usage:       10 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:   10
  3952 ;; This function calls:
  3953 ;;		_getMAG
  3954 ;; This function is called by:
  3955 ;;		_sort
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           	psect	text9
  3960  002DAE                     __ptext9:
  3961                           	opt stack 0
  3962  002DAE                     _ID:
  3963                           	opt stack 19
  3964                           
  3965                           ;sort.c: 125: if(f_can_coming_to_ID){
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;incstack = 0
  3969  002DAE  506D               	movf	_f_can_coming_to_ID,w,c
  3970  002DB0  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3971  002DB2  B4D8               	btfsc	status,2,c
  3972  002DB4  0012               	return	
  3973                           
  3974                           ;sort.c: 127: _delay((unsigned long)((750)*(32000000/4000.0)));
  3975  002DB6  0E1F               	movlw	31
  3976  002DB8  0100               	movlb	0	; () banked
  3977  002DBA  6F89               	movwf	(??_ID+1)& (0+255),b
  3978  002DBC  0E71               	movlw	113
  3979  002DBE  0100               	movlb	0	; () banked
  3980  002DC0  6F88               	movwf	??_ID& (0+255),b
  3981  002DC2  0E1E               	movlw	30
  3982  002DC4                     u7097:
  3983  002DC4  2EE8               	decfsz	wreg,f,c
  3984  002DC6  D7FE               	bra	u7097
  3985  002DC8  2F88               	decfsz	??_ID& (0+255),f,b
  3986  002DCA  D7FC               	bra	u7097
  3987  002DCC  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  3988  002DCE  D7FA               	bra	u7097
  3989  002DD0  F000               	nop	
  3990                           
  3991                           ;sort.c: 132: int sensor_outputs[3];
  3992                           ;sort.c: 136: sensor_outputs[0] = PORTAbits.RA2;
  3993  002DD2  A480               	btfss	3968,2,c	;volatile
  3994  002DD4  D004               	goto	u4890
  3995  002DD6  0100               	movlb	0	; () banked
  3996  002DD8  6B88               	clrf	??_ID& (0+255),b
  3997  002DDA  2B88               	incf	??_ID& (0+255),f,b
  3998  002DDC  D002               	goto	u4898
  3999  002DDE                     u4890:
  4000  002DDE  0100               	movlb	0	; () banked
  4001  002DE0  6B88               	clrf	??_ID& (0+255),b
  4002  002DE2                     u4898:
  4003  002DE2  0100               	movlb	0	; () banked
  4004  002DE4  5188               	movf	??_ID& (0+255),w,b
  4005  002DE6  0100               	movlb	0	; () banked
  4006  002DE8  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  4007  002DEA  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;sort.c: 138: if(!sensor_outputs[0]){
  4011  002DEC  0100               	movlb	0	; () banked
  4012  002DEE  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4013  002DF0  0100               	movlb	0	; () banked
  4014  002DF2  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4015  002DF4  A4D8               	btfss	status,2,c
  4016  002DF6  D029               	goto	l6451
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;sort.c: 139: getMAG();
  4020  002DF8  EC83  F021         	call	_getMAG	;wreg free
  4021                           
  4022                           ;sort.c: 140: sensor_outputs[1] = MAG_signal;
  4023  002DFC  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  4024  002E00  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4025                           
  4026                           ;sort.c: 141: if(!sensor_outputs[1]){
  4027  002E04  0100               	movlb	0	; () banked
  4028  002E06  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4029  002E08  0100               	movlb	0	; () banked
  4030  002E0A  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4031  002E0C  A4D8               	btfss	status,2,c
  4032  002E0E  D01D               	goto	l6451
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 142: LATAbits.LATA3 = 1;
  4036  002E10  8689               	bsf	3977,3,c	;volatile
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;sort.c: 144: _delay((unsigned long)((600)*(32000000/4000.0)));
  4040  002E12  0E19               	movlw	25
  4041  002E14  0100               	movlb	0	; () banked
  4042  002E16  6F89               	movwf	(??_ID+1)& (0+255),b
  4043  002E18  0E5A               	movlw	90
  4044  002E1A  0100               	movlb	0	; () banked
  4045  002E1C  6F88               	movwf	??_ID& (0+255),b
  4046  002E1E  0EB1               	movlw	177
  4047  002E20                     u7107:
  4048  002E20  2EE8               	decfsz	wreg,f,c
  4049  002E22  D7FE               	bra	u7107
  4050  002E24  2F88               	decfsz	??_ID& (0+255),f,b
  4051  002E26  D7FC               	bra	u7107
  4052  002E28  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4053  002E2A  D7FA               	bra	u7107
  4054  002E2C  D000               	nop2	
  4055                           
  4056                           ;sort.c: 145: sensor_outputs[2] = PORTAbits.RA2;
  4057  002E2E  A480               	btfss	3968,2,c	;volatile
  4058  002E30  D004               	goto	u4920
  4059  002E32  0100               	movlb	0	; () banked
  4060  002E34  6B88               	clrf	??_ID& (0+255),b
  4061  002E36  2B88               	incf	??_ID& (0+255),f,b
  4062  002E38  D002               	goto	u4928
  4063  002E3A                     u4920:
  4064  002E3A  0100               	movlb	0	; () banked
  4065  002E3C  6B88               	clrf	??_ID& (0+255),b
  4066  002E3E                     u4928:
  4067  002E3E  0100               	movlb	0	; () banked
  4068  002E40  5188               	movf	??_ID& (0+255),w,b
  4069  002E42  0100               	movlb	0	; () banked
  4070  002E44  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4071  002E46  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;sort.c: 146: LATAbits.LATA3 = 0;
  4075  002E48  9689               	bcf	3977,3,c	;volatile
  4076  002E4A                     l6451:
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;sort.c: 147: }
  4080                           ;sort.c: 148: }
  4081                           ;sort.c: 156: if(!sensor_outputs[0]){
  4082  002E4A  0100               	movlb	0	; () banked
  4083  002E4C  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4084  002E4E  0100               	movlb	0	; () banked
  4085  002E50  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4086  002E52  A4D8               	btfss	status,2,c
  4087  002E54  D021               	goto	l6469
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;sort.c: 157: if(!sensor_outputs[1]){
  4091  002E56  0100               	movlb	0	; () banked
  4092  002E58  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4093  002E5A  0100               	movlb	0	; () banked
  4094  002E5C  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4095  002E5E  A4D8               	btfss	status,2,c
  4096  002E60  D014               	goto	l6465
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;sort.c: 158: if(!sensor_outputs[2]){
  4100  002E62  0100               	movlb	0	; () banked
  4101  002E64  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4102  002E66  0100               	movlb	0	; () banked
  4103  002E68  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4104  002E6A  A4D8               	btfss	status,2,c
  4105  002E6C  D007               	goto	l6461
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;sort.c: 159: count_pop_no_tab++;
  4109  002E6E  4A61               	infsnz	_count_pop_no_tab,f,c
  4110  002E70  2A62               	incf	_count_pop_no_tab+1,f,c
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;sort.c: 160: cur_can = 0;
  4114  002E72  0E00               	movlw	0
  4115  002E74  0101               	movlb	1	; () banked
  4116  002E76  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4117  002E78  0E00               	movlw	0
  4118  002E7A  D014               	goto	L4
  4119  002E7C                     l6461:
  4120                           
  4121                           ;sort.c: 162: else{
  4122                           ;sort.c: 163: count_pop_w_tab++;
  4123  002E7C  4A63               	infsnz	_count_pop_w_tab,f,c
  4124  002E7E  2A64               	incf	_count_pop_w_tab+1,f,c
  4125                           
  4126                           ;sort.c: 164: cur_can = 1;
  4127  002E80  0E00               	movlw	0
  4128  002E82  0101               	movlb	1	; () banked
  4129  002E84  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4130  002E86  0E01               	movlw	1
  4131  002E88  D00D               	goto	L4
  4132  002E8A                     l6465:
  4133                           
  4134                           ;sort.c: 167: else{
  4135                           ;sort.c: 168: count_can_w_lab++;
  4136  002E8A  4A5F               	infsnz	_count_can_w_lab,f,c
  4137  002E8C  2A60               	incf	_count_can_w_lab+1,f,c
  4138                           
  4139                           ;sort.c: 169: cur_can = 2;
  4140  002E8E  0E00               	movlw	0
  4141  002E90  0101               	movlb	1	; () banked
  4142  002E92  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4143  002E94  0E02               	movlw	2
  4144  002E96  D006               	goto	L4
  4145  002E98                     l6469:
  4146                           
  4147                           ;sort.c: 172: else{
  4148                           ;sort.c: 173: count_can_no_lab++;
  4149  002E98  4A5D               	infsnz	_count_can_no_lab,f,c
  4150  002E9A  2A5E               	incf	_count_can_no_lab+1,f,c
  4151                           
  4152                           ;sort.c: 174: cur_can = 3;
  4153  002E9C  0E00               	movlw	0
  4154  002E9E  0101               	movlb	1	; () banked
  4155  002EA0  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4156  002EA2  0E03               	movlw	3
  4157  002EA4                     L4:
  4158  002EA4  6F2B               	movwf	_cur_can& (0+255),b
  4159                           
  4160                           ; BSR set to: 1
  4161                           ;sort.c: 175: }
  4162                           ;sort.c: 179: for(int i=0;i<10000;i++)
  4163                           
  4164                           ; BSR set to: 1
  4165  002EA6  0E00               	movlw	0
  4166  002EA8  0100               	movlb	0	; () banked
  4167  002EAA  6F8B               	movwf	(ID@i+1)& (0+255),b
  4168  002EAC  0E00               	movlw	0
  4169  002EAE  6F8A               	movwf	ID@i& (0+255),b
  4170  002EB0                     l6475:
  4171                           
  4172                           ; BSR set to: 0
  4173  002EB0  0100               	movlb	0	; () banked
  4174  002EB2  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4175  002EB4  D008               	goto	l750
  4176  002EB6  0E10               	movlw	16
  4177  002EB8  0100               	movlb	0	; () banked
  4178  002EBA  5D8A               	subwf	ID@i& (0+255),w,b
  4179  002EBC  0E27               	movlw	39
  4180  002EBE  0100               	movlb	0	; () banked
  4181  002EC0  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4182  002EC2  B0D8               	btfsc	status,0,c
  4183  002EC4  D00D               	goto	l751
  4184  002EC6                     l750:
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;sort.c: 180: {
  4188                           ;sort.c: 181: LATCbits.LATC0 = 1;
  4189  002EC6  808B               	bsf	3979,0,c	;volatile
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;sort.c: 182: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4193  002EC8  0E1A               	movlw	26
  4194  002ECA                     u7117:
  4195  002ECA  2EE8               	decfsz	wreg,f,c
  4196  002ECC  D7FE               	bra	u7117
  4197  002ECE  D000               	nop2	
  4198                           
  4199                           ;sort.c: 183: LATCbits.LATC0 = 0;
  4200  002ED0  908B               	bcf	3979,0,c	;volatile
  4201                           
  4202                           ;sort.c: 184: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4203  002ED2  0EF0               	movlw	240
  4204  002ED4                     u7127:
  4205  002ED4  2EE8               	decfsz	wreg,f,c
  4206  002ED6  D7FE               	bra	u7127
  4207  002ED8  0100               	movlb	0	; () banked
  4208  002EDA  4B8A               	infsnz	ID@i& (0+255),f,b
  4209  002EDC  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4210  002EDE  D7E8               	goto	l6475
  4211  002EE0                     l751:
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;sort.c: 185: }
  4215                           ;sort.c: 186: LATCbits.LATC0 = 0;
  4216  002EE0  908B               	bcf	3979,0,c	;volatile
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;sort.c: 188: f_can_coming_to_distribution = 1;
  4220  002EE2  0E00               	movlw	0
  4221  002EE4  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4222  002EE6  0E01               	movlw	1
  4223  002EE8  6E6F               	movwf	_f_can_coming_to_distribution,c
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;sort.c: 189: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4227  002EEA  0E3D               	movlw	61
  4228  002EEC  0100               	movlb	0	; () banked
  4229  002EEE  6F89               	movwf	(??_ID+1)& (0+255),b
  4230  002EF0  0EE1               	movlw	225
  4231  002EF2  0100               	movlb	0	; () banked
  4232  002EF4  6F88               	movwf	??_ID& (0+255),b
  4233  002EF6  0E3F               	movlw	63
  4234  002EF8                     u7137:
  4235  002EF8  2EE8               	decfsz	wreg,f,c
  4236  002EFA  D7FE               	bra	u7137
  4237  002EFC  2F88               	decfsz	??_ID& (0+255),f,b
  4238  002EFE  D7FC               	bra	u7137
  4239  002F00  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4240  002F02  D7FA               	bra	u7137
  4241  002F04  D000               	nop2	
  4242                           
  4243                           ;sort.c: 190: LATCbits.LATC0 = 1;
  4244  002F06  808B               	bsf	3979,0,c	;volatile
  4245                           
  4246                           ;sort.c: 192: f_can_coming_to_ID = 0;
  4247  002F08  0E00               	movlw	0
  4248  002F0A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4249  002F0C  0E00               	movlw	0
  4250  002F0E  6E6D               	movwf	_f_can_coming_to_ID,c
  4251  002F10  0012               	return	
  4252  002F12                     __end_of_ID:
  4253                           	opt stack 0
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           prodh	equ	0xFF4
  4259                           prodl	equ	0xFF3
  4260                           postinc0	equ	0xFEE
  4261                           wreg	equ	0xFE8
  4262                           postdec1	equ	0xFE5
  4263                           fsr1l	equ	0xFE1
  4264                           indf2	equ	0xFDF
  4265                           postinc2	equ	0xFDE
  4266                           postdec2	equ	0xFDD
  4267                           fsr2h	equ	0xFDA
  4268                           fsr2l	equ	0xFD9
  4269                           status	equ	0xFD8
  4270                           
  4271 ;; *************** function _getMAG *****************
  4272 ;; Defined at:
  4273 ;;		line 324 in file "sort.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;		None
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;		None
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  1    wreg      void 
  4280 ;; Registers used:
  4281 ;;		wreg, status,2, status,0, cstack
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;Total ram usage:        2 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    9
  4294 ;; This function calls:
  4295 ;;		_readMAG
  4296 ;; This function is called by:
  4297 ;;		_ID
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text10
  4302  004306                     __ptext10:
  4303                           	opt stack 0
  4304  004306                     _getMAG:
  4305                           	opt stack 19
  4306                           
  4307                           ;sort.c: 325: readMAG();
  4308                           
  4309                           ;incstack = 0
  4310  004306  ECAB  F020         	call	_readMAG	;wreg free
  4311                           
  4312                           ;sort.c: 327: if(MAG_signal==1){
  4313  00430A  0100               	movlb	0	; () banked
  4314  00430C  05DC               	decf	_MAG_signal& (0+255),w,b
  4315  00430E  0100               	movlb	0	; () banked
  4316  004310  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4317  004312  A4D8               	btfss	status,2,c
  4318  004314  0012               	return	
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;sort.c: 328: _delay((unsigned long)((500)*(32000000/4000.0)));
  4322  004316  0E15               	movlw	21
  4323  004318  0100               	movlb	0	; () banked
  4324  00431A  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4325  00431C  0E4B               	movlw	75
  4326  00431E  0100               	movlb	0	; () banked
  4327  004320  6F86               	movwf	??_getMAG& (0+255),b
  4328  004322  0EBE               	movlw	190
  4329  004324                     u7147:
  4330  004324  2EE8               	decfsz	wreg,f,c
  4331  004326  D7FE               	bra	u7147
  4332  004328  2F86               	decfsz	??_getMAG& (0+255),f,b
  4333  00432A  D7FC               	bra	u7147
  4334  00432C  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4335  00432E  D7FA               	bra	u7147
  4336  004330  F000               	nop	
  4337                           
  4338                           ;sort.c: 329: readMAG();
  4339  004332  ECAB  F020         	call	_readMAG	;wreg free
  4340  004336  0012               	return	
  4341  004338                     __end_of_getMAG:
  4342                           	opt stack 0
  4343                           tblptru	equ	0xFF8
  4344                           tblptrh	equ	0xFF7
  4345                           tblptrl	equ	0xFF6
  4346                           tablat	equ	0xFF5
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           postinc0	equ	0xFEE
  4350                           wreg	equ	0xFE8
  4351                           postdec1	equ	0xFE5
  4352                           fsr1l	equ	0xFE1
  4353                           indf2	equ	0xFDF
  4354                           postinc2	equ	0xFDE
  4355                           postdec2	equ	0xFDD
  4356                           fsr2h	equ	0xFDA
  4357                           fsr2l	equ	0xFD9
  4358                           status	equ	0xFD8
  4359                           
  4360 ;; *************** function _Distribution *****************
  4361 ;; Defined at:
  4362 ;;		line 195 in file "sort.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;		None
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;		None
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;Total ram usage:        2 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    8
  4383 ;; This function calls:
  4384 ;;		_updateServoPosition
  4385 ;; This function is called by:
  4386 ;;		_sort
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text11
  4391  002F12                     __ptext11:
  4392                           	opt stack 0
  4393  002F12                     _Distribution:
  4394                           	opt stack 21
  4395                           
  4396                           ;sort.c: 196: if(f_can_coming_to_distribution){
  4397                           
  4398                           ;incstack = 0
  4399  002F12  506F               	movf	_f_can_coming_to_distribution,w,c
  4400  002F14  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4401  002F16  B4D8               	btfsc	status,2,c
  4402  002F18  0012               	return	
  4403  002F1A  D034               	goto	l6507
  4404  002F1C                     l6497:
  4405                           
  4406                           ;sort.c: 201: updateServoPosition(500, 1);
  4407  002F1C  0E01               	movlw	1
  4408  002F1E  0100               	movlb	0	; () banked
  4409  002F20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4410  002F22  0EF4               	movlw	244
  4411  002F24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4412  002F26  0E00               	movlw	0
  4413  002F28  0100               	movlb	0	; () banked
  4414  002F2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4415  002F2C  0E01               	movlw	1
  4416  002F2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4417  002F30  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4418                           
  4419                           ;sort.c: 202: break;
  4420  002F34  D03E               	goto	l6509
  4421  002F36                     l6499:
  4422                           
  4423                           ;sort.c: 204: updateServoPosition(750, 1);
  4424  002F36  0E02               	movlw	2
  4425  002F38  0100               	movlb	0	; () banked
  4426  002F3A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4427  002F3C  0EEE               	movlw	238
  4428  002F3E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4429  002F40  0E00               	movlw	0
  4430  002F42  0100               	movlb	0	; () banked
  4431  002F44  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4432  002F46  0E01               	movlw	1
  4433  002F48  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4434  002F4A  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4435                           
  4436                           ;sort.c: 205: break;
  4437  002F4E  D031               	goto	l6509
  4438  002F50                     l6501:
  4439                           
  4440                           ;sort.c: 207: updateServoPosition(1700, 1);
  4441  002F50  0E06               	movlw	6
  4442  002F52  0100               	movlb	0	; () banked
  4443  002F54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4444  002F56  0EA4               	movlw	164
  4445  002F58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4446  002F5A  0E00               	movlw	0
  4447  002F5C  0100               	movlb	0	; () banked
  4448  002F5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4449  002F60  0E01               	movlw	1
  4450  002F62  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4451  002F64  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4452                           
  4453                           ;sort.c: 208: break;
  4454  002F68  D024               	goto	l6509
  4455  002F6A                     l6503:
  4456                           
  4457                           ;sort.c: 210: updateServoPosition(2100, 1);
  4458  002F6A  0E08               	movlw	8
  4459  002F6C  0100               	movlb	0	; () banked
  4460  002F6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4461  002F70  0E34               	movlw	52
  4462  002F72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4463  002F74  0E00               	movlw	0
  4464  002F76  0100               	movlb	0	; () banked
  4465  002F78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4466  002F7A  0E01               	movlw	1
  4467  002F7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4468  002F7E  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4469                           
  4470                           ;sort.c: 214: }
  4471                           
  4472                           ;sort.c: 213: break;
  4473                           
  4474                           ;sort.c: 212: default:
  4475                           
  4476                           ;sort.c: 211: break;
  4477  002F82  D017               	goto	l6509
  4478  002F84                     l6507:
  4479  002F84  C12B  F088         	movff	_cur_can,??_Distribution
  4480  002F88  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  4481                           
  4482                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4483                           ; Switch size 1, requested type "space"
  4484                           ; Number of cases is 1, Range of values is 0 to 0
  4485                           ; switch strategies available:
  4486                           ; Name         Instructions Cycles
  4487                           ; simple_byte            4     3 (average)
  4488                           ;	Chosen strategy is simple_byte
  4489  002F8C  0100               	movlb	0	; () banked
  4490  002F8E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4491  002F90  0A00               	xorlw	0	; case 0
  4492  002F92  A4D8               	btfss	status,2,c
  4493  002F94  D00E               	goto	l6509
  4494                           
  4495                           ; BSR set to: 0
  4496                           ; Switch size 1, requested type "space"
  4497                           ; Number of cases is 4, Range of values is 0 to 3
  4498                           ; switch strategies available:
  4499                           ; Name         Instructions Cycles
  4500                           ; simple_byte           13     7 (average)
  4501                           ;	Chosen strategy is simple_byte
  4502  002F96  0100               	movlb	0	; () banked
  4503  002F98  5188               	movf	??_Distribution& (0+255),w,b
  4504  002F9A  0A00               	xorlw	0	; case 0
  4505  002F9C  B4D8               	btfsc	status,2,c
  4506  002F9E  D7BE               	goto	l6497
  4507  002FA0  0A01               	xorlw	1	; case 1
  4508  002FA2  B4D8               	btfsc	status,2,c
  4509  002FA4  D7C8               	goto	l6499
  4510  002FA6  0A03               	xorlw	3	; case 2
  4511  002FA8  B4D8               	btfsc	status,2,c
  4512  002FAA  D7D2               	goto	l6501
  4513  002FAC  0A01               	xorlw	1	; case 3
  4514  002FAE  B4D8               	btfsc	status,2,c
  4515  002FB0  D7DC               	goto	l6503
  4516  002FB2                     l6509:
  4517                           
  4518                           ;sort.c: 215: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4519  002FB2  0E3D               	movlw	61
  4520  002FB4  0100               	movlb	0	; () banked
  4521  002FB6  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4522  002FB8  0EE1               	movlw	225
  4523  002FBA  0100               	movlb	0	; () banked
  4524  002FBC  6F88               	movwf	??_Distribution& (0+255),b
  4525  002FBE  0E3F               	movlw	63
  4526  002FC0                     u7157:
  4527  002FC0  2EE8               	decfsz	wreg,f,c
  4528  002FC2  D7FE               	bra	u7157
  4529  002FC4  2F88               	decfsz	??_Distribution& (0+255),f,b
  4530  002FC6  D7FC               	bra	u7157
  4531  002FC8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4532  002FCA  D7FA               	bra	u7157
  4533  002FCC  D000               	nop2	
  4534                           
  4535                           ;sort.c: 218: updateServoPosition(1350, 3);
  4536  002FCE  0E05               	movlw	5
  4537  002FD0  0100               	movlb	0	; () banked
  4538  002FD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4539  002FD4  0E46               	movlw	70
  4540  002FD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4541  002FD8  0E00               	movlw	0
  4542  002FDA  0100               	movlb	0	; () banked
  4543  002FDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4544  002FDE  0E03               	movlw	3
  4545  002FE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4546  002FE2  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4547                           
  4548                           ;sort.c: 219: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4549  002FE6  0E52               	movlw	82
  4550  002FE8  0100               	movlb	0	; () banked
  4551  002FEA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4552  002FEC  0E2B               	movlw	43
  4553  002FEE  0100               	movlb	0	; () banked
  4554  002FF0  6F88               	movwf	??_Distribution& (0+255),b
  4555  002FF2  0E00               	movlw	0
  4556  002FF4                     u7167:
  4557  002FF4  2EE8               	decfsz	wreg,f,c
  4558  002FF6  D7FE               	bra	u7167
  4559  002FF8  2F88               	decfsz	??_Distribution& (0+255),f,b
  4560  002FFA  D7FC               	bra	u7167
  4561  002FFC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4562  002FFE  D7FA               	bra	u7167
  4563  003000  F000               	nop	
  4564                           
  4565                           ;sort.c: 222: updateServoPosition(1150, 3);
  4566  003002  0E04               	movlw	4
  4567  003004  0100               	movlb	0	; () banked
  4568  003006  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4569  003008  0E7E               	movlw	126
  4570  00300A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4571  00300C  0E00               	movlw	0
  4572  00300E  0100               	movlb	0	; () banked
  4573  003010  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4574  003012  0E03               	movlw	3
  4575  003014  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4576  003016  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4577                           
  4578                           ;sort.c: 223: _delay((unsigned long)((750)*(32000000/4000.0)));
  4579  00301A  0E1F               	movlw	31
  4580  00301C  0100               	movlb	0	; () banked
  4581  00301E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4582  003020  0E71               	movlw	113
  4583  003022  0100               	movlb	0	; () banked
  4584  003024  6F88               	movwf	??_Distribution& (0+255),b
  4585  003026  0E1E               	movlw	30
  4586  003028                     u7177:
  4587  003028  2EE8               	decfsz	wreg,f,c
  4588  00302A  D7FE               	bra	u7177
  4589  00302C  2F88               	decfsz	??_Distribution& (0+255),f,b
  4590  00302E  D7FC               	bra	u7177
  4591  003030  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4592  003032  D7FA               	bra	u7177
  4593  003034  F000               	nop	
  4594                           
  4595                           ;sort.c: 224: updateServoPosition(1200, 1);
  4596  003036  0E04               	movlw	4
  4597  003038  0100               	movlb	0	; () banked
  4598  00303A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4599  00303C  0EB0               	movlw	176
  4600  00303E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4601  003040  0E00               	movlw	0
  4602  003042  0100               	movlb	0	; () banked
  4603  003044  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4604  003046  0E01               	movlw	1
  4605  003048  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4606  00304A  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4607                           
  4608                           ;sort.c: 225: f_can_coming_to_distribution = 0;
  4609  00304E  0E00               	movlw	0
  4610  003050  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4611  003052  0E00               	movlw	0
  4612  003054  6E6F               	movwf	_f_can_coming_to_distribution,c
  4613                           
  4614                           ;sort.c: 226: f_can_distributed = 1;
  4615  003056  0E00               	movlw	0
  4616  003058  0101               	movlb	1	; () banked
  4617  00305A  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4618  00305C  0E01               	movlw	1
  4619  00305E  6F2D               	movwf	_f_can_distributed& (0+255),b
  4620                           
  4621                           ; BSR set to: 1
  4622                           ;sort.c: 227: if(f_lastCan == 1){
  4623  003060  0471               	decf	_f_lastCan,w,c
  4624  003062  1072               	iorwf	_f_lastCan+1,w,c
  4625  003064  A4D8               	btfss	status,2,c
  4626  003066  0012               	return	
  4627                           
  4628                           ; BSR set to: 1
  4629                           ;sort.c: 228: machine_state = DoneSorting_state;
  4630  003068  0E02               	movlw	2
  4631  00306A  0100               	movlb	0	; () banked
  4632  00306C  6FFC               	movwf	_machine_state& (0+255),b
  4633                           
  4634                           ; BSR set to: 0
  4635  00306E  0012               	return	
  4636  003070                     __end_of_Distribution:
  4637                           	opt stack 0
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           postinc0	equ	0xFEE
  4645                           wreg	equ	0xFE8
  4646                           postdec1	equ	0xFE5
  4647                           fsr1l	equ	0xFE1
  4648                           indf2	equ	0xFDF
  4649                           postinc2	equ	0xFDE
  4650                           postdec2	equ	0xFDD
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8
  4654                           
  4655 ;; *************** function _machineConfig *****************
  4656 ;; Defined at:
  4657 ;;		line 15 in file "MachineConfig.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;Total ram usage:        0 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    7
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_main
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text12
  4686  003EB4                     __ptext12:
  4687                           	opt stack 0
  4688  003EB4                     _machineConfig:
  4689                           	opt stack 23
  4690                           
  4691                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4692                           
  4693                           ;incstack = 0
  4694  003EB4  0EF0               	movlw	240
  4695  003EB6  6ED3               	movwf	4051,c	;volatile
  4696                           
  4697                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4698  003EB8  8C9B               	bsf	3995,6,c	;volatile
  4699                           
  4700                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4701  003EBA  0E07               	movlw	7
  4702  003EBC  6E92               	movwf	3986,c	;volatile
  4703                           
  4704                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4705  003EBE  0EF2               	movlw	242
  4706  003EC0  6E93               	movwf	3987,c	;volatile
  4707                           
  4708                           ;MachineConfig.c: 27: TRISC = 0x00;
  4709  003EC2  0E00               	movlw	0
  4710  003EC4  6E94               	movwf	3988,c	;volatile
  4711                           
  4712                           ;MachineConfig.c: 31: TRISD = 0x00;
  4713  003EC6  0E00               	movlw	0
  4714  003EC8  6E95               	movwf	3989,c	;volatile
  4715                           
  4716                           ;MachineConfig.c: 34: TRISE = 0x00;
  4717  003ECA  0E00               	movlw	0
  4718  003ECC  6E96               	movwf	3990,c	;volatile
  4719                           
  4720                           ;MachineConfig.c: 37: LATA = 0x00;
  4721  003ECE  0E00               	movlw	0
  4722  003ED0  6E89               	movwf	3977,c	;volatile
  4723                           
  4724                           ;MachineConfig.c: 38: LATB = 0x00;
  4725  003ED2  0E00               	movlw	0
  4726  003ED4  6E8A               	movwf	3978,c	;volatile
  4727                           
  4728                           ;MachineConfig.c: 39: LATC = 0x00;
  4729  003ED6  0E00               	movlw	0
  4730  003ED8  6E8B               	movwf	3979,c	;volatile
  4731                           
  4732                           ;MachineConfig.c: 40: LATD = 0x00;
  4733  003EDA  0E00               	movlw	0
  4734  003EDC  6E8C               	movwf	3980,c	;volatile
  4735                           
  4736                           ;MachineConfig.c: 41: LATE = 0x00;
  4737  003EDE  0E00               	movlw	0
  4738  003EE0  6E8D               	movwf	3981,c	;volatile
  4739                           
  4740                           ;MachineConfig.c: 43: nRBPU = 0;
  4741  003EE2  9EF1               	bcf	intcon2,7,c	;volatile
  4742                           
  4743                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4744  003EE4  0E00               	movlw	0
  4745  003EE6  6EC2               	movwf	4034,c	;volatile
  4746                           
  4747                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4748  003EE8  0E0D               	movlw	13
  4749  003EEA  6EC1               	movwf	4033,c	;volatile
  4750                           
  4751                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4752  003EEC  0E00               	movlw	0
  4753  003EEE  6EB5               	movwf	4021,c	;volatile
  4754                           
  4755                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4756  003EF0  96B4               	bcf	4020,3,c	;volatile
  4757                           
  4758                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4759  003EF2  0EB1               	movlw	177
  4760  003EF4  6EC0               	movwf	4032,c	;volatile
  4761                           
  4762                           ;MachineConfig.c: 55: INT1IE = 1;
  4763  003EF6  86F0               	bsf	intcon3,3,c	;volatile
  4764                           
  4765                           ;MachineConfig.c: 57: TMR0IE = 1;
  4766  003EF8  8AF2               	bsf	intcon,5,c	;volatile
  4767                           
  4768                           ;MachineConfig.c: 58: TMR1IE = 1;
  4769  003EFA  809D               	bsf	3997,0,c	;volatile
  4770                           
  4771                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4772  003EFC  0EB0               	movlw	176
  4773  003EFE  6ECD               	movwf	4045,c	;volatile
  4774                           
  4775                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4776  003F00  0EB0               	movlw	176
  4777  003F02  6EB1               	movwf	4017,c	;volatile
  4778                           
  4779                           ;MachineConfig.c: 61: TMR2IE = 1;
  4780  003F04  829D               	bsf	3997,1,c	;volatile
  4781                           
  4782                           ;MachineConfig.c: 62: TMR3IE = 1;
  4783  003F06  82A0               	bsf	4000,1,c	;volatile
  4784                           
  4785                           ;MachineConfig.c: 63: PEIE = 1;
  4786  003F08  8CF2               	bsf	intcon,6,c	;volatile
  4787                           
  4788                           ;MachineConfig.c: 64: ADIE = 0;
  4789  003F0A  9C9D               	bcf	3997,6,c	;volatile
  4790                           
  4791                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4792  003F0C  9EF2               	bcf	intcon,7,c	;volatile
  4793  003F0E  0012               	return		;funcret
  4794  003F10                     __end_of_machineConfig:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           intcon2	equ	0xFF1
  4804                           intcon3	equ	0xFF0
  4805                           postinc0	equ	0xFEE
  4806                           wreg	equ	0xFE8
  4807                           postdec1	equ	0xFE5
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           fsr2h	equ	0xFDA
  4813                           fsr2l	equ	0xFD9
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function _logRun *****************
  4817 ;; Defined at:
  4818 ;;		line 84 in file "EEPROM.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4823 ;;  i               2   55[BANK0 ] int 
  4824 ;;  num             1   49[BANK0 ] unsigned char 
  4825 ;;  addr            2   57[BANK0 ] unsigned short 
  4826 ;;  byte11          1   54[BANK0 ] unsigned char 
  4827 ;;  byte3           1   52[BANK0 ] unsigned char 
  4828 ;;  byte2           1   51[BANK0 ] unsigned char 
  4829 ;;  byte1           1   50[BANK0 ] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;Total ram usage:       10 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:   11
  4846 ;; This function calls:
  4847 ;;		_EEPROM_read
  4848 ;;		_EEPROM_write
  4849 ;; This function is called by:
  4850 ;;		_main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text13
  4855  003070                     __ptext13:
  4856                           	opt stack 0
  4857  003070                     _logRun:
  4858                           	opt stack 19
  4859                           
  4860                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4861                           
  4862                           ;incstack = 0
  4863  003070  0E00               	movlw	0
  4864  003072  0100               	movlb	0	; () banked
  4865  003074  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4866  003076  0E00               	movlw	0
  4867  003078  6F80               	movwf	EEPROM_read@address& (0+255),b
  4868  00307A  ECA4  F023         	call	_EEPROM_read	;wreg free
  4869  00307E  0100               	movlb	0	; () banked
  4870  003080  6FFD               	movwf	_sel& (0+255),b
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4874  003082  0100               	movlb	0	; () banked
  4875  003084  51FD               	movf	_sel& (0+255),w,b
  4876  003086  0D0B               	mullw	11
  4877  003088  0E01               	movlw	1
  4878  00308A  24F3               	addwf	prodl,w,c
  4879  00308C  0100               	movlb	0	; () banked
  4880  00308E  6FB9               	movwf	logRun@addr& (0+255),b
  4881  003090  0E00               	movlw	0
  4882  003092  20F4               	addwfc	prodh,w,c
  4883  003094  0100               	movlb	0	; () banked
  4884  003096  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;EEPROM.c: 101: if (sel < 3){
  4888  003098  0E03               	movlw	3
  4889  00309A  0100               	movlb	0	; () banked
  4890  00309C  61FD               	cpfslt	_sel& (0+255),b
  4891  00309E  D00E               	goto	l7949
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4895  0030A0  0100               	movlb	0	; () banked
  4896  0030A2  29FD               	incf	_sel& (0+255),w,b
  4897  0030A4  0100               	movlb	0	; () banked
  4898  0030A6  6FB1               	movwf	logRun@num& (0+255),b
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4902  0030A8  0E00               	movlw	0
  4903  0030AA  0100               	movlb	0	; () banked
  4904  0030AC  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4905  0030AE  0E00               	movlw	0
  4906  0030B0  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4907  0030B2  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4908  0030B6  ECE7  F019         	call	_EEPROM_write	;wreg free
  4909                           
  4910                           ;EEPROM.c: 104: }
  4911  0030BA  D00A               	goto	l7951
  4912  0030BC                     l7949:
  4913                           
  4914                           ;EEPROM.c: 105: else{
  4915                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4916  0030BC  0E00               	movlw	0
  4917  0030BE  0100               	movlb	0	; () banked
  4918  0030C0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4919  0030C2  0E00               	movlw	0
  4920  0030C4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4921  0030C6  0E00               	movlw	0
  4922  0030C8  0100               	movlb	0	; () banked
  4923  0030CA  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4924  0030CC  ECE7  F019         	call	_EEPROM_write	;wreg free
  4925  0030D0                     l7951:
  4926                           
  4927                           ;EEPROM.c: 107: }
  4928                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4929  0030D0  0100               	movlb	0	; () banked
  4930  0030D2  51FE               	movf	_count_total& (0+255),w,b
  4931  0030D4  0980               	iorlw	128
  4932  0030D6  0100               	movlb	0	; () banked
  4933  0030D8  6FB2               	movwf	logRun@byte1& (0+255),b
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4937  0030DA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4938  0030DE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4939  0030E2  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4940  0030E6  ECE7  F019         	call	_EEPROM_write	;wreg free
  4941                           
  4942                           ;EEPROM.c: 112: addr++;
  4943  0030EA  0100               	movlb	0	; () banked
  4944  0030EC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4945  0030EE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4949  0030F0  3861               	swapf	_count_pop_no_tab,w,c
  4950  0030F2  0BF0               	andlw	240
  4951  0030F4  1063               	iorwf	_count_pop_w_tab,w,c
  4952  0030F6  0100               	movlb	0	; () banked
  4953  0030F8  6FB3               	movwf	logRun@byte2& (0+255),b
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4957  0030FA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4958  0030FE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4959  003102  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4960  003106  ECE7  F019         	call	_EEPROM_write	;wreg free
  4961                           
  4962                           ;EEPROM.c: 117: addr++;
  4963  00310A  0100               	movlb	0	; () banked
  4964  00310C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4965  00310E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4969  003110  385F               	swapf	_count_can_w_lab,w,c
  4970  003112  0BF0               	andlw	240
  4971  003114  105D               	iorwf	_count_can_no_lab,w,c
  4972  003116  0100               	movlb	0	; () banked
  4973  003118  6FB4               	movwf	logRun@byte3& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4977  00311A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4978  00311E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4979  003122  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4980  003126  ECE7  F019         	call	_EEPROM_write	;wreg free
  4981                           
  4982                           ;EEPROM.c: 120: addr++;
  4983  00312A  0100               	movlb	0	; () banked
  4984  00312C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4985  00312E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4989  003130  0E00               	movlw	0
  4990  003132  0100               	movlb	0	; () banked
  4991  003134  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4992  003136  0E00               	movlw	0
  4993  003138  6FB7               	movwf	logRun@i& (0+255),b
  4994                           
  4995                           ; BSR set to: 0
  4996  00313A  0100               	movlb	0	; () banked
  4997  00313C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4998  00313E  D008               	goto	l7975
  4999  003140  0100               	movlb	0	; () banked
  5000  003142  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5001  003144  E128               	bnz	l952
  5002  003146  0E07               	movlw	7
  5003  003148  0100               	movlb	0	; () banked
  5004  00314A  5DB7               	subwf	logRun@i& (0+255),w,b
  5005  00314C  B0D8               	btfsc	status,0,c
  5006  00314E  D023               	goto	l952
  5007  003150                     l7975:
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5011  003150  90D8               	bcf	status,0,c
  5012  003152  0100               	movlb	0	; () banked
  5013  003154  35B7               	rlcf	logRun@i& (0+255),w,b
  5014  003156  6ED9               	movwf	fsr2l,c
  5015  003158  0100               	movlb	0	; () banked
  5016  00315A  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5017  00315C  6EDA               	movwf	fsr2h,c
  5018  00315E  0E0E               	movlw	low _startTime
  5019  003160  26D9               	addwf	fsr2l,f,c
  5020  003162  0E01               	movlw	high _startTime
  5021  003164  22DA               	addwfc	fsr2h,f,c
  5022  003166  50DF               	movf	indf2,w,c
  5023  003168  0100               	movlb	0	; () banked
  5024  00316A  6FB5               	movwf	logRun@byte_i& (0+255),b
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5028  00316C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5029  003170  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5030  003174  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5031  003178  ECE7  F019         	call	_EEPROM_write	;wreg free
  5032                           
  5033                           ;EEPROM.c: 126: addr++;
  5034  00317C  0100               	movlb	0	; () banked
  5035  00317E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5036  003180  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5037                           
  5038                           ; BSR set to: 0
  5039  003182  0100               	movlb	0	; () banked
  5040  003184  4BB7               	infsnz	logRun@i& (0+255),f,b
  5041  003186  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5042                           
  5043                           ; BSR set to: 0
  5044  003188  0100               	movlb	0	; () banked
  5045  00318A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5046  00318C  D7E1               	goto	l7975
  5047  00318E  0100               	movlb	0	; () banked
  5048  003190  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5049  003192  E101               	bnz	u6850
  5050  003194  D7D8               	goto	L5
  5051  003196                     u6850:
  5052  003196                     l952:
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;EEPROM.c: 127: }
  5056                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5057  003196  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5061  00319A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5062  00319E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5063  0031A2  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5064  0031A6  ECE7  F019         	call	_EEPROM_write	;wreg free
  5065  0031AA  0012               	return		;funcret
  5066  0031AC                     __end_of_logRun:
  5067                           	opt stack 0
  5068                           tblptru	equ	0xFF8
  5069                           tblptrh	equ	0xFF7
  5070                           tblptrl	equ	0xFF6
  5071                           tablat	equ	0xFF5
  5072                           prodh	equ	0xFF4
  5073                           prodl	equ	0xFF3
  5074                           intcon	equ	0xFF2
  5075                           intcon2	equ	0xFF1
  5076                           intcon3	equ	0xFF0
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           postdec1	equ	0xFE5
  5080                           fsr1l	equ	0xFE1
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _EEPROM_write *****************
  5089 ;; Defined at:
  5090 ;;		line 32 in file "EEPROM.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  address         2   43[BANK0 ] unsigned short 
  5093 ;;  data            1   45[BANK0 ] unsigned char 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  i               1   48[BANK0 ] unsigned char 
  5096 ;;  i               1   47[BANK0 ] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5106 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;Total ram usage:        6 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:   10
  5113 ;; This function calls:
  5114 ;;		_EEPROM_read
  5115 ;;		_lcdInst
  5116 ;;		_printf
  5117 ;; This function is called by:
  5118 ;;		_Loading
  5119 ;;		_logRun
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text14
  5124  0033CE                     __ptext14:
  5125                           	opt stack 0
  5126  0033CE                     _EEPROM_write:
  5127                           	opt stack 18
  5128                           
  5129                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5130                           
  5131                           ;incstack = 0
  5132  0033CE  84A6               	bsf	4006,2,c	;volatile
  5133                           
  5134                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5135  0033D0  0100               	movlb	0	; () banked
  5136  0033D2  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5137  0033D4  6EAA               	movwf	4010,c	;volatile
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5141  0033D6  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;EEPROM.c: 39: EEDATA = data;
  5145  0033DA  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5149  0033DE  9EA6               	bcf	4006,7,c	;volatile
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5153  0033E0  9CA6               	bcf	4006,6,c	;volatile
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5157  0033E2  9EF2               	bcf	intcon,7,c	;volatile
  5158                           
  5159                           ;EEPROM.c: 45: EECON2 = 0x55;
  5160  0033E4  0E55               	movlw	85
  5161  0033E6  6EA7               	movwf	4007,c	;volatile
  5162                           
  5163                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5164  0033E8  0EAA               	movlw	170
  5165  0033EA  6EA7               	movwf	4007,c	;volatile
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5169  0033EC  82A6               	bsf	4006,1,c	;volatile
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5173  0033EE  8EF2               	bsf	intcon,7,c	;volatile
  5174  0033F0                     l930:
  5175  0033F0  A8A1               	btfss	4001,4,c	;volatile
  5176  0033F2  D7FE               	goto	l930
  5177                           
  5178                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5179  0033F4  98A1               	bcf	4001,4,c	;volatile
  5180                           
  5181                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5182  0033F6  94A6               	bcf	4006,2,c	;volatile
  5183                           
  5184                           ;EEPROM.c: 57: if(debug){
  5185  0033F8  5065               	movf	_debug,w,c
  5186  0033FA  1066               	iorwf	_debug+1,w,c
  5187  0033FC  B4D8               	btfsc	status,2,c
  5188  0033FE  0012               	return	
  5189                           
  5190                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5191  003400  0E01               	movlw	1
  5192  003402  ECE1  F023         	call	_lcdInst
  5193  003406  0E68               	movlw	104
  5194  003408  0100               	movlb	0	; () banked
  5195  00340A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5196  00340C  0EE4               	movlw	228
  5197  00340E                     u7187:
  5198  00340E  2EE8               	decfsz	wreg,f,c
  5199  003410  D7FE               	bra	u7187
  5200  003412  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5201  003414  D7FC               	bra	u7187
  5202  003416  F000               	nop	
  5203                           
  5204                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5205  003418  0E80               	movlw	128
  5206  00341A  ECE1  F023         	call	_lcdInst
  5207                           
  5208                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5209  00341E  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5210  003422  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5211  003426  ECA4  F023         	call	_EEPROM_read	;wreg free
  5212  00342A  0100               	movlb	0	; () banked
  5213  00342C  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5214  00342E  A4D8               	btfss	status,2,c
  5215  003430  D024               	goto	l6039
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5219  003432  0E54               	movlw	low STR_66
  5220  003434  0100               	movlb	0	; () banked
  5221  003436  6F8E               	movwf	printf@f& (0+255),b
  5222  003438  0EFB               	movlw	high STR_66
  5223  00343A  0100               	movlb	0	; () banked
  5224  00343C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5225  00343E  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5226  003442  0100               	movlb	0	; () banked
  5227  003444  6B91               	clrf	(?_printf+3)& (0+255),b
  5228  003446  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5229  00344A  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5230  00344E  ECB8  F008         	call	_printf	;wreg free
  5231                           
  5232                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5233  003452  0E00               	movlw	0
  5234  003454  0100               	movlb	0	; () banked
  5235  003456  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5236  003458                     l6031:
  5237                           
  5238                           ; BSR set to: 0
  5239  003458  0E63               	movlw	99
  5240  00345A  0100               	movlb	0	; () banked
  5241  00345C  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5242  00345E  D001               	goto	l6035
  5243  003460  0012               	return	
  5244  003462                     l6035:
  5245                           
  5246                           ; BSR set to: 0
  5247  003462  0E68               	movlw	104
  5248  003464  0100               	movlb	0	; () banked
  5249  003466  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5250  003468  0EE4               	movlw	228
  5251  00346A                     u7197:
  5252  00346A  2EE8               	decfsz	wreg,f,c
  5253  00346C  D7FE               	bra	u7197
  5254  00346E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5255  003470  D7FC               	bra	u7197
  5256  003472  F000               	nop	
  5257  003474  0100               	movlb	0	; () banked
  5258  003476  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5259  003478  D7EF               	goto	l6031
  5260  00347A                     l6039:
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5264  00347A  0EBD               	movlw	low STR_67
  5265  00347C  0100               	movlb	0	; () banked
  5266  00347E  6F8E               	movwf	printf@f& (0+255),b
  5267  003480  0EFF               	movlw	high STR_67
  5268  003482  0100               	movlb	0	; () banked
  5269  003484  6F8F               	movwf	(printf@f+1)& (0+255),b
  5270  003486  ECB8  F008         	call	_printf	;wreg free
  5271  00348A  0E00               	movlw	0
  5272  00348C  0100               	movlb	0	; () banked
  5273  00348E  6FB0               	movwf	EEPROM_write@i_1328& (0+255),b
  5274  003490                     l6043:
  5275                           
  5276                           ; BSR set to: 0
  5277  003490  0E63               	movlw	99
  5278  003492  0100               	movlb	0	; () banked
  5279  003494  65B0               	cpfsgt	EEPROM_write@i_1328& (0+255),b
  5280  003496  D001               	goto	l6047
  5281  003498  0012               	return	
  5282  00349A                     l6047:
  5283                           
  5284                           ; BSR set to: 0
  5285  00349A  0E68               	movlw	104
  5286  00349C  0100               	movlb	0	; () banked
  5287  00349E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5288  0034A0  0EE4               	movlw	228
  5289  0034A2                     u7207:
  5290  0034A2  2EE8               	decfsz	wreg,f,c
  5291  0034A4  D7FE               	bra	u7207
  5292  0034A6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5293  0034A8  D7FC               	bra	u7207
  5294  0034AA  F000               	nop	
  5295  0034AC  0100               	movlb	0	; () banked
  5296  0034AE  2BB0               	incf	EEPROM_write@i_1328& (0+255),f,b
  5297  0034B0  D7EF               	goto	l6043
  5298  0034B2                     __end_of_EEPROM_write:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           intcon2	equ	0xFF1
  5308                           intcon3	equ	0xFF0
  5309                           postinc0	equ	0xFEE
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           fsr1l	equ	0xFE1
  5313                           indf2	equ	0xFDF
  5314                           postinc2	equ	0xFDE
  5315                           postdec2	equ	0xFDD
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _EEPROM_read *****************
  5321 ;; Defined at:
  5322 ;;		line 68 in file "EEPROM.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  address         2    0[BANK0 ] unsigned short 
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      unsigned char 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5336 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;Total ram usage:        2 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    7
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_Loading
  5347 ;;		_EEPROM_write
  5348 ;;		_logRun
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text15
  5353  004748                     __ptext15:
  5354                           	opt stack 0
  5355  004748                     _EEPROM_read:
  5356                           	opt stack 20
  5357                           
  5358                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5359                           
  5360                           ;incstack = 0
  5361  004748  0100               	movlb	0	; () banked
  5362  00474A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5363  00474C  6EAA               	movwf	4010,c	;volatile
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5367  00474E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5371  004752  9EA6               	bcf	4006,7,c	;volatile
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5375  004754  9CA6               	bcf	4006,6,c	;volatile
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5379  004756  80A6               	bsf	4006,0,c	;volatile
  5380  004758                     l943:
  5381  004758  B0A6               	btfsc	4006,0,c	;volatile
  5382  00475A  D7FE               	goto	l943
  5383                           
  5384                           ;EEPROM.c: 81: return EEDATA;
  5385  00475C  50A8               	movf	4008,w,c	;volatile
  5386  00475E  0012               	return	
  5387  004760                     __end_of_EEPROM_read:
  5388                           	opt stack 0
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           prodh	equ	0xFF4
  5394                           prodl	equ	0xFF3
  5395                           intcon	equ	0xFF2
  5396                           intcon2	equ	0xFF1
  5397                           intcon3	equ	0xFF0
  5398                           postinc0	equ	0xFEE
  5399                           wreg	equ	0xFE8
  5400                           postdec1	equ	0xFE5
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8
  5408                           
  5409 ;; *************** function _initUI *****************
  5410 ;; Defined at:
  5411 ;;		line 62 in file "UI.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      void 
  5418 ;; Registers used:
  5419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;Total ram usage:        0 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:   12
  5432 ;; This function calls:
  5433 ;;		_change_state_to_menu_start
  5434 ;;		_loadRTC
  5435 ;; This function is called by:
  5436 ;;		_main
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text16
  5441  00451A                     __ptext16:
  5442                           	opt stack 0
  5443  00451A                     _initUI:
  5444                           	opt stack 18
  5445                           
  5446                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5447                           
  5448                           ;incstack = 0
  5449  00451A  8EF2               	bsf	intcon,7,c	;volatile
  5450                           
  5451                           ;UI.c: 64: machine_state = UI_state;
  5452  00451C  0E00               	movlw	0
  5453  00451E  0100               	movlb	0	; () banked
  5454  004520  6FFC               	movwf	_machine_state& (0+255),b
  5455                           
  5456                           ;UI.c: 65: logstate = 0;
  5457  004522  0E00               	movlw	0
  5458  004524  0100               	movlb	0	; () banked
  5459  004526  6FF7               	movwf	(_logstate+1)& (0+255),b
  5460  004528  0E00               	movlw	0
  5461  00452A  6FF6               	movwf	_logstate& (0+255),b
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;UI.c: 67: if(RTCflag){
  5465  00452C  0100               	movlb	0	; () banked
  5466  00452E  51DE               	movf	_RTCflag& (0+255),w,b
  5467  004530  0100               	movlb	0	; () banked
  5468  004532  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5469  004534  A4D8               	btfss	status,2,c
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;UI.c: 68: loadRTC();
  5473  004536  ECD2  F01C         	call	_loadRTC	;wreg free
  5474                           
  5475                           ;UI.c: 69: }
  5476                           ;UI.c: 71: change_state_to_menu_start();
  5477  00453A  ECD2  F022         	call	_change_state_to_menu_start	;wreg free
  5478                           
  5479                           ;UI.c: 72: firstboot = 1;
  5480  00453E  0E00               	movlw	0
  5481  004540  6E76               	movwf	_firstboot+1,c
  5482  004542  0E01               	movlw	1
  5483  004544  6E75               	movwf	_firstboot,c
  5484  004546  0012               	return		;funcret
  5485  004548                     __end_of_initUI:
  5486                           	opt stack 0
  5487                           tblptru	equ	0xFF8
  5488                           tblptrh	equ	0xFF7
  5489                           tblptrl	equ	0xFF6
  5490                           tablat	equ	0xFF5
  5491                           prodh	equ	0xFF4
  5492                           prodl	equ	0xFF3
  5493                           intcon	equ	0xFF2
  5494                           intcon2	equ	0xFF1
  5495                           intcon3	equ	0xFF0
  5496                           postinc0	equ	0xFEE
  5497                           wreg	equ	0xFE8
  5498                           postdec1	equ	0xFE5
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function _loadRTC *****************
  5508 ;; Defined at:
  5509 ;;		line 28 in file "RTC.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;		None
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  i               2   22[BANK0 ] int 
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      void 
  5516 ;; Registers used:
  5517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5524 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5526 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;Total ram usage:        3 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    9
  5530 ;; This function calls:
  5531 ;;		_I2C_Master_Init
  5532 ;;		_I2C_Master_Start
  5533 ;;		_I2C_Master_Stop
  5534 ;;		_I2C_Master_Write
  5535 ;; This function is called by:
  5536 ;;		_initUI
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           	psect	text17
  5541  0039A4                     __ptext17:
  5542                           	opt stack 0
  5543  0039A4                     _loadRTC:
  5544                           	opt stack 20
  5545                           
  5546                           ;RTC.c: 30: I2C_Master_Init(10000);
  5547                           
  5548                           ;incstack = 0
  5549  0039A4  0E10               	movlw	16
  5550  0039A6  0100               	movlb	0	; () banked
  5551  0039A8  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5552  0039AA  0E27               	movlw	39
  5553  0039AC  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5554  0039AE  0E00               	movlw	0
  5555  0039B0  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5556  0039B2  0E00               	movlw	0
  5557  0039B4  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5558  0039B6  EC2A  F01F         	call	_I2C_Master_Init	;wreg free
  5559                           
  5560                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5561  0039BA  9EF2               	bcf	intcon,7,c	;volatile
  5562                           
  5563                           ;RTC.c: 34: I2C_Master_Start();
  5564  0039BC  EC07  F024         	call	_I2C_Master_Start	;wreg free
  5565                           
  5566                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5567  0039C0  0E00               	movlw	0
  5568  0039C2  0100               	movlb	0	; () banked
  5569  0039C4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5570  0039C6  0ED0               	movlw	208
  5571  0039C8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5572  0039CA  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  5573                           
  5574                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5575  0039CE  0E00               	movlw	0
  5576  0039D0  0100               	movlb	0	; () banked
  5577  0039D2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5578  0039D4  0E00               	movlw	0
  5579  0039D6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5580  0039D8  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  5581                           
  5582                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5583  0039DC  0E00               	movlw	0
  5584  0039DE  0100               	movlb	0	; () banked
  5585  0039E0  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5586  0039E2  0E00               	movlw	0
  5587  0039E4  6F96               	movwf	loadRTC@i& (0+255),b
  5588  0039E6                     l6173:
  5589                           
  5590                           ; BSR set to: 0
  5591  0039E6  0100               	movlb	0	; () banked
  5592  0039E8  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5593  0039EA  D008               	goto	l6177
  5594  0039EC  0100               	movlb	0	; () banked
  5595  0039EE  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5596  0039F0  E11B               	bnz	l6183
  5597  0039F2  0E07               	movlw	7
  5598  0039F4  0100               	movlb	0	; () banked
  5599  0039F6  5D96               	subwf	loadRTC@i& (0+255),w,b
  5600  0039F8  B0D8               	btfsc	status,0,c
  5601  0039FA  D016               	goto	l6183
  5602  0039FC                     l6177:
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5606  0039FC  0E24               	movlw	low _time
  5607  0039FE  0100               	movlb	0	; () banked
  5608  003A00  2596               	addwf	loadRTC@i& (0+255),w,b
  5609  003A02  6ED9               	movwf	fsr2l,c
  5610  003A04  0E01               	movlw	high _time
  5611  003A06  0100               	movlb	0	; () banked
  5612  003A08  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5613  003A0A  6EDA               	movwf	fsr2h,c
  5614  003A0C  50DF               	movf	indf2,w,c
  5615  003A0E  0100               	movlb	0	; () banked
  5616  003A10  6F95               	movwf	??_loadRTC& (0+255),b
  5617  003A12  0100               	movlb	0	; () banked
  5618  003A14  5195               	movf	??_loadRTC& (0+255),w,b
  5619  003A16  0100               	movlb	0	; () banked
  5620  003A18  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5621  003A1A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5622  003A1C  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  5623  003A20  0100               	movlb	0	; () banked
  5624  003A22  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5625  003A24  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5626  003A26  D7DF               	goto	l6173
  5627  003A28                     l6183:
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;RTC.c: 39: }
  5631                           ;RTC.c: 40: I2C_Master_Stop();
  5632  003A28  EC03  F024         	call	_I2C_Master_Stop	;wreg free
  5633                           
  5634                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5635  003A2C  8EF2               	bsf	intcon,7,c	;volatile
  5636  003A2E  0012               	return		;funcret
  5637  003A30                     __end_of_loadRTC:
  5638                           	opt stack 0
  5639                           tblptru	equ	0xFF8
  5640                           tblptrh	equ	0xFF7
  5641                           tblptrl	equ	0xFF6
  5642                           tablat	equ	0xFF5
  5643                           prodh	equ	0xFF4
  5644                           prodl	equ	0xFF3
  5645                           intcon	equ	0xFF2
  5646                           intcon2	equ	0xFF1
  5647                           intcon3	equ	0xFF0
  5648                           postinc0	equ	0xFEE
  5649                           wreg	equ	0xFE8
  5650                           postdec1	equ	0xFE5
  5651                           fsr1l	equ	0xFE1
  5652                           indf2	equ	0xFDF
  5653                           postinc2	equ	0xFDE
  5654                           postdec2	equ	0xFDD
  5655                           fsr2h	equ	0xFDA
  5656                           fsr2l	equ	0xFD9
  5657                           status	equ	0xFD8
  5658                           
  5659 ;; *************** function _I2C_Master_Init *****************
  5660 ;; Defined at:
  5661 ;;		line 15 in file "I2C.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  c               4   13[BANK0 ] const unsigned long 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;		None
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5675 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;Total ram usage:        8 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    8
  5682 ;; This function calls:
  5683 ;;		___lldiv
  5684 ;; This function is called by:
  5685 ;;		_main
  5686 ;;		_loadRTC
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text18
  5691  003E54                     __ptext18:
  5692                           	opt stack 0
  5693  003E54                     _I2C_Master_Init:
  5694                           	opt stack 20
  5695                           
  5696                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5697                           
  5698                           ;incstack = 0
  5699  003E54  0E00               	movlw	0
  5700  003E56  6EC7               	movwf	4039,c	;volatile
  5701                           
  5702                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5703  003E58  0E28               	movlw	40
  5704  003E5A  6EC6               	movwf	4038,c	;volatile
  5705                           
  5706                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5707  003E5C  0E00               	movlw	0
  5708  003E5E  6EC5               	movwf	4037,c	;volatile
  5709                           
  5710                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5711  003E60  0E00               	movlw	0
  5712  003E62  0100               	movlb	0	; () banked
  5713  003E64  6F80               	movwf	___lldiv@dividend& (0+255),b
  5714  003E66  0E48               	movlw	72
  5715  003E68  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5716  003E6A  0EE8               	movlw	232
  5717  003E6C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5718  003E6E  0E01               	movlw	1
  5719  003E70  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5720  003E72  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5721  003E76  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5722  003E7A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5723  003E7E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5724  003E82  0E02               	movlw	2
  5725  003E84                     u4465:
  5726  003E84  90D8               	bcf	status,0,c
  5727  003E86  0100               	movlb	0	; () banked
  5728  003E88  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5729  003E8A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5730  003E8C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5731  003E8E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5732  003E90  2EE8               	decfsz	wreg,f,c
  5733  003E92  D7F8               	goto	u4465
  5734  003E94  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5735  003E98  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5736  003E9C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5737  003EA0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5738  003EA4  EC83  F01B         	call	___lldiv	;wreg free
  5739  003EA8  0100               	movlb	0	; () banked
  5740  003EAA  0580               	decf	?___lldiv& (0+255),w,b
  5741  003EAC  6EC8               	movwf	4040,c	;volatile
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;I2C.c: 22: TRISC3 = 1;
  5745  003EAE  8694               	bsf	3988,3,c	;volatile
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;I2C.c: 23: TRISC4 = 1;
  5749  003EB0  8894               	bsf	3988,4,c	;volatile
  5750                           
  5751                           ; BSR set to: 0
  5752  003EB2  0012               	return		;funcret
  5753  003EB4                     __end_of_I2C_Master_Init:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           intcon	equ	0xFF2
  5762                           intcon2	equ	0xFF1
  5763                           intcon3	equ	0xFF0
  5764                           postinc0	equ	0xFEE
  5765                           wreg	equ	0xFE8
  5766                           postdec1	equ	0xFE5
  5767                           fsr1l	equ	0xFE1
  5768                           indf2	equ	0xFDF
  5769                           postinc2	equ	0xFDE
  5770                           postdec2	equ	0xFDD
  5771                           fsr2h	equ	0xFDA
  5772                           fsr2l	equ	0xFD9
  5773                           status	equ	0xFD8
  5774                           
  5775 ;; *************** function ___lldiv *****************
  5776 ;; Defined at:
  5777 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  dividend        4    0[BANK0 ] unsigned long 
  5780 ;;  divisor         4    4[BANK0 ] unsigned long 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  quotient        4    8[BANK0 ] unsigned long 
  5783 ;;  counter         1   12[BANK0 ] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  4    0[BANK0 ] unsigned long 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5793 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;Total ram usage:       13 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    7
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_I2C_Master_Init
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text19
  5808  003706                     __ptext19:
  5809                           	opt stack 0
  5810  003706                     ___lldiv:
  5811                           	opt stack 20
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;incstack = 0
  5815  003706  0E00               	movlw	0
  5816  003708  0100               	movlb	0	; () banked
  5817  00370A  6F88               	movwf	___lldiv@quotient& (0+255),b
  5818  00370C  0E00               	movlw	0
  5819  00370E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5820  003710  0E00               	movlw	0
  5821  003712  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5822  003714  0E00               	movlw	0
  5823  003716  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5824                           
  5825                           ; BSR set to: 0
  5826  003718  0100               	movlb	0	; () banked
  5827  00371A  5184               	movf	___lldiv@divisor& (0+255),w,b
  5828  00371C  0100               	movlb	0	; () banked
  5829  00371E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5830  003720  0100               	movlb	0	; () banked
  5831  003722  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5832  003724  0100               	movlb	0	; () banked
  5833  003726  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5834  003728  B4D8               	btfsc	status,2,c
  5835  00372A  D042               	goto	l1653
  5836                           
  5837                           ; BSR set to: 0
  5838  00372C  0E01               	movlw	1
  5839  00372E  0100               	movlb	0	; () banked
  5840  003730  6F8C               	movwf	___lldiv@counter& (0+255),b
  5841  003732  D008               	goto	l5609
  5842  003734                     l5607:
  5843                           
  5844                           ; BSR set to: 0
  5845  003734  0100               	movlb	0	; () banked
  5846  003736  90D8               	bcf	status,0,c
  5847  003738  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5848  00373A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5849  00373C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5850  00373E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5851  003740  0100               	movlb	0	; () banked
  5852  003742  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5853  003744                     l5609:
  5854                           
  5855                           ; BSR set to: 0
  5856  003744  0100               	movlb	0	; () banked
  5857  003746  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5858  003748  D7F5               	goto	l5607
  5859  00374A                     l5611:
  5860                           
  5861                           ; BSR set to: 0
  5862  00374A  0100               	movlb	0	; () banked
  5863  00374C  90D8               	bcf	status,0,c
  5864  00374E  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5865  003750  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5866  003752  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5867  003754  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5868                           
  5869                           ; BSR set to: 0
  5870  003756  0100               	movlb	0	; () banked
  5871  003758  5184               	movf	___lldiv@divisor& (0+255),w,b
  5872  00375A  0100               	movlb	0	; () banked
  5873  00375C  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5874  00375E  0100               	movlb	0	; () banked
  5875  003760  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5876  003762  0100               	movlb	0	; () banked
  5877  003764  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5878  003766  0100               	movlb	0	; () banked
  5879  003768  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5880  00376A  0100               	movlb	0	; () banked
  5881  00376C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5882  00376E  0100               	movlb	0	; () banked
  5883  003770  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5884  003772  0100               	movlb	0	; () banked
  5885  003774  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5886  003776  A0D8               	btfss	status,0,c
  5887  003778  D012               	goto	l5619
  5888                           
  5889                           ; BSR set to: 0
  5890  00377A  0100               	movlb	0	; () banked
  5891  00377C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5892  00377E  0100               	movlb	0	; () banked
  5893  003780  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5894  003782  0100               	movlb	0	; () banked
  5895  003784  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5896  003786  0100               	movlb	0	; () banked
  5897  003788  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5898  00378A  0100               	movlb	0	; () banked
  5899  00378C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5900  00378E  0100               	movlb	0	; () banked
  5901  003790  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5902  003792  0100               	movlb	0	; () banked
  5903  003794  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5904  003796  0100               	movlb	0	; () banked
  5905  003798  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5906                           
  5907                           ; BSR set to: 0
  5908  00379A  0100               	movlb	0	; () banked
  5909  00379C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5910  00379E                     l5619:
  5911                           
  5912                           ; BSR set to: 0
  5913  00379E  0100               	movlb	0	; () banked
  5914  0037A0  90D8               	bcf	status,0,c
  5915  0037A2  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5916  0037A4  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5917  0037A6  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5918  0037A8  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5919                           
  5920                           ; BSR set to: 0
  5921  0037AA  0100               	movlb	0	; () banked
  5922  0037AC  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5923  0037AE  D7CD               	goto	l5611
  5924  0037B0                     l1653:
  5925                           
  5926                           ; BSR set to: 0
  5927  0037B0  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5928  0037B4  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5929  0037B8  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5930  0037BC  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5931                           
  5932                           ; BSR set to: 0
  5933  0037C0  0012               	return		;funcret
  5934  0037C2                     __end_of___lldiv:
  5935                           	opt stack 0
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodh	equ	0xFF4
  5941                           prodl	equ	0xFF3
  5942                           intcon	equ	0xFF2
  5943                           intcon2	equ	0xFF1
  5944                           intcon3	equ	0xFF0
  5945                           postinc0	equ	0xFEE
  5946                           wreg	equ	0xFE8
  5947                           postdec1	equ	0xFE5
  5948                           fsr1l	equ	0xFE1
  5949                           indf2	equ	0xFDF
  5950                           postinc2	equ	0xFDE
  5951                           postdec2	equ	0xFDD
  5952                           fsr2h	equ	0xFDA
  5953                           fsr2l	equ	0xFD9
  5954                           status	equ	0xFD8
  5955                           
  5956 ;; *************** function _change_state_to_menu_start *****************
  5957 ;; Defined at:
  5958 ;;		line 474 in file "UI.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;Total ram usage:        0 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:   11
  5979 ;; This function calls:
  5980 ;;		_lcdInst
  5981 ;;		_printRTC
  5982 ;;		_printf
  5983 ;; This function is called by:
  5984 ;;		_initUI
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           	psect	text20
  5989  0045A4                     __ptext20:
  5990                           	opt stack 0
  5991  0045A4                     _change_state_to_menu_start:
  5992                           	opt stack 18
  5993                           
  5994                           ;UI.c: 475: cur_state = 0;
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;incstack = 0
  5998  0045A4  0E00               	movlw	0
  5999  0045A6  0100               	movlb	0	; () banked
  6000  0045A8  6FE1               	movwf	(_cur_state+1)& (0+255),b
  6001  0045AA  0E00               	movlw	0
  6002  0045AC  6FE0               	movwf	_cur_state& (0+255),b
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;UI.c: 477: lcdInst(0b10000000);;
  6006  0045AE  0E80               	movlw	128
  6007  0045B0  ECE1  F023         	call	_lcdInst
  6008                           
  6009                           ;UI.c: 478: printRTC();
  6010  0045B4  EC94  F00F         	call	_printRTC	;wreg free
  6011                           
  6012                           ;UI.c: 479: lcdInst(0b11000000);;
  6013  0045B8  0EC0               	movlw	192
  6014  0045BA  ECE1  F023         	call	_lcdInst
  6015                           
  6016                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6017  0045BE  0E19               	movlw	low STR_30
  6018  0045C0  0100               	movlb	0	; () banked
  6019  0045C2  6F8E               	movwf	printf@f& (0+255),b
  6020  0045C4  0EFE               	movlw	high STR_30
  6021  0045C6  0100               	movlb	0	; () banked
  6022  0045C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6023  0045CA  ECB8  F008         	call	_printf	;wreg free
  6024  0045CE  0012               	return		;funcret
  6025  0045D0                     __end_of_change_state_to_menu_start:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon	equ	0xFF2
  6034                           intcon2	equ	0xFF1
  6035                           intcon3	equ	0xFF0
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           postdec1	equ	0xFE5
  6039                           fsr1l	equ	0xFE1
  6040                           indf2	equ	0xFDF
  6041                           postinc2	equ	0xFDE
  6042                           postdec2	equ	0xFDD
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _initTime *****************
  6048 ;; Defined at:
  6049 ;;		line 17 in file "RTC.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  s               1    wreg     unsigned char 
  6052 ;;  m               1    0[BANK0 ] unsigned char 
  6053 ;;  h               1    1[BANK0 ] unsigned char 
  6054 ;;  w               1    2[BANK0 ] unsigned char 
  6055 ;;  DD              1    3[BANK0 ] unsigned char 
  6056 ;;  MM              1    4[BANK0 ] unsigned char 
  6057 ;;  YY              1    5[BANK0 ] unsigned char 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  s               1    6[BANK0 ] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      void 
  6062 ;; Registers used:
  6063 ;;		wreg
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6069 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;Total ram usage:        7 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    7
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_main
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text21
  6084  004708                     __ptext21:
  6085                           	opt stack 0
  6086  004708                     _initTime:
  6087                           	opt stack 23
  6088                           
  6089                           ;incstack = 0
  6090                           ;initTime@s stored from wreg
  6091  004708  0100               	movlb	0	; () banked
  6092  00470A  6F86               	movwf	initTime@s& (0+255),b
  6093                           
  6094                           ;RTC.c: 19: time[0] = s;
  6095  00470C  C086  F124         	movff	initTime@s,_time
  6096                           
  6097                           ;RTC.c: 20: time[1] = m;
  6098  004710  C080  F125         	movff	initTime@m,_time+1
  6099                           
  6100                           ;RTC.c: 21: time[2] = h;
  6101  004714  C081  F126         	movff	initTime@h,_time+2
  6102                           
  6103                           ;RTC.c: 22: time[3] = w;
  6104  004718  C082  F127         	movff	initTime@w,_time+3
  6105                           
  6106                           ;RTC.c: 23: time[4] = DD;
  6107  00471C  C083  F128         	movff	initTime@DD,_time+4
  6108                           
  6109                           ;RTC.c: 24: time[5] = MM;
  6110  004720  C084  F129         	movff	initTime@MM,_time+5
  6111                           
  6112                           ;RTC.c: 25: time[6] = YY;
  6113  004724  C085  F12A         	movff	initTime@YY,_time+6
  6114  004728  0012               	return		;funcret
  6115  00472A                     __end_of_initTime:
  6116                           	opt stack 0
  6117                           tblptru	equ	0xFF8
  6118                           tblptrh	equ	0xFF7
  6119                           tblptrl	equ	0xFF6
  6120                           tablat	equ	0xFF5
  6121                           prodh	equ	0xFF4
  6122                           prodl	equ	0xFF3
  6123                           intcon	equ	0xFF2
  6124                           intcon2	equ	0xFF1
  6125                           intcon3	equ	0xFF0
  6126                           postinc0	equ	0xFEE
  6127                           wreg	equ	0xFE8
  6128                           postdec1	equ	0xFE5
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _initLCD *****************
  6138 ;; Defined at:
  6139 ;;		line 48 in file "lcd.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;		None
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;		None
  6144 ;; Return value:  Size  Location     Type
  6145 ;;                  1    wreg      void 
  6146 ;; Registers used:
  6147 ;;		wreg, status,2, status,0, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;Total ram usage:        1 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    9
  6160 ;; This function calls:
  6161 ;;		_lcdInst
  6162 ;; This function is called by:
  6163 ;;		_main
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text22
  6168  0041A2                     __ptext22:
  6169                           	opt stack 0
  6170  0041A2                     _initLCD:
  6171                           	opt stack 21
  6172                           
  6173                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6174                           
  6175                           ;incstack = 0
  6176  0041A2  0E9C               	movlw	156
  6177  0041A4  0100               	movlb	0	; () banked
  6178  0041A6  6F83               	movwf	??_initLCD& (0+255),b
  6179  0041A8  0ED7               	movlw	215
  6180  0041AA                     u7217:
  6181  0041AA  2EE8               	decfsz	wreg,f,c
  6182  0041AC  D7FE               	bra	u7217
  6183  0041AE  2F83               	decfsz	??_initLCD& (0+255),f,b
  6184  0041B0  D7FC               	bra	u7217
  6185                           
  6186                           ;lcd.c: 50: lcdInst(0b00110011);
  6187  0041B2  0E33               	movlw	51
  6188  0041B4  ECE1  F023         	call	_lcdInst
  6189                           
  6190                           ;lcd.c: 51: lcdInst(0b00110010);
  6191  0041B8  0E32               	movlw	50
  6192  0041BA  ECE1  F023         	call	_lcdInst
  6193                           
  6194                           ;lcd.c: 53: lcdInst(0b00101000);
  6195  0041BE  0E28               	movlw	40
  6196  0041C0  ECE1  F023         	call	_lcdInst
  6197                           
  6198                           ;lcd.c: 54: lcdInst(0b00001100);
  6199  0041C4  0E0C               	movlw	12
  6200  0041C6  ECE1  F023         	call	_lcdInst
  6201                           
  6202                           ;lcd.c: 55: lcdInst(0b00000110);
  6203  0041CA  0E06               	movlw	6
  6204  0041CC  ECE1  F023         	call	_lcdInst
  6205                           
  6206                           ;lcd.c: 56: lcdInst(0b00000001);
  6207  0041D0  0E01               	movlw	1
  6208  0041D2  ECE1  F023         	call	_lcdInst
  6209                           
  6210                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6211  0041D6  0E9C               	movlw	156
  6212  0041D8  0100               	movlb	0	; () banked
  6213  0041DA  6F83               	movwf	??_initLCD& (0+255),b
  6214  0041DC  0ED7               	movlw	215
  6215  0041DE                     u7227:
  6216  0041DE  2EE8               	decfsz	wreg,f,c
  6217  0041E0  D7FE               	bra	u7227
  6218  0041E2  2F83               	decfsz	??_initLCD& (0+255),f,b
  6219  0041E4  D7FC               	bra	u7227
  6220  0041E6  0012               	return		;funcret
  6221  0041E8                     __end_of_initLCD:
  6222                           	opt stack 0
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodh	equ	0xFF4
  6228                           prodl	equ	0xFF3
  6229                           intcon	equ	0xFF2
  6230                           intcon2	equ	0xFF1
  6231                           intcon3	equ	0xFF0
  6232                           postinc0	equ	0xFEE
  6233                           wreg	equ	0xFE8
  6234                           postdec1	equ	0xFE5
  6235                           fsr1l	equ	0xFE1
  6236                           indf2	equ	0xFDF
  6237                           postinc2	equ	0xFDE
  6238                           postdec2	equ	0xFDD
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243 ;; *************** function _UI *****************
  6244 ;; Defined at:
  6245 ;;		line 76 in file "UI.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;  i               1   73[BANK0 ] unsigned char 
  6250 ;;  i               1   85[BANK0 ] unsigned char 
  6251 ;;  i               1   84[BANK0 ] unsigned char 
  6252 ;;  i               1   83[BANK0 ] unsigned char 
  6253 ;;  i               1   82[BANK0 ] unsigned char 
  6254 ;;  i               1   81[BANK0 ] unsigned char 
  6255 ;;  i               1   80[BANK0 ] unsigned char 
  6256 ;;  i               1   79[BANK0 ] unsigned char 
  6257 ;;  i               1   78[BANK0 ] unsigned char 
  6258 ;;  i               1   77[BANK0 ] unsigned char 
  6259 ;;  i               1   76[BANK0 ] unsigned char 
  6260 ;;  i               1   75[BANK0 ] unsigned char 
  6261 ;;  i               1   74[BANK0 ] unsigned char 
  6262 ;;  month           4   86[BANK0 ] unsigned char [4]
  6263 ;;  i               1   72[BANK0 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;Total ram usage:       22 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:   11
  6280 ;; This function calls:
  6281 ;;		___awdiv
  6282 ;;		___awmod
  6283 ;;		_change_state_to_menu_12
  6284 ;;		_change_state_to_menu_22
  6285 ;;		_lcdInst
  6286 ;;		_printRTC
  6287 ;;		_printf
  6288 ;;		_strcpy
  6289 ;; This function is called by:
  6290 ;;		_main
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text23
  6295  0008CA                     __ptext23:
  6296                           	opt stack 0
  6297  0008CA                     _UI:
  6298                           	opt stack 19
  6299                           
  6300                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6301                           
  6302                           ;incstack = 0
  6303  0008CA  0E02               	movlw	2
  6304  0008CC  0100               	movlb	0	; () banked
  6305  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6306  0008D0  A4D8               	btfss	status,2,c
  6307  0008D2  D075               	goto	l7377
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6311  0008D4  0E01               	movlw	1
  6312  0008D6  ECE1  F023         	call	_lcdInst
  6313  0008DA  0E68               	movlw	104
  6314  0008DC  0100               	movlb	0	; () banked
  6315  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6316  0008E0  0EE4               	movlw	228
  6317  0008E2                     u7237:
  6318  0008E2  2EE8               	decfsz	wreg,f,c
  6319  0008E4  D7FE               	bra	u7237
  6320  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6321  0008E8  D7FC               	bra	u7237
  6322  0008EA  F000               	nop	
  6323                           
  6324                           ;UI.c: 79: lcdInst(0b10000000);;
  6325  0008EC  0E80               	movlw	128
  6326  0008EE  ECE1  F023         	call	_lcdInst
  6327                           
  6328                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6329  0008F2  0EC5               	movlw	low STR_1
  6330  0008F4  0100               	movlb	0	; () banked
  6331  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6332  0008F8  0EFB               	movlw	high STR_1
  6333  0008FA  0100               	movlb	0	; () banked
  6334  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6335  0008FE  0E01               	movlw	1
  6336  000900  0100               	movlb	0	; () banked
  6337  000902  25FD               	addwf	_sel& (0+255),w,b
  6338  000904  0100               	movlb	0	; () banked
  6339  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6340  000908  0100               	movlb	0	; () banked
  6341  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6342  00090C  0E00               	movlw	0
  6343  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6344  000910  ECB8  F008         	call	_printf	;wreg free
  6345                           
  6346                           ;UI.c: 81: lcdInst(0b11000000);;
  6347  000914  0EC0               	movlw	192
  6348  000916  ECE1  F023         	call	_lcdInst
  6349                           
  6350                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6351  00091A  0E0E               	movlw	14
  6352  00091C  0100               	movlb	0	; () banked
  6353  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6354  000920  0E10               	movlw	16
  6355  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6356  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6357  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6358  00092C  EC36  F01C         	call	___awmod	;wreg free
  6359  000930  C080  F0C6         	movff	?___awmod,_UI$2295
  6360  000934  C081  F0C7         	movff	?___awmod+1,_UI$2295+1
  6361                           
  6362                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6363  000938  0E27               	movlw	low STR_2
  6364  00093A  0100               	movlb	0	; () banked
  6365  00093C  6F8E               	movwf	printf@f& (0+255),b
  6366  00093E  0EFF               	movlw	high STR_2
  6367  000940  0100               	movlb	0	; () banked
  6368  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6369  000944  0E0E               	movlw	14
  6370  000946  0100               	movlb	0	; () banked
  6371  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6372  00094A  0E10               	movlw	16
  6373  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6374  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6375  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6376  000956  EC36  F01C         	call	___awmod	;wreg free
  6377  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6378  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6379  000962  0E00               	movlw	0
  6380  000964  0100               	movlb	0	; () banked
  6381  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6382  000968  0E3C               	movlw	60
  6383  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6384  00096C  EC24  F01B         	call	___awdiv	;wreg free
  6385  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6386  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6387  000978  C0C6  F080         	movff	_UI$2295,___awmod@dividend
  6388  00097C  C0C7  F081         	movff	_UI$2295+1,___awmod@dividend+1
  6389  000980  0E00               	movlw	0
  6390  000982  0100               	movlb	0	; () banked
  6391  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6392  000986  0E3C               	movlw	60
  6393  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6394  00098A  EC36  F01C         	call	___awmod	;wreg free
  6395  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6396  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6397  000996  ECB8  F008         	call	_printf	;wreg free
  6398                           
  6399                           ;UI.c: 83: machine_state = UI_state;
  6400  00099A  0E00               	movlw	0
  6401  00099C  0100               	movlb	0	; () banked
  6402  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6403  0009A0                     l180:
  6404  0009A0  A281               	btfss	3969,1,c	;volatile
  6405  0009A2  D7FE               	goto	l180
  6406                           
  6407                           ;UI.c: 86: }
  6408                           ;UI.c: 87: if(cur_state==12){
  6409  0009A4  0E0C               	movlw	12
  6410  0009A6  0100               	movlb	0	; () banked
  6411  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6412  0009AA  0100               	movlb	0	; () banked
  6413  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6414  0009AE  A4D8               	btfss	status,2,c
  6415  0009B0  D003               	goto	l7375
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;UI.c: 88: change_state_to_menu_12();
  6419  0009B2  EC31  F021         	call	_change_state_to_menu_12	;wreg free
  6420                           
  6421                           ;UI.c: 89: }
  6422  0009B6  D3D5               	goto	l7697
  6423  0009B8                     l7375:
  6424                           
  6425                           ;UI.c: 90: else{
  6426                           ;UI.c: 91: change_state_to_menu_22();
  6427  0009B8  EC15  F021         	call	_change_state_to_menu_22	;wreg free
  6428                           
  6429                           ;UI.c: 92: }
  6430                           ;UI.c: 93: }
  6431  0009BC  D3D2               	goto	l7697
  6432  0009BE                     l7377:
  6433                           
  6434                           ;UI.c: 94: else if(cur_state == 0){
  6435  0009BE  0100               	movlb	0	; () banked
  6436  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6437  0009C2  0100               	movlb	0	; () banked
  6438  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6439  0009C6  A4D8               	btfss	status,2,c
  6440  0009C8  D3CC               	goto	l7697
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6444  0009CA  0E00               	movlw	0
  6445  0009CC  0100               	movlb	0	; () banked
  6446  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6447  0009D0                     l7381:
  6448                           
  6449                           ; BSR set to: 0
  6450  0009D0  0E63               	movlw	99
  6451  0009D2  0100               	movlb	0	; () banked
  6452  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6453  0009D6  D001               	goto	l7385
  6454  0009D8  D00C               	goto	l7389
  6455  0009DA                     l7385:
  6456                           
  6457                           ; BSR set to: 0
  6458  0009DA  0E68               	movlw	104
  6459  0009DC  0100               	movlb	0	; () banked
  6460  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6461  0009E0  0EE4               	movlw	228
  6462  0009E2                     u7247:
  6463  0009E2  2EE8               	decfsz	wreg,f,c
  6464  0009E4  D7FE               	bra	u7247
  6465  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6466  0009E8  D7FC               	bra	u7247
  6467  0009EA  F000               	nop	
  6468  0009EC  0100               	movlb	0	; () banked
  6469  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6470  0009F0  D7EF               	goto	l7381
  6471  0009F2                     l7389:
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;UI.c: 96: if(cur_state == 0){
  6475  0009F2  0100               	movlb	0	; () banked
  6476  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6477  0009F6  0100               	movlb	0	; () banked
  6478  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6479  0009FA  A4D8               	btfss	status,2,c
  6480  0009FC  D3B2               	goto	l7697
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;UI.c: 97: printRTC();
  6484  0009FE  EC94  F00F         	call	_printRTC	;wreg free
  6485                           
  6486                           ;UI.c: 98: }
  6487                           ;UI.c: 99: }
  6488                           ;UI.c: 100: while(logstate){
  6489  000A02  D3AF               	goto	l7697
  6490  000A04                     l7393:
  6491                           
  6492                           ;UI.c: 102: if(!log_completion){
  6493  000A04  0100               	movlb	0	; () banked
  6494  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6495  000A08  0100               	movlb	0	; () banked
  6496  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6497  000A0C  A4D8               	btfss	status,2,c
  6498  000A0E  D041               	goto	l7423
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6502  000A10  0E01               	movlw	1
  6503  000A12  ECE1  F023         	call	_lcdInst
  6504  000A16  0E68               	movlw	104
  6505  000A18  0100               	movlb	0	; () banked
  6506  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6507  000A1C  0EE4               	movlw	228
  6508  000A1E                     u7257:
  6509  000A1E  2EE8               	decfsz	wreg,f,c
  6510  000A20  D7FE               	bra	u7257
  6511  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6512  000A24  D7FC               	bra	u7257
  6513  000A26  F000               	nop	
  6514                           
  6515                           ;UI.c: 104: lcdInst(0b10000000);;
  6516  000A28  0E80               	movlw	128
  6517  000A2A  ECE1  F023         	call	_lcdInst
  6518                           
  6519                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6520  000A2E  0EB3               	movlw	low STR_3
  6521  000A30  0100               	movlb	0	; () banked
  6522  000A32  6F8E               	movwf	printf@f& (0+255),b
  6523  000A34  0EFB               	movlw	high STR_3
  6524  000A36  0100               	movlb	0	; () banked
  6525  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6526  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6527  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6528  000A42  ECB8  F008         	call	_printf	;wreg free
  6529                           
  6530                           ;UI.c: 106: lcdInst(0b11000000);;
  6531  000A46  0EC0               	movlw	192
  6532  000A48  ECE1  F023         	call	_lcdInst
  6533                           
  6534                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6535  000A4C  0E4A               	movlw	low STR_4
  6536  000A4E  0100               	movlb	0	; () banked
  6537  000A50  6F8E               	movwf	printf@f& (0+255),b
  6538  000A52  0EFE               	movlw	high STR_4
  6539  000A54  0100               	movlb	0	; () banked
  6540  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6541  000A58  ECB8  F008         	call	_printf	;wreg free
  6542  000A5C                     l7407:
  6543  000A5C  0E00               	movlw	0
  6544  000A5E  0100               	movlb	0	; () banked
  6545  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6546  000A62                     l7409:
  6547                           
  6548                           ; BSR set to: 0
  6549  000A62  0E63               	movlw	99
  6550  000A64  0100               	movlb	0	; () banked
  6551  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6552  000A68  D001               	goto	l7413
  6553  000A6A  D00C               	goto	l7417
  6554  000A6C                     l7413:
  6555                           
  6556                           ; BSR set to: 0
  6557  000A6C  0E68               	movlw	104
  6558  000A6E  0100               	movlb	0	; () banked
  6559  000A70  6FC4               	movwf	??_UI& (0+255),b
  6560  000A72  0EE4               	movlw	228
  6561  000A74                     u7267:
  6562  000A74  2EE8               	decfsz	wreg,f,c
  6563  000A76  D7FE               	bra	u7267
  6564  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6565  000A7A  D7FC               	bra	u7267
  6566  000A7C  F000               	nop	
  6567  000A7E  0100               	movlb	0	; () banked
  6568  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6569  000A82  D7EF               	goto	l7409
  6570  000A84                     l7417:
  6571                           
  6572                           ; BSR set to: 0
  6573  000A84  0100               	movlb	0	; () banked
  6574  000A86  51F6               	movf	_logstate& (0+255),w,b
  6575  000A88  0100               	movlb	0	; () banked
  6576  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6577  000A8C  B4D8               	btfsc	status,2,c
  6578  000A8E  0012               	return	
  6579  000A90  D7E5               	goto	l7407
  6580  000A92                     l7423:
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;UI.c: 111: else{
  6584                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6585  000A92  0E01               	movlw	1
  6586  000A94  ECE1  F023         	call	_lcdInst
  6587  000A98  0E68               	movlw	104
  6588  000A9A  0100               	movlb	0	; () banked
  6589  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6590  000A9E  0EE4               	movlw	228
  6591  000AA0                     u7277:
  6592  000AA0  2EE8               	decfsz	wreg,f,c
  6593  000AA2  D7FE               	bra	u7277
  6594  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6595  000AA6  D7FC               	bra	u7277
  6596  000AA8  F000               	nop	
  6597                           
  6598                           ;UI.c: 113: lcdInst(0b10000000);;
  6599  000AAA  0E80               	movlw	128
  6600  000AAC  ECE1  F023         	call	_lcdInst
  6601                           
  6602                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6603  000AB0  0EB3               	movlw	low STR_3
  6604  000AB2  0100               	movlb	0	; () banked
  6605  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6606  000AB6  0EFB               	movlw	high STR_3
  6607  000AB8  0100               	movlb	0	; () banked
  6608  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6609  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6610  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6611  000AC4  ECB8  F008         	call	_printf	;wreg free
  6612                           
  6613                           ;UI.c: 115: lcdInst(0b11000000);;
  6614  000AC8  0EC0               	movlw	192
  6615  000ACA  ECE1  F023         	call	_lcdInst
  6616                           
  6617                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6618  000ACE  0E08               	movlw	low STR_6
  6619  000AD0  0100               	movlb	0	; () banked
  6620  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6621  000AD4  0EFE               	movlw	high STR_6
  6622  000AD6  0100               	movlb	0	; () banked
  6623  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6624  000ADA  ECB8  F008         	call	_printf	;wreg free
  6625                           
  6626                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6627  000ADE  0E00               	movlw	0
  6628  000AE0  0100               	movlb	0	; () banked
  6629  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6630  000AE4                     l7437:
  6631                           
  6632                           ; BSR set to: 0
  6633  000AE4  0E63               	movlw	99
  6634  000AE6  0100               	movlb	0	; () banked
  6635  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6636  000AEA  D001               	goto	l7441
  6637  000AEC  D00C               	goto	l7445
  6638  000AEE                     l7441:
  6639                           
  6640                           ; BSR set to: 0
  6641  000AEE  0E68               	movlw	104
  6642  000AF0  0100               	movlb	0	; () banked
  6643  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6644  000AF4  0EE4               	movlw	228
  6645  000AF6                     u7287:
  6646  000AF6  2EE8               	decfsz	wreg,f,c
  6647  000AF8  D7FE               	bra	u7287
  6648  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6649  000AFC  D7FC               	bra	u7287
  6650  000AFE  F000               	nop	
  6651  000B00  0100               	movlb	0	; () banked
  6652  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6653  000B04  D7EF               	goto	l7437
  6654  000B06                     l7445:
  6655                           
  6656                           ; BSR set to: 0
  6657  000B06  0100               	movlb	0	; () banked
  6658  000B08  51F6               	movf	_logstate& (0+255),w,b
  6659  000B0A  0100               	movlb	0	; () banked
  6660  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6661  000B0E  B4D8               	btfsc	status,2,c
  6662  000B10  0012               	return	
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6666                           
  6667                           ; BSR set to: 0
  6668                           
  6669                           ; BSR set to: 0
  6670  000B12  0E00               	movlw	0
  6671  000B14  0100               	movlb	0	; () banked
  6672  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6673  000B18                     l7451:
  6674                           
  6675                           ; BSR set to: 0
  6676  000B18  0E63               	movlw	99
  6677  000B1A  0100               	movlb	0	; () banked
  6678  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6679  000B1E  D001               	goto	l7455
  6680  000B20  D00C               	goto	l7459
  6681  000B22                     l7455:
  6682                           
  6683                           ; BSR set to: 0
  6684  000B22  0E68               	movlw	104
  6685  000B24  0100               	movlb	0	; () banked
  6686  000B26  6FC4               	movwf	??_UI& (0+255),b
  6687  000B28  0EE4               	movlw	228
  6688  000B2A                     u7297:
  6689  000B2A  2EE8               	decfsz	wreg,f,c
  6690  000B2C  D7FE               	bra	u7297
  6691  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6692  000B30  D7FC               	bra	u7297
  6693  000B32  F000               	nop	
  6694  000B34  0100               	movlb	0	; () banked
  6695  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6696  000B38  D7EF               	goto	l7451
  6697  000B3A                     l7459:
  6698                           
  6699                           ; BSR set to: 0
  6700  000B3A  0100               	movlb	0	; () banked
  6701  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6702  000B3E  0100               	movlb	0	; () banked
  6703  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6704  000B42  B4D8               	btfsc	status,2,c
  6705  000B44  0012               	return	
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6709                           
  6710                           ; BSR set to: 0
  6711                           
  6712                           ; BSR set to: 0
  6713  000B46  0E01               	movlw	1
  6714  000B48  ECE1  F023         	call	_lcdInst
  6715  000B4C  0E68               	movlw	104
  6716  000B4E  0100               	movlb	0	; () banked
  6717  000B50  6FC4               	movwf	??_UI& (0+255),b
  6718  000B52  0EE4               	movlw	228
  6719  000B54                     u7307:
  6720  000B54  2EE8               	decfsz	wreg,f,c
  6721  000B56  D7FE               	bra	u7307
  6722  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6723  000B5A  D7FC               	bra	u7307
  6724  000B5C  F000               	nop	
  6725                           
  6726                           ;UI.c: 122: lcdInst(0b10000000);;
  6727  000B5E  0E80               	movlw	128
  6728  000B60  ECE1  F023         	call	_lcdInst
  6729                           
  6730                           ;UI.c: 123: printf("START:");
  6731  000B64  0EC4               	movlw	low STR_7
  6732  000B66  0100               	movlb	0	; () banked
  6733  000B68  6F8E               	movwf	printf@f& (0+255),b
  6734  000B6A  0EFF               	movlw	high STR_7
  6735  000B6C  0100               	movlb	0	; () banked
  6736  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6737  000B70  ECB8  F008         	call	_printf	;wreg free
  6738                           
  6739                           ;UI.c: 124: lcdInst(0b11000000);;
  6740  000B74  0EC0               	movlw	192
  6741  000B76  ECE1  F023         	call	_lcdInst
  6742                           
  6743                           ;UI.c: 125: char month[] = "MMM";
  6744  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6745  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6746  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6747  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6748                           
  6749                           ;UI.c: 126: switch(log_startTime[5]){
  6750  000B8A  D0C3               	goto	l7503
  6751  000B8C                     l7475:
  6752                           
  6753                           ;UI.c: 128: strcpy(month, "JAN");
  6754  000B8C  0ED6               	movlw	low UI@month
  6755  000B8E  0100               	movlb	0	; () banked
  6756  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6757  000B92  0E00               	movlw	high UI@month
  6758  000B94  0100               	movlb	0	; () banked
  6759  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6760  000B98  0EDB               	movlw	low STR_8
  6761  000B9A  0100               	movlb	0	; () banked
  6762  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6763  000B9E  0EFF               	movlw	high STR_8
  6764  000BA0  0100               	movlb	0	; () banked
  6765  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6766  000BA4  EC4D  F021         	call	_strcpy	;wreg free
  6767                           
  6768                           ;UI.c: 129: break;
  6769  000BA8  D0E6               	goto	l7505
  6770  000BAA                     l7477:
  6771                           
  6772                           ;UI.c: 131: strcpy(month, "FEB");
  6773  000BAA  0ED6               	movlw	low UI@month
  6774  000BAC  0100               	movlb	0	; () banked
  6775  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6776  000BB0  0E00               	movlw	high UI@month
  6777  000BB2  0100               	movlb	0	; () banked
  6778  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6779  000BB6  0ECB               	movlw	low STR_9
  6780  000BB8  0100               	movlb	0	; () banked
  6781  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6782  000BBC  0EFF               	movlw	high STR_9
  6783  000BBE  0100               	movlb	0	; () banked
  6784  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6785  000BC2  EC4D  F021         	call	_strcpy	;wreg free
  6786                           
  6787                           ;UI.c: 132: break;
  6788  000BC6  D0D7               	goto	l7505
  6789  000BC8                     l7479:
  6790                           
  6791                           ;UI.c: 134: strcpy(month, "MAR");
  6792  000BC8  0ED6               	movlw	low UI@month
  6793  000BCA  0100               	movlb	0	; () banked
  6794  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6795  000BCE  0E00               	movlw	high UI@month
  6796  000BD0  0100               	movlb	0	; () banked
  6797  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6798  000BD4  0EE7               	movlw	low STR_10
  6799  000BD6  0100               	movlb	0	; () banked
  6800  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6801  000BDA  0EFF               	movlw	high STR_10
  6802  000BDC  0100               	movlb	0	; () banked
  6803  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6804  000BE0  EC4D  F021         	call	_strcpy	;wreg free
  6805                           
  6806                           ;UI.c: 135: break;
  6807  000BE4  D0C8               	goto	l7505
  6808  000BE6                     l7481:
  6809                           
  6810                           ;UI.c: 137: strcpy(month, "APR");
  6811  000BE6  0ED6               	movlw	low UI@month
  6812  000BE8  0100               	movlb	0	; () banked
  6813  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6814  000BEC  0E00               	movlw	high UI@month
  6815  000BEE  0100               	movlb	0	; () banked
  6816  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6817  000BF2  0EEB               	movlw	low STR_11
  6818  000BF4  0100               	movlb	0	; () banked
  6819  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6820  000BF8  0EFF               	movlw	high STR_11
  6821  000BFA  0100               	movlb	0	; () banked
  6822  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6823  000BFE  EC4D  F021         	call	_strcpy	;wreg free
  6824                           
  6825                           ;UI.c: 138: break;
  6826  000C02  D0B9               	goto	l7505
  6827  000C04                     l7483:
  6828                           
  6829                           ;UI.c: 140: strcpy(month, "MAY");
  6830  000C04  0ED6               	movlw	low UI@month
  6831  000C06  0100               	movlb	0	; () banked
  6832  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6833  000C0A  0E00               	movlw	high UI@month
  6834  000C0C  0100               	movlb	0	; () banked
  6835  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6836  000C10  0EFB               	movlw	low STR_12
  6837  000C12  0100               	movlb	0	; () banked
  6838  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6839  000C16  0EFF               	movlw	high STR_12
  6840  000C18  0100               	movlb	0	; () banked
  6841  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6842  000C1C  EC4D  F021         	call	_strcpy	;wreg free
  6843                           
  6844                           ;UI.c: 141: break;
  6845  000C20  D0AA               	goto	l7505
  6846  000C22                     l7485:
  6847                           
  6848                           ;UI.c: 143: strcpy(month, "JUN");
  6849  000C22  0ED6               	movlw	low UI@month
  6850  000C24  0100               	movlb	0	; () banked
  6851  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6852  000C28  0E00               	movlw	high UI@month
  6853  000C2A  0100               	movlb	0	; () banked
  6854  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6855  000C2E  0EDF               	movlw	low STR_13
  6856  000C30  0100               	movlb	0	; () banked
  6857  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6858  000C34  0EFF               	movlw	high STR_13
  6859  000C36  0100               	movlb	0	; () banked
  6860  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6861  000C3A  EC4D  F021         	call	_strcpy	;wreg free
  6862                           
  6863                           ;UI.c: 144: break;
  6864  000C3E  D09B               	goto	l7505
  6865  000C40                     l7487:
  6866                           
  6867                           ;UI.c: 146: strcpy(month, "JUL");
  6868  000C40  0ED6               	movlw	low UI@month
  6869  000C42  0100               	movlb	0	; () banked
  6870  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6871  000C46  0E00               	movlw	high UI@month
  6872  000C48  0100               	movlb	0	; () banked
  6873  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6874  000C4C  0ED7               	movlw	low STR_14
  6875  000C4E  0100               	movlb	0	; () banked
  6876  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6877  000C52  0EFF               	movlw	high STR_14
  6878  000C54  0100               	movlb	0	; () banked
  6879  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6880  000C58  EC4D  F021         	call	_strcpy	;wreg free
  6881                           
  6882                           ;UI.c: 147: break;
  6883  000C5C  D08C               	goto	l7505
  6884  000C5E                     l7489:
  6885                           
  6886                           ;UI.c: 149: strcpy(month, "AUG");
  6887  000C5E  0ED6               	movlw	low UI@month
  6888  000C60  0100               	movlb	0	; () banked
  6889  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6890  000C64  0E00               	movlw	high UI@month
  6891  000C66  0100               	movlb	0	; () banked
  6892  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6893  000C6A  0ED3               	movlw	low STR_15
  6894  000C6C  0100               	movlb	0	; () banked
  6895  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6896  000C70  0EFF               	movlw	high STR_15
  6897  000C72  0100               	movlb	0	; () banked
  6898  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6899  000C76  EC4D  F021         	call	_strcpy	;wreg free
  6900                           
  6901                           ;UI.c: 150: break;
  6902  000C7A  D07D               	goto	l7505
  6903  000C7C                     l7491:
  6904                           
  6905                           ;UI.c: 152: strcpy(month, "SEP");
  6906  000C7C  0ED6               	movlw	low UI@month
  6907  000C7E  0100               	movlb	0	; () banked
  6908  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6909  000C82  0E00               	movlw	high UI@month
  6910  000C84  0100               	movlb	0	; () banked
  6911  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6912  000C88  0EE3               	movlw	low STR_16
  6913  000C8A  0100               	movlb	0	; () banked
  6914  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6915  000C8E  0EFF               	movlw	high STR_16
  6916  000C90  0100               	movlb	0	; () banked
  6917  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6918  000C94  EC4D  F021         	call	_strcpy	;wreg free
  6919                           
  6920                           ;UI.c: 153: break;
  6921  000C98  D06E               	goto	l7505
  6922  000C9A                     l7493:
  6923                           
  6924                           ;UI.c: 155: strcpy(month, "OCT");
  6925  000C9A  0ED6               	movlw	low UI@month
  6926  000C9C  0100               	movlb	0	; () banked
  6927  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6928  000CA0  0E00               	movlw	high UI@month
  6929  000CA2  0100               	movlb	0	; () banked
  6930  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6931  000CA6  0EF3               	movlw	low STR_17
  6932  000CA8  0100               	movlb	0	; () banked
  6933  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6934  000CAC  0EFF               	movlw	high STR_17
  6935  000CAE  0100               	movlb	0	; () banked
  6936  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6937  000CB2  EC4D  F021         	call	_strcpy	;wreg free
  6938                           
  6939                           ;UI.c: 156: break;
  6940  000CB6  D05F               	goto	l7505
  6941  000CB8                     l7495:
  6942                           
  6943                           ;UI.c: 158: strcpy(month, "NOV");
  6944  000CB8  0ED6               	movlw	low UI@month
  6945  000CBA  0100               	movlb	0	; () banked
  6946  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6947  000CBE  0E00               	movlw	high UI@month
  6948  000CC0  0100               	movlb	0	; () banked
  6949  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6950  000CC4  0EF7               	movlw	low STR_18
  6951  000CC6  0100               	movlb	0	; () banked
  6952  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6953  000CCA  0EFF               	movlw	high STR_18
  6954  000CCC  0100               	movlb	0	; () banked
  6955  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6956  000CD0  EC4D  F021         	call	_strcpy	;wreg free
  6957                           
  6958                           ;UI.c: 159: break;
  6959  000CD4  D050               	goto	l7505
  6960  000CD6                     l7497:
  6961                           
  6962                           ;UI.c: 161: strcpy(month, "DEC");
  6963  000CD6  0ED6               	movlw	low UI@month
  6964  000CD8  0100               	movlb	0	; () banked
  6965  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6966  000CDC  0E00               	movlw	high UI@month
  6967  000CDE  0100               	movlb	0	; () banked
  6968  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6969  000CE2  0ECF               	movlw	low STR_19
  6970  000CE4  0100               	movlb	0	; () banked
  6971  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6972  000CE8  0EFF               	movlw	high STR_19
  6973  000CEA  0100               	movlb	0	; () banked
  6974  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6975  000CEE  EC4D  F021         	call	_strcpy	;wreg free
  6976                           
  6977                           ;UI.c: 162: break;
  6978  000CF2  D041               	goto	l7505
  6979  000CF4                     l7499:
  6980                           
  6981                           ;UI.c: 164: strcpy(month, "ERR");
  6982  000CF4  0ED6               	movlw	low UI@month
  6983  000CF6  0100               	movlb	0	; () banked
  6984  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6985  000CFA  0E00               	movlw	high UI@month
  6986  000CFC  0100               	movlb	0	; () banked
  6987  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6988  000D00  0EEF               	movlw	low STR_20
  6989  000D02  0100               	movlb	0	; () banked
  6990  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6991  000D06  0EFF               	movlw	high STR_20
  6992  000D08  0100               	movlb	0	; () banked
  6993  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6994  000D0C  EC4D  F021         	call	_strcpy	;wreg free
  6995                           
  6996                           ;UI.c: 166: }
  6997                           
  6998                           ;UI.c: 165: break;
  6999  000D10  D032               	goto	l7505
  7000  000D12                     l7503:
  7001  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7002  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7003  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7004                           
  7005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7006                           ; Switch size 1, requested type "space"
  7007                           ; Number of cases is 1, Range of values is 0 to 0
  7008                           ; switch strategies available:
  7009                           ; Name         Instructions Cycles
  7010                           ; simple_byte            4     3 (average)
  7011                           ;	Chosen strategy is simple_byte
  7012  000D1E  0100               	movlb	0	; () banked
  7013  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7014  000D22  0A00               	xorlw	0	; case 0
  7015  000D24  A4D8               	btfss	status,2,c
  7016  000D26  D7E6               	goto	l7499
  7017                           
  7018                           ; BSR set to: 0
  7019                           ; Switch size 1, requested type "space"
  7020                           ; Number of cases is 12, Range of values is 1 to 12
  7021                           ; switch strategies available:
  7022                           ; Name         Instructions Cycles
  7023                           ; simple_byte           37    19 (average)
  7024                           ;	Chosen strategy is simple_byte
  7025  000D28  0100               	movlb	0	; () banked
  7026  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7027  000D2C  0A01               	xorlw	1	; case 1
  7028  000D2E  B4D8               	btfsc	status,2,c
  7029  000D30  D72D               	goto	l7475
  7030  000D32  0A03               	xorlw	3	; case 2
  7031  000D34  B4D8               	btfsc	status,2,c
  7032  000D36  D739               	goto	l7477
  7033  000D38  0A01               	xorlw	1	; case 3
  7034  000D3A  B4D8               	btfsc	status,2,c
  7035  000D3C  D745               	goto	l7479
  7036  000D3E  0A07               	xorlw	7	; case 4
  7037  000D40  B4D8               	btfsc	status,2,c
  7038  000D42  D751               	goto	l7481
  7039  000D44  0A01               	xorlw	1	; case 5
  7040  000D46  B4D8               	btfsc	status,2,c
  7041  000D48  D75D               	goto	l7483
  7042  000D4A  0A03               	xorlw	3	; case 6
  7043  000D4C  B4D8               	btfsc	status,2,c
  7044  000D4E  D769               	goto	l7485
  7045  000D50  0A01               	xorlw	1	; case 7
  7046  000D52  B4D8               	btfsc	status,2,c
  7047  000D54  D775               	goto	l7487
  7048  000D56  0A0F               	xorlw	15	; case 8
  7049  000D58  B4D8               	btfsc	status,2,c
  7050  000D5A  D781               	goto	l7489
  7051  000D5C  0A01               	xorlw	1	; case 9
  7052  000D5E  B4D8               	btfsc	status,2,c
  7053  000D60  D78D               	goto	l7491
  7054  000D62  0A03               	xorlw	3	; case 10
  7055  000D64  B4D8               	btfsc	status,2,c
  7056  000D66  D799               	goto	l7493
  7057  000D68  0A01               	xorlw	1	; case 11
  7058  000D6A  B4D8               	btfsc	status,2,c
  7059  000D6C  D7A5               	goto	l7495
  7060  000D6E  0A07               	xorlw	7	; case 12
  7061  000D70  B4D8               	btfsc	status,2,c
  7062  000D72  D7B1               	goto	l7497
  7063  000D74  D7BF               	goto	l7499
  7064  000D76                     l7505:
  7065                           
  7066                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7067  000D76  0E3C               	movlw	low STR_21
  7068  000D78  0100               	movlb	0	; () banked
  7069  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7070  000D7C  0EFB               	movlw	high STR_21
  7071  000D7E  0100               	movlb	0	; () banked
  7072  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7073  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7074  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7075  000D8A  0ED6               	movlw	low UI@month
  7076  000D8C  0100               	movlb	0	; () banked
  7077  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7078  000D90  0E00               	movlw	high UI@month
  7079  000D92  0100               	movlb	0	; () banked
  7080  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7081  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7082  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7083  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7084  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7085  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7086  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7087  000DAE  ECB8  F008         	call	_printf	;wreg free
  7088                           
  7089                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7090  000DB2  0E00               	movlw	0
  7091  000DB4  0100               	movlb	0	; () banked
  7092  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7093  000DB8                     l7509:
  7094                           
  7095                           ; BSR set to: 0
  7096  000DB8  0E63               	movlw	99
  7097  000DBA  0100               	movlb	0	; () banked
  7098  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7099  000DBE  D001               	goto	l7513
  7100  000DC0  D00C               	goto	l7517
  7101  000DC2                     l7513:
  7102                           
  7103                           ; BSR set to: 0
  7104  000DC2  0E68               	movlw	104
  7105  000DC4  0100               	movlb	0	; () banked
  7106  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7107  000DC8  0EE4               	movlw	228
  7108  000DCA                     u7317:
  7109  000DCA  2EE8               	decfsz	wreg,f,c
  7110  000DCC  D7FE               	bra	u7317
  7111  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7112  000DD0  D7FC               	bra	u7317
  7113  000DD2  F000               	nop	
  7114  000DD4  0100               	movlb	0	; () banked
  7115  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7116  000DD8  D7EF               	goto	l7509
  7117  000DDA                     l7517:
  7118                           
  7119                           ; BSR set to: 0
  7120  000DDA  0100               	movlb	0	; () banked
  7121  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7122  000DDE  0100               	movlb	0	; () banked
  7123  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7124  000DE2  B4D8               	btfsc	status,2,c
  7125  000DE4  0012               	return	
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7129                           
  7130                           ; BSR set to: 0
  7131                           
  7132                           ; BSR set to: 0
  7133  000DE6  0E00               	movlw	0
  7134  000DE8  0100               	movlb	0	; () banked
  7135  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7136  000DEC                     l7523:
  7137                           
  7138                           ; BSR set to: 0
  7139  000DEC  0E63               	movlw	99
  7140  000DEE  0100               	movlb	0	; () banked
  7141  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7142  000DF2  D001               	goto	l7527
  7143  000DF4  D00C               	goto	l7531
  7144  000DF6                     l7527:
  7145                           
  7146                           ; BSR set to: 0
  7147  000DF6  0E68               	movlw	104
  7148  000DF8  0100               	movlb	0	; () banked
  7149  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7150  000DFC  0EE4               	movlw	228
  7151  000DFE                     u7327:
  7152  000DFE  2EE8               	decfsz	wreg,f,c
  7153  000E00  D7FE               	bra	u7327
  7154  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7155  000E04  D7FC               	bra	u7327
  7156  000E06  F000               	nop	
  7157  000E08  0100               	movlb	0	; () banked
  7158  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7159  000E0C  D7EF               	goto	l7523
  7160  000E0E                     l7531:
  7161                           
  7162                           ; BSR set to: 0
  7163  000E0E  0100               	movlb	0	; () banked
  7164  000E10  51F6               	movf	_logstate& (0+255),w,b
  7165  000E12  0100               	movlb	0	; () banked
  7166  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7167  000E16  B4D8               	btfsc	status,2,c
  7168  000E18  0012               	return	
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7172                           
  7173                           ; BSR set to: 0
  7174                           
  7175                           ; BSR set to: 0
  7176  000E1A  0E01               	movlw	1
  7177  000E1C  ECE1  F023         	call	_lcdInst
  7178  000E20  0E68               	movlw	104
  7179  000E22  0100               	movlb	0	; () banked
  7180  000E24  6FC4               	movwf	??_UI& (0+255),b
  7181  000E26  0EE4               	movlw	228
  7182  000E28                     u7337:
  7183  000E28  2EE8               	decfsz	wreg,f,c
  7184  000E2A  D7FE               	bra	u7337
  7185  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7186  000E2E  D7FC               	bra	u7337
  7187  000E30  F000               	nop	
  7188                           
  7189                           ;UI.c: 173: lcdInst(0b10000000);;
  7190  000E32  0E80               	movlw	128
  7191  000E34  ECE1  F023         	call	_lcdInst
  7192                           
  7193                           ;UI.c: 174: printf("DURATION:");
  7194  000E38  0E9B               	movlw	low STR_22
  7195  000E3A  0100               	movlb	0	; () banked
  7196  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7197  000E3E  0EFF               	movlw	high STR_22
  7198  000E40  0100               	movlb	0	; () banked
  7199  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7200  000E44  ECB8  F008         	call	_printf	;wreg free
  7201                           
  7202                           ;UI.c: 175: lcdInst(0b11000000);;
  7203  000E48  0EC0               	movlw	192
  7204  000E4A  ECE1  F023         	call	_lcdInst
  7205                           
  7206                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7207  000E4E  0E0E               	movlw	14
  7208  000E50  0100               	movlb	0	; () banked
  7209  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7210  000E54  0E10               	movlw	16
  7211  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7212  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7213  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7214  000E60  EC36  F01C         	call	___awmod	;wreg free
  7215  000E64  C080  F0C6         	movff	?___awmod,_UI$2295
  7216  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2295+1
  7217                           
  7218                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7219  000E6C  0E19               	movlw	low STR_23
  7220  000E6E  0100               	movlb	0	; () banked
  7221  000E70  6F8E               	movwf	printf@f& (0+255),b
  7222  000E72  0EFF               	movlw	high STR_23
  7223  000E74  0100               	movlb	0	; () banked
  7224  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7225  000E78  0E0E               	movlw	14
  7226  000E7A  0100               	movlb	0	; () banked
  7227  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7228  000E7E  0E10               	movlw	16
  7229  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7230  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7231  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7232  000E8A  EC36  F01C         	call	___awmod	;wreg free
  7233  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7234  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7235  000E96  0E00               	movlw	0
  7236  000E98  0100               	movlb	0	; () banked
  7237  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7238  000E9C  0E3C               	movlw	60
  7239  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7240  000EA0  EC24  F01B         	call	___awdiv	;wreg free
  7241  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7242  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7243  000EAC  C0C6  F080         	movff	_UI$2295,___awmod@dividend
  7244  000EB0  C0C7  F081         	movff	_UI$2295+1,___awmod@dividend+1
  7245  000EB4  0E00               	movlw	0
  7246  000EB6  0100               	movlb	0	; () banked
  7247  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7248  000EBA  0E3C               	movlw	60
  7249  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7250  000EBE  EC36  F01C         	call	___awmod	;wreg free
  7251  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7252  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7253  000ECA  ECB8  F008         	call	_printf	;wreg free
  7254                           
  7255                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7256  000ECE  0E00               	movlw	0
  7257  000ED0  0100               	movlb	0	; () banked
  7258  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7259  000ED4                     l7551:
  7260                           
  7261                           ; BSR set to: 0
  7262  000ED4  0E63               	movlw	99
  7263  000ED6  0100               	movlb	0	; () banked
  7264  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7265  000EDA  D001               	goto	l7555
  7266  000EDC  D00C               	goto	l7559
  7267  000EDE                     l7555:
  7268                           
  7269                           ; BSR set to: 0
  7270  000EDE  0E68               	movlw	104
  7271  000EE0  0100               	movlb	0	; () banked
  7272  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7273  000EE4  0EE4               	movlw	228
  7274  000EE6                     u7347:
  7275  000EE6  2EE8               	decfsz	wreg,f,c
  7276  000EE8  D7FE               	bra	u7347
  7277  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7278  000EEC  D7FC               	bra	u7347
  7279  000EEE  F000               	nop	
  7280  000EF0  0100               	movlb	0	; () banked
  7281  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7282  000EF4  D7EF               	goto	l7551
  7283  000EF6                     l7559:
  7284                           
  7285                           ; BSR set to: 0
  7286  000EF6  0100               	movlb	0	; () banked
  7287  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7288  000EFA  0100               	movlb	0	; () banked
  7289  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7290  000EFE  B4D8               	btfsc	status,2,c
  7291  000F00  0012               	return	
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7295                           
  7296                           ; BSR set to: 0
  7297                           
  7298                           ; BSR set to: 0
  7299  000F02  0E00               	movlw	0
  7300  000F04  0100               	movlb	0	; () banked
  7301  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7302  000F08                     l7565:
  7303                           
  7304                           ; BSR set to: 0
  7305  000F08  0E63               	movlw	99
  7306  000F0A  0100               	movlb	0	; () banked
  7307  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7308  000F0E  D001               	goto	l7569
  7309  000F10  D00C               	goto	l7573
  7310  000F12                     l7569:
  7311                           
  7312                           ; BSR set to: 0
  7313  000F12  0E68               	movlw	104
  7314  000F14  0100               	movlb	0	; () banked
  7315  000F16  6FC4               	movwf	??_UI& (0+255),b
  7316  000F18  0EE4               	movlw	228
  7317  000F1A                     u7357:
  7318  000F1A  2EE8               	decfsz	wreg,f,c
  7319  000F1C  D7FE               	bra	u7357
  7320  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7321  000F20  D7FC               	bra	u7357
  7322  000F22  F000               	nop	
  7323  000F24  0100               	movlb	0	; () banked
  7324  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7325  000F28  D7EF               	goto	l7565
  7326  000F2A                     l7573:
  7327                           
  7328                           ; BSR set to: 0
  7329  000F2A  0100               	movlb	0	; () banked
  7330  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7331  000F2E  0100               	movlb	0	; () banked
  7332  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7333  000F32  B4D8               	btfsc	status,2,c
  7334  000F34  0012               	return	
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7338                           
  7339                           ; BSR set to: 0
  7340                           
  7341                           ; BSR set to: 0
  7342  000F36  0E01               	movlw	1
  7343  000F38  ECE1  F023         	call	_lcdInst
  7344  000F3C  0E68               	movlw	104
  7345  000F3E  0100               	movlb	0	; () banked
  7346  000F40  6FC4               	movwf	??_UI& (0+255),b
  7347  000F42  0EE4               	movlw	228
  7348  000F44                     u7367:
  7349  000F44  2EE8               	decfsz	wreg,f,c
  7350  000F46  D7FE               	bra	u7367
  7351  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7352  000F4A  D7FC               	bra	u7367
  7353  000F4C  F000               	nop	
  7354                           
  7355                           ;UI.c: 182: lcdInst(0b10000000);;
  7356  000F4E  0E80               	movlw	128
  7357  000F50  ECE1  F023         	call	_lcdInst
  7358                           
  7359                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7360  000F54  0E5E               	movlw	low STR_24
  7361  000F56  0100               	movlb	0	; () banked
  7362  000F58  6F8E               	movwf	printf@f& (0+255),b
  7363  000F5A  0EFD               	movlw	high STR_24
  7364  000F5C  0100               	movlb	0	; () banked
  7365  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7366  000F60  ECB8  F008         	call	_printf	;wreg free
  7367                           
  7368                           ;UI.c: 184: lcdInst(0b11000000);;
  7369  000F64  0EC0               	movlw	192
  7370  000F66  ECE1  F023         	call	_lcdInst
  7371                           
  7372                           ;UI.c: 185: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7373  000F6A  0E7C               	movlw	low STR_25
  7374  000F6C  0100               	movlb	0	; () banked
  7375  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7376  000F70  0EFB               	movlw	high STR_25
  7377  000F72  0100               	movlb	0	; () banked
  7378  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7379  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7380  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7381  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7382  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7383  000F86  ECB8  F008         	call	_printf	;wreg free
  7384                           
  7385                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7386  000F8A  0E00               	movlw	0
  7387  000F8C  0100               	movlb	0	; () banked
  7388  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7389  000F90                     l7591:
  7390                           
  7391                           ; BSR set to: 0
  7392  000F90  0E63               	movlw	99
  7393  000F92  0100               	movlb	0	; () banked
  7394  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7395  000F96  D001               	goto	l7595
  7396  000F98  D00C               	goto	l7599
  7397  000F9A                     l7595:
  7398                           
  7399                           ; BSR set to: 0
  7400  000F9A  0E68               	movlw	104
  7401  000F9C  0100               	movlb	0	; () banked
  7402  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7403  000FA0  0EE4               	movlw	228
  7404  000FA2                     u7377:
  7405  000FA2  2EE8               	decfsz	wreg,f,c
  7406  000FA4  D7FE               	bra	u7377
  7407  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7408  000FA8  D7FC               	bra	u7377
  7409  000FAA  F000               	nop	
  7410  000FAC  0100               	movlb	0	; () banked
  7411  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7412  000FB0  D7EF               	goto	l7591
  7413  000FB2                     l7599:
  7414                           
  7415                           ; BSR set to: 0
  7416  000FB2  0100               	movlb	0	; () banked
  7417  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7418  000FB6  0100               	movlb	0	; () banked
  7419  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7420  000FBA  B4D8               	btfsc	status,2,c
  7421  000FBC  0012               	return	
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7425                           
  7426                           ; BSR set to: 0
  7427                           
  7428                           ; BSR set to: 0
  7429  000FBE  0E00               	movlw	0
  7430  000FC0  0100               	movlb	0	; () banked
  7431  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7432  000FC4                     l7605:
  7433                           
  7434                           ; BSR set to: 0
  7435  000FC4  0E63               	movlw	99
  7436  000FC6  0100               	movlb	0	; () banked
  7437  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7438  000FCA  D001               	goto	l7609
  7439  000FCC  D00C               	goto	l7613
  7440  000FCE                     l7609:
  7441                           
  7442                           ; BSR set to: 0
  7443  000FCE  0E68               	movlw	104
  7444  000FD0  0100               	movlb	0	; () banked
  7445  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7446  000FD4  0EE4               	movlw	228
  7447  000FD6                     u7387:
  7448  000FD6  2EE8               	decfsz	wreg,f,c
  7449  000FD8  D7FE               	bra	u7387
  7450  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7451  000FDC  D7FC               	bra	u7387
  7452  000FDE  F000               	nop	
  7453  000FE0  0100               	movlb	0	; () banked
  7454  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7455  000FE4  D7EF               	goto	l7605
  7456  000FE6                     l7613:
  7457                           
  7458                           ; BSR set to: 0
  7459  000FE6  0100               	movlb	0	; () banked
  7460  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7461  000FEA  0100               	movlb	0	; () banked
  7462  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7463  000FEE  B4D8               	btfsc	status,2,c
  7464  000FF0  0012               	return	
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7468                           
  7469                           ; BSR set to: 0
  7470                           
  7471                           ; BSR set to: 0
  7472  000FF2  0E01               	movlw	1
  7473  000FF4  ECE1  F023         	call	_lcdInst
  7474  000FF8  0E68               	movlw	104
  7475  000FFA  0100               	movlb	0	; () banked
  7476  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7477  000FFE  0EE4               	movlw	228
  7478  001000                     u7397:
  7479  001000  2EE8               	decfsz	wreg,f,c
  7480  001002  D7FE               	bra	u7397
  7481  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7482  001006  D7FC               	bra	u7397
  7483  001008  F000               	nop	
  7484                           
  7485                           ;UI.c: 191: lcdInst(0b10000000);;
  7486  00100A  0E80               	movlw	128
  7487  00100C  ECE1  F023         	call	_lcdInst
  7488                           
  7489                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7490  001010  0E6F               	movlw	low STR_26
  7491  001012  0100               	movlb	0	; () banked
  7492  001014  6F8E               	movwf	printf@f& (0+255),b
  7493  001016  0EFD               	movlw	high STR_26
  7494  001018  0100               	movlb	0	; () banked
  7495  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7496  00101C  ECB8  F008         	call	_printf	;wreg free
  7497                           
  7498                           ;UI.c: 193: lcdInst(0b11000000);;
  7499  001020  0EC0               	movlw	192
  7500  001022  ECE1  F023         	call	_lcdInst
  7501                           
  7502                           ;UI.c: 194: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7503  001026  0E69               	movlw	low STR_27
  7504  001028  0100               	movlb	0	; () banked
  7505  00102A  6F8E               	movwf	printf@f& (0+255),b
  7506  00102C  0EFB               	movlw	high STR_27
  7507  00102E  0100               	movlb	0	; () banked
  7508  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7509  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7510  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7511  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7512  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7513  001042  ECB8  F008         	call	_printf	;wreg free
  7514                           
  7515                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7516  001046  0E00               	movlw	0
  7517  001048  0100               	movlb	0	; () banked
  7518  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7519  00104C                     l7631:
  7520                           
  7521                           ; BSR set to: 0
  7522  00104C  0E63               	movlw	99
  7523  00104E  0100               	movlb	0	; () banked
  7524  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7525  001052  D001               	goto	l7635
  7526  001054  D00C               	goto	l7639
  7527  001056                     l7635:
  7528                           
  7529                           ; BSR set to: 0
  7530  001056  0E68               	movlw	104
  7531  001058  0100               	movlb	0	; () banked
  7532  00105A  6FC4               	movwf	??_UI& (0+255),b
  7533  00105C  0EE4               	movlw	228
  7534  00105E                     u7407:
  7535  00105E  2EE8               	decfsz	wreg,f,c
  7536  001060  D7FE               	bra	u7407
  7537  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7538  001064  D7FC               	bra	u7407
  7539  001066  F000               	nop	
  7540  001068  0100               	movlb	0	; () banked
  7541  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7542  00106C  D7EF               	goto	l7631
  7543  00106E                     l7639:
  7544                           
  7545                           ; BSR set to: 0
  7546  00106E  0100               	movlb	0	; () banked
  7547  001070  51F6               	movf	_logstate& (0+255),w,b
  7548  001072  0100               	movlb	0	; () banked
  7549  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7550  001076  B4D8               	btfsc	status,2,c
  7551  001078  0012               	return	
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7555                           
  7556                           ; BSR set to: 0
  7557                           
  7558                           ; BSR set to: 0
  7559  00107A  0E00               	movlw	0
  7560  00107C  0100               	movlb	0	; () banked
  7561  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7562  001080                     l7645:
  7563                           
  7564                           ; BSR set to: 0
  7565  001080  0E63               	movlw	99
  7566  001082  0100               	movlb	0	; () banked
  7567  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7568  001086  D001               	goto	l7649
  7569  001088  D00C               	goto	l7653
  7570  00108A                     l7649:
  7571                           
  7572                           ; BSR set to: 0
  7573  00108A  0E68               	movlw	104
  7574  00108C  0100               	movlb	0	; () banked
  7575  00108E  6FC4               	movwf	??_UI& (0+255),b
  7576  001090  0EE4               	movlw	228
  7577  001092                     u7417:
  7578  001092  2EE8               	decfsz	wreg,f,c
  7579  001094  D7FE               	bra	u7417
  7580  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7581  001098  D7FC               	bra	u7417
  7582  00109A  F000               	nop	
  7583  00109C  0100               	movlb	0	; () banked
  7584  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7585  0010A0  D7EF               	goto	l7645
  7586  0010A2                     l7653:
  7587                           
  7588                           ; BSR set to: 0
  7589  0010A2  0100               	movlb	0	; () banked
  7590  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7591  0010A6  0100               	movlb	0	; () banked
  7592  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7593  0010AA  B4D8               	btfsc	status,2,c
  7594  0010AC  0012               	return	
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7598                           
  7599                           ; BSR set to: 0
  7600                           
  7601                           ; BSR set to: 0
  7602  0010AE  0E01               	movlw	1
  7603  0010B0  ECE1  F023         	call	_lcdInst
  7604  0010B4  0E68               	movlw	104
  7605  0010B6  0100               	movlb	0	; () banked
  7606  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7607  0010BA  0EE4               	movlw	228
  7608  0010BC                     u7427:
  7609  0010BC  2EE8               	decfsz	wreg,f,c
  7610  0010BE  D7FE               	bra	u7427
  7611  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7612  0010C2  D7FC               	bra	u7427
  7613  0010C4  F000               	nop	
  7614                           
  7615                           ;UI.c: 200: lcdInst(0b10000000);;
  7616  0010C6  0E80               	movlw	128
  7617  0010C8  ECE1  F023         	call	_lcdInst
  7618                           
  7619                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7620  0010CC  0E80               	movlw	low STR_28
  7621  0010CE  0100               	movlb	0	; () banked
  7622  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7623  0010D2  0EFD               	movlw	high STR_28
  7624  0010D4  0100               	movlb	0	; () banked
  7625  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7626  0010D8  ECB8  F008         	call	_printf	;wreg free
  7627                           
  7628                           ;UI.c: 202: lcdInst(0b11000000);;
  7629  0010DC  0EC0               	movlw	192
  7630  0010DE  ECE1  F023         	call	_lcdInst
  7631                           
  7632                           ;UI.c: 203: printf("%d", log_count_total);
  7633  0010E2  0E79               	movlw	low (STR_27+16)
  7634  0010E4  0100               	movlb	0	; () banked
  7635  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7636  0010E8  0EFB               	movlw	high (STR_27+16)
  7637  0010EA  0100               	movlb	0	; () banked
  7638  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7639  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7640  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7641  0010F6  ECB8  F008         	call	_printf	;wreg free
  7642                           
  7643                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7644  0010FA  0E00               	movlw	0
  7645  0010FC  0100               	movlb	0	; () banked
  7646  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7647  001100                     l7671:
  7648                           
  7649                           ; BSR set to: 0
  7650  001100  0E63               	movlw	99
  7651  001102  0100               	movlb	0	; () banked
  7652  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7653  001106  D001               	goto	l7675
  7654  001108  D00C               	goto	l7679
  7655  00110A                     l7675:
  7656                           
  7657                           ; BSR set to: 0
  7658  00110A  0E68               	movlw	104
  7659  00110C  0100               	movlb	0	; () banked
  7660  00110E  6FC4               	movwf	??_UI& (0+255),b
  7661  001110  0EE4               	movlw	228
  7662  001112                     u7437:
  7663  001112  2EE8               	decfsz	wreg,f,c
  7664  001114  D7FE               	bra	u7437
  7665  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7666  001118  D7FC               	bra	u7437
  7667  00111A  F000               	nop	
  7668  00111C  0100               	movlb	0	; () banked
  7669  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7670  001120  D7EF               	goto	l7671
  7671  001122                     l7679:
  7672                           
  7673                           ; BSR set to: 0
  7674  001122  0100               	movlb	0	; () banked
  7675  001124  51F6               	movf	_logstate& (0+255),w,b
  7676  001126  0100               	movlb	0	; () banked
  7677  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7678  00112A  B4D8               	btfsc	status,2,c
  7679  00112C  0012               	return	
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7683                           
  7684                           ; BSR set to: 0
  7685                           
  7686                           ; BSR set to: 0
  7687  00112E  0E00               	movlw	0
  7688  001130  0100               	movlb	0	; () banked
  7689  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7690  001134                     l7685:
  7691                           
  7692                           ; BSR set to: 0
  7693  001134  0E63               	movlw	99
  7694  001136  0100               	movlb	0	; () banked
  7695  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7696  00113A  D001               	goto	l7689
  7697  00113C  D00C               	goto	l7693
  7698  00113E                     l7689:
  7699                           
  7700                           ; BSR set to: 0
  7701  00113E  0E68               	movlw	104
  7702  001140  0100               	movlb	0	; () banked
  7703  001142  6FC4               	movwf	??_UI& (0+255),b
  7704  001144  0EE4               	movlw	228
  7705  001146                     u7447:
  7706  001146  2EE8               	decfsz	wreg,f,c
  7707  001148  D7FE               	bra	u7447
  7708  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7709  00114C  D7FC               	bra	u7447
  7710  00114E  F000               	nop	
  7711  001150  0100               	movlb	0	; () banked
  7712  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7713  001154  D7EF               	goto	l7685
  7714  001156                     l7693:
  7715                           
  7716                           ; BSR set to: 0
  7717  001156  0100               	movlb	0	; () banked
  7718  001158  51F6               	movf	_logstate& (0+255),w,b
  7719  00115A  0100               	movlb	0	; () banked
  7720  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7721  00115E  B4D8               	btfsc	status,2,c
  7722  001160  0012               	return	
  7723  001162                     l7697:
  7724  001162  0100               	movlb	0	; () banked
  7725  001164  51F6               	movf	_logstate& (0+255),w,b
  7726  001166  0100               	movlb	0	; () banked
  7727  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7728  00116A  B4D8               	btfsc	status,2,c
  7729  00116C  0012               	return	
  7730  00116E  D44A               	goto	l7393
  7731  001170                     __end_of_UI:
  7732                           	opt stack 0
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           intcon	equ	0xFF2
  7740                           intcon2	equ	0xFF1
  7741                           intcon3	equ	0xFF0
  7742                           postinc0	equ	0xFEE
  7743                           wreg	equ	0xFE8
  7744                           postdec1	equ	0xFE5
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function _printRTC *****************
  7754 ;; Defined at:
  7755 ;;		line 63 in file "RTC.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;		None
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  i               2   66[BANK0 ] int 
  7760 ;;  INT_time       14   46[BANK0 ] int [7]
  7761 ;;  month           4   62[BANK0 ] unsigned char [4]
  7762 ;;  RTC_month       2   60[BANK0 ] int 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;Total ram usage:       25 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:   10
  7779 ;; This function calls:
  7780 ;;		_getRTC
  7781 ;;		_lcdInst
  7782 ;;		_printf
  7783 ;;		_strcpy
  7784 ;; This function is called by:
  7785 ;;		_UI
  7786 ;;		_change_state_to_menu_start
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text24
  7791  001F28                     __ptext24:
  7792                           	opt stack 0
  7793  001F28                     _printRTC:
  7794                           	opt stack 18
  7795                           
  7796                           ;RTC.c: 64: getRTC();
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;incstack = 0
  7800  001F28  EC5C  F01D         	call	_getRTC	;wreg free
  7801                           
  7802                           ;RTC.c: 65: char month[] = "MMM";
  7803  001F2C  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7804  001F30  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7805  001F34  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7806  001F38  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7807                           
  7808                           ;RTC.c: 66: int INT_time[7];
  7809                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7810  001F3C  0E00               	movlw	0
  7811  001F3E  0100               	movlb	0	; () banked
  7812  001F40  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7813  001F42  0E00               	movlw	0
  7814  001F44  6FC2               	movwf	printRTC@i& (0+255),b
  7815                           
  7816                           ; BSR set to: 0
  7817  001F46  0100               	movlb	0	; () banked
  7818  001F48  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7819  001F4A  D008               	goto	l5815
  7820  001F4C  0100               	movlb	0	; () banked
  7821  001F4E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7822  001F50  E146               	bnz	l602
  7823  001F52  0E07               	movlw	7
  7824  001F54  0100               	movlb	0	; () banked
  7825  001F56  5DC2               	subwf	printRTC@i& (0+255),w,b
  7826  001F58  B0D8               	btfsc	status,0,c
  7827  001F5A  D041               	goto	l602
  7828  001F5C                     l5815:
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7832  001F5C  0E24               	movlw	low _time
  7833  001F5E  0100               	movlb	0	; () banked
  7834  001F60  25C2               	addwf	printRTC@i& (0+255),w,b
  7835  001F62  6ED9               	movwf	fsr2l,c
  7836  001F64  0E01               	movlw	high _time
  7837  001F66  0100               	movlb	0	; () banked
  7838  001F68  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7839  001F6A  6EDA               	movwf	fsr2h,c
  7840  001F6C  50DF               	movf	indf2,w,c
  7841  001F6E  0100               	movlb	0	; () banked
  7842  001F70  6FAB               	movwf	??_printRTC& (0+255),b
  7843  001F72  0100               	movlb	0	; () banked
  7844  001F74  3BAB               	swapf	??_printRTC& (0+255),f,b
  7845  001F76  0E0F               	movlw	15
  7846  001F78  17AB               	andwf	??_printRTC& (0+255),f,b
  7847  001F7A  0E0F               	movlw	15
  7848  001F7C  0100               	movlb	0	; () banked
  7849  001F7E  17AB               	andwf	??_printRTC& (0+255),f,b
  7850  001F80  0100               	movlb	0	; () banked
  7851  001F82  51AB               	movf	??_printRTC& (0+255),w,b
  7852  001F84  0D0A               	mullw	10
  7853  001F86  0E24               	movlw	low _time
  7854  001F88  0100               	movlb	0	; () banked
  7855  001F8A  25C2               	addwf	printRTC@i& (0+255),w,b
  7856  001F8C  6ED9               	movwf	fsr2l,c
  7857  001F8E  0E01               	movlw	high _time
  7858  001F90  0100               	movlb	0	; () banked
  7859  001F92  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7860  001F94  6EDA               	movwf	fsr2h,c
  7861  001F96  50DF               	movf	indf2,w,c
  7862  001F98  0B0F               	andlw	15
  7863  001F9A  0100               	movlb	0	; () banked
  7864  001F9C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7865  001F9E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7866  001FA0  50F3               	movf	prodl,w,c
  7867  001FA2  0100               	movlb	0	; () banked
  7868  001FA4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7869  001FA6  50F4               	movf	prodh,w,c
  7870  001FA8  0100               	movlb	0	; () banked
  7871  001FAA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7872  001FAC  90D8               	bcf	status,0,c
  7873  001FAE  0100               	movlb	0	; () banked
  7874  001FB0  35C2               	rlcf	printRTC@i& (0+255),w,b
  7875  001FB2  6ED9               	movwf	fsr2l,c
  7876  001FB4  0100               	movlb	0	; () banked
  7877  001FB6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7878  001FB8  6EDA               	movwf	fsr2h,c
  7879  001FBA  0EAE               	movlw	low printRTC@INT_time
  7880  001FBC  26D9               	addwf	fsr2l,f,c
  7881  001FBE  0E00               	movlw	high printRTC@INT_time
  7882  001FC0  22DA               	addwfc	fsr2h,f,c
  7883  001FC2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7884  001FC6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7885                           
  7886                           ; BSR set to: 0
  7887  001FCA  0100               	movlb	0	; () banked
  7888  001FCC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7889  001FCE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7890                           
  7891                           ; BSR set to: 0
  7892  001FD0  0100               	movlb	0	; () banked
  7893  001FD2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7894  001FD4  D7C3               	goto	l5815
  7895  001FD6  0100               	movlb	0	; () banked
  7896  001FD8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7897  001FDA  E101               	bnz	u4480
  7898  001FDC  D7BA               	goto	L6
  7899  001FDE                     u4480:
  7900  001FDE                     l602:
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;RTC.c: 69: }
  7904                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7905  001FDE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7906  001FE2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7907                           
  7908                           ;RTC.c: 71: switch(RTC_month){
  7909  001FE6  D0B4               	goto	l5847
  7910  001FE8                     l5821:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;RTC.c: 73: strcpy(month, "JAN");
  7914  001FE8  0EBE               	movlw	low printRTC@month
  7915  001FEA  0100               	movlb	0	; () banked
  7916  001FEC  6F80               	movwf	strcpy@to& (0+255),b
  7917  001FEE  0E00               	movlw	high printRTC@month
  7918  001FF0  0100               	movlb	0	; () banked
  7919  001FF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7920  001FF4  0EDB               	movlw	low STR_8
  7921  001FF6  0100               	movlb	0	; () banked
  7922  001FF8  6F82               	movwf	strcpy@from& (0+255),b
  7923  001FFA  0EFF               	movlw	high STR_8
  7924  001FFC  0100               	movlb	0	; () banked
  7925  001FFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7926  002000  EC4D  F021         	call	_strcpy	;wreg free
  7927                           
  7928                           ;RTC.c: 74: break;
  7929  002004  D0D4               	goto	l5849
  7930  002006                     l5823:
  7931                           
  7932                           ;RTC.c: 76: strcpy(month, "FEB");
  7933  002006  0EBE               	movlw	low printRTC@month
  7934  002008  0100               	movlb	0	; () banked
  7935  00200A  6F80               	movwf	strcpy@to& (0+255),b
  7936  00200C  0E00               	movlw	high printRTC@month
  7937  00200E  0100               	movlb	0	; () banked
  7938  002010  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7939  002012  0ECB               	movlw	low STR_9
  7940  002014  0100               	movlb	0	; () banked
  7941  002016  6F82               	movwf	strcpy@from& (0+255),b
  7942  002018  0EFF               	movlw	high STR_9
  7943  00201A  0100               	movlb	0	; () banked
  7944  00201C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7945  00201E  EC4D  F021         	call	_strcpy	;wreg free
  7946                           
  7947                           ;RTC.c: 77: break;
  7948  002022  D0C5               	goto	l5849
  7949  002024                     l5825:
  7950                           
  7951                           ;RTC.c: 79: strcpy(month, "MAR");
  7952  002024  0EBE               	movlw	low printRTC@month
  7953  002026  0100               	movlb	0	; () banked
  7954  002028  6F80               	movwf	strcpy@to& (0+255),b
  7955  00202A  0E00               	movlw	high printRTC@month
  7956  00202C  0100               	movlb	0	; () banked
  7957  00202E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7958  002030  0EE7               	movlw	low STR_10
  7959  002032  0100               	movlb	0	; () banked
  7960  002034  6F82               	movwf	strcpy@from& (0+255),b
  7961  002036  0EFF               	movlw	high STR_10
  7962  002038  0100               	movlb	0	; () banked
  7963  00203A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7964  00203C  EC4D  F021         	call	_strcpy	;wreg free
  7965                           
  7966                           ;RTC.c: 80: break;
  7967  002040  D0B6               	goto	l5849
  7968  002042                     l5827:
  7969                           
  7970                           ;RTC.c: 82: strcpy(month, "APR");
  7971  002042  0EBE               	movlw	low printRTC@month
  7972  002044  0100               	movlb	0	; () banked
  7973  002046  6F80               	movwf	strcpy@to& (0+255),b
  7974  002048  0E00               	movlw	high printRTC@month
  7975  00204A  0100               	movlb	0	; () banked
  7976  00204C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7977  00204E  0EEB               	movlw	low STR_11
  7978  002050  0100               	movlb	0	; () banked
  7979  002052  6F82               	movwf	strcpy@from& (0+255),b
  7980  002054  0EFF               	movlw	high STR_11
  7981  002056  0100               	movlb	0	; () banked
  7982  002058  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7983  00205A  EC4D  F021         	call	_strcpy	;wreg free
  7984                           
  7985                           ;RTC.c: 83: break;
  7986  00205E  D0A7               	goto	l5849
  7987  002060                     l5829:
  7988                           
  7989                           ;RTC.c: 85: strcpy(month, "MAY");
  7990  002060  0EBE               	movlw	low printRTC@month
  7991  002062  0100               	movlb	0	; () banked
  7992  002064  6F80               	movwf	strcpy@to& (0+255),b
  7993  002066  0E00               	movlw	high printRTC@month
  7994  002068  0100               	movlb	0	; () banked
  7995  00206A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7996  00206C  0EFB               	movlw	low STR_12
  7997  00206E  0100               	movlb	0	; () banked
  7998  002070  6F82               	movwf	strcpy@from& (0+255),b
  7999  002072  0EFF               	movlw	high STR_12
  8000  002074  0100               	movlb	0	; () banked
  8001  002076  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8002  002078  EC4D  F021         	call	_strcpy	;wreg free
  8003                           
  8004                           ;RTC.c: 86: break;
  8005  00207C  D098               	goto	l5849
  8006  00207E                     l5831:
  8007                           
  8008                           ;RTC.c: 88: strcpy(month, "JUN");
  8009  00207E  0EBE               	movlw	low printRTC@month
  8010  002080  0100               	movlb	0	; () banked
  8011  002082  6F80               	movwf	strcpy@to& (0+255),b
  8012  002084  0E00               	movlw	high printRTC@month
  8013  002086  0100               	movlb	0	; () banked
  8014  002088  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8015  00208A  0EDF               	movlw	low STR_13
  8016  00208C  0100               	movlb	0	; () banked
  8017  00208E  6F82               	movwf	strcpy@from& (0+255),b
  8018  002090  0EFF               	movlw	high STR_13
  8019  002092  0100               	movlb	0	; () banked
  8020  002094  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8021  002096  EC4D  F021         	call	_strcpy	;wreg free
  8022                           
  8023                           ;RTC.c: 89: break;
  8024  00209A  D089               	goto	l5849
  8025  00209C                     l5833:
  8026                           
  8027                           ;RTC.c: 91: strcpy(month, "JUL");
  8028  00209C  0EBE               	movlw	low printRTC@month
  8029  00209E  0100               	movlb	0	; () banked
  8030  0020A0  6F80               	movwf	strcpy@to& (0+255),b
  8031  0020A2  0E00               	movlw	high printRTC@month
  8032  0020A4  0100               	movlb	0	; () banked
  8033  0020A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8034  0020A8  0ED7               	movlw	low STR_14
  8035  0020AA  0100               	movlb	0	; () banked
  8036  0020AC  6F82               	movwf	strcpy@from& (0+255),b
  8037  0020AE  0EFF               	movlw	high STR_14
  8038  0020B0  0100               	movlb	0	; () banked
  8039  0020B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8040  0020B4  EC4D  F021         	call	_strcpy	;wreg free
  8041                           
  8042                           ;RTC.c: 92: break;
  8043  0020B8  D07A               	goto	l5849
  8044  0020BA                     l5835:
  8045                           
  8046                           ;RTC.c: 94: strcpy(month, "AUG");
  8047  0020BA  0EBE               	movlw	low printRTC@month
  8048  0020BC  0100               	movlb	0	; () banked
  8049  0020BE  6F80               	movwf	strcpy@to& (0+255),b
  8050  0020C0  0E00               	movlw	high printRTC@month
  8051  0020C2  0100               	movlb	0	; () banked
  8052  0020C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8053  0020C6  0ED3               	movlw	low STR_15
  8054  0020C8  0100               	movlb	0	; () banked
  8055  0020CA  6F82               	movwf	strcpy@from& (0+255),b
  8056  0020CC  0EFF               	movlw	high STR_15
  8057  0020CE  0100               	movlb	0	; () banked
  8058  0020D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8059  0020D2  EC4D  F021         	call	_strcpy	;wreg free
  8060                           
  8061                           ;RTC.c: 95: break;
  8062  0020D6  D06B               	goto	l5849
  8063  0020D8                     l5837:
  8064                           
  8065                           ;RTC.c: 97: strcpy(month, "SEP");
  8066  0020D8  0EBE               	movlw	low printRTC@month
  8067  0020DA  0100               	movlb	0	; () banked
  8068  0020DC  6F80               	movwf	strcpy@to& (0+255),b
  8069  0020DE  0E00               	movlw	high printRTC@month
  8070  0020E0  0100               	movlb	0	; () banked
  8071  0020E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8072  0020E4  0EE3               	movlw	low STR_16
  8073  0020E6  0100               	movlb	0	; () banked
  8074  0020E8  6F82               	movwf	strcpy@from& (0+255),b
  8075  0020EA  0EFF               	movlw	high STR_16
  8076  0020EC  0100               	movlb	0	; () banked
  8077  0020EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8078  0020F0  EC4D  F021         	call	_strcpy	;wreg free
  8079                           
  8080                           ;RTC.c: 98: break;
  8081  0020F4  D05C               	goto	l5849
  8082  0020F6                     l5839:
  8083                           
  8084                           ;RTC.c: 100: strcpy(month, "OCT");
  8085  0020F6  0EBE               	movlw	low printRTC@month
  8086  0020F8  0100               	movlb	0	; () banked
  8087  0020FA  6F80               	movwf	strcpy@to& (0+255),b
  8088  0020FC  0E00               	movlw	high printRTC@month
  8089  0020FE  0100               	movlb	0	; () banked
  8090  002100  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8091  002102  0EF3               	movlw	low STR_17
  8092  002104  0100               	movlb	0	; () banked
  8093  002106  6F82               	movwf	strcpy@from& (0+255),b
  8094  002108  0EFF               	movlw	high STR_17
  8095  00210A  0100               	movlb	0	; () banked
  8096  00210C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8097  00210E  EC4D  F021         	call	_strcpy	;wreg free
  8098                           
  8099                           ;RTC.c: 101: break;
  8100  002112  D04D               	goto	l5849
  8101  002114                     l5841:
  8102                           
  8103                           ;RTC.c: 103: strcpy(month, "NOV");
  8104  002114  0EBE               	movlw	low printRTC@month
  8105  002116  0100               	movlb	0	; () banked
  8106  002118  6F80               	movwf	strcpy@to& (0+255),b
  8107  00211A  0E00               	movlw	high printRTC@month
  8108  00211C  0100               	movlb	0	; () banked
  8109  00211E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8110  002120  0EF7               	movlw	low STR_18
  8111  002122  0100               	movlb	0	; () banked
  8112  002124  6F82               	movwf	strcpy@from& (0+255),b
  8113  002126  0EFF               	movlw	high STR_18
  8114  002128  0100               	movlb	0	; () banked
  8115  00212A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8116  00212C  EC4D  F021         	call	_strcpy	;wreg free
  8117                           
  8118                           ;RTC.c: 104: break;
  8119  002130  D03E               	goto	l5849
  8120  002132                     l5843:
  8121                           
  8122                           ;RTC.c: 106: strcpy(month, "DEC");
  8123  002132  0EBE               	movlw	low printRTC@month
  8124  002134  0100               	movlb	0	; () banked
  8125  002136  6F80               	movwf	strcpy@to& (0+255),b
  8126  002138  0E00               	movlw	high printRTC@month
  8127  00213A  0100               	movlb	0	; () banked
  8128  00213C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8129  00213E  0ECF               	movlw	low STR_19
  8130  002140  0100               	movlb	0	; () banked
  8131  002142  6F82               	movwf	strcpy@from& (0+255),b
  8132  002144  0EFF               	movlw	high STR_19
  8133  002146  0100               	movlb	0	; () banked
  8134  002148  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8135  00214A  EC4D  F021         	call	_strcpy	;wreg free
  8136                           
  8137                           ;RTC.c: 108: }
  8138                           
  8139                           ;RTC.c: 107: break;
  8140  00214E  D02F               	goto	l5849
  8141  002150                     l5847:
  8142  002150  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8143  002154  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8144                           
  8145                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8146                           ; Switch size 1, requested type "space"
  8147                           ; Number of cases is 1, Range of values is 0 to 0
  8148                           ; switch strategies available:
  8149                           ; Name         Instructions Cycles
  8150                           ; simple_byte            4     3 (average)
  8151                           ;	Chosen strategy is simple_byte
  8152  002158  0100               	movlb	0	; () banked
  8153  00215A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8154  00215C  0A00               	xorlw	0	; case 0
  8155  00215E  A4D8               	btfss	status,2,c
  8156  002160  D026               	goto	l5849
  8157                           
  8158                           ; BSR set to: 0
  8159                           ; Switch size 1, requested type "space"
  8160                           ; Number of cases is 12, Range of values is 1 to 12
  8161                           ; switch strategies available:
  8162                           ; Name         Instructions Cycles
  8163                           ; simple_byte           37    19 (average)
  8164                           ;	Chosen strategy is simple_byte
  8165  002162  0100               	movlb	0	; () banked
  8166  002164  51AB               	movf	??_printRTC& (0+255),w,b
  8167  002166  0A01               	xorlw	1	; case 1
  8168  002168  B4D8               	btfsc	status,2,c
  8169  00216A  D73E               	goto	l5821
  8170  00216C  0A03               	xorlw	3	; case 2
  8171  00216E  B4D8               	btfsc	status,2,c
  8172  002170  D74A               	goto	l5823
  8173  002172  0A01               	xorlw	1	; case 3
  8174  002174  B4D8               	btfsc	status,2,c
  8175  002176  D756               	goto	l5825
  8176  002178  0A07               	xorlw	7	; case 4
  8177  00217A  B4D8               	btfsc	status,2,c
  8178  00217C  D762               	goto	l5827
  8179  00217E  0A01               	xorlw	1	; case 5
  8180  002180  B4D8               	btfsc	status,2,c
  8181  002182  D76E               	goto	l5829
  8182  002184  0A03               	xorlw	3	; case 6
  8183  002186  B4D8               	btfsc	status,2,c
  8184  002188  D77A               	goto	l5831
  8185  00218A  0A01               	xorlw	1	; case 7
  8186  00218C  B4D8               	btfsc	status,2,c
  8187  00218E  D786               	goto	l5833
  8188  002190  0A0F               	xorlw	15	; case 8
  8189  002192  B4D8               	btfsc	status,2,c
  8190  002194  D792               	goto	l5835
  8191  002196  0A01               	xorlw	1	; case 9
  8192  002198  B4D8               	btfsc	status,2,c
  8193  00219A  D79E               	goto	l5837
  8194  00219C  0A03               	xorlw	3	; case 10
  8195  00219E  B4D8               	btfsc	status,2,c
  8196  0021A0  D7AA               	goto	l5839
  8197  0021A2  0A01               	xorlw	1	; case 11
  8198  0021A4  B4D8               	btfsc	status,2,c
  8199  0021A6  D7B6               	goto	l5841
  8200  0021A8  0A07               	xorlw	7	; case 12
  8201  0021AA  B4D8               	btfsc	status,2,c
  8202  0021AC  D7C2               	goto	l5843
  8203  0021AE                     l5849:
  8204                           
  8205                           ;RTC.c: 109: lcdInst(0b10000000);;
  8206  0021AE  0E80               	movlw	128
  8207  0021B0  ECE1  F023         	call	_lcdInst
  8208                           
  8209                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8210  0021B4  0E3C               	movlw	low STR_21
  8211  0021B6  0100               	movlb	0	; () banked
  8212  0021B8  6F8E               	movwf	printf@f& (0+255),b
  8213  0021BA  0EFB               	movlw	high STR_21
  8214  0021BC  0100               	movlb	0	; () banked
  8215  0021BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8216  0021C0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8217  0021C4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8218  0021C8  0EBE               	movlw	low printRTC@month
  8219  0021CA  0100               	movlb	0	; () banked
  8220  0021CC  6F92               	movwf	(?_printf+4)& (0+255),b
  8221  0021CE  0E00               	movlw	high printRTC@month
  8222  0021D0  0100               	movlb	0	; () banked
  8223  0021D2  6F93               	movwf	(?_printf+5)& (0+255),b
  8224  0021D4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8225  0021D8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8226  0021DC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8227  0021E0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8228  0021E4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8229  0021E8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8230  0021EC  ECB8  F008         	call	_printf	;wreg free
  8231  0021F0  0012               	return		;funcret
  8232  0021F2                     __end_of_printRTC:
  8233                           	opt stack 0
  8234                           tblptru	equ	0xFF8
  8235                           tblptrh	equ	0xFF7
  8236                           tblptrl	equ	0xFF6
  8237                           tablat	equ	0xFF5
  8238                           prodh	equ	0xFF4
  8239                           prodl	equ	0xFF3
  8240                           intcon	equ	0xFF2
  8241                           intcon2	equ	0xFF1
  8242                           intcon3	equ	0xFF0
  8243                           postinc0	equ	0xFEE
  8244                           wreg	equ	0xFE8
  8245                           postdec1	equ	0xFE5
  8246                           fsr1l	equ	0xFE1
  8247                           indf2	equ	0xFDF
  8248                           postinc2	equ	0xFDE
  8249                           postdec2	equ	0xFDD
  8250                           fsr2h	equ	0xFDA
  8251                           fsr2l	equ	0xFD9
  8252                           status	equ	0xFD8
  8253                           
  8254 ;; *************** function _strcpy *****************
  8255 ;; Defined at:
  8256 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8259 ;;		 -> printRTC@month(4), UI@month(4), 
  8260 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8261 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8262 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8263 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8264 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8265 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8266 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8267 ;;		 -> STR_8(4), 
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8270 ;;		 -> printRTC@month(4), UI@month(4), 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  2    0[BANK0 ] PTR unsigned char 
  8273 ;; Registers used:
  8274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;Total ram usage:        6 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    7
  8287 ;; This function calls:
  8288 ;;		Nothing
  8289 ;; This function is called by:
  8290 ;;		_UI
  8291 ;;		_printRTC
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           	psect	text25
  8296  00429A                     __ptext25:
  8297                           	opt stack 0
  8298  00429A                     _strcpy:
  8299                           	opt stack 20
  8300                           
  8301                           ;incstack = 0
  8302  00429A  C080  F084         	movff	strcpy@to,strcpy@cp
  8303  00429E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8304  0042A2  D006               	goto	l5559
  8305  0042A4                     l5557:
  8306  0042A4  0100               	movlb	0	; () banked
  8307  0042A6  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8308  0042A8  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8309  0042AA  0100               	movlb	0	; () banked
  8310  0042AC  4B82               	infsnz	strcpy@from& (0+255),f,b
  8311  0042AE  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8312  0042B0                     l5559:
  8313  0042B0  C082  FFF6         	movff	strcpy@from,tblptrl
  8314  0042B4  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8315  0042B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8316  0042B8  6AF8               	clrf	tblptru,c
  8317  0042BA                     	endif
  8318  0042BA                     	if	0	;tblptru may be non-zero
  8319  0042BA                     	endif
  8320  0042BA  C084  FFD9         	movff	strcpy@cp,fsr2l
  8321  0042BE  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8322  0042C2  0008               	tblrd		*
  8323  0042C4  CFF5 FFDF          	movff	tablat,indf2
  8324  0042C8  50DF               	movf	indf2,w,c
  8325  0042CA  B4D8               	btfsc	status,2,c
  8326  0042CC  0012               	return	
  8327  0042CE  D7EA               	goto	l5557
  8328  0042D0                     __end_of_strcpy:
  8329                           	opt stack 0
  8330                           tblptru	equ	0xFF8
  8331                           tblptrh	equ	0xFF7
  8332                           tblptrl	equ	0xFF6
  8333                           tablat	equ	0xFF5
  8334                           prodh	equ	0xFF4
  8335                           prodl	equ	0xFF3
  8336                           intcon	equ	0xFF2
  8337                           intcon2	equ	0xFF1
  8338                           intcon3	equ	0xFF0
  8339                           postinc0	equ	0xFEE
  8340                           wreg	equ	0xFE8
  8341                           postdec1	equ	0xFE5
  8342                           fsr1l	equ	0xFE1
  8343                           indf2	equ	0xFDF
  8344                           postinc2	equ	0xFDE
  8345                           postdec2	equ	0xFDD
  8346                           fsr2h	equ	0xFDA
  8347                           fsr2l	equ	0xFD9
  8348                           status	equ	0xFD8
  8349                           
  8350 ;; *************** function _getRTC *****************
  8351 ;; Defined at:
  8352 ;;		line 44 in file "RTC.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;		None
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  i               2    3[BANK0 ] int 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      void 
  8359 ;; Registers used:
  8360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;Total ram usage:        2 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    9
  8373 ;; This function calls:
  8374 ;;		_I2C_Master_Read
  8375 ;;		_I2C_Master_Start
  8376 ;;		_I2C_Master_Stop
  8377 ;;		_I2C_Master_Write
  8378 ;; This function is called by:
  8379 ;;		_printRTC
  8380 ;;		_initSortTimer
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           	psect	text26
  8385  003AB8                     __ptext26:
  8386                           	opt stack 0
  8387  003AB8                     _getRTC:
  8388                           	opt stack 18
  8389                           
  8390                           ;RTC.c: 48: I2C_Master_Start();
  8391                           
  8392                           ;incstack = 0
  8393  003AB8  EC07  F024         	call	_I2C_Master_Start	;wreg free
  8394                           
  8395                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8396  003ABC  0E00               	movlw	0
  8397  003ABE  0100               	movlb	0	; () banked
  8398  003AC0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8399  003AC2  0ED0               	movlw	208
  8400  003AC4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8401  003AC6  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  8402                           
  8403                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8404  003ACA  0E00               	movlw	0
  8405  003ACC  0100               	movlb	0	; () banked
  8406  003ACE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8407  003AD0  0E00               	movlw	0
  8408  003AD2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8409  003AD4  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  8410                           
  8411                           ;RTC.c: 51: I2C_Master_Stop();
  8412  003AD8  EC03  F024         	call	_I2C_Master_Stop	;wreg free
  8413                           
  8414                           ;RTC.c: 54: I2C_Master_Start();
  8415  003ADC  EC07  F024         	call	_I2C_Master_Start	;wreg free
  8416                           
  8417                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8418  003AE0  0E00               	movlw	0
  8419  003AE2  0100               	movlb	0	; () banked
  8420  003AE4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8421  003AE6  0ED1               	movlw	209
  8422  003AE8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8423  003AEA  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  8424                           
  8425                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8426  003AEE  0E00               	movlw	0
  8427  003AF0  0100               	movlb	0	; () banked
  8428  003AF2  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8429  003AF4  0E00               	movlw	0
  8430  003AF6  6F83               	movwf	getRTC@i& (0+255),b
  8431  003AF8                     l5565:
  8432                           
  8433                           ; BSR set to: 0
  8434  003AF8  0100               	movlb	0	; () banked
  8435  003AFA  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8436  003AFC  D008               	goto	l5569
  8437  003AFE  0100               	movlb	0	; () banked
  8438  003B00  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8439  003B02  E115               	bnz	l5575
  8440  003B04  0E06               	movlw	6
  8441  003B06  0100               	movlb	0	; () banked
  8442  003B08  5D83               	subwf	getRTC@i& (0+255),w,b
  8443  003B0A  B0D8               	btfsc	status,0,c
  8444  003B0C  D010               	goto	l5575
  8445  003B0E                     l5569:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8449  003B0E  0E24               	movlw	low _time
  8450  003B10  0100               	movlb	0	; () banked
  8451  003B12  2583               	addwf	getRTC@i& (0+255),w,b
  8452  003B14  6ED9               	movwf	fsr2l,c
  8453  003B16  0E01               	movlw	high _time
  8454  003B18  0100               	movlb	0	; () banked
  8455  003B1A  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8456  003B1C  6EDA               	movwf	fsr2h,c
  8457  003B1E  0E01               	movlw	1
  8458  003B20  ECA4  F022         	call	_I2C_Master_Read
  8459  003B24  6EDF               	movwf	indf2,c
  8460  003B26  0100               	movlb	0	; () banked
  8461  003B28  4B83               	infsnz	getRTC@i& (0+255),f,b
  8462  003B2A  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8463  003B2C  D7E5               	goto	l5565
  8464  003B2E                     l5575:
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;RTC.c: 58: }
  8468                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8469  003B2E  0E00               	movlw	0
  8470  003B30  ECA4  F022         	call	_I2C_Master_Read
  8471  003B34  0101               	movlb	1	; () banked
  8472  003B36  6F2A               	movwf	(_time+6)& (0+255),b
  8473                           
  8474                           ;RTC.c: 60: I2C_Master_Stop();
  8475  003B38  EC03  F024         	call	_I2C_Master_Stop	;wreg free
  8476  003B3C  0012               	return		;funcret
  8477  003B3E                     __end_of_getRTC:
  8478                           	opt stack 0
  8479                           tblptru	equ	0xFF8
  8480                           tblptrh	equ	0xFF7
  8481                           tblptrl	equ	0xFF6
  8482                           tablat	equ	0xFF5
  8483                           prodh	equ	0xFF4
  8484                           prodl	equ	0xFF3
  8485                           intcon	equ	0xFF2
  8486                           intcon2	equ	0xFF1
  8487                           intcon3	equ	0xFF0
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           postdec1	equ	0xFE5
  8491                           fsr1l	equ	0xFE1
  8492                           indf2	equ	0xFDF
  8493                           postinc2	equ	0xFDE
  8494                           postdec2	equ	0xFDD
  8495                           fsr2h	equ	0xFDA
  8496                           fsr2l	equ	0xFD9
  8497                           status	equ	0xFD8
  8498                           
  8499 ;; *************** function _I2C_Master_Write *****************
  8500 ;; Defined at:
  8501 ;;		line 49 in file "I2C.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;  d               2    1[BANK0 ] unsigned int 
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;		None
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  1    wreg      void 
  8508 ;; Registers used:
  8509 ;;		wreg, status,2, status,0, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8515 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;Total ram usage:        2 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    8
  8522 ;; This function calls:
  8523 ;;		_I2C_Master_Wait
  8524 ;; This function is called by:
  8525 ;;		_loadRTC
  8526 ;;		_getRTC
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text27
  8531  0047EA                     __ptext27:
  8532                           	opt stack 0
  8533  0047EA                     _I2C_Master_Write:
  8534                           	opt stack 18
  8535                           
  8536                           ;I2C.c: 51: I2C_Master_Wait();
  8537                           
  8538                           ;incstack = 0
  8539  0047EA  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8540                           
  8541                           ;I2C.c: 52: SSPBUF = d;
  8542  0047EE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8543  0047F2  0012               	return		;funcret
  8544  0047F4                     __end_of_I2C_Master_Write:
  8545                           	opt stack 0
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           intcon2	equ	0xFF1
  8554                           intcon3	equ	0xFF0
  8555                           postinc0	equ	0xFEE
  8556                           wreg	equ	0xFE8
  8557                           postdec1	equ	0xFE5
  8558                           fsr1l	equ	0xFE1
  8559                           indf2	equ	0xFDF
  8560                           postinc2	equ	0xFDE
  8561                           postdec2	equ	0xFDD
  8562                           fsr2h	equ	0xFDA
  8563                           fsr2l	equ	0xFD9
  8564                           status	equ	0xFD8
  8565                           
  8566 ;; *************** function _I2C_Master_Stop *****************
  8567 ;; Defined at:
  8568 ;;		line 43 in file "I2C.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;		None
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;		None
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  1    wreg      void 
  8575 ;; Registers used:
  8576 ;;		wreg, status,2, status,0, cstack
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;Total ram usage:        0 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; Hardware stack levels required when called:    8
  8589 ;; This function calls:
  8590 ;;		_I2C_Master_Wait
  8591 ;; This function is called by:
  8592 ;;		_loadRTC
  8593 ;;		_getRTC
  8594 ;; This function uses a non-reentrant model
  8595 ;;
  8596                           
  8597                           	psect	text28
  8598  004806                     __ptext28:
  8599                           	opt stack 0
  8600  004806                     _I2C_Master_Stop:
  8601                           	opt stack 18
  8602                           
  8603                           ;I2C.c: 45: I2C_Master_Wait();
  8604                           
  8605                           ;incstack = 0
  8606  004806  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8607                           
  8608                           ;I2C.c: 46: PEN = 1;
  8609  00480A  84C5               	bsf	4037,2,c	;volatile
  8610  00480C  0012               	return		;funcret
  8611  00480E                     __end_of_I2C_Master_Stop:
  8612                           	opt stack 0
  8613                           tblptru	equ	0xFF8
  8614                           tblptrh	equ	0xFF7
  8615                           tblptrl	equ	0xFF6
  8616                           tablat	equ	0xFF5
  8617                           prodh	equ	0xFF4
  8618                           prodl	equ	0xFF3
  8619                           intcon	equ	0xFF2
  8620                           intcon2	equ	0xFF1
  8621                           intcon3	equ	0xFF0
  8622                           postinc0	equ	0xFEE
  8623                           wreg	equ	0xFE8
  8624                           postdec1	equ	0xFE5
  8625                           fsr1l	equ	0xFE1
  8626                           indf2	equ	0xFDF
  8627                           postinc2	equ	0xFDE
  8628                           postdec2	equ	0xFDD
  8629                           fsr2h	equ	0xFDA
  8630                           fsr2l	equ	0xFD9
  8631                           status	equ	0xFD8
  8632                           
  8633 ;; *************** function _I2C_Master_Start *****************
  8634 ;; Defined at:
  8635 ;;		line 31 in file "I2C.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		wreg, status,2, status,0, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;Total ram usage:        0 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    8
  8656 ;; This function calls:
  8657 ;;		_I2C_Master_Wait
  8658 ;; This function is called by:
  8659 ;;		_loadRTC
  8660 ;;		_getRTC
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           	psect	text29
  8665  00480E                     __ptext29:
  8666                           	opt stack 0
  8667  00480E                     _I2C_Master_Start:
  8668                           	opt stack 18
  8669                           
  8670                           ;I2C.c: 33: I2C_Master_Wait();
  8671                           
  8672                           ;incstack = 0
  8673  00480E  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8674                           
  8675                           ;I2C.c: 34: SEN = 1;
  8676  004812  80C5               	bsf	4037,0,c	;volatile
  8677  004814  0012               	return		;funcret
  8678  004816                     __end_of_I2C_Master_Start:
  8679                           	opt stack 0
  8680                           tblptru	equ	0xFF8
  8681                           tblptrh	equ	0xFF7
  8682                           tblptrl	equ	0xFF6
  8683                           tablat	equ	0xFF5
  8684                           prodh	equ	0xFF4
  8685                           prodl	equ	0xFF3
  8686                           intcon	equ	0xFF2
  8687                           intcon2	equ	0xFF1
  8688                           intcon3	equ	0xFF0
  8689                           postinc0	equ	0xFEE
  8690                           wreg	equ	0xFE8
  8691                           postdec1	equ	0xFE5
  8692                           fsr1l	equ	0xFE1
  8693                           indf2	equ	0xFDF
  8694                           postinc2	equ	0xFDE
  8695                           postdec2	equ	0xFDD
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function _I2C_Master_Read *****************
  8701 ;; Defined at:
  8702 ;;		line 55 in file "I2C.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  a               1    wreg     unsigned char 
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;  a               1    1[BANK0 ] unsigned char 
  8707 ;;  temp            1    2[BANK0 ] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  1    wreg      unsigned char 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0, cstack
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;Total ram usage:        2 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    8
  8724 ;; This function calls:
  8725 ;;		_I2C_Master_Wait
  8726 ;; This function is called by:
  8727 ;;		_getRTC
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           	psect	text30
  8732  004548                     __ptext30:
  8733                           	opt stack 0
  8734  004548                     _I2C_Master_Read:
  8735                           	opt stack 18
  8736                           
  8737                           ;incstack = 0
  8738                           ;I2C_Master_Read@a stored from wreg
  8739  004548  0100               	movlb	0	; () banked
  8740  00454A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8741                           
  8742                           ;I2C.c: 57: unsigned char temp;
  8743                           ;I2C.c: 58: I2C_Master_Wait();
  8744  00454C  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8745                           
  8746                           ;I2C.c: 59: RCEN = 1;
  8747  004550  86C5               	bsf	4037,3,c	;volatile
  8748                           
  8749                           ;I2C.c: 60: I2C_Master_Wait();
  8750  004552  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8751                           
  8752                           ;I2C.c: 61: temp = SSPBUF;
  8753  004556  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8754                           
  8755                           ;I2C.c: 62: I2C_Master_Wait();
  8756  00455A  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8757                           
  8758                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8759  00455E  0100               	movlb	0	; () banked
  8760  004560  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8761  004562  0100               	movlb	0	; () banked
  8762  004564  A4D8               	btfss	status,2,c
  8763  004566  D002               	goto	u3570
  8764  004568  8AC5               	bsf	4037,5,c	;volatile
  8765  00456A  D001               	goto	l5253
  8766  00456C                     u3570:
  8767  00456C  9AC5               	bcf	4037,5,c	;volatile
  8768  00456E                     l5253:
  8769                           
  8770                           ;I2C.c: 64: ACKEN = 1;
  8771  00456E  88C5               	bsf	4037,4,c	;volatile
  8772                           
  8773                           ;I2C.c: 65: return temp;
  8774  004570  0100               	movlb	0	; () banked
  8775  004572  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8776  004574  0012               	return	
  8777  004576                     __end_of_I2C_Master_Read:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           intcon2	equ	0xFF1
  8787                           intcon3	equ	0xFF0
  8788                           postinc0	equ	0xFEE
  8789                           wreg	equ	0xFE8
  8790                           postdec1	equ	0xFE5
  8791                           fsr1l	equ	0xFE1
  8792                           indf2	equ	0xFDF
  8793                           postinc2	equ	0xFDE
  8794                           postdec2	equ	0xFDD
  8795                           fsr2h	equ	0xFDA
  8796                           fsr2l	equ	0xFD9
  8797                           status	equ	0xFD8
  8798                           
  8799 ;; *************** function _I2C_Master_Wait *****************
  8800 ;; Defined at:
  8801 ;;		line 26 in file "I2C.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;		None
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;		None
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  1    wreg      void 
  8808 ;; Registers used:
  8809 ;;		wreg, status,2, status,0
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;Total ram usage:        1 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    7
  8822 ;; This function calls:
  8823 ;;		Nothing
  8824 ;; This function is called by:
  8825 ;;		_I2C_Master_Start
  8826 ;;		_I2C_Master_Stop
  8827 ;;		_I2C_Master_Write
  8828 ;;		_I2C_Master_Read
  8829 ;;		_I2C_Master_RepeatedStart
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text31
  8834  00478C                     __ptext31:
  8835                           	opt stack 0
  8836  00478C                     _I2C_Master_Wait:
  8837                           	opt stack 18
  8838  00478C                     l66:
  8839  00478C  B4C7               	btfsc	4039,2,c	;volatile
  8840  00478E  D7FE               	goto	l66
  8841  004790  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8842  004794  0E1F               	movlw	31
  8843  004796  0100               	movlb	0	; () banked
  8844  004798  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8845  00479A  B4D8               	btfsc	status,2,c
  8846  00479C  0012               	return	
  8847  00479E  D7F6               	goto	l66
  8848  0047A0                     __end_of_I2C_Master_Wait:
  8849                           	opt stack 0
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodh	equ	0xFF4
  8855                           prodl	equ	0xFF3
  8856                           intcon	equ	0xFF2
  8857                           intcon2	equ	0xFF1
  8858                           intcon3	equ	0xFF0
  8859                           postinc0	equ	0xFEE
  8860                           wreg	equ	0xFE8
  8861                           postdec1	equ	0xFE5
  8862                           fsr1l	equ	0xFE1
  8863                           indf2	equ	0xFDF
  8864                           postinc2	equ	0xFDE
  8865                           postdec2	equ	0xFDD
  8866                           fsr2h	equ	0xFDA
  8867                           fsr2l	equ	0xFD9
  8868                           status	equ	0xFD8
  8869                           
  8870 ;; *************** function _change_state_to_menu_22 *****************
  8871 ;; Defined at:
  8872 ;;		line 498 in file "UI.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;		None
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;		None
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  1    wreg      void 
  8879 ;; Registers used:
  8880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;Total ram usage:        0 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:   10
  8893 ;; This function calls:
  8894 ;;		_lcdInst
  8895 ;;		_printf
  8896 ;; This function is called by:
  8897 ;;		_UI
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           	psect	text32
  8902  00422A                     __ptext32:
  8903                           	opt stack 0
  8904  00422A                     _change_state_to_menu_22:
  8905                           	opt stack 19
  8906                           
  8907                           ;UI.c: 499: cur_state = 22;
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;incstack = 0
  8911  00422A  0E00               	movlw	0
  8912  00422C  0100               	movlb	0	; () banked
  8913  00422E  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8914  004230  0E16               	movlw	22
  8915  004232  6FE0               	movwf	_cur_state& (0+255),b
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;UI.c: 501: lcdInst(0b10000000);;
  8919  004234  0E80               	movlw	128
  8920  004236  ECE1  F023         	call	_lcdInst
  8921                           
  8922                           ;UI.c: 502: printf("2. SORT        <");
  8923  00423A  0EE6               	movlw	low STR_34
  8924  00423C  0100               	movlb	0	; () banked
  8925  00423E  6F8E               	movwf	printf@f& (0+255),b
  8926  004240  0EFD               	movlw	high STR_34
  8927  004242  0100               	movlb	0	; () banked
  8928  004244  6F8F               	movwf	(printf@f+1)& (0+255),b
  8929  004246  ECB8  F008         	call	_printf	;wreg free
  8930                           
  8931                           ;UI.c: 503: lcdInst(0b11000000);;
  8932  00424A  0EC0               	movlw	192
  8933  00424C  ECE1  F023         	call	_lcdInst
  8934                           
  8935                           ;UI.c: 504: printf("3. LOGS         ");
  8936  004250  0E2B               	movlw	low STR_36
  8937  004252  0100               	movlb	0	; () banked
  8938  004254  6F8E               	movwf	printf@f& (0+255),b
  8939  004256  0EFD               	movlw	high STR_36
  8940  004258  0100               	movlb	0	; () banked
  8941  00425A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8942  00425C  ECB8  F008         	call	_printf	;wreg free
  8943  004260  0012               	return		;funcret
  8944  004262                     __end_of_change_state_to_menu_22:
  8945                           	opt stack 0
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           intcon	equ	0xFF2
  8953                           intcon2	equ	0xFF1
  8954                           intcon3	equ	0xFF0
  8955                           postinc0	equ	0xFEE
  8956                           wreg	equ	0xFE8
  8957                           postdec1	equ	0xFE5
  8958                           fsr1l	equ	0xFE1
  8959                           indf2	equ	0xFDF
  8960                           postinc2	equ	0xFDE
  8961                           postdec2	equ	0xFDD
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _change_state_to_menu_12 *****************
  8967 ;; Defined at:
  8968 ;;		line 490 in file "UI.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;		None
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;		None
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      void 
  8975 ;; Registers used:
  8976 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;Total ram usage:        0 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:   10
  8989 ;; This function calls:
  8990 ;;		_lcdInst
  8991 ;;		_printf
  8992 ;; This function is called by:
  8993 ;;		_UI
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           	psect	text33
  8998  004262                     __ptext33:
  8999                           	opt stack 0
  9000  004262                     _change_state_to_menu_12:
  9001                           	opt stack 19
  9002                           
  9003                           ;UI.c: 491: cur_state = 12;
  9004                           
  9005                           ;incstack = 0
  9006  004262  0E00               	movlw	0
  9007  004264  0100               	movlb	0	; () banked
  9008  004266  6FE1               	movwf	(_cur_state+1)& (0+255),b
  9009  004268  0E0C               	movlw	12
  9010  00426A  6FE0               	movwf	_cur_state& (0+255),b
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;UI.c: 493: lcdInst(0b10000000);;
  9014  00426C  0E80               	movlw	128
  9015  00426E  ECE1  F023         	call	_lcdInst
  9016                           
  9017                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9018  004272  0E4D               	movlw	low STR_33
  9019  004274  0100               	movlb	0	; () banked
  9020  004276  6F8E               	movwf	printf@f& (0+255),b
  9021  004278  0EFD               	movlw	high STR_33
  9022  00427A  0100               	movlb	0	; () banked
  9023  00427C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9024  00427E  ECB8  F008         	call	_printf	;wreg free
  9025                           
  9026                           ;UI.c: 495: lcdInst(0b11000000);;
  9027  004282  0EC0               	movlw	192
  9028  004284  ECE1  F023         	call	_lcdInst
  9029                           
  9030                           ;UI.c: 496: printf("2. SORT        <");
  9031  004288  0EE6               	movlw	low STR_34
  9032  00428A  0100               	movlb	0	; () banked
  9033  00428C  6F8E               	movwf	printf@f& (0+255),b
  9034  00428E  0EFD               	movlw	high STR_34
  9035  004290  0100               	movlb	0	; () banked
  9036  004292  6F8F               	movwf	(printf@f+1)& (0+255),b
  9037  004294  ECB8  F008         	call	_printf	;wreg free
  9038  004298  0012               	return		;funcret
  9039  00429A                     __end_of_change_state_to_menu_12:
  9040                           	opt stack 0
  9041                           tblptru	equ	0xFF8
  9042                           tblptrh	equ	0xFF7
  9043                           tblptrl	equ	0xFF6
  9044                           tablat	equ	0xFF5
  9045                           prodh	equ	0xFF4
  9046                           prodl	equ	0xFF3
  9047                           intcon	equ	0xFF2
  9048                           intcon2	equ	0xFF1
  9049                           intcon3	equ	0xFF0
  9050                           postinc0	equ	0xFEE
  9051                           wreg	equ	0xFE8
  9052                           postdec1	equ	0xFE5
  9053                           fsr1l	equ	0xFE1
  9054                           indf2	equ	0xFDF
  9055                           postinc2	equ	0xFDE
  9056                           postdec2	equ	0xFDD
  9057                           fsr2h	equ	0xFDA
  9058                           fsr2l	equ	0xFD9
  9059                           status	equ	0xFD8
  9060                           
  9061 ;; *************** function ___awmod *****************
  9062 ;; Defined at:
  9063 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  dividend        2    0[BANK0 ] int 
  9066 ;;  divisor         2    2[BANK0 ] int 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  sign            1    5[BANK0 ] unsigned char 
  9069 ;;  counter         1    4[BANK0 ] unsigned char 
  9070 ;; Return value:  Size  Location     Type
  9071 ;;                  2    0[BANK0 ] int 
  9072 ;; Registers used:
  9073 ;;		wreg, status,2, status,0
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9079 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9080 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9082 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9083 ;;Total ram usage:        6 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:    7
  9086 ;; This function calls:
  9087 ;;		Nothing
  9088 ;; This function is called by:
  9089 ;;		_UI
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text34
  9094  00386C                     __ptext34:
  9095                           	opt stack 0
  9096  00386C                     ___awmod:
  9097                           	opt stack 22
  9098                           
  9099                           ;incstack = 0
  9100  00386C  0E00               	movlw	0
  9101  00386E  0100               	movlb	0	; () banked
  9102  003870  6F85               	movwf	___awmod@sign& (0+255),b
  9103                           
  9104                           ; BSR set to: 0
  9105  003872  0100               	movlb	0	; () banked
  9106  003874  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9107  003876  D008               	goto	l7303
  9108                           
  9109                           ; BSR set to: 0
  9110  003878  0100               	movlb	0	; () banked
  9111  00387A  6D80               	negf	___awmod@dividend& (0+255),b
  9112  00387C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9113  00387E  B0D8               	btfsc	status,0,c
  9114  003880  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9115                           
  9116                           ; BSR set to: 0
  9117  003882  0E01               	movlw	1
  9118  003884  0100               	movlb	0	; () banked
  9119  003886  6F85               	movwf	___awmod@sign& (0+255),b
  9120  003888                     l7303:
  9121                           
  9122                           ; BSR set to: 0
  9123  003888  0100               	movlb	0	; () banked
  9124  00388A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9125  00388C  D005               	goto	l7307
  9126                           
  9127                           ; BSR set to: 0
  9128  00388E  0100               	movlb	0	; () banked
  9129  003890  6D82               	negf	___awmod@divisor& (0+255),b
  9130  003892  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9131  003894  B0D8               	btfsc	status,0,c
  9132  003896  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9133  003898                     l7307:
  9134                           
  9135                           ; BSR set to: 0
  9136  003898  0100               	movlb	0	; () banked
  9137  00389A  5182               	movf	___awmod@divisor& (0+255),w,b
  9138  00389C  0100               	movlb	0	; () banked
  9139  00389E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9140  0038A0  B4D8               	btfsc	status,2,c
  9141  0038A2  D026               	goto	l7323
  9142                           
  9143                           ; BSR set to: 0
  9144  0038A4  0E01               	movlw	1
  9145  0038A6  0100               	movlb	0	; () banked
  9146  0038A8  6F84               	movwf	___awmod@counter& (0+255),b
  9147  0038AA  D006               	goto	l7313
  9148  0038AC                     l7311:
  9149                           
  9150                           ; BSR set to: 0
  9151  0038AC  0100               	movlb	0	; () banked
  9152  0038AE  90D8               	bcf	status,0,c
  9153  0038B0  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9154  0038B2  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9155  0038B4  0100               	movlb	0	; () banked
  9156  0038B6  2B84               	incf	___awmod@counter& (0+255),f,b
  9157  0038B8                     l7313:
  9158                           
  9159                           ; BSR set to: 0
  9160  0038B8  0100               	movlb	0	; () banked
  9161  0038BA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9162  0038BC  D7F7               	goto	l7311
  9163  0038BE                     l7315:
  9164                           
  9165                           ; BSR set to: 0
  9166  0038BE  0100               	movlb	0	; () banked
  9167  0038C0  5182               	movf	___awmod@divisor& (0+255),w,b
  9168  0038C2  0100               	movlb	0	; () banked
  9169  0038C4  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9170  0038C6  0100               	movlb	0	; () banked
  9171  0038C8  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9172  0038CA  0100               	movlb	0	; () banked
  9173  0038CC  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9174  0038CE  A0D8               	btfss	status,0,c
  9175  0038D0  D008               	goto	l7319
  9176                           
  9177                           ; BSR set to: 0
  9178  0038D2  0100               	movlb	0	; () banked
  9179  0038D4  5182               	movf	___awmod@divisor& (0+255),w,b
  9180  0038D6  0100               	movlb	0	; () banked
  9181  0038D8  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9182  0038DA  0100               	movlb	0	; () banked
  9183  0038DC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9184  0038DE  0100               	movlb	0	; () banked
  9185  0038E0  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9186  0038E2                     l7319:
  9187                           
  9188                           ; BSR set to: 0
  9189  0038E2  0100               	movlb	0	; () banked
  9190  0038E4  90D8               	bcf	status,0,c
  9191  0038E6  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9192  0038E8  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9193                           
  9194                           ; BSR set to: 0
  9195  0038EA  0100               	movlb	0	; () banked
  9196  0038EC  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9197  0038EE  D7E7               	goto	l7315
  9198  0038F0                     l7323:
  9199                           
  9200                           ; BSR set to: 0
  9201  0038F0  0100               	movlb	0	; () banked
  9202  0038F2  5185               	movf	___awmod@sign& (0+255),w,b
  9203  0038F4  0100               	movlb	0	; () banked
  9204  0038F6  B4D8               	btfsc	status,2,c
  9205  0038F8  D005               	goto	l7327
  9206                           
  9207                           ; BSR set to: 0
  9208  0038FA  0100               	movlb	0	; () banked
  9209  0038FC  6D80               	negf	___awmod@dividend& (0+255),b
  9210  0038FE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9211  003900  B0D8               	btfsc	status,0,c
  9212  003902  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9213  003904                     l7327:
  9214                           
  9215                           ; BSR set to: 0
  9216  003904  C080  F080         	movff	___awmod@dividend,?___awmod
  9217  003908  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9218  00390C  0012               	return	
  9219  00390E                     __end_of___awmod:
  9220                           	opt stack 0
  9221                           tblptru	equ	0xFF8
  9222                           tblptrh	equ	0xFF7
  9223                           tblptrl	equ	0xFF6
  9224                           tablat	equ	0xFF5
  9225                           prodh	equ	0xFF4
  9226                           prodl	equ	0xFF3
  9227                           intcon	equ	0xFF2
  9228                           intcon2	equ	0xFF1
  9229                           intcon3	equ	0xFF0
  9230                           postinc0	equ	0xFEE
  9231                           wreg	equ	0xFE8
  9232                           postdec1	equ	0xFE5
  9233                           fsr1l	equ	0xFE1
  9234                           indf2	equ	0xFDF
  9235                           postinc2	equ	0xFDE
  9236                           postdec2	equ	0xFDD
  9237                           fsr2h	equ	0xFDA
  9238                           fsr2l	equ	0xFD9
  9239                           status	equ	0xFD8
  9240                           
  9241 ;; *************** function ___awdiv *****************
  9242 ;; Defined at:
  9243 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;  dividend        2    6[BANK0 ] int 
  9246 ;;  divisor         2    8[BANK0 ] int 
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;  quotient        2   12[BANK0 ] int 
  9249 ;;  sign            1   11[BANK0 ] unsigned char 
  9250 ;;  counter         1   10[BANK0 ] unsigned char 
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  2    6[BANK0 ] int 
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9261 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;Total ram usage:        8 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    7
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_UI
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           	psect	text35
  9275  003648                     __ptext35:
  9276                           	opt stack 0
  9277  003648                     ___awdiv:
  9278                           	opt stack 22
  9279                           
  9280                           ; BSR set to: 0
  9281                           ;incstack = 0
  9282  003648  0E00               	movlw	0
  9283  00364A  0100               	movlb	0	; () banked
  9284  00364C  6F8B               	movwf	___awdiv@sign& (0+255),b
  9285                           
  9286                           ; BSR set to: 0
  9287  00364E  0100               	movlb	0	; () banked
  9288  003650  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9289  003652  D008               	goto	l7259
  9290                           
  9291                           ; BSR set to: 0
  9292  003654  0100               	movlb	0	; () banked
  9293  003656  6D88               	negf	___awdiv@divisor& (0+255),b
  9294  003658  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9295  00365A  B0D8               	btfsc	status,0,c
  9296  00365C  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9297                           
  9298                           ; BSR set to: 0
  9299  00365E  0E01               	movlw	1
  9300  003660  0100               	movlb	0	; () banked
  9301  003662  6F8B               	movwf	___awdiv@sign& (0+255),b
  9302  003664                     l7259:
  9303                           
  9304                           ; BSR set to: 0
  9305  003664  0100               	movlb	0	; () banked
  9306  003666  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9307  003668  D008               	goto	l7265
  9308                           
  9309                           ; BSR set to: 0
  9310  00366A  0100               	movlb	0	; () banked
  9311  00366C  6D86               	negf	___awdiv@dividend& (0+255),b
  9312  00366E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9313  003670  B0D8               	btfsc	status,0,c
  9314  003672  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9315                           
  9316                           ; BSR set to: 0
  9317  003674  0E01               	movlw	1
  9318  003676  0100               	movlb	0	; () banked
  9319  003678  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9320  00367A                     l7265:
  9321                           
  9322                           ; BSR set to: 0
  9323  00367A  0E00               	movlw	0
  9324  00367C  0100               	movlb	0	; () banked
  9325  00367E  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9326  003680  0E00               	movlw	0
  9327  003682  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9328                           
  9329                           ; BSR set to: 0
  9330  003684  0100               	movlb	0	; () banked
  9331  003686  5188               	movf	___awdiv@divisor& (0+255),w,b
  9332  003688  0100               	movlb	0	; () banked
  9333  00368A  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9334  00368C  B4D8               	btfsc	status,2,c
  9335  00368E  D02C               	goto	l7287
  9336                           
  9337                           ; BSR set to: 0
  9338  003690  0E01               	movlw	1
  9339  003692  0100               	movlb	0	; () banked
  9340  003694  6F8A               	movwf	___awdiv@counter& (0+255),b
  9341  003696  D006               	goto	l7273
  9342  003698                     l7271:
  9343                           
  9344                           ; BSR set to: 0
  9345  003698  0100               	movlb	0	; () banked
  9346  00369A  90D8               	bcf	status,0,c
  9347  00369C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9348  00369E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9349  0036A0  0100               	movlb	0	; () banked
  9350  0036A2  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9351  0036A4                     l7273:
  9352                           
  9353                           ; BSR set to: 0
  9354  0036A4  0100               	movlb	0	; () banked
  9355  0036A6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9356  0036A8  D7F7               	goto	l7271
  9357  0036AA                     l7275:
  9358                           
  9359                           ; BSR set to: 0
  9360  0036AA  0100               	movlb	0	; () banked
  9361  0036AC  90D8               	bcf	status,0,c
  9362  0036AE  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9363  0036B0  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9364                           
  9365                           ; BSR set to: 0
  9366  0036B2  0100               	movlb	0	; () banked
  9367  0036B4  5188               	movf	___awdiv@divisor& (0+255),w,b
  9368  0036B6  0100               	movlb	0	; () banked
  9369  0036B8  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9370  0036BA  0100               	movlb	0	; () banked
  9371  0036BC  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9372  0036BE  0100               	movlb	0	; () banked
  9373  0036C0  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9374  0036C2  A0D8               	btfss	status,0,c
  9375  0036C4  D00A               	goto	l7283
  9376                           
  9377                           ; BSR set to: 0
  9378  0036C6  0100               	movlb	0	; () banked
  9379  0036C8  5188               	movf	___awdiv@divisor& (0+255),w,b
  9380  0036CA  0100               	movlb	0	; () banked
  9381  0036CC  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9382  0036CE  0100               	movlb	0	; () banked
  9383  0036D0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9384  0036D2  0100               	movlb	0	; () banked
  9385  0036D4  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9386                           
  9387                           ; BSR set to: 0
  9388  0036D6  0100               	movlb	0	; () banked
  9389  0036D8  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9390  0036DA                     l7283:
  9391                           
  9392                           ; BSR set to: 0
  9393  0036DA  0100               	movlb	0	; () banked
  9394  0036DC  90D8               	bcf	status,0,c
  9395  0036DE  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9396  0036E0  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9397                           
  9398                           ; BSR set to: 0
  9399  0036E2  0100               	movlb	0	; () banked
  9400  0036E4  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9401  0036E6  D7E1               	goto	l7275
  9402  0036E8                     l7287:
  9403                           
  9404                           ; BSR set to: 0
  9405  0036E8  0100               	movlb	0	; () banked
  9406  0036EA  518B               	movf	___awdiv@sign& (0+255),w,b
  9407  0036EC  0100               	movlb	0	; () banked
  9408  0036EE  B4D8               	btfsc	status,2,c
  9409  0036F0  D005               	goto	l7291
  9410                           
  9411                           ; BSR set to: 0
  9412  0036F2  0100               	movlb	0	; () banked
  9413  0036F4  6D8C               	negf	___awdiv@quotient& (0+255),b
  9414  0036F6  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9415  0036F8  B0D8               	btfsc	status,0,c
  9416  0036FA  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9417  0036FC                     l7291:
  9418                           
  9419                           ; BSR set to: 0
  9420  0036FC  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9421  003700  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9422  003704  0012               	return	
  9423  003706                     __end_of___awdiv:
  9424                           	opt stack 0
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           intcon2	equ	0xFF1
  9433                           intcon3	equ	0xFF0
  9434                           postinc0	equ	0xFEE
  9435                           wreg	equ	0xFE8
  9436                           postdec1	equ	0xFE5
  9437                           fsr1l	equ	0xFE1
  9438                           indf2	equ	0xFDF
  9439                           postinc2	equ	0xFDE
  9440                           postdec2	equ	0xFDD
  9441                           fsr2h	equ	0xFDA
  9442                           fsr2l	equ	0xFD9
  9443                           status	equ	0xFD8
  9444                           
  9445 ;; *************** function _Test *****************
  9446 ;; Defined at:
  9447 ;;		line 28 in file "Test.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      void 
  9454 ;; Registers used:
  9455 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;Total ram usage:        2 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:   11
  9468 ;; This function calls:
  9469 ;;		_BothServos
  9470 ;;		_EEPROMTest
  9471 ;;		_PortTestA5
  9472 ;;		_PortTests
  9473 ;;		_PusherTestA5
  9474 ;;		_ToggleTestA5
  9475 ;;		_actuatorTest
  9476 ;;		_algorithmTest
  9477 ;;		_lcdInst
  9478 ;;		_printf
  9479 ;;		_sensorTest
  9480 ;; This function is called by:
  9481 ;;		_main
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           	psect	text36
  9486  0032C6                     __ptext36:
  9487                           	opt stack 0
  9488  0032C6                     _Test:
  9489                           	opt stack 19
  9490  0032C6                     
  9491                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9492  0032C6  0E01               	movlw	1
  9493  0032C8  ECE1  F023         	call	_lcdInst
  9494  0032CC  0E68               	movlw	104
  9495  0032CE  0100               	movlb	0	; () banked
  9496  0032D0  6FC6               	movwf	??_Test& (0+255),b
  9497  0032D2  0EE4               	movlw	228
  9498  0032D4                     u7457:
  9499  0032D4  2EE8               	decfsz	wreg,f,c
  9500  0032D6  D7FE               	bra	u7457
  9501  0032D8  2FC6               	decfsz	??_Test& (0+255),f,b
  9502  0032DA  D7FC               	bra	u7457
  9503  0032DC  F000               	nop	
  9504  0032DE  0E80               	movlw	128
  9505  0032E0  ECE1  F023         	call	_lcdInst
  9506                           
  9507                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9508  0032E4  0E92               	movlw	low STR_68
  9509  0032E6  0100               	movlb	0	; () banked
  9510  0032E8  6F8E               	movwf	printf@f& (0+255),b
  9511  0032EA  0EFC               	movlw	high STR_68
  9512  0032EC  0100               	movlb	0	; () banked
  9513  0032EE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9514  0032F0  ECB8  F008         	call	_printf	;wreg free
  9515                           
  9516                           ;Test.c: 33: lcdInst(0b11000000);;
  9517  0032F4  0EC0               	movlw	192
  9518  0032F6  ECE1  F023         	call	_lcdInst
  9519                           
  9520                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9521  0032FA  0EC5               	movlw	low STR_69
  9522  0032FC  0100               	movlb	0	; () banked
  9523  0032FE  6F8E               	movwf	printf@f& (0+255),b
  9524  003300  0EFC               	movlw	high STR_69
  9525  003302  0100               	movlb	0	; () banked
  9526  003304  6F8F               	movwf	(printf@f+1)& (0+255),b
  9527  003306  ECB8  F008         	call	_printf	;wreg free
  9528                           
  9529                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9530  00330A  0E05               	movlw	5
  9531  00330C  0100               	movlb	0	; () banked
  9532  00330E  6FC7               	movwf	(??_Test+1)& (0+255),b
  9533  003310  0E0F               	movlw	15
  9534  003312  0100               	movlb	0	; () banked
  9535  003314  6FC6               	movwf	??_Test& (0+255),b
  9536  003316  0EF1               	movlw	241
  9537  003318                     u7467:
  9538  003318  2EE8               	decfsz	wreg,f,c
  9539  00331A  D7FE               	bra	u7467
  9540  00331C  2FC6               	decfsz	??_Test& (0+255),f,b
  9541  00331E  D7FC               	bra	u7467
  9542  003320  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9543  003322  D7FA               	bra	u7467
  9544  003324                     l1040:
  9545  003324  A281               	btfss	3969,1,c	;volatile
  9546  003326  D7FE               	goto	l1040
  9547                           
  9548                           ;Test.c: 37: var = PORTB >> 4;
  9549  003328  CF81 F0C6          	movff	3969,??_Test	;volatile
  9550  00332C  0100               	movlb	0	; () banked
  9551  00332E  3BC6               	swapf	??_Test& (0+255),f,b
  9552  003330  0E0F               	movlw	15
  9553  003332  17C6               	andwf	??_Test& (0+255),f,b
  9554  003334  0100               	movlb	0	; () banked
  9555  003336  51C6               	movf	??_Test& (0+255),w,b
  9556  003338  0100               	movlb	0	; () banked
  9557  00333A  6FFA               	movwf	_var& (0+255),b
  9558  00333C  6BFB               	clrf	(_var+1)& (0+255),b
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;Test.c: 38: var++;
  9562  00333E  0100               	movlb	0	; () banked
  9563  003340  4BFA               	infsnz	_var& (0+255),f,b
  9564  003342  2BFB               	incf	(_var+1)& (0+255),f,b
  9565  003344                     l1043:
  9566  003344  A281               	btfss	3969,1,c	;volatile
  9567  003346  D01C               	goto	l8025
  9568  003348  D7FD               	goto	l1043
  9569  00334A                     l8005:
  9570                           
  9571                           ;Test.c: 42: algorithmTest();
  9572  00334A  EC59  F01A         	call	_algorithmTest	;wreg free
  9573                           
  9574                           ;Test.c: 43: break;
  9575  00334E  D7BB               	goto	l7987
  9576  003350                     l8007:
  9577                           
  9578                           ;Test.c: 45: sensorTest();
  9579  003350  EC15  F00E         	call	_sensorTest	;wreg free
  9580                           
  9581                           ;Test.c: 46: break;
  9582  003354  D7B8               	goto	l7987
  9583  003356                     l8009:
  9584                           
  9585                           ;Test.c: 48: actuatorTest();
  9586  003356  EC09  F000         	call	_actuatorTest	;wreg free
  9587                           
  9588                           ;Test.c: 49: break;
  9589  00335A  D7B5               	goto	l7987
  9590  00335C                     l8011:
  9591                           
  9592                           ;Test.c: 51: PortTestA5();
  9593  00335C  EC87  F01C         	call	_PortTestA5	;wreg free
  9594                           
  9595                           ;Test.c: 52: break;
  9596  003360  D7B2               	goto	l7987
  9597  003362                     l8013:
  9598                           
  9599                           ;Test.c: 54: ToggleTestA5();
  9600  003362  EC18  F01D         	call	_ToggleTestA5	;wreg free
  9601                           
  9602                           ;Test.c: 55: break;
  9603  003366  D7AF               	goto	l7987
  9604  003368                     l8015:
  9605                           
  9606                           ;Test.c: 57: EEPROMTest();
  9607  003368  EC13  F024         	call	_EEPROMTest	;wreg free
  9608                           
  9609                           ;Test.c: 58: break;
  9610  00336C  D7AC               	goto	l7987
  9611  00336E                     l8017:
  9612                           
  9613                           ;Test.c: 60: PusherTestA5();
  9614  00336E  ECB5  F01F         	call	_PusherTestA5	;wreg free
  9615                           
  9616                           ;Test.c: 61: break;
  9617  003372  D7A9               	goto	l7987
  9618  003374                     l8019:
  9619                           
  9620                           ;Test.c: 63: PortTests();
  9621  003374  EC9F  F01D         	call	_PortTests	;wreg free
  9622                           
  9623                           ;Test.c: 64: break;
  9624  003378  D7A6               	goto	l7987
  9625  00337A                     l8021:
  9626                           
  9627                           ;Test.c: 66: BothServos();
  9628  00337A  EC8B  F00C         	call	_BothServos	;wreg free
  9629                           
  9630                           ;Test.c: 70: }
  9631                           
  9632                           ;Test.c: 69: break;
  9633                           
  9634                           ;Test.c: 68: default:
  9635                           
  9636                           ;Test.c: 67: break;
  9637  00337E  D7A3               	goto	l7987
  9638  003380                     l8025:
  9639  003380  C0FA  F0C6         	movff	_var,??_Test
  9640  003384  C0FB  F0C7         	movff	_var+1,??_Test+1
  9641                           
  9642                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9643                           ; Switch size 1, requested type "space"
  9644                           ; Number of cases is 1, Range of values is 0 to 0
  9645                           ; switch strategies available:
  9646                           ; Name         Instructions Cycles
  9647                           ; simple_byte            4     3 (average)
  9648                           ;	Chosen strategy is simple_byte
  9649  003388  0100               	movlb	0	; () banked
  9650  00338A  51C7               	movf	(??_Test+1)& (0+255),w,b
  9651  00338C  0A00               	xorlw	0	; case 0
  9652  00338E  A4D8               	btfss	status,2,c
  9653  003390  D79A               	goto	l7987
  9654                           
  9655                           ; BSR set to: 0
  9656                           ; Switch size 1, requested type "space"
  9657                           ; Number of cases is 9, Range of values is 1 to 10
  9658                           ; switch strategies available:
  9659                           ; Name         Instructions Cycles
  9660                           ; simple_byte           28    15 (average)
  9661                           ;	Chosen strategy is simple_byte
  9662  003392  0100               	movlb	0	; () banked
  9663  003394  51C6               	movf	??_Test& (0+255),w,b
  9664  003396  0A01               	xorlw	1	; case 1
  9665  003398  B4D8               	btfsc	status,2,c
  9666  00339A  D7D7               	goto	l8005
  9667  00339C  0A03               	xorlw	3	; case 2
  9668  00339E  B4D8               	btfsc	status,2,c
  9669  0033A0  D7D7               	goto	l8007
  9670  0033A2  0A01               	xorlw	1	; case 3
  9671  0033A4  B4D8               	btfsc	status,2,c
  9672  0033A6  D7D7               	goto	l8009
  9673  0033A8  0A06               	xorlw	6	; case 5
  9674  0033AA  B4D8               	btfsc	status,2,c
  9675  0033AC  D7D7               	goto	l8011
  9676  0033AE  0A03               	xorlw	3	; case 6
  9677  0033B0  B4D8               	btfsc	status,2,c
  9678  0033B2  D7D7               	goto	l8013
  9679  0033B4  0A01               	xorlw	1	; case 7
  9680  0033B6  B4D8               	btfsc	status,2,c
  9681  0033B8  D7D7               	goto	l8015
  9682  0033BA  0A0F               	xorlw	15	; case 8
  9683  0033BC  B4D8               	btfsc	status,2,c
  9684  0033BE  D7D7               	goto	l8017
  9685  0033C0  0A01               	xorlw	1	; case 9
  9686  0033C2  B4D8               	btfsc	status,2,c
  9687  0033C4  D7D7               	goto	l8019
  9688  0033C6  0A03               	xorlw	3	; case 10
  9689  0033C8  B4D8               	btfsc	status,2,c
  9690  0033CA  D7D7               	goto	l8021
  9691                           
  9692                           ; BSR set to: 0
  9693                           
  9694                           ; BSR set to: 0
  9695  0033CC  D77C               	goto	l7987
  9696  0033CE                     __end_of_Test:
  9697                           	opt stack 0
  9698                           tblptru	equ	0xFF8
  9699                           tblptrh	equ	0xFF7
  9700                           tblptrl	equ	0xFF6
  9701                           tablat	equ	0xFF5
  9702                           prodh	equ	0xFF4
  9703                           prodl	equ	0xFF3
  9704                           intcon	equ	0xFF2
  9705                           intcon2	equ	0xFF1
  9706                           intcon3	equ	0xFF0
  9707                           postinc0	equ	0xFEE
  9708                           wreg	equ	0xFE8
  9709                           postdec1	equ	0xFE5
  9710                           fsr1l	equ	0xFE1
  9711                           indf2	equ	0xFDF
  9712                           postinc2	equ	0xFDE
  9713                           postdec2	equ	0xFDD
  9714                           fsr2h	equ	0xFDA
  9715                           fsr2l	equ	0xFD9
  9716                           status	equ	0xFD8
  9717                           
  9718 ;; *************** function _sensorTest *****************
  9719 ;; Defined at:
  9720 ;;		line 118 in file "Test.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;		None
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;  res             2   45[BANK0 ] int 
  9725 ;; Return value:  Size  Location     Type
  9726 ;;                  1    wreg      void 
  9727 ;; Registers used:
  9728 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;Total ram usage:        4 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:   10
  9741 ;; This function calls:
  9742 ;;		_lcdInst
  9743 ;;		_printf
  9744 ;;		_readADC
  9745 ;;		_readMAG
  9746 ;; This function is called by:
  9747 ;;		_Test
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           	psect	text37
  9752  001C2A                     __ptext37:
  9753                           	opt stack 0
  9754  001C2A                     _sensorTest:
  9755                           	opt stack 19
  9756                           
  9757                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;incstack = 0
  9761  001C2A  0E01               	movlw	1
  9762  001C2C  ECE1  F023         	call	_lcdInst
  9763  001C30  0E68               	movlw	104
  9764  001C32  0100               	movlb	0	; () banked
  9765  001C34  6FAB               	movwf	??_sensorTest& (0+255),b
  9766  001C36  0EE4               	movlw	228
  9767  001C38                     u7477:
  9768  001C38  2EE8               	decfsz	wreg,f,c
  9769  001C3A  D7FE               	bra	u7477
  9770  001C3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9771  001C3E  D7FC               	bra	u7477
  9772  001C40  F000               	nop	
  9773  001C42  0E80               	movlw	128
  9774  001C44  ECE1  F023         	call	_lcdInst
  9775                           
  9776                           ;Test.c: 121: printf("SENSORS");
  9777  001C48  0EAE               	movlw	low STR_77
  9778  001C4A  0100               	movlb	0	; () banked
  9779  001C4C  6F8E               	movwf	printf@f& (0+255),b
  9780  001C4E  0EFF               	movlw	high STR_77
  9781  001C50  0100               	movlb	0	; () banked
  9782  001C52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9783  001C54  ECB8  F008         	call	_printf	;wreg free
  9784                           
  9785                           ;Test.c: 122: lcdInst(0b11000000);;
  9786  001C58  0EC0               	movlw	192
  9787  001C5A  ECE1  F023         	call	_lcdInst
  9788                           
  9789                           ;Test.c: 123: printf("PUSH TO START");
  9790  001C5E  0E0B               	movlw	low STR_71
  9791  001C60  0100               	movlb	0	; () banked
  9792  001C62  6F8E               	movwf	printf@f& (0+255),b
  9793  001C64  0EFF               	movlw	high STR_71
  9794  001C66  0100               	movlb	0	; () banked
  9795  001C68  6F8F               	movwf	(printf@f+1)& (0+255),b
  9796  001C6A  ECB8  F008         	call	_printf	;wreg free
  9797                           
  9798                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9799  001C6E  0E05               	movlw	5
  9800  001C70  0100               	movlb	0	; () banked
  9801  001C72  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9802  001C74  0E0F               	movlw	15
  9803  001C76  0100               	movlb	0	; () banked
  9804  001C78  6FAB               	movwf	??_sensorTest& (0+255),b
  9805  001C7A  0EF1               	movlw	241
  9806  001C7C                     u7487:
  9807  001C7C  2EE8               	decfsz	wreg,f,c
  9808  001C7E  D7FE               	bra	u7487
  9809  001C80  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9810  001C82  D7FC               	bra	u7487
  9811  001C84  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9812  001C86  D7FA               	bra	u7487
  9813  001C88                     l1072:
  9814  001C88  A281               	btfss	3969,1,c	;volatile
  9815  001C8A  D7FE               	goto	l1072
  9816  001C8C                     l1075:
  9817  001C8C  B281               	btfsc	3969,1,c	;volatile
  9818  001C8E  D7FE               	goto	l1075
  9819                           
  9820                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9821  001C90  0E01               	movlw	1
  9822  001C92  ECE1  F023         	call	_lcdInst
  9823  001C96  0E68               	movlw	104
  9824  001C98  0100               	movlb	0	; () banked
  9825  001C9A  6FAB               	movwf	??_sensorTest& (0+255),b
  9826  001C9C  0EE4               	movlw	228
  9827  001C9E                     u7497:
  9828  001C9E  2EE8               	decfsz	wreg,f,c
  9829  001CA0  D7FE               	bra	u7497
  9830  001CA2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9831  001CA4  D7FC               	bra	u7497
  9832  001CA6  F000               	nop	
  9833  001CA8  0E80               	movlw	128
  9834  001CAA  ECE1  F023         	call	_lcdInst
  9835                           
  9836                           ;Test.c: 132: printf("TST: IR SNSR");
  9837  001CAE  0E35               	movlw	low STR_79
  9838  001CB0  0100               	movlb	0	; () banked
  9839  001CB2  6F8E               	movwf	printf@f& (0+255),b
  9840  001CB4  0EFF               	movlw	high STR_79
  9841  001CB6  0100               	movlb	0	; () banked
  9842  001CB8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9843  001CBA  ECB8  F008         	call	_printf	;wreg free
  9844                           
  9845                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9846  001CBE  0E05               	movlw	5
  9847  001CC0  0100               	movlb	0	; () banked
  9848  001CC2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9849  001CC4  0E0F               	movlw	15
  9850  001CC6  0100               	movlb	0	; () banked
  9851  001CC8  6FAB               	movwf	??_sensorTest& (0+255),b
  9852  001CCA  0EF1               	movlw	241
  9853  001CCC                     u7507:
  9854  001CCC  2EE8               	decfsz	wreg,f,c
  9855  001CCE  D7FE               	bra	u7507
  9856  001CD0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9857  001CD2  D7FC               	bra	u7507
  9858  001CD4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9859  001CD6  D7FA               	bra	u7507
  9860                           
  9861                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9862  001CD8  8A8B               	bsf	3979,5,c	;volatile
  9863                           
  9864                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9865  001CDA  D05C               	goto	l6605
  9866  001CDC                     l6587:
  9867                           
  9868                           ;Test.c: 136: readADC(0);
  9869  001CDC  0E00               	movlw	0
  9870  001CDE  ECE8  F022         	call	_readADC
  9871                           
  9872                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9873  001CE2  50C3               	movf	4035,w,c	;volatile
  9874  001CE4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9875  001CE8  0100               	movlb	0	; () banked
  9876  001CEA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9877  001CEC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9878  001CF0  0100               	movlb	0	; () banked
  9879  001CF2  6BAB               	clrf	??_sensorTest& (0+255),b
  9880  001CF4  0100               	movlb	0	; () banked
  9881  001CF6  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9882  001CF8  0100               	movlb	0	; () banked
  9883  001CFA  6FAD               	movwf	sensorTest@res& (0+255),b
  9884  001CFC  0100               	movlb	0	; () banked
  9885  001CFE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9886  001D00  0100               	movlb	0	; () banked
  9887  001D02  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;Test.c: 138: IR_signal = (res > 800) ? 1 : 0;
  9891  001D04  0100               	movlb	0	; () banked
  9892  001D06  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9893  001D08  D00A               	goto	u5040
  9894  001D0A  0E21               	movlw	33
  9895  001D0C  0100               	movlb	0	; () banked
  9896  001D0E  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9897  001D10  0E03               	movlw	3
  9898  001D12  0100               	movlb	0	; () banked
  9899  001D14  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9900  001D16  A0D8               	btfss	status,0,c
  9901  001D18  D002               	goto	u5040
  9902  001D1A  0E01               	movlw	1
  9903  001D1C  D001               	goto	u5050
  9904  001D1E                     u5040:
  9905  001D1E  0E00               	movlw	0
  9906  001D20                     u5050:
  9907  001D20  0100               	movlb	0	; () banked
  9908  001D22  6FDA               	movwf	_IR_signal& (0+255),b
  9909  001D24  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9910                           
  9911                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9912  001D26  0E01               	movlw	1
  9913  001D28  ECE1  F023         	call	_lcdInst
  9914  001D2C  0E68               	movlw	104
  9915  001D2E  0100               	movlb	0	; () banked
  9916  001D30  6FAB               	movwf	??_sensorTest& (0+255),b
  9917  001D32  0EE4               	movlw	228
  9918  001D34                     u7517:
  9919  001D34  2EE8               	decfsz	wreg,f,c
  9920  001D36  D7FE               	bra	u7517
  9921  001D38  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9922  001D3A  D7FC               	bra	u7517
  9923  001D3C  F000               	nop	
  9924  001D3E  0E80               	movlw	128
  9925  001D40  ECE1  F023         	call	_lcdInst
  9926                           
  9927                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9928  001D44  0E5A               	movlw	low STR_80
  9929  001D46  0100               	movlb	0	; () banked
  9930  001D48  6F8E               	movwf	printf@f& (0+255),b
  9931  001D4A  0EFE               	movlw	high STR_80
  9932  001D4C  0100               	movlb	0	; () banked
  9933  001D4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9934  001D50  C0DA  F090         	movff	_IR_signal,?_printf+2
  9935  001D54  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9936  001D58  ECB8  F008         	call	_printf	;wreg free
  9937                           
  9938                           ;Test.c: 142: lcdInst(0b11000000);;
  9939  001D5C  0EC0               	movlw	192
  9940  001D5E  ECE1  F023         	call	_lcdInst
  9941                           
  9942                           ;Test.c: 143: printf("%d", res);
  9943  001D62  0E79               	movlw	low (STR_27+16)
  9944  001D64  0100               	movlb	0	; () banked
  9945  001D66  6F8E               	movwf	printf@f& (0+255),b
  9946  001D68  0EFB               	movlw	high (STR_27+16)
  9947  001D6A  0100               	movlb	0	; () banked
  9948  001D6C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9949  001D6E  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9950  001D72  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9951  001D76  ECB8  F008         	call	_printf	;wreg free
  9952                           
  9953                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9954  001D7A  0E05               	movlw	5
  9955  001D7C  0100               	movlb	0	; () banked
  9956  001D7E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9957  001D80  0E0F               	movlw	15
  9958  001D82  0100               	movlb	0	; () banked
  9959  001D84  6FAB               	movwf	??_sensorTest& (0+255),b
  9960  001D86  0EF1               	movlw	241
  9961  001D88                     u7527:
  9962  001D88  2EE8               	decfsz	wreg,f,c
  9963  001D8A  D7FE               	bra	u7527
  9964  001D8C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9965  001D8E  D7FC               	bra	u7527
  9966  001D90  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9967  001D92  D7FA               	bra	u7527
  9968  001D94                     l6605:
  9969  001D94  A281               	btfss	3969,1,c	;volatile
  9970  001D96  D7A2               	goto	l6587
  9971                           
  9972                           ;Test.c: 145: }
  9973                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9974  001D98  9A8B               	bcf	3979,5,c	;volatile
  9975                           
  9976                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9977  001D9A  0E01               	movlw	1
  9978  001D9C  ECE1  F023         	call	_lcdInst
  9979  001DA0  0E68               	movlw	104
  9980  001DA2  0100               	movlb	0	; () banked
  9981  001DA4  6FAB               	movwf	??_sensorTest& (0+255),b
  9982  001DA6  0EE4               	movlw	228
  9983  001DA8                     u7537:
  9984  001DA8  2EE8               	decfsz	wreg,f,c
  9985  001DAA  D7FE               	bra	u7537
  9986  001DAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9987  001DAE  D7FC               	bra	u7537
  9988  001DB0  F000               	nop	
  9989  001DB2  0E80               	movlw	128
  9990  001DB4  ECE1  F023         	call	_lcdInst
  9991                           
  9992                           ;Test.c: 154: printf("TST: MAGNETISM");
  9993  001DB8  0E87               	movlw	low STR_82
  9994  001DBA  0100               	movlb	0	; () banked
  9995  001DBC  6F8E               	movwf	printf@f& (0+255),b
  9996  001DBE  0EFE               	movlw	high STR_82
  9997  001DC0  0100               	movlb	0	; () banked
  9998  001DC2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9999  001DC4  ECB8  F008         	call	_printf	;wreg free
 10000                           
 10001                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
 10002  001DC8  0E05               	movlw	5
 10003  001DCA  0100               	movlb	0	; () banked
 10004  001DCC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10005  001DCE  0E0F               	movlw	15
 10006  001DD0  0100               	movlb	0	; () banked
 10007  001DD2  6FAB               	movwf	??_sensorTest& (0+255),b
 10008  001DD4  0EF1               	movlw	241
 10009  001DD6                     u7547:
 10010  001DD6  2EE8               	decfsz	wreg,f,c
 10011  001DD8  D7FE               	bra	u7547
 10012  001DDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10013  001DDC  D7FC               	bra	u7547
 10014  001DDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10015  001DE0  D7FA               	bra	u7547
 10016                           
 10017                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
 10018  001DE2  D021               	goto	l6623
 10019  001DE4                     l6617:
 10020                           
 10021                           ;Test.c: 157: readMAG();
 10022  001DE4  ECAB  F020         	call	_readMAG	;wreg free
 10023                           
 10024                           ;Test.c: 158: lcdInst(0b10000000);;
 10025  001DE8  0E80               	movlw	128
 10026  001DEA  ECE1  F023         	call	_lcdInst
 10027                           
 10028                           ;Test.c: 159: lcdInst(0b11000000);;
 10029  001DEE  0EC0               	movlw	192
 10030  001DF0  ECE1  F023         	call	_lcdInst
 10031                           
 10032                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
 10033  001DF4  0E2A               	movlw	low STR_83
 10034  001DF6  0100               	movlb	0	; () banked
 10035  001DF8  6F8E               	movwf	printf@f& (0+255),b
 10036  001DFA  0EFE               	movlw	high STR_83
 10037  001DFC  0100               	movlb	0	; () banked
 10038  001DFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10039  001E00  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10040  001E04  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10041  001E08  ECB8  F008         	call	_printf	;wreg free
 10042                           
 10043                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10044  001E0C  0E05               	movlw	5
 10045  001E0E  0100               	movlb	0	; () banked
 10046  001E10  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10047  001E12  0E0F               	movlw	15
 10048  001E14  0100               	movlb	0	; () banked
 10049  001E16  6FAB               	movwf	??_sensorTest& (0+255),b
 10050  001E18  0EF1               	movlw	241
 10051  001E1A                     u7557:
 10052  001E1A  2EE8               	decfsz	wreg,f,c
 10053  001E1C  D7FE               	bra	u7557
 10054  001E1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10055  001E20  D7FC               	bra	u7557
 10056  001E22  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10057  001E24  D7FA               	bra	u7557
 10058  001E26                     l6623:
 10059  001E26  A281               	btfss	3969,1,c	;volatile
 10060  001E28  D7DD               	goto	l6617
 10061                           
 10062                           ;Test.c: 162: }
 10063                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10064  001E2A  0E01               	movlw	1
 10065  001E2C  ECE1  F023         	call	_lcdInst
 10066  001E30  0E68               	movlw	104
 10067  001E32  0100               	movlb	0	; () banked
 10068  001E34  6FAB               	movwf	??_sensorTest& (0+255),b
 10069  001E36  0EE4               	movlw	228
 10070  001E38                     u7567:
 10071  001E38  2EE8               	decfsz	wreg,f,c
 10072  001E3A  D7FE               	bra	u7567
 10073  001E3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10074  001E3E  D7FC               	bra	u7567
 10075  001E40  F000               	nop	
 10076  001E42  0E80               	movlw	128
 10077  001E44  ECE1  F023         	call	_lcdInst
 10078                           
 10079                           ;Test.c: 168: printf("TST: COND");
 10080  001E48  0E87               	movlw	low STR_84
 10081  001E4A  0100               	movlb	0	; () banked
 10082  001E4C  6F8E               	movwf	printf@f& (0+255),b
 10083  001E4E  0EFF               	movlw	high STR_84
 10084  001E50  0100               	movlb	0	; () banked
 10085  001E52  6F8F               	movwf	(printf@f+1)& (0+255),b
 10086  001E54  ECB8  F008         	call	_printf	;wreg free
 10087                           
 10088                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10089  001E58  0E05               	movlw	5
 10090  001E5A  0100               	movlb	0	; () banked
 10091  001E5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10092  001E5E  0E0F               	movlw	15
 10093  001E60  0100               	movlb	0	; () banked
 10094  001E62  6FAB               	movwf	??_sensorTest& (0+255),b
 10095  001E64  0EF1               	movlw	241
 10096  001E66                     u7577:
 10097  001E66  2EE8               	decfsz	wreg,f,c
 10098  001E68  D7FE               	bra	u7577
 10099  001E6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10100  001E6C  D7FC               	bra	u7577
 10101  001E6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10102  001E70  D7FA               	bra	u7577
 10103  001E72                     l6635:
 10104                           
 10105                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10106  001E72  0E01               	movlw	1
 10107  001E74  ECE1  F023         	call	_lcdInst
 10108  001E78  0E68               	movlw	104
 10109  001E7A  0100               	movlb	0	; () banked
 10110  001E7C  6FAB               	movwf	??_sensorTest& (0+255),b
 10111  001E7E  0EE4               	movlw	228
 10112  001E80                     u7587:
 10113  001E80  2EE8               	decfsz	wreg,f,c
 10114  001E82  D7FE               	bra	u7587
 10115  001E84  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10116  001E86  D7FC               	bra	u7587
 10117  001E88  F000               	nop	
 10118  001E8A  0E80               	movlw	128
 10119  001E8C  ECE1  F023         	call	_lcdInst
 10120                           
 10121                           ;Test.c: 172: printf("TST: COND");
 10122  001E90  0E87               	movlw	low STR_84
 10123  001E92  0100               	movlb	0	; () banked
 10124  001E94  6F8E               	movwf	printf@f& (0+255),b
 10125  001E96  0EFF               	movlw	high STR_84
 10126  001E98  0100               	movlb	0	; () banked
 10127  001E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10128  001E9C  ECB8  F008         	call	_printf	;wreg free
 10129                           
 10130                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
 10131  001EA0  D01B               	goto	l6647
 10132  001EA2                     l6643:
 10133                           
 10134                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10135  001EA2  0E80               	movlw	128
 10136  001EA4  ECE1  F023         	call	_lcdInst
 10137  001EA8  0EC0               	movlw	192
 10138  001EAA  ECE1  F023         	call	_lcdInst
 10139                           
 10140                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
 10141  001EAE  0EA5               	movlw	low STR_86
 10142  001EB0  0100               	movlb	0	; () banked
 10143  001EB2  6F8E               	movwf	printf@f& (0+255),b
 10144  001EB4  0EFF               	movlw	high STR_86
 10145  001EB6  0100               	movlb	0	; () banked
 10146  001EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10147  001EBA  A480               	btfss	3968,2,c	;volatile
 10148  001EBC  D004               	goto	u5080
 10149  001EBE  0100               	movlb	0	; () banked
 10150  001EC0  6BAB               	clrf	??_sensorTest& (0+255),b
 10151  001EC2  2BAB               	incf	??_sensorTest& (0+255),f,b
 10152  001EC4  D002               	goto	u5088
 10153  001EC6                     u5080:
 10154  001EC6  0100               	movlb	0	; () banked
 10155  001EC8  6BAB               	clrf	??_sensorTest& (0+255),b
 10156  001ECA                     u5088:
 10157  001ECA  0100               	movlb	0	; () banked
 10158  001ECC  51AB               	movf	??_sensorTest& (0+255),w,b
 10159  001ECE  0100               	movlb	0	; () banked
 10160  001ED0  6F90               	movwf	(?_printf+2)& (0+255),b
 10161  001ED2  6B91               	clrf	(?_printf+3)& (0+255),b
 10162  001ED4  ECB8  F008         	call	_printf	;wreg free
 10163  001ED8                     l6647:
 10164  001ED8  A281               	btfss	3969,1,c	;volatile
 10165  001EDA  D7E3               	goto	l6643
 10166                           
 10167                           ;Test.c: 179: }
 10168                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
 10169  001EDC  3881               	swapf	3969,w,c	;volatile
 10170  001EDE  0B0F               	andlw	15
 10171  001EE0  0A0F               	xorlw	15
 10172  001EE2  B4D8               	btfsc	status,2,c
 10173  001EE4  0012               	return	
 10174                           
 10175                           ;Test.c: 183: else{
 10176                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10177                           
 10178                           ;Test.c: 182: }
 10179                           
 10180                           ;Test.c: 181: break;
 10181  001EE6  8689               	bsf	3977,3,c	;volatile
 10182                           
 10183                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10184  001EE8  D01B               	goto	l6659
 10185  001EEA                     l6655:
 10186                           
 10187                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10188  001EEA  0E80               	movlw	128
 10189  001EEC  ECE1  F023         	call	_lcdInst
 10190  001EF0  0EC0               	movlw	192
 10191  001EF2  ECE1  F023         	call	_lcdInst
 10192                           
 10193                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10194  001EF6  0EA5               	movlw	low STR_86
 10195  001EF8  0100               	movlb	0	; () banked
 10196  001EFA  6F8E               	movwf	printf@f& (0+255),b
 10197  001EFC  0EFF               	movlw	high STR_86
 10198  001EFE  0100               	movlb	0	; () banked
 10199  001F00  6F8F               	movwf	(printf@f+1)& (0+255),b
 10200  001F02  A480               	btfss	3968,2,c	;volatile
 10201  001F04  D004               	goto	u5110
 10202  001F06  0100               	movlb	0	; () banked
 10203  001F08  6BAB               	clrf	??_sensorTest& (0+255),b
 10204  001F0A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10205  001F0C  D002               	goto	u5118
 10206  001F0E                     u5110:
 10207  001F0E  0100               	movlb	0	; () banked
 10208  001F10  6BAB               	clrf	??_sensorTest& (0+255),b
 10209  001F12                     u5118:
 10210  001F12  0100               	movlb	0	; () banked
 10211  001F14  51AB               	movf	??_sensorTest& (0+255),w,b
 10212  001F16  0100               	movlb	0	; () banked
 10213  001F18  6F90               	movwf	(?_printf+2)& (0+255),b
 10214  001F1A  6B91               	clrf	(?_printf+3)& (0+255),b
 10215  001F1C  ECB8  F008         	call	_printf	;wreg free
 10216  001F20                     l6659:
 10217  001F20  B281               	btfsc	3969,1,c	;volatile
 10218  001F22  D7E3               	goto	l6655
 10219                           
 10220                           ;Test.c: 189: }
 10221                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10222  001F24  9689               	bcf	3977,3,c	;volatile
 10223  001F26  D7A5               	goto	l6635
 10224  001F28                     __end_of_sensorTest:
 10225                           	opt stack 0
 10226                           tblptru	equ	0xFF8
 10227                           tblptrh	equ	0xFF7
 10228                           tblptrl	equ	0xFF6
 10229                           tablat	equ	0xFF5
 10230                           prodh	equ	0xFF4
 10231                           prodl	equ	0xFF3
 10232                           intcon	equ	0xFF2
 10233                           intcon2	equ	0xFF1
 10234                           intcon3	equ	0xFF0
 10235                           postinc0	equ	0xFEE
 10236                           wreg	equ	0xFE8
 10237                           postdec1	equ	0xFE5
 10238                           fsr1l	equ	0xFE1
 10239                           indf2	equ	0xFDF
 10240                           postinc2	equ	0xFDE
 10241                           postdec2	equ	0xFDD
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function _readMAG *****************
 10247 ;; Defined at:
 10248 ;;		line 29 in file "ADCFunctionality.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;		None
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;  res             2    4[BANK0 ] int 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  1    wreg      void 
 10255 ;; Registers used:
 10256 ;;		wreg, status,2, status,0, cstack
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;Total ram usage:        4 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; Hardware stack levels required when called:    8
 10269 ;; This function calls:
 10270 ;;		_readADC
 10271 ;; This function is called by:
 10272 ;;		_getMAG
 10273 ;;		_sensorTest
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           	psect	text38
 10278  004156                     __ptext38:
 10279                           	opt stack 0
 10280  004156                     _readMAG:
 10281                           	opt stack 19
 10282                           
 10283                           ;ADCFunctionality.c: 30: readADC(1);
 10284                           
 10285                           ;incstack = 0
 10286  004156  0E01               	movlw	1
 10287  004158  ECE8  F022         	call	_readADC
 10288                           
 10289                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10290  00415C  50C3               	movf	4035,w,c	;volatile
 10291  00415E  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10292  004162  0100               	movlb	0	; () banked
 10293  004164  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10294  004166  C082  F083         	movff	??_readMAG,??_readMAG+1
 10295  00416A  0100               	movlb	0	; () banked
 10296  00416C  6B82               	clrf	??_readMAG& (0+255),b
 10297  00416E  0100               	movlb	0	; () banked
 10298  004170  1182               	iorwf	??_readMAG& (0+255),w,b
 10299  004172  0100               	movlb	0	; () banked
 10300  004174  6F84               	movwf	readMAG@res& (0+255),b
 10301  004176  0100               	movlb	0	; () banked
 10302  004178  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10303  00417A  0100               	movlb	0	; () banked
 10304  00417C  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10305                           
 10306                           ; BSR set to: 0
 10307                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10308  00417E  0100               	movlb	0	; () banked
 10309  004180  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10310  004182  D008               	goto	u3791
 10311  004184  0100               	movlb	0	; () banked
 10312  004186  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10313  004188  E107               	bnz	u3790
 10314  00418A  0E96               	movlw	150
 10315  00418C  0100               	movlb	0	; () banked
 10316  00418E  5D84               	subwf	readMAG@res& (0+255),w,b
 10317  004190  B0D8               	btfsc	status,0,c
 10318  004192  D002               	goto	u3790
 10319  004194                     u3791:
 10320  004194  0E01               	movlw	1
 10321  004196  D001               	goto	u3800
 10322  004198                     u3790:
 10323  004198  0E00               	movlw	0
 10324  00419A                     u3800:
 10325  00419A  0100               	movlb	0	; () banked
 10326  00419C  6FDC               	movwf	_MAG_signal& (0+255),b
 10327  00419E  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10328                           
 10329                           ; BSR set to: 0
 10330  0041A0  0012               	return		;funcret
 10331  0041A2                     __end_of_readMAG:
 10332                           	opt stack 0
 10333                           tblptru	equ	0xFF8
 10334                           tblptrh	equ	0xFF7
 10335                           tblptrl	equ	0xFF6
 10336                           tablat	equ	0xFF5
 10337                           prodh	equ	0xFF4
 10338                           prodl	equ	0xFF3
 10339                           intcon	equ	0xFF2
 10340                           intcon2	equ	0xFF1
 10341                           intcon3	equ	0xFF0
 10342                           postinc0	equ	0xFEE
 10343                           wreg	equ	0xFE8
 10344                           postdec1	equ	0xFE5
 10345                           fsr1l	equ	0xFE1
 10346                           indf2	equ	0xFDF
 10347                           postinc2	equ	0xFDE
 10348                           postdec2	equ	0xFDD
 10349                           fsr2h	equ	0xFDA
 10350                           fsr2l	equ	0xFD9
 10351                           status	equ	0xFD8
 10352                           
 10353 ;; *************** function _readADC *****************
 10354 ;; Defined at:
 10355 ;;		line 15 in file "ADCFunctionality.c"
 10356 ;; Parameters:    Size  Location     Type
 10357 ;;  channel         1    wreg     unsigned char 
 10358 ;; Auto vars:     Size  Location     Type
 10359 ;;  channel         1    1[BANK0 ] unsigned char 
 10360 ;; Return value:  Size  Location     Type
 10361 ;;                  1    wreg      void 
 10362 ;; Registers used:
 10363 ;;		wreg, status,2, status,0, cstack
 10364 ;; Tracked objects:
 10365 ;;		On entry : 0/0
 10366 ;;		On exit  : 0/0
 10367 ;;		Unchanged: 0/0
 10368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;Total ram usage:        2 bytes
 10374 ;; Hardware stack levels used:    1
 10375 ;; Hardware stack levels required when called:    7
 10376 ;; This function calls:
 10377 ;;		Nothing
 10378 ;; This function is called by:
 10379 ;;		_readIR
 10380 ;;		_readMAG
 10381 ;;		_sensorTest
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           	psect	text39
 10386  0045D0                     __ptext39:
 10387                           	opt stack 0
 10388  0045D0                     _readADC:
 10389                           	opt stack 19
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;incstack = 0
 10393                           ;readADC@channel stored from wreg
 10394  0045D0  0100               	movlb	0	; () banked
 10395  0045D2  6F81               	movwf	readADC@channel& (0+255),b
 10396                           
 10397                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10398  0045D4  0100               	movlb	0	; () banked
 10399  0045D6  4581               	rlncf	readADC@channel& (0+255),w,b
 10400  0045D8  46E8               	rlncf	wreg,f,c
 10401  0045DA  0BFC               	andlw	252
 10402  0045DC  6EC2               	movwf	4034,c	;volatile
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10406  0045DE  80C2               	bsf	4034,0,c	;volatile
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10410  0045E0  82C2               	bsf	4034,1,c	;volatile
 10411                           
 10412                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10413  0045E2  D009               	goto	l5231
 10414  0045E4                     l5229:
 10415  0045E4  0E34               	movlw	52
 10416  0045E6  0100               	movlb	0	; () banked
 10417  0045E8  6F80               	movwf	??_readADC& (0+255),b
 10418  0045EA  0EF1               	movlw	241
 10419  0045EC                     u7597:
 10420  0045EC  2EE8               	decfsz	wreg,f,c
 10421  0045EE  D7FE               	bra	u7597
 10422  0045F0  2F80               	decfsz	??_readADC& (0+255),f,b
 10423  0045F2  D7FC               	bra	u7597
 10424  0045F4  D000               	nop2	
 10425  0045F6                     l5231:
 10426  0045F6  A2C2               	btfss	4034,1,c	;volatile
 10427  0045F8  0012               	return	
 10428  0045FA  D7F4               	goto	l5229
 10429  0045FC                     __end_of_readADC:
 10430                           	opt stack 0
 10431                           tblptru	equ	0xFF8
 10432                           tblptrh	equ	0xFF7
 10433                           tblptrl	equ	0xFF6
 10434                           tablat	equ	0xFF5
 10435                           prodh	equ	0xFF4
 10436                           prodl	equ	0xFF3
 10437                           intcon	equ	0xFF2
 10438                           intcon2	equ	0xFF1
 10439                           intcon3	equ	0xFF0
 10440                           postinc0	equ	0xFEE
 10441                           wreg	equ	0xFE8
 10442                           postdec1	equ	0xFE5
 10443                           fsr1l	equ	0xFE1
 10444                           indf2	equ	0xFDF
 10445                           postinc2	equ	0xFDE
 10446                           postdec2	equ	0xFDD
 10447                           fsr2h	equ	0xFDA
 10448                           fsr2l	equ	0xFD9
 10449                           status	equ	0xFD8
 10450                           
 10451 ;; *************** function _algorithmTest *****************
 10452 ;; Defined at:
 10453 ;;		line 74 in file "Test.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;		None
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;		None
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      void 
 10460 ;; Registers used:
 10461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10471 ;;Total ram usage:        2 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:   10
 10474 ;; This function calls:
 10475 ;;		_lcdInst
 10476 ;;		_printf
 10477 ;; This function is called by:
 10478 ;;		_Test
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text40
 10483  0034B2                     __ptext40:
 10484                           	opt stack 0
 10485  0034B2                     _algorithmTest:
 10486                           	opt stack 19
 10487                           
 10488                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10489                           
 10490                           ;incstack = 0
 10491  0034B2  0E01               	movlw	1
 10492  0034B4  ECE1  F023         	call	_lcdInst
 10493  0034B8  0E68               	movlw	104
 10494  0034BA  0100               	movlb	0	; () banked
 10495  0034BC  6FAB               	movwf	??_algorithmTest& (0+255),b
 10496  0034BE  0EE4               	movlw	228
 10497  0034C0                     u7607:
 10498  0034C0  2EE8               	decfsz	wreg,f,c
 10499  0034C2  D7FE               	bra	u7607
 10500  0034C4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10501  0034C6  D7FC               	bra	u7607
 10502  0034C8  F000               	nop	
 10503  0034CA  0E80               	movlw	128
 10504  0034CC  ECE1  F023         	call	_lcdInst
 10505                           
 10506                           ;Test.c: 77: printf("ALGORITHM TEST");
 10507  0034D0  0ED2               	movlw	low STR_70
 10508  0034D2  0100               	movlb	0	; () banked
 10509  0034D4  6F8E               	movwf	printf@f& (0+255),b
 10510  0034D6  0EFE               	movlw	high STR_70
 10511  0034D8  0100               	movlb	0	; () banked
 10512  0034DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10513  0034DC  ECB8  F008         	call	_printf	;wreg free
 10514                           
 10515                           ;Test.c: 78: lcdInst(0b11000000);;
 10516  0034E0  0EC0               	movlw	192
 10517  0034E2  ECE1  F023         	call	_lcdInst
 10518                           
 10519                           ;Test.c: 79: printf("PUSH TO START");
 10520  0034E6  0E0B               	movlw	low STR_71
 10521  0034E8  0100               	movlb	0	; () banked
 10522  0034EA  6F8E               	movwf	printf@f& (0+255),b
 10523  0034EC  0EFF               	movlw	high STR_71
 10524  0034EE  0100               	movlb	0	; () banked
 10525  0034F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10526  0034F2  ECB8  F008         	call	_printf	;wreg free
 10527                           
 10528                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10529  0034F6  0E05               	movlw	5
 10530  0034F8  0100               	movlb	0	; () banked
 10531  0034FA  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10532  0034FC  0E0F               	movlw	15
 10533  0034FE  0100               	movlb	0	; () banked
 10534  003500  6FAB               	movwf	??_algorithmTest& (0+255),b
 10535  003502  0EF1               	movlw	241
 10536  003504                     u7617:
 10537  003504  2EE8               	decfsz	wreg,f,c
 10538  003506  D7FE               	bra	u7617
 10539  003508  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10540  00350A  D7FC               	bra	u7617
 10541  00350C  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10542  00350E  D7FA               	bra	u7617
 10543  003510                     l1063:
 10544  003510  A281               	btfss	3969,1,c	;volatile
 10545  003512  D7FE               	goto	l1063
 10546  003514                     l1066:
 10547  003514  B281               	btfsc	3969,1,c	;volatile
 10548  003516  D7FE               	goto	l1066
 10549                           
 10550                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10551  003518  0E01               	movlw	1
 10552  00351A  ECE1  F023         	call	_lcdInst
 10553  00351E  0E68               	movlw	104
 10554  003520  0100               	movlb	0	; () banked
 10555  003522  6FAB               	movwf	??_algorithmTest& (0+255),b
 10556  003524  0EE4               	movlw	228
 10557  003526                     u7627:
 10558  003526  2EE8               	decfsz	wreg,f,c
 10559  003528  D7FE               	bra	u7627
 10560  00352A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10561  00352C  D7FC               	bra	u7627
 10562  00352E  F000               	nop	
 10563  003530  0E80               	movlw	128
 10564  003532  ECE1  F023         	call	_lcdInst
 10565                           
 10566                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10567  003536  0E81               	movlw	low STR_72
 10568  003538  0100               	movlb	0	; () banked
 10569  00353A  6F8E               	movwf	printf@f& (0+255),b
 10570  00353C  0EFC               	movlw	high STR_72
 10571  00353E  0100               	movlb	0	; () banked
 10572  003540  6F8F               	movwf	(printf@f+1)& (0+255),b
 10573  003542  ECB8  F008         	call	_printf	;wreg free
 10574                           
 10575                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10576  003546  0EEF               	movlw	low STR_73
 10577  003548  0100               	movlb	0	; () banked
 10578  00354A  6F8E               	movwf	printf@f& (0+255),b
 10579  00354C  0EFE               	movlw	high STR_73
 10580  00354E  0100               	movlb	0	; () banked
 10581  003550  6F8F               	movwf	(printf@f+1)& (0+255),b
 10582  003552  ECB8  F008         	call	_printf	;wreg free
 10583                           
 10584                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10585  003556  0E4F               	movlw	low STR_74
 10586  003558  0100               	movlb	0	; () banked
 10587  00355A  6F8E               	movwf	printf@f& (0+255),b
 10588  00355C  0EFF               	movlw	high STR_74
 10589  00355E  0100               	movlb	0	; () banked
 10590  003560  6F8F               	movwf	(printf@f+1)& (0+255),b
 10591  003562  ECB8  F008         	call	_printf	;wreg free
 10592                           
 10593                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10594  003566  0EB4               	movlw	low STR_75
 10595  003568  0100               	movlb	0	; () banked
 10596  00356A  6F8E               	movwf	printf@f& (0+255),b
 10597  00356C  0EFE               	movlw	high STR_75
 10598  00356E  0100               	movlb	0	; () banked
 10599  003570  6F8F               	movwf	(printf@f+1)& (0+255),b
 10600  003572  ECB8  F008         	call	_printf	;wreg free
 10601                           
 10602                           ;Test.c: 115: printf("ALG5: NO CANS");
 10603  003576  0EFD               	movlw	low STR_76
 10604  003578  0100               	movlb	0	; () banked
 10605  00357A  6F8E               	movwf	printf@f& (0+255),b
 10606  00357C  0EFE               	movlw	high STR_76
 10607  00357E  0100               	movlb	0	; () banked
 10608  003580  6F8F               	movwf	(printf@f+1)& (0+255),b
 10609  003582  ECB8  F008         	call	_printf	;wreg free
 10610  003586  0012               	return		;funcret
 10611  003588                     __end_of_algorithmTest:
 10612                           	opt stack 0
 10613                           tblptru	equ	0xFF8
 10614                           tblptrh	equ	0xFF7
 10615                           tblptrl	equ	0xFF6
 10616                           tablat	equ	0xFF5
 10617                           prodh	equ	0xFF4
 10618                           prodl	equ	0xFF3
 10619                           intcon	equ	0xFF2
 10620                           intcon2	equ	0xFF1
 10621                           intcon3	equ	0xFF0
 10622                           postinc0	equ	0xFEE
 10623                           wreg	equ	0xFE8
 10624                           postdec1	equ	0xFE5
 10625                           fsr1l	equ	0xFE1
 10626                           indf2	equ	0xFDF
 10627                           postinc2	equ	0xFDE
 10628                           postdec2	equ	0xFDD
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function _actuatorTest *****************
 10634 ;; Defined at:
 10635 ;;		line 195 in file "Test.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  i               1   45[BANK0 ] unsigned char 
 10640 ;;  i               1   67[BANK0 ] unsigned char 
 10641 ;;  i               1   66[BANK0 ] unsigned char 
 10642 ;;  i               1   65[BANK0 ] unsigned char 
 10643 ;;  i               1   64[BANK0 ] unsigned char 
 10644 ;;  i               1   63[BANK0 ] unsigned char 
 10645 ;;  i               1   62[BANK0 ] unsigned char 
 10646 ;;  i               1   61[BANK0 ] unsigned char 
 10647 ;;  i               1   60[BANK0 ] unsigned char 
 10648 ;;  i               1   59[BANK0 ] unsigned char 
 10649 ;;  i               1   58[BANK0 ] unsigned char 
 10650 ;;  i               1   57[BANK0 ] unsigned char 
 10651 ;;  i               1   56[BANK0 ] unsigned char 
 10652 ;;  i               1   55[BANK0 ] unsigned char 
 10653 ;;  i               1   54[BANK0 ] unsigned char 
 10654 ;;  i               1   53[BANK0 ] unsigned char 
 10655 ;;  i               1   52[BANK0 ] unsigned char 
 10656 ;;  i               1   51[BANK0 ] unsigned char 
 10657 ;;  i               1   50[BANK0 ] unsigned char 
 10658 ;;  i               1   49[BANK0 ] unsigned char 
 10659 ;;  i               1   48[BANK0 ] unsigned char 
 10660 ;;  i               1   47[BANK0 ] unsigned char 
 10661 ;;  i               1   46[BANK0 ] unsigned char 
 10662 ;;  i               2   68[BANK0 ] int 
 10663 ;; Return value:  Size  Location     Type
 10664 ;;                  1    wreg      void 
 10665 ;; Registers used:
 10666 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10667 ;; Tracked objects:
 10668 ;;		On entry : 0/0
 10669 ;;		On exit  : 0/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;Total ram usage:       27 bytes
 10677 ;; Hardware stack levels used:    1
 10678 ;; Hardware stack levels required when called:   10
 10679 ;; This function calls:
 10680 ;;		_lcdInst
 10681 ;;		_printf
 10682 ;;		_updateServoPosition
 10683 ;; This function is called by:
 10684 ;;		_Test
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           	psect	text41
 10689  000012                     __ptext41:
 10690                           	opt stack 0
 10691  000012                     _actuatorTest:
 10692                           	opt stack 19
 10693                           
 10694                           ;Test.c: 197: int i = 0;
 10695                           
 10696                           ;incstack = 0
 10697  000012  0E00               	movlw	0
 10698  000014  0100               	movlb	0	; () banked
 10699  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10700  000018  0E00               	movlw	0
 10701  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10705  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10709  00001E  0E01               	movlw	1
 10710  000020  ECE1  F023         	call	_lcdInst
 10711  000024  0E68               	movlw	104
 10712  000026  0100               	movlb	0	; () banked
 10713  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10714  00002A  0EE4               	movlw	228
 10715  00002C                     u7637:
 10716  00002C  2EE8               	decfsz	wreg,f,c
 10717  00002E  D7FE               	bra	u7637
 10718  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10719  000032  D7FC               	bra	u7637
 10720  000034  F000               	nop	
 10721  000036  0E80               	movlw	128
 10722  000038  ECE1  F023         	call	_lcdInst
 10723                           
 10724                           ;Test.c: 201: printf("ACTUATORS");
 10725  00003C  0E91               	movlw	low STR_88
 10726  00003E  0100               	movlb	0	; () banked
 10727  000040  6F8E               	movwf	printf@f& (0+255),b
 10728  000042  0EFF               	movlw	high STR_88
 10729  000044  0100               	movlb	0	; () banked
 10730  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10731  000048  ECB8  F008         	call	_printf	;wreg free
 10732                           
 10733                           ;Test.c: 202: lcdInst(0b11000000);;
 10734  00004C  0EC0               	movlw	192
 10735  00004E  ECE1  F023         	call	_lcdInst
 10736                           
 10737                           ;Test.c: 203: printf("PUSH TO START");
 10738  000052  0E0B               	movlw	low STR_71
 10739  000054  0100               	movlb	0	; () banked
 10740  000056  6F8E               	movwf	printf@f& (0+255),b
 10741  000058  0EFF               	movlw	high STR_71
 10742  00005A  0100               	movlb	0	; () banked
 10743  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10744  00005E  ECB8  F008         	call	_printf	;wreg free
 10745                           
 10746                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10747  000062  0E05               	movlw	5
 10748  000064  0100               	movlb	0	; () banked
 10749  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10750  000068  0E0F               	movlw	15
 10751  00006A  0100               	movlb	0	; () banked
 10752  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10753  00006E  0EF1               	movlw	241
 10754  000070                     u7647:
 10755  000070  2EE8               	decfsz	wreg,f,c
 10756  000072  D7FE               	bra	u7647
 10757  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10758  000076  D7FC               	bra	u7647
 10759  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10760  00007A  D7FA               	bra	u7647
 10761  00007C                     l1098:
 10762  00007C  A281               	btfss	3969,1,c	;volatile
 10763  00007E  D7FE               	goto	l1098
 10764  000080                     l1101:
 10765  000080  B281               	btfsc	3969,1,c	;volatile
 10766  000082  D7FE               	goto	l1101
 10767                           
 10768                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10769  000084  0E01               	movlw	1
 10770  000086  ECE1  F023         	call	_lcdInst
 10771  00008A  0E68               	movlw	104
 10772  00008C  0100               	movlb	0	; () banked
 10773  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10774  000090  0EE4               	movlw	228
 10775  000092                     u7657:
 10776  000092  2EE8               	decfsz	wreg,f,c
 10777  000094  D7FE               	bra	u7657
 10778  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10779  000098  D7FC               	bra	u7657
 10780  00009A  F000               	nop	
 10781  00009C  0E80               	movlw	128
 10782  00009E  ECE1  F023         	call	_lcdInst
 10783                           
 10784                           ;Test.c: 212: printf("TST: DC MOTORS");
 10785  0000A2  0EC3               	movlw	low STR_90
 10786  0000A4  0100               	movlb	0	; () banked
 10787  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10788  0000A8  0EFE               	movlw	high STR_90
 10789  0000AA  0100               	movlb	0	; () banked
 10790  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10791  0000AE  ECB8  F008         	call	_printf	;wreg free
 10792                           
 10793                           ;Test.c: 213: lcdInst(0b11000000);;
 10794  0000B2  0EC0               	movlw	192
 10795  0000B4  ECE1  F023         	call	_lcdInst
 10796                           
 10797                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10798  0000B8  0EE1               	movlw	low STR_91
 10799  0000BA  0100               	movlb	0	; () banked
 10800  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10801  0000BE  0EFE               	movlw	high STR_91
 10802  0000C0  0100               	movlb	0	; () banked
 10803  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10804  0000C4  ECB8  F008         	call	_printf	;wreg free
 10805                           
 10806                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10807  0000C8  8A89               	bsf	3977,5,c	;volatile
 10808                           
 10809                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10810  0000CA  0E00               	movlw	0
 10811  0000CC  0100               	movlb	0	; () banked
 10812  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10813  0000D0  0E00               	movlw	0
 10814  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10815                           
 10816                           ; BSR set to: 0
 10817  0000D4  0100               	movlb	0	; () banked
 10818  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10819  0000D8  D008               	goto	l6699
 10820  0000DA  0100               	movlb	0	; () banked
 10821  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10822  0000DE  E123               	bnz	l1105
 10823  0000E0  0E05               	movlw	5
 10824  0000E2  0100               	movlb	0	; () banked
 10825  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10826  0000E6  B0D8               	btfsc	status,0,c
 10827  0000E8  D01E               	goto	l1105
 10828  0000EA                     l6699:
 10829                           
 10830                           ; BSR set to: 0
 10831  0000EA  0E00               	movlw	0
 10832  0000EC  0100               	movlb	0	; () banked
 10833  0000EE  6FAD               	movwf	actuatorTest@i_1637& (0+255),b
 10834  0000F0                     l6701:
 10835                           
 10836                           ; BSR set to: 0
 10837  0000F0  0E63               	movlw	99
 10838  0000F2  0100               	movlb	0	; () banked
 10839  0000F4  65AD               	cpfsgt	actuatorTest@i_1637& (0+255),b
 10840  0000F6  D001               	goto	l6705
 10841  0000F8  D00C               	goto	l6709
 10842  0000FA                     l6705:
 10843                           
 10844                           ; BSR set to: 0
 10845  0000FA  0E68               	movlw	104
 10846  0000FC  0100               	movlb	0	; () banked
 10847  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10848  000100  0EE4               	movlw	228
 10849  000102                     u7667:
 10850  000102  2EE8               	decfsz	wreg,f,c
 10851  000104  D7FE               	bra	u7667
 10852  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10853  000108  D7FC               	bra	u7667
 10854  00010A  F000               	nop	
 10855  00010C  0100               	movlb	0	; () banked
 10856  00010E  2BAD               	incf	actuatorTest@i_1637& (0+255),f,b
 10857  000110  D7EF               	goto	l6701
 10858  000112                     l6709:
 10859                           
 10860                           ; BSR set to: 0
 10861  000112  0100               	movlb	0	; () banked
 10862  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10863  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10864                           
 10865                           ; BSR set to: 0
 10866  000118  0100               	movlb	0	; () banked
 10867  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10868  00011C  D7E6               	goto	l6699
 10869  00011E  0100               	movlb	0	; () banked
 10870  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10871  000122  E101               	bnz	u5180
 10872  000124  D7DD               	goto	L7
 10873  000126                     u5180:
 10874  000126                     l1105:
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10878  000126  9A89               	bcf	3977,5,c	;volatile
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10882  000128  0E01               	movlw	1
 10883  00012A  ECE1  F023         	call	_lcdInst
 10884  00012E  0E68               	movlw	104
 10885  000130  0100               	movlb	0	; () banked
 10886  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10887  000134  0EE4               	movlw	228
 10888  000136                     u7677:
 10889  000136  2EE8               	decfsz	wreg,f,c
 10890  000138  D7FE               	bra	u7677
 10891  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10892  00013C  D7FC               	bra	u7677
 10893  00013E  F000               	nop	
 10894  000140  0E80               	movlw	128
 10895  000142  ECE1  F023         	call	_lcdInst
 10896                           
 10897                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10898  000146  0EA3               	movlw	low STR_92
 10899  000148  0100               	movlb	0	; () banked
 10900  00014A  6F8E               	movwf	printf@f& (0+255),b
 10901  00014C  0EFC               	movlw	high STR_92
 10902  00014E  0100               	movlb	0	; () banked
 10903  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10904  000152  ECB8  F008         	call	_printf	;wreg free
 10905                           
 10906                           ;Test.c: 225: lcdInst(0b11000000);;
 10907  000156  0EC0               	movlw	192
 10908  000158  ECE1  F023         	call	_lcdInst
 10909                           
 10910                           ;Test.c: 226: printf("PIN RA3...");
 10911  00015C  0E5B               	movlw	low STR_93
 10912  00015E  0100               	movlb	0	; () banked
 10913  000160  6F8E               	movwf	printf@f& (0+255),b
 10914  000162  0EFF               	movlw	high STR_93
 10915  000164  0100               	movlb	0	; () banked
 10916  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10917  000168  ECB8  F008         	call	_printf	;wreg free
 10918                           
 10919                           ;Test.c: 227: for(i=0;i<5;i++){
 10920  00016C  0E00               	movlw	0
 10921  00016E  0100               	movlb	0	; () banked
 10922  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10923  000172  0E00               	movlw	0
 10924  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10925                           
 10926                           ; BSR set to: 0
 10927  000176  0100               	movlb	0	; () banked
 10928  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10929  00017A  D008               	goto	l1108
 10930  00017C  0100               	movlb	0	; () banked
 10931  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10932  000180  E12C               	bnz	l1109
 10933  000182  0E05               	movlw	5
 10934  000184  0100               	movlb	0	; () banked
 10935  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10936  000188  B0D8               	btfsc	status,0,c
 10937  00018A  D027               	goto	l1109
 10938  00018C                     l1108:
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10942  00018C  8689               	bsf	3977,3,c	;volatile
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10946  00018E  0E0D               	movlw	13
 10947  000190  0100               	movlb	0	; () banked
 10948  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10949  000194  0E2D               	movlw	45
 10950  000196  0100               	movlb	0	; () banked
 10951  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10952  00019A  0ED7               	movlw	215
 10953  00019C                     u7687:
 10954  00019C  2EE8               	decfsz	wreg,f,c
 10955  00019E  D7FE               	bra	u7687
 10956  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10957  0001A2  D7FC               	bra	u7687
 10958  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10959  0001A6  D7FA               	bra	u7687
 10960  0001A8  D000               	nop2	
 10961                           
 10962                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10963  0001AA  9689               	bcf	3977,3,c	;volatile
 10964                           
 10965                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10966  0001AC  0E1D               	movlw	29
 10967  0001AE  0100               	movlb	0	; () banked
 10968  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10969  0001B2  0E69               	movlw	105
 10970  0001B4  0100               	movlb	0	; () banked
 10971  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10972  0001B8  0EA5               	movlw	165
 10973  0001BA                     u7697:
 10974  0001BA  2EE8               	decfsz	wreg,f,c
 10975  0001BC  D7FE               	bra	u7697
 10976  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10977  0001C0  D7FC               	bra	u7697
 10978  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10979  0001C4  D7FA               	bra	u7697
 10980  0001C6  0100               	movlb	0	; () banked
 10981  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10982  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10983  0001CC  0100               	movlb	0	; () banked
 10984  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10985  0001D0  D7DD               	goto	l1108
 10986  0001D2  0100               	movlb	0	; () banked
 10987  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10988  0001D6  E101               	bnz	u5200
 10989  0001D8  D7D4               	goto	L8
 10990  0001DA                     u5200:
 10991  0001DA                     l1109:
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;Test.c: 232: }
 10995                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 10996  0001DA  9689               	bcf	3977,3,c	;volatile
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11000  0001DC  0E01               	movlw	1
 11001  0001DE  ECE1  F023         	call	_lcdInst
 11002  0001E2  0E68               	movlw	104
 11003  0001E4  0100               	movlb	0	; () banked
 11004  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11005  0001E8  0EE4               	movlw	228
 11006  0001EA                     u7707:
 11007  0001EA  2EE8               	decfsz	wreg,f,c
 11008  0001EC  D7FE               	bra	u7707
 11009  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11010  0001F0  D7FC               	bra	u7707
 11011  0001F2  F000               	nop	
 11012  0001F4  0E80               	movlw	128
 11013  0001F6  ECE1  F023         	call	_lcdInst
 11014                           
 11015                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 11016  0001FA  0EB4               	movlw	low STR_94
 11017  0001FC  0100               	movlb	0	; () banked
 11018  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11019  000200  0EFC               	movlw	high STR_94
 11020  000202  0100               	movlb	0	; () banked
 11021  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11022  000206  ECB8  F008         	call	_printf	;wreg free
 11023                           
 11024                           ;Test.c: 241: lcdInst(0b11000000);;
 11025  00020A  0EC0               	movlw	192
 11026  00020C  ECE1  F023         	call	_lcdInst
 11027                           
 11028                           ;Test.c: 242: printf("PIN RA4...");
 11029  000210  0E66               	movlw	low STR_95
 11030  000212  0100               	movlb	0	; () banked
 11031  000214  6F8E               	movwf	printf@f& (0+255),b
 11032  000216  0EFF               	movlw	high STR_95
 11033  000218  0100               	movlb	0	; () banked
 11034  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11035  00021C  ECB8  F008         	call	_printf	;wreg free
 11036                           
 11037                           ;Test.c: 243: for(i=0;i<5;i++){
 11038  000220  0E00               	movlw	0
 11039  000222  0100               	movlb	0	; () banked
 11040  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11041  000226  0E00               	movlw	0
 11042  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11043                           
 11044                           ; BSR set to: 0
 11045  00022A  0100               	movlb	0	; () banked
 11046  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11047  00022E  D008               	goto	l1110
 11048  000230  0100               	movlb	0	; () banked
 11049  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11050  000234  E12C               	bnz	l1111
 11051  000236  0E05               	movlw	5
 11052  000238  0100               	movlb	0	; () banked
 11053  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11054  00023C  B0D8               	btfsc	status,0,c
 11055  00023E  D027               	goto	l1111
 11056  000240                     l1110:
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;Test.c: 244: LATAbits.LATA4 = 1;
 11060  000240  8889               	bsf	3977,4,c	;volatile
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 11064  000242  0E0D               	movlw	13
 11065  000244  0100               	movlb	0	; () banked
 11066  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11067  000248  0E2D               	movlw	45
 11068  00024A  0100               	movlb	0	; () banked
 11069  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11070  00024E  0ED7               	movlw	215
 11071  000250                     u7717:
 11072  000250  2EE8               	decfsz	wreg,f,c
 11073  000252  D7FE               	bra	u7717
 11074  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11075  000256  D7FC               	bra	u7717
 11076  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11077  00025A  D7FA               	bra	u7717
 11078  00025C  D000               	nop2	
 11079                           
 11080                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 11081  00025E  9889               	bcf	3977,4,c	;volatile
 11082                           
 11083                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11084  000260  0E1D               	movlw	29
 11085  000262  0100               	movlb	0	; () banked
 11086  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11087  000266  0E69               	movlw	105
 11088  000268  0100               	movlb	0	; () banked
 11089  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11090  00026C  0EA5               	movlw	165
 11091  00026E                     u7727:
 11092  00026E  2EE8               	decfsz	wreg,f,c
 11093  000270  D7FE               	bra	u7727
 11094  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11095  000274  D7FC               	bra	u7727
 11096  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11097  000278  D7FA               	bra	u7727
 11098  00027A  0100               	movlb	0	; () banked
 11099  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11100  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11101  000280  0100               	movlb	0	; () banked
 11102  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11103  000284  D7DD               	goto	l1110
 11104  000286  0100               	movlb	0	; () banked
 11105  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11106  00028A  E101               	bnz	u5220
 11107  00028C  D7D4               	goto	L9
 11108  00028E                     u5220:
 11109  00028E                     l1111:
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;Test.c: 248: }
 11113                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 11114  00028E  9889               	bcf	3977,4,c	;volatile
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11118  000290  0E01               	movlw	1
 11119  000292  ECE1  F023         	call	_lcdInst
 11120  000296  0E68               	movlw	104
 11121  000298  0100               	movlb	0	; () banked
 11122  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11123  00029C  0EE4               	movlw	228
 11124  00029E                     u7737:
 11125  00029E  2EE8               	decfsz	wreg,f,c
 11126  0002A0  D7FE               	bra	u7737
 11127  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11128  0002A4  D7FC               	bra	u7737
 11129  0002A6  F000               	nop	
 11130  0002A8  0E80               	movlw	128
 11131  0002AA  ECE1  F023         	call	_lcdInst
 11132                           
 11133                           ;Test.c: 253: machine_state = Sorting_state;
 11134  0002AE  0E01               	movlw	1
 11135  0002B0  0100               	movlb	0	; () banked
 11136  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;Test.c: 254: was_low_1 = 0;
 11140  0002B4  0E00               	movlw	0
 11141  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11142  0002B8  0E00               	movlw	0
 11143  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;Test.c: 255: was_low_1 = 0;
 11147  0002BC  0E00               	movlw	0
 11148  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11149  0002C0  0E00               	movlw	0
 11150  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11151                           
 11152                           ; BSR set to: 0
 11153                           ;Test.c: 262: printf("TST: PAN SERVO");
 11154  0002C4  0EA5               	movlw	low STR_96
 11155  0002C6  0100               	movlb	0	; () banked
 11156  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11157  0002CA  0EFE               	movlw	high STR_96
 11158  0002CC  0100               	movlb	0	; () banked
 11159  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11160  0002D0  ECB8  F008         	call	_printf	;wreg free
 11161                           
 11162                           ;Test.c: 263: lcdInst(0b11000000);;
 11163  0002D4  0EC0               	movlw	192
 11164  0002D6  ECE1  F023         	call	_lcdInst
 11165                           
 11166                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 11167  0002DA  0E2C               	movlw	low STR_97
 11168  0002DC  0100               	movlb	0	; () banked
 11169  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11170  0002E0  0EFC               	movlw	high STR_97
 11171  0002E2  0100               	movlb	0	; () banked
 11172  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11173  0002E6  ECB8  F008         	call	_printf	;wreg free
 11174                           
 11175                           ;Test.c: 265: updateServoPosition(1200, 1);
 11176  0002EA  0E04               	movlw	4
 11177  0002EC  0100               	movlb	0	; () banked
 11178  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11179  0002F0  0EB0               	movlw	176
 11180  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11181  0002F4  0E00               	movlw	0
 11182  0002F6  0100               	movlb	0	; () banked
 11183  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11184  0002FA  0E01               	movlw	1
 11185  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11186  0002FE  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11187                           
 11188                           ;Test.c: 266: TMR1ON = 1;
 11189  000302  80CD               	bsf	4045,0,c	;volatile
 11190                           
 11191                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11192  000304  0E00               	movlw	0
 11193  000306  0100               	movlb	0	; () banked
 11194  000308  6FAE               	movwf	actuatorTest@i_1644& (0+255),b
 11195  00030A                     l6785:
 11196                           
 11197                           ; BSR set to: 0
 11198  00030A  0E63               	movlw	99
 11199  00030C  0100               	movlb	0	; () banked
 11200  00030E  65AE               	cpfsgt	actuatorTest@i_1644& (0+255),b
 11201  000310  D001               	goto	l6789
 11202  000312  D00C               	goto	l6793
 11203  000314                     l6789:
 11204                           
 11205                           ; BSR set to: 0
 11206  000314  0E68               	movlw	104
 11207  000316  0100               	movlb	0	; () banked
 11208  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11209  00031A  0EE4               	movlw	228
 11210  00031C                     u7747:
 11211  00031C  2EE8               	decfsz	wreg,f,c
 11212  00031E  D7FE               	bra	u7747
 11213  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11214  000322  D7FC               	bra	u7747
 11215  000324  F000               	nop	
 11216  000326  0100               	movlb	0	; () banked
 11217  000328  2BAE               	incf	actuatorTest@i_1644& (0+255),f,b
 11218  00032A  D7EF               	goto	l6785
 11219  00032C                     l6793:
 11220                           
 11221                           ; BSR set to: 0
 11222  00032C  0E00               	movlw	0
 11223  00032E  0100               	movlb	0	; () banked
 11224  000330  6FAF               	movwf	actuatorTest@i_1645& (0+255),b
 11225  000332                     l6795:
 11226                           
 11227                           ; BSR set to: 0
 11228  000332  0E63               	movlw	99
 11229  000334  0100               	movlb	0	; () banked
 11230  000336  65AF               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11231  000338  D001               	goto	l6799
 11232  00033A  D00C               	goto	l6803
 11233  00033C                     l6799:
 11234                           
 11235                           ; BSR set to: 0
 11236  00033C  0E68               	movlw	104
 11237  00033E  0100               	movlb	0	; () banked
 11238  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11239  000342  0EE4               	movlw	228
 11240  000344                     u7757:
 11241  000344  2EE8               	decfsz	wreg,f,c
 11242  000346  D7FE               	bra	u7757
 11243  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11244  00034A  D7FC               	bra	u7757
 11245  00034C  F000               	nop	
 11246  00034E  0100               	movlb	0	; () banked
 11247  000350  2BAF               	incf	actuatorTest@i_1645& (0+255),f,b
 11248  000352  D7EF               	goto	l6795
 11249  000354                     l6803:
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11253  000354  0E80               	movlw	128
 11254  000356  ECE1  F023         	call	_lcdInst
 11255  00035A  0EC0               	movlw	192
 11256  00035C  ECE1  F023         	call	_lcdInst
 11257                           
 11258                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11259  000360  0E1B               	movlw	low STR_98
 11260  000362  0100               	movlb	0	; () banked
 11261  000364  6F8E               	movwf	printf@f& (0+255),b
 11262  000366  0EFC               	movlw	high STR_98
 11263  000368  0100               	movlb	0	; () banked
 11264  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11265  00036C  ECB8  F008         	call	_printf	;wreg free
 11266                           
 11267                           ;Test.c: 271: updateServoPosition(500, 1);
 11268  000370  0E01               	movlw	1
 11269  000372  0100               	movlb	0	; () banked
 11270  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11271  000376  0EF4               	movlw	244
 11272  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11273  00037A  0E00               	movlw	0
 11274  00037C  0100               	movlb	0	; () banked
 11275  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11276  000380  0E01               	movlw	1
 11277  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11278  000384  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11279                           
 11280                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11281  000388  0E00               	movlw	0
 11282  00038A  0100               	movlb	0	; () banked
 11283  00038C  6FB0               	movwf	actuatorTest@i_1647& (0+255),b
 11284  00038E                     l6811:
 11285                           
 11286                           ; BSR set to: 0
 11287  00038E  0E63               	movlw	99
 11288  000390  0100               	movlb	0	; () banked
 11289  000392  65B0               	cpfsgt	actuatorTest@i_1647& (0+255),b
 11290  000394  D001               	goto	l6815
 11291  000396  D00C               	goto	l6819
 11292  000398                     l6815:
 11293                           
 11294                           ; BSR set to: 0
 11295  000398  0E68               	movlw	104
 11296  00039A  0100               	movlb	0	; () banked
 11297  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11298  00039E  0EE4               	movlw	228
 11299  0003A0                     u7767:
 11300  0003A0  2EE8               	decfsz	wreg,f,c
 11301  0003A2  D7FE               	bra	u7767
 11302  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11303  0003A6  D7FC               	bra	u7767
 11304  0003A8  F000               	nop	
 11305  0003AA  0100               	movlb	0	; () banked
 11306  0003AC  2BB0               	incf	actuatorTest@i_1647& (0+255),f,b
 11307  0003AE  D7EF               	goto	l6811
 11308  0003B0                     l6819:
 11309                           
 11310                           ; BSR set to: 0
 11311  0003B0  0E00               	movlw	0
 11312  0003B2  0100               	movlb	0	; () banked
 11313  0003B4  6FB1               	movwf	actuatorTest@i_1648& (0+255),b
 11314  0003B6                     l6821:
 11315                           
 11316                           ; BSR set to: 0
 11317  0003B6  0E63               	movlw	99
 11318  0003B8  0100               	movlb	0	; () banked
 11319  0003BA  65B1               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11320  0003BC  D001               	goto	l6825
 11321  0003BE  D00C               	goto	l6829
 11322  0003C0                     l6825:
 11323                           
 11324                           ; BSR set to: 0
 11325  0003C0  0E68               	movlw	104
 11326  0003C2  0100               	movlb	0	; () banked
 11327  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11328  0003C6  0EE4               	movlw	228
 11329  0003C8                     u7777:
 11330  0003C8  2EE8               	decfsz	wreg,f,c
 11331  0003CA  D7FE               	bra	u7777
 11332  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11333  0003CE  D7FC               	bra	u7777
 11334  0003D0  F000               	nop	
 11335  0003D2  0100               	movlb	0	; () banked
 11336  0003D4  2BB1               	incf	actuatorTest@i_1648& (0+255),f,b
 11337  0003D6  D7EF               	goto	l6821
 11338  0003D8                     l6829:
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11342  0003D8  0E80               	movlw	128
 11343  0003DA  ECE1  F023         	call	_lcdInst
 11344  0003DE  0EC0               	movlw	192
 11345  0003E0  ECE1  F023         	call	_lcdInst
 11346                           
 11347                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11348  0003E4  0EF9               	movlw	low STR_99
 11349  0003E6  0100               	movlb	0	; () banked
 11350  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11351  0003EA  0EFB               	movlw	high STR_99
 11352  0003EC  0100               	movlb	0	; () banked
 11353  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11354  0003F0  ECB8  F008         	call	_printf	;wreg free
 11355                           
 11356                           ;Test.c: 276: updateServoPosition(2100, 1);
 11357  0003F4  0E08               	movlw	8
 11358  0003F6  0100               	movlb	0	; () banked
 11359  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11360  0003FA  0E34               	movlw	52
 11361  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11362  0003FE  0E00               	movlw	0
 11363  000400  0100               	movlb	0	; () banked
 11364  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11365  000404  0E01               	movlw	1
 11366  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11367  000408  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11368                           
 11369                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11370  00040C  0E00               	movlw	0
 11371  00040E  0100               	movlb	0	; () banked
 11372  000410  6FB2               	movwf	actuatorTest@i_1650& (0+255),b
 11373  000412                     l6837:
 11374                           
 11375                           ; BSR set to: 0
 11376  000412  0E63               	movlw	99
 11377  000414  0100               	movlb	0	; () banked
 11378  000416  65B2               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11379  000418  D001               	goto	l6841
 11380  00041A  D00C               	goto	l6845
 11381  00041C                     l6841:
 11382                           
 11383                           ; BSR set to: 0
 11384  00041C  0E68               	movlw	104
 11385  00041E  0100               	movlb	0	; () banked
 11386  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11387  000422  0EE4               	movlw	228
 11388  000424                     u7787:
 11389  000424  2EE8               	decfsz	wreg,f,c
 11390  000426  D7FE               	bra	u7787
 11391  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11392  00042A  D7FC               	bra	u7787
 11393  00042C  F000               	nop	
 11394  00042E  0100               	movlb	0	; () banked
 11395  000430  2BB2               	incf	actuatorTest@i_1650& (0+255),f,b
 11396  000432  D7EF               	goto	l6837
 11397  000434                     l6845:
 11398                           
 11399                           ; BSR set to: 0
 11400  000434  0E00               	movlw	0
 11401  000436  0100               	movlb	0	; () banked
 11402  000438  6FB3               	movwf	actuatorTest@i_1651& (0+255),b
 11403  00043A                     l6847:
 11404                           
 11405                           ; BSR set to: 0
 11406  00043A  0E63               	movlw	99
 11407  00043C  0100               	movlb	0	; () banked
 11408  00043E  65B3               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11409  000440  D001               	goto	l6851
 11410  000442  D00C               	goto	l6855
 11411  000444                     l6851:
 11412                           
 11413                           ; BSR set to: 0
 11414  000444  0E68               	movlw	104
 11415  000446  0100               	movlb	0	; () banked
 11416  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11417  00044A  0EE4               	movlw	228
 11418  00044C                     u7797:
 11419  00044C  2EE8               	decfsz	wreg,f,c
 11420  00044E  D7FE               	bra	u7797
 11421  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11422  000452  D7FC               	bra	u7797
 11423  000454  F000               	nop	
 11424  000456  0100               	movlb	0	; () banked
 11425  000458  2BB3               	incf	actuatorTest@i_1651& (0+255),f,b
 11426  00045A  D7EF               	goto	l6847
 11427  00045C                     l6855:
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11431  00045C  0E80               	movlw	128
 11432  00045E  ECE1  F023         	call	_lcdInst
 11433  000462  0EC0               	movlw	192
 11434  000464  ECE1  F023         	call	_lcdInst
 11435                           
 11436                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11437  000468  0E4E               	movlw	low STR_100
 11438  00046A  0100               	movlb	0	; () banked
 11439  00046C  6F8E               	movwf	printf@f& (0+255),b
 11440  00046E  0EFC               	movlw	high STR_100
 11441  000470  0100               	movlb	0	; () banked
 11442  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11443  000474  ECB8  F008         	call	_printf	;wreg free
 11444                           
 11445                           ;Test.c: 281: updateServoPosition(1700, 1);
 11446  000478  0E06               	movlw	6
 11447  00047A  0100               	movlb	0	; () banked
 11448  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11449  00047E  0EA4               	movlw	164
 11450  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11451  000482  0E00               	movlw	0
 11452  000484  0100               	movlb	0	; () banked
 11453  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11454  000488  0E01               	movlw	1
 11455  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11456  00048C  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11457                           
 11458                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11459  000490  0E00               	movlw	0
 11460  000492  0100               	movlb	0	; () banked
 11461  000494  6FB4               	movwf	actuatorTest@i_1653& (0+255),b
 11462  000496                     l6863:
 11463                           
 11464                           ; BSR set to: 0
 11465  000496  0E63               	movlw	99
 11466  000498  0100               	movlb	0	; () banked
 11467  00049A  65B4               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11468  00049C  D001               	goto	l6867
 11469  00049E  D00C               	goto	l6871
 11470  0004A0                     l6867:
 11471                           
 11472                           ; BSR set to: 0
 11473  0004A0  0E68               	movlw	104
 11474  0004A2  0100               	movlb	0	; () banked
 11475  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11476  0004A6  0EE4               	movlw	228
 11477  0004A8                     u7807:
 11478  0004A8  2EE8               	decfsz	wreg,f,c
 11479  0004AA  D7FE               	bra	u7807
 11480  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11481  0004AE  D7FC               	bra	u7807
 11482  0004B0  F000               	nop	
 11483  0004B2  0100               	movlb	0	; () banked
 11484  0004B4  2BB4               	incf	actuatorTest@i_1653& (0+255),f,b
 11485  0004B6  D7EF               	goto	l6863
 11486  0004B8                     l6871:
 11487                           
 11488                           ; BSR set to: 0
 11489  0004B8  0E00               	movlw	0
 11490  0004BA  0100               	movlb	0	; () banked
 11491  0004BC  6FB5               	movwf	actuatorTest@i_1654& (0+255),b
 11492  0004BE                     l6873:
 11493                           
 11494                           ; BSR set to: 0
 11495  0004BE  0E63               	movlw	99
 11496  0004C0  0100               	movlb	0	; () banked
 11497  0004C2  65B5               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11498  0004C4  D001               	goto	l6877
 11499  0004C6  D00C               	goto	l6881
 11500  0004C8                     l6877:
 11501                           
 11502                           ; BSR set to: 0
 11503  0004C8  0E68               	movlw	104
 11504  0004CA  0100               	movlb	0	; () banked
 11505  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11506  0004CE  0EE4               	movlw	228
 11507  0004D0                     u7817:
 11508  0004D0  2EE8               	decfsz	wreg,f,c
 11509  0004D2  D7FE               	bra	u7817
 11510  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11511  0004D6  D7FC               	bra	u7817
 11512  0004D8  F000               	nop	
 11513  0004DA  0100               	movlb	0	; () banked
 11514  0004DC  2BB5               	incf	actuatorTest@i_1654& (0+255),f,b
 11515  0004DE  D7EF               	goto	l6873
 11516  0004E0                     l6881:
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11520  0004E0  0E80               	movlw	128
 11521  0004E2  ECE1  F023         	call	_lcdInst
 11522  0004E6  0EC0               	movlw	192
 11523  0004E8  ECE1  F023         	call	_lcdInst
 11524                           
 11525                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11526  0004EC  0E5F               	movlw	low STR_101
 11527  0004EE  0100               	movlb	0	; () banked
 11528  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11529  0004F2  0EFC               	movlw	high STR_101
 11530  0004F4  0100               	movlb	0	; () banked
 11531  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11532  0004F8  ECB8  F008         	call	_printf	;wreg free
 11533                           
 11534                           ;Test.c: 286: updateServoPosition(750, 1);
 11535  0004FC  0E02               	movlw	2
 11536  0004FE  0100               	movlb	0	; () banked
 11537  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11538  000502  0EEE               	movlw	238
 11539  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11540  000506  0E00               	movlw	0
 11541  000508  0100               	movlb	0	; () banked
 11542  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11543  00050C  0E01               	movlw	1
 11544  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11545  000510  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11546                           
 11547                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11548  000514  0E00               	movlw	0
 11549  000516  0100               	movlb	0	; () banked
 11550  000518  6FB6               	movwf	actuatorTest@i_1656& (0+255),b
 11551  00051A                     l6889:
 11552                           
 11553                           ; BSR set to: 0
 11554  00051A  0E63               	movlw	99
 11555  00051C  0100               	movlb	0	; () banked
 11556  00051E  65B6               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11557  000520  D001               	goto	l6893
 11558  000522  D00C               	goto	l6897
 11559  000524                     l6893:
 11560                           
 11561                           ; BSR set to: 0
 11562  000524  0E68               	movlw	104
 11563  000526  0100               	movlb	0	; () banked
 11564  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11565  00052A  0EE4               	movlw	228
 11566  00052C                     u7827:
 11567  00052C  2EE8               	decfsz	wreg,f,c
 11568  00052E  D7FE               	bra	u7827
 11569  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11570  000532  D7FC               	bra	u7827
 11571  000534  F000               	nop	
 11572  000536  0100               	movlb	0	; () banked
 11573  000538  2BB6               	incf	actuatorTest@i_1656& (0+255),f,b
 11574  00053A  D7EF               	goto	l6889
 11575  00053C                     l6897:
 11576                           
 11577                           ; BSR set to: 0
 11578  00053C  0E00               	movlw	0
 11579  00053E  0100               	movlb	0	; () banked
 11580  000540  6FB7               	movwf	actuatorTest@i_1657& (0+255),b
 11581  000542                     l6899:
 11582                           
 11583                           ; BSR set to: 0
 11584  000542  0E63               	movlw	99
 11585  000544  0100               	movlb	0	; () banked
 11586  000546  65B7               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11587  000548  D001               	goto	l6903
 11588  00054A  D00C               	goto	l6907
 11589  00054C                     l6903:
 11590                           
 11591                           ; BSR set to: 0
 11592  00054C  0E68               	movlw	104
 11593  00054E  0100               	movlb	0	; () banked
 11594  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11595  000552  0EE4               	movlw	228
 11596  000554                     u7837:
 11597  000554  2EE8               	decfsz	wreg,f,c
 11598  000556  D7FE               	bra	u7837
 11599  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11600  00055A  D7FC               	bra	u7837
 11601  00055C  F000               	nop	
 11602  00055E  0100               	movlb	0	; () banked
 11603  000560  2BB7               	incf	actuatorTest@i_1657& (0+255),f,b
 11604  000562  D7EF               	goto	l6899
 11605  000564                     l6907:
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11609  000564  0E80               	movlw	128
 11610  000566  ECE1  F023         	call	_lcdInst
 11611  00056A  0EC0               	movlw	192
 11612  00056C  ECE1  F023         	call	_lcdInst
 11613                           
 11614                           ;Test.c: 290: printf("MID -- 2s       ");
 11615  000570  0ED7               	movlw	low STR_102
 11616  000572  0100               	movlb	0	; () banked
 11617  000574  6F8E               	movwf	printf@f& (0+255),b
 11618  000576  0EFB               	movlw	high STR_102
 11619  000578  0100               	movlb	0	; () banked
 11620  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11621  00057C  ECB8  F008         	call	_printf	;wreg free
 11622                           
 11623                           ;Test.c: 291: updateServoPosition(1200, 1);
 11624  000580  0E04               	movlw	4
 11625  000582  0100               	movlb	0	; () banked
 11626  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11627  000586  0EB0               	movlw	176
 11628  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11629  00058A  0E00               	movlw	0
 11630  00058C  0100               	movlb	0	; () banked
 11631  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11632  000590  0E01               	movlw	1
 11633  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11634  000594  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11635                           
 11636                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11637  000598  0E00               	movlw	0
 11638  00059A  0100               	movlb	0	; () banked
 11639  00059C  6FB8               	movwf	actuatorTest@i_1659& (0+255),b
 11640  00059E                     l6915:
 11641                           
 11642                           ; BSR set to: 0
 11643  00059E  0E63               	movlw	99
 11644  0005A0  0100               	movlb	0	; () banked
 11645  0005A2  65B8               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11646  0005A4  D001               	goto	l6919
 11647  0005A6  D00C               	goto	l6923
 11648  0005A8                     l6919:
 11649                           
 11650                           ; BSR set to: 0
 11651  0005A8  0E68               	movlw	104
 11652  0005AA  0100               	movlb	0	; () banked
 11653  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11654  0005AE  0EE4               	movlw	228
 11655  0005B0                     u7847:
 11656  0005B0  2EE8               	decfsz	wreg,f,c
 11657  0005B2  D7FE               	bra	u7847
 11658  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11659  0005B6  D7FC               	bra	u7847
 11660  0005B8  F000               	nop	
 11661  0005BA  0100               	movlb	0	; () banked
 11662  0005BC  2BB8               	incf	actuatorTest@i_1659& (0+255),f,b
 11663  0005BE  D7EF               	goto	l6915
 11664  0005C0                     l6923:
 11665                           
 11666                           ; BSR set to: 0
 11667  0005C0  0E00               	movlw	0
 11668  0005C2  0100               	movlb	0	; () banked
 11669  0005C4  6FB9               	movwf	actuatorTest@i_1660& (0+255),b
 11670  0005C6                     l6925:
 11671                           
 11672                           ; BSR set to: 0
 11673  0005C6  0E63               	movlw	99
 11674  0005C8  0100               	movlb	0	; () banked
 11675  0005CA  65B9               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11676  0005CC  D001               	goto	l6929
 11677  0005CE  D00C               	goto	l1135
 11678  0005D0                     l6929:
 11679                           
 11680                           ; BSR set to: 0
 11681  0005D0  0E68               	movlw	104
 11682  0005D2  0100               	movlb	0	; () banked
 11683  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11684  0005D6  0EE4               	movlw	228
 11685  0005D8                     u7857:
 11686  0005D8  2EE8               	decfsz	wreg,f,c
 11687  0005DA  D7FE               	bra	u7857
 11688  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11689  0005DE  D7FC               	bra	u7857
 11690  0005E0  F000               	nop	
 11691  0005E2  0100               	movlb	0	; () banked
 11692  0005E4  2BB9               	incf	actuatorTest@i_1660& (0+255),f,b
 11693  0005E6  D7EF               	goto	l6925
 11694  0005E8                     l1135:
 11695                           
 11696                           ; BSR set to: 0
 11697                           ;Test.c: 293: TMR1ON = 0;
 11698  0005E8  90CD               	bcf	4045,0,c	;volatile
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;Test.c: 300: printf("TST: TILT SERVO");
 11702  0005EA  0E3A               	movlw	low STR_103
 11703  0005EC  0100               	movlb	0	; () banked
 11704  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11705  0005F0  0EFE               	movlw	high STR_103
 11706  0005F2  0100               	movlb	0	; () banked
 11707  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11708  0005F6  ECB8  F008         	call	_printf	;wreg free
 11709                           
 11710                           ;Test.c: 301: lcdInst(0b11000000);;
 11711  0005FA  0EC0               	movlw	192
 11712  0005FC  ECE1  F023         	call	_lcdInst
 11713                           
 11714                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11715  000600  0E0A               	movlw	low STR_104
 11716  000602  0100               	movlb	0	; () banked
 11717  000604  6F8E               	movwf	printf@f& (0+255),b
 11718  000606  0EFC               	movlw	high STR_104
 11719  000608  0100               	movlb	0	; () banked
 11720  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11721  00060C  ECB8  F008         	call	_printf	;wreg free
 11722                           
 11723                           ;Test.c: 303: updateServoPosition(1150, 3);
 11724  000610  0E04               	movlw	4
 11725  000612  0100               	movlb	0	; () banked
 11726  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11727  000616  0E7E               	movlw	126
 11728  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11729  00061A  0E00               	movlw	0
 11730  00061C  0100               	movlb	0	; () banked
 11731  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11732  000620  0E03               	movlw	3
 11733  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11734  000624  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11735                           
 11736                           ;Test.c: 304: TMR3ON = 1;
 11737  000628  80B1               	bsf	4017,0,c	;volatile
 11738                           
 11739                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11740  00062A  0E00               	movlw	0
 11741  00062C  0100               	movlb	0	; () banked
 11742  00062E  6FBA               	movwf	actuatorTest@i_1663& (0+255),b
 11743  000630                     l6943:
 11744                           
 11745                           ; BSR set to: 0
 11746  000630  0E63               	movlw	99
 11747  000632  0100               	movlb	0	; () banked
 11748  000634  65BA               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11749  000636  D001               	goto	l6947
 11750  000638  D00C               	goto	l6951
 11751  00063A                     l6947:
 11752                           
 11753                           ; BSR set to: 0
 11754  00063A  0E68               	movlw	104
 11755  00063C  0100               	movlb	0	; () banked
 11756  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11757  000640  0EE4               	movlw	228
 11758  000642                     u7867:
 11759  000642  2EE8               	decfsz	wreg,f,c
 11760  000644  D7FE               	bra	u7867
 11761  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11762  000648  D7FC               	bra	u7867
 11763  00064A  F000               	nop	
 11764  00064C  0100               	movlb	0	; () banked
 11765  00064E  2BBA               	incf	actuatorTest@i_1663& (0+255),f,b
 11766  000650  D7EF               	goto	l6943
 11767  000652                     l6951:
 11768                           
 11769                           ; BSR set to: 0
 11770  000652  0E00               	movlw	0
 11771  000654  0100               	movlb	0	; () banked
 11772  000656  6FBB               	movwf	actuatorTest@i_1664& (0+255),b
 11773  000658                     l6953:
 11774                           
 11775                           ; BSR set to: 0
 11776  000658  0E63               	movlw	99
 11777  00065A  0100               	movlb	0	; () banked
 11778  00065C  65BB               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11779  00065E  D001               	goto	l6957
 11780  000660  D00C               	goto	l6961
 11781  000662                     l6957:
 11782                           
 11783                           ; BSR set to: 0
 11784  000662  0E68               	movlw	104
 11785  000664  0100               	movlb	0	; () banked
 11786  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11787  000668  0EE4               	movlw	228
 11788  00066A                     u7877:
 11789  00066A  2EE8               	decfsz	wreg,f,c
 11790  00066C  D7FE               	bra	u7877
 11791  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11792  000670  D7FC               	bra	u7877
 11793  000672  F000               	nop	
 11794  000674  0100               	movlb	0	; () banked
 11795  000676  2BBB               	incf	actuatorTest@i_1664& (0+255),f,b
 11796  000678  D7EF               	goto	l6953
 11797  00067A                     l6961:
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11801  00067A  0E80               	movlw	128
 11802  00067C  ECE1  F023         	call	_lcdInst
 11803  000680  0EC0               	movlw	192
 11804  000682  ECE1  F023         	call	_lcdInst
 11805                           
 11806                           ;Test.c: 308: printf("DROP -- 2s      ");
 11807  000686  0EE8               	movlw	low STR_105
 11808  000688  0100               	movlb	0	; () banked
 11809  00068A  6F8E               	movwf	printf@f& (0+255),b
 11810  00068C  0EFB               	movlw	high STR_105
 11811  00068E  0100               	movlb	0	; () banked
 11812  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11813  000692  ECB8  F008         	call	_printf	;wreg free
 11814                           
 11815                           ;Test.c: 309: updateServoPosition(1350, 3);
 11816  000696  0E05               	movlw	5
 11817  000698  0100               	movlb	0	; () banked
 11818  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11819  00069C  0E46               	movlw	70
 11820  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11821  0006A0  0E00               	movlw	0
 11822  0006A2  0100               	movlb	0	; () banked
 11823  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11824  0006A6  0E03               	movlw	3
 11825  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11826  0006AA  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11827                           
 11828                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11829  0006AE  0E00               	movlw	0
 11830  0006B0  0100               	movlb	0	; () banked
 11831  0006B2  6FBC               	movwf	actuatorTest@i_1666& (0+255),b
 11832  0006B4                     l6969:
 11833                           
 11834                           ; BSR set to: 0
 11835  0006B4  0E63               	movlw	99
 11836  0006B6  0100               	movlb	0	; () banked
 11837  0006B8  65BC               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11838  0006BA  D001               	goto	l6973
 11839  0006BC  D00C               	goto	l6977
 11840  0006BE                     l6973:
 11841                           
 11842                           ; BSR set to: 0
 11843  0006BE  0E68               	movlw	104
 11844  0006C0  0100               	movlb	0	; () banked
 11845  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11846  0006C4  0EE4               	movlw	228
 11847  0006C6                     u7887:
 11848  0006C6  2EE8               	decfsz	wreg,f,c
 11849  0006C8  D7FE               	bra	u7887
 11850  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11851  0006CC  D7FC               	bra	u7887
 11852  0006CE  F000               	nop	
 11853  0006D0  0100               	movlb	0	; () banked
 11854  0006D2  2BBC               	incf	actuatorTest@i_1666& (0+255),f,b
 11855  0006D4  D7EF               	goto	l6969
 11856  0006D6                     l6977:
 11857                           
 11858                           ; BSR set to: 0
 11859  0006D6  0E00               	movlw	0
 11860  0006D8  0100               	movlb	0	; () banked
 11861  0006DA  6FBD               	movwf	actuatorTest@i_1667& (0+255),b
 11862  0006DC                     l6979:
 11863                           
 11864                           ; BSR set to: 0
 11865  0006DC  0E63               	movlw	99
 11866  0006DE  0100               	movlb	0	; () banked
 11867  0006E0  65BD               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11868  0006E2  D001               	goto	l6983
 11869  0006E4  D00C               	goto	l6987
 11870  0006E6                     l6983:
 11871                           
 11872                           ; BSR set to: 0
 11873  0006E6  0E68               	movlw	104
 11874  0006E8  0100               	movlb	0	; () banked
 11875  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11876  0006EC  0EE4               	movlw	228
 11877  0006EE                     u7897:
 11878  0006EE  2EE8               	decfsz	wreg,f,c
 11879  0006F0  D7FE               	bra	u7897
 11880  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11881  0006F4  D7FC               	bra	u7897
 11882  0006F6  F000               	nop	
 11883  0006F8  0100               	movlb	0	; () banked
 11884  0006FA  2BBD               	incf	actuatorTest@i_1667& (0+255),f,b
 11885  0006FC  D7EF               	goto	l6979
 11886  0006FE                     l6987:
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11890  0006FE  0E80               	movlw	128
 11891  000700  ECE1  F023         	call	_lcdInst
 11892  000704  0EC0               	movlw	192
 11893  000706  ECE1  F023         	call	_lcdInst
 11894                           
 11895                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11896  00070A  0E0A               	movlw	low STR_104
 11897  00070C  0100               	movlb	0	; () banked
 11898  00070E  6F8E               	movwf	printf@f& (0+255),b
 11899  000710  0EFC               	movlw	high STR_104
 11900  000712  0100               	movlb	0	; () banked
 11901  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11902  000716  ECB8  F008         	call	_printf	;wreg free
 11903                           
 11904                           ;Test.c: 314: updateServoPosition(1150, 3);
 11905  00071A  0E04               	movlw	4
 11906  00071C  0100               	movlb	0	; () banked
 11907  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11908  000720  0E7E               	movlw	126
 11909  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11910  000724  0E00               	movlw	0
 11911  000726  0100               	movlb	0	; () banked
 11912  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11913  00072A  0E03               	movlw	3
 11914  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11915  00072E  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11916                           
 11917                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11918  000732  0E00               	movlw	0
 11919  000734  0100               	movlb	0	; () banked
 11920  000736  6FBE               	movwf	actuatorTest@i_1669& (0+255),b
 11921  000738                     l6995:
 11922                           
 11923                           ; BSR set to: 0
 11924  000738  0E63               	movlw	99
 11925  00073A  0100               	movlb	0	; () banked
 11926  00073C  65BE               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11927  00073E  D001               	goto	l6999
 11928  000740  D00C               	goto	l7003
 11929  000742                     l6999:
 11930                           
 11931                           ; BSR set to: 0
 11932  000742  0E68               	movlw	104
 11933  000744  0100               	movlb	0	; () banked
 11934  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11935  000748  0EE4               	movlw	228
 11936  00074A                     u7907:
 11937  00074A  2EE8               	decfsz	wreg,f,c
 11938  00074C  D7FE               	bra	u7907
 11939  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11940  000750  D7FC               	bra	u7907
 11941  000752  F000               	nop	
 11942  000754  0100               	movlb	0	; () banked
 11943  000756  2BBE               	incf	actuatorTest@i_1669& (0+255),f,b
 11944  000758  D7EF               	goto	l6995
 11945  00075A                     l7003:
 11946                           
 11947                           ; BSR set to: 0
 11948  00075A  0E00               	movlw	0
 11949  00075C  0100               	movlb	0	; () banked
 11950  00075E  6FBF               	movwf	actuatorTest@i_1670& (0+255),b
 11951  000760                     l7005:
 11952                           
 11953                           ; BSR set to: 0
 11954  000760  0E63               	movlw	99
 11955  000762  0100               	movlb	0	; () banked
 11956  000764  65BF               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11957  000766  D001               	goto	l7009
 11958  000768  D00C               	goto	l1147
 11959  00076A                     l7009:
 11960                           
 11961                           ; BSR set to: 0
 11962  00076A  0E68               	movlw	104
 11963  00076C  0100               	movlb	0	; () banked
 11964  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11965  000770  0EE4               	movlw	228
 11966  000772                     u7917:
 11967  000772  2EE8               	decfsz	wreg,f,c
 11968  000774  D7FE               	bra	u7917
 11969  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11970  000778  D7FC               	bra	u7917
 11971  00077A  F000               	nop	
 11972  00077C  0100               	movlb	0	; () banked
 11973  00077E  2BBF               	incf	actuatorTest@i_1670& (0+255),f,b
 11974  000780  D7EF               	goto	l7005
 11975  000782                     l1147:
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;Test.c: 316: TMR3ON = 0;
 11979  000782  90B1               	bcf	4017,0,c	;volatile
 11980                           
 11981                           ;Test.c: 317: (INTCONbits.GIE = 0);
 11982  000784  9EF2               	bcf	intcon,7,c	;volatile
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11986  000786  0E01               	movlw	1
 11987  000788  ECE1  F023         	call	_lcdInst
 11988  00078C  0E68               	movlw	104
 11989  00078E  0100               	movlb	0	; () banked
 11990  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11991  000792  0EE4               	movlw	228
 11992  000794                     u7927:
 11993  000794  2EE8               	decfsz	wreg,f,c
 11994  000796  D7FE               	bra	u7927
 11995  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11996  00079A  D7FC               	bra	u7927
 11997  00079C  F000               	nop	
 11998  00079E  0E80               	movlw	128
 11999  0007A0  ECE1  F023         	call	_lcdInst
 12000                           
 12001                           ;Test.c: 323: printf("TST: CAM SERVO");
 12002  0007A4  0E96               	movlw	low STR_107
 12003  0007A6  0100               	movlb	0	; () banked
 12004  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12005  0007AA  0EFE               	movlw	high STR_107
 12006  0007AC  0100               	movlb	0	; () banked
 12007  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12008  0007B0  ECB8  F008         	call	_printf	;wreg free
 12009                           
 12010                           ;Test.c: 324: lcdInst(0b11000000);;
 12011  0007B4  0EC0               	movlw	192
 12012  0007B6  ECE1  F023         	call	_lcdInst
 12013                           
 12014                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 12015  0007BA  0E78               	movlw	low STR_108
 12016  0007BC  0100               	movlb	0	; () banked
 12017  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12018  0007C0  0EFE               	movlw	high STR_108
 12019  0007C2  0100               	movlb	0	; () banked
 12020  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12021  0007C6  ECB8  F008         	call	_printf	;wreg free
 12022                           
 12023                           ;Test.c: 326: LATCbits.LATC0 = 1;
 12024  0007CA  808B               	bsf	3979,0,c	;volatile
 12025                           
 12026                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12027  0007CC  0E00               	movlw	0
 12028  0007CE  0100               	movlb	0	; () banked
 12029  0007D0  6FC0               	movwf	actuatorTest@i_1673& (0+255),b
 12030  0007D2                     l7029:
 12031                           
 12032                           ; BSR set to: 0
 12033  0007D2  0E63               	movlw	99
 12034  0007D4  0100               	movlb	0	; () banked
 12035  0007D6  65C0               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12036  0007D8  D001               	goto	l7033
 12037  0007DA  D00C               	goto	l7037
 12038  0007DC                     l7033:
 12039                           
 12040                           ; BSR set to: 0
 12041  0007DC  0E68               	movlw	104
 12042  0007DE  0100               	movlb	0	; () banked
 12043  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12044  0007E2  0EE4               	movlw	228
 12045  0007E4                     u7937:
 12046  0007E4  2EE8               	decfsz	wreg,f,c
 12047  0007E6  D7FE               	bra	u7937
 12048  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12049  0007EA  D7FC               	bra	u7937
 12050  0007EC  F000               	nop	
 12051  0007EE  0100               	movlb	0	; () banked
 12052  0007F0  2BC0               	incf	actuatorTest@i_1673& (0+255),f,b
 12053  0007F2  D7EF               	goto	l7029
 12054  0007F4                     l7037:
 12055                           
 12056                           ; BSR set to: 0
 12057  0007F4  0E00               	movlw	0
 12058  0007F6  0100               	movlb	0	; () banked
 12059  0007F8  6FC1               	movwf	actuatorTest@i_1674& (0+255),b
 12060  0007FA                     l7039:
 12061                           
 12062                           ; BSR set to: 0
 12063  0007FA  0E63               	movlw	99
 12064  0007FC  0100               	movlb	0	; () banked
 12065  0007FE  65C1               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12066  000800  D001               	goto	l7043
 12067  000802  D00C               	goto	l7047
 12068  000804                     l7043:
 12069                           
 12070                           ; BSR set to: 0
 12071  000804  0E68               	movlw	104
 12072  000806  0100               	movlb	0	; () banked
 12073  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12074  00080A  0EE4               	movlw	228
 12075  00080C                     u7947:
 12076  00080C  2EE8               	decfsz	wreg,f,c
 12077  00080E  D7FE               	bra	u7947
 12078  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12079  000812  D7FC               	bra	u7947
 12080  000814  F000               	nop	
 12081  000816  0100               	movlb	0	; () banked
 12082  000818  2BC1               	incf	actuatorTest@i_1674& (0+255),f,b
 12083  00081A  D7EF               	goto	l7039
 12084  00081C                     l7047:
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12088  00081C  0E80               	movlw	128
 12089  00081E  ECE1  F023         	call	_lcdInst
 12090  000822  0EC0               	movlw	192
 12091  000824  ECE1  F023         	call	_lcdInst
 12092                           
 12093                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 12094  000828  0E69               	movlw	low STR_109
 12095  00082A  0100               	movlb	0	; () banked
 12096  00082C  6F8E               	movwf	printf@f& (0+255),b
 12097  00082E  0EFE               	movlw	high STR_109
 12098  000830  0100               	movlb	0	; () banked
 12099  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12100  000834  ECB8  F008         	call	_printf	;wreg free
 12101                           
 12102                           ;Test.c: 332: for(i=0;i<10000;i++)
 12103  000838  0E00               	movlw	0
 12104  00083A  0100               	movlb	0	; () banked
 12105  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12106  00083E  0E00               	movlw	0
 12107  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12108  000842                     l7053:
 12109                           
 12110                           ; BSR set to: 0
 12111  000842  0100               	movlb	0	; () banked
 12112  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12113  000846  D008               	goto	l1152
 12114  000848  0E10               	movlw	16
 12115  00084A  0100               	movlb	0	; () banked
 12116  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12117  00084E  0E27               	movlw	39
 12118  000850  0100               	movlb	0	; () banked
 12119  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12120  000854  B0D8               	btfsc	status,0,c
 12121  000856  D00D               	goto	l7063
 12122  000858                     l1152:
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;Test.c: 333: {
 12126                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12127  000858  808B               	bsf	3979,0,c	;volatile
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12131  00085A  0E1A               	movlw	26
 12132  00085C                     u7957:
 12133  00085C  2EE8               	decfsz	wreg,f,c
 12134  00085E  D7FE               	bra	u7957
 12135  000860  D000               	nop2	
 12136                           
 12137                           ;Test.c: 336: LATCbits.LATC0 = 0;
 12138  000862  908B               	bcf	3979,0,c	;volatile
 12139                           
 12140                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12141  000864  0EF0               	movlw	240
 12142  000866                     u7967:
 12143  000866  2EE8               	decfsz	wreg,f,c
 12144  000868  D7FE               	bra	u7967
 12145  00086A  0100               	movlb	0	; () banked
 12146  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12147  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12148  000870  D7E8               	goto	l7053
 12149  000872                     l7063:
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;Test.c: 338: }
 12153                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12154  000872  0E00               	movlw	0
 12155  000874  0100               	movlb	0	; () banked
 12156  000876  6FC2               	movwf	actuatorTest@i_1676& (0+255),b
 12157  000878                     l7065:
 12158                           
 12159                           ; BSR set to: 0
 12160  000878  0E63               	movlw	99
 12161  00087A  0100               	movlb	0	; () banked
 12162  00087C  65C2               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12163  00087E  D001               	goto	l7069
 12164  000880  D00C               	goto	l7073
 12165  000882                     l7069:
 12166                           
 12167                           ; BSR set to: 0
 12168  000882  0E68               	movlw	104
 12169  000884  0100               	movlb	0	; () banked
 12170  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12171  000888  0EE4               	movlw	228
 12172  00088A                     u7977:
 12173  00088A  2EE8               	decfsz	wreg,f,c
 12174  00088C  D7FE               	bra	u7977
 12175  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12176  000890  D7FC               	bra	u7977
 12177  000892  F000               	nop	
 12178  000894  0100               	movlb	0	; () banked
 12179  000896  2BC2               	incf	actuatorTest@i_1676& (0+255),f,b
 12180  000898  D7EF               	goto	l7065
 12181  00089A                     l7073:
 12182                           
 12183                           ; BSR set to: 0
 12184  00089A  0E00               	movlw	0
 12185  00089C  0100               	movlb	0	; () banked
 12186  00089E  6FC3               	movwf	actuatorTest@i_1677& (0+255),b
 12187  0008A0                     l7075:
 12188                           
 12189                           ; BSR set to: 0
 12190  0008A0  0E63               	movlw	99
 12191  0008A2  0100               	movlb	0	; () banked
 12192  0008A4  65C3               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12193  0008A6  D001               	goto	l7079
 12194  0008A8  D00C               	goto	l7083
 12195  0008AA                     l7079:
 12196                           
 12197                           ; BSR set to: 0
 12198  0008AA  0E68               	movlw	104
 12199  0008AC  0100               	movlb	0	; () banked
 12200  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12201  0008B0  0EE4               	movlw	228
 12202  0008B2                     u7987:
 12203  0008B2  2EE8               	decfsz	wreg,f,c
 12204  0008B4  D7FE               	bra	u7987
 12205  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12206  0008B8  D7FC               	bra	u7987
 12207  0008BA  F000               	nop	
 12208  0008BC  0100               	movlb	0	; () banked
 12209  0008BE  2BC3               	incf	actuatorTest@i_1677& (0+255),f,b
 12210  0008C0  D7EF               	goto	l7075
 12211  0008C2                     l7083:
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;Test.c: 341: machine_state = Testing_state;
 12215  0008C2  0E03               	movlw	3
 12216  0008C4  0100               	movlb	0	; () banked
 12217  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12218                           
 12219                           ; BSR set to: 0
 12220  0008C8  0012               	return		;funcret
 12221  0008CA                     __end_of_actuatorTest:
 12222                           	opt stack 0
 12223                           tblptru	equ	0xFF8
 12224                           tblptrh	equ	0xFF7
 12225                           tblptrl	equ	0xFF6
 12226                           tablat	equ	0xFF5
 12227                           prodh	equ	0xFF4
 12228                           prodl	equ	0xFF3
 12229                           intcon	equ	0xFF2
 12230                           intcon2	equ	0xFF1
 12231                           intcon3	equ	0xFF0
 12232                           postinc0	equ	0xFEE
 12233                           wreg	equ	0xFE8
 12234                           postdec1	equ	0xFE5
 12235                           fsr1l	equ	0xFE1
 12236                           indf2	equ	0xFDF
 12237                           postinc2	equ	0xFDE
 12238                           postdec2	equ	0xFDD
 12239                           fsr2h	equ	0xFDA
 12240                           fsr2l	equ	0xFD9
 12241                           status	equ	0xFD8
 12242                           
 12243 ;; *************** function _ToggleTestA5 *****************
 12244 ;; Defined at:
 12245 ;;		line 490 in file "Test.c"
 12246 ;; Parameters:    Size  Location     Type
 12247 ;;		None
 12248 ;; Auto vars:     Size  Location     Type
 12249 ;;  on              2   44[BANK0 ] int 
 12250 ;; Return value:  Size  Location     Type
 12251 ;;                  1    wreg      void 
 12252 ;; Registers used:
 12253 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12254 ;; Tracked objects:
 12255 ;;		On entry : 0/0
 12256 ;;		On exit  : 0/0
 12257 ;;		Unchanged: 0/0
 12258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12262 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12263 ;;Total ram usage:        3 bytes
 12264 ;; Hardware stack levels used:    1
 12265 ;; Hardware stack levels required when called:   10
 12266 ;; This function calls:
 12267 ;;		_lcdInst
 12268 ;;		_printf
 12269 ;; This function is called by:
 12270 ;;		_Test
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           	psect	text42
 12275  003A30                     __ptext42:
 12276                           	opt stack 0
 12277  003A30                     _ToggleTestA5:
 12278                           	opt stack 19
 12279                           
 12280                           ;Test.c: 491: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;incstack = 0
 12284  003A30  0E01               	movlw	1
 12285  003A32  ECE1  F023         	call	_lcdInst
 12286  003A36  0E68               	movlw	104
 12287  003A38  0100               	movlb	0	; () banked
 12288  003A3A  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12289  003A3C  0EE4               	movlw	228
 12290  003A3E                     u7997:
 12291  003A3E  2EE8               	decfsz	wreg,f,c
 12292  003A40  D7FE               	bra	u7997
 12293  003A42  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12294  003A44  D7FC               	bra	u7997
 12295  003A46  F000               	nop	
 12296  003A48  0E80               	movlw	128
 12297  003A4A  ECE1  F023         	call	_lcdInst
 12298                           
 12299                           ;Test.c: 492: printf("D WILL RETURN   ");
 12300  003A4E  0E3D               	movlw	low STR_114
 12301  003A50  0100               	movlb	0	; () banked
 12302  003A52  6F8E               	movwf	printf@f& (0+255),b
 12303  003A54  0EFC               	movlw	high STR_114
 12304  003A56  0100               	movlb	0	; () banked
 12305  003A58  6F8F               	movwf	(printf@f+1)& (0+255),b
 12306  003A5A  ECB8  F008         	call	_printf	;wreg free
 12307                           
 12308                           ;Test.c: 493: lcdInst(0b11000000);;
 12309  003A5E  0EC0               	movlw	192
 12310  003A60  ECE1  F023         	call	_lcdInst
 12311                           
 12312                           ;Test.c: 494: printf("ELSE TOGGLES RA5");
 12313  003A64  0E70               	movlw	low STR_115
 12314  003A66  0100               	movlb	0	; () banked
 12315  003A68  6F8E               	movwf	printf@f& (0+255),b
 12316  003A6A  0EFC               	movlw	high STR_115
 12317  003A6C  0100               	movlb	0	; () banked
 12318  003A6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12319  003A70  ECB8  F008         	call	_printf	;wreg free
 12320                           
 12321                           ;Test.c: 495: int on = 0;
 12322  003A74  0E00               	movlw	0
 12323  003A76  0100               	movlb	0	; () banked
 12324  003A78  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12325  003A7A  0E00               	movlw	0
 12326  003A7C  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12327  003A7E                     l1214:
 12328  003A7E  A281               	btfss	3969,1,c	;volatile
 12329  003A80  D7FE               	goto	l1214
 12330                           
 12331                           ;Test.c: 500: }
 12332                           ;Test.c: 501: if(PORTB >> 4 == 0b1111){
 12333  003A82  3881               	swapf	3969,w,c	;volatile
 12334  003A84  0B0F               	andlw	15
 12335  003A86  0A0F               	xorlw	15
 12336  003A88  B4D8               	btfsc	status,2,c
 12337  003A8A  0012               	return	
 12338                           
 12339                           ;Test.c: 504: else{
 12340                           ;Test.c: 505: if(on == 0){
 12341                           
 12342                           ;Test.c: 503: }
 12343                           
 12344                           ;Test.c: 502: break;
 12345  003A8C  0100               	movlb	0	; () banked
 12346  003A8E  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12347  003A90  0100               	movlb	0	; () banked
 12348  003A92  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12349  003A94  A4D8               	btfss	status,2,c
 12350  003A96  D007               	goto	l7141
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;Test.c: 506: on = 1;
 12354  003A98  0E00               	movlw	0
 12355  003A9A  0100               	movlb	0	; () banked
 12356  003A9C  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12357  003A9E  0E01               	movlw	1
 12358  003AA0  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12359                           
 12360                           ; BSR set to: 0
 12361                           ;Test.c: 507: LATAbits.LATA5 = 1;
 12362  003AA2  8A89               	bsf	3977,5,c	;volatile
 12363                           
 12364                           ;Test.c: 508: }
 12365  003AA4  D006               	goto	l1222
 12366  003AA6                     l7141:
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;Test.c: 509: else{
 12370                           ;Test.c: 510: on = 0;
 12371  003AA6  0E00               	movlw	0
 12372  003AA8  0100               	movlb	0	; () banked
 12373  003AAA  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12374  003AAC  0E00               	movlw	0
 12375  003AAE  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;Test.c: 511: LATAbits.LATA5 = 0;
 12379  003AB0  9A89               	bcf	3977,5,c	;volatile
 12380  003AB2                     l1222:
 12381  003AB2  A281               	btfss	3969,1,c	;volatile
 12382  003AB4  D7E4               	goto	l1214
 12383  003AB6  D7FD               	goto	l1222
 12384  003AB8                     __end_of_ToggleTestA5:
 12385                           	opt stack 0
 12386                           tblptru	equ	0xFF8
 12387                           tblptrh	equ	0xFF7
 12388                           tblptrl	equ	0xFF6
 12389                           tablat	equ	0xFF5
 12390                           prodh	equ	0xFF4
 12391                           prodl	equ	0xFF3
 12392                           intcon	equ	0xFF2
 12393                           intcon2	equ	0xFF1
 12394                           intcon3	equ	0xFF0
 12395                           postinc0	equ	0xFEE
 12396                           wreg	equ	0xFE8
 12397                           postdec1	equ	0xFE5
 12398                           fsr1l	equ	0xFE1
 12399                           indf2	equ	0xFDF
 12400                           postinc2	equ	0xFDE
 12401                           postdec2	equ	0xFDD
 12402                           fsr2h	equ	0xFDA
 12403                           fsr2l	equ	0xFD9
 12404                           status	equ	0xFD8
 12405                           
 12406 ;; *************** function _PusherTestA5 *****************
 12407 ;; Defined at:
 12408 ;;		line 463 in file "Test.c"
 12409 ;; Parameters:    Size  Location     Type
 12410 ;;		None
 12411 ;; Auto vars:     Size  Location     Type
 12412 ;;		None
 12413 ;; Return value:  Size  Location     Type
 12414 ;;                  1    wreg      void 
 12415 ;; Registers used:
 12416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12426 ;;Total ram usage:        2 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:   10
 12429 ;; This function calls:
 12430 ;;		_lcdInst
 12431 ;;		_printf
 12432 ;; This function is called by:
 12433 ;;		_Test
 12434 ;; This function uses a non-reentrant model
 12435 ;;
 12436                           
 12437                           	psect	text43
 12438  003F6A                     __ptext43:
 12439                           	opt stack 0
 12440  003F6A                     _PusherTestA5:
 12441                           	opt stack 19
 12442                           
 12443                           ;Test.c: 464: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12444                           
 12445                           ;incstack = 0
 12446  003F6A  0E01               	movlw	1
 12447  003F6C  ECE1  F023         	call	_lcdInst
 12448  003F70  0E68               	movlw	104
 12449  003F72  0100               	movlb	0	; () banked
 12450  003F74  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12451  003F76  0EE4               	movlw	228
 12452  003F78                     u8007:
 12453  003F78  2EE8               	decfsz	wreg,f,c
 12454  003F7A  D7FE               	bra	u8007
 12455  003F7C  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12456  003F7E  D7FC               	bra	u8007
 12457  003F80  F000               	nop	
 12458  003F82  0E80               	movlw	128
 12459  003F84  ECE1  F023         	call	_lcdInst
 12460                           
 12461                           ;Test.c: 465: printf("PUSHER TST");
 12462  003F88  0E71               	movlw	low STR_113
 12463  003F8A  0100               	movlb	0	; () banked
 12464  003F8C  6F8E               	movwf	printf@f& (0+255),b
 12465  003F8E  0EFF               	movlw	high STR_113
 12466  003F90  0100               	movlb	0	; () banked
 12467  003F92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12468  003F94  ECB8  F008         	call	_printf	;wreg free
 12469  003F98                     l1202:
 12470  003F98  A281               	btfss	3969,1,c	;volatile
 12471  003F9A  D7FE               	goto	l1202
 12472                           
 12473                           ;Test.c: 471: }
 12474                           ;Test.c: 482: LATAbits.LATA4 = 1;
 12475  003F9C  8889               	bsf	3977,4,c	;volatile
 12476                           
 12477                           ;Test.c: 483: _delay((unsigned long)((100)*(32000000/4000.0)));
 12478  003F9E  0E05               	movlw	5
 12479  003FA0  0100               	movlb	0	; () banked
 12480  003FA2  6FAC               	movwf	(??_PusherTestA5+1)& (0+255),b
 12481  003FA4  0E0F               	movlw	15
 12482  003FA6  0100               	movlb	0	; () banked
 12483  003FA8  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12484  003FAA  0EF1               	movlw	241
 12485  003FAC                     u8017:
 12486  003FAC  2EE8               	decfsz	wreg,f,c
 12487  003FAE  D7FE               	bra	u8017
 12488  003FB0  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12489  003FB2  D7FC               	bra	u8017
 12490  003FB4  2FAC               	decfsz	(??_PusherTestA5+1)& (0+255),f,b
 12491  003FB6  D7FA               	bra	u8017
 12492                           
 12493                           ;Test.c: 484: LATAbits.LATA4 = 0;
 12494  003FB8  9889               	bcf	3977,4,c	;volatile
 12495  003FBA                     l1205:
 12496  003FBA  A281               	btfss	3969,1,c	;volatile
 12497  003FBC  D7ED               	goto	l1202
 12498  003FBE  D7FD               	goto	l1205
 12499  003FC0                     __end_of_PusherTestA5:
 12500                           	opt stack 0
 12501                           tblptru	equ	0xFF8
 12502                           tblptrh	equ	0xFF7
 12503                           tblptrl	equ	0xFF6
 12504                           tablat	equ	0xFF5
 12505                           prodh	equ	0xFF4
 12506                           prodl	equ	0xFF3
 12507                           intcon	equ	0xFF2
 12508                           intcon2	equ	0xFF1
 12509                           intcon3	equ	0xFF0
 12510                           postinc0	equ	0xFEE
 12511                           wreg	equ	0xFE8
 12512                           postdec1	equ	0xFE5
 12513                           fsr1l	equ	0xFE1
 12514                           indf2	equ	0xFDF
 12515                           postinc2	equ	0xFDE
 12516                           postdec2	equ	0xFDD
 12517                           fsr2h	equ	0xFDA
 12518                           fsr2l	equ	0xFD9
 12519                           status	equ	0xFD8
 12520                           
 12521 ;; *************** function _PortTests *****************
 12522 ;; Defined at:
 12523 ;;		line 395 in file "Test.c"
 12524 ;; Parameters:    Size  Location     Type
 12525 ;;		None
 12526 ;; Auto vars:     Size  Location     Type
 12527 ;;		None
 12528 ;; Return value:  Size  Location     Type
 12529 ;;                  1    wreg      void 
 12530 ;; Registers used:
 12531 ;;		wreg, status,2, status,0
 12532 ;; Tracked objects:
 12533 ;;		On entry : 0/0
 12534 ;;		On exit  : 0/0
 12535 ;;		Unchanged: 0/0
 12536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12541 ;;Total ram usage:        2 bytes
 12542 ;; Hardware stack levels used:    1
 12543 ;; Hardware stack levels required when called:    7
 12544 ;; This function calls:
 12545 ;;		Nothing
 12546 ;; This function is called by:
 12547 ;;		_Test
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           	psect	text44
 12552  003B3E                     __ptext44:
 12553                           	opt stack 0
 12554  003B3E                     _PortTests:
 12555                           	opt stack 22
 12556  003B3E                     l1165:
 12557  003B3E  A281               	btfss	3969,1,c	;volatile
 12558  003B40  D7FE               	goto	l1165
 12559                           
 12560                           ;Test.c: 399: var = PORTB >> 4;
 12561  003B42  CF81 F080          	movff	3969,??_PortTests	;volatile
 12562  003B46  0100               	movlb	0	; () banked
 12563  003B48  3B80               	swapf	??_PortTests& (0+255),f,b
 12564  003B4A  0E0F               	movlw	15
 12565  003B4C  1780               	andwf	??_PortTests& (0+255),f,b
 12566  003B4E  0100               	movlb	0	; () banked
 12567  003B50  5180               	movf	??_PortTests& (0+255),w,b
 12568  003B52  0100               	movlb	0	; () banked
 12569  003B54  6FFA               	movwf	_var& (0+255),b
 12570  003B56  6BFB               	clrf	(_var+1)& (0+255),b
 12571                           
 12572                           ;Test.c: 400: switch(var){
 12573  003B58  D00C               	goto	l7161
 12574  003B5A                     l1169:
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;Test.c: 402: LATEbits.LATE0 = 1;
 12578  003B5A  808D               	bsf	3981,0,c	;volatile
 12579                           
 12580                           ;Test.c: 403: break;
 12581  003B5C  D027               	goto	l1177
 12582  003B5E                     l1171:
 12583                           
 12584                           ; BSR set to: 0
 12585                           ;Test.c: 405: LATEbits.LATE1 = 1;
 12586  003B5E  828D               	bsf	3981,1,c	;volatile
 12587                           
 12588                           ;Test.c: 406: break;
 12589  003B60  D025               	goto	l1177
 12590  003B62                     l1172:
 12591                           
 12592                           ; BSR set to: 0
 12593                           ;Test.c: 408: LATDbits.LATD0 = 1;
 12594  003B62  808C               	bsf	3980,0,c	;volatile
 12595                           
 12596                           ;Test.c: 409: break;
 12597  003B64  D023               	goto	l1177
 12598  003B66                     l1173:
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;Test.c: 411: LATAbits.LATA3 = 1;
 12602  003B66  8689               	bsf	3977,3,c	;volatile
 12603                           
 12604                           ;Test.c: 412: break;
 12605  003B68  D021               	goto	l1177
 12606  003B6A                     l1174:
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;Test.c: 414: LATAbits.LATA4 = 1;
 12610  003B6A  8889               	bsf	3977,4,c	;volatile
 12611                           
 12612                           ;Test.c: 415: break;
 12613  003B6C  D01F               	goto	l1177
 12614  003B6E                     l1175:
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;Test.c: 417: LATAbits.LATA5 = 1;
 12618  003B6E  8A89               	bsf	3977,5,c	;volatile
 12619                           
 12620                           ; BSR set to: 0
 12621                           ;Test.c: 421: }
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;Test.c: 420: break;
 12625                           
 12626                           ;Test.c: 419: default:
 12627                           
 12628                           ;Test.c: 418: break;
 12629  003B70  D01D               	goto	l1177
 12630  003B72                     l7161:
 12631                           
 12632                           ; BSR set to: 0
 12633  003B72  C0FA  F080         	movff	_var,??_PortTests
 12634  003B76  C0FB  F081         	movff	_var+1,??_PortTests+1
 12635                           
 12636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12637                           ; Switch size 1, requested type "space"
 12638                           ; Number of cases is 1, Range of values is 0 to 0
 12639                           ; switch strategies available:
 12640                           ; Name         Instructions Cycles
 12641                           ; simple_byte            4     3 (average)
 12642                           ;	Chosen strategy is simple_byte
 12643  003B7A  0100               	movlb	0	; () banked
 12644  003B7C  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12645  003B7E  0A00               	xorlw	0	; case 0
 12646  003B80  A4D8               	btfss	status,2,c
 12647  003B82  D014               	goto	l1177
 12648                           
 12649                           ; BSR set to: 0
 12650                           ; Switch size 1, requested type "space"
 12651                           ; Number of cases is 6, Range of values is 0 to 5
 12652                           ; switch strategies available:
 12653                           ; Name         Instructions Cycles
 12654                           ; simple_byte           19    10 (average)
 12655                           ;	Chosen strategy is simple_byte
 12656  003B84  0100               	movlb	0	; () banked
 12657  003B86  5180               	movf	??_PortTests& (0+255),w,b
 12658  003B88  0A00               	xorlw	0	; case 0
 12659  003B8A  B4D8               	btfsc	status,2,c
 12660  003B8C  D7E6               	goto	l1169
 12661  003B8E  0A01               	xorlw	1	; case 1
 12662  003B90  B4D8               	btfsc	status,2,c
 12663  003B92  D7E5               	goto	l1171
 12664  003B94  0A03               	xorlw	3	; case 2
 12665  003B96  B4D8               	btfsc	status,2,c
 12666  003B98  D7E4               	goto	l1172
 12667  003B9A  0A01               	xorlw	1	; case 3
 12668  003B9C  B4D8               	btfsc	status,2,c
 12669  003B9E  D7E3               	goto	l1173
 12670  003BA0  0A07               	xorlw	7	; case 4
 12671  003BA2  B4D8               	btfsc	status,2,c
 12672  003BA4  D7E2               	goto	l1174
 12673  003BA6  0A01               	xorlw	1	; case 5
 12674  003BA8  B4D8               	btfsc	status,2,c
 12675  003BAA  D7E1               	goto	l1175
 12676  003BAC                     l1177:
 12677  003BAC  B281               	btfsc	3969,1,c	;volatile
 12678  003BAE  D7FE               	goto	l1177
 12679                           
 12680                           ;Test.c: 423: __nop();
 12681  003BB0  F000               	nop	
 12682                           
 12683                           ;Test.c: 424: __nop();
 12684  003BB2  F000               	nop	
 12685                           
 12686                           ;Test.c: 425: LATA = 0x00;
 12687  003BB4  0E00               	movlw	0
 12688  003BB6  6E89               	movwf	3977,c	;volatile
 12689                           
 12690                           ;Test.c: 426: LATE = 0x00;
 12691  003BB8  0E00               	movlw	0
 12692  003BBA  6E8D               	movwf	3981,c	;volatile
 12693                           
 12694                           ;Test.c: 427: LATD = 0x00; }
 12695  003BBC  0E00               	movlw	0
 12696  003BBE  6E8C               	movwf	3980,c	;volatile
 12697  003BC0  D7BE               	goto	l1165
 12698  003BC2                     __end_of_PortTests:
 12699                           	opt stack 0
 12700                           tblptru	equ	0xFF8
 12701                           tblptrh	equ	0xFF7
 12702                           tblptrl	equ	0xFF6
 12703                           tablat	equ	0xFF5
 12704                           prodh	equ	0xFF4
 12705                           prodl	equ	0xFF3
 12706                           intcon	equ	0xFF2
 12707                           intcon2	equ	0xFF1
 12708                           intcon3	equ	0xFF0
 12709                           postinc0	equ	0xFEE
 12710                           wreg	equ	0xFE8
 12711                           postdec1	equ	0xFE5
 12712                           fsr1l	equ	0xFE1
 12713                           indf2	equ	0xFDF
 12714                           postinc2	equ	0xFDE
 12715                           postdec2	equ	0xFDD
 12716                           fsr2h	equ	0xFDA
 12717                           fsr2l	equ	0xFD9
 12718                           status	equ	0xFD8
 12719                           
 12720 ;; *************** function _PortTestA5 *****************
 12721 ;; Defined at:
 12722 ;;		line 430 in file "Test.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;		None
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;		None
 12727 ;; Return value:  Size  Location     Type
 12728 ;;                  1    wreg      void 
 12729 ;; Registers used:
 12730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12740 ;;Total ram usage:        1 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:   10
 12743 ;; This function calls:
 12744 ;;		_lcdInst
 12745 ;;		_printf
 12746 ;; This function is called by:
 12747 ;;		_Test
 12748 ;; This function uses a non-reentrant model
 12749 ;;
 12750                           
 12751                           	psect	text45
 12752  00390E                     __ptext45:
 12753                           	opt stack 0
 12754  00390E                     _PortTestA5:
 12755                           	opt stack 19
 12756                           
 12757                           ;Test.c: 431: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12758                           
 12759                           ;incstack = 0
 12760  00390E  0E01               	movlw	1
 12761  003910  ECE1  F023         	call	_lcdInst
 12762  003914  0E68               	movlw	104
 12763  003916  0100               	movlb	0	; () banked
 12764  003918  6FAB               	movwf	??_PortTestA5& (0+255),b
 12765  00391A  0EE4               	movlw	228
 12766  00391C                     u8027:
 12767  00391C  2EE8               	decfsz	wreg,f,c
 12768  00391E  D7FE               	bra	u8027
 12769  003920  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12770  003922  D7FC               	bra	u8027
 12771  003924  F000               	nop	
 12772  003926  0E80               	movlw	128
 12773  003928  ECE1  F023         	call	_lcdInst
 12774                           
 12775                           ;Test.c: 432: printf("D WILL RETURN    ");
 12776  00392C  0E8F               	movlw	low STR_111
 12777  00392E  0100               	movlb	0	; () banked
 12778  003930  6F8E               	movwf	printf@f& (0+255),b
 12779  003932  0EFB               	movlw	high STR_111
 12780  003934  0100               	movlb	0	; () banked
 12781  003936  6F8F               	movwf	(printf@f+1)& (0+255),b
 12782  003938  ECB8  F008         	call	_printf	;wreg free
 12783                           
 12784                           ;Test.c: 433: lcdInst(0b11000000);;
 12785  00393C  0EC0               	movlw	192
 12786  00393E  ECE1  F023         	call	_lcdInst
 12787                           
 12788                           ;Test.c: 434: printf("OTHER SETS RA5   ");
 12789  003942  0EA1               	movlw	low STR_112
 12790  003944  0100               	movlb	0	; () banked
 12791  003946  6F8E               	movwf	printf@f& (0+255),b
 12792  003948  0EFB               	movlw	high STR_112
 12793  00394A  0100               	movlb	0	; () banked
 12794  00394C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12795  00394E  ECB8  F008         	call	_printf	;wreg free
 12796  003952                     l1186:
 12797  003952  A281               	btfss	3969,1,c	;volatile
 12798  003954  D7FE               	goto	l1186
 12799                           
 12800                           ;Test.c: 439: }
 12801                           ;Test.c: 440: if(PORTB >> 4 == 0b1111){
 12802  003956  3881               	swapf	3969,w,c	;volatile
 12803  003958  0B0F               	andlw	15
 12804  00395A  0A0F               	xorlw	15
 12805  00395C  B4D8               	btfsc	status,2,c
 12806  00395E  0012               	return	
 12807                           
 12808                           ;Test.c: 443: else{
 12809                           ;Test.c: 444: LATAbits.LATA5 = 1;
 12810                           
 12811                           ;Test.c: 442: }
 12812                           
 12813                           ;Test.c: 441: break;
 12814  003960  8A89               	bsf	3977,5,c	;volatile
 12815  003962                     l1192:
 12816  003962  B281               	btfsc	3969,1,c	;volatile
 12817  003964  D7FE               	goto	l1192
 12818                           
 12819                           ;Test.c: 447: }
 12820                           ;Test.c: 450: for(i=0;i<10000;i++)
 12821  003966  0E00               	movlw	0
 12822  003968  0100               	movlb	0	; () banked
 12823  00396A  6FE5               	movwf	(_i+1)& (0+255),b
 12824  00396C  0E00               	movlw	0
 12825  00396E  6FE4               	movwf	_i& (0+255),b
 12826  003970                     l7105:
 12827                           
 12828                           ; BSR set to: 0
 12829  003970  0100               	movlb	0	; () banked
 12830  003972  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12831  003974  D008               	goto	l1195
 12832  003976  0E10               	movlw	16
 12833  003978  0100               	movlb	0	; () banked
 12834  00397A  5DE4               	subwf	_i& (0+255),w,b
 12835  00397C  0E27               	movlw	39
 12836  00397E  0100               	movlb	0	; () banked
 12837  003980  59E5               	subwfb	(_i+1)& (0+255),w,b
 12838  003982  B0D8               	btfsc	status,0,c
 12839  003984  D00D               	goto	l1196
 12840  003986                     l1195:
 12841                           
 12842                           ; BSR set to: 0
 12843                           ;Test.c: 451: {
 12844                           ;Test.c: 452: LATAbits.LATA5 = 1;
 12845  003986  8A89               	bsf	3977,5,c	;volatile
 12846                           
 12847                           ; BSR set to: 0
 12848                           ;Test.c: 453: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12849  003988  0E1A               	movlw	26
 12850  00398A                     u8037:
 12851  00398A  2EE8               	decfsz	wreg,f,c
 12852  00398C  D7FE               	bra	u8037
 12853  00398E  D000               	nop2	
 12854                           
 12855                           ;Test.c: 454: LATAbits.LATA5 = 0;
 12856  003990  9A89               	bcf	3977,5,c	;volatile
 12857                           
 12858                           ;Test.c: 455: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12859  003992  0EF0               	movlw	240
 12860  003994                     u8047:
 12861  003994  2EE8               	decfsz	wreg,f,c
 12862  003996  D7FE               	bra	u8047
 12863  003998  0100               	movlb	0	; () banked
 12864  00399A  4BE4               	infsnz	_i& (0+255),f,b
 12865  00399C  2BE5               	incf	(_i+1)& (0+255),f,b
 12866  00399E  D7E8               	goto	l7105
 12867  0039A0                     l1196:
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;Test.c: 456: }
 12871                           ;Test.c: 458: LATAbits.LATA5 = 0;
 12872  0039A0  9A89               	bcf	3977,5,c	;volatile
 12873                           
 12874                           ; BSR set to: 0
 12875                           
 12876                           ; BSR set to: 0
 12877  0039A2  D7D7               	goto	l1186
 12878  0039A4                     __end_of_PortTestA5:
 12879                           	opt stack 0
 12880                           tblptru	equ	0xFF8
 12881                           tblptrh	equ	0xFF7
 12882                           tblptrl	equ	0xFF6
 12883                           tablat	equ	0xFF5
 12884                           prodh	equ	0xFF4
 12885                           prodl	equ	0xFF3
 12886                           intcon	equ	0xFF2
 12887                           intcon2	equ	0xFF1
 12888                           intcon3	equ	0xFF0
 12889                           postinc0	equ	0xFEE
 12890                           wreg	equ	0xFE8
 12891                           postdec1	equ	0xFE5
 12892                           fsr1l	equ	0xFE1
 12893                           indf2	equ	0xFDF
 12894                           postinc2	equ	0xFDE
 12895                           postdec2	equ	0xFDD
 12896                           fsr2h	equ	0xFDA
 12897                           fsr2l	equ	0xFD9
 12898                           status	equ	0xFD8
 12899                           
 12900 ;; *************** function _EEPROMTest *****************
 12901 ;; Defined at:
 12902 ;;		line 518 in file "Test.c"
 12903 ;; Parameters:    Size  Location     Type
 12904 ;;		None
 12905 ;; Auto vars:     Size  Location     Type
 12906 ;;		None
 12907 ;; Return value:  Size  Location     Type
 12908 ;;                  1    wreg      void 
 12909 ;; Registers used:
 12910 ;;		None
 12911 ;; Tracked objects:
 12912 ;;		On entry : 0/0
 12913 ;;		On exit  : 0/0
 12914 ;;		Unchanged: 0/0
 12915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12920 ;;Total ram usage:        0 bytes
 12921 ;; Hardware stack levels used:    1
 12922 ;; Hardware stack levels required when called:    7
 12923 ;; This function calls:
 12924 ;;		Nothing
 12925 ;; This function is called by:
 12926 ;;		_Test
 12927 ;; This function uses a non-reentrant model
 12928 ;;
 12929                           
 12930                           	psect	text46
 12931  004826                     __ptext46:
 12932                           	opt stack 0
 12933  004826                     _EEPROMTest:
 12934                           	opt stack 22
 12935                           
 12936                           ;incstack = 0
 12937  004826  0012               	return		;funcret
 12938  004828                     __end_of_EEPROMTest:
 12939                           	opt stack 0
 12940                           tblptru	equ	0xFF8
 12941                           tblptrh	equ	0xFF7
 12942                           tblptrl	equ	0xFF6
 12943                           tablat	equ	0xFF5
 12944                           prodh	equ	0xFF4
 12945                           prodl	equ	0xFF3
 12946                           intcon	equ	0xFF2
 12947                           intcon2	equ	0xFF1
 12948                           intcon3	equ	0xFF0
 12949                           postinc0	equ	0xFEE
 12950                           wreg	equ	0xFE8
 12951                           postdec1	equ	0xFE5
 12952                           fsr1l	equ	0xFE1
 12953                           indf2	equ	0xFDF
 12954                           postinc2	equ	0xFDE
 12955                           postdec2	equ	0xFDD
 12956                           fsr2h	equ	0xFDA
 12957                           fsr2l	equ	0xFD9
 12958                           status	equ	0xFD8
 12959                           
 12960 ;; *************** function _BothServos *****************
 12961 ;; Defined at:
 12962 ;;		line 344 in file "Test.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;		None
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;		None
 12967 ;; Return value:  Size  Location     Type
 12968 ;;                  1    wreg      void 
 12969 ;; Registers used:
 12970 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12971 ;; Tracked objects:
 12972 ;;		On entry : 0/0
 12973 ;;		On exit  : 0/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12980 ;;Total ram usage:        2 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:   10
 12983 ;; This function calls:
 12984 ;;		_initServos
 12985 ;;		_lcdInst
 12986 ;;		_printf
 12987 ;;		_updateServoPosition
 12988 ;; This function is called by:
 12989 ;;		_Test
 12990 ;; This function uses a non-reentrant model
 12991 ;;
 12992                           
 12993                           	psect	text47
 12994  001916                     __ptext47:
 12995                           	opt stack 0
 12996  001916                     _BothServos:
 12997                           	opt stack 19
 12998                           
 12999                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13000                           
 13001                           ;incstack = 0
 13002  001916  0E01               	movlw	1
 13003  001918  ECE1  F023         	call	_lcdInst
 13004  00191C  0E68               	movlw	104
 13005  00191E  0100               	movlb	0	; () banked
 13006  001920  6FAB               	movwf	??_BothServos& (0+255),b
 13007  001922  0EE4               	movlw	228
 13008  001924                     u8057:
 13009  001924  2EE8               	decfsz	wreg,f,c
 13010  001926  D7FE               	bra	u8057
 13011  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13012  00192A  D7FC               	bra	u8057
 13013  00192C  F000               	nop	
 13014  00192E  0E80               	movlw	128
 13015  001930  ECE1  F023         	call	_lcdInst
 13016                           
 13017                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 13018  001934  0ED6               	movlw	low STR_110
 13019  001936  0100               	movlb	0	; () banked
 13020  001938  6F8E               	movwf	printf@f& (0+255),b
 13021  00193A  0EFC               	movlw	high STR_110
 13022  00193C  0100               	movlb	0	; () banked
 13023  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13024  001940  ECB8  F008         	call	_printf	;wreg free
 13025                           
 13026                           ;Test.c: 347: TMR1ON = 1;
 13027  001944  80CD               	bsf	4045,0,c	;volatile
 13028                           
 13029                           ;Test.c: 348: TMR3ON = 1;
 13030  001946  80B1               	bsf	4017,0,c	;volatile
 13031                           
 13032                           ;Test.c: 349: machine_state = Sorting_state;
 13033  001948  0E01               	movlw	1
 13034  00194A  0100               	movlb	0	; () banked
 13035  00194C  6FFC               	movwf	_machine_state& (0+255),b
 13036                           
 13037                           ; BSR set to: 0
 13038                           ;Test.c: 350: was_low_1 = 0;
 13039  00194E  0E00               	movlw	0
 13040  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 13041  001952  0E00               	movlw	0
 13042  001954  6E79               	movwf	_was_low_1,c	;volatile
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;Test.c: 351: was_low_1 = 0;
 13046  001956  0E00               	movlw	0
 13047  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 13048  00195A  0E00               	movlw	0
 13049  00195C  6E79               	movwf	_was_low_1,c	;volatile
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;Test.c: 357: initServos();
 13053  00195E  EC88  F01F         	call	_initServos	;wreg free
 13054                           
 13055                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13056  001962  0E3D               	movlw	61
 13057  001964  0100               	movlb	0	; () banked
 13058  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13059  001968  0EE1               	movlw	225
 13060  00196A  0100               	movlb	0	; () banked
 13061  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 13062  00196E  0E3F               	movlw	63
 13063  001970                     u8067:
 13064  001970  2EE8               	decfsz	wreg,f,c
 13065  001972  D7FE               	bra	u8067
 13066  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13067  001976  D7FC               	bra	u8067
 13068  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13069  00197A  D7FA               	bra	u8067
 13070  00197C  D000               	nop2	
 13071                           
 13072                           ;Test.c: 359: updateServoPosition(500, 1);
 13073  00197E  0E01               	movlw	1
 13074  001980  0100               	movlb	0	; () banked
 13075  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13076  001984  0EF4               	movlw	244
 13077  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13078  001988  0E00               	movlw	0
 13079  00198A  0100               	movlb	0	; () banked
 13080  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13081  00198E  0E01               	movlw	1
 13082  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13083  001992  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13084                           
 13085                           ;Test.c: 360: _delay((unsigned long)((750)*(32000000/4000.0)));
 13086  001996  0E1F               	movlw	31
 13087  001998  0100               	movlb	0	; () banked
 13088  00199A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13089  00199C  0E71               	movlw	113
 13090  00199E  0100               	movlb	0	; () banked
 13091  0019A0  6FAB               	movwf	??_BothServos& (0+255),b
 13092  0019A2  0E1E               	movlw	30
 13093  0019A4                     u8077:
 13094  0019A4  2EE8               	decfsz	wreg,f,c
 13095  0019A6  D7FE               	bra	u8077
 13096  0019A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13097  0019AA  D7FC               	bra	u8077
 13098  0019AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13099  0019AE  D7FA               	bra	u8077
 13100  0019B0  F000               	nop	
 13101                           
 13102                           ;Test.c: 361: updateServoPosition(1350, 3);
 13103  0019B2  0E05               	movlw	5
 13104  0019B4  0100               	movlb	0	; () banked
 13105  0019B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13106  0019B8  0E46               	movlw	70
 13107  0019BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13108  0019BC  0E00               	movlw	0
 13109  0019BE  0100               	movlb	0	; () banked
 13110  0019C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13111  0019C2  0E03               	movlw	3
 13112  0019C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13113  0019C6  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13114                           
 13115                           ;Test.c: 362: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13116  0019CA  0E52               	movlw	82
 13117  0019CC  0100               	movlb	0	; () banked
 13118  0019CE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13119  0019D0  0E2B               	movlw	43
 13120  0019D2  0100               	movlb	0	; () banked
 13121  0019D4  6FAB               	movwf	??_BothServos& (0+255),b
 13122  0019D6  0E00               	movlw	0
 13123  0019D8                     u8087:
 13124  0019D8  2EE8               	decfsz	wreg,f,c
 13125  0019DA  D7FE               	bra	u8087
 13126  0019DC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13127  0019DE  D7FC               	bra	u8087
 13128  0019E0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13129  0019E2  D7FA               	bra	u8087
 13130  0019E4  F000               	nop	
 13131                           
 13132                           ;Test.c: 363: updateServoPosition(1150, 3);
 13133  0019E6  0E04               	movlw	4
 13134  0019E8  0100               	movlb	0	; () banked
 13135  0019EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13136  0019EC  0E7E               	movlw	126
 13137  0019EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13138  0019F0  0E00               	movlw	0
 13139  0019F2  0100               	movlb	0	; () banked
 13140  0019F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13141  0019F6  0E03               	movlw	3
 13142  0019F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13143  0019FA  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13144                           
 13145                           ;Test.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
 13146  0019FE  0E1F               	movlw	31
 13147  001A00  0100               	movlb	0	; () banked
 13148  001A02  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13149  001A04  0E71               	movlw	113
 13150  001A06  0100               	movlb	0	; () banked
 13151  001A08  6FAB               	movwf	??_BothServos& (0+255),b
 13152  001A0A  0E1E               	movlw	30
 13153  001A0C                     u8097:
 13154  001A0C  2EE8               	decfsz	wreg,f,c
 13155  001A0E  D7FE               	bra	u8097
 13156  001A10  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13157  001A12  D7FC               	bra	u8097
 13158  001A14  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13159  001A16  D7FA               	bra	u8097
 13160  001A18  F000               	nop	
 13161                           
 13162                           ;Test.c: 366: updateServoPosition(750, 1);
 13163  001A1A  0E02               	movlw	2
 13164  001A1C  0100               	movlb	0	; () banked
 13165  001A1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13166  001A20  0EEE               	movlw	238
 13167  001A22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13168  001A24  0E00               	movlw	0
 13169  001A26  0100               	movlb	0	; () banked
 13170  001A28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13171  001A2A  0E01               	movlw	1
 13172  001A2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13173  001A2E  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13174                           
 13175                           ;Test.c: 367: _delay((unsigned long)((750)*(32000000/4000.0)));
 13176  001A32  0E1F               	movlw	31
 13177  001A34  0100               	movlb	0	; () banked
 13178  001A36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13179  001A38  0E71               	movlw	113
 13180  001A3A  0100               	movlb	0	; () banked
 13181  001A3C  6FAB               	movwf	??_BothServos& (0+255),b
 13182  001A3E  0E1E               	movlw	30
 13183  001A40                     u8107:
 13184  001A40  2EE8               	decfsz	wreg,f,c
 13185  001A42  D7FE               	bra	u8107
 13186  001A44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13187  001A46  D7FC               	bra	u8107
 13188  001A48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13189  001A4A  D7FA               	bra	u8107
 13190  001A4C  F000               	nop	
 13191                           
 13192                           ;Test.c: 368: updateServoPosition(1350, 3);
 13193  001A4E  0E05               	movlw	5
 13194  001A50  0100               	movlb	0	; () banked
 13195  001A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13196  001A54  0E46               	movlw	70
 13197  001A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13198  001A58  0E00               	movlw	0
 13199  001A5A  0100               	movlb	0	; () banked
 13200  001A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13201  001A5E  0E03               	movlw	3
 13202  001A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13203  001A62  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13204                           
 13205                           ;Test.c: 369: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13206  001A66  0E52               	movlw	82
 13207  001A68  0100               	movlb	0	; () banked
 13208  001A6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13209  001A6C  0E2B               	movlw	43
 13210  001A6E  0100               	movlb	0	; () banked
 13211  001A70  6FAB               	movwf	??_BothServos& (0+255),b
 13212  001A72  0E00               	movlw	0
 13213  001A74                     u8117:
 13214  001A74  2EE8               	decfsz	wreg,f,c
 13215  001A76  D7FE               	bra	u8117
 13216  001A78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13217  001A7A  D7FC               	bra	u8117
 13218  001A7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13219  001A7E  D7FA               	bra	u8117
 13220  001A80  F000               	nop	
 13221                           
 13222                           ;Test.c: 370: updateServoPosition(1150, 3);
 13223  001A82  0E04               	movlw	4
 13224  001A84  0100               	movlb	0	; () banked
 13225  001A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13226  001A88  0E7E               	movlw	126
 13227  001A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13228  001A8C  0E00               	movlw	0
 13229  001A8E  0100               	movlb	0	; () banked
 13230  001A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13231  001A92  0E03               	movlw	3
 13232  001A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13233  001A96  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13234                           
 13235                           ;Test.c: 371: _delay((unsigned long)((750)*(32000000/4000.0)));
 13236  001A9A  0E1F               	movlw	31
 13237  001A9C  0100               	movlb	0	; () banked
 13238  001A9E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13239  001AA0  0E71               	movlw	113
 13240  001AA2  0100               	movlb	0	; () banked
 13241  001AA4  6FAB               	movwf	??_BothServos& (0+255),b
 13242  001AA6  0E1E               	movlw	30
 13243  001AA8                     u8127:
 13244  001AA8  2EE8               	decfsz	wreg,f,c
 13245  001AAA  D7FE               	bra	u8127
 13246  001AAC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13247  001AAE  D7FC               	bra	u8127
 13248  001AB0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13249  001AB2  D7FA               	bra	u8127
 13250  001AB4  F000               	nop	
 13251                           
 13252                           ;Test.c: 373: updateServoPosition(1200, 1);
 13253  001AB6  0E04               	movlw	4
 13254  001AB8  0100               	movlb	0	; () banked
 13255  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13256  001ABC  0EB0               	movlw	176
 13257  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13258  001AC0  0E00               	movlw	0
 13259  001AC2  0100               	movlb	0	; () banked
 13260  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13261  001AC6  0E01               	movlw	1
 13262  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13263  001ACA  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13264                           
 13265                           ;Test.c: 374: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13266  001ACE  0E3D               	movlw	61
 13267  001AD0  0100               	movlb	0	; () banked
 13268  001AD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13269  001AD4  0EE1               	movlw	225
 13270  001AD6  0100               	movlb	0	; () banked
 13271  001AD8  6FAB               	movwf	??_BothServos& (0+255),b
 13272  001ADA  0E3F               	movlw	63
 13273  001ADC                     u8137:
 13274  001ADC  2EE8               	decfsz	wreg,f,c
 13275  001ADE  D7FE               	bra	u8137
 13276  001AE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13277  001AE2  D7FC               	bra	u8137
 13278  001AE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13279  001AE6  D7FA               	bra	u8137
 13280  001AE8  D000               	nop2	
 13281                           
 13282                           ;Test.c: 376: updateServoPosition(1700, 1);
 13283  001AEA  0E06               	movlw	6
 13284  001AEC  0100               	movlb	0	; () banked
 13285  001AEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13286  001AF0  0EA4               	movlw	164
 13287  001AF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13288  001AF4  0E00               	movlw	0
 13289  001AF6  0100               	movlb	0	; () banked
 13290  001AF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13291  001AFA  0E01               	movlw	1
 13292  001AFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13293  001AFE  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13294                           
 13295                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 13296  001B02  0E1F               	movlw	31
 13297  001B04  0100               	movlb	0	; () banked
 13298  001B06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13299  001B08  0E71               	movlw	113
 13300  001B0A  0100               	movlb	0	; () banked
 13301  001B0C  6FAB               	movwf	??_BothServos& (0+255),b
 13302  001B0E  0E1E               	movlw	30
 13303  001B10                     u8147:
 13304  001B10  2EE8               	decfsz	wreg,f,c
 13305  001B12  D7FE               	bra	u8147
 13306  001B14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13307  001B16  D7FC               	bra	u8147
 13308  001B18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13309  001B1A  D7FA               	bra	u8147
 13310  001B1C  F000               	nop	
 13311                           
 13312                           ;Test.c: 378: updateServoPosition(1350, 3);
 13313  001B1E  0E05               	movlw	5
 13314  001B20  0100               	movlb	0	; () banked
 13315  001B22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13316  001B24  0E46               	movlw	70
 13317  001B26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13318  001B28  0E00               	movlw	0
 13319  001B2A  0100               	movlb	0	; () banked
 13320  001B2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13321  001B2E  0E03               	movlw	3
 13322  001B30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13323  001B32  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13324                           
 13325                           ;Test.c: 379: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13326  001B36  0E52               	movlw	82
 13327  001B38  0100               	movlb	0	; () banked
 13328  001B3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13329  001B3C  0E2B               	movlw	43
 13330  001B3E  0100               	movlb	0	; () banked
 13331  001B40  6FAB               	movwf	??_BothServos& (0+255),b
 13332  001B42  0E00               	movlw	0
 13333  001B44                     u8157:
 13334  001B44  2EE8               	decfsz	wreg,f,c
 13335  001B46  D7FE               	bra	u8157
 13336  001B48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13337  001B4A  D7FC               	bra	u8157
 13338  001B4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13339  001B4E  D7FA               	bra	u8157
 13340  001B50  F000               	nop	
 13341                           
 13342                           ;Test.c: 380: updateServoPosition(1150, 3);
 13343  001B52  0E04               	movlw	4
 13344  001B54  0100               	movlb	0	; () banked
 13345  001B56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13346  001B58  0E7E               	movlw	126
 13347  001B5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13348  001B5C  0E00               	movlw	0
 13349  001B5E  0100               	movlb	0	; () banked
 13350  001B60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13351  001B62  0E03               	movlw	3
 13352  001B64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13353  001B66  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13354                           
 13355                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 13356  001B6A  0E1F               	movlw	31
 13357  001B6C  0100               	movlb	0	; () banked
 13358  001B6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13359  001B70  0E71               	movlw	113
 13360  001B72  0100               	movlb	0	; () banked
 13361  001B74  6FAB               	movwf	??_BothServos& (0+255),b
 13362  001B76  0E1E               	movlw	30
 13363  001B78                     u8167:
 13364  001B78  2EE8               	decfsz	wreg,f,c
 13365  001B7A  D7FE               	bra	u8167
 13366  001B7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13367  001B7E  D7FC               	bra	u8167
 13368  001B80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13369  001B82  D7FA               	bra	u8167
 13370  001B84  F000               	nop	
 13371                           
 13372                           ;Test.c: 383: updateServoPosition(2100, 1);
 13373  001B86  0E08               	movlw	8
 13374  001B88  0100               	movlb	0	; () banked
 13375  001B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13376  001B8C  0E34               	movlw	52
 13377  001B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13378  001B90  0E00               	movlw	0
 13379  001B92  0100               	movlb	0	; () banked
 13380  001B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13381  001B96  0E01               	movlw	1
 13382  001B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13383  001B9A  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13384                           
 13385                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 13386  001B9E  0E1F               	movlw	31
 13387  001BA0  0100               	movlb	0	; () banked
 13388  001BA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13389  001BA4  0E71               	movlw	113
 13390  001BA6  0100               	movlb	0	; () banked
 13391  001BA8  6FAB               	movwf	??_BothServos& (0+255),b
 13392  001BAA  0E1E               	movlw	30
 13393  001BAC                     u8177:
 13394  001BAC  2EE8               	decfsz	wreg,f,c
 13395  001BAE  D7FE               	bra	u8177
 13396  001BB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13397  001BB2  D7FC               	bra	u8177
 13398  001BB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13399  001BB6  D7FA               	bra	u8177
 13400  001BB8  F000               	nop	
 13401                           
 13402                           ;Test.c: 385: updateServoPosition(1350, 3);
 13403  001BBA  0E05               	movlw	5
 13404  001BBC  0100               	movlb	0	; () banked
 13405  001BBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13406  001BC0  0E46               	movlw	70
 13407  001BC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13408  001BC4  0E00               	movlw	0
 13409  001BC6  0100               	movlb	0	; () banked
 13410  001BC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13411  001BCA  0E03               	movlw	3
 13412  001BCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13413  001BCE  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13414                           
 13415                           ;Test.c: 386: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13416  001BD2  0E52               	movlw	82
 13417  001BD4  0100               	movlb	0	; () banked
 13418  001BD6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13419  001BD8  0E2B               	movlw	43
 13420  001BDA  0100               	movlb	0	; () banked
 13421  001BDC  6FAB               	movwf	??_BothServos& (0+255),b
 13422  001BDE  0E00               	movlw	0
 13423  001BE0                     u8187:
 13424  001BE0  2EE8               	decfsz	wreg,f,c
 13425  001BE2  D7FE               	bra	u8187
 13426  001BE4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13427  001BE6  D7FC               	bra	u8187
 13428  001BE8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13429  001BEA  D7FA               	bra	u8187
 13430  001BEC  F000               	nop	
 13431                           
 13432                           ;Test.c: 387: updateServoPosition(1150, 3);
 13433  001BEE  0E04               	movlw	4
 13434  001BF0  0100               	movlb	0	; () banked
 13435  001BF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13436  001BF4  0E7E               	movlw	126
 13437  001BF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13438  001BF8  0E00               	movlw	0
 13439  001BFA  0100               	movlb	0	; () banked
 13440  001BFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13441  001BFE  0E03               	movlw	3
 13442  001C00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13443  001C02  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13444                           
 13445                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13446  001C06  0E1F               	movlw	31
 13447  001C08  0100               	movlb	0	; () banked
 13448  001C0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13449  001C0C  0E71               	movlw	113
 13450  001C0E  0100               	movlb	0	; () banked
 13451  001C10  6FAB               	movwf	??_BothServos& (0+255),b
 13452  001C12  0E1E               	movlw	30
 13453  001C14                     u8197:
 13454  001C14  2EE8               	decfsz	wreg,f,c
 13455  001C16  D7FE               	bra	u8197
 13456  001C18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13457  001C1A  D7FC               	bra	u8197
 13458  001C1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13459  001C1E  D7FA               	bra	u8197
 13460  001C20  F000               	nop	
 13461                           
 13462                           ;Test.c: 390: TMR1ON = 0;
 13463  001C22  90CD               	bcf	4045,0,c	;volatile
 13464                           
 13465                           ;Test.c: 391: TMR3ON = 0;
 13466  001C24  90B1               	bcf	4017,0,c	;volatile
 13467                           
 13468                           ;Test.c: 392: (INTCONbits.GIE = 0);
 13469  001C26  9EF2               	bcf	intcon,7,c	;volatile
 13470  001C28  0012               	return		;funcret
 13471  001C2A                     __end_of_BothServos:
 13472                           	opt stack 0
 13473                           tblptru	equ	0xFF8
 13474                           tblptrh	equ	0xFF7
 13475                           tblptrl	equ	0xFF6
 13476                           tablat	equ	0xFF5
 13477                           prodh	equ	0xFF4
 13478                           prodl	equ	0xFF3
 13479                           intcon	equ	0xFF2
 13480                           intcon2	equ	0xFF1
 13481                           intcon3	equ	0xFF0
 13482                           postinc0	equ	0xFEE
 13483                           wreg	equ	0xFE8
 13484                           postdec1	equ	0xFE5
 13485                           fsr1l	equ	0xFE1
 13486                           indf2	equ	0xFDF
 13487                           postinc2	equ	0xFDE
 13488                           postdec2	equ	0xFDD
 13489                           fsr2h	equ	0xFDA
 13490                           fsr2l	equ	0xFD9
 13491                           status	equ	0xFD8
 13492                           
 13493 ;; *************** function _printf *****************
 13494 ;; Defined at:
 13495 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13496 ;; Parameters:    Size  Location     Type
 13497 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13498 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 13499 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 13500 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 13501 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 13502 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 13503 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 13504 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 13505 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 13506 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 13507 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 13508 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 13509 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 13510 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13511 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13512 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13513 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13514 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13515 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 13516 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 13517 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 13518 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 13519 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 13520 ;;		 -> STR_2(14), STR_1(18), 
 13521 ;; Auto vars:     Size  Location     Type
 13522 ;;  tmpval          4    0        struct .
 13523 ;;  width           2   41[BANK0 ] int 
 13524 ;;  val             2   37[BANK0 ] unsigned int 
 13525 ;;  len             2   35[BANK0 ] unsigned int 
 13526 ;;  ap              2   33[BANK0 ] PTR void [1]
 13527 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13528 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13529 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 13530 ;;  c               1   40[BANK0 ] char 
 13531 ;;  flag            1   39[BANK0 ] unsigned char 
 13532 ;;  prec            1   30[BANK0 ] char 
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  2   14[BANK0 ] int 
 13535 ;; Registers used:
 13536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13537 ;; Tracked objects:
 13538 ;;		On entry : 0/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13542 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;Total ram usage:       29 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; Hardware stack levels required when called:    9
 13549 ;; This function calls:
 13550 ;;		___lwdiv
 13551 ;;		___lwmod
 13552 ;;		___wmul
 13553 ;;		_isdigit
 13554 ;;		_putch
 13555 ;; This function is called by:
 13556 ;;		_UI
 13557 ;;		_change_state_to_menu_start
 13558 ;;		_change_state_to_menu_12
 13559 ;;		_change_state_to_menu_22
 13560 ;;		_printRTC
 13561 ;;		_EEPROM_write
 13562 ;;		_Test
 13563 ;;		_algorithmTest
 13564 ;;		_sensorTest
 13565 ;;		_actuatorTest
 13566 ;;		_BothServos
 13567 ;;		_PortTestA5
 13568 ;;		_PusherTestA5
 13569 ;;		_ToggleTestA5
 13570 ;; This function uses a non-reentrant model
 13571 ;;
 13572                           
 13573                           	psect	text48
 13574  001170                     __ptext48:
 13575                           	opt stack 0
 13576  001170                     _printf:
 13577                           	opt stack 18
 13578                           
 13579                           ;doprnt.c: 466: va_list ap;
 13580                           ;doprnt.c: 499: signed char c;
 13581                           ;doprnt.c: 501: int width;
 13582                           ;doprnt.c: 506: signed char prec;
 13583                           ;doprnt.c: 508: unsigned char flag;
 13584                           ;doprnt.c: 523: union {
 13585                           ;doprnt.c: 524: unsigned long vd;
 13586                           ;doprnt.c: 525: double integ;
 13587                           ;doprnt.c: 526: } tmpval;
 13588                           ;doprnt.c: 528: unsigned int val;
 13589                           ;doprnt.c: 529: unsigned len;
 13590                           ;doprnt.c: 530: const char * cp;
 13591                           ;doprnt.c: 533: *ap = __va_start();
 13592                           
 13593                           ;incstack = 0
 13594  001170  0E90               	movlw	low (?_printf+2)
 13595  001172  0100               	movlb	0	; () banked
 13596  001174  6FA1               	movwf	printf@ap& (0+255),b
 13597  001176  0E00               	movlw	high (?_printf+2)
 13598  001178  0100               	movlb	0	; () banked
 13599  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13600                           
 13601                           ;doprnt.c: 536: while(c = *f++) {
 13602  00117C  D205               	goto	l5553
 13603  00117E                     l5423:
 13604                           
 13605                           ; BSR set to: 0
 13606                           ;doprnt.c: 538: if(c != '%')
 13607  00117E  0E25               	movlw	37
 13608  001180  0100               	movlb	0	; () banked
 13609  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13610  001184  B4D8               	btfsc	status,2,c
 13611  001186  D005               	goto	l5427
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;doprnt.c: 540: {
 13615                           ;doprnt.c: 541: (putch(c) );
 13616  001188  0100               	movlb	0	; () banked
 13617  00118A  51A8               	movf	printf@c& (0+255),w,b
 13618  00118C  ECD9  F023         	call	_putch
 13619                           
 13620                           ;doprnt.c: 542: continue;
 13621  001190  D1FB               	goto	l5553
 13622  001192                     l5427:
 13623                           
 13624                           ;doprnt.c: 543: }
 13625                           ;doprnt.c: 546: width = 0;
 13626  001192  0E00               	movlw	0
 13627  001194  0100               	movlb	0	; () banked
 13628  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13629  001198  0E00               	movlw	0
 13630  00119A  6FA9               	movwf	printf@width& (0+255),b
 13631                           
 13632                           ;doprnt.c: 548: flag = 0;
 13633  00119C  0E00               	movlw	0
 13634  00119E  0100               	movlb	0	; () banked
 13635  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;doprnt.c: 551: switch(*f) {
 13639                           
 13640                           ;doprnt.c: 550: for(;;) {
 13641  0011A2  D005               	goto	l5433
 13642  0011A4                     l5429:
 13643                           
 13644                           ;doprnt.c: 580: flag |= 0x04;
 13645  0011A4  0100               	movlb	0	; () banked
 13646  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13647                           
 13648                           ;doprnt.c: 581: f++;
 13649  0011A8  0100               	movlb	0	; () banked
 13650  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13651  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13652  0011AE                     l5433:
 13653  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13654  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13655  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13656  0011B6  6AF8               	clrf	tblptru,c
 13657  0011B8                     	endif
 13658  0011B8                     	if	0	;tblptru may be non-zero
 13659  0011B8                     	endif
 13660  0011B8  0008               	tblrd		*
 13661  0011BA  50F5               	movf	tablat,w,c
 13662                           
 13663                           ; Switch size 1, requested type "space"
 13664                           ; Number of cases is 1, Range of values is 48 to 48
 13665                           ; switch strategies available:
 13666                           ; Name         Instructions Cycles
 13667                           ; simple_byte            4     3 (average)
 13668                           ;	Chosen strategy is simple_byte
 13669  0011BC  0A30               	xorlw	48	; case 48
 13670  0011BE  B4D8               	btfsc	status,2,c
 13671  0011C0  D7F1               	goto	l5429
 13672                           
 13673                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13674                           
 13675                           ;doprnt.c: 586: }
 13676                           
 13677                           ;doprnt.c: 585: break;
 13678  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13679  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13680  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13681  0011CA  6AF8               	clrf	tblptru,c
 13682  0011CC                     	endif
 13683  0011CC                     	if	0	;tblptru may be non-zero
 13684  0011CC                     	endif
 13685  0011CC  0008               	tblrd		*
 13686  0011CE  50F5               	movf	tablat,w,c
 13687  0011D0  ECFE  F022         	call	_isdigit
 13688  0011D4  A0D8               	btfss	status,0,c
 13689  0011D6  D0D2               	goto	l5481
 13690                           
 13691                           ;doprnt.c: 598: width = 0;
 13692  0011D8  0E00               	movlw	0
 13693  0011DA  0100               	movlb	0	; () banked
 13694  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13695  0011DE  0E00               	movlw	0
 13696  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13697  0011E2                     l5439:
 13698                           
 13699                           ;doprnt.c: 600: width *= 10;
 13700  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13701  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13702  0011EA  0E00               	movlw	0
 13703  0011EC  0100               	movlb	0	; () banked
 13704  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13705  0011F0  0E0A               	movlw	10
 13706  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13707  0011F4  EC68  F021         	call	___wmul	;wreg free
 13708  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13709  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13710                           
 13711                           ;doprnt.c: 601: width += *f++ - '0';
 13712  001200  0ED0               	movlw	208
 13713  001202  0100               	movlb	0	; () banked
 13714  001204  6F9A               	movwf	??_printf& (0+255),b
 13715  001206  0EFF               	movlw	255
 13716  001208  0100               	movlb	0	; () banked
 13717  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13718  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13719  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13720  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13721  001214  6AF8               	clrf	tblptru,c
 13722  001216                     	endif
 13723  001216                     	if	0	;tblptru may be non-zero
 13724  001216                     	endif
 13725  001216  0008               	tblrd		*
 13726  001218  50F5               	movf	tablat,w,c
 13727  00121A  0100               	movlb	0	; () banked
 13728  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13729  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13730  001220  0100               	movlb	0	; () banked
 13731  001222  519A               	movf	??_printf& (0+255),w,b
 13732  001224  0100               	movlb	0	; () banked
 13733  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13734  001228  0100               	movlb	0	; () banked
 13735  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13736  00122C  0100               	movlb	0	; () banked
 13737  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13738  001230  0100               	movlb	0	; () banked
 13739  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13740  001234  0100               	movlb	0	; () banked
 13741  001236  27A9               	addwf	printf@width& (0+255),f,b
 13742  001238  0100               	movlb	0	; () banked
 13743  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13744  00123C  0100               	movlb	0	; () banked
 13745  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13746                           
 13747                           ; BSR set to: 0
 13748  001240  0100               	movlb	0	; () banked
 13749  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13750  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13751                           
 13752                           ; BSR set to: 0
 13753                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13754  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13755  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13756  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13757  00124E  6AF8               	clrf	tblptru,c
 13758  001250                     	endif
 13759  001250                     	if	0	;tblptru may be non-zero
 13760  001250                     	endif
 13761  001250  0008               	tblrd		*
 13762  001252  50F5               	movf	tablat,w,c
 13763  001254  ECFE  F022         	call	_isdigit
 13764  001258  A0D8               	btfss	status,0,c
 13765  00125A  D090               	goto	l5481
 13766  00125C  D7C2               	goto	l5439
 13767  00125E                     l5447:
 13768                           
 13769                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13770  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13771  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13772  001266  CFDE F09F          	movff	postinc2,printf@cp
 13773  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13774  00126E  0E02               	movlw	2
 13775  001270  0100               	movlb	0	; () banked
 13776  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13777  001274  0E00               	movlw	0
 13778  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13779                           
 13780                           ; BSR set to: 0
 13781                           ;doprnt.c: 740: if(!cp)
 13782  001278  0100               	movlb	0	; () banked
 13783  00127A  519F               	movf	printf@cp& (0+255),w,b
 13784  00127C  0100               	movlb	0	; () banked
 13785  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13786  001280  A4D8               	btfss	status,2,c
 13787  001282  D006               	goto	l5455
 13788                           
 13789                           ; BSR set to: 0
 13790                           ;doprnt.c: 741: cp = "(null)";
 13791  001284  0EB6               	movlw	low STR_116
 13792  001286  0100               	movlb	0	; () banked
 13793  001288  6F9F               	movwf	printf@cp& (0+255),b
 13794  00128A  0EFF               	movlw	high STR_116
 13795  00128C  0100               	movlb	0	; () banked
 13796  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13797  001290                     l5455:
 13798                           
 13799                           ; BSR set to: 0
 13800                           ;doprnt.c: 745: len = 0;
 13801  001290  0E00               	movlw	0
 13802  001292  0100               	movlb	0	; () banked
 13803  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13804  001296  0E00               	movlw	0
 13805  001298  6FA3               	movwf	printf@len& (0+255),b
 13806                           
 13807                           ;doprnt.c: 746: while(cp[len])
 13808  00129A  D003               	goto	l5459
 13809  00129C                     l5457:
 13810                           
 13811                           ;doprnt.c: 747: len++;
 13812  00129C  0100               	movlb	0	; () banked
 13813  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13814  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13815  0012A2                     l5459:
 13816                           
 13817                           ; BSR set to: 0
 13818  0012A2  0100               	movlb	0	; () banked
 13819  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13820  0012A6  0100               	movlb	0	; () banked
 13821  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13822  0012AA  0100               	movlb	0	; () banked
 13823  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13824  0012AE  0100               	movlb	0	; () banked
 13825  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13826  0012B2  0100               	movlb	0	; () banked
 13827  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13828  0012B6  0100               	movlb	0	; () banked
 13829  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13830  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13831  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13832  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13833  0012C4  6EF8               	movwf	tblptru,c
 13834  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13835  0012C8  64F7               	cpfsgt	tblptrh,c
 13836  0012CA  D003               	bra	u3857
 13837  0012CC  0008               	tblrd		*
 13838  0012CE  50F5               	movf	tablat,w,c
 13839  0012D0  D005               	bra	u3850
 13840  0012D2                     u3857:
 13841  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13842  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13843  0012DA  50EF               	movf	indf0,w,c
 13844  0012DC                     u3850:
 13845  0012DC  0900               	iorlw	0
 13846  0012DE  A4D8               	btfss	status,2,c
 13847  0012E0  D7DD               	goto	l5457
 13848                           
 13849                           ;doprnt.c: 757: if(width > len)
 13850  0012E2  0100               	movlb	0	; () banked
 13851  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13852  0012E6  0100               	movlb	0	; () banked
 13853  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13854  0012EA  0100               	movlb	0	; () banked
 13855  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13856  0012EE  0100               	movlb	0	; () banked
 13857  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13858  0012F2  B0D8               	btfsc	status,0,c
 13859  0012F4  D009               	goto	l5465
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;doprnt.c: 758: width -= len;
 13863  0012F6  0100               	movlb	0	; () banked
 13864  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13865  0012FA  0100               	movlb	0	; () banked
 13866  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13867  0012FE  0100               	movlb	0	; () banked
 13868  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13869  001302  0100               	movlb	0	; () banked
 13870  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13871  001306  D009               	goto	l5469
 13872  001308                     l5465:
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;doprnt.c: 759: else
 13876                           ;doprnt.c: 760: width = 0;
 13877  001308  0E00               	movlw	0
 13878  00130A  0100               	movlb	0	; () banked
 13879  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13880  00130E  0E00               	movlw	0
 13881  001310  6FA9               	movwf	printf@width& (0+255),b
 13882                           
 13883                           ; BSR set to: 0
 13884                           ;doprnt.c: 764: while(width--)
 13885  001312  D003               	goto	l5469
 13886  001314                     l5467:
 13887                           
 13888                           ; BSR set to: 0
 13889                           ;doprnt.c: 765: (putch(' ') );
 13890  001314  0E20               	movlw	32
 13891  001316  ECD9  F023         	call	_putch
 13892  00131A                     l5469:
 13893  00131A  0100               	movlb	0	; () banked
 13894  00131C  07A9               	decf	printf@width& (0+255),f,b
 13895  00131E  A0D8               	btfss	status,0,c
 13896  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13897  001322  0100               	movlb	0	; () banked
 13898  001324  29A9               	incf	printf@width& (0+255),w,b
 13899  001326  E1F6               	bnz	l5467
 13900  001328  0100               	movlb	0	; () banked
 13901  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13902  00132C  B4D8               	btfsc	status,2,c
 13903  00132E  D017               	goto	l5475
 13904  001330  D7F1               	goto	l5467
 13905  001332                     l5471:
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;doprnt.c: 768: (putch(*cp++) );
 13909  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13910  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13911  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13912  00133C  6EF8               	movwf	tblptru,c
 13913  00133E  0E0F               	movlw	(high __ramtop+-1)
 13914  001340  64F7               	cpfsgt	tblptrh,c
 13915  001342  D003               	bra	u3897
 13916  001344  0008               	tblrd		*
 13917  001346  50F5               	movf	tablat,w,c
 13918  001348  D005               	bra	u3890
 13919  00134A                     u3897:
 13920  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13921  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13922  001352  50EF               	movf	indf0,w,c
 13923  001354                     u3890:
 13924  001354  ECD9  F023         	call	_putch
 13925  001358  0100               	movlb	0	; () banked
 13926  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13927  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13928  00135E                     l5475:
 13929                           
 13930                           ; BSR set to: 0
 13931  00135E  0100               	movlb	0	; () banked
 13932  001360  07A3               	decf	printf@len& (0+255),f,b
 13933  001362  A0D8               	btfss	status,0,c
 13934  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13935  001366  0100               	movlb	0	; () banked
 13936  001368  29A3               	incf	printf@len& (0+255),w,b
 13937  00136A  E1E3               	bnz	l5471
 13938  00136C  0100               	movlb	0	; () banked
 13939  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13940  001370  B4D8               	btfsc	status,2,c
 13941  001372  D10A               	goto	l5553
 13942  001374  D7DE               	goto	l5471
 13943  001376                     l5477:
 13944                           
 13945                           ; BSR set to: 0
 13946                           ;doprnt.c: 818: flag |= 0x40;
 13947  001376  0100               	movlb	0	; () banked
 13948  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;doprnt.c: 822: }
 13952                           
 13953                           ;doprnt.c: 819: break;
 13954  00137A  D01D               	goto	l1259
 13955  00137C                     l5481:
 13956  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13957  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13958  001384  0100               	movlb	0	; () banked
 13959  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13960  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13961  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13962  00138A  6AF8               	clrf	tblptru,c
 13963  00138C                     	endif
 13964  00138C                     	if	0	;tblptru may be non-zero
 13965  00138C                     	endif
 13966  00138C  0008               	tblrd		*
 13967  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13968  001392  0100               	movlb	0	; () banked
 13969  001394  51A8               	movf	printf@c& (0+255),w,b
 13970                           
 13971                           ; Switch size 1, requested type "space"
 13972                           ; Number of cases is 5, Range of values is 0 to 117
 13973                           ; switch strategies available:
 13974                           ; Name         Instructions Cycles
 13975                           ; simple_byte           16     9 (average)
 13976                           ;	Chosen strategy is simple_byte
 13977  001396  0A00               	xorlw	0	; case 0
 13978  001398  B4D8               	btfsc	status,2,c
 13979  00139A  0012               	return	
 13980  00139C  0A64               	xorlw	100	; case 100
 13981  00139E  B4D8               	btfsc	status,2,c
 13982  0013A0  D00A               	goto	l1259
 13983  0013A2  0A0D               	xorlw	13	; case 105
 13984  0013A4  B4D8               	btfsc	status,2,c
 13985  0013A6  D007               	goto	l1259
 13986  0013A8  0A1A               	xorlw	26	; case 115
 13987  0013AA  B4D8               	btfsc	status,2,c
 13988  0013AC  D758               	goto	l5447
 13989  0013AE  0A06               	xorlw	6	; case 117
 13990  0013B0  B4D8               	btfsc	status,2,c
 13991  0013B2  D7E1               	goto	l5477
 13992  0013B4  D0E9               	goto	l5553
 13993  0013B6                     l1259:
 13994                           
 13995                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13996  0013B6  0100               	movlb	0	; () banked
 13997  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13998  0013BA  D019               	goto	l5493
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;doprnt.c: 1253: {
 14002                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14003  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14004  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14005  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14006  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14007                           
 14008                           ; BSR set to: 0
 14009  0013CC  0E02               	movlw	2
 14010  0013CE  0100               	movlb	0	; () banked
 14011  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14012  0013D2  0E00               	movlw	0
 14013  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14014                           
 14015                           ; BSR set to: 0
 14016                           ;doprnt.c: 1261: if((int)val < 0) {
 14017  0013D6  0100               	movlb	0	; () banked
 14018  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14019  0013DA  D016               	goto	l5497
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;doprnt.c: 1262: flag |= 0x03;
 14023  0013DC  0E03               	movlw	3
 14024  0013DE  0100               	movlb	0	; () banked
 14025  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;doprnt.c: 1263: val = -val;
 14029  0013E2  0100               	movlb	0	; () banked
 14030  0013E4  6DA5               	negf	printf@val& (0+255),b
 14031  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14032  0013E8  B0D8               	btfsc	status,0,c
 14033  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;doprnt.c: 1264: }
 14037                           ;doprnt.c: 1266: }
 14038  0013EC  D00D               	goto	l5497
 14039  0013EE                     l5493:
 14040                           
 14041                           ; BSR set to: 0
 14042                           ;doprnt.c: 1268: else
 14043                           ;doprnt.c: 1273: {
 14044                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14045  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14046  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14047  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14048  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14049                           
 14050                           ; BSR set to: 0
 14051  0013FE  0E02               	movlw	2
 14052  001400  0100               	movlb	0	; () banked
 14053  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14054  001404  0E00               	movlw	0
 14055  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14056  001408                     l5497:
 14057                           
 14058                           ; BSR set to: 0
 14059                           ;doprnt.c: 1287: }
 14060                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14061  001408  0E01               	movlw	1
 14062  00140A  0100               	movlb	0	; () banked
 14063  00140C  6FA8               	movwf	printf@c& (0+255),b
 14064  00140E                     l5499:
 14065                           
 14066                           ; BSR set to: 0
 14067  00140E  0E05               	movlw	5
 14068  001410  0100               	movlb	0	; () banked
 14069  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14070  001414  B4D8               	btfsc	status,2,c
 14071  001416  D019               	goto	l5511
 14072                           
 14073                           ; BSR set to: 0
 14074                           ;doprnt.c: 1306: if(val < dpowers[c])
 14075                           
 14076                           ; BSR set to: 0
 14077                           
 14078                           ; BSR set to: 0
 14079  001418  0100               	movlb	0	; () banked
 14080  00141A  51A8               	movf	printf@c& (0+255),w,b
 14081  00141C  0D02               	mullw	2
 14082  00141E  0E32               	movlw	low _dpowers
 14083  001420  24F3               	addwf	prodl,w,c
 14084  001422  6EF6               	movwf	tblptrl,c
 14085  001424  0EFB               	movlw	high _dpowers
 14086  001426  20F4               	addwfc	prodh,w,c
 14087  001428  6EF7               	movwf	tblptrh,c
 14088  00142A                     	if	1	;There are 3 active tblptr bytes
 14089  00142A  6AF8               	clrf	tblptru,c
 14090  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14091  00142E  22F8               	addwfc	tblptru,f,c
 14092  001430                     	endif
 14093  001430  0009               	tblrd		*+
 14094  001432  50F5               	movf	tablat,w,c
 14095  001434  0100               	movlb	0	; () banked
 14096  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14097  001438  0009               	tblrd		*+
 14098  00143A  50F5               	movf	tablat,w,c
 14099  00143C  0100               	movlb	0	; () banked
 14100  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14101  001440  A0D8               	btfss	status,0,c
 14102  001442  D003               	goto	l5511
 14103                           
 14104                           ; BSR set to: 0
 14105                           
 14106                           ; BSR set to: 0
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;doprnt.c: 1307: break;
 14110  001444  0100               	movlb	0	; () banked
 14111  001446  2BA8               	incf	printf@c& (0+255),f,b
 14112  001448  D7E2               	goto	l5499
 14113  00144A                     l5511:
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14117  00144A  0100               	movlb	0	; () banked
 14118  00144C  51A9               	movf	printf@width& (0+255),w,b
 14119  00144E  0100               	movlb	0	; () banked
 14120  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14121  001452  B4D8               	btfsc	status,2,c
 14122  001454  D00B               	goto	l5517
 14123                           
 14124                           ; BSR set to: 0
 14125  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14126  00145A  0E03               	movlw	3
 14127  00145C  0100               	movlb	0	; () banked
 14128  00145E  179A               	andwf	??_printf& (0+255),f,b
 14129  001460  B4D8               	btfsc	status,2,c
 14130  001462  D004               	goto	l5517
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;doprnt.c: 1346: width--;
 14134  001464  0100               	movlb	0	; () banked
 14135  001466  07A9               	decf	printf@width& (0+255),f,b
 14136  001468  A0D8               	btfss	status,0,c
 14137  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14138  00146C                     l5517:
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;doprnt.c: 1381: if(width > c)
 14142  00146C  0E80               	movlw	128
 14143  00146E  0100               	movlb	0	; () banked
 14144  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14145  001472  0E7F               	movlw	127
 14146  001474  0100               	movlb	0	; () banked
 14147  001476  6F9A               	movwf	??_printf& (0+255),b
 14148  001478  0100               	movlb	0	; () banked
 14149  00147A  51A9               	movf	printf@width& (0+255),w,b
 14150  00147C  0100               	movlb	0	; () banked
 14151  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14152  001480  0100               	movlb	0	; () banked
 14153  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14154  001484  0A80               	xorlw	128
 14155  001486  0100               	movlb	0	; () banked
 14156  001488  599A               	subwfb	??_printf& (0+255),w,b
 14157  00148A  B0D8               	btfsc	status,0,c
 14158  00148C  D00B               	goto	l5521
 14159                           
 14160                           ; BSR set to: 0
 14161                           ;doprnt.c: 1382: width -= c;
 14162  00148E  0100               	movlb	0	; () banked
 14163  001490  51A8               	movf	printf@c& (0+255),w,b
 14164  001492  0100               	movlb	0	; () banked
 14165  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14166  001496  0E00               	movlw	0
 14167  001498  0100               	movlb	0	; () banked
 14168  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14169  00149C  0EFF               	movlw	255
 14170  00149E  0100               	movlb	0	; () banked
 14171  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14172  0014A2  D005               	goto	l5523
 14173  0014A4                     l5521:
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;doprnt.c: 1383: else
 14177                           ;doprnt.c: 1384: width = 0;
 14178  0014A4  0E00               	movlw	0
 14179  0014A6  0100               	movlb	0	; () banked
 14180  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14181  0014AA  0E00               	movlw	0
 14182  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14183  0014AE                     l5523:
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;doprnt.c: 1387: if(flag & 0x04) {
 14187  0014AE  0100               	movlb	0	; () banked
 14188  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14189  0014B2  D018               	goto	l5535
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;doprnt.c: 1392: if(flag & 0x03)
 14193  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14194  0014B8  0E03               	movlw	3
 14195  0014BA  0100               	movlb	0	; () banked
 14196  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14197  0014BE  B4D8               	btfsc	status,2,c
 14198  0014C0  D003               	goto	l5529
 14199                           
 14200                           ; BSR set to: 0
 14201                           ;doprnt.c: 1393: (putch('-') );
 14202  0014C2  0E2D               	movlw	45
 14203  0014C4  ECD9  F023         	call	_putch
 14204  0014C8                     l5529:
 14205                           
 14206                           ;doprnt.c: 1415: if(width)
 14207  0014C8  0100               	movlb	0	; () banked
 14208  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14209  0014CC  0100               	movlb	0	; () banked
 14210  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14211  0014D0  B4D8               	btfsc	status,2,c
 14212  0014D2  D025               	goto	l5545
 14213                           
 14214                           ; BSR set to: 0
 14215                           ;doprnt.c: 1417: (putch('0') );
 14216                           
 14217                           ; BSR set to: 0
 14218                           
 14219                           ;doprnt.c: 1416: do
 14220  0014D4  0E30               	movlw	48
 14221  0014D6  ECD9  F023         	call	_putch
 14222                           
 14223                           ;doprnt.c: 1418: while(--width);
 14224  0014DA  0100               	movlb	0	; () banked
 14225  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14226  0014DE  A0D8               	btfss	status,0,c
 14227  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14228  0014E2  D7F2               	goto	l5529
 14229  0014E4                     l5535:
 14230                           
 14231                           ; BSR set to: 0
 14232                           ;doprnt.c: 1422: {
 14233                           ;doprnt.c: 1424: if(width
 14234                           ;doprnt.c: 1428: )
 14235  0014E4  0100               	movlb	0	; () banked
 14236  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14237  0014E8  0100               	movlb	0	; () banked
 14238  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14239  0014EC  B4D8               	btfsc	status,2,c
 14240  0014EE  D00D               	goto	l5541
 14241  0014F0                     l5537:
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;doprnt.c: 1430: (putch(' ') );
 14245  0014F0  0E20               	movlw	32
 14246  0014F2  ECD9  F023         	call	_putch
 14247                           
 14248                           ;doprnt.c: 1431: while(--width);
 14249  0014F6  0100               	movlb	0	; () banked
 14250  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14251  0014FA  A0D8               	btfss	status,0,c
 14252  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14253  0014FE  0100               	movlb	0	; () banked
 14254  001500  51A9               	movf	printf@width& (0+255),w,b
 14255  001502  0100               	movlb	0	; () banked
 14256  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14257  001506  A4D8               	btfss	status,2,c
 14258  001508  D7F3               	goto	l5537
 14259  00150A                     l5541:
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;doprnt.c: 1438: if(flag & 0x03)
 14263  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14264  00150E  0E03               	movlw	3
 14265  001510  0100               	movlb	0	; () banked
 14266  001512  179A               	andwf	??_printf& (0+255),f,b
 14267  001514  B4D8               	btfsc	status,2,c
 14268  001516  D003               	goto	l5545
 14269                           
 14270                           ; BSR set to: 0
 14271                           ;doprnt.c: 1439: (putch('-') );
 14272  001518  0E2D               	movlw	45
 14273  00151A  ECD9  F023         	call	_putch
 14274  00151E                     l5545:
 14275                           
 14276                           ;doprnt.c: 1469: }
 14277                           ;doprnt.c: 1472: prec = c;
 14278  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14279                           
 14280                           ;doprnt.c: 1474: while(prec--) {
 14281  001522  D02C               	goto	l5551
 14282  001524                     l5547:
 14283                           
 14284                           ;doprnt.c: 1478: {
 14285                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14286  001524  0100               	movlb	0	; () banked
 14287  001526  519E               	movf	printf@prec& (0+255),w,b
 14288  001528  0D02               	mullw	2
 14289  00152A  0E32               	movlw	low _dpowers
 14290  00152C  24F3               	addwf	prodl,w,c
 14291  00152E  6EF6               	movwf	tblptrl,c
 14292  001530  0EFB               	movlw	high _dpowers
 14293  001532  20F4               	addwfc	prodh,w,c
 14294  001534  6EF7               	movwf	tblptrh,c
 14295  001536                     	if	1	;There are 3 active tblptr bytes
 14296  001536  6AF8               	clrf	tblptru,c
 14297  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14298  00153A  22F8               	addwfc	tblptru,f,c
 14299  00153C                     	endif
 14300  00153C  0009               	tblrd		*+
 14301  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14302  001542  000A               	tblrd		*-
 14303  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14304  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14305  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14306  001550  ECE1  F01D         	call	___lwdiv	;wreg free
 14307  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14308  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14309  00155C  0E00               	movlw	0
 14310  00155E  0100               	movlb	0	; () banked
 14311  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14312  001562  0E0A               	movlw	10
 14313  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14314  001566  ECF9  F01E         	call	___lwmod	;wreg free
 14315  00156A  0100               	movlb	0	; () banked
 14316  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14317  00156E  0F30               	addlw	48
 14318  001570  0100               	movlb	0	; () banked
 14319  001572  6FA8               	movwf	printf@c& (0+255),b
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;doprnt.c: 1523: }
 14323                           ;doprnt.c: 1524: (putch(c) );
 14324  001574  0100               	movlb	0	; () banked
 14325  001576  51A8               	movf	printf@c& (0+255),w,b
 14326  001578  ECD9  F023         	call	_putch
 14327  00157C                     l5551:
 14328  00157C  0100               	movlb	0	; () banked
 14329  00157E  079E               	decf	printf@prec& (0+255),f,b
 14330  001580  0100               	movlb	0	; () banked
 14331  001582  299E               	incf	printf@prec& (0+255),w,b
 14332  001584  A4D8               	btfss	status,2,c
 14333  001586  D7CE               	goto	l5547
 14334  001588                     l5553:
 14335  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14336  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14337  001590  0100               	movlb	0	; () banked
 14338  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14339  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14340  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14341  001596  6AF8               	clrf	tblptru,c
 14342  001598                     	endif
 14343  001598                     	if	0	;tblptru may be non-zero
 14344  001598                     	endif
 14345  001598  0008               	tblrd		*
 14346  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14347  00159E  0100               	movlb	0	; () banked
 14348  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14349  0015A2  B4D8               	btfsc	status,2,c
 14350  0015A4  0012               	return	
 14351  0015A6  D5EB               	goto	l5423
 14352  0015A8                     __end_of_printf:
 14353                           	opt stack 0
 14354                           tblptru	equ	0xFF8
 14355                           tblptrh	equ	0xFF7
 14356                           tblptrl	equ	0xFF6
 14357                           tablat	equ	0xFF5
 14358                           prodh	equ	0xFF4
 14359                           prodl	equ	0xFF3
 14360                           intcon	equ	0xFF2
 14361                           intcon2	equ	0xFF1
 14362                           intcon3	equ	0xFF0
 14363                           indf0	equ	0xFEF
 14364                           postinc0	equ	0xFEE
 14365                           fsr0h	equ	0xFEA
 14366                           fsr0l	equ	0xFE9
 14367                           wreg	equ	0xFE8
 14368                           postdec1	equ	0xFE5
 14369                           fsr1l	equ	0xFE1
 14370                           indf2	equ	0xFDF
 14371                           postinc2	equ	0xFDE
 14372                           postdec2	equ	0xFDD
 14373                           fsr2h	equ	0xFDA
 14374                           fsr2l	equ	0xFD9
 14375                           status	equ	0xFD8
 14376                           
 14377 ;; *************** function _putch *****************
 14378 ;; Defined at:
 14379 ;;		line 20 in file "lcd.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  data            1    wreg     unsigned char 
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;  data            1    2[BANK0 ] unsigned char 
 14384 ;; Return value:  Size  Location     Type
 14385 ;;                  1    wreg      void 
 14386 ;; Registers used:
 14387 ;;		wreg, status,2, status,0, cstack
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;Total ram usage:        1 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:    8
 14400 ;; This function calls:
 14401 ;;		_lcdNibble
 14402 ;; This function is called by:
 14403 ;;		_printf
 14404 ;; This function uses a non-reentrant model
 14405 ;;
 14406                           
 14407                           	psect	text49
 14408  0047B2                     __ptext49:
 14409                           	opt stack 0
 14410  0047B2                     _putch:
 14411                           	opt stack 18
 14412                           
 14413                           ;incstack = 0
 14414                           ;putch@data stored from wreg
 14415  0047B2  0100               	movlb	0	; () banked
 14416  0047B4  6F82               	movwf	putch@data& (0+255),b
 14417                           
 14418                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14419  0047B6  848C               	bsf	3980,2,c	;volatile
 14420                           
 14421                           ;lcd.c: 22: lcdNibble(data);
 14422  0047B8  0100               	movlb	0	; () banked
 14423  0047BA  5182               	movf	putch@data& (0+255),w,b
 14424  0047BC  ECC5  F01E         	call	_lcdNibble
 14425  0047C0  0012               	return		;funcret
 14426  0047C2                     __end_of_putch:
 14427                           	opt stack 0
 14428                           tblptru	equ	0xFF8
 14429                           tblptrh	equ	0xFF7
 14430                           tblptrl	equ	0xFF6
 14431                           tablat	equ	0xFF5
 14432                           prodh	equ	0xFF4
 14433                           prodl	equ	0xFF3
 14434                           intcon	equ	0xFF2
 14435                           intcon2	equ	0xFF1
 14436                           intcon3	equ	0xFF0
 14437                           indf0	equ	0xFEF
 14438                           postinc0	equ	0xFEE
 14439                           fsr0h	equ	0xFEA
 14440                           fsr0l	equ	0xFE9
 14441                           wreg	equ	0xFE8
 14442                           postdec1	equ	0xFE5
 14443                           fsr1l	equ	0xFE1
 14444                           indf2	equ	0xFDF
 14445                           postinc2	equ	0xFDE
 14446                           postdec2	equ	0xFDD
 14447                           fsr2h	equ	0xFDA
 14448                           fsr2l	equ	0xFD9
 14449                           status	equ	0xFD8
 14450                           
 14451 ;; *************** function _isdigit *****************
 14452 ;; Defined at:
 14453 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14454 ;; Parameters:    Size  Location     Type
 14455 ;;  c               1    wreg     unsigned char 
 14456 ;; Auto vars:     Size  Location     Type
 14457 ;;  c               1    2[BANK0 ] unsigned char 
 14458 ;; Return value:  Size  Location     Type
 14459 ;;		None               void
 14460 ;; Registers used:
 14461 ;;		wreg, status,2, status,0
 14462 ;; Tracked objects:
 14463 ;;		On entry : 0/0
 14464 ;;		On exit  : 0/0
 14465 ;;		Unchanged: 0/0
 14466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14470 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14471 ;;Total ram usage:        3 bytes
 14472 ;; Hardware stack levels used:    1
 14473 ;; Hardware stack levels required when called:    7
 14474 ;; This function calls:
 14475 ;;		Nothing
 14476 ;; This function is called by:
 14477 ;;		_printf
 14478 ;; This function uses a non-reentrant model
 14479 ;;
 14480                           
 14481                           	psect	text50
 14482  0045FC                     __ptext50:
 14483                           	opt stack 0
 14484  0045FC                     _isdigit:
 14485                           	opt stack 19
 14486                           
 14487                           ;incstack = 0
 14488                           ;isdigit@c stored from wreg
 14489  0045FC  0100               	movlb	0	; () banked
 14490  0045FE  6F82               	movwf	isdigit@c& (0+255),b
 14491  004600  0E00               	movlw	0
 14492  004602  0100               	movlb	0	; () banked
 14493  004604  6F81               	movwf	_isdigit$1942& (0+255),b
 14494                           
 14495                           ; BSR set to: 0
 14496  004606  0E3A               	movlw	58
 14497  004608  0100               	movlb	0	; () banked
 14498  00460A  6182               	cpfslt	isdigit@c& (0+255),b
 14499  00460C  D007               	goto	l5271
 14500                           
 14501                           ; BSR set to: 0
 14502  00460E  0E2F               	movlw	47
 14503  004610  0100               	movlb	0	; () banked
 14504  004612  6582               	cpfsgt	isdigit@c& (0+255),b
 14505  004614  D003               	goto	l5271
 14506                           
 14507                           ; BSR set to: 0
 14508  004616  0E01               	movlw	1
 14509  004618  0100               	movlb	0	; () banked
 14510  00461A  6F81               	movwf	_isdigit$1942& (0+255),b
 14511  00461C                     l5271:
 14512                           
 14513                           ; BSR set to: 0
 14514  00461C  C081  F080         	movff	_isdigit$1942,??_isdigit
 14515  004620  0100               	movlb	0	; () banked
 14516  004622  3180               	rrcf	??_isdigit& (0+255),w,b
 14517  004624  0012               	return	
 14518  004626                     __end_of_isdigit:
 14519                           	opt stack 0
 14520                           tblptru	equ	0xFF8
 14521                           tblptrh	equ	0xFF7
 14522                           tblptrl	equ	0xFF6
 14523                           tablat	equ	0xFF5
 14524                           prodh	equ	0xFF4
 14525                           prodl	equ	0xFF3
 14526                           intcon	equ	0xFF2
 14527                           intcon2	equ	0xFF1
 14528                           intcon3	equ	0xFF0
 14529                           indf0	equ	0xFEF
 14530                           postinc0	equ	0xFEE
 14531                           fsr0h	equ	0xFEA
 14532                           fsr0l	equ	0xFE9
 14533                           wreg	equ	0xFE8
 14534                           postdec1	equ	0xFE5
 14535                           fsr1l	equ	0xFE1
 14536                           indf2	equ	0xFDF
 14537                           postinc2	equ	0xFDE
 14538                           postdec2	equ	0xFDD
 14539                           fsr2h	equ	0xFDA
 14540                           fsr2l	equ	0xFD9
 14541                           status	equ	0xFD8
 14542                           
 14543 ;; *************** function ___wmul *****************
 14544 ;; Defined at:
 14545 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14548 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14549 ;; Auto vars:     Size  Location     Type
 14550 ;;  product         2    4[BANK0 ] unsigned int 
 14551 ;; Return value:  Size  Location     Type
 14552 ;;                  2    0[BANK0 ] unsigned int 
 14553 ;; Registers used:
 14554 ;;		wreg, status,2, status,0, prodl, prodh
 14555 ;; Tracked objects:
 14556 ;;		On entry : 0/0
 14557 ;;		On exit  : 0/0
 14558 ;;		Unchanged: 0/0
 14559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14560 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14563 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14564 ;;Total ram usage:        6 bytes
 14565 ;; Hardware stack levels used:    1
 14566 ;; Hardware stack levels required when called:    7
 14567 ;; This function calls:
 14568 ;;		Nothing
 14569 ;; This function is called by:
 14570 ;;		_printf
 14571 ;; This function uses a non-reentrant model
 14572 ;;
 14573                           
 14574                           	psect	text51
 14575  0042D0                     __ptext51:
 14576                           	opt stack 0
 14577  0042D0                     ___wmul:
 14578                           	opt stack 19
 14579                           
 14580                           ; BSR set to: 0
 14581                           ;incstack = 0
 14582  0042D0  0100               	movlb	0	; () banked
 14583  0042D2  5180               	movf	___wmul@multiplier& (0+255),w,b
 14584  0042D4  0100               	movlb	0	; () banked
 14585  0042D6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14586  0042D8  CFF3 F084          	movff	prodl,___wmul@product
 14587  0042DC  CFF4 F085          	movff	prodh,___wmul@product+1
 14588  0042E0  0100               	movlb	0	; () banked
 14589  0042E2  5180               	movf	___wmul@multiplier& (0+255),w,b
 14590  0042E4  0100               	movlb	0	; () banked
 14591  0042E6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14592  0042E8  50F3               	movf	prodl,w,c
 14593  0042EA  0100               	movlb	0	; () banked
 14594  0042EC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14595  0042EE  0100               	movlb	0	; () banked
 14596  0042F0  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14597  0042F2  0100               	movlb	0	; () banked
 14598  0042F4  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14599  0042F6  50F3               	movf	prodl,w,c
 14600  0042F8  0100               	movlb	0	; () banked
 14601  0042FA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14602                           
 14603                           ; BSR set to: 0
 14604  0042FC  C084  F080         	movff	___wmul@product,?___wmul
 14605  004300  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14606  004304  0012               	return	
 14607  004306                     __end_of___wmul:
 14608                           	opt stack 0
 14609                           tblptru	equ	0xFF8
 14610                           tblptrh	equ	0xFF7
 14611                           tblptrl	equ	0xFF6
 14612                           tablat	equ	0xFF5
 14613                           prodh	equ	0xFF4
 14614                           prodl	equ	0xFF3
 14615                           intcon	equ	0xFF2
 14616                           intcon2	equ	0xFF1
 14617                           intcon3	equ	0xFF0
 14618                           indf0	equ	0xFEF
 14619                           postinc0	equ	0xFEE
 14620                           fsr0h	equ	0xFEA
 14621                           fsr0l	equ	0xFE9
 14622                           wreg	equ	0xFE8
 14623                           postdec1	equ	0xFE5
 14624                           fsr1l	equ	0xFE1
 14625                           indf2	equ	0xFDF
 14626                           postinc2	equ	0xFDE
 14627                           postdec2	equ	0xFDD
 14628                           fsr2h	equ	0xFDA
 14629                           fsr2l	equ	0xFD9
 14630                           status	equ	0xFD8
 14631                           
 14632 ;; *************** function ___lwmod *****************
 14633 ;; Defined at:
 14634 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14635 ;; Parameters:    Size  Location     Type
 14636 ;;  dividend        2    7[BANK0 ] unsigned int 
 14637 ;;  divisor         2    9[BANK0 ] unsigned int 
 14638 ;; Auto vars:     Size  Location     Type
 14639 ;;  counter         1   11[BANK0 ] unsigned char 
 14640 ;; Return value:  Size  Location     Type
 14641 ;;                  2    7[BANK0 ] unsigned int 
 14642 ;; Registers used:
 14643 ;;		wreg, status,2, status,0
 14644 ;; Tracked objects:
 14645 ;;		On entry : 0/0
 14646 ;;		On exit  : 0/0
 14647 ;;		Unchanged: 0/0
 14648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14652 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14653 ;;Total ram usage:        5 bytes
 14654 ;; Hardware stack levels used:    1
 14655 ;; Hardware stack levels required when called:    7
 14656 ;; This function calls:
 14657 ;;		Nothing
 14658 ;; This function is called by:
 14659 ;;		_printf
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           	psect	text52
 14664  003DF2                     __ptext52:
 14665                           	opt stack 0
 14666  003DF2                     ___lwmod:
 14667                           	opt stack 19
 14668                           
 14669                           ; BSR set to: 0
 14670                           ;incstack = 0
 14671  003DF2  0100               	movlb	0	; () banked
 14672  003DF4  5189               	movf	___lwmod@divisor& (0+255),w,b
 14673  003DF6  0100               	movlb	0	; () banked
 14674  003DF8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14675  003DFA  B4D8               	btfsc	status,2,c
 14676  003DFC  D026               	goto	l1716
 14677                           
 14678                           ; BSR set to: 0
 14679  003DFE  0E01               	movlw	1
 14680  003E00  0100               	movlb	0	; () banked
 14681  003E02  6F8B               	movwf	___lwmod@counter& (0+255),b
 14682  003E04  D006               	goto	l5309
 14683  003E06                     l5307:
 14684                           
 14685                           ; BSR set to: 0
 14686  003E06  0100               	movlb	0	; () banked
 14687  003E08  90D8               	bcf	status,0,c
 14688  003E0A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14689  003E0C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14690  003E0E  0100               	movlb	0	; () banked
 14691  003E10  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14692  003E12                     l5309:
 14693                           
 14694                           ; BSR set to: 0
 14695  003E12  0100               	movlb	0	; () banked
 14696  003E14  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14697  003E16  D7F7               	goto	l5307
 14698  003E18                     l5311:
 14699                           
 14700                           ; BSR set to: 0
 14701  003E18  0100               	movlb	0	; () banked
 14702  003E1A  5189               	movf	___lwmod@divisor& (0+255),w,b
 14703  003E1C  0100               	movlb	0	; () banked
 14704  003E1E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14705  003E20  0100               	movlb	0	; () banked
 14706  003E22  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14707  003E24  0100               	movlb	0	; () banked
 14708  003E26  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14709  003E28  A0D8               	btfss	status,0,c
 14710  003E2A  D008               	goto	l5315
 14711                           
 14712                           ; BSR set to: 0
 14713  003E2C  0100               	movlb	0	; () banked
 14714  003E2E  5189               	movf	___lwmod@divisor& (0+255),w,b
 14715  003E30  0100               	movlb	0	; () banked
 14716  003E32  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14717  003E34  0100               	movlb	0	; () banked
 14718  003E36  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14719  003E38  0100               	movlb	0	; () banked
 14720  003E3A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14721  003E3C                     l5315:
 14722                           
 14723                           ; BSR set to: 0
 14724  003E3C  0100               	movlb	0	; () banked
 14725  003E3E  90D8               	bcf	status,0,c
 14726  003E40  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14727  003E42  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14728                           
 14729                           ; BSR set to: 0
 14730  003E44  0100               	movlb	0	; () banked
 14731  003E46  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14732  003E48  D7E7               	goto	l5311
 14733  003E4A                     l1716:
 14734                           
 14735                           ; BSR set to: 0
 14736  003E4A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14737  003E4E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14738                           
 14739                           ; BSR set to: 0
 14740  003E52  0012               	return		;funcret
 14741  003E54                     __end_of___lwmod:
 14742                           	opt stack 0
 14743                           tblptru	equ	0xFF8
 14744                           tblptrh	equ	0xFF7
 14745                           tblptrl	equ	0xFF6
 14746                           tablat	equ	0xFF5
 14747                           prodh	equ	0xFF4
 14748                           prodl	equ	0xFF3
 14749                           intcon	equ	0xFF2
 14750                           intcon2	equ	0xFF1
 14751                           intcon3	equ	0xFF0
 14752                           indf0	equ	0xFEF
 14753                           postinc0	equ	0xFEE
 14754                           fsr0h	equ	0xFEA
 14755                           fsr0l	equ	0xFE9
 14756                           wreg	equ	0xFE8
 14757                           postdec1	equ	0xFE5
 14758                           fsr1l	equ	0xFE1
 14759                           indf2	equ	0xFDF
 14760                           postinc2	equ	0xFDE
 14761                           postdec2	equ	0xFDD
 14762                           fsr2h	equ	0xFDA
 14763                           fsr2l	equ	0xFD9
 14764                           status	equ	0xFD8
 14765                           
 14766 ;; *************** function ___lwdiv *****************
 14767 ;; Defined at:
 14768 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;  dividend        2    0[BANK0 ] unsigned int 
 14771 ;;  divisor         2    2[BANK0 ] unsigned int 
 14772 ;; Auto vars:     Size  Location     Type
 14773 ;;  quotient        2    4[BANK0 ] unsigned int 
 14774 ;;  counter         1    6[BANK0 ] unsigned char 
 14775 ;; Return value:  Size  Location     Type
 14776 ;;                  2    0[BANK0 ] unsigned int 
 14777 ;; Registers used:
 14778 ;;		wreg, status,2, status,0
 14779 ;; Tracked objects:
 14780 ;;		On entry : 0/0
 14781 ;;		On exit  : 0/0
 14782 ;;		Unchanged: 0/0
 14783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14784 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14785 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14787 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14788 ;;Total ram usage:        7 bytes
 14789 ;; Hardware stack levels used:    1
 14790 ;; Hardware stack levels required when called:    7
 14791 ;; This function calls:
 14792 ;;		Nothing
 14793 ;; This function is called by:
 14794 ;;		_printf
 14795 ;; This function uses a non-reentrant model
 14796 ;;
 14797                           
 14798                           	psect	text53
 14799  003BC2                     __ptext53:
 14800                           	opt stack 0
 14801  003BC2                     ___lwdiv:
 14802                           	opt stack 19
 14803                           
 14804                           ; BSR set to: 0
 14805                           ;incstack = 0
 14806  003BC2  0E00               	movlw	0
 14807  003BC4  0100               	movlb	0	; () banked
 14808  003BC6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14809  003BC8  0E00               	movlw	0
 14810  003BCA  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14811                           
 14812                           ; BSR set to: 0
 14813  003BCC  0100               	movlb	0	; () banked
 14814  003BCE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14815  003BD0  0100               	movlb	0	; () banked
 14816  003BD2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14817  003BD4  B4D8               	btfsc	status,2,c
 14818  003BD6  D02C               	goto	l1706
 14819                           
 14820                           ; BSR set to: 0
 14821  003BD8  0E01               	movlw	1
 14822  003BDA  0100               	movlb	0	; () banked
 14823  003BDC  6F86               	movwf	___lwdiv@counter& (0+255),b
 14824  003BDE  D006               	goto	l5289
 14825  003BE0                     l5287:
 14826                           
 14827                           ; BSR set to: 0
 14828  003BE0  0100               	movlb	0	; () banked
 14829  003BE2  90D8               	bcf	status,0,c
 14830  003BE4  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14831  003BE6  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14832  003BE8  0100               	movlb	0	; () banked
 14833  003BEA  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14834  003BEC                     l5289:
 14835                           
 14836                           ; BSR set to: 0
 14837  003BEC  0100               	movlb	0	; () banked
 14838  003BEE  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14839  003BF0  D7F7               	goto	l5287
 14840  003BF2                     l5291:
 14841                           
 14842                           ; BSR set to: 0
 14843  003BF2  0100               	movlb	0	; () banked
 14844  003BF4  90D8               	bcf	status,0,c
 14845  003BF6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14846  003BF8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14847                           
 14848                           ; BSR set to: 0
 14849  003BFA  0100               	movlb	0	; () banked
 14850  003BFC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14851  003BFE  0100               	movlb	0	; () banked
 14852  003C00  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14853  003C02  0100               	movlb	0	; () banked
 14854  003C04  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14855  003C06  0100               	movlb	0	; () banked
 14856  003C08  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14857  003C0A  A0D8               	btfss	status,0,c
 14858  003C0C  D00A               	goto	l5299
 14859                           
 14860                           ; BSR set to: 0
 14861  003C0E  0100               	movlb	0	; () banked
 14862  003C10  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14863  003C12  0100               	movlb	0	; () banked
 14864  003C14  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14865  003C16  0100               	movlb	0	; () banked
 14866  003C18  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14867  003C1A  0100               	movlb	0	; () banked
 14868  003C1C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14869                           
 14870                           ; BSR set to: 0
 14871  003C1E  0100               	movlb	0	; () banked
 14872  003C20  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14873  003C22                     l5299:
 14874                           
 14875                           ; BSR set to: 0
 14876  003C22  0100               	movlb	0	; () banked
 14877  003C24  90D8               	bcf	status,0,c
 14878  003C26  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14879  003C28  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14880                           
 14881                           ; BSR set to: 0
 14882  003C2A  0100               	movlb	0	; () banked
 14883  003C2C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14884  003C2E  D7E1               	goto	l5291
 14885  003C30                     l1706:
 14886                           
 14887                           ; BSR set to: 0
 14888  003C30  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14889  003C34  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14890                           
 14891                           ; BSR set to: 0
 14892  003C38  0012               	return		;funcret
 14893  003C3A                     __end_of___lwdiv:
 14894                           	opt stack 0
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           intcon2	equ	0xFF1
 14903                           intcon3	equ	0xFF0
 14904                           indf0	equ	0xFEF
 14905                           postinc0	equ	0xFEE
 14906                           fsr0h	equ	0xFEA
 14907                           fsr0l	equ	0xFE9
 14908                           wreg	equ	0xFE8
 14909                           postdec1	equ	0xFE5
 14910                           fsr1l	equ	0xFE1
 14911                           indf2	equ	0xFDF
 14912                           postinc2	equ	0xFDE
 14913                           postdec2	equ	0xFDD
 14914                           fsr2h	equ	0xFDA
 14915                           fsr2l	equ	0xFD9
 14916                           status	equ	0xFD8
 14917                           
 14918 ;; *************** function _lcdInst *****************
 14919 ;; Defined at:
 14920 ;;		line 15 in file "lcd.c"
 14921 ;; Parameters:    Size  Location     Type
 14922 ;;  data            1    wreg     unsigned char 
 14923 ;; Auto vars:     Size  Location     Type
 14924 ;;  data            1    2[BANK0 ] unsigned char 
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      void 
 14927 ;; Registers used:
 14928 ;;		wreg, status,2, status,0, cstack
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;Total ram usage:        1 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    8
 14941 ;; This function calls:
 14942 ;;		_lcdNibble
 14943 ;; This function is called by:
 14944 ;;		_UI
 14945 ;;		_change_state_to_menu_start
 14946 ;;		_change_state_to_menu_12
 14947 ;;		_change_state_to_menu_22
 14948 ;;		_initLCD
 14949 ;;		_printRTC
 14950 ;;		_Loading
 14951 ;;		_EEPROM_write
 14952 ;;		_Test
 14953 ;;		_algorithmTest
 14954 ;;		_sensorTest
 14955 ;;		_actuatorTest
 14956 ;;		_BothServos
 14957 ;;		_PortTestA5
 14958 ;;		_PusherTestA5
 14959 ;;		_ToggleTestA5
 14960 ;; This function uses a non-reentrant model
 14961 ;;
 14962                           
 14963                           	psect	text54
 14964  0047C2                     __ptext54:
 14965                           	opt stack 0
 14966  0047C2                     _lcdInst:
 14967                           	opt stack 20
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;incstack = 0
 14971                           ;lcdInst@data stored from wreg
 14972  0047C2  0100               	movlb	0	; () banked
 14973  0047C4  6F82               	movwf	lcdInst@data& (0+255),b
 14974                           
 14975                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14976  0047C6  948C               	bcf	3980,2,c	;volatile
 14977                           
 14978                           ;lcd.c: 17: lcdNibble(data);
 14979  0047C8  0100               	movlb	0	; () banked
 14980  0047CA  5182               	movf	lcdInst@data& (0+255),w,b
 14981  0047CC  ECC5  F01E         	call	_lcdNibble
 14982  0047D0  0012               	return		;funcret
 14983  0047D2                     __end_of_lcdInst:
 14984                           	opt stack 0
 14985                           tblptru	equ	0xFF8
 14986                           tblptrh	equ	0xFF7
 14987                           tblptrl	equ	0xFF6
 14988                           tablat	equ	0xFF5
 14989                           prodh	equ	0xFF4
 14990                           prodl	equ	0xFF3
 14991                           intcon	equ	0xFF2
 14992                           intcon2	equ	0xFF1
 14993                           intcon3	equ	0xFF0
 14994                           indf0	equ	0xFEF
 14995                           postinc0	equ	0xFEE
 14996                           fsr0h	equ	0xFEA
 14997                           fsr0l	equ	0xFE9
 14998                           wreg	equ	0xFE8
 14999                           postdec1	equ	0xFE5
 15000                           fsr1l	equ	0xFE1
 15001                           indf2	equ	0xFDF
 15002                           postinc2	equ	0xFDE
 15003                           postdec2	equ	0xFDD
 15004                           fsr2h	equ	0xFDA
 15005                           fsr2l	equ	0xFD9
 15006                           status	equ	0xFD8
 15007                           
 15008 ;; *************** function _lcdNibble *****************
 15009 ;; Defined at:
 15010 ;;		line 25 in file "lcd.c"
 15011 ;; Parameters:    Size  Location     Type
 15012 ;;  data            1    wreg     unsigned char 
 15013 ;; Auto vars:     Size  Location     Type
 15014 ;;  data            1    1[BANK0 ] unsigned char 
 15015 ;;  temp            1    0[BANK0 ] unsigned char 
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  1    wreg      void 
 15018 ;; Registers used:
 15019 ;;		wreg, status,2, status,0
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;Total ram usage:        2 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:    7
 15032 ;; This function calls:
 15033 ;;		Nothing
 15034 ;; This function is called by:
 15035 ;;		_lcdInst
 15036 ;;		_putch
 15037 ;; This function uses a non-reentrant model
 15038 ;;
 15039                           
 15040                           	psect	text55
 15041  003D8A                     __ptext55:
 15042                           	opt stack 0
 15043  003D8A                     _lcdNibble:
 15044                           	opt stack 20
 15045                           
 15046                           ;incstack = 0
 15047                           ;lcdNibble@data stored from wreg
 15048  003D8A  0100               	movlb	0	; () banked
 15049  003D8C  6F81               	movwf	lcdNibble@data& (0+255),b
 15050                           
 15051                           ;lcd.c: 27: char temp = data & 0xF0;
 15052  003D8E  0100               	movlb	0	; () banked
 15053  003D90  5181               	movf	lcdNibble@data& (0+255),w,b
 15054  003D92  0BF0               	andlw	240
 15055  003D94  0100               	movlb	0	; () banked
 15056  003D96  6F80               	movwf	lcdNibble@temp& (0+255),b
 15057                           
 15058                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15059  003D98  508C               	movf	3980,w,c	;volatile
 15060  003D9A  0B0F               	andlw	15
 15061  003D9C  6E8C               	movwf	3980,c	;volatile
 15062                           
 15063                           ;lcd.c: 29: LATD = temp | LATD;
 15064  003D9E  0100               	movlb	0	; () banked
 15065  003DA0  5180               	movf	lcdNibble@temp& (0+255),w,b
 15066  003DA2  108C               	iorwf	3980,w,c	;volatile
 15067  003DA4  6E8C               	movwf	3980,c	;volatile
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15071  003DA6  868C               	bsf	3980,3,c	;volatile
 15072                           
 15073                           ; BSR set to: 0
 15074                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15075  003DA8  0E42               	movlw	66
 15076  003DAA                     u8207:
 15077  003DAA  2EE8               	decfsz	wreg,f,c
 15078  003DAC  D7FE               	bra	u8207
 15079  003DAE  D000               	nop2	
 15080                           
 15081                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15082  003DB0  968C               	bcf	3980,3,c	;volatile
 15083                           
 15084                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15085  003DB2  0E42               	movlw	66
 15086  003DB4                     u8217:
 15087  003DB4  2EE8               	decfsz	wreg,f,c
 15088  003DB6  D7FE               	bra	u8217
 15089  003DB8  D000               	nop2	
 15090                           
 15091                           ;lcd.c: 36: data = data << 4;
 15092  003DBA  0100               	movlb	0	; () banked
 15093  003DBC  3981               	swapf	lcdNibble@data& (0+255),w,b
 15094  003DBE  0BF0               	andlw	240
 15095  003DC0  0100               	movlb	0	; () banked
 15096  003DC2  6F81               	movwf	lcdNibble@data& (0+255),b
 15097                           
 15098                           ;lcd.c: 38: temp = data & 0xF0;
 15099  003DC4  0100               	movlb	0	; () banked
 15100  003DC6  5181               	movf	lcdNibble@data& (0+255),w,b
 15101  003DC8  0BF0               	andlw	240
 15102  003DCA  0100               	movlb	0	; () banked
 15103  003DCC  6F80               	movwf	lcdNibble@temp& (0+255),b
 15104                           
 15105                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15106  003DCE  508C               	movf	3980,w,c	;volatile
 15107  003DD0  0B0F               	andlw	15
 15108  003DD2  6E8C               	movwf	3980,c	;volatile
 15109                           
 15110                           ;lcd.c: 40: LATD = temp | LATD;
 15111  003DD4  0100               	movlb	0	; () banked
 15112  003DD6  5180               	movf	lcdNibble@temp& (0+255),w,b
 15113  003DD8  108C               	iorwf	3980,w,c	;volatile
 15114  003DDA  6E8C               	movwf	3980,c	;volatile
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15118  003DDC  868C               	bsf	3980,3,c	;volatile
 15119                           
 15120                           ; BSR set to: 0
 15121                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15122  003DDE  0E42               	movlw	66
 15123  003DE0                     u8227:
 15124  003DE0  2EE8               	decfsz	wreg,f,c
 15125  003DE2  D7FE               	bra	u8227
 15126  003DE4  D000               	nop2	
 15127                           
 15128                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15129  003DE6  968C               	bcf	3980,3,c	;volatile
 15130                           
 15131                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15132  003DE8  0E42               	movlw	66
 15133  003DEA                     u8237:
 15134  003DEA  2EE8               	decfsz	wreg,f,c
 15135  003DEC  D7FE               	bra	u8237
 15136  003DEE  D000               	nop2	
 15137  003DF0  0012               	return		;funcret
 15138  003DF2                     __end_of_lcdNibble:
 15139                           	opt stack 0
 15140                           tblptru	equ	0xFF8
 15141                           tblptrh	equ	0xFF7
 15142                           tblptrl	equ	0xFF6
 15143                           tablat	equ	0xFF5
 15144                           prodh	equ	0xFF4
 15145                           prodl	equ	0xFF3
 15146                           intcon	equ	0xFF2
 15147                           intcon2	equ	0xFF1
 15148                           intcon3	equ	0xFF0
 15149                           indf0	equ	0xFEF
 15150                           postinc0	equ	0xFEE
 15151                           fsr0h	equ	0xFEA
 15152                           fsr0l	equ	0xFE9
 15153                           wreg	equ	0xFE8
 15154                           postdec1	equ	0xFE5
 15155                           fsr1l	equ	0xFE1
 15156                           indf2	equ	0xFDF
 15157                           postinc2	equ	0xFDE
 15158                           postdec2	equ	0xFDD
 15159                           fsr2h	equ	0xFDA
 15160                           fsr2l	equ	0xFD9
 15161                           status	equ	0xFD8
 15162                           
 15163 ;; *************** function _initServos *****************
 15164 ;; Defined at:
 15165 ;;		line 272 in file "sort.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;		None
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;		None
 15170 ;; Return value:  Size  Location     Type
 15171 ;;                  1    wreg      void 
 15172 ;; Registers used:
 15173 ;;		wreg, status,2, status,0, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/0
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;Total ram usage:        1 bytes
 15184 ;; Hardware stack levels used:    1
 15185 ;; Hardware stack levels required when called:    8
 15186 ;; This function calls:
 15187 ;;		_updateServoPosition
 15188 ;; This function is called by:
 15189 ;;		_Loading
 15190 ;;		_BothServos
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           	psect	text56
 15195  003F10                     __ptext56:
 15196                           	opt stack 0
 15197  003F10                     _initServos:
 15198                           	opt stack 20
 15199                           
 15200                           ;sort.c: 273: updateServoPosition(1200, 1);
 15201                           
 15202                           ;incstack = 0
 15203  003F10  0E04               	movlw	4
 15204  003F12  0100               	movlb	0	; () banked
 15205  003F14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15206  003F16  0EB0               	movlw	176
 15207  003F18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15208  003F1A  0E00               	movlw	0
 15209  003F1C  0100               	movlb	0	; () banked
 15210  003F1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15211  003F20  0E01               	movlw	1
 15212  003F22  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15213  003F24  EC1D  F01E         	call	_updateServoPosition	;wreg free
 15214                           
 15215                           ;sort.c: 274: updateServoPosition(1150, 3);
 15216  003F28  0E04               	movlw	4
 15217  003F2A  0100               	movlb	0	; () banked
 15218  003F2C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15219  003F2E  0E7E               	movlw	126
 15220  003F30  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15221  003F32  0E00               	movlw	0
 15222  003F34  0100               	movlb	0	; () banked
 15223  003F36  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15224  003F38  0E03               	movlw	3
 15225  003F3A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15226  003F3C  EC1D  F01E         	call	_updateServoPosition	;wreg free
 15227                           
 15228                           ;sort.c: 275: TMR1ON = 1;
 15229  003F40  80CD               	bsf	4045,0,c	;volatile
 15230                           
 15231                           ;sort.c: 276: was_low_1 = 0;
 15232  003F42  0E00               	movlw	0
 15233  003F44  6E7A               	movwf	_was_low_1+1,c	;volatile
 15234  003F46  0E00               	movlw	0
 15235  003F48  6E79               	movwf	_was_low_1,c	;volatile
 15236                           
 15237                           ;sort.c: 277: _delay((unsigned long)((5)*(32000000/4000.0)));
 15238  003F4A  0E34               	movlw	52
 15239  003F4C  0100               	movlb	0	; () banked
 15240  003F4E  6F88               	movwf	??_initServos& (0+255),b
 15241  003F50  0EF1               	movlw	241
 15242  003F52                     u8247:
 15243  003F52  2EE8               	decfsz	wreg,f,c
 15244  003F54  D7FE               	bra	u8247
 15245  003F56  2F88               	decfsz	??_initServos& (0+255),f,b
 15246  003F58  D7FC               	bra	u8247
 15247  003F5A  D000               	nop2	
 15248                           
 15249                           ;sort.c: 278: TMR3ON = 1;
 15250  003F5C  80B1               	bsf	4017,0,c	;volatile
 15251                           
 15252                           ;sort.c: 279: was_low_3 = 0;
 15253  003F5E  0E00               	movlw	0
 15254  003F60  6E7C               	movwf	_was_low_3+1,c	;volatile
 15255  003F62  0E00               	movlw	0
 15256  003F64  6E7B               	movwf	_was_low_3,c	;volatile
 15257                           
 15258                           ;sort.c: 281: LATCbits.LATC0 = 1;
 15259  003F66  808B               	bsf	3979,0,c	;volatile
 15260  003F68  0012               	return		;funcret
 15261  003F6A                     __end_of_initServos:
 15262                           	opt stack 0
 15263                           tblptru	equ	0xFF8
 15264                           tblptrh	equ	0xFF7
 15265                           tblptrl	equ	0xFF6
 15266                           tablat	equ	0xFF5
 15267                           prodh	equ	0xFF4
 15268                           prodl	equ	0xFF3
 15269                           intcon	equ	0xFF2
 15270                           intcon2	equ	0xFF1
 15271                           intcon3	equ	0xFF0
 15272                           indf0	equ	0xFEF
 15273                           postinc0	equ	0xFEE
 15274                           fsr0h	equ	0xFEA
 15275                           fsr0l	equ	0xFE9
 15276                           wreg	equ	0xFE8
 15277                           postdec1	equ	0xFE5
 15278                           fsr1l	equ	0xFE1
 15279                           indf2	equ	0xFDF
 15280                           postinc2	equ	0xFDE
 15281                           postdec2	equ	0xFDD
 15282                           fsr2h	equ	0xFDA
 15283                           fsr2l	equ	0xFD9
 15284                           status	equ	0xFD8
 15285                           
 15286 ;; *************** function _updateServoPosition *****************
 15287 ;; Defined at:
 15288 ;;		line 333 in file "sort.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  time_us         2    0[BANK0 ] int 
 15291 ;;  timer           2    2[BANK0 ] int 
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;  my_time         2    6[BANK0 ] unsigned int 
 15294 ;; Return value:  Size  Location     Type
 15295 ;;                  1    wreg      void 
 15296 ;; Registers used:
 15297 ;;		wreg, status,2, status,0
 15298 ;; Tracked objects:
 15299 ;;		On entry : 0/0
 15300 ;;		On exit  : 0/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15303 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15305 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15306 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;Total ram usage:        8 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    7
 15310 ;; This function calls:
 15311 ;;		Nothing
 15312 ;; This function is called by:
 15313 ;;		_Distribution
 15314 ;;		_initServos
 15315 ;;		_actuatorTest
 15316 ;;		_BothServos
 15317 ;; This function uses a non-reentrant model
 15318 ;;
 15319                           
 15320                           	psect	text57
 15321  003C3A                     __ptext57:
 15322                           	opt stack 0
 15323  003C3A                     _updateServoPosition:
 15324                           	opt stack 20
 15325                           
 15326                           ;sort.c: 334: unsigned int my_time = 65535 - time_us;
 15327                           
 15328                           ;incstack = 0
 15329  003C3A  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15330  003C3E  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15331  003C42  0100               	movlb	0	; () banked
 15332  003C44  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15333  003C46  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15334  003C48  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15335  003C4A  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15336  003C4C  0EFF               	movlw	255
 15337  003C4E  0100               	movlb	0	; () banked
 15338  003C50  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15339  003C52  0100               	movlb	0	; () banked
 15340  003C54  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15341  003C56  0EFF               	movlw	255
 15342  003C58  0100               	movlb	0	; () banked
 15343  003C5A  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15344  003C5C  0100               	movlb	0	; () banked
 15345  003C5E  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15346                           
 15347                           ;sort.c: 335: switch(timer){
 15348  003C60  D015               	goto	l5595
 15349  003C62                     l5593:
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;sort.c: 337: servoTimes[0] = my_time >> 8;
 15353  003C62  0100               	movlb	0	; () banked
 15354  003C64  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15355  003C66  0101               	movlb	1	; () banked
 15356  003C68  6F1C               	movwf	_servoTimes& (0+255),b
 15357  003C6A  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15358                           
 15359                           ;sort.c: 338: servoTimes[1] = my_time & 0xFF;
 15360  003C6C  0100               	movlb	0	; () banked
 15361  003C6E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15362  003C70  0101               	movlb	1	; () banked
 15363  003C72  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15364  003C74  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15365  003C76                     l796:
 15366                           
 15367                           ;sort.c: 340: servoTimes[2] = my_time >> 8;
 15368  003C76  0100               	movlb	0	; () banked
 15369  003C78  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15370  003C7A  0101               	movlb	1	; () banked
 15371  003C7C  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15372  003C7E  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15373                           
 15374                           ;sort.c: 341: servoTimes[3] = my_time & 0xFF;
 15375  003C80  0100               	movlb	0	; () banked
 15376  003C82  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15377  003C84  0101               	movlb	1	; () banked
 15378  003C86  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15379  003C88  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15380                           
 15381                           ;sort.c: 342: }
 15382  003C8A  0012               	return	
 15383  003C8C                     l5595:
 15384  003C8C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15385  003C90  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15386                           
 15387                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15388                           ; Switch size 1, requested type "space"
 15389                           ; Number of cases is 1, Range of values is 0 to 0
 15390                           ; switch strategies available:
 15391                           ; Name         Instructions Cycles
 15392                           ; simple_byte            4     3 (average)
 15393                           ;	Chosen strategy is simple_byte
 15394  003C94  0100               	movlb	0	; () banked
 15395  003C96  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15396  003C98  0A00               	xorlw	0	; case 0
 15397  003C9A  A4D8               	btfss	status,2,c
 15398  003C9C  0012               	return	
 15399                           
 15400                           ; BSR set to: 0
 15401                           ; Switch size 1, requested type "space"
 15402                           ; Number of cases is 2, Range of values is 1 to 3
 15403                           ; switch strategies available:
 15404                           ; Name         Instructions Cycles
 15405                           ; simple_byte            7     4 (average)
 15406                           ;	Chosen strategy is simple_byte
 15407  003C9E  0100               	movlb	0	; () banked
 15408  003CA0  5184               	movf	??_updateServoPosition& (0+255),w,b
 15409  003CA2  0A01               	xorlw	1	; case 1
 15410  003CA4  B4D8               	btfsc	status,2,c
 15411  003CA6  D7DD               	goto	l5593
 15412  003CA8  0A02               	xorlw	2	; case 3
 15413  003CAA  A4D8               	btfss	status,2,c
 15414  003CAC  0012               	return	
 15415  003CAE  D7E3               	goto	l796
 15416  003CB0                     __end_of_updateServoPosition:
 15417                           	opt stack 0
 15418                           tblptru	equ	0xFF8
 15419                           tblptrh	equ	0xFF7
 15420                           tblptrl	equ	0xFF6
 15421                           tablat	equ	0xFF5
 15422                           prodh	equ	0xFF4
 15423                           prodl	equ	0xFF3
 15424                           intcon	equ	0xFF2
 15425                           intcon2	equ	0xFF1
 15426                           intcon3	equ	0xFF0
 15427                           indf0	equ	0xFEF
 15428                           postinc0	equ	0xFEE
 15429                           fsr0h	equ	0xFEA
 15430                           fsr0l	equ	0xFE9
 15431                           wreg	equ	0xFE8
 15432                           postdec1	equ	0xFE5
 15433                           fsr1l	equ	0xFE1
 15434                           indf2	equ	0xFDF
 15435                           postinc2	equ	0xFDE
 15436                           postdec2	equ	0xFDD
 15437                           fsr2h	equ	0xFDA
 15438                           fsr2l	equ	0xFD9
 15439                           status	equ	0xFD8
 15440                           
 15441 ;; *************** function _handler *****************
 15442 ;; Defined at:
 15443 ;;		line 16 in file "interruptHandler.c"
 15444 ;; Parameters:    Size  Location     Type
 15445 ;;		None
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;		None
 15448 ;; Return value:  Size  Location     Type
 15449 ;;                  1    wreg      void 
 15450 ;; Registers used:
 15451 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15452 ;; Tracked objects:
 15453 ;;		On entry : 0/0
 15454 ;;		On exit  : 0/0
 15455 ;;		Unchanged: 0/0
 15456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15459 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15460 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15461 ;;Total ram usage:       16 bytes
 15462 ;; Hardware stack levels used:    1
 15463 ;; Hardware stack levels required when called:    6
 15464 ;; This function calls:
 15465 ;;		_printSortTimer
 15466 ;;		_updateMenu
 15467 ;; This function is called by:
 15468 ;;		Interrupt level 2
 15469 ;; This function uses a non-reentrant model
 15470 ;;
 15471                           
 15472                           	psect	intcode
 15473  000008                     __pintcode:
 15474                           	opt stack 0
 15475  000008                     _handler:
 15476                           	opt stack 18
 15477                           
 15478                           ;incstack = 0
 15479  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15480  00000A  ED20  F016         	call	int_func,f	;refresh shadow registers
 15481                           tblptru	equ	0xFF8
 15482                           tblptrh	equ	0xFF7
 15483                           tblptrl	equ	0xFF6
 15484                           tablat	equ	0xFF5
 15485                           prodh	equ	0xFF4
 15486                           prodl	equ	0xFF3
 15487                           intcon	equ	0xFF2
 15488                           intcon2	equ	0xFF1
 15489                           intcon3	equ	0xFF0
 15490                           indf0	equ	0xFEF
 15491                           postinc0	equ	0xFEE
 15492                           fsr0h	equ	0xFEA
 15493                           fsr0l	equ	0xFE9
 15494                           wreg	equ	0xFE8
 15495                           postdec1	equ	0xFE5
 15496                           fsr1l	equ	0xFE1
 15497                           indf2	equ	0xFDF
 15498                           postinc2	equ	0xFDE
 15499                           postdec2	equ	0xFDD
 15500                           fsr2h	equ	0xFDA
 15501                           fsr2l	equ	0xFD9
 15502                           status	equ	0xFD8
 15503                           
 15504                           	psect	intcode_body
 15505  002C40                     __pintcode_body:
 15506                           	opt stack 18
 15507  002C40                     int_func:
 15508                           	opt stack 18
 15509  002C40  0006               	pop		; remove dummy address from shadow register refresh
 15510  002C42  CFFA F04D          	movff	pclath,??_handler+2
 15511  002C46  CFFB F04E          	movff	pclatu,??_handler+3
 15512  002C4A  CFE9 F04F          	movff	fsr0l,??_handler+4
 15513  002C4E  CFEA F050          	movff	fsr0h,??_handler+5
 15514  002C52  CFE1 F051          	movff	fsr1l,??_handler+6
 15515  002C56  CFE2 F052          	movff	fsr1h,??_handler+7
 15516  002C5A  CFD9 F053          	movff	fsr2l,??_handler+8
 15517  002C5E  CFDA F054          	movff	fsr2h,??_handler+9
 15518  002C62  CFF3 F055          	movff	prodl,??_handler+10
 15519  002C66  CFF4 F056          	movff	prodh,??_handler+11
 15520  002C6A  CFF6 F057          	movff	tblptrl,??_handler+12
 15521  002C6E  CFF7 F058          	movff	tblptrh,??_handler+13
 15522  002C72  CFF8 F059          	movff	tblptru,??_handler+14
 15523  002C76  CFF5 F05A          	movff	tablat,??_handler+15
 15524                           
 15525                           ;interruptHandler.c: 18: if(INT1IF){
 15526  002C7A  A0F0               	btfss	intcon3,0,c	;volatile
 15527  002C7C  D020               	goto	i2l8123
 15528                           
 15529                           ;interruptHandler.c: 19: INT1IF = 0;
 15530  002C7E  90F0               	bcf	intcon3,0,c	;volatile
 15531                           
 15532                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15533  002C80  0100               	movlb	0	; () banked
 15534  002C82  51FC               	movf	_machine_state& (0+255),w,b
 15535  002C84  A4D8               	btfss	status,2,c
 15536  002C86  D01B               	goto	i2l8123
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15540  002C88  3881               	swapf	3969,w,c	;volatile
 15541  002C8A  0B0F               	andlw	15
 15542  002C8C  0B0F               	andlw	15
 15543  002C8E  6E4B               	movwf	??_handler& (0+255),c
 15544  002C90  6A4C               	clrf	(??_handler+1)& (0+255),c
 15545  002C92  0E21               	movlw	low _keys
 15546  002C94  244B               	addwf	??_handler,w,c
 15547  002C96  6EF6               	movwf	tblptrl,c
 15548  002C98  0EFB               	movlw	high _keys
 15549  002C9A  204C               	addwfc	??_handler+1,w,c
 15550  002C9C  6EF7               	movwf	tblptrh,c
 15551  002C9E                     	if	1	;There are 3 active tblptr bytes
 15552  002C9E  6AF8               	clrf	tblptru,c
 15553  002CA0  0E00               	movlw	low (__mediumconst shr (0+16))
 15554  002CA2  22F8               	addwfc	tblptru,f,c
 15555  002CA4                     	endif
 15556  002CA4  0008               	tblrd		*
 15557  002CA6  CFF5 F07D          	movff	tablat,_input	;volatile
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;interruptHandler.c: 23: if(input == '*'){
 15561  002CAA  0E2A               	movlw	42
 15562  002CAC  187D               	xorwf	_input,w,c	;volatile
 15563  002CAE  A4D8               	btfss	status,2,c
 15564  002CB0  D004               	goto	i2l8121
 15565                           
 15566                           ; BSR set to: 0
 15567                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15568  002CB2  0E03               	movlw	3
 15569  002CB4  0100               	movlb	0	; () banked
 15570  002CB6  6FFC               	movwf	_machine_state& (0+255),b
 15571                           
 15572                           ;interruptHandler.c: 25: }
 15573  002CB8  D002               	goto	i2l8123
 15574  002CBA                     i2l8121:
 15575                           
 15576                           ; BSR set to: 0
 15577                           ;interruptHandler.c: 26: else{
 15578                           ;interruptHandler.c: 27: updateMenu();
 15579  002CBA  ECF9  F010         	call	_updateMenu	;wreg free
 15580  002CBE                     i2l8123:
 15581                           
 15582                           ;interruptHandler.c: 28: }
 15583                           ;interruptHandler.c: 29: }
 15584                           ;interruptHandler.c: 30: }
 15585                           ;interruptHandler.c: 33: if(TMR0IF){
 15586  002CBE  A4F2               	btfss	intcon,2,c	;volatile
 15587  002CC0  D00C               	goto	i2l8137
 15588                           
 15589                           ;interruptHandler.c: 34: TMR0IF = 0;
 15590  002CC2  94F2               	bcf	intcon,2,c	;volatile
 15591                           
 15592                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15593  002CC4  0100               	movlb	0	; () banked
 15594  002CC6  05FC               	decf	_machine_state& (0+255),w,b
 15595  002CC8  A4D8               	btfss	status,2,c
 15596  002CCA  D007               	goto	i2l8137
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;interruptHandler.c: 36: printSortTimer();
 15600  002CCC  EC74  F013         	call	_printSortTimer	;wreg free
 15601                           
 15602                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15603  002CD0  0E85               	movlw	133
 15604  002CD2  6ED7               	movwf	4055,c	;volatile
 15605                           
 15606                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15607  002CD4  0EEE               	movlw	238
 15608  002CD6  6ED6               	movwf	4054,c	;volatile
 15609                           
 15610                           ;interruptHandler.c: 40: TMR0ON = 1;
 15611  002CD8  8ED5               	bsf	4053,7,c	;volatile
 15612  002CDA                     i2l8137:
 15613                           
 15614                           ;interruptHandler.c: 41: }
 15615                           ;interruptHandler.c: 42: }
 15616                           ;interruptHandler.c: 45: if(TMR1IF){
 15617  002CDA  A09E               	btfss	3998,0,c	;volatile
 15618  002CDC  D024               	goto	i2l8161
 15619                           
 15620                           ;interruptHandler.c: 46: TMR1IF = 0;
 15621  002CDE  909E               	bcf	3998,0,c	;volatile
 15622                           
 15623                           ;interruptHandler.c: 47: TMR1ON = 0;
 15624  002CE0  90CD               	bcf	4045,0,c	;volatile
 15625                           
 15626                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15627  002CE2  0100               	movlb	0	; () banked
 15628  002CE4  05FC               	decf	_machine_state& (0+255),w,b
 15629  002CE6  A4D8               	btfss	status,2,c
 15630  002CE8  D01E               	goto	i2l8161
 15631                           
 15632                           ; BSR set to: 0
 15633                           ;interruptHandler.c: 49: if(was_low_1){
 15634  002CEA  5079               	movf	_was_low_1,w,c	;volatile
 15635  002CEC  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15636  002CEE  B4D8               	btfsc	status,2,c
 15637  002CF0  D00A               	goto	i2l861
 15638                           
 15639                           ; BSR set to: 0
 15640                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15641  002CF2  828B               	bsf	3979,1,c	;volatile
 15642                           
 15643                           ; BSR set to: 0
 15644                           ;interruptHandler.c: 51: was_low_1 = 0;
 15645  002CF4  0E00               	movlw	0
 15646  002CF6  6E7A               	movwf	_was_low_1+1,c	;volatile
 15647  002CF8  0E00               	movlw	0
 15648  002CFA  6E79               	movwf	_was_low_1,c	;volatile
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15652  002CFC  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15653                           
 15654                           ; BSR set to: 0
 15655                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15656  002D00  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15657                           
 15658                           ;interruptHandler.c: 54: }
 15659  002D04  D00F               	goto	i2l8159
 15660  002D06                     i2l861:
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;interruptHandler.c: 55: else{
 15664                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15665  002D06  928B               	bcf	3979,1,c	;volatile
 15666                           
 15667                           ; BSR set to: 0
 15668                           ;interruptHandler.c: 57: was_low_1 = 1;
 15669  002D08  0E00               	movlw	0
 15670  002D0A  6E7A               	movwf	_was_low_1+1,c	;volatile
 15671  002D0C  0E01               	movlw	1
 15672  002D0E  6E79               	movwf	_was_low_1,c	;volatile
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15676  002D10  0101               	movlb	1	; () banked
 15677  002D12  511C               	movf	_servoTimes& (0+255),w,b
 15678  002D14  0800               	sublw	0
 15679  002D16  0F20               	addlw	32
 15680  002D18  6ECF               	movwf	4047,c	;volatile
 15681                           
 15682                           ; BSR set to: 1
 15683                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15684  002D1A  0101               	movlb	1	; () banked
 15685  002D1C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15686  002D1E  0800               	sublw	0
 15687  002D20  0F20               	addlw	32
 15688  002D22  6ECE               	movwf	4046,c	;volatile
 15689  002D24                     i2l8159:
 15690                           
 15691                           ;interruptHandler.c: 60: }
 15692                           ;interruptHandler.c: 61: TMR1ON = 1;
 15693  002D24  80CD               	bsf	4045,0,c	;volatile
 15694  002D26                     i2l8161:
 15695                           
 15696                           ;interruptHandler.c: 62: }
 15697                           ;interruptHandler.c: 63: }
 15698                           ;interruptHandler.c: 65: if(TMR3IF){
 15699  002D26  A2A1               	btfss	4001,1,c	;volatile
 15700  002D28  D024               	goto	i2l867
 15701                           
 15702                           ;interruptHandler.c: 66: TMR3IF = 0;
 15703  002D2A  92A1               	bcf	4001,1,c	;volatile
 15704                           
 15705                           ;interruptHandler.c: 67: TMR3ON = 0;
 15706  002D2C  90B1               	bcf	4017,0,c	;volatile
 15707                           
 15708                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15709  002D2E  0100               	movlb	0	; () banked
 15710  002D30  05FC               	decf	_machine_state& (0+255),w,b
 15711  002D32  A4D8               	btfss	status,2,c
 15712  002D34  D01E               	goto	i2l867
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;interruptHandler.c: 69: if(was_low_3){
 15716  002D36  507B               	movf	_was_low_3,w,c	;volatile
 15717  002D38  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15718  002D3A  B4D8               	btfsc	status,2,c
 15719  002D3C  D00A               	goto	i2l865
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15723  002D3E  848B               	bsf	3979,2,c	;volatile
 15724                           
 15725                           ; BSR set to: 0
 15726                           ;interruptHandler.c: 71: was_low_3 = 0;
 15727  002D40  0E00               	movlw	0
 15728  002D42  6E7C               	movwf	_was_low_3+1,c	;volatile
 15729  002D44  0E00               	movlw	0
 15730  002D46  6E7B               	movwf	_was_low_3,c	;volatile
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15734  002D48  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15738  002D4C  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15739                           
 15740                           ;interruptHandler.c: 74: }
 15741  002D50  D00F               	goto	i2l8183
 15742  002D52                     i2l865:
 15743                           
 15744                           ; BSR set to: 0
 15745                           ;interruptHandler.c: 75: else{
 15746                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15747  002D52  948B               	bcf	3979,2,c	;volatile
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;interruptHandler.c: 77: was_low_3 = 1;
 15751  002D54  0E00               	movlw	0
 15752  002D56  6E7C               	movwf	_was_low_3+1,c	;volatile
 15753  002D58  0E01               	movlw	1
 15754  002D5A  6E7B               	movwf	_was_low_3,c	;volatile
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15758  002D5C  0101               	movlb	1	; () banked
 15759  002D5E  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15760  002D60  0800               	sublw	0
 15761  002D62  0F20               	addlw	32
 15762  002D64  6EB3               	movwf	4019,c	;volatile
 15763                           
 15764                           ; BSR set to: 1
 15765                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15766  002D66  0101               	movlb	1	; () banked
 15767  002D68  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15768  002D6A  0800               	sublw	0
 15769  002D6C  0F20               	addlw	32
 15770  002D6E  6EB2               	movwf	4018,c	;volatile
 15771  002D70                     i2l8183:
 15772                           
 15773                           ;interruptHandler.c: 80: }
 15774                           ;interruptHandler.c: 81: TMR3ON = 1;
 15775  002D70  80B1               	bsf	4017,0,c	;volatile
 15776  002D72                     i2l867:
 15777  002D72  C05A  FFF5         	movff	??_handler+15,tablat
 15778  002D76  C059  FFF8         	movff	??_handler+14,tblptru
 15779  002D7A  C058  FFF7         	movff	??_handler+13,tblptrh
 15780  002D7E  C057  FFF6         	movff	??_handler+12,tblptrl
 15781  002D82  C056  FFF4         	movff	??_handler+11,prodh
 15782  002D86  C055  FFF3         	movff	??_handler+10,prodl
 15783  002D8A  C054  FFDA         	movff	??_handler+9,fsr2h
 15784  002D8E  C053  FFD9         	movff	??_handler+8,fsr2l
 15785  002D92  C052  FFE2         	movff	??_handler+7,fsr1h
 15786  002D96  C051  FFE1         	movff	??_handler+6,fsr1l
 15787  002D9A  C050  FFEA         	movff	??_handler+5,fsr0h
 15788  002D9E  C04F  FFE9         	movff	??_handler+4,fsr0l
 15789  002DA2  C04E  FFFB         	movff	??_handler+3,pclatu
 15790  002DA6  C04D  FFFA         	movff	??_handler+2,pclath
 15791  002DAA  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15792  002DAC  0011               	retfie		f
 15793  002DAE                     __end_of_handler:
 15794                           	opt stack 0
 15795                           pclatu	equ	0xFFB
 15796                           pclath	equ	0xFFA
 15797                           tblptru	equ	0xFF8
 15798                           tblptrh	equ	0xFF7
 15799                           tblptrl	equ	0xFF6
 15800                           tablat	equ	0xFF5
 15801                           prodh	equ	0xFF4
 15802                           prodl	equ	0xFF3
 15803                           intcon	equ	0xFF2
 15804                           intcon2	equ	0xFF1
 15805                           intcon3	equ	0xFF0
 15806                           indf0	equ	0xFEF
 15807                           postinc0	equ	0xFEE
 15808                           fsr0h	equ	0xFEA
 15809                           fsr0l	equ	0xFE9
 15810                           wreg	equ	0xFE8
 15811                           postdec1	equ	0xFE5
 15812                           fsr1h	equ	0xFE2
 15813                           fsr1l	equ	0xFE1
 15814                           indf2	equ	0xFDF
 15815                           postinc2	equ	0xFDE
 15816                           postdec2	equ	0xFDD
 15817                           fsr2h	equ	0xFDA
 15818                           fsr2l	equ	0xFD9
 15819                           status	equ	0xFD8
 15820                           
 15821 ;; *************** function _updateMenu *****************
 15822 ;; Defined at:
 15823 ;;		line 213 in file "UI.c"
 15824 ;; Parameters:    Size  Location     Type
 15825 ;;		None
 15826 ;; Auto vars:     Size  Location     Type
 15827 ;;		None
 15828 ;; Return value:  Size  Location     Type
 15829 ;;                  1    wreg      void 
 15830 ;; Registers used:
 15831 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15832 ;; Tracked objects:
 15833 ;;		On entry : 0/0
 15834 ;;		On exit  : 0/0
 15835 ;;		Unchanged: 0/0
 15836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15841 ;;Total ram usage:        2 bytes
 15842 ;; Hardware stack levels used:    1
 15843 ;; Hardware stack levels required when called:    5
 15844 ;; This function calls:
 15845 ;;		_change_state_to_logs_11
 15846 ;;		_change_state_to_logs_12
 15847 ;;		_change_state_to_logs_22
 15848 ;;		_change_state_to_logs_23
 15849 ;;		_change_state_to_logs_33
 15850 ;;		_change_state_to_logs_34
 15851 ;;		_change_state_to_menu_11
 15852 ;;		_change_state_to_menu_23
 15853 ;;		_dispLogs
 15854 ;;		_inputHandler
 15855 ;;		i2_change_state_to_menu_12
 15856 ;;		i2_change_state_to_menu_22
 15857 ;;		i2_change_state_to_menu_start
 15858 ;; This function is called by:
 15859 ;;		_handler
 15860 ;; This function uses a non-reentrant model
 15861 ;;
 15862                           
 15863                           	psect	text59
 15864  0021F2                     __ptext59:
 15865                           	opt stack 0
 15866  0021F2                     _updateMenu:
 15867                           	opt stack 18
 15868                           
 15869                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15870                           
 15871                           ;incstack = 0
 15872  0021F2  0E00               	movlw	0
 15873  0021F4  6E78               	movwf	_up+1,c
 15874  0021F6  0E00               	movlw	0
 15875  0021F8  6E77               	movwf	_up,c
 15876  0021FA  0E00               	movlw	0
 15877  0021FC  6E68               	movwf	_down+1,c
 15878  0021FE  0E00               	movlw	0
 15879  002200  6E67               	movwf	_down,c
 15880  002202  0E00               	movlw	0
 15881  002204  6E6A               	movwf	_enter+1,c
 15882  002206  0E00               	movlw	0
 15883  002208  6E69               	movwf	_enter,c
 15884  00220A  0E00               	movlw	0
 15885  00220C  6E5C               	movwf	_back+1,c
 15886  00220E  0E00               	movlw	0
 15887  002210  6E5B               	movwf	_back,c
 15888                           
 15889                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15890  002212  9EF2               	bcf	intcon,7,c	;volatile
 15891                           
 15892                           ;UI.c: 217: if (inputHandler()
 15893                           ;UI.c: 220: ){
 15894  002214  EC6D  F014         	call	_inputHandler	;wreg free
 15895  002218  502A               	movf	?_inputHandler,w,c
 15896  00221A  102B               	iorwf	?_inputHandler+1,w,c
 15897  00221C  A4D8               	btfss	status,2,c
 15898  00221E  D112               	goto	i2l7859
 15899  002220  D146               	goto	i2l257
 15900  002222                     i2l7711:
 15901                           
 15902                           ;UI.c: 224: change_state_to_menu_11();
 15903  002222  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 15904                           
 15905                           ;UI.c: 225: break;
 15906  002226  D143               	goto	i2l257
 15907  002228                     i2l7713:
 15908                           
 15909                           ;UI.c: 228: if(up){
 15910  002228  5077               	movf	_up,w,c
 15911  00222A  1078               	iorwf	_up+1,w,c
 15912  00222C  B4D8               	btfsc	status,2,c
 15913  00222E  D003               	goto	i2l7717
 15914                           
 15915                           ;UI.c: 229: change_state_to_menu_23();
 15916  002230  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 15917                           
 15918                           ;UI.c: 230: }
 15919  002234  D13C               	goto	i2l257
 15920  002236                     i2l7717:
 15921                           
 15922                           ;UI.c: 231: else if(down){
 15923  002236  5067               	movf	_down,w,c
 15924  002238  1068               	iorwf	_down+1,w,c
 15925  00223A  B4D8               	btfsc	status,2,c
 15926  00223C  D003               	goto	i2l7721
 15927                           
 15928                           ;UI.c: 232: change_state_to_menu_12();
 15929  00223E  ECCD  F021         	call	i2_change_state_to_menu_12	;wreg free
 15930                           
 15931                           ;UI.c: 233: }
 15932  002242  D135               	goto	i2l257
 15933  002244                     i2l7721:
 15934                           
 15935                           ;UI.c: 234: else if(enter){
 15936  002244  5069               	movf	_enter,w,c
 15937  002246  106A               	iorwf	_enter+1,w,c
 15938  002248  B4D8               	btfsc	status,2,c
 15939  00224A  D131               	goto	i2l257
 15940                           
 15941                           ;UI.c: 235: change_state_to_menu_start();
 15942  00224C  EC27  F023         	call	i2_change_state_to_menu_start	;wreg free
 15943                           
 15944                           ;UI.c: 236: }
 15945                           ;UI.c: 237: break;
 15946  002250  D12E               	goto	i2l257
 15947  002252                     i2l7725:
 15948                           
 15949                           ;UI.c: 240: if(up){
 15950  002252  5077               	movf	_up,w,c
 15951  002254  1078               	iorwf	_up+1,w,c
 15952  002256  B4D8               	btfsc	status,2,c
 15953  002258  D003               	goto	i2l7729
 15954                           
 15955                           ;UI.c: 241: change_state_to_menu_11();
 15956  00225A  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 15957                           
 15958                           ;UI.c: 242: }
 15959  00225E  D127               	goto	i2l257
 15960  002260                     i2l7729:
 15961                           
 15962                           ;UI.c: 243: else if(down){
 15963  002260  5067               	movf	_down,w,c
 15964  002262  1068               	iorwf	_down+1,w,c
 15965  002264  B4D8               	btfsc	status,2,c
 15966  002266  D011               	goto	i2l7745
 15967                           
 15968                           ;UI.c: 244: change_state_to_menu_23();
 15969  002268  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 15970                           
 15971                           ;UI.c: 245: }
 15972  00226C  D120               	goto	i2l257
 15973  00226E                     i2l7737:
 15974                           
 15975                           ;UI.c: 252: if(up){
 15976  00226E  5077               	movf	_up,w,c
 15977  002270  1078               	iorwf	_up+1,w,c
 15978  002272  B4D8               	btfsc	status,2,c
 15979  002274  D003               	goto	i2l7741
 15980                           
 15981                           ;UI.c: 253: change_state_to_menu_11();
 15982  002276  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 15983                           
 15984                           ;UI.c: 254: }
 15985  00227A  D119               	goto	i2l257
 15986  00227C                     i2l7741:
 15987                           
 15988                           ;UI.c: 255: else if(down){
 15989  00227C  5067               	movf	_down,w,c
 15990  00227E  1068               	iorwf	_down+1,w,c
 15991  002280  B4D8               	btfsc	status,2,c
 15992  002282  D003               	goto	i2l7745
 15993                           
 15994                           ;UI.c: 256: change_state_to_menu_23();
 15995  002284  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 15996                           
 15997                           ;UI.c: 257: }
 15998  002288  D112               	goto	i2l257
 15999  00228A                     i2l7745:
 16000                           
 16001                           ;UI.c: 258: else if(enter){
 16002  00228A  5069               	movf	_enter,w,c
 16003  00228C  106A               	iorwf	_enter+1,w,c
 16004  00228E  B4D8               	btfsc	status,2,c
 16005  002290  D10E               	goto	i2l257
 16006                           
 16007                           ;UI.c: 259: machine_state = Sorting_state;
 16008  002292  0E01               	movlw	1
 16009  002294  0100               	movlb	0	; () banked
 16010  002296  6FFC               	movwf	_machine_state& (0+255),b
 16011                           
 16012                           ; BSR set to: 0
 16013                           ;UI.c: 260: }
 16014                           ;UI.c: 261: break;
 16015                           
 16016                           ; BSR set to: 0
 16017                           
 16018                           ; BSR set to: 0
 16019  002298  D10A               	goto	i2l257
 16020  00229A                     i2l7749:
 16021                           
 16022                           ;UI.c: 264: if(up){
 16023  00229A  5077               	movf	_up,w,c
 16024  00229C  1078               	iorwf	_up+1,w,c
 16025  00229E  B4D8               	btfsc	status,2,c
 16026  0022A0  D003               	goto	i2l7753
 16027                           
 16028                           ;UI.c: 265: change_state_to_menu_22();
 16029  0022A2  ECB5  F021         	call	i2_change_state_to_menu_22	;wreg free
 16030                           
 16031                           ;UI.c: 266: }
 16032  0022A6  D103               	goto	i2l257
 16033  0022A8                     i2l7753:
 16034                           
 16035                           ;UI.c: 267: else if(down){
 16036  0022A8  5067               	movf	_down,w,c
 16037  0022AA  1068               	iorwf	_down+1,w,c
 16038  0022AC  B4D8               	btfsc	status,2,c
 16039  0022AE  D003               	goto	i2l7757
 16040                           
 16041                           ;UI.c: 268: change_state_to_menu_11();
 16042  0022B0  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 16043                           
 16044                           ;UI.c: 269: }
 16045  0022B4  D0FC               	goto	i2l257
 16046  0022B6                     i2l7757:
 16047                           
 16048                           ;UI.c: 270: else if(enter){
 16049  0022B6  5069               	movf	_enter,w,c
 16050  0022B8  106A               	iorwf	_enter+1,w,c
 16051  0022BA  B4D8               	btfsc	status,2,c
 16052  0022BC  D0F8               	goto	i2l257
 16053                           
 16054                           ;UI.c: 271: change_state_to_logs_11();
 16055  0022BE  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16056                           
 16057                           ;UI.c: 272: }
 16058                           ;UI.c: 273: break;
 16059  0022C2  D0F5               	goto	i2l257
 16060  0022C4                     i2l7761:
 16061                           
 16062                           ;UI.c: 276: if(up){
 16063  0022C4  5077               	movf	_up,w,c
 16064  0022C6  1078               	iorwf	_up+1,w,c
 16065  0022C8  B4D8               	btfsc	status,2,c
 16066  0022CA  D003               	goto	i2l7765
 16067                           
 16068                           ;UI.c: 277: change_state_to_logs_34();
 16069  0022CC  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 16070                           
 16071                           ;UI.c: 278: }
 16072  0022D0  D0EE               	goto	i2l257
 16073  0022D2                     i2l7765:
 16074                           
 16075                           ;UI.c: 279: else if(down){
 16076  0022D2  5067               	movf	_down,w,c
 16077  0022D4  1068               	iorwf	_down+1,w,c
 16078  0022D6  B4D8               	btfsc	status,2,c
 16079  0022D8  D003               	goto	i2l7769
 16080                           
 16081                           ;UI.c: 280: change_state_to_logs_12();
 16082  0022DA  EC5D  F022         	call	_change_state_to_logs_12	;wreg free
 16083                           
 16084                           ;UI.c: 281: }
 16085  0022DE  D0E7               	goto	i2l257
 16086  0022E0                     i2l7769:
 16087                           
 16088                           ;UI.c: 282: else if(enter){
 16089  0022E0  5069               	movf	_enter,w,c
 16090  0022E2  106A               	iorwf	_enter+1,w,c
 16091  0022E4  B4D8               	btfsc	status,2,c
 16092  0022E6  D007               	goto	i2l7773
 16093                           
 16094                           ;UI.c: 283: dispLogs(1);
 16095  0022E8  0E00               	movlw	0
 16096  0022EA  6E13               	movwf	dispLogs@myLog+1,c
 16097  0022EC  0E01               	movlw	1
 16098  0022EE  6E12               	movwf	dispLogs@myLog,c
 16099  0022F0  EC61  F023         	call	_dispLogs	;wreg free
 16100                           
 16101                           ;UI.c: 284: }
 16102  0022F4  D0DC               	goto	i2l257
 16103  0022F6                     i2l7773:
 16104                           
 16105                           ;UI.c: 285: else if(back){
 16106  0022F6  505B               	movf	_back,w,c
 16107  0022F8  105C               	iorwf	_back+1,w,c
 16108  0022FA  B4D8               	btfsc	status,2,c
 16109  0022FC  D0D8               	goto	i2l257
 16110                           
 16111                           ;UI.c: 286: change_state_to_menu_23();
 16112  0022FE  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16113                           
 16114                           ;UI.c: 287: }
 16115                           ;UI.c: 288: break;
 16116  002302  D0D5               	goto	i2l257
 16117  002304                     i2l7777:
 16118                           
 16119                           ;UI.c: 291: if(up){
 16120  002304  5077               	movf	_up,w,c
 16121  002306  1078               	iorwf	_up+1,w,c
 16122  002308  B4D8               	btfsc	status,2,c
 16123  00230A  D003               	goto	i2l7781
 16124                           
 16125                           ;UI.c: 292: change_state_to_logs_11();
 16126  00230C  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16127                           
 16128                           ;UI.c: 293: }
 16129  002310  D0CE               	goto	i2l257
 16130  002312                     i2l7781:
 16131                           
 16132                           ;UI.c: 294: else if(down){
 16133  002312  5067               	movf	_down,w,c
 16134  002314  1068               	iorwf	_down+1,w,c
 16135  002316  B4D8               	btfsc	status,2,c
 16136  002318  D003               	goto	i2l7785
 16137                           
 16138                           ;UI.c: 295: change_state_to_logs_23();
 16139  00231A  ECBB  F022         	call	_change_state_to_logs_23	;wreg free
 16140                           
 16141                           ;UI.c: 296: }
 16142  00231E  D0C7               	goto	i2l257
 16143  002320                     i2l7785:
 16144                           
 16145                           ;UI.c: 297: else if(enter){
 16146  002320  5069               	movf	_enter,w,c
 16147  002322  106A               	iorwf	_enter+1,w,c
 16148  002324  B4D8               	btfsc	status,2,c
 16149  002326  D007               	goto	i2l7789
 16150                           
 16151                           ;UI.c: 298: dispLogs(2);
 16152  002328  0E00               	movlw	0
 16153  00232A  6E13               	movwf	dispLogs@myLog+1,c
 16154  00232C  0E02               	movlw	2
 16155  00232E  6E12               	movwf	dispLogs@myLog,c
 16156  002330  EC61  F023         	call	_dispLogs	;wreg free
 16157                           
 16158                           ;UI.c: 299: }
 16159  002334  D0BC               	goto	i2l257
 16160  002336                     i2l7789:
 16161                           
 16162                           ;UI.c: 300: else if(back){
 16163  002336  505B               	movf	_back,w,c
 16164  002338  105C               	iorwf	_back+1,w,c
 16165  00233A  B4D8               	btfsc	status,2,c
 16166  00233C  D0B8               	goto	i2l257
 16167                           
 16168                           ;UI.c: 301: change_state_to_menu_23();
 16169  00233E  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16170                           
 16171                           ;UI.c: 302: }
 16172                           ;UI.c: 303: break;
 16173  002342  D0B5               	goto	i2l257
 16174  002344                     i2l7793:
 16175                           
 16176                           ;UI.c: 306: if(up){
 16177  002344  5077               	movf	_up,w,c
 16178  002346  1078               	iorwf	_up+1,w,c
 16179  002348  B4D8               	btfsc	status,2,c
 16180  00234A  D003               	goto	i2l7797
 16181                           
 16182                           ;UI.c: 307: change_state_to_logs_11();
 16183  00234C  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16184                           
 16185                           ;UI.c: 308: }
 16186  002350  D0AE               	goto	i2l257
 16187  002352                     i2l7797:
 16188                           
 16189                           ;UI.c: 309: else if(down){
 16190  002352  5067               	movf	_down,w,c
 16191  002354  1068               	iorwf	_down+1,w,c
 16192  002356  B4D8               	btfsc	status,2,c
 16193  002358  D003               	goto	i2l7801
 16194                           
 16195                           ;UI.c: 310: change_state_to_logs_23();
 16196  00235A  ECBB  F022         	call	_change_state_to_logs_23	;wreg free
 16197                           
 16198                           ;UI.c: 311: }
 16199  00235E  D0A7               	goto	i2l257
 16200  002360                     i2l7801:
 16201                           
 16202                           ;UI.c: 312: else if(enter){
 16203  002360  5069               	movf	_enter,w,c
 16204  002362  106A               	iorwf	_enter+1,w,c
 16205  002364  B4D8               	btfsc	status,2,c
 16206  002366  D007               	goto	i2l7805
 16207                           
 16208                           ;UI.c: 313: dispLogs(2);
 16209  002368  0E00               	movlw	0
 16210  00236A  6E13               	movwf	dispLogs@myLog+1,c
 16211  00236C  0E02               	movlw	2
 16212  00236E  6E12               	movwf	dispLogs@myLog,c
 16213  002370  EC61  F023         	call	_dispLogs	;wreg free
 16214                           
 16215                           ;UI.c: 314: }
 16216  002374  D09C               	goto	i2l257
 16217  002376                     i2l7805:
 16218                           
 16219                           ;UI.c: 315: else if(back){
 16220  002376  505B               	movf	_back,w,c
 16221  002378  105C               	iorwf	_back+1,w,c
 16222  00237A  B4D8               	btfsc	status,2,c
 16223  00237C  D098               	goto	i2l257
 16224                           
 16225                           ;UI.c: 316: change_state_to_menu_23();
 16226  00237E  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16227                           
 16228                           ;UI.c: 317: }
 16229                           ;UI.c: 318: break;
 16230  002382  D095               	goto	i2l257
 16231  002384                     i2l7809:
 16232                           
 16233                           ;UI.c: 321: if(up){
 16234  002384  5077               	movf	_up,w,c
 16235  002386  1078               	iorwf	_up+1,w,c
 16236  002388  B4D8               	btfsc	status,2,c
 16237  00238A  D003               	goto	i2l7813
 16238                           
 16239                           ;UI.c: 322: change_state_to_logs_22();
 16240  00238C  EC45  F022         	call	_change_state_to_logs_22	;wreg free
 16241                           
 16242                           ;UI.c: 323: }
 16243  002390  D08E               	goto	i2l257
 16244  002392                     i2l7813:
 16245                           
 16246                           ;UI.c: 324: else if(down){
 16247  002392  5067               	movf	_down,w,c
 16248  002394  1068               	iorwf	_down+1,w,c
 16249  002396  B4D8               	btfsc	status,2,c
 16250  002398  D003               	goto	i2l7817
 16251                           
 16252                           ;UI.c: 325: change_state_to_logs_34();
 16253  00239A  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 16254                           
 16255                           ;UI.c: 326: }
 16256  00239E  D087               	goto	i2l257
 16257  0023A0                     i2l7817:
 16258                           
 16259                           ;UI.c: 327: else if(enter){
 16260  0023A0  5069               	movf	_enter,w,c
 16261  0023A2  106A               	iorwf	_enter+1,w,c
 16262  0023A4  B4D8               	btfsc	status,2,c
 16263  0023A6  D007               	goto	i2l7821
 16264                           
 16265                           ;UI.c: 328: dispLogs(3);
 16266  0023A8  0E00               	movlw	0
 16267  0023AA  6E13               	movwf	dispLogs@myLog+1,c
 16268  0023AC  0E03               	movlw	3
 16269  0023AE  6E12               	movwf	dispLogs@myLog,c
 16270  0023B0  EC61  F023         	call	_dispLogs	;wreg free
 16271                           
 16272                           ;UI.c: 329: }
 16273  0023B4  D07C               	goto	i2l257
 16274  0023B6                     i2l7821:
 16275                           
 16276                           ;UI.c: 330: else if(back){
 16277  0023B6  505B               	movf	_back,w,c
 16278  0023B8  105C               	iorwf	_back+1,w,c
 16279  0023BA  B4D8               	btfsc	status,2,c
 16280  0023BC  D078               	goto	i2l257
 16281                           
 16282                           ;UI.c: 331: change_state_to_menu_23();
 16283  0023BE  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16284                           
 16285                           ;UI.c: 332: }
 16286                           ;UI.c: 333: break;
 16287  0023C2  D075               	goto	i2l257
 16288  0023C4                     i2l7825:
 16289                           
 16290                           ;UI.c: 336: if(up){
 16291  0023C4  5077               	movf	_up,w,c
 16292  0023C6  1078               	iorwf	_up+1,w,c
 16293  0023C8  B4D8               	btfsc	status,2,c
 16294  0023CA  D003               	goto	i2l7829
 16295                           
 16296                           ;UI.c: 337: change_state_to_logs_22();
 16297  0023CC  EC45  F022         	call	_change_state_to_logs_22	;wreg free
 16298                           
 16299                           ;UI.c: 338: }
 16300  0023D0  D06E               	goto	i2l257
 16301  0023D2                     i2l7829:
 16302                           
 16303                           ;UI.c: 339: else if(down){
 16304  0023D2  5067               	movf	_down,w,c
 16305  0023D4  1068               	iorwf	_down+1,w,c
 16306  0023D6  B4D8               	btfsc	status,2,c
 16307  0023D8  D003               	goto	i2l7833
 16308                           
 16309                           ;UI.c: 340: change_state_to_logs_34();
 16310  0023DA  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 16311                           
 16312                           ;UI.c: 341: }
 16313  0023DE  D067               	goto	i2l257
 16314  0023E0                     i2l7833:
 16315                           
 16316                           ;UI.c: 342: else if(enter){
 16317  0023E0  5069               	movf	_enter,w,c
 16318  0023E2  106A               	iorwf	_enter+1,w,c
 16319  0023E4  B4D8               	btfsc	status,2,c
 16320  0023E6  D007               	goto	i2l7837
 16321                           
 16322                           ;UI.c: 343: dispLogs(3);
 16323  0023E8  0E00               	movlw	0
 16324  0023EA  6E13               	movwf	dispLogs@myLog+1,c
 16325  0023EC  0E03               	movlw	3
 16326  0023EE  6E12               	movwf	dispLogs@myLog,c
 16327  0023F0  EC61  F023         	call	_dispLogs	;wreg free
 16328                           
 16329                           ;UI.c: 344: }
 16330  0023F4  D05C               	goto	i2l257
 16331  0023F6                     i2l7837:
 16332                           
 16333                           ;UI.c: 345: else if(back){
 16334  0023F6  505B               	movf	_back,w,c
 16335  0023F8  105C               	iorwf	_back+1,w,c
 16336  0023FA  B4D8               	btfsc	status,2,c
 16337  0023FC  D058               	goto	i2l257
 16338                           
 16339                           ;UI.c: 346: change_state_to_menu_23();
 16340  0023FE  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16341                           
 16342                           ;UI.c: 347: }
 16343                           ;UI.c: 348: break;
 16344  002402  D055               	goto	i2l257
 16345  002404                     i2l7841:
 16346                           
 16347                           ;UI.c: 351: if(up){
 16348  002404  5077               	movf	_up,w,c
 16349  002406  1078               	iorwf	_up+1,w,c
 16350  002408  B4D8               	btfsc	status,2,c
 16351  00240A  D003               	goto	i2l7845
 16352                           
 16353                           ;UI.c: 352: change_state_to_logs_33();
 16354  00240C  EC2D  F022         	call	_change_state_to_logs_33	;wreg free
 16355                           
 16356                           ;UI.c: 353: }
 16357  002410  D04E               	goto	i2l257
 16358  002412                     i2l7845:
 16359                           
 16360                           ;UI.c: 354: else if(down){
 16361  002412  5067               	movf	_down,w,c
 16362  002414  1068               	iorwf	_down+1,w,c
 16363  002416  B4D8               	btfsc	status,2,c
 16364  002418  D003               	goto	i2l7849
 16365                           
 16366                           ;UI.c: 355: change_state_to_logs_11();
 16367  00241A  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16368                           
 16369                           ;UI.c: 356: }
 16370  00241E  D047               	goto	i2l257
 16371  002420                     i2l7849:
 16372                           
 16373                           ;UI.c: 357: else if(enter){
 16374  002420  5069               	movf	_enter,w,c
 16375  002422  106A               	iorwf	_enter+1,w,c
 16376  002424  B4D8               	btfsc	status,2,c
 16377  002426  D007               	goto	i2l7853
 16378                           
 16379                           ;UI.c: 358: dispLogs(4);
 16380  002428  0E00               	movlw	0
 16381  00242A  6E13               	movwf	dispLogs@myLog+1,c
 16382  00242C  0E04               	movlw	4
 16383  00242E  6E12               	movwf	dispLogs@myLog,c
 16384  002430  EC61  F023         	call	_dispLogs	;wreg free
 16385                           
 16386                           ;UI.c: 359: }
 16387  002434  D03C               	goto	i2l257
 16388  002436                     i2l7853:
 16389                           
 16390                           ;UI.c: 360: else if(back){
 16391  002436  505B               	movf	_back,w,c
 16392  002438  105C               	iorwf	_back+1,w,c
 16393  00243A  B4D8               	btfsc	status,2,c
 16394  00243C  D038               	goto	i2l257
 16395                           
 16396                           ;UI.c: 361: change_state_to_menu_23();
 16397  00243E  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16398                           
 16399                           ;UI.c: 367: }
 16400                           
 16401                           ;UI.c: 366: break;
 16402                           
 16403                           ;UI.c: 365: default:
 16404                           
 16405                           ;UI.c: 362: }
 16406                           ;UI.c: 363: break;
 16407  002442  D035               	goto	i2l257
 16408  002444                     i2l7859:
 16409  002444  C0E0  F043         	movff	_cur_state,??_updateMenu
 16410  002448  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16411                           
 16412                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16413                           ; Switch size 1, requested type "space"
 16414                           ; Number of cases is 3, Range of values is 0 to 4
 16415                           ; switch strategies available:
 16416                           ; Name         Instructions Cycles
 16417                           ; simple_byte           10     6 (average)
 16418                           ;	Chosen strategy is simple_byte
 16419  00244C  5044               	movf	??_updateMenu+1,w,c
 16420  00244E  0A00               	xorlw	0	; case 0
 16421  002450  B4D8               	btfsc	status,2,c
 16422  002452  D007               	goto	i2l8447
 16423  002454  0A03               	xorlw	3	; case 3
 16424  002456  B4D8               	btfsc	status,2,c
 16425  002458  D015               	goto	i2l8449
 16426  00245A  0A07               	xorlw	7	; case 4
 16427  00245C  B4D8               	btfsc	status,2,c
 16428  00245E  D020               	goto	i2l8451
 16429  002460  D026               	goto	i2l257
 16430  002462                     i2l8447:
 16431                           
 16432                           ; Switch size 1, requested type "space"
 16433                           ; Number of cases is 5, Range of values is 0 to 23
 16434                           ; switch strategies available:
 16435                           ; Name         Instructions Cycles
 16436                           ; simple_byte           16     9 (average)
 16437                           ;	Chosen strategy is simple_byte
 16438  002462  5043               	movf	??_updateMenu,w,c
 16439  002464  0A00               	xorlw	0	; case 0
 16440  002466  B4D8               	btfsc	status,2,c
 16441  002468  D6DC               	goto	i2l7711
 16442  00246A  0A0B               	xorlw	11	; case 11
 16443  00246C  B4D8               	btfsc	status,2,c
 16444  00246E  D6DC               	goto	i2l7713
 16445  002470  0A07               	xorlw	7	; case 12
 16446  002472  B4D8               	btfsc	status,2,c
 16447  002474  D6EE               	goto	i2l7725
 16448  002476  0A1A               	xorlw	26	; case 22
 16449  002478  B4D8               	btfsc	status,2,c
 16450  00247A  D6F9               	goto	i2l7737
 16451  00247C  0A01               	xorlw	1	; case 23
 16452  00247E  B4D8               	btfsc	status,2,c
 16453  002480  D70C               	goto	i2l7749
 16454  002482  D015               	goto	i2l257
 16455  002484                     i2l8449:
 16456                           
 16457                           ; Switch size 1, requested type "space"
 16458                           ; Number of cases is 4, Range of values is 243 to 255
 16459                           ; switch strategies available:
 16460                           ; Name         Instructions Cycles
 16461                           ; simple_byte           13     7 (average)
 16462                           ;	Chosen strategy is simple_byte
 16463  002484  5043               	movf	??_updateMenu,w,c
 16464  002486  0AF3               	xorlw	243	; case 243
 16465  002488  B4D8               	btfsc	status,2,c
 16466  00248A  D71C               	goto	i2l7761
 16467  00248C  0A07               	xorlw	7	; case 244
 16468  00248E  B4D8               	btfsc	status,2,c
 16469  002490  D739               	goto	i2l7777
 16470  002492  0A0A               	xorlw	10	; case 254
 16471  002494  B4D8               	btfsc	status,2,c
 16472  002496  D756               	goto	i2l7793
 16473  002498  0A01               	xorlw	1	; case 255
 16474  00249A  B4D8               	btfsc	status,2,c
 16475  00249C  D773               	goto	i2l7809
 16476  00249E  D007               	goto	i2l257
 16477  0024A0                     i2l8451:
 16478                           
 16479                           ; Switch size 1, requested type "space"
 16480                           ; Number of cases is 2, Range of values is 9 to 10
 16481                           ; switch strategies available:
 16482                           ; Name         Instructions Cycles
 16483                           ; simple_byte            7     4 (average)
 16484                           ;	Chosen strategy is simple_byte
 16485  0024A0  5043               	movf	??_updateMenu,w,c
 16486  0024A2  0A09               	xorlw	9	; case 9
 16487  0024A4  B4D8               	btfsc	status,2,c
 16488  0024A6  D78E               	goto	i2l7825
 16489  0024A8  0A03               	xorlw	3	; case 10
 16490  0024AA  B4D8               	btfsc	status,2,c
 16491  0024AC  D7AB               	goto	i2l7841
 16492  0024AE                     i2l257:
 16493                           
 16494                           ;UI.c: 368: }
 16495                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16496  0024AE  8EF2               	bsf	intcon,7,c	;volatile
 16497  0024B0  0012               	return		;funcret
 16498  0024B2                     __end_of_updateMenu:
 16499                           	opt stack 0
 16500                           pclatu	equ	0xFFB
 16501                           pclath	equ	0xFFA
 16502                           tblptru	equ	0xFF8
 16503                           tblptrh	equ	0xFF7
 16504                           tblptrl	equ	0xFF6
 16505                           tablat	equ	0xFF5
 16506                           prodh	equ	0xFF4
 16507                           prodl	equ	0xFF3
 16508                           intcon	equ	0xFF2
 16509                           intcon2	equ	0xFF1
 16510                           intcon3	equ	0xFF0
 16511                           indf0	equ	0xFEF
 16512                           postinc0	equ	0xFEE
 16513                           fsr0h	equ	0xFEA
 16514                           fsr0l	equ	0xFE9
 16515                           wreg	equ	0xFE8
 16516                           postdec1	equ	0xFE5
 16517                           fsr1h	equ	0xFE2
 16518                           fsr1l	equ	0xFE1
 16519                           indf2	equ	0xFDF
 16520                           postinc2	equ	0xFDE
 16521                           postdec2	equ	0xFDD
 16522                           fsr2h	equ	0xFDA
 16523                           fsr2l	equ	0xFD9
 16524                           status	equ	0xFD8
 16525                           
 16526 ;; *************** function i2_change_state_to_menu_start *****************
 16527 ;; Defined at:
 16528 ;;		line 474 in file "UI.c"
 16529 ;; Parameters:    Size  Location     Type
 16530 ;;		None
 16531 ;; Auto vars:     Size  Location     Type
 16532 ;;		None
 16533 ;; Return value:  Size  Location     Type
 16534 ;;                  1    wreg      void 
 16535 ;; Registers used:
 16536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16537 ;; Tracked objects:
 16538 ;;		On entry : 0/0
 16539 ;;		On exit  : 0/0
 16540 ;;		Unchanged: 0/0
 16541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16546 ;;Total ram usage:        0 bytes
 16547 ;; Hardware stack levels used:    1
 16548 ;; Hardware stack levels required when called:    4
 16549 ;; This function calls:
 16550 ;;		i2_lcdInst
 16551 ;;		i2_printRTC
 16552 ;;		i2_printf
 16553 ;; This function is called by:
 16554 ;;		_updateMenu
 16555 ;; This function uses a non-reentrant model
 16556 ;;
 16557                           
 16558                           	psect	text60
 16559  00464E                     __ptext60:
 16560                           	opt stack 0
 16561  00464E                     i2_change_state_to_menu_start:
 16562                           	opt stack 18
 16563                           
 16564                           ;UI.c: 475: cur_state = 0;
 16565                           
 16566                           ;incstack = 0
 16567  00464E  0E00               	movlw	0
 16568  004650  0100               	movlb	0	; () banked
 16569  004652  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16570  004654  0E00               	movlw	0
 16571  004656  6FE0               	movwf	_cur_state& (0+255),b
 16572                           
 16573                           ; BSR set to: 0
 16574                           ;UI.c: 477: lcdInst(0b10000000);;
 16575  004658  0E80               	movlw	128
 16576  00465A  ECEF  F023         	call	i2_lcdInst
 16577                           
 16578                           ;UI.c: 478: printRTC();
 16579  00465E  EC59  F012         	call	i2_printRTC	;wreg free
 16580                           
 16581                           ;UI.c: 479: lcdInst(0b11000000);;
 16582  004662  0EC0               	movlw	192
 16583  004664  ECEF  F023         	call	i2_lcdInst
 16584                           
 16585                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16586  004668  0E19               	movlw	low STR_30
 16587  00466A  6E0D               	movwf	i2printf@f,c
 16588  00466C  0EFE               	movlw	high STR_30
 16589  00466E  6E0E               	movwf	i2printf@f+1,c
 16590  004670  ECD4  F00A         	call	i2_printf	;wreg free
 16591  004674  0012               	return		;funcret
 16592  004676                     __end_ofi2_change_state_to_menu_start:
 16593                           	opt stack 0
 16594                           pclatu	equ	0xFFB
 16595                           pclath	equ	0xFFA
 16596                           tblptru	equ	0xFF8
 16597                           tblptrh	equ	0xFF7
 16598                           tblptrl	equ	0xFF6
 16599                           tablat	equ	0xFF5
 16600                           prodh	equ	0xFF4
 16601                           prodl	equ	0xFF3
 16602                           intcon	equ	0xFF2
 16603                           intcon2	equ	0xFF1
 16604                           intcon3	equ	0xFF0
 16605                           indf0	equ	0xFEF
 16606                           postinc0	equ	0xFEE
 16607                           fsr0h	equ	0xFEA
 16608                           fsr0l	equ	0xFE9
 16609                           wreg	equ	0xFE8
 16610                           postdec1	equ	0xFE5
 16611                           fsr1h	equ	0xFE2
 16612                           fsr1l	equ	0xFE1
 16613                           indf2	equ	0xFDF
 16614                           postinc2	equ	0xFDE
 16615                           postdec2	equ	0xFDD
 16616                           fsr2h	equ	0xFDA
 16617                           fsr2l	equ	0xFD9
 16618                           status	equ	0xFD8
 16619                           
 16620 ;; *************** function i2_printRTC *****************
 16621 ;; Defined at:
 16622 ;;		line 63 in file "RTC.c"
 16623 ;; Parameters:    Size  Location     Type
 16624 ;;		None
 16625 ;; Auto vars:     Size  Location     Type
 16626 ;;  printRTC       14   44[COMRAM] int [7]
 16627 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16628 ;;  printRTC        2   64[COMRAM] int 
 16629 ;;  printRTC        2   58[COMRAM] int 
 16630 ;; Return value:  Size  Location     Type
 16631 ;;                  1    wreg      void 
 16632 ;; Registers used:
 16633 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16634 ;; Tracked objects:
 16635 ;;		On entry : 0/0
 16636 ;;		On exit  : 0/0
 16637 ;;		Unchanged: 0/0
 16638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16640 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16641 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16642 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16643 ;;Total ram usage:       25 bytes
 16644 ;; Hardware stack levels used:    1
 16645 ;; Hardware stack levels required when called:    3
 16646 ;; This function calls:
 16647 ;;		i2_getRTC
 16648 ;;		i2_lcdInst
 16649 ;;		i2_printf
 16650 ;;		i2_strcpy
 16651 ;; This function is called by:
 16652 ;;		i2_change_state_to_menu_start
 16653 ;; This function uses a non-reentrant model
 16654 ;;
 16655                           
 16656                           	psect	text61
 16657  0024B2                     __ptext61:
 16658                           	opt stack 0
 16659  0024B2                     i2_printRTC:
 16660                           	opt stack 18
 16661                           
 16662                           ;RTC.c: 64: getRTC();
 16663                           
 16664                           ;incstack = 0
 16665  0024B2  EC58  F01E         	call	i2_getRTC	;wreg free
 16666                           
 16667                           ;RTC.c: 65: char month[] = "MMM";
 16668  0024B6  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 16669  0024BA  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 16670  0024BE  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 16671  0024C2  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 16672                           
 16673                           ;RTC.c: 66: int INT_time[7];
 16674                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16675  0024C6  0E00               	movlw	0
 16676  0024C8  6E42               	movwf	i2printRTC@i+1,c
 16677  0024CA  0E00               	movlw	0
 16678  0024CC  6E41               	movwf	i2printRTC@i,c
 16679  0024CE  BE42               	btfsc	i2printRTC@i+1,7,c
 16680  0024D0  D006               	goto	i2l6125
 16681  0024D2  5042               	movf	i2printRTC@i+1,w,c
 16682  0024D4  E135               	bnz	i2l602
 16683  0024D6  0E07               	movlw	7
 16684  0024D8  5C41               	subwf	i2printRTC@i,w,c
 16685  0024DA  B0D8               	btfsc	status,0,c
 16686  0024DC  D031               	goto	i2l602
 16687  0024DE                     i2l6125:
 16688                           
 16689                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16690  0024DE  0E24               	movlw	low _time
 16691  0024E0  2441               	addwf	i2printRTC@i,w,c
 16692  0024E2  6ED9               	movwf	fsr2l,c
 16693  0024E4  0E01               	movlw	high _time
 16694  0024E6  2042               	addwfc	i2printRTC@i+1,w,c
 16695  0024E8  6EDA               	movwf	fsr2h,c
 16696  0024EA  50DF               	movf	indf2,w,c
 16697  0024EC  6E2A               	movwf	??i2_printRTC& (0+255),c
 16698  0024EE  3A2A               	swapf	??i2_printRTC,f,c
 16699  0024F0  0E0F               	movlw	15
 16700  0024F2  162A               	andwf	??i2_printRTC,f,c
 16701  0024F4  0E0F               	movlw	15
 16702  0024F6  162A               	andwf	??i2_printRTC,f,c
 16703  0024F8  502A               	movf	??i2_printRTC,w,c
 16704  0024FA  0D0A               	mullw	10
 16705  0024FC  0E24               	movlw	low _time
 16706  0024FE  2441               	addwf	i2printRTC@i,w,c
 16707  002500  6ED9               	movwf	fsr2l,c
 16708  002502  0E01               	movlw	high _time
 16709  002504  2042               	addwfc	i2printRTC@i+1,w,c
 16710  002506  6EDA               	movwf	fsr2h,c
 16711  002508  50DF               	movf	indf2,w,c
 16712  00250A  0B0F               	andlw	15
 16713  00250C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16714  00250E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16715  002510  50F3               	movf	prodl,w,c
 16716  002512  262B               	addwf	??i2_printRTC+1,f,c
 16717  002514  50F4               	movf	prodh,w,c
 16718  002516  222C               	addwfc	??i2_printRTC+2,f,c
 16719  002518  90D8               	bcf	status,0,c
 16720  00251A  3441               	rlcf	i2printRTC@i,w,c
 16721  00251C  6ED9               	movwf	fsr2l,c
 16722  00251E  3442               	rlcf	i2printRTC@i+1,w,c
 16723  002520  6EDA               	movwf	fsr2h,c
 16724  002522  0E2D               	movlw	low i2printRTC@INT_time
 16725  002524  26D9               	addwf	fsr2l,f,c
 16726  002526  0E00               	movlw	high i2printRTC@INT_time
 16727  002528  22DA               	addwfc	fsr2h,f,c
 16728  00252A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16729  00252E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16730  002532  4A41               	infsnz	i2printRTC@i,f,c
 16731  002534  2A42               	incf	i2printRTC@i+1,f,c
 16732  002536  BE42               	btfsc	i2printRTC@i+1,7,c
 16733  002538  D7D2               	goto	i2l6125
 16734  00253A  5042               	movf	i2printRTC@i+1,w,c
 16735  00253C  E101               	bnz	i2u465_40
 16736  00253E  D7CB               	goto	L10
 16737  002540                     i2u465_40:
 16738  002540                     i2l602:
 16739                           
 16740                           ;RTC.c: 69: }
 16741                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16742  002540  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16743  002544  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16744                           
 16745                           ;RTC.c: 71: switch(RTC_month){
 16746  002548  D084               	goto	i2l6157
 16747  00254A                     i2l6131:
 16748                           
 16749                           ;RTC.c: 73: strcpy(month, "JAN");
 16750  00254A  0E3D               	movlw	low i2printRTC@month
 16751  00254C  6E01               	movwf	i2strcpy@to,c
 16752  00254E  0E00               	movlw	high i2printRTC@month
 16753  002550  6E02               	movwf	i2strcpy@to+1,c
 16754  002552  0EDB               	movlw	low STR_8
 16755  002554  6E03               	movwf	i2strcpy@from,c
 16756  002556  0EFF               	movlw	high STR_8
 16757  002558  6E04               	movwf	i2strcpy@from+1,c
 16758  00255A  EC9C  F021         	call	i2_strcpy	;wreg free
 16759                           
 16760                           ;RTC.c: 74: break;
 16761  00255E  D0A6               	goto	i2l6159
 16762  002560                     i2l6133:
 16763                           
 16764                           ;RTC.c: 76: strcpy(month, "FEB");
 16765  002560  0E3D               	movlw	low i2printRTC@month
 16766  002562  6E01               	movwf	i2strcpy@to,c
 16767  002564  0E00               	movlw	high i2printRTC@month
 16768  002566  6E02               	movwf	i2strcpy@to+1,c
 16769  002568  0ECB               	movlw	low STR_9
 16770  00256A  6E03               	movwf	i2strcpy@from,c
 16771  00256C  0EFF               	movlw	high STR_9
 16772  00256E  6E04               	movwf	i2strcpy@from+1,c
 16773  002570  EC9C  F021         	call	i2_strcpy	;wreg free
 16774                           
 16775                           ;RTC.c: 77: break;
 16776  002574  D09B               	goto	i2l6159
 16777  002576                     i2l6135:
 16778                           
 16779                           ;RTC.c: 79: strcpy(month, "MAR");
 16780  002576  0E3D               	movlw	low i2printRTC@month
 16781  002578  6E01               	movwf	i2strcpy@to,c
 16782  00257A  0E00               	movlw	high i2printRTC@month
 16783  00257C  6E02               	movwf	i2strcpy@to+1,c
 16784  00257E  0EE7               	movlw	low STR_10
 16785  002580  6E03               	movwf	i2strcpy@from,c
 16786  002582  0EFF               	movlw	high STR_10
 16787  002584  6E04               	movwf	i2strcpy@from+1,c
 16788  002586  EC9C  F021         	call	i2_strcpy	;wreg free
 16789                           
 16790                           ;RTC.c: 80: break;
 16791  00258A  D090               	goto	i2l6159
 16792  00258C                     i2l6137:
 16793                           
 16794                           ;RTC.c: 82: strcpy(month, "APR");
 16795  00258C  0E3D               	movlw	low i2printRTC@month
 16796  00258E  6E01               	movwf	i2strcpy@to,c
 16797  002590  0E00               	movlw	high i2printRTC@month
 16798  002592  6E02               	movwf	i2strcpy@to+1,c
 16799  002594  0EEB               	movlw	low STR_11
 16800  002596  6E03               	movwf	i2strcpy@from,c
 16801  002598  0EFF               	movlw	high STR_11
 16802  00259A  6E04               	movwf	i2strcpy@from+1,c
 16803  00259C  EC9C  F021         	call	i2_strcpy	;wreg free
 16804                           
 16805                           ;RTC.c: 83: break;
 16806  0025A0  D085               	goto	i2l6159
 16807  0025A2                     i2l6139:
 16808                           
 16809                           ;RTC.c: 85: strcpy(month, "MAY");
 16810  0025A2  0E3D               	movlw	low i2printRTC@month
 16811  0025A4  6E01               	movwf	i2strcpy@to,c
 16812  0025A6  0E00               	movlw	high i2printRTC@month
 16813  0025A8  6E02               	movwf	i2strcpy@to+1,c
 16814  0025AA  0EFB               	movlw	low STR_12
 16815  0025AC  6E03               	movwf	i2strcpy@from,c
 16816  0025AE  0EFF               	movlw	high STR_12
 16817  0025B0  6E04               	movwf	i2strcpy@from+1,c
 16818  0025B2  EC9C  F021         	call	i2_strcpy	;wreg free
 16819                           
 16820                           ;RTC.c: 86: break;
 16821  0025B6  D07A               	goto	i2l6159
 16822  0025B8                     i2l6141:
 16823                           
 16824                           ;RTC.c: 88: strcpy(month, "JUN");
 16825  0025B8  0E3D               	movlw	low i2printRTC@month
 16826  0025BA  6E01               	movwf	i2strcpy@to,c
 16827  0025BC  0E00               	movlw	high i2printRTC@month
 16828  0025BE  6E02               	movwf	i2strcpy@to+1,c
 16829  0025C0  0EDF               	movlw	low STR_13
 16830  0025C2  6E03               	movwf	i2strcpy@from,c
 16831  0025C4  0EFF               	movlw	high STR_13
 16832  0025C6  6E04               	movwf	i2strcpy@from+1,c
 16833  0025C8  EC9C  F021         	call	i2_strcpy	;wreg free
 16834                           
 16835                           ;RTC.c: 89: break;
 16836  0025CC  D06F               	goto	i2l6159
 16837  0025CE                     i2l6143:
 16838                           
 16839                           ;RTC.c: 91: strcpy(month, "JUL");
 16840  0025CE  0E3D               	movlw	low i2printRTC@month
 16841  0025D0  6E01               	movwf	i2strcpy@to,c
 16842  0025D2  0E00               	movlw	high i2printRTC@month
 16843  0025D4  6E02               	movwf	i2strcpy@to+1,c
 16844  0025D6  0ED7               	movlw	low STR_14
 16845  0025D8  6E03               	movwf	i2strcpy@from,c
 16846  0025DA  0EFF               	movlw	high STR_14
 16847  0025DC  6E04               	movwf	i2strcpy@from+1,c
 16848  0025DE  EC9C  F021         	call	i2_strcpy	;wreg free
 16849                           
 16850                           ;RTC.c: 92: break;
 16851  0025E2  D064               	goto	i2l6159
 16852  0025E4                     i2l6145:
 16853                           
 16854                           ;RTC.c: 94: strcpy(month, "AUG");
 16855  0025E4  0E3D               	movlw	low i2printRTC@month
 16856  0025E6  6E01               	movwf	i2strcpy@to,c
 16857  0025E8  0E00               	movlw	high i2printRTC@month
 16858  0025EA  6E02               	movwf	i2strcpy@to+1,c
 16859  0025EC  0ED3               	movlw	low STR_15
 16860  0025EE  6E03               	movwf	i2strcpy@from,c
 16861  0025F0  0EFF               	movlw	high STR_15
 16862  0025F2  6E04               	movwf	i2strcpy@from+1,c
 16863  0025F4  EC9C  F021         	call	i2_strcpy	;wreg free
 16864                           
 16865                           ;RTC.c: 95: break;
 16866  0025F8  D059               	goto	i2l6159
 16867  0025FA                     i2l6147:
 16868                           
 16869                           ;RTC.c: 97: strcpy(month, "SEP");
 16870  0025FA  0E3D               	movlw	low i2printRTC@month
 16871  0025FC  6E01               	movwf	i2strcpy@to,c
 16872  0025FE  0E00               	movlw	high i2printRTC@month
 16873  002600  6E02               	movwf	i2strcpy@to+1,c
 16874  002602  0EE3               	movlw	low STR_16
 16875  002604  6E03               	movwf	i2strcpy@from,c
 16876  002606  0EFF               	movlw	high STR_16
 16877  002608  6E04               	movwf	i2strcpy@from+1,c
 16878  00260A  EC9C  F021         	call	i2_strcpy	;wreg free
 16879                           
 16880                           ;RTC.c: 98: break;
 16881  00260E  D04E               	goto	i2l6159
 16882  002610                     i2l6149:
 16883                           
 16884                           ;RTC.c: 100: strcpy(month, "OCT");
 16885  002610  0E3D               	movlw	low i2printRTC@month
 16886  002612  6E01               	movwf	i2strcpy@to,c
 16887  002614  0E00               	movlw	high i2printRTC@month
 16888  002616  6E02               	movwf	i2strcpy@to+1,c
 16889  002618  0EF3               	movlw	low STR_17
 16890  00261A  6E03               	movwf	i2strcpy@from,c
 16891  00261C  0EFF               	movlw	high STR_17
 16892  00261E  6E04               	movwf	i2strcpy@from+1,c
 16893  002620  EC9C  F021         	call	i2_strcpy	;wreg free
 16894                           
 16895                           ;RTC.c: 101: break;
 16896  002624  D043               	goto	i2l6159
 16897  002626                     i2l6151:
 16898                           
 16899                           ;RTC.c: 103: strcpy(month, "NOV");
 16900  002626  0E3D               	movlw	low i2printRTC@month
 16901  002628  6E01               	movwf	i2strcpy@to,c
 16902  00262A  0E00               	movlw	high i2printRTC@month
 16903  00262C  6E02               	movwf	i2strcpy@to+1,c
 16904  00262E  0EF7               	movlw	low STR_18
 16905  002630  6E03               	movwf	i2strcpy@from,c
 16906  002632  0EFF               	movlw	high STR_18
 16907  002634  6E04               	movwf	i2strcpy@from+1,c
 16908  002636  EC9C  F021         	call	i2_strcpy	;wreg free
 16909                           
 16910                           ;RTC.c: 104: break;
 16911  00263A  D038               	goto	i2l6159
 16912  00263C                     i2l6153:
 16913                           
 16914                           ;RTC.c: 106: strcpy(month, "DEC");
 16915  00263C  0E3D               	movlw	low i2printRTC@month
 16916  00263E  6E01               	movwf	i2strcpy@to,c
 16917  002640  0E00               	movlw	high i2printRTC@month
 16918  002642  6E02               	movwf	i2strcpy@to+1,c
 16919  002644  0ECF               	movlw	low STR_19
 16920  002646  6E03               	movwf	i2strcpy@from,c
 16921  002648  0EFF               	movlw	high STR_19
 16922  00264A  6E04               	movwf	i2strcpy@from+1,c
 16923  00264C  EC9C  F021         	call	i2_strcpy	;wreg free
 16924                           
 16925                           ;RTC.c: 108: }
 16926                           
 16927                           ;RTC.c: 107: break;
 16928  002650  D02D               	goto	i2l6159
 16929  002652                     i2l6157:
 16930  002652  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16931  002656  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16932                           
 16933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16934                           ; Switch size 1, requested type "space"
 16935                           ; Number of cases is 1, Range of values is 0 to 0
 16936                           ; switch strategies available:
 16937                           ; Name         Instructions Cycles
 16938                           ; simple_byte            4     3 (average)
 16939                           ;	Chosen strategy is simple_byte
 16940  00265A  502B               	movf	??i2_printRTC+1,w,c
 16941  00265C  0A00               	xorlw	0	; case 0
 16942  00265E  A4D8               	btfss	status,2,c
 16943  002660  D025               	goto	i2l6159
 16944                           
 16945                           ; Switch size 1, requested type "space"
 16946                           ; Number of cases is 12, Range of values is 1 to 12
 16947                           ; switch strategies available:
 16948                           ; Name         Instructions Cycles
 16949                           ; simple_byte           37    19 (average)
 16950                           ;	Chosen strategy is simple_byte
 16951  002662  502A               	movf	??i2_printRTC,w,c
 16952  002664  0A01               	xorlw	1	; case 1
 16953  002666  B4D8               	btfsc	status,2,c
 16954  002668  D770               	goto	i2l6131
 16955  00266A  0A03               	xorlw	3	; case 2
 16956  00266C  B4D8               	btfsc	status,2,c
 16957  00266E  D778               	goto	i2l6133
 16958  002670  0A01               	xorlw	1	; case 3
 16959  002672  B4D8               	btfsc	status,2,c
 16960  002674  D780               	goto	i2l6135
 16961  002676  0A07               	xorlw	7	; case 4
 16962  002678  B4D8               	btfsc	status,2,c
 16963  00267A  D788               	goto	i2l6137
 16964  00267C  0A01               	xorlw	1	; case 5
 16965  00267E  B4D8               	btfsc	status,2,c
 16966  002680  D790               	goto	i2l6139
 16967  002682  0A03               	xorlw	3	; case 6
 16968  002684  B4D8               	btfsc	status,2,c
 16969  002686  D798               	goto	i2l6141
 16970  002688  0A01               	xorlw	1	; case 7
 16971  00268A  B4D8               	btfsc	status,2,c
 16972  00268C  D7A0               	goto	i2l6143
 16973  00268E  0A0F               	xorlw	15	; case 8
 16974  002690  B4D8               	btfsc	status,2,c
 16975  002692  D7A8               	goto	i2l6145
 16976  002694  0A01               	xorlw	1	; case 9
 16977  002696  B4D8               	btfsc	status,2,c
 16978  002698  D7B0               	goto	i2l6147
 16979  00269A  0A03               	xorlw	3	; case 10
 16980  00269C  B4D8               	btfsc	status,2,c
 16981  00269E  D7B8               	goto	i2l6149
 16982  0026A0  0A01               	xorlw	1	; case 11
 16983  0026A2  B4D8               	btfsc	status,2,c
 16984  0026A4  D7C0               	goto	i2l6151
 16985  0026A6  0A07               	xorlw	7	; case 12
 16986  0026A8  B4D8               	btfsc	status,2,c
 16987  0026AA  D7C8               	goto	i2l6153
 16988  0026AC                     i2l6159:
 16989                           
 16990                           ;RTC.c: 109: lcdInst(0b10000000);;
 16991  0026AC  0E80               	movlw	128
 16992  0026AE  ECEF  F023         	call	i2_lcdInst
 16993                           
 16994                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16995  0026B2  0E3C               	movlw	low STR_21
 16996  0026B4  6E0D               	movwf	i2printf@f,c
 16997  0026B6  0EFB               	movlw	high STR_21
 16998  0026B8  6E0E               	movwf	i2printf@f+1,c
 16999  0026BA  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17000  0026BE  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17001  0026C2  0E3D               	movlw	low i2printRTC@month
 17002  0026C4  6E11               	movwf	?i2_printf+4,c
 17003  0026C6  0E00               	movlw	high i2printRTC@month
 17004  0026C8  6E12               	movwf	?i2_printf+5,c
 17005  0026CA  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17006  0026CE  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17007  0026D2  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17008  0026D6  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17009  0026DA  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17010  0026DE  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17011  0026E2  ECD4  F00A         	call	i2_printf	;wreg free
 17012  0026E6  0012               	return		;funcret
 17013  0026E8                     __end_ofi2_printRTC:
 17014                           	opt stack 0
 17015                           pclatu	equ	0xFFB
 17016                           pclath	equ	0xFFA
 17017                           tblptru	equ	0xFF8
 17018                           tblptrh	equ	0xFF7
 17019                           tblptrl	equ	0xFF6
 17020                           tablat	equ	0xFF5
 17021                           prodh	equ	0xFF4
 17022                           prodl	equ	0xFF3
 17023                           intcon	equ	0xFF2
 17024                           intcon2	equ	0xFF1
 17025                           intcon3	equ	0xFF0
 17026                           indf0	equ	0xFEF
 17027                           postinc0	equ	0xFEE
 17028                           fsr0h	equ	0xFEA
 17029                           fsr0l	equ	0xFE9
 17030                           wreg	equ	0xFE8
 17031                           postdec1	equ	0xFE5
 17032                           fsr1h	equ	0xFE2
 17033                           fsr1l	equ	0xFE1
 17034                           indf2	equ	0xFDF
 17035                           postinc2	equ	0xFDE
 17036                           postdec2	equ	0xFDD
 17037                           fsr2h	equ	0xFDA
 17038                           fsr2l	equ	0xFD9
 17039                           status	equ	0xFD8
 17040                           
 17041 ;; *************** function i2_strcpy *****************
 17042 ;; Defined at:
 17043 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17044 ;; Parameters:    Size  Location     Type
 17045 ;;  to              2    0[COMRAM] PTR unsigned char 
 17046 ;;		 -> printRTC@month(4), UI@month(4), 
 17047 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17048 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17049 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17050 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17051 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17052 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17053 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17054 ;;		 -> STR_8(4), 
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17057 ;;		 -> printRTC@month(4), UI@month(4), 
 17058 ;; Return value:  Size  Location     Type
 17059 ;;                  2    0[COMRAM] PTR unsigned char 
 17060 ;; Registers used:
 17061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17067 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17068 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17071 ;;Total ram usage:        6 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; This function calls:
 17074 ;;		Nothing
 17075 ;; This function is called by:
 17076 ;;		i2_printRTC
 17077 ;; This function uses a non-reentrant model
 17078 ;;
 17079                           
 17080                           	psect	text62
 17081  004338                     __ptext62:
 17082                           	opt stack 0
 17083  004338                     i2_strcpy:
 17084                           	opt stack 20
 17085                           
 17086                           ;incstack = 0
 17087  004338  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17088  00433C  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17089  004340  D004               	goto	i2l5795
 17090  004342                     i2l5793:
 17091  004342  4A05               	infsnz	i2strcpy@cp,f,c
 17092  004344  2A06               	incf	i2strcpy@cp+1,f,c
 17093  004346  4A03               	infsnz	i2strcpy@from,f,c
 17094  004348  2A04               	incf	i2strcpy@from+1,f,c
 17095  00434A                     i2l5795:
 17096  00434A  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17097  00434E  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17098  004352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17099  004352  6AF8               	clrf	tblptru,c
 17100  004354                     	endif
 17101  004354                     	if	0	;tblptru may be non-zero
 17102  004354                     	endif
 17103  004354  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17104  004358  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17105  00435C  0008               	tblrd		*
 17106  00435E  CFF5 FFDF          	movff	tablat,indf2
 17107  004362  50DF               	movf	indf2,w,c
 17108  004364  B4D8               	btfsc	status,2,c
 17109  004366  0012               	return	
 17110  004368  D7EC               	goto	i2l5793
 17111  00436A                     __end_ofi2_strcpy:
 17112                           	opt stack 0
 17113                           pclatu	equ	0xFFB
 17114                           pclath	equ	0xFFA
 17115                           tblptru	equ	0xFF8
 17116                           tblptrh	equ	0xFF7
 17117                           tblptrl	equ	0xFF6
 17118                           tablat	equ	0xFF5
 17119                           prodh	equ	0xFF4
 17120                           prodl	equ	0xFF3
 17121                           intcon	equ	0xFF2
 17122                           intcon2	equ	0xFF1
 17123                           intcon3	equ	0xFF0
 17124                           indf0	equ	0xFEF
 17125                           postinc0	equ	0xFEE
 17126                           fsr0h	equ	0xFEA
 17127                           fsr0l	equ	0xFE9
 17128                           wreg	equ	0xFE8
 17129                           postdec1	equ	0xFE5
 17130                           fsr1h	equ	0xFE2
 17131                           fsr1l	equ	0xFE1
 17132                           indf2	equ	0xFDF
 17133                           postinc2	equ	0xFDE
 17134                           postdec2	equ	0xFDD
 17135                           fsr2h	equ	0xFDA
 17136                           fsr2l	equ	0xFD9
 17137                           status	equ	0xFD8
 17138                           
 17139 ;; *************** function _inputHandler *****************
 17140 ;; Defined at:
 17141 ;;		line 372 in file "UI.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;		None
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;		None
 17146 ;; Return value:  Size  Location     Type
 17147 ;;                  2   41[COMRAM] int 
 17148 ;; Registers used:
 17149 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/0
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;Total ram usage:        4 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    4
 17162 ;; This function calls:
 17163 ;;		_change_state_to_logs_11
 17164 ;;		_change_state_to_logs_12
 17165 ;;		_change_state_to_logs_22
 17166 ;;		_change_state_to_logs_23
 17167 ;;		_change_state_to_logs_33
 17168 ;;		_change_state_to_logs_34
 17169 ;;		_change_state_to_menu_11
 17170 ;;		_change_state_to_menu_23
 17171 ;;		i2_change_state_to_menu_12
 17172 ;;		i2_change_state_to_menu_22
 17173 ;; This function is called by:
 17174 ;;		_updateMenu
 17175 ;; This function uses a non-reentrant model
 17176 ;;
 17177                           
 17178                           	psect	text63
 17179  0028DA                     __ptext63:
 17180                           	opt stack 0
 17181  0028DA                     _inputHandler:
 17182                           	opt stack 18
 17183                           
 17184                           ;UI.c: 377: if(firstboot){
 17185                           
 17186                           ;incstack = 0
 17187  0028DA  5075               	movf	_firstboot,w,c
 17188  0028DC  1076               	iorwf	_firstboot+1,w,c
 17189  0028DE  B4D8               	btfsc	status,2,c
 17190  0028E0  D00B               	goto	i2l6227
 17191                           
 17192                           ;UI.c: 378: change_state_to_menu_11();
 17193  0028E2  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 17194                           
 17195                           ;UI.c: 379: firstboot = 0;
 17196  0028E6  0E00               	movlw	0
 17197  0028E8  6E76               	movwf	_firstboot+1,c
 17198  0028EA  0E00               	movlw	0
 17199  0028EC  6E75               	movwf	_firstboot,c
 17200                           
 17201                           ;UI.c: 380: return 0;
 17202  0028EE  0E00               	movlw	0
 17203  0028F0  6E2B               	movwf	?_inputHandler+1,c
 17204  0028F2  0E00               	movlw	0
 17205  0028F4  6E2A               	movwf	?_inputHandler,c
 17206  0028F6  0012               	return	
 17207  0028F8                     i2l6227:
 17208                           
 17209                           ;UI.c: 381: }
 17210                           ;UI.c: 382: if (logstate){
 17211  0028F8  0100               	movlb	0	; () banked
 17212  0028FA  51F6               	movf	_logstate& (0+255),w,b
 17213  0028FC  0100               	movlb	0	; () banked
 17214  0028FE  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17215  002900  B4D8               	btfsc	status,2,c
 17216  002902  D0C7               	goto	i2l6345
 17217                           
 17218                           ; BSR set to: 0
 17219                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17220  002904  0E43               	movlw	67
 17221  002906  187D               	xorwf	_input,w,c	;volatile
 17222  002908  A4D8               	btfss	status,2,c
 17223  00290A  D012               	goto	i2l6245
 17224                           
 17225                           ; BSR set to: 0
 17226  00290C  B281               	btfsc	3969,1,c	;volatile
 17227  00290E  D009               	goto	i2l6237
 17228  002910  D00F               	goto	i2l6245
 17229  002912                     i2l6235:
 17230                           
 17231                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17232  002912  0E68               	movlw	104
 17233  002914  6E2C               	movwf	??_inputHandler& (0+255),c
 17234  002916  0EE4               	movlw	228
 17235  002918                     i2u825_47:
 17236  002918  2EE8               	decfsz	wreg,f,c
 17237  00291A  D7FE               	bra	i2u825_47
 17238  00291C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17239  00291E  D7FC               	bra	i2u825_47
 17240  002920  D000               	nop2	
 17241  002922                     i2l6237:
 17242  002922  B281               	btfsc	3969,1,c	;volatile
 17243  002924  D7F6               	goto	i2l6235
 17244  002926                     i2l6239:
 17245                           
 17246                           ;UI.c: 387: }
 17247                           ;UI.c: 388: return 0;
 17248  002926  0E00               	movlw	0
 17249  002928  6E2B               	movwf	?_inputHandler+1,c
 17250  00292A  0E00               	movlw	0
 17251  00292C  6E2A               	movwf	?_inputHandler,c
 17252  00292E  0012               	return	
 17253  002930                     i2l6245:
 17254                           
 17255                           ;UI.c: 390: else if (input == 'D'){
 17256  002930  0E44               	movlw	68
 17257  002932  187D               	xorwf	_input,w,c	;volatile
 17258  002934  A4D8               	btfss	status,2,c
 17259  002936  D7F7               	goto	i2l6239
 17260                           
 17261                           ;UI.c: 392: logstate = 0;
 17262  002938  0E00               	movlw	0
 17263  00293A  0100               	movlb	0	; () banked
 17264  00293C  6FF7               	movwf	(_logstate+1)& (0+255),b
 17265  00293E  0E00               	movlw	0
 17266  002940  6FF6               	movwf	_logstate& (0+255),b
 17267                           
 17268                           ;UI.c: 393: switch(cur_state){
 17269  002942  D012               	goto	i2l6263
 17270  002944                     i2l6249:
 17271                           
 17272                           ;UI.c: 395: change_state_to_logs_11();
 17273  002944  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 17274                           
 17275                           ;UI.c: 396: break;
 17276  002948  D7EE               	goto	i2l6239
 17277  00294A                     i2l6251:
 17278                           
 17279                           ;UI.c: 398: change_state_to_logs_12();
 17280  00294A  EC5D  F022         	call	_change_state_to_logs_12	;wreg free
 17281                           
 17282                           ;UI.c: 399: break;
 17283  00294E  D7EB               	goto	i2l6239
 17284  002950                     i2l6253:
 17285                           
 17286                           ;UI.c: 401: change_state_to_logs_22();
 17287  002950  EC45  F022         	call	_change_state_to_logs_22	;wreg free
 17288                           
 17289                           ;UI.c: 402: break;
 17290  002954  D7E8               	goto	i2l6239
 17291  002956                     i2l6255:
 17292                           
 17293                           ;UI.c: 404: change_state_to_logs_23();
 17294  002956  ECBB  F022         	call	_change_state_to_logs_23	;wreg free
 17295                           
 17296                           ;UI.c: 405: break;
 17297  00295A  D7E5               	goto	i2l6239
 17298  00295C                     i2l6257:
 17299                           
 17300                           ;UI.c: 407: change_state_to_logs_33();
 17301  00295C  EC2D  F022         	call	_change_state_to_logs_33	;wreg free
 17302                           
 17303                           ;UI.c: 408: break;
 17304  002960  D7E2               	goto	i2l6239
 17305  002962                     i2l6259:
 17306                           
 17307                           ;UI.c: 410: change_state_to_logs_34();
 17308  002962  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 17309                           
 17310                           ;UI.c: 412: }
 17311                           
 17312                           ;UI.c: 411: break;
 17313  002966  D7DF               	goto	i2l6239
 17314  002968                     i2l6263:
 17315  002968  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17316  00296C  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17317                           
 17318                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17319                           ; Switch size 1, requested type "space"
 17320                           ; Number of cases is 2, Range of values is 3 to 4
 17321                           ; switch strategies available:
 17322                           ; Name         Instructions Cycles
 17323                           ; simple_byte            7     4 (average)
 17324                           ;	Chosen strategy is simple_byte
 17325  002970  502D               	movf	??_inputHandler+1,w,c
 17326  002972  0A03               	xorlw	3	; case 3
 17327  002974  B4D8               	btfsc	status,2,c
 17328  002976  D004               	goto	i2l8455
 17329  002978  0A07               	xorlw	7	; case 4
 17330  00297A  B4D8               	btfsc	status,2,c
 17331  00297C  D00F               	goto	i2l8457
 17332  00297E  D7D3               	goto	i2l6239
 17333  002980                     i2l8455:
 17334                           
 17335                           ; Switch size 1, requested type "space"
 17336                           ; Number of cases is 4, Range of values is 243 to 255
 17337                           ; switch strategies available:
 17338                           ; Name         Instructions Cycles
 17339                           ; simple_byte           13     7 (average)
 17340                           ;	Chosen strategy is simple_byte
 17341  002980  502C               	movf	??_inputHandler,w,c
 17342  002982  0AF3               	xorlw	243	; case 243
 17343  002984  B4D8               	btfsc	status,2,c
 17344  002986  D7DE               	goto	i2l6249
 17345  002988  0A07               	xorlw	7	; case 244
 17346  00298A  B4D8               	btfsc	status,2,c
 17347  00298C  D7DE               	goto	i2l6251
 17348  00298E  0A0A               	xorlw	10	; case 254
 17349  002990  B4D8               	btfsc	status,2,c
 17350  002992  D7DE               	goto	i2l6253
 17351  002994  0A01               	xorlw	1	; case 255
 17352  002996  B4D8               	btfsc	status,2,c
 17353  002998  D7DE               	goto	i2l6255
 17354  00299A  D7C5               	goto	i2l6239
 17355  00299C                     i2l8457:
 17356                           
 17357                           ; Switch size 1, requested type "space"
 17358                           ; Number of cases is 2, Range of values is 9 to 10
 17359                           ; switch strategies available:
 17360                           ; Name         Instructions Cycles
 17361                           ; simple_byte            7     4 (average)
 17362                           ;	Chosen strategy is simple_byte
 17363  00299C  502C               	movf	??_inputHandler,w,c
 17364  00299E  0A09               	xorlw	9	; case 9
 17365  0029A0  B4D8               	btfsc	status,2,c
 17366  0029A2  D7DC               	goto	i2l6257
 17367  0029A4  0A03               	xorlw	3	; case 10
 17368  0029A6  B4D8               	btfsc	status,2,c
 17369  0029A8  D7DC               	goto	i2l6259
 17370  0029AA  D7BD               	goto	i2l6239
 17371  0029AC                     i2l6275:
 17372                           
 17373                           ;UI.c: 422: if(cur_state == 11){
 17374  0029AC  0E0B               	movlw	11
 17375  0029AE  0100               	movlb	0	; () banked
 17376  0029B0  19E0               	xorwf	_cur_state& (0+255),w,b
 17377  0029B2  0100               	movlb	0	; () banked
 17378  0029B4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17379  0029B6  A4D8               	btfss	status,2,c
 17380  0029B8  D005               	goto	i2l6283
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;UI.c: 423: return 0;
 17384  0029BA  0E00               	movlw	0
 17385  0029BC  6E2B               	movwf	?_inputHandler+1,c
 17386  0029BE  0E00               	movlw	0
 17387  0029C0  6E2A               	movwf	?_inputHandler,c
 17388                           
 17389                           ; BSR set to: 0
 17390  0029C2  0012               	return	
 17391  0029C4                     i2l6283:
 17392                           
 17393                           ; BSR set to: 0
 17394                           ;UI.c: 425: else{
 17395                           ;UI.c: 426: change_state_to_menu_11();
 17396  0029C4  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 17397                           
 17398                           ;UI.c: 427: }
 17399                           ;UI.c: 428: return 0;
 17400  0029C8  0E00               	movlw	0
 17401  0029CA  6E2B               	movwf	?_inputHandler+1,c
 17402  0029CC  0E00               	movlw	0
 17403  0029CE  6E2A               	movwf	?_inputHandler,c
 17404  0029D0  0012               	return	
 17405  0029D2                     i2l6289:
 17406                           
 17407                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17408  0029D2  0E16               	movlw	22
 17409  0029D4  0100               	movlb	0	; () banked
 17410  0029D6  19E0               	xorwf	_cur_state& (0+255),w,b
 17411  0029D8  0100               	movlb	0	; () banked
 17412  0029DA  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17413  0029DC  B4D8               	btfsc	status,2,c
 17414  0029DE  D007               	goto	i2l6293
 17415                           
 17416                           ; BSR set to: 0
 17417  0029E0  0E0C               	movlw	12
 17418  0029E2  0100               	movlb	0	; () banked
 17419  0029E4  19E0               	xorwf	_cur_state& (0+255),w,b
 17420  0029E6  0100               	movlb	0	; () banked
 17421  0029E8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17422  0029EA  A4D8               	btfss	status,2,c
 17423  0029EC  D005               	goto	i2l6299
 17424  0029EE                     i2l6293:
 17425                           
 17426                           ; BSR set to: 0
 17427                           ;UI.c: 431: return 0;
 17428  0029EE  0E00               	movlw	0
 17429  0029F0  6E2B               	movwf	?_inputHandler+1,c
 17430  0029F2  0E00               	movlw	0
 17431  0029F4  6E2A               	movwf	?_inputHandler,c
 17432                           
 17433                           ; BSR set to: 0
 17434  0029F6  0012               	return	
 17435  0029F8                     i2l6299:
 17436                           
 17437                           ; BSR set to: 0
 17438                           ;UI.c: 433: else if(cur_state == 23){
 17439  0029F8  0E17               	movlw	23
 17440  0029FA  0100               	movlb	0	; () banked
 17441  0029FC  19E0               	xorwf	_cur_state& (0+255),w,b
 17442  0029FE  0100               	movlb	0	; () banked
 17443  002A00  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17444  002A02  A4D8               	btfss	status,2,c
 17445  002A04  D003               	goto	i2l6303
 17446                           
 17447                           ; BSR set to: 0
 17448                           ;UI.c: 434: change_state_to_menu_22();
 17449  002A06  ECB5  F021         	call	i2_change_state_to_menu_22	;wreg free
 17450                           
 17451                           ;UI.c: 435: }
 17452  002A0A  D002               	goto	i2l6305
 17453  002A0C                     i2l6303:
 17454                           
 17455                           ;UI.c: 436: else{
 17456                           ;UI.c: 437: change_state_to_menu_12();
 17457  002A0C  ECCD  F021         	call	i2_change_state_to_menu_12	;wreg free
 17458  002A10                     i2l6305:
 17459                           
 17460                           ;UI.c: 438: }
 17461                           ;UI.c: 439: return 0;
 17462  002A10  0E00               	movlw	0
 17463  002A12  6E2B               	movwf	?_inputHandler+1,c
 17464  002A14  0E00               	movlw	0
 17465  002A16  6E2A               	movwf	?_inputHandler,c
 17466  002A18  0012               	return	
 17467  002A1A                     i2l6309:
 17468                           
 17469                           ;UI.c: 441: if(cur_state == 23){
 17470  002A1A  0E17               	movlw	23
 17471  002A1C  0100               	movlb	0	; () banked
 17472  002A1E  19E0               	xorwf	_cur_state& (0+255),w,b
 17473  002A20  0100               	movlb	0	; () banked
 17474  002A22  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17475  002A24  A4D8               	btfss	status,2,c
 17476  002A26  D005               	goto	i2l6317
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;UI.c: 442: return 0;
 17480  002A28  0E00               	movlw	0
 17481  002A2A  6E2B               	movwf	?_inputHandler+1,c
 17482  002A2C  0E00               	movlw	0
 17483  002A2E  6E2A               	movwf	?_inputHandler,c
 17484                           
 17485                           ; BSR set to: 0
 17486  002A30  0012               	return	
 17487  002A32                     i2l6317:
 17488                           
 17489                           ; BSR set to: 0
 17490                           ;UI.c: 444: else{
 17491                           ;UI.c: 445: change_state_to_menu_23();
 17492  002A32  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 17493                           
 17494                           ;UI.c: 446: }
 17495                           ;UI.c: 447: return 0;
 17496  002A36  0E00               	movlw	0
 17497  002A38  6E2B               	movwf	?_inputHandler+1,c
 17498  002A3A  0E00               	movlw	0
 17499  002A3C  6E2A               	movwf	?_inputHandler,c
 17500  002A3E  0012               	return	
 17501  002A40                     i2l6323:
 17502                           
 17503                           ;UI.c: 450: up = 1;
 17504  002A40  0E00               	movlw	0
 17505  002A42  6E78               	movwf	_up+1,c
 17506  002A44  0E01               	movlw	1
 17507  002A46  6E77               	movwf	_up,c
 17508                           
 17509                           ;UI.c: 451: return 1;
 17510  002A48  0E00               	movlw	0
 17511  002A4A  6E2B               	movwf	?_inputHandler+1,c
 17512  002A4C  0E01               	movlw	1
 17513  002A4E  6E2A               	movwf	?_inputHandler,c
 17514  002A50  0012               	return	
 17515  002A52                     i2l6327:
 17516                           
 17517                           ;UI.c: 453: down = 1;
 17518  002A52  0E00               	movlw	0
 17519  002A54  6E68               	movwf	_down+1,c
 17520  002A56  0E01               	movlw	1
 17521  002A58  6E67               	movwf	_down,c
 17522                           
 17523                           ;UI.c: 454: return 1;
 17524  002A5A  0E00               	movlw	0
 17525  002A5C  6E2B               	movwf	?_inputHandler+1,c
 17526  002A5E  0E01               	movlw	1
 17527  002A60  6E2A               	movwf	?_inputHandler,c
 17528  002A62  0012               	return	
 17529  002A64                     i2l6331:
 17530                           
 17531                           ;UI.c: 456: enter = 1;
 17532  002A64  0E00               	movlw	0
 17533  002A66  6E6A               	movwf	_enter+1,c
 17534  002A68  0E01               	movlw	1
 17535  002A6A  6E69               	movwf	_enter,c
 17536                           
 17537                           ;UI.c: 457: return 1;
 17538  002A6C  0E00               	movlw	0
 17539  002A6E  6E2B               	movwf	?_inputHandler+1,c
 17540  002A70  0E01               	movlw	1
 17541  002A72  6E2A               	movwf	?_inputHandler,c
 17542  002A74  0012               	return	
 17543  002A76                     i2l6335:
 17544                           
 17545                           ;UI.c: 459: back = 1;
 17546  002A76  0E00               	movlw	0
 17547  002A78  6E5C               	movwf	_back+1,c
 17548  002A7A  0E01               	movlw	1
 17549  002A7C  6E5B               	movwf	_back,c
 17550                           
 17551                           ;UI.c: 460: return 1;
 17552  002A7E  0E00               	movlw	0
 17553  002A80  6E2B               	movwf	?_inputHandler+1,c
 17554  002A82  0E01               	movlw	1
 17555  002A84  6E2A               	movwf	?_inputHandler,c
 17556  002A86  0012               	return	
 17557  002A88                     i2l6339:
 17558                           
 17559                           ;UI.c: 463: return 1;
 17560  002A88  0E00               	movlw	0
 17561  002A8A  6E2B               	movwf	?_inputHandler+1,c
 17562  002A8C  0E01               	movlw	1
 17563  002A8E  6E2A               	movwf	?_inputHandler,c
 17564                           
 17565                           ;UI.c: 464: }
 17566  002A90  0012               	return	
 17567  002A92                     i2l6345:
 17568  002A92  507D               	movf	_input,w,c	;volatile
 17569                           
 17570                           ; Switch size 1, requested type "space"
 17571                           ; Number of cases is 7, Range of values is 49 to 68
 17572                           ; switch strategies available:
 17573                           ; Name         Instructions Cycles
 17574                           ; simple_byte           22    12 (average)
 17575                           ;	Chosen strategy is simple_byte
 17576  002A94  0A31               	xorlw	49	; case 49
 17577  002A96  B4D8               	btfsc	status,2,c
 17578  002A98  D789               	goto	i2l6275
 17579  002A9A  0A03               	xorlw	3	; case 50
 17580  002A9C  B4D8               	btfsc	status,2,c
 17581  002A9E  D799               	goto	i2l6289
 17582  002AA0  0A01               	xorlw	1	; case 51
 17583  002AA2  B4D8               	btfsc	status,2,c
 17584  002AA4  D7BA               	goto	i2l6309
 17585  002AA6  0A72               	xorlw	114	; case 65
 17586  002AA8  B4D8               	btfsc	status,2,c
 17587  002AAA  D7CA               	goto	i2l6323
 17588  002AAC  0A03               	xorlw	3	; case 66
 17589  002AAE  B4D8               	btfsc	status,2,c
 17590  002AB0  D7D0               	goto	i2l6327
 17591  002AB2  0A01               	xorlw	1	; case 67
 17592  002AB4  B4D8               	btfsc	status,2,c
 17593  002AB6  D7D6               	goto	i2l6331
 17594  002AB8  0A07               	xorlw	7	; case 68
 17595  002ABA  B4D8               	btfsc	status,2,c
 17596  002ABC  D7DC               	goto	i2l6335
 17597  002ABE  D7E4               	goto	i2l6339
 17598  002AC0                     __end_of_inputHandler:
 17599                           	opt stack 0
 17600                           pclatu	equ	0xFFB
 17601                           pclath	equ	0xFFA
 17602                           tblptru	equ	0xFF8
 17603                           tblptrh	equ	0xFF7
 17604                           tblptrl	equ	0xFF6
 17605                           tablat	equ	0xFF5
 17606                           prodh	equ	0xFF4
 17607                           prodl	equ	0xFF3
 17608                           intcon	equ	0xFF2
 17609                           intcon2	equ	0xFF1
 17610                           intcon3	equ	0xFF0
 17611                           indf0	equ	0xFEF
 17612                           postinc0	equ	0xFEE
 17613                           fsr0h	equ	0xFEA
 17614                           fsr0l	equ	0xFE9
 17615                           wreg	equ	0xFE8
 17616                           postdec1	equ	0xFE5
 17617                           fsr1h	equ	0xFE2
 17618                           fsr1l	equ	0xFE1
 17619                           indf2	equ	0xFDF
 17620                           postinc2	equ	0xFDE
 17621                           postdec2	equ	0xFDD
 17622                           fsr2h	equ	0xFDA
 17623                           fsr2l	equ	0xFD9
 17624                           status	equ	0xFD8
 17625                           
 17626 ;; *************** function i2_change_state_to_menu_22 *****************
 17627 ;; Defined at:
 17628 ;;		line 498 in file "UI.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;		None
 17631 ;; Auto vars:     Size  Location     Type
 17632 ;;		None
 17633 ;; Return value:  Size  Location     Type
 17634 ;;                  1    wreg      void 
 17635 ;; Registers used:
 17636 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;Total ram usage:        0 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    3
 17649 ;; This function calls:
 17650 ;;		i2_lcdInst
 17651 ;;		i2_printf
 17652 ;; This function is called by:
 17653 ;;		_updateMenu
 17654 ;;		_inputHandler
 17655 ;; This function uses a non-reentrant model
 17656 ;;
 17657                           
 17658                           	psect	text64
 17659  00436A                     __ptext64:
 17660                           	opt stack 0
 17661  00436A                     i2_change_state_to_menu_22:
 17662                           	opt stack 19
 17663                           
 17664                           ;UI.c: 499: cur_state = 22;
 17665                           
 17666                           ;incstack = 0
 17667  00436A  0E00               	movlw	0
 17668  00436C  0100               	movlb	0	; () banked
 17669  00436E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17670  004370  0E16               	movlw	22
 17671  004372  6FE0               	movwf	_cur_state& (0+255),b
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;UI.c: 501: lcdInst(0b10000000);;
 17675  004374  0E80               	movlw	128
 17676  004376  ECEF  F023         	call	i2_lcdInst
 17677                           
 17678                           ;UI.c: 502: printf("2. SORT        <");
 17679  00437A  0EE6               	movlw	low STR_34
 17680  00437C  6E0D               	movwf	i2printf@f,c
 17681  00437E  0EFD               	movlw	high STR_34
 17682  004380  6E0E               	movwf	i2printf@f+1,c
 17683  004382  ECD4  F00A         	call	i2_printf	;wreg free
 17684                           
 17685                           ;UI.c: 503: lcdInst(0b11000000);;
 17686  004386  0EC0               	movlw	192
 17687  004388  ECEF  F023         	call	i2_lcdInst
 17688                           
 17689                           ;UI.c: 504: printf("3. LOGS         ");
 17690  00438C  0E2B               	movlw	low STR_36
 17691  00438E  6E0D               	movwf	i2printf@f,c
 17692  004390  0EFD               	movlw	high STR_36
 17693  004392  6E0E               	movwf	i2printf@f+1,c
 17694  004394  ECD4  F00A         	call	i2_printf	;wreg free
 17695  004398  0012               	return		;funcret
 17696  00439A                     __end_ofi2_change_state_to_menu_22:
 17697                           	opt stack 0
 17698                           pclatu	equ	0xFFB
 17699                           pclath	equ	0xFFA
 17700                           tblptru	equ	0xFF8
 17701                           tblptrh	equ	0xFF7
 17702                           tblptrl	equ	0xFF6
 17703                           tablat	equ	0xFF5
 17704                           prodh	equ	0xFF4
 17705                           prodl	equ	0xFF3
 17706                           intcon	equ	0xFF2
 17707                           intcon2	equ	0xFF1
 17708                           intcon3	equ	0xFF0
 17709                           indf0	equ	0xFEF
 17710                           postinc0	equ	0xFEE
 17711                           fsr0h	equ	0xFEA
 17712                           fsr0l	equ	0xFE9
 17713                           wreg	equ	0xFE8
 17714                           postdec1	equ	0xFE5
 17715                           fsr1h	equ	0xFE2
 17716                           fsr1l	equ	0xFE1
 17717                           indf2	equ	0xFDF
 17718                           postinc2	equ	0xFDE
 17719                           postdec2	equ	0xFDD
 17720                           fsr2h	equ	0xFDA
 17721                           fsr2l	equ	0xFD9
 17722                           status	equ	0xFD8
 17723                           
 17724 ;; *************** function i2_change_state_to_menu_12 *****************
 17725 ;; Defined at:
 17726 ;;		line 490 in file "UI.c"
 17727 ;; Parameters:    Size  Location     Type
 17728 ;;		None
 17729 ;; Auto vars:     Size  Location     Type
 17730 ;;		None
 17731 ;; Return value:  Size  Location     Type
 17732 ;;                  1    wreg      void 
 17733 ;; Registers used:
 17734 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17735 ;; Tracked objects:
 17736 ;;		On entry : 0/0
 17737 ;;		On exit  : 0/0
 17738 ;;		Unchanged: 0/0
 17739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17744 ;;Total ram usage:        0 bytes
 17745 ;; Hardware stack levels used:    1
 17746 ;; Hardware stack levels required when called:    3
 17747 ;; This function calls:
 17748 ;;		i2_lcdInst
 17749 ;;		i2_printf
 17750 ;; This function is called by:
 17751 ;;		_updateMenu
 17752 ;;		_inputHandler
 17753 ;; This function uses a non-reentrant model
 17754 ;;
 17755                           
 17756                           	psect	text65
 17757  00439A                     __ptext65:
 17758                           	opt stack 0
 17759  00439A                     i2_change_state_to_menu_12:
 17760                           	opt stack 19
 17761                           
 17762                           ;UI.c: 491: cur_state = 12;
 17763                           
 17764                           ;incstack = 0
 17765  00439A  0E00               	movlw	0
 17766  00439C  0100               	movlb	0	; () banked
 17767  00439E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17768  0043A0  0E0C               	movlw	12
 17769  0043A2  6FE0               	movwf	_cur_state& (0+255),b
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;UI.c: 493: lcdInst(0b10000000);;
 17773  0043A4  0E80               	movlw	128
 17774  0043A6  ECEF  F023         	call	i2_lcdInst
 17775                           
 17776                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17777  0043AA  0E4D               	movlw	low STR_33
 17778  0043AC  6E0D               	movwf	i2printf@f,c
 17779  0043AE  0EFD               	movlw	high STR_33
 17780  0043B0  6E0E               	movwf	i2printf@f+1,c
 17781  0043B2  ECD4  F00A         	call	i2_printf	;wreg free
 17782                           
 17783                           ;UI.c: 495: lcdInst(0b11000000);;
 17784  0043B6  0EC0               	movlw	192
 17785  0043B8  ECEF  F023         	call	i2_lcdInst
 17786                           
 17787                           ;UI.c: 496: printf("2. SORT        <");
 17788  0043BC  0EE6               	movlw	low STR_34
 17789  0043BE  6E0D               	movwf	i2printf@f,c
 17790  0043C0  0EFD               	movlw	high STR_34
 17791  0043C2  6E0E               	movwf	i2printf@f+1,c
 17792  0043C4  ECD4  F00A         	call	i2_printf	;wreg free
 17793  0043C8  0012               	return		;funcret
 17794  0043CA                     __end_ofi2_change_state_to_menu_12:
 17795                           	opt stack 0
 17796                           pclatu	equ	0xFFB
 17797                           pclath	equ	0xFFA
 17798                           tblptru	equ	0xFF8
 17799                           tblptrh	equ	0xFF7
 17800                           tblptrl	equ	0xFF6
 17801                           tablat	equ	0xFF5
 17802                           prodh	equ	0xFF4
 17803                           prodl	equ	0xFF3
 17804                           intcon	equ	0xFF2
 17805                           intcon2	equ	0xFF1
 17806                           intcon3	equ	0xFF0
 17807                           indf0	equ	0xFEF
 17808                           postinc0	equ	0xFEE
 17809                           fsr0h	equ	0xFEA
 17810                           fsr0l	equ	0xFE9
 17811                           wreg	equ	0xFE8
 17812                           postdec1	equ	0xFE5
 17813                           fsr1h	equ	0xFE2
 17814                           fsr1l	equ	0xFE1
 17815                           indf2	equ	0xFDF
 17816                           postinc2	equ	0xFDE
 17817                           postdec2	equ	0xFDD
 17818                           fsr2h	equ	0xFDA
 17819                           fsr2l	equ	0xFD9
 17820                           status	equ	0xFD8
 17821                           
 17822 ;; *************** function _change_state_to_menu_23 *****************
 17823 ;; Defined at:
 17824 ;;		line 506 in file "UI.c"
 17825 ;; Parameters:    Size  Location     Type
 17826 ;;		None
 17827 ;; Auto vars:     Size  Location     Type
 17828 ;;		None
 17829 ;; Return value:  Size  Location     Type
 17830 ;;                  1    wreg      void 
 17831 ;; Registers used:
 17832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17833 ;; Tracked objects:
 17834 ;;		On entry : 0/0
 17835 ;;		On exit  : 0/0
 17836 ;;		Unchanged: 0/0
 17837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17842 ;;Total ram usage:        0 bytes
 17843 ;; Hardware stack levels used:    1
 17844 ;; Hardware stack levels required when called:    3
 17845 ;; This function calls:
 17846 ;;		i2_lcdInst
 17847 ;;		i2_printf
 17848 ;; This function is called by:
 17849 ;;		_updateMenu
 17850 ;;		_inputHandler
 17851 ;; This function uses a non-reentrant model
 17852 ;;
 17853                           
 17854                           	psect	text66
 17855  0043CA                     __ptext66:
 17856                           	opt stack 0
 17857  0043CA                     _change_state_to_menu_23:
 17858                           	opt stack 18
 17859                           
 17860                           ;UI.c: 507: cur_state = 23;
 17861                           
 17862                           ;incstack = 0
 17863  0043CA  0E00               	movlw	0
 17864  0043CC  0100               	movlb	0	; () banked
 17865  0043CE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17866  0043D0  0E17               	movlw	23
 17867  0043D2  6FE0               	movwf	_cur_state& (0+255),b
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;UI.c: 509: lcdInst(0b10000000);;
 17871  0043D4  0E80               	movlw	128
 17872  0043D6  ECEF  F023         	call	i2_lcdInst
 17873                           
 17874                           ;UI.c: 510: printf("2. SORT         ");
 17875  0043DA  0E3C               	movlw	low STR_32
 17876  0043DC  6E0D               	movwf	i2printf@f,c
 17877  0043DE  0EFD               	movlw	high STR_32
 17878  0043E0  6E0E               	movwf	i2printf@f+1,c
 17879  0043E2  ECD4  F00A         	call	i2_printf	;wreg free
 17880                           
 17881                           ;UI.c: 511: lcdInst(0b11000000);;
 17882  0043E6  0EC0               	movlw	192
 17883  0043E8  ECEF  F023         	call	i2_lcdInst
 17884                           
 17885                           ;UI.c: 512: printf("3. LOGS        <");
 17886  0043EC  0ED5               	movlw	low STR_38
 17887  0043EE  6E0D               	movwf	i2printf@f,c
 17888  0043F0  0EFD               	movlw	high STR_38
 17889  0043F2  6E0E               	movwf	i2printf@f+1,c
 17890  0043F4  ECD4  F00A         	call	i2_printf	;wreg free
 17891  0043F8  0012               	return		;funcret
 17892  0043FA                     __end_of_change_state_to_menu_23:
 17893                           	opt stack 0
 17894                           pclatu	equ	0xFFB
 17895                           pclath	equ	0xFFA
 17896                           tblptru	equ	0xFF8
 17897                           tblptrh	equ	0xFF7
 17898                           tblptrl	equ	0xFF6
 17899                           tablat	equ	0xFF5
 17900                           prodh	equ	0xFF4
 17901                           prodl	equ	0xFF3
 17902                           intcon	equ	0xFF2
 17903                           intcon2	equ	0xFF1
 17904                           intcon3	equ	0xFF0
 17905                           indf0	equ	0xFEF
 17906                           postinc0	equ	0xFEE
 17907                           fsr0h	equ	0xFEA
 17908                           fsr0l	equ	0xFE9
 17909                           wreg	equ	0xFE8
 17910                           postdec1	equ	0xFE5
 17911                           fsr1h	equ	0xFE2
 17912                           fsr1l	equ	0xFE1
 17913                           indf2	equ	0xFDF
 17914                           postinc2	equ	0xFDE
 17915                           postdec2	equ	0xFDD
 17916                           fsr2h	equ	0xFDA
 17917                           fsr2l	equ	0xFD9
 17918                           status	equ	0xFD8
 17919                           
 17920 ;; *************** function _change_state_to_menu_11 *****************
 17921 ;; Defined at:
 17922 ;;		line 482 in file "UI.c"
 17923 ;; Parameters:    Size  Location     Type
 17924 ;;		None
 17925 ;; Auto vars:     Size  Location     Type
 17926 ;;		None
 17927 ;; Return value:  Size  Location     Type
 17928 ;;                  1    wreg      void 
 17929 ;; Registers used:
 17930 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17931 ;; Tracked objects:
 17932 ;;		On entry : 0/0
 17933 ;;		On exit  : 0/0
 17934 ;;		Unchanged: 0/0
 17935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17940 ;;Total ram usage:        0 bytes
 17941 ;; Hardware stack levels used:    1
 17942 ;; Hardware stack levels required when called:    3
 17943 ;; This function calls:
 17944 ;;		i2_lcdInst
 17945 ;;		i2_printf
 17946 ;; This function is called by:
 17947 ;;		_updateMenu
 17948 ;;		_inputHandler
 17949 ;; This function uses a non-reentrant model
 17950 ;;
 17951                           
 17952                           	psect	text67
 17953  0043FA                     __ptext67:
 17954                           	opt stack 0
 17955  0043FA                     _change_state_to_menu_11:
 17956                           	opt stack 18
 17957                           
 17958                           ;UI.c: 483: cur_state = 11;
 17959                           
 17960                           ;incstack = 0
 17961  0043FA  0E00               	movlw	0
 17962  0043FC  0100               	movlb	0	; () banked
 17963  0043FE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17964  004400  0E0B               	movlw	11
 17965  004402  6FE0               	movwf	_cur_state& (0+255),b
 17966                           
 17967                           ; BSR set to: 0
 17968                           ;UI.c: 485: lcdInst(0b10000000);;
 17969  004404  0E80               	movlw	128
 17970  004406  ECEF  F023         	call	i2_lcdInst
 17971                           
 17972                           ;UI.c: 486: printf("1. DATE/TIME   <");
 17973  00440A  0EF7               	movlw	low STR_31
 17974  00440C  6E0D               	movwf	i2printf@f,c
 17975  00440E  0EFD               	movlw	high STR_31
 17976  004410  6E0E               	movwf	i2printf@f+1,c
 17977  004412  ECD4  F00A         	call	i2_printf	;wreg free
 17978                           
 17979                           ;UI.c: 487: lcdInst(0b11000000);;
 17980  004416  0EC0               	movlw	192
 17981  004418  ECEF  F023         	call	i2_lcdInst
 17982                           
 17983                           ;UI.c: 488: printf("2. SORT         ");
 17984  00441C  0E3C               	movlw	low STR_32
 17985  00441E  6E0D               	movwf	i2printf@f,c
 17986  004420  0EFD               	movlw	high STR_32
 17987  004422  6E0E               	movwf	i2printf@f+1,c
 17988  004424  ECD4  F00A         	call	i2_printf	;wreg free
 17989  004428  0012               	return		;funcret
 17990  00442A                     __end_of_change_state_to_menu_11:
 17991                           	opt stack 0
 17992                           pclatu	equ	0xFFB
 17993                           pclath	equ	0xFFA
 17994                           tblptru	equ	0xFF8
 17995                           tblptrh	equ	0xFF7
 17996                           tblptrl	equ	0xFF6
 17997                           tablat	equ	0xFF5
 17998                           prodh	equ	0xFF4
 17999                           prodl	equ	0xFF3
 18000                           intcon	equ	0xFF2
 18001                           intcon2	equ	0xFF1
 18002                           intcon3	equ	0xFF0
 18003                           indf0	equ	0xFEF
 18004                           postinc0	equ	0xFEE
 18005                           fsr0h	equ	0xFEA
 18006                           fsr0l	equ	0xFE9
 18007                           wreg	equ	0xFE8
 18008                           postdec1	equ	0xFE5
 18009                           fsr1h	equ	0xFE2
 18010                           fsr1l	equ	0xFE1
 18011                           indf2	equ	0xFDF
 18012                           postinc2	equ	0xFDE
 18013                           postdec2	equ	0xFDD
 18014                           fsr2h	equ	0xFDA
 18015                           fsr2l	equ	0xFD9
 18016                           status	equ	0xFD8
 18017                           
 18018 ;; *************** function _change_state_to_logs_34 *****************
 18019 ;; Defined at:
 18020 ;;		line 549 in file "UI.c"
 18021 ;; Parameters:    Size  Location     Type
 18022 ;;		None
 18023 ;; Auto vars:     Size  Location     Type
 18024 ;;		None
 18025 ;; Return value:  Size  Location     Type
 18026 ;;                  1    wreg      void 
 18027 ;; Registers used:
 18028 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18029 ;; Tracked objects:
 18030 ;;		On entry : 0/0
 18031 ;;		On exit  : 0/0
 18032 ;;		Unchanged: 0/0
 18033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18038 ;;Total ram usage:        0 bytes
 18039 ;; Hardware stack levels used:    1
 18040 ;; Hardware stack levels required when called:    3
 18041 ;; This function calls:
 18042 ;;		i2_lcdInst
 18043 ;;		i2_printf
 18044 ;; This function is called by:
 18045 ;;		_updateMenu
 18046 ;;		_inputHandler
 18047 ;; This function uses a non-reentrant model
 18048 ;;
 18049                           
 18050                           	psect	text68
 18051  00442A                     __ptext68:
 18052                           	opt stack 0
 18053  00442A                     _change_state_to_logs_34:
 18054                           	opt stack 18
 18055                           
 18056                           ;UI.c: 550: cur_state = 1034;
 18057                           
 18058                           ;incstack = 0
 18059  00442A  0E04               	movlw	4
 18060  00442C  0100               	movlb	0	; () banked
 18061  00442E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18062  004430  0E0A               	movlw	10
 18063  004432  6FE0               	movwf	_cur_state& (0+255),b
 18064                           
 18065                           ; BSR set to: 0
 18066                           ;UI.c: 551: lcdInst(0b10000000);;
 18067  004434  0E80               	movlw	128
 18068  004436  ECEF  F023         	call	i2_lcdInst
 18069                           
 18070                           ;UI.c: 552: printf("LOG 3           ");
 18071  00443A  0E09               	movlw	low STR_44
 18072  00443C  6E0D               	movwf	i2printf@f,c
 18073  00443E  0EFD               	movlw	high STR_44
 18074  004440  6E0E               	movwf	i2printf@f+1,c
 18075  004442  ECD4  F00A         	call	i2_printf	;wreg free
 18076                           
 18077                           ;UI.c: 553: lcdInst(0b11000000);;
 18078  004446  0EC0               	movlw	192
 18079  004448  ECEF  F023         	call	i2_lcdInst
 18080                           
 18081                           ;UI.c: 554: printf("LOG 4          <");
 18082  00444C  0EC4               	movlw	low STR_50
 18083  00444E  6E0D               	movwf	i2printf@f,c
 18084  004450  0EFD               	movlw	high STR_50
 18085  004452  6E0E               	movwf	i2printf@f+1,c
 18086  004454  ECD4  F00A         	call	i2_printf	;wreg free
 18087  004458  0012               	return		;funcret
 18088  00445A                     __end_of_change_state_to_logs_34:
 18089                           	opt stack 0
 18090                           pclatu	equ	0xFFB
 18091                           pclath	equ	0xFFA
 18092                           tblptru	equ	0xFF8
 18093                           tblptrh	equ	0xFF7
 18094                           tblptrl	equ	0xFF6
 18095                           tablat	equ	0xFF5
 18096                           prodh	equ	0xFF4
 18097                           prodl	equ	0xFF3
 18098                           intcon	equ	0xFF2
 18099                           intcon2	equ	0xFF1
 18100                           intcon3	equ	0xFF0
 18101                           indf0	equ	0xFEF
 18102                           postinc0	equ	0xFEE
 18103                           fsr0h	equ	0xFEA
 18104                           fsr0l	equ	0xFE9
 18105                           wreg	equ	0xFE8
 18106                           postdec1	equ	0xFE5
 18107                           fsr1h	equ	0xFE2
 18108                           fsr1l	equ	0xFE1
 18109                           indf2	equ	0xFDF
 18110                           postinc2	equ	0xFDE
 18111                           postdec2	equ	0xFDD
 18112                           fsr2h	equ	0xFDA
 18113                           fsr2l	equ	0xFD9
 18114                           status	equ	0xFD8
 18115                           
 18116 ;; *************** function _change_state_to_logs_33 *****************
 18117 ;; Defined at:
 18118 ;;		line 542 in file "UI.c"
 18119 ;; Parameters:    Size  Location     Type
 18120 ;;		None
 18121 ;; Auto vars:     Size  Location     Type
 18122 ;;		None
 18123 ;; Return value:  Size  Location     Type
 18124 ;;                  1    wreg      void 
 18125 ;; Registers used:
 18126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18127 ;; Tracked objects:
 18128 ;;		On entry : 0/0
 18129 ;;		On exit  : 0/0
 18130 ;;		Unchanged: 0/0
 18131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18136 ;;Total ram usage:        0 bytes
 18137 ;; Hardware stack levels used:    1
 18138 ;; Hardware stack levels required when called:    3
 18139 ;; This function calls:
 18140 ;;		i2_lcdInst
 18141 ;;		i2_printf
 18142 ;; This function is called by:
 18143 ;;		_updateMenu
 18144 ;;		_inputHandler
 18145 ;; This function uses a non-reentrant model
 18146 ;;
 18147                           
 18148                           	psect	text69
 18149  00445A                     __ptext69:
 18150                           	opt stack 0
 18151  00445A                     _change_state_to_logs_33:
 18152                           	opt stack 18
 18153                           
 18154                           ;UI.c: 543: cur_state = 1033;
 18155                           
 18156                           ;incstack = 0
 18157  00445A  0E04               	movlw	4
 18158  00445C  0100               	movlb	0	; () banked
 18159  00445E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18160  004460  0E09               	movlw	9
 18161  004462  6FE0               	movwf	_cur_state& (0+255),b
 18162                           
 18163                           ; BSR set to: 0
 18164                           ;UI.c: 544: lcdInst(0b10000000);;
 18165  004464  0E80               	movlw	128
 18166  004466  ECEF  F023         	call	i2_lcdInst
 18167                           
 18168                           ;UI.c: 545: printf("LOG 3          <");
 18169  00446A  0EB3               	movlw	low STR_46
 18170  00446C  6E0D               	movwf	i2printf@f,c
 18171  00446E  0EFD               	movlw	high STR_46
 18172  004470  6E0E               	movwf	i2printf@f+1,c
 18173  004472  ECD4  F00A         	call	i2_printf	;wreg free
 18174                           
 18175                           ;UI.c: 546: lcdInst(0b11000000);;
 18176  004476  0EC0               	movlw	192
 18177  004478  ECEF  F023         	call	i2_lcdInst
 18178                           
 18179                           ;UI.c: 547: printf("LOG 4           ");
 18180  00447C  0E1A               	movlw	low STR_48
 18181  00447E  6E0D               	movwf	i2printf@f,c
 18182  004480  0EFD               	movlw	high STR_48
 18183  004482  6E0E               	movwf	i2printf@f+1,c
 18184  004484  ECD4  F00A         	call	i2_printf	;wreg free
 18185  004488  0012               	return		;funcret
 18186  00448A                     __end_of_change_state_to_logs_33:
 18187                           	opt stack 0
 18188                           pclatu	equ	0xFFB
 18189                           pclath	equ	0xFFA
 18190                           tblptru	equ	0xFF8
 18191                           tblptrh	equ	0xFF7
 18192                           tblptrl	equ	0xFF6
 18193                           tablat	equ	0xFF5
 18194                           prodh	equ	0xFF4
 18195                           prodl	equ	0xFF3
 18196                           intcon	equ	0xFF2
 18197                           intcon2	equ	0xFF1
 18198                           intcon3	equ	0xFF0
 18199                           indf0	equ	0xFEF
 18200                           postinc0	equ	0xFEE
 18201                           fsr0h	equ	0xFEA
 18202                           fsr0l	equ	0xFE9
 18203                           wreg	equ	0xFE8
 18204                           postdec1	equ	0xFE5
 18205                           fsr1h	equ	0xFE2
 18206                           fsr1l	equ	0xFE1
 18207                           indf2	equ	0xFDF
 18208                           postinc2	equ	0xFDE
 18209                           postdec2	equ	0xFDD
 18210                           fsr2h	equ	0xFDA
 18211                           fsr2l	equ	0xFD9
 18212                           status	equ	0xFD8
 18213                           
 18214 ;; *************** function _change_state_to_logs_23 *****************
 18215 ;; Defined at:
 18216 ;;		line 535 in file "UI.c"
 18217 ;; Parameters:    Size  Location     Type
 18218 ;;		None
 18219 ;; Auto vars:     Size  Location     Type
 18220 ;;		None
 18221 ;; Return value:  Size  Location     Type
 18222 ;;                  1    wreg      void 
 18223 ;; Registers used:
 18224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18225 ;; Tracked objects:
 18226 ;;		On entry : 0/0
 18227 ;;		On exit  : 0/0
 18228 ;;		Unchanged: 0/0
 18229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18234 ;;Total ram usage:        0 bytes
 18235 ;; Hardware stack levels used:    1
 18236 ;; Hardware stack levels required when called:    3
 18237 ;; This function calls:
 18238 ;;		i2_lcdInst
 18239 ;;		i2_printf
 18240 ;; This function is called by:
 18241 ;;		_updateMenu
 18242 ;;		_inputHandler
 18243 ;; This function uses a non-reentrant model
 18244 ;;
 18245                           
 18246                           	psect	text70
 18247  004576                     __ptext70:
 18248                           	opt stack 0
 18249  004576                     _change_state_to_logs_23:
 18250                           	opt stack 18
 18251                           
 18252                           ;UI.c: 536: cur_state = 1023;
 18253                           
 18254                           ;incstack = 0
 18255  004576  0E03               	movlw	3
 18256  004578  0100               	movlb	0	; () banked
 18257  00457A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18258  00457C  69E0               	setf	_cur_state& (0+255),b
 18259                           
 18260                           ; BSR set to: 0
 18261                           ;UI.c: 537: lcdInst(0b10000000);;
 18262  00457E  0E80               	movlw	128
 18263  004580  ECEF  F023         	call	i2_lcdInst
 18264                           
 18265                           ;UI.c: 538: printf("LOG 2           ");
 18266  004584  0EF8               	movlw	low STR_40
 18267  004586  6E0D               	movwf	i2printf@f,c
 18268  004588  0EFC               	movlw	high STR_40
 18269  00458A  6E0E               	movwf	i2printf@f+1,c
 18270  00458C  ECD4  F00A         	call	i2_printf	;wreg free
 18271                           
 18272                           ;UI.c: 539: lcdInst(0b11000000);;
 18273  004590  0EC0               	movlw	192
 18274  004592  ECEF  F023         	call	i2_lcdInst
 18275                           
 18276                           ;UI.c: 540: printf("LOG 3          <");
 18277  004596  0EB3               	movlw	low STR_46
 18278  004598  6E0D               	movwf	i2printf@f,c
 18279  00459A  0EFD               	movlw	high STR_46
 18280  00459C  6E0E               	movwf	i2printf@f+1,c
 18281  00459E  ECD4  F00A         	call	i2_printf	;wreg free
 18282  0045A2  0012               	return		;funcret
 18283  0045A4                     __end_of_change_state_to_logs_23:
 18284                           	opt stack 0
 18285                           pclatu	equ	0xFFB
 18286                           pclath	equ	0xFFA
 18287                           tblptru	equ	0xFF8
 18288                           tblptrh	equ	0xFF7
 18289                           tblptrl	equ	0xFF6
 18290                           tablat	equ	0xFF5
 18291                           prodh	equ	0xFF4
 18292                           prodl	equ	0xFF3
 18293                           intcon	equ	0xFF2
 18294                           intcon2	equ	0xFF1
 18295                           intcon3	equ	0xFF0
 18296                           indf0	equ	0xFEF
 18297                           postinc0	equ	0xFEE
 18298                           fsr0h	equ	0xFEA
 18299                           fsr0l	equ	0xFE9
 18300                           wreg	equ	0xFE8
 18301                           postdec1	equ	0xFE5
 18302                           fsr1h	equ	0xFE2
 18303                           fsr1l	equ	0xFE1
 18304                           indf2	equ	0xFDF
 18305                           postinc2	equ	0xFDE
 18306                           postdec2	equ	0xFDD
 18307                           fsr2h	equ	0xFDA
 18308                           fsr2l	equ	0xFD9
 18309                           status	equ	0xFD8
 18310                           
 18311 ;; *************** function _change_state_to_logs_22 *****************
 18312 ;; Defined at:
 18313 ;;		line 528 in file "UI.c"
 18314 ;; Parameters:    Size  Location     Type
 18315 ;;		None
 18316 ;; Auto vars:     Size  Location     Type
 18317 ;;		None
 18318 ;; Return value:  Size  Location     Type
 18319 ;;                  1    wreg      void 
 18320 ;; Registers used:
 18321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18322 ;; Tracked objects:
 18323 ;;		On entry : 0/0
 18324 ;;		On exit  : 0/0
 18325 ;;		Unchanged: 0/0
 18326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18331 ;;Total ram usage:        0 bytes
 18332 ;; Hardware stack levels used:    1
 18333 ;; Hardware stack levels required when called:    3
 18334 ;; This function calls:
 18335 ;;		i2_lcdInst
 18336 ;;		i2_printf
 18337 ;; This function is called by:
 18338 ;;		_updateMenu
 18339 ;;		_inputHandler
 18340 ;; This function uses a non-reentrant model
 18341 ;;
 18342                           
 18343                           	psect	text71
 18344  00448A                     __ptext71:
 18345                           	opt stack 0
 18346  00448A                     _change_state_to_logs_22:
 18347                           	opt stack 18
 18348                           
 18349                           ;UI.c: 529: cur_state = 1022;
 18350                           
 18351                           ;incstack = 0
 18352  00448A  0E03               	movlw	3
 18353  00448C  0100               	movlb	0	; () banked
 18354  00448E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18355  004490  0EFE               	movlw	254
 18356  004492  6FE0               	movwf	_cur_state& (0+255),b
 18357                           
 18358                           ; BSR set to: 0
 18359                           ;UI.c: 530: lcdInst(0b10000000);;
 18360  004494  0E80               	movlw	128
 18361  004496  ECEF  F023         	call	i2_lcdInst
 18362                           
 18363                           ;UI.c: 531: printf("LOG 2          <");
 18364  00449A  0EA2               	movlw	low STR_42
 18365  00449C  6E0D               	movwf	i2printf@f,c
 18366  00449E  0EFD               	movlw	high STR_42
 18367  0044A0  6E0E               	movwf	i2printf@f+1,c
 18368  0044A2  ECD4  F00A         	call	i2_printf	;wreg free
 18369                           
 18370                           ;UI.c: 532: lcdInst(0b11000000);;
 18371  0044A6  0EC0               	movlw	192
 18372  0044A8  ECEF  F023         	call	i2_lcdInst
 18373                           
 18374                           ;UI.c: 533: printf("LOG 3           ");
 18375  0044AC  0E09               	movlw	low STR_44
 18376  0044AE  6E0D               	movwf	i2printf@f,c
 18377  0044B0  0EFD               	movlw	high STR_44
 18378  0044B2  6E0E               	movwf	i2printf@f+1,c
 18379  0044B4  ECD4  F00A         	call	i2_printf	;wreg free
 18380  0044B8  0012               	return		;funcret
 18381  0044BA                     __end_of_change_state_to_logs_22:
 18382                           	opt stack 0
 18383                           pclatu	equ	0xFFB
 18384                           pclath	equ	0xFFA
 18385                           tblptru	equ	0xFF8
 18386                           tblptrh	equ	0xFF7
 18387                           tblptrl	equ	0xFF6
 18388                           tablat	equ	0xFF5
 18389                           prodh	equ	0xFF4
 18390                           prodl	equ	0xFF3
 18391                           intcon	equ	0xFF2
 18392                           intcon2	equ	0xFF1
 18393                           intcon3	equ	0xFF0
 18394                           indf0	equ	0xFEF
 18395                           postinc0	equ	0xFEE
 18396                           fsr0h	equ	0xFEA
 18397                           fsr0l	equ	0xFE9
 18398                           wreg	equ	0xFE8
 18399                           postdec1	equ	0xFE5
 18400                           fsr1h	equ	0xFE2
 18401                           fsr1l	equ	0xFE1
 18402                           indf2	equ	0xFDF
 18403                           postinc2	equ	0xFDE
 18404                           postdec2	equ	0xFDD
 18405                           fsr2h	equ	0xFDA
 18406                           fsr2l	equ	0xFD9
 18407                           status	equ	0xFD8
 18408                           
 18409 ;; *************** function _change_state_to_logs_12 *****************
 18410 ;; Defined at:
 18411 ;;		line 521 in file "UI.c"
 18412 ;; Parameters:    Size  Location     Type
 18413 ;;		None
 18414 ;; Auto vars:     Size  Location     Type
 18415 ;;		None
 18416 ;; Return value:  Size  Location     Type
 18417 ;;                  1    wreg      void 
 18418 ;; Registers used:
 18419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18420 ;; Tracked objects:
 18421 ;;		On entry : 0/0
 18422 ;;		On exit  : 0/0
 18423 ;;		Unchanged: 0/0
 18424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18429 ;;Total ram usage:        0 bytes
 18430 ;; Hardware stack levels used:    1
 18431 ;; Hardware stack levels required when called:    3
 18432 ;; This function calls:
 18433 ;;		i2_lcdInst
 18434 ;;		i2_printf
 18435 ;; This function is called by:
 18436 ;;		_updateMenu
 18437 ;;		_inputHandler
 18438 ;; This function uses a non-reentrant model
 18439 ;;
 18440                           
 18441                           	psect	text72
 18442  0044BA                     __ptext72:
 18443                           	opt stack 0
 18444  0044BA                     _change_state_to_logs_12:
 18445                           	opt stack 18
 18446                           
 18447                           ;UI.c: 522: cur_state = 1012;
 18448                           
 18449                           ;incstack = 0
 18450  0044BA  0E03               	movlw	3
 18451  0044BC  0100               	movlb	0	; () banked
 18452  0044BE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18453  0044C0  0EF4               	movlw	244
 18454  0044C2  6FE0               	movwf	_cur_state& (0+255),b
 18455                           
 18456                           ; BSR set to: 0
 18457                           ;UI.c: 523: lcdInst(0b10000000);;
 18458  0044C4  0E80               	movlw	128
 18459  0044C6  ECEF  F023         	call	i2_lcdInst
 18460                           
 18461                           ;UI.c: 524: printf("LOG 1           ");
 18462  0044CA  0EE7               	movlw	low STR_41
 18463  0044CC  6E0D               	movwf	i2printf@f,c
 18464  0044CE  0EFC               	movlw	high STR_41
 18465  0044D0  6E0E               	movwf	i2printf@f+1,c
 18466  0044D2  ECD4  F00A         	call	i2_printf	;wreg free
 18467                           
 18468                           ;UI.c: 525: lcdInst(0b11000000);;
 18469  0044D6  0EC0               	movlw	192
 18470  0044D8  ECEF  F023         	call	i2_lcdInst
 18471                           
 18472                           ;UI.c: 526: printf("LOG 2          <");
 18473  0044DC  0EA2               	movlw	low STR_42
 18474  0044DE  6E0D               	movwf	i2printf@f,c
 18475  0044E0  0EFD               	movlw	high STR_42
 18476  0044E2  6E0E               	movwf	i2printf@f+1,c
 18477  0044E4  ECD4  F00A         	call	i2_printf	;wreg free
 18478  0044E8  0012               	return		;funcret
 18479  0044EA                     __end_of_change_state_to_logs_12:
 18480                           	opt stack 0
 18481                           pclatu	equ	0xFFB
 18482                           pclath	equ	0xFFA
 18483                           tblptru	equ	0xFF8
 18484                           tblptrh	equ	0xFF7
 18485                           tblptrl	equ	0xFF6
 18486                           tablat	equ	0xFF5
 18487                           prodh	equ	0xFF4
 18488                           prodl	equ	0xFF3
 18489                           intcon	equ	0xFF2
 18490                           intcon2	equ	0xFF1
 18491                           intcon3	equ	0xFF0
 18492                           indf0	equ	0xFEF
 18493                           postinc0	equ	0xFEE
 18494                           fsr0h	equ	0xFEA
 18495                           fsr0l	equ	0xFE9
 18496                           wreg	equ	0xFE8
 18497                           postdec1	equ	0xFE5
 18498                           fsr1h	equ	0xFE2
 18499                           fsr1l	equ	0xFE1
 18500                           indf2	equ	0xFDF
 18501                           postinc2	equ	0xFDE
 18502                           postdec2	equ	0xFDD
 18503                           fsr2h	equ	0xFDA
 18504                           fsr2l	equ	0xFD9
 18505                           status	equ	0xFD8
 18506                           
 18507 ;; *************** function _change_state_to_logs_11 *****************
 18508 ;; Defined at:
 18509 ;;		line 514 in file "UI.c"
 18510 ;; Parameters:    Size  Location     Type
 18511 ;;		None
 18512 ;; Auto vars:     Size  Location     Type
 18513 ;;		None
 18514 ;; Return value:  Size  Location     Type
 18515 ;;                  1    wreg      void 
 18516 ;; Registers used:
 18517 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18518 ;; Tracked objects:
 18519 ;;		On entry : 0/0
 18520 ;;		On exit  : 0/0
 18521 ;;		Unchanged: 0/0
 18522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18527 ;;Total ram usage:        0 bytes
 18528 ;; Hardware stack levels used:    1
 18529 ;; Hardware stack levels required when called:    3
 18530 ;; This function calls:
 18531 ;;		i2_lcdInst
 18532 ;;		i2_printf
 18533 ;; This function is called by:
 18534 ;;		_updateMenu
 18535 ;;		_inputHandler
 18536 ;; This function uses a non-reentrant model
 18537 ;;
 18538                           
 18539                           	psect	text73
 18540  0044EA                     __ptext73:
 18541                           	opt stack 0
 18542  0044EA                     _change_state_to_logs_11:
 18543                           	opt stack 18
 18544                           
 18545                           ;UI.c: 515: cur_state = 1011;
 18546                           
 18547                           ;incstack = 0
 18548  0044EA  0E03               	movlw	3
 18549  0044EC  0100               	movlb	0	; () banked
 18550  0044EE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18551  0044F0  0EF3               	movlw	243
 18552  0044F2  6FE0               	movwf	_cur_state& (0+255),b
 18553                           
 18554                           ; BSR set to: 0
 18555                           ;UI.c: 516: lcdInst(0b10000000);;
 18556  0044F4  0E80               	movlw	128
 18557  0044F6  ECEF  F023         	call	i2_lcdInst
 18558                           
 18559                           ;UI.c: 517: printf("LOG 1          <");
 18560  0044FA  0E91               	movlw	low STR_39
 18561  0044FC  6E0D               	movwf	i2printf@f,c
 18562  0044FE  0EFD               	movlw	high STR_39
 18563  004500  6E0E               	movwf	i2printf@f+1,c
 18564  004502  ECD4  F00A         	call	i2_printf	;wreg free
 18565                           
 18566                           ;UI.c: 518: lcdInst(0b11000000);;
 18567  004506  0EC0               	movlw	192
 18568  004508  ECEF  F023         	call	i2_lcdInst
 18569                           
 18570                           ;UI.c: 519: printf("LOG 2           ");
 18571  00450C  0EF8               	movlw	low STR_40
 18572  00450E  6E0D               	movwf	i2printf@f,c
 18573  004510  0EFC               	movlw	high STR_40
 18574  004512  6E0E               	movwf	i2printf@f+1,c
 18575  004514  ECD4  F00A         	call	i2_printf	;wreg free
 18576  004518  0012               	return		;funcret
 18577  00451A                     __end_of_change_state_to_logs_11:
 18578                           	opt stack 0
 18579                           pclatu	equ	0xFFB
 18580                           pclath	equ	0xFFA
 18581                           tblptru	equ	0xFF8
 18582                           tblptrh	equ	0xFF7
 18583                           tblptrl	equ	0xFF6
 18584                           tablat	equ	0xFF5
 18585                           prodh	equ	0xFF4
 18586                           prodl	equ	0xFF3
 18587                           intcon	equ	0xFF2
 18588                           intcon2	equ	0xFF1
 18589                           intcon3	equ	0xFF0
 18590                           indf0	equ	0xFEF
 18591                           postinc0	equ	0xFEE
 18592                           fsr0h	equ	0xFEA
 18593                           fsr0l	equ	0xFE9
 18594                           wreg	equ	0xFE8
 18595                           postdec1	equ	0xFE5
 18596                           fsr1h	equ	0xFE2
 18597                           fsr1l	equ	0xFE1
 18598                           indf2	equ	0xFDF
 18599                           postinc2	equ	0xFDE
 18600                           postdec2	equ	0xFDD
 18601                           fsr2h	equ	0xFDA
 18602                           fsr2l	equ	0xFD9
 18603                           status	equ	0xFD8
 18604                           
 18605 ;; *************** function _dispLogs *****************
 18606 ;; Defined at:
 18607 ;;		line 467 in file "UI.c"
 18608 ;; Parameters:    Size  Location     Type
 18609 ;;  myLog           2   17[COMRAM] int 
 18610 ;; Auto vars:     Size  Location     Type
 18611 ;;		None
 18612 ;; Return value:  Size  Location     Type
 18613 ;;                  1    wreg      void 
 18614 ;; Registers used:
 18615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18616 ;; Tracked objects:
 18617 ;;		On entry : 0/0
 18618 ;;		On exit  : 0/0
 18619 ;;		Unchanged: 0/0
 18620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18625 ;;Total ram usage:        2 bytes
 18626 ;; Hardware stack levels used:    1
 18627 ;; Hardware stack levels required when called:    2
 18628 ;; This function calls:
 18629 ;;		_retrieveLog
 18630 ;; This function is called by:
 18631 ;;		_updateMenu
 18632 ;; This function uses a non-reentrant model
 18633 ;;
 18634                           
 18635                           	psect	text74
 18636  0046C2                     __ptext74:
 18637                           	opt stack 0
 18638  0046C2                     _dispLogs:
 18639                           	opt stack 20
 18640                           
 18641                           ;UI.c: 468: logstate = 1;
 18642                           
 18643                           ;incstack = 0
 18644  0046C2  0E00               	movlw	0
 18645  0046C4  0100               	movlb	0	; () banked
 18646  0046C6  6FF7               	movwf	(_logstate+1)& (0+255),b
 18647  0046C8  0E01               	movlw	1
 18648  0046CA  6FF6               	movwf	_logstate& (0+255),b
 18649                           
 18650                           ; BSR set to: 0
 18651                           ;UI.c: 469: log = myLog;
 18652  0046CC  C012  F0E6         	movff	dispLogs@myLog,_log
 18653  0046D0  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18654                           
 18655                           ; BSR set to: 0
 18656                           ;UI.c: 470: retrieveLog(myLog - 1);
 18657  0046D4  0EFF               	movlw	255
 18658  0046D6  2412               	addwf	dispLogs@myLog,w,c
 18659  0046D8  6E07               	movwf	retrieveLog@logNum,c
 18660  0046DA  0EFF               	movlw	255
 18661  0046DC  2013               	addwfc	dispLogs@myLog+1,w,c
 18662  0046DE  6E08               	movwf	retrieveLog@logNum+1,c
 18663  0046E0  ECD6  F018         	call	_retrieveLog	;wreg free
 18664  0046E4  0012               	return		;funcret
 18665  0046E6                     __end_of_dispLogs:
 18666                           	opt stack 0
 18667                           pclatu	equ	0xFFB
 18668                           pclath	equ	0xFFA
 18669                           tblptru	equ	0xFF8
 18670                           tblptrh	equ	0xFF7
 18671                           tblptrl	equ	0xFF6
 18672                           tablat	equ	0xFF5
 18673                           prodh	equ	0xFF4
 18674                           prodl	equ	0xFF3
 18675                           intcon	equ	0xFF2
 18676                           intcon2	equ	0xFF1
 18677                           intcon3	equ	0xFF0
 18678                           indf0	equ	0xFEF
 18679                           postinc0	equ	0xFEE
 18680                           fsr0h	equ	0xFEA
 18681                           fsr0l	equ	0xFE9
 18682                           wreg	equ	0xFE8
 18683                           postdec1	equ	0xFE5
 18684                           fsr1h	equ	0xFE2
 18685                           fsr1l	equ	0xFE1
 18686                           indf2	equ	0xFDF
 18687                           postinc2	equ	0xFDE
 18688                           postdec2	equ	0xFDD
 18689                           fsr2h	equ	0xFDA
 18690                           fsr2l	equ	0xFD9
 18691                           status	equ	0xFD8
 18692                           
 18693 ;; *************** function _retrieveLog *****************
 18694 ;; Defined at:
 18695 ;;		line 134 in file "EEPROM.c"
 18696 ;; Parameters:    Size  Location     Type
 18697 ;;  logNum          2    6[COMRAM] int 
 18698 ;; Auto vars:     Size  Location     Type
 18699 ;;  i               2   13[COMRAM] int 
 18700 ;;  addr            2   15[COMRAM] unsigned short 
 18701 ;;  byte3           1   12[COMRAM] unsigned char 
 18702 ;;  byte2           1   11[COMRAM] unsigned char 
 18703 ;;  byte1           1   10[COMRAM] unsigned char 
 18704 ;; Return value:  Size  Location     Type
 18705 ;;                  1    wreg      void 
 18706 ;; Registers used:
 18707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18708 ;; Tracked objects:
 18709 ;;		On entry : 0/0
 18710 ;;		On exit  : 0/0
 18711 ;;		Unchanged: 0/0
 18712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18714 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18715 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18716 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18717 ;;Total ram usage:       11 bytes
 18718 ;; Hardware stack levels used:    1
 18719 ;; Hardware stack levels required when called:    1
 18720 ;; This function calls:
 18721 ;;		i2_EEPROM_read
 18722 ;;		i2___wmul
 18723 ;; This function is called by:
 18724 ;;		_dispLogs
 18725 ;; This function uses a non-reentrant model
 18726 ;;
 18727                           
 18728                           	psect	text75
 18729  0031AC                     __ptext75:
 18730                           	opt stack 0
 18731  0031AC                     _retrieveLog:
 18732                           	opt stack 20
 18733                           
 18734                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18735                           
 18736                           ;incstack = 0
 18737  0031AC  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18738  0031B0  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18739  0031B4  0E00               	movlw	0
 18740  0031B6  6E04               	movwf	i2___wmul@multiplicand+1,c
 18741  0031B8  0E0B               	movlw	11
 18742  0031BA  6E03               	movwf	i2___wmul@multiplicand,c
 18743  0031BC  EC3B  F023         	call	i2___wmul	;wreg free
 18744  0031C0  0E01               	movlw	1
 18745  0031C2  2401               	addwf	?i2___wmul,w,c
 18746  0031C4  6E10               	movwf	retrieveLog@addr,c
 18747  0031C6  0E00               	movlw	0
 18748  0031C8  2002               	addwfc	?i2___wmul+1,w,c
 18749  0031CA  6E11               	movwf	retrieveLog@addr+1,c
 18750                           
 18751                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18752  0031CC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18753  0031D0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18754  0031D4  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18755  0031D8  6E0B               	movwf	retrieveLog@byte1,c
 18756                           
 18757                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18758  0031DA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18759  0031DE  0E80               	movlw	128
 18760  0031E0  1609               	andwf	??_retrieveLog,f,c
 18761  0031E2  5009               	movf	??_retrieveLog,w,c
 18762  0031E4  0100               	movlb	0	; () banked
 18763  0031E6  6FE8               	movwf	_log_completion& (0+255),b
 18764  0031E8  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18765                           
 18766                           ; BSR set to: 0
 18767                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18768  0031EA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18769  0031EE  0E0F               	movlw	15
 18770  0031F0  1609               	andwf	??_retrieveLog,f,c
 18771  0031F2  5009               	movf	??_retrieveLog,w,c
 18772  0031F4  0100               	movlb	0	; () banked
 18773  0031F6  6FF2               	movwf	_log_count_total& (0+255),b
 18774  0031F8  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;EEPROM.c: 146: addr++;
 18778  0031FA  4A10               	infsnz	retrieveLog@addr,f,c
 18779  0031FC  2A11               	incf	retrieveLog@addr+1,f,c
 18780                           
 18781                           ; BSR set to: 0
 18782                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18783  0031FE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18784  003202  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18785  003206  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18786  00320A  6E0C               	movwf	retrieveLog@byte2,c
 18787                           
 18788                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18789  00320C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18790  003210  0EF0               	movlw	240
 18791  003212  1609               	andwf	??_retrieveLog,f,c
 18792  003214  5009               	movf	??_retrieveLog,w,c
 18793  003216  0100               	movlb	0	; () banked
 18794  003218  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18795  00321A  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18796                           
 18797                           ; BSR set to: 0
 18798                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18799  00321C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18800  003220  0E0F               	movlw	15
 18801  003222  1609               	andwf	??_retrieveLog,f,c
 18802  003224  5009               	movf	??_retrieveLog,w,c
 18803  003226  0100               	movlb	0	; () banked
 18804  003228  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18805  00322A  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18806                           
 18807                           ; BSR set to: 0
 18808                           ;EEPROM.c: 152: addr++;
 18809  00322C  4A10               	infsnz	retrieveLog@addr,f,c
 18810  00322E  2A11               	incf	retrieveLog@addr+1,f,c
 18811                           
 18812                           ; BSR set to: 0
 18813                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18814  003230  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18815  003234  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18816  003238  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18817  00323C  6E0D               	movwf	retrieveLog@byte3,c
 18818                           
 18819                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18820  00323E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18821  003242  0EF0               	movlw	240
 18822  003244  1609               	andwf	??_retrieveLog,f,c
 18823  003246  5009               	movf	??_retrieveLog,w,c
 18824  003248  0100               	movlb	0	; () banked
 18825  00324A  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18826  00324C  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18827                           
 18828                           ; BSR set to: 0
 18829                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18830  00324E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18831  003252  0E0F               	movlw	15
 18832  003254  1609               	andwf	??_retrieveLog,f,c
 18833  003256  5009               	movf	??_retrieveLog,w,c
 18834  003258  0100               	movlb	0	; () banked
 18835  00325A  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18836  00325C  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18837                           
 18838                           ; BSR set to: 0
 18839                           ;EEPROM.c: 156: addr++;
 18840  00325E  4A10               	infsnz	retrieveLog@addr,f,c
 18841  003260  2A11               	incf	retrieveLog@addr+1,f,c
 18842                           
 18843                           ; BSR set to: 0
 18844                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18845  003262  0E00               	movlw	0
 18846  003264  6E0F               	movwf	retrieveLog@i+1,c
 18847  003266  0E00               	movlw	0
 18848  003268  6E0E               	movwf	retrieveLog@i,c
 18849  00326A                     i2l5965:
 18850                           
 18851                           ; BSR set to: 0
 18852  00326A  BE0F               	btfsc	retrieveLog@i+1,7,c
 18853  00326C  D006               	goto	i2l5969
 18854  00326E  500F               	movf	retrieveLog@i+1,w,c
 18855  003270  E11E               	bnz	i2l5977
 18856  003272  0E07               	movlw	7
 18857  003274  5C0E               	subwf	retrieveLog@i,w,c
 18858  003276  B0D8               	btfsc	status,0,c
 18859  003278  D01A               	goto	i2l5977
 18860  00327A                     i2l5969:
 18861                           
 18862                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18863  00327A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18864  00327E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18865  003282  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18866  003286  6E09               	movwf	??_retrieveLog& (0+255),c
 18867  003288  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18868  00328A  90D8               	bcf	status,0,c
 18869  00328C  340E               	rlcf	retrieveLog@i,w,c
 18870  00328E  6ED9               	movwf	fsr2l,c
 18871  003290  340F               	rlcf	retrieveLog@i+1,w,c
 18872  003292  6EDA               	movwf	fsr2h,c
 18873  003294  0E00               	movlw	low _log_startTime
 18874  003296  26D9               	addwf	fsr2l,f,c
 18875  003298  0E01               	movlw	high _log_startTime
 18876  00329A  22DA               	addwfc	fsr2h,f,c
 18877  00329C  C009  FFDE         	movff	??_retrieveLog,postinc2
 18878  0032A0  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18879                           
 18880                           ;EEPROM.c: 161: addr++;
 18881  0032A4  4A10               	infsnz	retrieveLog@addr,f,c
 18882  0032A6  2A11               	incf	retrieveLog@addr+1,f,c
 18883  0032A8  4A0E               	infsnz	retrieveLog@i,f,c
 18884  0032AA  2A0F               	incf	retrieveLog@i+1,f,c
 18885  0032AC  D7DE               	goto	i2l5965
 18886  0032AE                     i2l5977:
 18887                           
 18888                           ;EEPROM.c: 162: }
 18889                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18890  0032AE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18891  0032B2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18892  0032B6  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18893  0032BA  6E09               	movwf	??_retrieveLog& (0+255),c
 18894  0032BC  5009               	movf	??_retrieveLog,w,c
 18895  0032BE  0100               	movlb	0	; () banked
 18896  0032C0  6FF4               	movwf	_log_total_time& (0+255),b
 18897  0032C2  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18898                           
 18899                           ; BSR set to: 0
 18900  0032C4  0012               	return		;funcret
 18901  0032C6                     __end_of_retrieveLog:
 18902                           	opt stack 0
 18903                           pclatu	equ	0xFFB
 18904                           pclath	equ	0xFFA
 18905                           tblptru	equ	0xFF8
 18906                           tblptrh	equ	0xFF7
 18907                           tblptrl	equ	0xFF6
 18908                           tablat	equ	0xFF5
 18909                           prodh	equ	0xFF4
 18910                           prodl	equ	0xFF3
 18911                           intcon	equ	0xFF2
 18912                           intcon2	equ	0xFF1
 18913                           intcon3	equ	0xFF0
 18914                           indf0	equ	0xFEF
 18915                           postinc0	equ	0xFEE
 18916                           fsr0h	equ	0xFEA
 18917                           fsr0l	equ	0xFE9
 18918                           wreg	equ	0xFE8
 18919                           postdec1	equ	0xFE5
 18920                           fsr1h	equ	0xFE2
 18921                           fsr1l	equ	0xFE1
 18922                           indf2	equ	0xFDF
 18923                           postinc2	equ	0xFDE
 18924                           postdec2	equ	0xFDD
 18925                           fsr2h	equ	0xFDA
 18926                           fsr2l	equ	0xFD9
 18927                           status	equ	0xFD8
 18928                           
 18929 ;; *************** function i2_EEPROM_read *****************
 18930 ;; Defined at:
 18931 ;;		line 68 in file "EEPROM.c"
 18932 ;; Parameters:    Size  Location     Type
 18933 ;;  address         2    0[COMRAM] unsigned short 
 18934 ;; Auto vars:     Size  Location     Type
 18935 ;;		None
 18936 ;; Return value:  Size  Location     Type
 18937 ;;                  1    wreg      unsigned char 
 18938 ;; Registers used:
 18939 ;;		wreg, status,2
 18940 ;; Tracked objects:
 18941 ;;		On entry : 0/0
 18942 ;;		On exit  : 0/0
 18943 ;;		Unchanged: 0/0
 18944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18945 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18948 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18949 ;;Total ram usage:        2 bytes
 18950 ;; Hardware stack levels used:    1
 18951 ;; This function calls:
 18952 ;;		Nothing
 18953 ;; This function is called by:
 18954 ;;		_retrieveLog
 18955 ;; This function uses a non-reentrant model
 18956 ;;
 18957                           
 18958                           	psect	text76
 18959  004776                     __ptext76:
 18960                           	opt stack 0
 18961  004776                     i2_EEPROM_read:
 18962                           	opt stack 20
 18963                           
 18964                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18965                           
 18966                           ; BSR set to: 0
 18967                           ;incstack = 0
 18968  004776  5002               	movf	i2EEPROM_read@address+1,w,c
 18969  004778  6EAA               	movwf	4010,c	;volatile
 18970                           
 18971                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18972  00477A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18973                           
 18974                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18975  00477E  9EA6               	bcf	4006,7,c	;volatile
 18976                           
 18977                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18978  004780  9CA6               	bcf	4006,6,c	;volatile
 18979                           
 18980                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18981  004782  80A6               	bsf	4006,0,c	;volatile
 18982  004784                     i2l943:
 18983  004784  B0A6               	btfsc	4006,0,c	;volatile
 18984  004786  D7FE               	goto	i2l943
 18985                           
 18986                           ;EEPROM.c: 81: return EEDATA;
 18987  004788  50A8               	movf	4008,w,c	;volatile
 18988  00478A  0012               	return	
 18989  00478C                     __end_ofi2_EEPROM_read:
 18990                           	opt stack 0
 18991                           pclatu	equ	0xFFB
 18992                           pclath	equ	0xFFA
 18993                           tblptru	equ	0xFF8
 18994                           tblptrh	equ	0xFF7
 18995                           tblptrl	equ	0xFF6
 18996                           tablat	equ	0xFF5
 18997                           prodh	equ	0xFF4
 18998                           prodl	equ	0xFF3
 18999                           intcon	equ	0xFF2
 19000                           intcon2	equ	0xFF1
 19001                           intcon3	equ	0xFF0
 19002                           indf0	equ	0xFEF
 19003                           postinc0	equ	0xFEE
 19004                           fsr0h	equ	0xFEA
 19005                           fsr0l	equ	0xFE9
 19006                           wreg	equ	0xFE8
 19007                           postdec1	equ	0xFE5
 19008                           fsr1h	equ	0xFE2
 19009                           fsr1l	equ	0xFE1
 19010                           indf2	equ	0xFDF
 19011                           postinc2	equ	0xFDE
 19012                           postdec2	equ	0xFDD
 19013                           fsr2h	equ	0xFDA
 19014                           fsr2l	equ	0xFD9
 19015                           status	equ	0xFD8
 19016                           
 19017 ;; *************** function _printSortTimer *****************
 19018 ;; Defined at:
 19019 ;;		line 283 in file "sort.c"
 19020 ;; Parameters:    Size  Location     Type
 19021 ;;		None
 19022 ;; Auto vars:     Size  Location     Type
 19023 ;;  i               2   72[COMRAM] int 
 19024 ;;  curTime        14   46[COMRAM] int [7]
 19025 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19026 ;;  sec             2   66[COMRAM] int 
 19027 ;;  min             2   64[COMRAM] int 
 19028 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19029 ;;  start_sec       2   60[COMRAM] unsigned int 
 19030 ;;  hour            2   44[COMRAM] int 
 19031 ;; Return value:  Size  Location     Type
 19032 ;;                  1    wreg      void 
 19033 ;; Registers used:
 19034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19035 ;; Tracked objects:
 19036 ;;		On entry : 0/0
 19037 ;;		On exit  : 0/0
 19038 ;;		Unchanged: 0/0
 19039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19041 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19042 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19043 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19044 ;;Total ram usage:       33 bytes
 19045 ;; Hardware stack levels used:    1
 19046 ;; Hardware stack levels required when called:    3
 19047 ;; This function calls:
 19048 ;;		i2___lwdiv
 19049 ;;		i2___lwmod
 19050 ;;		i2___wmul
 19051 ;;		i2_getRTC
 19052 ;;		i2_lcdInst
 19053 ;;		i2_printf
 19054 ;; This function is called by:
 19055 ;;		_handler
 19056 ;; This function uses a non-reentrant model
 19057 ;;
 19058                           
 19059                           	psect	text77
 19060  0026E8                     __ptext77:
 19061                           	opt stack 0
 19062  0026E8                     _printSortTimer:
 19063                           	opt stack 20
 19064                           
 19065                           ;sort.c: 284: getRTC();
 19066                           
 19067                           ;incstack = 0
 19068  0026E8  EC58  F01E         	call	i2_getRTC	;wreg free
 19069                           
 19070                           ;sort.c: 285: int curTime[7];
 19071                           ;sort.c: 286: for(int i = 0; i < 7; i++){
 19072  0026EC  0E00               	movlw	0
 19073  0026EE  6E4A               	movwf	printSortTimer@i+1,c
 19074  0026F0  0E00               	movlw	0
 19075  0026F2  6E49               	movwf	printSortTimer@i,c
 19076  0026F4                     i2l8035:
 19077  0026F4  BE4A               	btfsc	printSortTimer@i+1,7,c
 19078  0026F6  D006               	goto	i2l8039
 19079  0026F8  504A               	movf	printSortTimer@i+1,w,c
 19080  0026FA  E131               	bnz	i2l8045
 19081  0026FC  0E07               	movlw	7
 19082  0026FE  5C49               	subwf	printSortTimer@i,w,c
 19083  002700  B0D8               	btfsc	status,0,c
 19084  002702  D02D               	goto	i2l8045
 19085  002704                     i2l8039:
 19086                           
 19087                           ;sort.c: 287: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19088  002704  0E24               	movlw	low _time
 19089  002706  2449               	addwf	printSortTimer@i,w,c
 19090  002708  6ED9               	movwf	fsr2l,c
 19091  00270A  0E01               	movlw	high _time
 19092  00270C  204A               	addwfc	printSortTimer@i+1,w,c
 19093  00270E  6EDA               	movwf	fsr2h,c
 19094  002710  50DF               	movf	indf2,w,c
 19095  002712  6E2A               	movwf	??_printSortTimer& (0+255),c
 19096  002714  3A2A               	swapf	??_printSortTimer,f,c
 19097  002716  0E0F               	movlw	15
 19098  002718  162A               	andwf	??_printSortTimer,f,c
 19099  00271A  0E0F               	movlw	15
 19100  00271C  162A               	andwf	??_printSortTimer,f,c
 19101  00271E  502A               	movf	??_printSortTimer,w,c
 19102  002720  0D0A               	mullw	10
 19103  002722  0E24               	movlw	low _time
 19104  002724  2449               	addwf	printSortTimer@i,w,c
 19105  002726  6ED9               	movwf	fsr2l,c
 19106  002728  0E01               	movlw	high _time
 19107  00272A  204A               	addwfc	printSortTimer@i+1,w,c
 19108  00272C  6EDA               	movwf	fsr2h,c
 19109  00272E  50DF               	movf	indf2,w,c
 19110  002730  0B0F               	andlw	15
 19111  002732  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19112  002734  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19113  002736  50F3               	movf	prodl,w,c
 19114  002738  262B               	addwf	??_printSortTimer+1,f,c
 19115  00273A  50F4               	movf	prodh,w,c
 19116  00273C  222C               	addwfc	??_printSortTimer+2,f,c
 19117  00273E  90D8               	bcf	status,0,c
 19118  002740  3449               	rlcf	printSortTimer@i,w,c
 19119  002742  6ED9               	movwf	fsr2l,c
 19120  002744  344A               	rlcf	printSortTimer@i+1,w,c
 19121  002746  6EDA               	movwf	fsr2h,c
 19122  002748  0E2F               	movlw	low printSortTimer@curTime
 19123  00274A  26D9               	addwf	fsr2l,f,c
 19124  00274C  0E00               	movlw	high printSortTimer@curTime
 19125  00274E  22DA               	addwfc	fsr2h,f,c
 19126  002750  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19127  002754  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19128  002758  4A49               	infsnz	printSortTimer@i,f,c
 19129  00275A  2A4A               	incf	printSortTimer@i+1,f,c
 19130  00275C  D7CB               	goto	i2l8035
 19131  00275E                     i2l8045:
 19132                           
 19133                           ;sort.c: 288: }
 19134                           ;sort.c: 289: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19135  00275E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19136  002762  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19137  002766  0E00               	movlw	0
 19138  002768  6E04               	movwf	i2___wmul@multiplicand+1,c
 19139  00276A  0E3C               	movlw	60
 19140  00276C  6E03               	movwf	i2___wmul@multiplicand,c
 19141  00276E  EC3B  F023         	call	i2___wmul	;wreg free
 19142  002772  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19143  002776  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19144  00277A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19145  00277E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19146  002782  0E0E               	movlw	14
 19147  002784  6E04               	movwf	i2___wmul@multiplicand+1,c
 19148  002786  0E10               	movlw	16
 19149  002788  6E03               	movwf	i2___wmul@multiplicand,c
 19150  00278A  EC3B  F023         	call	i2___wmul	;wreg free
 19151  00278E  5001               	movf	?i2___wmul,w,c
 19152  002790  262A               	addwf	??_printSortTimer,f,c
 19153  002792  5002               	movf	?i2___wmul+1,w,c
 19154  002794  222B               	addwfc	??_printSortTimer+1,f,c
 19155  002796  0101               	movlb	1	; () banked
 19156  002798  510E               	movf	_startTime& (0+255),w,b
 19157  00279A  242A               	addwf	??_printSortTimer,w,c
 19158  00279C  6E3D               	movwf	printSortTimer@start_sec,c
 19159  00279E  0101               	movlb	1	; () banked
 19160  0027A0  510F               	movf	(_startTime+1)& (0+255),w,b
 19161  0027A2  202B               	addwfc	??_printSortTimer+1,w,c
 19162  0027A4  6E3E               	movwf	printSortTimer@start_sec+1,c
 19163                           
 19164                           ;sort.c: 290: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19165  0027A6  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19166  0027AA  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19167  0027AE  0E00               	movlw	0
 19168  0027B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 19169  0027B2  0E3C               	movlw	60
 19170  0027B4  6E03               	movwf	i2___wmul@multiplicand,c
 19171  0027B6  EC3B  F023         	call	i2___wmul	;wreg free
 19172  0027BA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19173  0027BE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19174  0027C2  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19175  0027C6  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19176  0027CA  0E0E               	movlw	14
 19177  0027CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19178  0027CE  0E10               	movlw	16
 19179  0027D0  6E03               	movwf	i2___wmul@multiplicand,c
 19180  0027D2  EC3B  F023         	call	i2___wmul	;wreg free
 19181  0027D6  5001               	movf	?i2___wmul,w,c
 19182  0027D8  262A               	addwf	??_printSortTimer,f,c
 19183  0027DA  5002               	movf	?i2___wmul+1,w,c
 19184  0027DC  222B               	addwfc	??_printSortTimer+1,f,c
 19185  0027DE  502F               	movf	printSortTimer@curTime,w,c
 19186  0027E0  242A               	addwf	??_printSortTimer,w,c
 19187  0027E2  6E3F               	movwf	printSortTimer@cur_sec,c
 19188  0027E4  5030               	movf	printSortTimer@curTime+1,w,c
 19189  0027E6  202B               	addwfc	??_printSortTimer+1,w,c
 19190  0027E8  6E40               	movwf	printSortTimer@cur_sec+1,c
 19191                           
 19192                           ;sort.c: 291: unsigned int timeDiff = cur_sec - start_sec;
 19193  0027EA  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19194  0027EE  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19195  0027F2  1E2A               	comf	??_printSortTimer,f,c
 19196  0027F4  1E2B               	comf	??_printSortTimer+1,f,c
 19197  0027F6  4A2A               	infsnz	??_printSortTimer,f,c
 19198  0027F8  2A2B               	incf	??_printSortTimer+1,f,c
 19199  0027FA  503F               	movf	printSortTimer@cur_sec,w,c
 19200  0027FC  242A               	addwf	??_printSortTimer,w,c
 19201  0027FE  6E47               	movwf	printSortTimer@timeDiff,c
 19202  002800  5040               	movf	printSortTimer@cur_sec+1,w,c
 19203  002802  202B               	addwfc	??_printSortTimer+1,w,c
 19204  002804  6E48               	movwf	printSortTimer@timeDiff+1,c
 19205                           
 19206                           ;sort.c: 293: total_time = timeDiff;
 19207  002806  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19208  00280A  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19209                           
 19210                           ;sort.c: 295: if(timeDiff >= 179){
 19211  00280E  5048               	movf	printSortTimer@timeDiff+1,w,c
 19212  002810  E104               	bnz	i2u690_40
 19213  002812  0EB3               	movlw	179
 19214  002814  5C47               	subwf	printSortTimer@timeDiff,w,c
 19215  002816  A0D8               	btfss	status,0,c
 19216  002818  D003               	goto	i2l8055
 19217  00281A                     i2u690_40:
 19218                           
 19219                           ;sort.c: 296: machine_state = DoneSorting_state;
 19220  00281A  0E02               	movlw	2
 19221  00281C  0100               	movlb	0	; () banked
 19222  00281E  6FFC               	movwf	_machine_state& (0+255),b
 19223  002820                     i2l8055:
 19224                           
 19225                           ;sort.c: 298: }
 19226                           ;sort.c: 300: int hour = timeDiff / 3600;
 19227  002820  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19228  002824  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19229  002828  0E0E               	movlw	14
 19230  00282A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19231  00282C  0E10               	movlw	16
 19232  00282E  6E08               	movwf	i2___lwdiv@divisor,c
 19233  002830  EC35  F020         	call	i2___lwdiv	;wreg free
 19234  002834  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19235  002838  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19236                           
 19237                           ;sort.c: 301: int min = (timeDiff % 3600) / 60;
 19238  00283C  0E0E               	movlw	14
 19239  00283E  6E04               	movwf	i2___lwmod@divisor+1,c
 19240  002840  0E10               	movlw	16
 19241  002842  6E03               	movwf	i2___lwmod@divisor,c
 19242  002844  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19243  002848  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19244  00284C  ECF4  F020         	call	i2___lwmod	;wreg free
 19245  002850  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19246  002854  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19247  002858  0E00               	movlw	0
 19248  00285A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19249  00285C  0E3C               	movlw	60
 19250  00285E  6E08               	movwf	i2___lwdiv@divisor,c
 19251  002860  EC35  F020         	call	i2___lwdiv	;wreg free
 19252  002864  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19253  002868  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19254                           
 19255                           ;sort.c: 302: int sec = (timeDiff % 3600) % 60;
 19256  00286C  0E0E               	movlw	14
 19257  00286E  6E04               	movwf	i2___lwmod@divisor+1,c
 19258  002870  0E10               	movlw	16
 19259  002872  6E03               	movwf	i2___lwmod@divisor,c
 19260  002874  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19261  002878  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19262  00287C  ECF4  F020         	call	i2___lwmod	;wreg free
 19263  002880  C001  F045         	movff	?i2___lwmod,_printSortTimer$2415
 19264  002884  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2415+1
 19265                           
 19266                           ;sort.c: 302: int sec = (timeDiff % 3600) % 60;
 19267  002888  C045  F001         	movff	_printSortTimer$2415,i2___lwmod@dividend
 19268  00288C  C046  F002         	movff	_printSortTimer$2415+1,i2___lwmod@dividend+1
 19269  002890  0E00               	movlw	0
 19270  002892  6E04               	movwf	i2___lwmod@divisor+1,c
 19271  002894  0E3C               	movlw	60
 19272  002896  6E03               	movwf	i2___lwmod@divisor,c
 19273  002898  ECF4  F020         	call	i2___lwmod	;wreg free
 19274  00289C  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19275  0028A0  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19276                           
 19277                           ;sort.c: 304: lcdInst(0b10000000);;
 19278  0028A4  0E80               	movlw	128
 19279  0028A6  ECEF  F023         	call	i2_lcdInst
 19280                           
 19281                           ;sort.c: 305: printf("SORTING...");
 19282  0028AA  0E7C               	movlw	low STR_64
 19283  0028AC  6E0D               	movwf	i2printf@f,c
 19284  0028AE  0EFF               	movlw	high STR_64
 19285  0028B0  6E0E               	movwf	i2printf@f+1,c
 19286  0028B2  ECD4  F00A         	call	i2_printf	;wreg free
 19287                           
 19288                           ;sort.c: 306: lcdInst(0b11000000);;
 19289  0028B6  0EC0               	movlw	192
 19290  0028B8  ECEF  F023         	call	i2_lcdInst
 19291                           
 19292                           ;sort.c: 307: printf("TIME %d:%02d", min, sec);
 19293  0028BC  0E42               	movlw	low STR_65
 19294  0028BE  6E0D               	movwf	i2printf@f,c
 19295  0028C0  0EFF               	movlw	high STR_65
 19296  0028C2  6E0E               	movwf	i2printf@f+1,c
 19297  0028C4  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19298  0028C8  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19299  0028CC  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19300  0028D0  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19301  0028D4  ECD4  F00A         	call	i2_printf	;wreg free
 19302  0028D8  0012               	return		;funcret
 19303  0028DA                     __end_of_printSortTimer:
 19304                           	opt stack 0
 19305                           pclatu	equ	0xFFB
 19306                           pclath	equ	0xFFA
 19307                           tblptru	equ	0xFF8
 19308                           tblptrh	equ	0xFF7
 19309                           tblptrl	equ	0xFF6
 19310                           tablat	equ	0xFF5
 19311                           prodh	equ	0xFF4
 19312                           prodl	equ	0xFF3
 19313                           intcon	equ	0xFF2
 19314                           intcon2	equ	0xFF1
 19315                           intcon3	equ	0xFF0
 19316                           indf0	equ	0xFEF
 19317                           postinc0	equ	0xFEE
 19318                           fsr0h	equ	0xFEA
 19319                           fsr0l	equ	0xFE9
 19320                           wreg	equ	0xFE8
 19321                           postdec1	equ	0xFE5
 19322                           fsr1h	equ	0xFE2
 19323                           fsr1l	equ	0xFE1
 19324                           indf2	equ	0xFDF
 19325                           postinc2	equ	0xFDE
 19326                           postdec2	equ	0xFDD
 19327                           fsr2h	equ	0xFDA
 19328                           fsr2l	equ	0xFD9
 19329                           status	equ	0xFD8
 19330                           
 19331 ;; *************** function i2_printf *****************
 19332 ;; Defined at:
 19333 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19334 ;; Parameters:    Size  Location     Type
 19335 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19336 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19337 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19338 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19339 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19340 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19341 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19342 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19343 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19344 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19345 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19346 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19347 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19348 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19349 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19350 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19351 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19352 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19353 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19354 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19355 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 19356 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19357 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19358 ;;		 -> STR_2(14), STR_1(18), 
 19359 ;; Auto vars:     Size  Location     Type
 19360 ;;  printf          4    0        struct .
 19361 ;;  printf          2   39[COMRAM] int 
 19362 ;;  printf          2   35[COMRAM] unsigned int 
 19363 ;;  printf          2   33[COMRAM] unsigned int 
 19364 ;;  printf          2   31[COMRAM] PTR void [1]
 19365 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19366 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19367 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 19368 ;;  printf          1   38[COMRAM] char 
 19369 ;;  printf          1   37[COMRAM] unsigned char 
 19370 ;;  printf          1   28[COMRAM] char 
 19371 ;; Return value:  Size  Location     Type
 19372 ;;                  2   12[COMRAM] int 
 19373 ;; Registers used:
 19374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19375 ;; Tracked objects:
 19376 ;;		On entry : 0/0
 19377 ;;		On exit  : 0/0
 19378 ;;		Unchanged: 0/0
 19379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19380 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19381 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19382 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19383 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19384 ;;Total ram usage:       29 bytes
 19385 ;; Hardware stack levels used:    1
 19386 ;; Hardware stack levels required when called:    2
 19387 ;; This function calls:
 19388 ;;		i2___lwdiv
 19389 ;;		i2___lwmod
 19390 ;;		i2___wmul
 19391 ;;		i2_isdigit
 19392 ;;		i2_putch
 19393 ;; This function is called by:
 19394 ;;		_change_state_to_menu_11
 19395 ;;		_change_state_to_menu_23
 19396 ;;		_change_state_to_logs_11
 19397 ;;		_change_state_to_logs_12
 19398 ;;		_change_state_to_logs_22
 19399 ;;		_change_state_to_logs_23
 19400 ;;		_change_state_to_logs_33
 19401 ;;		_change_state_to_logs_34
 19402 ;;		_printSortTimer
 19403 ;;		i2_change_state_to_menu_start
 19404 ;;		i2_change_state_to_menu_12
 19405 ;;		i2_change_state_to_menu_22
 19406 ;;		i2_printRTC
 19407 ;; This function uses a non-reentrant model
 19408 ;;
 19409                           
 19410                           	psect	text78
 19411  0015A8                     __ptext78:
 19412                           	opt stack 0
 19413  0015A8                     i2_printf:
 19414                           	opt stack 19
 19415                           
 19416                           ;doprnt.c: 466: va_list ap;
 19417                           ;doprnt.c: 499: signed char c;
 19418                           ;doprnt.c: 501: int width;
 19419                           ;doprnt.c: 506: signed char prec;
 19420                           ;doprnt.c: 508: unsigned char flag;
 19421                           ;doprnt.c: 523: union {
 19422                           ;doprnt.c: 524: unsigned long vd;
 19423                           ;doprnt.c: 525: double integ;
 19424                           ;doprnt.c: 526: } tmpval;
 19425                           ;doprnt.c: 528: unsigned int val;
 19426                           ;doprnt.c: 529: unsigned len;
 19427                           ;doprnt.c: 530: const char * cp;
 19428                           ;doprnt.c: 533: *ap = __va_start();
 19429                           
 19430                           ;incstack = 0
 19431  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19432  0015AA  6E20               	movwf	i2printf@ap,c
 19433  0015AC  0E00               	movlw	high (?i2_printf+2)
 19434  0015AE  6E21               	movwf	i2printf@ap+1,c
 19435                           
 19436                           ;doprnt.c: 536: while(c = *f++) {
 19437  0015B0  D1A4               	goto	i2l5789
 19438  0015B2                     i2l5659:
 19439                           
 19440                           ;doprnt.c: 538: if(c != '%')
 19441  0015B2  0E25               	movlw	37
 19442  0015B4  1827               	xorwf	i2printf@c,w,c
 19443  0015B6  B4D8               	btfsc	status,2,c
 19444  0015B8  D004               	goto	i2l5663
 19445                           
 19446                           ;doprnt.c: 540: {
 19447                           ;doprnt.c: 541: (putch(c) );
 19448  0015BA  5027               	movf	i2printf@c,w,c
 19449  0015BC  ECE9  F023         	call	i2_putch
 19450                           
 19451                           ;doprnt.c: 542: continue;
 19452  0015C0  D19C               	goto	i2l5789
 19453  0015C2                     i2l5663:
 19454                           
 19455                           ;doprnt.c: 543: }
 19456                           ;doprnt.c: 546: width = 0;
 19457  0015C2  0E00               	movlw	0
 19458  0015C4  6E29               	movwf	i2printf@width+1,c
 19459  0015C6  0E00               	movlw	0
 19460  0015C8  6E28               	movwf	i2printf@width,c
 19461                           
 19462                           ;doprnt.c: 548: flag = 0;
 19463  0015CA  0E00               	movlw	0
 19464  0015CC  6E26               	movwf	i2printf@flag,c
 19465                           
 19466                           ;doprnt.c: 551: switch(*f) {
 19467                           
 19468                           ;doprnt.c: 550: for(;;) {
 19469  0015CE  D003               	goto	i2l5669
 19470  0015D0                     i2l5665:
 19471                           
 19472                           ;doprnt.c: 580: flag |= 0x04;
 19473  0015D0  8426               	bsf	i2printf@flag,2,c
 19474                           
 19475                           ;doprnt.c: 581: f++;
 19476  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19477  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19478  0015D6                     i2l5669:
 19479  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19480  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19481  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19482  0015DE  6AF8               	clrf	tblptru,c
 19483  0015E0                     	endif
 19484  0015E0                     	if	0	;tblptru may be non-zero
 19485  0015E0                     	endif
 19486  0015E0  0008               	tblrd		*
 19487  0015E2  50F5               	movf	tablat,w,c
 19488                           
 19489                           ; Switch size 1, requested type "space"
 19490                           ; Number of cases is 1, Range of values is 48 to 48
 19491                           ; switch strategies available:
 19492                           ; Name         Instructions Cycles
 19493                           ; simple_byte            4     3 (average)
 19494                           ;	Chosen strategy is simple_byte
 19495  0015E4  0A30               	xorlw	48	; case 48
 19496  0015E6  B4D8               	btfsc	status,2,c
 19497  0015E8  D7F3               	goto	i2l5665
 19498                           
 19499                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19500                           
 19501                           ;doprnt.c: 586: }
 19502                           
 19503                           ;doprnt.c: 585: break;
 19504  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19505  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19506  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19507  0015F2  6AF8               	clrf	tblptru,c
 19508  0015F4                     	endif
 19509  0015F4                     	if	0	;tblptru may be non-zero
 19510  0015F4                     	endif
 19511  0015F4  0008               	tblrd		*
 19512  0015F6  50F5               	movf	tablat,w,c
 19513  0015F8  EC95  F023         	call	i2_isdigit
 19514  0015FC  A0D8               	btfss	status,0,c
 19515  0015FE  D0A6               	goto	i2l5717
 19516                           
 19517                           ;doprnt.c: 598: width = 0;
 19518  001600  0E00               	movlw	0
 19519  001602  6E29               	movwf	i2printf@width+1,c
 19520  001604  0E00               	movlw	0
 19521  001606  6E28               	movwf	i2printf@width,c
 19522  001608                     i2l5675:
 19523                           
 19524                           ;doprnt.c: 600: width *= 10;
 19525  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19526  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19527  001610  0E00               	movlw	0
 19528  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19529  001614  0E0A               	movlw	10
 19530  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19531  001618  EC3B  F023         	call	i2___wmul	;wreg free
 19532  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19533  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19534                           
 19535                           ;doprnt.c: 601: width += *f++ - '0';
 19536  001624  0ED0               	movlw	208
 19537  001626  6E19               	movwf	??i2_printf& (0+255),c
 19538  001628  0EFF               	movlw	255
 19539  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19540  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19541  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19542  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19543  001634  6AF8               	clrf	tblptru,c
 19544  001636                     	endif
 19545  001636                     	if	0	;tblptru may be non-zero
 19546  001636                     	endif
 19547  001636  0008               	tblrd		*
 19548  001638  50F5               	movf	tablat,w,c
 19549  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19550  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19551  00163E  5019               	movf	??i2_printf,w,c
 19552  001640  261B               	addwf	??i2_printf+2,f,c
 19553  001642  501A               	movf	??i2_printf+1,w,c
 19554  001644  221C               	addwfc	??i2_printf+3,f,c
 19555  001646  501B               	movf	??i2_printf+2,w,c
 19556  001648  2628               	addwf	i2printf@width,f,c
 19557  00164A  501C               	movf	??i2_printf+3,w,c
 19558  00164C  2229               	addwfc	i2printf@width+1,f,c
 19559  00164E  4A0D               	infsnz	i2printf@f,f,c
 19560  001650  2A0E               	incf	i2printf@f+1,f,c
 19561                           
 19562                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19563  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19564  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19565  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19566  00165A  6AF8               	clrf	tblptru,c
 19567  00165C                     	endif
 19568  00165C                     	if	0	;tblptru may be non-zero
 19569  00165C                     	endif
 19570  00165C  0008               	tblrd		*
 19571  00165E  50F5               	movf	tablat,w,c
 19572  001660  EC95  F023         	call	i2_isdigit
 19573  001664  A0D8               	btfss	status,0,c
 19574  001666  D072               	goto	i2l5717
 19575  001668  D7CF               	goto	i2l5675
 19576  00166A                     i2l5683:
 19577                           
 19578                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19579  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19580  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19581  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19582  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19583  00167A  0E02               	movlw	2
 19584  00167C  2620               	addwf	i2printf@ap,f,c
 19585  00167E  0E00               	movlw	0
 19586  001680  2221               	addwfc	i2printf@ap+1,f,c
 19587                           
 19588                           ;doprnt.c: 740: if(!cp)
 19589  001682  501E               	movf	i2printf@cp,w,c
 19590  001684  101F               	iorwf	i2printf@cp+1,w,c
 19591  001686  A4D8               	btfss	status,2,c
 19592  001688  D004               	goto	i2l5691
 19593                           
 19594                           ;doprnt.c: 741: cp = "(null)";
 19595  00168A  0EB6               	movlw	low STR_116
 19596  00168C  6E1E               	movwf	i2printf@cp,c
 19597  00168E  0EFF               	movlw	high STR_116
 19598  001690  6E1F               	movwf	i2printf@cp+1,c
 19599  001692                     i2l5691:
 19600                           
 19601                           ;doprnt.c: 745: len = 0;
 19602  001692  0E00               	movlw	0
 19603  001694  6E23               	movwf	i2printf@len+1,c
 19604  001696  0E00               	movlw	0
 19605  001698  6E22               	movwf	i2printf@len,c
 19606                           
 19607                           ;doprnt.c: 746: while(cp[len])
 19608  00169A  D002               	goto	i2l5695
 19609  00169C                     i2l5693:
 19610                           
 19611                           ;doprnt.c: 747: len++;
 19612  00169C  4A22               	infsnz	i2printf@len,f,c
 19613  00169E  2A23               	incf	i2printf@len+1,f,c
 19614  0016A0                     i2l5695:
 19615  0016A0  5022               	movf	i2printf@len,w,c
 19616  0016A2  241E               	addwf	i2printf@cp,w,c
 19617  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19618  0016A6  5023               	movf	i2printf@len+1,w,c
 19619  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19620  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19621  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19622  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19623  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19624  0016B6  6EF8               	movwf	tblptru,c
 19625  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19626  0016BA  64F7               	cpfsgt	tblptrh,c
 19627  0016BC  D003               	bra	i2u422_47
 19628  0016BE  0008               	tblrd		*
 19629  0016C0  50F5               	movf	tablat,w,c
 19630  0016C2  D005               	bra	i2u422_40
 19631  0016C4                     i2u422_47:
 19632  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19633  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19634  0016CC  50EF               	movf	indf0,w,c
 19635  0016CE                     i2u422_40:
 19636  0016CE  0900               	iorlw	0
 19637  0016D0  A4D8               	btfss	status,2,c
 19638  0016D2  D7E4               	goto	i2l5693
 19639                           
 19640                           ;doprnt.c: 757: if(width > len)
 19641  0016D4  5028               	movf	i2printf@width,w,c
 19642  0016D6  5C22               	subwf	i2printf@len,w,c
 19643  0016D8  5029               	movf	i2printf@width+1,w,c
 19644  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19645  0016DC  B0D8               	btfsc	status,0,c
 19646  0016DE  D005               	goto	i2l5701
 19647                           
 19648                           ;doprnt.c: 758: width -= len;
 19649  0016E0  5022               	movf	i2printf@len,w,c
 19650  0016E2  5E28               	subwf	i2printf@width,f,c
 19651  0016E4  5023               	movf	i2printf@len+1,w,c
 19652  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19653  0016E8  D008               	goto	i2l5705
 19654  0016EA                     i2l5701:
 19655                           
 19656                           ;doprnt.c: 759: else
 19657                           ;doprnt.c: 760: width = 0;
 19658  0016EA  0E00               	movlw	0
 19659  0016EC  6E29               	movwf	i2printf@width+1,c
 19660  0016EE  0E00               	movlw	0
 19661  0016F0  6E28               	movwf	i2printf@width,c
 19662                           
 19663                           ;doprnt.c: 764: while(width--)
 19664  0016F2  D003               	goto	i2l5705
 19665  0016F4                     i2l5703:
 19666                           
 19667                           ;doprnt.c: 765: (putch(' ') );
 19668  0016F4  0E20               	movlw	32
 19669  0016F6  ECE9  F023         	call	i2_putch
 19670  0016FA                     i2l5705:
 19671  0016FA  0628               	decf	i2printf@width,f,c
 19672  0016FC  A0D8               	btfss	status,0,c
 19673  0016FE  0629               	decf	i2printf@width+1,f,c
 19674  001700  2828               	incf	i2printf@width,w,c
 19675  001702  E1F8               	bnz	i2l5703
 19676  001704  2829               	incf	i2printf@width+1,w,c
 19677  001706  B4D8               	btfsc	status,2,c
 19678  001708  D016               	goto	i2l5711
 19679  00170A  D7F4               	goto	i2l5703
 19680  00170C                     i2l5707:
 19681                           
 19682                           ;doprnt.c: 768: (putch(*cp++) );
 19683  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19684  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19685  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19686  001716  6EF8               	movwf	tblptru,c
 19687  001718  0E0F               	movlw	(high __ramtop+-1)
 19688  00171A  64F7               	cpfsgt	tblptrh,c
 19689  00171C  D003               	bra	i2u426_47
 19690  00171E  0008               	tblrd		*
 19691  001720  50F5               	movf	tablat,w,c
 19692  001722  D005               	bra	i2u426_40
 19693  001724                     i2u426_47:
 19694  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19695  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19696  00172C  50EF               	movf	indf0,w,c
 19697  00172E                     i2u426_40:
 19698  00172E  ECE9  F023         	call	i2_putch
 19699  001732  4A1E               	infsnz	i2printf@cp,f,c
 19700  001734  2A1F               	incf	i2printf@cp+1,f,c
 19701  001736                     i2l5711:
 19702  001736  0622               	decf	i2printf@len,f,c
 19703  001738  A0D8               	btfss	status,0,c
 19704  00173A  0623               	decf	i2printf@len+1,f,c
 19705  00173C  2822               	incf	i2printf@len,w,c
 19706  00173E  E1E6               	bnz	i2l5707
 19707  001740  2823               	incf	i2printf@len+1,w,c
 19708  001742  B4D8               	btfsc	status,2,c
 19709  001744  D0DA               	goto	i2l5789
 19710  001746  D7E2               	goto	i2l5707
 19711  001748                     i2l5713:
 19712                           
 19713                           ;doprnt.c: 818: flag |= 0x40;
 19714  001748  8C26               	bsf	i2printf@flag,6,c
 19715                           
 19716                           ;doprnt.c: 822: }
 19717                           
 19718                           ;doprnt.c: 819: break;
 19719  00174A  D01B               	goto	i2l1259
 19720  00174C                     i2l5717:
 19721  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19722  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19723  001754  4A0D               	infsnz	i2printf@f,f,c
 19724  001756  2A0E               	incf	i2printf@f+1,f,c
 19725  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19726  001758  6AF8               	clrf	tblptru,c
 19727  00175A                     	endif
 19728  00175A                     	if	0	;tblptru may be non-zero
 19729  00175A                     	endif
 19730  00175A  0008               	tblrd		*
 19731  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19732  001760  5027               	movf	i2printf@c,w,c
 19733                           
 19734                           ; Switch size 1, requested type "space"
 19735                           ; Number of cases is 5, Range of values is 0 to 117
 19736                           ; switch strategies available:
 19737                           ; Name         Instructions Cycles
 19738                           ; simple_byte           16     9 (average)
 19739                           ;	Chosen strategy is simple_byte
 19740  001762  0A00               	xorlw	0	; case 0
 19741  001764  B4D8               	btfsc	status,2,c
 19742  001766  0012               	return	
 19743  001768  0A64               	xorlw	100	; case 100
 19744  00176A  B4D8               	btfsc	status,2,c
 19745  00176C  D00A               	goto	i2l1259
 19746  00176E  0A0D               	xorlw	13	; case 105
 19747  001770  B4D8               	btfsc	status,2,c
 19748  001772  D007               	goto	i2l1259
 19749  001774  0A1A               	xorlw	26	; case 115
 19750  001776  B4D8               	btfsc	status,2,c
 19751  001778  D778               	goto	i2l5683
 19752  00177A  0A06               	xorlw	6	; case 117
 19753  00177C  B4D8               	btfsc	status,2,c
 19754  00177E  D7E4               	goto	i2l5713
 19755  001780  D0BC               	goto	i2l5789
 19756  001782                     i2l1259:
 19757                           
 19758                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19759  001782  BC26               	btfsc	i2printf@flag,6,c
 19760  001784  D015               	goto	i2l5729
 19761                           
 19762                           ;doprnt.c: 1253: {
 19763                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19764  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19765  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19766  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19767  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19768  001796  0E02               	movlw	2
 19769  001798  2620               	addwf	i2printf@ap,f,c
 19770  00179A  0E00               	movlw	0
 19771  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19772                           
 19773                           ;doprnt.c: 1261: if((int)val < 0) {
 19774  00179E  AE25               	btfss	i2printf@val+1,7,c
 19775  0017A0  D013               	goto	i2l5733
 19776                           
 19777                           ;doprnt.c: 1262: flag |= 0x03;
 19778  0017A2  0E03               	movlw	3
 19779  0017A4  1226               	iorwf	i2printf@flag,f,c
 19780                           
 19781                           ;doprnt.c: 1263: val = -val;
 19782  0017A6  6C24               	negf	i2printf@val,c
 19783  0017A8  1E25               	comf	i2printf@val+1,f,c
 19784  0017AA  B0D8               	btfsc	status,0,c
 19785  0017AC  2A25               	incf	i2printf@val+1,f,c
 19786                           
 19787                           ;doprnt.c: 1264: }
 19788                           ;doprnt.c: 1266: }
 19789  0017AE  D00C               	goto	i2l5733
 19790  0017B0                     i2l5729:
 19791                           
 19792                           ;doprnt.c: 1268: else
 19793                           ;doprnt.c: 1273: {
 19794                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19795  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19796  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19797  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19798  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19799  0017C0  0E02               	movlw	2
 19800  0017C2  2620               	addwf	i2printf@ap,f,c
 19801  0017C4  0E00               	movlw	0
 19802  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19803  0017C8                     i2l5733:
 19804                           
 19805                           ;doprnt.c: 1287: }
 19806                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19807  0017C8  0E01               	movlw	1
 19808  0017CA  6E27               	movwf	i2printf@c,c
 19809  0017CC                     i2l5735:
 19810  0017CC  0E05               	movlw	5
 19811  0017CE  1827               	xorwf	i2printf@c,w,c
 19812  0017D0  B4D8               	btfsc	status,2,c
 19813  0017D2  D015               	goto	i2l5747
 19814                           
 19815                           ;doprnt.c: 1306: if(val < dpowers[c])
 19816  0017D4  5027               	movf	i2printf@c,w,c
 19817  0017D6  0D02               	mullw	2
 19818  0017D8  0E32               	movlw	low _dpowers
 19819  0017DA  24F3               	addwf	prodl,w,c
 19820  0017DC  6EF6               	movwf	tblptrl,c
 19821  0017DE  0EFB               	movlw	high _dpowers
 19822  0017E0  20F4               	addwfc	prodh,w,c
 19823  0017E2  6EF7               	movwf	tblptrh,c
 19824  0017E4                     	if	1	;There are 3 active tblptr bytes
 19825  0017E4  6AF8               	clrf	tblptru,c
 19826  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19827  0017E8  22F8               	addwfc	tblptru,f,c
 19828  0017EA                     	endif
 19829  0017EA  0009               	tblrd		*+
 19830  0017EC  50F5               	movf	tablat,w,c
 19831  0017EE  5C24               	subwf	i2printf@val,w,c
 19832  0017F0  0009               	tblrd		*+
 19833  0017F2  50F5               	movf	tablat,w,c
 19834  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19835  0017F6  A0D8               	btfss	status,0,c
 19836  0017F8  D002               	goto	i2l5747
 19837                           
 19838                           ;doprnt.c: 1307: break;
 19839  0017FA  2A27               	incf	i2printf@c,f,c
 19840  0017FC  D7E7               	goto	i2l5735
 19841  0017FE                     i2l5747:
 19842                           
 19843                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19844  0017FE  5028               	movf	i2printf@width,w,c
 19845  001800  1029               	iorwf	i2printf@width+1,w,c
 19846  001802  B4D8               	btfsc	status,2,c
 19847  001804  D009               	goto	i2l5753
 19848  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19849  00180A  0E03               	movlw	3
 19850  00180C  1619               	andwf	??i2_printf,f,c
 19851  00180E  B4D8               	btfsc	status,2,c
 19852  001810  D003               	goto	i2l5753
 19853                           
 19854                           ;doprnt.c: 1346: width--;
 19855  001812  0628               	decf	i2printf@width,f,c
 19856  001814  A0D8               	btfss	status,0,c
 19857  001816  0629               	decf	i2printf@width+1,f,c
 19858  001818                     i2l5753:
 19859                           
 19860                           ;doprnt.c: 1381: if(width > c)
 19861  001818  0E80               	movlw	128
 19862  00181A  BE27               	btfsc	i2printf@c,7,c
 19863  00181C  0E7F               	movlw	127
 19864  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19865  001820  5028               	movf	i2printf@width,w,c
 19866  001822  5C27               	subwf	i2printf@c,w,c
 19867  001824  5029               	movf	i2printf@width+1,w,c
 19868  001826  0A80               	xorlw	128
 19869  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19870  00182A  B0D8               	btfsc	status,0,c
 19871  00182C  D007               	goto	i2l5757
 19872                           
 19873                           ;doprnt.c: 1382: width -= c;
 19874  00182E  5027               	movf	i2printf@c,w,c
 19875  001830  5E28               	subwf	i2printf@width,f,c
 19876  001832  0E00               	movlw	0
 19877  001834  BE27               	btfsc	i2printf@c,7,c
 19878  001836  0EFF               	movlw	255
 19879  001838  5A29               	subwfb	i2printf@width+1,f,c
 19880  00183A  D004               	goto	i2l5759
 19881  00183C                     i2l5757:
 19882                           
 19883                           ;doprnt.c: 1383: else
 19884                           ;doprnt.c: 1384: width = 0;
 19885  00183C  0E00               	movlw	0
 19886  00183E  6E29               	movwf	i2printf@width+1,c
 19887  001840  0E00               	movlw	0
 19888  001842  6E28               	movwf	i2printf@width,c
 19889  001844                     i2l5759:
 19890                           
 19891                           ;doprnt.c: 1387: if(flag & 0x04) {
 19892  001844  A426               	btfss	i2printf@flag,2,c
 19893  001846  D014               	goto	i2l5771
 19894                           
 19895                           ;doprnt.c: 1392: if(flag & 0x03)
 19896  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19897  00184C  0E03               	movlw	3
 19898  00184E  1619               	andwf	??i2_printf,f,c
 19899  001850  B4D8               	btfsc	status,2,c
 19900  001852  D003               	goto	i2l5765
 19901                           
 19902                           ;doprnt.c: 1393: (putch('-') );
 19903  001854  0E2D               	movlw	45
 19904  001856  ECE9  F023         	call	i2_putch
 19905  00185A                     i2l5765:
 19906                           
 19907                           ;doprnt.c: 1415: if(width)
 19908  00185A  5028               	movf	i2printf@width,w,c
 19909  00185C  1029               	iorwf	i2printf@width+1,w,c
 19910  00185E  B4D8               	btfsc	status,2,c
 19911  001860  D01E               	goto	i2l5781
 19912                           
 19913                           ;doprnt.c: 1417: (putch('0') );
 19914                           
 19915                           ;doprnt.c: 1416: do
 19916  001862  0E30               	movlw	48
 19917  001864  ECE9  F023         	call	i2_putch
 19918                           
 19919                           ;doprnt.c: 1418: while(--width);
 19920  001868  0628               	decf	i2printf@width,f,c
 19921  00186A  A0D8               	btfss	status,0,c
 19922  00186C  0629               	decf	i2printf@width+1,f,c
 19923  00186E  D7F5               	goto	i2l5765
 19924  001870                     i2l5771:
 19925                           
 19926                           ;doprnt.c: 1422: {
 19927                           ;doprnt.c: 1424: if(width
 19928                           ;doprnt.c: 1428: )
 19929  001870  5028               	movf	i2printf@width,w,c
 19930  001872  1029               	iorwf	i2printf@width+1,w,c
 19931  001874  B4D8               	btfsc	status,2,c
 19932  001876  D00A               	goto	i2l5777
 19933  001878                     i2l5773:
 19934                           
 19935                           ;doprnt.c: 1430: (putch(' ') );
 19936  001878  0E20               	movlw	32
 19937  00187A  ECE9  F023         	call	i2_putch
 19938                           
 19939                           ;doprnt.c: 1431: while(--width);
 19940  00187E  0628               	decf	i2printf@width,f,c
 19941  001880  A0D8               	btfss	status,0,c
 19942  001882  0629               	decf	i2printf@width+1,f,c
 19943  001884  5028               	movf	i2printf@width,w,c
 19944  001886  1029               	iorwf	i2printf@width+1,w,c
 19945  001888  A4D8               	btfss	status,2,c
 19946  00188A  D7F6               	goto	i2l5773
 19947  00188C                     i2l5777:
 19948                           
 19949                           ;doprnt.c: 1438: if(flag & 0x03)
 19950  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19951  001890  0E03               	movlw	3
 19952  001892  1619               	andwf	??i2_printf,f,c
 19953  001894  B4D8               	btfsc	status,2,c
 19954  001896  D003               	goto	i2l5781
 19955                           
 19956                           ;doprnt.c: 1439: (putch('-') );
 19957  001898  0E2D               	movlw	45
 19958  00189A  ECE9  F023         	call	i2_putch
 19959  00189E                     i2l5781:
 19960                           
 19961                           ;doprnt.c: 1469: }
 19962                           ;doprnt.c: 1472: prec = c;
 19963  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19964                           
 19965                           ;doprnt.c: 1474: while(prec--) {
 19966  0018A2  D027               	goto	i2l5787
 19967  0018A4                     i2l5783:
 19968                           
 19969                           ;doprnt.c: 1478: {
 19970                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19971  0018A4  501D               	movf	i2printf@prec,w,c
 19972  0018A6  0D02               	mullw	2
 19973  0018A8  0E32               	movlw	low _dpowers
 19974  0018AA  24F3               	addwf	prodl,w,c
 19975  0018AC  6EF6               	movwf	tblptrl,c
 19976  0018AE  0EFB               	movlw	high _dpowers
 19977  0018B0  20F4               	addwfc	prodh,w,c
 19978  0018B2  6EF7               	movwf	tblptrh,c
 19979  0018B4                     	if	1	;There are 3 active tblptr bytes
 19980  0018B4  6AF8               	clrf	tblptru,c
 19981  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19982  0018B8  22F8               	addwfc	tblptru,f,c
 19983  0018BA                     	endif
 19984  0018BA  0009               	tblrd		*+
 19985  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19986  0018C0  000A               	tblrd		*-
 19987  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19988  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19989  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19990  0018CE  EC35  F020         	call	i2___lwdiv	;wreg free
 19991  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19992  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19993  0018DA  0E00               	movlw	0
 19994  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19995  0018DE  0E0A               	movlw	10
 19996  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19997  0018E2  ECF4  F020         	call	i2___lwmod	;wreg free
 19998  0018E6  5001               	movf	?i2___lwmod,w,c
 19999  0018E8  0F30               	addlw	48
 20000  0018EA  6E27               	movwf	i2printf@c,c
 20001                           
 20002                           ;doprnt.c: 1523: }
 20003                           ;doprnt.c: 1524: (putch(c) );
 20004  0018EC  5027               	movf	i2printf@c,w,c
 20005  0018EE  ECE9  F023         	call	i2_putch
 20006  0018F2                     i2l5787:
 20007  0018F2  061D               	decf	i2printf@prec,f,c
 20008  0018F4  281D               	incf	i2printf@prec,w,c
 20009  0018F6  A4D8               	btfss	status,2,c
 20010  0018F8  D7D5               	goto	i2l5783
 20011  0018FA                     i2l5789:
 20012  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 20013  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20014  001902  4A0D               	infsnz	i2printf@f,f,c
 20015  001904  2A0E               	incf	i2printf@f+1,f,c
 20016  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20017  001906  6AF8               	clrf	tblptru,c
 20018  001908                     	endif
 20019  001908                     	if	0	;tblptru may be non-zero
 20020  001908                     	endif
 20021  001908  0008               	tblrd		*
 20022  00190A  CFF5 F027          	movff	tablat,i2printf@c
 20023  00190E  5027               	movf	i2printf@c,w,c
 20024  001910  B4D8               	btfsc	status,2,c
 20025  001912  0012               	return	
 20026  001914  D64E               	goto	i2l5659
 20027  001916                     __end_ofi2_printf:
 20028                           	opt stack 0
 20029                           pclatu	equ	0xFFB
 20030                           pclath	equ	0xFFA
 20031                           tblptru	equ	0xFF8
 20032                           tblptrh	equ	0xFF7
 20033                           tblptrl	equ	0xFF6
 20034                           tablat	equ	0xFF5
 20035                           prodh	equ	0xFF4
 20036                           prodl	equ	0xFF3
 20037                           intcon	equ	0xFF2
 20038                           intcon2	equ	0xFF1
 20039                           intcon3	equ	0xFF0
 20040                           indf0	equ	0xFEF
 20041                           postinc0	equ	0xFEE
 20042                           fsr0h	equ	0xFEA
 20043                           fsr0l	equ	0xFE9
 20044                           wreg	equ	0xFE8
 20045                           postdec1	equ	0xFE5
 20046                           fsr1h	equ	0xFE2
 20047                           fsr1l	equ	0xFE1
 20048                           indf2	equ	0xFDF
 20049                           postinc2	equ	0xFDE
 20050                           postdec2	equ	0xFDD
 20051                           fsr2h	equ	0xFDA
 20052                           fsr2l	equ	0xFD9
 20053                           status	equ	0xFD8
 20054                           
 20055 ;; *************** function i2_putch *****************
 20056 ;; Defined at:
 20057 ;;		line 20 in file "lcd.c"
 20058 ;; Parameters:    Size  Location     Type
 20059 ;;  data            1    wreg     unsigned char 
 20060 ;; Auto vars:     Size  Location     Type
 20061 ;;  data            1    2[COMRAM] unsigned char 
 20062 ;; Return value:  Size  Location     Type
 20063 ;;                  1    wreg      void 
 20064 ;; Registers used:
 20065 ;;		wreg, status,2, status,0, cstack
 20066 ;; Tracked objects:
 20067 ;;		On entry : 0/0
 20068 ;;		On exit  : 0/0
 20069 ;;		Unchanged: 0/0
 20070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20075 ;;Total ram usage:        1 bytes
 20076 ;; Hardware stack levels used:    1
 20077 ;; Hardware stack levels required when called:    1
 20078 ;; This function calls:
 20079 ;;		i2_lcdNibble
 20080 ;; This function is called by:
 20081 ;;		i2_printf
 20082 ;; This function uses a non-reentrant model
 20083 ;;
 20084                           
 20085                           	psect	text79
 20086  0047D2                     __ptext79:
 20087                           	opt stack 0
 20088  0047D2                     i2_putch:
 20089                           	opt stack 19
 20090                           
 20091                           ;incstack = 0
 20092                           ;i2putch@data stored from wreg
 20093  0047D2  6E03               	movwf	i2putch@data,c
 20094                           
 20095                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20096  0047D4  848C               	bsf	3980,2,c	;volatile
 20097                           
 20098                           ;lcd.c: 22: lcdNibble(data);
 20099  0047D6  5003               	movf	i2putch@data,w,c
 20100  0047D8  ECE0  F01F         	call	i2_lcdNibble
 20101  0047DC  0012               	return		;funcret
 20102  0047DE                     __end_ofi2_putch:
 20103                           	opt stack 0
 20104                           pclatu	equ	0xFFB
 20105                           pclath	equ	0xFFA
 20106                           tblptru	equ	0xFF8
 20107                           tblptrh	equ	0xFF7
 20108                           tblptrl	equ	0xFF6
 20109                           tablat	equ	0xFF5
 20110                           prodh	equ	0xFF4
 20111                           prodl	equ	0xFF3
 20112                           intcon	equ	0xFF2
 20113                           intcon2	equ	0xFF1
 20114                           intcon3	equ	0xFF0
 20115                           indf0	equ	0xFEF
 20116                           postinc0	equ	0xFEE
 20117                           fsr0h	equ	0xFEA
 20118                           fsr0l	equ	0xFE9
 20119                           wreg	equ	0xFE8
 20120                           postdec1	equ	0xFE5
 20121                           fsr1h	equ	0xFE2
 20122                           fsr1l	equ	0xFE1
 20123                           indf2	equ	0xFDF
 20124                           postinc2	equ	0xFDE
 20125                           postdec2	equ	0xFDD
 20126                           fsr2h	equ	0xFDA
 20127                           fsr2l	equ	0xFD9
 20128                           status	equ	0xFD8
 20129                           
 20130 ;; *************** function i2_isdigit *****************
 20131 ;; Defined at:
 20132 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20133 ;; Parameters:    Size  Location     Type
 20134 ;;  c               1    wreg     unsigned char 
 20135 ;; Auto vars:     Size  Location     Type
 20136 ;;  c               1    2[COMRAM] unsigned char 
 20137 ;; Return value:  Size  Location     Type
 20138 ;;		None               void
 20139 ;; Registers used:
 20140 ;;		wreg, status,2, status,0
 20141 ;; Tracked objects:
 20142 ;;		On entry : 0/0
 20143 ;;		On exit  : 0/0
 20144 ;;		Unchanged: 0/0
 20145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20147 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20148 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20149 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20150 ;;Total ram usage:        3 bytes
 20151 ;; Hardware stack levels used:    1
 20152 ;; This function calls:
 20153 ;;		Nothing
 20154 ;; This function is called by:
 20155 ;;		i2_printf
 20156 ;; This function uses a non-reentrant model
 20157 ;;
 20158                           
 20159                           	psect	text80
 20160  00472A                     __ptext80:
 20161                           	opt stack 0
 20162  00472A                     i2_isdigit:
 20163                           	opt stack 20
 20164                           
 20165                           ;incstack = 0
 20166                           ;i2isdigit@c stored from wreg
 20167  00472A  6E03               	movwf	i2isdigit@c,c
 20168  00472C  0E00               	movlw	0
 20169  00472E  6E02               	movwf	i2_isdigit$1942,c
 20170  004730  0E3A               	movlw	58
 20171  004732  6003               	cpfslt	i2isdigit@c,c
 20172  004734  D005               	goto	i2l5363
 20173  004736  0E2F               	movlw	47
 20174  004738  6403               	cpfsgt	i2isdigit@c,c
 20175  00473A  D002               	goto	i2l5363
 20176  00473C  0E01               	movlw	1
 20177  00473E  6E02               	movwf	i2_isdigit$1942,c
 20178  004740                     i2l5363:
 20179  004740  C002  F001         	movff	i2_isdigit$1942,??i2_isdigit
 20180  004744  3001               	rrcf	??i2_isdigit,w,c
 20181  004746  0012               	return	
 20182  004748                     __end_ofi2_isdigit:
 20183                           	opt stack 0
 20184                           pclatu	equ	0xFFB
 20185                           pclath	equ	0xFFA
 20186                           tblptru	equ	0xFF8
 20187                           tblptrh	equ	0xFF7
 20188                           tblptrl	equ	0xFF6
 20189                           tablat	equ	0xFF5
 20190                           prodh	equ	0xFF4
 20191                           prodl	equ	0xFF3
 20192                           intcon	equ	0xFF2
 20193                           intcon2	equ	0xFF1
 20194                           intcon3	equ	0xFF0
 20195                           indf0	equ	0xFEF
 20196                           postinc0	equ	0xFEE
 20197                           fsr0h	equ	0xFEA
 20198                           fsr0l	equ	0xFE9
 20199                           wreg	equ	0xFE8
 20200                           postdec1	equ	0xFE5
 20201                           fsr1h	equ	0xFE2
 20202                           fsr1l	equ	0xFE1
 20203                           indf2	equ	0xFDF
 20204                           postinc2	equ	0xFDE
 20205                           postdec2	equ	0xFDD
 20206                           fsr2h	equ	0xFDA
 20207                           fsr2l	equ	0xFD9
 20208                           status	equ	0xFD8
 20209                           
 20210 ;; *************** function i2___wmul *****************
 20211 ;; Defined at:
 20212 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20213 ;; Parameters:    Size  Location     Type
 20214 ;;  multiplier      2    0[COMRAM] unsigned int 
 20215 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20216 ;; Auto vars:     Size  Location     Type
 20217 ;;  __wmul          2    4[COMRAM] unsigned int 
 20218 ;; Return value:  Size  Location     Type
 20219 ;;                  2    0[COMRAM] unsigned int 
 20220 ;; Registers used:
 20221 ;;		wreg, status,2, status,0, prodl, prodh
 20222 ;; Tracked objects:
 20223 ;;		On entry : 0/0
 20224 ;;		On exit  : 0/0
 20225 ;;		Unchanged: 0/0
 20226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20230 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20231 ;;Total ram usage:        6 bytes
 20232 ;; Hardware stack levels used:    1
 20233 ;; This function calls:
 20234 ;;		Nothing
 20235 ;; This function is called by:
 20236 ;;		_printSortTimer
 20237 ;;		_retrieveLog
 20238 ;;		i2_printf
 20239 ;; This function uses a non-reentrant model
 20240 ;;
 20241                           
 20242                           	psect	text81
 20243  004676                     __ptext81:
 20244                           	opt stack 0
 20245  004676                     i2___wmul:
 20246                           	opt stack 20
 20247                           
 20248                           ;incstack = 0
 20249  004676  5001               	movf	i2___wmul@multiplier,w,c
 20250  004678  0203               	mulwf	i2___wmul@multiplicand,c
 20251  00467A  CFF3 F005          	movff	prodl,i2___wmul@product
 20252  00467E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20253  004682  5001               	movf	i2___wmul@multiplier,w,c
 20254  004684  0204               	mulwf	i2___wmul@multiplicand+1,c
 20255  004686  50F3               	movf	prodl,w,c
 20256  004688  2606               	addwf	i2___wmul@product+1,f,c
 20257  00468A  5002               	movf	i2___wmul@multiplier+1,w,c
 20258  00468C  0203               	mulwf	i2___wmul@multiplicand,c
 20259  00468E  50F3               	movf	prodl,w,c
 20260  004690  2606               	addwf	i2___wmul@product+1,f,c
 20261  004692  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20262  004696  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20263  00469A  0012               	return	
 20264  00469C                     __end_ofi2___wmul:
 20265                           	opt stack 0
 20266                           pclatu	equ	0xFFB
 20267                           pclath	equ	0xFFA
 20268                           tblptru	equ	0xFF8
 20269                           tblptrh	equ	0xFF7
 20270                           tblptrl	equ	0xFF6
 20271                           tablat	equ	0xFF5
 20272                           prodh	equ	0xFF4
 20273                           prodl	equ	0xFF3
 20274                           intcon	equ	0xFF2
 20275                           intcon2	equ	0xFF1
 20276                           intcon3	equ	0xFF0
 20277                           indf0	equ	0xFEF
 20278                           postinc0	equ	0xFEE
 20279                           fsr0h	equ	0xFEA
 20280                           fsr0l	equ	0xFE9
 20281                           wreg	equ	0xFE8
 20282                           postdec1	equ	0xFE5
 20283                           fsr1h	equ	0xFE2
 20284                           fsr1l	equ	0xFE1
 20285                           indf2	equ	0xFDF
 20286                           postinc2	equ	0xFDE
 20287                           postdec2	equ	0xFDD
 20288                           fsr2h	equ	0xFDA
 20289                           fsr2l	equ	0xFD9
 20290                           status	equ	0xFD8
 20291                           
 20292 ;; *************** function i2___lwmod *****************
 20293 ;; Defined at:
 20294 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20295 ;; Parameters:    Size  Location     Type
 20296 ;;  dividend        2    0[COMRAM] unsigned int 
 20297 ;;  divisor         2    2[COMRAM] unsigned int 
 20298 ;; Auto vars:     Size  Location     Type
 20299 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20300 ;; Return value:  Size  Location     Type
 20301 ;;                  2    0[COMRAM] unsigned int 
 20302 ;; Registers used:
 20303 ;;		wreg, status,2, status,0
 20304 ;; Tracked objects:
 20305 ;;		On entry : 0/0
 20306 ;;		On exit  : 0/0
 20307 ;;		Unchanged: 0/0
 20308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20312 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20313 ;;Total ram usage:        5 bytes
 20314 ;; Hardware stack levels used:    1
 20315 ;; This function calls:
 20316 ;;		Nothing
 20317 ;; This function is called by:
 20318 ;;		_printSortTimer
 20319 ;;		i2_printf
 20320 ;; This function uses a non-reentrant model
 20321 ;;
 20322                           
 20323                           	psect	text82
 20324  0041E8                     __ptext82:
 20325                           	opt stack 0
 20326  0041E8                     i2___lwmod:
 20327                           	opt stack 20
 20328                           
 20329                           ;incstack = 0
 20330  0041E8  5003               	movf	i2___lwmod@divisor,w,c
 20331  0041EA  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20332  0041EC  B4D8               	btfsc	status,2,c
 20333  0041EE  D018               	goto	i2l1716
 20334  0041F0  0E01               	movlw	1
 20335  0041F2  6E05               	movwf	i2___lwmod@counter,c
 20336  0041F4  D004               	goto	i2l5395
 20337  0041F6                     i2l5393:
 20338  0041F6  90D8               	bcf	status,0,c
 20339  0041F8  3603               	rlcf	i2___lwmod@divisor,f,c
 20340  0041FA  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20341  0041FC  2A05               	incf	i2___lwmod@counter,f,c
 20342  0041FE                     i2l5395:
 20343  0041FE  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20344  004200  D7FA               	goto	i2l5393
 20345  004202                     i2l5397:
 20346  004202  5003               	movf	i2___lwmod@divisor,w,c
 20347  004204  5C01               	subwf	i2___lwmod@dividend,w,c
 20348  004206  5004               	movf	i2___lwmod@divisor+1,w,c
 20349  004208  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20350  00420A  A0D8               	btfss	status,0,c
 20351  00420C  D004               	goto	i2l5401
 20352  00420E  5003               	movf	i2___lwmod@divisor,w,c
 20353  004210  5E01               	subwf	i2___lwmod@dividend,f,c
 20354  004212  5004               	movf	i2___lwmod@divisor+1,w,c
 20355  004214  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20356  004216                     i2l5401:
 20357  004216  90D8               	bcf	status,0,c
 20358  004218  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20359  00421A  3203               	rrcf	i2___lwmod@divisor,f,c
 20360  00421C  2E05               	decfsz	i2___lwmod@counter,f,c
 20361  00421E  D7F1               	goto	i2l5397
 20362  004220                     i2l1716:
 20363  004220  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20364  004224  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20365  004228  0012               	return		;funcret
 20366  00422A                     __end_ofi2___lwmod:
 20367                           	opt stack 0
 20368                           pclatu	equ	0xFFB
 20369                           pclath	equ	0xFFA
 20370                           tblptru	equ	0xFF8
 20371                           tblptrh	equ	0xFF7
 20372                           tblptrl	equ	0xFF6
 20373                           tablat	equ	0xFF5
 20374                           prodh	equ	0xFF4
 20375                           prodl	equ	0xFF3
 20376                           intcon	equ	0xFF2
 20377                           intcon2	equ	0xFF1
 20378                           intcon3	equ	0xFF0
 20379                           indf0	equ	0xFEF
 20380                           postinc0	equ	0xFEE
 20381                           fsr0h	equ	0xFEA
 20382                           fsr0l	equ	0xFE9
 20383                           wreg	equ	0xFE8
 20384                           postdec1	equ	0xFE5
 20385                           fsr1h	equ	0xFE2
 20386                           fsr1l	equ	0xFE1
 20387                           indf2	equ	0xFDF
 20388                           postinc2	equ	0xFDE
 20389                           postdec2	equ	0xFDD
 20390                           fsr2h	equ	0xFDA
 20391                           fsr2l	equ	0xFD9
 20392                           status	equ	0xFD8
 20393                           
 20394 ;; *************** function i2___lwdiv *****************
 20395 ;; Defined at:
 20396 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20397 ;; Parameters:    Size  Location     Type
 20398 ;;  dividend        2    5[COMRAM] unsigned int 
 20399 ;;  divisor         2    7[COMRAM] unsigned int 
 20400 ;; Auto vars:     Size  Location     Type
 20401 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20402 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20403 ;; Return value:  Size  Location     Type
 20404 ;;                  2    5[COMRAM] unsigned int 
 20405 ;; Registers used:
 20406 ;;		wreg, status,2, status,0
 20407 ;; Tracked objects:
 20408 ;;		On entry : 0/0
 20409 ;;		On exit  : 0/0
 20410 ;;		Unchanged: 0/0
 20411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20413 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20415 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20416 ;;Total ram usage:        7 bytes
 20417 ;; Hardware stack levels used:    1
 20418 ;; This function calls:
 20419 ;;		Nothing
 20420 ;; This function is called by:
 20421 ;;		_printSortTimer
 20422 ;;		i2_printf
 20423 ;; This function uses a non-reentrant model
 20424 ;;
 20425                           
 20426                           	psect	text83
 20427  00406A                     __ptext83:
 20428                           	opt stack 0
 20429  00406A                     i2___lwdiv:
 20430                           	opt stack 20
 20431                           
 20432                           ;incstack = 0
 20433  00406A  0E00               	movlw	0
 20434  00406C  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20435  00406E  0E00               	movlw	0
 20436  004070  6E0A               	movwf	i2___lwdiv@quotient,c
 20437  004072  5008               	movf	i2___lwdiv@divisor,w,c
 20438  004074  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20439  004076  B4D8               	btfsc	status,2,c
 20440  004078  D01C               	goto	i2l1706
 20441  00407A  0E01               	movlw	1
 20442  00407C  6E0C               	movwf	i2___lwdiv@counter,c
 20443  00407E  D004               	goto	i2l5375
 20444  004080                     i2l5373:
 20445  004080  90D8               	bcf	status,0,c
 20446  004082  3608               	rlcf	i2___lwdiv@divisor,f,c
 20447  004084  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20448  004086  2A0C               	incf	i2___lwdiv@counter,f,c
 20449  004088                     i2l5375:
 20450  004088  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20451  00408A  D7FA               	goto	i2l5373
 20452  00408C                     i2l5377:
 20453  00408C  90D8               	bcf	status,0,c
 20454  00408E  360A               	rlcf	i2___lwdiv@quotient,f,c
 20455  004090  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20456  004092  5008               	movf	i2___lwdiv@divisor,w,c
 20457  004094  5C06               	subwf	i2___lwdiv@dividend,w,c
 20458  004096  5009               	movf	i2___lwdiv@divisor+1,w,c
 20459  004098  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20460  00409A  A0D8               	btfss	status,0,c
 20461  00409C  D005               	goto	i2l5385
 20462  00409E  5008               	movf	i2___lwdiv@divisor,w,c
 20463  0040A0  5E06               	subwf	i2___lwdiv@dividend,f,c
 20464  0040A2  5009               	movf	i2___lwdiv@divisor+1,w,c
 20465  0040A4  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20466  0040A6  800A               	bsf	i2___lwdiv@quotient,0,c
 20467  0040A8                     i2l5385:
 20468  0040A8  90D8               	bcf	status,0,c
 20469  0040AA  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20470  0040AC  3208               	rrcf	i2___lwdiv@divisor,f,c
 20471  0040AE  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20472  0040B0  D7ED               	goto	i2l5377
 20473  0040B2                     i2l1706:
 20474  0040B2  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20475  0040B6  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20476  0040BA  0012               	return		;funcret
 20477  0040BC                     __end_ofi2___lwdiv:
 20478                           	opt stack 0
 20479                           pclatu	equ	0xFFB
 20480                           pclath	equ	0xFFA
 20481                           tblptru	equ	0xFF8
 20482                           tblptrh	equ	0xFF7
 20483                           tblptrl	equ	0xFF6
 20484                           tablat	equ	0xFF5
 20485                           prodh	equ	0xFF4
 20486                           prodl	equ	0xFF3
 20487                           intcon	equ	0xFF2
 20488                           intcon2	equ	0xFF1
 20489                           intcon3	equ	0xFF0
 20490                           indf0	equ	0xFEF
 20491                           postinc0	equ	0xFEE
 20492                           fsr0h	equ	0xFEA
 20493                           fsr0l	equ	0xFE9
 20494                           wreg	equ	0xFE8
 20495                           postdec1	equ	0xFE5
 20496                           fsr1h	equ	0xFE2
 20497                           fsr1l	equ	0xFE1
 20498                           indf2	equ	0xFDF
 20499                           postinc2	equ	0xFDE
 20500                           postdec2	equ	0xFDD
 20501                           fsr2h	equ	0xFDA
 20502                           fsr2l	equ	0xFD9
 20503                           status	equ	0xFD8
 20504                           
 20505 ;; *************** function i2_lcdInst *****************
 20506 ;; Defined at:
 20507 ;;		line 15 in file "lcd.c"
 20508 ;; Parameters:    Size  Location     Type
 20509 ;;  data            1    wreg     unsigned char 
 20510 ;; Auto vars:     Size  Location     Type
 20511 ;;  data            1    2[COMRAM] unsigned char 
 20512 ;; Return value:  Size  Location     Type
 20513 ;;                  1    wreg      void 
 20514 ;; Registers used:
 20515 ;;		wreg, status,2, status,0, cstack
 20516 ;; Tracked objects:
 20517 ;;		On entry : 0/0
 20518 ;;		On exit  : 0/0
 20519 ;;		Unchanged: 0/0
 20520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20525 ;;Total ram usage:        1 bytes
 20526 ;; Hardware stack levels used:    1
 20527 ;; Hardware stack levels required when called:    1
 20528 ;; This function calls:
 20529 ;;		i2_lcdNibble
 20530 ;; This function is called by:
 20531 ;;		_change_state_to_menu_11
 20532 ;;		_change_state_to_menu_23
 20533 ;;		_change_state_to_logs_11
 20534 ;;		_change_state_to_logs_12
 20535 ;;		_change_state_to_logs_22
 20536 ;;		_change_state_to_logs_23
 20537 ;;		_change_state_to_logs_33
 20538 ;;		_change_state_to_logs_34
 20539 ;;		_printSortTimer
 20540 ;;		i2_change_state_to_menu_start
 20541 ;;		i2_change_state_to_menu_12
 20542 ;;		i2_change_state_to_menu_22
 20543 ;;		i2_printRTC
 20544 ;; This function uses a non-reentrant model
 20545 ;;
 20546                           
 20547                           	psect	text84
 20548  0047DE                     __ptext84:
 20549                           	opt stack 0
 20550  0047DE                     i2_lcdInst:
 20551                           	opt stack 19
 20552                           
 20553                           ;incstack = 0
 20554                           ;i2lcdInst@data stored from wreg
 20555  0047DE  6E03               	movwf	i2lcdInst@data,c
 20556                           
 20557                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20558  0047E0  948C               	bcf	3980,2,c	;volatile
 20559                           
 20560                           ;lcd.c: 17: lcdNibble(data);
 20561  0047E2  5003               	movf	i2lcdInst@data,w,c
 20562  0047E4  ECE0  F01F         	call	i2_lcdNibble
 20563  0047E8  0012               	return		;funcret
 20564  0047EA                     __end_ofi2_lcdInst:
 20565                           	opt stack 0
 20566                           pclatu	equ	0xFFB
 20567                           pclath	equ	0xFFA
 20568                           tblptru	equ	0xFF8
 20569                           tblptrh	equ	0xFF7
 20570                           tblptrl	equ	0xFF6
 20571                           tablat	equ	0xFF5
 20572                           prodh	equ	0xFF4
 20573                           prodl	equ	0xFF3
 20574                           intcon	equ	0xFF2
 20575                           intcon2	equ	0xFF1
 20576                           intcon3	equ	0xFF0
 20577                           indf0	equ	0xFEF
 20578                           postinc0	equ	0xFEE
 20579                           fsr0h	equ	0xFEA
 20580                           fsr0l	equ	0xFE9
 20581                           wreg	equ	0xFE8
 20582                           postdec1	equ	0xFE5
 20583                           fsr1h	equ	0xFE2
 20584                           fsr1l	equ	0xFE1
 20585                           indf2	equ	0xFDF
 20586                           postinc2	equ	0xFDE
 20587                           postdec2	equ	0xFDD
 20588                           fsr2h	equ	0xFDA
 20589                           fsr2l	equ	0xFD9
 20590                           status	equ	0xFD8
 20591                           
 20592 ;; *************** function i2_lcdNibble *****************
 20593 ;; Defined at:
 20594 ;;		line 25 in file "lcd.c"
 20595 ;; Parameters:    Size  Location     Type
 20596 ;;  data            1    wreg     unsigned char 
 20597 ;; Auto vars:     Size  Location     Type
 20598 ;;  data            1    1[COMRAM] unsigned char 
 20599 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20600 ;; Return value:  Size  Location     Type
 20601 ;;                  1    wreg      void 
 20602 ;; Registers used:
 20603 ;;		wreg, status,2, status,0
 20604 ;; Tracked objects:
 20605 ;;		On entry : 0/0
 20606 ;;		On exit  : 0/0
 20607 ;;		Unchanged: 0/0
 20608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20613 ;;Total ram usage:        2 bytes
 20614 ;; Hardware stack levels used:    1
 20615 ;; This function calls:
 20616 ;;		Nothing
 20617 ;; This function is called by:
 20618 ;;		i2_lcdInst
 20619 ;;		i2_putch
 20620 ;; This function uses a non-reentrant model
 20621 ;;
 20622                           
 20623                           	psect	text85
 20624  003FC0                     __ptext85:
 20625                           	opt stack 0
 20626  003FC0                     i2_lcdNibble:
 20627                           	opt stack 19
 20628                           
 20629                           ;incstack = 0
 20630                           ;i2lcdNibble@data stored from wreg
 20631  003FC0  6E02               	movwf	i2lcdNibble@data,c
 20632                           
 20633                           ;lcd.c: 27: char temp = data & 0xF0;
 20634  003FC2  5002               	movf	i2lcdNibble@data,w,c
 20635  003FC4  0BF0               	andlw	240
 20636  003FC6  6E01               	movwf	i2lcdNibble@temp,c
 20637                           
 20638                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20639  003FC8  508C               	movf	3980,w,c	;volatile
 20640  003FCA  0B0F               	andlw	15
 20641  003FCC  6E8C               	movwf	3980,c	;volatile
 20642                           
 20643                           ;lcd.c: 29: LATD = temp | LATD;
 20644  003FCE  5001               	movf	i2lcdNibble@temp,w,c
 20645  003FD0  108C               	iorwf	3980,w,c	;volatile
 20646  003FD2  6E8C               	movwf	3980,c	;volatile
 20647                           
 20648                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20649  003FD4  868C               	bsf	3980,3,c	;volatile
 20650                           
 20651                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20652  003FD6  0E42               	movlw	66
 20653  003FD8                     i2u826_47:
 20654  003FD8  2EE8               	decfsz	wreg,f,c
 20655  003FDA  D7FE               	bra	i2u826_47
 20656  003FDC  D000               	nop2	
 20657                           
 20658                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20659  003FDE  968C               	bcf	3980,3,c	;volatile
 20660                           
 20661                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20662  003FE0  0E42               	movlw	66
 20663  003FE2                     i2u827_47:
 20664  003FE2  2EE8               	decfsz	wreg,f,c
 20665  003FE4  D7FE               	bra	i2u827_47
 20666  003FE6  D000               	nop2	
 20667                           
 20668                           ;lcd.c: 36: data = data << 4;
 20669  003FE8  3802               	swapf	i2lcdNibble@data,w,c
 20670  003FEA  0BF0               	andlw	240
 20671  003FEC  6E02               	movwf	i2lcdNibble@data,c
 20672                           
 20673                           ;lcd.c: 38: temp = data & 0xF0;
 20674  003FEE  5002               	movf	i2lcdNibble@data,w,c
 20675  003FF0  0BF0               	andlw	240
 20676  003FF2  6E01               	movwf	i2lcdNibble@temp,c
 20677                           
 20678                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20679  003FF4  508C               	movf	3980,w,c	;volatile
 20680  003FF6  0B0F               	andlw	15
 20681  003FF8  6E8C               	movwf	3980,c	;volatile
 20682                           
 20683                           ;lcd.c: 40: LATD = temp | LATD;
 20684  003FFA  5001               	movf	i2lcdNibble@temp,w,c
 20685  003FFC  108C               	iorwf	3980,w,c	;volatile
 20686  003FFE  6E8C               	movwf	3980,c	;volatile
 20687                           
 20688                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20689  004000  868C               	bsf	3980,3,c	;volatile
 20690                           
 20691                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20692  004002  0E42               	movlw	66
 20693  004004                     i2u828_47:
 20694  004004  2EE8               	decfsz	wreg,f,c
 20695  004006  D7FE               	bra	i2u828_47
 20696  004008  D000               	nop2	
 20697                           
 20698                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20699  00400A  968C               	bcf	3980,3,c	;volatile
 20700                           
 20701                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20702  00400C  0E42               	movlw	66
 20703  00400E                     i2u829_47:
 20704  00400E  2EE8               	decfsz	wreg,f,c
 20705  004010  D7FE               	bra	i2u829_47
 20706  004012  D000               	nop2	
 20707  004014  0012               	return		;funcret
 20708  004016                     __end_ofi2_lcdNibble:
 20709                           	opt stack 0
 20710                           pclatu	equ	0xFFB
 20711                           pclath	equ	0xFFA
 20712                           tblptru	equ	0xFF8
 20713                           tblptrh	equ	0xFF7
 20714                           tblptrl	equ	0xFF6
 20715                           tablat	equ	0xFF5
 20716                           prodh	equ	0xFF4
 20717                           prodl	equ	0xFF3
 20718                           intcon	equ	0xFF2
 20719                           intcon2	equ	0xFF1
 20720                           intcon3	equ	0xFF0
 20721                           indf0	equ	0xFEF
 20722                           postinc0	equ	0xFEE
 20723                           fsr0h	equ	0xFEA
 20724                           fsr0l	equ	0xFE9
 20725                           wreg	equ	0xFE8
 20726                           postdec1	equ	0xFE5
 20727                           fsr1h	equ	0xFE2
 20728                           fsr1l	equ	0xFE1
 20729                           indf2	equ	0xFDF
 20730                           postinc2	equ	0xFDE
 20731                           postdec2	equ	0xFDD
 20732                           fsr2h	equ	0xFDA
 20733                           fsr2l	equ	0xFD9
 20734                           status	equ	0xFD8
 20735                           
 20736 ;; *************** function i2_getRTC *****************
 20737 ;; Defined at:
 20738 ;;		line 44 in file "RTC.c"
 20739 ;; Parameters:    Size  Location     Type
 20740 ;;		None
 20741 ;; Auto vars:     Size  Location     Type
 20742 ;;  getRTC          2    3[COMRAM] int 
 20743 ;; Return value:  Size  Location     Type
 20744 ;;                  1    wreg      void 
 20745 ;; Registers used:
 20746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20747 ;; Tracked objects:
 20748 ;;		On entry : 0/0
 20749 ;;		On exit  : 0/0
 20750 ;;		Unchanged: 0/0
 20751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;Total ram usage:        2 bytes
 20757 ;; Hardware stack levels used:    1
 20758 ;; Hardware stack levels required when called:    2
 20759 ;; This function calls:
 20760 ;;		i2_I2C_Master_Read
 20761 ;;		i2_I2C_Master_Start
 20762 ;;		i2_I2C_Master_Stop
 20763 ;;		i2_I2C_Master_Write
 20764 ;; This function is called by:
 20765 ;;		_printSortTimer
 20766 ;;		i2_printRTC
 20767 ;; This function uses a non-reentrant model
 20768 ;;
 20769                           
 20770                           	psect	text86
 20771  003CB0                     __ptext86:
 20772                           	opt stack 0
 20773  003CB0                     i2_getRTC:
 20774                           	opt stack 18
 20775                           
 20776                           ;RTC.c: 48: I2C_Master_Start();
 20777                           
 20778                           ;incstack = 0
 20779  003CB0  EC0F  F024         	call	i2_I2C_Master_Start	;wreg free
 20780                           
 20781                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20782  003CB4  0E00               	movlw	0
 20783  003CB6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20784  003CB8  0ED0               	movlw	208
 20785  003CBA  6E02               	movwf	i2I2C_Master_Write@d,c
 20786  003CBC  ECFA  F023         	call	i2_I2C_Master_Write	;wreg free
 20787                           
 20788                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20789  003CC0  0E00               	movlw	0
 20790  003CC2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20791  003CC4  0E00               	movlw	0
 20792  003CC6  6E02               	movwf	i2I2C_Master_Write@d,c
 20793  003CC8  ECFA  F023         	call	i2_I2C_Master_Write	;wreg free
 20794                           
 20795                           ;RTC.c: 51: I2C_Master_Stop();
 20796  003CCC  EC0B  F024         	call	i2_I2C_Master_Stop	;wreg free
 20797                           
 20798                           ;RTC.c: 54: I2C_Master_Start();
 20799  003CD0  EC0F  F024         	call	i2_I2C_Master_Start	;wreg free
 20800                           
 20801                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20802  003CD4  0E00               	movlw	0
 20803  003CD6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20804  003CD8  0ED1               	movlw	209
 20805  003CDA  6E02               	movwf	i2I2C_Master_Write@d,c
 20806  003CDC  ECFA  F023         	call	i2_I2C_Master_Write	;wreg free
 20807                           
 20808                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20809  003CE0  0E00               	movlw	0
 20810  003CE2  6E05               	movwf	i2getRTC@i+1,c
 20811  003CE4  0E00               	movlw	0
 20812  003CE6  6E04               	movwf	i2getRTC@i,c
 20813  003CE8                     i2l5631:
 20814  003CE8  BE05               	btfsc	i2getRTC@i+1,7,c
 20815  003CEA  D006               	goto	i2l5635
 20816  003CEC  5005               	movf	i2getRTC@i+1,w,c
 20817  003CEE  E111               	bnz	i2l5641
 20818  003CF0  0E06               	movlw	6
 20819  003CF2  5C04               	subwf	i2getRTC@i,w,c
 20820  003CF4  B0D8               	btfsc	status,0,c
 20821  003CF6  D00D               	goto	i2l5641
 20822  003CF8                     i2l5635:
 20823                           
 20824                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20825  003CF8  0E24               	movlw	low _time
 20826  003CFA  2404               	addwf	i2getRTC@i,w,c
 20827  003CFC  6ED9               	movwf	fsr2l,c
 20828  003CFE  0E01               	movlw	high _time
 20829  003D00  2005               	addwfc	i2getRTC@i+1,w,c
 20830  003D02  6EDA               	movwf	fsr2h,c
 20831  003D04  0E01               	movlw	1
 20832  003D06  EC4E  F023         	call	i2_I2C_Master_Read
 20833  003D0A  6EDF               	movwf	indf2,c
 20834  003D0C  4A04               	infsnz	i2getRTC@i,f,c
 20835  003D0E  2A05               	incf	i2getRTC@i+1,f,c
 20836  003D10  D7EB               	goto	i2l5631
 20837  003D12                     i2l5641:
 20838                           
 20839                           ;RTC.c: 58: }
 20840                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20841  003D12  0E00               	movlw	0
 20842  003D14  EC4E  F023         	call	i2_I2C_Master_Read
 20843  003D18  0101               	movlb	1	; () banked
 20844  003D1A  6F2A               	movwf	(_time+6)& (0+255),b
 20845                           
 20846                           ;RTC.c: 60: I2C_Master_Stop();
 20847  003D1C  EC0B  F024         	call	i2_I2C_Master_Stop	;wreg free
 20848  003D20  0012               	return		;funcret
 20849  003D22                     __end_ofi2_getRTC:
 20850                           	opt stack 0
 20851                           pclatu	equ	0xFFB
 20852                           pclath	equ	0xFFA
 20853                           tblptru	equ	0xFF8
 20854                           tblptrh	equ	0xFF7
 20855                           tblptrl	equ	0xFF6
 20856                           tablat	equ	0xFF5
 20857                           prodh	equ	0xFF4
 20858                           prodl	equ	0xFF3
 20859                           intcon	equ	0xFF2
 20860                           intcon2	equ	0xFF1
 20861                           intcon3	equ	0xFF0
 20862                           indf0	equ	0xFEF
 20863                           postinc0	equ	0xFEE
 20864                           fsr0h	equ	0xFEA
 20865                           fsr0l	equ	0xFE9
 20866                           wreg	equ	0xFE8
 20867                           postdec1	equ	0xFE5
 20868                           fsr1h	equ	0xFE2
 20869                           fsr1l	equ	0xFE1
 20870                           indf2	equ	0xFDF
 20871                           postinc2	equ	0xFDE
 20872                           postdec2	equ	0xFDD
 20873                           fsr2h	equ	0xFDA
 20874                           fsr2l	equ	0xFD9
 20875                           status	equ	0xFD8
 20876                           
 20877 ;; *************** function i2_I2C_Master_Write *****************
 20878 ;; Defined at:
 20879 ;;		line 49 in file "I2C.c"
 20880 ;; Parameters:    Size  Location     Type
 20881 ;;  d               2    1[COMRAM] unsigned int 
 20882 ;; Auto vars:     Size  Location     Type
 20883 ;;		None
 20884 ;; Return value:  Size  Location     Type
 20885 ;;                  1    wreg      void 
 20886 ;; Registers used:
 20887 ;;		wreg, status,2, status,0, cstack
 20888 ;; Tracked objects:
 20889 ;;		On entry : 0/0
 20890 ;;		On exit  : 0/0
 20891 ;;		Unchanged: 0/0
 20892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20893 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20896 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20897 ;;Total ram usage:        2 bytes
 20898 ;; Hardware stack levels used:    1
 20899 ;; Hardware stack levels required when called:    1
 20900 ;; This function calls:
 20901 ;;		i2_I2C_Master_Wait
 20902 ;; This function is called by:
 20903 ;;		i2_getRTC
 20904 ;; This function uses a non-reentrant model
 20905 ;;
 20906                           
 20907                           	psect	text87
 20908  0047F4                     __ptext87:
 20909                           	opt stack 0
 20910  0047F4                     i2_I2C_Master_Write:
 20911                           	opt stack 18
 20912                           
 20913                           ;I2C.c: 51: I2C_Master_Wait();
 20914                           
 20915                           ;incstack = 0
 20916  0047F4  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 20917                           
 20918                           ;I2C.c: 52: SSPBUF = d;
 20919  0047F8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20920  0047FC  0012               	return		;funcret
 20921  0047FE                     __end_ofi2_I2C_Master_Write:
 20922                           	opt stack 0
 20923                           pclatu	equ	0xFFB
 20924                           pclath	equ	0xFFA
 20925                           tblptru	equ	0xFF8
 20926                           tblptrh	equ	0xFF7
 20927                           tblptrl	equ	0xFF6
 20928                           tablat	equ	0xFF5
 20929                           prodh	equ	0xFF4
 20930                           prodl	equ	0xFF3
 20931                           intcon	equ	0xFF2
 20932                           intcon2	equ	0xFF1
 20933                           intcon3	equ	0xFF0
 20934                           indf0	equ	0xFEF
 20935                           postinc0	equ	0xFEE
 20936                           fsr0h	equ	0xFEA
 20937                           fsr0l	equ	0xFE9
 20938                           wreg	equ	0xFE8
 20939                           postdec1	equ	0xFE5
 20940                           fsr1h	equ	0xFE2
 20941                           fsr1l	equ	0xFE1
 20942                           indf2	equ	0xFDF
 20943                           postinc2	equ	0xFDE
 20944                           postdec2	equ	0xFDD
 20945                           fsr2h	equ	0xFDA
 20946                           fsr2l	equ	0xFD9
 20947                           status	equ	0xFD8
 20948                           
 20949 ;; *************** function i2_I2C_Master_Stop *****************
 20950 ;; Defined at:
 20951 ;;		line 43 in file "I2C.c"
 20952 ;; Parameters:    Size  Location     Type
 20953 ;;		None
 20954 ;; Auto vars:     Size  Location     Type
 20955 ;;		None
 20956 ;; Return value:  Size  Location     Type
 20957 ;;                  1    wreg      void 
 20958 ;; Registers used:
 20959 ;;		wreg, status,2, status,0, cstack
 20960 ;; Tracked objects:
 20961 ;;		On entry : 0/0
 20962 ;;		On exit  : 0/0
 20963 ;;		Unchanged: 0/0
 20964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20969 ;;Total ram usage:        0 bytes
 20970 ;; Hardware stack levels used:    1
 20971 ;; Hardware stack levels required when called:    1
 20972 ;; This function calls:
 20973 ;;		i2_I2C_Master_Wait
 20974 ;; This function is called by:
 20975 ;;		i2_getRTC
 20976 ;; This function uses a non-reentrant model
 20977 ;;
 20978                           
 20979                           	psect	text88
 20980  004816                     __ptext88:
 20981                           	opt stack 0
 20982  004816                     i2_I2C_Master_Stop:
 20983                           	opt stack 18
 20984                           
 20985                           ;I2C.c: 45: I2C_Master_Wait();
 20986                           
 20987                           ;incstack = 0
 20988  004816  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 20989                           
 20990                           ;I2C.c: 46: PEN = 1;
 20991  00481A  84C5               	bsf	4037,2,c	;volatile
 20992  00481C  0012               	return		;funcret
 20993  00481E                     __end_ofi2_I2C_Master_Stop:
 20994                           	opt stack 0
 20995                           pclatu	equ	0xFFB
 20996                           pclath	equ	0xFFA
 20997                           tblptru	equ	0xFF8
 20998                           tblptrh	equ	0xFF7
 20999                           tblptrl	equ	0xFF6
 21000                           tablat	equ	0xFF5
 21001                           prodh	equ	0xFF4
 21002                           prodl	equ	0xFF3
 21003                           intcon	equ	0xFF2
 21004                           intcon2	equ	0xFF1
 21005                           intcon3	equ	0xFF0
 21006                           indf0	equ	0xFEF
 21007                           postinc0	equ	0xFEE
 21008                           fsr0h	equ	0xFEA
 21009                           fsr0l	equ	0xFE9
 21010                           wreg	equ	0xFE8
 21011                           postdec1	equ	0xFE5
 21012                           fsr1h	equ	0xFE2
 21013                           fsr1l	equ	0xFE1
 21014                           indf2	equ	0xFDF
 21015                           postinc2	equ	0xFDE
 21016                           postdec2	equ	0xFDD
 21017                           fsr2h	equ	0xFDA
 21018                           fsr2l	equ	0xFD9
 21019                           status	equ	0xFD8
 21020                           
 21021 ;; *************** function i2_I2C_Master_Start *****************
 21022 ;; Defined at:
 21023 ;;		line 31 in file "I2C.c"
 21024 ;; Parameters:    Size  Location     Type
 21025 ;;		None
 21026 ;; Auto vars:     Size  Location     Type
 21027 ;;		None
 21028 ;; Return value:  Size  Location     Type
 21029 ;;                  1    wreg      void 
 21030 ;; Registers used:
 21031 ;;		wreg, status,2, status,0, cstack
 21032 ;; Tracked objects:
 21033 ;;		On entry : 0/0
 21034 ;;		On exit  : 0/0
 21035 ;;		Unchanged: 0/0
 21036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21041 ;;Total ram usage:        0 bytes
 21042 ;; Hardware stack levels used:    1
 21043 ;; Hardware stack levels required when called:    1
 21044 ;; This function calls:
 21045 ;;		i2_I2C_Master_Wait
 21046 ;; This function is called by:
 21047 ;;		i2_getRTC
 21048 ;; This function uses a non-reentrant model
 21049 ;;
 21050                           
 21051                           	psect	text89
 21052  00481E                     __ptext89:
 21053                           	opt stack 0
 21054  00481E                     i2_I2C_Master_Start:
 21055                           	opt stack 18
 21056                           
 21057                           ;I2C.c: 33: I2C_Master_Wait();
 21058                           
 21059                           ;incstack = 0
 21060  00481E  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21061                           
 21062                           ;I2C.c: 34: SEN = 1;
 21063  004822  80C5               	bsf	4037,0,c	;volatile
 21064  004824  0012               	return		;funcret
 21065  004826                     __end_ofi2_I2C_Master_Start:
 21066                           	opt stack 0
 21067                           pclatu	equ	0xFFB
 21068                           pclath	equ	0xFFA
 21069                           tblptru	equ	0xFF8
 21070                           tblptrh	equ	0xFF7
 21071                           tblptrl	equ	0xFF6
 21072                           tablat	equ	0xFF5
 21073                           prodh	equ	0xFF4
 21074                           prodl	equ	0xFF3
 21075                           intcon	equ	0xFF2
 21076                           intcon2	equ	0xFF1
 21077                           intcon3	equ	0xFF0
 21078                           indf0	equ	0xFEF
 21079                           postinc0	equ	0xFEE
 21080                           fsr0h	equ	0xFEA
 21081                           fsr0l	equ	0xFE9
 21082                           wreg	equ	0xFE8
 21083                           postdec1	equ	0xFE5
 21084                           fsr1h	equ	0xFE2
 21085                           fsr1l	equ	0xFE1
 21086                           indf2	equ	0xFDF
 21087                           postinc2	equ	0xFDE
 21088                           postdec2	equ	0xFDD
 21089                           fsr2h	equ	0xFDA
 21090                           fsr2l	equ	0xFD9
 21091                           status	equ	0xFD8
 21092                           
 21093 ;; *************** function i2_I2C_Master_Read *****************
 21094 ;; Defined at:
 21095 ;;		line 55 in file "I2C.c"
 21096 ;; Parameters:    Size  Location     Type
 21097 ;;  a               1    wreg     unsigned char 
 21098 ;; Auto vars:     Size  Location     Type
 21099 ;;  a               1    1[COMRAM] unsigned char 
 21100 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21101 ;; Return value:  Size  Location     Type
 21102 ;;                  1    wreg      unsigned char 
 21103 ;; Registers used:
 21104 ;;		wreg, status,2, status,0, cstack
 21105 ;; Tracked objects:
 21106 ;;		On entry : 0/0
 21107 ;;		On exit  : 0/0
 21108 ;;		Unchanged: 0/0
 21109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21111 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21113 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21114 ;;Total ram usage:        2 bytes
 21115 ;; Hardware stack levels used:    1
 21116 ;; Hardware stack levels required when called:    1
 21117 ;; This function calls:
 21118 ;;		i2_I2C_Master_Wait
 21119 ;; This function is called by:
 21120 ;;		i2_getRTC
 21121 ;; This function uses a non-reentrant model
 21122 ;;
 21123                           
 21124                           	psect	text90
 21125  00469C                     __ptext90:
 21126                           	opt stack 0
 21127  00469C                     i2_I2C_Master_Read:
 21128                           	opt stack 18
 21129                           
 21130                           ;incstack = 0
 21131                           ;i2I2C_Master_Read@a stored from wreg
 21132  00469C  6E02               	movwf	i2I2C_Master_Read@a,c
 21133                           
 21134                           ;I2C.c: 57: unsigned char temp;
 21135                           ;I2C.c: 58: I2C_Master_Wait();
 21136  00469E  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21137                           
 21138                           ;I2C.c: 59: RCEN = 1;
 21139  0046A2  86C5               	bsf	4037,3,c	;volatile
 21140                           
 21141                           ;I2C.c: 60: I2C_Master_Wait();
 21142  0046A4  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21143                           
 21144                           ;I2C.c: 61: temp = SSPBUF;
 21145  0046A8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21146                           
 21147                           ;I2C.c: 62: I2C_Master_Wait();
 21148  0046AC  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21149                           
 21150                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21151  0046B0  5002               	movf	i2I2C_Master_Read@a,w,c
 21152  0046B2  A4D8               	btfss	status,2,c
 21153  0046B4  D002               	goto	i2u367_40
 21154  0046B6  8AC5               	bsf	4037,5,c	;volatile
 21155  0046B8  D001               	goto	i2l5339
 21156  0046BA                     i2u367_40:
 21157  0046BA  9AC5               	bcf	4037,5,c	;volatile
 21158  0046BC                     i2l5339:
 21159                           
 21160                           ;I2C.c: 64: ACKEN = 1;
 21161  0046BC  88C5               	bsf	4037,4,c	;volatile
 21162                           
 21163                           ;I2C.c: 65: return temp;
 21164  0046BE  5003               	movf	i2I2C_Master_Read@temp,w,c
 21165  0046C0  0012               	return	
 21166  0046C2                     __end_ofi2_I2C_Master_Read:
 21167                           	opt stack 0
 21168                           pclatu	equ	0xFFB
 21169                           pclath	equ	0xFFA
 21170                           tblptru	equ	0xFF8
 21171                           tblptrh	equ	0xFF7
 21172                           tblptrl	equ	0xFF6
 21173                           tablat	equ	0xFF5
 21174                           prodh	equ	0xFF4
 21175                           prodl	equ	0xFF3
 21176                           intcon	equ	0xFF2
 21177                           intcon2	equ	0xFF1
 21178                           intcon3	equ	0xFF0
 21179                           indf0	equ	0xFEF
 21180                           postinc0	equ	0xFEE
 21181                           fsr0h	equ	0xFEA
 21182                           fsr0l	equ	0xFE9
 21183                           wreg	equ	0xFE8
 21184                           postdec1	equ	0xFE5
 21185                           fsr1h	equ	0xFE2
 21186                           fsr1l	equ	0xFE1
 21187                           indf2	equ	0xFDF
 21188                           postinc2	equ	0xFDE
 21189                           postdec2	equ	0xFDD
 21190                           fsr2h	equ	0xFDA
 21191                           fsr2l	equ	0xFD9
 21192                           status	equ	0xFD8
 21193                           
 21194 ;; *************** function i2_I2C_Master_Wait *****************
 21195 ;; Defined at:
 21196 ;;		line 26 in file "I2C.c"
 21197 ;; Parameters:    Size  Location     Type
 21198 ;;		None
 21199 ;; Auto vars:     Size  Location     Type
 21200 ;;		None
 21201 ;; Return value:  Size  Location     Type
 21202 ;;                  1    wreg      void 
 21203 ;; Registers used:
 21204 ;;		wreg, status,2, status,0
 21205 ;; Tracked objects:
 21206 ;;		On entry : 0/0
 21207 ;;		On exit  : 0/0
 21208 ;;		Unchanged: 0/0
 21209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21213 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21214 ;;Total ram usage:        1 bytes
 21215 ;; Hardware stack levels used:    1
 21216 ;; This function calls:
 21217 ;;		Nothing
 21218 ;; This function is called by:
 21219 ;;		i2_I2C_Master_Start
 21220 ;;		i2_I2C_Master_Stop
 21221 ;;		i2_I2C_Master_Write
 21222 ;;		i2_I2C_Master_Read
 21223 ;; This function uses a non-reentrant model
 21224 ;;
 21225                           
 21226                           	psect	text91
 21227  0047A0                     __ptext91:
 21228                           	opt stack 0
 21229  0047A0                     i2_I2C_Master_Wait:
 21230                           	opt stack 18
 21231  0047A0                     i2l66:
 21232  0047A0  B4C7               	btfsc	4039,2,c	;volatile
 21233  0047A2  D7FE               	goto	i2l66
 21234  0047A4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21235  0047A8  0E1F               	movlw	31
 21236  0047AA  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21237  0047AC  B4D8               	btfsc	status,2,c
 21238  0047AE  0012               	return	
 21239  0047B0  D7F7               	goto	i2l66
 21240  0047B2                     __end_ofi2_I2C_Master_Wait:
 21241                           	opt stack 0
 21242                           pclatu	equ	0xFFB
 21243                           pclath	equ	0xFFA
 21244                           tblptru	equ	0xFF8
 21245                           tblptrh	equ	0xFF7
 21246                           tblptrl	equ	0xFF6
 21247                           tablat	equ	0xFF5
 21248                           prodh	equ	0xFF4
 21249                           prodl	equ	0xFF3
 21250                           intcon	equ	0xFF2
 21251                           intcon2	equ	0xFF1
 21252                           intcon3	equ	0xFF0
 21253                           indf0	equ	0xFEF
 21254                           postinc0	equ	0xFEE
 21255                           fsr0h	equ	0xFEA
 21256                           fsr0l	equ	0xFE9
 21257                           wreg	equ	0xFE8
 21258                           postdec1	equ	0xFE5
 21259                           fsr1h	equ	0xFE2
 21260                           fsr1l	equ	0xFE1
 21261                           indf2	equ	0xFDF
 21262                           postinc2	equ	0xFDE
 21263                           postdec2	equ	0xFDD
 21264                           fsr2h	equ	0xFDA
 21265                           fsr2l	equ	0xFD9
 21266                           status	equ	0xFD8
 21267                           pclatu	equ	0xFFB
 21268                           pclath	equ	0xFFA
 21269                           tblptru	equ	0xFF8
 21270                           tblptrh	equ	0xFF7
 21271                           tblptrl	equ	0xFF6
 21272                           tablat	equ	0xFF5
 21273                           prodh	equ	0xFF4
 21274                           prodl	equ	0xFF3
 21275                           intcon	equ	0xFF2
 21276                           intcon2	equ	0xFF1
 21277                           intcon3	equ	0xFF0
 21278                           indf0	equ	0xFEF
 21279                           postinc0	equ	0xFEE
 21280                           fsr0h	equ	0xFEA
 21281                           fsr0l	equ	0xFE9
 21282                           wreg	equ	0xFE8
 21283                           postdec1	equ	0xFE5
 21284                           fsr1h	equ	0xFE2
 21285                           fsr1l	equ	0xFE1
 21286                           indf2	equ	0xFDF
 21287                           postinc2	equ	0xFDE
 21288                           postdec2	equ	0xFDD
 21289                           fsr2h	equ	0xFDA
 21290                           fsr2l	equ	0xFD9
 21291                           status	equ	0xFD8
 21292                           
 21293                           	psect	rparam
 21294  0000                     pclatu	equ	0xFFB
 21295                           pclath	equ	0xFFA
 21296                           tblptru	equ	0xFF8
 21297                           tblptrh	equ	0xFF7
 21298                           tblptrl	equ	0xFF6
 21299                           tablat	equ	0xFF5
 21300                           prodh	equ	0xFF4
 21301                           prodl	equ	0xFF3
 21302                           intcon	equ	0xFF2
 21303                           intcon2	equ	0xFF1
 21304                           intcon3	equ	0xFF0
 21305                           indf0	equ	0xFEF
 21306                           postinc0	equ	0xFEE
 21307                           fsr0h	equ	0xFEA
 21308                           fsr0l	equ	0xFE9
 21309                           wreg	equ	0xFE8
 21310                           postdec1	equ	0xFE5
 21311                           fsr1h	equ	0xFE2
 21312                           fsr1l	equ	0xFE1
 21313                           indf2	equ	0xFDF
 21314                           postinc2	equ	0xFDE
 21315                           postdec2	equ	0xFDD
 21316                           fsr2h	equ	0xFDA
 21317                           fsr2l	equ	0xFD9
 21318                           status	equ	0xFD8
 21319                           
 21320                           	psect	temp
 21321  00007E                     btemp:
 21322                           	opt stack 0
 21323  00007E                     	ds	1
 21324  0000                     int$flags	set	btemp
 21325                           pclatu	equ	0xFFB
 21326                           pclath	equ	0xFFA
 21327                           tblptru	equ	0xFF8
 21328                           tblptrh	equ	0xFF7
 21329                           tblptrl	equ	0xFF6
 21330                           tablat	equ	0xFF5
 21331                           prodh	equ	0xFF4
 21332                           prodl	equ	0xFF3
 21333                           intcon	equ	0xFF2
 21334                           intcon2	equ	0xFF1
 21335                           intcon3	equ	0xFF0
 21336                           indf0	equ	0xFEF
 21337                           postinc0	equ	0xFEE
 21338                           fsr0h	equ	0xFEA
 21339                           fsr0l	equ	0xFE9
 21340                           wreg	equ	0xFE8
 21341                           postdec1	equ	0xFE5
 21342                           fsr1h	equ	0xFE2
 21343                           fsr1l	equ	0xFE1
 21344                           indf2	equ	0xFDF
 21345                           postinc2	equ	0xFDE
 21346                           postdec2	equ	0xFDD
 21347                           fsr2h	equ	0xFDA
 21348                           fsr2l	equ	0xFD9
 21349                           status	equ	0xFD8


Data Sizes:
    Strings     1219
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_116(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _PusherTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  176826
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   19804
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15450
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4101
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10722
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9975
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21840
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20926
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43432
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12647
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79915
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _PusherTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8391
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13623
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8304
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTestA5                                         2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8279
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16481
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8144
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4101
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4101
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 19 17:37:35 2017

                                    _i 00E4                     i2_I2C_Master_Start 481E  
                   i2_I2C_Master_Write 47F4                                     l66 478C  
                                   _ID 2DAE                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 1FDE                                    l730 2B8C  
                                  l750 2EC6                                    l751 2EE0  
                                  l487 3622                                    l930 33F0  
                                  l943 4758                                    l952 3196  
                                  l796 3C76                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E6  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 442A        __end_of_change_state_to_menu_12 429A  
      __end_of_change_state_to_menu_22 4262        __end_of_change_state_to_menu_23 43FA  
         _f_can_coming_to_distribution 006F                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 451A        __end_of_change_state_to_logs_12 44EA  
      __end_of_change_state_to_logs_22 44BA        __end_of_change_state_to_logs_23 45A4  
      __end_of_change_state_to_logs_33 448A        __end_of_change_state_to_logs_34 445A  
                                 ??_ID 0088                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1101 0080                                   l1110 0240  
                                 l1111 028E                                   l1040 3324  
                                 l1105 0126                                   l1202 3F98  
                                 l1043 3344                                   l1108 018C  
                                 l1205 3FBA                                   l1109 01DA  
                                 l1222 3AB2                                   l1214 3A7E  
                                 l1135 05E8                                   l1063 3510  
                                 l1152 0858                                   l1072 1C88  
                                 l1066 3514                                   l1171 3B5E  
                                 l1147 0782                                   l1075 1C8C  
                                 l1172 3B62                                   l1173 3B66  
                                 l1165 3B3E                                   l1174 3B6A  
                                 l1175 3B6E                                   l1192 3962  
                                 l1177 3BAC                                   l1169 3B5A  
                                 l1186 3952                                   l1098 007C  
                                 l1259 13B6                                   l1195 3986  
                                 l1196 39A0                                   l1706 3C30  
                                 l1716 3E4A                                   l1653 37B0  
                                 l5311 3E18                                   l5231 45F6  
                                 l6031 3458                                   l5315 3E3C  
                                 l5307 3E06                                   l7003 075A  
                                 l6043 3490                                   l6035 3462  
                                 l5309 3E12                                   l7005 0760  
                                 l5229 45E4                                   l5253 456E  
                                 l6053 462C                                   l5271 461C  
                                 l5511 144A                                   l5423 117E  
                                 l6047 349A                                   l6039 347A  
                                 l5521 14A4                                   l5433 11AE  
                                 l7105 3970                                   l7033 07DC  
                                 l7009 076A                                   l6057 4642  
                                 l6401 2BB0                                   l5291 3BF2  
                                 l5523 14AE                                   l5427 1192  
                                 l7043 0804                                   l8011 335C  
                                 l5611 374A                                   l5541 150A  
                                 l5517 146C                                   l5429 11A4  
                                 l7141 3AA6                                   l7053 0842  
                                 l7037 07F4                                   l7029 07D2  
                                 l8021 337A                                   l8013 3362  
                                 l8005 334A                                   l6173 39E6  
                                 l6501 2F50                                   l6085 405E  
                                 l8101 3618                                   l5287 3BE0  
                                 l5551 157C                                   l5535 14E4  
                                 l5471 1332                                   l5455 1290  
                                 l5447 125E                                   l5439 11E2  
                                 l7063 0872                                   l7047 081C  
                                 l7039 07FA                                   l8015 3368  
                                 l8007 3350                                   l7311 38AC  
                                 l7303 3888                                   l5607 3734  
                                 l6183 3A28                                   l6503 2F6A  
                                 l8103 361E                                   l5289 3BEC  
                                 l5537 14F0                                   l5545 151E  
                                 l5529 14C8                                   l5465 1308  
                                 l5457 129C                                   l5481 137C  
                                 l5553 1588                                   l7161 3B72  
                                 l7073 089A                                   l7065 0878  
                                 l8017 336E                                   l8009 3356  
                                 l8025 3380                                   l7313 38B8  
                                 l5609 3744                                   l6177 39FC  
                                 l6417 2BEA                                   l5299 3C22  
                                 l5547 1524                                   l5475 135E  
                                 l5467 1314                                   l5459 12A2  
                                 l7083 08C2                                   l7075 08A0  
                                 l8019 3374                                   l7315 38BE  
                                 l7323 38F0                                   l7307 3898  
                                 l5619 379E                                   l6507 2F84  
                                 l6451 2E4A                                   l8107 3624  
                                 l5493 13EE                                   l5477 1376  
                                 l5469 131A                                   l7069 0882  
                                 l6701 00F0                                   l6605 1D94  
                                 l5565 3AF8                                   l5557 42A4  
                                 l5821 1FE8                                   l7413 0A6C  
                                 l6509 2FB2                                   l6461 2E7C  
                                 l7079 08AA                                   l6623 1E26  
                                 l7271 3698                                   l7327 3904  
                                 l7319 38E2                                   l5575 3B2E  
                                 l5559 42B0                                   l5831 207E  
                                 l5823 2006                                   l5815 1F5C  
                                 l7503 0D12                                   l7407 0A5C  
                                 l7423 0A92                                   _ADIE 007CEE  
                                 l5593 3C62                                   l5497 1408  
                                 l6705 00FA                                   l6617 1DE4  
                                 l7273 36A4                                   l7265 367A  
                                 l5569 3B0E                                   l5841 2114  
                                 l5833 209C                                   l5825 2024  
                                 l7513 0DC2                                   l7505 0D76  
                                 l7441 0AEE                                   l7417 0A84  
                                 l7409 0A62                                   l6465 2E8A  
                                 l5595 3C8C                                   l5499 140E  
                                 l6811 038E                                   l6803 0354  
                                 l6643 1EA2                                   l6635 1E72  
                                 l7291 36FC                                   l7283 36DA  
                                 l7275 36AA                                   l7259 3664  
                                 l5843 2132                                   l5835 20BA  
                                 l5827 2042                                   l7531 0E0E  
                                 l7523 0DEC                                   l7451 0B18  
                                 l6475 2EB0                                   l8091 35FC  
                                 l8083 35D2                                   l6821 03B6  
                                 l6709 0112                                   l5837 20D8  
                                 l5829 2060                                   l7613 0FE6  
                                 l7605 0FC4                                   l7517 0DDA  
                                 l7509 0DB8                                   l7445 0B06  
                                 l7437 0AE4                                   l7381 09D0  
                                 l6469 2E98                                   l6389 2B4A  
                                 l8093 3602                                   l8085 35E8  
                                 l6903 054C                                   l6815 0398  
                                 l6655 1EEA                                   l6647 1ED8  
                                 l7287 36E8                                   l5839 20F6  
                                 l5847 2150                                   l7631 104C  
                                 l7551 0ED4                                   l7527 0DF6  
                                 l7455 0B22                                   l7375 09B8  
                                 l6841 041C                                   l6825 03C0  
                                 l5849 21AE                                   l7609 0FCE  
                                 l7481 0BE6                                   l7393 0A04  
                                 l7385 09DA                                   l7377 09BE  
                                 l6497 2F1C                                   l8089 35F6  
                                 l6923 05C0                                   l6915 059E  
                                 l6907 0564                                   l6851 0444  
                                 l6819 03B0                                   l6659 1F20  
                                 l6587 1CDC                                   l7635 1056  
                                 l7555 0EDE                                   l7491 0C7C  
                                 l7483 0C04                                   l7475 0B8C  
                                 l7459 0B3A                                   l6499 2F36  
                                 l6925 05C6                                   l6845 0434  
                                 l6837 0412                                   l6829 03D8  
                                 l7653 10A2                                   l7645 1080  
                                 l7573 0F2A                                   l7565 0F08  
                                 l7493 0C9A                                   l7485 0C22  
                                 l7477 0BAA                                   l7389 09F2  
                                 l6951 0652                                   l6943 0630  
                                 l6919 05A8                                   l6871 04B8  
                                 l6863 0496                                   l6855 045C  
                                 l6847 043A                                   l7671 1100  
                                 l7639 106E                                   l7591 0F90  
                                 l7559 0EF6                                   l7495 0CB8  
                                 l7487 0C40                                   l7479 0BC8  
                                 l6961 067A                                   l6953 0658  
                                 l6929 05D0                                   l6881 04E0  
                                 l6873 04BE                                   l6793 032C  
                                 l6785 030A                                   l7649 108A  
                                 l7569 0F12                                   l7497 0CD6  
                                 l7489 0C5E                                   l5985 37D0  
                                 l6947 063A                                   l6867 04A0  
                                 l6795 0332                                   l6699 00EA  
                                 l7675 110A                                   l7595 0F9A  
                                 l7499 0CF4                                   l5995 385C  
                                 l6973 06BE                                   l6957 0662  
                                 l6893 0524                                   l6877 04C8  
                                 l6789 0314                                   l7693 1156  
                                 l7685 1134                                   l5989 37E6  
                                 l6983 06E6                                   l6799 033C  
                                 l7679 1122                                   l7599 0FB2  
                                 l7951 30D0                                   l6977 06D6  
                                 l6969 06B4                                   l6897 053C  
                                 l6889 051A                                   l7689 113E  
                                 l7697 1162                                   l6995 0738  
                                 l6987 06FE                                   l6979 06DC  
                                 l6899 0542                                   l7949 30BC  
                                 l6999 0742                                   l7975 3150  
                                 l7987 32C6                                   STR_1 FBC5  
                                 STR_2 FF27                                   STR_3 FBB3  
                                 STR_4 FE4A                                   STR_5 FBB3  
                                 STR_6 FE08                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5110 1F0E  
                                 u5200 01DA                                   u5040 1D1E  
                                 u5050 1D20                                   u5220 028E  
                                 u5118 1F12                                   u3800 419A  
                                 u5080 1EC6                                   u3570 456C  
                                 _PEIE 007F96                                   u5180 0126  
                                 u5088 1ECA                                   u4480 1FDE  
                                 u4465 3E84                                   u3850 12DC  
                                 u3770 414C                                   u4810 2B56  
                                 u7107 2E20                                   u3780 414E  
                                 _RCEN 007E2B                                   u7117 2ECA  
                                 u7037 2ADA                                   u3790 4198  
                                 u4830 2B8C                                   u8007 3F78  
                                 u3791 4194                                   u7207 34A2  
                                 u7127 2ED4                                   u7047 2BA0  
                                 u4920 2E3A                                   u3857 12D2  
                                 u8017 3FAC                                   u7217 41AA  
                                 u7137 2EF8                                   u7057 2C0A  
                                 u3890 1354                                   u8107 1A40  
                                 u8027 391C                                   u7307 0B54  
                                 u7227 41DE                                   u7147 4324  
                                 u7067 2C28                                   u4828 2B5A  
                                 u8117 1A74                                   u8037 398A  
                                 u7317 0DCA                                   u7237 08E2  
                                 u7157 2FC0                                   u7077 4034  
                                 u8207 3DAA                                   u8127 1AA8  
                                 u8047 3994                                   u7407 105E  
                                 u7327 0DFE                                   u7247 09E2  
                                 u7167 2FF4                                   u7087 4638  
                                 u4928 2E3E                                   u8217 3DB4  
                                 u3897 134A                                   u8137 1ADC  
                                 u8057 1924                                   u7417 1092  
                                 u7337 0E28                                   u7257 0A1E  
                                 u7177 3028                                   u7097 2DC4  
                                 i2l66 47A0                                   u4890 2DDE  
                                 u8227 3DE0                                   u8147 1B10  
                                 u8067 1970                                   u7507 1CCC  
                                 u7427 10BC                                   u7347 0EE6  
                                 u7267 0A74                                   u7187 340E  
                                 u8237 3DEA                                   u8157 1B44  
                                 u8077 19A4                                   u7517 1D34  
                                 u7437 1112                                   u7357 0F1A  
                                 u7277 0AA0                                   u7197 346A  
                                 u8247 3F52                                   u8167 1B78  
                                 u8087 19D8                                   u7607 34C0  
                                 u7527 1D88                                   u7447 1146  
                                 u7367 0F44                                   u7287 0AF6  
                                 u8177 1BAC                                   u8097 1A0C  
                                 u7617 3504                                   u7537 1DA8  
                                 u7457 32D4                                   u7377 0FA2  
                                 u7297 0B2A                                   u6850 3196  
                                 u4898 2DE2                                   u8187 1BE0  
                                 u7707 01EA                                   u7627 3526  
                                 u7547 1DD6                                   u7467 3318  
                                 u7387 0FD6                                   u8197 1C14  
                                 u7717 0250                                   u7637 002C  
                                 u7557 1E1A                                   u7477 1C38  
                                 u7397 1000                                   u7807 04A8  
                                 u7727 026E                                   u7647 0070  
                                 u7567 1E38                                   u7487 1C7C  
                                 u7817 04D0                                   u7737 029E  
                                 u7657 0092                                   u7577 1E66  
                                 u7497 1C9E                                   u7907 074A  
                                 u7827 052C                                   u7747 031C  
                                 u7667 0102                                   u7587 1E80  
                                 u7917 0772                                   u7837 0554  
                                 u7757 0344                                   u7677 0136  
                                 u7597 45EC                                   u7927 0794  
                                 u7847 05B0                                   u7767 03A0  
                                 u7687 019C                                   u7937 07E4  
                                 u7857 05D8                                   u7777 03C8  
                                 u7697 01BA                                   u7947 080C  
                                 u7867 0642                                   u7787 0424  
                                 u7957 085C                                   u7877 066A  
                                 u7797 044C                                   u7967 0866  
                                 u7887 06C6                                   u7977 088A  
                                 u7897 06EE                                   u7987 08B2  
                                 u7997 3A3E                                   _RSEN 007E29  
                          _stopSignals 4760                                   _Test 32C6  
                                 _back 005B                                   _main 3588  
                                 _down 0067                                   _keys FB21  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 46E6                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 47DE  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 24B2  
                          i2_lcdNibble 3FC0                        __end_of_Loading 2C40  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 34B2                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3706                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB3C  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FE19                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDF7  
                                STR_16 FFE3                                  STR_24 FD5E  
                                STR_32 FD3C                                  STR_40 FCF8  
                                STR_17 FFF3                                  STR_33 FD4D  
                                STR_41 FCE7                                  STR_25 FB7C  
                                STR_18 FFF7                                  STR_34 FDE6  
                                STR_50 FDC4                                  STR_42 FDA2  
                                STR_26 FD6F                                  STR_43 FDA2  
                                STR_35 FDE6                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FB69  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD80                                  STR_36 FD2B  
                                STR_44 FD09                        __end_of___awmod 390E  
                                STR_45 FCF8                                  STR_37 FD3C  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FB79                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDD5                                  STR_46 FDB3  
                                STR_47 FDB3                                  STR_55 FFFB  
                                STR_63 FB3C                                  STR_71 FF0B  
                                STR_39 FD91                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FD1A                                  STR_72 FC81  
                                STR_49 FD09                                  STR_57 FFD7  
                                STR_81 FB79                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB54  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FCA3  
                                STR_68 FC92                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCC5                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FCB4  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC2C                                  STR_98 FC1B  
                                STR_99 FBF9                                  ?_sort 0001  
                      __end_of___lldiv 37C2                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3C3A  
                      __end_of___lwmod 3E54                                  i2l257 24AE  
                                i2l602 2540                                  i2l861 2D06  
                                i2l943 4784                                  i2l865 2D52  
                                i2l867 2D72                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1916                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 47D2                        __end_of_handler 2DAE  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 45FC  
                      __end_of_initLCD 41E8                         __CFG_EBTRB$OFF 000000  
                                _debug 0065                             i2isdigit@c 0003  
                                _getIR 4016                        __end_of_loadRTC 3A30  
                      __end_of_readMAG 41A2                        __end_of_dpowers FB3C  
                                _first 0073                                  _enter 0069  
                      __end_of_isdigit 4626                                  _input 007D  
                                _putch 47B2                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 469C  
                     __end_ofi2_getRTC 3D22                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1916  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 436A                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 40BC                           __end_of_Test 33CE  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3648  
                         __end_of_keys FB32                           __end_of_sort 4708  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B8  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC4E  
                               STR_101 FC5F                                 STR_110 FCD6  
                               STR_102 FBD7                                 STR_103 FE3A  
                               STR_111 FB8F                                 STR_104 FC0A  
                               STR_112 FBA1                                 STR_113 FF71  
                               STR_105 FBE8                                 STR_106 FC0A  
                               STR_114 FC3D                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC70  
                               STR_116 FFB6                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_109 FE69  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 439A              i2_change_state_to_menu_22 436A  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1259 1782  
                               i2l1706 40B2                                 i2l1716 4220  
                               i2l5401 4216                                 i2l6131 254A  
                               i2l6141 25B8                                 i2l6133 2560  
                               i2l6125 24DE                                 i2l6303 2A0C  
                               i2l6151 2626                                 i2l6143 25CE  
                               i2l6135 2576                                 i2l6305 2A10  
                               i2l6153 263C                                 i2l6145 25E4  
                               i2l6137 258C                                 i2l5339 46BC  
                               i2l5363 4740                                 i2l6331 2A64  
                               i2l6323 2A40                                 i2l6251 294A  
                               i2l6235 2912                                 i2l6227 28F8  
                               i2l6147 25FA                                 i2l6139 25A2  
                               i2l5373 4080                                 i2l5701 16EA  
                               i2l6317 2A32                                 i2l6309 2A1A  
                               i2l6253 2950                                 i2l6237 2922  
                               i2l6245 2930                                 i2l6149 2610  
                               i2l6157 2652                                 i2l5631 3CE8  
                               i2l5375 4088                                 i2l5711 1736  
                               i2l5703 16F4                                 i2l6335 2A76  
                               i2l6327 2A52                                 i2l6255 2956  
                               i2l6263 2968                                 i2l6239 2926  
                               i2l6159 26AC                                 i2l5641 3D12  
                               i2l5385 40A8                                 i2l5377 408C  
                               i2l5393 41F6                                 i2l5713 1748  
                               i2l5705 16FA                                 i2l6257 295C  
                               i2l6249 2944                                 i2l6345 2A92  
                               i2l8121 2CBA                                 i2l5635 3CF8  
                               i2l5395 41FE                                 i2l5707 170C  
                               i2l8035 26F4                                 i2l6339 2A88  
                               i2l6283 29C4                                 i2l6275 29AC  
                               i2l6259 2962                                 i2l8123 2CBE  
                               i2l5397 4202                                 i2l5733 17C8  
                               i2l5717 174C                                 i2l8045 275E  
                               i2l6293 29EE                                 i2l5735 17CC  
                               i2l5663 15C2                                 i2l8055 2820  
                               i2l8039 2704                                 i2l5753 1818  
                               i2l5729 17B0                                 i2l5665 15D0  
                               i2l6289 29D2                                 i2l8161 2D26  
                               i2l8137 2CDA                                 i2l5771 1870  
                               i2l5747 17FE                                 i2l5691 1692  
                               i2l5683 166A                                 i2l5675 1608  
                               i2l5659 15B2                                 i2l6299 29F8  
                               i2l5773 1878                                 i2l5781 189E  
                               i2l5765 185A                                 i2l5757 183C  
                               i2l5693 169C                                 i2l5669 15D6  
                               i2l5783 18A4                                 i2l5759 1844  
                               i2l5695 16A0                                 i2l7711 2222  
                               i2l8183 2D70                                 i2l8159 2D24  
                               i2l5777 188C                                 i2l5793 4342  
                               i2l7801 2360                                 i2l7721 2244  
                               i2l7713 2228                                 i2l5787 18F2  
                               i2l5795 434A                                 i2l8451 24A0  
                               i2l5789 18FA                                 i2l5965 326A  
                               i2l7821 23B6                                 i2l7813 2392  
                               i2l7805 2376                                 i2l7741 227C  
                               i2l7725 2252                                 i2l7717 2236  
                               i2l8455 2980                                 i2l8447 2462  
                               i2l5977 32AE                                 i2l5969 327A  
                               i2l8457 299C                                 i2l8449 2484  
                               i2l7841 2404                                 i2l7833 23E0  
                               i2l7825 23C4                                 i2l7817 23A0  
                               i2l7809 2384                                 i2l7761 22C4  
                               i2l7753 22A8                                 i2l7745 228A  
                               i2l7737 226E                                 i2l7729 2260  
                               i2l7853 2436                                 i2l7845 2412  
                               i2l7837 23F6                                 i2l7829 23D2  
                               i2l7781 2312                                 i2l7773 22F6  
                               i2l7765 22D2                                 i2l7757 22B6  
                               i2l7749 229A                                 i2l7849 2420  
                               i2l7793 2344                                 i2l7785 2320  
                               i2l7777 2304                                 i2l7769 22E0  
                               i2l7859 2444                                 i2l7797 2352  
                               i2l7789 2336                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 464E                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 46E6                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 3070  
                               ___wmul 42D0                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4306  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3AB8                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 472A  
                               _initUI 451A                                 _readIR 410A  
                               _logRun 3070                                 clear_0 40E2  
                               clear_1 40EE                                 clear_2 40FA  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 390E                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 429A  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4676  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 464E                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 40BC  
                     __end_of_printRTC 21F2                           __mediumconst FB20  
                    __end_ofi2___lwmod 422A                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 3588  
                    __end_ofi2_lcdInst 47EA                      __end_ofi2_isdigit 4748  
                           __accesstop 0080                __end_of__initialization 4100  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4776                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4828  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 47FE                          __end_of_getIR 406A  
                          i2printRTC@i 0041                          _initSortTimer 37C2  
          __end_of_updateServoPosition 3CB0                          __end_of_putch 47C2  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2F12                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 45D0          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 45A4                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 33CE  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3225 012F               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0314                      __end_of_PortTests 3BC2  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2295 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 47D2                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 015E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3DF2                                _Loading 2AC0  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3648  
                              ___awmod 386C                             _initServos 3F10  
                              ___lldiv 3706                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3BC2  
                              ___lwmod 3DF2                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 40BC                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3D22  
                              _lcdInst 47C2                                _handler 0008  
                              __ptext0 3588                                __ptext1 4760  
                              __ptext2 46E6                                __ptext3 2AC0  
                              __ptext4 37C2                                __ptext5 3D22  
                              __ptext6 4016                                __ptext7 410A  
                              __ptext8 4626                                __ptext9 2DAE  
                      __size_of_printf 0438                                _readADC 45D0  
                      __size_of_strcpy 0036                                _initLCD 41A2  
                              _cur_can 012B                                _loadRTC 39A4  
                              _readMAG 4156                                _dpowers FB32  
                   actuatorTest@i_1650 00B2                     actuatorTest@i_1651 00B3  
                   actuatorTest@i_1660 00B9                     actuatorTest@i_1644 00AE  
                   actuatorTest@i_1653 00B4                     actuatorTest@i_1645 00AF  
                   actuatorTest@i_1637 00AD                     actuatorTest@i_1670 00BF  
                   actuatorTest@i_1654 00B5                     actuatorTest@i_1663 00BA  
                   actuatorTest@i_1647 00B0                     actuatorTest@i_1664 00BB  
                   actuatorTest@i_1656 00B6                     actuatorTest@i_1648 00B1  
                   actuatorTest@i_1673 00C0                     actuatorTest@i_1657 00B7  
                   actuatorTest@i_1674 00C1                     actuatorTest@i_1666 00BC  
                   actuatorTest@i_1667 00BD                     actuatorTest@i_1659 00B8  
                   actuatorTest@i_1676 00C2                     actuatorTest@i_1677 00C3  
                   actuatorTest@i_1669 00BE                                _isdigit 45FC  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2F12  
                       __pintcode_body 2C40                   end_of_initialization 4100  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 2C40  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0096              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3D8A                             _sensorTest 1C2A  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2AC0  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3F10                             _updateMenu 21F2  
                        ?_PusherTestA5 0001                      i2_I2C_Master_Read 469C  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 47A0  
                    i2_I2C_Master_Stop 4816                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 406A  
                            i2___lwmod 41E8                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 26E8                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 47DE                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 472A  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1C2A  
                  __end_of_EEPROM_read 4760                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4306  
                       __end_of_getMAG 4338                         __end_of_getRTC 3B3E  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4548  
                       __end_of_readIR 4156                         __end_of_logRun 31AC  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 42D0  
            __end_ofi2_I2C_Master_Read 46C2              __end_ofi2_I2C_Master_Wait 47B2  
                       ??_PusherTestA5 00AB                           i2printf@prec 001D  
                  start_initialization 40BC              __end_ofi2_I2C_Master_Stop 481E  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1328 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3B3E  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2415 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1942 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4748  
                   __end_of_PortTestA5 39A4                       _I2C_Master_Start 480E  
                            _f_lastCan 0071                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 47EA  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 3AB8  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB20  
                            _lcdNibble 3D8A                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00E0                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0054                          _algorithmTest 34B2  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0164  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4826  
           __end_ofi2_I2C_Master_Write 47FE                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 28DA  
                          ??i2_isdigit 0001                               i2u422_40 16CE  
                             i2u422_47 16C4                               i2u426_40 172E  
                             i2u426_47 1724                               _PIR2bits 000FA1  
                 __end_of_PusherTestA5 3FC0                               i2u367_40 46BA  
                             i2u465_40 2540                               i2u825_47 2918  
                             i2u690_40 281A                               i2u826_47 3FD8  
                             i2u827_47 3FE2                               i2u828_47 4004  
                             i2u829_47 400E                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4676  
                        lcdNibble@data 0081                               i2_getRTC 3CB0  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B6  
                             i2_printf 15A8                               i2_strcpy 4338  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 40D0                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 478C                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0180                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 386C                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 43FA  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4262  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 422A  
              _change_state_to_menu_23 43CA                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 44EA                _change_state_to_logs_12 44BA  
              _change_state_to_logs_22 448A                _change_state_to_logs_23 4576  
              _change_state_to_logs_33 445A                _change_state_to_logs_34 442A  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2DA6                             _EEPROMTest 4826  
                      _I2C_Master_Init 3E54                       __size_of_readADC 002C  
                      _I2C_Master_Read 4548                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 478C  
                      _I2C_Master_Stop 4806                       __size_of_isdigit 002A  
                             _delay_ms 4626                         _printSortTimer 26E8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 32C6                               __ptext10 4306  
                             __ptext11 2F12                               __ptext20 45A4  
                             __ptext12 3EB4                               __ptext21 4708  
                             __ptext13 3070                               __ptext30 4548  
                             __ptext22 41A2                               __ptext14 33CE  
                             __ptext31 478C                               __ptext23 08CA  
                             __ptext15 4748                               __ptext40 34B2  
                             __ptext32 422A                               __ptext24 1F28  
                             __ptext16 451A                               __ptext41 0012  
                             __ptext33 4262                               __ptext25 429A  
                             __ptext17 39A4                               __ptext50 45FC  
                             __ptext42 3A30                               __ptext34 386C  
                             __ptext26 3AB8                               __ptext18 3E54  
                             __ptext51 42D0                               __ptext43 3F6A  
                             __ptext35 3648                               __ptext27 47EA  
                             __ptext19 3706                               __ptext60 464E  
                             __ptext52 3DF2                               __ptext44 3B3E  
                             __ptext36 32C6                               __ptext28 4806  
                             __ptext61 24B2                               __ptext53 3BC2  
                             __ptext45 390E                               __ptext37 1C2A  
                             __ptext29 480E                               __ptext70 4576  
                             __ptext62 4338                               __ptext54 47C2  
                             __ptext46 4826                               __ptext38 4156  
                             __ptext71 448A                               __ptext63 28DA  
                             __ptext55 3D8A                               __ptext47 1916  
                             __ptext39 45D0                               __ptext80 472A  
                             __ptext72 44BA                               __ptext64 436A  
                             __ptext56 3F10                               __ptext48 1170  
                             __ptext81 4676                               __ptext73 44EA  
                             __ptext65 439A                               __ptext57 3C3A  
                             __ptext49 47B2                               __ptext90 469C  
                             __ptext82 41E8                               __ptext74 46C2  
                             __ptext66 43CA                               __ptext91 47A0  
                             __ptext83 406A                               __ptext75 31AC  
                             __ptext67 43FA                               __ptext59 21F2  
                             __ptext84 47DE                               __ptext76 4776  
                             __ptext68 442A                               __ptext85 3FC0  
                             __ptext77 26E8                               __ptext69 445A  
                             __ptext86 3CB0                               __ptext78 15A8  
                             __ptext87 47F4                               __ptext79 47D2  
                             __ptext88 4816                               __ptext89 481E  
                             _dispLogs 46C2                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1942 0002  
                   __end_of_initServos 3F6A                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 4708  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3C3A                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F28  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 43CA      __end_ofi2_change_state_to_menu_22 439A  
                             loadRTC@i 0096                 __end_of_printSortTimer 28DA  
                            putch@data 0082               __end_of_I2C_Master_Start 4816  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 47F4  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 3A30                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F28  
                     ___lwmod@dividend 0087                  __size_of_PusherTestA5 0056  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4776              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 24B2  
              __end_of_I2C_Master_Init 3EB4                __end_of_I2C_Master_Read 4576  
              __end_of_I2C_Master_Wait 47A0                __end_of_I2C_Master_Stop 480E  
                          lcdInst@data 0082                          printRTC@F3216 0133  
                         retrieveLog@i 000E                            _retrieveLog 31AC  
                  __end_ofi2_lcdNibble 4016                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012D  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3EB4                        ___lwmod@counter 008B  
                         _PusherTestA5 3F6A                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
