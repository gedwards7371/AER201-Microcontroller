

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 17:16:19 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105  0000                     
   106                           ; Version 1.40
   107                           ; Generated 01/12/2016 GMT
   108                           ; 
   109                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution.
   123                           ; 
   124                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   125                           ;        software without specific prior written permission.
   126                           ; 
   127                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   128                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   129                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   130                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   131                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   132                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   133                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   134                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   135                           ; 
   136                           ; 
   137                           ; Code-generator required, PIC18F4620 Definitions
   138                           ; 
   139                           ; SFR Addresses
   140  0000                     
   141                           	psect	idataBANK1
   142  004060                     __pidataBANK1:
   143                           	opt stack 0
   144                           
   145                           ;initializer for UI@F3220
   146  004060  4D                 	db	77
   147  004061  4D                 	db	77
   148  004062  4D                 	db	77
   149  004063  00                 	db	0
   150                           
   151                           ;initializer for printRTC@F3211
   152  004064  4D                 	db	77
   153  004065  4D                 	db	77
   154  004066  4D                 	db	77
   155  004067  00                 	db	0
   156                           
   157                           	psect	mediumconst
   158  00FB70                     __pmediumconst:
   159                           	opt stack 0
   160  00FB70  00                 	db	0
   161  00FB71                     _keys:
   162                           	opt stack 0
   163  00FB71  31                 	db	49
   164  00FB72  32                 	db	50
   165  00FB73  33                 	db	51
   166  00FB74  41                 	db	65
   167  00FB75  34                 	db	52
   168  00FB76  35                 	db	53
   169  00FB77  36                 	db	54
   170  00FB78  42                 	db	66
   171  00FB79  37                 	db	55
   172  00FB7A  38                 	db	56
   173  00FB7B  39                 	db	57
   174  00FB7C  43                 	db	67
   175  00FB7D  2A                 	db	42
   176  00FB7E  30                 	db	48
   177  00FB7F  23                 	db	35
   178  00FB80  44                 	db	68
   179  00FB81  00                 	db	0
   180  00FB82                     __end_of_keys:
   181                           	opt stack 0
   182  00FB82                     _dpowers:
   183                           	opt stack 0
   184  00FB82  0001               	dw	1
   185  00FB84  000A               	dw	10
   186  00FB86  0064               	dw	100
   187  00FB88  03E8               	dw	1000
   188  00FB8A  2710               	dw	10000
   189  00FB8C                     __end_of_dpowers:
   190                           	opt stack 0
   191  0000                     _ADCON0	set	4034
   192  0000                     _ADCON0bits	set	4034
   193  0000                     _ADCON1	set	4033
   194  0000                     _ADCON2	set	4032
   195  0000                     _ADRESH	set	4036
   196  0000                     _ADRESL	set	4035
   197  0000                     _CMCONbits	set	4020
   198  0000                     _CVRCON	set	4021
   199  0000                     _EEADR	set	4009
   200  0000                     _EEADRH	set	4010
   201  0000                     _EECON1bits	set	4006
   202  0000                     _EECON2	set	4007
   203  0000                     _EEDATA	set	4008
   204  0000                     _INTCONbits	set	4082
   205  0000                     _LATA	set	3977
   206  0000                     _LATAbits	set	3977
   207  0000                     _LATB	set	3978
   208  0000                     _LATC	set	3979
   209  0000                     _LATCbits	set	3979
   210  0000                     _LATD	set	3980
   211  0000                     _LATDbits	set	3980
   212  0000                     _LATE	set	3981
   213  0000                     _LATEbits	set	3981
   214  0000                     _OSCCON	set	4051
   215  0000                     _OSCTUNEbits	set	3995
   216  0000                     _PIR2bits	set	4001
   217  0000                     _PORTAbits	set	3968
   218  0000                     _PORTB	set	3969
   219  0000                     _PORTBbits	set	3969
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPBUF	set	4041
   222  0000                     _SSPCON1	set	4038
   223  0000                     _SSPCON2	set	4037
   224  0000                     _SSPSTAT	set	4039
   225  0000                     _T0CON	set	4053
   226  0000                     _T1CON	set	4045
   227  0000                     _TMR0H	set	4055
   228  0000                     _TMR0L	set	4054
   229  0000                     _TMR1H	set	4047
   230  0000                     _TMR1L	set	4046
   231  0000                     _TMR3H	set	4019
   232  0000                     _TMR3L	set	4018
   233  0000                     _TRISA	set	3986
   234  0000                     _TRISB	set	3987
   235  0000                     _TRISC	set	3988
   236  0000                     _TRISD	set	3989
   237  0000                     _TRISE	set	3990
   238  0000                     _ACKDT	set	32301
   239  0000                     _ACKEN	set	32300
   240  0000                     _ADIE	set	31982
   241  0000                     _INT1IE	set	32643
   242  0000                     _INT1IF	set	32640
   243  0000                     _PEIE	set	32662
   244  0000                     _PEN	set	32298
   245  0000                     _RCEN	set	32299
   246  0000                     _RSEN	set	32297
   247  0000                     _SEN	set	32296
   248  0000                     _TMR0IE	set	32661
   249  0000                     _TMR0IF	set	32658
   250  0000                     _TMR0ON	set	32431
   251  0000                     _TMR1IE	set	31976
   252  0000                     _TMR1IF	set	31984
   253  0000                     _TMR1ON	set	32360
   254  0000                     _TMR2IE	set	31977
   255  0000                     _TMR3IE	set	32001
   256  0000                     _TMR3IF	set	32009
   257  0000                     _TMR3ON	set	32136
   258  0000                     _TRISC3	set	31907
   259  0000                     _TRISC4	set	31908
   260  0000                     _nRBPU	set	32655
   261  00FB8C                     STR_21:
   262  00FB8C  25                 	db	37
   263  00FB8D  30                 	db	48	;'0'
   264  00FB8E  32                 	db	50	;'2'
   265  00FB8F  64                 	db	100	;'d'
   266  00FB90  25                 	db	37
   267  00FB91  73                 	db	115	;'s'
   268  00FB92  20                 	db	32
   269  00FB93  7C                 	db	124
   270  00FB94  20                 	db	32
   271  00FB95  25                 	db	37
   272  00FB96  30                 	db	48	;'0'
   273  00FB97  32                 	db	50	;'2'
   274  00FB98  64                 	db	100	;'d'
   275  00FB99  3A                 	db	58	;':'
   276  00FB9A  25                 	db	37
   277  00FB9B  30                 	db	48	;'0'
   278  00FB9C  32                 	db	50	;'2'
   279  00FB9D  64                 	db	100	;'d'
   280  00FB9E  3A                 	db	58	;':'
   281  00FB9F  25                 	db	37
   282  00FBA0  30                 	db	48	;'0'
   283  00FBA1  32                 	db	50	;'2'
   284  00FBA2  64                 	db	100	;'d'
   285  00FBA3  00                 	db	0
   286  00FBA4                     STR_66:
   287  00FBA4  28                 	db	40
   288  00FBA5  64                 	db	100	;'d'
   289  00FBA6  61                 	db	97	;'a'
   290  00FBA7  74                 	db	116	;'t'
   291  00FBA8  61                 	db	97	;'a'
   292  00FBA9  3A                 	db	58	;':'
   293  00FBAA  20                 	db	32
   294  00FBAB  25                 	db	37
   295  00FBAC  75                 	db	117	;'u'
   296  00FBAD  2C                 	db	44
   297  00FBAE  20                 	db	32
   298  00FBAF  61                 	db	97	;'a'
   299  00FBB0  64                 	db	100	;'d'
   300  00FBB1  64                 	db	100	;'d'
   301  00FBB2  72                 	db	114	;'r'
   302  00FBB3  3A                 	db	58	;':'
   303  00FBB4  20                 	db	32
   304  00FBB5  25                 	db	37
   305  00FBB6  75                 	db	117	;'u'
   306  00FBB7  29                 	db	41
   307  00FBB8  00                 	db	0
   308  00FBB9                     STR_27:
   309  00FBB9  4E                 	db	78	;'N'
   310  00FBBA  4F                 	db	79	;'O'
   311  00FBBB  20                 	db	32
   312  00FBBC  4C                 	db	76	;'L'
   313  00FBBD  41                 	db	65	;'A'
   314  00FBBE  42                 	db	66	;'B'
   315  00FBBF  3A                 	db	58	;':'
   316  00FBC0  20                 	db	32
   317  00FBC1  25                 	db	37
   318  00FBC2  64                 	db	100	;'d'
   319  00FBC3  7C                 	db	124
   320  00FBC4  4C                 	db	76	;'L'
   321  00FBC5  41                 	db	65	;'A'
   322  00FBC6  42                 	db	66	;'B'
   323  00FBC7  3A                 	db	58	;':'
   324  00FBC8  20                 	db	32
   325  00FBC9  25                 	db	37
   326  00FBCA  64                 	db	100	;'d'
   327  00FBCB  00                 	db	0
   328  00FBCC                     STR_25:
   329  00FBCC  4E                 	db	78	;'N'
   330  00FBCD  4F                 	db	79	;'O'
   331  00FBCE  20                 	db	32
   332  00FBCF  54                 	db	84	;'T'
   333  00FBD0  41                 	db	65	;'A'
   334  00FBD1  42                 	db	66	;'B'
   335  00FBD2  3A                 	db	58	;':'
   336  00FBD3  20                 	db	32
   337  00FBD4  25                 	db	37
   338  00FBD5  64                 	db	100	;'d'
   339  00FBD6  7C                 	db	124
   340  00FBD7  54                 	db	84	;'T'
   341  00FBD8  41                 	db	65	;'A'
   342  00FBD9  42                 	db	66	;'B'
   343  00FBDA  3A                 	db	58	;':'
   344  00FBDB  20                 	db	32
   345  00FBDC  25                 	db	37
   346  00FBDD  64                 	db	100	;'d'
   347  00FBDE  00                 	db	0
   348  00FBDF                     STR_105:
   349  00FBDF  44                 	db	68	;'D'
   350  00FBE0  20                 	db	32
   351  00FBE1  57                 	db	87	;'W'
   352  00FBE2  49                 	db	73	;'I'
   353  00FBE3  4C                 	db	76	;'L'
   354  00FBE4  4C                 	db	76	;'L'
   355  00FBE5  20                 	db	32
   356  00FBE6  52                 	db	82	;'R'
   357  00FBE7  45                 	db	69	;'E'
   358  00FBE8  54                 	db	84	;'T'
   359  00FBE9  55                 	db	85	;'U'
   360  00FBEA  52                 	db	82	;'R'
   361  00FBEB  4E                 	db	78	;'N'
   362  00FBEC  20                 	db	32
   363  00FBED  20                 	db	32
   364  00FBEE  20                 	db	32
   365  00FBEF  20                 	db	32
   366  00FBF0  00                 	db	0
   367  00FBF1                     STR_106:
   368  00FBF1  4F                 	db	79	;'O'
   369  00FBF2  54                 	db	84	;'T'
   370  00FBF3  48                 	db	72	;'H'
   371  00FBF4  45                 	db	69	;'E'
   372  00FBF5  52                 	db	82	;'R'
   373  00FBF6  20                 	db	32
   374  00FBF7  53                 	db	83	;'S'
   375  00FBF8  45                 	db	69	;'E'
   376  00FBF9  54                 	db	84	;'T'
   377  00FBFA  53                 	db	83	;'S'
   378  00FBFB  20                 	db	32
   379  00FBFC  52                 	db	82	;'R'
   380  00FBFD  41                 	db	65	;'A'
   381  00FBFE  35                 	db	53	;'5'
   382  00FBFF  20                 	db	32
   383  00FC00  20                 	db	32
   384  00FC01  20                 	db	32
   385  00FC02  00                 	db	0
   386  00FC03                     STR_3:
   387  00FC03  2D                 	db	45
   388  00FC04  2D                 	db	45
   389  00FC05  20                 	db	32
   390  00FC06  4C                 	db	76	;'L'
   391  00FC07  4F                 	db	79	;'O'
   392  00FC08  47                 	db	71	;'G'
   393  00FC09  20                 	db	32
   394  00FC0A  25                 	db	37
   395  00FC0B  32                 	db	50	;'2'
   396  00FC0C  64                 	db	100	;'d'
   397  00FC0D  20                 	db	32
   398  00FC0E  48                 	db	72	;'H'
   399  00FC0F  45                 	db	69	;'E'
   400  00FC10  52                 	db	82	;'R'
   401  00FC11  45                 	db	69	;'E'
   402  00FC12  2D                 	db	45
   403  00FC13  2D                 	db	45
   404  00FC14  00                 	db	0
   405  00FC15                     STR_1:
   406  00FC15  52                 	db	82	;'R'
   407  00FC16  45                 	db	69	;'E'
   408  00FC17  53                 	db	83	;'S'
   409  00FC18  55                 	db	85	;'U'
   410  00FC19  4C                 	db	76	;'L'
   411  00FC1A  54                 	db	84	;'T'
   412  00FC1B  53                 	db	83	;'S'
   413  00FC1C  20                 	db	32
   414  00FC1D  49                 	db	73	;'I'
   415  00FC1E  4E                 	db	78	;'N'
   416  00FC1F  20                 	db	32
   417  00FC20  4C                 	db	76	;'L'
   418  00FC21  4F                 	db	79	;'O'
   419  00FC22  47                 	db	71	;'G'
   420  00FC23  20                 	db	32
   421  00FC24  25                 	db	37
   422  00FC25  64                 	db	100	;'d'
   423  00FC26  00                 	db	0
   424  00FC27                     STR_97:
   425  00FC27  4D                 	db	77	;'M'
   426  00FC28  49                 	db	73	;'I'
   427  00FC29  44                 	db	68	;'D'
   428  00FC2A  20                 	db	32
   429  00FC2B  2D                 	db	45
   430  00FC2C  2D                 	db	45
   431  00FC2D  20                 	db	32
   432  00FC2E  32                 	db	50	;'2'
   433  00FC2F  73                 	db	115	;'s'
   434  00FC30  20                 	db	32
   435  00FC31  20                 	db	32
   436  00FC32  20                 	db	32
   437  00FC33  20                 	db	32
   438  00FC34  20                 	db	32
   439  00FC35  20                 	db	32
   440  00FC36  20                 	db	32
   441  00FC37  00                 	db	0
   442  00FC38                     STR_100:
   443  00FC38  44                 	db	68	;'D'
   444  00FC39  52                 	db	82	;'R'
   445  00FC3A  4F                 	db	79	;'O'
   446  00FC3B  50                 	db	80	;'P'
   447  00FC3C  20                 	db	32
   448  00FC3D  2D                 	db	45
   449  00FC3E  2D                 	db	45
   450  00FC3F  20                 	db	32
   451  00FC40  32                 	db	50	;'2'
   452  00FC41  73                 	db	115	;'s'
   453  00FC42  20                 	db	32
   454  00FC43  20                 	db	32
   455  00FC44  20                 	db	32
   456  00FC45  20                 	db	32
   457  00FC46  20                 	db	32
   458  00FC47  20                 	db	32
   459  00FC48  00                 	db	0
   460  00FC49                     STR_94:
   461  00FC49  4C                 	db	76	;'L'
   462  00FC4A  45                 	db	69	;'E'
   463  00FC4B  46                 	db	70	;'F'
   464  00FC4C  54                 	db	84	;'T'
   465  00FC4D  20                 	db	32
   466  00FC4E  2D                 	db	45
   467  00FC4F  2D                 	db	45
   468  00FC50  20                 	db	32
   469  00FC51  32                 	db	50	;'2'
   470  00FC52  73                 	db	115	;'s'
   471  00FC53  20                 	db	32
   472  00FC54  20                 	db	32
   473  00FC55  20                 	db	32
   474  00FC56  20                 	db	32
   475  00FC57  20                 	db	32
   476  00FC58  20                 	db	32
   477  00FC59  00                 	db	0
   478  00FC5A                     STR_99:
   479  00FC5A  4C                 	db	76	;'L'
   480  00FC5B  45                 	db	69	;'E'
   481  00FC5C  56                 	db	86	;'V'
   482  00FC5D  45                 	db	69	;'E'
   483  00FC5E  4C                 	db	76	;'L'
   484  00FC5F  20                 	db	32
   485  00FC60  2D                 	db	45
   486  00FC61  2D                 	db	45
   487  00FC62  20                 	db	32
   488  00FC63  32                 	db	50	;'2'
   489  00FC64  73                 	db	115	;'s'
   490  00FC65  20                 	db	32
   491  00FC66  20                 	db	32
   492  00FC67  20                 	db	32
   493  00FC68  20                 	db	32
   494  00FC69  20                 	db	32
   495  00FC6A  00                 	db	0
   496  00FC6B                     STR_93:
   497  00FC6B  52                 	db	82	;'R'
   498  00FC6C  49                 	db	73	;'I'
   499  00FC6D  47                 	db	71	;'G'
   500  00FC6E  48                 	db	72	;'H'
   501  00FC6F  54                 	db	84	;'T'
   502  00FC70  20                 	db	32
   503  00FC71  2D                 	db	45
   504  00FC72  2D                 	db	45
   505  00FC73  20                 	db	32
   506  00FC74  32                 	db	50	;'2'
   507  00FC75  73                 	db	115	;'s'
   508  00FC76  20                 	db	32
   509  00FC77  20                 	db	32
   510  00FC78  20                 	db	32
   511  00FC79  20                 	db	32
   512  00FC7A  20                 	db	32
   513  00FC7B  00                 	db	0
   514  00FC7C                     STR_92:
   515  00FC7C  4D                 	db	77	;'M'
   516  00FC7D  49                 	db	73	;'I'
   517  00FC7E  44                 	db	68	;'D'
   518  00FC7F  44                 	db	68	;'D'
   519  00FC80  4C                 	db	76	;'L'
   520  00FC81  45                 	db	69	;'E'
   521  00FC82  20                 	db	32
   522  00FC83  2D                 	db	45
   523  00FC84  2D                 	db	45
   524  00FC85  20                 	db	32
   525  00FC86  32                 	db	50	;'2'
   526  00FC87  73                 	db	115	;'s'
   527  00FC88  20                 	db	32
   528  00FC89  20                 	db	32
   529  00FC8A  20                 	db	32
   530  00FC8B  20                 	db	32
   531  00FC8C  00                 	db	0
   532  00FC8D                     STR_95:
   533  00FC8D  4D                 	db	77	;'M'
   534  00FC8E  49                 	db	73	;'I'
   535  00FC8F  44                 	db	68	;'D'
   536  00FC90  2D                 	db	45
   537  00FC91  4C                 	db	76	;'L'
   538  00FC92  45                 	db	69	;'E'
   539  00FC93  46                 	db	70	;'F'
   540  00FC94  54                 	db	84	;'T'
   541  00FC95  20                 	db	32
   542  00FC96  2D                 	db	45
   543  00FC97  2D                 	db	45
   544  00FC98  20                 	db	32
   545  00FC99  32                 	db	50	;'2'
   546  00FC9A  73                 	db	115	;'s'
   547  00FC9B  20                 	db	32
   548  00FC9C  20                 	db	32
   549  00FC9D  00                 	db	0
   550  00FC9E                     STR_96:
   551  00FC9E  4D                 	db	77	;'M'
   552  00FC9F  49                 	db	73	;'I'
   553  00FCA0  44                 	db	68	;'D'
   554  00FCA1  2D                 	db	45
   555  00FCA2  52                 	db	82	;'R'
   556  00FCA3  49                 	db	73	;'I'
   557  00FCA4  47                 	db	71	;'G'
   558  00FCA5  48                 	db	72	;'H'
   559  00FCA6  54                 	db	84	;'T'
   560  00FCA7  20                 	db	32
   561  00FCA8  2D                 	db	45
   562  00FCA9  2D                 	db	45
   563  00FCAA  20                 	db	32
   564  00FCAB  32                 	db	50	;'2'
   565  00FCAC  73                 	db	115	;'s'
   566  00FCAD  20                 	db	32
   567  00FCAE  00                 	db	0
   568  00FCAF                     STR_72:
   569  00FCAF  41                 	db	65	;'A'
   570  00FCB0  4C                 	db	76	;'L'
   571  00FCB1  47                 	db	71	;'G'
   572  00FCB2  31                 	db	49	;'1'
   573  00FCB3  3A                 	db	58	;':'
   574  00FCB4  20                 	db	32
   575  00FCB5  39                 	db	57	;'9'
   576  00FCB6  20                 	db	32
   577  00FCB7  50                 	db	80	;'P'
   578  00FCB8  4F                 	db	79	;'O'
   579  00FCB9  50                 	db	80	;'P'
   580  00FCBA  4E                 	db	78	;'N'
   581  00FCBB  4F                 	db	79	;'O'
   582  00FCBC  54                 	db	84	;'T'
   583  00FCBD  41                 	db	65	;'A'
   584  00FCBE  42                 	db	66	;'B'
   585  00FCBF  00                 	db	0
   586  00FCC0                     STR_68:
   587  00FCC0  31                 	db	49	;'1'
   588  00FCC1  2E                 	db	46
   589  00FCC2  41                 	db	65	;'A'
   590  00FCC3  4C                 	db	76	;'L'
   591  00FCC4  47                 	db	71	;'G'
   592  00FCC5  7C                 	db	124
   593  00FCC6  32                 	db	50	;'2'
   594  00FCC7  2E                 	db	46
   595  00FCC8  53                 	db	83	;'S'
   596  00FCC9  4E                 	db	78	;'N'
   597  00FCCA  52                 	db	82	;'R'
   598  00FCCB  7C                 	db	124
   599  00FCCC  33                 	db	51	;'3'
   600  00FCCD  2E                 	db	46
   601  00FCCE  41                 	db	65	;'A'
   602  00FCCF  43                 	db	67	;'C'
   603  00FCD0  00                 	db	0
   604  00FCD1                     STR_87:
   605  00FCD1  54                 	db	84	;'T'
   606  00FCD2  53                 	db	83	;'S'
   607  00FCD3  54                 	db	84	;'T'
   608  00FCD4  3A                 	db	58	;':'
   609  00FCD5  20                 	db	32
   610  00FCD6  43                 	db	67	;'C'
   611  00FCD7  4F                 	db	79	;'O'
   612  00FCD8  4E                 	db	78	;'N'
   613  00FCD9  44                 	db	68	;'D'
   614  00FCDA  20                 	db	32
   615  00FCDB  53                 	db	83	;'S'
   616  00FCDC  4F                 	db	79	;'O'
   617  00FCDD  4C                 	db	76	;'L'
   618  00FCDE  4E                 	db	78	;'N'
   619  00FCDF  27                 	db	39
   620  00FCE0  44                 	db	68	;'D'
   621  00FCE1  00                 	db	0
   622  00FCE2                     STR_89:
   623  00FCE2  54                 	db	84	;'T'
   624  00FCE3  53                 	db	83	;'S'
   625  00FCE4  54                 	db	84	;'T'
   626  00FCE5  3A                 	db	58	;':'
   627  00FCE6  20                 	db	32
   628  00FCE7  50                 	db	80	;'P'
   629  00FCE8  55                 	db	85	;'U'
   630  00FCE9  53                 	db	83	;'S'
   631  00FCEA  48                 	db	72	;'H'
   632  00FCEB  20                 	db	32
   633  00FCEC  53                 	db	83	;'S'
   634  00FCED  4F                 	db	79	;'O'
   635  00FCEE  4C                 	db	76	;'L'
   636  00FCEF  4E                 	db	78	;'N'
   637  00FCF0  27                 	db	39
   638  00FCF1  44                 	db	68	;'D'
   639  00FCF2  00                 	db	0
   640  00FCF3                     STR_69:
   641  00FCF3  34                 	db	52	;'4'
   642  00FCF4  2E                 	db	46
   643  00FCF5  48                 	db	72	;'H'
   644  00FCF6  49                 	db	73	;'I'
   645  00FCF7  7C                 	db	124
   646  00FCF8  35                 	db	53	;'5'
   647  00FCF9  2E                 	db	46
   648  00FCFA  54                 	db	84	;'T'
   649  00FCFB  4F                 	db	79	;'O'
   650  00FCFC  47                 	db	71	;'G'
   651  00FCFD  7C                 	db	124
   652  00FCFE  36                 	db	54	;'6'
   653  00FCFF  2E                 	db	46
   654  00FD00  45                 	db	69	;'E'
   655  00FD01  45                 	db	69	;'E'
   656  00FD02  50                 	db	80	;'P'
   657  00FD03  00                 	db	0
   658  00FD04                     STR_41:
   659  00FD04  4C                 	db	76	;'L'
   660  00FD05  4F                 	db	79	;'O'
   661  00FD06  47                 	db	71	;'G'
   662  00FD07  20                 	db	32
   663  00FD08  31                 	db	49	;'1'
   664  00FD09  20                 	db	32
   665  00FD0A  20                 	db	32
   666  00FD0B  20                 	db	32
   667  00FD0C  20                 	db	32
   668  00FD0D  20                 	db	32
   669  00FD0E  20                 	db	32
   670  00FD0F  20                 	db	32
   671  00FD10  20                 	db	32
   672  00FD11  20                 	db	32
   673  00FD12  20                 	db	32
   674  00FD13  20                 	db	32
   675  00FD14  00                 	db	0
   676  00FD15                     STR_40:
   677  00FD15  4C                 	db	76	;'L'
   678  00FD16  4F                 	db	79	;'O'
   679  00FD17  47                 	db	71	;'G'
   680  00FD18  20                 	db	32
   681  00FD19  32                 	db	50	;'2'
   682  00FD1A  20                 	db	32
   683  00FD1B  20                 	db	32
   684  00FD1C  20                 	db	32
   685  00FD1D  20                 	db	32
   686  00FD1E  20                 	db	32
   687  00FD1F  20                 	db	32
   688  00FD20  20                 	db	32
   689  00FD21  20                 	db	32
   690  00FD22  20                 	db	32
   691  00FD23  20                 	db	32
   692  00FD24  20                 	db	32
   693  00FD25  00                 	db	0
   694  00FD26                     STR_44:
   695  00FD26  4C                 	db	76	;'L'
   696  00FD27  4F                 	db	79	;'O'
   697  00FD28  47                 	db	71	;'G'
   698  00FD29  20                 	db	32
   699  00FD2A  33                 	db	51	;'3'
   700  00FD2B  20                 	db	32
   701  00FD2C  20                 	db	32
   702  00FD2D  20                 	db	32
   703  00FD2E  20                 	db	32
   704  00FD2F  20                 	db	32
   705  00FD30  20                 	db	32
   706  00FD31  20                 	db	32
   707  00FD32  20                 	db	32
   708  00FD33  20                 	db	32
   709  00FD34  20                 	db	32
   710  00FD35  20                 	db	32
   711  00FD36  00                 	db	0
   712  00FD37                     STR_48:
   713  00FD37  4C                 	db	76	;'L'
   714  00FD38  4F                 	db	79	;'O'
   715  00FD39  47                 	db	71	;'G'
   716  00FD3A  20                 	db	32
   717  00FD3B  34                 	db	52	;'4'
   718  00FD3C  20                 	db	32
   719  00FD3D  20                 	db	32
   720  00FD3E  20                 	db	32
   721  00FD3F  20                 	db	32
   722  00FD40  20                 	db	32
   723  00FD41  20                 	db	32
   724  00FD42  20                 	db	32
   725  00FD43  20                 	db	32
   726  00FD44  20                 	db	32
   727  00FD45  20                 	db	32
   728  00FD46  20                 	db	32
   729  00FD47  00                 	db	0
   730  00FD48                     STR_36:
   731  00FD48  33                 	db	51	;'3'
   732  00FD49  2E                 	db	46
   733  00FD4A  20                 	db	32
   734  00FD4B  4C                 	db	76	;'L'
   735  00FD4C  4F                 	db	79	;'O'
   736  00FD4D  47                 	db	71	;'G'
   737  00FD4E  53                 	db	83	;'S'
   738  00FD4F  20                 	db	32
   739  00FD50  20                 	db	32
   740  00FD51  20                 	db	32
   741  00FD52  20                 	db	32
   742  00FD53  20                 	db	32
   743  00FD54  20                 	db	32
   744  00FD55  20                 	db	32
   745  00FD56  20                 	db	32
   746  00FD57  20                 	db	32
   747  00FD58  00                 	db	0
   748  00FD59                     STR_32:
   749  00FD59  32                 	db	50	;'2'
   750  00FD5A  2E                 	db	46
   751  00FD5B  20                 	db	32
   752  00FD5C  53                 	db	83	;'S'
   753  00FD5D  4F                 	db	79	;'O'
   754  00FD5E  52                 	db	82	;'R'
   755  00FD5F  54                 	db	84	;'T'
   756  00FD60  20                 	db	32
   757  00FD61  20                 	db	32
   758  00FD62  20                 	db	32
   759  00FD63  20                 	db	32
   760  00FD64  20                 	db	32
   761  00FD65  20                 	db	32
   762  00FD66  20                 	db	32
   763  00FD67  20                 	db	32
   764  00FD68  20                 	db	32
   765  00FD69  00                 	db	0
   766  00FD6A                     STR_33:
   767  00FD6A  31                 	db	49	;'1'
   768  00FD6B  2E                 	db	46
   769  00FD6C  20                 	db	32
   770  00FD6D  44                 	db	68	;'D'
   771  00FD6E  41                 	db	65	;'A'
   772  00FD6F  54                 	db	84	;'T'
   773  00FD70  45                 	db	69	;'E'
   774  00FD71  2F                 	db	47
   775  00FD72  54                 	db	84	;'T'
   776  00FD73  49                 	db	73	;'I'
   777  00FD74  4D                 	db	77	;'M'
   778  00FD75  45                 	db	69	;'E'
   779  00FD76  20                 	db	32
   780  00FD77  20                 	db	32
   781  00FD78  20                 	db	32
   782  00FD79  20                 	db	32
   783  00FD7A  00                 	db	0
   784  00FD7B                     STR_24:
   785  00FD7B  20                 	db	32
   786  00FD7C  2D                 	db	45
   787  00FD7D  2D                 	db	45
   788  00FD7E  20                 	db	32
   789  00FD7F  50                 	db	80	;'P'
   790  00FD80  4F                 	db	79	;'O'
   791  00FD81  50                 	db	80	;'P'
   792  00FD82  20                 	db	32
   793  00FD83  20                 	db	32
   794  00FD84  43                 	db	67	;'C'
   795  00FD85  41                 	db	65	;'A'
   796  00FD86  4E                 	db	78	;'N'
   797  00FD87  20                 	db	32
   798  00FD88  2D                 	db	45
   799  00FD89  2D                 	db	45
   800  00FD8A  20                 	db	32
   801  00FD8B  00                 	db	0
   802  00FD8C                     STR_26:
   803  00FD8C  20                 	db	32
   804  00FD8D  2D                 	db	45
   805  00FD8E  2D                 	db	45
   806  00FD8F  20                 	db	32
   807  00FD90  53                 	db	83	;'S'
   808  00FD91  4F                 	db	79	;'O'
   809  00FD92  55                 	db	85	;'U'
   810  00FD93  50                 	db	80	;'P'
   811  00FD94  20                 	db	32
   812  00FD95  43                 	db	67	;'C'
   813  00FD96  41                 	db	65	;'A'
   814  00FD97  4E                 	db	78	;'N'
   815  00FD98  20                 	db	32
   816  00FD99  2D                 	db	45
   817  00FD9A  2D                 	db	45
   818  00FD9B  20                 	db	32
   819  00FD9C  00                 	db	0
   820  00FD9D                     STR_28:
   821  00FD9D  2D                 	db	45
   822  00FD9E  2D                 	db	45
   823  00FD9F  20                 	db	32
   824  00FDA0  54                 	db	84	;'T'
   825  00FDA1  4F                 	db	79	;'O'
   826  00FDA2  54                 	db	84	;'T'
   827  00FDA3  41                 	db	65	;'A'
   828  00FDA4  4C                 	db	76	;'L'
   829  00FDA5  20                 	db	32
   830  00FDA6  43                 	db	67	;'C'
   831  00FDA7  41                 	db	65	;'A'
   832  00FDA8  4E                 	db	78	;'N'
   833  00FDA9  53                 	db	83	;'S'
   834  00FDAA  20                 	db	32
   835  00FDAB  2D                 	db	45
   836  00FDAC  2D                 	db	45
   837  00FDAD  00                 	db	0
   838  00FDAE                     STR_39:
   839  00FDAE  4C                 	db	76	;'L'
   840  00FDAF  4F                 	db	79	;'O'
   841  00FDB0  47                 	db	71	;'G'
   842  00FDB1  20                 	db	32
   843  00FDB2  31                 	db	49	;'1'
   844  00FDB3  20                 	db	32
   845  00FDB4  20                 	db	32
   846  00FDB5  20                 	db	32
   847  00FDB6  20                 	db	32
   848  00FDB7  20                 	db	32
   849  00FDB8  20                 	db	32
   850  00FDB9  20                 	db	32
   851  00FDBA  20                 	db	32
   852  00FDBB  20                 	db	32
   853  00FDBC  20                 	db	32
   854  00FDBD  3C                 	db	60	;'<'
   855  00FDBE  00                 	db	0
   856  00FDBF                     STR_42:
   857  00FDBF  4C                 	db	76	;'L'
   858  00FDC0  4F                 	db	79	;'O'
   859  00FDC1  47                 	db	71	;'G'
   860  00FDC2  20                 	db	32
   861  00FDC3  32                 	db	50	;'2'
   862  00FDC4  20                 	db	32
   863  00FDC5  20                 	db	32
   864  00FDC6  20                 	db	32
   865  00FDC7  20                 	db	32
   866  00FDC8  20                 	db	32
   867  00FDC9  20                 	db	32
   868  00FDCA  20                 	db	32
   869  00FDCB  20                 	db	32
   870  00FDCC  20                 	db	32
   871  00FDCD  20                 	db	32
   872  00FDCE  3C                 	db	60	;'<'
   873  00FDCF  00                 	db	0
   874  00FDD0                     STR_46:
   875  00FDD0  4C                 	db	76	;'L'
   876  00FDD1  4F                 	db	79	;'O'
   877  00FDD2  47                 	db	71	;'G'
   878  00FDD3  20                 	db	32
   879  00FDD4  33                 	db	51	;'3'
   880  00FDD5  20                 	db	32
   881  00FDD6  20                 	db	32
   882  00FDD7  20                 	db	32
   883  00FDD8  20                 	db	32
   884  00FDD9  20                 	db	32
   885  00FDDA  20                 	db	32
   886  00FDDB  20                 	db	32
   887  00FDDC  20                 	db	32
   888  00FDDD  20                 	db	32
   889  00FDDE  20                 	db	32
   890  00FDDF  3C                 	db	60	;'<'
   891  00FDE0  00                 	db	0
   892  00FDE1                     STR_50:
   893  00FDE1  4C                 	db	76	;'L'
   894  00FDE2  4F                 	db	79	;'O'
   895  00FDE3  47                 	db	71	;'G'
   896  00FDE4  20                 	db	32
   897  00FDE5  34                 	db	52	;'4'
   898  00FDE6  20                 	db	32
   899  00FDE7  20                 	db	32
   900  00FDE8  20                 	db	32
   901  00FDE9  20                 	db	32
   902  00FDEA  20                 	db	32
   903  00FDEB  20                 	db	32
   904  00FDEC  20                 	db	32
   905  00FDED  20                 	db	32
   906  00FDEE  20                 	db	32
   907  00FDEF  20                 	db	32
   908  00FDF0  3C                 	db	60	;'<'
   909  00FDF1  00                 	db	0
   910  00FDF2                     STR_38:
   911  00FDF2  33                 	db	51	;'3'
   912  00FDF3  2E                 	db	46
   913  00FDF4  20                 	db	32
   914  00FDF5  4C                 	db	76	;'L'
   915  00FDF6  4F                 	db	79	;'O'
   916  00FDF7  47                 	db	71	;'G'
   917  00FDF8  53                 	db	83	;'S'
   918  00FDF9  20                 	db	32
   919  00FDFA  20                 	db	32
   920  00FDFB  20                 	db	32
   921  00FDFC  20                 	db	32
   922  00FDFD  20                 	db	32
   923  00FDFE  20                 	db	32
   924  00FDFF  20                 	db	32
   925  00FE00  20                 	db	32
   926  00FE01  3C                 	db	60	;'<'
   927  00FE02  00                 	db	0
   928  00FE03                     STR_34:
   929  00FE03  32                 	db	50	;'2'
   930  00FE04  2E                 	db	46
   931  00FE05  20                 	db	32
   932  00FE06  53                 	db	83	;'S'
   933  00FE07  4F                 	db	79	;'O'
   934  00FE08  52                 	db	82	;'R'
   935  00FE09  54                 	db	84	;'T'
   936  00FE0A  20                 	db	32
   937  00FE0B  20                 	db	32
   938  00FE0C  20                 	db	32
   939  00FE0D  20                 	db	32
   940  00FE0E  20                 	db	32
   941  00FE0F  20                 	db	32
   942  00FE10  20                 	db	32
   943  00FE11  20                 	db	32
   944  00FE12  3C                 	db	60	;'<'
   945  00FE13  00                 	db	0
   946  00FE14                     STR_31:
   947  00FE14  31                 	db	49	;'1'
   948  00FE15  2E                 	db	46
   949  00FE16  20                 	db	32
   950  00FE17  44                 	db	68	;'D'
   951  00FE18  41                 	db	65	;'A'
   952  00FE19  54                 	db	84	;'T'
   953  00FE1A  45                 	db	69	;'E'
   954  00FE1B  2F                 	db	47
   955  00FE1C  54                 	db	84	;'T'
   956  00FE1D  49                 	db	73	;'I'
   957  00FE1E  4D                 	db	77	;'M'
   958  00FE1F  45                 	db	69	;'E'
   959  00FE20  20                 	db	32
   960  00FE21  20                 	db	32
   961  00FE22  20                 	db	32
   962  00FE23  3C                 	db	60	;'<'
   963  00FE24  00                 	db	0
   964  00FE25                     STR_6:
   965  00FE25  50                 	db	80	;'P'
   966  00FE26  41                 	db	65	;'A'
   967  00FE27  55                 	db	85	;'U'
   968  00FE28  53                 	db	83	;'S'
   969  00FE29  45                 	db	69	;'E'
   970  00FE2A  20                 	db	32
   971  00FE2B  3C                 	db	60	;'<'
   972  00FE2C  20                 	db	32
   973  00FE2D  7C                 	db	124
   974  00FE2E  20                 	db	32
   975  00FE2F  42                 	db	66	;'B'
   976  00FE30  41                 	db	65	;'A'
   977  00FE31  43                 	db	67	;'C'
   978  00FE32  4B                 	db	75	;'K'
   979  00FE33  20                 	db	32
   980  00FE34  3E                 	db	62	;'>'
   981  00FE35  00                 	db	0
   982  00FE36                     STR_30:
   983  00FE36  50                 	db	80	;'P'
   984  00FE37  55                 	db	85	;'U'
   985  00FE38  53                 	db	83	;'S'
   986  00FE39  48                 	db	72	;'H'
   987  00FE3A  20                 	db	32
   988  00FE3B  54                 	db	84	;'T'
   989  00FE3C  4F                 	db	79	;'O'
   990  00FE3D  20                 	db	32
   991  00FE3E  43                 	db	67	;'C'
   992  00FE3F  4F                 	db	79	;'O'
   993  00FE40  4E                 	db	78	;'N'
   994  00FE41  54                 	db	84	;'T'
   995  00FE42  49                 	db	73	;'I'
   996  00FE43  4E                 	db	78	;'N'
   997  00FE44  55                 	db	85	;'U'
   998  00FE45  45                 	db	69	;'E'
   999  00FE46  00                 	db	0
  1000  00FE47                     STR_82:
  1001  00FE47  4D                 	db	77	;'M'
  1002  00FE48  41                 	db	65	;'A'
  1003  00FE49  47                 	db	71	;'G'
  1004  00FE4A  5F                 	db	95	;'_'
  1005  00FE4B  73                 	db	115	;'s'
  1006  00FE4C  69                 	db	105	;'i'
  1007  00FE4D  67                 	db	103	;'g'
  1008  00FE4E  6E                 	db	110	;'n'
  1009  00FE4F  61                 	db	97	;'a'
  1010  00FE50  6C                 	db	108	;'l'
  1011  00FE51  3A                 	db	58	;':'
  1012  00FE52  20                 	db	32
  1013  00FE53  25                 	db	37
  1014  00FE54  64                 	db	100	;'d'
  1015  00FE55  20                 	db	32
  1016  00FE56  00                 	db	0
  1017  00FE57                     STR_98:
  1018  00FE57  54                 	db	84	;'T'
  1019  00FE58  53                 	db	83	;'S'
  1020  00FE59  54                 	db	84	;'T'
  1021  00FE5A  3A                 	db	58	;':'
  1022  00FE5B  20                 	db	32
  1023  00FE5C  54                 	db	84	;'T'
  1024  00FE5D  49                 	db	73	;'I'
  1025  00FE5E  4C                 	db	76	;'L'
  1026  00FE5F  54                 	db	84	;'T'
  1027  00FE60  20                 	db	32
  1028  00FE61  53                 	db	83	;'S'
  1029  00FE62  45                 	db	69	;'E'
  1030  00FE63  52                 	db	82	;'R'
  1031  00FE64  56                 	db	86	;'V'
  1032  00FE65  4F                 	db	79	;'O'
  1033  00FE66  00                 	db	0
  1034  00FE67                     STR_4:
  1035  00FE67  44                 	db	68	;'D'
  1036  00FE68  49                 	db	73	;'I'
  1037  00FE69  44                 	db	68	;'D'
  1038  00FE6A  4E                 	db	78	;'N'
  1039  00FE6B  27                 	db	39
  1040  00FE6C  54                 	db	84	;'T'
  1041  00FE6D  20                 	db	32
  1042  00FE6E  43                 	db	67	;'C'
  1043  00FE6F  4F                 	db	79	;'O'
  1044  00FE70  4D                 	db	77	;'M'
  1045  00FE71  50                 	db	80	;'P'
  1046  00FE72  4C                 	db	76	;'L'
  1047  00FE73  45                 	db	69	;'E'
  1048  00FE74  54                 	db	84	;'T'
  1049  00FE75  45                 	db	69	;'E'
  1050  00FE76  00                 	db	0
  1051  00FE77                     STR_80:
  1052  00FE77  49                 	db	73	;'I'
  1053  00FE78  52                 	db	82	;'R'
  1054  00FE79  5F                 	db	95	;'_'
  1055  00FE7A  73                 	db	115	;'s'
  1056  00FE7B  69                 	db	105	;'i'
  1057  00FE7C  67                 	db	103	;'g'
  1058  00FE7D  6E                 	db	110	;'n'
  1059  00FE7E  61                 	db	97	;'a'
  1060  00FE7F  6C                 	db	108	;'l'
  1061  00FE80  3A                 	db	58	;':'
  1062  00FE81  20                 	db	32
  1063  00FE82  25                 	db	37
  1064  00FE83  64                 	db	100	;'d'
  1065  00FE84  20                 	db	32
  1066  00FE85  00                 	db	0
  1067  00FE86                     STR_104:
  1068  00FE86  43                 	db	67	;'C'
  1069  00FE87  41                 	db	65	;'A'
  1070  00FE88  4D                 	db	77	;'M'
  1071  00FE89  20                 	db	32
  1072  00FE8A  44                 	db	68	;'D'
  1073  00FE8B  57                 	db	87	;'W'
  1074  00FE8C  4E                 	db	78	;'N'
  1075  00FE8D  20                 	db	32
  1076  00FE8E  7C                 	db	124
  1077  00FE8F  52                 	db	82	;'R'
  1078  00FE90  43                 	db	67	;'C'
  1079  00FE91  30                 	db	48	;'0'
  1080  00FE92  3D                 	db	61	;'='
  1081  00FE93  30                 	db	48	;'0'
  1082  00FE94  00                 	db	0
  1083  00FE95                     STR_103:
  1084  00FE95  43                 	db	67	;'C'
  1085  00FE96  41                 	db	65	;'A'
  1086  00FE97  4D                 	db	77	;'M'
  1087  00FE98  20                 	db	32
  1088  00FE99  55                 	db	85	;'U'
  1089  00FE9A  50                 	db	80	;'P'
  1090  00FE9B  20                 	db	32
  1091  00FE9C  20                 	db	32
  1092  00FE9D  7C                 	db	124
  1093  00FE9E  52                 	db	82	;'R'
  1094  00FE9F  43                 	db	67	;'C'
  1095  00FEA0  30                 	db	48	;'0'
  1096  00FEA1  3D                 	db	61	;'='
  1097  00FEA2  31                 	db	49	;'1'
  1098  00FEA3  00                 	db	0
  1099  00FEA4                     STR_81:
  1100  00FEA4  54                 	db	84	;'T'
  1101  00FEA5  53                 	db	83	;'S'
  1102  00FEA6  54                 	db	84	;'T'
  1103  00FEA7  3A                 	db	58	;':'
  1104  00FEA8  20                 	db	32
  1105  00FEA9  4D                 	db	77	;'M'
  1106  00FEAA  41                 	db	65	;'A'
  1107  00FEAB  47                 	db	71	;'G'
  1108  00FEAC  4E                 	db	78	;'N'
  1109  00FEAD  45                 	db	69	;'E'
  1110  00FEAE  54                 	db	84	;'T'
  1111  00FEAF  49                 	db	73	;'I'
  1112  00FEB0  53                 	db	83	;'S'
  1113  00FEB1  4D                 	db	77	;'M'
  1114  00FEB2  00                 	db	0
  1115  00FEB3                     STR_102:
  1116  00FEB3  54                 	db	84	;'T'
  1117  00FEB4  53                 	db	83	;'S'
  1118  00FEB5  54                 	db	84	;'T'
  1119  00FEB6  3A                 	db	58	;':'
  1120  00FEB7  20                 	db	32
  1121  00FEB8  43                 	db	67	;'C'
  1122  00FEB9  41                 	db	65	;'A'
  1123  00FEBA  4D                 	db	77	;'M'
  1124  00FEBB  20                 	db	32
  1125  00FEBC  53                 	db	83	;'S'
  1126  00FEBD  45                 	db	69	;'E'
  1127  00FEBE  52                 	db	82	;'R'
  1128  00FEBF  56                 	db	86	;'V'
  1129  00FEC0  4F                 	db	79	;'O'
  1130  00FEC1  00                 	db	0
  1131  00FEC2                     STR_91:
  1132  00FEC2  54                 	db	84	;'T'
  1133  00FEC3  53                 	db	83	;'S'
  1134  00FEC4  54                 	db	84	;'T'
  1135  00FEC5  3A                 	db	58	;':'
  1136  00FEC6  20                 	db	32
  1137  00FEC7  50                 	db	80	;'P'
  1138  00FEC8  41                 	db	65	;'A'
  1139  00FEC9  4E                 	db	78	;'N'
  1140  00FECA  20                 	db	32
  1141  00FECB  53                 	db	83	;'S'
  1142  00FECC  45                 	db	69	;'E'
  1143  00FECD  52                 	db	82	;'R'
  1144  00FECE  56                 	db	86	;'V'
  1145  00FECF  4F                 	db	79	;'O'
  1146  00FED0  00                 	db	0
  1147  00FED1                     STR_75:
  1148  00FED1  41                 	db	65	;'A'
  1149  00FED2  4C                 	db	76	;'L'
  1150  00FED3  47                 	db	71	;'G'
  1151  00FED4  34                 	db	52	;'4'
  1152  00FED5  3A                 	db	58	;':'
  1153  00FED6  20                 	db	32
  1154  00FED7  41                 	db	65	;'A'
  1155  00FED8  4C                 	db	76	;'L'
  1156  00FED9  4C                 	db	76	;'L'
  1157  00FEDA  20                 	db	32
  1158  00FEDB  43                 	db	67	;'C'
  1159  00FEDC  41                 	db	65	;'A'
  1160  00FEDD  4E                 	db	78	;'N'
  1161  00FEDE  53                 	db	83	;'S'
  1162  00FEDF  00                 	db	0
  1163  00FEE0                     STR_85:
  1164  00FEE0  54                 	db	84	;'T'
  1165  00FEE1  53                 	db	83	;'S'
  1166  00FEE2  54                 	db	84	;'T'
  1167  00FEE3  3A                 	db	58	;':'
  1168  00FEE4  20                 	db	32
  1169  00FEE5  44                 	db	68	;'D'
  1170  00FEE6  43                 	db	67	;'C'
  1171  00FEE7  20                 	db	32
  1172  00FEE8  4D                 	db	77	;'M'
  1173  00FEE9  4F                 	db	79	;'O'
  1174  00FEEA  54                 	db	84	;'T'
  1175  00FEEB  4F                 	db	79	;'O'
  1176  00FEEC  52                 	db	82	;'R'
  1177  00FEED  53                 	db	83	;'S'
  1178  00FEEE  00                 	db	0
  1179  00FEEF                     STR_70:
  1180  00FEEF  41                 	db	65	;'A'
  1181  00FEF0  4C                 	db	76	;'L'
  1182  00FEF1  47                 	db	71	;'G'
  1183  00FEF2  4F                 	db	79	;'O'
  1184  00FEF3  52                 	db	82	;'R'
  1185  00FEF4  49                 	db	73	;'I'
  1186  00FEF5  54                 	db	84	;'T'
  1187  00FEF6  48                 	db	72	;'H'
  1188  00FEF7  4D                 	db	77	;'M'
  1189  00FEF8  20                 	db	32
  1190  00FEF9  54                 	db	84	;'T'
  1191  00FEFA  45                 	db	69	;'E'
  1192  00FEFB  53                 	db	83	;'S'
  1193  00FEFC  54                 	db	84	;'T'
  1194  00FEFD  00                 	db	0
  1195  00FEFE                     STR_86:
  1196  00FEFE  50                 	db	80	;'P'
  1197  00FEFF  49                 	db	73	;'I'
  1198  00FF00  4E                 	db	78	;'N'
  1199  00FF01  20                 	db	32
  1200  00FF02  52                 	db	82	;'R'
  1201  00FF03  41                 	db	65	;'A'
  1202  00FF04  35                 	db	53	;'5'
  1203  00FF05  20                 	db	32
  1204  00FF06  48                 	db	72	;'H'
  1205  00FF07  49                 	db	73	;'I'
  1206  00FF08  47                 	db	71	;'G'
  1207  00FF09  48                 	db	72	;'H'
  1208  00FF0A  2E                 	db	46
  1209  00FF0B  00                 	db	0
  1210  00FF0C                     STR_73:
  1211  00FF0C  41                 	db	65	;'A'
  1212  00FF0D  4C                 	db	76	;'L'
  1213  00FF0E  47                 	db	71	;'G'
  1214  00FF0F  32                 	db	50	;'2'
  1215  00FF10  3A                 	db	58	;':'
  1216  00FF11  20                 	db	32
  1217  00FF12  31                 	db	49	;'1'
  1218  00FF13  32                 	db	50	;'2'
  1219  00FF14  20                 	db	32
  1220  00FF15  43                 	db	67	;'C'
  1221  00FF16  41                 	db	65	;'A'
  1222  00FF17  4E                 	db	78	;'N'
  1223  00FF18  53                 	db	83	;'S'
  1224  00FF19  00                 	db	0
  1225  00FF1A                     STR_76:
  1226  00FF1A  41                 	db	65	;'A'
  1227  00FF1B  4C                 	db	76	;'L'
  1228  00FF1C  47                 	db	71	;'G'
  1229  00FF1D  35                 	db	53	;'5'
  1230  00FF1E  3A                 	db	58	;':'
  1231  00FF1F  20                 	db	32
  1232  00FF20  4E                 	db	78	;'N'
  1233  00FF21  4F                 	db	79	;'O'
  1234  00FF22  20                 	db	32
  1235  00FF23  43                 	db	67	;'C'
  1236  00FF24  41                 	db	65	;'A'
  1237  00FF25  4E                 	db	78	;'N'
  1238  00FF26  53                 	db	83	;'S'
  1239  00FF27  00                 	db	0
  1240  00FF28                     STR_71:
  1241  00FF28  50                 	db	80	;'P'
  1242  00FF29  55                 	db	85	;'U'
  1243  00FF2A  53                 	db	83	;'S'
  1244  00FF2B  48                 	db	72	;'H'
  1245  00FF2C  20                 	db	32
  1246  00FF2D  54                 	db	84	;'T'
  1247  00FF2E  4F                 	db	79	;'O'
  1248  00FF2F  20                 	db	32
  1249  00FF30  53                 	db	83	;'S'
  1250  00FF31  54                 	db	84	;'T'
  1251  00FF32  41                 	db	65	;'A'
  1252  00FF33  52                 	db	82	;'R'
  1253  00FF34  54                 	db	84	;'T'
  1254  00FF35  00                 	db	0
  1255  00FF36                     STR_23:
  1256  00FF36  25                 	db	37
  1257  00FF37  64                 	db	100	;'d'
  1258  00FF38  20                 	db	32
  1259  00FF39  4D                 	db	77	;'M'
  1260  00FF3A  49                 	db	73	;'I'
  1261  00FF3B  4E                 	db	78	;'N'
  1262  00FF3C  20                 	db	32
  1263  00FF3D  25                 	db	37
  1264  00FF3E  64                 	db	100	;'d'
  1265  00FF3F  20                 	db	32
  1266  00FF40  53                 	db	83	;'S'
  1267  00FF41  45                 	db	69	;'E'
  1268  00FF42  43                 	db	67	;'C'
  1269  00FF43  00                 	db	0
  1270  00FF44                     STR_2:
  1271  00FF44  54                 	db	84	;'T'
  1272  00FF45  49                 	db	73	;'I'
  1273  00FF46  4D                 	db	77	;'M'
  1274  00FF47  45                 	db	69	;'E'
  1275  00FF48  3A                 	db	58	;':'
  1276  00FF49  20                 	db	32
  1277  00FF4A  25                 	db	37
  1278  00FF4B  64                 	db	100	;'d'
  1279  00FF4C  3A                 	db	58	;':'
  1280  00FF4D  25                 	db	37
  1281  00FF4E  30                 	db	48	;'0'
  1282  00FF4F  32                 	db	50	;'2'
  1283  00FF50  64                 	db	100	;'d'
  1284  00FF51  00                 	db	0
  1285  00FF52                     STR_79:
  1286  00FF52  54                 	db	84	;'T'
  1287  00FF53  53                 	db	83	;'S'
  1288  00FF54  54                 	db	84	;'T'
  1289  00FF55  3A                 	db	58	;':'
  1290  00FF56  20                 	db	32
  1291  00FF57  49                 	db	73	;'I'
  1292  00FF58  52                 	db	82	;'R'
  1293  00FF59  20                 	db	32
  1294  00FF5A  53                 	db	83	;'S'
  1295  00FF5B  4E                 	db	78	;'N'
  1296  00FF5C  53                 	db	83	;'S'
  1297  00FF5D  52                 	db	82	;'R'
  1298  00FF5E  00                 	db	0
  1299  00FF5F                     STR_65:
  1300  00FF5F  54                 	db	84	;'T'
  1301  00FF60  49                 	db	73	;'I'
  1302  00FF61  4D                 	db	77	;'M'
  1303  00FF62  45                 	db	69	;'E'
  1304  00FF63  20                 	db	32
  1305  00FF64  25                 	db	37
  1306  00FF65  64                 	db	100	;'d'
  1307  00FF66  3A                 	db	58	;':'
  1308  00FF67  25                 	db	37
  1309  00FF68  30                 	db	48	;'0'
  1310  00FF69  32                 	db	50	;'2'
  1311  00FF6A  64                 	db	100	;'d'
  1312  00FF6B  00                 	db	0
  1313  00FF6C                     STR_74:
  1314  00FF6C  41                 	db	65	;'A'
  1315  00FF6D  4C                 	db	76	;'L'
  1316  00FF6E  47                 	db	71	;'G'
  1317  00FF6F  33                 	db	51	;'3'
  1318  00FF70  3A                 	db	58	;':'
  1319  00FF71  20                 	db	32
  1320  00FF72  31                 	db	49	;'1'
  1321  00FF73  20                 	db	32
  1322  00FF74  43                 	db	67	;'C'
  1323  00FF75  41                 	db	65	;'A'
  1324  00FF76  4E                 	db	78	;'N'
  1325  00FF77  00                 	db	0
  1326  00FF78                     STR_88:
  1327  00FF78  50                 	db	80	;'P'
  1328  00FF79  49                 	db	73	;'I'
  1329  00FF7A  4E                 	db	78	;'N'
  1330  00FF7B  20                 	db	32
  1331  00FF7C  52                 	db	82	;'R'
  1332  00FF7D  41                 	db	65	;'A'
  1333  00FF7E  33                 	db	51	;'3'
  1334  00FF7F  2E                 	db	46
  1335  00FF80  2E                 	db	46
  1336  00FF81  2E                 	db	46
  1337  00FF82  00                 	db	0
  1338  00FF83                     STR_90:
  1339  00FF83  50                 	db	80	;'P'
  1340  00FF84  49                 	db	73	;'I'
  1341  00FF85  4E                 	db	78	;'N'
  1342  00FF86  20                 	db	32
  1343  00FF87  52                 	db	82	;'R'
  1344  00FF88  41                 	db	65	;'A'
  1345  00FF89  34                 	db	52	;'4'
  1346  00FF8A  2E                 	db	46
  1347  00FF8B  2E                 	db	46
  1348  00FF8C  2E                 	db	46
  1349  00FF8D  00                 	db	0
  1350  00FF8E                     STR_64:
  1351  00FF8E  53                 	db	83	;'S'
  1352  00FF8F  4F                 	db	79	;'O'
  1353  00FF90  52                 	db	82	;'R'
  1354  00FF91  54                 	db	84	;'T'
  1355  00FF92  49                 	db	73	;'I'
  1356  00FF93  4E                 	db	78	;'N'
  1357  00FF94  47                 	db	71	;'G'
  1358  00FF95  2E                 	db	46
  1359  00FF96  2E                 	db	46
  1360  00FF97  2E                 	db	46
  1361  00FF98  00                 	db	0
  1362  00FF99                     STR_83:
  1363  00FF99  41                 	db	65	;'A'
  1364  00FF9A  43                 	db	67	;'C'
  1365  00FF9B  54                 	db	84	;'T'
  1366  00FF9C  55                 	db	85	;'U'
  1367  00FF9D  41                 	db	65	;'A'
  1368  00FF9E  54                 	db	84	;'T'
  1369  00FF9F  4F                 	db	79	;'O'
  1370  00FFA0  52                 	db	82	;'R'
  1371  00FFA1  53                 	db	83	;'S'
  1372  00FFA2  00                 	db	0
  1373  00FFA3                     STR_22:
  1374  00FFA3  44                 	db	68	;'D'
  1375  00FFA4  55                 	db	85	;'U'
  1376  00FFA5  52                 	db	82	;'R'
  1377  00FFA6  41                 	db	65	;'A'
  1378  00FFA7  54                 	db	84	;'T'
  1379  00FFA8  49                 	db	73	;'I'
  1380  00FFA9  4F                 	db	79	;'O'
  1381  00FFAA  4E                 	db	78	;'N'
  1382  00FFAB  3A                 	db	58	;':'
  1383  00FFAC  00                 	db	0
  1384  00FFAD                     STR_77:
  1385  00FFAD  53                 	db	83	;'S'
  1386  00FFAE  45                 	db	69	;'E'
  1387  00FFAF  4E                 	db	78	;'N'
  1388  00FFB0  53                 	db	83	;'S'
  1389  00FFB1  4F                 	db	79	;'O'
  1390  00FFB2  52                 	db	82	;'R'
  1391  00FFB3  53                 	db	83	;'S'
  1392  00FFB4  00                 	db	0
  1393  00FFB5                     STR_107:
  1394  00FFB5  28                 	db	40
  1395  00FFB6  6E                 	db	110	;'n'
  1396  00FFB7  75                 	db	117	;'u'
  1397  00FFB8  6C                 	db	108	;'l'
  1398  00FFB9  6C                 	db	108	;'l'
  1399  00FFBA  29                 	db	41
  1400  00FFBB  00                 	db	0
  1401  00FFBC                     STR_67:
  1402  00FFBC  46                 	db	70	;'F'
  1403  00FFBD  41                 	db	65	;'A'
  1404  00FFBE  49                 	db	73	;'I'
  1405  00FFBF  4C                 	db	76	;'L'
  1406  00FFC0  45                 	db	69	;'E'
  1407  00FFC1  44                 	db	68	;'D'
  1408  00FFC2  00                 	db	0
  1409  00FFC3                     STR_7:
  1410  00FFC3  53                 	db	83	;'S'
  1411  00FFC4  54                 	db	84	;'T'
  1412  00FFC5  41                 	db	65	;'A'
  1413  00FFC6  52                 	db	82	;'R'
  1414  00FFC7  54                 	db	84	;'T'
  1415  00FFC8  3A                 	db	58	;':'
  1416  00FFC9  00                 	db	0
  1417  00FFCA                     STR_9:
  1418  00FFCA  46                 	db	70	;'F'
  1419  00FFCB  45                 	db	69	;'E'
  1420  00FFCC  42                 	db	66	;'B'
  1421  00FFCD  00                 	db	0
  1422  00FFCE                     STR_19:
  1423  00FFCE  44                 	db	68	;'D'
  1424  00FFCF  45                 	db	69	;'E'
  1425  00FFD0  43                 	db	67	;'C'
  1426  00FFD1  00                 	db	0
  1427  00FFD2                     STR_15:
  1428  00FFD2  41                 	db	65	;'A'
  1429  00FFD3  55                 	db	85	;'U'
  1430  00FFD4  47                 	db	71	;'G'
  1431  00FFD5  00                 	db	0
  1432  00FFD6                     STR_14:
  1433  00FFD6  4A                 	db	74	;'J'
  1434  00FFD7  55                 	db	85	;'U'
  1435  00FFD8  4C                 	db	76	;'L'
  1436  00FFD9  00                 	db	0
  1437  00FFDA                     STR_8:
  1438  00FFDA  4A                 	db	74	;'J'
  1439  00FFDB  41                 	db	65	;'A'
  1440  00FFDC  4E                 	db	78	;'N'
  1441  00FFDD  00                 	db	0
  1442  00FFDE                     STR_13:
  1443  00FFDE  4A                 	db	74	;'J'
  1444  00FFDF  55                 	db	85	;'U'
  1445  00FFE0  4E                 	db	78	;'N'
  1446  00FFE1  00                 	db	0
  1447  00FFE2                     STR_16:
  1448  00FFE2  53                 	db	83	;'S'
  1449  00FFE3  45                 	db	69	;'E'
  1450  00FFE4  50                 	db	80	;'P'
  1451  00FFE5  00                 	db	0
  1452  00FFE6                     STR_10:
  1453  00FFE6  4D                 	db	77	;'M'
  1454  00FFE7  41                 	db	65	;'A'
  1455  00FFE8  52                 	db	82	;'R'
  1456  00FFE9  00                 	db	0
  1457  00FFEA                     STR_11:
  1458  00FFEA  41                 	db	65	;'A'
  1459  00FFEB  50                 	db	80	;'P'
  1460  00FFEC  52                 	db	82	;'R'
  1461  00FFED  00                 	db	0
  1462  00FFEE                     STR_20:
  1463  00FFEE  45                 	db	69	;'E'
  1464  00FFEF  52                 	db	82	;'R'
  1465  00FFF0  52                 	db	82	;'R'
  1466  00FFF1  00                 	db	0
  1467  00FFF2                     STR_17:
  1468  00FFF2  4F                 	db	79	;'O'
  1469  00FFF3  43                 	db	67	;'C'
  1470  00FFF4  54                 	db	84	;'T'
  1471  00FFF5  00                 	db	0
  1472  00FFF6                     STR_18:
  1473  00FFF6  4E                 	db	78	;'N'
  1474  00FFF7  4F                 	db	79	;'O'
  1475  00FFF8  56                 	db	86	;'V'
  1476  00FFF9  00                 	db	0
  1477  00FFFA                     STR_12:
  1478  00FFFA  4D                 	db	77	;'M'
  1479  00FFFB  41                 	db	65	;'A'
  1480  00FFFC  59                 	db	89	;'Y'
  1481  00FFFD  00                 	db	0
  1482  0000                     
  1483                           ; #config settings
  1484  00FFFE  00                 	db	0	; dummy byte at the end
  1485  0000                     
  1486                           	psect	cinit
  1487  003934                     __pcinit:
  1488                           	opt stack 0
  1489  003934                     start_initialization:
  1490                           	opt stack 0
  1491  003934                     __initialization:
  1492                           	opt stack 0
  1493                           
  1494                           ; Initialize objects allocated to BANK1 (8 bytes)
  1495                           ; load TBLPTR registers with __pidataBANK1
  1496  003934  0E60               	movlw	low __pidataBANK1
  1497  003936  6EF6               	movwf	tblptrl,c
  1498  003938  0E40               	movlw	high __pidataBANK1
  1499  00393A  6EF7               	movwf	tblptrh,c
  1500  00393C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1501  00393E  6EF8               	movwf	tblptru,c
  1502  003940  EE01  F02D         	lfsr	0,__pdataBANK1
  1503  003944  EE10 F008          	lfsr	1,8
  1504  003948                     copy_data0:
  1505  003948  0009               	tblrd		*+
  1506  00394A  CFF5 FFEE          	movff	tablat,postinc0
  1507  00394E  50E5               	movf	postdec1,w,c
  1508  003950  50E1               	movf	fsr1l,w,c
  1509  003952  E1FA               	bnz	copy_data0
  1510                           
  1511                           ; Clear objects allocated to BANK1 (45 bytes)
  1512  003954  EE01  F000         	lfsr	0,__pbssBANK1
  1513  003958  0E2D               	movlw	45
  1514  00395A                     clear_0:
  1515  00395A  6AEE               	clrf	postinc0,c
  1516  00395C  06E8               	decf	wreg,f,c
  1517  00395E  E1FD               	bnz	clear_0
  1518                           
  1519                           ; Clear objects allocated to BANK0 (38 bytes)
  1520  003960  EE00  F0DA         	lfsr	0,__pbssBANK0
  1521  003964  0E26               	movlw	38
  1522  003966                     clear_1:
  1523  003966  6AEE               	clrf	postinc0,c
  1524  003968  06E8               	decf	wreg,f,c
  1525  00396A  E1FD               	bnz	clear_1
  1526                           
  1527                           ; Clear objects allocated to COMRAM (35 bytes)
  1528  00396C  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1529  003970  0E23               	movlw	35
  1530  003972                     clear_2:
  1531  003972  6AEE               	clrf	postinc0,c
  1532  003974  06E8               	decf	wreg,f,c
  1533  003976  E1FD               	bnz	clear_2
  1534  003978                     end_of_initialization:
  1535                           	opt stack 0
  1536  003978                     __end_of__initialization:
  1537                           	opt stack 0
  1538  003978  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1539  00397A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1540  00397C  0100               	movlb	0
  1541  00397E  EF2C  F019         	goto	_main	;jump to C main() function
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           postinc0	equ	0xFEE
  1547                           wreg	equ	0xFE8
  1548                           postdec1	equ	0xFE5
  1549                           fsr1l	equ	0xFE1
  1550                           
  1551                           	psect	bssCOMRAM
  1552  00005B                     __pbssCOMRAM:
  1553                           	opt stack 0
  1554  00005B                     _back:
  1555                           	opt stack 0
  1556  00005B                     	ds	2
  1557  00005D                     _count_can_no_lab:
  1558                           	opt stack 0
  1559  00005D                     	ds	2
  1560  00005F                     _count_can_w_lab:
  1561                           	opt stack 0
  1562  00005F                     	ds	2
  1563  000061                     _count_pop_no_tab:
  1564                           	opt stack 0
  1565  000061                     	ds	2
  1566  000063                     _count_pop_w_tab:
  1567                           	opt stack 0
  1568  000063                     	ds	2
  1569  000065                     _cur_can:
  1570                           	opt stack 0
  1571  000065                     	ds	2
  1572  000067                     _debug:
  1573                           	opt stack 0
  1574  000067                     	ds	2
  1575  000069                     _down:
  1576                           	opt stack 0
  1577  000069                     	ds	2
  1578  00006B                     _enter:
  1579                           	opt stack 0
  1580  00006B                     	ds	2
  1581  00006D                     _f_ID_receive:
  1582                           	opt stack 0
  1583  00006D                     	ds	2
  1584  00006F                     _f_can_coming_to_ID:
  1585                           	opt stack 0
  1586  00006F                     	ds	2
  1587  000071                     _f_can_coming_to_distribution:
  1588                           	opt stack 0
  1589  000071                     	ds	2
  1590  000073                     _f_lastCan:
  1591                           	opt stack 0
  1592  000073                     	ds	2
  1593  000075                     _firstboot:
  1594                           	opt stack 0
  1595  000075                     	ds	2
  1596  000077                     _up:
  1597                           	opt stack 0
  1598  000077                     	ds	2
  1599  000079                     _was_low_1:
  1600                           	opt stack 0
  1601  000079                     	ds	2
  1602  00007B                     _was_low_3:
  1603                           	opt stack 0
  1604  00007B                     	ds	2
  1605  00007D                     _input:
  1606                           	opt stack 0
  1607  00007D                     	ds	1
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1l	equ	0xFE1
  1616                           
  1617                           	psect	bssBANK0
  1618  0000DA                     __pbssBANK0:
  1619                           	opt stack 0
  1620  0000DA                     _IR_signal:
  1621                           	opt stack 0
  1622  0000DA                     	ds	2
  1623  0000DC                     _MAG_signal:
  1624                           	opt stack 0
  1625  0000DC                     	ds	2
  1626  0000DE                     _cur_state:
  1627                           	opt stack 0
  1628  0000DE                     	ds	2
  1629  0000E0                     _f_loadingNewCan:
  1630                           	opt stack 0
  1631  0000E0                     	ds	2
  1632  0000E2                     _first:
  1633                           	opt stack 0
  1634  0000E2                     	ds	2
  1635  0000E4                     _i:
  1636                           	opt stack 0
  1637  0000E4                     	ds	2
  1638  0000E6                     _log:
  1639                           	opt stack 0
  1640  0000E6                     	ds	2
  1641  0000E8                     _log_completion:
  1642                           	opt stack 0
  1643  0000E8                     	ds	2
  1644  0000EA                     _log_count_can_no_lab:
  1645                           	opt stack 0
  1646  0000EA                     	ds	2
  1647  0000EC                     _log_count_can_w_lab:
  1648                           	opt stack 0
  1649  0000EC                     	ds	2
  1650  0000EE                     _log_count_pop_no_tab:
  1651                           	opt stack 0
  1652  0000EE                     	ds	2
  1653  0000F0                     _log_count_pop_w_tab:
  1654                           	opt stack 0
  1655  0000F0                     	ds	2
  1656  0000F2                     _log_count_total:
  1657                           	opt stack 0
  1658  0000F2                     	ds	2
  1659  0000F4                     _log_total_time:
  1660                           	opt stack 0
  1661  0000F4                     	ds	2
  1662  0000F6                     _logstate:
  1663                           	opt stack 0
  1664  0000F6                     	ds	2
  1665  0000F8                     _total_time:
  1666                           	opt stack 0
  1667  0000F8                     	ds	2
  1668  0000FA                     _var:
  1669                           	opt stack 0
  1670  0000FA                     	ds	2
  1671  0000FC                     _machine_state:
  1672                           	opt stack 0
  1673  0000FC                     	ds	1
  1674  0000FD                     _sel:
  1675                           	opt stack 0
  1676  0000FD                     	ds	1
  1677  0000FE                     _count_total:
  1678                           	opt stack 0
  1679  0000FE                     	ds	2
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postdec1	equ	0xFE5
  1687                           fsr1l	equ	0xFE1
  1688                           
  1689                           	psect	bssBANK1
  1690  000100                     __pbssBANK1:
  1691                           	opt stack 0
  1692  000100                     _log_startTime:
  1693                           	opt stack 0
  1694  000100                     	ds	14
  1695  00010E                     _startTime:
  1696                           	opt stack 0
  1697  00010E                     	ds	14
  1698  00011C                     _servoTimes:
  1699                           	opt stack 0
  1700  00011C                     	ds	8
  1701  000124                     _time:
  1702                           	opt stack 0
  1703  000124                     	ds	7
  1704  00012B                     _f_can_distributed:
  1705                           	opt stack 0
  1706  00012B                     	ds	2
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           postdec1	equ	0xFE5
  1714                           fsr1l	equ	0xFE1
  1715                           
  1716                           	psect	dataBANK1
  1717  00012D                     __pdataBANK1:
  1718                           	opt stack 0
  1719  00012D                     UI@F3220:
  1720                           	opt stack 0
  1721  00012D                     	ds	4
  1722  000131                     printRTC@F3211:
  1723                           	opt stack 0
  1724  000131                     	ds	4
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           postinc0	equ	0xFEE
  1730                           wreg	equ	0xFE8
  1731                           postdec1	equ	0xFE5
  1732                           fsr1l	equ	0xFE1
  1733                           
  1734                           	psect	cstackBANK0
  1735  000080                     __pcstackBANK0:
  1736                           	opt stack 0
  1737  000080                     ??_PortTests:
  1738  000080                     ??_isdigit:
  1739  000080                     ??_readADC:
  1740  000080                     ??_I2C_Master_Wait:
  1741  000080                     ?___wmul:
  1742                           	opt stack 0
  1743  000080                     ?___awmod:
  1744                           	opt stack 0
  1745  000080                     ?___lwdiv:
  1746                           	opt stack 0
  1747  000080                     ?___lldiv:
  1748                           	opt stack 0
  1749  000080                     lcdNibble@temp:
  1750                           	opt stack 0
  1751  000080                     initTime@m:
  1752                           	opt stack 0
  1753  000080                     updateServoPosition@time_us:
  1754                           	opt stack 0
  1755  000080                     EEPROM_read@address:
  1756                           	opt stack 0
  1757  000080                     ___wmul@multiplier:
  1758                           	opt stack 0
  1759  000080                     ___awmod@dividend:
  1760                           	opt stack 0
  1761  000080                     ___lwdiv@dividend:
  1762                           	opt stack 0
  1763  000080                     strcpy@to:
  1764                           	opt stack 0
  1765  000080                     ___lldiv@dividend:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x0
  1769  000080                     	ds	1
  1770  000081                     readADC@channel:
  1771                           	opt stack 0
  1772  000081                     I2C_Master_Read@a:
  1773                           	opt stack 0
  1774  000081                     lcdNibble@data:
  1775                           	opt stack 0
  1776  000081                     initTime@h:
  1777                           	opt stack 0
  1778  000081                     _isdigit$1852:
  1779                           	opt stack 0
  1780  000081                     I2C_Master_Write@d:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x1
  1784  000081                     	ds	1
  1785  000082                     ??_readIR:
  1786  000082                     ??_readMAG:
  1787  000082                     I2C_Master_Read@temp:
  1788                           	opt stack 0
  1789  000082                     lcdInst@data:
  1790                           	opt stack 0
  1791  000082                     putch@data:
  1792                           	opt stack 0
  1793  000082                     initTime@w:
  1794                           	opt stack 0
  1795  000082                     isdigit@c:
  1796                           	opt stack 0
  1797  000082                     updateServoPosition@timer:
  1798                           	opt stack 0
  1799  000082                     ___wmul@multiplicand:
  1800                           	opt stack 0
  1801  000082                     ___awmod@divisor:
  1802                           	opt stack 0
  1803  000082                     ___lwdiv@divisor:
  1804                           	opt stack 0
  1805  000082                     strcpy@from:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x2
  1809  000082                     	ds	1
  1810  000083                     ??_initLCD:
  1811  000083                     initTime@DD:
  1812                           	opt stack 0
  1813  000083                     getRTC@i:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x3
  1817  000083                     	ds	1
  1818  000084                     ??_updateServoPosition:
  1819  000084                     initTime@MM:
  1820                           	opt stack 0
  1821  000084                     ___awmod@counter:
  1822                           	opt stack 0
  1823  000084                     readIR@res:
  1824                           	opt stack 0
  1825  000084                     readMAG@res:
  1826                           	opt stack 0
  1827  000084                     ___wmul@product:
  1828                           	opt stack 0
  1829  000084                     ___lwdiv@quotient:
  1830                           	opt stack 0
  1831  000084                     strcpy@cp:
  1832                           	opt stack 0
  1833  000084                     ___lldiv@divisor:
  1834                           	opt stack 0
  1835                           
  1836                           ; 4 bytes @ 0x4
  1837  000084                     	ds	1
  1838  000085                     ??_initSortTimer:
  1839  000085                     initTime@YY:
  1840                           	opt stack 0
  1841  000085                     ___awmod@sign:
  1842                           	opt stack 0
  1843                           
  1844                           ; 1 bytes @ 0x5
  1845  000085                     	ds	1
  1846  000086                     ??_ID:
  1847  000086                     ??_getIR:
  1848  000086                     ?___awdiv:
  1849                           	opt stack 0
  1850  000086                     initTime@s:
  1851                           	opt stack 0
  1852  000086                     ___lwdiv@counter:
  1853                           	opt stack 0
  1854  000086                     updateServoPosition@my_time:
  1855                           	opt stack 0
  1856  000086                     ___awdiv@dividend:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x6
  1860  000086                     	ds	1
  1861  000087                     ?___lwmod:
  1862                           	opt stack 0
  1863  000087                     ___lwmod@dividend:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0x7
  1867  000087                     	ds	1
  1868  000088                     ??_Distribution:
  1869  000088                     ??_initServos:
  1870  000088                     initSortTimer@i:
  1871                           	opt stack 0
  1872  000088                     ___awdiv@divisor:
  1873                           	opt stack 0
  1874  000088                     ___lldiv@quotient:
  1875                           	opt stack 0
  1876  000088                     ID@sensor_outputs:
  1877                           	opt stack 0
  1878                           
  1879                           ; 6 bytes @ 0x8
  1880  000088                     	ds	1
  1881  000089                     ___lwmod@divisor:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x9
  1885  000089                     	ds	1
  1886  00008A                     ___awdiv@counter:
  1887                           	opt stack 0
  1888                           
  1889                           ; 1 bytes @ 0xA
  1890  00008A                     	ds	1
  1891  00008B                     ___awdiv@sign:
  1892                           	opt stack 0
  1893  00008B                     ___lwmod@counter:
  1894                           	opt stack 0
  1895                           
  1896                           ; 1 bytes @ 0xB
  1897  00008B                     	ds	1
  1898  00008C                     ___lldiv@counter:
  1899                           	opt stack 0
  1900  00008C                     ___awdiv@quotient:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0xC
  1904  00008C                     	ds	1
  1905  00008D                     I2C_Master_Init@c:
  1906                           	opt stack 0
  1907                           
  1908                           ; 4 bytes @ 0xD
  1909  00008D                     	ds	1
  1910  00008E                     ?_printf:
  1911                           	opt stack 0
  1912  00008E                     printf@f:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0xE
  1916  00008E                     	ds	3
  1917  000091                     ??_I2C_Master_Init:
  1918                           
  1919                           ; 1 bytes @ 0x11
  1920  000091                     	ds	4
  1921  000095                     ??_loadRTC:
  1922                           
  1923                           ; 1 bytes @ 0x15
  1924  000095                     	ds	1
  1925  000096                     loadRTC@i:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x16
  1929  000096                     	ds	4
  1930  00009A                     ??_printf:
  1931                           
  1932                           ; 1 bytes @ 0x1A
  1933  00009A                     	ds	4
  1934  00009E                     printf@prec:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0x1E
  1938  00009E                     	ds	1
  1939  00009F                     printf@cp:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x1F
  1943  00009F                     	ds	2
  1944  0000A1                     printf@ap:
  1945                           	opt stack 0
  1946                           
  1947                           ; 2 bytes @ 0x21
  1948  0000A1                     	ds	2
  1949  0000A3                     printf@len:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x23
  1953  0000A3                     	ds	2
  1954  0000A5                     printf@val:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x25
  1958  0000A5                     	ds	2
  1959  0000A7                     printf@flag:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x27
  1963  0000A7                     	ds	1
  1964  0000A8                     printf@c:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x28
  1968  0000A8                     	ds	1
  1969  0000A9                     printf@width:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x29
  1973  0000A9                     	ds	2
  1974  0000AB                     ??_printRTC:
  1975  0000AB                     ??_algorithmTest:
  1976  0000AB                     ??_sensorTest:
  1977  0000AB                     ??_actuatorTest:
  1978  0000AB                     ??_PortTestA5:
  1979  0000AB                     EEPROM_write@address:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x2B
  1983  0000AB                     	ds	2
  1984  0000AD                     EEPROM_write@data:
  1985                           	opt stack 0
  1986  0000AD                     actuatorTest@i:
  1987                           	opt stack 0
  1988                           
  1989                           ; 1 bytes @ 0x2D
  1990  0000AD                     	ds	1
  1991  0000AE                     ??_EEPROM_write:
  1992  0000AE                     actuatorTest@i_1562:
  1993                           	opt stack 0
  1994  0000AE                     printRTC@INT_time:
  1995                           	opt stack 0
  1996                           
  1997                           ; 14 bytes @ 0x2E
  1998  0000AE                     	ds	1
  1999  0000AF                     EEPROM_write@i:
  2000                           	opt stack 0
  2001  0000AF                     actuatorTest@i_1563:
  2002                           	opt stack 0
  2003                           
  2004                           ; 1 bytes @ 0x2F
  2005  0000AF                     	ds	1
  2006  0000B0                     EEPROM_write@i_1310:
  2007                           	opt stack 0
  2008  0000B0                     actuatorTest@i_1565:
  2009                           	opt stack 0
  2010                           
  2011                           ; 1 bytes @ 0x30
  2012  0000B0                     	ds	1
  2013  0000B1                     ??_Loading:
  2014  0000B1                     logRun@num:
  2015                           	opt stack 0
  2016  0000B1                     actuatorTest@i_1566:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x31
  2020  0000B1                     	ds	1
  2021  0000B2                     logRun@byte1:
  2022                           	opt stack 0
  2023  0000B2                     actuatorTest@i_1568:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x32
  2027  0000B2                     	ds	1
  2028  0000B3                     logRun@byte2:
  2029                           	opt stack 0
  2030  0000B3                     actuatorTest@i_1569:
  2031                           	opt stack 0
  2032  0000B3                     Loading@addr:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x33
  2036  0000B3                     	ds	1
  2037  0000B4                     logRun@byte3:
  2038                           	opt stack 0
  2039  0000B4                     actuatorTest@i_1571:
  2040                           	opt stack 0
  2041                           
  2042                           ; 1 bytes @ 0x34
  2043  0000B4                     	ds	1
  2044  0000B5                     Loading@byte1:
  2045                           	opt stack 0
  2046  0000B5                     logRun@byte_i:
  2047                           	opt stack 0
  2048  0000B5                     actuatorTest@i_1572:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x35
  2052  0000B5                     	ds	1
  2053  0000B6                     logRun@byte11:
  2054                           	opt stack 0
  2055  0000B6                     actuatorTest@i_1574:
  2056                           	opt stack 0
  2057                           
  2058                           ; 1 bytes @ 0x36
  2059  0000B6                     	ds	1
  2060  0000B7                     actuatorTest@i_1575:
  2061                           	opt stack 0
  2062  0000B7                     logRun@i:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x37
  2066  0000B7                     	ds	1
  2067  0000B8                     actuatorTest@i_1577:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0x38
  2071  0000B8                     	ds	1
  2072  0000B9                     actuatorTest@i_1578:
  2073                           	opt stack 0
  2074  0000B9                     logRun@addr:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x39
  2078  0000B9                     	ds	1
  2079  0000BA                     actuatorTest@i_1581:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x3A
  2083  0000BA                     	ds	1
  2084  0000BB                     actuatorTest@i_1582:
  2085                           	opt stack 0
  2086                           
  2087                           ; 1 bytes @ 0x3B
  2088  0000BB                     	ds	1
  2089  0000BC                     actuatorTest@i_1584:
  2090                           	opt stack 0
  2091  0000BC                     printRTC@RTC_month:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x3C
  2095  0000BC                     	ds	1
  2096  0000BD                     actuatorTest@i_1585:
  2097                           	opt stack 0
  2098                           
  2099                           ; 1 bytes @ 0x3D
  2100  0000BD                     	ds	1
  2101  0000BE                     actuatorTest@i_1587:
  2102                           	opt stack 0
  2103  0000BE                     printRTC@month:
  2104                           	opt stack 0
  2105                           
  2106                           ; 4 bytes @ 0x3E
  2107  0000BE                     	ds	1
  2108  0000BF                     actuatorTest@i_1588:
  2109                           	opt stack 0
  2110                           
  2111                           ; 1 bytes @ 0x3F
  2112  0000BF                     	ds	1
  2113  0000C0                     actuatorTest@i_1591:
  2114                           	opt stack 0
  2115                           
  2116                           ; 1 bytes @ 0x40
  2117  0000C0                     	ds	1
  2118  0000C1                     actuatorTest@i_1592:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x41
  2122  0000C1                     	ds	1
  2123  0000C2                     actuatorTest@i_1594:
  2124                           	opt stack 0
  2125  0000C2                     printRTC@i:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x42
  2129  0000C2                     	ds	1
  2130  0000C3                     actuatorTest@i_1595:
  2131                           	opt stack 0
  2132                           
  2133                           ; 1 bytes @ 0x43
  2134  0000C3                     	ds	1
  2135  0000C4                     ??_Test:
  2136  0000C4                     ??_UI:
  2137                           
  2138                           ; 1 bytes @ 0x44
  2139  0000C4                     	ds	2
  2140  0000C6                     _UI$2205:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x46
  2144  0000C6                     	ds	2
  2145  0000C8                     UI@i:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x48
  2149  0000C8                     	ds	1
  2150  0000C9                     UI@i_408:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x49
  2154  0000C9                     	ds	1
  2155  0000CA                     UI@i_411:
  2156                           	opt stack 0
  2157                           
  2158                           ; 1 bytes @ 0x4A
  2159  0000CA                     	ds	1
  2160  0000CB                     UI@i_412:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x4B
  2164  0000CB                     	ds	1
  2165  0000CC                     UI@i_430:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x4C
  2169  0000CC                     	ds	1
  2170  0000CD                     UI@i_431:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x4D
  2174  0000CD                     	ds	1
  2175  0000CE                     UI@i_434:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x4E
  2179  0000CE                     	ds	1
  2180  0000CF                     UI@i_435:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x4F
  2184  0000CF                     	ds	1
  2185  0000D0                     UI@i_438:
  2186                           	opt stack 0
  2187                           
  2188                           ; 1 bytes @ 0x50
  2189  0000D0                     	ds	1
  2190  0000D1                     UI@i_439:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x51
  2194  0000D1                     	ds	1
  2195  0000D2                     UI@i_442:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x52
  2199  0000D2                     	ds	1
  2200  0000D3                     UI@i_443:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x53
  2204  0000D3                     	ds	1
  2205  0000D4                     UI@i_446:
  2206                           	opt stack 0
  2207                           
  2208                           ; 1 bytes @ 0x54
  2209  0000D4                     	ds	1
  2210  0000D5                     UI@i_447:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x55
  2214  0000D5                     	ds	1
  2215  0000D6                     UI@month:
  2216                           	opt stack 0
  2217                           
  2218                           ; 4 bytes @ 0x56
  2219  0000D6                     	ds	4
  2220  0000DA                     tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           postdec1	equ	0xFE5
  2227                           fsr1l	equ	0xFE1
  2228                           
  2229                           ; 1 bytes @ 0x5A
  2230                           
  2231                           	psect	cstackCOMRAM
  2232  000001                     __pcstackCOMRAM:
  2233                           	opt stack 0
  2234  000001                     ??i2_I2C_Master_Wait:
  2235  000001                     ??i2_isdigit:
  2236  000001                     ?i2___wmul:
  2237                           	opt stack 0
  2238  000001                     ?i2___lwmod:
  2239                           	opt stack 0
  2240  000001                     i2lcdNibble@temp:
  2241                           	opt stack 0
  2242  000001                     i2EEPROM_read@address:
  2243                           	opt stack 0
  2244  000001                     i2___wmul@multiplier:
  2245                           	opt stack 0
  2246  000001                     i2___lwmod@dividend:
  2247                           	opt stack 0
  2248  000001                     i2strcpy@to:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x0
  2252  000001                     	ds	1
  2253  000002                     i2I2C_Master_Read@a:
  2254                           	opt stack 0
  2255  000002                     i2lcdNibble@data:
  2256                           	opt stack 0
  2257  000002                     i2_isdigit$1852:
  2258                           	opt stack 0
  2259  000002                     i2I2C_Master_Write@d:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x1
  2263  000002                     	ds	1
  2264  000003                     i2I2C_Master_Read@temp:
  2265                           	opt stack 0
  2266  000003                     i2lcdInst@data:
  2267                           	opt stack 0
  2268  000003                     i2putch@data:
  2269                           	opt stack 0
  2270  000003                     i2isdigit@c:
  2271                           	opt stack 0
  2272  000003                     i2___wmul@multiplicand:
  2273                           	opt stack 0
  2274  000003                     i2___lwmod@divisor:
  2275                           	opt stack 0
  2276  000003                     i2strcpy@from:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x2
  2280  000003                     	ds	1
  2281  000004                     i2getRTC@i:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x3
  2285  000004                     	ds	1
  2286  000005                     i2___lwmod@counter:
  2287                           	opt stack 0
  2288  000005                     i2___wmul@product:
  2289                           	opt stack 0
  2290  000005                     i2strcpy@cp:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x4
  2294  000005                     	ds	1
  2295  000006                     ?i2___lwdiv:
  2296                           	opt stack 0
  2297  000006                     i2___lwdiv@dividend:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x5
  2301  000006                     	ds	1
  2302  000007                     retrieveLog@logNum:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x6
  2306  000007                     	ds	1
  2307  000008                     i2___lwdiv@divisor:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x7
  2311  000008                     	ds	1
  2312  000009                     ??_retrieveLog:
  2313                           
  2314                           ; 1 bytes @ 0x8
  2315  000009                     	ds	1
  2316  00000A                     i2___lwdiv@quotient:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x9
  2320  00000A                     	ds	1
  2321  00000B                     retrieveLog@byte1:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0xA
  2325  00000B                     	ds	1
  2326  00000C                     retrieveLog@byte2:
  2327                           	opt stack 0
  2328  00000C                     i2___lwdiv@counter:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0xB
  2332  00000C                     	ds	1
  2333  00000D                     ?i2_printf:
  2334                           	opt stack 0
  2335  00000D                     retrieveLog@byte3:
  2336                           	opt stack 0
  2337  00000D                     i2printf@f:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0xC
  2341  00000D                     	ds	1
  2342  00000E                     retrieveLog@i:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0xD
  2346  00000E                     	ds	2
  2347  000010                     retrieveLog@addr:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0xF
  2351  000010                     	ds	2
  2352  000012                     dispLogs@myLog:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x11
  2356  000012                     	ds	2
  2357  000014                     
  2358                           ; 1 bytes @ 0x13
  2359  000014                     	ds	5
  2360  000019                     ??i2_printf:
  2361                           
  2362                           ; 1 bytes @ 0x18
  2363  000019                     	ds	4
  2364  00001D                     i2printf@prec:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0x1C
  2368  00001D                     	ds	1
  2369  00001E                     i2printf@cp:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x1D
  2373  00001E                     	ds	2
  2374  000020                     i2printf@ap:
  2375                           	opt stack 0
  2376                           
  2377                           ; 2 bytes @ 0x1F
  2378  000020                     	ds	2
  2379  000022                     i2printf@len:
  2380                           	opt stack 0
  2381                           
  2382                           ; 2 bytes @ 0x21
  2383  000022                     	ds	2
  2384  000024                     i2printf@val:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x23
  2388  000024                     	ds	2
  2389  000026                     i2printf@flag:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x25
  2393  000026                     	ds	1
  2394  000027                     i2printf@c:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x26
  2398  000027                     	ds	1
  2399  000028                     i2printf@width:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x27
  2403  000028                     	ds	2
  2404  00002A                     ??_printSortTimer:
  2405  00002A                     ??i2_printRTC:
  2406  00002A                     ?_inputHandler:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x29
  2410  00002A                     	ds	2
  2411  00002C                     ??_inputHandler:
  2412                           
  2413                           ; 1 bytes @ 0x2B
  2414  00002C                     	ds	1
  2415  00002D                     printSortTimer@hour:
  2416                           	opt stack 0
  2417  00002D                     i2printRTC@INT_time:
  2418                           	opt stack 0
  2419                           
  2420                           ; 14 bytes @ 0x2C
  2421  00002D                     	ds	2
  2422  00002F                     printSortTimer@curTime:
  2423                           	opt stack 0
  2424                           
  2425                           ; 14 bytes @ 0x2E
  2426  00002F                     	ds	12
  2427  00003B                     i2printRTC@RTC_month:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x3A
  2431  00003B                     	ds	2
  2432  00003D                     printSortTimer@start_sec:
  2433                           	opt stack 0
  2434  00003D                     i2printRTC@month:
  2435                           	opt stack 0
  2436                           
  2437                           ; 4 bytes @ 0x3C
  2438  00003D                     	ds	2
  2439  00003F                     printSortTimer@cur_sec:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x3E
  2443  00003F                     	ds	2
  2444  000041                     printSortTimer@min:
  2445                           	opt stack 0
  2446  000041                     i2printRTC@i:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x40
  2450  000041                     	ds	2
  2451  000043                     ??_updateMenu:
  2452  000043                     printSortTimer@sec:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x42
  2456  000043                     	ds	2
  2457  000045                     _printSortTimer$2325:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x44
  2461  000045                     	ds	2
  2462  000047                     printSortTimer@timeDiff:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x46
  2466  000047                     	ds	2
  2467  000049                     printSortTimer@i:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x48
  2471  000049                     	ds	2
  2472  00004B                     ??_handler:
  2473                           
  2474                           ; 1 bytes @ 0x4A
  2475  00004B                     	ds	16
  2476                           tblptru	equ	0xFF8
  2477                           tblptrh	equ	0xFF7
  2478                           tblptrl	equ	0xFF6
  2479                           tablat	equ	0xFF5
  2480                           postinc0	equ	0xFEE
  2481                           wreg	equ	0xFE8
  2482                           postdec1	equ	0xFE5
  2483                           fsr1l	equ	0xFE1
  2484                           
  2485 ;;
  2486 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2487 ;;
  2488 ;; *************** function _main *****************
  2489 ;; Defined at:
  2490 ;;		line 17 in file "main.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;Total ram usage:        0 bytes
  2509 ;; Hardware stack levels required when called:   13
  2510 ;; This function calls:
  2511 ;;		_Test
  2512 ;;		_UI
  2513 ;;		_initLCD
  2514 ;;		_initTime
  2515 ;;		_initUI
  2516 ;;		_logRun
  2517 ;;		_machineConfig
  2518 ;;		_sort
  2519 ;;		_stopSignals
  2520 ;; This function is called by:
  2521 ;;		Startup code after reset
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           	psect	text0
  2526  003258                     __ptext0:
  2527                           	opt stack 0
  2528  003258                     _main:
  2529                           	opt stack 18
  2530                           
  2531                           ;main.c: 18: machineConfig();
  2532                           
  2533                           ;incstack = 0
  2534  003258  EC1A  F01C         	call	_machineConfig	;wreg free
  2535                           
  2536                           ;main.c: 19: initLCD();
  2537  00325C  EC34  F01D         	call	_initLCD	;wreg free
  2538                           
  2539                           ;main.c: 20: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2540  003260  0E20               	movlw	32
  2541  003262  0100               	movlb	0	; () banked
  2542  003264  6F80               	movwf	initTime@m& (0+255),b
  2543  003266  0E13               	movlw	19
  2544  003268  0100               	movlb	0	; () banked
  2545  00326A  6F81               	movwf	initTime@h& (0+255),b
  2546  00326C  0E04               	movlw	4
  2547  00326E  0100               	movlb	0	; () banked
  2548  003270  6F82               	movwf	initTime@w& (0+255),b
  2549  003272  0E01               	movlw	1
  2550  003274  0100               	movlb	0	; () banked
  2551  003276  6F83               	movwf	initTime@DD& (0+255),b
  2552  003278  0E03               	movlw	3
  2553  00327A  0100               	movlb	0	; () banked
  2554  00327C  6F84               	movwf	initTime@MM& (0+255),b
  2555  00327E  0E17               	movlw	23
  2556  003280  0100               	movlb	0	; () banked
  2557  003282  6F85               	movwf	initTime@YY& (0+255),b
  2558  003284  0E42               	movlw	66
  2559  003286  ECB5  F01F         	call	_initTime
  2560                           
  2561                           ;main.c: 21: initUI();
  2562  00328A  EC80  F01F         	call	_initUI	;wreg free
  2563                           
  2564                           ;main.c: 22: first = 1;
  2565  00328E  0E00               	movlw	0
  2566  003290  0100               	movlb	0	; () banked
  2567  003292  6FE3               	movwf	(_first+1)& (0+255),b
  2568  003294  0E01               	movlw	1
  2569  003296  6FE2               	movwf	_first& (0+255),b
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 33: switch(machine_state){
  2573                           
  2574                           ;main.c: 32: while(1){
  2575  003298  D018               	goto	l7493
  2576  00329A                     l7475:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;main.c: 35: UI();
  2580  00329A  EC09  F000         	call	_UI	;wreg free
  2581                           
  2582                           ;main.c: 36: break;
  2583  00329E  D015               	goto	l7493
  2584  0032A0                     l7477:
  2585                           
  2586                           ;main.c: 38: sort();
  2587  0032A0  ECA4  F01F         	call	_sort	;wreg free
  2588                           
  2589                           ;main.c: 39: break;
  2590  0032A4  D012               	goto	l7493
  2591  0032A6                     l7479:
  2592                           
  2593                           ;main.c: 41: stopSignals();
  2594  0032A6  ECE1  F01F         	call	_stopSignals	;wreg free
  2595                           
  2596                           ;main.c: 42: logRun();
  2597  0032AA  ECB3  F013         	call	_logRun	;wreg free
  2598                           
  2599                           ;main.c: 43: first = 1;
  2600  0032AE  0E00               	movlw	0
  2601  0032B0  0100               	movlb	0	; () banked
  2602  0032B2  6FE3               	movwf	(_first+1)& (0+255),b
  2603  0032B4  0E01               	movlw	1
  2604  0032B6  6FE2               	movwf	_first& (0+255),b
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;main.c: 44: UI();
  2608  0032B8  EC09  F000         	call	_UI	;wreg free
  2609                           
  2610                           ;main.c: 45: break;
  2611  0032BC  D006               	goto	l7493
  2612  0032BE                     l7487:
  2613                           
  2614                           ;main.c: 47: Test();
  2615  0032BE  ECED  F016         	call	_Test	;wreg free
  2616                           
  2617                           ;main.c: 48: break;
  2618  0032C2  D003               	goto	l7493
  2619  0032C4                     l7489:
  2620                           
  2621                           ;main.c: 50: stopSignals();
  2622  0032C4  ECE1  F01F         	call	_stopSignals	;wreg free
  2623  0032C8                     l478:
  2624  0032C8  D7FF               	goto	l478
  2625  0032CA                     l7493:
  2626  0032CA  0100               	movlb	0	; () banked
  2627  0032CC  51FC               	movf	_machine_state& (0+255),w,b
  2628                           
  2629                           ; Switch size 1, requested type "space"
  2630                           ; Number of cases is 5, Range of values is 0 to 4
  2631                           ; switch strategies available:
  2632                           ; Name         Instructions Cycles
  2633                           ; simple_byte           16     9 (average)
  2634                           ;	Chosen strategy is simple_byte
  2635  0032CE  0A00               	xorlw	0	; case 0
  2636  0032D0  B4D8               	btfsc	status,2,c
  2637  0032D2  D7E3               	goto	l7475
  2638  0032D4  0A01               	xorlw	1	; case 1
  2639  0032D6  B4D8               	btfsc	status,2,c
  2640  0032D8  D7E3               	goto	l7477
  2641  0032DA  0A03               	xorlw	3	; case 2
  2642  0032DC  B4D8               	btfsc	status,2,c
  2643  0032DE  D7E3               	goto	l7479
  2644  0032E0  0A01               	xorlw	1	; case 3
  2645  0032E2  B4D8               	btfsc	status,2,c
  2646  0032E4  D7EC               	goto	l7487
  2647  0032E6  0A07               	xorlw	7	; case 4
  2648  0032E8  B4D8               	btfsc	status,2,c
  2649  0032EA  D7EC               	goto	l7489
  2650                           
  2651                           ; BSR set to: 0
  2652                           
  2653                           ; BSR set to: 0
  2654  0032EC  D7EE               	goto	l7493
  2655  0032EE                     __end_of_main:
  2656                           	opt stack 0
  2657                           tblptru	equ	0xFF8
  2658                           tblptrh	equ	0xFF7
  2659                           tblptrl	equ	0xFF6
  2660                           tablat	equ	0xFF5
  2661                           postinc0	equ	0xFEE
  2662                           wreg	equ	0xFE8
  2663                           postdec1	equ	0xFE5
  2664                           fsr1l	equ	0xFE1
  2665                           status	equ	0xFD8
  2666                           
  2667 ;; *************** function _stopSignals *****************
  2668 ;; Defined at:
  2669 ;;		line 59 in file "main.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;		None
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, status,2
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;Total ram usage:        0 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    7
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text1
  2698  003FC2                     __ptext1:
  2699                           	opt stack 0
  2700  003FC2                     _stopSignals:
  2701                           	opt stack 23
  2702                           
  2703                           ;main.c: 60: LATA = 0x00;
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;incstack = 0
  2707  003FC2  0E00               	movlw	0
  2708  003FC4  6E89               	movwf	3977,c	;volatile
  2709                           
  2710                           ;main.c: 61: LATB = 0x00;
  2711  003FC6  0E00               	movlw	0
  2712  003FC8  6E8A               	movwf	3978,c	;volatile
  2713                           
  2714                           ;main.c: 62: LATC = 0x00;
  2715  003FCA  0E00               	movlw	0
  2716  003FCC  6E8B               	movwf	3979,c	;volatile
  2717                           
  2718                           ;main.c: 63: LATD = 0x00;
  2719  003FCE  0E00               	movlw	0
  2720  003FD0  6E8C               	movwf	3980,c	;volatile
  2721                           
  2722                           ;main.c: 64: LATE = 0x00;
  2723  003FD2  0E00               	movlw	0
  2724  003FD4  6E8D               	movwf	3981,c	;volatile
  2725  003FD6  0012               	return		;funcret
  2726  003FD8                     __end_of_stopSignals:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           postdec1	equ	0xFE5
  2735                           fsr1l	equ	0xFE1
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _sort *****************
  2739 ;; Defined at:
  2740 ;;		line 55 in file "sort.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;Total ram usage:        0 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:   12
  2761 ;; This function calls:
  2762 ;;		_Distribution
  2763 ;;		_ID
  2764 ;;		_Loading
  2765 ;; This function is called by:
  2766 ;;		_main
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text2
  2771  003F48                     __ptext2:
  2772                           	opt stack 0
  2773  003F48                     _sort:
  2774                           	opt stack 18
  2775                           
  2776                           ;sort.c: 56: if(machine_state == Sorting_state){
  2777                           
  2778                           ;incstack = 0
  2779  003F48  0100               	movlb	0	; () banked
  2780  003F4A  05FC               	decf	_machine_state& (0+255),w,b
  2781  003F4C  B4D8               	btfsc	status,2,c
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;sort.c: 57: Loading();
  2785  003F4E  EC08  F016         	call	_Loading	;wreg free
  2786                           
  2787                           ;sort.c: 58: }
  2788                           ;sort.c: 59: if(machine_state == Sorting_state){
  2789  003F52  0100               	movlb	0	; () banked
  2790  003F54  05FC               	decf	_machine_state& (0+255),w,b
  2791  003F56  B4D8               	btfsc	status,2,c
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;sort.c: 60: ID();
  2795  003F58  ECEB  F014         	call	_ID	;wreg free
  2796                           
  2797                           ;sort.c: 61: }
  2798                           ;sort.c: 62: if(machine_state == Sorting_state){
  2799  003F5C  0100               	movlb	0	; () banked
  2800  003F5E  05FC               	decf	_machine_state& (0+255),w,b
  2801  003F60  A4D8               	btfss	status,2,c
  2802  003F62  0012               	return	
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;sort.c: 63: Distribution();
  2806  003F64  EC51  F014         	call	_Distribution	;wreg free
  2807  003F68  0012               	return	
  2808  003F6A                     __end_of_sort:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           postinc0	equ	0xFEE
  2815                           wreg	equ	0xFE8
  2816                           postdec1	equ	0xFE5
  2817                           fsr1l	equ	0xFE1
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _Loading *****************
  2821 ;; Defined at:
  2822 ;;		line 67 in file "sort.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  addr            2   51[BANK0 ] unsigned short 
  2827 ;;  byte1           1   53[BANK0 ] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      void 
  2830 ;; Registers used:
  2831 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;Total ram usage:        5 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:   11
  2844 ;; This function calls:
  2845 ;;		_EEPROM_read
  2846 ;;		_EEPROM_write
  2847 ;;		_getIR
  2848 ;;		_initGlobalVars
  2849 ;;		_initServos
  2850 ;;		_initSortTimer
  2851 ;;		_lcdInst
  2852 ;; This function is called by:
  2853 ;;		_sort
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text3
  2858  002C10                     __ptext3:
  2859                           	opt stack 0
  2860  002C10                     _Loading:
  2861                           	opt stack 18
  2862                           
  2863                           ;sort.c: 68: if(first){
  2864                           
  2865                           ;incstack = 0
  2866  002C10  0100               	movlb	0	; () banked
  2867  002C12  51E2               	movf	_first& (0+255),w,b
  2868  002C14  0100               	movlb	0	; () banked
  2869  002C16  11E3               	iorwf	(_first+1)& (0+255),w,b
  2870  002C18  B4D8               	btfsc	status,2,c
  2871  002C1A  D033               	goto	l6013
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;sort.c: 69: initGlobalVars();
  2875  002C1C  ECF2  F01A         	call	_initGlobalVars	;wreg free
  2876                           
  2877                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2878  002C20  0E01               	movlw	1
  2879  002C22  EC12  F020         	call	_lcdInst
  2880  002C26  0E68               	movlw	104
  2881  002C28  0100               	movlb	0	; () banked
  2882  002C2A  6FB1               	movwf	??_Loading& (0+255),b
  2883  002C2C  0EE4               	movlw	228
  2884  002C2E                     u6497:
  2885  002C2E  2EE8               	decfsz	wreg,f,c
  2886  002C30  D7FE               	bra	u6497
  2887  002C32  2FB1               	decfsz	??_Loading& (0+255),f,b
  2888  002C34  D7FC               	bra	u6497
  2889  002C36  F000               	nop	
  2890                           
  2891                           ;sort.c: 71: initSortTimer();
  2892  002C38  EC86  F018         	call	_initSortTimer	;wreg free
  2893                           
  2894                           ;sort.c: 76: sel = EEPROM_read(0);
  2895  002C3C  0E00               	movlw	0
  2896  002C3E  0100               	movlb	0	; () banked
  2897  002C40  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2898  002C42  0E00               	movlw	0
  2899  002C44  6F80               	movwf	EEPROM_read@address& (0+255),b
  2900  002C46  ECD5  F01F         	call	_EEPROM_read	;wreg free
  2901  002C4A  0100               	movlb	0	; () banked
  2902  002C4C  6FFD               	movwf	_sel& (0+255),b
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2906  002C4E  0100               	movlb	0	; () banked
  2907  002C50  51FD               	movf	_sel& (0+255),w,b
  2908  002C52  0D0B               	mullw	11
  2909  002C54  0E01               	movlw	1
  2910  002C56  24F3               	addwf	prodl,w,c
  2911  002C58  0100               	movlb	0	; () banked
  2912  002C5A  6FB3               	movwf	Loading@addr& (0+255),b
  2913  002C5C  0E00               	movlw	0
  2914  002C5E  20F4               	addwfc	prodh,w,c
  2915  002C60  0100               	movlb	0	; () banked
  2916  002C62  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  2920  002C64  0E7F               	movlw	127
  2921  002C66  0100               	movlb	0	; () banked
  2922  002C68  6FB5               	movwf	Loading@byte1& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;sort.c: 79: EEPROM_write(addr, byte1);
  2926  002C6A  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  2927  002C6E  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  2928  002C72  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  2929  002C76  EC7B  F016         	call	_EEPROM_write	;wreg free
  2930                           
  2931                           ;sort.c: 82: LATAbits.LATA5 = 1;
  2932  002C7A  8A89               	bsf	3977,5,c	;volatile
  2933                           
  2934                           ;sort.c: 85: initServos();
  2935  002C7C  ECED  F01B         	call	_initServos	;wreg free
  2936                           
  2937                           ;sort.c: 86: }
  2938  002C80  0012               	return	
  2939  002C82                     l6013:
  2940                           
  2941                           ;sort.c: 87: else{
  2942                           ;sort.c: 90: if(!f_loadingNewCan){
  2943  002C82  0100               	movlb	0	; () banked
  2944  002C84  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  2945  002C86  0100               	movlb	0	; () banked
  2946  002C88  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2947  002C8A  A4D8               	btfss	status,2,c
  2948  002C8C  D017               	goto	l6029
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;sort.c: 92: getIR();
  2952  002C8E  ECC1  F01C         	call	_getIR	;wreg free
  2953                           
  2954                           ;sort.c: 94: if(!f_loadingNewCan){
  2955  002C92  0100               	movlb	0	; () banked
  2956  002C94  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  2957  002C96  0100               	movlb	0	; () banked
  2958  002C98  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2959  002C9A  B4D8               	btfsc	status,2,c
  2960  002C9C  0012               	return	
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;sort.c: 98: else{
  2964                           ;sort.c: 99: count_total++;
  2965                           
  2966                           ; BSR set to: 0
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;sort.c: 96: }
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;sort.c: 95: return;
  2973  002C9E  0100               	movlb	0	; () banked
  2974  002CA0  4BFE               	infsnz	_count_total& (0+255),f,b
  2975  002CA2  2BFF               	incf	(_count_total+1)& (0+255),f,b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;sort.c: 100: if(count_total == 12){
  2979  002CA4  0E0C               	movlw	12
  2980  002CA6  0100               	movlb	0	; () banked
  2981  002CA8  19FE               	xorwf	_count_total& (0+255),w,b
  2982  002CAA  0100               	movlb	0	; () banked
  2983  002CAC  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  2984  002CAE  A4D8               	btfss	status,2,c
  2985  002CB0  0012               	return	
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;sort.c: 101: f_lastCan = 1;
  2989  002CB2  0E00               	movlw	0
  2990  002CB4  6E74               	movwf	_f_lastCan+1,c
  2991  002CB6  0E01               	movlw	1
  2992  002CB8  6E73               	movwf	_f_lastCan,c
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;sort.c: 102: }
  2996                           ;sort.c: 103: }
  2997                           ;sort.c: 104: }
  2998                           
  2999                           ; BSR set to: 0
  3000  002CBA  0012               	return	
  3001  002CBC                     l6029:
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;sort.c: 107: else if(f_ID_receive){
  3005  002CBC  506D               	movf	_f_ID_receive,w,c
  3006  002CBE  106E               	iorwf	_f_ID_receive+1,w,c
  3007  002CC0  B4D8               	btfsc	status,2,c
  3008  002CC2  0012               	return	
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;sort.c: 108: f_loadingNewCan = 0;
  3012  002CC4  0E00               	movlw	0
  3013  002CC6  0100               	movlb	0	; () banked
  3014  002CC8  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3015  002CCA  0E00               	movlw	0
  3016  002CCC  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;sort.c: 109: LATAbits.LATA4 = 1;
  3020  002CCE  8889               	bsf	3977,4,c	;volatile
  3021                           
  3022                           ;sort.c: 110: f_can_coming_to_ID = 1;
  3023  002CD0  0E00               	movlw	0
  3024  002CD2  6E70               	movwf	_f_can_coming_to_ID+1,c
  3025  002CD4  0E01               	movlw	1
  3026  002CD6  6E6F               	movwf	_f_can_coming_to_ID,c
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;sort.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  3030  002CD8  0E05               	movlw	5
  3031  002CDA  0100               	movlb	0	; () banked
  3032  002CDC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3033  002CDE  0E0F               	movlw	15
  3034  002CE0  0100               	movlb	0	; () banked
  3035  002CE2  6FB1               	movwf	??_Loading& (0+255),b
  3036  002CE4  0EF1               	movlw	241
  3037  002CE6                     u6507:
  3038  002CE6  2EE8               	decfsz	wreg,f,c
  3039  002CE8  D7FE               	bra	u6507
  3040  002CEA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3041  002CEC  D7FC               	bra	u6507
  3042  002CEE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3043  002CF0  D7FA               	bra	u6507
  3044                           
  3045                           ;sort.c: 112: LATAbits.LATA4 = 0;
  3046  002CF2  9889               	bcf	3977,4,c	;volatile
  3047  002CF4  0012               	return	
  3048  002CF6                     __end_of_Loading:
  3049                           	opt stack 0
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           prodh	equ	0xFF4
  3055                           prodl	equ	0xFF3
  3056                           postinc0	equ	0xFEE
  3057                           wreg	equ	0xFE8
  3058                           postdec1	equ	0xFE5
  3059                           fsr1l	equ	0xFE1
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _initSortTimer *****************
  3063 ;; Defined at:
  3064 ;;		line 225 in file "sort.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  i               2    8[BANK0 ] int 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      void 
  3071 ;; Registers used:
  3072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;Total ram usage:        5 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:   10
  3085 ;; This function calls:
  3086 ;;		_getRTC
  3087 ;; This function is called by:
  3088 ;;		_Loading
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text4
  3093  00310C                     __ptext4:
  3094                           	opt stack 0
  3095  00310C                     _initSortTimer:
  3096                           	opt stack 18
  3097                           
  3098                           ;sort.c: 227: getRTC();
  3099                           
  3100                           ;incstack = 0
  3101  00310C  ECBD  F019         	call	_getRTC	;wreg free
  3102                           
  3103                           ;sort.c: 228: for(int i = 0; i < 7; i++){
  3104  003110  0E00               	movlw	0
  3105  003112  0100               	movlb	0	; () banked
  3106  003114  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3107  003116  0E00               	movlw	0
  3108  003118  6F88               	movwf	initSortTimer@i& (0+255),b
  3109  00311A                     l5633:
  3110                           
  3111                           ; BSR set to: 0
  3112  00311A  0100               	movlb	0	; () banked
  3113  00311C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3114  00311E  D008               	goto	l5637
  3115  003120  0100               	movlb	0	; () banked
  3116  003122  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3117  003124  E140               	bnz	l5643
  3118  003126  0E07               	movlw	7
  3119  003128  0100               	movlb	0	; () banked
  3120  00312A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3121  00312C  B0D8               	btfsc	status,0,c
  3122  00312E  D03B               	goto	l5643
  3123  003130                     l5637:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;sort.c: 229: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3127  003130  0E24               	movlw	low _time
  3128  003132  0100               	movlb	0	; () banked
  3129  003134  2588               	addwf	initSortTimer@i& (0+255),w,b
  3130  003136  6ED9               	movwf	fsr2l,c
  3131  003138  0E01               	movlw	high _time
  3132  00313A  0100               	movlb	0	; () banked
  3133  00313C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3134  00313E  6EDA               	movwf	fsr2h,c
  3135  003140  50DF               	movf	indf2,w,c
  3136  003142  0100               	movlb	0	; () banked
  3137  003144  6F85               	movwf	??_initSortTimer& (0+255),b
  3138  003146  0100               	movlb	0	; () banked
  3139  003148  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3140  00314A  0E0F               	movlw	15
  3141  00314C  1785               	andwf	??_initSortTimer& (0+255),f,b
  3142  00314E  0E0F               	movlw	15
  3143  003150  0100               	movlb	0	; () banked
  3144  003152  1785               	andwf	??_initSortTimer& (0+255),f,b
  3145  003154  0100               	movlb	0	; () banked
  3146  003156  5185               	movf	??_initSortTimer& (0+255),w,b
  3147  003158  0D0A               	mullw	10
  3148  00315A  0E24               	movlw	low _time
  3149  00315C  0100               	movlb	0	; () banked
  3150  00315E  2588               	addwf	initSortTimer@i& (0+255),w,b
  3151  003160  6ED9               	movwf	fsr2l,c
  3152  003162  0E01               	movlw	high _time
  3153  003164  0100               	movlb	0	; () banked
  3154  003166  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3155  003168  6EDA               	movwf	fsr2h,c
  3156  00316A  50DF               	movf	indf2,w,c
  3157  00316C  0B0F               	andlw	15
  3158  00316E  0100               	movlb	0	; () banked
  3159  003170  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3160  003172  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3161  003174  50F3               	movf	prodl,w,c
  3162  003176  0100               	movlb	0	; () banked
  3163  003178  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3164  00317A  50F4               	movf	prodh,w,c
  3165  00317C  0100               	movlb	0	; () banked
  3166  00317E  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3167  003180  90D8               	bcf	status,0,c
  3168  003182  0100               	movlb	0	; () banked
  3169  003184  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3170  003186  6ED9               	movwf	fsr2l,c
  3171  003188  0100               	movlb	0	; () banked
  3172  00318A  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3173  00318C  6EDA               	movwf	fsr2h,c
  3174  00318E  0E0E               	movlw	low _startTime
  3175  003190  26D9               	addwf	fsr2l,f,c
  3176  003192  0E01               	movlw	high _startTime
  3177  003194  22DA               	addwfc	fsr2h,f,c
  3178  003196  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3179  00319A  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3180                           
  3181                           ; BSR set to: 0
  3182  00319E  0100               	movlb	0	; () banked
  3183  0031A0  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3184  0031A2  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3185  0031A4  D7BA               	goto	l5633
  3186  0031A6                     l5643:
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;sort.c: 230: }
  3190                           ;sort.c: 232: T0CON = 0b00010111;
  3191  0031A6  0E17               	movlw	23
  3192  0031A8  6ED5               	movwf	4053,c	;volatile
  3193                           
  3194                           ;sort.c: 241: TMR0H = 0b10000101;
  3195  0031AA  0E85               	movlw	133
  3196  0031AC  6ED7               	movwf	4055,c	;volatile
  3197                           
  3198                           ;sort.c: 242: TMR0L = 0b11101110;
  3199  0031AE  0EEE               	movlw	238
  3200  0031B0  6ED6               	movwf	4054,c	;volatile
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;sort.c: 243: TMR0ON = 1;
  3204  0031B2  8ED5               	bsf	4053,7,c	;volatile
  3205                           
  3206                           ; BSR set to: 0
  3207  0031B4  0012               	return		;funcret
  3208  0031B6                     __end_of_initSortTimer:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           prodh	equ	0xFF4
  3215                           prodl	equ	0xFF3
  3216                           postinc0	equ	0xFEE
  3217                           wreg	equ	0xFE8
  3218                           postdec1	equ	0xFE5
  3219                           fsr1l	equ	0xFE1
  3220                           indf2	equ	0xFDF
  3221                           postinc2	equ	0xFDE
  3222                           postdec2	equ	0xFDD
  3223                           fsr2h	equ	0xFDA
  3224                           fsr2l	equ	0xFD9
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _initServos *****************
  3228 ;; Defined at:
  3229 ;;		line 245 in file "sort.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;Total ram usage:        1 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    8
  3250 ;; This function calls:
  3251 ;;		_updateServoPosition
  3252 ;; This function is called by:
  3253 ;;		_Loading
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text5
  3258  0037DA                     __ptext5:
  3259                           	opt stack 0
  3260  0037DA                     _initServos:
  3261                           	opt stack 20
  3262                           
  3263                           ;sort.c: 246: updateServoPosition(1500, 1);
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;incstack = 0
  3267  0037DA  0E05               	movlw	5
  3268  0037DC  0100               	movlb	0	; () banked
  3269  0037DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3270  0037E0  0EDC               	movlw	220
  3271  0037E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3272  0037E4  0E00               	movlw	0
  3273  0037E6  0100               	movlb	0	; () banked
  3274  0037E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3275  0037EA  0E01               	movlw	1
  3276  0037EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3277  0037EE  EC7E  F01A         	call	_updateServoPosition	;wreg free
  3278                           
  3279                           ;sort.c: 247: updateServoPosition(1000, 3);
  3280  0037F2  0E03               	movlw	3
  3281  0037F4  0100               	movlb	0	; () banked
  3282  0037F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3283  0037F8  0EE8               	movlw	232
  3284  0037FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3285  0037FC  0E00               	movlw	0
  3286  0037FE  0100               	movlb	0	; () banked
  3287  003800  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3288  003802  0E03               	movlw	3
  3289  003804  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3290  003806  EC7E  F01A         	call	_updateServoPosition	;wreg free
  3291                           
  3292                           ;sort.c: 248: TMR1ON = 1;
  3293  00380A  80CD               	bsf	4045,0,c	;volatile
  3294                           
  3295                           ;sort.c: 249: was_low_1 = 0;
  3296  00380C  0E00               	movlw	0
  3297  00380E  6E7A               	movwf	_was_low_1+1,c	;volatile
  3298  003810  0E00               	movlw	0
  3299  003812  6E79               	movwf	_was_low_1,c	;volatile
  3300                           
  3301                           ;sort.c: 250: _delay((unsigned long)((5)*(32000000/4000.0)));
  3302  003814  0E34               	movlw	52
  3303  003816  0100               	movlb	0	; () banked
  3304  003818  6F88               	movwf	??_initServos& (0+255),b
  3305  00381A  0EF1               	movlw	241
  3306  00381C                     u6517:
  3307  00381C  2EE8               	decfsz	wreg,f,c
  3308  00381E  D7FE               	bra	u6517
  3309  003820  2F88               	decfsz	??_initServos& (0+255),f,b
  3310  003822  D7FC               	bra	u6517
  3311  003824  D000               	nop2	
  3312                           
  3313                           ;sort.c: 251: TMR3ON = 1;
  3314  003826  80B1               	bsf	4017,0,c	;volatile
  3315                           
  3316                           ;sort.c: 252: was_low_3 = 0;
  3317  003828  0E00               	movlw	0
  3318  00382A  6E7C               	movwf	_was_low_3+1,c	;volatile
  3319  00382C  0E00               	movlw	0
  3320  00382E  6E7B               	movwf	_was_low_3,c	;volatile
  3321                           
  3322                           ;sort.c: 253: LATCbits.LATC0 = 0;
  3323  003830  908B               	bcf	3979,0,c	;volatile
  3324  003832  0012               	return		;funcret
  3325  003834                     __end_of_initServos:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           postinc0	equ	0xFEE
  3334                           wreg	equ	0xFE8
  3335                           postdec1	equ	0xFE5
  3336                           fsr1l	equ	0xFE1
  3337                           indf2	equ	0xFDF
  3338                           postinc2	equ	0xFDE
  3339                           postdec2	equ	0xFDD
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344 ;; *************** function _initGlobalVars *****************
  3345 ;; Defined at:
  3346 ;;		line 206 in file "sort.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;Total ram usage:        0 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    7
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_Loading
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text6
  3375  0035E4                     __ptext6:
  3376                           	opt stack 0
  3377  0035E4                     _initGlobalVars:
  3378                           	opt stack 21
  3379                           
  3380                           ;sort.c: 208: first = 0;
  3381                           
  3382                           ;incstack = 0
  3383  0035E4  0E00               	movlw	0
  3384  0035E6  0100               	movlb	0	; () banked
  3385  0035E8  6FE3               	movwf	(_first+1)& (0+255),b
  3386  0035EA  0E00               	movlw	0
  3387  0035EC  6FE2               	movwf	_first& (0+255),b
  3388                           
  3389                           ;sort.c: 211: f_loadingNewCan = 0;
  3390  0035EE  0E00               	movlw	0
  3391  0035F0  0100               	movlb	0	; () banked
  3392  0035F2  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3393  0035F4  0E00               	movlw	0
  3394  0035F6  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3395                           
  3396                           ;sort.c: 212: f_lastCan = 0;
  3397  0035F8  0E00               	movlw	0
  3398  0035FA  6E74               	movwf	_f_lastCan+1,c
  3399  0035FC  0E00               	movlw	0
  3400  0035FE  6E73               	movwf	_f_lastCan,c
  3401                           
  3402                           ;sort.c: 213: f_ID_receive = 1;
  3403  003600  0E00               	movlw	0
  3404  003602  6E6E               	movwf	_f_ID_receive+1,c
  3405  003604  0E01               	movlw	1
  3406  003606  6E6D               	movwf	_f_ID_receive,c
  3407                           
  3408                           ;sort.c: 214: f_can_coming_to_ID = 0;
  3409  003608  0E00               	movlw	0
  3410  00360A  6E70               	movwf	_f_can_coming_to_ID+1,c
  3411  00360C  0E00               	movlw	0
  3412  00360E  6E6F               	movwf	_f_can_coming_to_ID,c
  3413                           
  3414                           ;sort.c: 215: f_can_coming_to_distribution = 0;
  3415  003610  0E00               	movlw	0
  3416  003612  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3417  003614  0E00               	movlw	0
  3418  003616  6E71               	movwf	_f_can_coming_to_distribution,c
  3419                           
  3420                           ;sort.c: 216: f_can_distributed = 0;
  3421  003618  0E00               	movlw	0
  3422  00361A  0101               	movlb	1	; () banked
  3423  00361C  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3424  00361E  0E00               	movlw	0
  3425  003620  6F2B               	movwf	_f_can_distributed& (0+255),b
  3426                           
  3427                           ;sort.c: 219: count_total = 0;
  3428  003622  0E00               	movlw	0
  3429  003624  0100               	movlb	0	; () banked
  3430  003626  6FFF               	movwf	(_count_total+1)& (0+255),b
  3431  003628  0E00               	movlw	0
  3432  00362A  6FFE               	movwf	_count_total& (0+255),b
  3433                           
  3434                           ;sort.c: 220: count_pop_no_tab = 0;
  3435  00362C  0E00               	movlw	0
  3436  00362E  6E62               	movwf	_count_pop_no_tab+1,c
  3437  003630  0E00               	movlw	0
  3438  003632  6E61               	movwf	_count_pop_no_tab,c
  3439                           
  3440                           ;sort.c: 221: count_pop_w_tab = 0;
  3441  003634  0E00               	movlw	0
  3442  003636  6E64               	movwf	_count_pop_w_tab+1,c
  3443  003638  0E00               	movlw	0
  3444  00363A  6E63               	movwf	_count_pop_w_tab,c
  3445                           
  3446                           ;sort.c: 222: count_can_w_lab = 0;
  3447  00363C  0E00               	movlw	0
  3448  00363E  6E60               	movwf	_count_can_w_lab+1,c
  3449  003640  0E00               	movlw	0
  3450  003642  6E5F               	movwf	_count_can_w_lab,c
  3451                           
  3452                           ;sort.c: 223: count_can_no_lab = 0;
  3453  003644  0E00               	movlw	0
  3454  003646  6E5E               	movwf	_count_can_no_lab+1,c
  3455  003648  0E00               	movlw	0
  3456  00364A  6E5D               	movwf	_count_can_no_lab,c
  3457                           
  3458                           ; BSR set to: 0
  3459  00364C  0012               	return		;funcret
  3460  00364E                     __end_of_initGlobalVars:
  3461                           	opt stack 0
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           prodh	equ	0xFF4
  3467                           prodl	equ	0xFF3
  3468                           postinc0	equ	0xFEE
  3469                           wreg	equ	0xFE8
  3470                           postdec1	equ	0xFE5
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function _getIR *****************
  3480 ;; Defined at:
  3481 ;;		line 282 in file "sort.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        2 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    9
  3502 ;; This function calls:
  3503 ;;		_readIR
  3504 ;; This function is called by:
  3505 ;;		_Loading
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text7
  3510  003982                     __ptext7:
  3511                           	opt stack 0
  3512  003982                     _getIR:
  3513                           	opt stack 19
  3514                           
  3515                           ;sort.c: 283: readIR();
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;incstack = 0
  3519  003982  EC0E  F01D         	call	_readIR	;wreg free
  3520                           
  3521                           ;sort.c: 284: if(IR_signal==1){
  3522  003986  0100               	movlb	0	; () banked
  3523  003988  05DA               	decf	_IR_signal& (0+255),w,b
  3524  00398A  0100               	movlb	0	; () banked
  3525  00398C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3526  00398E  A4D8               	btfss	status,2,c
  3527  003990  0012               	return	
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;sort.c: 285: _delay((unsigned long)((100)*(32000000/4000.0)));
  3531  003992  0E05               	movlw	5
  3532  003994  0100               	movlb	0	; () banked
  3533  003996  6F87               	movwf	(??_getIR+1)& (0+255),b
  3534  003998  0E0F               	movlw	15
  3535  00399A  0100               	movlb	0	; () banked
  3536  00399C  6F86               	movwf	??_getIR& (0+255),b
  3537  00399E  0EF1               	movlw	241
  3538  0039A0                     u6527:
  3539  0039A0  2EE8               	decfsz	wreg,f,c
  3540  0039A2  D7FE               	bra	u6527
  3541  0039A4  2F86               	decfsz	??_getIR& (0+255),f,b
  3542  0039A6  D7FC               	bra	u6527
  3543  0039A8  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3544  0039AA  D7FA               	bra	u6527
  3545                           
  3546                           ;sort.c: 286: if(IR_signal==1){
  3547  0039AC  0100               	movlb	0	; () banked
  3548  0039AE  05DA               	decf	_IR_signal& (0+255),w,b
  3549  0039B0  0100               	movlb	0	; () banked
  3550  0039B2  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3551  0039B4  A4D8               	btfss	status,2,c
  3552  0039B6  D006               	goto	l5723
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;sort.c: 287: f_loadingNewCan = 1;
  3556  0039B8  0E00               	movlw	0
  3557  0039BA  0100               	movlb	0	; () banked
  3558  0039BC  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3559  0039BE  0E01               	movlw	1
  3560  0039C0  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3561                           
  3562                           ;sort.c: 288: }
  3563  0039C2  0012               	return	
  3564  0039C4                     l5723:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;sort.c: 289: else{
  3568                           ;sort.c: 290: f_loadingNewCan = 0;
  3569  0039C4  0E00               	movlw	0
  3570  0039C6  0100               	movlb	0	; () banked
  3571  0039C8  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3572  0039CA  0E00               	movlw	0
  3573  0039CC  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3574                           
  3575                           ; BSR set to: 0
  3576  0039CE  0012               	return	
  3577  0039D0                     __end_of_getIR:
  3578                           	opt stack 0
  3579                           tblptru	equ	0xFF8
  3580                           tblptrh	equ	0xFF7
  3581                           tblptrl	equ	0xFF6
  3582                           tablat	equ	0xFF5
  3583                           prodh	equ	0xFF4
  3584                           prodl	equ	0xFF3
  3585                           postinc0	equ	0xFEE
  3586                           wreg	equ	0xFE8
  3587                           postdec1	equ	0xFE5
  3588                           fsr1l	equ	0xFE1
  3589                           indf2	equ	0xFDF
  3590                           postinc2	equ	0xFDE
  3591                           postdec2	equ	0xFDD
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _ID *****************
  3597 ;; Defined at:
  3598 ;;		line 116 in file "sort.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;Total ram usage:        8 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    9
  3619 ;; This function calls:
  3620 ;;		_readMAG
  3621 ;; This function is called by:
  3622 ;;		_sort
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text8
  3627  0029D6                     __ptext8:
  3628                           	opt stack 0
  3629  0029D6                     _ID:
  3630                           	opt stack 20
  3631                           
  3632                           ;sort.c: 117: if(f_can_coming_to_ID){
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;incstack = 0
  3636  0029D6  506F               	movf	_f_can_coming_to_ID,w,c
  3637  0029D8  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  3638  0029DA  B4D8               	btfsc	status,2,c
  3639  0029DC  0012               	return	
  3640                           
  3641                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  3642  0029DE  0E15               	movlw	21
  3643  0029E0  0100               	movlb	0	; () banked
  3644  0029E2  6F87               	movwf	(??_ID+1)& (0+255),b
  3645  0029E4  0E4B               	movlw	75
  3646  0029E6  0100               	movlb	0	; () banked
  3647  0029E8  6F86               	movwf	??_ID& (0+255),b
  3648  0029EA  0EBE               	movlw	190
  3649  0029EC                     u6537:
  3650  0029EC  2EE8               	decfsz	wreg,f,c
  3651  0029EE  D7FE               	bra	u6537
  3652  0029F0  2F86               	decfsz	??_ID& (0+255),f,b
  3653  0029F2  D7FC               	bra	u6537
  3654  0029F4  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3655  0029F6  D7FA               	bra	u6537
  3656  0029F8  F000               	nop	
  3657                           
  3658                           ;sort.c: 124: int sensor_outputs[3];
  3659                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  3660  0029FA  A480               	btfss	3968,2,c	;volatile
  3661  0029FC  D004               	goto	u4560
  3662  0029FE  0100               	movlb	0	; () banked
  3663  002A00  6B86               	clrf	??_ID& (0+255),b
  3664  002A02  2B86               	incf	??_ID& (0+255),f,b
  3665  002A04  D002               	goto	u4568
  3666  002A06                     u4560:
  3667  002A06  0100               	movlb	0	; () banked
  3668  002A08  6B86               	clrf	??_ID& (0+255),b
  3669  002A0A                     u4568:
  3670  002A0A  0100               	movlb	0	; () banked
  3671  002A0C  5186               	movf	??_ID& (0+255),w,b
  3672  002A0E  0100               	movlb	0	; () banked
  3673  002A10  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3674  002A12  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;sort.c: 130: if(!sensor_outputs[0]){
  3678  002A14  0100               	movlb	0	; () banked
  3679  002A16  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3680  002A18  0100               	movlb	0	; () banked
  3681  002A1A  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3682  002A1C  A4D8               	btfss	status,2,c
  3683  002A1E  D028               	goto	l6061
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;sort.c: 131: readMAG();
  3687  002A20  ECE8  F01C         	call	_readMAG	;wreg free
  3688                           
  3689                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  3690  002A24  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3691  002A28  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3692                           
  3693                           ;sort.c: 133: if(!sensor_outputs[1]){
  3694  002A2C  0100               	movlb	0	; () banked
  3695  002A2E  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3696  002A30  0100               	movlb	0	; () banked
  3697  002A32  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3698  002A34  A4D8               	btfss	status,2,c
  3699  002A36  D01C               	goto	l6061
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;sort.c: 134: LATAbits.LATA3 = 1;
  3703  002A38  8689               	bsf	3977,3,c	;volatile
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;sort.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  3707  002A3A  0E05               	movlw	5
  3708  002A3C  0100               	movlb	0	; () banked
  3709  002A3E  6F87               	movwf	(??_ID+1)& (0+255),b
  3710  002A40  0E0F               	movlw	15
  3711  002A42  0100               	movlb	0	; () banked
  3712  002A44  6F86               	movwf	??_ID& (0+255),b
  3713  002A46  0EF1               	movlw	241
  3714  002A48                     u6547:
  3715  002A48  2EE8               	decfsz	wreg,f,c
  3716  002A4A  D7FE               	bra	u6547
  3717  002A4C  2F86               	decfsz	??_ID& (0+255),f,b
  3718  002A4E  D7FC               	bra	u6547
  3719  002A50  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3720  002A52  D7FA               	bra	u6547
  3721                           
  3722                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  3723  002A54  A480               	btfss	3968,2,c	;volatile
  3724  002A56  D004               	goto	u4590
  3725  002A58  0100               	movlb	0	; () banked
  3726  002A5A  6B86               	clrf	??_ID& (0+255),b
  3727  002A5C  2B86               	incf	??_ID& (0+255),f,b
  3728  002A5E  D002               	goto	u4598
  3729  002A60                     u4590:
  3730  002A60  0100               	movlb	0	; () banked
  3731  002A62  6B86               	clrf	??_ID& (0+255),b
  3732  002A64                     u4598:
  3733  002A64  0100               	movlb	0	; () banked
  3734  002A66  5186               	movf	??_ID& (0+255),w,b
  3735  002A68  0100               	movlb	0	; () banked
  3736  002A6A  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3737  002A6C  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;sort.c: 138: LATAbits.LATA3 = 0;
  3741  002A6E  9689               	bcf	3977,3,c	;volatile
  3742  002A70                     l6061:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;sort.c: 139: }
  3746                           ;sort.c: 140: }
  3747                           ;sort.c: 143: if(!sensor_outputs[0]){
  3748  002A70  0100               	movlb	0	; () banked
  3749  002A72  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3750  002A74  0100               	movlb	0	; () banked
  3751  002A76  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3752  002A78  A4D8               	btfss	status,2,c
  3753  002A7A  D01E               	goto	l6079
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;sort.c: 144: if(!sensor_outputs[1]){
  3757  002A7C  0100               	movlb	0	; () banked
  3758  002A7E  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3759  002A80  0100               	movlb	0	; () banked
  3760  002A82  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3761  002A84  A4D8               	btfss	status,2,c
  3762  002A86  D012               	goto	l6075
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;sort.c: 145: if(!sensor_outputs[2]){
  3766  002A88  0100               	movlb	0	; () banked
  3767  002A8A  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3768  002A8C  0100               	movlb	0	; () banked
  3769  002A8E  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3770  002A90  A4D8               	btfss	status,2,c
  3771  002A92  D006               	goto	l6071
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;sort.c: 146: count_pop_no_tab++;
  3775  002A94  4A61               	infsnz	_count_pop_no_tab,f,c
  3776  002A96  2A62               	incf	_count_pop_no_tab+1,f,c
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;sort.c: 147: cur_can = 0;
  3780  002A98  0E00               	movlw	0
  3781  002A9A  6E66               	movwf	_cur_can+1,c
  3782  002A9C  0E00               	movlw	0
  3783  002A9E  D011               	goto	L3
  3784  002AA0                     l6071:
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;sort.c: 149: else{
  3788                           ;sort.c: 150: count_pop_w_tab++;
  3789  002AA0  4A63               	infsnz	_count_pop_w_tab,f,c
  3790  002AA2  2A64               	incf	_count_pop_w_tab+1,f,c
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;sort.c: 151: cur_can = 1;
  3794  002AA4  0E00               	movlw	0
  3795  002AA6  6E66               	movwf	_cur_can+1,c
  3796  002AA8  0E01               	movlw	1
  3797  002AAA  D00B               	goto	L3
  3798  002AAC                     l6075:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;sort.c: 154: else{
  3802                           ;sort.c: 155: count_can_w_lab++;
  3803  002AAC  4A5F               	infsnz	_count_can_w_lab,f,c
  3804  002AAE  2A60               	incf	_count_can_w_lab+1,f,c
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;sort.c: 156: cur_can = 2;
  3808  002AB0  0E00               	movlw	0
  3809  002AB2  6E66               	movwf	_cur_can+1,c
  3810  002AB4  0E02               	movlw	2
  3811  002AB6  D005               	goto	L3
  3812  002AB8                     l6079:
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;sort.c: 159: else{
  3816                           ;sort.c: 160: count_can_no_lab++;
  3817  002AB8  4A5D               	infsnz	_count_can_no_lab,f,c
  3818  002ABA  2A5E               	incf	_count_can_no_lab+1,f,c
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;sort.c: 161: cur_can = 3;
  3822  002ABC  0E00               	movlw	0
  3823  002ABE  6E66               	movwf	_cur_can+1,c
  3824  002AC0  0E03               	movlw	3
  3825  002AC2                     L3:
  3826  002AC2  6E65               	movwf	_cur_can,c
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;sort.c: 162: }
  3830                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3831                           
  3832                           ; BSR set to: 0
  3833  002AC4  808B               	bsf	3979,0,c	;volatile
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3837  002AC6  0E00               	movlw	0
  3838  002AC8  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3839  002ACA  0E01               	movlw	1
  3840  002ACC  6E71               	movwf	_f_can_coming_to_distribution,c
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3844  002ACE  0E15               	movlw	21
  3845  002AD0  0100               	movlb	0	; () banked
  3846  002AD2  6F87               	movwf	(??_ID+1)& (0+255),b
  3847  002AD4  0E4B               	movlw	75
  3848  002AD6  0100               	movlb	0	; () banked
  3849  002AD8  6F86               	movwf	??_ID& (0+255),b
  3850  002ADA  0EBE               	movlw	190
  3851  002ADC                     u6557:
  3852  002ADC  2EE8               	decfsz	wreg,f,c
  3853  002ADE  D7FE               	bra	u6557
  3854  002AE0  2F86               	decfsz	??_ID& (0+255),f,b
  3855  002AE2  D7FC               	bra	u6557
  3856  002AE4  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3857  002AE6  D7FA               	bra	u6557
  3858  002AE8  F000               	nop	
  3859                           
  3860                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3861  002AEA  908B               	bcf	3979,0,c	;volatile
  3862                           
  3863                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3864  002AEC  0E00               	movlw	0
  3865  002AEE  6E70               	movwf	_f_can_coming_to_ID+1,c
  3866  002AF0  0E00               	movlw	0
  3867  002AF2  6E6F               	movwf	_f_can_coming_to_ID,c
  3868  002AF4  0012               	return	
  3869  002AF6                     __end_of_ID:
  3870                           	opt stack 0
  3871                           tblptru	equ	0xFF8
  3872                           tblptrh	equ	0xFF7
  3873                           tblptrl	equ	0xFF6
  3874                           tablat	equ	0xFF5
  3875                           prodh	equ	0xFF4
  3876                           prodl	equ	0xFF3
  3877                           postinc0	equ	0xFEE
  3878                           wreg	equ	0xFE8
  3879                           postdec1	equ	0xFE5
  3880                           fsr1l	equ	0xFE1
  3881                           indf2	equ	0xFDF
  3882                           postinc2	equ	0xFDE
  3883                           postdec2	equ	0xFDD
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _Distribution *****************
  3889 ;; Defined at:
  3890 ;;		line 172 in file "sort.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;Total ram usage:        2 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    8
  3911 ;; This function calls:
  3912 ;;		_updateServoPosition
  3913 ;; This function is called by:
  3914 ;;		_sort
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text9
  3919  0028A2                     __ptext9:
  3920                           	opt stack 0
  3921  0028A2                     _Distribution:
  3922                           	opt stack 21
  3923                           
  3924                           ;sort.c: 173: if(f_can_coming_to_distribution){
  3925                           
  3926                           ;incstack = 0
  3927  0028A2  5071               	movf	_f_can_coming_to_distribution,w,c
  3928  0028A4  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  3929  0028A6  B4D8               	btfsc	status,2,c
  3930  0028A8  0012               	return	
  3931  0028AA  D034               	goto	l6107
  3932  0028AC                     l6097:
  3933                           
  3934                           ;sort.c: 178: updateServoPosition(1000, 1);
  3935  0028AC  0E03               	movlw	3
  3936  0028AE  0100               	movlb	0	; () banked
  3937  0028B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3938  0028B2  0EE8               	movlw	232
  3939  0028B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3940  0028B6  0E00               	movlw	0
  3941  0028B8  0100               	movlb	0	; () banked
  3942  0028BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3943  0028BC  0E01               	movlw	1
  3944  0028BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3945  0028C0  EC7E  F01A         	call	_updateServoPosition	;wreg free
  3946                           
  3947                           ;sort.c: 179: break;
  3948  0028C4  D03E               	goto	l6109
  3949  0028C6                     l6099:
  3950                           
  3951                           ;sort.c: 181: updateServoPosition(1333, 1);
  3952  0028C6  0E05               	movlw	5
  3953  0028C8  0100               	movlb	0	; () banked
  3954  0028CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3955  0028CC  0E35               	movlw	53
  3956  0028CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3957  0028D0  0E00               	movlw	0
  3958  0028D2  0100               	movlb	0	; () banked
  3959  0028D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3960  0028D6  0E01               	movlw	1
  3961  0028D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3962  0028DA  EC7E  F01A         	call	_updateServoPosition	;wreg free
  3963                           
  3964                           ;sort.c: 182: break;
  3965  0028DE  D031               	goto	l6109
  3966  0028E0                     l6101:
  3967                           
  3968                           ;sort.c: 184: updateServoPosition(1666, 1);
  3969  0028E0  0E06               	movlw	6
  3970  0028E2  0100               	movlb	0	; () banked
  3971  0028E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3972  0028E6  0E82               	movlw	130
  3973  0028E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3974  0028EA  0E00               	movlw	0
  3975  0028EC  0100               	movlb	0	; () banked
  3976  0028EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3977  0028F0  0E01               	movlw	1
  3978  0028F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3979  0028F4  EC7E  F01A         	call	_updateServoPosition	;wreg free
  3980                           
  3981                           ;sort.c: 185: break;
  3982  0028F8  D024               	goto	l6109
  3983  0028FA                     l6103:
  3984                           
  3985                           ;sort.c: 187: updateServoPosition(2000, 1);
  3986  0028FA  0E07               	movlw	7
  3987  0028FC  0100               	movlb	0	; () banked
  3988  0028FE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3989  002900  0ED0               	movlw	208
  3990  002902  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3991  002904  0E00               	movlw	0
  3992  002906  0100               	movlb	0	; () banked
  3993  002908  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3994  00290A  0E01               	movlw	1
  3995  00290C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3996  00290E  EC7E  F01A         	call	_updateServoPosition	;wreg free
  3997                           
  3998                           ;sort.c: 191: }
  3999                           
  4000                           ;sort.c: 190: break;
  4001                           
  4002                           ;sort.c: 189: default:
  4003                           
  4004                           ;sort.c: 188: break;
  4005  002912  D017               	goto	l6109
  4006  002914                     l6107:
  4007  002914  C065  F088         	movff	_cur_can,??_Distribution
  4008  002918  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4009                           
  4010                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4011                           ; Switch size 1, requested type "space"
  4012                           ; Number of cases is 1, Range of values is 0 to 0
  4013                           ; switch strategies available:
  4014                           ; Name         Instructions Cycles
  4015                           ; simple_byte            4     3 (average)
  4016                           ;	Chosen strategy is simple_byte
  4017  00291C  0100               	movlb	0	; () banked
  4018  00291E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4019  002920  0A00               	xorlw	0	; case 0
  4020  002922  A4D8               	btfss	status,2,c
  4021  002924  D00E               	goto	l6109
  4022                           
  4023                           ; BSR set to: 0
  4024                           ; Switch size 1, requested type "space"
  4025                           ; Number of cases is 4, Range of values is 0 to 3
  4026                           ; switch strategies available:
  4027                           ; Name         Instructions Cycles
  4028                           ; simple_byte           13     7 (average)
  4029                           ;	Chosen strategy is simple_byte
  4030  002926  0100               	movlb	0	; () banked
  4031  002928  5188               	movf	??_Distribution& (0+255),w,b
  4032  00292A  0A00               	xorlw	0	; case 0
  4033  00292C  B4D8               	btfsc	status,2,c
  4034  00292E  D7BE               	goto	l6097
  4035  002930  0A01               	xorlw	1	; case 1
  4036  002932  B4D8               	btfsc	status,2,c
  4037  002934  D7C8               	goto	l6099
  4038  002936  0A03               	xorlw	3	; case 2
  4039  002938  B4D8               	btfsc	status,2,c
  4040  00293A  D7D2               	goto	l6101
  4041  00293C  0A01               	xorlw	1	; case 3
  4042  00293E  B4D8               	btfsc	status,2,c
  4043  002940  D7DC               	goto	l6103
  4044  002942                     l6109:
  4045                           
  4046                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  4047  002942  0E15               	movlw	21
  4048  002944  0100               	movlb	0	; () banked
  4049  002946  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4050  002948  0E4B               	movlw	75
  4051  00294A  0100               	movlb	0	; () banked
  4052  00294C  6F88               	movwf	??_Distribution& (0+255),b
  4053  00294E  0EBE               	movlw	190
  4054  002950                     u6567:
  4055  002950  2EE8               	decfsz	wreg,f,c
  4056  002952  D7FE               	bra	u6567
  4057  002954  2F88               	decfsz	??_Distribution& (0+255),f,b
  4058  002956  D7FC               	bra	u6567
  4059  002958  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4060  00295A  D7FA               	bra	u6567
  4061  00295C  F000               	nop	
  4062                           
  4063                           ;sort.c: 195: updateServoPosition(1500, 3);
  4064  00295E  0E05               	movlw	5
  4065  002960  0100               	movlb	0	; () banked
  4066  002962  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4067  002964  0EDC               	movlw	220
  4068  002966  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4069  002968  0E00               	movlw	0
  4070  00296A  0100               	movlb	0	; () banked
  4071  00296C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4072  00296E  0E03               	movlw	3
  4073  002970  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4074  002972  EC7E  F01A         	call	_updateServoPosition	;wreg free
  4075                           
  4076                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  4077  002976  0E15               	movlw	21
  4078  002978  0100               	movlb	0	; () banked
  4079  00297A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4080  00297C  0E4B               	movlw	75
  4081  00297E  0100               	movlb	0	; () banked
  4082  002980  6F88               	movwf	??_Distribution& (0+255),b
  4083  002982  0EBE               	movlw	190
  4084  002984                     u6577:
  4085  002984  2EE8               	decfsz	wreg,f,c
  4086  002986  D7FE               	bra	u6577
  4087  002988  2F88               	decfsz	??_Distribution& (0+255),f,b
  4088  00298A  D7FC               	bra	u6577
  4089  00298C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4090  00298E  D7FA               	bra	u6577
  4091  002990  F000               	nop	
  4092                           
  4093                           ;sort.c: 199: updateServoPosition(1500, 1);
  4094  002992  0E05               	movlw	5
  4095  002994  0100               	movlb	0	; () banked
  4096  002996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4097  002998  0EDC               	movlw	220
  4098  00299A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4099  00299C  0E00               	movlw	0
  4100  00299E  0100               	movlb	0	; () banked
  4101  0029A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4102  0029A2  0E01               	movlw	1
  4103  0029A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4104  0029A6  EC7E  F01A         	call	_updateServoPosition	;wreg free
  4105                           
  4106                           ;sort.c: 200: updateServoPosition(1000, 3);
  4107  0029AA  0E03               	movlw	3
  4108  0029AC  0100               	movlb	0	; () banked
  4109  0029AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4110  0029B0  0EE8               	movlw	232
  4111  0029B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4112  0029B4  0E00               	movlw	0
  4113  0029B6  0100               	movlb	0	; () banked
  4114  0029B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4115  0029BA  0E03               	movlw	3
  4116  0029BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4117  0029BE  EC7E  F01A         	call	_updateServoPosition	;wreg free
  4118                           
  4119                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  4120  0029C2  0E00               	movlw	0
  4121  0029C4  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4122  0029C6  0E00               	movlw	0
  4123  0029C8  6E71               	movwf	_f_can_coming_to_distribution,c
  4124                           
  4125                           ;sort.c: 202: f_can_distributed = 1;
  4126  0029CA  0E00               	movlw	0
  4127  0029CC  0101               	movlb	1	; () banked
  4128  0029CE  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4129  0029D0  0E01               	movlw	1
  4130  0029D2  6F2B               	movwf	_f_can_distributed& (0+255),b
  4131  0029D4  0012               	return	
  4132  0029D6                     __end_of_Distribution:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postdec1	equ	0xFE5
  4143                           fsr1l	equ	0xFE1
  4144                           indf2	equ	0xFDF
  4145                           postinc2	equ	0xFDE
  4146                           postdec2	equ	0xFDD
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _machineConfig *****************
  4152 ;; Defined at:
  4153 ;;		line 15 in file "MachineConfig.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  1    wreg      void 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;Total ram usage:        0 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    7
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_main
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text10
  4182  003834                     __ptext10:
  4183                           	opt stack 0
  4184  003834                     _machineConfig:
  4185                           	opt stack 23
  4186                           
  4187                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4188                           
  4189                           ;incstack = 0
  4190  003834  0EF0               	movlw	240
  4191  003836  6ED3               	movwf	4051,c	;volatile
  4192                           
  4193                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4194  003838  8C9B               	bsf	3995,6,c	;volatile
  4195                           
  4196                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4197  00383A  0E47               	movlw	71
  4198  00383C  6E92               	movwf	3986,c	;volatile
  4199                           
  4200                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4201  00383E  0EF2               	movlw	242
  4202  003840  6E93               	movwf	3987,c	;volatile
  4203                           
  4204                           ;MachineConfig.c: 27: TRISC = 0x00;
  4205  003842  0E00               	movlw	0
  4206  003844  6E94               	movwf	3988,c	;volatile
  4207                           
  4208                           ;MachineConfig.c: 31: TRISD = 0x00;
  4209  003846  0E00               	movlw	0
  4210  003848  6E95               	movwf	3989,c	;volatile
  4211                           
  4212                           ;MachineConfig.c: 34: TRISE = 0x00;
  4213  00384A  0E00               	movlw	0
  4214  00384C  6E96               	movwf	3990,c	;volatile
  4215                           
  4216                           ;MachineConfig.c: 37: LATA = 0x00;
  4217  00384E  0E00               	movlw	0
  4218  003850  6E89               	movwf	3977,c	;volatile
  4219                           
  4220                           ;MachineConfig.c: 38: LATB = 0x00;
  4221  003852  0E00               	movlw	0
  4222  003854  6E8A               	movwf	3978,c	;volatile
  4223                           
  4224                           ;MachineConfig.c: 39: LATC = 0x00;
  4225  003856  0E00               	movlw	0
  4226  003858  6E8B               	movwf	3979,c	;volatile
  4227                           
  4228                           ;MachineConfig.c: 40: LATD = 0x00;
  4229  00385A  0E00               	movlw	0
  4230  00385C  6E8C               	movwf	3980,c	;volatile
  4231                           
  4232                           ;MachineConfig.c: 41: LATE = 0x00;
  4233  00385E  0E00               	movlw	0
  4234  003860  6E8D               	movwf	3981,c	;volatile
  4235                           
  4236                           ;MachineConfig.c: 43: nRBPU = 0;
  4237  003862  9EF1               	bcf	intcon2,7,c	;volatile
  4238                           
  4239                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4240  003864  0E00               	movlw	0
  4241  003866  6EC2               	movwf	4034,c	;volatile
  4242                           
  4243                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4244  003868  0E0D               	movlw	13
  4245  00386A  6EC1               	movwf	4033,c	;volatile
  4246                           
  4247                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4248  00386C  0E00               	movlw	0
  4249  00386E  6EB5               	movwf	4021,c	;volatile
  4250                           
  4251                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4252  003870  96B4               	bcf	4020,3,c	;volatile
  4253                           
  4254                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4255  003872  0EB1               	movlw	177
  4256  003874  6EC0               	movwf	4032,c	;volatile
  4257                           
  4258                           ;MachineConfig.c: 55: INT1IE = 1;
  4259  003876  86F0               	bsf	intcon3,3,c	;volatile
  4260                           
  4261                           ;MachineConfig.c: 57: TMR0IE = 1;
  4262  003878  8AF2               	bsf	intcon,5,c	;volatile
  4263                           
  4264                           ;MachineConfig.c: 58: TMR1IE = 1;
  4265  00387A  809D               	bsf	3997,0,c	;volatile
  4266                           
  4267                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4268  00387C  0EB0               	movlw	176
  4269  00387E  6ECD               	movwf	4045,c	;volatile
  4270                           
  4271                           ;MachineConfig.c: 60: TMR2IE = 1;
  4272  003880  829D               	bsf	3997,1,c	;volatile
  4273                           
  4274                           ;MachineConfig.c: 61: TMR3IE = 1;
  4275  003882  82A0               	bsf	4000,1,c	;volatile
  4276                           
  4277                           ;MachineConfig.c: 62: PEIE = 1;
  4278  003884  8CF2               	bsf	intcon,6,c	;volatile
  4279                           
  4280                           ;MachineConfig.c: 63: ADIE = 0;
  4281  003886  9C9D               	bcf	3997,6,c	;volatile
  4282                           
  4283                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4284  003888  9EF2               	bcf	intcon,7,c	;volatile
  4285  00388A  0012               	return		;funcret
  4286  00388C                     __end_of_machineConfig:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           intcon2	equ	0xFF1
  4296                           intcon3	equ	0xFF0
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           postdec1	equ	0xFE5
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _logRun *****************
  4309 ;; Defined at:
  4310 ;;		line 84 in file "EEPROM.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4315 ;;  i               2   55[BANK0 ] int 
  4316 ;;  num             1   49[BANK0 ] unsigned char 
  4317 ;;  addr            2   57[BANK0 ] unsigned short 
  4318 ;;  byte11          1   54[BANK0 ] unsigned char 
  4319 ;;  byte3           1   52[BANK0 ] unsigned char 
  4320 ;;  byte2           1   51[BANK0 ] unsigned char 
  4321 ;;  byte1           1   50[BANK0 ] unsigned char 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;Total ram usage:       10 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:   11
  4338 ;; This function calls:
  4339 ;;		_EEPROM_read
  4340 ;;		_EEPROM_write
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text11
  4347  002766                     __ptext11:
  4348                           	opt stack 0
  4349  002766                     _logRun:
  4350                           	opt stack 19
  4351                           
  4352                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4353                           
  4354                           ;incstack = 0
  4355  002766  0E00               	movlw	0
  4356  002768  0100               	movlb	0	; () banked
  4357  00276A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4358  00276C  0E00               	movlw	0
  4359  00276E  6F80               	movwf	EEPROM_read@address& (0+255),b
  4360  002770  ECD5  F01F         	call	_EEPROM_read	;wreg free
  4361  002774  0100               	movlb	0	; () banked
  4362  002776  6FFD               	movwf	_sel& (0+255),b
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4366  002778  0100               	movlb	0	; () banked
  4367  00277A  51FD               	movf	_sel& (0+255),w,b
  4368  00277C  0D0B               	mullw	11
  4369  00277E  0E01               	movlw	1
  4370  002780  24F3               	addwf	prodl,w,c
  4371  002782  0100               	movlb	0	; () banked
  4372  002784  6FB9               	movwf	logRun@addr& (0+255),b
  4373  002786  0E00               	movlw	0
  4374  002788  20F4               	addwfc	prodh,w,c
  4375  00278A  0100               	movlb	0	; () banked
  4376  00278C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;EEPROM.c: 101: if (sel < 3){
  4380  00278E  0E03               	movlw	3
  4381  002790  0100               	movlb	0	; () banked
  4382  002792  61FD               	cpfslt	_sel& (0+255),b
  4383  002794  D00E               	goto	l7345
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4387  002796  0100               	movlb	0	; () banked
  4388  002798  29FD               	incf	_sel& (0+255),w,b
  4389  00279A  0100               	movlb	0	; () banked
  4390  00279C  6FB1               	movwf	logRun@num& (0+255),b
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4394  00279E  0E00               	movlw	0
  4395  0027A0  0100               	movlb	0	; () banked
  4396  0027A2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4397  0027A4  0E00               	movlw	0
  4398  0027A6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4399  0027A8  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4400  0027AC  EC7B  F016         	call	_EEPROM_write	;wreg free
  4401                           
  4402                           ;EEPROM.c: 104: }
  4403  0027B0  D00A               	goto	l7347
  4404  0027B2                     l7345:
  4405                           
  4406                           ;EEPROM.c: 105: else{
  4407                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4408  0027B2  0E00               	movlw	0
  4409  0027B4  0100               	movlb	0	; () banked
  4410  0027B6  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4411  0027B8  0E00               	movlw	0
  4412  0027BA  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4413  0027BC  0E00               	movlw	0
  4414  0027BE  0100               	movlb	0	; () banked
  4415  0027C0  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4416  0027C2  EC7B  F016         	call	_EEPROM_write	;wreg free
  4417  0027C6                     l7347:
  4418                           
  4419                           ;EEPROM.c: 107: }
  4420                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4421  0027C6  0100               	movlb	0	; () banked
  4422  0027C8  51FE               	movf	_count_total& (0+255),w,b
  4423  0027CA  0980               	iorlw	128
  4424  0027CC  0100               	movlb	0	; () banked
  4425  0027CE  6FB2               	movwf	logRun@byte1& (0+255),b
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4429  0027D0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4430  0027D4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4431  0027D8  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4432  0027DC  EC7B  F016         	call	_EEPROM_write	;wreg free
  4433                           
  4434                           ;EEPROM.c: 112: addr++;
  4435  0027E0  0100               	movlb	0	; () banked
  4436  0027E2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4437  0027E4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4441  0027E6  3861               	swapf	_count_pop_no_tab,w,c
  4442  0027E8  0BF0               	andlw	240
  4443  0027EA  1063               	iorwf	_count_pop_w_tab,w,c
  4444  0027EC  0100               	movlb	0	; () banked
  4445  0027EE  6FB3               	movwf	logRun@byte2& (0+255),b
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4449  0027F0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4450  0027F4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4451  0027F8  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4452  0027FC  EC7B  F016         	call	_EEPROM_write	;wreg free
  4453                           
  4454                           ;EEPROM.c: 117: addr++;
  4455  002800  0100               	movlb	0	; () banked
  4456  002802  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4457  002804  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4461  002806  385F               	swapf	_count_can_w_lab,w,c
  4462  002808  0BF0               	andlw	240
  4463  00280A  105D               	iorwf	_count_can_no_lab,w,c
  4464  00280C  0100               	movlb	0	; () banked
  4465  00280E  6FB4               	movwf	logRun@byte3& (0+255),b
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4469  002810  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4470  002814  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4471  002818  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4472  00281C  EC7B  F016         	call	_EEPROM_write	;wreg free
  4473                           
  4474                           ;EEPROM.c: 120: addr++;
  4475  002820  0100               	movlb	0	; () banked
  4476  002822  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4477  002824  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4481  002826  0E00               	movlw	0
  4482  002828  0100               	movlb	0	; () banked
  4483  00282A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4484  00282C  0E00               	movlw	0
  4485  00282E  6FB7               	movwf	logRun@i& (0+255),b
  4486                           
  4487                           ; BSR set to: 0
  4488  002830  0100               	movlb	0	; () banked
  4489  002832  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4490  002834  D008               	goto	l7371
  4491  002836  0100               	movlb	0	; () banked
  4492  002838  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4493  00283A  E128               	bnz	l922
  4494  00283C  0E07               	movlw	7
  4495  00283E  0100               	movlb	0	; () banked
  4496  002840  5DB7               	subwf	logRun@i& (0+255),w,b
  4497  002842  B0D8               	btfsc	status,0,c
  4498  002844  D023               	goto	l922
  4499  002846                     l7371:
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4503  002846  90D8               	bcf	status,0,c
  4504  002848  0100               	movlb	0	; () banked
  4505  00284A  35B7               	rlcf	logRun@i& (0+255),w,b
  4506  00284C  6ED9               	movwf	fsr2l,c
  4507  00284E  0100               	movlb	0	; () banked
  4508  002850  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4509  002852  6EDA               	movwf	fsr2h,c
  4510  002854  0E0E               	movlw	low _startTime
  4511  002856  26D9               	addwf	fsr2l,f,c
  4512  002858  0E01               	movlw	high _startTime
  4513  00285A  22DA               	addwfc	fsr2h,f,c
  4514  00285C  50DF               	movf	indf2,w,c
  4515  00285E  0100               	movlb	0	; () banked
  4516  002860  6FB5               	movwf	logRun@byte_i& (0+255),b
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4520  002862  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4521  002866  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4522  00286A  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4523  00286E  EC7B  F016         	call	_EEPROM_write	;wreg free
  4524                           
  4525                           ;EEPROM.c: 126: addr++;
  4526  002872  0100               	movlb	0	; () banked
  4527  002874  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4528  002876  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4529                           
  4530                           ; BSR set to: 0
  4531  002878  0100               	movlb	0	; () banked
  4532  00287A  4BB7               	infsnz	logRun@i& (0+255),f,b
  4533  00287C  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4534                           
  4535                           ; BSR set to: 0
  4536  00287E  0100               	movlb	0	; () banked
  4537  002880  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4538  002882  D7E1               	goto	l7371
  4539  002884  0100               	movlb	0	; () banked
  4540  002886  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4541  002888  E101               	bnz	u6320
  4542  00288A  D7D8               	goto	L4
  4543  00288C                     u6320:
  4544  00288C                     l922:
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;EEPROM.c: 127: }
  4548                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4549  00288C  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4553  002890  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4554  002894  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4555  002898  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4556  00289C  EC7B  F016         	call	_EEPROM_write	;wreg free
  4557  0028A0  0012               	return		;funcret
  4558  0028A2                     __end_of_logRun:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           prodh	equ	0xFF4
  4565                           prodl	equ	0xFF3
  4566                           intcon	equ	0xFF2
  4567                           intcon2	equ	0xFF1
  4568                           intcon3	equ	0xFF0
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           postdec1	equ	0xFE5
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _EEPROM_write *****************
  4581 ;; Defined at:
  4582 ;;		line 32 in file "EEPROM.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  address         2   43[BANK0 ] unsigned short 
  4585 ;;  data            1   45[BANK0 ] unsigned char 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  i               1   48[BANK0 ] unsigned char 
  4588 ;;  i               1   47[BANK0 ] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4598 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;Total ram usage:        6 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:   10
  4605 ;; This function calls:
  4606 ;;		_EEPROM_read
  4607 ;;		_lcdInst
  4608 ;;		_printf
  4609 ;; This function is called by:
  4610 ;;		_Loading
  4611 ;;		_logRun
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text12
  4616  002CF6                     __ptext12:
  4617                           	opt stack 0
  4618  002CF6                     _EEPROM_write:
  4619                           	opt stack 18
  4620                           
  4621                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4622                           
  4623                           ;incstack = 0
  4624  002CF6  84A6               	bsf	4006,2,c	;volatile
  4625                           
  4626                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4627  002CF8  0100               	movlb	0	; () banked
  4628  002CFA  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4629  002CFC  6EAA               	movwf	4010,c	;volatile
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4633  002CFE  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;EEPROM.c: 39: EEDATA = data;
  4637  002D02  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4641  002D06  9EA6               	bcf	4006,7,c	;volatile
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4645  002D08  9CA6               	bcf	4006,6,c	;volatile
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4649  002D0A  9EF2               	bcf	intcon,7,c	;volatile
  4650                           
  4651                           ;EEPROM.c: 45: EECON2 = 0x55;
  4652  002D0C  0E55               	movlw	85
  4653  002D0E  6EA7               	movwf	4007,c	;volatile
  4654                           
  4655                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4656  002D10  0EAA               	movlw	170
  4657  002D12  6EA7               	movwf	4007,c	;volatile
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4661  002D14  82A6               	bsf	4006,1,c	;volatile
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4665  002D16  8EF2               	bsf	intcon,7,c	;volatile
  4666  002D18                     l900:
  4667  002D18  A8A1               	btfss	4001,4,c	;volatile
  4668  002D1A  D7FE               	goto	l900
  4669                           
  4670                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4671  002D1C  98A1               	bcf	4001,4,c	;volatile
  4672                           
  4673                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4674  002D1E  94A6               	bcf	4006,2,c	;volatile
  4675                           
  4676                           ;EEPROM.c: 57: if(debug){
  4677  002D20  5067               	movf	_debug,w,c
  4678  002D22  1068               	iorwf	_debug+1,w,c
  4679  002D24  B4D8               	btfsc	status,2,c
  4680  002D26  0012               	return	
  4681                           
  4682                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4683  002D28  0E01               	movlw	1
  4684  002D2A  EC12  F020         	call	_lcdInst
  4685  002D2E  0E68               	movlw	104
  4686  002D30  0100               	movlb	0	; () banked
  4687  002D32  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4688  002D34  0EE4               	movlw	228
  4689  002D36                     u6587:
  4690  002D36  2EE8               	decfsz	wreg,f,c
  4691  002D38  D7FE               	bra	u6587
  4692  002D3A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4693  002D3C  D7FC               	bra	u6587
  4694  002D3E  F000               	nop	
  4695                           
  4696                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4697  002D40  0E80               	movlw	128
  4698  002D42  EC12  F020         	call	_lcdInst
  4699                           
  4700                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4701  002D46  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4702  002D4A  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4703  002D4E  ECD5  F01F         	call	_EEPROM_read	;wreg free
  4704  002D52  0100               	movlb	0	; () banked
  4705  002D54  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4706  002D56  A4D8               	btfss	status,2,c
  4707  002D58  D024               	goto	l5687
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4711  002D5A  0EA4               	movlw	low STR_66
  4712  002D5C  0100               	movlb	0	; () banked
  4713  002D5E  6F8E               	movwf	printf@f& (0+255),b
  4714  002D60  0EFB               	movlw	high STR_66
  4715  002D62  0100               	movlb	0	; () banked
  4716  002D64  6F8F               	movwf	(printf@f+1)& (0+255),b
  4717  002D66  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4718  002D6A  0100               	movlb	0	; () banked
  4719  002D6C  6B91               	clrf	(?_printf+3)& (0+255),b
  4720  002D6E  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4721  002D72  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4722  002D76  EC97  F008         	call	_printf	;wreg free
  4723                           
  4724                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4725  002D7A  0E00               	movlw	0
  4726  002D7C  0100               	movlb	0	; () banked
  4727  002D7E  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4728  002D80                     l5679:
  4729                           
  4730                           ; BSR set to: 0
  4731  002D80  0E63               	movlw	99
  4732  002D82  0100               	movlb	0	; () banked
  4733  002D84  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4734  002D86  D001               	goto	l5683
  4735  002D88  0012               	return	
  4736  002D8A                     l5683:
  4737                           
  4738                           ; BSR set to: 0
  4739  002D8A  0E68               	movlw	104
  4740  002D8C  0100               	movlb	0	; () banked
  4741  002D8E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4742  002D90  0EE4               	movlw	228
  4743  002D92                     u6597:
  4744  002D92  2EE8               	decfsz	wreg,f,c
  4745  002D94  D7FE               	bra	u6597
  4746  002D96  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4747  002D98  D7FC               	bra	u6597
  4748  002D9A  F000               	nop	
  4749  002D9C  0100               	movlb	0	; () banked
  4750  002D9E  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4751  002DA0  D7EF               	goto	l5679
  4752  002DA2                     l5687:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4756  002DA2  0EBC               	movlw	low STR_67
  4757  002DA4  0100               	movlb	0	; () banked
  4758  002DA6  6F8E               	movwf	printf@f& (0+255),b
  4759  002DA8  0EFF               	movlw	high STR_67
  4760  002DAA  0100               	movlb	0	; () banked
  4761  002DAC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4762  002DAE  EC97  F008         	call	_printf	;wreg free
  4763  002DB2  0E00               	movlw	0
  4764  002DB4  0100               	movlb	0	; () banked
  4765  002DB6  6FB0               	movwf	EEPROM_write@i_1310& (0+255),b
  4766  002DB8                     l5691:
  4767                           
  4768                           ; BSR set to: 0
  4769  002DB8  0E63               	movlw	99
  4770  002DBA  0100               	movlb	0	; () banked
  4771  002DBC  65B0               	cpfsgt	EEPROM_write@i_1310& (0+255),b
  4772  002DBE  D001               	goto	l5695
  4773  002DC0  0012               	return	
  4774  002DC2                     l5695:
  4775                           
  4776                           ; BSR set to: 0
  4777  002DC2  0E68               	movlw	104
  4778  002DC4  0100               	movlb	0	; () banked
  4779  002DC6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4780  002DC8  0EE4               	movlw	228
  4781  002DCA                     u6607:
  4782  002DCA  2EE8               	decfsz	wreg,f,c
  4783  002DCC  D7FE               	bra	u6607
  4784  002DCE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4785  002DD0  D7FC               	bra	u6607
  4786  002DD2  F000               	nop	
  4787  002DD4  0100               	movlb	0	; () banked
  4788  002DD6  2BB0               	incf	EEPROM_write@i_1310& (0+255),f,b
  4789  002DD8  D7EF               	goto	l5691
  4790  002DDA                     __end_of_EEPROM_write:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           intcon2	equ	0xFF1
  4800                           intcon3	equ	0xFF0
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _EEPROM_read *****************
  4813 ;; Defined at:
  4814 ;;		line 68 in file "EEPROM.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  address         2    0[BANK0 ] unsigned short 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      unsigned char 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4828 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;Total ram usage:        2 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    7
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_Loading
  4839 ;;		_EEPROM_write
  4840 ;;		_logRun
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text13
  4845  003FAA                     __ptext13:
  4846                           	opt stack 0
  4847  003FAA                     _EEPROM_read:
  4848                           	opt stack 20
  4849                           
  4850                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4851                           
  4852                           ;incstack = 0
  4853  003FAA  0100               	movlb	0	; () banked
  4854  003FAC  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4855  003FAE  6EAA               	movwf	4010,c	;volatile
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4859  003FB0  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4863  003FB4  9EA6               	bcf	4006,7,c	;volatile
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4867  003FB6  9CA6               	bcf	4006,6,c	;volatile
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4871  003FB8  80A6               	bsf	4006,0,c	;volatile
  4872  003FBA                     l913:
  4873  003FBA  B0A6               	btfsc	4006,0,c	;volatile
  4874  003FBC  D7FE               	goto	l913
  4875                           
  4876                           ;EEPROM.c: 81: return EEDATA;
  4877  003FBE  50A8               	movf	4008,w,c	;volatile
  4878  003FC0  0012               	return	
  4879  003FC2                     __end_of_EEPROM_read:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           intcon2	equ	0xFF1
  4889                           intcon3	equ	0xFF0
  4890                           postinc0	equ	0xFEE
  4891                           wreg	equ	0xFE8
  4892                           postdec1	equ	0xFE5
  4893                           fsr1l	equ	0xFE1
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function _initUI *****************
  4902 ;; Defined at:
  4903 ;;		line 62 in file "UI.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;Total ram usage:        0 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:   12
  4924 ;; This function calls:
  4925 ;;		_change_state_to_menu_start
  4926 ;;		_loadRTC
  4927 ;; This function is called by:
  4928 ;;		_main
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text14
  4933  003F00                     __ptext14:
  4934                           	opt stack 0
  4935  003F00                     _initUI:
  4936                           	opt stack 18
  4937                           
  4938                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4939                           
  4940                           ;incstack = 0
  4941  003F00  8EF2               	bsf	intcon,7,c	;volatile
  4942                           
  4943                           ;UI.c: 64: machine_state = UI_state;
  4944  003F02  0E00               	movlw	0
  4945  003F04  0100               	movlb	0	; () banked
  4946  003F06  6FFC               	movwf	_machine_state& (0+255),b
  4947                           
  4948                           ;UI.c: 65: logstate = 0;
  4949  003F08  0E00               	movlw	0
  4950  003F0A  0100               	movlb	0	; () banked
  4951  003F0C  6FF7               	movwf	(_logstate+1)& (0+255),b
  4952  003F0E  0E00               	movlw	0
  4953  003F10  6FF6               	movwf	_logstate& (0+255),b
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;UI.c: 67: loadRTC();
  4957  003F12  EC77  F019         	call	_loadRTC	;wreg free
  4958                           
  4959                           ;UI.c: 69: change_state_to_menu_start();
  4960  003F16  EC05  F01F         	call	_change_state_to_menu_start	;wreg free
  4961                           
  4962                           ;UI.c: 70: firstboot = 1;
  4963  003F1A  0E00               	movlw	0
  4964  003F1C  6E76               	movwf	_firstboot+1,c
  4965  003F1E  0E01               	movlw	1
  4966  003F20  6E75               	movwf	_firstboot,c
  4967  003F22  0012               	return		;funcret
  4968  003F24                     __end_of_initUI:
  4969                           	opt stack 0
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           prodh	equ	0xFF4
  4975                           prodl	equ	0xFF3
  4976                           intcon	equ	0xFF2
  4977                           intcon2	equ	0xFF1
  4978                           intcon3	equ	0xFF0
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           postdec1	equ	0xFE5
  4982                           fsr1l	equ	0xFE1
  4983                           indf2	equ	0xFDF
  4984                           postinc2	equ	0xFDE
  4985                           postdec2	equ	0xFDD
  4986                           fsr2h	equ	0xFDA
  4987                           fsr2l	equ	0xFD9
  4988                           status	equ	0xFD8
  4989                           
  4990 ;; *************** function _loadRTC *****************
  4991 ;; Defined at:
  4992 ;;		line 28 in file "RTC.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;		None
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  i               2   22[BANK0 ] int 
  4997 ;; Return value:  Size  Location     Type
  4998 ;;                  1    wreg      void 
  4999 ;; Registers used:
  5000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5009 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;Total ram usage:        3 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    9
  5013 ;; This function calls:
  5014 ;;		_I2C_Master_Init
  5015 ;;		_I2C_Master_Start
  5016 ;;		_I2C_Master_Stop
  5017 ;;		_I2C_Master_Write
  5018 ;; This function is called by:
  5019 ;;		_initUI
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text15
  5024  0032EE                     __ptext15:
  5025                           	opt stack 0
  5026  0032EE                     _loadRTC:
  5027                           	opt stack 20
  5028                           
  5029                           ;RTC.c: 30: I2C_Master_Init(10000);
  5030                           
  5031                           ;incstack = 0
  5032  0032EE  0E10               	movlw	16
  5033  0032F0  0100               	movlb	0	; () banked
  5034  0032F2  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5035  0032F4  0E27               	movlw	39
  5036  0032F6  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5037  0032F8  0E00               	movlw	0
  5038  0032FA  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5039  0032FC  0E00               	movlw	0
  5040  0032FE  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5041  003300  ECBD  F01B         	call	_I2C_Master_Init	;wreg free
  5042                           
  5043                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5044  003304  9EF2               	bcf	intcon,7,c	;volatile
  5045                           
  5046                           ;RTC.c: 34: I2C_Master_Start();
  5047  003306  EC38  F020         	call	_I2C_Master_Start	;wreg free
  5048                           
  5049                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5050  00330A  0E00               	movlw	0
  5051  00330C  0100               	movlb	0	; () banked
  5052  00330E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5053  003310  0ED0               	movlw	208
  5054  003312  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5055  003314  EC26  F020         	call	_I2C_Master_Write	;wreg free
  5056                           
  5057                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5058  003318  0E00               	movlw	0
  5059  00331A  0100               	movlb	0	; () banked
  5060  00331C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5061  00331E  0E00               	movlw	0
  5062  003320  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5063  003322  EC26  F020         	call	_I2C_Master_Write	;wreg free
  5064                           
  5065                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5066  003326  0E00               	movlw	0
  5067  003328  0100               	movlb	0	; () banked
  5068  00332A  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5069  00332C  0E00               	movlw	0
  5070  00332E  6F96               	movwf	loadRTC@i& (0+255),b
  5071  003330                     l5803:
  5072                           
  5073                           ; BSR set to: 0
  5074  003330  0100               	movlb	0	; () banked
  5075  003332  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5076  003334  D008               	goto	l5807
  5077  003336  0100               	movlb	0	; () banked
  5078  003338  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5079  00333A  E11B               	bnz	l5813
  5080  00333C  0E07               	movlw	7
  5081  00333E  0100               	movlb	0	; () banked
  5082  003340  5D96               	subwf	loadRTC@i& (0+255),w,b
  5083  003342  B0D8               	btfsc	status,0,c
  5084  003344  D016               	goto	l5813
  5085  003346                     l5807:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5089  003346  0E24               	movlw	low _time
  5090  003348  0100               	movlb	0	; () banked
  5091  00334A  2596               	addwf	loadRTC@i& (0+255),w,b
  5092  00334C  6ED9               	movwf	fsr2l,c
  5093  00334E  0E01               	movlw	high _time
  5094  003350  0100               	movlb	0	; () banked
  5095  003352  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5096  003354  6EDA               	movwf	fsr2h,c
  5097  003356  50DF               	movf	indf2,w,c
  5098  003358  0100               	movlb	0	; () banked
  5099  00335A  6F95               	movwf	??_loadRTC& (0+255),b
  5100  00335C  0100               	movlb	0	; () banked
  5101  00335E  5195               	movf	??_loadRTC& (0+255),w,b
  5102  003360  0100               	movlb	0	; () banked
  5103  003362  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5104  003364  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5105  003366  EC26  F020         	call	_I2C_Master_Write	;wreg free
  5106  00336A  0100               	movlb	0	; () banked
  5107  00336C  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5108  00336E  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5109  003370  D7DF               	goto	l5803
  5110  003372                     l5813:
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;RTC.c: 39: }
  5114                           ;RTC.c: 40: I2C_Master_Stop();
  5115  003372  EC34  F020         	call	_I2C_Master_Stop	;wreg free
  5116                           
  5117                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5118  003376  8EF2               	bsf	intcon,7,c	;volatile
  5119  003378  0012               	return		;funcret
  5120  00337A                     __end_of_loadRTC:
  5121                           	opt stack 0
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           prodh	equ	0xFF4
  5127                           prodl	equ	0xFF3
  5128                           intcon	equ	0xFF2
  5129                           intcon2	equ	0xFF1
  5130                           intcon3	equ	0xFF0
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           postdec1	equ	0xFE5
  5134                           fsr1l	equ	0xFE1
  5135                           indf2	equ	0xFDF
  5136                           postinc2	equ	0xFDE
  5137                           postdec2	equ	0xFDD
  5138                           fsr2h	equ	0xFDA
  5139                           fsr2l	equ	0xFD9
  5140                           status	equ	0xFD8
  5141                           
  5142 ;; *************** function _I2C_Master_Init *****************
  5143 ;; Defined at:
  5144 ;;		line 15 in file "I2C.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  c               4   13[BANK0 ] const unsigned long 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;		None
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      void 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5158 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;Total ram usage:        8 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    8
  5165 ;; This function calls:
  5166 ;;		___lldiv
  5167 ;; This function is called by:
  5168 ;;		_loadRTC
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text16
  5173  00377A                     __ptext16:
  5174                           	opt stack 0
  5175  00377A                     _I2C_Master_Init:
  5176                           	opt stack 20
  5177                           
  5178                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5179                           
  5180                           ;incstack = 0
  5181  00377A  0E00               	movlw	0
  5182  00377C  6EC7               	movwf	4039,c	;volatile
  5183                           
  5184                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5185  00377E  0E28               	movlw	40
  5186  003780  6EC6               	movwf	4038,c	;volatile
  5187                           
  5188                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5189  003782  0E00               	movlw	0
  5190  003784  6EC5               	movwf	4037,c	;volatile
  5191                           
  5192                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5193  003786  0E00               	movlw	0
  5194  003788  0100               	movlb	0	; () banked
  5195  00378A  6F80               	movwf	___lldiv@dividend& (0+255),b
  5196  00378C  0E48               	movlw	72
  5197  00378E  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5198  003790  0EE8               	movlw	232
  5199  003792  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5200  003794  0E01               	movlw	1
  5201  003796  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5202  003798  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5203  00379C  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5204  0037A0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5205  0037A4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5206  0037A8  0E02               	movlw	2
  5207  0037AA                     u4195:
  5208  0037AA  90D8               	bcf	status,0,c
  5209  0037AC  0100               	movlb	0	; () banked
  5210  0037AE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5211  0037B0  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5212  0037B2  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5213  0037B4  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5214  0037B6  2EE8               	decfsz	wreg,f,c
  5215  0037B8  D7F8               	goto	u4195
  5216  0037BA  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5217  0037BE  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5218  0037C2  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5219  0037C6  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5220  0037CA  EC28  F018         	call	___lldiv	;wreg free
  5221  0037CE  0100               	movlb	0	; () banked
  5222  0037D0  0580               	decf	?___lldiv& (0+255),w,b
  5223  0037D2  6EC8               	movwf	4040,c	;volatile
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;I2C.c: 22: TRISC3 = 1;
  5227  0037D4  8694               	bsf	3988,3,c	;volatile
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;I2C.c: 23: TRISC4 = 1;
  5231  0037D6  8894               	bsf	3988,4,c	;volatile
  5232                           
  5233                           ; BSR set to: 0
  5234  0037D8  0012               	return		;funcret
  5235  0037DA                     __end_of_I2C_Master_Init:
  5236                           	opt stack 0
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           prodh	equ	0xFF4
  5242                           prodl	equ	0xFF3
  5243                           intcon	equ	0xFF2
  5244                           intcon2	equ	0xFF1
  5245                           intcon3	equ	0xFF0
  5246                           postinc0	equ	0xFEE
  5247                           wreg	equ	0xFE8
  5248                           postdec1	equ	0xFE5
  5249                           fsr1l	equ	0xFE1
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           postdec2	equ	0xFDD
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257 ;; *************** function ___lldiv *****************
  5258 ;; Defined at:
  5259 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  dividend        4    0[BANK0 ] unsigned long 
  5262 ;;  divisor         4    4[BANK0 ] unsigned long 
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  quotient        4    8[BANK0 ] unsigned long 
  5265 ;;  counter         1   12[BANK0 ] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  4    0[BANK0 ] unsigned long 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5275 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;Total ram usage:       13 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    7
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_I2C_Master_Init
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text17
  5290  003050                     __ptext17:
  5291                           	opt stack 0
  5292  003050                     ___lldiv:
  5293                           	opt stack 20
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;incstack = 0
  5297  003050  0E00               	movlw	0
  5298  003052  0100               	movlb	0	; () banked
  5299  003054  6F88               	movwf	___lldiv@quotient& (0+255),b
  5300  003056  0E00               	movlw	0
  5301  003058  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5302  00305A  0E00               	movlw	0
  5303  00305C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5304  00305E  0E00               	movlw	0
  5305  003060  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5306                           
  5307                           ; BSR set to: 0
  5308  003062  0100               	movlb	0	; () banked
  5309  003064  5184               	movf	___lldiv@divisor& (0+255),w,b
  5310  003066  0100               	movlb	0	; () banked
  5311  003068  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5312  00306A  0100               	movlb	0	; () banked
  5313  00306C  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5314  00306E  0100               	movlb	0	; () banked
  5315  003070  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5316  003072  B4D8               	btfsc	status,2,c
  5317  003074  D042               	goto	l1563
  5318                           
  5319                           ; BSR set to: 0
  5320  003076  0E01               	movlw	1
  5321  003078  0100               	movlb	0	; () banked
  5322  00307A  6F8C               	movwf	___lldiv@counter& (0+255),b
  5323  00307C  D008               	goto	l5251
  5324  00307E                     l5249:
  5325                           
  5326                           ; BSR set to: 0
  5327  00307E  0100               	movlb	0	; () banked
  5328  003080  90D8               	bcf	status,0,c
  5329  003082  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5330  003084  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5331  003086  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5332  003088  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5333  00308A  0100               	movlb	0	; () banked
  5334  00308C  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5335  00308E                     l5251:
  5336                           
  5337                           ; BSR set to: 0
  5338  00308E  0100               	movlb	0	; () banked
  5339  003090  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5340  003092  D7F5               	goto	l5249
  5341  003094                     l5253:
  5342                           
  5343                           ; BSR set to: 0
  5344  003094  0100               	movlb	0	; () banked
  5345  003096  90D8               	bcf	status,0,c
  5346  003098  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5347  00309A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5348  00309C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5349  00309E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5350                           
  5351                           ; BSR set to: 0
  5352  0030A0  0100               	movlb	0	; () banked
  5353  0030A2  5184               	movf	___lldiv@divisor& (0+255),w,b
  5354  0030A4  0100               	movlb	0	; () banked
  5355  0030A6  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5356  0030A8  0100               	movlb	0	; () banked
  5357  0030AA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5358  0030AC  0100               	movlb	0	; () banked
  5359  0030AE  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5360  0030B0  0100               	movlb	0	; () banked
  5361  0030B2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5362  0030B4  0100               	movlb	0	; () banked
  5363  0030B6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5364  0030B8  0100               	movlb	0	; () banked
  5365  0030BA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5366  0030BC  0100               	movlb	0	; () banked
  5367  0030BE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5368  0030C0  A0D8               	btfss	status,0,c
  5369  0030C2  D012               	goto	l5261
  5370                           
  5371                           ; BSR set to: 0
  5372  0030C4  0100               	movlb	0	; () banked
  5373  0030C6  5184               	movf	___lldiv@divisor& (0+255),w,b
  5374  0030C8  0100               	movlb	0	; () banked
  5375  0030CA  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5376  0030CC  0100               	movlb	0	; () banked
  5377  0030CE  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5378  0030D0  0100               	movlb	0	; () banked
  5379  0030D2  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5380  0030D4  0100               	movlb	0	; () banked
  5381  0030D6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5382  0030D8  0100               	movlb	0	; () banked
  5383  0030DA  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5384  0030DC  0100               	movlb	0	; () banked
  5385  0030DE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5386  0030E0  0100               	movlb	0	; () banked
  5387  0030E2  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5388                           
  5389                           ; BSR set to: 0
  5390  0030E4  0100               	movlb	0	; () banked
  5391  0030E6  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5392  0030E8                     l5261:
  5393                           
  5394                           ; BSR set to: 0
  5395  0030E8  0100               	movlb	0	; () banked
  5396  0030EA  90D8               	bcf	status,0,c
  5397  0030EC  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5398  0030EE  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5399  0030F0  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5400  0030F2  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5401                           
  5402                           ; BSR set to: 0
  5403  0030F4  0100               	movlb	0	; () banked
  5404  0030F6  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5405  0030F8  D7CD               	goto	l5253
  5406  0030FA                     l1563:
  5407                           
  5408                           ; BSR set to: 0
  5409  0030FA  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5410  0030FE  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5411  003102  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5412  003106  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5413                           
  5414                           ; BSR set to: 0
  5415  00310A  0012               	return		;funcret
  5416  00310C                     __end_of___lldiv:
  5417                           	opt stack 0
  5418                           tblptru	equ	0xFF8
  5419                           tblptrh	equ	0xFF7
  5420                           tblptrl	equ	0xFF6
  5421                           tablat	equ	0xFF5
  5422                           prodh	equ	0xFF4
  5423                           prodl	equ	0xFF3
  5424                           intcon	equ	0xFF2
  5425                           intcon2	equ	0xFF1
  5426                           intcon3	equ	0xFF0
  5427                           postinc0	equ	0xFEE
  5428                           wreg	equ	0xFE8
  5429                           postdec1	equ	0xFE5
  5430                           fsr1l	equ	0xFE1
  5431                           indf2	equ	0xFDF
  5432                           postinc2	equ	0xFDE
  5433                           postdec2	equ	0xFDD
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function _change_state_to_menu_start *****************
  5439 ;; Defined at:
  5440 ;;		line 472 in file "UI.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;		None
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;		None
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;Total ram usage:        0 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:   11
  5461 ;; This function calls:
  5462 ;;		_lcdInst
  5463 ;;		_printRTC
  5464 ;;		_printf
  5465 ;; This function is called by:
  5466 ;;		_initUI
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text18
  5471  003E0A                     __ptext18:
  5472                           	opt stack 0
  5473  003E0A                     _change_state_to_menu_start:
  5474                           	opt stack 18
  5475                           
  5476                           ;UI.c: 473: cur_state = 0;
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;incstack = 0
  5480  003E0A  0E00               	movlw	0
  5481  003E0C  0100               	movlb	0	; () banked
  5482  003E0E  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5483  003E10  0E00               	movlw	0
  5484  003E12  6FDE               	movwf	_cur_state& (0+255),b
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;UI.c: 475: lcdInst(0b10000000);;
  5488  003E14  0E80               	movlw	128
  5489  003E16  EC12  F020         	call	_lcdInst
  5490                           
  5491                           ;UI.c: 476: printRTC();
  5492  003E1A  EC6A  F00C         	call	_printRTC	;wreg free
  5493                           
  5494                           ;UI.c: 477: lcdInst(0b11000000);;
  5495  003E1E  0EC0               	movlw	192
  5496  003E20  EC12  F020         	call	_lcdInst
  5497                           
  5498                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5499  003E24  0E36               	movlw	low STR_30
  5500  003E26  0100               	movlb	0	; () banked
  5501  003E28  6F8E               	movwf	printf@f& (0+255),b
  5502  003E2A  0EFE               	movlw	high STR_30
  5503  003E2C  0100               	movlb	0	; () banked
  5504  003E2E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5505  003E30  EC97  F008         	call	_printf	;wreg free
  5506  003E34  0012               	return		;funcret
  5507  003E36                     __end_of_change_state_to_menu_start:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           intcon2	equ	0xFF1
  5517                           intcon3	equ	0xFF0
  5518                           postinc0	equ	0xFEE
  5519                           wreg	equ	0xFE8
  5520                           postdec1	equ	0xFE5
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _initTime *****************
  5530 ;; Defined at:
  5531 ;;		line 17 in file "RTC.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  s               1    wreg     unsigned char 
  5534 ;;  m               1    0[BANK0 ] unsigned char 
  5535 ;;  h               1    1[BANK0 ] unsigned char 
  5536 ;;  w               1    2[BANK0 ] unsigned char 
  5537 ;;  DD              1    3[BANK0 ] unsigned char 
  5538 ;;  MM              1    4[BANK0 ] unsigned char 
  5539 ;;  YY              1    5[BANK0 ] unsigned char 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  s               1    6[BANK0 ] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5551 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;Total ram usage:        7 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    7
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_main
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text19
  5566  003F6A                     __ptext19:
  5567                           	opt stack 0
  5568  003F6A                     _initTime:
  5569                           	opt stack 23
  5570                           
  5571                           ;incstack = 0
  5572                           ;initTime@s stored from wreg
  5573  003F6A  0100               	movlb	0	; () banked
  5574  003F6C  6F86               	movwf	initTime@s& (0+255),b
  5575                           
  5576                           ;RTC.c: 19: time[0] = s;
  5577  003F6E  C086  F124         	movff	initTime@s,_time
  5578                           
  5579                           ;RTC.c: 20: time[1] = m;
  5580  003F72  C080  F125         	movff	initTime@m,_time+1
  5581                           
  5582                           ;RTC.c: 21: time[2] = h;
  5583  003F76  C081  F126         	movff	initTime@h,_time+2
  5584                           
  5585                           ;RTC.c: 22: time[3] = w;
  5586  003F7A  C082  F127         	movff	initTime@w,_time+3
  5587                           
  5588                           ;RTC.c: 23: time[4] = DD;
  5589  003F7E  C083  F128         	movff	initTime@DD,_time+4
  5590                           
  5591                           ;RTC.c: 24: time[5] = MM;
  5592  003F82  C084  F129         	movff	initTime@MM,_time+5
  5593                           
  5594                           ;RTC.c: 25: time[6] = YY;
  5595  003F86  C085  F12A         	movff	initTime@YY,_time+6
  5596  003F8A  0012               	return		;funcret
  5597  003F8C                     __end_of_initTime:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           intcon2	equ	0xFF1
  5607                           intcon3	equ	0xFF0
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           postdec1	equ	0xFE5
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function _initLCD *****************
  5620 ;; Defined at:
  5621 ;;		line 48 in file "lcd.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;Total ram usage:        1 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    9
  5642 ;; This function calls:
  5643 ;;		_lcdInst
  5644 ;; This function is called by:
  5645 ;;		_main
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text20
  5650  003A68                     __ptext20:
  5651                           	opt stack 0
  5652  003A68                     _initLCD:
  5653                           	opt stack 21
  5654                           
  5655                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5656                           
  5657                           ;incstack = 0
  5658  003A68  0E9C               	movlw	156
  5659  003A6A  0100               	movlb	0	; () banked
  5660  003A6C  6F83               	movwf	??_initLCD& (0+255),b
  5661  003A6E  0ED7               	movlw	215
  5662  003A70                     u6617:
  5663  003A70  2EE8               	decfsz	wreg,f,c
  5664  003A72  D7FE               	bra	u6617
  5665  003A74  2F83               	decfsz	??_initLCD& (0+255),f,b
  5666  003A76  D7FC               	bra	u6617
  5667                           
  5668                           ;lcd.c: 50: lcdInst(0b00110011);
  5669  003A78  0E33               	movlw	51
  5670  003A7A  EC12  F020         	call	_lcdInst
  5671                           
  5672                           ;lcd.c: 51: lcdInst(0b00110010);
  5673  003A7E  0E32               	movlw	50
  5674  003A80  EC12  F020         	call	_lcdInst
  5675                           
  5676                           ;lcd.c: 53: lcdInst(0b00101000);
  5677  003A84  0E28               	movlw	40
  5678  003A86  EC12  F020         	call	_lcdInst
  5679                           
  5680                           ;lcd.c: 54: lcdInst(0b00001100);
  5681  003A8A  0E0C               	movlw	12
  5682  003A8C  EC12  F020         	call	_lcdInst
  5683                           
  5684                           ;lcd.c: 55: lcdInst(0b00000110);
  5685  003A90  0E06               	movlw	6
  5686  003A92  EC12  F020         	call	_lcdInst
  5687                           
  5688                           ;lcd.c: 56: lcdInst(0b00000001);
  5689  003A96  0E01               	movlw	1
  5690  003A98  EC12  F020         	call	_lcdInst
  5691                           
  5692                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5693  003A9C  0E9C               	movlw	156
  5694  003A9E  0100               	movlb	0	; () banked
  5695  003AA0  6F83               	movwf	??_initLCD& (0+255),b
  5696  003AA2  0ED7               	movlw	215
  5697  003AA4                     u6627:
  5698  003AA4  2EE8               	decfsz	wreg,f,c
  5699  003AA6  D7FE               	bra	u6627
  5700  003AA8  2F83               	decfsz	??_initLCD& (0+255),f,b
  5701  003AAA  D7FC               	bra	u6627
  5702  003AAC  0012               	return		;funcret
  5703  003AAE                     __end_of_initLCD:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           intcon	equ	0xFF2
  5712                           intcon2	equ	0xFF1
  5713                           intcon3	equ	0xFF0
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           postdec1	equ	0xFE5
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _UI *****************
  5726 ;; Defined at:
  5727 ;;		line 74 in file "UI.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  i               1   73[BANK0 ] unsigned char 
  5732 ;;  i               1   85[BANK0 ] unsigned char 
  5733 ;;  i               1   84[BANK0 ] unsigned char 
  5734 ;;  i               1   83[BANK0 ] unsigned char 
  5735 ;;  i               1   82[BANK0 ] unsigned char 
  5736 ;;  i               1   81[BANK0 ] unsigned char 
  5737 ;;  i               1   80[BANK0 ] unsigned char 
  5738 ;;  i               1   79[BANK0 ] unsigned char 
  5739 ;;  i               1   78[BANK0 ] unsigned char 
  5740 ;;  i               1   77[BANK0 ] unsigned char 
  5741 ;;  i               1   76[BANK0 ] unsigned char 
  5742 ;;  i               1   75[BANK0 ] unsigned char 
  5743 ;;  i               1   74[BANK0 ] unsigned char 
  5744 ;;  month           4   86[BANK0 ] unsigned char [4]
  5745 ;;  i               1   72[BANK0 ] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;Total ram usage:       22 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:   11
  5762 ;; This function calls:
  5763 ;;		___awdiv
  5764 ;;		___awmod
  5765 ;;		_change_state_to_menu_12
  5766 ;;		_change_state_to_menu_22
  5767 ;;		_lcdInst
  5768 ;;		_printRTC
  5769 ;;		_printf
  5770 ;;		_strcpy
  5771 ;; This function is called by:
  5772 ;;		_main
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text21
  5777  000012                     __ptext21:
  5778                           	opt stack 0
  5779  000012                     _UI:
  5780                           	opt stack 19
  5781                           
  5782                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5783                           
  5784                           ;incstack = 0
  5785  000012  0E02               	movlw	2
  5786  000014  0100               	movlb	0	; () banked
  5787  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5788  000018  A4D8               	btfss	status,2,c
  5789  00001A  D075               	goto	l6773
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5793  00001C  0E01               	movlw	1
  5794  00001E  EC12  F020         	call	_lcdInst
  5795  000022  0E68               	movlw	104
  5796  000024  0100               	movlb	0	; () banked
  5797  000026  6FC4               	movwf	??_UI& (0+255),b
  5798  000028  0EE4               	movlw	228
  5799  00002A                     u6637:
  5800  00002A  2EE8               	decfsz	wreg,f,c
  5801  00002C  D7FE               	bra	u6637
  5802  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5803  000030  D7FC               	bra	u6637
  5804  000032  F000               	nop	
  5805                           
  5806                           ;UI.c: 77: lcdInst(0b10000000);;
  5807  000034  0E80               	movlw	128
  5808  000036  EC12  F020         	call	_lcdInst
  5809                           
  5810                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5811  00003A  0E15               	movlw	low STR_1
  5812  00003C  0100               	movlb	0	; () banked
  5813  00003E  6F8E               	movwf	printf@f& (0+255),b
  5814  000040  0EFC               	movlw	high STR_1
  5815  000042  0100               	movlb	0	; () banked
  5816  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5817  000046  0E01               	movlw	1
  5818  000048  0100               	movlb	0	; () banked
  5819  00004A  25FD               	addwf	_sel& (0+255),w,b
  5820  00004C  0100               	movlb	0	; () banked
  5821  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5822  000050  0100               	movlb	0	; () banked
  5823  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5824  000054  0E00               	movlw	0
  5825  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5826  000058  EC97  F008         	call	_printf	;wreg free
  5827                           
  5828                           ;UI.c: 79: lcdInst(0b11000000);;
  5829  00005C  0EC0               	movlw	192
  5830  00005E  EC12  F020         	call	_lcdInst
  5831                           
  5832                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5833  000062  0E0E               	movlw	14
  5834  000064  0100               	movlb	0	; () banked
  5835  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5836  000068  0E10               	movlw	16
  5837  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5838  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  5839  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5840  000074  ECDB  F018         	call	___awmod	;wreg free
  5841  000078  C080  F0C6         	movff	?___awmod,_UI$2205
  5842  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2205+1
  5843                           
  5844                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5845  000080  0E44               	movlw	low STR_2
  5846  000082  0100               	movlb	0	; () banked
  5847  000084  6F8E               	movwf	printf@f& (0+255),b
  5848  000086  0EFF               	movlw	high STR_2
  5849  000088  0100               	movlb	0	; () banked
  5850  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5851  00008C  0E0E               	movlw	14
  5852  00008E  0100               	movlb	0	; () banked
  5853  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5854  000092  0E10               	movlw	16
  5855  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5856  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  5857  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5858  00009E  ECDB  F018         	call	___awmod	;wreg free
  5859  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5860  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5861  0000AA  0E00               	movlw	0
  5862  0000AC  0100               	movlb	0	; () banked
  5863  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5864  0000B0  0E3C               	movlw	60
  5865  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5866  0000B4  ECC9  F017         	call	___awdiv	;wreg free
  5867  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5868  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5869  0000C0  C0C6  F080         	movff	_UI$2205,___awmod@dividend
  5870  0000C4  C0C7  F081         	movff	_UI$2205+1,___awmod@dividend+1
  5871  0000C8  0E00               	movlw	0
  5872  0000CA  0100               	movlb	0	; () banked
  5873  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5874  0000CE  0E3C               	movlw	60
  5875  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5876  0000D2  ECDB  F018         	call	___awmod	;wreg free
  5877  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5878  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5879  0000DE  EC97  F008         	call	_printf	;wreg free
  5880                           
  5881                           ;UI.c: 81: machine_state = UI_state;
  5882  0000E2  0E00               	movlw	0
  5883  0000E4  0100               	movlb	0	; () banked
  5884  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5885  0000E8                     l177:
  5886  0000E8  A281               	btfss	3969,1,c	;volatile
  5887  0000EA  D7FE               	goto	l177
  5888                           
  5889                           ;UI.c: 84: }
  5890                           ;UI.c: 85: if(cur_state==12){
  5891  0000EC  0E0C               	movlw	12
  5892  0000EE  0100               	movlb	0	; () banked
  5893  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  5894  0000F2  0100               	movlb	0	; () banked
  5895  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5896  0000F6  A4D8               	btfss	status,2,c
  5897  0000F8  D003               	goto	l6771
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;UI.c: 86: change_state_to_menu_12();
  5901  0000FA  EC94  F01D         	call	_change_state_to_menu_12	;wreg free
  5902                           
  5903                           ;UI.c: 87: }
  5904  0000FE  D3D5               	goto	l7093
  5905  000100                     l6771:
  5906                           
  5907                           ;UI.c: 88: else{
  5908                           ;UI.c: 89: change_state_to_menu_22();
  5909  000100  EC78  F01D         	call	_change_state_to_menu_22	;wreg free
  5910                           
  5911                           ;UI.c: 90: }
  5912                           ;UI.c: 91: }
  5913  000104  D3D2               	goto	l7093
  5914  000106                     l6773:
  5915                           
  5916                           ;UI.c: 92: else if(cur_state == 0){
  5917  000106  0100               	movlb	0	; () banked
  5918  000108  51DE               	movf	_cur_state& (0+255),w,b
  5919  00010A  0100               	movlb	0	; () banked
  5920  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5921  00010E  A4D8               	btfss	status,2,c
  5922  000110  D3CC               	goto	l7093
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5926  000112  0E00               	movlw	0
  5927  000114  0100               	movlb	0	; () banked
  5928  000116  6FC8               	movwf	UI@i& (0+255),b
  5929  000118                     l6777:
  5930                           
  5931                           ; BSR set to: 0
  5932  000118  0E63               	movlw	99
  5933  00011A  0100               	movlb	0	; () banked
  5934  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5935  00011E  D001               	goto	l6781
  5936  000120  D00C               	goto	l6785
  5937  000122                     l6781:
  5938                           
  5939                           ; BSR set to: 0
  5940  000122  0E68               	movlw	104
  5941  000124  0100               	movlb	0	; () banked
  5942  000126  6FC4               	movwf	??_UI& (0+255),b
  5943  000128  0EE4               	movlw	228
  5944  00012A                     u6647:
  5945  00012A  2EE8               	decfsz	wreg,f,c
  5946  00012C  D7FE               	bra	u6647
  5947  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  5948  000130  D7FC               	bra	u6647
  5949  000132  F000               	nop	
  5950  000134  0100               	movlb	0	; () banked
  5951  000136  2BC8               	incf	UI@i& (0+255),f,b
  5952  000138  D7EF               	goto	l6777
  5953  00013A                     l6785:
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;UI.c: 94: if(cur_state == 0){
  5957  00013A  0100               	movlb	0	; () banked
  5958  00013C  51DE               	movf	_cur_state& (0+255),w,b
  5959  00013E  0100               	movlb	0	; () banked
  5960  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5961  000142  A4D8               	btfss	status,2,c
  5962  000144  D3B2               	goto	l7093
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;UI.c: 95: printRTC();
  5966  000146  EC6A  F00C         	call	_printRTC	;wreg free
  5967                           
  5968                           ;UI.c: 96: }
  5969                           ;UI.c: 97: }
  5970                           ;UI.c: 98: while(logstate){
  5971  00014A  D3AF               	goto	l7093
  5972  00014C                     l6789:
  5973                           
  5974                           ;UI.c: 100: if(!log_completion){
  5975  00014C  0100               	movlb	0	; () banked
  5976  00014E  51E8               	movf	_log_completion& (0+255),w,b
  5977  000150  0100               	movlb	0	; () banked
  5978  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  5979  000154  A4D8               	btfss	status,2,c
  5980  000156  D041               	goto	l6819
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5984  000158  0E01               	movlw	1
  5985  00015A  EC12  F020         	call	_lcdInst
  5986  00015E  0E68               	movlw	104
  5987  000160  0100               	movlb	0	; () banked
  5988  000162  6FC4               	movwf	??_UI& (0+255),b
  5989  000164  0EE4               	movlw	228
  5990  000166                     u6657:
  5991  000166  2EE8               	decfsz	wreg,f,c
  5992  000168  D7FE               	bra	u6657
  5993  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  5994  00016C  D7FC               	bra	u6657
  5995  00016E  F000               	nop	
  5996                           
  5997                           ;UI.c: 102: lcdInst(0b10000000);;
  5998  000170  0E80               	movlw	128
  5999  000172  EC12  F020         	call	_lcdInst
  6000                           
  6001                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6002  000176  0E03               	movlw	low STR_3
  6003  000178  0100               	movlb	0	; () banked
  6004  00017A  6F8E               	movwf	printf@f& (0+255),b
  6005  00017C  0EFC               	movlw	high STR_3
  6006  00017E  0100               	movlb	0	; () banked
  6007  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6008  000182  C0E6  F090         	movff	_log,?_printf+2
  6009  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6010  00018A  EC97  F008         	call	_printf	;wreg free
  6011                           
  6012                           ;UI.c: 104: lcdInst(0b11000000);;
  6013  00018E  0EC0               	movlw	192
  6014  000190  EC12  F020         	call	_lcdInst
  6015                           
  6016                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6017  000194  0E67               	movlw	low STR_4
  6018  000196  0100               	movlb	0	; () banked
  6019  000198  6F8E               	movwf	printf@f& (0+255),b
  6020  00019A  0EFE               	movlw	high STR_4
  6021  00019C  0100               	movlb	0	; () banked
  6022  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6023  0001A0  EC97  F008         	call	_printf	;wreg free
  6024  0001A4                     l6803:
  6025  0001A4  0E00               	movlw	0
  6026  0001A6  0100               	movlb	0	; () banked
  6027  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6028  0001AA                     l6805:
  6029                           
  6030                           ; BSR set to: 0
  6031  0001AA  0E63               	movlw	99
  6032  0001AC  0100               	movlb	0	; () banked
  6033  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6034  0001B0  D001               	goto	l6809
  6035  0001B2  D00C               	goto	l6813
  6036  0001B4                     l6809:
  6037                           
  6038                           ; BSR set to: 0
  6039  0001B4  0E68               	movlw	104
  6040  0001B6  0100               	movlb	0	; () banked
  6041  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6042  0001BA  0EE4               	movlw	228
  6043  0001BC                     u6667:
  6044  0001BC  2EE8               	decfsz	wreg,f,c
  6045  0001BE  D7FE               	bra	u6667
  6046  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6047  0001C2  D7FC               	bra	u6667
  6048  0001C4  F000               	nop	
  6049  0001C6  0100               	movlb	0	; () banked
  6050  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6051  0001CA  D7EF               	goto	l6805
  6052  0001CC                     l6813:
  6053                           
  6054                           ; BSR set to: 0
  6055  0001CC  0100               	movlb	0	; () banked
  6056  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6057  0001D0  0100               	movlb	0	; () banked
  6058  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6059  0001D4  B4D8               	btfsc	status,2,c
  6060  0001D6  0012               	return	
  6061  0001D8  D7E5               	goto	l6803
  6062  0001DA                     l6819:
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;UI.c: 109: else{
  6066                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6067  0001DA  0E01               	movlw	1
  6068  0001DC  EC12  F020         	call	_lcdInst
  6069  0001E0  0E68               	movlw	104
  6070  0001E2  0100               	movlb	0	; () banked
  6071  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6072  0001E6  0EE4               	movlw	228
  6073  0001E8                     u6677:
  6074  0001E8  2EE8               	decfsz	wreg,f,c
  6075  0001EA  D7FE               	bra	u6677
  6076  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6077  0001EE  D7FC               	bra	u6677
  6078  0001F0  F000               	nop	
  6079                           
  6080                           ;UI.c: 111: lcdInst(0b10000000);;
  6081  0001F2  0E80               	movlw	128
  6082  0001F4  EC12  F020         	call	_lcdInst
  6083                           
  6084                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6085  0001F8  0E03               	movlw	low STR_3
  6086  0001FA  0100               	movlb	0	; () banked
  6087  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6088  0001FE  0EFC               	movlw	high STR_3
  6089  000200  0100               	movlb	0	; () banked
  6090  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6091  000204  C0E6  F090         	movff	_log,?_printf+2
  6092  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6093  00020C  EC97  F008         	call	_printf	;wreg free
  6094                           
  6095                           ;UI.c: 113: lcdInst(0b11000000);;
  6096  000210  0EC0               	movlw	192
  6097  000212  EC12  F020         	call	_lcdInst
  6098                           
  6099                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6100  000216  0E25               	movlw	low STR_6
  6101  000218  0100               	movlb	0	; () banked
  6102  00021A  6F8E               	movwf	printf@f& (0+255),b
  6103  00021C  0EFE               	movlw	high STR_6
  6104  00021E  0100               	movlb	0	; () banked
  6105  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6106  000222  EC97  F008         	call	_printf	;wreg free
  6107                           
  6108                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6109  000226  0E00               	movlw	0
  6110  000228  0100               	movlb	0	; () banked
  6111  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6112  00022C                     l6833:
  6113                           
  6114                           ; BSR set to: 0
  6115  00022C  0E63               	movlw	99
  6116  00022E  0100               	movlb	0	; () banked
  6117  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6118  000232  D001               	goto	l6837
  6119  000234  D00C               	goto	l6841
  6120  000236                     l6837:
  6121                           
  6122                           ; BSR set to: 0
  6123  000236  0E68               	movlw	104
  6124  000238  0100               	movlb	0	; () banked
  6125  00023A  6FC4               	movwf	??_UI& (0+255),b
  6126  00023C  0EE4               	movlw	228
  6127  00023E                     u6687:
  6128  00023E  2EE8               	decfsz	wreg,f,c
  6129  000240  D7FE               	bra	u6687
  6130  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6131  000244  D7FC               	bra	u6687
  6132  000246  F000               	nop	
  6133  000248  0100               	movlb	0	; () banked
  6134  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6135  00024C  D7EF               	goto	l6833
  6136  00024E                     l6841:
  6137                           
  6138                           ; BSR set to: 0
  6139  00024E  0100               	movlb	0	; () banked
  6140  000250  51F6               	movf	_logstate& (0+255),w,b
  6141  000252  0100               	movlb	0	; () banked
  6142  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6143  000256  B4D8               	btfsc	status,2,c
  6144  000258  0012               	return	
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6148                           
  6149                           ; BSR set to: 0
  6150                           
  6151                           ; BSR set to: 0
  6152  00025A  0E00               	movlw	0
  6153  00025C  0100               	movlb	0	; () banked
  6154  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6155  000260                     l6847:
  6156                           
  6157                           ; BSR set to: 0
  6158  000260  0E63               	movlw	99
  6159  000262  0100               	movlb	0	; () banked
  6160  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6161  000266  D001               	goto	l6851
  6162  000268  D00C               	goto	l6855
  6163  00026A                     l6851:
  6164                           
  6165                           ; BSR set to: 0
  6166  00026A  0E68               	movlw	104
  6167  00026C  0100               	movlb	0	; () banked
  6168  00026E  6FC4               	movwf	??_UI& (0+255),b
  6169  000270  0EE4               	movlw	228
  6170  000272                     u6697:
  6171  000272  2EE8               	decfsz	wreg,f,c
  6172  000274  D7FE               	bra	u6697
  6173  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6174  000278  D7FC               	bra	u6697
  6175  00027A  F000               	nop	
  6176  00027C  0100               	movlb	0	; () banked
  6177  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6178  000280  D7EF               	goto	l6847
  6179  000282                     l6855:
  6180                           
  6181                           ; BSR set to: 0
  6182  000282  0100               	movlb	0	; () banked
  6183  000284  51F6               	movf	_logstate& (0+255),w,b
  6184  000286  0100               	movlb	0	; () banked
  6185  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6186  00028A  B4D8               	btfsc	status,2,c
  6187  00028C  0012               	return	
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6191                           
  6192                           ; BSR set to: 0
  6193                           
  6194                           ; BSR set to: 0
  6195  00028E  0E01               	movlw	1
  6196  000290  EC12  F020         	call	_lcdInst
  6197  000294  0E68               	movlw	104
  6198  000296  0100               	movlb	0	; () banked
  6199  000298  6FC4               	movwf	??_UI& (0+255),b
  6200  00029A  0EE4               	movlw	228
  6201  00029C                     u6707:
  6202  00029C  2EE8               	decfsz	wreg,f,c
  6203  00029E  D7FE               	bra	u6707
  6204  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6205  0002A2  D7FC               	bra	u6707
  6206  0002A4  F000               	nop	
  6207                           
  6208                           ;UI.c: 120: lcdInst(0b10000000);;
  6209  0002A6  0E80               	movlw	128
  6210  0002A8  EC12  F020         	call	_lcdInst
  6211                           
  6212                           ;UI.c: 121: printf("START:");
  6213  0002AC  0EC3               	movlw	low STR_7
  6214  0002AE  0100               	movlb	0	; () banked
  6215  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6216  0002B2  0EFF               	movlw	high STR_7
  6217  0002B4  0100               	movlb	0	; () banked
  6218  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6219  0002B8  EC97  F008         	call	_printf	;wreg free
  6220                           
  6221                           ;UI.c: 122: lcdInst(0b11000000);;
  6222  0002BC  0EC0               	movlw	192
  6223  0002BE  EC12  F020         	call	_lcdInst
  6224                           
  6225                           ;UI.c: 123: char month[] = "MMM";
  6226  0002C2  C12D  F0D6         	movff	UI@F3220,UI@month
  6227  0002C6  C12E  F0D7         	movff	UI@F3220+1,UI@month+1
  6228  0002CA  C12F  F0D8         	movff	UI@F3220+2,UI@month+2
  6229  0002CE  C130  F0D9         	movff	UI@F3220+3,UI@month+3
  6230                           
  6231                           ;UI.c: 124: switch(log_startTime[5]){
  6232  0002D2  D0C3               	goto	l6899
  6233  0002D4                     l6871:
  6234                           
  6235                           ;UI.c: 126: strcpy(month, "JAN");
  6236  0002D4  0ED6               	movlw	low UI@month
  6237  0002D6  0100               	movlb	0	; () banked
  6238  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6239  0002DA  0E00               	movlw	high UI@month
  6240  0002DC  0100               	movlb	0	; () banked
  6241  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6242  0002E0  0EDA               	movlw	low STR_8
  6243  0002E2  0100               	movlb	0	; () banked
  6244  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6245  0002E6  0EFF               	movlw	high STR_8
  6246  0002E8  0100               	movlb	0	; () banked
  6247  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6248  0002EC  ECB0  F01D         	call	_strcpy	;wreg free
  6249                           
  6250                           ;UI.c: 127: break;
  6251  0002F0  D0E6               	goto	l6901
  6252  0002F2                     l6873:
  6253                           
  6254                           ;UI.c: 129: strcpy(month, "FEB");
  6255  0002F2  0ED6               	movlw	low UI@month
  6256  0002F4  0100               	movlb	0	; () banked
  6257  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6258  0002F8  0E00               	movlw	high UI@month
  6259  0002FA  0100               	movlb	0	; () banked
  6260  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6261  0002FE  0ECA               	movlw	low STR_9
  6262  000300  0100               	movlb	0	; () banked
  6263  000302  6F82               	movwf	strcpy@from& (0+255),b
  6264  000304  0EFF               	movlw	high STR_9
  6265  000306  0100               	movlb	0	; () banked
  6266  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6267  00030A  ECB0  F01D         	call	_strcpy	;wreg free
  6268                           
  6269                           ;UI.c: 130: break;
  6270  00030E  D0D7               	goto	l6901
  6271  000310                     l6875:
  6272                           
  6273                           ;UI.c: 132: strcpy(month, "MAR");
  6274  000310  0ED6               	movlw	low UI@month
  6275  000312  0100               	movlb	0	; () banked
  6276  000314  6F80               	movwf	strcpy@to& (0+255),b
  6277  000316  0E00               	movlw	high UI@month
  6278  000318  0100               	movlb	0	; () banked
  6279  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6280  00031C  0EE6               	movlw	low STR_10
  6281  00031E  0100               	movlb	0	; () banked
  6282  000320  6F82               	movwf	strcpy@from& (0+255),b
  6283  000322  0EFF               	movlw	high STR_10
  6284  000324  0100               	movlb	0	; () banked
  6285  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6286  000328  ECB0  F01D         	call	_strcpy	;wreg free
  6287                           
  6288                           ;UI.c: 133: break;
  6289  00032C  D0C8               	goto	l6901
  6290  00032E                     l6877:
  6291                           
  6292                           ;UI.c: 135: strcpy(month, "APR");
  6293  00032E  0ED6               	movlw	low UI@month
  6294  000330  0100               	movlb	0	; () banked
  6295  000332  6F80               	movwf	strcpy@to& (0+255),b
  6296  000334  0E00               	movlw	high UI@month
  6297  000336  0100               	movlb	0	; () banked
  6298  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6299  00033A  0EEA               	movlw	low STR_11
  6300  00033C  0100               	movlb	0	; () banked
  6301  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6302  000340  0EFF               	movlw	high STR_11
  6303  000342  0100               	movlb	0	; () banked
  6304  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6305  000346  ECB0  F01D         	call	_strcpy	;wreg free
  6306                           
  6307                           ;UI.c: 136: break;
  6308  00034A  D0B9               	goto	l6901
  6309  00034C                     l6879:
  6310                           
  6311                           ;UI.c: 138: strcpy(month, "MAY");
  6312  00034C  0ED6               	movlw	low UI@month
  6313  00034E  0100               	movlb	0	; () banked
  6314  000350  6F80               	movwf	strcpy@to& (0+255),b
  6315  000352  0E00               	movlw	high UI@month
  6316  000354  0100               	movlb	0	; () banked
  6317  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6318  000358  0EFA               	movlw	low STR_12
  6319  00035A  0100               	movlb	0	; () banked
  6320  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6321  00035E  0EFF               	movlw	high STR_12
  6322  000360  0100               	movlb	0	; () banked
  6323  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6324  000364  ECB0  F01D         	call	_strcpy	;wreg free
  6325                           
  6326                           ;UI.c: 139: break;
  6327  000368  D0AA               	goto	l6901
  6328  00036A                     l6881:
  6329                           
  6330                           ;UI.c: 141: strcpy(month, "JUN");
  6331  00036A  0ED6               	movlw	low UI@month
  6332  00036C  0100               	movlb	0	; () banked
  6333  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6334  000370  0E00               	movlw	high UI@month
  6335  000372  0100               	movlb	0	; () banked
  6336  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6337  000376  0EDE               	movlw	low STR_13
  6338  000378  0100               	movlb	0	; () banked
  6339  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6340  00037C  0EFF               	movlw	high STR_13
  6341  00037E  0100               	movlb	0	; () banked
  6342  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6343  000382  ECB0  F01D         	call	_strcpy	;wreg free
  6344                           
  6345                           ;UI.c: 142: break;
  6346  000386  D09B               	goto	l6901
  6347  000388                     l6883:
  6348                           
  6349                           ;UI.c: 144: strcpy(month, "JUL");
  6350  000388  0ED6               	movlw	low UI@month
  6351  00038A  0100               	movlb	0	; () banked
  6352  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6353  00038E  0E00               	movlw	high UI@month
  6354  000390  0100               	movlb	0	; () banked
  6355  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6356  000394  0ED6               	movlw	low STR_14
  6357  000396  0100               	movlb	0	; () banked
  6358  000398  6F82               	movwf	strcpy@from& (0+255),b
  6359  00039A  0EFF               	movlw	high STR_14
  6360  00039C  0100               	movlb	0	; () banked
  6361  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6362  0003A0  ECB0  F01D         	call	_strcpy	;wreg free
  6363                           
  6364                           ;UI.c: 145: break;
  6365  0003A4  D08C               	goto	l6901
  6366  0003A6                     l6885:
  6367                           
  6368                           ;UI.c: 147: strcpy(month, "AUG");
  6369  0003A6  0ED6               	movlw	low UI@month
  6370  0003A8  0100               	movlb	0	; () banked
  6371  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6372  0003AC  0E00               	movlw	high UI@month
  6373  0003AE  0100               	movlb	0	; () banked
  6374  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6375  0003B2  0ED2               	movlw	low STR_15
  6376  0003B4  0100               	movlb	0	; () banked
  6377  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6378  0003B8  0EFF               	movlw	high STR_15
  6379  0003BA  0100               	movlb	0	; () banked
  6380  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6381  0003BE  ECB0  F01D         	call	_strcpy	;wreg free
  6382                           
  6383                           ;UI.c: 148: break;
  6384  0003C2  D07D               	goto	l6901
  6385  0003C4                     l6887:
  6386                           
  6387                           ;UI.c: 150: strcpy(month, "SEP");
  6388  0003C4  0ED6               	movlw	low UI@month
  6389  0003C6  0100               	movlb	0	; () banked
  6390  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6391  0003CA  0E00               	movlw	high UI@month
  6392  0003CC  0100               	movlb	0	; () banked
  6393  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6394  0003D0  0EE2               	movlw	low STR_16
  6395  0003D2  0100               	movlb	0	; () banked
  6396  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6397  0003D6  0EFF               	movlw	high STR_16
  6398  0003D8  0100               	movlb	0	; () banked
  6399  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6400  0003DC  ECB0  F01D         	call	_strcpy	;wreg free
  6401                           
  6402                           ;UI.c: 151: break;
  6403  0003E0  D06E               	goto	l6901
  6404  0003E2                     l6889:
  6405                           
  6406                           ;UI.c: 153: strcpy(month, "OCT");
  6407  0003E2  0ED6               	movlw	low UI@month
  6408  0003E4  0100               	movlb	0	; () banked
  6409  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6410  0003E8  0E00               	movlw	high UI@month
  6411  0003EA  0100               	movlb	0	; () banked
  6412  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6413  0003EE  0EF2               	movlw	low STR_17
  6414  0003F0  0100               	movlb	0	; () banked
  6415  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6416  0003F4  0EFF               	movlw	high STR_17
  6417  0003F6  0100               	movlb	0	; () banked
  6418  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6419  0003FA  ECB0  F01D         	call	_strcpy	;wreg free
  6420                           
  6421                           ;UI.c: 154: break;
  6422  0003FE  D05F               	goto	l6901
  6423  000400                     l6891:
  6424                           
  6425                           ;UI.c: 156: strcpy(month, "NOV");
  6426  000400  0ED6               	movlw	low UI@month
  6427  000402  0100               	movlb	0	; () banked
  6428  000404  6F80               	movwf	strcpy@to& (0+255),b
  6429  000406  0E00               	movlw	high UI@month
  6430  000408  0100               	movlb	0	; () banked
  6431  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6432  00040C  0EF6               	movlw	low STR_18
  6433  00040E  0100               	movlb	0	; () banked
  6434  000410  6F82               	movwf	strcpy@from& (0+255),b
  6435  000412  0EFF               	movlw	high STR_18
  6436  000414  0100               	movlb	0	; () banked
  6437  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6438  000418  ECB0  F01D         	call	_strcpy	;wreg free
  6439                           
  6440                           ;UI.c: 157: break;
  6441  00041C  D050               	goto	l6901
  6442  00041E                     l6893:
  6443                           
  6444                           ;UI.c: 159: strcpy(month, "DEC");
  6445  00041E  0ED6               	movlw	low UI@month
  6446  000420  0100               	movlb	0	; () banked
  6447  000422  6F80               	movwf	strcpy@to& (0+255),b
  6448  000424  0E00               	movlw	high UI@month
  6449  000426  0100               	movlb	0	; () banked
  6450  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6451  00042A  0ECE               	movlw	low STR_19
  6452  00042C  0100               	movlb	0	; () banked
  6453  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6454  000430  0EFF               	movlw	high STR_19
  6455  000432  0100               	movlb	0	; () banked
  6456  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6457  000436  ECB0  F01D         	call	_strcpy	;wreg free
  6458                           
  6459                           ;UI.c: 160: break;
  6460  00043A  D041               	goto	l6901
  6461  00043C                     l6895:
  6462                           
  6463                           ;UI.c: 162: strcpy(month, "ERR");
  6464  00043C  0ED6               	movlw	low UI@month
  6465  00043E  0100               	movlb	0	; () banked
  6466  000440  6F80               	movwf	strcpy@to& (0+255),b
  6467  000442  0E00               	movlw	high UI@month
  6468  000444  0100               	movlb	0	; () banked
  6469  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6470  000448  0EEE               	movlw	low STR_20
  6471  00044A  0100               	movlb	0	; () banked
  6472  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6473  00044E  0EFF               	movlw	high STR_20
  6474  000450  0100               	movlb	0	; () banked
  6475  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6476  000454  ECB0  F01D         	call	_strcpy	;wreg free
  6477                           
  6478                           ;UI.c: 164: }
  6479                           
  6480                           ;UI.c: 163: break;
  6481  000458  D032               	goto	l6901
  6482  00045A                     l6899:
  6483  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6484  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6485  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6486                           
  6487                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6488                           ; Switch size 1, requested type "space"
  6489                           ; Number of cases is 1, Range of values is 0 to 0
  6490                           ; switch strategies available:
  6491                           ; Name         Instructions Cycles
  6492                           ; simple_byte            4     3 (average)
  6493                           ;	Chosen strategy is simple_byte
  6494  000466  0100               	movlb	0	; () banked
  6495  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6496  00046A  0A00               	xorlw	0	; case 0
  6497  00046C  A4D8               	btfss	status,2,c
  6498  00046E  D7E6               	goto	l6895
  6499                           
  6500                           ; BSR set to: 0
  6501                           ; Switch size 1, requested type "space"
  6502                           ; Number of cases is 12, Range of values is 1 to 12
  6503                           ; switch strategies available:
  6504                           ; Name         Instructions Cycles
  6505                           ; simple_byte           37    19 (average)
  6506                           ;	Chosen strategy is simple_byte
  6507  000470  0100               	movlb	0	; () banked
  6508  000472  51C4               	movf	??_UI& (0+255),w,b
  6509  000474  0A01               	xorlw	1	; case 1
  6510  000476  B4D8               	btfsc	status,2,c
  6511  000478  D72D               	goto	l6871
  6512  00047A  0A03               	xorlw	3	; case 2
  6513  00047C  B4D8               	btfsc	status,2,c
  6514  00047E  D739               	goto	l6873
  6515  000480  0A01               	xorlw	1	; case 3
  6516  000482  B4D8               	btfsc	status,2,c
  6517  000484  D745               	goto	l6875
  6518  000486  0A07               	xorlw	7	; case 4
  6519  000488  B4D8               	btfsc	status,2,c
  6520  00048A  D751               	goto	l6877
  6521  00048C  0A01               	xorlw	1	; case 5
  6522  00048E  B4D8               	btfsc	status,2,c
  6523  000490  D75D               	goto	l6879
  6524  000492  0A03               	xorlw	3	; case 6
  6525  000494  B4D8               	btfsc	status,2,c
  6526  000496  D769               	goto	l6881
  6527  000498  0A01               	xorlw	1	; case 7
  6528  00049A  B4D8               	btfsc	status,2,c
  6529  00049C  D775               	goto	l6883
  6530  00049E  0A0F               	xorlw	15	; case 8
  6531  0004A0  B4D8               	btfsc	status,2,c
  6532  0004A2  D781               	goto	l6885
  6533  0004A4  0A01               	xorlw	1	; case 9
  6534  0004A6  B4D8               	btfsc	status,2,c
  6535  0004A8  D78D               	goto	l6887
  6536  0004AA  0A03               	xorlw	3	; case 10
  6537  0004AC  B4D8               	btfsc	status,2,c
  6538  0004AE  D799               	goto	l6889
  6539  0004B0  0A01               	xorlw	1	; case 11
  6540  0004B2  B4D8               	btfsc	status,2,c
  6541  0004B4  D7A5               	goto	l6891
  6542  0004B6  0A07               	xorlw	7	; case 12
  6543  0004B8  B4D8               	btfsc	status,2,c
  6544  0004BA  D7B1               	goto	l6893
  6545  0004BC  D7BF               	goto	l6895
  6546  0004BE                     l6901:
  6547                           
  6548                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6549  0004BE  0E8C               	movlw	low STR_21
  6550  0004C0  0100               	movlb	0	; () banked
  6551  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6552  0004C4  0EFB               	movlw	high STR_21
  6553  0004C6  0100               	movlb	0	; () banked
  6554  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6555  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6556  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6557  0004D2  0ED6               	movlw	low UI@month
  6558  0004D4  0100               	movlb	0	; () banked
  6559  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6560  0004D8  0E00               	movlw	high UI@month
  6561  0004DA  0100               	movlb	0	; () banked
  6562  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6563  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6564  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6565  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6566  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6567  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6568  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6569  0004F6  EC97  F008         	call	_printf	;wreg free
  6570                           
  6571                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6572  0004FA  0E00               	movlw	0
  6573  0004FC  0100               	movlb	0	; () banked
  6574  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6575  000500                     l6905:
  6576                           
  6577                           ; BSR set to: 0
  6578  000500  0E63               	movlw	99
  6579  000502  0100               	movlb	0	; () banked
  6580  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6581  000506  D001               	goto	l6909
  6582  000508  D00C               	goto	l6913
  6583  00050A                     l6909:
  6584                           
  6585                           ; BSR set to: 0
  6586  00050A  0E68               	movlw	104
  6587  00050C  0100               	movlb	0	; () banked
  6588  00050E  6FC4               	movwf	??_UI& (0+255),b
  6589  000510  0EE4               	movlw	228
  6590  000512                     u6717:
  6591  000512  2EE8               	decfsz	wreg,f,c
  6592  000514  D7FE               	bra	u6717
  6593  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6594  000518  D7FC               	bra	u6717
  6595  00051A  F000               	nop	
  6596  00051C  0100               	movlb	0	; () banked
  6597  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6598  000520  D7EF               	goto	l6905
  6599  000522                     l6913:
  6600                           
  6601                           ; BSR set to: 0
  6602  000522  0100               	movlb	0	; () banked
  6603  000524  51F6               	movf	_logstate& (0+255),w,b
  6604  000526  0100               	movlb	0	; () banked
  6605  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6606  00052A  B4D8               	btfsc	status,2,c
  6607  00052C  0012               	return	
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6611                           
  6612                           ; BSR set to: 0
  6613                           
  6614                           ; BSR set to: 0
  6615  00052E  0E00               	movlw	0
  6616  000530  0100               	movlb	0	; () banked
  6617  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6618  000534                     l6919:
  6619                           
  6620                           ; BSR set to: 0
  6621  000534  0E63               	movlw	99
  6622  000536  0100               	movlb	0	; () banked
  6623  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6624  00053A  D001               	goto	l6923
  6625  00053C  D00C               	goto	l6927
  6626  00053E                     l6923:
  6627                           
  6628                           ; BSR set to: 0
  6629  00053E  0E68               	movlw	104
  6630  000540  0100               	movlb	0	; () banked
  6631  000542  6FC4               	movwf	??_UI& (0+255),b
  6632  000544  0EE4               	movlw	228
  6633  000546                     u6727:
  6634  000546  2EE8               	decfsz	wreg,f,c
  6635  000548  D7FE               	bra	u6727
  6636  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6637  00054C  D7FC               	bra	u6727
  6638  00054E  F000               	nop	
  6639  000550  0100               	movlb	0	; () banked
  6640  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6641  000554  D7EF               	goto	l6919
  6642  000556                     l6927:
  6643                           
  6644                           ; BSR set to: 0
  6645  000556  0100               	movlb	0	; () banked
  6646  000558  51F6               	movf	_logstate& (0+255),w,b
  6647  00055A  0100               	movlb	0	; () banked
  6648  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6649  00055E  B4D8               	btfsc	status,2,c
  6650  000560  0012               	return	
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6654                           
  6655                           ; BSR set to: 0
  6656                           
  6657                           ; BSR set to: 0
  6658  000562  0E01               	movlw	1
  6659  000564  EC12  F020         	call	_lcdInst
  6660  000568  0E68               	movlw	104
  6661  00056A  0100               	movlb	0	; () banked
  6662  00056C  6FC4               	movwf	??_UI& (0+255),b
  6663  00056E  0EE4               	movlw	228
  6664  000570                     u6737:
  6665  000570  2EE8               	decfsz	wreg,f,c
  6666  000572  D7FE               	bra	u6737
  6667  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6668  000576  D7FC               	bra	u6737
  6669  000578  F000               	nop	
  6670                           
  6671                           ;UI.c: 171: lcdInst(0b10000000);;
  6672  00057A  0E80               	movlw	128
  6673  00057C  EC12  F020         	call	_lcdInst
  6674                           
  6675                           ;UI.c: 172: printf("DURATION:");
  6676  000580  0EA3               	movlw	low STR_22
  6677  000582  0100               	movlb	0	; () banked
  6678  000584  6F8E               	movwf	printf@f& (0+255),b
  6679  000586  0EFF               	movlw	high STR_22
  6680  000588  0100               	movlb	0	; () banked
  6681  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6682  00058C  EC97  F008         	call	_printf	;wreg free
  6683                           
  6684                           ;UI.c: 173: lcdInst(0b11000000);;
  6685  000590  0EC0               	movlw	192
  6686  000592  EC12  F020         	call	_lcdInst
  6687                           
  6688                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6689  000596  0E0E               	movlw	14
  6690  000598  0100               	movlb	0	; () banked
  6691  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6692  00059C  0E10               	movlw	16
  6693  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6694  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6695  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6696  0005A8  ECDB  F018         	call	___awmod	;wreg free
  6697  0005AC  C080  F0C6         	movff	?___awmod,_UI$2205
  6698  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2205+1
  6699                           
  6700                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6701  0005B4  0E36               	movlw	low STR_23
  6702  0005B6  0100               	movlb	0	; () banked
  6703  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6704  0005BA  0EFF               	movlw	high STR_23
  6705  0005BC  0100               	movlb	0	; () banked
  6706  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6707  0005C0  0E0E               	movlw	14
  6708  0005C2  0100               	movlb	0	; () banked
  6709  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6710  0005C6  0E10               	movlw	16
  6711  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6712  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6713  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6714  0005D2  ECDB  F018         	call	___awmod	;wreg free
  6715  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6716  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6717  0005DE  0E00               	movlw	0
  6718  0005E0  0100               	movlb	0	; () banked
  6719  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6720  0005E4  0E3C               	movlw	60
  6721  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6722  0005E8  ECC9  F017         	call	___awdiv	;wreg free
  6723  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6724  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6725  0005F4  C0C6  F080         	movff	_UI$2205,___awmod@dividend
  6726  0005F8  C0C7  F081         	movff	_UI$2205+1,___awmod@dividend+1
  6727  0005FC  0E00               	movlw	0
  6728  0005FE  0100               	movlb	0	; () banked
  6729  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6730  000602  0E3C               	movlw	60
  6731  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6732  000606  ECDB  F018         	call	___awmod	;wreg free
  6733  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6734  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6735  000612  EC97  F008         	call	_printf	;wreg free
  6736                           
  6737                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6738  000616  0E00               	movlw	0
  6739  000618  0100               	movlb	0	; () banked
  6740  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6741  00061C                     l6947:
  6742                           
  6743                           ; BSR set to: 0
  6744  00061C  0E63               	movlw	99
  6745  00061E  0100               	movlb	0	; () banked
  6746  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6747  000622  D001               	goto	l6951
  6748  000624  D00C               	goto	l6955
  6749  000626                     l6951:
  6750                           
  6751                           ; BSR set to: 0
  6752  000626  0E68               	movlw	104
  6753  000628  0100               	movlb	0	; () banked
  6754  00062A  6FC4               	movwf	??_UI& (0+255),b
  6755  00062C  0EE4               	movlw	228
  6756  00062E                     u6747:
  6757  00062E  2EE8               	decfsz	wreg,f,c
  6758  000630  D7FE               	bra	u6747
  6759  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6760  000634  D7FC               	bra	u6747
  6761  000636  F000               	nop	
  6762  000638  0100               	movlb	0	; () banked
  6763  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6764  00063C  D7EF               	goto	l6947
  6765  00063E                     l6955:
  6766                           
  6767                           ; BSR set to: 0
  6768  00063E  0100               	movlb	0	; () banked
  6769  000640  51F6               	movf	_logstate& (0+255),w,b
  6770  000642  0100               	movlb	0	; () banked
  6771  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6772  000646  B4D8               	btfsc	status,2,c
  6773  000648  0012               	return	
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6777                           
  6778                           ; BSR set to: 0
  6779                           
  6780                           ; BSR set to: 0
  6781  00064A  0E00               	movlw	0
  6782  00064C  0100               	movlb	0	; () banked
  6783  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6784  000650                     l6961:
  6785                           
  6786                           ; BSR set to: 0
  6787  000650  0E63               	movlw	99
  6788  000652  0100               	movlb	0	; () banked
  6789  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6790  000656  D001               	goto	l6965
  6791  000658  D00C               	goto	l6969
  6792  00065A                     l6965:
  6793                           
  6794                           ; BSR set to: 0
  6795  00065A  0E68               	movlw	104
  6796  00065C  0100               	movlb	0	; () banked
  6797  00065E  6FC4               	movwf	??_UI& (0+255),b
  6798  000660  0EE4               	movlw	228
  6799  000662                     u6757:
  6800  000662  2EE8               	decfsz	wreg,f,c
  6801  000664  D7FE               	bra	u6757
  6802  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6803  000668  D7FC               	bra	u6757
  6804  00066A  F000               	nop	
  6805  00066C  0100               	movlb	0	; () banked
  6806  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6807  000670  D7EF               	goto	l6961
  6808  000672                     l6969:
  6809                           
  6810                           ; BSR set to: 0
  6811  000672  0100               	movlb	0	; () banked
  6812  000674  51F6               	movf	_logstate& (0+255),w,b
  6813  000676  0100               	movlb	0	; () banked
  6814  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6815  00067A  B4D8               	btfsc	status,2,c
  6816  00067C  0012               	return	
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6820                           
  6821                           ; BSR set to: 0
  6822                           
  6823                           ; BSR set to: 0
  6824  00067E  0E01               	movlw	1
  6825  000680  EC12  F020         	call	_lcdInst
  6826  000684  0E68               	movlw	104
  6827  000686  0100               	movlb	0	; () banked
  6828  000688  6FC4               	movwf	??_UI& (0+255),b
  6829  00068A  0EE4               	movlw	228
  6830  00068C                     u6767:
  6831  00068C  2EE8               	decfsz	wreg,f,c
  6832  00068E  D7FE               	bra	u6767
  6833  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6834  000692  D7FC               	bra	u6767
  6835  000694  F000               	nop	
  6836                           
  6837                           ;UI.c: 180: lcdInst(0b10000000);;
  6838  000696  0E80               	movlw	128
  6839  000698  EC12  F020         	call	_lcdInst
  6840                           
  6841                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6842  00069C  0E7B               	movlw	low STR_24
  6843  00069E  0100               	movlb	0	; () banked
  6844  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6845  0006A2  0EFD               	movlw	high STR_24
  6846  0006A4  0100               	movlb	0	; () banked
  6847  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6848  0006A8  EC97  F008         	call	_printf	;wreg free
  6849                           
  6850                           ;UI.c: 182: lcdInst(0b11000000);;
  6851  0006AC  0EC0               	movlw	192
  6852  0006AE  EC12  F020         	call	_lcdInst
  6853                           
  6854                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6855  0006B2  0ECC               	movlw	low STR_25
  6856  0006B4  0100               	movlb	0	; () banked
  6857  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6858  0006B8  0EFB               	movlw	high STR_25
  6859  0006BA  0100               	movlb	0	; () banked
  6860  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6861  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6862  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6863  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6864  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6865  0006CE  EC97  F008         	call	_printf	;wreg free
  6866                           
  6867                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6868  0006D2  0E00               	movlw	0
  6869  0006D4  0100               	movlb	0	; () banked
  6870  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  6871  0006D8                     l6987:
  6872                           
  6873                           ; BSR set to: 0
  6874  0006D8  0E63               	movlw	99
  6875  0006DA  0100               	movlb	0	; () banked
  6876  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  6877  0006DE  D001               	goto	l6991
  6878  0006E0  D00C               	goto	l6995
  6879  0006E2                     l6991:
  6880                           
  6881                           ; BSR set to: 0
  6882  0006E2  0E68               	movlw	104
  6883  0006E4  0100               	movlb	0	; () banked
  6884  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6885  0006E8  0EE4               	movlw	228
  6886  0006EA                     u6777:
  6887  0006EA  2EE8               	decfsz	wreg,f,c
  6888  0006EC  D7FE               	bra	u6777
  6889  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6890  0006F0  D7FC               	bra	u6777
  6891  0006F2  F000               	nop	
  6892  0006F4  0100               	movlb	0	; () banked
  6893  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  6894  0006F8  D7EF               	goto	l6987
  6895  0006FA                     l6995:
  6896                           
  6897                           ; BSR set to: 0
  6898  0006FA  0100               	movlb	0	; () banked
  6899  0006FC  51F6               	movf	_logstate& (0+255),w,b
  6900  0006FE  0100               	movlb	0	; () banked
  6901  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6902  000702  B4D8               	btfsc	status,2,c
  6903  000704  0012               	return	
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6907                           
  6908                           ; BSR set to: 0
  6909                           
  6910                           ; BSR set to: 0
  6911  000706  0E00               	movlw	0
  6912  000708  0100               	movlb	0	; () banked
  6913  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  6914  00070C                     l7001:
  6915                           
  6916                           ; BSR set to: 0
  6917  00070C  0E63               	movlw	99
  6918  00070E  0100               	movlb	0	; () banked
  6919  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  6920  000712  D001               	goto	l7005
  6921  000714  D00C               	goto	l7009
  6922  000716                     l7005:
  6923                           
  6924                           ; BSR set to: 0
  6925  000716  0E68               	movlw	104
  6926  000718  0100               	movlb	0	; () banked
  6927  00071A  6FC4               	movwf	??_UI& (0+255),b
  6928  00071C  0EE4               	movlw	228
  6929  00071E                     u6787:
  6930  00071E  2EE8               	decfsz	wreg,f,c
  6931  000720  D7FE               	bra	u6787
  6932  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  6933  000724  D7FC               	bra	u6787
  6934  000726  F000               	nop	
  6935  000728  0100               	movlb	0	; () banked
  6936  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  6937  00072C  D7EF               	goto	l7001
  6938  00072E                     l7009:
  6939                           
  6940                           ; BSR set to: 0
  6941  00072E  0100               	movlb	0	; () banked
  6942  000730  51F6               	movf	_logstate& (0+255),w,b
  6943  000732  0100               	movlb	0	; () banked
  6944  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6945  000736  B4D8               	btfsc	status,2,c
  6946  000738  0012               	return	
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6950                           
  6951                           ; BSR set to: 0
  6952                           
  6953                           ; BSR set to: 0
  6954  00073A  0E01               	movlw	1
  6955  00073C  EC12  F020         	call	_lcdInst
  6956  000740  0E68               	movlw	104
  6957  000742  0100               	movlb	0	; () banked
  6958  000744  6FC4               	movwf	??_UI& (0+255),b
  6959  000746  0EE4               	movlw	228
  6960  000748                     u6797:
  6961  000748  2EE8               	decfsz	wreg,f,c
  6962  00074A  D7FE               	bra	u6797
  6963  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  6964  00074E  D7FC               	bra	u6797
  6965  000750  F000               	nop	
  6966                           
  6967                           ;UI.c: 189: lcdInst(0b10000000);;
  6968  000752  0E80               	movlw	128
  6969  000754  EC12  F020         	call	_lcdInst
  6970                           
  6971                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  6972  000758  0E8C               	movlw	low STR_26
  6973  00075A  0100               	movlb	0	; () banked
  6974  00075C  6F8E               	movwf	printf@f& (0+255),b
  6975  00075E  0EFD               	movlw	high STR_26
  6976  000760  0100               	movlb	0	; () banked
  6977  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  6978  000764  EC97  F008         	call	_printf	;wreg free
  6979                           
  6980                           ;UI.c: 191: lcdInst(0b11000000);;
  6981  000768  0EC0               	movlw	192
  6982  00076A  EC12  F020         	call	_lcdInst
  6983                           
  6984                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  6985  00076E  0EB9               	movlw	low STR_27
  6986  000770  0100               	movlb	0	; () banked
  6987  000772  6F8E               	movwf	printf@f& (0+255),b
  6988  000774  0EFB               	movlw	high STR_27
  6989  000776  0100               	movlb	0	; () banked
  6990  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  6991  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  6992  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  6993  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  6994  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  6995  00078A  EC97  F008         	call	_printf	;wreg free
  6996                           
  6997                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6998  00078E  0E00               	movlw	0
  6999  000790  0100               	movlb	0	; () banked
  7000  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7001  000794                     l7027:
  7002                           
  7003                           ; BSR set to: 0
  7004  000794  0E63               	movlw	99
  7005  000796  0100               	movlb	0	; () banked
  7006  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7007  00079A  D001               	goto	l7031
  7008  00079C  D00C               	goto	l7035
  7009  00079E                     l7031:
  7010                           
  7011                           ; BSR set to: 0
  7012  00079E  0E68               	movlw	104
  7013  0007A0  0100               	movlb	0	; () banked
  7014  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7015  0007A4  0EE4               	movlw	228
  7016  0007A6                     u6807:
  7017  0007A6  2EE8               	decfsz	wreg,f,c
  7018  0007A8  D7FE               	bra	u6807
  7019  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7020  0007AC  D7FC               	bra	u6807
  7021  0007AE  F000               	nop	
  7022  0007B0  0100               	movlb	0	; () banked
  7023  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7024  0007B4  D7EF               	goto	l7027
  7025  0007B6                     l7035:
  7026                           
  7027                           ; BSR set to: 0
  7028  0007B6  0100               	movlb	0	; () banked
  7029  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7030  0007BA  0100               	movlb	0	; () banked
  7031  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7032  0007BE  B4D8               	btfsc	status,2,c
  7033  0007C0  0012               	return	
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7037                           
  7038                           ; BSR set to: 0
  7039                           
  7040                           ; BSR set to: 0
  7041  0007C2  0E00               	movlw	0
  7042  0007C4  0100               	movlb	0	; () banked
  7043  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7044  0007C8                     l7041:
  7045                           
  7046                           ; BSR set to: 0
  7047  0007C8  0E63               	movlw	99
  7048  0007CA  0100               	movlb	0	; () banked
  7049  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7050  0007CE  D001               	goto	l7045
  7051  0007D0  D00C               	goto	l7049
  7052  0007D2                     l7045:
  7053                           
  7054                           ; BSR set to: 0
  7055  0007D2  0E68               	movlw	104
  7056  0007D4  0100               	movlb	0	; () banked
  7057  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7058  0007D8  0EE4               	movlw	228
  7059  0007DA                     u6817:
  7060  0007DA  2EE8               	decfsz	wreg,f,c
  7061  0007DC  D7FE               	bra	u6817
  7062  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7063  0007E0  D7FC               	bra	u6817
  7064  0007E2  F000               	nop	
  7065  0007E4  0100               	movlb	0	; () banked
  7066  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7067  0007E8  D7EF               	goto	l7041
  7068  0007EA                     l7049:
  7069                           
  7070                           ; BSR set to: 0
  7071  0007EA  0100               	movlb	0	; () banked
  7072  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7073  0007EE  0100               	movlb	0	; () banked
  7074  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7075  0007F2  B4D8               	btfsc	status,2,c
  7076  0007F4  0012               	return	
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7080                           
  7081                           ; BSR set to: 0
  7082                           
  7083                           ; BSR set to: 0
  7084  0007F6  0E01               	movlw	1
  7085  0007F8  EC12  F020         	call	_lcdInst
  7086  0007FC  0E68               	movlw	104
  7087  0007FE  0100               	movlb	0	; () banked
  7088  000800  6FC4               	movwf	??_UI& (0+255),b
  7089  000802  0EE4               	movlw	228
  7090  000804                     u6827:
  7091  000804  2EE8               	decfsz	wreg,f,c
  7092  000806  D7FE               	bra	u6827
  7093  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7094  00080A  D7FC               	bra	u6827
  7095  00080C  F000               	nop	
  7096                           
  7097                           ;UI.c: 198: lcdInst(0b10000000);;
  7098  00080E  0E80               	movlw	128
  7099  000810  EC12  F020         	call	_lcdInst
  7100                           
  7101                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7102  000814  0E9D               	movlw	low STR_28
  7103  000816  0100               	movlb	0	; () banked
  7104  000818  6F8E               	movwf	printf@f& (0+255),b
  7105  00081A  0EFD               	movlw	high STR_28
  7106  00081C  0100               	movlb	0	; () banked
  7107  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7108  000820  EC97  F008         	call	_printf	;wreg free
  7109                           
  7110                           ;UI.c: 200: lcdInst(0b11000000);;
  7111  000824  0EC0               	movlw	192
  7112  000826  EC12  F020         	call	_lcdInst
  7113                           
  7114                           ;UI.c: 201: printf("%d", log_count_total);
  7115  00082A  0EC9               	movlw	low (STR_27+16)
  7116  00082C  0100               	movlb	0	; () banked
  7117  00082E  6F8E               	movwf	printf@f& (0+255),b
  7118  000830  0EFB               	movlw	high (STR_27+16)
  7119  000832  0100               	movlb	0	; () banked
  7120  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7121  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7122  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7123  00083E  EC97  F008         	call	_printf	;wreg free
  7124                           
  7125                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7126  000842  0E00               	movlw	0
  7127  000844  0100               	movlb	0	; () banked
  7128  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7129  000848                     l7067:
  7130                           
  7131                           ; BSR set to: 0
  7132  000848  0E63               	movlw	99
  7133  00084A  0100               	movlb	0	; () banked
  7134  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7135  00084E  D001               	goto	l7071
  7136  000850  D00C               	goto	l7075
  7137  000852                     l7071:
  7138                           
  7139                           ; BSR set to: 0
  7140  000852  0E68               	movlw	104
  7141  000854  0100               	movlb	0	; () banked
  7142  000856  6FC4               	movwf	??_UI& (0+255),b
  7143  000858  0EE4               	movlw	228
  7144  00085A                     u6837:
  7145  00085A  2EE8               	decfsz	wreg,f,c
  7146  00085C  D7FE               	bra	u6837
  7147  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7148  000860  D7FC               	bra	u6837
  7149  000862  F000               	nop	
  7150  000864  0100               	movlb	0	; () banked
  7151  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7152  000868  D7EF               	goto	l7067
  7153  00086A                     l7075:
  7154                           
  7155                           ; BSR set to: 0
  7156  00086A  0100               	movlb	0	; () banked
  7157  00086C  51F6               	movf	_logstate& (0+255),w,b
  7158  00086E  0100               	movlb	0	; () banked
  7159  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7160  000872  B4D8               	btfsc	status,2,c
  7161  000874  0012               	return	
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7165                           
  7166                           ; BSR set to: 0
  7167                           
  7168                           ; BSR set to: 0
  7169  000876  0E00               	movlw	0
  7170  000878  0100               	movlb	0	; () banked
  7171  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7172  00087C                     l7081:
  7173                           
  7174                           ; BSR set to: 0
  7175  00087C  0E63               	movlw	99
  7176  00087E  0100               	movlb	0	; () banked
  7177  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7178  000882  D001               	goto	l7085
  7179  000884  D00C               	goto	l7089
  7180  000886                     l7085:
  7181                           
  7182                           ; BSR set to: 0
  7183  000886  0E68               	movlw	104
  7184  000888  0100               	movlb	0	; () banked
  7185  00088A  6FC4               	movwf	??_UI& (0+255),b
  7186  00088C  0EE4               	movlw	228
  7187  00088E                     u6847:
  7188  00088E  2EE8               	decfsz	wreg,f,c
  7189  000890  D7FE               	bra	u6847
  7190  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7191  000894  D7FC               	bra	u6847
  7192  000896  F000               	nop	
  7193  000898  0100               	movlb	0	; () banked
  7194  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7195  00089C  D7EF               	goto	l7081
  7196  00089E                     l7089:
  7197                           
  7198                           ; BSR set to: 0
  7199  00089E  0100               	movlb	0	; () banked
  7200  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7201  0008A2  0100               	movlb	0	; () banked
  7202  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7203  0008A6  B4D8               	btfsc	status,2,c
  7204  0008A8  0012               	return	
  7205  0008AA                     l7093:
  7206  0008AA  0100               	movlb	0	; () banked
  7207  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7208  0008AE  0100               	movlb	0	; () banked
  7209  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7210  0008B2  B4D8               	btfsc	status,2,c
  7211  0008B4  0012               	return	
  7212  0008B6  D44A               	goto	l6789
  7213  0008B8                     __end_of_UI:
  7214                           	opt stack 0
  7215                           tblptru	equ	0xFF8
  7216                           tblptrh	equ	0xFF7
  7217                           tblptrl	equ	0xFF6
  7218                           tablat	equ	0xFF5
  7219                           prodh	equ	0xFF4
  7220                           prodl	equ	0xFF3
  7221                           intcon	equ	0xFF2
  7222                           intcon2	equ	0xFF1
  7223                           intcon3	equ	0xFF0
  7224                           postinc0	equ	0xFEE
  7225                           wreg	equ	0xFE8
  7226                           postdec1	equ	0xFE5
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function _printRTC *****************
  7236 ;; Defined at:
  7237 ;;		line 63 in file "RTC.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;  i               2   66[BANK0 ] int 
  7242 ;;  INT_time       14   46[BANK0 ] int [7]
  7243 ;;  month           4   62[BANK0 ] unsigned char [4]
  7244 ;;  RTC_month       2   60[BANK0 ] int 
  7245 ;; Return value:  Size  Location     Type
  7246 ;;                  1    wreg      void 
  7247 ;; Registers used:
  7248 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;Total ram usage:       25 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:   10
  7261 ;; This function calls:
  7262 ;;		_getRTC
  7263 ;;		_lcdInst
  7264 ;;		_printf
  7265 ;;		_strcpy
  7266 ;; This function is called by:
  7267 ;;		_UI
  7268 ;;		_change_state_to_menu_start
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text22
  7273  0018D4                     __ptext22:
  7274                           	opt stack 0
  7275  0018D4                     _printRTC:
  7276                           	opt stack 18
  7277                           
  7278                           ;RTC.c: 64: getRTC();
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;incstack = 0
  7282  0018D4  ECBD  F019         	call	_getRTC	;wreg free
  7283                           
  7284                           ;RTC.c: 65: char month[] = "MMM";
  7285  0018D8  C131  F0BE         	movff	printRTC@F3211,printRTC@month
  7286  0018DC  C132  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  7287  0018E0  C133  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  7288  0018E4  C134  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  7289                           
  7290                           ;RTC.c: 66: int INT_time[7];
  7291                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7292  0018E8  0E00               	movlw	0
  7293  0018EA  0100               	movlb	0	; () banked
  7294  0018EC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7295  0018EE  0E00               	movlw	0
  7296  0018F0  6FC2               	movwf	printRTC@i& (0+255),b
  7297                           
  7298                           ; BSR set to: 0
  7299  0018F2  0100               	movlb	0	; () banked
  7300  0018F4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7301  0018F6  D008               	goto	l5463
  7302  0018F8  0100               	movlb	0	; () banked
  7303  0018FA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7304  0018FC  E146               	bnz	l591
  7305  0018FE  0E07               	movlw	7
  7306  001900  0100               	movlb	0	; () banked
  7307  001902  5DC2               	subwf	printRTC@i& (0+255),w,b
  7308  001904  B0D8               	btfsc	status,0,c
  7309  001906  D041               	goto	l591
  7310  001908                     l5463:
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7314  001908  0E24               	movlw	low _time
  7315  00190A  0100               	movlb	0	; () banked
  7316  00190C  25C2               	addwf	printRTC@i& (0+255),w,b
  7317  00190E  6ED9               	movwf	fsr2l,c
  7318  001910  0E01               	movlw	high _time
  7319  001912  0100               	movlb	0	; () banked
  7320  001914  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7321  001916  6EDA               	movwf	fsr2h,c
  7322  001918  50DF               	movf	indf2,w,c
  7323  00191A  0100               	movlb	0	; () banked
  7324  00191C  6FAB               	movwf	??_printRTC& (0+255),b
  7325  00191E  0100               	movlb	0	; () banked
  7326  001920  3BAB               	swapf	??_printRTC& (0+255),f,b
  7327  001922  0E0F               	movlw	15
  7328  001924  17AB               	andwf	??_printRTC& (0+255),f,b
  7329  001926  0E0F               	movlw	15
  7330  001928  0100               	movlb	0	; () banked
  7331  00192A  17AB               	andwf	??_printRTC& (0+255),f,b
  7332  00192C  0100               	movlb	0	; () banked
  7333  00192E  51AB               	movf	??_printRTC& (0+255),w,b
  7334  001930  0D0A               	mullw	10
  7335  001932  0E24               	movlw	low _time
  7336  001934  0100               	movlb	0	; () banked
  7337  001936  25C2               	addwf	printRTC@i& (0+255),w,b
  7338  001938  6ED9               	movwf	fsr2l,c
  7339  00193A  0E01               	movlw	high _time
  7340  00193C  0100               	movlb	0	; () banked
  7341  00193E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7342  001940  6EDA               	movwf	fsr2h,c
  7343  001942  50DF               	movf	indf2,w,c
  7344  001944  0B0F               	andlw	15
  7345  001946  0100               	movlb	0	; () banked
  7346  001948  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7347  00194A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7348  00194C  50F3               	movf	prodl,w,c
  7349  00194E  0100               	movlb	0	; () banked
  7350  001950  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7351  001952  50F4               	movf	prodh,w,c
  7352  001954  0100               	movlb	0	; () banked
  7353  001956  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7354  001958  90D8               	bcf	status,0,c
  7355  00195A  0100               	movlb	0	; () banked
  7356  00195C  35C2               	rlcf	printRTC@i& (0+255),w,b
  7357  00195E  6ED9               	movwf	fsr2l,c
  7358  001960  0100               	movlb	0	; () banked
  7359  001962  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7360  001964  6EDA               	movwf	fsr2h,c
  7361  001966  0EAE               	movlw	low printRTC@INT_time
  7362  001968  26D9               	addwf	fsr2l,f,c
  7363  00196A  0E00               	movlw	high printRTC@INT_time
  7364  00196C  22DA               	addwfc	fsr2h,f,c
  7365  00196E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7366  001972  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7367                           
  7368                           ; BSR set to: 0
  7369  001976  0100               	movlb	0	; () banked
  7370  001978  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7371  00197A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7372                           
  7373                           ; BSR set to: 0
  7374  00197C  0100               	movlb	0	; () banked
  7375  00197E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7376  001980  D7C3               	goto	l5463
  7377  001982  0100               	movlb	0	; () banked
  7378  001984  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7379  001986  E101               	bnz	u4210
  7380  001988  D7BA               	goto	L5
  7381  00198A                     u4210:
  7382  00198A                     l591:
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;RTC.c: 69: }
  7386                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7387  00198A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7388  00198E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7389                           
  7390                           ;RTC.c: 71: switch(RTC_month){
  7391  001992  D0B4               	goto	l5495
  7392  001994                     l5469:
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;RTC.c: 73: strcpy(month, "JAN");
  7396  001994  0EBE               	movlw	low printRTC@month
  7397  001996  0100               	movlb	0	; () banked
  7398  001998  6F80               	movwf	strcpy@to& (0+255),b
  7399  00199A  0E00               	movlw	high printRTC@month
  7400  00199C  0100               	movlb	0	; () banked
  7401  00199E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7402  0019A0  0EDA               	movlw	low STR_8
  7403  0019A2  0100               	movlb	0	; () banked
  7404  0019A4  6F82               	movwf	strcpy@from& (0+255),b
  7405  0019A6  0EFF               	movlw	high STR_8
  7406  0019A8  0100               	movlb	0	; () banked
  7407  0019AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7408  0019AC  ECB0  F01D         	call	_strcpy	;wreg free
  7409                           
  7410                           ;RTC.c: 74: break;
  7411  0019B0  D0D4               	goto	l5497
  7412  0019B2                     l5471:
  7413                           
  7414                           ;RTC.c: 76: strcpy(month, "FEB");
  7415  0019B2  0EBE               	movlw	low printRTC@month
  7416  0019B4  0100               	movlb	0	; () banked
  7417  0019B6  6F80               	movwf	strcpy@to& (0+255),b
  7418  0019B8  0E00               	movlw	high printRTC@month
  7419  0019BA  0100               	movlb	0	; () banked
  7420  0019BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7421  0019BE  0ECA               	movlw	low STR_9
  7422  0019C0  0100               	movlb	0	; () banked
  7423  0019C2  6F82               	movwf	strcpy@from& (0+255),b
  7424  0019C4  0EFF               	movlw	high STR_9
  7425  0019C6  0100               	movlb	0	; () banked
  7426  0019C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7427  0019CA  ECB0  F01D         	call	_strcpy	;wreg free
  7428                           
  7429                           ;RTC.c: 77: break;
  7430  0019CE  D0C5               	goto	l5497
  7431  0019D0                     l5473:
  7432                           
  7433                           ;RTC.c: 79: strcpy(month, "MAR");
  7434  0019D0  0EBE               	movlw	low printRTC@month
  7435  0019D2  0100               	movlb	0	; () banked
  7436  0019D4  6F80               	movwf	strcpy@to& (0+255),b
  7437  0019D6  0E00               	movlw	high printRTC@month
  7438  0019D8  0100               	movlb	0	; () banked
  7439  0019DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7440  0019DC  0EE6               	movlw	low STR_10
  7441  0019DE  0100               	movlb	0	; () banked
  7442  0019E0  6F82               	movwf	strcpy@from& (0+255),b
  7443  0019E2  0EFF               	movlw	high STR_10
  7444  0019E4  0100               	movlb	0	; () banked
  7445  0019E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7446  0019E8  ECB0  F01D         	call	_strcpy	;wreg free
  7447                           
  7448                           ;RTC.c: 80: break;
  7449  0019EC  D0B6               	goto	l5497
  7450  0019EE                     l5475:
  7451                           
  7452                           ;RTC.c: 82: strcpy(month, "APR");
  7453  0019EE  0EBE               	movlw	low printRTC@month
  7454  0019F0  0100               	movlb	0	; () banked
  7455  0019F2  6F80               	movwf	strcpy@to& (0+255),b
  7456  0019F4  0E00               	movlw	high printRTC@month
  7457  0019F6  0100               	movlb	0	; () banked
  7458  0019F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7459  0019FA  0EEA               	movlw	low STR_11
  7460  0019FC  0100               	movlb	0	; () banked
  7461  0019FE  6F82               	movwf	strcpy@from& (0+255),b
  7462  001A00  0EFF               	movlw	high STR_11
  7463  001A02  0100               	movlb	0	; () banked
  7464  001A04  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7465  001A06  ECB0  F01D         	call	_strcpy	;wreg free
  7466                           
  7467                           ;RTC.c: 83: break;
  7468  001A0A  D0A7               	goto	l5497
  7469  001A0C                     l5477:
  7470                           
  7471                           ;RTC.c: 85: strcpy(month, "MAY");
  7472  001A0C  0EBE               	movlw	low printRTC@month
  7473  001A0E  0100               	movlb	0	; () banked
  7474  001A10  6F80               	movwf	strcpy@to& (0+255),b
  7475  001A12  0E00               	movlw	high printRTC@month
  7476  001A14  0100               	movlb	0	; () banked
  7477  001A16  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7478  001A18  0EFA               	movlw	low STR_12
  7479  001A1A  0100               	movlb	0	; () banked
  7480  001A1C  6F82               	movwf	strcpy@from& (0+255),b
  7481  001A1E  0EFF               	movlw	high STR_12
  7482  001A20  0100               	movlb	0	; () banked
  7483  001A22  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7484  001A24  ECB0  F01D         	call	_strcpy	;wreg free
  7485                           
  7486                           ;RTC.c: 86: break;
  7487  001A28  D098               	goto	l5497
  7488  001A2A                     l5479:
  7489                           
  7490                           ;RTC.c: 88: strcpy(month, "JUN");
  7491  001A2A  0EBE               	movlw	low printRTC@month
  7492  001A2C  0100               	movlb	0	; () banked
  7493  001A2E  6F80               	movwf	strcpy@to& (0+255),b
  7494  001A30  0E00               	movlw	high printRTC@month
  7495  001A32  0100               	movlb	0	; () banked
  7496  001A34  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7497  001A36  0EDE               	movlw	low STR_13
  7498  001A38  0100               	movlb	0	; () banked
  7499  001A3A  6F82               	movwf	strcpy@from& (0+255),b
  7500  001A3C  0EFF               	movlw	high STR_13
  7501  001A3E  0100               	movlb	0	; () banked
  7502  001A40  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7503  001A42  ECB0  F01D         	call	_strcpy	;wreg free
  7504                           
  7505                           ;RTC.c: 89: break;
  7506  001A46  D089               	goto	l5497
  7507  001A48                     l5481:
  7508                           
  7509                           ;RTC.c: 91: strcpy(month, "JUL");
  7510  001A48  0EBE               	movlw	low printRTC@month
  7511  001A4A  0100               	movlb	0	; () banked
  7512  001A4C  6F80               	movwf	strcpy@to& (0+255),b
  7513  001A4E  0E00               	movlw	high printRTC@month
  7514  001A50  0100               	movlb	0	; () banked
  7515  001A52  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7516  001A54  0ED6               	movlw	low STR_14
  7517  001A56  0100               	movlb	0	; () banked
  7518  001A58  6F82               	movwf	strcpy@from& (0+255),b
  7519  001A5A  0EFF               	movlw	high STR_14
  7520  001A5C  0100               	movlb	0	; () banked
  7521  001A5E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7522  001A60  ECB0  F01D         	call	_strcpy	;wreg free
  7523                           
  7524                           ;RTC.c: 92: break;
  7525  001A64  D07A               	goto	l5497
  7526  001A66                     l5483:
  7527                           
  7528                           ;RTC.c: 94: strcpy(month, "AUG");
  7529  001A66  0EBE               	movlw	low printRTC@month
  7530  001A68  0100               	movlb	0	; () banked
  7531  001A6A  6F80               	movwf	strcpy@to& (0+255),b
  7532  001A6C  0E00               	movlw	high printRTC@month
  7533  001A6E  0100               	movlb	0	; () banked
  7534  001A70  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7535  001A72  0ED2               	movlw	low STR_15
  7536  001A74  0100               	movlb	0	; () banked
  7537  001A76  6F82               	movwf	strcpy@from& (0+255),b
  7538  001A78  0EFF               	movlw	high STR_15
  7539  001A7A  0100               	movlb	0	; () banked
  7540  001A7C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7541  001A7E  ECB0  F01D         	call	_strcpy	;wreg free
  7542                           
  7543                           ;RTC.c: 95: break;
  7544  001A82  D06B               	goto	l5497
  7545  001A84                     l5485:
  7546                           
  7547                           ;RTC.c: 97: strcpy(month, "SEP");
  7548  001A84  0EBE               	movlw	low printRTC@month
  7549  001A86  0100               	movlb	0	; () banked
  7550  001A88  6F80               	movwf	strcpy@to& (0+255),b
  7551  001A8A  0E00               	movlw	high printRTC@month
  7552  001A8C  0100               	movlb	0	; () banked
  7553  001A8E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7554  001A90  0EE2               	movlw	low STR_16
  7555  001A92  0100               	movlb	0	; () banked
  7556  001A94  6F82               	movwf	strcpy@from& (0+255),b
  7557  001A96  0EFF               	movlw	high STR_16
  7558  001A98  0100               	movlb	0	; () banked
  7559  001A9A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7560  001A9C  ECB0  F01D         	call	_strcpy	;wreg free
  7561                           
  7562                           ;RTC.c: 98: break;
  7563  001AA0  D05C               	goto	l5497
  7564  001AA2                     l5487:
  7565                           
  7566                           ;RTC.c: 100: strcpy(month, "OCT");
  7567  001AA2  0EBE               	movlw	low printRTC@month
  7568  001AA4  0100               	movlb	0	; () banked
  7569  001AA6  6F80               	movwf	strcpy@to& (0+255),b
  7570  001AA8  0E00               	movlw	high printRTC@month
  7571  001AAA  0100               	movlb	0	; () banked
  7572  001AAC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7573  001AAE  0EF2               	movlw	low STR_17
  7574  001AB0  0100               	movlb	0	; () banked
  7575  001AB2  6F82               	movwf	strcpy@from& (0+255),b
  7576  001AB4  0EFF               	movlw	high STR_17
  7577  001AB6  0100               	movlb	0	; () banked
  7578  001AB8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7579  001ABA  ECB0  F01D         	call	_strcpy	;wreg free
  7580                           
  7581                           ;RTC.c: 101: break;
  7582  001ABE  D04D               	goto	l5497
  7583  001AC0                     l5489:
  7584                           
  7585                           ;RTC.c: 103: strcpy(month, "NOV");
  7586  001AC0  0EBE               	movlw	low printRTC@month
  7587  001AC2  0100               	movlb	0	; () banked
  7588  001AC4  6F80               	movwf	strcpy@to& (0+255),b
  7589  001AC6  0E00               	movlw	high printRTC@month
  7590  001AC8  0100               	movlb	0	; () banked
  7591  001ACA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7592  001ACC  0EF6               	movlw	low STR_18
  7593  001ACE  0100               	movlb	0	; () banked
  7594  001AD0  6F82               	movwf	strcpy@from& (0+255),b
  7595  001AD2  0EFF               	movlw	high STR_18
  7596  001AD4  0100               	movlb	0	; () banked
  7597  001AD6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7598  001AD8  ECB0  F01D         	call	_strcpy	;wreg free
  7599                           
  7600                           ;RTC.c: 104: break;
  7601  001ADC  D03E               	goto	l5497
  7602  001ADE                     l5491:
  7603                           
  7604                           ;RTC.c: 106: strcpy(month, "DEC");
  7605  001ADE  0EBE               	movlw	low printRTC@month
  7606  001AE0  0100               	movlb	0	; () banked
  7607  001AE2  6F80               	movwf	strcpy@to& (0+255),b
  7608  001AE4  0E00               	movlw	high printRTC@month
  7609  001AE6  0100               	movlb	0	; () banked
  7610  001AE8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7611  001AEA  0ECE               	movlw	low STR_19
  7612  001AEC  0100               	movlb	0	; () banked
  7613  001AEE  6F82               	movwf	strcpy@from& (0+255),b
  7614  001AF0  0EFF               	movlw	high STR_19
  7615  001AF2  0100               	movlb	0	; () banked
  7616  001AF4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7617  001AF6  ECB0  F01D         	call	_strcpy	;wreg free
  7618                           
  7619                           ;RTC.c: 108: }
  7620                           
  7621                           ;RTC.c: 107: break;
  7622  001AFA  D02F               	goto	l5497
  7623  001AFC                     l5495:
  7624  001AFC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7625  001B00  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7626                           
  7627                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7628                           ; Switch size 1, requested type "space"
  7629                           ; Number of cases is 1, Range of values is 0 to 0
  7630                           ; switch strategies available:
  7631                           ; Name         Instructions Cycles
  7632                           ; simple_byte            4     3 (average)
  7633                           ;	Chosen strategy is simple_byte
  7634  001B04  0100               	movlb	0	; () banked
  7635  001B06  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7636  001B08  0A00               	xorlw	0	; case 0
  7637  001B0A  A4D8               	btfss	status,2,c
  7638  001B0C  D026               	goto	l5497
  7639                           
  7640                           ; BSR set to: 0
  7641                           ; Switch size 1, requested type "space"
  7642                           ; Number of cases is 12, Range of values is 1 to 12
  7643                           ; switch strategies available:
  7644                           ; Name         Instructions Cycles
  7645                           ; simple_byte           37    19 (average)
  7646                           ;	Chosen strategy is simple_byte
  7647  001B0E  0100               	movlb	0	; () banked
  7648  001B10  51AB               	movf	??_printRTC& (0+255),w,b
  7649  001B12  0A01               	xorlw	1	; case 1
  7650  001B14  B4D8               	btfsc	status,2,c
  7651  001B16  D73E               	goto	l5469
  7652  001B18  0A03               	xorlw	3	; case 2
  7653  001B1A  B4D8               	btfsc	status,2,c
  7654  001B1C  D74A               	goto	l5471
  7655  001B1E  0A01               	xorlw	1	; case 3
  7656  001B20  B4D8               	btfsc	status,2,c
  7657  001B22  D756               	goto	l5473
  7658  001B24  0A07               	xorlw	7	; case 4
  7659  001B26  B4D8               	btfsc	status,2,c
  7660  001B28  D762               	goto	l5475
  7661  001B2A  0A01               	xorlw	1	; case 5
  7662  001B2C  B4D8               	btfsc	status,2,c
  7663  001B2E  D76E               	goto	l5477
  7664  001B30  0A03               	xorlw	3	; case 6
  7665  001B32  B4D8               	btfsc	status,2,c
  7666  001B34  D77A               	goto	l5479
  7667  001B36  0A01               	xorlw	1	; case 7
  7668  001B38  B4D8               	btfsc	status,2,c
  7669  001B3A  D786               	goto	l5481
  7670  001B3C  0A0F               	xorlw	15	; case 8
  7671  001B3E  B4D8               	btfsc	status,2,c
  7672  001B40  D792               	goto	l5483
  7673  001B42  0A01               	xorlw	1	; case 9
  7674  001B44  B4D8               	btfsc	status,2,c
  7675  001B46  D79E               	goto	l5485
  7676  001B48  0A03               	xorlw	3	; case 10
  7677  001B4A  B4D8               	btfsc	status,2,c
  7678  001B4C  D7AA               	goto	l5487
  7679  001B4E  0A01               	xorlw	1	; case 11
  7680  001B50  B4D8               	btfsc	status,2,c
  7681  001B52  D7B6               	goto	l5489
  7682  001B54  0A07               	xorlw	7	; case 12
  7683  001B56  B4D8               	btfsc	status,2,c
  7684  001B58  D7C2               	goto	l5491
  7685  001B5A                     l5497:
  7686                           
  7687                           ;RTC.c: 109: lcdInst(0b10000000);;
  7688  001B5A  0E80               	movlw	128
  7689  001B5C  EC12  F020         	call	_lcdInst
  7690                           
  7691                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7692  001B60  0E8C               	movlw	low STR_21
  7693  001B62  0100               	movlb	0	; () banked
  7694  001B64  6F8E               	movwf	printf@f& (0+255),b
  7695  001B66  0EFB               	movlw	high STR_21
  7696  001B68  0100               	movlb	0	; () banked
  7697  001B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7698  001B6C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7699  001B70  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7700  001B74  0EBE               	movlw	low printRTC@month
  7701  001B76  0100               	movlb	0	; () banked
  7702  001B78  6F92               	movwf	(?_printf+4)& (0+255),b
  7703  001B7A  0E00               	movlw	high printRTC@month
  7704  001B7C  0100               	movlb	0	; () banked
  7705  001B7E  6F93               	movwf	(?_printf+5)& (0+255),b
  7706  001B80  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7707  001B84  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7708  001B88  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7709  001B8C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7710  001B90  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7711  001B94  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7712  001B98  EC97  F008         	call	_printf	;wreg free
  7713  001B9C  0012               	return		;funcret
  7714  001B9E                     __end_of_printRTC:
  7715                           	opt stack 0
  7716                           tblptru	equ	0xFF8
  7717                           tblptrh	equ	0xFF7
  7718                           tblptrl	equ	0xFF6
  7719                           tablat	equ	0xFF5
  7720                           prodh	equ	0xFF4
  7721                           prodl	equ	0xFF3
  7722                           intcon	equ	0xFF2
  7723                           intcon2	equ	0xFF1
  7724                           intcon3	equ	0xFF0
  7725                           postinc0	equ	0xFEE
  7726                           wreg	equ	0xFE8
  7727                           postdec1	equ	0xFE5
  7728                           fsr1l	equ	0xFE1
  7729                           indf2	equ	0xFDF
  7730                           postinc2	equ	0xFDE
  7731                           postdec2	equ	0xFDD
  7732                           fsr2h	equ	0xFDA
  7733                           fsr2l	equ	0xFD9
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function _strcpy *****************
  7737 ;; Defined at:
  7738 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7741 ;;		 -> printRTC@month(4), UI@month(4), 
  7742 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7743 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7744 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7745 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7746 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7747 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7748 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7749 ;;		 -> STR_8(4), 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7752 ;;		 -> printRTC@month(4), UI@month(4), 
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  2    0[BANK0 ] PTR unsigned char 
  7755 ;; Registers used:
  7756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7762 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;Total ram usage:        6 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    7
  7769 ;; This function calls:
  7770 ;;		Nothing
  7771 ;; This function is called by:
  7772 ;;		_UI
  7773 ;;		_printRTC
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           	psect	text23
  7778  003B60                     __ptext23:
  7779                           	opt stack 0
  7780  003B60                     _strcpy:
  7781                           	opt stack 20
  7782                           
  7783                           ;incstack = 0
  7784  003B60  C080  F084         	movff	strcpy@to,strcpy@cp
  7785  003B64  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7786  003B68  D006               	goto	l5201
  7787  003B6A                     l5199:
  7788  003B6A  0100               	movlb	0	; () banked
  7789  003B6C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7790  003B6E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7791  003B70  0100               	movlb	0	; () banked
  7792  003B72  4B82               	infsnz	strcpy@from& (0+255),f,b
  7793  003B74  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7794  003B76                     l5201:
  7795  003B76  C082  FFF6         	movff	strcpy@from,tblptrl
  7796  003B7A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7797  003B7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7798  003B7E  6AF8               	clrf	tblptru,c
  7799  003B80                     	endif
  7800  003B80                     	if	0	;tblptru may be non-zero
  7801  003B80                     	endif
  7802  003B80  C084  FFD9         	movff	strcpy@cp,fsr2l
  7803  003B84  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7804  003B88  0008               	tblrd		*
  7805  003B8A  CFF5 FFDF          	movff	tablat,indf2
  7806  003B8E  50DF               	movf	indf2,w,c
  7807  003B90  B4D8               	btfsc	status,2,c
  7808  003B92  0012               	return	
  7809  003B94  D7EA               	goto	l5199
  7810  003B96                     __end_of_strcpy:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           intcon2	equ	0xFF1
  7820                           intcon3	equ	0xFF0
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           postdec1	equ	0xFE5
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _getRTC *****************
  7833 ;; Defined at:
  7834 ;;		line 44 in file "RTC.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  i               2    3[BANK0 ] int 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      void 
  7841 ;; Registers used:
  7842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        2 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    9
  7855 ;; This function calls:
  7856 ;;		_I2C_Master_Read
  7857 ;;		_I2C_Master_Start
  7858 ;;		_I2C_Master_Stop
  7859 ;;		_I2C_Master_Write
  7860 ;; This function is called by:
  7861 ;;		_printRTC
  7862 ;;		_initSortTimer
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           	psect	text24
  7867  00337A                     __ptext24:
  7868                           	opt stack 0
  7869  00337A                     _getRTC:
  7870                           	opt stack 18
  7871                           
  7872                           ;RTC.c: 48: I2C_Master_Start();
  7873                           
  7874                           ;incstack = 0
  7875  00337A  EC38  F020         	call	_I2C_Master_Start	;wreg free
  7876                           
  7877                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7878  00337E  0E00               	movlw	0
  7879  003380  0100               	movlb	0	; () banked
  7880  003382  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7881  003384  0ED0               	movlw	208
  7882  003386  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7883  003388  EC26  F020         	call	_I2C_Master_Write	;wreg free
  7884                           
  7885                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7886  00338C  0E00               	movlw	0
  7887  00338E  0100               	movlb	0	; () banked
  7888  003390  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7889  003392  0E00               	movlw	0
  7890  003394  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7891  003396  EC26  F020         	call	_I2C_Master_Write	;wreg free
  7892                           
  7893                           ;RTC.c: 51: I2C_Master_Stop();
  7894  00339A  EC34  F020         	call	_I2C_Master_Stop	;wreg free
  7895                           
  7896                           ;RTC.c: 54: I2C_Master_Start();
  7897  00339E  EC38  F020         	call	_I2C_Master_Start	;wreg free
  7898                           
  7899                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7900  0033A2  0E00               	movlw	0
  7901  0033A4  0100               	movlb	0	; () banked
  7902  0033A6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7903  0033A8  0ED1               	movlw	209
  7904  0033AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7905  0033AC  EC26  F020         	call	_I2C_Master_Write	;wreg free
  7906                           
  7907                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7908  0033B0  0E00               	movlw	0
  7909  0033B2  0100               	movlb	0	; () banked
  7910  0033B4  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7911  0033B6  0E00               	movlw	0
  7912  0033B8  6F83               	movwf	getRTC@i& (0+255),b
  7913  0033BA                     l5207:
  7914                           
  7915                           ; BSR set to: 0
  7916  0033BA  0100               	movlb	0	; () banked
  7917  0033BC  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7918  0033BE  D008               	goto	l5211
  7919  0033C0  0100               	movlb	0	; () banked
  7920  0033C2  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7921  0033C4  E115               	bnz	l5217
  7922  0033C6  0E06               	movlw	6
  7923  0033C8  0100               	movlb	0	; () banked
  7924  0033CA  5D83               	subwf	getRTC@i& (0+255),w,b
  7925  0033CC  B0D8               	btfsc	status,0,c
  7926  0033CE  D010               	goto	l5217
  7927  0033D0                     l5211:
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7931  0033D0  0E24               	movlw	low _time
  7932  0033D2  0100               	movlb	0	; () banked
  7933  0033D4  2583               	addwf	getRTC@i& (0+255),w,b
  7934  0033D6  6ED9               	movwf	fsr2l,c
  7935  0033D8  0E01               	movlw	high _time
  7936  0033DA  0100               	movlb	0	; () banked
  7937  0033DC  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7938  0033DE  6EDA               	movwf	fsr2h,c
  7939  0033E0  0E01               	movlw	1
  7940  0033E2  ECD7  F01E         	call	_I2C_Master_Read
  7941  0033E6  6EDF               	movwf	indf2,c
  7942  0033E8  0100               	movlb	0	; () banked
  7943  0033EA  4B83               	infsnz	getRTC@i& (0+255),f,b
  7944  0033EC  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7945  0033EE  D7E5               	goto	l5207
  7946  0033F0                     l5217:
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;RTC.c: 58: }
  7950                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7951  0033F0  0E00               	movlw	0
  7952  0033F2  ECD7  F01E         	call	_I2C_Master_Read
  7953  0033F6  0101               	movlb	1	; () banked
  7954  0033F8  6F2A               	movwf	(_time+6)& (0+255),b
  7955                           
  7956                           ;RTC.c: 60: I2C_Master_Stop();
  7957  0033FA  EC34  F020         	call	_I2C_Master_Stop	;wreg free
  7958  0033FE  0012               	return		;funcret
  7959  003400                     __end_of_getRTC:
  7960                           	opt stack 0
  7961                           tblptru	equ	0xFF8
  7962                           tblptrh	equ	0xFF7
  7963                           tblptrl	equ	0xFF6
  7964                           tablat	equ	0xFF5
  7965                           prodh	equ	0xFF4
  7966                           prodl	equ	0xFF3
  7967                           intcon	equ	0xFF2
  7968                           intcon2	equ	0xFF1
  7969                           intcon3	equ	0xFF0
  7970                           postinc0	equ	0xFEE
  7971                           wreg	equ	0xFE8
  7972                           postdec1	equ	0xFE5
  7973                           fsr1l	equ	0xFE1
  7974                           indf2	equ	0xFDF
  7975                           postinc2	equ	0xFDE
  7976                           postdec2	equ	0xFDD
  7977                           fsr2h	equ	0xFDA
  7978                           fsr2l	equ	0xFD9
  7979                           status	equ	0xFD8
  7980                           
  7981 ;; *************** function _I2C_Master_Write *****************
  7982 ;; Defined at:
  7983 ;;		line 49 in file "I2C.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;  d               2    1[BANK0 ] unsigned int 
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;		None
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  1    wreg      void 
  7990 ;; Registers used:
  7991 ;;		wreg, status,2, status,0, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7997 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;Total ram usage:        2 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    8
  8004 ;; This function calls:
  8005 ;;		_I2C_Master_Wait
  8006 ;; This function is called by:
  8007 ;;		_loadRTC
  8008 ;;		_getRTC
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text25
  8013  00404C                     __ptext25:
  8014                           	opt stack 0
  8015  00404C                     _I2C_Master_Write:
  8016                           	opt stack 18
  8017                           
  8018                           ;I2C.c: 51: I2C_Master_Wait();
  8019                           
  8020                           ;incstack = 0
  8021  00404C  ECF7  F01F         	call	_I2C_Master_Wait	;wreg free
  8022                           
  8023                           ;I2C.c: 52: SSPBUF = d;
  8024  004050  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8025  004054  0012               	return		;funcret
  8026  004056                     __end_of_I2C_Master_Write:
  8027                           	opt stack 0
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           intcon2	equ	0xFF1
  8036                           intcon3	equ	0xFF0
  8037                           postinc0	equ	0xFEE
  8038                           wreg	equ	0xFE8
  8039                           postdec1	equ	0xFE5
  8040                           fsr1l	equ	0xFE1
  8041                           indf2	equ	0xFDF
  8042                           postinc2	equ	0xFDE
  8043                           postdec2	equ	0xFDD
  8044                           fsr2h	equ	0xFDA
  8045                           fsr2l	equ	0xFD9
  8046                           status	equ	0xFD8
  8047                           
  8048 ;; *************** function _I2C_Master_Stop *****************
  8049 ;; Defined at:
  8050 ;;		line 43 in file "I2C.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;		None
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;		None
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      void 
  8057 ;; Registers used:
  8058 ;;		wreg, status,2, status,0, cstack
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;Total ram usage:        0 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    8
  8071 ;; This function calls:
  8072 ;;		_I2C_Master_Wait
  8073 ;; This function is called by:
  8074 ;;		_loadRTC
  8075 ;;		_getRTC
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           	psect	text26
  8080  004068                     __ptext26:
  8081                           	opt stack 0
  8082  004068                     _I2C_Master_Stop:
  8083                           	opt stack 18
  8084                           
  8085                           ;I2C.c: 45: I2C_Master_Wait();
  8086                           
  8087                           ;incstack = 0
  8088  004068  ECF7  F01F         	call	_I2C_Master_Wait	;wreg free
  8089                           
  8090                           ;I2C.c: 46: PEN = 1;
  8091  00406C  84C5               	bsf	4037,2,c	;volatile
  8092  00406E  0012               	return		;funcret
  8093  004070                     __end_of_I2C_Master_Stop:
  8094                           	opt stack 0
  8095                           tblptru	equ	0xFF8
  8096                           tblptrh	equ	0xFF7
  8097                           tblptrl	equ	0xFF6
  8098                           tablat	equ	0xFF5
  8099                           prodh	equ	0xFF4
  8100                           prodl	equ	0xFF3
  8101                           intcon	equ	0xFF2
  8102                           intcon2	equ	0xFF1
  8103                           intcon3	equ	0xFF0
  8104                           postinc0	equ	0xFEE
  8105                           wreg	equ	0xFE8
  8106                           postdec1	equ	0xFE5
  8107                           fsr1l	equ	0xFE1
  8108                           indf2	equ	0xFDF
  8109                           postinc2	equ	0xFDE
  8110                           postdec2	equ	0xFDD
  8111                           fsr2h	equ	0xFDA
  8112                           fsr2l	equ	0xFD9
  8113                           status	equ	0xFD8
  8114                           
  8115 ;; *************** function _I2C_Master_Start *****************
  8116 ;; Defined at:
  8117 ;;		line 31 in file "I2C.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;		None
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;		None
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      void 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;Total ram usage:        0 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    8
  8138 ;; This function calls:
  8139 ;;		_I2C_Master_Wait
  8140 ;; This function is called by:
  8141 ;;		_loadRTC
  8142 ;;		_getRTC
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text27
  8147  004070                     __ptext27:
  8148                           	opt stack 0
  8149  004070                     _I2C_Master_Start:
  8150                           	opt stack 18
  8151                           
  8152                           ;I2C.c: 33: I2C_Master_Wait();
  8153                           
  8154                           ;incstack = 0
  8155  004070  ECF7  F01F         	call	_I2C_Master_Wait	;wreg free
  8156                           
  8157                           ;I2C.c: 34: SEN = 1;
  8158  004074  80C5               	bsf	4037,0,c	;volatile
  8159  004076  0012               	return		;funcret
  8160  004078                     __end_of_I2C_Master_Start:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           intcon2	equ	0xFF1
  8170                           intcon3	equ	0xFF0
  8171                           postinc0	equ	0xFEE
  8172                           wreg	equ	0xFE8
  8173                           postdec1	equ	0xFE5
  8174                           fsr1l	equ	0xFE1
  8175                           indf2	equ	0xFDF
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _I2C_Master_Read *****************
  8183 ;; Defined at:
  8184 ;;		line 55 in file "I2C.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;  a               1    wreg     unsigned char 
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;  a               1    1[BANK0 ] unsigned char 
  8189 ;;  temp            1    2[BANK0 ] unsigned char 
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      unsigned char 
  8192 ;; Registers used:
  8193 ;;		wreg, status,2, status,0, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;Total ram usage:        2 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    8
  8206 ;; This function calls:
  8207 ;;		_I2C_Master_Wait
  8208 ;; This function is called by:
  8209 ;;		_getRTC
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           	psect	text28
  8214  003DAE                     __ptext28:
  8215                           	opt stack 0
  8216  003DAE                     _I2C_Master_Read:
  8217                           	opt stack 18
  8218                           
  8219                           ;incstack = 0
  8220                           ;I2C_Master_Read@a stored from wreg
  8221  003DAE  0100               	movlb	0	; () banked
  8222  003DB0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8223                           
  8224                           ;I2C.c: 57: unsigned char temp;
  8225                           ;I2C.c: 58: I2C_Master_Wait();
  8226  003DB2  ECF7  F01F         	call	_I2C_Master_Wait	;wreg free
  8227                           
  8228                           ;I2C.c: 59: RCEN = 1;
  8229  003DB6  86C5               	bsf	4037,3,c	;volatile
  8230                           
  8231                           ;I2C.c: 60: I2C_Master_Wait();
  8232  003DB8  ECF7  F01F         	call	_I2C_Master_Wait	;wreg free
  8233                           
  8234                           ;I2C.c: 61: temp = SSPBUF;
  8235  003DBC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8236                           
  8237                           ;I2C.c: 62: I2C_Master_Wait();
  8238  003DC0  ECF7  F01F         	call	_I2C_Master_Wait	;wreg free
  8239                           
  8240                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8241  003DC4  0100               	movlb	0	; () banked
  8242  003DC6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8243  003DC8  0100               	movlb	0	; () banked
  8244  003DCA  A4D8               	btfss	status,2,c
  8245  003DCC  D002               	goto	u3300
  8246  003DCE  8AC5               	bsf	4037,5,c	;volatile
  8247  003DD0  D001               	goto	l4901
  8248  003DD2                     u3300:
  8249  003DD2  9AC5               	bcf	4037,5,c	;volatile
  8250  003DD4                     l4901:
  8251                           
  8252                           ;I2C.c: 64: ACKEN = 1;
  8253  003DD4  88C5               	bsf	4037,4,c	;volatile
  8254                           
  8255                           ;I2C.c: 65: return temp;
  8256  003DD6  0100               	movlb	0	; () banked
  8257  003DD8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8258  003DDA  0012               	return	
  8259  003DDC                     __end_of_I2C_Master_Read:
  8260                           	opt stack 0
  8261                           tblptru	equ	0xFF8
  8262                           tblptrh	equ	0xFF7
  8263                           tblptrl	equ	0xFF6
  8264                           tablat	equ	0xFF5
  8265                           prodh	equ	0xFF4
  8266                           prodl	equ	0xFF3
  8267                           intcon	equ	0xFF2
  8268                           intcon2	equ	0xFF1
  8269                           intcon3	equ	0xFF0
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           postdec1	equ	0xFE5
  8273                           fsr1l	equ	0xFE1
  8274                           indf2	equ	0xFDF
  8275                           postinc2	equ	0xFDE
  8276                           postdec2	equ	0xFDD
  8277                           fsr2h	equ	0xFDA
  8278                           fsr2l	equ	0xFD9
  8279                           status	equ	0xFD8
  8280                           
  8281 ;; *************** function _I2C_Master_Wait *****************
  8282 ;; Defined at:
  8283 ;;		line 26 in file "I2C.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;		None
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;		None
  8288 ;; Return value:  Size  Location     Type
  8289 ;;                  1    wreg      void 
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;Total ram usage:        1 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    7
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_I2C_Master_Start
  8308 ;;		_I2C_Master_Stop
  8309 ;;		_I2C_Master_Write
  8310 ;;		_I2C_Master_Read
  8311 ;;		_I2C_Master_RepeatedStart
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text29
  8316  003FEE                     __ptext29:
  8317                           	opt stack 0
  8318  003FEE                     _I2C_Master_Wait:
  8319                           	opt stack 18
  8320  003FEE                     l66:
  8321  003FEE  B4C7               	btfsc	4039,2,c	;volatile
  8322  003FF0  D7FE               	goto	l66
  8323  003FF2  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8324  003FF6  0E1F               	movlw	31
  8325  003FF8  0100               	movlb	0	; () banked
  8326  003FFA  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8327  003FFC  B4D8               	btfsc	status,2,c
  8328  003FFE  0012               	return	
  8329  004000  D7F6               	goto	l66
  8330  004002                     __end_of_I2C_Master_Wait:
  8331                           	opt stack 0
  8332                           tblptru	equ	0xFF8
  8333                           tblptrh	equ	0xFF7
  8334                           tblptrl	equ	0xFF6
  8335                           tablat	equ	0xFF5
  8336                           prodh	equ	0xFF4
  8337                           prodl	equ	0xFF3
  8338                           intcon	equ	0xFF2
  8339                           intcon2	equ	0xFF1
  8340                           intcon3	equ	0xFF0
  8341                           postinc0	equ	0xFEE
  8342                           wreg	equ	0xFE8
  8343                           postdec1	equ	0xFE5
  8344                           fsr1l	equ	0xFE1
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           fsr2h	equ	0xFDA
  8349                           fsr2l	equ	0xFD9
  8350                           status	equ	0xFD8
  8351                           
  8352 ;; *************** function _change_state_to_menu_22 *****************
  8353 ;; Defined at:
  8354 ;;		line 496 in file "UI.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;		None
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;		None
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      void 
  8361 ;; Registers used:
  8362 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;Total ram usage:        0 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:   10
  8375 ;; This function calls:
  8376 ;;		_lcdInst
  8377 ;;		_printf
  8378 ;; This function is called by:
  8379 ;;		_UI
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text30
  8384  003AF0                     __ptext30:
  8385                           	opt stack 0
  8386  003AF0                     _change_state_to_menu_22:
  8387                           	opt stack 19
  8388                           
  8389                           ;UI.c: 497: cur_state = 22;
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;incstack = 0
  8393  003AF0  0E00               	movlw	0
  8394  003AF2  0100               	movlb	0	; () banked
  8395  003AF4  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8396  003AF6  0E16               	movlw	22
  8397  003AF8  6FDE               	movwf	_cur_state& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;UI.c: 499: lcdInst(0b10000000);;
  8401  003AFA  0E80               	movlw	128
  8402  003AFC  EC12  F020         	call	_lcdInst
  8403                           
  8404                           ;UI.c: 500: printf("2. SORT        <");
  8405  003B00  0E03               	movlw	low STR_34
  8406  003B02  0100               	movlb	0	; () banked
  8407  003B04  6F8E               	movwf	printf@f& (0+255),b
  8408  003B06  0EFE               	movlw	high STR_34
  8409  003B08  0100               	movlb	0	; () banked
  8410  003B0A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8411  003B0C  EC97  F008         	call	_printf	;wreg free
  8412                           
  8413                           ;UI.c: 501: lcdInst(0b11000000);;
  8414  003B10  0EC0               	movlw	192
  8415  003B12  EC12  F020         	call	_lcdInst
  8416                           
  8417                           ;UI.c: 502: printf("3. LOGS         ");
  8418  003B16  0E48               	movlw	low STR_36
  8419  003B18  0100               	movlb	0	; () banked
  8420  003B1A  6F8E               	movwf	printf@f& (0+255),b
  8421  003B1C  0EFD               	movlw	high STR_36
  8422  003B1E  0100               	movlb	0	; () banked
  8423  003B20  6F8F               	movwf	(printf@f+1)& (0+255),b
  8424  003B22  EC97  F008         	call	_printf	;wreg free
  8425  003B26  0012               	return		;funcret
  8426  003B28                     __end_of_change_state_to_menu_22:
  8427                           	opt stack 0
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           prodh	equ	0xFF4
  8433                           prodl	equ	0xFF3
  8434                           intcon	equ	0xFF2
  8435                           intcon2	equ	0xFF1
  8436                           intcon3	equ	0xFF0
  8437                           postinc0	equ	0xFEE
  8438                           wreg	equ	0xFE8
  8439                           postdec1	equ	0xFE5
  8440                           fsr1l	equ	0xFE1
  8441                           indf2	equ	0xFDF
  8442                           postinc2	equ	0xFDE
  8443                           postdec2	equ	0xFDD
  8444                           fsr2h	equ	0xFDA
  8445                           fsr2l	equ	0xFD9
  8446                           status	equ	0xFD8
  8447                           
  8448 ;; *************** function _change_state_to_menu_12 *****************
  8449 ;; Defined at:
  8450 ;;		line 488 in file "UI.c"
  8451 ;; Parameters:    Size  Location     Type
  8452 ;;		None
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;		None
  8455 ;; Return value:  Size  Location     Type
  8456 ;;                  1    wreg      void 
  8457 ;; Registers used:
  8458 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;Total ram usage:        0 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:   10
  8471 ;; This function calls:
  8472 ;;		_lcdInst
  8473 ;;		_printf
  8474 ;; This function is called by:
  8475 ;;		_UI
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           	psect	text31
  8480  003B28                     __ptext31:
  8481                           	opt stack 0
  8482  003B28                     _change_state_to_menu_12:
  8483                           	opt stack 19
  8484                           
  8485                           ;UI.c: 489: cur_state = 12;
  8486                           
  8487                           ;incstack = 0
  8488  003B28  0E00               	movlw	0
  8489  003B2A  0100               	movlb	0	; () banked
  8490  003B2C  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8491  003B2E  0E0C               	movlw	12
  8492  003B30  6FDE               	movwf	_cur_state& (0+255),b
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;UI.c: 491: lcdInst(0b10000000);;
  8496  003B32  0E80               	movlw	128
  8497  003B34  EC12  F020         	call	_lcdInst
  8498                           
  8499                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8500  003B38  0E6A               	movlw	low STR_33
  8501  003B3A  0100               	movlb	0	; () banked
  8502  003B3C  6F8E               	movwf	printf@f& (0+255),b
  8503  003B3E  0EFD               	movlw	high STR_33
  8504  003B40  0100               	movlb	0	; () banked
  8505  003B42  6F8F               	movwf	(printf@f+1)& (0+255),b
  8506  003B44  EC97  F008         	call	_printf	;wreg free
  8507                           
  8508                           ;UI.c: 493: lcdInst(0b11000000);;
  8509  003B48  0EC0               	movlw	192
  8510  003B4A  EC12  F020         	call	_lcdInst
  8511                           
  8512                           ;UI.c: 494: printf("2. SORT        <");
  8513  003B4E  0E03               	movlw	low STR_34
  8514  003B50  0100               	movlb	0	; () banked
  8515  003B52  6F8E               	movwf	printf@f& (0+255),b
  8516  003B54  0EFE               	movlw	high STR_34
  8517  003B56  0100               	movlb	0	; () banked
  8518  003B58  6F8F               	movwf	(printf@f+1)& (0+255),b
  8519  003B5A  EC97  F008         	call	_printf	;wreg free
  8520  003B5E  0012               	return		;funcret
  8521  003B60                     __end_of_change_state_to_menu_12:
  8522                           	opt stack 0
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           intcon2	equ	0xFF1
  8531                           intcon3	equ	0xFF0
  8532                           postinc0	equ	0xFEE
  8533                           wreg	equ	0xFE8
  8534                           postdec1	equ	0xFE5
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           fsr2h	equ	0xFDA
  8540                           fsr2l	equ	0xFD9
  8541                           status	equ	0xFD8
  8542                           
  8543 ;; *************** function ___awmod *****************
  8544 ;; Defined at:
  8545 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  dividend        2    0[BANK0 ] int 
  8548 ;;  divisor         2    2[BANK0 ] int 
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;  sign            1    5[BANK0 ] unsigned char 
  8551 ;;  counter         1    4[BANK0 ] unsigned char 
  8552 ;; Return value:  Size  Location     Type
  8553 ;;                  2    0[BANK0 ] int 
  8554 ;; Registers used:
  8555 ;;		wreg, status,2, status,0
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8561 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;Total ram usage:        6 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:    7
  8568 ;; This function calls:
  8569 ;;		Nothing
  8570 ;; This function is called by:
  8571 ;;		_UI
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           	psect	text32
  8576  0031B6                     __ptext32:
  8577                           	opt stack 0
  8578  0031B6                     ___awmod:
  8579                           	opt stack 22
  8580                           
  8581                           ;incstack = 0
  8582  0031B6  0E00               	movlw	0
  8583  0031B8  0100               	movlb	0	; () banked
  8584  0031BA  6F85               	movwf	___awmod@sign& (0+255),b
  8585                           
  8586                           ; BSR set to: 0
  8587  0031BC  0100               	movlb	0	; () banked
  8588  0031BE  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8589  0031C0  D008               	goto	l6701
  8590                           
  8591                           ; BSR set to: 0
  8592  0031C2  0100               	movlb	0	; () banked
  8593  0031C4  6D80               	negf	___awmod@dividend& (0+255),b
  8594  0031C6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8595  0031C8  B0D8               	btfsc	status,0,c
  8596  0031CA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8597                           
  8598                           ; BSR set to: 0
  8599  0031CC  0E01               	movlw	1
  8600  0031CE  0100               	movlb	0	; () banked
  8601  0031D0  6F85               	movwf	___awmod@sign& (0+255),b
  8602  0031D2                     l6701:
  8603                           
  8604                           ; BSR set to: 0
  8605  0031D2  0100               	movlb	0	; () banked
  8606  0031D4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8607  0031D6  D005               	goto	l6705
  8608                           
  8609                           ; BSR set to: 0
  8610  0031D8  0100               	movlb	0	; () banked
  8611  0031DA  6D82               	negf	___awmod@divisor& (0+255),b
  8612  0031DC  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8613  0031DE  B0D8               	btfsc	status,0,c
  8614  0031E0  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8615  0031E2                     l6705:
  8616                           
  8617                           ; BSR set to: 0
  8618  0031E2  0100               	movlb	0	; () banked
  8619  0031E4  5182               	movf	___awmod@divisor& (0+255),w,b
  8620  0031E6  0100               	movlb	0	; () banked
  8621  0031E8  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8622  0031EA  B4D8               	btfsc	status,2,c
  8623  0031EC  D026               	goto	l6721
  8624                           
  8625                           ; BSR set to: 0
  8626  0031EE  0E01               	movlw	1
  8627  0031F0  0100               	movlb	0	; () banked
  8628  0031F2  6F84               	movwf	___awmod@counter& (0+255),b
  8629  0031F4  D006               	goto	l6711
  8630  0031F6                     l6709:
  8631                           
  8632                           ; BSR set to: 0
  8633  0031F6  0100               	movlb	0	; () banked
  8634  0031F8  90D8               	bcf	status,0,c
  8635  0031FA  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8636  0031FC  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8637  0031FE  0100               	movlb	0	; () banked
  8638  003200  2B84               	incf	___awmod@counter& (0+255),f,b
  8639  003202                     l6711:
  8640                           
  8641                           ; BSR set to: 0
  8642  003202  0100               	movlb	0	; () banked
  8643  003204  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8644  003206  D7F7               	goto	l6709
  8645  003208                     l6713:
  8646                           
  8647                           ; BSR set to: 0
  8648  003208  0100               	movlb	0	; () banked
  8649  00320A  5182               	movf	___awmod@divisor& (0+255),w,b
  8650  00320C  0100               	movlb	0	; () banked
  8651  00320E  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8652  003210  0100               	movlb	0	; () banked
  8653  003212  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8654  003214  0100               	movlb	0	; () banked
  8655  003216  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8656  003218  A0D8               	btfss	status,0,c
  8657  00321A  D008               	goto	l6717
  8658                           
  8659                           ; BSR set to: 0
  8660  00321C  0100               	movlb	0	; () banked
  8661  00321E  5182               	movf	___awmod@divisor& (0+255),w,b
  8662  003220  0100               	movlb	0	; () banked
  8663  003222  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8664  003224  0100               	movlb	0	; () banked
  8665  003226  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8666  003228  0100               	movlb	0	; () banked
  8667  00322A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8668  00322C                     l6717:
  8669                           
  8670                           ; BSR set to: 0
  8671  00322C  0100               	movlb	0	; () banked
  8672  00322E  90D8               	bcf	status,0,c
  8673  003230  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8674  003232  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8675                           
  8676                           ; BSR set to: 0
  8677  003234  0100               	movlb	0	; () banked
  8678  003236  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8679  003238  D7E7               	goto	l6713
  8680  00323A                     l6721:
  8681                           
  8682                           ; BSR set to: 0
  8683  00323A  0100               	movlb	0	; () banked
  8684  00323C  5185               	movf	___awmod@sign& (0+255),w,b
  8685  00323E  0100               	movlb	0	; () banked
  8686  003240  B4D8               	btfsc	status,2,c
  8687  003242  D005               	goto	l6725
  8688                           
  8689                           ; BSR set to: 0
  8690  003244  0100               	movlb	0	; () banked
  8691  003246  6D80               	negf	___awmod@dividend& (0+255),b
  8692  003248  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8693  00324A  B0D8               	btfsc	status,0,c
  8694  00324C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8695  00324E                     l6725:
  8696                           
  8697                           ; BSR set to: 0
  8698  00324E  C080  F080         	movff	___awmod@dividend,?___awmod
  8699  003252  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8700  003256  0012               	return	
  8701  003258                     __end_of___awmod:
  8702                           	opt stack 0
  8703                           tblptru	equ	0xFF8
  8704                           tblptrh	equ	0xFF7
  8705                           tblptrl	equ	0xFF6
  8706                           tablat	equ	0xFF5
  8707                           prodh	equ	0xFF4
  8708                           prodl	equ	0xFF3
  8709                           intcon	equ	0xFF2
  8710                           intcon2	equ	0xFF1
  8711                           intcon3	equ	0xFF0
  8712                           postinc0	equ	0xFEE
  8713                           wreg	equ	0xFE8
  8714                           postdec1	equ	0xFE5
  8715                           fsr1l	equ	0xFE1
  8716                           indf2	equ	0xFDF
  8717                           postinc2	equ	0xFDE
  8718                           postdec2	equ	0xFDD
  8719                           fsr2h	equ	0xFDA
  8720                           fsr2l	equ	0xFD9
  8721                           status	equ	0xFD8
  8722                           
  8723 ;; *************** function ___awdiv *****************
  8724 ;; Defined at:
  8725 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;  dividend        2    6[BANK0 ] int 
  8728 ;;  divisor         2    8[BANK0 ] int 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  quotient        2   12[BANK0 ] int 
  8731 ;;  sign            1   11[BANK0 ] unsigned char 
  8732 ;;  counter         1   10[BANK0 ] unsigned char 
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  2    6[BANK0 ] int 
  8735 ;; Registers used:
  8736 ;;		wreg, status,2, status,0
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8742 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;Total ram usage:        8 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    7
  8749 ;; This function calls:
  8750 ;;		Nothing
  8751 ;; This function is called by:
  8752 ;;		_UI
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           	psect	text33
  8757  002F92                     __ptext33:
  8758                           	opt stack 0
  8759  002F92                     ___awdiv:
  8760                           	opt stack 22
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;incstack = 0
  8764  002F92  0E00               	movlw	0
  8765  002F94  0100               	movlb	0	; () banked
  8766  002F96  6F8B               	movwf	___awdiv@sign& (0+255),b
  8767                           
  8768                           ; BSR set to: 0
  8769  002F98  0100               	movlb	0	; () banked
  8770  002F9A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8771  002F9C  D008               	goto	l6657
  8772                           
  8773                           ; BSR set to: 0
  8774  002F9E  0100               	movlb	0	; () banked
  8775  002FA0  6D88               	negf	___awdiv@divisor& (0+255),b
  8776  002FA2  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8777  002FA4  B0D8               	btfsc	status,0,c
  8778  002FA6  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8779                           
  8780                           ; BSR set to: 0
  8781  002FA8  0E01               	movlw	1
  8782  002FAA  0100               	movlb	0	; () banked
  8783  002FAC  6F8B               	movwf	___awdiv@sign& (0+255),b
  8784  002FAE                     l6657:
  8785                           
  8786                           ; BSR set to: 0
  8787  002FAE  0100               	movlb	0	; () banked
  8788  002FB0  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8789  002FB2  D008               	goto	l6663
  8790                           
  8791                           ; BSR set to: 0
  8792  002FB4  0100               	movlb	0	; () banked
  8793  002FB6  6D86               	negf	___awdiv@dividend& (0+255),b
  8794  002FB8  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8795  002FBA  B0D8               	btfsc	status,0,c
  8796  002FBC  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8797                           
  8798                           ; BSR set to: 0
  8799  002FBE  0E01               	movlw	1
  8800  002FC0  0100               	movlb	0	; () banked
  8801  002FC2  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8802  002FC4                     l6663:
  8803                           
  8804                           ; BSR set to: 0
  8805  002FC4  0E00               	movlw	0
  8806  002FC6  0100               	movlb	0	; () banked
  8807  002FC8  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8808  002FCA  0E00               	movlw	0
  8809  002FCC  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8810                           
  8811                           ; BSR set to: 0
  8812  002FCE  0100               	movlb	0	; () banked
  8813  002FD0  5188               	movf	___awdiv@divisor& (0+255),w,b
  8814  002FD2  0100               	movlb	0	; () banked
  8815  002FD4  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8816  002FD6  B4D8               	btfsc	status,2,c
  8817  002FD8  D02C               	goto	l6685
  8818                           
  8819                           ; BSR set to: 0
  8820  002FDA  0E01               	movlw	1
  8821  002FDC  0100               	movlb	0	; () banked
  8822  002FDE  6F8A               	movwf	___awdiv@counter& (0+255),b
  8823  002FE0  D006               	goto	l6671
  8824  002FE2                     l6669:
  8825                           
  8826                           ; BSR set to: 0
  8827  002FE2  0100               	movlb	0	; () banked
  8828  002FE4  90D8               	bcf	status,0,c
  8829  002FE6  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8830  002FE8  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8831  002FEA  0100               	movlb	0	; () banked
  8832  002FEC  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8833  002FEE                     l6671:
  8834                           
  8835                           ; BSR set to: 0
  8836  002FEE  0100               	movlb	0	; () banked
  8837  002FF0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8838  002FF2  D7F7               	goto	l6669
  8839  002FF4                     l6673:
  8840                           
  8841                           ; BSR set to: 0
  8842  002FF4  0100               	movlb	0	; () banked
  8843  002FF6  90D8               	bcf	status,0,c
  8844  002FF8  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8845  002FFA  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8846                           
  8847                           ; BSR set to: 0
  8848  002FFC  0100               	movlb	0	; () banked
  8849  002FFE  5188               	movf	___awdiv@divisor& (0+255),w,b
  8850  003000  0100               	movlb	0	; () banked
  8851  003002  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8852  003004  0100               	movlb	0	; () banked
  8853  003006  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8854  003008  0100               	movlb	0	; () banked
  8855  00300A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8856  00300C  A0D8               	btfss	status,0,c
  8857  00300E  D00A               	goto	l6681
  8858                           
  8859                           ; BSR set to: 0
  8860  003010  0100               	movlb	0	; () banked
  8861  003012  5188               	movf	___awdiv@divisor& (0+255),w,b
  8862  003014  0100               	movlb	0	; () banked
  8863  003016  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8864  003018  0100               	movlb	0	; () banked
  8865  00301A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8866  00301C  0100               	movlb	0	; () banked
  8867  00301E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8868                           
  8869                           ; BSR set to: 0
  8870  003020  0100               	movlb	0	; () banked
  8871  003022  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8872  003024                     l6681:
  8873                           
  8874                           ; BSR set to: 0
  8875  003024  0100               	movlb	0	; () banked
  8876  003026  90D8               	bcf	status,0,c
  8877  003028  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8878  00302A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8879                           
  8880                           ; BSR set to: 0
  8881  00302C  0100               	movlb	0	; () banked
  8882  00302E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8883  003030  D7E1               	goto	l6673
  8884  003032                     l6685:
  8885                           
  8886                           ; BSR set to: 0
  8887  003032  0100               	movlb	0	; () banked
  8888  003034  518B               	movf	___awdiv@sign& (0+255),w,b
  8889  003036  0100               	movlb	0	; () banked
  8890  003038  B4D8               	btfsc	status,2,c
  8891  00303A  D005               	goto	l6689
  8892                           
  8893                           ; BSR set to: 0
  8894  00303C  0100               	movlb	0	; () banked
  8895  00303E  6D8C               	negf	___awdiv@quotient& (0+255),b
  8896  003040  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8897  003042  B0D8               	btfsc	status,0,c
  8898  003044  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8899  003046                     l6689:
  8900                           
  8901                           ; BSR set to: 0
  8902  003046  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8903  00304A  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8904  00304E  0012               	return	
  8905  003050                     __end_of___awdiv:
  8906                           	opt stack 0
  8907                           tblptru	equ	0xFF8
  8908                           tblptrh	equ	0xFF7
  8909                           tblptrl	equ	0xFF6
  8910                           tablat	equ	0xFF5
  8911                           prodh	equ	0xFF4
  8912                           prodl	equ	0xFF3
  8913                           intcon	equ	0xFF2
  8914                           intcon2	equ	0xFF1
  8915                           intcon3	equ	0xFF0
  8916                           postinc0	equ	0xFEE
  8917                           wreg	equ	0xFE8
  8918                           postdec1	equ	0xFE5
  8919                           fsr1l	equ	0xFE1
  8920                           indf2	equ	0xFDF
  8921                           postinc2	equ	0xFDE
  8922                           postdec2	equ	0xFDD
  8923                           fsr2h	equ	0xFDA
  8924                           fsr2l	equ	0xFD9
  8925                           status	equ	0xFD8
  8926                           
  8927 ;; *************** function _Test *****************
  8928 ;; Defined at:
  8929 ;;		line 25 in file "Test.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;		None
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  2  451[None  ] int 
  8936 ;; Registers used:
  8937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;Total ram usage:        2 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:   11
  8950 ;; This function calls:
  8951 ;;		_EEPROMTest
  8952 ;;		_PortTestA5
  8953 ;;		_PortTests
  8954 ;;		_actuatorTest
  8955 ;;		_algorithmTest
  8956 ;;		_lcdInst
  8957 ;;		_printf
  8958 ;;		_sensorTest
  8959 ;; This function is called by:
  8960 ;;		_main
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           	psect	text34
  8965  002DDA                     __ptext34:
  8966                           	opt stack 0
  8967  002DDA                     _Test:
  8968                           	opt stack 19
  8969  002DDA                     
  8970                           ;Test.c: 28: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  8971  002DDA  0E01               	movlw	1
  8972  002DDC  EC12  F020         	call	_lcdInst
  8973  002DE0  0E68               	movlw	104
  8974  002DE2  0100               	movlb	0	; () banked
  8975  002DE4  6FC4               	movwf	??_Test& (0+255),b
  8976  002DE6  0EE4               	movlw	228
  8977  002DE8                     u6857:
  8978  002DE8  2EE8               	decfsz	wreg,f,c
  8979  002DEA  D7FE               	bra	u6857
  8980  002DEC  2FC4               	decfsz	??_Test& (0+255),f,b
  8981  002DEE  D7FC               	bra	u6857
  8982  002DF0  F000               	nop	
  8983  002DF2  0E80               	movlw	128
  8984  002DF4  EC12  F020         	call	_lcdInst
  8985                           
  8986                           ;Test.c: 29: printf("1.ALG|2.SNR|3.AC");
  8987  002DF8  0EC0               	movlw	low STR_68
  8988  002DFA  0100               	movlb	0	; () banked
  8989  002DFC  6F8E               	movwf	printf@f& (0+255),b
  8990  002DFE  0EFC               	movlw	high STR_68
  8991  002E00  0100               	movlb	0	; () banked
  8992  002E02  6F8F               	movwf	(printf@f+1)& (0+255),b
  8993  002E04  EC97  F008         	call	_printf	;wreg free
  8994                           
  8995                           ;Test.c: 30: lcdInst(0b11000000);;
  8996  002E08  0EC0               	movlw	192
  8997  002E0A  EC12  F020         	call	_lcdInst
  8998                           
  8999                           ;Test.c: 31: printf("4.HI|5.TOG|6.EEP");
  9000  002E0E  0EF3               	movlw	low STR_69
  9001  002E10  0100               	movlb	0	; () banked
  9002  002E12  6F8E               	movwf	printf@f& (0+255),b
  9003  002E14  0EFC               	movlw	high STR_69
  9004  002E16  0100               	movlb	0	; () banked
  9005  002E18  6F8F               	movwf	(printf@f+1)& (0+255),b
  9006  002E1A  EC97  F008         	call	_printf	;wreg free
  9007                           
  9008                           ;Test.c: 32: _delay((unsigned long)((100)*(32000000/4000.0)));
  9009  002E1E  0E05               	movlw	5
  9010  002E20  0100               	movlb	0	; () banked
  9011  002E22  6FC5               	movwf	(??_Test+1)& (0+255),b
  9012  002E24  0E0F               	movlw	15
  9013  002E26  0100               	movlb	0	; () banked
  9014  002E28  6FC4               	movwf	??_Test& (0+255),b
  9015  002E2A  0EF1               	movlw	241
  9016  002E2C                     u6867:
  9017  002E2C  2EE8               	decfsz	wreg,f,c
  9018  002E2E  D7FE               	bra	u6867
  9019  002E30  2FC4               	decfsz	??_Test& (0+255),f,b
  9020  002E32  D7FC               	bra	u6867
  9021  002E34  2FC5               	decfsz	(??_Test+1)& (0+255),f,b
  9022  002E36  D7FA               	bra	u6867
  9023  002E38                     l996:
  9024  002E38  A281               	btfss	3969,1,c	;volatile
  9025  002E3A  D7FE               	goto	l996
  9026                           
  9027                           ;Test.c: 34: var = PORTB >> 4;
  9028  002E3C  CF81 F0C4          	movff	3969,??_Test	;volatile
  9029  002E40  0100               	movlb	0	; () banked
  9030  002E42  3BC4               	swapf	??_Test& (0+255),f,b
  9031  002E44  0E0F               	movlw	15
  9032  002E46  17C4               	andwf	??_Test& (0+255),f,b
  9033  002E48  0100               	movlb	0	; () banked
  9034  002E4A  51C4               	movf	??_Test& (0+255),w,b
  9035  002E4C  0100               	movlb	0	; () banked
  9036  002E4E  6FFA               	movwf	_var& (0+255),b
  9037  002E50  6BFB               	clrf	(_var+1)& (0+255),b
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;Test.c: 35: var++;
  9041  002E52  0100               	movlb	0	; () banked
  9042  002E54  4BFA               	infsnz	_var& (0+255),f,b
  9043  002E56  2BFB               	incf	(_var+1)& (0+255),f,b
  9044  002E58                     l999:
  9045  002E58  A281               	btfss	3969,1,c	;volatile
  9046  002E5A  D012               	goto	l7415
  9047  002E5C  D7FD               	goto	l999
  9048  002E5E                     l7401:
  9049                           
  9050                           ;Test.c: 39: algorithmTest();
  9051  002E5E  EC5E  F017         	call	_algorithmTest	;wreg free
  9052                           
  9053                           ;Test.c: 40: break;
  9054  002E62  D7BB               	goto	l7383
  9055  002E64                     l7403:
  9056                           
  9057                           ;Test.c: 42: sensorTest();
  9058  002E64  EC36  F012         	call	_sensorTest	;wreg free
  9059                           
  9060                           ;Test.c: 43: break;
  9061  002E68  D7B8               	goto	l7383
  9062  002E6A                     l7405:
  9063                           
  9064                           ;Test.c: 45: actuatorTest();
  9065  002E6A  EC5C  F004         	call	_actuatorTest	;wreg free
  9066                           
  9067                           ;Test.c: 46: break;
  9068  002E6E  D7B5               	goto	l7383
  9069  002E70                     l7407:
  9070                           
  9071                           ;Test.c: 48: PortTests();
  9072  002E70  EC00  F01A         	call	_PortTests	;wreg free
  9073                           
  9074                           ;Test.c: 49: break;
  9075  002E74  D7B2               	goto	l7383
  9076  002E76                     l7409:
  9077                           
  9078                           ;Test.c: 51: PortTestA5();
  9079  002E76  EC5B  F01B         	call	_PortTestA5	;wreg free
  9080  002E7A                     l7411:
  9081                           
  9082                           ;Test.c: 53: EEPROMTest();
  9083  002E7A  EC44  F020         	call	_EEPROMTest	;wreg free
  9084                           
  9085                           ;Test.c: 57: }
  9086                           
  9087                           ;Test.c: 56: break;
  9088                           
  9089                           ;Test.c: 55: default:
  9090                           
  9091                           ;Test.c: 54: break;
  9092  002E7E  D7AD               	goto	l7383
  9093  002E80                     l7415:
  9094  002E80  C0FA  F0C4         	movff	_var,??_Test
  9095  002E84  C0FB  F0C5         	movff	_var+1,??_Test+1
  9096                           
  9097                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9098                           ; Switch size 1, requested type "space"
  9099                           ; Number of cases is 1, Range of values is 0 to 0
  9100                           ; switch strategies available:
  9101                           ; Name         Instructions Cycles
  9102                           ; simple_byte            4     3 (average)
  9103                           ;	Chosen strategy is simple_byte
  9104  002E88  0100               	movlb	0	; () banked
  9105  002E8A  51C5               	movf	(??_Test+1)& (0+255),w,b
  9106  002E8C  0A00               	xorlw	0	; case 0
  9107  002E8E  A4D8               	btfss	status,2,c
  9108  002E90  D7A4               	goto	l7383
  9109                           
  9110                           ; BSR set to: 0
  9111                           ; Switch size 1, requested type "space"
  9112                           ; Number of cases is 6, Range of values is 1 to 6
  9113                           ; switch strategies available:
  9114                           ; Name         Instructions Cycles
  9115                           ; simple_byte           19    10 (average)
  9116                           ;	Chosen strategy is simple_byte
  9117  002E92  0100               	movlb	0	; () banked
  9118  002E94  51C4               	movf	??_Test& (0+255),w,b
  9119  002E96  0A01               	xorlw	1	; case 1
  9120  002E98  B4D8               	btfsc	status,2,c
  9121  002E9A  D7E1               	goto	l7401
  9122  002E9C  0A03               	xorlw	3	; case 2
  9123  002E9E  B4D8               	btfsc	status,2,c
  9124  002EA0  D7E1               	goto	l7403
  9125  002EA2  0A01               	xorlw	1	; case 3
  9126  002EA4  B4D8               	btfsc	status,2,c
  9127  002EA6  D7E1               	goto	l7405
  9128  002EA8  0A07               	xorlw	7	; case 4
  9129  002EAA  B4D8               	btfsc	status,2,c
  9130  002EAC  D7E1               	goto	l7407
  9131  002EAE  0A01               	xorlw	1	; case 5
  9132  002EB0  B4D8               	btfsc	status,2,c
  9133  002EB2  D7E1               	goto	l7409
  9134  002EB4  0A03               	xorlw	3	; case 6
  9135  002EB6  B4D8               	btfsc	status,2,c
  9136  002EB8  D7E0               	goto	l7411
  9137                           
  9138                           ; BSR set to: 0
  9139                           
  9140                           ; BSR set to: 0
  9141  002EBA  D78F               	goto	l7383
  9142  002EBC                     __end_of_Test:
  9143                           	opt stack 0
  9144                           tblptru	equ	0xFF8
  9145                           tblptrh	equ	0xFF7
  9146                           tblptrl	equ	0xFF6
  9147                           tablat	equ	0xFF5
  9148                           prodh	equ	0xFF4
  9149                           prodl	equ	0xFF3
  9150                           intcon	equ	0xFF2
  9151                           intcon2	equ	0xFF1
  9152                           intcon3	equ	0xFF0
  9153                           postinc0	equ	0xFEE
  9154                           wreg	equ	0xFE8
  9155                           postdec1	equ	0xFE5
  9156                           fsr1l	equ	0xFE1
  9157                           indf2	equ	0xFDF
  9158                           postinc2	equ	0xFDE
  9159                           postdec2	equ	0xFDD
  9160                           fsr2h	equ	0xFDA
  9161                           fsr2l	equ	0xFD9
  9162                           status	equ	0xFD8
  9163                           
  9164 ;; *************** function _sensorTest *****************
  9165 ;; Defined at:
  9166 ;;		line 105 in file "Test.c"
  9167 ;; Parameters:    Size  Location     Type
  9168 ;;		None
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  1    wreg      void 
  9173 ;; Registers used:
  9174 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;Total ram usage:        2 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; Hardware stack levels required when called:   10
  9187 ;; This function calls:
  9188 ;;		_lcdInst
  9189 ;;		_printf
  9190 ;;		_readIR
  9191 ;;		_readMAG
  9192 ;; This function is called by:
  9193 ;;		_Test
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           	psect	text35
  9198  00246C                     __ptext35:
  9199                           	opt stack 0
  9200  00246C                     _sensorTest:
  9201                           	opt stack 19
  9202                           
  9203                           ;Test.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;incstack = 0
  9207  00246C  0E01               	movlw	1
  9208  00246E  EC12  F020         	call	_lcdInst
  9209  002472  0E68               	movlw	104
  9210  002474  0100               	movlb	0	; () banked
  9211  002476  6FAB               	movwf	??_sensorTest& (0+255),b
  9212  002478  0EE4               	movlw	228
  9213  00247A                     u6877:
  9214  00247A  2EE8               	decfsz	wreg,f,c
  9215  00247C  D7FE               	bra	u6877
  9216  00247E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9217  002480  D7FC               	bra	u6877
  9218  002482  F000               	nop	
  9219  002484  0E80               	movlw	128
  9220  002486  EC12  F020         	call	_lcdInst
  9221                           
  9222                           ;Test.c: 108: printf("SENSORS");
  9223  00248A  0EAD               	movlw	low STR_77
  9224  00248C  0100               	movlb	0	; () banked
  9225  00248E  6F8E               	movwf	printf@f& (0+255),b
  9226  002490  0EFF               	movlw	high STR_77
  9227  002492  0100               	movlb	0	; () banked
  9228  002494  6F8F               	movwf	(printf@f+1)& (0+255),b
  9229  002496  EC97  F008         	call	_printf	;wreg free
  9230                           
  9231                           ;Test.c: 109: lcdInst(0b11000000);;
  9232  00249A  0EC0               	movlw	192
  9233  00249C  EC12  F020         	call	_lcdInst
  9234                           
  9235                           ;Test.c: 110: printf("PUSH TO START");
  9236  0024A0  0E28               	movlw	low STR_71
  9237  0024A2  0100               	movlb	0	; () banked
  9238  0024A4  6F8E               	movwf	printf@f& (0+255),b
  9239  0024A6  0EFF               	movlw	high STR_71
  9240  0024A8  0100               	movlb	0	; () banked
  9241  0024AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9242  0024AC  EC97  F008         	call	_printf	;wreg free
  9243                           
  9244                           ;Test.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  9245  0024B0  0E05               	movlw	5
  9246  0024B2  0100               	movlb	0	; () banked
  9247  0024B4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9248  0024B6  0E0F               	movlw	15
  9249  0024B8  0100               	movlb	0	; () banked
  9250  0024BA  6FAB               	movwf	??_sensorTest& (0+255),b
  9251  0024BC  0EF1               	movlw	241
  9252  0024BE                     u6887:
  9253  0024BE  2EE8               	decfsz	wreg,f,c
  9254  0024C0  D7FE               	bra	u6887
  9255  0024C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9256  0024C4  D7FC               	bra	u6887
  9257  0024C6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9258  0024C8  D7FA               	bra	u6887
  9259  0024CA                     l1025:
  9260  0024CA  A281               	btfss	3969,1,c	;volatile
  9261  0024CC  D7FE               	goto	l1025
  9262  0024CE                     l1028:
  9263  0024CE  B281               	btfsc	3969,1,c	;volatile
  9264  0024D0  D7FE               	goto	l1028
  9265                           
  9266                           ;Test.c: 114: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9267  0024D2  0E01               	movlw	1
  9268  0024D4  EC12  F020         	call	_lcdInst
  9269  0024D8  0E68               	movlw	104
  9270  0024DA  0100               	movlb	0	; () banked
  9271  0024DC  6FAB               	movwf	??_sensorTest& (0+255),b
  9272  0024DE  0EE4               	movlw	228
  9273  0024E0                     u6897:
  9274  0024E0  2EE8               	decfsz	wreg,f,c
  9275  0024E2  D7FE               	bra	u6897
  9276  0024E4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9277  0024E6  D7FC               	bra	u6897
  9278  0024E8  F000               	nop	
  9279  0024EA  0E80               	movlw	128
  9280  0024EC  EC12  F020         	call	_lcdInst
  9281                           
  9282                           ;Test.c: 119: printf("TST: IR SNSR");
  9283  0024F0  0E52               	movlw	low STR_79
  9284  0024F2  0100               	movlb	0	; () banked
  9285  0024F4  6F8E               	movwf	printf@f& (0+255),b
  9286  0024F6  0EFF               	movlw	high STR_79
  9287  0024F8  0100               	movlb	0	; () banked
  9288  0024FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9289  0024FC  EC97  F008         	call	_printf	;wreg free
  9290                           
  9291                           ;Test.c: 120: _delay((unsigned long)((100)*(32000000/4000.0)));
  9292  002500  0E05               	movlw	5
  9293  002502  0100               	movlb	0	; () banked
  9294  002504  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9295  002506  0E0F               	movlw	15
  9296  002508  0100               	movlb	0	; () banked
  9297  00250A  6FAB               	movwf	??_sensorTest& (0+255),b
  9298  00250C  0EF1               	movlw	241
  9299  00250E                     u6907:
  9300  00250E  2EE8               	decfsz	wreg,f,c
  9301  002510  D7FE               	bra	u6907
  9302  002512  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9303  002514  D7FC               	bra	u6907
  9304  002516  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9305  002518  D7FA               	bra	u6907
  9306                           
  9307                           ;Test.c: 121: while(PORTBbits.RB1 == 0){
  9308  00251A  D021               	goto	l6183
  9309  00251C                     l6177:
  9310                           
  9311                           ;Test.c: 122: readIR();
  9312  00251C  EC0E  F01D         	call	_readIR	;wreg free
  9313                           
  9314                           ;Test.c: 123: lcdInst(0b10000000);;
  9315  002520  0E80               	movlw	128
  9316  002522  EC12  F020         	call	_lcdInst
  9317                           
  9318                           ;Test.c: 124: lcdInst(0b11000000);;
  9319  002526  0EC0               	movlw	192
  9320  002528  EC12  F020         	call	_lcdInst
  9321                           
  9322                           ;Test.c: 125: printf("IR_signal: %d ", IR_signal);
  9323  00252C  0E77               	movlw	low STR_80
  9324  00252E  0100               	movlb	0	; () banked
  9325  002530  6F8E               	movwf	printf@f& (0+255),b
  9326  002532  0EFE               	movlw	high STR_80
  9327  002534  0100               	movlb	0	; () banked
  9328  002536  6F8F               	movwf	(printf@f+1)& (0+255),b
  9329  002538  C0DA  F090         	movff	_IR_signal,?_printf+2
  9330  00253C  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9331  002540  EC97  F008         	call	_printf	;wreg free
  9332                           
  9333                           ;Test.c: 126: _delay((unsigned long)((100)*(32000000/4000.0)));
  9334  002544  0E05               	movlw	5
  9335  002546  0100               	movlb	0	; () banked
  9336  002548  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9337  00254A  0E0F               	movlw	15
  9338  00254C  0100               	movlb	0	; () banked
  9339  00254E  6FAB               	movwf	??_sensorTest& (0+255),b
  9340  002550  0EF1               	movlw	241
  9341  002552                     u6917:
  9342  002552  2EE8               	decfsz	wreg,f,c
  9343  002554  D7FE               	bra	u6917
  9344  002556  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9345  002558  D7FC               	bra	u6917
  9346  00255A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9347  00255C  D7FA               	bra	u6917
  9348  00255E                     l6183:
  9349  00255E  A281               	btfss	3969,1,c	;volatile
  9350  002560  D7DD               	goto	l6177
  9351                           
  9352                           ;Test.c: 127: }
  9353                           ;Test.c: 128: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9354  002562  0E01               	movlw	1
  9355  002564  EC12  F020         	call	_lcdInst
  9356  002568  0E68               	movlw	104
  9357  00256A  0100               	movlb	0	; () banked
  9358  00256C  6FAB               	movwf	??_sensorTest& (0+255),b
  9359  00256E  0EE4               	movlw	228
  9360  002570                     u6927:
  9361  002570  2EE8               	decfsz	wreg,f,c
  9362  002572  D7FE               	bra	u6927
  9363  002574  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9364  002576  D7FC               	bra	u6927
  9365  002578  F000               	nop	
  9366  00257A  0E80               	movlw	128
  9367  00257C  EC12  F020         	call	_lcdInst
  9368  002580                     l1034:
  9369  002580  B281               	btfsc	3969,1,c	;volatile
  9370  002582  D7FE               	goto	l1034
  9371                           
  9372                           ;Test.c: 136: printf("TST: MAGNETISM");
  9373  002584  0EA4               	movlw	low STR_81
  9374  002586  0100               	movlb	0	; () banked
  9375  002588  6F8E               	movwf	printf@f& (0+255),b
  9376  00258A  0EFE               	movlw	high STR_81
  9377  00258C  0100               	movlb	0	; () banked
  9378  00258E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9379  002590  EC97  F008         	call	_printf	;wreg free
  9380                           
  9381                           ;Test.c: 137: _delay((unsigned long)((100)*(32000000/4000.0)));
  9382  002594  0E05               	movlw	5
  9383  002596  0100               	movlb	0	; () banked
  9384  002598  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9385  00259A  0E0F               	movlw	15
  9386  00259C  0100               	movlb	0	; () banked
  9387  00259E  6FAB               	movwf	??_sensorTest& (0+255),b
  9388  0025A0  0EF1               	movlw	241
  9389  0025A2                     u6937:
  9390  0025A2  2EE8               	decfsz	wreg,f,c
  9391  0025A4  D7FE               	bra	u6937
  9392  0025A6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9393  0025A8  D7FC               	bra	u6937
  9394  0025AA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9395  0025AC  D7FA               	bra	u6937
  9396                           
  9397                           ;Test.c: 138: while(PORTBbits.RB1 == 0){
  9398  0025AE  D021               	goto	l6201
  9399  0025B0                     l6195:
  9400                           
  9401                           ;Test.c: 139: readMAG();
  9402  0025B0  ECE8  F01C         	call	_readMAG	;wreg free
  9403                           
  9404                           ;Test.c: 140: lcdInst(0b10000000);;
  9405  0025B4  0E80               	movlw	128
  9406  0025B6  EC12  F020         	call	_lcdInst
  9407                           
  9408                           ;Test.c: 141: lcdInst(0b11000000);;
  9409  0025BA  0EC0               	movlw	192
  9410  0025BC  EC12  F020         	call	_lcdInst
  9411                           
  9412                           ;Test.c: 142: printf("MAG_signal: %d ", MAG_signal);
  9413  0025C0  0E47               	movlw	low STR_82
  9414  0025C2  0100               	movlb	0	; () banked
  9415  0025C4  6F8E               	movwf	printf@f& (0+255),b
  9416  0025C6  0EFE               	movlw	high STR_82
  9417  0025C8  0100               	movlb	0	; () banked
  9418  0025CA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9419  0025CC  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9420  0025D0  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9421  0025D4  EC97  F008         	call	_printf	;wreg free
  9422                           
  9423                           ;Test.c: 143: _delay((unsigned long)((100)*(32000000/4000.0)));
  9424  0025D8  0E05               	movlw	5
  9425  0025DA  0100               	movlb	0	; () banked
  9426  0025DC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9427  0025DE  0E0F               	movlw	15
  9428  0025E0  0100               	movlb	0	; () banked
  9429  0025E2  6FAB               	movwf	??_sensorTest& (0+255),b
  9430  0025E4  0EF1               	movlw	241
  9431  0025E6                     u6947:
  9432  0025E6  2EE8               	decfsz	wreg,f,c
  9433  0025E8  D7FE               	bra	u6947
  9434  0025EA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9435  0025EC  D7FC               	bra	u6947
  9436  0025EE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9437  0025F0  D7FA               	bra	u6947
  9438  0025F2                     l6201:
  9439  0025F2  B281               	btfsc	3969,1,c	;volatile
  9440  0025F4  0012               	return	
  9441  0025F6  D7DC               	goto	l6195
  9442  0025F8                     __end_of_sensorTest:
  9443                           	opt stack 0
  9444                           tblptru	equ	0xFF8
  9445                           tblptrh	equ	0xFF7
  9446                           tblptrl	equ	0xFF6
  9447                           tablat	equ	0xFF5
  9448                           prodh	equ	0xFF4
  9449                           prodl	equ	0xFF3
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           intcon3	equ	0xFF0
  9453                           postinc0	equ	0xFEE
  9454                           wreg	equ	0xFE8
  9455                           postdec1	equ	0xFE5
  9456                           fsr1l	equ	0xFE1
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           fsr2h	equ	0xFDA
  9461                           fsr2l	equ	0xFD9
  9462                           status	equ	0xFD8
  9463                           
  9464 ;; *************** function _readMAG *****************
  9465 ;; Defined at:
  9466 ;;		line 29 in file "ADCFunctionality.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  res             2    4[BANK0 ] int 
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  1    wreg      void 
  9473 ;; Registers used:
  9474 ;;		wreg, status,2, status,0, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;Total ram usage:        4 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    8
  9487 ;; This function calls:
  9488 ;;		_readADC
  9489 ;; This function is called by:
  9490 ;;		_ID
  9491 ;;		_sensorTest
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text36
  9496  0039D0                     __ptext36:
  9497                           	opt stack 0
  9498  0039D0                     _readMAG:
  9499                           	opt stack 20
  9500                           
  9501                           ;ADCFunctionality.c: 30: readADC(1);
  9502                           
  9503                           ;incstack = 0
  9504  0039D0  0E01               	movlw	1
  9505  0039D2  EC1B  F01F         	call	_readADC
  9506                           
  9507                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9508  0039D6  50C3               	movf	4035,w,c	;volatile
  9509  0039D8  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9510  0039DC  0100               	movlb	0	; () banked
  9511  0039DE  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9512  0039E0  C082  F083         	movff	??_readMAG,??_readMAG+1
  9513  0039E4  0100               	movlb	0	; () banked
  9514  0039E6  6B82               	clrf	??_readMAG& (0+255),b
  9515  0039E8  0100               	movlb	0	; () banked
  9516  0039EA  1182               	iorwf	??_readMAG& (0+255),w,b
  9517  0039EC  0100               	movlb	0	; () banked
  9518  0039EE  6F84               	movwf	readMAG@res& (0+255),b
  9519  0039F0  0100               	movlb	0	; () banked
  9520  0039F2  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9521  0039F4  0100               	movlb	0	; () banked
  9522  0039F6  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9523                           
  9524                           ; BSR set to: 0
  9525                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9526  0039F8  0100               	movlb	0	; () banked
  9527  0039FA  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9528  0039FC  D008               	goto	u4171
  9529  0039FE  0100               	movlb	0	; () banked
  9530  003A00  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9531  003A02  E107               	bnz	u4170
  9532  003A04  0E96               	movlw	150
  9533  003A06  0100               	movlb	0	; () banked
  9534  003A08  5D84               	subwf	readMAG@res& (0+255),w,b
  9535  003A0A  B0D8               	btfsc	status,0,c
  9536  003A0C  D002               	goto	u4170
  9537  003A0E                     u4171:
  9538  003A0E  0E01               	movlw	1
  9539  003A10  D001               	goto	u4180
  9540  003A12                     u4170:
  9541  003A12  0E00               	movlw	0
  9542  003A14                     u4180:
  9543  003A14  0100               	movlb	0	; () banked
  9544  003A16  6FDC               	movwf	_MAG_signal& (0+255),b
  9545  003A18  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9546                           
  9547                           ; BSR set to: 0
  9548  003A1A  0012               	return		;funcret
  9549  003A1C                     __end_of_readMAG:
  9550                           	opt stack 0
  9551                           tblptru	equ	0xFF8
  9552                           tblptrh	equ	0xFF7
  9553                           tblptrl	equ	0xFF6
  9554                           tablat	equ	0xFF5
  9555                           prodh	equ	0xFF4
  9556                           prodl	equ	0xFF3
  9557                           intcon	equ	0xFF2
  9558                           intcon2	equ	0xFF1
  9559                           intcon3	equ	0xFF0
  9560                           postinc0	equ	0xFEE
  9561                           wreg	equ	0xFE8
  9562                           postdec1	equ	0xFE5
  9563                           fsr1l	equ	0xFE1
  9564                           indf2	equ	0xFDF
  9565                           postinc2	equ	0xFDE
  9566                           postdec2	equ	0xFDD
  9567                           fsr2h	equ	0xFDA
  9568                           fsr2l	equ	0xFD9
  9569                           status	equ	0xFD8
  9570                           
  9571 ;; *************** function _readIR *****************
  9572 ;; Defined at:
  9573 ;;		line 23 in file "ADCFunctionality.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;		None
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  res             2    4[BANK0 ] int 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  1    wreg      void 
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;Total ram usage:        4 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    8
  9594 ;; This function calls:
  9595 ;;		_readADC
  9596 ;; This function is called by:
  9597 ;;		_getIR
  9598 ;;		_sensorTest
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           	psect	text37
  9603  003A1C                     __ptext37:
  9604                           	opt stack 0
  9605  003A1C                     _readIR:
  9606                           	opt stack 19
  9607                           
  9608                           ;ADCFunctionality.c: 24: readADC(0);
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;incstack = 0
  9612  003A1C  0E00               	movlw	0
  9613  003A1E  EC1B  F01F         	call	_readADC
  9614                           
  9615                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9616  003A22  50C3               	movf	4035,w,c	;volatile
  9617  003A24  CFC4 F082          	movff	4036,??_readIR	;volatile
  9618  003A28  0100               	movlb	0	; () banked
  9619  003A2A  6B83               	clrf	(??_readIR+1)& (0+255),b
  9620  003A2C  C082  F083         	movff	??_readIR,??_readIR+1
  9621  003A30  0100               	movlb	0	; () banked
  9622  003A32  6B82               	clrf	??_readIR& (0+255),b
  9623  003A34  0100               	movlb	0	; () banked
  9624  003A36  1182               	iorwf	??_readIR& (0+255),w,b
  9625  003A38  0100               	movlb	0	; () banked
  9626  003A3A  6F84               	movwf	readIR@res& (0+255),b
  9627  003A3C  0100               	movlb	0	; () banked
  9628  003A3E  5183               	movf	(??_readIR+1)& (0+255),w,b
  9629  003A40  0100               	movlb	0	; () banked
  9630  003A42  6F85               	movwf	(readIR@res+1)& (0+255),b
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;ADCFunctionality.c: 26: IR_signal = (res < 150) ? 1 : 0;
  9634  003A44  0100               	movlb	0	; () banked
  9635  003A46  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9636  003A48  D008               	goto	u3501
  9637  003A4A  0100               	movlb	0	; () banked
  9638  003A4C  5185               	movf	(readIR@res+1)& (0+255),w,b
  9639  003A4E  E107               	bnz	u3500
  9640  003A50  0E96               	movlw	150
  9641  003A52  0100               	movlb	0	; () banked
  9642  003A54  5D84               	subwf	readIR@res& (0+255),w,b
  9643  003A56  B0D8               	btfsc	status,0,c
  9644  003A58  D002               	goto	u3500
  9645  003A5A                     u3501:
  9646  003A5A  0E01               	movlw	1
  9647  003A5C  D001               	goto	u3510
  9648  003A5E                     u3500:
  9649  003A5E  0E00               	movlw	0
  9650  003A60                     u3510:
  9651  003A60  0100               	movlb	0	; () banked
  9652  003A62  6FDA               	movwf	_IR_signal& (0+255),b
  9653  003A64  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9654                           
  9655                           ; BSR set to: 0
  9656  003A66  0012               	return		;funcret
  9657  003A68                     __end_of_readIR:
  9658                           	opt stack 0
  9659                           tblptru	equ	0xFF8
  9660                           tblptrh	equ	0xFF7
  9661                           tblptrl	equ	0xFF6
  9662                           tablat	equ	0xFF5
  9663                           prodh	equ	0xFF4
  9664                           prodl	equ	0xFF3
  9665                           intcon	equ	0xFF2
  9666                           intcon2	equ	0xFF1
  9667                           intcon3	equ	0xFF0
  9668                           postinc0	equ	0xFEE
  9669                           wreg	equ	0xFE8
  9670                           postdec1	equ	0xFE5
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function _readADC *****************
  9680 ;; Defined at:
  9681 ;;		line 15 in file "ADCFunctionality.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;  channel         1    wreg     unsigned char 
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  channel         1    1[BANK0 ] unsigned char 
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      void 
  9688 ;; Registers used:
  9689 ;;		wreg, status,2, status,0, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;Total ram usage:        2 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    7
  9702 ;; This function calls:
  9703 ;;		Nothing
  9704 ;; This function is called by:
  9705 ;;		_readIR
  9706 ;;		_readMAG
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	text38
  9711  003E36                     __ptext38:
  9712                           	opt stack 0
  9713  003E36                     _readADC:
  9714                           	opt stack 19
  9715                           
  9716                           ; BSR set to: 0
  9717                           ;incstack = 0
  9718                           ;readADC@channel stored from wreg
  9719  003E36  0100               	movlb	0	; () banked
  9720  003E38  6F81               	movwf	readADC@channel& (0+255),b
  9721                           
  9722                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9723  003E3A  0100               	movlb	0	; () banked
  9724  003E3C  4581               	rlncf	readADC@channel& (0+255),w,b
  9725  003E3E  46E8               	rlncf	wreg,f,c
  9726  003E40  0BFC               	andlw	252
  9727  003E42  6EC2               	movwf	4034,c	;volatile
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9731  003E44  80C2               	bsf	4034,0,c	;volatile
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9735  003E46  82C2               	bsf	4034,1,c	;volatile
  9736                           
  9737                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9738  003E48  D009               	goto	l4879
  9739  003E4A                     l4877:
  9740  003E4A  0E34               	movlw	52
  9741  003E4C  0100               	movlb	0	; () banked
  9742  003E4E  6F80               	movwf	??_readADC& (0+255),b
  9743  003E50  0EF1               	movlw	241
  9744  003E52                     u6957:
  9745  003E52  2EE8               	decfsz	wreg,f,c
  9746  003E54  D7FE               	bra	u6957
  9747  003E56  2F80               	decfsz	??_readADC& (0+255),f,b
  9748  003E58  D7FC               	bra	u6957
  9749  003E5A  D000               	nop2	
  9750  003E5C                     l4879:
  9751  003E5C  A2C2               	btfss	4034,1,c	;volatile
  9752  003E5E  0012               	return	
  9753  003E60  D7F4               	goto	l4877
  9754  003E62                     __end_of_readADC:
  9755                           	opt stack 0
  9756                           tblptru	equ	0xFF8
  9757                           tblptrh	equ	0xFF7
  9758                           tblptrl	equ	0xFF6
  9759                           tablat	equ	0xFF5
  9760                           prodh	equ	0xFF4
  9761                           prodl	equ	0xFF3
  9762                           intcon	equ	0xFF2
  9763                           intcon2	equ	0xFF1
  9764                           intcon3	equ	0xFF0
  9765                           postinc0	equ	0xFEE
  9766                           wreg	equ	0xFE8
  9767                           postdec1	equ	0xFE5
  9768                           fsr1l	equ	0xFE1
  9769                           indf2	equ	0xFDF
  9770                           postinc2	equ	0xFDE
  9771                           postdec2	equ	0xFDD
  9772                           fsr2h	equ	0xFDA
  9773                           fsr2l	equ	0xFD9
  9774                           status	equ	0xFD8
  9775                           
  9776 ;; *************** function _algorithmTest *****************
  9777 ;; Defined at:
  9778 ;;		line 61 in file "Test.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      void 
  9785 ;; Registers used:
  9786 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;Total ram usage:        2 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:   10
  9799 ;; This function calls:
  9800 ;;		_lcdInst
  9801 ;;		_printf
  9802 ;; This function is called by:
  9803 ;;		_Test
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           	psect	text39
  9808  002EBC                     __ptext39:
  9809                           	opt stack 0
  9810  002EBC                     _algorithmTest:
  9811                           	opt stack 19
  9812                           
  9813                           ;Test.c: 63: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9814                           
  9815                           ;incstack = 0
  9816  002EBC  0E01               	movlw	1
  9817  002EBE  EC12  F020         	call	_lcdInst
  9818  002EC2  0E68               	movlw	104
  9819  002EC4  0100               	movlb	0	; () banked
  9820  002EC6  6FAB               	movwf	??_algorithmTest& (0+255),b
  9821  002EC8  0EE4               	movlw	228
  9822  002ECA                     u6967:
  9823  002ECA  2EE8               	decfsz	wreg,f,c
  9824  002ECC  D7FE               	bra	u6967
  9825  002ECE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9826  002ED0  D7FC               	bra	u6967
  9827  002ED2  F000               	nop	
  9828  002ED4  0E80               	movlw	128
  9829  002ED6  EC12  F020         	call	_lcdInst
  9830                           
  9831                           ;Test.c: 64: printf("ALGORITHM TEST");
  9832  002EDA  0EEF               	movlw	low STR_70
  9833  002EDC  0100               	movlb	0	; () banked
  9834  002EDE  6F8E               	movwf	printf@f& (0+255),b
  9835  002EE0  0EFE               	movlw	high STR_70
  9836  002EE2  0100               	movlb	0	; () banked
  9837  002EE4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9838  002EE6  EC97  F008         	call	_printf	;wreg free
  9839                           
  9840                           ;Test.c: 65: lcdInst(0b11000000);;
  9841  002EEA  0EC0               	movlw	192
  9842  002EEC  EC12  F020         	call	_lcdInst
  9843                           
  9844                           ;Test.c: 66: printf("PUSH TO START");
  9845  002EF0  0E28               	movlw	low STR_71
  9846  002EF2  0100               	movlb	0	; () banked
  9847  002EF4  6F8E               	movwf	printf@f& (0+255),b
  9848  002EF6  0EFF               	movlw	high STR_71
  9849  002EF8  0100               	movlb	0	; () banked
  9850  002EFA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9851  002EFC  EC97  F008         	call	_printf	;wreg free
  9852                           
  9853                           ;Test.c: 67: _delay((unsigned long)((100)*(32000000/4000.0)));
  9854  002F00  0E05               	movlw	5
  9855  002F02  0100               	movlb	0	; () banked
  9856  002F04  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
  9857  002F06  0E0F               	movlw	15
  9858  002F08  0100               	movlb	0	; () banked
  9859  002F0A  6FAB               	movwf	??_algorithmTest& (0+255),b
  9860  002F0C  0EF1               	movlw	241
  9861  002F0E                     u6977:
  9862  002F0E  2EE8               	decfsz	wreg,f,c
  9863  002F10  D7FE               	bra	u6977
  9864  002F12  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9865  002F14  D7FC               	bra	u6977
  9866  002F16  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
  9867  002F18  D7FA               	bra	u6977
  9868  002F1A                     l1016:
  9869  002F1A  A281               	btfss	3969,1,c	;volatile
  9870  002F1C  D7FE               	goto	l1016
  9871  002F1E                     l1019:
  9872  002F1E  B281               	btfsc	3969,1,c	;volatile
  9873  002F20  D7FE               	goto	l1019
  9874                           
  9875                           ;Test.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9876  002F22  0E01               	movlw	1
  9877  002F24  EC12  F020         	call	_lcdInst
  9878  002F28  0E68               	movlw	104
  9879  002F2A  0100               	movlb	0	; () banked
  9880  002F2C  6FAB               	movwf	??_algorithmTest& (0+255),b
  9881  002F2E  0EE4               	movlw	228
  9882  002F30                     u6987:
  9883  002F30  2EE8               	decfsz	wreg,f,c
  9884  002F32  D7FE               	bra	u6987
  9885  002F34  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9886  002F36  D7FC               	bra	u6987
  9887  002F38  F000               	nop	
  9888  002F3A  0E80               	movlw	128
  9889  002F3C  EC12  F020         	call	_lcdInst
  9890                           
  9891                           ;Test.c: 75: printf("ALG1: 9 POPNOTAB");
  9892  002F40  0EAF               	movlw	low STR_72
  9893  002F42  0100               	movlb	0	; () banked
  9894  002F44  6F8E               	movwf	printf@f& (0+255),b
  9895  002F46  0EFC               	movlw	high STR_72
  9896  002F48  0100               	movlb	0	; () banked
  9897  002F4A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9898  002F4C  EC97  F008         	call	_printf	;wreg free
  9899                           
  9900                           ;Test.c: 82: printf("ALG2: 12 CANS");
  9901  002F50  0E0C               	movlw	low STR_73
  9902  002F52  0100               	movlb	0	; () banked
  9903  002F54  6F8E               	movwf	printf@f& (0+255),b
  9904  002F56  0EFF               	movlw	high STR_73
  9905  002F58  0100               	movlb	0	; () banked
  9906  002F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9907  002F5C  EC97  F008         	call	_printf	;wreg free
  9908                           
  9909                           ;Test.c: 91: printf("ALG3: 1 CAN");
  9910  002F60  0E6C               	movlw	low STR_74
  9911  002F62  0100               	movlb	0	; () banked
  9912  002F64  6F8E               	movwf	printf@f& (0+255),b
  9913  002F66  0EFF               	movlw	high STR_74
  9914  002F68  0100               	movlb	0	; () banked
  9915  002F6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9916  002F6C  EC97  F008         	call	_printf	;wreg free
  9917                           
  9918                           ;Test.c: 97: printf("ALG4: ALL CANS");
  9919  002F70  0ED1               	movlw	low STR_75
  9920  002F72  0100               	movlb	0	; () banked
  9921  002F74  6F8E               	movwf	printf@f& (0+255),b
  9922  002F76  0EFE               	movlw	high STR_75
  9923  002F78  0100               	movlb	0	; () banked
  9924  002F7A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9925  002F7C  EC97  F008         	call	_printf	;wreg free
  9926                           
  9927                           ;Test.c: 102: printf("ALG5: NO CANS");
  9928  002F80  0E1A               	movlw	low STR_76
  9929  002F82  0100               	movlb	0	; () banked
  9930  002F84  6F8E               	movwf	printf@f& (0+255),b
  9931  002F86  0EFF               	movlw	high STR_76
  9932  002F88  0100               	movlb	0	; () banked
  9933  002F8A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9934  002F8C  EC97  F008         	call	_printf	;wreg free
  9935  002F90  0012               	return		;funcret
  9936  002F92                     __end_of_algorithmTest:
  9937                           	opt stack 0
  9938                           tblptru	equ	0xFF8
  9939                           tblptrh	equ	0xFF7
  9940                           tblptrl	equ	0xFF6
  9941                           tablat	equ	0xFF5
  9942                           prodh	equ	0xFF4
  9943                           prodl	equ	0xFF3
  9944                           intcon	equ	0xFF2
  9945                           intcon2	equ	0xFF1
  9946                           intcon3	equ	0xFF0
  9947                           postinc0	equ	0xFEE
  9948                           wreg	equ	0xFE8
  9949                           postdec1	equ	0xFE5
  9950                           fsr1l	equ	0xFE1
  9951                           indf2	equ	0xFDF
  9952                           postinc2	equ	0xFDE
  9953                           postdec2	equ	0xFDD
  9954                           fsr2h	equ	0xFDA
  9955                           fsr2l	equ	0xFD9
  9956                           status	equ	0xFD8
  9957                           
  9958 ;; *************** function _actuatorTest *****************
  9959 ;; Defined at:
  9960 ;;		line 147 in file "Test.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;		None
  9963 ;; Auto vars:     Size  Location     Type
  9964 ;;  i               1   45[BANK0 ] unsigned char 
  9965 ;;  i               1   67[BANK0 ] unsigned char 
  9966 ;;  i               1   66[BANK0 ] unsigned char 
  9967 ;;  i               1   65[BANK0 ] unsigned char 
  9968 ;;  i               1   64[BANK0 ] unsigned char 
  9969 ;;  i               1   63[BANK0 ] unsigned char 
  9970 ;;  i               1   62[BANK0 ] unsigned char 
  9971 ;;  i               1   61[BANK0 ] unsigned char 
  9972 ;;  i               1   60[BANK0 ] unsigned char 
  9973 ;;  i               1   59[BANK0 ] unsigned char 
  9974 ;;  i               1   58[BANK0 ] unsigned char 
  9975 ;;  i               1   57[BANK0 ] unsigned char 
  9976 ;;  i               1   56[BANK0 ] unsigned char 
  9977 ;;  i               1   55[BANK0 ] unsigned char 
  9978 ;;  i               1   54[BANK0 ] unsigned char 
  9979 ;;  i               1   53[BANK0 ] unsigned char 
  9980 ;;  i               1   52[BANK0 ] unsigned char 
  9981 ;;  i               1   51[BANK0 ] unsigned char 
  9982 ;;  i               1   50[BANK0 ] unsigned char 
  9983 ;;  i               1   49[BANK0 ] unsigned char 
  9984 ;;  i               1   48[BANK0 ] unsigned char 
  9985 ;;  i               1   47[BANK0 ] unsigned char 
  9986 ;;  i               1   46[BANK0 ] unsigned char 
  9987 ;; Return value:  Size  Location     Type
  9988 ;;                  1    wreg      void 
  9989 ;; Registers used:
  9990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;Total ram usage:       25 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; Hardware stack levels required when called:   10
 10003 ;; This function calls:
 10004 ;;		_lcdInst
 10005 ;;		_printf
 10006 ;;		_updateServoPosition
 10007 ;; This function is called by:
 10008 ;;		_Test
 10009 ;; This function uses a non-reentrant model
 10010 ;;
 10011                           
 10012                           	psect	text40
 10013  0008B8                     __ptext40:
 10014                           	opt stack 0
 10015  0008B8                     _actuatorTest:
 10016                           	opt stack 19
 10017                           
 10018                           ;Test.c: 149: (INTCONbits.GIE = 1);
 10019                           
 10020                           ;incstack = 0
 10021  0008B8  8EF2               	bsf	intcon,7,c	;volatile
 10022                           
 10023                           ;Test.c: 150: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10024  0008BA  0E01               	movlw	1
 10025  0008BC  EC12  F020         	call	_lcdInst
 10026  0008C0  0E68               	movlw	104
 10027  0008C2  0100               	movlb	0	; () banked
 10028  0008C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10029  0008C6  0EE4               	movlw	228
 10030  0008C8                     u6997:
 10031  0008C8  2EE8               	decfsz	wreg,f,c
 10032  0008CA  D7FE               	bra	u6997
 10033  0008CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10034  0008CE  D7FC               	bra	u6997
 10035  0008D0  F000               	nop	
 10036  0008D2  0E80               	movlw	128
 10037  0008D4  EC12  F020         	call	_lcdInst
 10038                           
 10039                           ;Test.c: 151: printf("ACTUATORS");
 10040  0008D8  0E99               	movlw	low STR_83
 10041  0008DA  0100               	movlb	0	; () banked
 10042  0008DC  6F8E               	movwf	printf@f& (0+255),b
 10043  0008DE  0EFF               	movlw	high STR_83
 10044  0008E0  0100               	movlb	0	; () banked
 10045  0008E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10046  0008E4  EC97  F008         	call	_printf	;wreg free
 10047                           
 10048                           ;Test.c: 152: lcdInst(0b11000000);;
 10049  0008E8  0EC0               	movlw	192
 10050  0008EA  EC12  F020         	call	_lcdInst
 10051                           
 10052                           ;Test.c: 153: printf("PUSH TO START");
 10053  0008EE  0E28               	movlw	low STR_71
 10054  0008F0  0100               	movlb	0	; () banked
 10055  0008F2  6F8E               	movwf	printf@f& (0+255),b
 10056  0008F4  0EFF               	movlw	high STR_71
 10057  0008F6  0100               	movlb	0	; () banked
 10058  0008F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10059  0008FA  EC97  F008         	call	_printf	;wreg free
 10060                           
 10061                           ;Test.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
 10062  0008FE  0E05               	movlw	5
 10063  000900  0100               	movlb	0	; () banked
 10064  000902  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10065  000904  0E0F               	movlw	15
 10066  000906  0100               	movlb	0	; () banked
 10067  000908  6FAB               	movwf	??_actuatorTest& (0+255),b
 10068  00090A  0EF1               	movlw	241
 10069  00090C                     u7007:
 10070  00090C  2EE8               	decfsz	wreg,f,c
 10071  00090E  D7FE               	bra	u7007
 10072  000910  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10073  000912  D7FC               	bra	u7007
 10074  000914  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10075  000916  D7FA               	bra	u7007
 10076  000918                     l1043:
 10077  000918  A281               	btfss	3969,1,c	;volatile
 10078  00091A  D7FE               	goto	l1043
 10079  00091C                     l1046:
 10080  00091C  B281               	btfsc	3969,1,c	;volatile
 10081  00091E  D7FE               	goto	l1046
 10082                           
 10083                           ;Test.c: 157: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10084  000920  0E01               	movlw	1
 10085  000922  EC12  F020         	call	_lcdInst
 10086  000926  0E68               	movlw	104
 10087  000928  0100               	movlb	0	; () banked
 10088  00092A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10089  00092C  0EE4               	movlw	228
 10090  00092E                     u7017:
 10091  00092E  2EE8               	decfsz	wreg,f,c
 10092  000930  D7FE               	bra	u7017
 10093  000932  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10094  000934  D7FC               	bra	u7017
 10095  000936  F000               	nop	
 10096  000938  0E80               	movlw	128
 10097  00093A  EC12  F020         	call	_lcdInst
 10098                           
 10099                           ;Test.c: 162: printf("TST: DC MOTORS");
 10100  00093E  0EE0               	movlw	low STR_85
 10101  000940  0100               	movlb	0	; () banked
 10102  000942  6F8E               	movwf	printf@f& (0+255),b
 10103  000944  0EFE               	movlw	high STR_85
 10104  000946  0100               	movlb	0	; () banked
 10105  000948  6F8F               	movwf	(printf@f+1)& (0+255),b
 10106  00094A  EC97  F008         	call	_printf	;wreg free
 10107                           
 10108                           ;Test.c: 163: lcdInst(0b11000000);;
 10109  00094E  0EC0               	movlw	192
 10110  000950  EC12  F020         	call	_lcdInst
 10111                           
 10112                           ;Test.c: 164: printf("PIN RA5 HIGH.");
 10113  000954  0EFE               	movlw	low STR_86
 10114  000956  0100               	movlb	0	; () banked
 10115  000958  6F8E               	movwf	printf@f& (0+255),b
 10116  00095A  0EFE               	movlw	high STR_86
 10117  00095C  0100               	movlb	0	; () banked
 10118  00095E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10119  000960  EC97  F008         	call	_printf	;wreg free
 10120                           
 10121                           ;Test.c: 165: LATAbits.LATA5 = 1;
 10122  000964  8A89               	bsf	3977,5,c	;volatile
 10123                           
 10124                           ;Test.c: 166: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10125  000966  0E00               	movlw	0
 10126  000968  0100               	movlb	0	; () banked
 10127  00096A  6FE5               	movwf	(_i+1)& (0+255),b
 10128  00096C  0E00               	movlw	0
 10129  00096E  6FE4               	movwf	_i& (0+255),b
 10130                           
 10131                           ; BSR set to: 0
 10132  000970  0100               	movlb	0	; () banked
 10133  000972  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10134  000974  D008               	goto	l6239
 10135  000976  0100               	movlb	0	; () banked
 10136  000978  51E5               	movf	(_i+1)& (0+255),w,b
 10137  00097A  E123               	bnz	l1050
 10138  00097C  0E05               	movlw	5
 10139  00097E  0100               	movlb	0	; () banked
 10140  000980  5DE4               	subwf	_i& (0+255),w,b
 10141  000982  B0D8               	btfsc	status,0,c
 10142  000984  D01E               	goto	l1050
 10143  000986                     l6239:
 10144                           
 10145                           ; BSR set to: 0
 10146  000986  0E00               	movlw	0
 10147  000988  0100               	movlb	0	; () banked
 10148  00098A  6FAD               	movwf	actuatorTest@i& (0+255),b
 10149  00098C                     l6241:
 10150                           
 10151                           ; BSR set to: 0
 10152  00098C  0E63               	movlw	99
 10153  00098E  0100               	movlb	0	; () banked
 10154  000990  65AD               	cpfsgt	actuatorTest@i& (0+255),b
 10155  000992  D001               	goto	l6245
 10156  000994  D00C               	goto	l6249
 10157  000996                     l6245:
 10158                           
 10159                           ; BSR set to: 0
 10160  000996  0E68               	movlw	104
 10161  000998  0100               	movlb	0	; () banked
 10162  00099A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10163  00099C  0EE4               	movlw	228
 10164  00099E                     u7027:
 10165  00099E  2EE8               	decfsz	wreg,f,c
 10166  0009A0  D7FE               	bra	u7027
 10167  0009A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10168  0009A4  D7FC               	bra	u7027
 10169  0009A6  F000               	nop	
 10170  0009A8  0100               	movlb	0	; () banked
 10171  0009AA  2BAD               	incf	actuatorTest@i& (0+255),f,b
 10172  0009AC  D7EF               	goto	l6241
 10173  0009AE                     l6249:
 10174                           
 10175                           ; BSR set to: 0
 10176  0009AE  0100               	movlb	0	; () banked
 10177  0009B0  4BE4               	infsnz	_i& (0+255),f,b
 10178  0009B2  2BE5               	incf	(_i+1)& (0+255),f,b
 10179                           
 10180                           ; BSR set to: 0
 10181  0009B4  0100               	movlb	0	; () banked
 10182  0009B6  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10183  0009B8  D7E6               	goto	l6239
 10184  0009BA  0100               	movlb	0	; () banked
 10185  0009BC  51E5               	movf	(_i+1)& (0+255),w,b
 10186  0009BE  E101               	bnz	u4760
 10187  0009C0  D7DD               	goto	L6
 10188  0009C2                     u4760:
 10189  0009C2                     l1050:
 10190                           
 10191                           ; BSR set to: 0
 10192                           ;Test.c: 167: LATAbits.LATA5 = 0;
 10193  0009C2  9A89               	bcf	3977,5,c	;volatile
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;Test.c: 168: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10197  0009C4  0E01               	movlw	1
 10198  0009C6  EC12  F020         	call	_lcdInst
 10199  0009CA  0E68               	movlw	104
 10200  0009CC  0100               	movlb	0	; () banked
 10201  0009CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10202  0009D0  0EE4               	movlw	228
 10203  0009D2                     u7037:
 10204  0009D2  2EE8               	decfsz	wreg,f,c
 10205  0009D4  D7FE               	bra	u7037
 10206  0009D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10207  0009D8  D7FC               	bra	u7037
 10208  0009DA  F000               	nop	
 10209  0009DC  0E80               	movlw	128
 10210  0009DE  EC12  F020         	call	_lcdInst
 10211                           
 10212                           ;Test.c: 174: printf("TST: COND SOLN'D");
 10213  0009E2  0ED1               	movlw	low STR_87
 10214  0009E4  0100               	movlb	0	; () banked
 10215  0009E6  6F8E               	movwf	printf@f& (0+255),b
 10216  0009E8  0EFC               	movlw	high STR_87
 10217  0009EA  0100               	movlb	0	; () banked
 10218  0009EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10219  0009EE  EC97  F008         	call	_printf	;wreg free
 10220                           
 10221                           ;Test.c: 175: lcdInst(0b11000000);;
 10222  0009F2  0EC0               	movlw	192
 10223  0009F4  EC12  F020         	call	_lcdInst
 10224                           
 10225                           ;Test.c: 176: printf("PIN RA3...");
 10226  0009F8  0E78               	movlw	low STR_88
 10227  0009FA  0100               	movlb	0	; () banked
 10228  0009FC  6F8E               	movwf	printf@f& (0+255),b
 10229  0009FE  0EFF               	movlw	high STR_88
 10230  000A00  0100               	movlb	0	; () banked
 10231  000A02  6F8F               	movwf	(printf@f+1)& (0+255),b
 10232  000A04  EC97  F008         	call	_printf	;wreg free
 10233                           
 10234                           ;Test.c: 177: for(i=0;i<5;i++){
 10235  000A08  0E00               	movlw	0
 10236  000A0A  0100               	movlb	0	; () banked
 10237  000A0C  6FE5               	movwf	(_i+1)& (0+255),b
 10238  000A0E  0E00               	movlw	0
 10239  000A10  6FE4               	movwf	_i& (0+255),b
 10240                           
 10241                           ; BSR set to: 0
 10242  000A12  0100               	movlb	0	; () banked
 10243  000A14  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10244  000A16  D008               	goto	l1053
 10245  000A18  0100               	movlb	0	; () banked
 10246  000A1A  51E5               	movf	(_i+1)& (0+255),w,b
 10247  000A1C  E12C               	bnz	l1054
 10248  000A1E  0E05               	movlw	5
 10249  000A20  0100               	movlb	0	; () banked
 10250  000A22  5DE4               	subwf	_i& (0+255),w,b
 10251  000A24  B0D8               	btfsc	status,0,c
 10252  000A26  D027               	goto	l1054
 10253  000A28                     l1053:
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;Test.c: 178: LATAbits.LATA3 = 0;
 10257  000A28  9689               	bcf	3977,3,c	;volatile
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;Test.c: 179: _delay((unsigned long)((100)*(32000000/4000.0)));
 10261  000A2A  0E05               	movlw	5
 10262  000A2C  0100               	movlb	0	; () banked
 10263  000A2E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10264  000A30  0E0F               	movlw	15
 10265  000A32  0100               	movlb	0	; () banked
 10266  000A34  6FAB               	movwf	??_actuatorTest& (0+255),b
 10267  000A36  0EF1               	movlw	241
 10268  000A38                     u7047:
 10269  000A38  2EE8               	decfsz	wreg,f,c
 10270  000A3A  D7FE               	bra	u7047
 10271  000A3C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10272  000A3E  D7FC               	bra	u7047
 10273  000A40  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10274  000A42  D7FA               	bra	u7047
 10275                           
 10276                           ;Test.c: 180: LATAbits.LATA3 = ~0;
 10277  000A44  8689               	bsf	3977,3,c	;volatile
 10278                           
 10279                           ;Test.c: 181: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10280  000A46  0E25               	movlw	37
 10281  000A48  0100               	movlb	0	; () banked
 10282  000A4A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10283  000A4C  0E87               	movlw	135
 10284  000A4E  0100               	movlb	0	; () banked
 10285  000A50  6FAB               	movwf	??_actuatorTest& (0+255),b
 10286  000A52  0E8B               	movlw	139
 10287  000A54                     u7057:
 10288  000A54  2EE8               	decfsz	wreg,f,c
 10289  000A56  D7FE               	bra	u7057
 10290  000A58  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10291  000A5A  D7FC               	bra	u7057
 10292  000A5C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10293  000A5E  D7FA               	bra	u7057
 10294  000A60  D000               	nop2	
 10295  000A62  0100               	movlb	0	; () banked
 10296  000A64  4BE4               	infsnz	_i& (0+255),f,b
 10297  000A66  2BE5               	incf	(_i+1)& (0+255),f,b
 10298  000A68  0100               	movlb	0	; () banked
 10299  000A6A  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10300  000A6C  D7DD               	goto	l1053
 10301  000A6E  0100               	movlb	0	; () banked
 10302  000A70  51E5               	movf	(_i+1)& (0+255),w,b
 10303  000A72  E101               	bnz	u4780
 10304  000A74  D7D4               	goto	L7
 10305  000A76                     u4780:
 10306  000A76                     l1054:
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;Test.c: 182: }
 10310                           ;Test.c: 183: LATAbits.LATA3 = ~0;
 10311  000A76  8689               	bsf	3977,3,c	;volatile
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;Test.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10315  000A78  0E01               	movlw	1
 10316  000A7A  EC12  F020         	call	_lcdInst
 10317  000A7E  0E68               	movlw	104
 10318  000A80  0100               	movlb	0	; () banked
 10319  000A82  6FAB               	movwf	??_actuatorTest& (0+255),b
 10320  000A84  0EE4               	movlw	228
 10321  000A86                     u7067:
 10322  000A86  2EE8               	decfsz	wreg,f,c
 10323  000A88  D7FE               	bra	u7067
 10324  000A8A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10325  000A8C  D7FC               	bra	u7067
 10326  000A8E  F000               	nop	
 10327  000A90  0E80               	movlw	128
 10328  000A92  EC12  F020         	call	_lcdInst
 10329                           
 10330                           ;Test.c: 190: printf("TST: PUSH SOLN'D");
 10331  000A96  0EE2               	movlw	low STR_89
 10332  000A98  0100               	movlb	0	; () banked
 10333  000A9A  6F8E               	movwf	printf@f& (0+255),b
 10334  000A9C  0EFC               	movlw	high STR_89
 10335  000A9E  0100               	movlb	0	; () banked
 10336  000AA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10337  000AA2  EC97  F008         	call	_printf	;wreg free
 10338                           
 10339                           ;Test.c: 191: lcdInst(0b11000000);;
 10340  000AA6  0EC0               	movlw	192
 10341  000AA8  EC12  F020         	call	_lcdInst
 10342                           
 10343                           ;Test.c: 192: printf("PIN RA4...");
 10344  000AAC  0E83               	movlw	low STR_90
 10345  000AAE  0100               	movlb	0	; () banked
 10346  000AB0  6F8E               	movwf	printf@f& (0+255),b
 10347  000AB2  0EFF               	movlw	high STR_90
 10348  000AB4  0100               	movlb	0	; () banked
 10349  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10350  000AB8  EC97  F008         	call	_printf	;wreg free
 10351                           
 10352                           ;Test.c: 193: for(i=0;i<5;i++){
 10353  000ABC  0E00               	movlw	0
 10354  000ABE  0100               	movlb	0	; () banked
 10355  000AC0  6FE5               	movwf	(_i+1)& (0+255),b
 10356  000AC2  0E00               	movlw	0
 10357  000AC4  6FE4               	movwf	_i& (0+255),b
 10358                           
 10359                           ; BSR set to: 0
 10360  000AC6  0100               	movlb	0	; () banked
 10361  000AC8  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10362  000ACA  D008               	goto	l1055
 10363  000ACC  0100               	movlb	0	; () banked
 10364  000ACE  51E5               	movf	(_i+1)& (0+255),w,b
 10365  000AD0  E12C               	bnz	l1056
 10366  000AD2  0E05               	movlw	5
 10367  000AD4  0100               	movlb	0	; () banked
 10368  000AD6  5DE4               	subwf	_i& (0+255),w,b
 10369  000AD8  B0D8               	btfsc	status,0,c
 10370  000ADA  D027               	goto	l1056
 10371  000ADC                     l1055:
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;Test.c: 194: LATAbits.LATA4 = 0;
 10375  000ADC  9889               	bcf	3977,4,c	;volatile
 10376                           
 10377                           ; BSR set to: 0
 10378                           ;Test.c: 195: _delay((unsigned long)((100)*(32000000/4000.0)));
 10379  000ADE  0E05               	movlw	5
 10380  000AE0  0100               	movlb	0	; () banked
 10381  000AE2  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10382  000AE4  0E0F               	movlw	15
 10383  000AE6  0100               	movlb	0	; () banked
 10384  000AE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10385  000AEA  0EF1               	movlw	241
 10386  000AEC                     u7077:
 10387  000AEC  2EE8               	decfsz	wreg,f,c
 10388  000AEE  D7FE               	bra	u7077
 10389  000AF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10390  000AF2  D7FC               	bra	u7077
 10391  000AF4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10392  000AF6  D7FA               	bra	u7077
 10393                           
 10394                           ;Test.c: 196: LATAbits.LATA4 = ~0;
 10395  000AF8  8889               	bsf	3977,4,c	;volatile
 10396                           
 10397                           ;Test.c: 197: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10398  000AFA  0E25               	movlw	37
 10399  000AFC  0100               	movlb	0	; () banked
 10400  000AFE  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10401  000B00  0E87               	movlw	135
 10402  000B02  0100               	movlb	0	; () banked
 10403  000B04  6FAB               	movwf	??_actuatorTest& (0+255),b
 10404  000B06  0E8B               	movlw	139
 10405  000B08                     u7087:
 10406  000B08  2EE8               	decfsz	wreg,f,c
 10407  000B0A  D7FE               	bra	u7087
 10408  000B0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10409  000B0E  D7FC               	bra	u7087
 10410  000B10  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10411  000B12  D7FA               	bra	u7087
 10412  000B14  D000               	nop2	
 10413  000B16  0100               	movlb	0	; () banked
 10414  000B18  4BE4               	infsnz	_i& (0+255),f,b
 10415  000B1A  2BE5               	incf	(_i+1)& (0+255),f,b
 10416  000B1C  0100               	movlb	0	; () banked
 10417  000B1E  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10418  000B20  D7DD               	goto	l1055
 10419  000B22  0100               	movlb	0	; () banked
 10420  000B24  51E5               	movf	(_i+1)& (0+255),w,b
 10421  000B26  E101               	bnz	u4800
 10422  000B28  D7D4               	goto	L8
 10423  000B2A                     u4800:
 10424  000B2A                     l1056:
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;Test.c: 198: }
 10428                           ;Test.c: 199: LATAbits.LATA4 = ~0;
 10429  000B2A  8889               	bsf	3977,4,c	;volatile
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10433  000B2C  0E01               	movlw	1
 10434  000B2E  EC12  F020         	call	_lcdInst
 10435  000B32  0E68               	movlw	104
 10436  000B34  0100               	movlb	0	; () banked
 10437  000B36  6FAB               	movwf	??_actuatorTest& (0+255),b
 10438  000B38  0EE4               	movlw	228
 10439  000B3A                     u7097:
 10440  000B3A  2EE8               	decfsz	wreg,f,c
 10441  000B3C  D7FE               	bra	u7097
 10442  000B3E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10443  000B40  D7FC               	bra	u7097
 10444  000B42  F000               	nop	
 10445  000B44  0E80               	movlw	128
 10446  000B46  EC12  F020         	call	_lcdInst
 10447                           
 10448                           ;Test.c: 203: machine_state = Sorting_state;
 10449  000B4A  0E01               	movlw	1
 10450  000B4C  0100               	movlb	0	; () banked
 10451  000B4E  6FFC               	movwf	_machine_state& (0+255),b
 10452                           
 10453                           ; BSR set to: 0
 10454                           ;Test.c: 204: was_low_1 = 0;
 10455  000B50  0E00               	movlw	0
 10456  000B52  6E7A               	movwf	_was_low_1+1,c	;volatile
 10457  000B54  0E00               	movlw	0
 10458  000B56  6E79               	movwf	_was_low_1,c	;volatile
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;Test.c: 205: was_low_1 = 0;
 10462  000B58  0E00               	movlw	0
 10463  000B5A  6E7A               	movwf	_was_low_1+1,c	;volatile
 10464  000B5C  0E00               	movlw	0
 10465  000B5E  6E79               	movwf	_was_low_1,c	;volatile
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;Test.c: 212: printf("TST: PAN SERVO");
 10469  000B60  0EC2               	movlw	low STR_91
 10470  000B62  0100               	movlb	0	; () banked
 10471  000B64  6F8E               	movwf	printf@f& (0+255),b
 10472  000B66  0EFE               	movlw	high STR_91
 10473  000B68  0100               	movlb	0	; () banked
 10474  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10475  000B6C  EC97  F008         	call	_printf	;wreg free
 10476                           
 10477                           ;Test.c: 213: lcdInst(0b11000000);;
 10478  000B70  0EC0               	movlw	192
 10479  000B72  EC12  F020         	call	_lcdInst
 10480                           
 10481                           ;Test.c: 214: printf("MIDDLE -- 2s    ");
 10482  000B76  0E7C               	movlw	low STR_92
 10483  000B78  0100               	movlb	0	; () banked
 10484  000B7A  6F8E               	movwf	printf@f& (0+255),b
 10485  000B7C  0EFC               	movlw	high STR_92
 10486  000B7E  0100               	movlb	0	; () banked
 10487  000B80  6F8F               	movwf	(printf@f+1)& (0+255),b
 10488  000B82  EC97  F008         	call	_printf	;wreg free
 10489                           
 10490                           ;Test.c: 215: updateServoPosition(1500, 1);
 10491  000B86  0E05               	movlw	5
 10492  000B88  0100               	movlb	0	; () banked
 10493  000B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10494  000B8C  0EDC               	movlw	220
 10495  000B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10496  000B90  0E00               	movlw	0
 10497  000B92  0100               	movlb	0	; () banked
 10498  000B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10499  000B96  0E01               	movlw	1
 10500  000B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10501  000B9A  EC7E  F01A         	call	_updateServoPosition	;wreg free
 10502                           
 10503                           ;Test.c: 216: TMR1ON = 1;
 10504  000B9E  80CD               	bsf	4045,0,c	;volatile
 10505                           
 10506                           ;Test.c: 217: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10507  000BA0  0E00               	movlw	0
 10508  000BA2  0100               	movlb	0	; () banked
 10509  000BA4  6FAE               	movwf	actuatorTest@i_1562& (0+255),b
 10510  000BA6                     l6325:
 10511                           
 10512                           ; BSR set to: 0
 10513  000BA6  0E63               	movlw	99
 10514  000BA8  0100               	movlb	0	; () banked
 10515  000BAA  65AE               	cpfsgt	actuatorTest@i_1562& (0+255),b
 10516  000BAC  D001               	goto	l6329
 10517  000BAE  D00C               	goto	l6333
 10518  000BB0                     l6329:
 10519                           
 10520                           ; BSR set to: 0
 10521  000BB0  0E68               	movlw	104
 10522  000BB2  0100               	movlb	0	; () banked
 10523  000BB4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10524  000BB6  0EE4               	movlw	228
 10525  000BB8                     u7107:
 10526  000BB8  2EE8               	decfsz	wreg,f,c
 10527  000BBA  D7FE               	bra	u7107
 10528  000BBC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10529  000BBE  D7FC               	bra	u7107
 10530  000BC0  F000               	nop	
 10531  000BC2  0100               	movlb	0	; () banked
 10532  000BC4  2BAE               	incf	actuatorTest@i_1562& (0+255),f,b
 10533  000BC6  D7EF               	goto	l6325
 10534  000BC8                     l6333:
 10535                           
 10536                           ; BSR set to: 0
 10537  000BC8  0E00               	movlw	0
 10538  000BCA  0100               	movlb	0	; () banked
 10539  000BCC  6FAF               	movwf	actuatorTest@i_1563& (0+255),b
 10540  000BCE                     l6335:
 10541                           
 10542                           ; BSR set to: 0
 10543  000BCE  0E63               	movlw	99
 10544  000BD0  0100               	movlb	0	; () banked
 10545  000BD2  65AF               	cpfsgt	actuatorTest@i_1563& (0+255),b
 10546  000BD4  D001               	goto	l6339
 10547  000BD6  D00C               	goto	l6343
 10548  000BD8                     l6339:
 10549                           
 10550                           ; BSR set to: 0
 10551  000BD8  0E68               	movlw	104
 10552  000BDA  0100               	movlb	0	; () banked
 10553  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10554  000BDE  0EE4               	movlw	228
 10555  000BE0                     u7117:
 10556  000BE0  2EE8               	decfsz	wreg,f,c
 10557  000BE2  D7FE               	bra	u7117
 10558  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10559  000BE6  D7FC               	bra	u7117
 10560  000BE8  F000               	nop	
 10561  000BEA  0100               	movlb	0	; () banked
 10562  000BEC  2BAF               	incf	actuatorTest@i_1563& (0+255),f,b
 10563  000BEE  D7EF               	goto	l6335
 10564  000BF0                     l6343:
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;Test.c: 219: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10568  000BF0  0E80               	movlw	128
 10569  000BF2  EC12  F020         	call	_lcdInst
 10570  000BF6  0EC0               	movlw	192
 10571  000BF8  EC12  F020         	call	_lcdInst
 10572                           
 10573                           ;Test.c: 220: printf("RIGHT -- 2s     ");
 10574  000BFC  0E6B               	movlw	low STR_93
 10575  000BFE  0100               	movlb	0	; () banked
 10576  000C00  6F8E               	movwf	printf@f& (0+255),b
 10577  000C02  0EFC               	movlw	high STR_93
 10578  000C04  0100               	movlb	0	; () banked
 10579  000C06  6F8F               	movwf	(printf@f+1)& (0+255),b
 10580  000C08  EC97  F008         	call	_printf	;wreg free
 10581                           
 10582                           ;Test.c: 221: updateServoPosition(1000, 1);
 10583  000C0C  0E03               	movlw	3
 10584  000C0E  0100               	movlb	0	; () banked
 10585  000C10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10586  000C12  0EE8               	movlw	232
 10587  000C14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10588  000C16  0E00               	movlw	0
 10589  000C18  0100               	movlb	0	; () banked
 10590  000C1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10591  000C1C  0E01               	movlw	1
 10592  000C1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10593  000C20  EC7E  F01A         	call	_updateServoPosition	;wreg free
 10594                           
 10595                           ;Test.c: 222: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10596  000C24  0E00               	movlw	0
 10597  000C26  0100               	movlb	0	; () banked
 10598  000C28  6FB0               	movwf	actuatorTest@i_1565& (0+255),b
 10599  000C2A                     l6351:
 10600                           
 10601                           ; BSR set to: 0
 10602  000C2A  0E63               	movlw	99
 10603  000C2C  0100               	movlb	0	; () banked
 10604  000C2E  65B0               	cpfsgt	actuatorTest@i_1565& (0+255),b
 10605  000C30  D001               	goto	l6355
 10606  000C32  D00C               	goto	l6359
 10607  000C34                     l6355:
 10608                           
 10609                           ; BSR set to: 0
 10610  000C34  0E68               	movlw	104
 10611  000C36  0100               	movlb	0	; () banked
 10612  000C38  6FAB               	movwf	??_actuatorTest& (0+255),b
 10613  000C3A  0EE4               	movlw	228
 10614  000C3C                     u7127:
 10615  000C3C  2EE8               	decfsz	wreg,f,c
 10616  000C3E  D7FE               	bra	u7127
 10617  000C40  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10618  000C42  D7FC               	bra	u7127
 10619  000C44  F000               	nop	
 10620  000C46  0100               	movlb	0	; () banked
 10621  000C48  2BB0               	incf	actuatorTest@i_1565& (0+255),f,b
 10622  000C4A  D7EF               	goto	l6351
 10623  000C4C                     l6359:
 10624                           
 10625                           ; BSR set to: 0
 10626  000C4C  0E00               	movlw	0
 10627  000C4E  0100               	movlb	0	; () banked
 10628  000C50  6FB1               	movwf	actuatorTest@i_1566& (0+255),b
 10629  000C52                     l6361:
 10630                           
 10631                           ; BSR set to: 0
 10632  000C52  0E63               	movlw	99
 10633  000C54  0100               	movlb	0	; () banked
 10634  000C56  65B1               	cpfsgt	actuatorTest@i_1566& (0+255),b
 10635  000C58  D001               	goto	l6365
 10636  000C5A  D00C               	goto	l6369
 10637  000C5C                     l6365:
 10638                           
 10639                           ; BSR set to: 0
 10640  000C5C  0E68               	movlw	104
 10641  000C5E  0100               	movlb	0	; () banked
 10642  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 10643  000C62  0EE4               	movlw	228
 10644  000C64                     u7137:
 10645  000C64  2EE8               	decfsz	wreg,f,c
 10646  000C66  D7FE               	bra	u7137
 10647  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10648  000C6A  D7FC               	bra	u7137
 10649  000C6C  F000               	nop	
 10650  000C6E  0100               	movlb	0	; () banked
 10651  000C70  2BB1               	incf	actuatorTest@i_1566& (0+255),f,b
 10652  000C72  D7EF               	goto	l6361
 10653  000C74                     l6369:
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;Test.c: 224: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10657  000C74  0E80               	movlw	128
 10658  000C76  EC12  F020         	call	_lcdInst
 10659  000C7A  0EC0               	movlw	192
 10660  000C7C  EC12  F020         	call	_lcdInst
 10661                           
 10662                           ;Test.c: 225: printf("LEFT -- 2s      ");
 10663  000C80  0E49               	movlw	low STR_94
 10664  000C82  0100               	movlb	0	; () banked
 10665  000C84  6F8E               	movwf	printf@f& (0+255),b
 10666  000C86  0EFC               	movlw	high STR_94
 10667  000C88  0100               	movlb	0	; () banked
 10668  000C8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10669  000C8C  EC97  F008         	call	_printf	;wreg free
 10670                           
 10671                           ;Test.c: 226: updateServoPosition(2000, 1);
 10672  000C90  0E07               	movlw	7
 10673  000C92  0100               	movlb	0	; () banked
 10674  000C94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10675  000C96  0ED0               	movlw	208
 10676  000C98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10677  000C9A  0E00               	movlw	0
 10678  000C9C  0100               	movlb	0	; () banked
 10679  000C9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10680  000CA0  0E01               	movlw	1
 10681  000CA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10682  000CA4  EC7E  F01A         	call	_updateServoPosition	;wreg free
 10683                           
 10684                           ;Test.c: 227: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10685  000CA8  0E00               	movlw	0
 10686  000CAA  0100               	movlb	0	; () banked
 10687  000CAC  6FB2               	movwf	actuatorTest@i_1568& (0+255),b
 10688  000CAE                     l6377:
 10689                           
 10690                           ; BSR set to: 0
 10691  000CAE  0E63               	movlw	99
 10692  000CB0  0100               	movlb	0	; () banked
 10693  000CB2  65B2               	cpfsgt	actuatorTest@i_1568& (0+255),b
 10694  000CB4  D001               	goto	l6381
 10695  000CB6  D00C               	goto	l6385
 10696  000CB8                     l6381:
 10697                           
 10698                           ; BSR set to: 0
 10699  000CB8  0E68               	movlw	104
 10700  000CBA  0100               	movlb	0	; () banked
 10701  000CBC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10702  000CBE  0EE4               	movlw	228
 10703  000CC0                     u7147:
 10704  000CC0  2EE8               	decfsz	wreg,f,c
 10705  000CC2  D7FE               	bra	u7147
 10706  000CC4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10707  000CC6  D7FC               	bra	u7147
 10708  000CC8  F000               	nop	
 10709  000CCA  0100               	movlb	0	; () banked
 10710  000CCC  2BB2               	incf	actuatorTest@i_1568& (0+255),f,b
 10711  000CCE  D7EF               	goto	l6377
 10712  000CD0                     l6385:
 10713                           
 10714                           ; BSR set to: 0
 10715  000CD0  0E00               	movlw	0
 10716  000CD2  0100               	movlb	0	; () banked
 10717  000CD4  6FB3               	movwf	actuatorTest@i_1569& (0+255),b
 10718  000CD6                     l6387:
 10719                           
 10720                           ; BSR set to: 0
 10721  000CD6  0E63               	movlw	99
 10722  000CD8  0100               	movlb	0	; () banked
 10723  000CDA  65B3               	cpfsgt	actuatorTest@i_1569& (0+255),b
 10724  000CDC  D001               	goto	l6391
 10725  000CDE  D00C               	goto	l6395
 10726  000CE0                     l6391:
 10727                           
 10728                           ; BSR set to: 0
 10729  000CE0  0E68               	movlw	104
 10730  000CE2  0100               	movlb	0	; () banked
 10731  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10732  000CE6  0EE4               	movlw	228
 10733  000CE8                     u7157:
 10734  000CE8  2EE8               	decfsz	wreg,f,c
 10735  000CEA  D7FE               	bra	u7157
 10736  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10737  000CEE  D7FC               	bra	u7157
 10738  000CF0  F000               	nop	
 10739  000CF2  0100               	movlb	0	; () banked
 10740  000CF4  2BB3               	incf	actuatorTest@i_1569& (0+255),f,b
 10741  000CF6  D7EF               	goto	l6387
 10742  000CF8                     l6395:
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;Test.c: 229: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10746  000CF8  0E80               	movlw	128
 10747  000CFA  EC12  F020         	call	_lcdInst
 10748  000CFE  0EC0               	movlw	192
 10749  000D00  EC12  F020         	call	_lcdInst
 10750                           
 10751                           ;Test.c: 230: printf("MID-LEFT -- 2s  ");
 10752  000D04  0E8D               	movlw	low STR_95
 10753  000D06  0100               	movlb	0	; () banked
 10754  000D08  6F8E               	movwf	printf@f& (0+255),b
 10755  000D0A  0EFC               	movlw	high STR_95
 10756  000D0C  0100               	movlb	0	; () banked
 10757  000D0E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10758  000D10  EC97  F008         	call	_printf	;wreg free
 10759                           
 10760                           ;Test.c: 231: updateServoPosition(1666, 1);
 10761  000D14  0E06               	movlw	6
 10762  000D16  0100               	movlb	0	; () banked
 10763  000D18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10764  000D1A  0E82               	movlw	130
 10765  000D1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10766  000D1E  0E00               	movlw	0
 10767  000D20  0100               	movlb	0	; () banked
 10768  000D22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10769  000D24  0E01               	movlw	1
 10770  000D26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10771  000D28  EC7E  F01A         	call	_updateServoPosition	;wreg free
 10772                           
 10773                           ;Test.c: 232: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10774  000D2C  0E00               	movlw	0
 10775  000D2E  0100               	movlb	0	; () banked
 10776  000D30  6FB4               	movwf	actuatorTest@i_1571& (0+255),b
 10777  000D32                     l6403:
 10778                           
 10779                           ; BSR set to: 0
 10780  000D32  0E63               	movlw	99
 10781  000D34  0100               	movlb	0	; () banked
 10782  000D36  65B4               	cpfsgt	actuatorTest@i_1571& (0+255),b
 10783  000D38  D001               	goto	l6407
 10784  000D3A  D00C               	goto	l6411
 10785  000D3C                     l6407:
 10786                           
 10787                           ; BSR set to: 0
 10788  000D3C  0E68               	movlw	104
 10789  000D3E  0100               	movlb	0	; () banked
 10790  000D40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10791  000D42  0EE4               	movlw	228
 10792  000D44                     u7167:
 10793  000D44  2EE8               	decfsz	wreg,f,c
 10794  000D46  D7FE               	bra	u7167
 10795  000D48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10796  000D4A  D7FC               	bra	u7167
 10797  000D4C  F000               	nop	
 10798  000D4E  0100               	movlb	0	; () banked
 10799  000D50  2BB4               	incf	actuatorTest@i_1571& (0+255),f,b
 10800  000D52  D7EF               	goto	l6403
 10801  000D54                     l6411:
 10802                           
 10803                           ; BSR set to: 0
 10804  000D54  0E00               	movlw	0
 10805  000D56  0100               	movlb	0	; () banked
 10806  000D58  6FB5               	movwf	actuatorTest@i_1572& (0+255),b
 10807  000D5A                     l6413:
 10808                           
 10809                           ; BSR set to: 0
 10810  000D5A  0E63               	movlw	99
 10811  000D5C  0100               	movlb	0	; () banked
 10812  000D5E  65B5               	cpfsgt	actuatorTest@i_1572& (0+255),b
 10813  000D60  D001               	goto	l6417
 10814  000D62  D00C               	goto	l6421
 10815  000D64                     l6417:
 10816                           
 10817                           ; BSR set to: 0
 10818  000D64  0E68               	movlw	104
 10819  000D66  0100               	movlb	0	; () banked
 10820  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 10821  000D6A  0EE4               	movlw	228
 10822  000D6C                     u7177:
 10823  000D6C  2EE8               	decfsz	wreg,f,c
 10824  000D6E  D7FE               	bra	u7177
 10825  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10826  000D72  D7FC               	bra	u7177
 10827  000D74  F000               	nop	
 10828  000D76  0100               	movlb	0	; () banked
 10829  000D78  2BB5               	incf	actuatorTest@i_1572& (0+255),f,b
 10830  000D7A  D7EF               	goto	l6413
 10831  000D7C                     l6421:
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;Test.c: 234: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10835  000D7C  0E80               	movlw	128
 10836  000D7E  EC12  F020         	call	_lcdInst
 10837  000D82  0EC0               	movlw	192
 10838  000D84  EC12  F020         	call	_lcdInst
 10839                           
 10840                           ;Test.c: 235: printf("MID-RIGHT -- 2s ");
 10841  000D88  0E9E               	movlw	low STR_96
 10842  000D8A  0100               	movlb	0	; () banked
 10843  000D8C  6F8E               	movwf	printf@f& (0+255),b
 10844  000D8E  0EFC               	movlw	high STR_96
 10845  000D90  0100               	movlb	0	; () banked
 10846  000D92  6F8F               	movwf	(printf@f+1)& (0+255),b
 10847  000D94  EC97  F008         	call	_printf	;wreg free
 10848                           
 10849                           ;Test.c: 236: updateServoPosition(1333, 1);
 10850  000D98  0E05               	movlw	5
 10851  000D9A  0100               	movlb	0	; () banked
 10852  000D9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10853  000D9E  0E35               	movlw	53
 10854  000DA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10855  000DA2  0E00               	movlw	0
 10856  000DA4  0100               	movlb	0	; () banked
 10857  000DA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10858  000DA8  0E01               	movlw	1
 10859  000DAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10860  000DAC  EC7E  F01A         	call	_updateServoPosition	;wreg free
 10861                           
 10862                           ;Test.c: 237: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10863  000DB0  0E00               	movlw	0
 10864  000DB2  0100               	movlb	0	; () banked
 10865  000DB4  6FB6               	movwf	actuatorTest@i_1574& (0+255),b
 10866  000DB6                     l6429:
 10867                           
 10868                           ; BSR set to: 0
 10869  000DB6  0E63               	movlw	99
 10870  000DB8  0100               	movlb	0	; () banked
 10871  000DBA  65B6               	cpfsgt	actuatorTest@i_1574& (0+255),b
 10872  000DBC  D001               	goto	l6433
 10873  000DBE  D00C               	goto	l6437
 10874  000DC0                     l6433:
 10875                           
 10876                           ; BSR set to: 0
 10877  000DC0  0E68               	movlw	104
 10878  000DC2  0100               	movlb	0	; () banked
 10879  000DC4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10880  000DC6  0EE4               	movlw	228
 10881  000DC8                     u7187:
 10882  000DC8  2EE8               	decfsz	wreg,f,c
 10883  000DCA  D7FE               	bra	u7187
 10884  000DCC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10885  000DCE  D7FC               	bra	u7187
 10886  000DD0  F000               	nop	
 10887  000DD2  0100               	movlb	0	; () banked
 10888  000DD4  2BB6               	incf	actuatorTest@i_1574& (0+255),f,b
 10889  000DD6  D7EF               	goto	l6429
 10890  000DD8                     l6437:
 10891                           
 10892                           ; BSR set to: 0
 10893  000DD8  0E00               	movlw	0
 10894  000DDA  0100               	movlb	0	; () banked
 10895  000DDC  6FB7               	movwf	actuatorTest@i_1575& (0+255),b
 10896  000DDE                     l6439:
 10897                           
 10898                           ; BSR set to: 0
 10899  000DDE  0E63               	movlw	99
 10900  000DE0  0100               	movlb	0	; () banked
 10901  000DE2  65B7               	cpfsgt	actuatorTest@i_1575& (0+255),b
 10902  000DE4  D001               	goto	l6443
 10903  000DE6  D00C               	goto	l6447
 10904  000DE8                     l6443:
 10905                           
 10906                           ; BSR set to: 0
 10907  000DE8  0E68               	movlw	104
 10908  000DEA  0100               	movlb	0	; () banked
 10909  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10910  000DEE  0EE4               	movlw	228
 10911  000DF0                     u7197:
 10912  000DF0  2EE8               	decfsz	wreg,f,c
 10913  000DF2  D7FE               	bra	u7197
 10914  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10915  000DF6  D7FC               	bra	u7197
 10916  000DF8  F000               	nop	
 10917  000DFA  0100               	movlb	0	; () banked
 10918  000DFC  2BB7               	incf	actuatorTest@i_1575& (0+255),f,b
 10919  000DFE  D7EF               	goto	l6439
 10920  000E00                     l6447:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;Test.c: 239: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10924  000E00  0E80               	movlw	128
 10925  000E02  EC12  F020         	call	_lcdInst
 10926  000E06  0EC0               	movlw	192
 10927  000E08  EC12  F020         	call	_lcdInst
 10928                           
 10929                           ;Test.c: 240: printf("MID -- 2s       ");
 10930  000E0C  0E27               	movlw	low STR_97
 10931  000E0E  0100               	movlb	0	; () banked
 10932  000E10  6F8E               	movwf	printf@f& (0+255),b
 10933  000E12  0EFC               	movlw	high STR_97
 10934  000E14  0100               	movlb	0	; () banked
 10935  000E16  6F8F               	movwf	(printf@f+1)& (0+255),b
 10936  000E18  EC97  F008         	call	_printf	;wreg free
 10937                           
 10938                           ;Test.c: 241: updateServoPosition(1500, 1);
 10939  000E1C  0E05               	movlw	5
 10940  000E1E  0100               	movlb	0	; () banked
 10941  000E20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10942  000E22  0EDC               	movlw	220
 10943  000E24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10944  000E26  0E00               	movlw	0
 10945  000E28  0100               	movlb	0	; () banked
 10946  000E2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10947  000E2C  0E01               	movlw	1
 10948  000E2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10949  000E30  EC7E  F01A         	call	_updateServoPosition	;wreg free
 10950                           
 10951                           ;Test.c: 242: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10952  000E34  0E00               	movlw	0
 10953  000E36  0100               	movlb	0	; () banked
 10954  000E38  6FB8               	movwf	actuatorTest@i_1577& (0+255),b
 10955  000E3A                     l6455:
 10956                           
 10957                           ; BSR set to: 0
 10958  000E3A  0E63               	movlw	99
 10959  000E3C  0100               	movlb	0	; () banked
 10960  000E3E  65B8               	cpfsgt	actuatorTest@i_1577& (0+255),b
 10961  000E40  D001               	goto	l6459
 10962  000E42  D00C               	goto	l6463
 10963  000E44                     l6459:
 10964                           
 10965                           ; BSR set to: 0
 10966  000E44  0E68               	movlw	104
 10967  000E46  0100               	movlb	0	; () banked
 10968  000E48  6FAB               	movwf	??_actuatorTest& (0+255),b
 10969  000E4A  0EE4               	movlw	228
 10970  000E4C                     u7207:
 10971  000E4C  2EE8               	decfsz	wreg,f,c
 10972  000E4E  D7FE               	bra	u7207
 10973  000E50  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10974  000E52  D7FC               	bra	u7207
 10975  000E54  F000               	nop	
 10976  000E56  0100               	movlb	0	; () banked
 10977  000E58  2BB8               	incf	actuatorTest@i_1577& (0+255),f,b
 10978  000E5A  D7EF               	goto	l6455
 10979  000E5C                     l6463:
 10980                           
 10981                           ; BSR set to: 0
 10982  000E5C  0E00               	movlw	0
 10983  000E5E  0100               	movlb	0	; () banked
 10984  000E60  6FB9               	movwf	actuatorTest@i_1578& (0+255),b
 10985  000E62                     l6465:
 10986                           
 10987                           ; BSR set to: 0
 10988  000E62  0E63               	movlw	99
 10989  000E64  0100               	movlb	0	; () banked
 10990  000E66  65B9               	cpfsgt	actuatorTest@i_1578& (0+255),b
 10991  000E68  D001               	goto	l6469
 10992  000E6A  D00C               	goto	l1080
 10993  000E6C                     l6469:
 10994                           
 10995                           ; BSR set to: 0
 10996  000E6C  0E68               	movlw	104
 10997  000E6E  0100               	movlb	0	; () banked
 10998  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 10999  000E72  0EE4               	movlw	228
 11000  000E74                     u7217:
 11001  000E74  2EE8               	decfsz	wreg,f,c
 11002  000E76  D7FE               	bra	u7217
 11003  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11004  000E7A  D7FC               	bra	u7217
 11005  000E7C  F000               	nop	
 11006  000E7E  0100               	movlb	0	; () banked
 11007  000E80  2BB9               	incf	actuatorTest@i_1578& (0+255),f,b
 11008  000E82  D7EF               	goto	l6465
 11009  000E84                     l1080:
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;Test.c: 243: TMR1ON = 0;
 11013  000E84  90CD               	bcf	4045,0,c	;volatile
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;Test.c: 250: printf("TST: TILT SERVO");
 11017  000E86  0E57               	movlw	low STR_98
 11018  000E88  0100               	movlb	0	; () banked
 11019  000E8A  6F8E               	movwf	printf@f& (0+255),b
 11020  000E8C  0EFE               	movlw	high STR_98
 11021  000E8E  0100               	movlb	0	; () banked
 11022  000E90  6F8F               	movwf	(printf@f+1)& (0+255),b
 11023  000E92  EC97  F008         	call	_printf	;wreg free
 11024                           
 11025                           ;Test.c: 251: lcdInst(0b11000000);;
 11026  000E96  0EC0               	movlw	192
 11027  000E98  EC12  F020         	call	_lcdInst
 11028                           
 11029                           ;Test.c: 252: printf("LEVEL -- 2s     ");
 11030  000E9C  0E5A               	movlw	low STR_99
 11031  000E9E  0100               	movlb	0	; () banked
 11032  000EA0  6F8E               	movwf	printf@f& (0+255),b
 11033  000EA2  0EFC               	movlw	high STR_99
 11034  000EA4  0100               	movlb	0	; () banked
 11035  000EA6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11036  000EA8  EC97  F008         	call	_printf	;wreg free
 11037                           
 11038                           ;Test.c: 253: updateServoPosition(1000, 3);
 11039  000EAC  0E03               	movlw	3
 11040  000EAE  0100               	movlb	0	; () banked
 11041  000EB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11042  000EB2  0EE8               	movlw	232
 11043  000EB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11044  000EB6  0E00               	movlw	0
 11045  000EB8  0100               	movlb	0	; () banked
 11046  000EBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11047  000EBC  0E03               	movlw	3
 11048  000EBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11049  000EC0  EC7E  F01A         	call	_updateServoPosition	;wreg free
 11050                           
 11051                           ;Test.c: 254: TMR3ON = 1;
 11052  000EC4  80B1               	bsf	4017,0,c	;volatile
 11053                           
 11054                           ;Test.c: 255: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11055  000EC6  0E00               	movlw	0
 11056  000EC8  0100               	movlb	0	; () banked
 11057  000ECA  6FBA               	movwf	actuatorTest@i_1581& (0+255),b
 11058  000ECC                     l6483:
 11059                           
 11060                           ; BSR set to: 0
 11061  000ECC  0E63               	movlw	99
 11062  000ECE  0100               	movlb	0	; () banked
 11063  000ED0  65BA               	cpfsgt	actuatorTest@i_1581& (0+255),b
 11064  000ED2  D001               	goto	l6487
 11065  000ED4  D00C               	goto	l6491
 11066  000ED6                     l6487:
 11067                           
 11068                           ; BSR set to: 0
 11069  000ED6  0E68               	movlw	104
 11070  000ED8  0100               	movlb	0	; () banked
 11071  000EDA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11072  000EDC  0EE4               	movlw	228
 11073  000EDE                     u7227:
 11074  000EDE  2EE8               	decfsz	wreg,f,c
 11075  000EE0  D7FE               	bra	u7227
 11076  000EE2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11077  000EE4  D7FC               	bra	u7227
 11078  000EE6  F000               	nop	
 11079  000EE8  0100               	movlb	0	; () banked
 11080  000EEA  2BBA               	incf	actuatorTest@i_1581& (0+255),f,b
 11081  000EEC  D7EF               	goto	l6483
 11082  000EEE                     l6491:
 11083                           
 11084                           ; BSR set to: 0
 11085  000EEE  0E00               	movlw	0
 11086  000EF0  0100               	movlb	0	; () banked
 11087  000EF2  6FBB               	movwf	actuatorTest@i_1582& (0+255),b
 11088  000EF4                     l6493:
 11089                           
 11090                           ; BSR set to: 0
 11091  000EF4  0E63               	movlw	99
 11092  000EF6  0100               	movlb	0	; () banked
 11093  000EF8  65BB               	cpfsgt	actuatorTest@i_1582& (0+255),b
 11094  000EFA  D001               	goto	l6497
 11095  000EFC  D00C               	goto	l6501
 11096  000EFE                     l6497:
 11097                           
 11098                           ; BSR set to: 0
 11099  000EFE  0E68               	movlw	104
 11100  000F00  0100               	movlb	0	; () banked
 11101  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 11102  000F04  0EE4               	movlw	228
 11103  000F06                     u7237:
 11104  000F06  2EE8               	decfsz	wreg,f,c
 11105  000F08  D7FE               	bra	u7237
 11106  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11107  000F0C  D7FC               	bra	u7237
 11108  000F0E  F000               	nop	
 11109  000F10  0100               	movlb	0	; () banked
 11110  000F12  2BBB               	incf	actuatorTest@i_1582& (0+255),f,b
 11111  000F14  D7EF               	goto	l6493
 11112  000F16                     l6501:
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;Test.c: 257: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11116  000F16  0E80               	movlw	128
 11117  000F18  EC12  F020         	call	_lcdInst
 11118  000F1C  0EC0               	movlw	192
 11119  000F1E  EC12  F020         	call	_lcdInst
 11120                           
 11121                           ;Test.c: 258: printf("DROP -- 2s      ");
 11122  000F22  0E38               	movlw	low STR_100
 11123  000F24  0100               	movlb	0	; () banked
 11124  000F26  6F8E               	movwf	printf@f& (0+255),b
 11125  000F28  0EFC               	movlw	high STR_100
 11126  000F2A  0100               	movlb	0	; () banked
 11127  000F2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11128  000F2E  EC97  F008         	call	_printf	;wreg free
 11129                           
 11130                           ;Test.c: 259: updateServoPosition(1500, 3);
 11131  000F32  0E05               	movlw	5
 11132  000F34  0100               	movlb	0	; () banked
 11133  000F36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11134  000F38  0EDC               	movlw	220
 11135  000F3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11136  000F3C  0E00               	movlw	0
 11137  000F3E  0100               	movlb	0	; () banked
 11138  000F40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11139  000F42  0E03               	movlw	3
 11140  000F44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11141  000F46  EC7E  F01A         	call	_updateServoPosition	;wreg free
 11142                           
 11143                           ;Test.c: 260: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11144  000F4A  0E00               	movlw	0
 11145  000F4C  0100               	movlb	0	; () banked
 11146  000F4E  6FBC               	movwf	actuatorTest@i_1584& (0+255),b
 11147  000F50                     l6509:
 11148                           
 11149                           ; BSR set to: 0
 11150  000F50  0E63               	movlw	99
 11151  000F52  0100               	movlb	0	; () banked
 11152  000F54  65BC               	cpfsgt	actuatorTest@i_1584& (0+255),b
 11153  000F56  D001               	goto	l6513
 11154  000F58  D00C               	goto	l6517
 11155  000F5A                     l6513:
 11156                           
 11157                           ; BSR set to: 0
 11158  000F5A  0E68               	movlw	104
 11159  000F5C  0100               	movlb	0	; () banked
 11160  000F5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11161  000F60  0EE4               	movlw	228
 11162  000F62                     u7247:
 11163  000F62  2EE8               	decfsz	wreg,f,c
 11164  000F64  D7FE               	bra	u7247
 11165  000F66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11166  000F68  D7FC               	bra	u7247
 11167  000F6A  F000               	nop	
 11168  000F6C  0100               	movlb	0	; () banked
 11169  000F6E  2BBC               	incf	actuatorTest@i_1584& (0+255),f,b
 11170  000F70  D7EF               	goto	l6509
 11171  000F72                     l6517:
 11172                           
 11173                           ; BSR set to: 0
 11174  000F72  0E00               	movlw	0
 11175  000F74  0100               	movlb	0	; () banked
 11176  000F76  6FBD               	movwf	actuatorTest@i_1585& (0+255),b
 11177  000F78                     l6519:
 11178                           
 11179                           ; BSR set to: 0
 11180  000F78  0E63               	movlw	99
 11181  000F7A  0100               	movlb	0	; () banked
 11182  000F7C  65BD               	cpfsgt	actuatorTest@i_1585& (0+255),b
 11183  000F7E  D001               	goto	l6523
 11184  000F80  D00C               	goto	l6527
 11185  000F82                     l6523:
 11186                           
 11187                           ; BSR set to: 0
 11188  000F82  0E68               	movlw	104
 11189  000F84  0100               	movlb	0	; () banked
 11190  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 11191  000F88  0EE4               	movlw	228
 11192  000F8A                     u7257:
 11193  000F8A  2EE8               	decfsz	wreg,f,c
 11194  000F8C  D7FE               	bra	u7257
 11195  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11196  000F90  D7FC               	bra	u7257
 11197  000F92  F000               	nop	
 11198  000F94  0100               	movlb	0	; () banked
 11199  000F96  2BBD               	incf	actuatorTest@i_1585& (0+255),f,b
 11200  000F98  D7EF               	goto	l6519
 11201  000F9A                     l6527:
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;Test.c: 262: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11205  000F9A  0E80               	movlw	128
 11206  000F9C  EC12  F020         	call	_lcdInst
 11207  000FA0  0EC0               	movlw	192
 11208  000FA2  EC12  F020         	call	_lcdInst
 11209                           
 11210                           ;Test.c: 263: printf("LEVEL -- 2s     ");
 11211  000FA6  0E5A               	movlw	low STR_99
 11212  000FA8  0100               	movlb	0	; () banked
 11213  000FAA  6F8E               	movwf	printf@f& (0+255),b
 11214  000FAC  0EFC               	movlw	high STR_99
 11215  000FAE  0100               	movlb	0	; () banked
 11216  000FB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11217  000FB2  EC97  F008         	call	_printf	;wreg free
 11218                           
 11219                           ;Test.c: 264: updateServoPosition(1000, 3);
 11220  000FB6  0E03               	movlw	3
 11221  000FB8  0100               	movlb	0	; () banked
 11222  000FBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11223  000FBC  0EE8               	movlw	232
 11224  000FBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11225  000FC0  0E00               	movlw	0
 11226  000FC2  0100               	movlb	0	; () banked
 11227  000FC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11228  000FC6  0E03               	movlw	3
 11229  000FC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11230  000FCA  EC7E  F01A         	call	_updateServoPosition	;wreg free
 11231                           
 11232                           ;Test.c: 265: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11233  000FCE  0E00               	movlw	0
 11234  000FD0  0100               	movlb	0	; () banked
 11235  000FD2  6FBE               	movwf	actuatorTest@i_1587& (0+255),b
 11236  000FD4                     l6535:
 11237                           
 11238                           ; BSR set to: 0
 11239  000FD4  0E63               	movlw	99
 11240  000FD6  0100               	movlb	0	; () banked
 11241  000FD8  65BE               	cpfsgt	actuatorTest@i_1587& (0+255),b
 11242  000FDA  D001               	goto	l6539
 11243  000FDC  D00C               	goto	l6543
 11244  000FDE                     l6539:
 11245                           
 11246                           ; BSR set to: 0
 11247  000FDE  0E68               	movlw	104
 11248  000FE0  0100               	movlb	0	; () banked
 11249  000FE2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11250  000FE4  0EE4               	movlw	228
 11251  000FE6                     u7267:
 11252  000FE6  2EE8               	decfsz	wreg,f,c
 11253  000FE8  D7FE               	bra	u7267
 11254  000FEA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11255  000FEC  D7FC               	bra	u7267
 11256  000FEE  F000               	nop	
 11257  000FF0  0100               	movlb	0	; () banked
 11258  000FF2  2BBE               	incf	actuatorTest@i_1587& (0+255),f,b
 11259  000FF4  D7EF               	goto	l6535
 11260  000FF6                     l6543:
 11261                           
 11262                           ; BSR set to: 0
 11263  000FF6  0E00               	movlw	0
 11264  000FF8  0100               	movlb	0	; () banked
 11265  000FFA  6FBF               	movwf	actuatorTest@i_1588& (0+255),b
 11266  000FFC                     l6545:
 11267                           
 11268                           ; BSR set to: 0
 11269  000FFC  0E63               	movlw	99
 11270  000FFE  0100               	movlb	0	; () banked
 11271  001000  65BF               	cpfsgt	actuatorTest@i_1588& (0+255),b
 11272  001002  D001               	goto	l6549
 11273  001004  D00C               	goto	l1092
 11274  001006                     l6549:
 11275                           
 11276                           ; BSR set to: 0
 11277  001006  0E68               	movlw	104
 11278  001008  0100               	movlb	0	; () banked
 11279  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11280  00100C  0EE4               	movlw	228
 11281  00100E                     u7277:
 11282  00100E  2EE8               	decfsz	wreg,f,c
 11283  001010  D7FE               	bra	u7277
 11284  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11285  001014  D7FC               	bra	u7277
 11286  001016  F000               	nop	
 11287  001018  0100               	movlb	0	; () banked
 11288  00101A  2BBF               	incf	actuatorTest@i_1588& (0+255),f,b
 11289  00101C  D7EF               	goto	l6545
 11290  00101E                     l1092:
 11291                           
 11292                           ; BSR set to: 0
 11293                           ;Test.c: 267: TMR3ON = 0;
 11294  00101E  90B1               	bcf	4017,0,c	;volatile
 11295                           
 11296                           ;Test.c: 268: (INTCONbits.GIE = 0);
 11297  001020  9EF2               	bcf	intcon,7,c	;volatile
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;Test.c: 273: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11301  001022  0E01               	movlw	1
 11302  001024  EC12  F020         	call	_lcdInst
 11303  001028  0E68               	movlw	104
 11304  00102A  0100               	movlb	0	; () banked
 11305  00102C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11306  00102E  0EE4               	movlw	228
 11307  001030                     u7287:
 11308  001030  2EE8               	decfsz	wreg,f,c
 11309  001032  D7FE               	bra	u7287
 11310  001034  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11311  001036  D7FC               	bra	u7287
 11312  001038  F000               	nop	
 11313  00103A  0E80               	movlw	128
 11314  00103C  EC12  F020         	call	_lcdInst
 11315                           
 11316                           ;Test.c: 274: printf("TST: CAM SERVO");
 11317  001040  0EB3               	movlw	low STR_102
 11318  001042  0100               	movlb	0	; () banked
 11319  001044  6F8E               	movwf	printf@f& (0+255),b
 11320  001046  0EFE               	movlw	high STR_102
 11321  001048  0100               	movlb	0	; () banked
 11322  00104A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11323  00104C  EC97  F008         	call	_printf	;wreg free
 11324                           
 11325                           ;Test.c: 275: lcdInst(0b11000000);;
 11326  001050  0EC0               	movlw	192
 11327  001052  EC12  F020         	call	_lcdInst
 11328                           
 11329                           ;Test.c: 276: printf("CAM UP  |RC0=1");
 11330  001056  0E95               	movlw	low STR_103
 11331  001058  0100               	movlb	0	; () banked
 11332  00105A  6F8E               	movwf	printf@f& (0+255),b
 11333  00105C  0EFE               	movlw	high STR_103
 11334  00105E  0100               	movlb	0	; () banked
 11335  001060  6F8F               	movwf	(printf@f+1)& (0+255),b
 11336  001062  EC97  F008         	call	_printf	;wreg free
 11337                           
 11338                           ;Test.c: 277: LATCbits.LATC0 = 0;
 11339  001066  908B               	bcf	3979,0,c	;volatile
 11340                           
 11341                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11342  001068  0E00               	movlw	0
 11343  00106A  0100               	movlb	0	; () banked
 11344  00106C  6FC0               	movwf	actuatorTest@i_1591& (0+255),b
 11345  00106E                     l6569:
 11346                           
 11347                           ; BSR set to: 0
 11348  00106E  0E63               	movlw	99
 11349  001070  0100               	movlb	0	; () banked
 11350  001072  65C0               	cpfsgt	actuatorTest@i_1591& (0+255),b
 11351  001074  D001               	goto	l6573
 11352  001076  D00C               	goto	l6577
 11353  001078                     l6573:
 11354                           
 11355                           ; BSR set to: 0
 11356  001078  0E68               	movlw	104
 11357  00107A  0100               	movlb	0	; () banked
 11358  00107C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11359  00107E  0EE4               	movlw	228
 11360  001080                     u7297:
 11361  001080  2EE8               	decfsz	wreg,f,c
 11362  001082  D7FE               	bra	u7297
 11363  001084  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11364  001086  D7FC               	bra	u7297
 11365  001088  F000               	nop	
 11366  00108A  0100               	movlb	0	; () banked
 11367  00108C  2BC0               	incf	actuatorTest@i_1591& (0+255),f,b
 11368  00108E  D7EF               	goto	l6569
 11369  001090                     l6577:
 11370                           
 11371                           ; BSR set to: 0
 11372  001090  0E00               	movlw	0
 11373  001092  0100               	movlb	0	; () banked
 11374  001094  6FC1               	movwf	actuatorTest@i_1592& (0+255),b
 11375  001096                     l6579:
 11376                           
 11377                           ; BSR set to: 0
 11378  001096  0E63               	movlw	99
 11379  001098  0100               	movlb	0	; () banked
 11380  00109A  65C1               	cpfsgt	actuatorTest@i_1592& (0+255),b
 11381  00109C  D001               	goto	l6583
 11382  00109E  D00C               	goto	l6587
 11383  0010A0                     l6583:
 11384                           
 11385                           ; BSR set to: 0
 11386  0010A0  0E68               	movlw	104
 11387  0010A2  0100               	movlb	0	; () banked
 11388  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11389  0010A6  0EE4               	movlw	228
 11390  0010A8                     u7307:
 11391  0010A8  2EE8               	decfsz	wreg,f,c
 11392  0010AA  D7FE               	bra	u7307
 11393  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11394  0010AE  D7FC               	bra	u7307
 11395  0010B0  F000               	nop	
 11396  0010B2  0100               	movlb	0	; () banked
 11397  0010B4  2BC1               	incf	actuatorTest@i_1592& (0+255),f,b
 11398  0010B6  D7EF               	goto	l6579
 11399  0010B8                     l6587:
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11403  0010B8  0E80               	movlw	128
 11404  0010BA  EC12  F020         	call	_lcdInst
 11405  0010BE  0EC0               	movlw	192
 11406  0010C0  EC12  F020         	call	_lcdInst
 11407                           
 11408                           ;Test.c: 280: LATCbits.LATC0 = 1;
 11409  0010C4  808B               	bsf	3979,0,c	;volatile
 11410                           
 11411                           ;Test.c: 281: printf("CAM DWN |RC0=0");
 11412  0010C6  0E86               	movlw	low STR_104
 11413  0010C8  0100               	movlb	0	; () banked
 11414  0010CA  6F8E               	movwf	printf@f& (0+255),b
 11415  0010CC  0EFE               	movlw	high STR_104
 11416  0010CE  0100               	movlb	0	; () banked
 11417  0010D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11418  0010D2  EC97  F008         	call	_printf	;wreg free
 11419                           
 11420                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11421  0010D6  0E00               	movlw	0
 11422  0010D8  0100               	movlb	0	; () banked
 11423  0010DA  6FC2               	movwf	actuatorTest@i_1594& (0+255),b
 11424  0010DC                     l6595:
 11425                           
 11426                           ; BSR set to: 0
 11427  0010DC  0E63               	movlw	99
 11428  0010DE  0100               	movlb	0	; () banked
 11429  0010E0  65C2               	cpfsgt	actuatorTest@i_1594& (0+255),b
 11430  0010E2  D001               	goto	l6599
 11431  0010E4  D00C               	goto	l6603
 11432  0010E6                     l6599:
 11433                           
 11434                           ; BSR set to: 0
 11435  0010E6  0E68               	movlw	104
 11436  0010E8  0100               	movlb	0	; () banked
 11437  0010EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11438  0010EC  0EE4               	movlw	228
 11439  0010EE                     u7317:
 11440  0010EE  2EE8               	decfsz	wreg,f,c
 11441  0010F0  D7FE               	bra	u7317
 11442  0010F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11443  0010F4  D7FC               	bra	u7317
 11444  0010F6  F000               	nop	
 11445  0010F8  0100               	movlb	0	; () banked
 11446  0010FA  2BC2               	incf	actuatorTest@i_1594& (0+255),f,b
 11447  0010FC  D7EF               	goto	l6595
 11448  0010FE                     l6603:
 11449                           
 11450                           ; BSR set to: 0
 11451  0010FE  0E00               	movlw	0
 11452  001100  0100               	movlb	0	; () banked
 11453  001102  6FC3               	movwf	actuatorTest@i_1595& (0+255),b
 11454  001104                     l6605:
 11455                           
 11456                           ; BSR set to: 0
 11457  001104  0E63               	movlw	99
 11458  001106  0100               	movlb	0	; () banked
 11459  001108  65C3               	cpfsgt	actuatorTest@i_1595& (0+255),b
 11460  00110A  D001               	goto	l6609
 11461  00110C  D00C               	goto	l6613
 11462  00110E                     l6609:
 11463                           
 11464                           ; BSR set to: 0
 11465  00110E  0E68               	movlw	104
 11466  001110  0100               	movlb	0	; () banked
 11467  001112  6FAB               	movwf	??_actuatorTest& (0+255),b
 11468  001114  0EE4               	movlw	228
 11469  001116                     u7327:
 11470  001116  2EE8               	decfsz	wreg,f,c
 11471  001118  D7FE               	bra	u7327
 11472  00111A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11473  00111C  D7FC               	bra	u7327
 11474  00111E  F000               	nop	
 11475  001120  0100               	movlb	0	; () banked
 11476  001122  2BC3               	incf	actuatorTest@i_1595& (0+255),f,b
 11477  001124  D7EF               	goto	l6605
 11478  001126                     l6613:
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;Test.c: 283: machine_state = Testing_state;
 11482  001126  0E03               	movlw	3
 11483  001128  0100               	movlb	0	; () banked
 11484  00112A  6FFC               	movwf	_machine_state& (0+255),b
 11485                           
 11486                           ; BSR set to: 0
 11487  00112C  0012               	return		;funcret
 11488  00112E                     __end_of_actuatorTest:
 11489                           	opt stack 0
 11490                           tblptru	equ	0xFF8
 11491                           tblptrh	equ	0xFF7
 11492                           tblptrl	equ	0xFF6
 11493                           tablat	equ	0xFF5
 11494                           prodh	equ	0xFF4
 11495                           prodl	equ	0xFF3
 11496                           intcon	equ	0xFF2
 11497                           intcon2	equ	0xFF1
 11498                           intcon3	equ	0xFF0
 11499                           postinc0	equ	0xFEE
 11500                           wreg	equ	0xFE8
 11501                           postdec1	equ	0xFE5
 11502                           fsr1l	equ	0xFE1
 11503                           indf2	equ	0xFDF
 11504                           postinc2	equ	0xFDE
 11505                           postdec2	equ	0xFDD
 11506                           fsr2h	equ	0xFDA
 11507                           fsr2l	equ	0xFD9
 11508                           status	equ	0xFD8
 11509                           
 11510 ;; *************** function _updateServoPosition *****************
 11511 ;; Defined at:
 11512 ;;		line 295 in file "sort.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  time_us         2    0[BANK0 ] int 
 11515 ;;  timer           2    2[BANK0 ] int 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;  my_time         2    6[BANK0 ] unsigned int 
 11518 ;; Return value:  Size  Location     Type
 11519 ;;                  1    wreg      void 
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11527 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;Total ram usage:        8 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; Hardware stack levels required when called:    7
 11534 ;; This function calls:
 11535 ;;		Nothing
 11536 ;; This function is called by:
 11537 ;;		_Distribution
 11538 ;;		_initServos
 11539 ;;		_actuatorTest
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           	psect	text41
 11544  0034FC                     __ptext41:
 11545                           	opt stack 0
 11546  0034FC                     _updateServoPosition:
 11547                           	opt stack 20
 11548                           
 11549                           ;sort.c: 296: unsigned int my_time = 65535 - time_us;
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;incstack = 0
 11553  0034FC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11554  003500  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11555  003504  0100               	movlb	0	; () banked
 11556  003506  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11557  003508  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11558  00350A  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11559  00350C  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11560  00350E  0EFF               	movlw	255
 11561  003510  0100               	movlb	0	; () banked
 11562  003512  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11563  003514  0100               	movlb	0	; () banked
 11564  003516  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11565  003518  0EFF               	movlw	255
 11566  00351A  0100               	movlb	0	; () banked
 11567  00351C  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11568  00351E  0100               	movlb	0	; () banked
 11569  003520  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11570                           
 11571                           ;sort.c: 297: switch(timer){
 11572  003522  D015               	goto	l5237
 11573  003524                     l5235:
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;sort.c: 299: servoTimes[0] = my_time >> 8;
 11577  003524  0100               	movlb	0	; () banked
 11578  003526  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11579  003528  0101               	movlb	1	; () banked
 11580  00352A  6F1C               	movwf	_servoTimes& (0+255),b
 11581  00352C  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11582                           
 11583                           ;sort.c: 300: servoTimes[1] = my_time & 0xFF;
 11584  00352E  0100               	movlb	0	; () banked
 11585  003530  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11586  003532  0101               	movlb	1	; () banked
 11587  003534  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11588  003536  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11589  003538                     l772:
 11590                           
 11591                           ;sort.c: 302: servoTimes[2] = my_time >> 8;
 11592  003538  0100               	movlb	0	; () banked
 11593  00353A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11594  00353C  0101               	movlb	1	; () banked
 11595  00353E  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11596  003540  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11597                           
 11598                           ;sort.c: 303: servoTimes[3] = my_time & 0xFF;
 11599  003542  0100               	movlb	0	; () banked
 11600  003544  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11601  003546  0101               	movlb	1	; () banked
 11602  003548  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11603  00354A  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11604                           
 11605                           ;sort.c: 304: }
 11606  00354C  0012               	return	
 11607  00354E                     l5237:
 11608  00354E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11609  003552  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11610                           
 11611                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11612                           ; Switch size 1, requested type "space"
 11613                           ; Number of cases is 1, Range of values is 0 to 0
 11614                           ; switch strategies available:
 11615                           ; Name         Instructions Cycles
 11616                           ; simple_byte            4     3 (average)
 11617                           ;	Chosen strategy is simple_byte
 11618  003556  0100               	movlb	0	; () banked
 11619  003558  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11620  00355A  0A00               	xorlw	0	; case 0
 11621  00355C  A4D8               	btfss	status,2,c
 11622  00355E  0012               	return	
 11623                           
 11624                           ; BSR set to: 0
 11625                           ; Switch size 1, requested type "space"
 11626                           ; Number of cases is 2, Range of values is 1 to 3
 11627                           ; switch strategies available:
 11628                           ; Name         Instructions Cycles
 11629                           ; simple_byte            7     4 (average)
 11630                           ;	Chosen strategy is simple_byte
 11631  003560  0100               	movlb	0	; () banked
 11632  003562  5184               	movf	??_updateServoPosition& (0+255),w,b
 11633  003564  0A01               	xorlw	1	; case 1
 11634  003566  B4D8               	btfsc	status,2,c
 11635  003568  D7DD               	goto	l5235
 11636  00356A  0A02               	xorlw	2	; case 3
 11637  00356C  A4D8               	btfss	status,2,c
 11638  00356E  0012               	return	
 11639  003570  D7E3               	goto	l772
 11640  003572                     __end_of_updateServoPosition:
 11641                           	opt stack 0
 11642                           tblptru	equ	0xFF8
 11643                           tblptrh	equ	0xFF7
 11644                           tblptrl	equ	0xFF6
 11645                           tablat	equ	0xFF5
 11646                           prodh	equ	0xFF4
 11647                           prodl	equ	0xFF3
 11648                           intcon	equ	0xFF2
 11649                           intcon2	equ	0xFF1
 11650                           intcon3	equ	0xFF0
 11651                           postinc0	equ	0xFEE
 11652                           wreg	equ	0xFE8
 11653                           postdec1	equ	0xFE5
 11654                           fsr1l	equ	0xFE1
 11655                           indf2	equ	0xFDF
 11656                           postinc2	equ	0xFDE
 11657                           postdec2	equ	0xFDD
 11658                           fsr2h	equ	0xFDA
 11659                           fsr2l	equ	0xFD9
 11660                           status	equ	0xFD8
 11661                           
 11662 ;; *************** function _PortTests *****************
 11663 ;; Defined at:
 11664 ;;		line 286 in file "Test.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;		None
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;		None
 11669 ;; Return value:  Size  Location     Type
 11670 ;;                  1    wreg      void 
 11671 ;; Registers used:
 11672 ;;		wreg, status,2, status,0
 11673 ;; Tracked objects:
 11674 ;;		On entry : 0/0
 11675 ;;		On exit  : 0/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11682 ;;Total ram usage:        2 bytes
 11683 ;; Hardware stack levels used:    1
 11684 ;; Hardware stack levels required when called:    7
 11685 ;; This function calls:
 11686 ;;		Nothing
 11687 ;; This function is called by:
 11688 ;;		_Test
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           	psect	text42
 11693  003400                     __ptext42:
 11694                           	opt stack 0
 11695  003400                     _PortTests:
 11696                           	opt stack 22
 11697  003400                     l1105:
 11698  003400  A281               	btfss	3969,1,c	;volatile
 11699  003402  D7FE               	goto	l1105
 11700                           
 11701                           ;Test.c: 290: var = PORTB >> 4;
 11702  003404  CF81 F080          	movff	3969,??_PortTests	;volatile
 11703  003408  0100               	movlb	0	; () banked
 11704  00340A  3B80               	swapf	??_PortTests& (0+255),f,b
 11705  00340C  0E0F               	movlw	15
 11706  00340E  1780               	andwf	??_PortTests& (0+255),f,b
 11707  003410  0100               	movlb	0	; () banked
 11708  003412  5180               	movf	??_PortTests& (0+255),w,b
 11709  003414  0100               	movlb	0	; () banked
 11710  003416  6FFA               	movwf	_var& (0+255),b
 11711  003418  6BFB               	clrf	(_var+1)& (0+255),b
 11712                           
 11713                           ;Test.c: 291: switch(var){
 11714  00341A  D00C               	goto	l6619
 11715  00341C                     l1109:
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;Test.c: 293: LATEbits.LATE0 = 1;
 11719  00341C  808D               	bsf	3981,0,c	;volatile
 11720                           
 11721                           ;Test.c: 294: break;
 11722  00341E  D027               	goto	l1117
 11723  003420                     l1111:
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;Test.c: 296: LATEbits.LATE1 = 1;
 11727  003420  828D               	bsf	3981,1,c	;volatile
 11728                           
 11729                           ;Test.c: 297: break;
 11730  003422  D025               	goto	l1117
 11731  003424                     l1112:
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;Test.c: 299: LATDbits.LATD0 = 1;
 11735  003424  808C               	bsf	3980,0,c	;volatile
 11736                           
 11737                           ;Test.c: 300: break;
 11738  003426  D023               	goto	l1117
 11739  003428                     l1113:
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;Test.c: 302: LATAbits.LATA3 = 1;
 11743  003428  8689               	bsf	3977,3,c	;volatile
 11744                           
 11745                           ;Test.c: 303: break;
 11746  00342A  D021               	goto	l1117
 11747  00342C                     l1114:
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;Test.c: 305: LATAbits.LATA4 = 1;
 11751  00342C  8889               	bsf	3977,4,c	;volatile
 11752                           
 11753                           ;Test.c: 306: break;
 11754  00342E  D01F               	goto	l1117
 11755  003430                     l1115:
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;Test.c: 308: LATAbits.LATA5 = 1;
 11759  003430  8A89               	bsf	3977,5,c	;volatile
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;Test.c: 312: }
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;Test.c: 311: break;
 11766                           
 11767                           ;Test.c: 310: default:
 11768                           
 11769                           ;Test.c: 309: break;
 11770  003432  D01D               	goto	l1117
 11771  003434                     l6619:
 11772                           
 11773                           ; BSR set to: 0
 11774  003434  C0FA  F080         	movff	_var,??_PortTests
 11775  003438  C0FB  F081         	movff	_var+1,??_PortTests+1
 11776                           
 11777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11778                           ; Switch size 1, requested type "space"
 11779                           ; Number of cases is 1, Range of values is 0 to 0
 11780                           ; switch strategies available:
 11781                           ; Name         Instructions Cycles
 11782                           ; simple_byte            4     3 (average)
 11783                           ;	Chosen strategy is simple_byte
 11784  00343C  0100               	movlb	0	; () banked
 11785  00343E  5181               	movf	(??_PortTests+1)& (0+255),w,b
 11786  003440  0A00               	xorlw	0	; case 0
 11787  003442  A4D8               	btfss	status,2,c
 11788  003444  D014               	goto	l1117
 11789                           
 11790                           ; BSR set to: 0
 11791                           ; Switch size 1, requested type "space"
 11792                           ; Number of cases is 6, Range of values is 0 to 5
 11793                           ; switch strategies available:
 11794                           ; Name         Instructions Cycles
 11795                           ; simple_byte           19    10 (average)
 11796                           ;	Chosen strategy is simple_byte
 11797  003446  0100               	movlb	0	; () banked
 11798  003448  5180               	movf	??_PortTests& (0+255),w,b
 11799  00344A  0A00               	xorlw	0	; case 0
 11800  00344C  B4D8               	btfsc	status,2,c
 11801  00344E  D7E6               	goto	l1109
 11802  003450  0A01               	xorlw	1	; case 1
 11803  003452  B4D8               	btfsc	status,2,c
 11804  003454  D7E5               	goto	l1111
 11805  003456  0A03               	xorlw	3	; case 2
 11806  003458  B4D8               	btfsc	status,2,c
 11807  00345A  D7E4               	goto	l1112
 11808  00345C  0A01               	xorlw	1	; case 3
 11809  00345E  B4D8               	btfsc	status,2,c
 11810  003460  D7E3               	goto	l1113
 11811  003462  0A07               	xorlw	7	; case 4
 11812  003464  B4D8               	btfsc	status,2,c
 11813  003466  D7E2               	goto	l1114
 11814  003468  0A01               	xorlw	1	; case 5
 11815  00346A  B4D8               	btfsc	status,2,c
 11816  00346C  D7E1               	goto	l1115
 11817  00346E                     l1117:
 11818  00346E  B281               	btfsc	3969,1,c	;volatile
 11819  003470  D7FE               	goto	l1117
 11820                           
 11821                           ;Test.c: 314: __nop();
 11822  003472  F000               	nop	
 11823                           
 11824                           ;Test.c: 315: __nop();
 11825  003474  F000               	nop	
 11826                           
 11827                           ;Test.c: 316: LATA = 0x00;
 11828  003476  0E00               	movlw	0
 11829  003478  6E89               	movwf	3977,c	;volatile
 11830                           
 11831                           ;Test.c: 317: LATE = 0x00;
 11832  00347A  0E00               	movlw	0
 11833  00347C  6E8D               	movwf	3981,c	;volatile
 11834                           
 11835                           ;Test.c: 318: LATD = 0x00; }
 11836  00347E  0E00               	movlw	0
 11837  003480  6E8C               	movwf	3980,c	;volatile
 11838  003482  D7BE               	goto	l1105
 11839  003484                     __end_of_PortTests:
 11840                           	opt stack 0
 11841                           tblptru	equ	0xFF8
 11842                           tblptrh	equ	0xFF7
 11843                           tblptrl	equ	0xFF6
 11844                           tablat	equ	0xFF5
 11845                           prodh	equ	0xFF4
 11846                           prodl	equ	0xFF3
 11847                           intcon	equ	0xFF2
 11848                           intcon2	equ	0xFF1
 11849                           intcon3	equ	0xFF0
 11850                           postinc0	equ	0xFEE
 11851                           wreg	equ	0xFE8
 11852                           postdec1	equ	0xFE5
 11853                           fsr1l	equ	0xFE1
 11854                           indf2	equ	0xFDF
 11855                           postinc2	equ	0xFDE
 11856                           postdec2	equ	0xFDD
 11857                           fsr2h	equ	0xFDA
 11858                           fsr2l	equ	0xFD9
 11859                           status	equ	0xFD8
 11860                           
 11861 ;; *************** function _PortTestA5 *****************
 11862 ;; Defined at:
 11863 ;;		line 321 in file "Test.c"
 11864 ;; Parameters:    Size  Location     Type
 11865 ;;		None
 11866 ;; Auto vars:     Size  Location     Type
 11867 ;;		None
 11868 ;; Return value:  Size  Location     Type
 11869 ;;                  1    wreg      void 
 11870 ;; Registers used:
 11871 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11872 ;; Tracked objects:
 11873 ;;		On entry : 0/0
 11874 ;;		On exit  : 0/0
 11875 ;;		Unchanged: 0/0
 11876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11880 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;Total ram usage:        1 bytes
 11882 ;; Hardware stack levels used:    1
 11883 ;; Hardware stack levels required when called:   10
 11884 ;; This function calls:
 11885 ;;		_lcdInst
 11886 ;;		_printf
 11887 ;; This function is called by:
 11888 ;;		_Test
 11889 ;; This function uses a non-reentrant model
 11890 ;;
 11891                           
 11892                           	psect	text43
 11893  0036B6                     __ptext43:
 11894                           	opt stack 0
 11895  0036B6                     _PortTestA5:
 11896                           	opt stack 19
 11897                           
 11898                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11899                           
 11900                           ;incstack = 0
 11901  0036B6  0E01               	movlw	1
 11902  0036B8  EC12  F020         	call	_lcdInst
 11903  0036BC  0E68               	movlw	104
 11904  0036BE  0100               	movlb	0	; () banked
 11905  0036C0  6FAB               	movwf	??_PortTestA5& (0+255),b
 11906  0036C2  0EE4               	movlw	228
 11907  0036C4                     u7337:
 11908  0036C4  2EE8               	decfsz	wreg,f,c
 11909  0036C6  D7FE               	bra	u7337
 11910  0036C8  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 11911  0036CA  D7FC               	bra	u7337
 11912  0036CC  F000               	nop	
 11913  0036CE  0E80               	movlw	128
 11914  0036D0  EC12  F020         	call	_lcdInst
 11915                           
 11916                           ;Test.c: 323: printf("D WILL RETURN    ");
 11917  0036D4  0EDF               	movlw	low STR_105
 11918  0036D6  0100               	movlb	0	; () banked
 11919  0036D8  6F8E               	movwf	printf@f& (0+255),b
 11920  0036DA  0EFB               	movlw	high STR_105
 11921  0036DC  0100               	movlb	0	; () banked
 11922  0036DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11923  0036E0  EC97  F008         	call	_printf	;wreg free
 11924                           
 11925                           ;Test.c: 324: lcdInst(0b11000000);;
 11926  0036E4  0EC0               	movlw	192
 11927  0036E6  EC12  F020         	call	_lcdInst
 11928                           
 11929                           ;Test.c: 325: printf("OTHER SETS RA5   ");
 11930  0036EA  0EF1               	movlw	low STR_106
 11931  0036EC  0100               	movlb	0	; () banked
 11932  0036EE  6F8E               	movwf	printf@f& (0+255),b
 11933  0036F0  0EFB               	movlw	high STR_106
 11934  0036F2  0100               	movlb	0	; () banked
 11935  0036F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11936  0036F6  EC97  F008         	call	_printf	;wreg free
 11937                           
 11938                           ;Test.c: 326: (INTCONbits.GIE = 0);
 11939  0036FA  9EF2               	bcf	intcon,7,c	;volatile
 11940  0036FC                     l1126:
 11941  0036FC  A281               	btfss	3969,1,c	;volatile
 11942  0036FE  D7FE               	goto	l1126
 11943                           
 11944                           ;Test.c: 331: }
 11945                           ;Test.c: 332: if(PORTB >> 4 == 0b1111){
 11946  003700  3881               	swapf	3969,w,c	;volatile
 11947  003702  0B0F               	andlw	15
 11948  003704  0A0F               	xorlw	15
 11949  003706  B4D8               	btfsc	status,2,c
 11950  003708  D005               	goto	l1130
 11951                           
 11952                           ;Test.c: 335: else{
 11953                           ;Test.c: 336: LATAbits.LATA5 = 1;
 11954                           
 11955                           ;Test.c: 334: }
 11956                           
 11957                           ;Test.c: 333: break;
 11958  00370A  8A89               	bsf	3977,5,c	;volatile
 11959  00370C                     l1132:
 11960  00370C  B281               	btfsc	3969,1,c	;volatile
 11961  00370E  D7FE               	goto	l1132
 11962                           
 11963                           ;Test.c: 339: }
 11964                           ;Test.c: 340: LATAbits.LATA5 = 0;
 11965  003710  9A89               	bcf	3977,5,c	;volatile
 11966  003712  D7F4               	goto	l1126
 11967  003714                     l1130:
 11968                           
 11969                           ;Test.c: 341: }
 11970                           ;Test.c: 342: }
 11971                           ;Test.c: 343: (INTCONbits.GIE = 1);
 11972  003714  8EF2               	bsf	intcon,7,c	;volatile
 11973  003716  0012               	return		;funcret
 11974  003718                     __end_of_PortTestA5:
 11975                           	opt stack 0
 11976                           tblptru	equ	0xFF8
 11977                           tblptrh	equ	0xFF7
 11978                           tblptrl	equ	0xFF6
 11979                           tablat	equ	0xFF5
 11980                           prodh	equ	0xFF4
 11981                           prodl	equ	0xFF3
 11982                           intcon	equ	0xFF2
 11983                           intcon2	equ	0xFF1
 11984                           intcon3	equ	0xFF0
 11985                           postinc0	equ	0xFEE
 11986                           wreg	equ	0xFE8
 11987                           postdec1	equ	0xFE5
 11988                           fsr1l	equ	0xFE1
 11989                           indf2	equ	0xFDF
 11990                           postinc2	equ	0xFDE
 11991                           postdec2	equ	0xFDD
 11992                           fsr2h	equ	0xFDA
 11993                           fsr2l	equ	0xFD9
 11994                           status	equ	0xFD8
 11995                           
 11996 ;; *************** function _printf *****************
 11997 ;; Defined at:
 11998 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12001 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 12002 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 12003 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 12004 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 12005 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 12006 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 12007 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 12008 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 12009 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 12010 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 12011 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 12012 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 12013 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 12014 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 12015 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 12016 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12017 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 12018 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 12019 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 12020 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 12021 ;;		 -> STR_1(18), 
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;  tmpval          4    0        struct .
 12024 ;;  width           2   41[BANK0 ] int 
 12025 ;;  val             2   37[BANK0 ] unsigned int 
 12026 ;;  len             2   35[BANK0 ] unsigned int 
 12027 ;;  ap              2   33[BANK0 ] PTR void [1]
 12028 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12029 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 12030 ;;		 -> STR_107(7), count_total(2), printRTC@month(4), UI@month(4), 
 12031 ;;  c               1   40[BANK0 ] char 
 12032 ;;  flag            1   39[BANK0 ] unsigned char 
 12033 ;;  prec            1   30[BANK0 ] char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;                  2   14[BANK0 ] int 
 12036 ;; Registers used:
 12037 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12043 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12044 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12045 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12047 ;;Total ram usage:       29 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    9
 12050 ;; This function calls:
 12051 ;;		___lwdiv
 12052 ;;		___lwmod
 12053 ;;		___wmul
 12054 ;;		_isdigit
 12055 ;;		_putch
 12056 ;; This function is called by:
 12057 ;;		_UI
 12058 ;;		_change_state_to_menu_start
 12059 ;;		_change_state_to_menu_12
 12060 ;;		_change_state_to_menu_22
 12061 ;;		_printRTC
 12062 ;;		_EEPROM_write
 12063 ;;		_Test
 12064 ;;		_algorithmTest
 12065 ;;		_sensorTest
 12066 ;;		_actuatorTest
 12067 ;;		_PortTestA5
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           	psect	text44
 12072  00112E                     __ptext44:
 12073                           	opt stack 0
 12074  00112E                     _printf:
 12075                           	opt stack 18
 12076                           
 12077                           ;doprnt.c: 466: va_list ap;
 12078                           ;doprnt.c: 499: signed char c;
 12079                           ;doprnt.c: 501: int width;
 12080                           ;doprnt.c: 506: signed char prec;
 12081                           ;doprnt.c: 508: unsigned char flag;
 12082                           ;doprnt.c: 523: union {
 12083                           ;doprnt.c: 524: unsigned long vd;
 12084                           ;doprnt.c: 525: double integ;
 12085                           ;doprnt.c: 526: } tmpval;
 12086                           ;doprnt.c: 528: unsigned int val;
 12087                           ;doprnt.c: 529: unsigned len;
 12088                           ;doprnt.c: 530: const char * cp;
 12089                           ;doprnt.c: 533: *ap = __va_start();
 12090                           
 12091                           ;incstack = 0
 12092  00112E  0E90               	movlw	low (?_printf+2)
 12093  001130  0100               	movlb	0	; () banked
 12094  001132  6FA1               	movwf	printf@ap& (0+255),b
 12095  001134  0E00               	movlw	high (?_printf+2)
 12096  001136  0100               	movlb	0	; () banked
 12097  001138  6FA2               	movwf	(printf@ap+1)& (0+255),b
 12098                           
 12099                           ;doprnt.c: 536: while(c = *f++) {
 12100  00113A  D205               	goto	l5195
 12101  00113C                     l5065:
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;doprnt.c: 538: if(c != '%')
 12105  00113C  0E25               	movlw	37
 12106  00113E  0100               	movlb	0	; () banked
 12107  001140  19A8               	xorwf	printf@c& (0+255),w,b
 12108  001142  B4D8               	btfsc	status,2,c
 12109  001144  D005               	goto	l5069
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;doprnt.c: 540: {
 12113                           ;doprnt.c: 541: (putch(c) );
 12114  001146  0100               	movlb	0	; () banked
 12115  001148  51A8               	movf	printf@c& (0+255),w,b
 12116  00114A  EC0A  F020         	call	_putch
 12117                           
 12118                           ;doprnt.c: 542: continue;
 12119  00114E  D1FB               	goto	l5195
 12120  001150                     l5069:
 12121                           
 12122                           ;doprnt.c: 543: }
 12123                           ;doprnt.c: 546: width = 0;
 12124  001150  0E00               	movlw	0
 12125  001152  0100               	movlb	0	; () banked
 12126  001154  6FAA               	movwf	(printf@width+1)& (0+255),b
 12127  001156  0E00               	movlw	0
 12128  001158  6FA9               	movwf	printf@width& (0+255),b
 12129                           
 12130                           ;doprnt.c: 548: flag = 0;
 12131  00115A  0E00               	movlw	0
 12132  00115C  0100               	movlb	0	; () banked
 12133  00115E  6FA7               	movwf	printf@flag& (0+255),b
 12134                           
 12135                           ; BSR set to: 0
 12136                           ;doprnt.c: 551: switch(*f) {
 12137                           
 12138                           ;doprnt.c: 550: for(;;) {
 12139  001160  D005               	goto	l5075
 12140  001162                     l5071:
 12141                           
 12142                           ;doprnt.c: 580: flag |= 0x04;
 12143  001162  0100               	movlb	0	; () banked
 12144  001164  85A7               	bsf	printf@flag& (0+255),2,b
 12145                           
 12146                           ;doprnt.c: 581: f++;
 12147  001166  0100               	movlb	0	; () banked
 12148  001168  4B8E               	infsnz	printf@f& (0+255),f,b
 12149  00116A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12150  00116C                     l5075:
 12151  00116C  C08E  FFF6         	movff	printf@f,tblptrl
 12152  001170  C08F  FFF7         	movff	printf@f+1,tblptrh
 12153  001174                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12154  001174  6AF8               	clrf	tblptru,c
 12155  001176                     	endif
 12156  001176                     	if	0	;tblptru may be non-zero
 12157  001176                     	endif
 12158  001176  0008               	tblrd		*
 12159  001178  50F5               	movf	tablat,w,c
 12160                           
 12161                           ; Switch size 1, requested type "space"
 12162                           ; Number of cases is 1, Range of values is 48 to 48
 12163                           ; switch strategies available:
 12164                           ; Name         Instructions Cycles
 12165                           ; simple_byte            4     3 (average)
 12166                           ;	Chosen strategy is simple_byte
 12167  00117A  0A30               	xorlw	48	; case 48
 12168  00117C  B4D8               	btfsc	status,2,c
 12169  00117E  D7F1               	goto	l5071
 12170                           
 12171                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12172                           
 12173                           ;doprnt.c: 586: }
 12174                           
 12175                           ;doprnt.c: 585: break;
 12176  001180  C08E  FFF6         	movff	printf@f,tblptrl
 12177  001184  C08F  FFF7         	movff	printf@f+1,tblptrh
 12178  001188                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12179  001188  6AF8               	clrf	tblptru,c
 12180  00118A                     	endif
 12181  00118A                     	if	0	;tblptru may be non-zero
 12182  00118A                     	endif
 12183  00118A  0008               	tblrd		*
 12184  00118C  50F5               	movf	tablat,w,c
 12185  00118E  EC31  F01F         	call	_isdigit
 12186  001192  A0D8               	btfss	status,0,c
 12187  001194  D0D2               	goto	l5123
 12188                           
 12189                           ;doprnt.c: 598: width = 0;
 12190  001196  0E00               	movlw	0
 12191  001198  0100               	movlb	0	; () banked
 12192  00119A  6FAA               	movwf	(printf@width+1)& (0+255),b
 12193  00119C  0E00               	movlw	0
 12194  00119E  6FA9               	movwf	printf@width& (0+255),b
 12195  0011A0                     l5081:
 12196                           
 12197                           ;doprnt.c: 600: width *= 10;
 12198  0011A0  C0A9  F080         	movff	printf@width,___wmul@multiplier
 12199  0011A4  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 12200  0011A8  0E00               	movlw	0
 12201  0011AA  0100               	movlb	0	; () banked
 12202  0011AC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12203  0011AE  0E0A               	movlw	10
 12204  0011B0  6F82               	movwf	___wmul@multiplicand& (0+255),b
 12205  0011B2  ECCB  F01D         	call	___wmul	;wreg free
 12206  0011B6  C080  F0A9         	movff	?___wmul,printf@width
 12207  0011BA  C081  F0AA         	movff	?___wmul+1,printf@width+1
 12208                           
 12209                           ;doprnt.c: 601: width += *f++ - '0';
 12210  0011BE  0ED0               	movlw	208
 12211  0011C0  0100               	movlb	0	; () banked
 12212  0011C2  6F9A               	movwf	??_printf& (0+255),b
 12213  0011C4  0EFF               	movlw	255
 12214  0011C6  0100               	movlb	0	; () banked
 12215  0011C8  6F9B               	movwf	(??_printf+1)& (0+255),b
 12216  0011CA  C08E  FFF6         	movff	printf@f,tblptrl
 12217  0011CE  C08F  FFF7         	movff	printf@f+1,tblptrh
 12218  0011D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12219  0011D2  6AF8               	clrf	tblptru,c
 12220  0011D4                     	endif
 12221  0011D4                     	if	0	;tblptru may be non-zero
 12222  0011D4                     	endif
 12223  0011D4  0008               	tblrd		*
 12224  0011D6  50F5               	movf	tablat,w,c
 12225  0011D8  0100               	movlb	0	; () banked
 12226  0011DA  6F9C               	movwf	(??_printf+2)& (0+255),b
 12227  0011DC  6B9D               	clrf	(??_printf+3)& (0+255),b
 12228  0011DE  0100               	movlb	0	; () banked
 12229  0011E0  519A               	movf	??_printf& (0+255),w,b
 12230  0011E2  0100               	movlb	0	; () banked
 12231  0011E4  279C               	addwf	(??_printf+2)& (0+255),f,b
 12232  0011E6  0100               	movlb	0	; () banked
 12233  0011E8  519B               	movf	(??_printf+1)& (0+255),w,b
 12234  0011EA  0100               	movlb	0	; () banked
 12235  0011EC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 12236  0011EE  0100               	movlb	0	; () banked
 12237  0011F0  519C               	movf	(??_printf+2)& (0+255),w,b
 12238  0011F2  0100               	movlb	0	; () banked
 12239  0011F4  27A9               	addwf	printf@width& (0+255),f,b
 12240  0011F6  0100               	movlb	0	; () banked
 12241  0011F8  519D               	movf	(??_printf+3)& (0+255),w,b
 12242  0011FA  0100               	movlb	0	; () banked
 12243  0011FC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 12244                           
 12245                           ; BSR set to: 0
 12246  0011FE  0100               	movlb	0	; () banked
 12247  001200  4B8E               	infsnz	printf@f& (0+255),f,b
 12248  001202  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12252  001204  C08E  FFF6         	movff	printf@f,tblptrl
 12253  001208  C08F  FFF7         	movff	printf@f+1,tblptrh
 12254  00120C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12255  00120C  6AF8               	clrf	tblptru,c
 12256  00120E                     	endif
 12257  00120E                     	if	0	;tblptru may be non-zero
 12258  00120E                     	endif
 12259  00120E  0008               	tblrd		*
 12260  001210  50F5               	movf	tablat,w,c
 12261  001212  EC31  F01F         	call	_isdigit
 12262  001216  A0D8               	btfss	status,0,c
 12263  001218  D090               	goto	l5123
 12264  00121A  D7C2               	goto	l5081
 12265  00121C                     l5089:
 12266                           
 12267                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12268  00121C  C0A1  FFD9         	movff	printf@ap,fsr2l
 12269  001220  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12270  001224  CFDE F09F          	movff	postinc2,printf@cp
 12271  001228  CFDD F0A0          	movff	postdec2,printf@cp+1
 12272  00122C  0E02               	movlw	2
 12273  00122E  0100               	movlb	0	; () banked
 12274  001230  27A1               	addwf	printf@ap& (0+255),f,b
 12275  001232  0E00               	movlw	0
 12276  001234  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;doprnt.c: 740: if(!cp)
 12280  001236  0100               	movlb	0	; () banked
 12281  001238  519F               	movf	printf@cp& (0+255),w,b
 12282  00123A  0100               	movlb	0	; () banked
 12283  00123C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 12284  00123E  A4D8               	btfss	status,2,c
 12285  001240  D006               	goto	l5097
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;doprnt.c: 741: cp = "(null)";
 12289  001242  0EB5               	movlw	low STR_107
 12290  001244  0100               	movlb	0	; () banked
 12291  001246  6F9F               	movwf	printf@cp& (0+255),b
 12292  001248  0EFF               	movlw	high STR_107
 12293  00124A  0100               	movlb	0	; () banked
 12294  00124C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 12295  00124E                     l5097:
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;doprnt.c: 745: len = 0;
 12299  00124E  0E00               	movlw	0
 12300  001250  0100               	movlb	0	; () banked
 12301  001252  6FA4               	movwf	(printf@len+1)& (0+255),b
 12302  001254  0E00               	movlw	0
 12303  001256  6FA3               	movwf	printf@len& (0+255),b
 12304                           
 12305                           ;doprnt.c: 746: while(cp[len])
 12306  001258  D003               	goto	l5101
 12307  00125A                     l5099:
 12308                           
 12309                           ;doprnt.c: 747: len++;
 12310  00125A  0100               	movlb	0	; () banked
 12311  00125C  4BA3               	infsnz	printf@len& (0+255),f,b
 12312  00125E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 12313  001260                     l5101:
 12314                           
 12315                           ; BSR set to: 0
 12316  001260  0100               	movlb	0	; () banked
 12317  001262  51A3               	movf	printf@len& (0+255),w,b
 12318  001264  0100               	movlb	0	; () banked
 12319  001266  259F               	addwf	printf@cp& (0+255),w,b
 12320  001268  0100               	movlb	0	; () banked
 12321  00126A  6F9A               	movwf	??_printf& (0+255),b
 12322  00126C  0100               	movlb	0	; () banked
 12323  00126E  51A4               	movf	(printf@len+1)& (0+255),w,b
 12324  001270  0100               	movlb	0	; () banked
 12325  001272  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 12326  001274  0100               	movlb	0	; () banked
 12327  001276  6F9B               	movwf	(??_printf+1)& (0+255),b
 12328  001278  C09A  FFF6         	movff	??_printf,tblptrl
 12329  00127C  C09B  FFF7         	movff	??_printf+1,tblptrh
 12330  001280  0E00               	movlw	low (__mediumconst shr (0+16))
 12331  001282  6EF8               	movwf	tblptru,c
 12332  001284  0E0F               	movlw	(high __ramtop+-1)
 12333  001286  64F7               	cpfsgt	tblptrh,c
 12334  001288  D003               	bra	u3567
 12335  00128A  0008               	tblrd		*
 12336  00128C  50F5               	movf	tablat,w,c
 12337  00128E  D005               	bra	u3560
 12338  001290                     u3567:
 12339  001290  CFF6 FFE9          	movff	tblptrl,fsr0l
 12340  001294  CFF7 FFEA          	movff	tblptrh,fsr0h
 12341  001298  50EF               	movf	indf0,w,c
 12342  00129A                     u3560:
 12343  00129A  0900               	iorlw	0
 12344  00129C  A4D8               	btfss	status,2,c
 12345  00129E  D7DD               	goto	l5099
 12346                           
 12347                           ;doprnt.c: 757: if(width > len)
 12348  0012A0  0100               	movlb	0	; () banked
 12349  0012A2  51A9               	movf	printf@width& (0+255),w,b
 12350  0012A4  0100               	movlb	0	; () banked
 12351  0012A6  5DA3               	subwf	printf@len& (0+255),w,b
 12352  0012A8  0100               	movlb	0	; () banked
 12353  0012AA  51AA               	movf	(printf@width+1)& (0+255),w,b
 12354  0012AC  0100               	movlb	0	; () banked
 12355  0012AE  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 12356  0012B0  B0D8               	btfsc	status,0,c
 12357  0012B2  D009               	goto	l5107
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;doprnt.c: 758: width -= len;
 12361  0012B4  0100               	movlb	0	; () banked
 12362  0012B6  51A3               	movf	printf@len& (0+255),w,b
 12363  0012B8  0100               	movlb	0	; () banked
 12364  0012BA  5FA9               	subwf	printf@width& (0+255),f,b
 12365  0012BC  0100               	movlb	0	; () banked
 12366  0012BE  51A4               	movf	(printf@len+1)& (0+255),w,b
 12367  0012C0  0100               	movlb	0	; () banked
 12368  0012C2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12369  0012C4  D009               	goto	l5111
 12370  0012C6                     l5107:
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;doprnt.c: 759: else
 12374                           ;doprnt.c: 760: width = 0;
 12375  0012C6  0E00               	movlw	0
 12376  0012C8  0100               	movlb	0	; () banked
 12377  0012CA  6FAA               	movwf	(printf@width+1)& (0+255),b
 12378  0012CC  0E00               	movlw	0
 12379  0012CE  6FA9               	movwf	printf@width& (0+255),b
 12380                           
 12381                           ; BSR set to: 0
 12382                           ;doprnt.c: 764: while(width--)
 12383  0012D0  D003               	goto	l5111
 12384  0012D2                     l5109:
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;doprnt.c: 765: (putch(' ') );
 12388  0012D2  0E20               	movlw	32
 12389  0012D4  EC0A  F020         	call	_putch
 12390  0012D8                     l5111:
 12391  0012D8  0100               	movlb	0	; () banked
 12392  0012DA  07A9               	decf	printf@width& (0+255),f,b
 12393  0012DC  A0D8               	btfss	status,0,c
 12394  0012DE  07AA               	decf	(printf@width+1)& (0+255),f,b
 12395  0012E0  0100               	movlb	0	; () banked
 12396  0012E2  29A9               	incf	printf@width& (0+255),w,b
 12397  0012E4  E1F6               	bnz	l5109
 12398  0012E6  0100               	movlb	0	; () banked
 12399  0012E8  29AA               	incf	(printf@width+1)& (0+255),w,b
 12400  0012EA  B4D8               	btfsc	status,2,c
 12401  0012EC  D017               	goto	l5117
 12402  0012EE  D7F1               	goto	l5109
 12403  0012F0                     l5113:
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;doprnt.c: 768: (putch(*cp++) );
 12407  0012F0  C09F  FFF6         	movff	printf@cp,tblptrl
 12408  0012F4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 12409  0012F8  0E00               	movlw	low (__mediumconst shr (0+16))
 12410  0012FA  6EF8               	movwf	tblptru,c
 12411  0012FC  0E0F               	movlw	(high __ramtop+-1)
 12412  0012FE  64F7               	cpfsgt	tblptrh,c
 12413  001300  D003               	bra	u3607
 12414  001302  0008               	tblrd		*
 12415  001304  50F5               	movf	tablat,w,c
 12416  001306  D005               	bra	u3600
 12417  001308                     u3607:
 12418  001308  CFF6 FFE9          	movff	tblptrl,fsr0l
 12419  00130C  CFF7 FFEA          	movff	tblptrh,fsr0h
 12420  001310  50EF               	movf	indf0,w,c
 12421  001312                     u3600:
 12422  001312  EC0A  F020         	call	_putch
 12423  001316  0100               	movlb	0	; () banked
 12424  001318  4B9F               	infsnz	printf@cp& (0+255),f,b
 12425  00131A  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 12426  00131C                     l5117:
 12427                           
 12428                           ; BSR set to: 0
 12429  00131C  0100               	movlb	0	; () banked
 12430  00131E  07A3               	decf	printf@len& (0+255),f,b
 12431  001320  A0D8               	btfss	status,0,c
 12432  001322  07A4               	decf	(printf@len+1)& (0+255),f,b
 12433  001324  0100               	movlb	0	; () banked
 12434  001326  29A3               	incf	printf@len& (0+255),w,b
 12435  001328  E1E3               	bnz	l5113
 12436  00132A  0100               	movlb	0	; () banked
 12437  00132C  29A4               	incf	(printf@len+1)& (0+255),w,b
 12438  00132E  B4D8               	btfsc	status,2,c
 12439  001330  D10A               	goto	l5195
 12440  001332  D7DE               	goto	l5113
 12441  001334                     l5119:
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;doprnt.c: 818: flag |= 0x40;
 12445  001334  0100               	movlb	0	; () banked
 12446  001336  8DA7               	bsf	printf@flag& (0+255),6,b
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;doprnt.c: 822: }
 12450                           
 12451                           ;doprnt.c: 819: break;
 12452  001338  D01D               	goto	l1169
 12453  00133A                     l5123:
 12454  00133A  C08E  FFF6         	movff	printf@f,tblptrl
 12455  00133E  C08F  FFF7         	movff	printf@f+1,tblptrh
 12456  001342  0100               	movlb	0	; () banked
 12457  001344  4B8E               	infsnz	printf@f& (0+255),f,b
 12458  001346  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12459  001348                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12460  001348  6AF8               	clrf	tblptru,c
 12461  00134A                     	endif
 12462  00134A                     	if	0	;tblptru may be non-zero
 12463  00134A                     	endif
 12464  00134A  0008               	tblrd		*
 12465  00134C  CFF5 F0A8          	movff	tablat,printf@c
 12466  001350  0100               	movlb	0	; () banked
 12467  001352  51A8               	movf	printf@c& (0+255),w,b
 12468                           
 12469                           ; Switch size 1, requested type "space"
 12470                           ; Number of cases is 5, Range of values is 0 to 117
 12471                           ; switch strategies available:
 12472                           ; Name         Instructions Cycles
 12473                           ; simple_byte           16     9 (average)
 12474                           ;	Chosen strategy is simple_byte
 12475  001354  0A00               	xorlw	0	; case 0
 12476  001356  B4D8               	btfsc	status,2,c
 12477  001358  0012               	return	
 12478  00135A  0A64               	xorlw	100	; case 100
 12479  00135C  B4D8               	btfsc	status,2,c
 12480  00135E  D00A               	goto	l1169
 12481  001360  0A0D               	xorlw	13	; case 105
 12482  001362  B4D8               	btfsc	status,2,c
 12483  001364  D007               	goto	l1169
 12484  001366  0A1A               	xorlw	26	; case 115
 12485  001368  B4D8               	btfsc	status,2,c
 12486  00136A  D758               	goto	l5089
 12487  00136C  0A06               	xorlw	6	; case 117
 12488  00136E  B4D8               	btfsc	status,2,c
 12489  001370  D7E1               	goto	l5119
 12490  001372  D0E9               	goto	l5195
 12491  001374                     l1169:
 12492                           
 12493                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12494  001374  0100               	movlb	0	; () banked
 12495  001376  BDA7               	btfsc	printf@flag& (0+255),6,b
 12496  001378  D019               	goto	l5135
 12497                           
 12498                           ; BSR set to: 0
 12499                           ;doprnt.c: 1253: {
 12500                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12501  00137A  C0A1  FFD9         	movff	printf@ap,fsr2l
 12502  00137E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12503  001382  CFDE F0A5          	movff	postinc2,printf@val
 12504  001386  CFDD F0A6          	movff	postdec2,printf@val+1
 12505                           
 12506                           ; BSR set to: 0
 12507  00138A  0E02               	movlw	2
 12508  00138C  0100               	movlb	0	; () banked
 12509  00138E  27A1               	addwf	printf@ap& (0+255),f,b
 12510  001390  0E00               	movlw	0
 12511  001392  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;doprnt.c: 1261: if((int)val < 0) {
 12515  001394  0100               	movlb	0	; () banked
 12516  001396  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 12517  001398  D016               	goto	l5139
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;doprnt.c: 1262: flag |= 0x03;
 12521  00139A  0E03               	movlw	3
 12522  00139C  0100               	movlb	0	; () banked
 12523  00139E  13A7               	iorwf	printf@flag& (0+255),f,b
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;doprnt.c: 1263: val = -val;
 12527  0013A0  0100               	movlb	0	; () banked
 12528  0013A2  6DA5               	negf	printf@val& (0+255),b
 12529  0013A4  1FA6               	comf	(printf@val+1)& (0+255),f,b
 12530  0013A6  B0D8               	btfsc	status,0,c
 12531  0013A8  2BA6               	incf	(printf@val+1)& (0+255),f,b
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;doprnt.c: 1264: }
 12535                           ;doprnt.c: 1266: }
 12536  0013AA  D00D               	goto	l5139
 12537  0013AC                     l5135:
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;doprnt.c: 1268: else
 12541                           ;doprnt.c: 1273: {
 12542                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12543  0013AC  C0A1  FFD9         	movff	printf@ap,fsr2l
 12544  0013B0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12545  0013B4  CFDE F0A5          	movff	postinc2,printf@val
 12546  0013B8  CFDD F0A6          	movff	postdec2,printf@val+1
 12547                           
 12548                           ; BSR set to: 0
 12549  0013BC  0E02               	movlw	2
 12550  0013BE  0100               	movlb	0	; () banked
 12551  0013C0  27A1               	addwf	printf@ap& (0+255),f,b
 12552  0013C2  0E00               	movlw	0
 12553  0013C4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12554  0013C6                     l5139:
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;doprnt.c: 1287: }
 12558                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12559  0013C6  0E01               	movlw	1
 12560  0013C8  0100               	movlb	0	; () banked
 12561  0013CA  6FA8               	movwf	printf@c& (0+255),b
 12562  0013CC                     l5141:
 12563                           
 12564                           ; BSR set to: 0
 12565  0013CC  0E05               	movlw	5
 12566  0013CE  0100               	movlb	0	; () banked
 12567  0013D0  19A8               	xorwf	printf@c& (0+255),w,b
 12568  0013D2  B4D8               	btfsc	status,2,c
 12569  0013D4  D019               	goto	l5153
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;doprnt.c: 1306: if(val < dpowers[c])
 12573                           
 12574                           ; BSR set to: 0
 12575                           
 12576                           ; BSR set to: 0
 12577  0013D6  0100               	movlb	0	; () banked
 12578  0013D8  51A8               	movf	printf@c& (0+255),w,b
 12579  0013DA  0D02               	mullw	2
 12580  0013DC  0E82               	movlw	low _dpowers
 12581  0013DE  24F3               	addwf	prodl,w,c
 12582  0013E0  6EF6               	movwf	tblptrl,c
 12583  0013E2  0EFB               	movlw	high _dpowers
 12584  0013E4  20F4               	addwfc	prodh,w,c
 12585  0013E6  6EF7               	movwf	tblptrh,c
 12586  0013E8                     	if	1	;There are 3 active tblptr bytes
 12587  0013E8  6AF8               	clrf	tblptru,c
 12588  0013EA  0E00               	movlw	low (__mediumconst shr (0+16))
 12589  0013EC  22F8               	addwfc	tblptru,f,c
 12590  0013EE                     	endif
 12591  0013EE  0009               	tblrd		*+
 12592  0013F0  50F5               	movf	tablat,w,c
 12593  0013F2  0100               	movlb	0	; () banked
 12594  0013F4  5DA5               	subwf	printf@val& (0+255),w,b
 12595  0013F6  0009               	tblrd		*+
 12596  0013F8  50F5               	movf	tablat,w,c
 12597  0013FA  0100               	movlb	0	; () banked
 12598  0013FC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 12599  0013FE  A0D8               	btfss	status,0,c
 12600  001400  D003               	goto	l5153
 12601                           
 12602                           ; BSR set to: 0
 12603                           
 12604                           ; BSR set to: 0
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;doprnt.c: 1307: break;
 12608  001402  0100               	movlb	0	; () banked
 12609  001404  2BA8               	incf	printf@c& (0+255),f,b
 12610  001406  D7E2               	goto	l5141
 12611  001408                     l5153:
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12615  001408  0100               	movlb	0	; () banked
 12616  00140A  51A9               	movf	printf@width& (0+255),w,b
 12617  00140C  0100               	movlb	0	; () banked
 12618  00140E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12619  001410  B4D8               	btfsc	status,2,c
 12620  001412  D00B               	goto	l5159
 12621                           
 12622                           ; BSR set to: 0
 12623  001414  C0A7  F09A         	movff	printf@flag,??_printf
 12624  001418  0E03               	movlw	3
 12625  00141A  0100               	movlb	0	; () banked
 12626  00141C  179A               	andwf	??_printf& (0+255),f,b
 12627  00141E  B4D8               	btfsc	status,2,c
 12628  001420  D004               	goto	l5159
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;doprnt.c: 1346: width--;
 12632  001422  0100               	movlb	0	; () banked
 12633  001424  07A9               	decf	printf@width& (0+255),f,b
 12634  001426  A0D8               	btfss	status,0,c
 12635  001428  07AA               	decf	(printf@width+1)& (0+255),f,b
 12636  00142A                     l5159:
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;doprnt.c: 1381: if(width > c)
 12640  00142A  0E80               	movlw	128
 12641  00142C  0100               	movlb	0	; () banked
 12642  00142E  BFA8               	btfsc	printf@c& (0+255),7,b
 12643  001430  0E7F               	movlw	127
 12644  001432  0100               	movlb	0	; () banked
 12645  001434  6F9A               	movwf	??_printf& (0+255),b
 12646  001436  0100               	movlb	0	; () banked
 12647  001438  51A9               	movf	printf@width& (0+255),w,b
 12648  00143A  0100               	movlb	0	; () banked
 12649  00143C  5DA8               	subwf	printf@c& (0+255),w,b
 12650  00143E  0100               	movlb	0	; () banked
 12651  001440  51AA               	movf	(printf@width+1)& (0+255),w,b
 12652  001442  0A80               	xorlw	128
 12653  001444  0100               	movlb	0	; () banked
 12654  001446  599A               	subwfb	??_printf& (0+255),w,b
 12655  001448  B0D8               	btfsc	status,0,c
 12656  00144A  D00B               	goto	l5163
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;doprnt.c: 1382: width -= c;
 12660  00144C  0100               	movlb	0	; () banked
 12661  00144E  51A8               	movf	printf@c& (0+255),w,b
 12662  001450  0100               	movlb	0	; () banked
 12663  001452  5FA9               	subwf	printf@width& (0+255),f,b
 12664  001454  0E00               	movlw	0
 12665  001456  0100               	movlb	0	; () banked
 12666  001458  BFA8               	btfsc	printf@c& (0+255),7,b
 12667  00145A  0EFF               	movlw	255
 12668  00145C  0100               	movlb	0	; () banked
 12669  00145E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12670  001460  D005               	goto	l5165
 12671  001462                     l5163:
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;doprnt.c: 1383: else
 12675                           ;doprnt.c: 1384: width = 0;
 12676  001462  0E00               	movlw	0
 12677  001464  0100               	movlb	0	; () banked
 12678  001466  6FAA               	movwf	(printf@width+1)& (0+255),b
 12679  001468  0E00               	movlw	0
 12680  00146A  6FA9               	movwf	printf@width& (0+255),b
 12681  00146C                     l5165:
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;doprnt.c: 1387: if(flag & 0x04) {
 12685  00146C  0100               	movlb	0	; () banked
 12686  00146E  A5A7               	btfss	printf@flag& (0+255),2,b
 12687  001470  D018               	goto	l5177
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;doprnt.c: 1392: if(flag & 0x03)
 12691  001472  C0A7  F09A         	movff	printf@flag,??_printf
 12692  001476  0E03               	movlw	3
 12693  001478  0100               	movlb	0	; () banked
 12694  00147A  179A               	andwf	??_printf& (0+255),f,b
 12695  00147C  B4D8               	btfsc	status,2,c
 12696  00147E  D003               	goto	l5171
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;doprnt.c: 1393: (putch('-') );
 12700  001480  0E2D               	movlw	45
 12701  001482  EC0A  F020         	call	_putch
 12702  001486                     l5171:
 12703                           
 12704                           ;doprnt.c: 1415: if(width)
 12705  001486  0100               	movlb	0	; () banked
 12706  001488  51A9               	movf	printf@width& (0+255),w,b
 12707  00148A  0100               	movlb	0	; () banked
 12708  00148C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12709  00148E  B4D8               	btfsc	status,2,c
 12710  001490  D025               	goto	l5187
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;doprnt.c: 1417: (putch('0') );
 12714                           
 12715                           ; BSR set to: 0
 12716                           
 12717                           ;doprnt.c: 1416: do
 12718  001492  0E30               	movlw	48
 12719  001494  EC0A  F020         	call	_putch
 12720                           
 12721                           ;doprnt.c: 1418: while(--width);
 12722  001498  0100               	movlb	0	; () banked
 12723  00149A  07A9               	decf	printf@width& (0+255),f,b
 12724  00149C  A0D8               	btfss	status,0,c
 12725  00149E  07AA               	decf	(printf@width+1)& (0+255),f,b
 12726  0014A0  D7F2               	goto	l5171
 12727  0014A2                     l5177:
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;doprnt.c: 1422: {
 12731                           ;doprnt.c: 1424: if(width
 12732                           ;doprnt.c: 1428: )
 12733  0014A2  0100               	movlb	0	; () banked
 12734  0014A4  51A9               	movf	printf@width& (0+255),w,b
 12735  0014A6  0100               	movlb	0	; () banked
 12736  0014A8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12737  0014AA  B4D8               	btfsc	status,2,c
 12738  0014AC  D00D               	goto	l5183
 12739  0014AE                     l5179:
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;doprnt.c: 1430: (putch(' ') );
 12743  0014AE  0E20               	movlw	32
 12744  0014B0  EC0A  F020         	call	_putch
 12745                           
 12746                           ;doprnt.c: 1431: while(--width);
 12747  0014B4  0100               	movlb	0	; () banked
 12748  0014B6  07A9               	decf	printf@width& (0+255),f,b
 12749  0014B8  A0D8               	btfss	status,0,c
 12750  0014BA  07AA               	decf	(printf@width+1)& (0+255),f,b
 12751  0014BC  0100               	movlb	0	; () banked
 12752  0014BE  51A9               	movf	printf@width& (0+255),w,b
 12753  0014C0  0100               	movlb	0	; () banked
 12754  0014C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12755  0014C4  A4D8               	btfss	status,2,c
 12756  0014C6  D7F3               	goto	l5179
 12757  0014C8                     l5183:
 12758                           
 12759                           ; BSR set to: 0
 12760                           ;doprnt.c: 1438: if(flag & 0x03)
 12761  0014C8  C0A7  F09A         	movff	printf@flag,??_printf
 12762  0014CC  0E03               	movlw	3
 12763  0014CE  0100               	movlb	0	; () banked
 12764  0014D0  179A               	andwf	??_printf& (0+255),f,b
 12765  0014D2  B4D8               	btfsc	status,2,c
 12766  0014D4  D003               	goto	l5187
 12767                           
 12768                           ; BSR set to: 0
 12769                           ;doprnt.c: 1439: (putch('-') );
 12770  0014D6  0E2D               	movlw	45
 12771  0014D8  EC0A  F020         	call	_putch
 12772  0014DC                     l5187:
 12773                           
 12774                           ;doprnt.c: 1469: }
 12775                           ;doprnt.c: 1472: prec = c;
 12776  0014DC  C0A8  F09E         	movff	printf@c,printf@prec
 12777                           
 12778                           ;doprnt.c: 1474: while(prec--) {
 12779  0014E0  D02C               	goto	l5193
 12780  0014E2                     l5189:
 12781                           
 12782                           ;doprnt.c: 1478: {
 12783                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12784  0014E2  0100               	movlb	0	; () banked
 12785  0014E4  519E               	movf	printf@prec& (0+255),w,b
 12786  0014E6  0D02               	mullw	2
 12787  0014E8  0E82               	movlw	low _dpowers
 12788  0014EA  24F3               	addwf	prodl,w,c
 12789  0014EC  6EF6               	movwf	tblptrl,c
 12790  0014EE  0EFB               	movlw	high _dpowers
 12791  0014F0  20F4               	addwfc	prodh,w,c
 12792  0014F2  6EF7               	movwf	tblptrh,c
 12793  0014F4                     	if	1	;There are 3 active tblptr bytes
 12794  0014F4  6AF8               	clrf	tblptru,c
 12795  0014F6  0E00               	movlw	low (__mediumconst shr (0+16))
 12796  0014F8  22F8               	addwfc	tblptru,f,c
 12797  0014FA                     	endif
 12798  0014FA  0009               	tblrd		*+
 12799  0014FC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 12800  001500  000A               	tblrd		*-
 12801  001502  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 12802  001506  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 12803  00150A  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 12804  00150E  EC42  F01A         	call	___lwdiv	;wreg free
 12805  001512  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 12806  001516  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 12807  00151A  0E00               	movlw	0
 12808  00151C  0100               	movlb	0	; () banked
 12809  00151E  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 12810  001520  0E0A               	movlw	10
 12811  001522  6F89               	movwf	___lwmod@divisor& (0+255),b
 12812  001524  EC8C  F01B         	call	___lwmod	;wreg free
 12813  001528  0100               	movlb	0	; () banked
 12814  00152A  5187               	movf	?___lwmod& (0+255),w,b
 12815  00152C  0F30               	addlw	48
 12816  00152E  0100               	movlb	0	; () banked
 12817  001530  6FA8               	movwf	printf@c& (0+255),b
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;doprnt.c: 1523: }
 12821                           ;doprnt.c: 1524: (putch(c) );
 12822  001532  0100               	movlb	0	; () banked
 12823  001534  51A8               	movf	printf@c& (0+255),w,b
 12824  001536  EC0A  F020         	call	_putch
 12825  00153A                     l5193:
 12826  00153A  0100               	movlb	0	; () banked
 12827  00153C  079E               	decf	printf@prec& (0+255),f,b
 12828  00153E  0100               	movlb	0	; () banked
 12829  001540  299E               	incf	printf@prec& (0+255),w,b
 12830  001542  A4D8               	btfss	status,2,c
 12831  001544  D7CE               	goto	l5189
 12832  001546                     l5195:
 12833  001546  C08E  FFF6         	movff	printf@f,tblptrl
 12834  00154A  C08F  FFF7         	movff	printf@f+1,tblptrh
 12835  00154E  0100               	movlb	0	; () banked
 12836  001550  4B8E               	infsnz	printf@f& (0+255),f,b
 12837  001552  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12838  001554                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12839  001554  6AF8               	clrf	tblptru,c
 12840  001556                     	endif
 12841  001556                     	if	0	;tblptru may be non-zero
 12842  001556                     	endif
 12843  001556  0008               	tblrd		*
 12844  001558  CFF5 F0A8          	movff	tablat,printf@c
 12845  00155C  0100               	movlb	0	; () banked
 12846  00155E  51A8               	movf	printf@c& (0+255),w,b
 12847  001560  B4D8               	btfsc	status,2,c
 12848  001562  0012               	return	
 12849  001564  D5EB               	goto	l5065
 12850  001566                     __end_of_printf:
 12851                           	opt stack 0
 12852                           tblptru	equ	0xFF8
 12853                           tblptrh	equ	0xFF7
 12854                           tblptrl	equ	0xFF6
 12855                           tablat	equ	0xFF5
 12856                           prodh	equ	0xFF4
 12857                           prodl	equ	0xFF3
 12858                           intcon	equ	0xFF2
 12859                           intcon2	equ	0xFF1
 12860                           intcon3	equ	0xFF0
 12861                           indf0	equ	0xFEF
 12862                           postinc0	equ	0xFEE
 12863                           fsr0h	equ	0xFEA
 12864                           fsr0l	equ	0xFE9
 12865                           wreg	equ	0xFE8
 12866                           postdec1	equ	0xFE5
 12867                           fsr1l	equ	0xFE1
 12868                           indf2	equ	0xFDF
 12869                           postinc2	equ	0xFDE
 12870                           postdec2	equ	0xFDD
 12871                           fsr2h	equ	0xFDA
 12872                           fsr2l	equ	0xFD9
 12873                           status	equ	0xFD8
 12874                           
 12875 ;; *************** function _putch *****************
 12876 ;; Defined at:
 12877 ;;		line 20 in file "lcd.c"
 12878 ;; Parameters:    Size  Location     Type
 12879 ;;  data            1    wreg     unsigned char 
 12880 ;; Auto vars:     Size  Location     Type
 12881 ;;  data            1    2[BANK0 ] unsigned char 
 12882 ;; Return value:  Size  Location     Type
 12883 ;;                  1    wreg      void 
 12884 ;; Registers used:
 12885 ;;		wreg, status,2, status,0, cstack
 12886 ;; Tracked objects:
 12887 ;;		On entry : 0/0
 12888 ;;		On exit  : 0/0
 12889 ;;		Unchanged: 0/0
 12890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;Total ram usage:        1 bytes
 12896 ;; Hardware stack levels used:    1
 12897 ;; Hardware stack levels required when called:    8
 12898 ;; This function calls:
 12899 ;;		_lcdNibble
 12900 ;; This function is called by:
 12901 ;;		_printf
 12902 ;; This function uses a non-reentrant model
 12903 ;;
 12904                           
 12905                           	psect	text45
 12906  004014                     __ptext45:
 12907                           	opt stack 0
 12908  004014                     _putch:
 12909                           	opt stack 18
 12910                           
 12911                           ;incstack = 0
 12912                           ;putch@data stored from wreg
 12913  004014  0100               	movlb	0	; () banked
 12914  004016  6F82               	movwf	putch@data& (0+255),b
 12915                           
 12916                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 12917  004018  848C               	bsf	3980,2,c	;volatile
 12918                           
 12919                           ;lcd.c: 22: lcdNibble(data);
 12920  00401A  0100               	movlb	0	; () banked
 12921  00401C  5182               	movf	putch@data& (0+255),w,b
 12922  00401E  EC27  F01B         	call	_lcdNibble
 12923  004022  0012               	return		;funcret
 12924  004024                     __end_of_putch:
 12925                           	opt stack 0
 12926                           tblptru	equ	0xFF8
 12927                           tblptrh	equ	0xFF7
 12928                           tblptrl	equ	0xFF6
 12929                           tablat	equ	0xFF5
 12930                           prodh	equ	0xFF4
 12931                           prodl	equ	0xFF3
 12932                           intcon	equ	0xFF2
 12933                           intcon2	equ	0xFF1
 12934                           intcon3	equ	0xFF0
 12935                           indf0	equ	0xFEF
 12936                           postinc0	equ	0xFEE
 12937                           fsr0h	equ	0xFEA
 12938                           fsr0l	equ	0xFE9
 12939                           wreg	equ	0xFE8
 12940                           postdec1	equ	0xFE5
 12941                           fsr1l	equ	0xFE1
 12942                           indf2	equ	0xFDF
 12943                           postinc2	equ	0xFDE
 12944                           postdec2	equ	0xFDD
 12945                           fsr2h	equ	0xFDA
 12946                           fsr2l	equ	0xFD9
 12947                           status	equ	0xFD8
 12948                           
 12949 ;; *************** function _isdigit *****************
 12950 ;; Defined at:
 12951 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;  c               1    wreg     unsigned char 
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;  c               1    2[BANK0 ] unsigned char 
 12956 ;; Return value:  Size  Location     Type
 12957 ;;		None               void
 12958 ;; Registers used:
 12959 ;;		wreg, status,2, status,0
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;Total ram usage:        3 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; Hardware stack levels required when called:    7
 12972 ;; This function calls:
 12973 ;;		Nothing
 12974 ;; This function is called by:
 12975 ;;		_printf
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           	psect	text46
 12980  003E62                     __ptext46:
 12981                           	opt stack 0
 12982  003E62                     _isdigit:
 12983                           	opt stack 19
 12984                           
 12985                           ;incstack = 0
 12986                           ;isdigit@c stored from wreg
 12987  003E62  0100               	movlb	0	; () banked
 12988  003E64  6F82               	movwf	isdigit@c& (0+255),b
 12989  003E66  0E00               	movlw	0
 12990  003E68  0100               	movlb	0	; () banked
 12991  003E6A  6F81               	movwf	_isdigit$1852& (0+255),b
 12992                           
 12993                           ; BSR set to: 0
 12994  003E6C  0E3A               	movlw	58
 12995  003E6E  0100               	movlb	0	; () banked
 12996  003E70  6182               	cpfslt	isdigit@c& (0+255),b
 12997  003E72  D007               	goto	l4919
 12998                           
 12999                           ; BSR set to: 0
 13000  003E74  0E2F               	movlw	47
 13001  003E76  0100               	movlb	0	; () banked
 13002  003E78  6582               	cpfsgt	isdigit@c& (0+255),b
 13003  003E7A  D003               	goto	l4919
 13004                           
 13005                           ; BSR set to: 0
 13006  003E7C  0E01               	movlw	1
 13007  003E7E  0100               	movlb	0	; () banked
 13008  003E80  6F81               	movwf	_isdigit$1852& (0+255),b
 13009  003E82                     l4919:
 13010                           
 13011                           ; BSR set to: 0
 13012  003E82  C081  F080         	movff	_isdigit$1852,??_isdigit
 13013  003E86  0100               	movlb	0	; () banked
 13014  003E88  3180               	rrcf	??_isdigit& (0+255),w,b
 13015  003E8A  0012               	return	
 13016  003E8C                     __end_of_isdigit:
 13017                           	opt stack 0
 13018                           tblptru	equ	0xFF8
 13019                           tblptrh	equ	0xFF7
 13020                           tblptrl	equ	0xFF6
 13021                           tablat	equ	0xFF5
 13022                           prodh	equ	0xFF4
 13023                           prodl	equ	0xFF3
 13024                           intcon	equ	0xFF2
 13025                           intcon2	equ	0xFF1
 13026                           intcon3	equ	0xFF0
 13027                           indf0	equ	0xFEF
 13028                           postinc0	equ	0xFEE
 13029                           fsr0h	equ	0xFEA
 13030                           fsr0l	equ	0xFE9
 13031                           wreg	equ	0xFE8
 13032                           postdec1	equ	0xFE5
 13033                           fsr1l	equ	0xFE1
 13034                           indf2	equ	0xFDF
 13035                           postinc2	equ	0xFDE
 13036                           postdec2	equ	0xFDD
 13037                           fsr2h	equ	0xFDA
 13038                           fsr2l	equ	0xFD9
 13039                           status	equ	0xFD8
 13040                           
 13041 ;; *************** function ___wmul *****************
 13042 ;; Defined at:
 13043 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13046 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;  product         2    4[BANK0 ] unsigned int 
 13049 ;; Return value:  Size  Location     Type
 13050 ;;                  2    0[BANK0 ] unsigned int 
 13051 ;; Registers used:
 13052 ;;		wreg, status,2, status,0, prodl, prodh
 13053 ;; Tracked objects:
 13054 ;;		On entry : 0/0
 13055 ;;		On exit  : 0/0
 13056 ;;		Unchanged: 0/0
 13057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13058 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13059 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13061 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13062 ;;Total ram usage:        6 bytes
 13063 ;; Hardware stack levels used:    1
 13064 ;; Hardware stack levels required when called:    7
 13065 ;; This function calls:
 13066 ;;		Nothing
 13067 ;; This function is called by:
 13068 ;;		_printf
 13069 ;; This function uses a non-reentrant model
 13070 ;;
 13071                           
 13072                           	psect	text47
 13073  003B96                     __ptext47:
 13074                           	opt stack 0
 13075  003B96                     ___wmul:
 13076                           	opt stack 19
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;incstack = 0
 13080  003B96  0100               	movlb	0	; () banked
 13081  003B98  5180               	movf	___wmul@multiplier& (0+255),w,b
 13082  003B9A  0100               	movlb	0	; () banked
 13083  003B9C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13084  003B9E  CFF3 F084          	movff	prodl,___wmul@product
 13085  003BA2  CFF4 F085          	movff	prodh,___wmul@product+1
 13086  003BA6  0100               	movlb	0	; () banked
 13087  003BA8  5180               	movf	___wmul@multiplier& (0+255),w,b
 13088  003BAA  0100               	movlb	0	; () banked
 13089  003BAC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13090  003BAE  50F3               	movf	prodl,w,c
 13091  003BB0  0100               	movlb	0	; () banked
 13092  003BB2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13093  003BB4  0100               	movlb	0	; () banked
 13094  003BB6  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13095  003BB8  0100               	movlb	0	; () banked
 13096  003BBA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13097  003BBC  50F3               	movf	prodl,w,c
 13098  003BBE  0100               	movlb	0	; () banked
 13099  003BC0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13100                           
 13101                           ; BSR set to: 0
 13102  003BC2  C084  F080         	movff	___wmul@product,?___wmul
 13103  003BC6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13104  003BCA  0012               	return	
 13105  003BCC                     __end_of___wmul:
 13106                           	opt stack 0
 13107                           tblptru	equ	0xFF8
 13108                           tblptrh	equ	0xFF7
 13109                           tblptrl	equ	0xFF6
 13110                           tablat	equ	0xFF5
 13111                           prodh	equ	0xFF4
 13112                           prodl	equ	0xFF3
 13113                           intcon	equ	0xFF2
 13114                           intcon2	equ	0xFF1
 13115                           intcon3	equ	0xFF0
 13116                           indf0	equ	0xFEF
 13117                           postinc0	equ	0xFEE
 13118                           fsr0h	equ	0xFEA
 13119                           fsr0l	equ	0xFE9
 13120                           wreg	equ	0xFE8
 13121                           postdec1	equ	0xFE5
 13122                           fsr1l	equ	0xFE1
 13123                           indf2	equ	0xFDF
 13124                           postinc2	equ	0xFDE
 13125                           postdec2	equ	0xFDD
 13126                           fsr2h	equ	0xFDA
 13127                           fsr2l	equ	0xFD9
 13128                           status	equ	0xFD8
 13129                           
 13130 ;; *************** function ___lwmod *****************
 13131 ;; Defined at:
 13132 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13133 ;; Parameters:    Size  Location     Type
 13134 ;;  dividend        2    7[BANK0 ] unsigned int 
 13135 ;;  divisor         2    9[BANK0 ] unsigned int 
 13136 ;; Auto vars:     Size  Location     Type
 13137 ;;  counter         1   11[BANK0 ] unsigned char 
 13138 ;; Return value:  Size  Location     Type
 13139 ;;                  2    7[BANK0 ] unsigned int 
 13140 ;; Registers used:
 13141 ;;		wreg, status,2, status,0
 13142 ;; Tracked objects:
 13143 ;;		On entry : 0/0
 13144 ;;		On exit  : 0/0
 13145 ;;		Unchanged: 0/0
 13146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13147 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;Total ram usage:        5 bytes
 13152 ;; Hardware stack levels used:    1
 13153 ;; Hardware stack levels required when called:    7
 13154 ;; This function calls:
 13155 ;;		Nothing
 13156 ;; This function is called by:
 13157 ;;		_printf
 13158 ;; This function uses a non-reentrant model
 13159 ;;
 13160                           
 13161                           	psect	text48
 13162  003718                     __ptext48:
 13163                           	opt stack 0
 13164  003718                     ___lwmod:
 13165                           	opt stack 19
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;incstack = 0
 13169  003718  0100               	movlb	0	; () banked
 13170  00371A  5189               	movf	___lwmod@divisor& (0+255),w,b
 13171  00371C  0100               	movlb	0	; () banked
 13172  00371E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13173  003720  B4D8               	btfsc	status,2,c
 13174  003722  D026               	goto	l1626
 13175                           
 13176                           ; BSR set to: 0
 13177  003724  0E01               	movlw	1
 13178  003726  0100               	movlb	0	; () banked
 13179  003728  6F8B               	movwf	___lwmod@counter& (0+255),b
 13180  00372A  D006               	goto	l4957
 13181  00372C                     l4955:
 13182                           
 13183                           ; BSR set to: 0
 13184  00372C  0100               	movlb	0	; () banked
 13185  00372E  90D8               	bcf	status,0,c
 13186  003730  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 13187  003732  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13188  003734  0100               	movlb	0	; () banked
 13189  003736  2B8B               	incf	___lwmod@counter& (0+255),f,b
 13190  003738                     l4957:
 13191                           
 13192                           ; BSR set to: 0
 13193  003738  0100               	movlb	0	; () banked
 13194  00373A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13195  00373C  D7F7               	goto	l4955
 13196  00373E                     l4959:
 13197                           
 13198                           ; BSR set to: 0
 13199  00373E  0100               	movlb	0	; () banked
 13200  003740  5189               	movf	___lwmod@divisor& (0+255),w,b
 13201  003742  0100               	movlb	0	; () banked
 13202  003744  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 13203  003746  0100               	movlb	0	; () banked
 13204  003748  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13205  00374A  0100               	movlb	0	; () banked
 13206  00374C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13207  00374E  A0D8               	btfss	status,0,c
 13208  003750  D008               	goto	l4963
 13209                           
 13210                           ; BSR set to: 0
 13211  003752  0100               	movlb	0	; () banked
 13212  003754  5189               	movf	___lwmod@divisor& (0+255),w,b
 13213  003756  0100               	movlb	0	; () banked
 13214  003758  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 13215  00375A  0100               	movlb	0	; () banked
 13216  00375C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13217  00375E  0100               	movlb	0	; () banked
 13218  003760  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13219  003762                     l4963:
 13220                           
 13221                           ; BSR set to: 0
 13222  003762  0100               	movlb	0	; () banked
 13223  003764  90D8               	bcf	status,0,c
 13224  003766  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13225  003768  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 13226                           
 13227                           ; BSR set to: 0
 13228  00376A  0100               	movlb	0	; () banked
 13229  00376C  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 13230  00376E  D7E7               	goto	l4959
 13231  003770                     l1626:
 13232                           
 13233                           ; BSR set to: 0
 13234  003770  C087  F087         	movff	___lwmod@dividend,?___lwmod
 13235  003774  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 13236                           
 13237                           ; BSR set to: 0
 13238  003778  0012               	return		;funcret
 13239  00377A                     __end_of___lwmod:
 13240                           	opt stack 0
 13241                           tblptru	equ	0xFF8
 13242                           tblptrh	equ	0xFF7
 13243                           tblptrl	equ	0xFF6
 13244                           tablat	equ	0xFF5
 13245                           prodh	equ	0xFF4
 13246                           prodl	equ	0xFF3
 13247                           intcon	equ	0xFF2
 13248                           intcon2	equ	0xFF1
 13249                           intcon3	equ	0xFF0
 13250                           indf0	equ	0xFEF
 13251                           postinc0	equ	0xFEE
 13252                           fsr0h	equ	0xFEA
 13253                           fsr0l	equ	0xFE9
 13254                           wreg	equ	0xFE8
 13255                           postdec1	equ	0xFE5
 13256                           fsr1l	equ	0xFE1
 13257                           indf2	equ	0xFDF
 13258                           postinc2	equ	0xFDE
 13259                           postdec2	equ	0xFDD
 13260                           fsr2h	equ	0xFDA
 13261                           fsr2l	equ	0xFD9
 13262                           status	equ	0xFD8
 13263                           
 13264 ;; *************** function ___lwdiv *****************
 13265 ;; Defined at:
 13266 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13267 ;; Parameters:    Size  Location     Type
 13268 ;;  dividend        2    0[BANK0 ] unsigned int 
 13269 ;;  divisor         2    2[BANK0 ] unsigned int 
 13270 ;; Auto vars:     Size  Location     Type
 13271 ;;  quotient        2    4[BANK0 ] unsigned int 
 13272 ;;  counter         1    6[BANK0 ] unsigned char 
 13273 ;; Return value:  Size  Location     Type
 13274 ;;                  2    0[BANK0 ] unsigned int 
 13275 ;; Registers used:
 13276 ;;		wreg, status,2, status,0
 13277 ;; Tracked objects:
 13278 ;;		On entry : 0/0
 13279 ;;		On exit  : 0/0
 13280 ;;		Unchanged: 0/0
 13281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13282 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13283 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;Total ram usage:        7 bytes
 13287 ;; Hardware stack levels used:    1
 13288 ;; Hardware stack levels required when called:    7
 13289 ;; This function calls:
 13290 ;;		Nothing
 13291 ;; This function is called by:
 13292 ;;		_printf
 13293 ;; This function uses a non-reentrant model
 13294 ;;
 13295                           
 13296                           	psect	text49
 13297  003484                     __ptext49:
 13298                           	opt stack 0
 13299  003484                     ___lwdiv:
 13300                           	opt stack 19
 13301                           
 13302                           ; BSR set to: 0
 13303                           ;incstack = 0
 13304  003484  0E00               	movlw	0
 13305  003486  0100               	movlb	0	; () banked
 13306  003488  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13307  00348A  0E00               	movlw	0
 13308  00348C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 13309                           
 13310                           ; BSR set to: 0
 13311  00348E  0100               	movlb	0	; () banked
 13312  003490  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13313  003492  0100               	movlb	0	; () banked
 13314  003494  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13315  003496  B4D8               	btfsc	status,2,c
 13316  003498  D02C               	goto	l1616
 13317                           
 13318                           ; BSR set to: 0
 13319  00349A  0E01               	movlw	1
 13320  00349C  0100               	movlb	0	; () banked
 13321  00349E  6F86               	movwf	___lwdiv@counter& (0+255),b
 13322  0034A0  D006               	goto	l4937
 13323  0034A2                     l4935:
 13324                           
 13325                           ; BSR set to: 0
 13326  0034A2  0100               	movlb	0	; () banked
 13327  0034A4  90D8               	bcf	status,0,c
 13328  0034A6  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 13329  0034A8  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13330  0034AA  0100               	movlb	0	; () banked
 13331  0034AC  2B86               	incf	___lwdiv@counter& (0+255),f,b
 13332  0034AE                     l4937:
 13333                           
 13334                           ; BSR set to: 0
 13335  0034AE  0100               	movlb	0	; () banked
 13336  0034B0  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13337  0034B2  D7F7               	goto	l4935
 13338  0034B4                     l4939:
 13339                           
 13340                           ; BSR set to: 0
 13341  0034B4  0100               	movlb	0	; () banked
 13342  0034B6  90D8               	bcf	status,0,c
 13343  0034B8  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 13344  0034BA  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13345                           
 13346                           ; BSR set to: 0
 13347  0034BC  0100               	movlb	0	; () banked
 13348  0034BE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13349  0034C0  0100               	movlb	0	; () banked
 13350  0034C2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 13351  0034C4  0100               	movlb	0	; () banked
 13352  0034C6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13353  0034C8  0100               	movlb	0	; () banked
 13354  0034CA  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13355  0034CC  A0D8               	btfss	status,0,c
 13356  0034CE  D00A               	goto	l4947
 13357                           
 13358                           ; BSR set to: 0
 13359  0034D0  0100               	movlb	0	; () banked
 13360  0034D2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13361  0034D4  0100               	movlb	0	; () banked
 13362  0034D6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 13363  0034D8  0100               	movlb	0	; () banked
 13364  0034DA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13365  0034DC  0100               	movlb	0	; () banked
 13366  0034DE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13367                           
 13368                           ; BSR set to: 0
 13369  0034E0  0100               	movlb	0	; () banked
 13370  0034E2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 13371  0034E4                     l4947:
 13372                           
 13373                           ; BSR set to: 0
 13374  0034E4  0100               	movlb	0	; () banked
 13375  0034E6  90D8               	bcf	status,0,c
 13376  0034E8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13377  0034EA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 13378                           
 13379                           ; BSR set to: 0
 13380  0034EC  0100               	movlb	0	; () banked
 13381  0034EE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 13382  0034F0  D7E1               	goto	l4939
 13383  0034F2                     l1616:
 13384                           
 13385                           ; BSR set to: 0
 13386  0034F2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 13387  0034F6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13388                           
 13389                           ; BSR set to: 0
 13390  0034FA  0012               	return		;funcret
 13391  0034FC                     __end_of___lwdiv:
 13392                           	opt stack 0
 13393                           tblptru	equ	0xFF8
 13394                           tblptrh	equ	0xFF7
 13395                           tblptrl	equ	0xFF6
 13396                           tablat	equ	0xFF5
 13397                           prodh	equ	0xFF4
 13398                           prodl	equ	0xFF3
 13399                           intcon	equ	0xFF2
 13400                           intcon2	equ	0xFF1
 13401                           intcon3	equ	0xFF0
 13402                           indf0	equ	0xFEF
 13403                           postinc0	equ	0xFEE
 13404                           fsr0h	equ	0xFEA
 13405                           fsr0l	equ	0xFE9
 13406                           wreg	equ	0xFE8
 13407                           postdec1	equ	0xFE5
 13408                           fsr1l	equ	0xFE1
 13409                           indf2	equ	0xFDF
 13410                           postinc2	equ	0xFDE
 13411                           postdec2	equ	0xFDD
 13412                           fsr2h	equ	0xFDA
 13413                           fsr2l	equ	0xFD9
 13414                           status	equ	0xFD8
 13415                           
 13416 ;; *************** function _lcdInst *****************
 13417 ;; Defined at:
 13418 ;;		line 15 in file "lcd.c"
 13419 ;; Parameters:    Size  Location     Type
 13420 ;;  data            1    wreg     unsigned char 
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;  data            1    2[BANK0 ] unsigned char 
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  1    wreg      void 
 13425 ;; Registers used:
 13426 ;;		wreg, status,2, status,0, cstack
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13435 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;Total ram usage:        1 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    8
 13439 ;; This function calls:
 13440 ;;		_lcdNibble
 13441 ;; This function is called by:
 13442 ;;		_UI
 13443 ;;		_change_state_to_menu_start
 13444 ;;		_change_state_to_menu_12
 13445 ;;		_change_state_to_menu_22
 13446 ;;		_initLCD
 13447 ;;		_printRTC
 13448 ;;		_Loading
 13449 ;;		_EEPROM_write
 13450 ;;		_Test
 13451 ;;		_algorithmTest
 13452 ;;		_sensorTest
 13453 ;;		_actuatorTest
 13454 ;;		_PortTestA5
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458                           	psect	text50
 13459  004024                     __ptext50:
 13460                           	opt stack 0
 13461  004024                     _lcdInst:
 13462                           	opt stack 20
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;incstack = 0
 13466                           ;lcdInst@data stored from wreg
 13467  004024  0100               	movlb	0	; () banked
 13468  004026  6F82               	movwf	lcdInst@data& (0+255),b
 13469                           
 13470                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 13471  004028  948C               	bcf	3980,2,c	;volatile
 13472                           
 13473                           ;lcd.c: 17: lcdNibble(data);
 13474  00402A  0100               	movlb	0	; () banked
 13475  00402C  5182               	movf	lcdInst@data& (0+255),w,b
 13476  00402E  EC27  F01B         	call	_lcdNibble
 13477  004032  0012               	return		;funcret
 13478  004034                     __end_of_lcdInst:
 13479                           	opt stack 0
 13480                           tblptru	equ	0xFF8
 13481                           tblptrh	equ	0xFF7
 13482                           tblptrl	equ	0xFF6
 13483                           tablat	equ	0xFF5
 13484                           prodh	equ	0xFF4
 13485                           prodl	equ	0xFF3
 13486                           intcon	equ	0xFF2
 13487                           intcon2	equ	0xFF1
 13488                           intcon3	equ	0xFF0
 13489                           indf0	equ	0xFEF
 13490                           postinc0	equ	0xFEE
 13491                           fsr0h	equ	0xFEA
 13492                           fsr0l	equ	0xFE9
 13493                           wreg	equ	0xFE8
 13494                           postdec1	equ	0xFE5
 13495                           fsr1l	equ	0xFE1
 13496                           indf2	equ	0xFDF
 13497                           postinc2	equ	0xFDE
 13498                           postdec2	equ	0xFDD
 13499                           fsr2h	equ	0xFDA
 13500                           fsr2l	equ	0xFD9
 13501                           status	equ	0xFD8
 13502                           
 13503 ;; *************** function _lcdNibble *****************
 13504 ;; Defined at:
 13505 ;;		line 25 in file "lcd.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;  data            1    wreg     unsigned char 
 13508 ;; Auto vars:     Size  Location     Type
 13509 ;;  data            1    1[BANK0 ] unsigned char 
 13510 ;;  temp            1    0[BANK0 ] unsigned char 
 13511 ;; Return value:  Size  Location     Type
 13512 ;;                  1    wreg      void 
 13513 ;; Registers used:
 13514 ;;		wreg, status,2, status,0
 13515 ;; Tracked objects:
 13516 ;;		On entry : 0/0
 13517 ;;		On exit  : 0/0
 13518 ;;		Unchanged: 0/0
 13519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13524 ;;Total ram usage:        2 bytes
 13525 ;; Hardware stack levels used:    1
 13526 ;; Hardware stack levels required when called:    7
 13527 ;; This function calls:
 13528 ;;		Nothing
 13529 ;; This function is called by:
 13530 ;;		_lcdInst
 13531 ;;		_putch
 13532 ;; This function uses a non-reentrant model
 13533 ;;
 13534                           
 13535                           	psect	text51
 13536  00364E                     __ptext51:
 13537                           	opt stack 0
 13538  00364E                     _lcdNibble:
 13539                           	opt stack 20
 13540                           
 13541                           ;incstack = 0
 13542                           ;lcdNibble@data stored from wreg
 13543  00364E  0100               	movlb	0	; () banked
 13544  003650  6F81               	movwf	lcdNibble@data& (0+255),b
 13545                           
 13546                           ;lcd.c: 27: char temp = data & 0xF0;
 13547  003652  0100               	movlb	0	; () banked
 13548  003654  5181               	movf	lcdNibble@data& (0+255),w,b
 13549  003656  0BF0               	andlw	240
 13550  003658  0100               	movlb	0	; () banked
 13551  00365A  6F80               	movwf	lcdNibble@temp& (0+255),b
 13552                           
 13553                           ;lcd.c: 28: LATD = LATD & 0x0F;
 13554  00365C  508C               	movf	3980,w,c	;volatile
 13555  00365E  0B0F               	andlw	15
 13556  003660  6E8C               	movwf	3980,c	;volatile
 13557                           
 13558                           ;lcd.c: 29: LATD = temp | LATD;
 13559  003662  0100               	movlb	0	; () banked
 13560  003664  5180               	movf	lcdNibble@temp& (0+255),w,b
 13561  003666  108C               	iorwf	3980,w,c	;volatile
 13562  003668  6E8C               	movwf	3980,c	;volatile
 13563                           
 13564                           ; BSR set to: 0
 13565                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 13566  00366A  868C               	bsf	3980,3,c	;volatile
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13570  00366C  0E42               	movlw	66
 13571  00366E                     u7347:
 13572  00366E  2EE8               	decfsz	wreg,f,c
 13573  003670  D7FE               	bra	u7347
 13574  003672  D000               	nop2	
 13575                           
 13576                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 13577  003674  968C               	bcf	3980,3,c	;volatile
 13578                           
 13579                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13580  003676  0E42               	movlw	66
 13581  003678                     u7357:
 13582  003678  2EE8               	decfsz	wreg,f,c
 13583  00367A  D7FE               	bra	u7357
 13584  00367C  D000               	nop2	
 13585                           
 13586                           ;lcd.c: 36: data = data << 4;
 13587  00367E  0100               	movlb	0	; () banked
 13588  003680  3981               	swapf	lcdNibble@data& (0+255),w,b
 13589  003682  0BF0               	andlw	240
 13590  003684  0100               	movlb	0	; () banked
 13591  003686  6F81               	movwf	lcdNibble@data& (0+255),b
 13592                           
 13593                           ;lcd.c: 38: temp = data & 0xF0;
 13594  003688  0100               	movlb	0	; () banked
 13595  00368A  5181               	movf	lcdNibble@data& (0+255),w,b
 13596  00368C  0BF0               	andlw	240
 13597  00368E  0100               	movlb	0	; () banked
 13598  003690  6F80               	movwf	lcdNibble@temp& (0+255),b
 13599                           
 13600                           ;lcd.c: 39: LATD = LATD & 0x0F;
 13601  003692  508C               	movf	3980,w,c	;volatile
 13602  003694  0B0F               	andlw	15
 13603  003696  6E8C               	movwf	3980,c	;volatile
 13604                           
 13605                           ;lcd.c: 40: LATD = temp | LATD;
 13606  003698  0100               	movlb	0	; () banked
 13607  00369A  5180               	movf	lcdNibble@temp& (0+255),w,b
 13608  00369C  108C               	iorwf	3980,w,c	;volatile
 13609  00369E  6E8C               	movwf	3980,c	;volatile
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 13613  0036A0  868C               	bsf	3980,3,c	;volatile
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13617  0036A2  0E42               	movlw	66
 13618  0036A4                     u7367:
 13619  0036A4  2EE8               	decfsz	wreg,f,c
 13620  0036A6  D7FE               	bra	u7367
 13621  0036A8  D000               	nop2	
 13622                           
 13623                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 13624  0036AA  968C               	bcf	3980,3,c	;volatile
 13625                           
 13626                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13627  0036AC  0E42               	movlw	66
 13628  0036AE                     u7377:
 13629  0036AE  2EE8               	decfsz	wreg,f,c
 13630  0036B0  D7FE               	bra	u7377
 13631  0036B2  D000               	nop2	
 13632  0036B4  0012               	return		;funcret
 13633  0036B6                     __end_of_lcdNibble:
 13634                           	opt stack 0
 13635                           tblptru	equ	0xFF8
 13636                           tblptrh	equ	0xFF7
 13637                           tblptrl	equ	0xFF6
 13638                           tablat	equ	0xFF5
 13639                           prodh	equ	0xFF4
 13640                           prodl	equ	0xFF3
 13641                           intcon	equ	0xFF2
 13642                           intcon2	equ	0xFF1
 13643                           intcon3	equ	0xFF0
 13644                           indf0	equ	0xFEF
 13645                           postinc0	equ	0xFEE
 13646                           fsr0h	equ	0xFEA
 13647                           fsr0l	equ	0xFE9
 13648                           wreg	equ	0xFE8
 13649                           postdec1	equ	0xFE5
 13650                           fsr1l	equ	0xFE1
 13651                           indf2	equ	0xFDF
 13652                           postinc2	equ	0xFDE
 13653                           postdec2	equ	0xFDD
 13654                           fsr2h	equ	0xFDA
 13655                           fsr2l	equ	0xFD9
 13656                           status	equ	0xFD8
 13657                           
 13658 ;; *************** function _EEPROMTest *****************
 13659 ;; Defined at:
 13660 ;;		line 346 in file "Test.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;		None
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;		None
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		None
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:        0 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    7
 13681 ;; This function calls:
 13682 ;;		Nothing
 13683 ;; This function is called by:
 13684 ;;		_Test
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           	psect	text52
 13689  004088                     __ptext52:
 13690                           	opt stack 0
 13691  004088                     _EEPROMTest:
 13692                           	opt stack 22
 13693                           
 13694                           ;incstack = 0
 13695  004088  0012               	return		;funcret
 13696  00408A                     __end_of_EEPROMTest:
 13697                           	opt stack 0
 13698                           tblptru	equ	0xFF8
 13699                           tblptrh	equ	0xFF7
 13700                           tblptrl	equ	0xFF6
 13701                           tablat	equ	0xFF5
 13702                           prodh	equ	0xFF4
 13703                           prodl	equ	0xFF3
 13704                           intcon	equ	0xFF2
 13705                           intcon2	equ	0xFF1
 13706                           intcon3	equ	0xFF0
 13707                           indf0	equ	0xFEF
 13708                           postinc0	equ	0xFEE
 13709                           fsr0h	equ	0xFEA
 13710                           fsr0l	equ	0xFE9
 13711                           wreg	equ	0xFE8
 13712                           postdec1	equ	0xFE5
 13713                           fsr1l	equ	0xFE1
 13714                           indf2	equ	0xFDF
 13715                           postinc2	equ	0xFDE
 13716                           postdec2	equ	0xFDD
 13717                           fsr2h	equ	0xFDA
 13718                           fsr2l	equ	0xFD9
 13719                           status	equ	0xFD8
 13720                           
 13721 ;; *************** function _handler *****************
 13722 ;; Defined at:
 13723 ;;		line 16 in file "interruptHandler.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;		None
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;		None
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  1    wreg      void 
 13730 ;; Registers used:
 13731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13741 ;;Total ram usage:       16 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    6
 13744 ;; This function calls:
 13745 ;;		_printSortTimer
 13746 ;;		_updateMenu
 13747 ;; This function is called by:
 13748 ;;		Interrupt level 2
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           	psect	intcode
 13753  000008                     __pintcode:
 13754                           	opt stack 0
 13755  000008                     _handler:
 13756                           	opt stack 18
 13757                           
 13758                           ;incstack = 0
 13759  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13760  00000A  EDFC  F012         	call	int_func,f	;refresh shadow registers
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           intcon2	equ	0xFF1
 13769                           intcon3	equ	0xFF0
 13770                           indf0	equ	0xFEF
 13771                           postinc0	equ	0xFEE
 13772                           fsr0h	equ	0xFEA
 13773                           fsr0l	equ	0xFE9
 13774                           wreg	equ	0xFE8
 13775                           postdec1	equ	0xFE5
 13776                           fsr1l	equ	0xFE1
 13777                           indf2	equ	0xFDF
 13778                           postinc2	equ	0xFDE
 13779                           postdec2	equ	0xFDD
 13780                           fsr2h	equ	0xFDA
 13781                           fsr2l	equ	0xFD9
 13782                           status	equ	0xFD8
 13783                           
 13784                           	psect	intcode_body
 13785  0025F8                     __pintcode_body:
 13786                           	opt stack 18
 13787  0025F8                     int_func:
 13788                           	opt stack 18
 13789  0025F8  0006               	pop		; remove dummy address from shadow register refresh
 13790  0025FA  CFFA F04D          	movff	pclath,??_handler+2
 13791  0025FE  CFFB F04E          	movff	pclatu,??_handler+3
 13792  002602  CFE9 F04F          	movff	fsr0l,??_handler+4
 13793  002606  CFEA F050          	movff	fsr0h,??_handler+5
 13794  00260A  CFE1 F051          	movff	fsr1l,??_handler+6
 13795  00260E  CFE2 F052          	movff	fsr1h,??_handler+7
 13796  002612  CFD9 F053          	movff	fsr2l,??_handler+8
 13797  002616  CFDA F054          	movff	fsr2h,??_handler+9
 13798  00261A  CFF3 F055          	movff	prodl,??_handler+10
 13799  00261E  CFF4 F056          	movff	prodh,??_handler+11
 13800  002622  CFF6 F057          	movff	tblptrl,??_handler+12
 13801  002626  CFF7 F058          	movff	tblptrh,??_handler+13
 13802  00262A  CFF8 F059          	movff	tblptru,??_handler+14
 13803  00262E  CFF5 F05A          	movff	tablat,??_handler+15
 13804                           
 13805                           ;interruptHandler.c: 18: if(INT1IF){
 13806  002632  A0F0               	btfss	intcon3,0,c	;volatile
 13807  002634  D020               	goto	i2l7509
 13808                           
 13809                           ;interruptHandler.c: 19: INT1IF = 0;
 13810  002636  90F0               	bcf	intcon3,0,c	;volatile
 13811                           
 13812                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 13813  002638  0100               	movlb	0	; () banked
 13814  00263A  51FC               	movf	_machine_state& (0+255),w,b
 13815  00263C  A4D8               	btfss	status,2,c
 13816  00263E  D01B               	goto	i2l7509
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 13820  002640  3881               	swapf	3969,w,c	;volatile
 13821  002642  0B0F               	andlw	15
 13822  002644  0B0F               	andlw	15
 13823  002646  6E4B               	movwf	??_handler& (0+255),c
 13824  002648  6A4C               	clrf	(??_handler+1)& (0+255),c
 13825  00264A  0E71               	movlw	low _keys
 13826  00264C  244B               	addwf	??_handler,w,c
 13827  00264E  6EF6               	movwf	tblptrl,c
 13828  002650  0EFB               	movlw	high _keys
 13829  002652  204C               	addwfc	??_handler+1,w,c
 13830  002654  6EF7               	movwf	tblptrh,c
 13831  002656                     	if	1	;There are 3 active tblptr bytes
 13832  002656  6AF8               	clrf	tblptru,c
 13833  002658  0E00               	movlw	low (__mediumconst shr (0+16))
 13834  00265A  22F8               	addwfc	tblptru,f,c
 13835  00265C                     	endif
 13836  00265C  0008               	tblrd		*
 13837  00265E  CFF5 F07D          	movff	tablat,_input	;volatile
 13838                           
 13839                           ; BSR set to: 0
 13840                           ;interruptHandler.c: 23: if(input == '*'){
 13841  002662  0E2A               	movlw	42
 13842  002664  187D               	xorwf	_input,w,c	;volatile
 13843  002666  A4D8               	btfss	status,2,c
 13844  002668  D004               	goto	i2l7507
 13845                           
 13846                           ; BSR set to: 0
 13847                           ;interruptHandler.c: 24: machine_state = Testing_state;
 13848  00266A  0E03               	movlw	3
 13849  00266C  0100               	movlb	0	; () banked
 13850  00266E  6FFC               	movwf	_machine_state& (0+255),b
 13851                           
 13852                           ;interruptHandler.c: 25: }
 13853  002670  D002               	goto	i2l7509
 13854  002672                     i2l7507:
 13855                           
 13856                           ; BSR set to: 0
 13857                           ;interruptHandler.c: 26: else{
 13858                           ;interruptHandler.c: 27: updateMenu();
 13859  002672  ECCF  F00D         	call	_updateMenu	;wreg free
 13860  002676                     i2l7509:
 13861                           
 13862                           ;interruptHandler.c: 28: }
 13863                           ;interruptHandler.c: 29: }
 13864                           ;interruptHandler.c: 30: }
 13865                           ;interruptHandler.c: 33: if(TMR0IF){
 13866  002676  A4F2               	btfss	intcon,2,c	;volatile
 13867  002678  D00C               	goto	i2l7523
 13868                           
 13869                           ;interruptHandler.c: 34: TMR0IF = 0;
 13870  00267A  94F2               	bcf	intcon,2,c	;volatile
 13871                           
 13872                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 13873  00267C  0100               	movlb	0	; () banked
 13874  00267E  05FC               	decf	_machine_state& (0+255),w,b
 13875  002680  A4D8               	btfss	status,2,c
 13876  002682  D007               	goto	i2l7523
 13877                           
 13878                           ; BSR set to: 0
 13879                           ;interruptHandler.c: 36: printSortTimer();
 13880  002684  EC4A  F010         	call	_printSortTimer	;wreg free
 13881                           
 13882                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 13883  002688  0E85               	movlw	133
 13884  00268A  6ED7               	movwf	4055,c	;volatile
 13885                           
 13886                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 13887  00268C  0EEE               	movlw	238
 13888  00268E  6ED6               	movwf	4054,c	;volatile
 13889                           
 13890                           ;interruptHandler.c: 40: TMR0ON = 1;
 13891  002690  8ED5               	bsf	4053,7,c	;volatile
 13892  002692                     i2l7523:
 13893                           
 13894                           ;interruptHandler.c: 41: }
 13895                           ;interruptHandler.c: 42: }
 13896                           ;interruptHandler.c: 45: if(TMR1IF){
 13897  002692  A09E               	btfss	3998,0,c	;volatile
 13898  002694  D024               	goto	i2l7547
 13899                           
 13900                           ;interruptHandler.c: 46: TMR1IF = 0;
 13901  002696  909E               	bcf	3998,0,c	;volatile
 13902                           
 13903                           ;interruptHandler.c: 47: TMR1ON = 0;
 13904  002698  90CD               	bcf	4045,0,c	;volatile
 13905                           
 13906                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 13907  00269A  0100               	movlb	0	; () banked
 13908  00269C  05FC               	decf	_machine_state& (0+255),w,b
 13909  00269E  A4D8               	btfss	status,2,c
 13910  0026A0  D01E               	goto	i2l7547
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;interruptHandler.c: 49: if(was_low_1){
 13914  0026A2  5079               	movf	_was_low_1,w,c	;volatile
 13915  0026A4  107A               	iorwf	_was_low_1+1,w,c	;volatile
 13916  0026A6  B4D8               	btfsc	status,2,c
 13917  0026A8  D00A               	goto	i2l831
 13918                           
 13919                           ; BSR set to: 0
 13920                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 13921  0026AA  828B               	bsf	3979,1,c	;volatile
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;interruptHandler.c: 51: was_low_1 = 0;
 13925  0026AC  0E00               	movlw	0
 13926  0026AE  6E7A               	movwf	_was_low_1+1,c	;volatile
 13927  0026B0  0E00               	movlw	0
 13928  0026B2  6E79               	movwf	_was_low_1,c	;volatile
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 13932  0026B4  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 13933                           
 13934                           ; BSR set to: 0
 13935                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 13936  0026B8  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 13937                           
 13938                           ;interruptHandler.c: 54: }
 13939  0026BC  D00F               	goto	i2l7545
 13940  0026BE                     i2l831:
 13941                           
 13942                           ; BSR set to: 0
 13943                           ;interruptHandler.c: 55: else{
 13944                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 13945  0026BE  928B               	bcf	3979,1,c	;volatile
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;interruptHandler.c: 57: was_low_1 = 1;
 13949  0026C0  0E00               	movlw	0
 13950  0026C2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13951  0026C4  0E01               	movlw	1
 13952  0026C6  6E79               	movwf	_was_low_1,c	;volatile
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 13956  0026C8  0101               	movlb	1	; () banked
 13957  0026CA  511C               	movf	_servoTimes& (0+255),w,b
 13958  0026CC  0800               	sublw	0
 13959  0026CE  0F20               	addlw	32
 13960  0026D0  6ECF               	movwf	4047,c	;volatile
 13961                           
 13962                           ; BSR set to: 1
 13963                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 13964  0026D2  0101               	movlb	1	; () banked
 13965  0026D4  511E               	movf	(_servoTimes+2)& (0+255),w,b
 13966  0026D6  0800               	sublw	0
 13967  0026D8  0F20               	addlw	32
 13968  0026DA  6ECE               	movwf	4046,c	;volatile
 13969  0026DC                     i2l7545:
 13970                           
 13971                           ;interruptHandler.c: 60: }
 13972                           ;interruptHandler.c: 61: TMR1ON = 1;
 13973  0026DC  80CD               	bsf	4045,0,c	;volatile
 13974  0026DE                     i2l7547:
 13975                           
 13976                           ;interruptHandler.c: 62: }
 13977                           ;interruptHandler.c: 63: }
 13978                           ;interruptHandler.c: 65: if(TMR3IF){
 13979  0026DE  A2A1               	btfss	4001,1,c	;volatile
 13980  0026E0  D024               	goto	i2l837
 13981                           
 13982                           ;interruptHandler.c: 66: TMR3IF = 0;
 13983  0026E2  92A1               	bcf	4001,1,c	;volatile
 13984                           
 13985                           ;interruptHandler.c: 67: TMR3ON = 0;
 13986  0026E4  90B1               	bcf	4017,0,c	;volatile
 13987                           
 13988                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 13989  0026E6  0100               	movlb	0	; () banked
 13990  0026E8  05FC               	decf	_machine_state& (0+255),w,b
 13991  0026EA  A4D8               	btfss	status,2,c
 13992  0026EC  D01E               	goto	i2l837
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;interruptHandler.c: 69: if(was_low_3){
 13996  0026EE  507B               	movf	_was_low_3,w,c	;volatile
 13997  0026F0  107C               	iorwf	_was_low_3+1,w,c	;volatile
 13998  0026F2  B4D8               	btfsc	status,2,c
 13999  0026F4  D00A               	goto	i2l835
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 14003  0026F6  848B               	bsf	3979,2,c	;volatile
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;interruptHandler.c: 71: was_low_3 = 0;
 14007  0026F8  0E00               	movlw	0
 14008  0026FA  6E7C               	movwf	_was_low_3+1,c	;volatile
 14009  0026FC  0E00               	movlw	0
 14010  0026FE  6E7B               	movwf	_was_low_3,c	;volatile
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 14014  002700  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 14018  002704  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 14019                           
 14020                           ;interruptHandler.c: 74: }
 14021  002708  D00F               	goto	i2l7569
 14022  00270A                     i2l835:
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;interruptHandler.c: 75: else{
 14026                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 14027  00270A  948B               	bcf	3979,2,c	;volatile
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;interruptHandler.c: 77: was_low_3 = 1;
 14031  00270C  0E00               	movlw	0
 14032  00270E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14033  002710  0E01               	movlw	1
 14034  002712  6E7B               	movwf	_was_low_3,c	;volatile
 14035                           
 14036                           ; BSR set to: 0
 14037                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 14038  002714  0101               	movlb	1	; () banked
 14039  002716  5120               	movf	(_servoTimes+4)& (0+255),w,b
 14040  002718  0800               	sublw	0
 14041  00271A  0F20               	addlw	32
 14042  00271C  6EB3               	movwf	4019,c	;volatile
 14043                           
 14044                           ; BSR set to: 1
 14045                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 14046  00271E  0101               	movlb	1	; () banked
 14047  002720  5122               	movf	(_servoTimes+6)& (0+255),w,b
 14048  002722  0800               	sublw	0
 14049  002724  0F20               	addlw	32
 14050  002726  6EB2               	movwf	4018,c	;volatile
 14051  002728                     i2l7569:
 14052                           
 14053                           ;interruptHandler.c: 80: }
 14054                           ;interruptHandler.c: 81: TMR3ON = 1;
 14055  002728  80B1               	bsf	4017,0,c	;volatile
 14056  00272A                     i2l837:
 14057  00272A  C05A  FFF5         	movff	??_handler+15,tablat
 14058  00272E  C059  FFF8         	movff	??_handler+14,tblptru
 14059  002732  C058  FFF7         	movff	??_handler+13,tblptrh
 14060  002736  C057  FFF6         	movff	??_handler+12,tblptrl
 14061  00273A  C056  FFF4         	movff	??_handler+11,prodh
 14062  00273E  C055  FFF3         	movff	??_handler+10,prodl
 14063  002742  C054  FFDA         	movff	??_handler+9,fsr2h
 14064  002746  C053  FFD9         	movff	??_handler+8,fsr2l
 14065  00274A  C052  FFE2         	movff	??_handler+7,fsr1h
 14066  00274E  C051  FFE1         	movff	??_handler+6,fsr1l
 14067  002752  C050  FFEA         	movff	??_handler+5,fsr0h
 14068  002756  C04F  FFE9         	movff	??_handler+4,fsr0l
 14069  00275A  C04E  FFFB         	movff	??_handler+3,pclatu
 14070  00275E  C04D  FFFA         	movff	??_handler+2,pclath
 14071  002762  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14072  002764  0011               	retfie		f
 14073  002766                     __end_of_handler:
 14074                           	opt stack 0
 14075                           pclatu	equ	0xFFB
 14076                           pclath	equ	0xFFA
 14077                           tblptru	equ	0xFF8
 14078                           tblptrh	equ	0xFF7
 14079                           tblptrl	equ	0xFF6
 14080                           tablat	equ	0xFF5
 14081                           prodh	equ	0xFF4
 14082                           prodl	equ	0xFF3
 14083                           intcon	equ	0xFF2
 14084                           intcon2	equ	0xFF1
 14085                           intcon3	equ	0xFF0
 14086                           indf0	equ	0xFEF
 14087                           postinc0	equ	0xFEE
 14088                           fsr0h	equ	0xFEA
 14089                           fsr0l	equ	0xFE9
 14090                           wreg	equ	0xFE8
 14091                           postdec1	equ	0xFE5
 14092                           fsr1h	equ	0xFE2
 14093                           fsr1l	equ	0xFE1
 14094                           indf2	equ	0xFDF
 14095                           postinc2	equ	0xFDE
 14096                           postdec2	equ	0xFDD
 14097                           fsr2h	equ	0xFDA
 14098                           fsr2l	equ	0xFD9
 14099                           status	equ	0xFD8
 14100                           
 14101 ;; *************** function _updateMenu *****************
 14102 ;; Defined at:
 14103 ;;		line 211 in file "UI.c"
 14104 ;; Parameters:    Size  Location     Type
 14105 ;;		None
 14106 ;; Auto vars:     Size  Location     Type
 14107 ;;		None
 14108 ;; Return value:  Size  Location     Type
 14109 ;;                  1    wreg      void 
 14110 ;; Registers used:
 14111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14112 ;; Tracked objects:
 14113 ;;		On entry : 0/0
 14114 ;;		On exit  : 0/0
 14115 ;;		Unchanged: 0/0
 14116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14121 ;;Total ram usage:        2 bytes
 14122 ;; Hardware stack levels used:    1
 14123 ;; Hardware stack levels required when called:    5
 14124 ;; This function calls:
 14125 ;;		_change_state_to_logs_11
 14126 ;;		_change_state_to_logs_12
 14127 ;;		_change_state_to_logs_22
 14128 ;;		_change_state_to_logs_23
 14129 ;;		_change_state_to_logs_33
 14130 ;;		_change_state_to_logs_34
 14131 ;;		_change_state_to_menu_11
 14132 ;;		_change_state_to_menu_23
 14133 ;;		_dispLogs
 14134 ;;		_inputHandler
 14135 ;;		i2_change_state_to_menu_12
 14136 ;;		i2_change_state_to_menu_22
 14137 ;;		i2_change_state_to_menu_start
 14138 ;; This function is called by:
 14139 ;;		_handler
 14140 ;; This function uses a non-reentrant model
 14141 ;;
 14142                           
 14143                           	psect	text54
 14144  001B9E                     __ptext54:
 14145                           	opt stack 0
 14146  001B9E                     _updateMenu:
 14147                           	opt stack 18
 14148                           
 14149                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 14150                           
 14151                           ;incstack = 0
 14152  001B9E  0E00               	movlw	0
 14153  001BA0  6E78               	movwf	_up+1,c
 14154  001BA2  0E00               	movlw	0
 14155  001BA4  6E77               	movwf	_up,c
 14156  001BA6  0E00               	movlw	0
 14157  001BA8  6E6A               	movwf	_down+1,c
 14158  001BAA  0E00               	movlw	0
 14159  001BAC  6E69               	movwf	_down,c
 14160  001BAE  0E00               	movlw	0
 14161  001BB0  6E6C               	movwf	_enter+1,c
 14162  001BB2  0E00               	movlw	0
 14163  001BB4  6E6B               	movwf	_enter,c
 14164  001BB6  0E00               	movlw	0
 14165  001BB8  6E5C               	movwf	_back+1,c
 14166  001BBA  0E00               	movlw	0
 14167  001BBC  6E5B               	movwf	_back,c
 14168                           
 14169                           ;UI.c: 213: (INTCONbits.GIE = 0);
 14170  001BBE  9EF2               	bcf	intcon,7,c	;volatile
 14171                           
 14172                           ;UI.c: 215: if (inputHandler()
 14173                           ;UI.c: 218: ){
 14174  001BC0  EC43  F011         	call	_inputHandler	;wreg free
 14175  001BC4  502A               	movf	?_inputHandler,w,c
 14176  001BC6  102B               	iorwf	?_inputHandler+1,w,c
 14177  001BC8  A4D8               	btfss	status,2,c
 14178  001BCA  D112               	goto	i2l7255
 14179  001BCC  D146               	goto	i2l254
 14180  001BCE                     i2l7107:
 14181                           
 14182                           ;UI.c: 222: change_state_to_menu_11();
 14183  001BCE  EC47  F01E         	call	_change_state_to_menu_11	;wreg free
 14184                           
 14185                           ;UI.c: 223: break;
 14186  001BD2  D143               	goto	i2l254
 14187  001BD4                     i2l7109:
 14188                           
 14189                           ;UI.c: 226: if(up){
 14190  001BD4  5077               	movf	_up,w,c
 14191  001BD6  1078               	iorwf	_up+1,w,c
 14192  001BD8  B4D8               	btfsc	status,2,c
 14193  001BDA  D003               	goto	i2l7113
 14194                           
 14195                           ;UI.c: 227: change_state_to_menu_23();
 14196  001BDC  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14197                           
 14198                           ;UI.c: 228: }
 14199  001BE0  D13C               	goto	i2l254
 14200  001BE2                     i2l7113:
 14201                           
 14202                           ;UI.c: 229: else if(down){
 14203  001BE2  5069               	movf	_down,w,c
 14204  001BE4  106A               	iorwf	_down+1,w,c
 14205  001BE6  B4D8               	btfsc	status,2,c
 14206  001BE8  D003               	goto	i2l7117
 14207                           
 14208                           ;UI.c: 230: change_state_to_menu_12();
 14209  001BEA  EC17  F01E         	call	i2_change_state_to_menu_12	;wreg free
 14210                           
 14211                           ;UI.c: 231: }
 14212  001BEE  D135               	goto	i2l254
 14213  001BF0                     i2l7117:
 14214                           
 14215                           ;UI.c: 232: else if(enter){
 14216  001BF0  506B               	movf	_enter,w,c
 14217  001BF2  106C               	iorwf	_enter+1,w,c
 14218  001BF4  B4D8               	btfsc	status,2,c
 14219  001BF6  D131               	goto	i2l254
 14220                           
 14221                           ;UI.c: 233: change_state_to_menu_start();
 14222  001BF8  EC46  F01F         	call	i2_change_state_to_menu_start	;wreg free
 14223                           
 14224                           ;UI.c: 234: }
 14225                           ;UI.c: 235: break;
 14226  001BFC  D12E               	goto	i2l254
 14227  001BFE                     i2l7121:
 14228                           
 14229                           ;UI.c: 238: if(up){
 14230  001BFE  5077               	movf	_up,w,c
 14231  001C00  1078               	iorwf	_up+1,w,c
 14232  001C02  B4D8               	btfsc	status,2,c
 14233  001C04  D003               	goto	i2l7125
 14234                           
 14235                           ;UI.c: 239: change_state_to_menu_11();
 14236  001C06  EC47  F01E         	call	_change_state_to_menu_11	;wreg free
 14237                           
 14238                           ;UI.c: 240: }
 14239  001C0A  D127               	goto	i2l254
 14240  001C0C                     i2l7125:
 14241                           
 14242                           ;UI.c: 241: else if(down){
 14243  001C0C  5069               	movf	_down,w,c
 14244  001C0E  106A               	iorwf	_down+1,w,c
 14245  001C10  B4D8               	btfsc	status,2,c
 14246  001C12  D011               	goto	i2l7141
 14247                           
 14248                           ;UI.c: 242: change_state_to_menu_23();
 14249  001C14  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14250                           
 14251                           ;UI.c: 243: }
 14252  001C18  D120               	goto	i2l254
 14253  001C1A                     i2l7133:
 14254                           
 14255                           ;UI.c: 250: if(up){
 14256  001C1A  5077               	movf	_up,w,c
 14257  001C1C  1078               	iorwf	_up+1,w,c
 14258  001C1E  B4D8               	btfsc	status,2,c
 14259  001C20  D003               	goto	i2l7137
 14260                           
 14261                           ;UI.c: 251: change_state_to_menu_11();
 14262  001C22  EC47  F01E         	call	_change_state_to_menu_11	;wreg free
 14263                           
 14264                           ;UI.c: 252: }
 14265  001C26  D119               	goto	i2l254
 14266  001C28                     i2l7137:
 14267                           
 14268                           ;UI.c: 253: else if(down){
 14269  001C28  5069               	movf	_down,w,c
 14270  001C2A  106A               	iorwf	_down+1,w,c
 14271  001C2C  B4D8               	btfsc	status,2,c
 14272  001C2E  D003               	goto	i2l7141
 14273                           
 14274                           ;UI.c: 254: change_state_to_menu_23();
 14275  001C30  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14276                           
 14277                           ;UI.c: 255: }
 14278  001C34  D112               	goto	i2l254
 14279  001C36                     i2l7141:
 14280                           
 14281                           ;UI.c: 256: else if(enter){
 14282  001C36  506B               	movf	_enter,w,c
 14283  001C38  106C               	iorwf	_enter+1,w,c
 14284  001C3A  B4D8               	btfsc	status,2,c
 14285  001C3C  D10E               	goto	i2l254
 14286                           
 14287                           ;UI.c: 257: machine_state = Sorting_state;
 14288  001C3E  0E01               	movlw	1
 14289  001C40  0100               	movlb	0	; () banked
 14290  001C42  6FFC               	movwf	_machine_state& (0+255),b
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;UI.c: 258: }
 14294                           ;UI.c: 259: break;
 14295                           
 14296                           ; BSR set to: 0
 14297                           
 14298                           ; BSR set to: 0
 14299  001C44  D10A               	goto	i2l254
 14300  001C46                     i2l7145:
 14301                           
 14302                           ;UI.c: 262: if(up){
 14303  001C46  5077               	movf	_up,w,c
 14304  001C48  1078               	iorwf	_up+1,w,c
 14305  001C4A  B4D8               	btfsc	status,2,c
 14306  001C4C  D003               	goto	i2l7149
 14307                           
 14308                           ;UI.c: 263: change_state_to_menu_22();
 14309  001C4E  ECFF  F01D         	call	i2_change_state_to_menu_22	;wreg free
 14310                           
 14311                           ;UI.c: 264: }
 14312  001C52  D103               	goto	i2l254
 14313  001C54                     i2l7149:
 14314                           
 14315                           ;UI.c: 265: else if(down){
 14316  001C54  5069               	movf	_down,w,c
 14317  001C56  106A               	iorwf	_down+1,w,c
 14318  001C58  B4D8               	btfsc	status,2,c
 14319  001C5A  D003               	goto	i2l7153
 14320                           
 14321                           ;UI.c: 266: change_state_to_menu_11();
 14322  001C5C  EC47  F01E         	call	_change_state_to_menu_11	;wreg free
 14323                           
 14324                           ;UI.c: 267: }
 14325  001C60  D0FC               	goto	i2l254
 14326  001C62                     i2l7153:
 14327                           
 14328                           ;UI.c: 268: else if(enter){
 14329  001C62  506B               	movf	_enter,w,c
 14330  001C64  106C               	iorwf	_enter+1,w,c
 14331  001C66  B4D8               	btfsc	status,2,c
 14332  001C68  D0F8               	goto	i2l254
 14333                           
 14334                           ;UI.c: 269: change_state_to_logs_11();
 14335  001C6A  ECBF  F01E         	call	_change_state_to_logs_11	;wreg free
 14336                           
 14337                           ;UI.c: 270: }
 14338                           ;UI.c: 271: break;
 14339  001C6E  D0F5               	goto	i2l254
 14340  001C70                     i2l7157:
 14341                           
 14342                           ;UI.c: 274: if(up){
 14343  001C70  5077               	movf	_up,w,c
 14344  001C72  1078               	iorwf	_up+1,w,c
 14345  001C74  B4D8               	btfsc	status,2,c
 14346  001C76  D003               	goto	i2l7161
 14347                           
 14348                           ;UI.c: 275: change_state_to_logs_34();
 14349  001C78  EC5F  F01E         	call	_change_state_to_logs_34	;wreg free
 14350                           
 14351                           ;UI.c: 276: }
 14352  001C7C  D0EE               	goto	i2l254
 14353  001C7E                     i2l7161:
 14354                           
 14355                           ;UI.c: 277: else if(down){
 14356  001C7E  5069               	movf	_down,w,c
 14357  001C80  106A               	iorwf	_down+1,w,c
 14358  001C82  B4D8               	btfsc	status,2,c
 14359  001C84  D003               	goto	i2l7165
 14360                           
 14361                           ;UI.c: 278: change_state_to_logs_12();
 14362  001C86  ECA7  F01E         	call	_change_state_to_logs_12	;wreg free
 14363                           
 14364                           ;UI.c: 279: }
 14365  001C8A  D0E7               	goto	i2l254
 14366  001C8C                     i2l7165:
 14367                           
 14368                           ;UI.c: 280: else if(enter){
 14369  001C8C  506B               	movf	_enter,w,c
 14370  001C8E  106C               	iorwf	_enter+1,w,c
 14371  001C90  B4D8               	btfsc	status,2,c
 14372  001C92  D007               	goto	i2l7169
 14373                           
 14374                           ;UI.c: 281: dispLogs(1);
 14375  001C94  0E00               	movlw	0
 14376  001C96  6E13               	movwf	dispLogs@myLog+1,c
 14377  001C98  0E01               	movlw	1
 14378  001C9A  6E12               	movwf	dispLogs@myLog,c
 14379  001C9C  EC92  F01F         	call	_dispLogs	;wreg free
 14380                           
 14381                           ;UI.c: 282: }
 14382  001CA0  D0DC               	goto	i2l254
 14383  001CA2                     i2l7169:
 14384                           
 14385                           ;UI.c: 283: else if(back){
 14386  001CA2  505B               	movf	_back,w,c
 14387  001CA4  105C               	iorwf	_back+1,w,c
 14388  001CA6  B4D8               	btfsc	status,2,c
 14389  001CA8  D0D8               	goto	i2l254
 14390                           
 14391                           ;UI.c: 284: change_state_to_menu_23();
 14392  001CAA  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14393                           
 14394                           ;UI.c: 285: }
 14395                           ;UI.c: 286: break;
 14396  001CAE  D0D5               	goto	i2l254
 14397  001CB0                     i2l7173:
 14398                           
 14399                           ;UI.c: 289: if(up){
 14400  001CB0  5077               	movf	_up,w,c
 14401  001CB2  1078               	iorwf	_up+1,w,c
 14402  001CB4  B4D8               	btfsc	status,2,c
 14403  001CB6  D003               	goto	i2l7177
 14404                           
 14405                           ;UI.c: 290: change_state_to_logs_11();
 14406  001CB8  ECBF  F01E         	call	_change_state_to_logs_11	;wreg free
 14407                           
 14408                           ;UI.c: 291: }
 14409  001CBC  D0CE               	goto	i2l254
 14410  001CBE                     i2l7177:
 14411                           
 14412                           ;UI.c: 292: else if(down){
 14413  001CBE  5069               	movf	_down,w,c
 14414  001CC0  106A               	iorwf	_down+1,w,c
 14415  001CC2  B4D8               	btfsc	status,2,c
 14416  001CC4  D003               	goto	i2l7181
 14417                           
 14418                           ;UI.c: 293: change_state_to_logs_23();
 14419  001CC6  ECEE  F01E         	call	_change_state_to_logs_23	;wreg free
 14420                           
 14421                           ;UI.c: 294: }
 14422  001CCA  D0C7               	goto	i2l254
 14423  001CCC                     i2l7181:
 14424                           
 14425                           ;UI.c: 295: else if(enter){
 14426  001CCC  506B               	movf	_enter,w,c
 14427  001CCE  106C               	iorwf	_enter+1,w,c
 14428  001CD0  B4D8               	btfsc	status,2,c
 14429  001CD2  D007               	goto	i2l7185
 14430                           
 14431                           ;UI.c: 296: dispLogs(2);
 14432  001CD4  0E00               	movlw	0
 14433  001CD6  6E13               	movwf	dispLogs@myLog+1,c
 14434  001CD8  0E02               	movlw	2
 14435  001CDA  6E12               	movwf	dispLogs@myLog,c
 14436  001CDC  EC92  F01F         	call	_dispLogs	;wreg free
 14437                           
 14438                           ;UI.c: 297: }
 14439  001CE0  D0BC               	goto	i2l254
 14440  001CE2                     i2l7185:
 14441                           
 14442                           ;UI.c: 298: else if(back){
 14443  001CE2  505B               	movf	_back,w,c
 14444  001CE4  105C               	iorwf	_back+1,w,c
 14445  001CE6  B4D8               	btfsc	status,2,c
 14446  001CE8  D0B8               	goto	i2l254
 14447                           
 14448                           ;UI.c: 299: change_state_to_menu_23();
 14449  001CEA  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14450                           
 14451                           ;UI.c: 300: }
 14452                           ;UI.c: 301: break;
 14453  001CEE  D0B5               	goto	i2l254
 14454  001CF0                     i2l7189:
 14455                           
 14456                           ;UI.c: 304: if(up){
 14457  001CF0  5077               	movf	_up,w,c
 14458  001CF2  1078               	iorwf	_up+1,w,c
 14459  001CF4  B4D8               	btfsc	status,2,c
 14460  001CF6  D003               	goto	i2l7193
 14461                           
 14462                           ;UI.c: 305: change_state_to_logs_11();
 14463  001CF8  ECBF  F01E         	call	_change_state_to_logs_11	;wreg free
 14464                           
 14465                           ;UI.c: 306: }
 14466  001CFC  D0AE               	goto	i2l254
 14467  001CFE                     i2l7193:
 14468                           
 14469                           ;UI.c: 307: else if(down){
 14470  001CFE  5069               	movf	_down,w,c
 14471  001D00  106A               	iorwf	_down+1,w,c
 14472  001D02  B4D8               	btfsc	status,2,c
 14473  001D04  D003               	goto	i2l7197
 14474                           
 14475                           ;UI.c: 308: change_state_to_logs_23();
 14476  001D06  ECEE  F01E         	call	_change_state_to_logs_23	;wreg free
 14477                           
 14478                           ;UI.c: 309: }
 14479  001D0A  D0A7               	goto	i2l254
 14480  001D0C                     i2l7197:
 14481                           
 14482                           ;UI.c: 310: else if(enter){
 14483  001D0C  506B               	movf	_enter,w,c
 14484  001D0E  106C               	iorwf	_enter+1,w,c
 14485  001D10  B4D8               	btfsc	status,2,c
 14486  001D12  D007               	goto	i2l7201
 14487                           
 14488                           ;UI.c: 311: dispLogs(2);
 14489  001D14  0E00               	movlw	0
 14490  001D16  6E13               	movwf	dispLogs@myLog+1,c
 14491  001D18  0E02               	movlw	2
 14492  001D1A  6E12               	movwf	dispLogs@myLog,c
 14493  001D1C  EC92  F01F         	call	_dispLogs	;wreg free
 14494                           
 14495                           ;UI.c: 312: }
 14496  001D20  D09C               	goto	i2l254
 14497  001D22                     i2l7201:
 14498                           
 14499                           ;UI.c: 313: else if(back){
 14500  001D22  505B               	movf	_back,w,c
 14501  001D24  105C               	iorwf	_back+1,w,c
 14502  001D26  B4D8               	btfsc	status,2,c
 14503  001D28  D098               	goto	i2l254
 14504                           
 14505                           ;UI.c: 314: change_state_to_menu_23();
 14506  001D2A  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14507                           
 14508                           ;UI.c: 315: }
 14509                           ;UI.c: 316: break;
 14510  001D2E  D095               	goto	i2l254
 14511  001D30                     i2l7205:
 14512                           
 14513                           ;UI.c: 319: if(up){
 14514  001D30  5077               	movf	_up,w,c
 14515  001D32  1078               	iorwf	_up+1,w,c
 14516  001D34  B4D8               	btfsc	status,2,c
 14517  001D36  D003               	goto	i2l7209
 14518                           
 14519                           ;UI.c: 320: change_state_to_logs_22();
 14520  001D38  EC8F  F01E         	call	_change_state_to_logs_22	;wreg free
 14521                           
 14522                           ;UI.c: 321: }
 14523  001D3C  D08E               	goto	i2l254
 14524  001D3E                     i2l7209:
 14525                           
 14526                           ;UI.c: 322: else if(down){
 14527  001D3E  5069               	movf	_down,w,c
 14528  001D40  106A               	iorwf	_down+1,w,c
 14529  001D42  B4D8               	btfsc	status,2,c
 14530  001D44  D003               	goto	i2l7213
 14531                           
 14532                           ;UI.c: 323: change_state_to_logs_34();
 14533  001D46  EC5F  F01E         	call	_change_state_to_logs_34	;wreg free
 14534                           
 14535                           ;UI.c: 324: }
 14536  001D4A  D087               	goto	i2l254
 14537  001D4C                     i2l7213:
 14538                           
 14539                           ;UI.c: 325: else if(enter){
 14540  001D4C  506B               	movf	_enter,w,c
 14541  001D4E  106C               	iorwf	_enter+1,w,c
 14542  001D50  B4D8               	btfsc	status,2,c
 14543  001D52  D007               	goto	i2l7217
 14544                           
 14545                           ;UI.c: 326: dispLogs(3);
 14546  001D54  0E00               	movlw	0
 14547  001D56  6E13               	movwf	dispLogs@myLog+1,c
 14548  001D58  0E03               	movlw	3
 14549  001D5A  6E12               	movwf	dispLogs@myLog,c
 14550  001D5C  EC92  F01F         	call	_dispLogs	;wreg free
 14551                           
 14552                           ;UI.c: 327: }
 14553  001D60  D07C               	goto	i2l254
 14554  001D62                     i2l7217:
 14555                           
 14556                           ;UI.c: 328: else if(back){
 14557  001D62  505B               	movf	_back,w,c
 14558  001D64  105C               	iorwf	_back+1,w,c
 14559  001D66  B4D8               	btfsc	status,2,c
 14560  001D68  D078               	goto	i2l254
 14561                           
 14562                           ;UI.c: 329: change_state_to_menu_23();
 14563  001D6A  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14564                           
 14565                           ;UI.c: 330: }
 14566                           ;UI.c: 331: break;
 14567  001D6E  D075               	goto	i2l254
 14568  001D70                     i2l7221:
 14569                           
 14570                           ;UI.c: 334: if(up){
 14571  001D70  5077               	movf	_up,w,c
 14572  001D72  1078               	iorwf	_up+1,w,c
 14573  001D74  B4D8               	btfsc	status,2,c
 14574  001D76  D003               	goto	i2l7225
 14575                           
 14576                           ;UI.c: 335: change_state_to_logs_22();
 14577  001D78  EC8F  F01E         	call	_change_state_to_logs_22	;wreg free
 14578                           
 14579                           ;UI.c: 336: }
 14580  001D7C  D06E               	goto	i2l254
 14581  001D7E                     i2l7225:
 14582                           
 14583                           ;UI.c: 337: else if(down){
 14584  001D7E  5069               	movf	_down,w,c
 14585  001D80  106A               	iorwf	_down+1,w,c
 14586  001D82  B4D8               	btfsc	status,2,c
 14587  001D84  D003               	goto	i2l7229
 14588                           
 14589                           ;UI.c: 338: change_state_to_logs_34();
 14590  001D86  EC5F  F01E         	call	_change_state_to_logs_34	;wreg free
 14591                           
 14592                           ;UI.c: 339: }
 14593  001D8A  D067               	goto	i2l254
 14594  001D8C                     i2l7229:
 14595                           
 14596                           ;UI.c: 340: else if(enter){
 14597  001D8C  506B               	movf	_enter,w,c
 14598  001D8E  106C               	iorwf	_enter+1,w,c
 14599  001D90  B4D8               	btfsc	status,2,c
 14600  001D92  D007               	goto	i2l7233
 14601                           
 14602                           ;UI.c: 341: dispLogs(3);
 14603  001D94  0E00               	movlw	0
 14604  001D96  6E13               	movwf	dispLogs@myLog+1,c
 14605  001D98  0E03               	movlw	3
 14606  001D9A  6E12               	movwf	dispLogs@myLog,c
 14607  001D9C  EC92  F01F         	call	_dispLogs	;wreg free
 14608                           
 14609                           ;UI.c: 342: }
 14610  001DA0  D05C               	goto	i2l254
 14611  001DA2                     i2l7233:
 14612                           
 14613                           ;UI.c: 343: else if(back){
 14614  001DA2  505B               	movf	_back,w,c
 14615  001DA4  105C               	iorwf	_back+1,w,c
 14616  001DA6  B4D8               	btfsc	status,2,c
 14617  001DA8  D058               	goto	i2l254
 14618                           
 14619                           ;UI.c: 344: change_state_to_menu_23();
 14620  001DAA  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14621                           
 14622                           ;UI.c: 345: }
 14623                           ;UI.c: 346: break;
 14624  001DAE  D055               	goto	i2l254
 14625  001DB0                     i2l7237:
 14626                           
 14627                           ;UI.c: 349: if(up){
 14628  001DB0  5077               	movf	_up,w,c
 14629  001DB2  1078               	iorwf	_up+1,w,c
 14630  001DB4  B4D8               	btfsc	status,2,c
 14631  001DB6  D003               	goto	i2l7241
 14632                           
 14633                           ;UI.c: 350: change_state_to_logs_33();
 14634  001DB8  EC77  F01E         	call	_change_state_to_logs_33	;wreg free
 14635                           
 14636                           ;UI.c: 351: }
 14637  001DBC  D04E               	goto	i2l254
 14638  001DBE                     i2l7241:
 14639                           
 14640                           ;UI.c: 352: else if(down){
 14641  001DBE  5069               	movf	_down,w,c
 14642  001DC0  106A               	iorwf	_down+1,w,c
 14643  001DC2  B4D8               	btfsc	status,2,c
 14644  001DC4  D003               	goto	i2l7245
 14645                           
 14646                           ;UI.c: 353: change_state_to_logs_11();
 14647  001DC6  ECBF  F01E         	call	_change_state_to_logs_11	;wreg free
 14648                           
 14649                           ;UI.c: 354: }
 14650  001DCA  D047               	goto	i2l254
 14651  001DCC                     i2l7245:
 14652                           
 14653                           ;UI.c: 355: else if(enter){
 14654  001DCC  506B               	movf	_enter,w,c
 14655  001DCE  106C               	iorwf	_enter+1,w,c
 14656  001DD0  B4D8               	btfsc	status,2,c
 14657  001DD2  D007               	goto	i2l7249
 14658                           
 14659                           ;UI.c: 356: dispLogs(4);
 14660  001DD4  0E00               	movlw	0
 14661  001DD6  6E13               	movwf	dispLogs@myLog+1,c
 14662  001DD8  0E04               	movlw	4
 14663  001DDA  6E12               	movwf	dispLogs@myLog,c
 14664  001DDC  EC92  F01F         	call	_dispLogs	;wreg free
 14665                           
 14666                           ;UI.c: 357: }
 14667  001DE0  D03C               	goto	i2l254
 14668  001DE2                     i2l7249:
 14669                           
 14670                           ;UI.c: 358: else if(back){
 14671  001DE2  505B               	movf	_back,w,c
 14672  001DE4  105C               	iorwf	_back+1,w,c
 14673  001DE6  B4D8               	btfsc	status,2,c
 14674  001DE8  D038               	goto	i2l254
 14675                           
 14676                           ;UI.c: 359: change_state_to_menu_23();
 14677  001DEA  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 14678                           
 14679                           ;UI.c: 365: }
 14680                           
 14681                           ;UI.c: 364: break;
 14682                           
 14683                           ;UI.c: 363: default:
 14684                           
 14685                           ;UI.c: 360: }
 14686                           ;UI.c: 361: break;
 14687  001DEE  D035               	goto	i2l254
 14688  001DF0                     i2l7255:
 14689  001DF0  C0DE  F043         	movff	_cur_state,??_updateMenu
 14690  001DF4  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 14691                           
 14692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 14693                           ; Switch size 1, requested type "space"
 14694                           ; Number of cases is 3, Range of values is 0 to 4
 14695                           ; switch strategies available:
 14696                           ; Name         Instructions Cycles
 14697                           ; simple_byte           10     6 (average)
 14698                           ;	Chosen strategy is simple_byte
 14699  001DF8  5044               	movf	??_updateMenu+1,w,c
 14700  001DFA  0A00               	xorlw	0	; case 0
 14701  001DFC  B4D8               	btfsc	status,2,c
 14702  001DFE  D007               	goto	i2l7833
 14703  001E00  0A03               	xorlw	3	; case 3
 14704  001E02  B4D8               	btfsc	status,2,c
 14705  001E04  D015               	goto	i2l7835
 14706  001E06  0A07               	xorlw	7	; case 4
 14707  001E08  B4D8               	btfsc	status,2,c
 14708  001E0A  D020               	goto	i2l7837
 14709  001E0C  D026               	goto	i2l254
 14710  001E0E                     i2l7833:
 14711                           
 14712                           ; Switch size 1, requested type "space"
 14713                           ; Number of cases is 5, Range of values is 0 to 23
 14714                           ; switch strategies available:
 14715                           ; Name         Instructions Cycles
 14716                           ; simple_byte           16     9 (average)
 14717                           ;	Chosen strategy is simple_byte
 14718  001E0E  5043               	movf	??_updateMenu,w,c
 14719  001E10  0A00               	xorlw	0	; case 0
 14720  001E12  B4D8               	btfsc	status,2,c
 14721  001E14  D6DC               	goto	i2l7107
 14722  001E16  0A0B               	xorlw	11	; case 11
 14723  001E18  B4D8               	btfsc	status,2,c
 14724  001E1A  D6DC               	goto	i2l7109
 14725  001E1C  0A07               	xorlw	7	; case 12
 14726  001E1E  B4D8               	btfsc	status,2,c
 14727  001E20  D6EE               	goto	i2l7121
 14728  001E22  0A1A               	xorlw	26	; case 22
 14729  001E24  B4D8               	btfsc	status,2,c
 14730  001E26  D6F9               	goto	i2l7133
 14731  001E28  0A01               	xorlw	1	; case 23
 14732  001E2A  B4D8               	btfsc	status,2,c
 14733  001E2C  D70C               	goto	i2l7145
 14734  001E2E  D015               	goto	i2l254
 14735  001E30                     i2l7835:
 14736                           
 14737                           ; Switch size 1, requested type "space"
 14738                           ; Number of cases is 4, Range of values is 243 to 255
 14739                           ; switch strategies available:
 14740                           ; Name         Instructions Cycles
 14741                           ; simple_byte           13     7 (average)
 14742                           ;	Chosen strategy is simple_byte
 14743  001E30  5043               	movf	??_updateMenu,w,c
 14744  001E32  0AF3               	xorlw	243	; case 243
 14745  001E34  B4D8               	btfsc	status,2,c
 14746  001E36  D71C               	goto	i2l7157
 14747  001E38  0A07               	xorlw	7	; case 244
 14748  001E3A  B4D8               	btfsc	status,2,c
 14749  001E3C  D739               	goto	i2l7173
 14750  001E3E  0A0A               	xorlw	10	; case 254
 14751  001E40  B4D8               	btfsc	status,2,c
 14752  001E42  D756               	goto	i2l7189
 14753  001E44  0A01               	xorlw	1	; case 255
 14754  001E46  B4D8               	btfsc	status,2,c
 14755  001E48  D773               	goto	i2l7205
 14756  001E4A  D007               	goto	i2l254
 14757  001E4C                     i2l7837:
 14758                           
 14759                           ; Switch size 1, requested type "space"
 14760                           ; Number of cases is 2, Range of values is 9 to 10
 14761                           ; switch strategies available:
 14762                           ; Name         Instructions Cycles
 14763                           ; simple_byte            7     4 (average)
 14764                           ;	Chosen strategy is simple_byte
 14765  001E4C  5043               	movf	??_updateMenu,w,c
 14766  001E4E  0A09               	xorlw	9	; case 9
 14767  001E50  B4D8               	btfsc	status,2,c
 14768  001E52  D78E               	goto	i2l7221
 14769  001E54  0A03               	xorlw	3	; case 10
 14770  001E56  B4D8               	btfsc	status,2,c
 14771  001E58  D7AB               	goto	i2l7237
 14772  001E5A                     i2l254:
 14773                           
 14774                           ;UI.c: 366: }
 14775                           ;UI.c: 367: (INTCONbits.GIE = 1);
 14776  001E5A  8EF2               	bsf	intcon,7,c	;volatile
 14777  001E5C  0012               	return		;funcret
 14778  001E5E                     __end_of_updateMenu:
 14779                           	opt stack 0
 14780                           pclatu	equ	0xFFB
 14781                           pclath	equ	0xFFA
 14782                           tblptru	equ	0xFF8
 14783                           tblptrh	equ	0xFF7
 14784                           tblptrl	equ	0xFF6
 14785                           tablat	equ	0xFF5
 14786                           prodh	equ	0xFF4
 14787                           prodl	equ	0xFF3
 14788                           intcon	equ	0xFF2
 14789                           intcon2	equ	0xFF1
 14790                           intcon3	equ	0xFF0
 14791                           indf0	equ	0xFEF
 14792                           postinc0	equ	0xFEE
 14793                           fsr0h	equ	0xFEA
 14794                           fsr0l	equ	0xFE9
 14795                           wreg	equ	0xFE8
 14796                           postdec1	equ	0xFE5
 14797                           fsr1h	equ	0xFE2
 14798                           fsr1l	equ	0xFE1
 14799                           indf2	equ	0xFDF
 14800                           postinc2	equ	0xFDE
 14801                           postdec2	equ	0xFDD
 14802                           fsr2h	equ	0xFDA
 14803                           fsr2l	equ	0xFD9
 14804                           status	equ	0xFD8
 14805                           
 14806 ;; *************** function i2_change_state_to_menu_start *****************
 14807 ;; Defined at:
 14808 ;;		line 472 in file "UI.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;		None
 14811 ;; Auto vars:     Size  Location     Type
 14812 ;;		None
 14813 ;; Return value:  Size  Location     Type
 14814 ;;                  1    wreg      void 
 14815 ;; Registers used:
 14816 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14817 ;; Tracked objects:
 14818 ;;		On entry : 0/0
 14819 ;;		On exit  : 0/0
 14820 ;;		Unchanged: 0/0
 14821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14826 ;;Total ram usage:        0 bytes
 14827 ;; Hardware stack levels used:    1
 14828 ;; Hardware stack levels required when called:    4
 14829 ;; This function calls:
 14830 ;;		i2_lcdInst
 14831 ;;		i2_printRTC
 14832 ;;		i2_printf
 14833 ;; This function is called by:
 14834 ;;		_updateMenu
 14835 ;; This function uses a non-reentrant model
 14836 ;;
 14837                           
 14838                           	psect	text55
 14839  003E8C                     __ptext55:
 14840                           	opt stack 0
 14841  003E8C                     i2_change_state_to_menu_start:
 14842                           	opt stack 18
 14843                           
 14844                           ;UI.c: 473: cur_state = 0;
 14845                           
 14846                           ;incstack = 0
 14847  003E8C  0E00               	movlw	0
 14848  003E8E  0100               	movlb	0	; () banked
 14849  003E90  6FDF               	movwf	(_cur_state+1)& (0+255),b
 14850  003E92  0E00               	movlw	0
 14851  003E94  6FDE               	movwf	_cur_state& (0+255),b
 14852                           
 14853                           ; BSR set to: 0
 14854                           ;UI.c: 475: lcdInst(0b10000000);;
 14855  003E96  0E80               	movlw	128
 14856  003E98  EC20  F020         	call	i2_lcdInst
 14857                           
 14858                           ;UI.c: 476: printRTC();
 14859  003E9C  EC2F  F00F         	call	i2_printRTC	;wreg free
 14860                           
 14861                           ;UI.c: 477: lcdInst(0b11000000);;
 14862  003EA0  0EC0               	movlw	192
 14863  003EA2  EC20  F020         	call	i2_lcdInst
 14864                           
 14865                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 14866  003EA6  0E36               	movlw	low STR_30
 14867  003EA8  6E0D               	movwf	i2printf@f,c
 14868  003EAA  0EFE               	movlw	high STR_30
 14869  003EAC  6E0E               	movwf	i2printf@f+1,c
 14870  003EAE  ECB3  F00A         	call	i2_printf	;wreg free
 14871  003EB2  0012               	return		;funcret
 14872  003EB4                     __end_ofi2_change_state_to_menu_start:
 14873                           	opt stack 0
 14874                           pclatu	equ	0xFFB
 14875                           pclath	equ	0xFFA
 14876                           tblptru	equ	0xFF8
 14877                           tblptrh	equ	0xFF7
 14878                           tblptrl	equ	0xFF6
 14879                           tablat	equ	0xFF5
 14880                           prodh	equ	0xFF4
 14881                           prodl	equ	0xFF3
 14882                           intcon	equ	0xFF2
 14883                           intcon2	equ	0xFF1
 14884                           intcon3	equ	0xFF0
 14885                           indf0	equ	0xFEF
 14886                           postinc0	equ	0xFEE
 14887                           fsr0h	equ	0xFEA
 14888                           fsr0l	equ	0xFE9
 14889                           wreg	equ	0xFE8
 14890                           postdec1	equ	0xFE5
 14891                           fsr1h	equ	0xFE2
 14892                           fsr1l	equ	0xFE1
 14893                           indf2	equ	0xFDF
 14894                           postinc2	equ	0xFDE
 14895                           postdec2	equ	0xFDD
 14896                           fsr2h	equ	0xFDA
 14897                           fsr2l	equ	0xFD9
 14898                           status	equ	0xFD8
 14899                           
 14900 ;; *************** function i2_printRTC *****************
 14901 ;; Defined at:
 14902 ;;		line 63 in file "RTC.c"
 14903 ;; Parameters:    Size  Location     Type
 14904 ;;		None
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  printRTC       14   44[COMRAM] int [7]
 14907 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 14908 ;;  printRTC        2   64[COMRAM] int 
 14909 ;;  printRTC        2   58[COMRAM] int 
 14910 ;; Return value:  Size  Location     Type
 14911 ;;                  1    wreg      void 
 14912 ;; Registers used:
 14913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14914 ;; Tracked objects:
 14915 ;;		On entry : 0/0
 14916 ;;		On exit  : 0/0
 14917 ;;		Unchanged: 0/0
 14918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14920 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14922 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14923 ;;Total ram usage:       25 bytes
 14924 ;; Hardware stack levels used:    1
 14925 ;; Hardware stack levels required when called:    3
 14926 ;; This function calls:
 14927 ;;		i2_getRTC
 14928 ;;		i2_lcdInst
 14929 ;;		i2_printf
 14930 ;;		i2_strcpy
 14931 ;; This function is called by:
 14932 ;;		i2_change_state_to_menu_start
 14933 ;; This function uses a non-reentrant model
 14934 ;;
 14935                           
 14936                           	psect	text56
 14937  001E5E                     __ptext56:
 14938                           	opt stack 0
 14939  001E5E                     i2_printRTC:
 14940                           	opt stack 18
 14941                           
 14942                           ;RTC.c: 64: getRTC();
 14943                           
 14944                           ;incstack = 0
 14945  001E5E  ECB9  F01A         	call	i2_getRTC	;wreg free
 14946                           
 14947                           ;RTC.c: 65: char month[] = "MMM";
 14948  001E62  C131  F03D         	movff	printRTC@F3211,i2printRTC@month
 14949  001E66  C132  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 14950  001E6A  C133  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 14951  001E6E  C134  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 14952                           
 14953                           ;RTC.c: 66: int INT_time[7];
 14954                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 14955  001E72  0E00               	movlw	0
 14956  001E74  6E42               	movwf	i2printRTC@i+1,c
 14957  001E76  0E00               	movlw	0
 14958  001E78  6E41               	movwf	i2printRTC@i,c
 14959  001E7A  BE42               	btfsc	i2printRTC@i+1,7,c
 14960  001E7C  D006               	goto	i2l5755
 14961  001E7E  5042               	movf	i2printRTC@i+1,w,c
 14962  001E80  E135               	bnz	i2l591
 14963  001E82  0E07               	movlw	7
 14964  001E84  5C41               	subwf	i2printRTC@i,w,c
 14965  001E86  B0D8               	btfsc	status,0,c
 14966  001E88  D031               	goto	i2l591
 14967  001E8A                     i2l5755:
 14968                           
 14969                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 14970  001E8A  0E24               	movlw	low _time
 14971  001E8C  2441               	addwf	i2printRTC@i,w,c
 14972  001E8E  6ED9               	movwf	fsr2l,c
 14973  001E90  0E01               	movlw	high _time
 14974  001E92  2042               	addwfc	i2printRTC@i+1,w,c
 14975  001E94  6EDA               	movwf	fsr2h,c
 14976  001E96  50DF               	movf	indf2,w,c
 14977  001E98  6E2A               	movwf	??i2_printRTC& (0+255),c
 14978  001E9A  3A2A               	swapf	??i2_printRTC,f,c
 14979  001E9C  0E0F               	movlw	15
 14980  001E9E  162A               	andwf	??i2_printRTC,f,c
 14981  001EA0  0E0F               	movlw	15
 14982  001EA2  162A               	andwf	??i2_printRTC,f,c
 14983  001EA4  502A               	movf	??i2_printRTC,w,c
 14984  001EA6  0D0A               	mullw	10
 14985  001EA8  0E24               	movlw	low _time
 14986  001EAA  2441               	addwf	i2printRTC@i,w,c
 14987  001EAC  6ED9               	movwf	fsr2l,c
 14988  001EAE  0E01               	movlw	high _time
 14989  001EB0  2042               	addwfc	i2printRTC@i+1,w,c
 14990  001EB2  6EDA               	movwf	fsr2h,c
 14991  001EB4  50DF               	movf	indf2,w,c
 14992  001EB6  0B0F               	andlw	15
 14993  001EB8  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 14994  001EBA  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 14995  001EBC  50F3               	movf	prodl,w,c
 14996  001EBE  262B               	addwf	??i2_printRTC+1,f,c
 14997  001EC0  50F4               	movf	prodh,w,c
 14998  001EC2  222C               	addwfc	??i2_printRTC+2,f,c
 14999  001EC4  90D8               	bcf	status,0,c
 15000  001EC6  3441               	rlcf	i2printRTC@i,w,c
 15001  001EC8  6ED9               	movwf	fsr2l,c
 15002  001ECA  3442               	rlcf	i2printRTC@i+1,w,c
 15003  001ECC  6EDA               	movwf	fsr2h,c
 15004  001ECE  0E2D               	movlw	low i2printRTC@INT_time
 15005  001ED0  26D9               	addwf	fsr2l,f,c
 15006  001ED2  0E00               	movlw	high i2printRTC@INT_time
 15007  001ED4  22DA               	addwfc	fsr2h,f,c
 15008  001ED6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 15009  001EDA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 15010  001EDE  4A41               	infsnz	i2printRTC@i,f,c
 15011  001EE0  2A42               	incf	i2printRTC@i+1,f,c
 15012  001EE2  BE42               	btfsc	i2printRTC@i+1,7,c
 15013  001EE4  D7D2               	goto	i2l5755
 15014  001EE6  5042               	movf	i2printRTC@i+1,w,c
 15015  001EE8  E101               	bnz	i2u436_40
 15016  001EEA  D7CB               	goto	L9
 15017  001EEC                     i2u436_40:
 15018  001EEC                     i2l591:
 15019                           
 15020                           ;RTC.c: 69: }
 15021                           ;RTC.c: 70: int RTC_month = INT_time[5];
 15022  001EEC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 15023  001EF0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 15024                           
 15025                           ;RTC.c: 71: switch(RTC_month){
 15026  001EF4  D084               	goto	i2l5787
 15027  001EF6                     i2l5761:
 15028                           
 15029                           ;RTC.c: 73: strcpy(month, "JAN");
 15030  001EF6  0E3D               	movlw	low i2printRTC@month
 15031  001EF8  6E01               	movwf	i2strcpy@to,c
 15032  001EFA  0E00               	movlw	high i2printRTC@month
 15033  001EFC  6E02               	movwf	i2strcpy@to+1,c
 15034  001EFE  0EDA               	movlw	low STR_8
 15035  001F00  6E03               	movwf	i2strcpy@from,c
 15036  001F02  0EFF               	movlw	high STR_8
 15037  001F04  6E04               	movwf	i2strcpy@from+1,c
 15038  001F06  ECE6  F01D         	call	i2_strcpy	;wreg free
 15039                           
 15040                           ;RTC.c: 74: break;
 15041  001F0A  D0A6               	goto	i2l5789
 15042  001F0C                     i2l5763:
 15043                           
 15044                           ;RTC.c: 76: strcpy(month, "FEB");
 15045  001F0C  0E3D               	movlw	low i2printRTC@month
 15046  001F0E  6E01               	movwf	i2strcpy@to,c
 15047  001F10  0E00               	movlw	high i2printRTC@month
 15048  001F12  6E02               	movwf	i2strcpy@to+1,c
 15049  001F14  0ECA               	movlw	low STR_9
 15050  001F16  6E03               	movwf	i2strcpy@from,c
 15051  001F18  0EFF               	movlw	high STR_9
 15052  001F1A  6E04               	movwf	i2strcpy@from+1,c
 15053  001F1C  ECE6  F01D         	call	i2_strcpy	;wreg free
 15054                           
 15055                           ;RTC.c: 77: break;
 15056  001F20  D09B               	goto	i2l5789
 15057  001F22                     i2l5765:
 15058                           
 15059                           ;RTC.c: 79: strcpy(month, "MAR");
 15060  001F22  0E3D               	movlw	low i2printRTC@month
 15061  001F24  6E01               	movwf	i2strcpy@to,c
 15062  001F26  0E00               	movlw	high i2printRTC@month
 15063  001F28  6E02               	movwf	i2strcpy@to+1,c
 15064  001F2A  0EE6               	movlw	low STR_10
 15065  001F2C  6E03               	movwf	i2strcpy@from,c
 15066  001F2E  0EFF               	movlw	high STR_10
 15067  001F30  6E04               	movwf	i2strcpy@from+1,c
 15068  001F32  ECE6  F01D         	call	i2_strcpy	;wreg free
 15069                           
 15070                           ;RTC.c: 80: break;
 15071  001F36  D090               	goto	i2l5789
 15072  001F38                     i2l5767:
 15073                           
 15074                           ;RTC.c: 82: strcpy(month, "APR");
 15075  001F38  0E3D               	movlw	low i2printRTC@month
 15076  001F3A  6E01               	movwf	i2strcpy@to,c
 15077  001F3C  0E00               	movlw	high i2printRTC@month
 15078  001F3E  6E02               	movwf	i2strcpy@to+1,c
 15079  001F40  0EEA               	movlw	low STR_11
 15080  001F42  6E03               	movwf	i2strcpy@from,c
 15081  001F44  0EFF               	movlw	high STR_11
 15082  001F46  6E04               	movwf	i2strcpy@from+1,c
 15083  001F48  ECE6  F01D         	call	i2_strcpy	;wreg free
 15084                           
 15085                           ;RTC.c: 83: break;
 15086  001F4C  D085               	goto	i2l5789
 15087  001F4E                     i2l5769:
 15088                           
 15089                           ;RTC.c: 85: strcpy(month, "MAY");
 15090  001F4E  0E3D               	movlw	low i2printRTC@month
 15091  001F50  6E01               	movwf	i2strcpy@to,c
 15092  001F52  0E00               	movlw	high i2printRTC@month
 15093  001F54  6E02               	movwf	i2strcpy@to+1,c
 15094  001F56  0EFA               	movlw	low STR_12
 15095  001F58  6E03               	movwf	i2strcpy@from,c
 15096  001F5A  0EFF               	movlw	high STR_12
 15097  001F5C  6E04               	movwf	i2strcpy@from+1,c
 15098  001F5E  ECE6  F01D         	call	i2_strcpy	;wreg free
 15099                           
 15100                           ;RTC.c: 86: break;
 15101  001F62  D07A               	goto	i2l5789
 15102  001F64                     i2l5771:
 15103                           
 15104                           ;RTC.c: 88: strcpy(month, "JUN");
 15105  001F64  0E3D               	movlw	low i2printRTC@month
 15106  001F66  6E01               	movwf	i2strcpy@to,c
 15107  001F68  0E00               	movlw	high i2printRTC@month
 15108  001F6A  6E02               	movwf	i2strcpy@to+1,c
 15109  001F6C  0EDE               	movlw	low STR_13
 15110  001F6E  6E03               	movwf	i2strcpy@from,c
 15111  001F70  0EFF               	movlw	high STR_13
 15112  001F72  6E04               	movwf	i2strcpy@from+1,c
 15113  001F74  ECE6  F01D         	call	i2_strcpy	;wreg free
 15114                           
 15115                           ;RTC.c: 89: break;
 15116  001F78  D06F               	goto	i2l5789
 15117  001F7A                     i2l5773:
 15118                           
 15119                           ;RTC.c: 91: strcpy(month, "JUL");
 15120  001F7A  0E3D               	movlw	low i2printRTC@month
 15121  001F7C  6E01               	movwf	i2strcpy@to,c
 15122  001F7E  0E00               	movlw	high i2printRTC@month
 15123  001F80  6E02               	movwf	i2strcpy@to+1,c
 15124  001F82  0ED6               	movlw	low STR_14
 15125  001F84  6E03               	movwf	i2strcpy@from,c
 15126  001F86  0EFF               	movlw	high STR_14
 15127  001F88  6E04               	movwf	i2strcpy@from+1,c
 15128  001F8A  ECE6  F01D         	call	i2_strcpy	;wreg free
 15129                           
 15130                           ;RTC.c: 92: break;
 15131  001F8E  D064               	goto	i2l5789
 15132  001F90                     i2l5775:
 15133                           
 15134                           ;RTC.c: 94: strcpy(month, "AUG");
 15135  001F90  0E3D               	movlw	low i2printRTC@month
 15136  001F92  6E01               	movwf	i2strcpy@to,c
 15137  001F94  0E00               	movlw	high i2printRTC@month
 15138  001F96  6E02               	movwf	i2strcpy@to+1,c
 15139  001F98  0ED2               	movlw	low STR_15
 15140  001F9A  6E03               	movwf	i2strcpy@from,c
 15141  001F9C  0EFF               	movlw	high STR_15
 15142  001F9E  6E04               	movwf	i2strcpy@from+1,c
 15143  001FA0  ECE6  F01D         	call	i2_strcpy	;wreg free
 15144                           
 15145                           ;RTC.c: 95: break;
 15146  001FA4  D059               	goto	i2l5789
 15147  001FA6                     i2l5777:
 15148                           
 15149                           ;RTC.c: 97: strcpy(month, "SEP");
 15150  001FA6  0E3D               	movlw	low i2printRTC@month
 15151  001FA8  6E01               	movwf	i2strcpy@to,c
 15152  001FAA  0E00               	movlw	high i2printRTC@month
 15153  001FAC  6E02               	movwf	i2strcpy@to+1,c
 15154  001FAE  0EE2               	movlw	low STR_16
 15155  001FB0  6E03               	movwf	i2strcpy@from,c
 15156  001FB2  0EFF               	movlw	high STR_16
 15157  001FB4  6E04               	movwf	i2strcpy@from+1,c
 15158  001FB6  ECE6  F01D         	call	i2_strcpy	;wreg free
 15159                           
 15160                           ;RTC.c: 98: break;
 15161  001FBA  D04E               	goto	i2l5789
 15162  001FBC                     i2l5779:
 15163                           
 15164                           ;RTC.c: 100: strcpy(month, "OCT");
 15165  001FBC  0E3D               	movlw	low i2printRTC@month
 15166  001FBE  6E01               	movwf	i2strcpy@to,c
 15167  001FC0  0E00               	movlw	high i2printRTC@month
 15168  001FC2  6E02               	movwf	i2strcpy@to+1,c
 15169  001FC4  0EF2               	movlw	low STR_17
 15170  001FC6  6E03               	movwf	i2strcpy@from,c
 15171  001FC8  0EFF               	movlw	high STR_17
 15172  001FCA  6E04               	movwf	i2strcpy@from+1,c
 15173  001FCC  ECE6  F01D         	call	i2_strcpy	;wreg free
 15174                           
 15175                           ;RTC.c: 101: break;
 15176  001FD0  D043               	goto	i2l5789
 15177  001FD2                     i2l5781:
 15178                           
 15179                           ;RTC.c: 103: strcpy(month, "NOV");
 15180  001FD2  0E3D               	movlw	low i2printRTC@month
 15181  001FD4  6E01               	movwf	i2strcpy@to,c
 15182  001FD6  0E00               	movlw	high i2printRTC@month
 15183  001FD8  6E02               	movwf	i2strcpy@to+1,c
 15184  001FDA  0EF6               	movlw	low STR_18
 15185  001FDC  6E03               	movwf	i2strcpy@from,c
 15186  001FDE  0EFF               	movlw	high STR_18
 15187  001FE0  6E04               	movwf	i2strcpy@from+1,c
 15188  001FE2  ECE6  F01D         	call	i2_strcpy	;wreg free
 15189                           
 15190                           ;RTC.c: 104: break;
 15191  001FE6  D038               	goto	i2l5789
 15192  001FE8                     i2l5783:
 15193                           
 15194                           ;RTC.c: 106: strcpy(month, "DEC");
 15195  001FE8  0E3D               	movlw	low i2printRTC@month
 15196  001FEA  6E01               	movwf	i2strcpy@to,c
 15197  001FEC  0E00               	movlw	high i2printRTC@month
 15198  001FEE  6E02               	movwf	i2strcpy@to+1,c
 15199  001FF0  0ECE               	movlw	low STR_19
 15200  001FF2  6E03               	movwf	i2strcpy@from,c
 15201  001FF4  0EFF               	movlw	high STR_19
 15202  001FF6  6E04               	movwf	i2strcpy@from+1,c
 15203  001FF8  ECE6  F01D         	call	i2_strcpy	;wreg free
 15204                           
 15205                           ;RTC.c: 108: }
 15206                           
 15207                           ;RTC.c: 107: break;
 15208  001FFC  D02D               	goto	i2l5789
 15209  001FFE                     i2l5787:
 15210  001FFE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 15211  002002  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 15212                           
 15213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15214                           ; Switch size 1, requested type "space"
 15215                           ; Number of cases is 1, Range of values is 0 to 0
 15216                           ; switch strategies available:
 15217                           ; Name         Instructions Cycles
 15218                           ; simple_byte            4     3 (average)
 15219                           ;	Chosen strategy is simple_byte
 15220  002006  502B               	movf	??i2_printRTC+1,w,c
 15221  002008  0A00               	xorlw	0	; case 0
 15222  00200A  A4D8               	btfss	status,2,c
 15223  00200C  D025               	goto	i2l5789
 15224                           
 15225                           ; Switch size 1, requested type "space"
 15226                           ; Number of cases is 12, Range of values is 1 to 12
 15227                           ; switch strategies available:
 15228                           ; Name         Instructions Cycles
 15229                           ; simple_byte           37    19 (average)
 15230                           ;	Chosen strategy is simple_byte
 15231  00200E  502A               	movf	??i2_printRTC,w,c
 15232  002010  0A01               	xorlw	1	; case 1
 15233  002012  B4D8               	btfsc	status,2,c
 15234  002014  D770               	goto	i2l5761
 15235  002016  0A03               	xorlw	3	; case 2
 15236  002018  B4D8               	btfsc	status,2,c
 15237  00201A  D778               	goto	i2l5763
 15238  00201C  0A01               	xorlw	1	; case 3
 15239  00201E  B4D8               	btfsc	status,2,c
 15240  002020  D780               	goto	i2l5765
 15241  002022  0A07               	xorlw	7	; case 4
 15242  002024  B4D8               	btfsc	status,2,c
 15243  002026  D788               	goto	i2l5767
 15244  002028  0A01               	xorlw	1	; case 5
 15245  00202A  B4D8               	btfsc	status,2,c
 15246  00202C  D790               	goto	i2l5769
 15247  00202E  0A03               	xorlw	3	; case 6
 15248  002030  B4D8               	btfsc	status,2,c
 15249  002032  D798               	goto	i2l5771
 15250  002034  0A01               	xorlw	1	; case 7
 15251  002036  B4D8               	btfsc	status,2,c
 15252  002038  D7A0               	goto	i2l5773
 15253  00203A  0A0F               	xorlw	15	; case 8
 15254  00203C  B4D8               	btfsc	status,2,c
 15255  00203E  D7A8               	goto	i2l5775
 15256  002040  0A01               	xorlw	1	; case 9
 15257  002042  B4D8               	btfsc	status,2,c
 15258  002044  D7B0               	goto	i2l5777
 15259  002046  0A03               	xorlw	3	; case 10
 15260  002048  B4D8               	btfsc	status,2,c
 15261  00204A  D7B8               	goto	i2l5779
 15262  00204C  0A01               	xorlw	1	; case 11
 15263  00204E  B4D8               	btfsc	status,2,c
 15264  002050  D7C0               	goto	i2l5781
 15265  002052  0A07               	xorlw	7	; case 12
 15266  002054  B4D8               	btfsc	status,2,c
 15267  002056  D7C8               	goto	i2l5783
 15268  002058                     i2l5789:
 15269                           
 15270                           ;RTC.c: 109: lcdInst(0b10000000);;
 15271  002058  0E80               	movlw	128
 15272  00205A  EC20  F020         	call	i2_lcdInst
 15273                           
 15274                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 15275  00205E  0E8C               	movlw	low STR_21
 15276  002060  6E0D               	movwf	i2printf@f,c
 15277  002062  0EFB               	movlw	high STR_21
 15278  002064  6E0E               	movwf	i2printf@f+1,c
 15279  002066  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 15280  00206A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 15281  00206E  0E3D               	movlw	low i2printRTC@month
 15282  002070  6E11               	movwf	?i2_printf+4,c
 15283  002072  0E00               	movlw	high i2printRTC@month
 15284  002074  6E12               	movwf	?i2_printf+5,c
 15285  002076  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 15286  00207A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 15287  00207E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 15288  002082  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 15289  002086  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 15290  00208A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 15291  00208E  ECB3  F00A         	call	i2_printf	;wreg free
 15292  002092  0012               	return		;funcret
 15293  002094                     __end_ofi2_printRTC:
 15294                           	opt stack 0
 15295                           pclatu	equ	0xFFB
 15296                           pclath	equ	0xFFA
 15297                           tblptru	equ	0xFF8
 15298                           tblptrh	equ	0xFF7
 15299                           tblptrl	equ	0xFF6
 15300                           tablat	equ	0xFF5
 15301                           prodh	equ	0xFF4
 15302                           prodl	equ	0xFF3
 15303                           intcon	equ	0xFF2
 15304                           intcon2	equ	0xFF1
 15305                           intcon3	equ	0xFF0
 15306                           indf0	equ	0xFEF
 15307                           postinc0	equ	0xFEE
 15308                           fsr0h	equ	0xFEA
 15309                           fsr0l	equ	0xFE9
 15310                           wreg	equ	0xFE8
 15311                           postdec1	equ	0xFE5
 15312                           fsr1h	equ	0xFE2
 15313                           fsr1l	equ	0xFE1
 15314                           indf2	equ	0xFDF
 15315                           postinc2	equ	0xFDE
 15316                           postdec2	equ	0xFDD
 15317                           fsr2h	equ	0xFDA
 15318                           fsr2l	equ	0xFD9
 15319                           status	equ	0xFD8
 15320                           
 15321 ;; *************** function i2_strcpy *****************
 15322 ;; Defined at:
 15323 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 15324 ;; Parameters:    Size  Location     Type
 15325 ;;  to              2    0[COMRAM] PTR unsigned char 
 15326 ;;		 -> printRTC@month(4), UI@month(4), 
 15327 ;;  from            2    2[COMRAM] PTR const unsigned char 
 15328 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 15329 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 15330 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 15331 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 15332 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 15333 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 15334 ;;		 -> STR_8(4), 
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 15337 ;;		 -> printRTC@month(4), UI@month(4), 
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  2    0[COMRAM] PTR unsigned char 
 15340 ;; Registers used:
 15341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15350 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15351 ;;Total ram usage:        6 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; This function calls:
 15354 ;;		Nothing
 15355 ;; This function is called by:
 15356 ;;		i2_printRTC
 15357 ;; This function uses a non-reentrant model
 15358 ;;
 15359                           
 15360                           	psect	text57
 15361  003BCC                     __ptext57:
 15362                           	opt stack 0
 15363  003BCC                     i2_strcpy:
 15364                           	opt stack 20
 15365                           
 15366                           ;incstack = 0
 15367  003BCC  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 15368  003BD0  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 15369  003BD4  D004               	goto	i2l5437
 15370  003BD6                     i2l5435:
 15371  003BD6  4A05               	infsnz	i2strcpy@cp,f,c
 15372  003BD8  2A06               	incf	i2strcpy@cp+1,f,c
 15373  003BDA  4A03               	infsnz	i2strcpy@from,f,c
 15374  003BDC  2A04               	incf	i2strcpy@from+1,f,c
 15375  003BDE                     i2l5437:
 15376  003BDE  C003  FFF6         	movff	i2strcpy@from,tblptrl
 15377  003BE2  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 15378  003BE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15379  003BE6  6AF8               	clrf	tblptru,c
 15380  003BE8                     	endif
 15381  003BE8                     	if	0	;tblptru may be non-zero
 15382  003BE8                     	endif
 15383  003BE8  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 15384  003BEC  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 15385  003BF0  0008               	tblrd		*
 15386  003BF2  CFF5 FFDF          	movff	tablat,indf2
 15387  003BF6  50DF               	movf	indf2,w,c
 15388  003BF8  B4D8               	btfsc	status,2,c
 15389  003BFA  0012               	return	
 15390  003BFC  D7EC               	goto	i2l5435
 15391  003BFE                     __end_ofi2_strcpy:
 15392                           	opt stack 0
 15393                           pclatu	equ	0xFFB
 15394                           pclath	equ	0xFFA
 15395                           tblptru	equ	0xFF8
 15396                           tblptrh	equ	0xFF7
 15397                           tblptrl	equ	0xFF6
 15398                           tablat	equ	0xFF5
 15399                           prodh	equ	0xFF4
 15400                           prodl	equ	0xFF3
 15401                           intcon	equ	0xFF2
 15402                           intcon2	equ	0xFF1
 15403                           intcon3	equ	0xFF0
 15404                           indf0	equ	0xFEF
 15405                           postinc0	equ	0xFEE
 15406                           fsr0h	equ	0xFEA
 15407                           fsr0l	equ	0xFE9
 15408                           wreg	equ	0xFE8
 15409                           postdec1	equ	0xFE5
 15410                           fsr1h	equ	0xFE2
 15411                           fsr1l	equ	0xFE1
 15412                           indf2	equ	0xFDF
 15413                           postinc2	equ	0xFDE
 15414                           postdec2	equ	0xFDD
 15415                           fsr2h	equ	0xFDA
 15416                           fsr2l	equ	0xFD9
 15417                           status	equ	0xFD8
 15418                           
 15419 ;; *************** function _inputHandler *****************
 15420 ;; Defined at:
 15421 ;;		line 370 in file "UI.c"
 15422 ;; Parameters:    Size  Location     Type
 15423 ;;		None
 15424 ;; Auto vars:     Size  Location     Type
 15425 ;;		None
 15426 ;; Return value:  Size  Location     Type
 15427 ;;                  2   41[COMRAM] int 
 15428 ;; Registers used:
 15429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15430 ;; Tracked objects:
 15431 ;;		On entry : 0/0
 15432 ;;		On exit  : 0/0
 15433 ;;		Unchanged: 0/0
 15434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15438 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15439 ;;Total ram usage:        4 bytes
 15440 ;; Hardware stack levels used:    1
 15441 ;; Hardware stack levels required when called:    4
 15442 ;; This function calls:
 15443 ;;		_change_state_to_logs_11
 15444 ;;		_change_state_to_logs_12
 15445 ;;		_change_state_to_logs_22
 15446 ;;		_change_state_to_logs_23
 15447 ;;		_change_state_to_logs_33
 15448 ;;		_change_state_to_logs_34
 15449 ;;		_change_state_to_menu_11
 15450 ;;		_change_state_to_menu_23
 15451 ;;		i2_change_state_to_menu_12
 15452 ;;		i2_change_state_to_menu_22
 15453 ;; This function is called by:
 15454 ;;		_updateMenu
 15455 ;; This function uses a non-reentrant model
 15456 ;;
 15457                           
 15458                           	psect	text58
 15459  002286                     __ptext58:
 15460                           	opt stack 0
 15461  002286                     _inputHandler:
 15462                           	opt stack 18
 15463                           
 15464                           ;UI.c: 375: if(firstboot){
 15465                           
 15466                           ;incstack = 0
 15467  002286  5075               	movf	_firstboot,w,c
 15468  002288  1076               	iorwf	_firstboot+1,w,c
 15469  00228A  B4D8               	btfsc	status,2,c
 15470  00228C  D00B               	goto	i2l5857
 15471                           
 15472                           ;UI.c: 376: change_state_to_menu_11();
 15473  00228E  EC47  F01E         	call	_change_state_to_menu_11	;wreg free
 15474                           
 15475                           ;UI.c: 377: firstboot = 0;
 15476  002292  0E00               	movlw	0
 15477  002294  6E76               	movwf	_firstboot+1,c
 15478  002296  0E00               	movlw	0
 15479  002298  6E75               	movwf	_firstboot,c
 15480                           
 15481                           ;UI.c: 378: return 0;
 15482  00229A  0E00               	movlw	0
 15483  00229C  6E2B               	movwf	?_inputHandler+1,c
 15484  00229E  0E00               	movlw	0
 15485  0022A0  6E2A               	movwf	?_inputHandler,c
 15486  0022A2  0012               	return	
 15487  0022A4                     i2l5857:
 15488                           
 15489                           ;UI.c: 379: }
 15490                           ;UI.c: 380: if (logstate){
 15491  0022A4  0100               	movlb	0	; () banked
 15492  0022A6  51F6               	movf	_logstate& (0+255),w,b
 15493  0022A8  0100               	movlb	0	; () banked
 15494  0022AA  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 15495  0022AC  B4D8               	btfsc	status,2,c
 15496  0022AE  D0C7               	goto	i2l5975
 15497                           
 15498                           ; BSR set to: 0
 15499                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 15500  0022B0  0E43               	movlw	67
 15501  0022B2  187D               	xorwf	_input,w,c	;volatile
 15502  0022B4  A4D8               	btfss	status,2,c
 15503  0022B6  D012               	goto	i2l5875
 15504                           
 15505                           ; BSR set to: 0
 15506  0022B8  B281               	btfsc	3969,1,c	;volatile
 15507  0022BA  D009               	goto	i2l5867
 15508  0022BC  D00F               	goto	i2l5875
 15509  0022BE                     i2l5865:
 15510                           
 15511                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 15512  0022BE  0E68               	movlw	104
 15513  0022C0  6E2C               	movwf	??_inputHandler& (0+255),c
 15514  0022C2  0EE4               	movlw	228
 15515  0022C4                     i2u738_47:
 15516  0022C4  2EE8               	decfsz	wreg,f,c
 15517  0022C6  D7FE               	bra	i2u738_47
 15518  0022C8  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 15519  0022CA  D7FC               	bra	i2u738_47
 15520  0022CC  D000               	nop2	
 15521  0022CE                     i2l5867:
 15522  0022CE  B281               	btfsc	3969,1,c	;volatile
 15523  0022D0  D7F6               	goto	i2l5865
 15524  0022D2                     i2l5869:
 15525                           
 15526                           ;UI.c: 385: }
 15527                           ;UI.c: 386: return 0;
 15528  0022D2  0E00               	movlw	0
 15529  0022D4  6E2B               	movwf	?_inputHandler+1,c
 15530  0022D6  0E00               	movlw	0
 15531  0022D8  6E2A               	movwf	?_inputHandler,c
 15532  0022DA  0012               	return	
 15533  0022DC                     i2l5875:
 15534                           
 15535                           ;UI.c: 388: else if (input == 'D'){
 15536  0022DC  0E44               	movlw	68
 15537  0022DE  187D               	xorwf	_input,w,c	;volatile
 15538  0022E0  A4D8               	btfss	status,2,c
 15539  0022E2  D7F7               	goto	i2l5869
 15540                           
 15541                           ;UI.c: 390: logstate = 0;
 15542  0022E4  0E00               	movlw	0
 15543  0022E6  0100               	movlb	0	; () banked
 15544  0022E8  6FF7               	movwf	(_logstate+1)& (0+255),b
 15545  0022EA  0E00               	movlw	0
 15546  0022EC  6FF6               	movwf	_logstate& (0+255),b
 15547                           
 15548                           ;UI.c: 391: switch(cur_state){
 15549  0022EE  D012               	goto	i2l5893
 15550  0022F0                     i2l5879:
 15551                           
 15552                           ;UI.c: 393: change_state_to_logs_11();
 15553  0022F0  ECBF  F01E         	call	_change_state_to_logs_11	;wreg free
 15554                           
 15555                           ;UI.c: 394: break;
 15556  0022F4  D7EE               	goto	i2l5869
 15557  0022F6                     i2l5881:
 15558                           
 15559                           ;UI.c: 396: change_state_to_logs_12();
 15560  0022F6  ECA7  F01E         	call	_change_state_to_logs_12	;wreg free
 15561                           
 15562                           ;UI.c: 397: break;
 15563  0022FA  D7EB               	goto	i2l5869
 15564  0022FC                     i2l5883:
 15565                           
 15566                           ;UI.c: 399: change_state_to_logs_22();
 15567  0022FC  EC8F  F01E         	call	_change_state_to_logs_22	;wreg free
 15568                           
 15569                           ;UI.c: 400: break;
 15570  002300  D7E8               	goto	i2l5869
 15571  002302                     i2l5885:
 15572                           
 15573                           ;UI.c: 402: change_state_to_logs_23();
 15574  002302  ECEE  F01E         	call	_change_state_to_logs_23	;wreg free
 15575                           
 15576                           ;UI.c: 403: break;
 15577  002306  D7E5               	goto	i2l5869
 15578  002308                     i2l5887:
 15579                           
 15580                           ;UI.c: 405: change_state_to_logs_33();
 15581  002308  EC77  F01E         	call	_change_state_to_logs_33	;wreg free
 15582                           
 15583                           ;UI.c: 406: break;
 15584  00230C  D7E2               	goto	i2l5869
 15585  00230E                     i2l5889:
 15586                           
 15587                           ;UI.c: 408: change_state_to_logs_34();
 15588  00230E  EC5F  F01E         	call	_change_state_to_logs_34	;wreg free
 15589                           
 15590                           ;UI.c: 410: }
 15591                           
 15592                           ;UI.c: 409: break;
 15593  002312  D7DF               	goto	i2l5869
 15594  002314                     i2l5893:
 15595  002314  C0DE  F02C         	movff	_cur_state,??_inputHandler
 15596  002318  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 15597                           
 15598                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 15599                           ; Switch size 1, requested type "space"
 15600                           ; Number of cases is 2, Range of values is 3 to 4
 15601                           ; switch strategies available:
 15602                           ; Name         Instructions Cycles
 15603                           ; simple_byte            7     4 (average)
 15604                           ;	Chosen strategy is simple_byte
 15605  00231C  502D               	movf	??_inputHandler+1,w,c
 15606  00231E  0A03               	xorlw	3	; case 3
 15607  002320  B4D8               	btfsc	status,2,c
 15608  002322  D004               	goto	i2l7841
 15609  002324  0A07               	xorlw	7	; case 4
 15610  002326  B4D8               	btfsc	status,2,c
 15611  002328  D00F               	goto	i2l7843
 15612  00232A  D7D3               	goto	i2l5869
 15613  00232C                     i2l7841:
 15614                           
 15615                           ; Switch size 1, requested type "space"
 15616                           ; Number of cases is 4, Range of values is 243 to 255
 15617                           ; switch strategies available:
 15618                           ; Name         Instructions Cycles
 15619                           ; simple_byte           13     7 (average)
 15620                           ;	Chosen strategy is simple_byte
 15621  00232C  502C               	movf	??_inputHandler,w,c
 15622  00232E  0AF3               	xorlw	243	; case 243
 15623  002330  B4D8               	btfsc	status,2,c
 15624  002332  D7DE               	goto	i2l5879
 15625  002334  0A07               	xorlw	7	; case 244
 15626  002336  B4D8               	btfsc	status,2,c
 15627  002338  D7DE               	goto	i2l5881
 15628  00233A  0A0A               	xorlw	10	; case 254
 15629  00233C  B4D8               	btfsc	status,2,c
 15630  00233E  D7DE               	goto	i2l5883
 15631  002340  0A01               	xorlw	1	; case 255
 15632  002342  B4D8               	btfsc	status,2,c
 15633  002344  D7DE               	goto	i2l5885
 15634  002346  D7C5               	goto	i2l5869
 15635  002348                     i2l7843:
 15636                           
 15637                           ; Switch size 1, requested type "space"
 15638                           ; Number of cases is 2, Range of values is 9 to 10
 15639                           ; switch strategies available:
 15640                           ; Name         Instructions Cycles
 15641                           ; simple_byte            7     4 (average)
 15642                           ;	Chosen strategy is simple_byte
 15643  002348  502C               	movf	??_inputHandler,w,c
 15644  00234A  0A09               	xorlw	9	; case 9
 15645  00234C  B4D8               	btfsc	status,2,c
 15646  00234E  D7DC               	goto	i2l5887
 15647  002350  0A03               	xorlw	3	; case 10
 15648  002352  B4D8               	btfsc	status,2,c
 15649  002354  D7DC               	goto	i2l5889
 15650  002356  D7BD               	goto	i2l5869
 15651  002358                     i2l5905:
 15652                           
 15653                           ;UI.c: 420: if(cur_state == 11){
 15654  002358  0E0B               	movlw	11
 15655  00235A  0100               	movlb	0	; () banked
 15656  00235C  19DE               	xorwf	_cur_state& (0+255),w,b
 15657  00235E  0100               	movlb	0	; () banked
 15658  002360  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15659  002362  A4D8               	btfss	status,2,c
 15660  002364  D005               	goto	i2l5913
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;UI.c: 421: return 0;
 15664  002366  0E00               	movlw	0
 15665  002368  6E2B               	movwf	?_inputHandler+1,c
 15666  00236A  0E00               	movlw	0
 15667  00236C  6E2A               	movwf	?_inputHandler,c
 15668                           
 15669                           ; BSR set to: 0
 15670  00236E  0012               	return	
 15671  002370                     i2l5913:
 15672                           
 15673                           ; BSR set to: 0
 15674                           ;UI.c: 423: else{
 15675                           ;UI.c: 424: change_state_to_menu_11();
 15676  002370  EC47  F01E         	call	_change_state_to_menu_11	;wreg free
 15677                           
 15678                           ;UI.c: 425: }
 15679                           ;UI.c: 426: return 0;
 15680  002374  0E00               	movlw	0
 15681  002376  6E2B               	movwf	?_inputHandler+1,c
 15682  002378  0E00               	movlw	0
 15683  00237A  6E2A               	movwf	?_inputHandler,c
 15684  00237C  0012               	return	
 15685  00237E                     i2l5919:
 15686                           
 15687                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 15688  00237E  0E16               	movlw	22
 15689  002380  0100               	movlb	0	; () banked
 15690  002382  19DE               	xorwf	_cur_state& (0+255),w,b
 15691  002384  0100               	movlb	0	; () banked
 15692  002386  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15693  002388  B4D8               	btfsc	status,2,c
 15694  00238A  D007               	goto	i2l5923
 15695                           
 15696                           ; BSR set to: 0
 15697  00238C  0E0C               	movlw	12
 15698  00238E  0100               	movlb	0	; () banked
 15699  002390  19DE               	xorwf	_cur_state& (0+255),w,b
 15700  002392  0100               	movlb	0	; () banked
 15701  002394  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15702  002396  A4D8               	btfss	status,2,c
 15703  002398  D005               	goto	i2l5929
 15704  00239A                     i2l5923:
 15705                           
 15706                           ; BSR set to: 0
 15707                           ;UI.c: 429: return 0;
 15708  00239A  0E00               	movlw	0
 15709  00239C  6E2B               	movwf	?_inputHandler+1,c
 15710  00239E  0E00               	movlw	0
 15711  0023A0  6E2A               	movwf	?_inputHandler,c
 15712                           
 15713                           ; BSR set to: 0
 15714  0023A2  0012               	return	
 15715  0023A4                     i2l5929:
 15716                           
 15717                           ; BSR set to: 0
 15718                           ;UI.c: 431: else if(cur_state == 23){
 15719  0023A4  0E17               	movlw	23
 15720  0023A6  0100               	movlb	0	; () banked
 15721  0023A8  19DE               	xorwf	_cur_state& (0+255),w,b
 15722  0023AA  0100               	movlb	0	; () banked
 15723  0023AC  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15724  0023AE  A4D8               	btfss	status,2,c
 15725  0023B0  D003               	goto	i2l5933
 15726                           
 15727                           ; BSR set to: 0
 15728                           ;UI.c: 432: change_state_to_menu_22();
 15729  0023B2  ECFF  F01D         	call	i2_change_state_to_menu_22	;wreg free
 15730                           
 15731                           ;UI.c: 433: }
 15732  0023B6  D002               	goto	i2l5935
 15733  0023B8                     i2l5933:
 15734                           
 15735                           ;UI.c: 434: else{
 15736                           ;UI.c: 435: change_state_to_menu_12();
 15737  0023B8  EC17  F01E         	call	i2_change_state_to_menu_12	;wreg free
 15738  0023BC                     i2l5935:
 15739                           
 15740                           ;UI.c: 436: }
 15741                           ;UI.c: 437: return 0;
 15742  0023BC  0E00               	movlw	0
 15743  0023BE  6E2B               	movwf	?_inputHandler+1,c
 15744  0023C0  0E00               	movlw	0
 15745  0023C2  6E2A               	movwf	?_inputHandler,c
 15746  0023C4  0012               	return	
 15747  0023C6                     i2l5939:
 15748                           
 15749                           ;UI.c: 439: if(cur_state == 23){
 15750  0023C6  0E17               	movlw	23
 15751  0023C8  0100               	movlb	0	; () banked
 15752  0023CA  19DE               	xorwf	_cur_state& (0+255),w,b
 15753  0023CC  0100               	movlb	0	; () banked
 15754  0023CE  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15755  0023D0  A4D8               	btfss	status,2,c
 15756  0023D2  D005               	goto	i2l5947
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;UI.c: 440: return 0;
 15760  0023D4  0E00               	movlw	0
 15761  0023D6  6E2B               	movwf	?_inputHandler+1,c
 15762  0023D8  0E00               	movlw	0
 15763  0023DA  6E2A               	movwf	?_inputHandler,c
 15764                           
 15765                           ; BSR set to: 0
 15766  0023DC  0012               	return	
 15767  0023DE                     i2l5947:
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;UI.c: 442: else{
 15771                           ;UI.c: 443: change_state_to_menu_23();
 15772  0023DE  EC2F  F01E         	call	_change_state_to_menu_23	;wreg free
 15773                           
 15774                           ;UI.c: 444: }
 15775                           ;UI.c: 445: return 0;
 15776  0023E2  0E00               	movlw	0
 15777  0023E4  6E2B               	movwf	?_inputHandler+1,c
 15778  0023E6  0E00               	movlw	0
 15779  0023E8  6E2A               	movwf	?_inputHandler,c
 15780  0023EA  0012               	return	
 15781  0023EC                     i2l5953:
 15782                           
 15783                           ;UI.c: 448: up = 1;
 15784  0023EC  0E00               	movlw	0
 15785  0023EE  6E78               	movwf	_up+1,c
 15786  0023F0  0E01               	movlw	1
 15787  0023F2  6E77               	movwf	_up,c
 15788                           
 15789                           ;UI.c: 449: return 1;
 15790  0023F4  0E00               	movlw	0
 15791  0023F6  6E2B               	movwf	?_inputHandler+1,c
 15792  0023F8  0E01               	movlw	1
 15793  0023FA  6E2A               	movwf	?_inputHandler,c
 15794  0023FC  0012               	return	
 15795  0023FE                     i2l5957:
 15796                           
 15797                           ;UI.c: 451: down = 1;
 15798  0023FE  0E00               	movlw	0
 15799  002400  6E6A               	movwf	_down+1,c
 15800  002402  0E01               	movlw	1
 15801  002404  6E69               	movwf	_down,c
 15802                           
 15803                           ;UI.c: 452: return 1;
 15804  002406  0E00               	movlw	0
 15805  002408  6E2B               	movwf	?_inputHandler+1,c
 15806  00240A  0E01               	movlw	1
 15807  00240C  6E2A               	movwf	?_inputHandler,c
 15808  00240E  0012               	return	
 15809  002410                     i2l5961:
 15810                           
 15811                           ;UI.c: 454: enter = 1;
 15812  002410  0E00               	movlw	0
 15813  002412  6E6C               	movwf	_enter+1,c
 15814  002414  0E01               	movlw	1
 15815  002416  6E6B               	movwf	_enter,c
 15816                           
 15817                           ;UI.c: 455: return 1;
 15818  002418  0E00               	movlw	0
 15819  00241A  6E2B               	movwf	?_inputHandler+1,c
 15820  00241C  0E01               	movlw	1
 15821  00241E  6E2A               	movwf	?_inputHandler,c
 15822  002420  0012               	return	
 15823  002422                     i2l5965:
 15824                           
 15825                           ;UI.c: 457: back = 1;
 15826  002422  0E00               	movlw	0
 15827  002424  6E5C               	movwf	_back+1,c
 15828  002426  0E01               	movlw	1
 15829  002428  6E5B               	movwf	_back,c
 15830                           
 15831                           ;UI.c: 458: return 1;
 15832  00242A  0E00               	movlw	0
 15833  00242C  6E2B               	movwf	?_inputHandler+1,c
 15834  00242E  0E01               	movlw	1
 15835  002430  6E2A               	movwf	?_inputHandler,c
 15836  002432  0012               	return	
 15837  002434                     i2l5969:
 15838                           
 15839                           ;UI.c: 461: return 1;
 15840  002434  0E00               	movlw	0
 15841  002436  6E2B               	movwf	?_inputHandler+1,c
 15842  002438  0E01               	movlw	1
 15843  00243A  6E2A               	movwf	?_inputHandler,c
 15844                           
 15845                           ;UI.c: 462: }
 15846  00243C  0012               	return	
 15847  00243E                     i2l5975:
 15848  00243E  507D               	movf	_input,w,c	;volatile
 15849                           
 15850                           ; Switch size 1, requested type "space"
 15851                           ; Number of cases is 7, Range of values is 49 to 68
 15852                           ; switch strategies available:
 15853                           ; Name         Instructions Cycles
 15854                           ; simple_byte           22    12 (average)
 15855                           ;	Chosen strategy is simple_byte
 15856  002440  0A31               	xorlw	49	; case 49
 15857  002442  B4D8               	btfsc	status,2,c
 15858  002444  D789               	goto	i2l5905
 15859  002446  0A03               	xorlw	3	; case 50
 15860  002448  B4D8               	btfsc	status,2,c
 15861  00244A  D799               	goto	i2l5919
 15862  00244C  0A01               	xorlw	1	; case 51
 15863  00244E  B4D8               	btfsc	status,2,c
 15864  002450  D7BA               	goto	i2l5939
 15865  002452  0A72               	xorlw	114	; case 65
 15866  002454  B4D8               	btfsc	status,2,c
 15867  002456  D7CA               	goto	i2l5953
 15868  002458  0A03               	xorlw	3	; case 66
 15869  00245A  B4D8               	btfsc	status,2,c
 15870  00245C  D7D0               	goto	i2l5957
 15871  00245E  0A01               	xorlw	1	; case 67
 15872  002460  B4D8               	btfsc	status,2,c
 15873  002462  D7D6               	goto	i2l5961
 15874  002464  0A07               	xorlw	7	; case 68
 15875  002466  B4D8               	btfsc	status,2,c
 15876  002468  D7DC               	goto	i2l5965
 15877  00246A  D7E4               	goto	i2l5969
 15878  00246C                     __end_of_inputHandler:
 15879                           	opt stack 0
 15880                           pclatu	equ	0xFFB
 15881                           pclath	equ	0xFFA
 15882                           tblptru	equ	0xFF8
 15883                           tblptrh	equ	0xFF7
 15884                           tblptrl	equ	0xFF6
 15885                           tablat	equ	0xFF5
 15886                           prodh	equ	0xFF4
 15887                           prodl	equ	0xFF3
 15888                           intcon	equ	0xFF2
 15889                           intcon2	equ	0xFF1
 15890                           intcon3	equ	0xFF0
 15891                           indf0	equ	0xFEF
 15892                           postinc0	equ	0xFEE
 15893                           fsr0h	equ	0xFEA
 15894                           fsr0l	equ	0xFE9
 15895                           wreg	equ	0xFE8
 15896                           postdec1	equ	0xFE5
 15897                           fsr1h	equ	0xFE2
 15898                           fsr1l	equ	0xFE1
 15899                           indf2	equ	0xFDF
 15900                           postinc2	equ	0xFDE
 15901                           postdec2	equ	0xFDD
 15902                           fsr2h	equ	0xFDA
 15903                           fsr2l	equ	0xFD9
 15904                           status	equ	0xFD8
 15905                           
 15906 ;; *************** function i2_change_state_to_menu_22 *****************
 15907 ;; Defined at:
 15908 ;;		line 496 in file "UI.c"
 15909 ;; Parameters:    Size  Location     Type
 15910 ;;		None
 15911 ;; Auto vars:     Size  Location     Type
 15912 ;;		None
 15913 ;; Return value:  Size  Location     Type
 15914 ;;                  1    wreg      void 
 15915 ;; Registers used:
 15916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15917 ;; Tracked objects:
 15918 ;;		On entry : 0/0
 15919 ;;		On exit  : 0/0
 15920 ;;		Unchanged: 0/0
 15921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;Total ram usage:        0 bytes
 15927 ;; Hardware stack levels used:    1
 15928 ;; Hardware stack levels required when called:    3
 15929 ;; This function calls:
 15930 ;;		i2_lcdInst
 15931 ;;		i2_printf
 15932 ;; This function is called by:
 15933 ;;		_updateMenu
 15934 ;;		_inputHandler
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           	psect	text59
 15939  003BFE                     __ptext59:
 15940                           	opt stack 0
 15941  003BFE                     i2_change_state_to_menu_22:
 15942                           	opt stack 19
 15943                           
 15944                           ;UI.c: 497: cur_state = 22;
 15945                           
 15946                           ;incstack = 0
 15947  003BFE  0E00               	movlw	0
 15948  003C00  0100               	movlb	0	; () banked
 15949  003C02  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15950  003C04  0E16               	movlw	22
 15951  003C06  6FDE               	movwf	_cur_state& (0+255),b
 15952                           
 15953                           ; BSR set to: 0
 15954                           ;UI.c: 499: lcdInst(0b10000000);;
 15955  003C08  0E80               	movlw	128
 15956  003C0A  EC20  F020         	call	i2_lcdInst
 15957                           
 15958                           ;UI.c: 500: printf("2. SORT        <");
 15959  003C0E  0E03               	movlw	low STR_34
 15960  003C10  6E0D               	movwf	i2printf@f,c
 15961  003C12  0EFE               	movlw	high STR_34
 15962  003C14  6E0E               	movwf	i2printf@f+1,c
 15963  003C16  ECB3  F00A         	call	i2_printf	;wreg free
 15964                           
 15965                           ;UI.c: 501: lcdInst(0b11000000);;
 15966  003C1A  0EC0               	movlw	192
 15967  003C1C  EC20  F020         	call	i2_lcdInst
 15968                           
 15969                           ;UI.c: 502: printf("3. LOGS         ");
 15970  003C20  0E48               	movlw	low STR_36
 15971  003C22  6E0D               	movwf	i2printf@f,c
 15972  003C24  0EFD               	movlw	high STR_36
 15973  003C26  6E0E               	movwf	i2printf@f+1,c
 15974  003C28  ECB3  F00A         	call	i2_printf	;wreg free
 15975  003C2C  0012               	return		;funcret
 15976  003C2E                     __end_ofi2_change_state_to_menu_22:
 15977                           	opt stack 0
 15978                           pclatu	equ	0xFFB
 15979                           pclath	equ	0xFFA
 15980                           tblptru	equ	0xFF8
 15981                           tblptrh	equ	0xFF7
 15982                           tblptrl	equ	0xFF6
 15983                           tablat	equ	0xFF5
 15984                           prodh	equ	0xFF4
 15985                           prodl	equ	0xFF3
 15986                           intcon	equ	0xFF2
 15987                           intcon2	equ	0xFF1
 15988                           intcon3	equ	0xFF0
 15989                           indf0	equ	0xFEF
 15990                           postinc0	equ	0xFEE
 15991                           fsr0h	equ	0xFEA
 15992                           fsr0l	equ	0xFE9
 15993                           wreg	equ	0xFE8
 15994                           postdec1	equ	0xFE5
 15995                           fsr1h	equ	0xFE2
 15996                           fsr1l	equ	0xFE1
 15997                           indf2	equ	0xFDF
 15998                           postinc2	equ	0xFDE
 15999                           postdec2	equ	0xFDD
 16000                           fsr2h	equ	0xFDA
 16001                           fsr2l	equ	0xFD9
 16002                           status	equ	0xFD8
 16003                           
 16004 ;; *************** function i2_change_state_to_menu_12 *****************
 16005 ;; Defined at:
 16006 ;;		line 488 in file "UI.c"
 16007 ;; Parameters:    Size  Location     Type
 16008 ;;		None
 16009 ;; Auto vars:     Size  Location     Type
 16010 ;;		None
 16011 ;; Return value:  Size  Location     Type
 16012 ;;                  1    wreg      void 
 16013 ;; Registers used:
 16014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16015 ;; Tracked objects:
 16016 ;;		On entry : 0/0
 16017 ;;		On exit  : 0/0
 16018 ;;		Unchanged: 0/0
 16019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16024 ;;Total ram usage:        0 bytes
 16025 ;; Hardware stack levels used:    1
 16026 ;; Hardware stack levels required when called:    3
 16027 ;; This function calls:
 16028 ;;		i2_lcdInst
 16029 ;;		i2_printf
 16030 ;; This function is called by:
 16031 ;;		_updateMenu
 16032 ;;		_inputHandler
 16033 ;; This function uses a non-reentrant model
 16034 ;;
 16035                           
 16036                           	psect	text60
 16037  003C2E                     __ptext60:
 16038                           	opt stack 0
 16039  003C2E                     i2_change_state_to_menu_12:
 16040                           	opt stack 19
 16041                           
 16042                           ;UI.c: 489: cur_state = 12;
 16043                           
 16044                           ;incstack = 0
 16045  003C2E  0E00               	movlw	0
 16046  003C30  0100               	movlb	0	; () banked
 16047  003C32  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16048  003C34  0E0C               	movlw	12
 16049  003C36  6FDE               	movwf	_cur_state& (0+255),b
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;UI.c: 491: lcdInst(0b10000000);;
 16053  003C38  0E80               	movlw	128
 16054  003C3A  EC20  F020         	call	i2_lcdInst
 16055                           
 16056                           ;UI.c: 492: printf("1. DATE/TIME    ");
 16057  003C3E  0E6A               	movlw	low STR_33
 16058  003C40  6E0D               	movwf	i2printf@f,c
 16059  003C42  0EFD               	movlw	high STR_33
 16060  003C44  6E0E               	movwf	i2printf@f+1,c
 16061  003C46  ECB3  F00A         	call	i2_printf	;wreg free
 16062                           
 16063                           ;UI.c: 493: lcdInst(0b11000000);;
 16064  003C4A  0EC0               	movlw	192
 16065  003C4C  EC20  F020         	call	i2_lcdInst
 16066                           
 16067                           ;UI.c: 494: printf("2. SORT        <");
 16068  003C50  0E03               	movlw	low STR_34
 16069  003C52  6E0D               	movwf	i2printf@f,c
 16070  003C54  0EFE               	movlw	high STR_34
 16071  003C56  6E0E               	movwf	i2printf@f+1,c
 16072  003C58  ECB3  F00A         	call	i2_printf	;wreg free
 16073  003C5C  0012               	return		;funcret
 16074  003C5E                     __end_ofi2_change_state_to_menu_12:
 16075                           	opt stack 0
 16076                           pclatu	equ	0xFFB
 16077                           pclath	equ	0xFFA
 16078                           tblptru	equ	0xFF8
 16079                           tblptrh	equ	0xFF7
 16080                           tblptrl	equ	0xFF6
 16081                           tablat	equ	0xFF5
 16082                           prodh	equ	0xFF4
 16083                           prodl	equ	0xFF3
 16084                           intcon	equ	0xFF2
 16085                           intcon2	equ	0xFF1
 16086                           intcon3	equ	0xFF0
 16087                           indf0	equ	0xFEF
 16088                           postinc0	equ	0xFEE
 16089                           fsr0h	equ	0xFEA
 16090                           fsr0l	equ	0xFE9
 16091                           wreg	equ	0xFE8
 16092                           postdec1	equ	0xFE5
 16093                           fsr1h	equ	0xFE2
 16094                           fsr1l	equ	0xFE1
 16095                           indf2	equ	0xFDF
 16096                           postinc2	equ	0xFDE
 16097                           postdec2	equ	0xFDD
 16098                           fsr2h	equ	0xFDA
 16099                           fsr2l	equ	0xFD9
 16100                           status	equ	0xFD8
 16101                           
 16102 ;; *************** function _change_state_to_menu_23 *****************
 16103 ;; Defined at:
 16104 ;;		line 504 in file "UI.c"
 16105 ;; Parameters:    Size  Location     Type
 16106 ;;		None
 16107 ;; Auto vars:     Size  Location     Type
 16108 ;;		None
 16109 ;; Return value:  Size  Location     Type
 16110 ;;                  1    wreg      void 
 16111 ;; Registers used:
 16112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16113 ;; Tracked objects:
 16114 ;;		On entry : 0/0
 16115 ;;		On exit  : 0/0
 16116 ;;		Unchanged: 0/0
 16117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16122 ;;Total ram usage:        0 bytes
 16123 ;; Hardware stack levels used:    1
 16124 ;; Hardware stack levels required when called:    3
 16125 ;; This function calls:
 16126 ;;		i2_lcdInst
 16127 ;;		i2_printf
 16128 ;; This function is called by:
 16129 ;;		_updateMenu
 16130 ;;		_inputHandler
 16131 ;; This function uses a non-reentrant model
 16132 ;;
 16133                           
 16134                           	psect	text61
 16135  003C5E                     __ptext61:
 16136                           	opt stack 0
 16137  003C5E                     _change_state_to_menu_23:
 16138                           	opt stack 18
 16139                           
 16140                           ;UI.c: 505: cur_state = 23;
 16141                           
 16142                           ;incstack = 0
 16143  003C5E  0E00               	movlw	0
 16144  003C60  0100               	movlb	0	; () banked
 16145  003C62  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16146  003C64  0E17               	movlw	23
 16147  003C66  6FDE               	movwf	_cur_state& (0+255),b
 16148                           
 16149                           ; BSR set to: 0
 16150                           ;UI.c: 507: lcdInst(0b10000000);;
 16151  003C68  0E80               	movlw	128
 16152  003C6A  EC20  F020         	call	i2_lcdInst
 16153                           
 16154                           ;UI.c: 508: printf("2. SORT         ");
 16155  003C6E  0E59               	movlw	low STR_32
 16156  003C70  6E0D               	movwf	i2printf@f,c
 16157  003C72  0EFD               	movlw	high STR_32
 16158  003C74  6E0E               	movwf	i2printf@f+1,c
 16159  003C76  ECB3  F00A         	call	i2_printf	;wreg free
 16160                           
 16161                           ;UI.c: 509: lcdInst(0b11000000);;
 16162  003C7A  0EC0               	movlw	192
 16163  003C7C  EC20  F020         	call	i2_lcdInst
 16164                           
 16165                           ;UI.c: 510: printf("3. LOGS        <");
 16166  003C80  0EF2               	movlw	low STR_38
 16167  003C82  6E0D               	movwf	i2printf@f,c
 16168  003C84  0EFD               	movlw	high STR_38
 16169  003C86  6E0E               	movwf	i2printf@f+1,c
 16170  003C88  ECB3  F00A         	call	i2_printf	;wreg free
 16171  003C8C  0012               	return		;funcret
 16172  003C8E                     __end_of_change_state_to_menu_23:
 16173                           	opt stack 0
 16174                           pclatu	equ	0xFFB
 16175                           pclath	equ	0xFFA
 16176                           tblptru	equ	0xFF8
 16177                           tblptrh	equ	0xFF7
 16178                           tblptrl	equ	0xFF6
 16179                           tablat	equ	0xFF5
 16180                           prodh	equ	0xFF4
 16181                           prodl	equ	0xFF3
 16182                           intcon	equ	0xFF2
 16183                           intcon2	equ	0xFF1
 16184                           intcon3	equ	0xFF0
 16185                           indf0	equ	0xFEF
 16186                           postinc0	equ	0xFEE
 16187                           fsr0h	equ	0xFEA
 16188                           fsr0l	equ	0xFE9
 16189                           wreg	equ	0xFE8
 16190                           postdec1	equ	0xFE5
 16191                           fsr1h	equ	0xFE2
 16192                           fsr1l	equ	0xFE1
 16193                           indf2	equ	0xFDF
 16194                           postinc2	equ	0xFDE
 16195                           postdec2	equ	0xFDD
 16196                           fsr2h	equ	0xFDA
 16197                           fsr2l	equ	0xFD9
 16198                           status	equ	0xFD8
 16199                           
 16200 ;; *************** function _change_state_to_menu_11 *****************
 16201 ;; Defined at:
 16202 ;;		line 480 in file "UI.c"
 16203 ;; Parameters:    Size  Location     Type
 16204 ;;		None
 16205 ;; Auto vars:     Size  Location     Type
 16206 ;;		None
 16207 ;; Return value:  Size  Location     Type
 16208 ;;                  1    wreg      void 
 16209 ;; Registers used:
 16210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16211 ;; Tracked objects:
 16212 ;;		On entry : 0/0
 16213 ;;		On exit  : 0/0
 16214 ;;		Unchanged: 0/0
 16215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;Total ram usage:        0 bytes
 16221 ;; Hardware stack levels used:    1
 16222 ;; Hardware stack levels required when called:    3
 16223 ;; This function calls:
 16224 ;;		i2_lcdInst
 16225 ;;		i2_printf
 16226 ;; This function is called by:
 16227 ;;		_updateMenu
 16228 ;;		_inputHandler
 16229 ;; This function uses a non-reentrant model
 16230 ;;
 16231                           
 16232                           	psect	text62
 16233  003C8E                     __ptext62:
 16234                           	opt stack 0
 16235  003C8E                     _change_state_to_menu_11:
 16236                           	opt stack 18
 16237                           
 16238                           ;UI.c: 481: cur_state = 11;
 16239                           
 16240                           ;incstack = 0
 16241  003C8E  0E00               	movlw	0
 16242  003C90  0100               	movlb	0	; () banked
 16243  003C92  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16244  003C94  0E0B               	movlw	11
 16245  003C96  6FDE               	movwf	_cur_state& (0+255),b
 16246                           
 16247                           ; BSR set to: 0
 16248                           ;UI.c: 483: lcdInst(0b10000000);;
 16249  003C98  0E80               	movlw	128
 16250  003C9A  EC20  F020         	call	i2_lcdInst
 16251                           
 16252                           ;UI.c: 484: printf("1. DATE/TIME   <");
 16253  003C9E  0E14               	movlw	low STR_31
 16254  003CA0  6E0D               	movwf	i2printf@f,c
 16255  003CA2  0EFE               	movlw	high STR_31
 16256  003CA4  6E0E               	movwf	i2printf@f+1,c
 16257  003CA6  ECB3  F00A         	call	i2_printf	;wreg free
 16258                           
 16259                           ;UI.c: 485: lcdInst(0b11000000);;
 16260  003CAA  0EC0               	movlw	192
 16261  003CAC  EC20  F020         	call	i2_lcdInst
 16262                           
 16263                           ;UI.c: 486: printf("2. SORT         ");
 16264  003CB0  0E59               	movlw	low STR_32
 16265  003CB2  6E0D               	movwf	i2printf@f,c
 16266  003CB4  0EFD               	movlw	high STR_32
 16267  003CB6  6E0E               	movwf	i2printf@f+1,c
 16268  003CB8  ECB3  F00A         	call	i2_printf	;wreg free
 16269  003CBC  0012               	return		;funcret
 16270  003CBE                     __end_of_change_state_to_menu_11:
 16271                           	opt stack 0
 16272                           pclatu	equ	0xFFB
 16273                           pclath	equ	0xFFA
 16274                           tblptru	equ	0xFF8
 16275                           tblptrh	equ	0xFF7
 16276                           tblptrl	equ	0xFF6
 16277                           tablat	equ	0xFF5
 16278                           prodh	equ	0xFF4
 16279                           prodl	equ	0xFF3
 16280                           intcon	equ	0xFF2
 16281                           intcon2	equ	0xFF1
 16282                           intcon3	equ	0xFF0
 16283                           indf0	equ	0xFEF
 16284                           postinc0	equ	0xFEE
 16285                           fsr0h	equ	0xFEA
 16286                           fsr0l	equ	0xFE9
 16287                           wreg	equ	0xFE8
 16288                           postdec1	equ	0xFE5
 16289                           fsr1h	equ	0xFE2
 16290                           fsr1l	equ	0xFE1
 16291                           indf2	equ	0xFDF
 16292                           postinc2	equ	0xFDE
 16293                           postdec2	equ	0xFDD
 16294                           fsr2h	equ	0xFDA
 16295                           fsr2l	equ	0xFD9
 16296                           status	equ	0xFD8
 16297                           
 16298 ;; *************** function _change_state_to_logs_34 *****************
 16299 ;; Defined at:
 16300 ;;		line 547 in file "UI.c"
 16301 ;; Parameters:    Size  Location     Type
 16302 ;;		None
 16303 ;; Auto vars:     Size  Location     Type
 16304 ;;		None
 16305 ;; Return value:  Size  Location     Type
 16306 ;;                  1    wreg      void 
 16307 ;; Registers used:
 16308 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16309 ;; Tracked objects:
 16310 ;;		On entry : 0/0
 16311 ;;		On exit  : 0/0
 16312 ;;		Unchanged: 0/0
 16313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16318 ;;Total ram usage:        0 bytes
 16319 ;; Hardware stack levels used:    1
 16320 ;; Hardware stack levels required when called:    3
 16321 ;; This function calls:
 16322 ;;		i2_lcdInst
 16323 ;;		i2_printf
 16324 ;; This function is called by:
 16325 ;;		_updateMenu
 16326 ;;		_inputHandler
 16327 ;; This function uses a non-reentrant model
 16328 ;;
 16329                           
 16330                           	psect	text63
 16331  003CBE                     __ptext63:
 16332                           	opt stack 0
 16333  003CBE                     _change_state_to_logs_34:
 16334                           	opt stack 18
 16335                           
 16336                           ;UI.c: 548: cur_state = 1034;
 16337                           
 16338                           ;incstack = 0
 16339  003CBE  0E04               	movlw	4
 16340  003CC0  0100               	movlb	0	; () banked
 16341  003CC2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16342  003CC4  0E0A               	movlw	10
 16343  003CC6  6FDE               	movwf	_cur_state& (0+255),b
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;UI.c: 549: lcdInst(0b10000000);;
 16347  003CC8  0E80               	movlw	128
 16348  003CCA  EC20  F020         	call	i2_lcdInst
 16349                           
 16350                           ;UI.c: 550: printf("LOG 3           ");
 16351  003CCE  0E26               	movlw	low STR_44
 16352  003CD0  6E0D               	movwf	i2printf@f,c
 16353  003CD2  0EFD               	movlw	high STR_44
 16354  003CD4  6E0E               	movwf	i2printf@f+1,c
 16355  003CD6  ECB3  F00A         	call	i2_printf	;wreg free
 16356                           
 16357                           ;UI.c: 551: lcdInst(0b11000000);;
 16358  003CDA  0EC0               	movlw	192
 16359  003CDC  EC20  F020         	call	i2_lcdInst
 16360                           
 16361                           ;UI.c: 552: printf("LOG 4          <");
 16362  003CE0  0EE1               	movlw	low STR_50
 16363  003CE2  6E0D               	movwf	i2printf@f,c
 16364  003CE4  0EFD               	movlw	high STR_50
 16365  003CE6  6E0E               	movwf	i2printf@f+1,c
 16366  003CE8  ECB3  F00A         	call	i2_printf	;wreg free
 16367  003CEC  0012               	return		;funcret
 16368  003CEE                     __end_of_change_state_to_logs_34:
 16369                           	opt stack 0
 16370                           pclatu	equ	0xFFB
 16371                           pclath	equ	0xFFA
 16372                           tblptru	equ	0xFF8
 16373                           tblptrh	equ	0xFF7
 16374                           tblptrl	equ	0xFF6
 16375                           tablat	equ	0xFF5
 16376                           prodh	equ	0xFF4
 16377                           prodl	equ	0xFF3
 16378                           intcon	equ	0xFF2
 16379                           intcon2	equ	0xFF1
 16380                           intcon3	equ	0xFF0
 16381                           indf0	equ	0xFEF
 16382                           postinc0	equ	0xFEE
 16383                           fsr0h	equ	0xFEA
 16384                           fsr0l	equ	0xFE9
 16385                           wreg	equ	0xFE8
 16386                           postdec1	equ	0xFE5
 16387                           fsr1h	equ	0xFE2
 16388                           fsr1l	equ	0xFE1
 16389                           indf2	equ	0xFDF
 16390                           postinc2	equ	0xFDE
 16391                           postdec2	equ	0xFDD
 16392                           fsr2h	equ	0xFDA
 16393                           fsr2l	equ	0xFD9
 16394                           status	equ	0xFD8
 16395                           
 16396 ;; *************** function _change_state_to_logs_33 *****************
 16397 ;; Defined at:
 16398 ;;		line 540 in file "UI.c"
 16399 ;; Parameters:    Size  Location     Type
 16400 ;;		None
 16401 ;; Auto vars:     Size  Location     Type
 16402 ;;		None
 16403 ;; Return value:  Size  Location     Type
 16404 ;;                  1    wreg      void 
 16405 ;; Registers used:
 16406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16407 ;; Tracked objects:
 16408 ;;		On entry : 0/0
 16409 ;;		On exit  : 0/0
 16410 ;;		Unchanged: 0/0
 16411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;Total ram usage:        0 bytes
 16417 ;; Hardware stack levels used:    1
 16418 ;; Hardware stack levels required when called:    3
 16419 ;; This function calls:
 16420 ;;		i2_lcdInst
 16421 ;;		i2_printf
 16422 ;; This function is called by:
 16423 ;;		_updateMenu
 16424 ;;		_inputHandler
 16425 ;; This function uses a non-reentrant model
 16426 ;;
 16427                           
 16428                           	psect	text64
 16429  003CEE                     __ptext64:
 16430                           	opt stack 0
 16431  003CEE                     _change_state_to_logs_33:
 16432                           	opt stack 18
 16433                           
 16434                           ;UI.c: 541: cur_state = 1033;
 16435                           
 16436                           ;incstack = 0
 16437  003CEE  0E04               	movlw	4
 16438  003CF0  0100               	movlb	0	; () banked
 16439  003CF2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16440  003CF4  0E09               	movlw	9
 16441  003CF6  6FDE               	movwf	_cur_state& (0+255),b
 16442                           
 16443                           ; BSR set to: 0
 16444                           ;UI.c: 542: lcdInst(0b10000000);;
 16445  003CF8  0E80               	movlw	128
 16446  003CFA  EC20  F020         	call	i2_lcdInst
 16447                           
 16448                           ;UI.c: 543: printf("LOG 3          <");
 16449  003CFE  0ED0               	movlw	low STR_46
 16450  003D00  6E0D               	movwf	i2printf@f,c
 16451  003D02  0EFD               	movlw	high STR_46
 16452  003D04  6E0E               	movwf	i2printf@f+1,c
 16453  003D06  ECB3  F00A         	call	i2_printf	;wreg free
 16454                           
 16455                           ;UI.c: 544: lcdInst(0b11000000);;
 16456  003D0A  0EC0               	movlw	192
 16457  003D0C  EC20  F020         	call	i2_lcdInst
 16458                           
 16459                           ;UI.c: 545: printf("LOG 4           ");
 16460  003D10  0E37               	movlw	low STR_48
 16461  003D12  6E0D               	movwf	i2printf@f,c
 16462  003D14  0EFD               	movlw	high STR_48
 16463  003D16  6E0E               	movwf	i2printf@f+1,c
 16464  003D18  ECB3  F00A         	call	i2_printf	;wreg free
 16465  003D1C  0012               	return		;funcret
 16466  003D1E                     __end_of_change_state_to_logs_33:
 16467                           	opt stack 0
 16468                           pclatu	equ	0xFFB
 16469                           pclath	equ	0xFFA
 16470                           tblptru	equ	0xFF8
 16471                           tblptrh	equ	0xFF7
 16472                           tblptrl	equ	0xFF6
 16473                           tablat	equ	0xFF5
 16474                           prodh	equ	0xFF4
 16475                           prodl	equ	0xFF3
 16476                           intcon	equ	0xFF2
 16477                           intcon2	equ	0xFF1
 16478                           intcon3	equ	0xFF0
 16479                           indf0	equ	0xFEF
 16480                           postinc0	equ	0xFEE
 16481                           fsr0h	equ	0xFEA
 16482                           fsr0l	equ	0xFE9
 16483                           wreg	equ	0xFE8
 16484                           postdec1	equ	0xFE5
 16485                           fsr1h	equ	0xFE2
 16486                           fsr1l	equ	0xFE1
 16487                           indf2	equ	0xFDF
 16488                           postinc2	equ	0xFDE
 16489                           postdec2	equ	0xFDD
 16490                           fsr2h	equ	0xFDA
 16491                           fsr2l	equ	0xFD9
 16492                           status	equ	0xFD8
 16493                           
 16494 ;; *************** function _change_state_to_logs_23 *****************
 16495 ;; Defined at:
 16496 ;;		line 533 in file "UI.c"
 16497 ;; Parameters:    Size  Location     Type
 16498 ;;		None
 16499 ;; Auto vars:     Size  Location     Type
 16500 ;;		None
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  1    wreg      void 
 16503 ;; Registers used:
 16504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;Total ram usage:        0 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; Hardware stack levels required when called:    3
 16517 ;; This function calls:
 16518 ;;		i2_lcdInst
 16519 ;;		i2_printf
 16520 ;; This function is called by:
 16521 ;;		_updateMenu
 16522 ;;		_inputHandler
 16523 ;; This function uses a non-reentrant model
 16524 ;;
 16525                           
 16526                           	psect	text65
 16527  003DDC                     __ptext65:
 16528                           	opt stack 0
 16529  003DDC                     _change_state_to_logs_23:
 16530                           	opt stack 18
 16531                           
 16532                           ;UI.c: 534: cur_state = 1023;
 16533                           
 16534                           ;incstack = 0
 16535  003DDC  0E03               	movlw	3
 16536  003DDE  0100               	movlb	0	; () banked
 16537  003DE0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16538  003DE2  69DE               	setf	_cur_state& (0+255),b
 16539                           
 16540                           ; BSR set to: 0
 16541                           ;UI.c: 535: lcdInst(0b10000000);;
 16542  003DE4  0E80               	movlw	128
 16543  003DE6  EC20  F020         	call	i2_lcdInst
 16544                           
 16545                           ;UI.c: 536: printf("LOG 2           ");
 16546  003DEA  0E15               	movlw	low STR_40
 16547  003DEC  6E0D               	movwf	i2printf@f,c
 16548  003DEE  0EFD               	movlw	high STR_40
 16549  003DF0  6E0E               	movwf	i2printf@f+1,c
 16550  003DF2  ECB3  F00A         	call	i2_printf	;wreg free
 16551                           
 16552                           ;UI.c: 537: lcdInst(0b11000000);;
 16553  003DF6  0EC0               	movlw	192
 16554  003DF8  EC20  F020         	call	i2_lcdInst
 16555                           
 16556                           ;UI.c: 538: printf("LOG 3          <");
 16557  003DFC  0ED0               	movlw	low STR_46
 16558  003DFE  6E0D               	movwf	i2printf@f,c
 16559  003E00  0EFD               	movlw	high STR_46
 16560  003E02  6E0E               	movwf	i2printf@f+1,c
 16561  003E04  ECB3  F00A         	call	i2_printf	;wreg free
 16562  003E08  0012               	return		;funcret
 16563  003E0A                     __end_of_change_state_to_logs_23:
 16564                           	opt stack 0
 16565                           pclatu	equ	0xFFB
 16566                           pclath	equ	0xFFA
 16567                           tblptru	equ	0xFF8
 16568                           tblptrh	equ	0xFF7
 16569                           tblptrl	equ	0xFF6
 16570                           tablat	equ	0xFF5
 16571                           prodh	equ	0xFF4
 16572                           prodl	equ	0xFF3
 16573                           intcon	equ	0xFF2
 16574                           intcon2	equ	0xFF1
 16575                           intcon3	equ	0xFF0
 16576                           indf0	equ	0xFEF
 16577                           postinc0	equ	0xFEE
 16578                           fsr0h	equ	0xFEA
 16579                           fsr0l	equ	0xFE9
 16580                           wreg	equ	0xFE8
 16581                           postdec1	equ	0xFE5
 16582                           fsr1h	equ	0xFE2
 16583                           fsr1l	equ	0xFE1
 16584                           indf2	equ	0xFDF
 16585                           postinc2	equ	0xFDE
 16586                           postdec2	equ	0xFDD
 16587                           fsr2h	equ	0xFDA
 16588                           fsr2l	equ	0xFD9
 16589                           status	equ	0xFD8
 16590                           
 16591 ;; *************** function _change_state_to_logs_22 *****************
 16592 ;; Defined at:
 16593 ;;		line 526 in file "UI.c"
 16594 ;; Parameters:    Size  Location     Type
 16595 ;;		None
 16596 ;; Auto vars:     Size  Location     Type
 16597 ;;		None
 16598 ;; Return value:  Size  Location     Type
 16599 ;;                  1    wreg      void 
 16600 ;; Registers used:
 16601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16602 ;; Tracked objects:
 16603 ;;		On entry : 0/0
 16604 ;;		On exit  : 0/0
 16605 ;;		Unchanged: 0/0
 16606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16611 ;;Total ram usage:        0 bytes
 16612 ;; Hardware stack levels used:    1
 16613 ;; Hardware stack levels required when called:    3
 16614 ;; This function calls:
 16615 ;;		i2_lcdInst
 16616 ;;		i2_printf
 16617 ;; This function is called by:
 16618 ;;		_updateMenu
 16619 ;;		_inputHandler
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           	psect	text66
 16624  003D1E                     __ptext66:
 16625                           	opt stack 0
 16626  003D1E                     _change_state_to_logs_22:
 16627                           	opt stack 18
 16628                           
 16629                           ;UI.c: 527: cur_state = 1022;
 16630                           
 16631                           ;incstack = 0
 16632  003D1E  0E03               	movlw	3
 16633  003D20  0100               	movlb	0	; () banked
 16634  003D22  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16635  003D24  0EFE               	movlw	254
 16636  003D26  6FDE               	movwf	_cur_state& (0+255),b
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;UI.c: 528: lcdInst(0b10000000);;
 16640  003D28  0E80               	movlw	128
 16641  003D2A  EC20  F020         	call	i2_lcdInst
 16642                           
 16643                           ;UI.c: 529: printf("LOG 2          <");
 16644  003D2E  0EBF               	movlw	low STR_42
 16645  003D30  6E0D               	movwf	i2printf@f,c
 16646  003D32  0EFD               	movlw	high STR_42
 16647  003D34  6E0E               	movwf	i2printf@f+1,c
 16648  003D36  ECB3  F00A         	call	i2_printf	;wreg free
 16649                           
 16650                           ;UI.c: 530: lcdInst(0b11000000);;
 16651  003D3A  0EC0               	movlw	192
 16652  003D3C  EC20  F020         	call	i2_lcdInst
 16653                           
 16654                           ;UI.c: 531: printf("LOG 3           ");
 16655  003D40  0E26               	movlw	low STR_44
 16656  003D42  6E0D               	movwf	i2printf@f,c
 16657  003D44  0EFD               	movlw	high STR_44
 16658  003D46  6E0E               	movwf	i2printf@f+1,c
 16659  003D48  ECB3  F00A         	call	i2_printf	;wreg free
 16660  003D4C  0012               	return		;funcret
 16661  003D4E                     __end_of_change_state_to_logs_22:
 16662                           	opt stack 0
 16663                           pclatu	equ	0xFFB
 16664                           pclath	equ	0xFFA
 16665                           tblptru	equ	0xFF8
 16666                           tblptrh	equ	0xFF7
 16667                           tblptrl	equ	0xFF6
 16668                           tablat	equ	0xFF5
 16669                           prodh	equ	0xFF4
 16670                           prodl	equ	0xFF3
 16671                           intcon	equ	0xFF2
 16672                           intcon2	equ	0xFF1
 16673                           intcon3	equ	0xFF0
 16674                           indf0	equ	0xFEF
 16675                           postinc0	equ	0xFEE
 16676                           fsr0h	equ	0xFEA
 16677                           fsr0l	equ	0xFE9
 16678                           wreg	equ	0xFE8
 16679                           postdec1	equ	0xFE5
 16680                           fsr1h	equ	0xFE2
 16681                           fsr1l	equ	0xFE1
 16682                           indf2	equ	0xFDF
 16683                           postinc2	equ	0xFDE
 16684                           postdec2	equ	0xFDD
 16685                           fsr2h	equ	0xFDA
 16686                           fsr2l	equ	0xFD9
 16687                           status	equ	0xFD8
 16688                           
 16689 ;; *************** function _change_state_to_logs_12 *****************
 16690 ;; Defined at:
 16691 ;;		line 519 in file "UI.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;		None
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;		None
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  1    wreg      void 
 16698 ;; Registers used:
 16699 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16709 ;;Total ram usage:        0 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    3
 16712 ;; This function calls:
 16713 ;;		i2_lcdInst
 16714 ;;		i2_printf
 16715 ;; This function is called by:
 16716 ;;		_updateMenu
 16717 ;;		_inputHandler
 16718 ;; This function uses a non-reentrant model
 16719 ;;
 16720                           
 16721                           	psect	text67
 16722  003D4E                     __ptext67:
 16723                           	opt stack 0
 16724  003D4E                     _change_state_to_logs_12:
 16725                           	opt stack 18
 16726                           
 16727                           ;UI.c: 520: cur_state = 1012;
 16728                           
 16729                           ;incstack = 0
 16730  003D4E  0E03               	movlw	3
 16731  003D50  0100               	movlb	0	; () banked
 16732  003D52  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16733  003D54  0EF4               	movlw	244
 16734  003D56  6FDE               	movwf	_cur_state& (0+255),b
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;UI.c: 521: lcdInst(0b10000000);;
 16738  003D58  0E80               	movlw	128
 16739  003D5A  EC20  F020         	call	i2_lcdInst
 16740                           
 16741                           ;UI.c: 522: printf("LOG 1           ");
 16742  003D5E  0E04               	movlw	low STR_41
 16743  003D60  6E0D               	movwf	i2printf@f,c
 16744  003D62  0EFD               	movlw	high STR_41
 16745  003D64  6E0E               	movwf	i2printf@f+1,c
 16746  003D66  ECB3  F00A         	call	i2_printf	;wreg free
 16747                           
 16748                           ;UI.c: 523: lcdInst(0b11000000);;
 16749  003D6A  0EC0               	movlw	192
 16750  003D6C  EC20  F020         	call	i2_lcdInst
 16751                           
 16752                           ;UI.c: 524: printf("LOG 2          <");
 16753  003D70  0EBF               	movlw	low STR_42
 16754  003D72  6E0D               	movwf	i2printf@f,c
 16755  003D74  0EFD               	movlw	high STR_42
 16756  003D76  6E0E               	movwf	i2printf@f+1,c
 16757  003D78  ECB3  F00A         	call	i2_printf	;wreg free
 16758  003D7C  0012               	return		;funcret
 16759  003D7E                     __end_of_change_state_to_logs_12:
 16760                           	opt stack 0
 16761                           pclatu	equ	0xFFB
 16762                           pclath	equ	0xFFA
 16763                           tblptru	equ	0xFF8
 16764                           tblptrh	equ	0xFF7
 16765                           tblptrl	equ	0xFF6
 16766                           tablat	equ	0xFF5
 16767                           prodh	equ	0xFF4
 16768                           prodl	equ	0xFF3
 16769                           intcon	equ	0xFF2
 16770                           intcon2	equ	0xFF1
 16771                           intcon3	equ	0xFF0
 16772                           indf0	equ	0xFEF
 16773                           postinc0	equ	0xFEE
 16774                           fsr0h	equ	0xFEA
 16775                           fsr0l	equ	0xFE9
 16776                           wreg	equ	0xFE8
 16777                           postdec1	equ	0xFE5
 16778                           fsr1h	equ	0xFE2
 16779                           fsr1l	equ	0xFE1
 16780                           indf2	equ	0xFDF
 16781                           postinc2	equ	0xFDE
 16782                           postdec2	equ	0xFDD
 16783                           fsr2h	equ	0xFDA
 16784                           fsr2l	equ	0xFD9
 16785                           status	equ	0xFD8
 16786                           
 16787 ;; *************** function _change_state_to_logs_11 *****************
 16788 ;; Defined at:
 16789 ;;		line 512 in file "UI.c"
 16790 ;; Parameters:    Size  Location     Type
 16791 ;;		None
 16792 ;; Auto vars:     Size  Location     Type
 16793 ;;		None
 16794 ;; Return value:  Size  Location     Type
 16795 ;;                  1    wreg      void 
 16796 ;; Registers used:
 16797 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16798 ;; Tracked objects:
 16799 ;;		On entry : 0/0
 16800 ;;		On exit  : 0/0
 16801 ;;		Unchanged: 0/0
 16802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;Total ram usage:        0 bytes
 16808 ;; Hardware stack levels used:    1
 16809 ;; Hardware stack levels required when called:    3
 16810 ;; This function calls:
 16811 ;;		i2_lcdInst
 16812 ;;		i2_printf
 16813 ;; This function is called by:
 16814 ;;		_updateMenu
 16815 ;;		_inputHandler
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           	psect	text68
 16820  003D7E                     __ptext68:
 16821                           	opt stack 0
 16822  003D7E                     _change_state_to_logs_11:
 16823                           	opt stack 18
 16824                           
 16825                           ;UI.c: 513: cur_state = 1011;
 16826                           
 16827                           ;incstack = 0
 16828  003D7E  0E03               	movlw	3
 16829  003D80  0100               	movlb	0	; () banked
 16830  003D82  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16831  003D84  0EF3               	movlw	243
 16832  003D86  6FDE               	movwf	_cur_state& (0+255),b
 16833                           
 16834                           ; BSR set to: 0
 16835                           ;UI.c: 514: lcdInst(0b10000000);;
 16836  003D88  0E80               	movlw	128
 16837  003D8A  EC20  F020         	call	i2_lcdInst
 16838                           
 16839                           ;UI.c: 515: printf("LOG 1          <");
 16840  003D8E  0EAE               	movlw	low STR_39
 16841  003D90  6E0D               	movwf	i2printf@f,c
 16842  003D92  0EFD               	movlw	high STR_39
 16843  003D94  6E0E               	movwf	i2printf@f+1,c
 16844  003D96  ECB3  F00A         	call	i2_printf	;wreg free
 16845                           
 16846                           ;UI.c: 516: lcdInst(0b11000000);;
 16847  003D9A  0EC0               	movlw	192
 16848  003D9C  EC20  F020         	call	i2_lcdInst
 16849                           
 16850                           ;UI.c: 517: printf("LOG 2           ");
 16851  003DA0  0E15               	movlw	low STR_40
 16852  003DA2  6E0D               	movwf	i2printf@f,c
 16853  003DA4  0EFD               	movlw	high STR_40
 16854  003DA6  6E0E               	movwf	i2printf@f+1,c
 16855  003DA8  ECB3  F00A         	call	i2_printf	;wreg free
 16856  003DAC  0012               	return		;funcret
 16857  003DAE                     __end_of_change_state_to_logs_11:
 16858                           	opt stack 0
 16859                           pclatu	equ	0xFFB
 16860                           pclath	equ	0xFFA
 16861                           tblptru	equ	0xFF8
 16862                           tblptrh	equ	0xFF7
 16863                           tblptrl	equ	0xFF6
 16864                           tablat	equ	0xFF5
 16865                           prodh	equ	0xFF4
 16866                           prodl	equ	0xFF3
 16867                           intcon	equ	0xFF2
 16868                           intcon2	equ	0xFF1
 16869                           intcon3	equ	0xFF0
 16870                           indf0	equ	0xFEF
 16871                           postinc0	equ	0xFEE
 16872                           fsr0h	equ	0xFEA
 16873                           fsr0l	equ	0xFE9
 16874                           wreg	equ	0xFE8
 16875                           postdec1	equ	0xFE5
 16876                           fsr1h	equ	0xFE2
 16877                           fsr1l	equ	0xFE1
 16878                           indf2	equ	0xFDF
 16879                           postinc2	equ	0xFDE
 16880                           postdec2	equ	0xFDD
 16881                           fsr2h	equ	0xFDA
 16882                           fsr2l	equ	0xFD9
 16883                           status	equ	0xFD8
 16884                           
 16885 ;; *************** function _dispLogs *****************
 16886 ;; Defined at:
 16887 ;;		line 465 in file "UI.c"
 16888 ;; Parameters:    Size  Location     Type
 16889 ;;  myLog           2   17[COMRAM] int 
 16890 ;; Auto vars:     Size  Location     Type
 16891 ;;		None
 16892 ;; Return value:  Size  Location     Type
 16893 ;;                  1    wreg      void 
 16894 ;; Registers used:
 16895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16896 ;; Tracked objects:
 16897 ;;		On entry : 0/0
 16898 ;;		On exit  : 0/0
 16899 ;;		Unchanged: 0/0
 16900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16905 ;;Total ram usage:        2 bytes
 16906 ;; Hardware stack levels used:    1
 16907 ;; Hardware stack levels required when called:    2
 16908 ;; This function calls:
 16909 ;;		_retrieveLog
 16910 ;; This function is called by:
 16911 ;;		_updateMenu
 16912 ;; This function uses a non-reentrant model
 16913 ;;
 16914                           
 16915                           	psect	text69
 16916  003F24                     __ptext69:
 16917                           	opt stack 0
 16918  003F24                     _dispLogs:
 16919                           	opt stack 20
 16920                           
 16921                           ;UI.c: 466: logstate = 1;
 16922                           
 16923                           ;incstack = 0
 16924  003F24  0E00               	movlw	0
 16925  003F26  0100               	movlb	0	; () banked
 16926  003F28  6FF7               	movwf	(_logstate+1)& (0+255),b
 16927  003F2A  0E01               	movlw	1
 16928  003F2C  6FF6               	movwf	_logstate& (0+255),b
 16929                           
 16930                           ; BSR set to: 0
 16931                           ;UI.c: 467: log = myLog;
 16932  003F2E  C012  F0E6         	movff	dispLogs@myLog,_log
 16933  003F32  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 16934                           
 16935                           ; BSR set to: 0
 16936                           ;UI.c: 468: retrieveLog(myLog - 1);
 16937  003F36  0EFF               	movlw	255
 16938  003F38  2412               	addwf	dispLogs@myLog,w,c
 16939  003F3A  6E07               	movwf	retrieveLog@logNum,c
 16940  003F3C  0EFF               	movlw	255
 16941  003F3E  2013               	addwfc	dispLogs@myLog+1,w,c
 16942  003F40  6E08               	movwf	retrieveLog@logNum+1,c
 16943  003F42  EC7B  F015         	call	_retrieveLog	;wreg free
 16944  003F46  0012               	return		;funcret
 16945  003F48                     __end_of_dispLogs:
 16946                           	opt stack 0
 16947                           pclatu	equ	0xFFB
 16948                           pclath	equ	0xFFA
 16949                           tblptru	equ	0xFF8
 16950                           tblptrh	equ	0xFF7
 16951                           tblptrl	equ	0xFF6
 16952                           tablat	equ	0xFF5
 16953                           prodh	equ	0xFF4
 16954                           prodl	equ	0xFF3
 16955                           intcon	equ	0xFF2
 16956                           intcon2	equ	0xFF1
 16957                           intcon3	equ	0xFF0
 16958                           indf0	equ	0xFEF
 16959                           postinc0	equ	0xFEE
 16960                           fsr0h	equ	0xFEA
 16961                           fsr0l	equ	0xFE9
 16962                           wreg	equ	0xFE8
 16963                           postdec1	equ	0xFE5
 16964                           fsr1h	equ	0xFE2
 16965                           fsr1l	equ	0xFE1
 16966                           indf2	equ	0xFDF
 16967                           postinc2	equ	0xFDE
 16968                           postdec2	equ	0xFDD
 16969                           fsr2h	equ	0xFDA
 16970                           fsr2l	equ	0xFD9
 16971                           status	equ	0xFD8
 16972                           
 16973 ;; *************** function _retrieveLog *****************
 16974 ;; Defined at:
 16975 ;;		line 134 in file "EEPROM.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;  logNum          2    6[COMRAM] int 
 16978 ;; Auto vars:     Size  Location     Type
 16979 ;;  i               2   13[COMRAM] int 
 16980 ;;  addr            2   15[COMRAM] unsigned short 
 16981 ;;  byte3           1   12[COMRAM] unsigned char 
 16982 ;;  byte2           1   11[COMRAM] unsigned char 
 16983 ;;  byte1           1   10[COMRAM] unsigned char 
 16984 ;; Return value:  Size  Location     Type
 16985 ;;                  1    wreg      void 
 16986 ;; Registers used:
 16987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16988 ;; Tracked objects:
 16989 ;;		On entry : 0/0
 16990 ;;		On exit  : 0/0
 16991 ;;		Unchanged: 0/0
 16992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16993 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16994 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16996 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;Total ram usage:       11 bytes
 16998 ;; Hardware stack levels used:    1
 16999 ;; Hardware stack levels required when called:    1
 17000 ;; This function calls:
 17001 ;;		i2_EEPROM_read
 17002 ;;		i2___wmul
 17003 ;; This function is called by:
 17004 ;;		_dispLogs
 17005 ;; This function uses a non-reentrant model
 17006 ;;
 17007                           
 17008                           	psect	text70
 17009  002AF6                     __ptext70:
 17010                           	opt stack 0
 17011  002AF6                     _retrieveLog:
 17012                           	opt stack 20
 17013                           
 17014                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 17015                           
 17016                           ;incstack = 0
 17017  002AF6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 17018  002AFA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 17019  002AFE  0E00               	movlw	0
 17020  002B00  6E04               	movwf	i2___wmul@multiplicand+1,c
 17021  002B02  0E0B               	movlw	11
 17022  002B04  6E03               	movwf	i2___wmul@multiplicand,c
 17023  002B06  EC5A  F01F         	call	i2___wmul	;wreg free
 17024  002B0A  0E01               	movlw	1
 17025  002B0C  2401               	addwf	?i2___wmul,w,c
 17026  002B0E  6E10               	movwf	retrieveLog@addr,c
 17027  002B10  0E00               	movlw	0
 17028  002B12  2002               	addwfc	?i2___wmul+1,w,c
 17029  002B14  6E11               	movwf	retrieveLog@addr+1,c
 17030                           
 17031                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 17032  002B16  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17033  002B1A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17034  002B1E  ECEC  F01F         	call	i2_EEPROM_read	;wreg free
 17035  002B22  6E0B               	movwf	retrieveLog@byte1,c
 17036                           
 17037                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 17038  002B24  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17039  002B28  0E80               	movlw	128
 17040  002B2A  1609               	andwf	??_retrieveLog,f,c
 17041  002B2C  5009               	movf	??_retrieveLog,w,c
 17042  002B2E  0100               	movlb	0	; () banked
 17043  002B30  6FE8               	movwf	_log_completion& (0+255),b
 17044  002B32  6BE9               	clrf	(_log_completion+1)& (0+255),b
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 17048  002B34  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17049  002B38  0E0F               	movlw	15
 17050  002B3A  1609               	andwf	??_retrieveLog,f,c
 17051  002B3C  5009               	movf	??_retrieveLog,w,c
 17052  002B3E  0100               	movlb	0	; () banked
 17053  002B40  6FF2               	movwf	_log_count_total& (0+255),b
 17054  002B42  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 17055                           
 17056                           ; BSR set to: 0
 17057                           ;EEPROM.c: 146: addr++;
 17058  002B44  4A10               	infsnz	retrieveLog@addr,f,c
 17059  002B46  2A11               	incf	retrieveLog@addr+1,f,c
 17060                           
 17061                           ; BSR set to: 0
 17062                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 17063  002B48  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17064  002B4C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17065  002B50  ECEC  F01F         	call	i2_EEPROM_read	;wreg free
 17066  002B54  6E0C               	movwf	retrieveLog@byte2,c
 17067                           
 17068                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 17069  002B56  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17070  002B5A  0EF0               	movlw	240
 17071  002B5C  1609               	andwf	??_retrieveLog,f,c
 17072  002B5E  5009               	movf	??_retrieveLog,w,c
 17073  002B60  0100               	movlb	0	; () banked
 17074  002B62  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 17075  002B64  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 17076                           
 17077                           ; BSR set to: 0
 17078                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 17079  002B66  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17080  002B6A  0E0F               	movlw	15
 17081  002B6C  1609               	andwf	??_retrieveLog,f,c
 17082  002B6E  5009               	movf	??_retrieveLog,w,c
 17083  002B70  0100               	movlb	0	; () banked
 17084  002B72  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 17085  002B74  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;EEPROM.c: 152: addr++;
 17089  002B76  4A10               	infsnz	retrieveLog@addr,f,c
 17090  002B78  2A11               	incf	retrieveLog@addr+1,f,c
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 17094  002B7A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17095  002B7E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17096  002B82  ECEC  F01F         	call	i2_EEPROM_read	;wreg free
 17097  002B86  6E0D               	movwf	retrieveLog@byte3,c
 17098                           
 17099                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 17100  002B88  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17101  002B8C  0EF0               	movlw	240
 17102  002B8E  1609               	andwf	??_retrieveLog,f,c
 17103  002B90  5009               	movf	??_retrieveLog,w,c
 17104  002B92  0100               	movlb	0	; () banked
 17105  002B94  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 17106  002B96  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 17107                           
 17108                           ; BSR set to: 0
 17109                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 17110  002B98  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17111  002B9C  0E0F               	movlw	15
 17112  002B9E  1609               	andwf	??_retrieveLog,f,c
 17113  002BA0  5009               	movf	??_retrieveLog,w,c
 17114  002BA2  0100               	movlb	0	; () banked
 17115  002BA4  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 17116  002BA6  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 17117                           
 17118                           ; BSR set to: 0
 17119                           ;EEPROM.c: 156: addr++;
 17120  002BA8  4A10               	infsnz	retrieveLog@addr,f,c
 17121  002BAA  2A11               	incf	retrieveLog@addr+1,f,c
 17122                           
 17123                           ; BSR set to: 0
 17124                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 17125  002BAC  0E00               	movlw	0
 17126  002BAE  6E0F               	movwf	retrieveLog@i+1,c
 17127  002BB0  0E00               	movlw	0
 17128  002BB2  6E0E               	movwf	retrieveLog@i,c
 17129  002BB4                     i2l5613:
 17130                           
 17131                           ; BSR set to: 0
 17132  002BB4  BE0F               	btfsc	retrieveLog@i+1,7,c
 17133  002BB6  D006               	goto	i2l5617
 17134  002BB8  500F               	movf	retrieveLog@i+1,w,c
 17135  002BBA  E11E               	bnz	i2l5625
 17136  002BBC  0E07               	movlw	7
 17137  002BBE  5C0E               	subwf	retrieveLog@i,w,c
 17138  002BC0  B0D8               	btfsc	status,0,c
 17139  002BC2  D01A               	goto	i2l5625
 17140  002BC4                     i2l5617:
 17141                           
 17142                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 17143  002BC4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17144  002BC8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17145  002BCC  ECEC  F01F         	call	i2_EEPROM_read	;wreg free
 17146  002BD0  6E09               	movwf	??_retrieveLog& (0+255),c
 17147  002BD2  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 17148  002BD4  90D8               	bcf	status,0,c
 17149  002BD6  340E               	rlcf	retrieveLog@i,w,c
 17150  002BD8  6ED9               	movwf	fsr2l,c
 17151  002BDA  340F               	rlcf	retrieveLog@i+1,w,c
 17152  002BDC  6EDA               	movwf	fsr2h,c
 17153  002BDE  0E00               	movlw	low _log_startTime
 17154  002BE0  26D9               	addwf	fsr2l,f,c
 17155  002BE2  0E01               	movlw	high _log_startTime
 17156  002BE4  22DA               	addwfc	fsr2h,f,c
 17157  002BE6  C009  FFDE         	movff	??_retrieveLog,postinc2
 17158  002BEA  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 17159                           
 17160                           ;EEPROM.c: 161: addr++;
 17161  002BEE  4A10               	infsnz	retrieveLog@addr,f,c
 17162  002BF0  2A11               	incf	retrieveLog@addr+1,f,c
 17163  002BF2  4A0E               	infsnz	retrieveLog@i,f,c
 17164  002BF4  2A0F               	incf	retrieveLog@i+1,f,c
 17165  002BF6  D7DE               	goto	i2l5613
 17166  002BF8                     i2l5625:
 17167                           
 17168                           ;EEPROM.c: 162: }
 17169                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 17170  002BF8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17171  002BFC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17172  002C00  ECEC  F01F         	call	i2_EEPROM_read	;wreg free
 17173  002C04  6E09               	movwf	??_retrieveLog& (0+255),c
 17174  002C06  5009               	movf	??_retrieveLog,w,c
 17175  002C08  0100               	movlb	0	; () banked
 17176  002C0A  6FF4               	movwf	_log_total_time& (0+255),b
 17177  002C0C  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 17178                           
 17179                           ; BSR set to: 0
 17180  002C0E  0012               	return		;funcret
 17181  002C10                     __end_of_retrieveLog:
 17182                           	opt stack 0
 17183                           pclatu	equ	0xFFB
 17184                           pclath	equ	0xFFA
 17185                           tblptru	equ	0xFF8
 17186                           tblptrh	equ	0xFF7
 17187                           tblptrl	equ	0xFF6
 17188                           tablat	equ	0xFF5
 17189                           prodh	equ	0xFF4
 17190                           prodl	equ	0xFF3
 17191                           intcon	equ	0xFF2
 17192                           intcon2	equ	0xFF1
 17193                           intcon3	equ	0xFF0
 17194                           indf0	equ	0xFEF
 17195                           postinc0	equ	0xFEE
 17196                           fsr0h	equ	0xFEA
 17197                           fsr0l	equ	0xFE9
 17198                           wreg	equ	0xFE8
 17199                           postdec1	equ	0xFE5
 17200                           fsr1h	equ	0xFE2
 17201                           fsr1l	equ	0xFE1
 17202                           indf2	equ	0xFDF
 17203                           postinc2	equ	0xFDE
 17204                           postdec2	equ	0xFDD
 17205                           fsr2h	equ	0xFDA
 17206                           fsr2l	equ	0xFD9
 17207                           status	equ	0xFD8
 17208                           
 17209 ;; *************** function i2_EEPROM_read *****************
 17210 ;; Defined at:
 17211 ;;		line 68 in file "EEPROM.c"
 17212 ;; Parameters:    Size  Location     Type
 17213 ;;  address         2    0[COMRAM] unsigned short 
 17214 ;; Auto vars:     Size  Location     Type
 17215 ;;		None
 17216 ;; Return value:  Size  Location     Type
 17217 ;;                  1    wreg      unsigned char 
 17218 ;; Registers used:
 17219 ;;		wreg, status,2
 17220 ;; Tracked objects:
 17221 ;;		On entry : 0/0
 17222 ;;		On exit  : 0/0
 17223 ;;		Unchanged: 0/0
 17224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17225 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17229 ;;Total ram usage:        2 bytes
 17230 ;; Hardware stack levels used:    1
 17231 ;; This function calls:
 17232 ;;		Nothing
 17233 ;; This function is called by:
 17234 ;;		_retrieveLog
 17235 ;; This function uses a non-reentrant model
 17236 ;;
 17237                           
 17238                           	psect	text71
 17239  003FD8                     __ptext71:
 17240                           	opt stack 0
 17241  003FD8                     i2_EEPROM_read:
 17242                           	opt stack 20
 17243                           
 17244                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 17245                           
 17246                           ; BSR set to: 0
 17247                           ;incstack = 0
 17248  003FD8  5002               	movf	i2EEPROM_read@address+1,w,c
 17249  003FDA  6EAA               	movwf	4010,c	;volatile
 17250                           
 17251                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 17252  003FDC  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 17253                           
 17254                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 17255  003FE0  9EA6               	bcf	4006,7,c	;volatile
 17256                           
 17257                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 17258  003FE2  9CA6               	bcf	4006,6,c	;volatile
 17259                           
 17260                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 17261  003FE4  80A6               	bsf	4006,0,c	;volatile
 17262  003FE6                     i2l913:
 17263  003FE6  B0A6               	btfsc	4006,0,c	;volatile
 17264  003FE8  D7FE               	goto	i2l913
 17265                           
 17266                           ;EEPROM.c: 81: return EEDATA;
 17267  003FEA  50A8               	movf	4008,w,c	;volatile
 17268  003FEC  0012               	return	
 17269  003FEE                     __end_ofi2_EEPROM_read:
 17270                           	opt stack 0
 17271                           pclatu	equ	0xFFB
 17272                           pclath	equ	0xFFA
 17273                           tblptru	equ	0xFF8
 17274                           tblptrh	equ	0xFF7
 17275                           tblptrl	equ	0xFF6
 17276                           tablat	equ	0xFF5
 17277                           prodh	equ	0xFF4
 17278                           prodl	equ	0xFF3
 17279                           intcon	equ	0xFF2
 17280                           intcon2	equ	0xFF1
 17281                           intcon3	equ	0xFF0
 17282                           indf0	equ	0xFEF
 17283                           postinc0	equ	0xFEE
 17284                           fsr0h	equ	0xFEA
 17285                           fsr0l	equ	0xFE9
 17286                           wreg	equ	0xFE8
 17287                           postdec1	equ	0xFE5
 17288                           fsr1h	equ	0xFE2
 17289                           fsr1l	equ	0xFE1
 17290                           indf2	equ	0xFDF
 17291                           postinc2	equ	0xFDE
 17292                           postdec2	equ	0xFDD
 17293                           fsr2h	equ	0xFDA
 17294                           fsr2l	equ	0xFD9
 17295                           status	equ	0xFD8
 17296                           
 17297 ;; *************** function _printSortTimer *****************
 17298 ;; Defined at:
 17299 ;;		line 255 in file "sort.c"
 17300 ;; Parameters:    Size  Location     Type
 17301 ;;		None
 17302 ;; Auto vars:     Size  Location     Type
 17303 ;;  i               2   72[COMRAM] int 
 17304 ;;  curTime        14   46[COMRAM] int [7]
 17305 ;;  timeDiff        2   70[COMRAM] unsigned int 
 17306 ;;  sec             2   66[COMRAM] int 
 17307 ;;  min             2   64[COMRAM] int 
 17308 ;;  cur_sec         2   62[COMRAM] unsigned int 
 17309 ;;  start_sec       2   60[COMRAM] unsigned int 
 17310 ;;  hour            2   44[COMRAM] int 
 17311 ;; Return value:  Size  Location     Type
 17312 ;;                  1    wreg      void 
 17313 ;; Registers used:
 17314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17315 ;; Tracked objects:
 17316 ;;		On entry : 0/0
 17317 ;;		On exit  : 0/0
 17318 ;;		Unchanged: 0/0
 17319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17321 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17322 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17323 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17324 ;;Total ram usage:       33 bytes
 17325 ;; Hardware stack levels used:    1
 17326 ;; Hardware stack levels required when called:    3
 17327 ;; This function calls:
 17328 ;;		i2___lwdiv
 17329 ;;		i2___lwmod
 17330 ;;		i2___wmul
 17331 ;;		i2_getRTC
 17332 ;;		i2_lcdInst
 17333 ;;		i2_printf
 17334 ;; This function is called by:
 17335 ;;		_handler
 17336 ;; This function uses a non-reentrant model
 17337 ;;
 17338                           
 17339                           	psect	text72
 17340  002094                     __ptext72:
 17341                           	opt stack 0
 17342  002094                     _printSortTimer:
 17343                           	opt stack 20
 17344                           
 17345                           ;sort.c: 256: getRTC();
 17346                           
 17347                           ;incstack = 0
 17348  002094  ECB9  F01A         	call	i2_getRTC	;wreg free
 17349                           
 17350                           ;sort.c: 257: int curTime[7];
 17351                           ;sort.c: 258: for(int i = 0; i < 7; i++){
 17352  002098  0E00               	movlw	0
 17353  00209A  6E4A               	movwf	printSortTimer@i+1,c
 17354  00209C  0E00               	movlw	0
 17355  00209E  6E49               	movwf	printSortTimer@i,c
 17356  0020A0                     i2l7425:
 17357  0020A0  BE4A               	btfsc	printSortTimer@i+1,7,c
 17358  0020A2  D006               	goto	i2l7429
 17359  0020A4  504A               	movf	printSortTimer@i+1,w,c
 17360  0020A6  E131               	bnz	i2l7435
 17361  0020A8  0E07               	movlw	7
 17362  0020AA  5C49               	subwf	printSortTimer@i,w,c
 17363  0020AC  B0D8               	btfsc	status,0,c
 17364  0020AE  D02D               	goto	i2l7435
 17365  0020B0                     i2l7429:
 17366                           
 17367                           ;sort.c: 259: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17368  0020B0  0E24               	movlw	low _time
 17369  0020B2  2449               	addwf	printSortTimer@i,w,c
 17370  0020B4  6ED9               	movwf	fsr2l,c
 17371  0020B6  0E01               	movlw	high _time
 17372  0020B8  204A               	addwfc	printSortTimer@i+1,w,c
 17373  0020BA  6EDA               	movwf	fsr2h,c
 17374  0020BC  50DF               	movf	indf2,w,c
 17375  0020BE  6E2A               	movwf	??_printSortTimer& (0+255),c
 17376  0020C0  3A2A               	swapf	??_printSortTimer,f,c
 17377  0020C2  0E0F               	movlw	15
 17378  0020C4  162A               	andwf	??_printSortTimer,f,c
 17379  0020C6  0E0F               	movlw	15
 17380  0020C8  162A               	andwf	??_printSortTimer,f,c
 17381  0020CA  502A               	movf	??_printSortTimer,w,c
 17382  0020CC  0D0A               	mullw	10
 17383  0020CE  0E24               	movlw	low _time
 17384  0020D0  2449               	addwf	printSortTimer@i,w,c
 17385  0020D2  6ED9               	movwf	fsr2l,c
 17386  0020D4  0E01               	movlw	high _time
 17387  0020D6  204A               	addwfc	printSortTimer@i+1,w,c
 17388  0020D8  6EDA               	movwf	fsr2h,c
 17389  0020DA  50DF               	movf	indf2,w,c
 17390  0020DC  0B0F               	andlw	15
 17391  0020DE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 17392  0020E0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 17393  0020E2  50F3               	movf	prodl,w,c
 17394  0020E4  262B               	addwf	??_printSortTimer+1,f,c
 17395  0020E6  50F4               	movf	prodh,w,c
 17396  0020E8  222C               	addwfc	??_printSortTimer+2,f,c
 17397  0020EA  90D8               	bcf	status,0,c
 17398  0020EC  3449               	rlcf	printSortTimer@i,w,c
 17399  0020EE  6ED9               	movwf	fsr2l,c
 17400  0020F0  344A               	rlcf	printSortTimer@i+1,w,c
 17401  0020F2  6EDA               	movwf	fsr2h,c
 17402  0020F4  0E2F               	movlw	low printSortTimer@curTime
 17403  0020F6  26D9               	addwf	fsr2l,f,c
 17404  0020F8  0E00               	movlw	high printSortTimer@curTime
 17405  0020FA  22DA               	addwfc	fsr2h,f,c
 17406  0020FC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 17407  002100  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 17408  002104  4A49               	infsnz	printSortTimer@i,f,c
 17409  002106  2A4A               	incf	printSortTimer@i+1,f,c
 17410  002108  D7CB               	goto	i2l7425
 17411  00210A                     i2l7435:
 17412                           
 17413                           ;sort.c: 260: }
 17414                           ;sort.c: 261: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 17415  00210A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 17416  00210E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 17417  002112  0E00               	movlw	0
 17418  002114  6E04               	movwf	i2___wmul@multiplicand+1,c
 17419  002116  0E3C               	movlw	60
 17420  002118  6E03               	movwf	i2___wmul@multiplicand,c
 17421  00211A  EC5A  F01F         	call	i2___wmul	;wreg free
 17422  00211E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17423  002122  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17424  002126  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 17425  00212A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 17426  00212E  0E0E               	movlw	14
 17427  002130  6E04               	movwf	i2___wmul@multiplicand+1,c
 17428  002132  0E10               	movlw	16
 17429  002134  6E03               	movwf	i2___wmul@multiplicand,c
 17430  002136  EC5A  F01F         	call	i2___wmul	;wreg free
 17431  00213A  5001               	movf	?i2___wmul,w,c
 17432  00213C  262A               	addwf	??_printSortTimer,f,c
 17433  00213E  5002               	movf	?i2___wmul+1,w,c
 17434  002140  222B               	addwfc	??_printSortTimer+1,f,c
 17435  002142  0101               	movlb	1	; () banked
 17436  002144  510E               	movf	_startTime& (0+255),w,b
 17437  002146  242A               	addwf	??_printSortTimer,w,c
 17438  002148  6E3D               	movwf	printSortTimer@start_sec,c
 17439  00214A  0101               	movlb	1	; () banked
 17440  00214C  510F               	movf	(_startTime+1)& (0+255),w,b
 17441  00214E  202B               	addwfc	??_printSortTimer+1,w,c
 17442  002150  6E3E               	movwf	printSortTimer@start_sec+1,c
 17443                           
 17444                           ;sort.c: 262: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 17445  002152  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 17446  002156  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 17447  00215A  0E00               	movlw	0
 17448  00215C  6E04               	movwf	i2___wmul@multiplicand+1,c
 17449  00215E  0E3C               	movlw	60
 17450  002160  6E03               	movwf	i2___wmul@multiplicand,c
 17451  002162  EC5A  F01F         	call	i2___wmul	;wreg free
 17452  002166  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17453  00216A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17454  00216E  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 17455  002172  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 17456  002176  0E0E               	movlw	14
 17457  002178  6E04               	movwf	i2___wmul@multiplicand+1,c
 17458  00217A  0E10               	movlw	16
 17459  00217C  6E03               	movwf	i2___wmul@multiplicand,c
 17460  00217E  EC5A  F01F         	call	i2___wmul	;wreg free
 17461  002182  5001               	movf	?i2___wmul,w,c
 17462  002184  262A               	addwf	??_printSortTimer,f,c
 17463  002186  5002               	movf	?i2___wmul+1,w,c
 17464  002188  222B               	addwfc	??_printSortTimer+1,f,c
 17465  00218A  502F               	movf	printSortTimer@curTime,w,c
 17466  00218C  242A               	addwf	??_printSortTimer,w,c
 17467  00218E  6E3F               	movwf	printSortTimer@cur_sec,c
 17468  002190  5030               	movf	printSortTimer@curTime+1,w,c
 17469  002192  202B               	addwfc	??_printSortTimer+1,w,c
 17470  002194  6E40               	movwf	printSortTimer@cur_sec+1,c
 17471                           
 17472                           ;sort.c: 263: unsigned int timeDiff = cur_sec - start_sec;
 17473  002196  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 17474  00219A  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 17475  00219E  1E2A               	comf	??_printSortTimer,f,c
 17476  0021A0  1E2B               	comf	??_printSortTimer+1,f,c
 17477  0021A2  4A2A               	infsnz	??_printSortTimer,f,c
 17478  0021A4  2A2B               	incf	??_printSortTimer+1,f,c
 17479  0021A6  503F               	movf	printSortTimer@cur_sec,w,c
 17480  0021A8  242A               	addwf	??_printSortTimer,w,c
 17481  0021AA  6E47               	movwf	printSortTimer@timeDiff,c
 17482  0021AC  5040               	movf	printSortTimer@cur_sec+1,w,c
 17483  0021AE  202B               	addwfc	??_printSortTimer+1,w,c
 17484  0021B0  6E48               	movwf	printSortTimer@timeDiff+1,c
 17485                           
 17486                           ;sort.c: 265: total_time = timeDiff;
 17487  0021B2  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 17488  0021B6  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 17489                           
 17490                           ;sort.c: 267: if(timeDiff >= 10){
 17491  0021BA  5048               	movf	printSortTimer@timeDiff+1,w,c
 17492  0021BC  E104               	bnz	i2u637_40
 17493  0021BE  0E0A               	movlw	10
 17494  0021C0  5C47               	subwf	printSortTimer@timeDiff,w,c
 17495  0021C2  A0D8               	btfss	status,0,c
 17496  0021C4  D003               	goto	i2l7445
 17497  0021C6                     i2u637_40:
 17498                           
 17499                           ;sort.c: 268: machine_state = DoneSorting_state;
 17500  0021C6  0E02               	movlw	2
 17501  0021C8  0100               	movlb	0	; () banked
 17502  0021CA  6FFC               	movwf	_machine_state& (0+255),b
 17503  0021CC                     i2l7445:
 17504                           
 17505                           ;sort.c: 270: }
 17506                           ;sort.c: 272: int hour = timeDiff / 3600;
 17507  0021CC  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 17508  0021D0  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 17509  0021D4  0E0E               	movlw	14
 17510  0021D6  6E09               	movwf	i2___lwdiv@divisor+1,c
 17511  0021D8  0E10               	movlw	16
 17512  0021DA  6E08               	movwf	i2___lwdiv@divisor,c
 17513  0021DC  EC71  F01C         	call	i2___lwdiv	;wreg free
 17514  0021E0  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 17515  0021E4  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 17516                           
 17517                           ;sort.c: 273: int min = (timeDiff % 3600) / 60;
 17518  0021E8  0E0E               	movlw	14
 17519  0021EA  6E04               	movwf	i2___lwmod@divisor+1,c
 17520  0021EC  0E10               	movlw	16
 17521  0021EE  6E03               	movwf	i2___lwmod@divisor,c
 17522  0021F0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17523  0021F4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17524  0021F8  EC57  F01D         	call	i2___lwmod	;wreg free
 17525  0021FC  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 17526  002200  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 17527  002204  0E00               	movlw	0
 17528  002206  6E09               	movwf	i2___lwdiv@divisor+1,c
 17529  002208  0E3C               	movlw	60
 17530  00220A  6E08               	movwf	i2___lwdiv@divisor,c
 17531  00220C  EC71  F01C         	call	i2___lwdiv	;wreg free
 17532  002210  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 17533  002214  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 17534                           
 17535                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17536  002218  0E0E               	movlw	14
 17537  00221A  6E04               	movwf	i2___lwmod@divisor+1,c
 17538  00221C  0E10               	movlw	16
 17539  00221E  6E03               	movwf	i2___lwmod@divisor,c
 17540  002220  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17541  002224  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17542  002228  EC57  F01D         	call	i2___lwmod	;wreg free
 17543  00222C  C001  F045         	movff	?i2___lwmod,_printSortTimer$2325
 17544  002230  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2325+1
 17545                           
 17546                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17547  002234  C045  F001         	movff	_printSortTimer$2325,i2___lwmod@dividend
 17548  002238  C046  F002         	movff	_printSortTimer$2325+1,i2___lwmod@dividend+1
 17549  00223C  0E00               	movlw	0
 17550  00223E  6E04               	movwf	i2___lwmod@divisor+1,c
 17551  002240  0E3C               	movlw	60
 17552  002242  6E03               	movwf	i2___lwmod@divisor,c
 17553  002244  EC57  F01D         	call	i2___lwmod	;wreg free
 17554  002248  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 17555  00224C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 17556                           
 17557                           ;sort.c: 276: lcdInst(0b10000000);;
 17558  002250  0E80               	movlw	128
 17559  002252  EC20  F020         	call	i2_lcdInst
 17560                           
 17561                           ;sort.c: 277: printf("SORTING...");
 17562  002256  0E8E               	movlw	low STR_64
 17563  002258  6E0D               	movwf	i2printf@f,c
 17564  00225A  0EFF               	movlw	high STR_64
 17565  00225C  6E0E               	movwf	i2printf@f+1,c
 17566  00225E  ECB3  F00A         	call	i2_printf	;wreg free
 17567                           
 17568                           ;sort.c: 278: lcdInst(0b11000000);;
 17569  002262  0EC0               	movlw	192
 17570  002264  EC20  F020         	call	i2_lcdInst
 17571                           
 17572                           ;sort.c: 279: printf("TIME %d:%02d", min, sec);
 17573  002268  0E5F               	movlw	low STR_65
 17574  00226A  6E0D               	movwf	i2printf@f,c
 17575  00226C  0EFF               	movlw	high STR_65
 17576  00226E  6E0E               	movwf	i2printf@f+1,c
 17577  002270  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 17578  002274  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 17579  002278  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 17580  00227C  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 17581  002280  ECB3  F00A         	call	i2_printf	;wreg free
 17582  002284  0012               	return		;funcret
 17583  002286                     __end_of_printSortTimer:
 17584                           	opt stack 0
 17585                           pclatu	equ	0xFFB
 17586                           pclath	equ	0xFFA
 17587                           tblptru	equ	0xFF8
 17588                           tblptrh	equ	0xFF7
 17589                           tblptrl	equ	0xFF6
 17590                           tablat	equ	0xFF5
 17591                           prodh	equ	0xFF4
 17592                           prodl	equ	0xFF3
 17593                           intcon	equ	0xFF2
 17594                           intcon2	equ	0xFF1
 17595                           intcon3	equ	0xFF0
 17596                           indf0	equ	0xFEF
 17597                           postinc0	equ	0xFEE
 17598                           fsr0h	equ	0xFEA
 17599                           fsr0l	equ	0xFE9
 17600                           wreg	equ	0xFE8
 17601                           postdec1	equ	0xFE5
 17602                           fsr1h	equ	0xFE2
 17603                           fsr1l	equ	0xFE1
 17604                           indf2	equ	0xFDF
 17605                           postinc2	equ	0xFDE
 17606                           postdec2	equ	0xFDD
 17607                           fsr2h	equ	0xFDA
 17608                           fsr2l	equ	0xFD9
 17609                           status	equ	0xFD8
 17610                           
 17611 ;; *************** function i2_printf *****************
 17612 ;; Defined at:
 17613 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17614 ;; Parameters:    Size  Location     Type
 17615 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17616 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 17617 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 17618 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 17619 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 17620 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 17621 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 17622 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 17623 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 17624 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 17625 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 17626 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 17627 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17628 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17629 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17630 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17631 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17632 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 17633 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 17634 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17635 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17636 ;;		 -> STR_1(18), 
 17637 ;; Auto vars:     Size  Location     Type
 17638 ;;  printf          4    0        struct .
 17639 ;;  printf          2   39[COMRAM] int 
 17640 ;;  printf          2   35[COMRAM] unsigned int 
 17641 ;;  printf          2   33[COMRAM] unsigned int 
 17642 ;;  printf          2   31[COMRAM] PTR void [1]
 17643 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17644 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 17645 ;;		 -> STR_107(7), count_total(2), printRTC@month(4), UI@month(4), 
 17646 ;;  printf          1   38[COMRAM] char 
 17647 ;;  printf          1   37[COMRAM] unsigned char 
 17648 ;;  printf          1   28[COMRAM] char 
 17649 ;; Return value:  Size  Location     Type
 17650 ;;                  2   12[COMRAM] int 
 17651 ;; Registers used:
 17652 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17653 ;; Tracked objects:
 17654 ;;		On entry : 0/0
 17655 ;;		On exit  : 0/0
 17656 ;;		Unchanged: 0/0
 17657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17658 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17659 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17660 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17661 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17662 ;;Total ram usage:       29 bytes
 17663 ;; Hardware stack levels used:    1
 17664 ;; Hardware stack levels required when called:    2
 17665 ;; This function calls:
 17666 ;;		i2___lwdiv
 17667 ;;		i2___lwmod
 17668 ;;		i2___wmul
 17669 ;;		i2_isdigit
 17670 ;;		i2_putch
 17671 ;; This function is called by:
 17672 ;;		_change_state_to_menu_11
 17673 ;;		_change_state_to_menu_23
 17674 ;;		_change_state_to_logs_11
 17675 ;;		_change_state_to_logs_12
 17676 ;;		_change_state_to_logs_22
 17677 ;;		_change_state_to_logs_23
 17678 ;;		_change_state_to_logs_33
 17679 ;;		_change_state_to_logs_34
 17680 ;;		_printSortTimer
 17681 ;;		i2_change_state_to_menu_start
 17682 ;;		i2_change_state_to_menu_12
 17683 ;;		i2_change_state_to_menu_22
 17684 ;;		i2_printRTC
 17685 ;; This function uses a non-reentrant model
 17686 ;;
 17687                           
 17688                           	psect	text73
 17689  001566                     __ptext73:
 17690                           	opt stack 0
 17691  001566                     i2_printf:
 17692                           	opt stack 19
 17693                           
 17694                           ;doprnt.c: 466: va_list ap;
 17695                           ;doprnt.c: 499: signed char c;
 17696                           ;doprnt.c: 501: int width;
 17697                           ;doprnt.c: 506: signed char prec;
 17698                           ;doprnt.c: 508: unsigned char flag;
 17699                           ;doprnt.c: 523: union {
 17700                           ;doprnt.c: 524: unsigned long vd;
 17701                           ;doprnt.c: 525: double integ;
 17702                           ;doprnt.c: 526: } tmpval;
 17703                           ;doprnt.c: 528: unsigned int val;
 17704                           ;doprnt.c: 529: unsigned len;
 17705                           ;doprnt.c: 530: const char * cp;
 17706                           ;doprnt.c: 533: *ap = __va_start();
 17707                           
 17708                           ;incstack = 0
 17709  001566  0E0F               	movlw	low (?i2_printf+2)
 17710  001568  6E20               	movwf	i2printf@ap,c
 17711  00156A  0E00               	movlw	high (?i2_printf+2)
 17712  00156C  6E21               	movwf	i2printf@ap+1,c
 17713                           
 17714                           ;doprnt.c: 536: while(c = *f++) {
 17715  00156E  D1A4               	goto	i2l5431
 17716  001570                     i2l5301:
 17717                           
 17718                           ;doprnt.c: 538: if(c != '%')
 17719  001570  0E25               	movlw	37
 17720  001572  1827               	xorwf	i2printf@c,w,c
 17721  001574  B4D8               	btfsc	status,2,c
 17722  001576  D004               	goto	i2l5305
 17723                           
 17724                           ;doprnt.c: 540: {
 17725                           ;doprnt.c: 541: (putch(c) );
 17726  001578  5027               	movf	i2printf@c,w,c
 17727  00157A  EC1A  F020         	call	i2_putch
 17728                           
 17729                           ;doprnt.c: 542: continue;
 17730  00157E  D19C               	goto	i2l5431
 17731  001580                     i2l5305:
 17732                           
 17733                           ;doprnt.c: 543: }
 17734                           ;doprnt.c: 546: width = 0;
 17735  001580  0E00               	movlw	0
 17736  001582  6E29               	movwf	i2printf@width+1,c
 17737  001584  0E00               	movlw	0
 17738  001586  6E28               	movwf	i2printf@width,c
 17739                           
 17740                           ;doprnt.c: 548: flag = 0;
 17741  001588  0E00               	movlw	0
 17742  00158A  6E26               	movwf	i2printf@flag,c
 17743                           
 17744                           ;doprnt.c: 551: switch(*f) {
 17745                           
 17746                           ;doprnt.c: 550: for(;;) {
 17747  00158C  D003               	goto	i2l5311
 17748  00158E                     i2l5307:
 17749                           
 17750                           ;doprnt.c: 580: flag |= 0x04;
 17751  00158E  8426               	bsf	i2printf@flag,2,c
 17752                           
 17753                           ;doprnt.c: 581: f++;
 17754  001590  4A0D               	infsnz	i2printf@f,f,c
 17755  001592  2A0E               	incf	i2printf@f+1,f,c
 17756  001594                     i2l5311:
 17757  001594  C00D  FFF6         	movff	i2printf@f,tblptrl
 17758  001598  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17759  00159C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17760  00159C  6AF8               	clrf	tblptru,c
 17761  00159E                     	endif
 17762  00159E                     	if	0	;tblptru may be non-zero
 17763  00159E                     	endif
 17764  00159E  0008               	tblrd		*
 17765  0015A0  50F5               	movf	tablat,w,c
 17766                           
 17767                           ; Switch size 1, requested type "space"
 17768                           ; Number of cases is 1, Range of values is 48 to 48
 17769                           ; switch strategies available:
 17770                           ; Name         Instructions Cycles
 17771                           ; simple_byte            4     3 (average)
 17772                           ;	Chosen strategy is simple_byte
 17773  0015A2  0A30               	xorlw	48	; case 48
 17774  0015A4  B4D8               	btfsc	status,2,c
 17775  0015A6  D7F3               	goto	i2l5307
 17776                           
 17777                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17778                           
 17779                           ;doprnt.c: 586: }
 17780                           
 17781                           ;doprnt.c: 585: break;
 17782  0015A8  C00D  FFF6         	movff	i2printf@f,tblptrl
 17783  0015AC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17784  0015B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17785  0015B0  6AF8               	clrf	tblptru,c
 17786  0015B2                     	endif
 17787  0015B2                     	if	0	;tblptru may be non-zero
 17788  0015B2                     	endif
 17789  0015B2  0008               	tblrd		*
 17790  0015B4  50F5               	movf	tablat,w,c
 17791  0015B6  ECC6  F01F         	call	i2_isdigit
 17792  0015BA  A0D8               	btfss	status,0,c
 17793  0015BC  D0A6               	goto	i2l5359
 17794                           
 17795                           ;doprnt.c: 598: width = 0;
 17796  0015BE  0E00               	movlw	0
 17797  0015C0  6E29               	movwf	i2printf@width+1,c
 17798  0015C2  0E00               	movlw	0
 17799  0015C4  6E28               	movwf	i2printf@width,c
 17800  0015C6                     i2l5317:
 17801                           
 17802                           ;doprnt.c: 600: width *= 10;
 17803  0015C6  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 17804  0015CA  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 17805  0015CE  0E00               	movlw	0
 17806  0015D0  6E04               	movwf	i2___wmul@multiplicand+1,c
 17807  0015D2  0E0A               	movlw	10
 17808  0015D4  6E03               	movwf	i2___wmul@multiplicand,c
 17809  0015D6  EC5A  F01F         	call	i2___wmul	;wreg free
 17810  0015DA  C001  F028         	movff	?i2___wmul,i2printf@width
 17811  0015DE  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 17812                           
 17813                           ;doprnt.c: 601: width += *f++ - '0';
 17814  0015E2  0ED0               	movlw	208
 17815  0015E4  6E19               	movwf	??i2_printf& (0+255),c
 17816  0015E6  0EFF               	movlw	255
 17817  0015E8  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17818  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 17819  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17820  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17821  0015F2  6AF8               	clrf	tblptru,c
 17822  0015F4                     	endif
 17823  0015F4                     	if	0	;tblptru may be non-zero
 17824  0015F4                     	endif
 17825  0015F4  0008               	tblrd		*
 17826  0015F6  50F5               	movf	tablat,w,c
 17827  0015F8  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 17828  0015FA  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 17829  0015FC  5019               	movf	??i2_printf,w,c
 17830  0015FE  261B               	addwf	??i2_printf+2,f,c
 17831  001600  501A               	movf	??i2_printf+1,w,c
 17832  001602  221C               	addwfc	??i2_printf+3,f,c
 17833  001604  501B               	movf	??i2_printf+2,w,c
 17834  001606  2628               	addwf	i2printf@width,f,c
 17835  001608  501C               	movf	??i2_printf+3,w,c
 17836  00160A  2229               	addwfc	i2printf@width+1,f,c
 17837  00160C  4A0D               	infsnz	i2printf@f,f,c
 17838  00160E  2A0E               	incf	i2printf@f+1,f,c
 17839                           
 17840                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17841  001610  C00D  FFF6         	movff	i2printf@f,tblptrl
 17842  001614  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17843  001618                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17844  001618  6AF8               	clrf	tblptru,c
 17845  00161A                     	endif
 17846  00161A                     	if	0	;tblptru may be non-zero
 17847  00161A                     	endif
 17848  00161A  0008               	tblrd		*
 17849  00161C  50F5               	movf	tablat,w,c
 17850  00161E  ECC6  F01F         	call	i2_isdigit
 17851  001622  A0D8               	btfss	status,0,c
 17852  001624  D072               	goto	i2l5359
 17853  001626  D7CF               	goto	i2l5317
 17854  001628                     i2l5325:
 17855                           
 17856                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17857  001628  C020  FFD9         	movff	i2printf@ap,fsr2l
 17858  00162C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17859  001630  CFDE F01E          	movff	postinc2,i2printf@cp
 17860  001634  CFDD F01F          	movff	postdec2,i2printf@cp+1
 17861  001638  0E02               	movlw	2
 17862  00163A  2620               	addwf	i2printf@ap,f,c
 17863  00163C  0E00               	movlw	0
 17864  00163E  2221               	addwfc	i2printf@ap+1,f,c
 17865                           
 17866                           ;doprnt.c: 740: if(!cp)
 17867  001640  501E               	movf	i2printf@cp,w,c
 17868  001642  101F               	iorwf	i2printf@cp+1,w,c
 17869  001644  A4D8               	btfss	status,2,c
 17870  001646  D004               	goto	i2l5333
 17871                           
 17872                           ;doprnt.c: 741: cp = "(null)";
 17873  001648  0EB5               	movlw	low STR_107
 17874  00164A  6E1E               	movwf	i2printf@cp,c
 17875  00164C  0EFF               	movlw	high STR_107
 17876  00164E  6E1F               	movwf	i2printf@cp+1,c
 17877  001650                     i2l5333:
 17878                           
 17879                           ;doprnt.c: 745: len = 0;
 17880  001650  0E00               	movlw	0
 17881  001652  6E23               	movwf	i2printf@len+1,c
 17882  001654  0E00               	movlw	0
 17883  001656  6E22               	movwf	i2printf@len,c
 17884                           
 17885                           ;doprnt.c: 746: while(cp[len])
 17886  001658  D002               	goto	i2l5337
 17887  00165A                     i2l5335:
 17888                           
 17889                           ;doprnt.c: 747: len++;
 17890  00165A  4A22               	infsnz	i2printf@len,f,c
 17891  00165C  2A23               	incf	i2printf@len+1,f,c
 17892  00165E                     i2l5337:
 17893  00165E  5022               	movf	i2printf@len,w,c
 17894  001660  241E               	addwf	i2printf@cp,w,c
 17895  001662  6E19               	movwf	??i2_printf& (0+255),c
 17896  001664  5023               	movf	i2printf@len+1,w,c
 17897  001666  201F               	addwfc	i2printf@cp+1,w,c
 17898  001668  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17899  00166A  C019  FFF6         	movff	??i2_printf,tblptrl
 17900  00166E  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 17901  001672  0E00               	movlw	low (__mediumconst shr (0+16))
 17902  001674  6EF8               	movwf	tblptru,c
 17903  001676  0E0F               	movlw	(high __ramtop+-1)
 17904  001678  64F7               	cpfsgt	tblptrh,c
 17905  00167A  D003               	bra	i2u393_47
 17906  00167C  0008               	tblrd		*
 17907  00167E  50F5               	movf	tablat,w,c
 17908  001680  D005               	bra	i2u393_40
 17909  001682                     i2u393_47:
 17910  001682  CFF6 FFE9          	movff	tblptrl,fsr0l
 17911  001686  CFF7 FFEA          	movff	tblptrh,fsr0h
 17912  00168A  50EF               	movf	indf0,w,c
 17913  00168C                     i2u393_40:
 17914  00168C  0900               	iorlw	0
 17915  00168E  A4D8               	btfss	status,2,c
 17916  001690  D7E4               	goto	i2l5335
 17917                           
 17918                           ;doprnt.c: 757: if(width > len)
 17919  001692  5028               	movf	i2printf@width,w,c
 17920  001694  5C22               	subwf	i2printf@len,w,c
 17921  001696  5029               	movf	i2printf@width+1,w,c
 17922  001698  5823               	subwfb	i2printf@len+1,w,c
 17923  00169A  B0D8               	btfsc	status,0,c
 17924  00169C  D005               	goto	i2l5343
 17925                           
 17926                           ;doprnt.c: 758: width -= len;
 17927  00169E  5022               	movf	i2printf@len,w,c
 17928  0016A0  5E28               	subwf	i2printf@width,f,c
 17929  0016A2  5023               	movf	i2printf@len+1,w,c
 17930  0016A4  5A29               	subwfb	i2printf@width+1,f,c
 17931  0016A6  D008               	goto	i2l5347
 17932  0016A8                     i2l5343:
 17933                           
 17934                           ;doprnt.c: 759: else
 17935                           ;doprnt.c: 760: width = 0;
 17936  0016A8  0E00               	movlw	0
 17937  0016AA  6E29               	movwf	i2printf@width+1,c
 17938  0016AC  0E00               	movlw	0
 17939  0016AE  6E28               	movwf	i2printf@width,c
 17940                           
 17941                           ;doprnt.c: 764: while(width--)
 17942  0016B0  D003               	goto	i2l5347
 17943  0016B2                     i2l5345:
 17944                           
 17945                           ;doprnt.c: 765: (putch(' ') );
 17946  0016B2  0E20               	movlw	32
 17947  0016B4  EC1A  F020         	call	i2_putch
 17948  0016B8                     i2l5347:
 17949  0016B8  0628               	decf	i2printf@width,f,c
 17950  0016BA  A0D8               	btfss	status,0,c
 17951  0016BC  0629               	decf	i2printf@width+1,f,c
 17952  0016BE  2828               	incf	i2printf@width,w,c
 17953  0016C0  E1F8               	bnz	i2l5345
 17954  0016C2  2829               	incf	i2printf@width+1,w,c
 17955  0016C4  B4D8               	btfsc	status,2,c
 17956  0016C6  D016               	goto	i2l5353
 17957  0016C8  D7F4               	goto	i2l5345
 17958  0016CA                     i2l5349:
 17959                           
 17960                           ;doprnt.c: 768: (putch(*cp++) );
 17961  0016CA  C01E  FFF6         	movff	i2printf@cp,tblptrl
 17962  0016CE  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 17963  0016D2  0E00               	movlw	low (__mediumconst shr (0+16))
 17964  0016D4  6EF8               	movwf	tblptru,c
 17965  0016D6  0E0F               	movlw	(high __ramtop+-1)
 17966  0016D8  64F7               	cpfsgt	tblptrh,c
 17967  0016DA  D003               	bra	i2u397_47
 17968  0016DC  0008               	tblrd		*
 17969  0016DE  50F5               	movf	tablat,w,c
 17970  0016E0  D005               	bra	i2u397_40
 17971  0016E2                     i2u397_47:
 17972  0016E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 17973  0016E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 17974  0016EA  50EF               	movf	indf0,w,c
 17975  0016EC                     i2u397_40:
 17976  0016EC  EC1A  F020         	call	i2_putch
 17977  0016F0  4A1E               	infsnz	i2printf@cp,f,c
 17978  0016F2  2A1F               	incf	i2printf@cp+1,f,c
 17979  0016F4                     i2l5353:
 17980  0016F4  0622               	decf	i2printf@len,f,c
 17981  0016F6  A0D8               	btfss	status,0,c
 17982  0016F8  0623               	decf	i2printf@len+1,f,c
 17983  0016FA  2822               	incf	i2printf@len,w,c
 17984  0016FC  E1E6               	bnz	i2l5349
 17985  0016FE  2823               	incf	i2printf@len+1,w,c
 17986  001700  B4D8               	btfsc	status,2,c
 17987  001702  D0DA               	goto	i2l5431
 17988  001704  D7E2               	goto	i2l5349
 17989  001706                     i2l5355:
 17990                           
 17991                           ;doprnt.c: 818: flag |= 0x40;
 17992  001706  8C26               	bsf	i2printf@flag,6,c
 17993                           
 17994                           ;doprnt.c: 822: }
 17995                           
 17996                           ;doprnt.c: 819: break;
 17997  001708  D01B               	goto	i2l1169
 17998  00170A                     i2l5359:
 17999  00170A  C00D  FFF6         	movff	i2printf@f,tblptrl
 18000  00170E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18001  001712  4A0D               	infsnz	i2printf@f,f,c
 18002  001714  2A0E               	incf	i2printf@f+1,f,c
 18003  001716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18004  001716  6AF8               	clrf	tblptru,c
 18005  001718                     	endif
 18006  001718                     	if	0	;tblptru may be non-zero
 18007  001718                     	endif
 18008  001718  0008               	tblrd		*
 18009  00171A  CFF5 F027          	movff	tablat,i2printf@c
 18010  00171E  5027               	movf	i2printf@c,w,c
 18011                           
 18012                           ; Switch size 1, requested type "space"
 18013                           ; Number of cases is 5, Range of values is 0 to 117
 18014                           ; switch strategies available:
 18015                           ; Name         Instructions Cycles
 18016                           ; simple_byte           16     9 (average)
 18017                           ;	Chosen strategy is simple_byte
 18018  001720  0A00               	xorlw	0	; case 0
 18019  001722  B4D8               	btfsc	status,2,c
 18020  001724  0012               	return	
 18021  001726  0A64               	xorlw	100	; case 100
 18022  001728  B4D8               	btfsc	status,2,c
 18023  00172A  D00A               	goto	i2l1169
 18024  00172C  0A0D               	xorlw	13	; case 105
 18025  00172E  B4D8               	btfsc	status,2,c
 18026  001730  D007               	goto	i2l1169
 18027  001732  0A1A               	xorlw	26	; case 115
 18028  001734  B4D8               	btfsc	status,2,c
 18029  001736  D778               	goto	i2l5325
 18030  001738  0A06               	xorlw	6	; case 117
 18031  00173A  B4D8               	btfsc	status,2,c
 18032  00173C  D7E4               	goto	i2l5355
 18033  00173E  D0BC               	goto	i2l5431
 18034  001740                     i2l1169:
 18035                           
 18036                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18037  001740  BC26               	btfsc	i2printf@flag,6,c
 18038  001742  D015               	goto	i2l5371
 18039                           
 18040                           ;doprnt.c: 1253: {
 18041                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18042  001744  C020  FFD9         	movff	i2printf@ap,fsr2l
 18043  001748  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18044  00174C  CFDE F024          	movff	postinc2,i2printf@val
 18045  001750  CFDD F025          	movff	postdec2,i2printf@val+1
 18046  001754  0E02               	movlw	2
 18047  001756  2620               	addwf	i2printf@ap,f,c
 18048  001758  0E00               	movlw	0
 18049  00175A  2221               	addwfc	i2printf@ap+1,f,c
 18050                           
 18051                           ;doprnt.c: 1261: if((int)val < 0) {
 18052  00175C  AE25               	btfss	i2printf@val+1,7,c
 18053  00175E  D013               	goto	i2l5375
 18054                           
 18055                           ;doprnt.c: 1262: flag |= 0x03;
 18056  001760  0E03               	movlw	3
 18057  001762  1226               	iorwf	i2printf@flag,f,c
 18058                           
 18059                           ;doprnt.c: 1263: val = -val;
 18060  001764  6C24               	negf	i2printf@val,c
 18061  001766  1E25               	comf	i2printf@val+1,f,c
 18062  001768  B0D8               	btfsc	status,0,c
 18063  00176A  2A25               	incf	i2printf@val+1,f,c
 18064                           
 18065                           ;doprnt.c: 1264: }
 18066                           ;doprnt.c: 1266: }
 18067  00176C  D00C               	goto	i2l5375
 18068  00176E                     i2l5371:
 18069                           
 18070                           ;doprnt.c: 1268: else
 18071                           ;doprnt.c: 1273: {
 18072                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18073  00176E  C020  FFD9         	movff	i2printf@ap,fsr2l
 18074  001772  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18075  001776  CFDE F024          	movff	postinc2,i2printf@val
 18076  00177A  CFDD F025          	movff	postdec2,i2printf@val+1
 18077  00177E  0E02               	movlw	2
 18078  001780  2620               	addwf	i2printf@ap,f,c
 18079  001782  0E00               	movlw	0
 18080  001784  2221               	addwfc	i2printf@ap+1,f,c
 18081  001786                     i2l5375:
 18082                           
 18083                           ;doprnt.c: 1287: }
 18084                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18085  001786  0E01               	movlw	1
 18086  001788  6E27               	movwf	i2printf@c,c
 18087  00178A                     i2l5377:
 18088  00178A  0E05               	movlw	5
 18089  00178C  1827               	xorwf	i2printf@c,w,c
 18090  00178E  B4D8               	btfsc	status,2,c
 18091  001790  D015               	goto	i2l5389
 18092                           
 18093                           ;doprnt.c: 1306: if(val < dpowers[c])
 18094  001792  5027               	movf	i2printf@c,w,c
 18095  001794  0D02               	mullw	2
 18096  001796  0E82               	movlw	low _dpowers
 18097  001798  24F3               	addwf	prodl,w,c
 18098  00179A  6EF6               	movwf	tblptrl,c
 18099  00179C  0EFB               	movlw	high _dpowers
 18100  00179E  20F4               	addwfc	prodh,w,c
 18101  0017A0  6EF7               	movwf	tblptrh,c
 18102  0017A2                     	if	1	;There are 3 active tblptr bytes
 18103  0017A2  6AF8               	clrf	tblptru,c
 18104  0017A4  0E00               	movlw	low (__mediumconst shr (0+16))
 18105  0017A6  22F8               	addwfc	tblptru,f,c
 18106  0017A8                     	endif
 18107  0017A8  0009               	tblrd		*+
 18108  0017AA  50F5               	movf	tablat,w,c
 18109  0017AC  5C24               	subwf	i2printf@val,w,c
 18110  0017AE  0009               	tblrd		*+
 18111  0017B0  50F5               	movf	tablat,w,c
 18112  0017B2  5825               	subwfb	i2printf@val+1,w,c
 18113  0017B4  A0D8               	btfss	status,0,c
 18114  0017B6  D002               	goto	i2l5389
 18115                           
 18116                           ;doprnt.c: 1307: break;
 18117  0017B8  2A27               	incf	i2printf@c,f,c
 18118  0017BA  D7E7               	goto	i2l5377
 18119  0017BC                     i2l5389:
 18120                           
 18121                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18122  0017BC  5028               	movf	i2printf@width,w,c
 18123  0017BE  1029               	iorwf	i2printf@width+1,w,c
 18124  0017C0  B4D8               	btfsc	status,2,c
 18125  0017C2  D009               	goto	i2l5395
 18126  0017C4  C026  F019         	movff	i2printf@flag,??i2_printf
 18127  0017C8  0E03               	movlw	3
 18128  0017CA  1619               	andwf	??i2_printf,f,c
 18129  0017CC  B4D8               	btfsc	status,2,c
 18130  0017CE  D003               	goto	i2l5395
 18131                           
 18132                           ;doprnt.c: 1346: width--;
 18133  0017D0  0628               	decf	i2printf@width,f,c
 18134  0017D2  A0D8               	btfss	status,0,c
 18135  0017D4  0629               	decf	i2printf@width+1,f,c
 18136  0017D6                     i2l5395:
 18137                           
 18138                           ;doprnt.c: 1381: if(width > c)
 18139  0017D6  0E80               	movlw	128
 18140  0017D8  BE27               	btfsc	i2printf@c,7,c
 18141  0017DA  0E7F               	movlw	127
 18142  0017DC  6E19               	movwf	??i2_printf& (0+255),c
 18143  0017DE  5028               	movf	i2printf@width,w,c
 18144  0017E0  5C27               	subwf	i2printf@c,w,c
 18145  0017E2  5029               	movf	i2printf@width+1,w,c
 18146  0017E4  0A80               	xorlw	128
 18147  0017E6  5819               	subwfb	??i2_printf& (0+255),w,c
 18148  0017E8  B0D8               	btfsc	status,0,c
 18149  0017EA  D007               	goto	i2l5399
 18150                           
 18151                           ;doprnt.c: 1382: width -= c;
 18152  0017EC  5027               	movf	i2printf@c,w,c
 18153  0017EE  5E28               	subwf	i2printf@width,f,c
 18154  0017F0  0E00               	movlw	0
 18155  0017F2  BE27               	btfsc	i2printf@c,7,c
 18156  0017F4  0EFF               	movlw	255
 18157  0017F6  5A29               	subwfb	i2printf@width+1,f,c
 18158  0017F8  D004               	goto	i2l5401
 18159  0017FA                     i2l5399:
 18160                           
 18161                           ;doprnt.c: 1383: else
 18162                           ;doprnt.c: 1384: width = 0;
 18163  0017FA  0E00               	movlw	0
 18164  0017FC  6E29               	movwf	i2printf@width+1,c
 18165  0017FE  0E00               	movlw	0
 18166  001800  6E28               	movwf	i2printf@width,c
 18167  001802                     i2l5401:
 18168                           
 18169                           ;doprnt.c: 1387: if(flag & 0x04) {
 18170  001802  A426               	btfss	i2printf@flag,2,c
 18171  001804  D014               	goto	i2l5413
 18172                           
 18173                           ;doprnt.c: 1392: if(flag & 0x03)
 18174  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 18175  00180A  0E03               	movlw	3
 18176  00180C  1619               	andwf	??i2_printf,f,c
 18177  00180E  B4D8               	btfsc	status,2,c
 18178  001810  D003               	goto	i2l5407
 18179                           
 18180                           ;doprnt.c: 1393: (putch('-') );
 18181  001812  0E2D               	movlw	45
 18182  001814  EC1A  F020         	call	i2_putch
 18183  001818                     i2l5407:
 18184                           
 18185                           ;doprnt.c: 1415: if(width)
 18186  001818  5028               	movf	i2printf@width,w,c
 18187  00181A  1029               	iorwf	i2printf@width+1,w,c
 18188  00181C  B4D8               	btfsc	status,2,c
 18189  00181E  D01E               	goto	i2l5423
 18190                           
 18191                           ;doprnt.c: 1417: (putch('0') );
 18192                           
 18193                           ;doprnt.c: 1416: do
 18194  001820  0E30               	movlw	48
 18195  001822  EC1A  F020         	call	i2_putch
 18196                           
 18197                           ;doprnt.c: 1418: while(--width);
 18198  001826  0628               	decf	i2printf@width,f,c
 18199  001828  A0D8               	btfss	status,0,c
 18200  00182A  0629               	decf	i2printf@width+1,f,c
 18201  00182C  D7F5               	goto	i2l5407
 18202  00182E                     i2l5413:
 18203                           
 18204                           ;doprnt.c: 1422: {
 18205                           ;doprnt.c: 1424: if(width
 18206                           ;doprnt.c: 1428: )
 18207  00182E  5028               	movf	i2printf@width,w,c
 18208  001830  1029               	iorwf	i2printf@width+1,w,c
 18209  001832  B4D8               	btfsc	status,2,c
 18210  001834  D00A               	goto	i2l5419
 18211  001836                     i2l5415:
 18212                           
 18213                           ;doprnt.c: 1430: (putch(' ') );
 18214  001836  0E20               	movlw	32
 18215  001838  EC1A  F020         	call	i2_putch
 18216                           
 18217                           ;doprnt.c: 1431: while(--width);
 18218  00183C  0628               	decf	i2printf@width,f,c
 18219  00183E  A0D8               	btfss	status,0,c
 18220  001840  0629               	decf	i2printf@width+1,f,c
 18221  001842  5028               	movf	i2printf@width,w,c
 18222  001844  1029               	iorwf	i2printf@width+1,w,c
 18223  001846  A4D8               	btfss	status,2,c
 18224  001848  D7F6               	goto	i2l5415
 18225  00184A                     i2l5419:
 18226                           
 18227                           ;doprnt.c: 1438: if(flag & 0x03)
 18228  00184A  C026  F019         	movff	i2printf@flag,??i2_printf
 18229  00184E  0E03               	movlw	3
 18230  001850  1619               	andwf	??i2_printf,f,c
 18231  001852  B4D8               	btfsc	status,2,c
 18232  001854  D003               	goto	i2l5423
 18233                           
 18234                           ;doprnt.c: 1439: (putch('-') );
 18235  001856  0E2D               	movlw	45
 18236  001858  EC1A  F020         	call	i2_putch
 18237  00185C                     i2l5423:
 18238                           
 18239                           ;doprnt.c: 1469: }
 18240                           ;doprnt.c: 1472: prec = c;
 18241  00185C  C027  F01D         	movff	i2printf@c,i2printf@prec
 18242                           
 18243                           ;doprnt.c: 1474: while(prec--) {
 18244  001860  D027               	goto	i2l5429
 18245  001862                     i2l5425:
 18246                           
 18247                           ;doprnt.c: 1478: {
 18248                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18249  001862  501D               	movf	i2printf@prec,w,c
 18250  001864  0D02               	mullw	2
 18251  001866  0E82               	movlw	low _dpowers
 18252  001868  24F3               	addwf	prodl,w,c
 18253  00186A  6EF6               	movwf	tblptrl,c
 18254  00186C  0EFB               	movlw	high _dpowers
 18255  00186E  20F4               	addwfc	prodh,w,c
 18256  001870  6EF7               	movwf	tblptrh,c
 18257  001872                     	if	1	;There are 3 active tblptr bytes
 18258  001872  6AF8               	clrf	tblptru,c
 18259  001874  0E00               	movlw	low (__mediumconst shr (0+16))
 18260  001876  22F8               	addwfc	tblptru,f,c
 18261  001878                     	endif
 18262  001878  0009               	tblrd		*+
 18263  00187A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 18264  00187E  000A               	tblrd		*-
 18265  001880  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 18266  001884  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 18267  001888  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 18268  00188C  EC71  F01C         	call	i2___lwdiv	;wreg free
 18269  001890  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 18270  001894  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 18271  001898  0E00               	movlw	0
 18272  00189A  6E04               	movwf	i2___lwmod@divisor+1,c
 18273  00189C  0E0A               	movlw	10
 18274  00189E  6E03               	movwf	i2___lwmod@divisor,c
 18275  0018A0  EC57  F01D         	call	i2___lwmod	;wreg free
 18276  0018A4  5001               	movf	?i2___lwmod,w,c
 18277  0018A6  0F30               	addlw	48
 18278  0018A8  6E27               	movwf	i2printf@c,c
 18279                           
 18280                           ;doprnt.c: 1523: }
 18281                           ;doprnt.c: 1524: (putch(c) );
 18282  0018AA  5027               	movf	i2printf@c,w,c
 18283  0018AC  EC1A  F020         	call	i2_putch
 18284  0018B0                     i2l5429:
 18285  0018B0  061D               	decf	i2printf@prec,f,c
 18286  0018B2  281D               	incf	i2printf@prec,w,c
 18287  0018B4  A4D8               	btfss	status,2,c
 18288  0018B6  D7D5               	goto	i2l5425
 18289  0018B8                     i2l5431:
 18290  0018B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 18291  0018BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18292  0018C0  4A0D               	infsnz	i2printf@f,f,c
 18293  0018C2  2A0E               	incf	i2printf@f+1,f,c
 18294  0018C4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18295  0018C4  6AF8               	clrf	tblptru,c
 18296  0018C6                     	endif
 18297  0018C6                     	if	0	;tblptru may be non-zero
 18298  0018C6                     	endif
 18299  0018C6  0008               	tblrd		*
 18300  0018C8  CFF5 F027          	movff	tablat,i2printf@c
 18301  0018CC  5027               	movf	i2printf@c,w,c
 18302  0018CE  B4D8               	btfsc	status,2,c
 18303  0018D0  0012               	return	
 18304  0018D2  D64E               	goto	i2l5301
 18305  0018D4                     __end_ofi2_printf:
 18306                           	opt stack 0
 18307                           pclatu	equ	0xFFB
 18308                           pclath	equ	0xFFA
 18309                           tblptru	equ	0xFF8
 18310                           tblptrh	equ	0xFF7
 18311                           tblptrl	equ	0xFF6
 18312                           tablat	equ	0xFF5
 18313                           prodh	equ	0xFF4
 18314                           prodl	equ	0xFF3
 18315                           intcon	equ	0xFF2
 18316                           intcon2	equ	0xFF1
 18317                           intcon3	equ	0xFF0
 18318                           indf0	equ	0xFEF
 18319                           postinc0	equ	0xFEE
 18320                           fsr0h	equ	0xFEA
 18321                           fsr0l	equ	0xFE9
 18322                           wreg	equ	0xFE8
 18323                           postdec1	equ	0xFE5
 18324                           fsr1h	equ	0xFE2
 18325                           fsr1l	equ	0xFE1
 18326                           indf2	equ	0xFDF
 18327                           postinc2	equ	0xFDE
 18328                           postdec2	equ	0xFDD
 18329                           fsr2h	equ	0xFDA
 18330                           fsr2l	equ	0xFD9
 18331                           status	equ	0xFD8
 18332                           
 18333 ;; *************** function i2_putch *****************
 18334 ;; Defined at:
 18335 ;;		line 20 in file "lcd.c"
 18336 ;; Parameters:    Size  Location     Type
 18337 ;;  data            1    wreg     unsigned char 
 18338 ;; Auto vars:     Size  Location     Type
 18339 ;;  data            1    2[COMRAM] unsigned char 
 18340 ;; Return value:  Size  Location     Type
 18341 ;;                  1    wreg      void 
 18342 ;; Registers used:
 18343 ;;		wreg, status,2, status,0, cstack
 18344 ;; Tracked objects:
 18345 ;;		On entry : 0/0
 18346 ;;		On exit  : 0/0
 18347 ;;		Unchanged: 0/0
 18348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18350 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18353 ;;Total ram usage:        1 bytes
 18354 ;; Hardware stack levels used:    1
 18355 ;; Hardware stack levels required when called:    1
 18356 ;; This function calls:
 18357 ;;		i2_lcdNibble
 18358 ;; This function is called by:
 18359 ;;		i2_printf
 18360 ;; This function uses a non-reentrant model
 18361 ;;
 18362                           
 18363                           	psect	text74
 18364  004034                     __ptext74:
 18365                           	opt stack 0
 18366  004034                     i2_putch:
 18367                           	opt stack 19
 18368                           
 18369                           ;incstack = 0
 18370                           ;i2putch@data stored from wreg
 18371  004034  6E03               	movwf	i2putch@data,c
 18372                           
 18373                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18374  004036  848C               	bsf	3980,2,c	;volatile
 18375                           
 18376                           ;lcd.c: 22: lcdNibble(data);
 18377  004038  5003               	movf	i2putch@data,w,c
 18378  00403A  EC46  F01C         	call	i2_lcdNibble
 18379  00403E  0012               	return		;funcret
 18380  004040                     __end_ofi2_putch:
 18381                           	opt stack 0
 18382                           pclatu	equ	0xFFB
 18383                           pclath	equ	0xFFA
 18384                           tblptru	equ	0xFF8
 18385                           tblptrh	equ	0xFF7
 18386                           tblptrl	equ	0xFF6
 18387                           tablat	equ	0xFF5
 18388                           prodh	equ	0xFF4
 18389                           prodl	equ	0xFF3
 18390                           intcon	equ	0xFF2
 18391                           intcon2	equ	0xFF1
 18392                           intcon3	equ	0xFF0
 18393                           indf0	equ	0xFEF
 18394                           postinc0	equ	0xFEE
 18395                           fsr0h	equ	0xFEA
 18396                           fsr0l	equ	0xFE9
 18397                           wreg	equ	0xFE8
 18398                           postdec1	equ	0xFE5
 18399                           fsr1h	equ	0xFE2
 18400                           fsr1l	equ	0xFE1
 18401                           indf2	equ	0xFDF
 18402                           postinc2	equ	0xFDE
 18403                           postdec2	equ	0xFDD
 18404                           fsr2h	equ	0xFDA
 18405                           fsr2l	equ	0xFD9
 18406                           status	equ	0xFD8
 18407                           
 18408 ;; *************** function i2_isdigit *****************
 18409 ;; Defined at:
 18410 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18411 ;; Parameters:    Size  Location     Type
 18412 ;;  c               1    wreg     unsigned char 
 18413 ;; Auto vars:     Size  Location     Type
 18414 ;;  c               1    2[COMRAM] unsigned char 
 18415 ;; Return value:  Size  Location     Type
 18416 ;;		None               void
 18417 ;; Registers used:
 18418 ;;		wreg, status,2, status,0
 18419 ;; Tracked objects:
 18420 ;;		On entry : 0/0
 18421 ;;		On exit  : 0/0
 18422 ;;		Unchanged: 0/0
 18423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18426 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18427 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18428 ;;Total ram usage:        3 bytes
 18429 ;; Hardware stack levels used:    1
 18430 ;; This function calls:
 18431 ;;		Nothing
 18432 ;; This function is called by:
 18433 ;;		i2_printf
 18434 ;; This function uses a non-reentrant model
 18435 ;;
 18436                           
 18437                           	psect	text75
 18438  003F8C                     __ptext75:
 18439                           	opt stack 0
 18440  003F8C                     i2_isdigit:
 18441                           	opt stack 20
 18442                           
 18443                           ;incstack = 0
 18444                           ;i2isdigit@c stored from wreg
 18445  003F8C  6E03               	movwf	i2isdigit@c,c
 18446  003F8E  0E00               	movlw	0
 18447  003F90  6E02               	movwf	i2_isdigit$1852,c
 18448  003F92  0E3A               	movlw	58
 18449  003F94  6003               	cpfslt	i2isdigit@c,c
 18450  003F96  D005               	goto	i2l5011
 18451  003F98  0E2F               	movlw	47
 18452  003F9A  6403               	cpfsgt	i2isdigit@c,c
 18453  003F9C  D002               	goto	i2l5011
 18454  003F9E  0E01               	movlw	1
 18455  003FA0  6E02               	movwf	i2_isdigit$1852,c
 18456  003FA2                     i2l5011:
 18457  003FA2  C002  F001         	movff	i2_isdigit$1852,??i2_isdigit
 18458  003FA6  3001               	rrcf	??i2_isdigit,w,c
 18459  003FA8  0012               	return	
 18460  003FAA                     __end_ofi2_isdigit:
 18461                           	opt stack 0
 18462                           pclatu	equ	0xFFB
 18463                           pclath	equ	0xFFA
 18464                           tblptru	equ	0xFF8
 18465                           tblptrh	equ	0xFF7
 18466                           tblptrl	equ	0xFF6
 18467                           tablat	equ	0xFF5
 18468                           prodh	equ	0xFF4
 18469                           prodl	equ	0xFF3
 18470                           intcon	equ	0xFF2
 18471                           intcon2	equ	0xFF1
 18472                           intcon3	equ	0xFF0
 18473                           indf0	equ	0xFEF
 18474                           postinc0	equ	0xFEE
 18475                           fsr0h	equ	0xFEA
 18476                           fsr0l	equ	0xFE9
 18477                           wreg	equ	0xFE8
 18478                           postdec1	equ	0xFE5
 18479                           fsr1h	equ	0xFE2
 18480                           fsr1l	equ	0xFE1
 18481                           indf2	equ	0xFDF
 18482                           postinc2	equ	0xFDE
 18483                           postdec2	equ	0xFDD
 18484                           fsr2h	equ	0xFDA
 18485                           fsr2l	equ	0xFD9
 18486                           status	equ	0xFD8
 18487                           
 18488 ;; *************** function i2___wmul *****************
 18489 ;; Defined at:
 18490 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18491 ;; Parameters:    Size  Location     Type
 18492 ;;  multiplier      2    0[COMRAM] unsigned int 
 18493 ;;  multiplicand    2    2[COMRAM] unsigned int 
 18494 ;; Auto vars:     Size  Location     Type
 18495 ;;  __wmul          2    4[COMRAM] unsigned int 
 18496 ;; Return value:  Size  Location     Type
 18497 ;;                  2    0[COMRAM] unsigned int 
 18498 ;; Registers used:
 18499 ;;		wreg, status,2, status,0, prodl, prodh
 18500 ;; Tracked objects:
 18501 ;;		On entry : 0/0
 18502 ;;		On exit  : 0/0
 18503 ;;		Unchanged: 0/0
 18504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18508 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18509 ;;Total ram usage:        6 bytes
 18510 ;; Hardware stack levels used:    1
 18511 ;; This function calls:
 18512 ;;		Nothing
 18513 ;; This function is called by:
 18514 ;;		_printSortTimer
 18515 ;;		_retrieveLog
 18516 ;;		i2_printf
 18517 ;; This function uses a non-reentrant model
 18518 ;;
 18519                           
 18520                           	psect	text76
 18521  003EB4                     __ptext76:
 18522                           	opt stack 0
 18523  003EB4                     i2___wmul:
 18524                           	opt stack 20
 18525                           
 18526                           ;incstack = 0
 18527  003EB4  5001               	movf	i2___wmul@multiplier,w,c
 18528  003EB6  0203               	mulwf	i2___wmul@multiplicand,c
 18529  003EB8  CFF3 F005          	movff	prodl,i2___wmul@product
 18530  003EBC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 18531  003EC0  5001               	movf	i2___wmul@multiplier,w,c
 18532  003EC2  0204               	mulwf	i2___wmul@multiplicand+1,c
 18533  003EC4  50F3               	movf	prodl,w,c
 18534  003EC6  2606               	addwf	i2___wmul@product+1,f,c
 18535  003EC8  5002               	movf	i2___wmul@multiplier+1,w,c
 18536  003ECA  0203               	mulwf	i2___wmul@multiplicand,c
 18537  003ECC  50F3               	movf	prodl,w,c
 18538  003ECE  2606               	addwf	i2___wmul@product+1,f,c
 18539  003ED0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 18540  003ED4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 18541  003ED8  0012               	return	
 18542  003EDA                     __end_ofi2___wmul:
 18543                           	opt stack 0
 18544                           pclatu	equ	0xFFB
 18545                           pclath	equ	0xFFA
 18546                           tblptru	equ	0xFF8
 18547                           tblptrh	equ	0xFF7
 18548                           tblptrl	equ	0xFF6
 18549                           tablat	equ	0xFF5
 18550                           prodh	equ	0xFF4
 18551                           prodl	equ	0xFF3
 18552                           intcon	equ	0xFF2
 18553                           intcon2	equ	0xFF1
 18554                           intcon3	equ	0xFF0
 18555                           indf0	equ	0xFEF
 18556                           postinc0	equ	0xFEE
 18557                           fsr0h	equ	0xFEA
 18558                           fsr0l	equ	0xFE9
 18559                           wreg	equ	0xFE8
 18560                           postdec1	equ	0xFE5
 18561                           fsr1h	equ	0xFE2
 18562                           fsr1l	equ	0xFE1
 18563                           indf2	equ	0xFDF
 18564                           postinc2	equ	0xFDE
 18565                           postdec2	equ	0xFDD
 18566                           fsr2h	equ	0xFDA
 18567                           fsr2l	equ	0xFD9
 18568                           status	equ	0xFD8
 18569                           
 18570 ;; *************** function i2___lwmod *****************
 18571 ;; Defined at:
 18572 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18573 ;; Parameters:    Size  Location     Type
 18574 ;;  dividend        2    0[COMRAM] unsigned int 
 18575 ;;  divisor         2    2[COMRAM] unsigned int 
 18576 ;; Auto vars:     Size  Location     Type
 18577 ;;  __lwmod         1    4[COMRAM] unsigned char 
 18578 ;; Return value:  Size  Location     Type
 18579 ;;                  2    0[COMRAM] unsigned int 
 18580 ;; Registers used:
 18581 ;;		wreg, status,2, status,0
 18582 ;; Tracked objects:
 18583 ;;		On entry : 0/0
 18584 ;;		On exit  : 0/0
 18585 ;;		Unchanged: 0/0
 18586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18591 ;;Total ram usage:        5 bytes
 18592 ;; Hardware stack levels used:    1
 18593 ;; This function calls:
 18594 ;;		Nothing
 18595 ;; This function is called by:
 18596 ;;		_printSortTimer
 18597 ;;		i2_printf
 18598 ;; This function uses a non-reentrant model
 18599 ;;
 18600                           
 18601                           	psect	text77
 18602  003AAE                     __ptext77:
 18603                           	opt stack 0
 18604  003AAE                     i2___lwmod:
 18605                           	opt stack 20
 18606                           
 18607                           ;incstack = 0
 18608  003AAE  5003               	movf	i2___lwmod@divisor,w,c
 18609  003AB0  1004               	iorwf	i2___lwmod@divisor+1,w,c
 18610  003AB2  B4D8               	btfsc	status,2,c
 18611  003AB4  D018               	goto	i2l1626
 18612  003AB6  0E01               	movlw	1
 18613  003AB8  6E05               	movwf	i2___lwmod@counter,c
 18614  003ABA  D004               	goto	i2l5043
 18615  003ABC                     i2l5041:
 18616  003ABC  90D8               	bcf	status,0,c
 18617  003ABE  3603               	rlcf	i2___lwmod@divisor,f,c
 18618  003AC0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 18619  003AC2  2A05               	incf	i2___lwmod@counter,f,c
 18620  003AC4                     i2l5043:
 18621  003AC4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 18622  003AC6  D7FA               	goto	i2l5041
 18623  003AC8                     i2l5045:
 18624  003AC8  5003               	movf	i2___lwmod@divisor,w,c
 18625  003ACA  5C01               	subwf	i2___lwmod@dividend,w,c
 18626  003ACC  5004               	movf	i2___lwmod@divisor+1,w,c
 18627  003ACE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 18628  003AD0  A0D8               	btfss	status,0,c
 18629  003AD2  D004               	goto	i2l5049
 18630  003AD4  5003               	movf	i2___lwmod@divisor,w,c
 18631  003AD6  5E01               	subwf	i2___lwmod@dividend,f,c
 18632  003AD8  5004               	movf	i2___lwmod@divisor+1,w,c
 18633  003ADA  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 18634  003ADC                     i2l5049:
 18635  003ADC  90D8               	bcf	status,0,c
 18636  003ADE  3204               	rrcf	i2___lwmod@divisor+1,f,c
 18637  003AE0  3203               	rrcf	i2___lwmod@divisor,f,c
 18638  003AE2  2E05               	decfsz	i2___lwmod@counter,f,c
 18639  003AE4  D7F1               	goto	i2l5045
 18640  003AE6                     i2l1626:
 18641  003AE6  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 18642  003AEA  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18643  003AEE  0012               	return		;funcret
 18644  003AF0                     __end_ofi2___lwmod:
 18645                           	opt stack 0
 18646                           pclatu	equ	0xFFB
 18647                           pclath	equ	0xFFA
 18648                           tblptru	equ	0xFF8
 18649                           tblptrh	equ	0xFF7
 18650                           tblptrl	equ	0xFF6
 18651                           tablat	equ	0xFF5
 18652                           prodh	equ	0xFF4
 18653                           prodl	equ	0xFF3
 18654                           intcon	equ	0xFF2
 18655                           intcon2	equ	0xFF1
 18656                           intcon3	equ	0xFF0
 18657                           indf0	equ	0xFEF
 18658                           postinc0	equ	0xFEE
 18659                           fsr0h	equ	0xFEA
 18660                           fsr0l	equ	0xFE9
 18661                           wreg	equ	0xFE8
 18662                           postdec1	equ	0xFE5
 18663                           fsr1h	equ	0xFE2
 18664                           fsr1l	equ	0xFE1
 18665                           indf2	equ	0xFDF
 18666                           postinc2	equ	0xFDE
 18667                           postdec2	equ	0xFDD
 18668                           fsr2h	equ	0xFDA
 18669                           fsr2l	equ	0xFD9
 18670                           status	equ	0xFD8
 18671                           
 18672 ;; *************** function i2___lwdiv *****************
 18673 ;; Defined at:
 18674 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;  dividend        2    5[COMRAM] unsigned int 
 18677 ;;  divisor         2    7[COMRAM] unsigned int 
 18678 ;; Auto vars:     Size  Location     Type
 18679 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 18680 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 18681 ;; Return value:  Size  Location     Type
 18682 ;;                  2    5[COMRAM] unsigned int 
 18683 ;; Registers used:
 18684 ;;		wreg, status,2, status,0
 18685 ;; Tracked objects:
 18686 ;;		On entry : 0/0
 18687 ;;		On exit  : 0/0
 18688 ;;		Unchanged: 0/0
 18689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18691 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18693 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18694 ;;Total ram usage:        7 bytes
 18695 ;; Hardware stack levels used:    1
 18696 ;; This function calls:
 18697 ;;		Nothing
 18698 ;; This function is called by:
 18699 ;;		_printSortTimer
 18700 ;;		i2_printf
 18701 ;; This function uses a non-reentrant model
 18702 ;;
 18703                           
 18704                           	psect	text78
 18705  0038E2                     __ptext78:
 18706                           	opt stack 0
 18707  0038E2                     i2___lwdiv:
 18708                           	opt stack 20
 18709                           
 18710                           ;incstack = 0
 18711  0038E2  0E00               	movlw	0
 18712  0038E4  6E0B               	movwf	i2___lwdiv@quotient+1,c
 18713  0038E6  0E00               	movlw	0
 18714  0038E8  6E0A               	movwf	i2___lwdiv@quotient,c
 18715  0038EA  5008               	movf	i2___lwdiv@divisor,w,c
 18716  0038EC  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 18717  0038EE  B4D8               	btfsc	status,2,c
 18718  0038F0  D01C               	goto	i2l1616
 18719  0038F2  0E01               	movlw	1
 18720  0038F4  6E0C               	movwf	i2___lwdiv@counter,c
 18721  0038F6  D004               	goto	i2l5023
 18722  0038F8                     i2l5021:
 18723  0038F8  90D8               	bcf	status,0,c
 18724  0038FA  3608               	rlcf	i2___lwdiv@divisor,f,c
 18725  0038FC  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 18726  0038FE  2A0C               	incf	i2___lwdiv@counter,f,c
 18727  003900                     i2l5023:
 18728  003900  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 18729  003902  D7FA               	goto	i2l5021
 18730  003904                     i2l5025:
 18731  003904  90D8               	bcf	status,0,c
 18732  003906  360A               	rlcf	i2___lwdiv@quotient,f,c
 18733  003908  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 18734  00390A  5008               	movf	i2___lwdiv@divisor,w,c
 18735  00390C  5C06               	subwf	i2___lwdiv@dividend,w,c
 18736  00390E  5009               	movf	i2___lwdiv@divisor+1,w,c
 18737  003910  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 18738  003912  A0D8               	btfss	status,0,c
 18739  003914  D005               	goto	i2l5033
 18740  003916  5008               	movf	i2___lwdiv@divisor,w,c
 18741  003918  5E06               	subwf	i2___lwdiv@dividend,f,c
 18742  00391A  5009               	movf	i2___lwdiv@divisor+1,w,c
 18743  00391C  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 18744  00391E  800A               	bsf	i2___lwdiv@quotient,0,c
 18745  003920                     i2l5033:
 18746  003920  90D8               	bcf	status,0,c
 18747  003922  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 18748  003924  3208               	rrcf	i2___lwdiv@divisor,f,c
 18749  003926  2E0C               	decfsz	i2___lwdiv@counter,f,c
 18750  003928  D7ED               	goto	i2l5025
 18751  00392A                     i2l1616:
 18752  00392A  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18753  00392E  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18754  003932  0012               	return		;funcret
 18755  003934                     __end_ofi2___lwdiv:
 18756                           	opt stack 0
 18757                           pclatu	equ	0xFFB
 18758                           pclath	equ	0xFFA
 18759                           tblptru	equ	0xFF8
 18760                           tblptrh	equ	0xFF7
 18761                           tblptrl	equ	0xFF6
 18762                           tablat	equ	0xFF5
 18763                           prodh	equ	0xFF4
 18764                           prodl	equ	0xFF3
 18765                           intcon	equ	0xFF2
 18766                           intcon2	equ	0xFF1
 18767                           intcon3	equ	0xFF0
 18768                           indf0	equ	0xFEF
 18769                           postinc0	equ	0xFEE
 18770                           fsr0h	equ	0xFEA
 18771                           fsr0l	equ	0xFE9
 18772                           wreg	equ	0xFE8
 18773                           postdec1	equ	0xFE5
 18774                           fsr1h	equ	0xFE2
 18775                           fsr1l	equ	0xFE1
 18776                           indf2	equ	0xFDF
 18777                           postinc2	equ	0xFDE
 18778                           postdec2	equ	0xFDD
 18779                           fsr2h	equ	0xFDA
 18780                           fsr2l	equ	0xFD9
 18781                           status	equ	0xFD8
 18782                           
 18783 ;; *************** function i2_lcdInst *****************
 18784 ;; Defined at:
 18785 ;;		line 15 in file "lcd.c"
 18786 ;; Parameters:    Size  Location     Type
 18787 ;;  data            1    wreg     unsigned char 
 18788 ;; Auto vars:     Size  Location     Type
 18789 ;;  data            1    2[COMRAM] unsigned char 
 18790 ;; Return value:  Size  Location     Type
 18791 ;;                  1    wreg      void 
 18792 ;; Registers used:
 18793 ;;		wreg, status,2, status,0, cstack
 18794 ;; Tracked objects:
 18795 ;;		On entry : 0/0
 18796 ;;		On exit  : 0/0
 18797 ;;		Unchanged: 0/0
 18798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18800 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18802 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18803 ;;Total ram usage:        1 bytes
 18804 ;; Hardware stack levels used:    1
 18805 ;; Hardware stack levels required when called:    1
 18806 ;; This function calls:
 18807 ;;		i2_lcdNibble
 18808 ;; This function is called by:
 18809 ;;		_change_state_to_menu_11
 18810 ;;		_change_state_to_menu_23
 18811 ;;		_change_state_to_logs_11
 18812 ;;		_change_state_to_logs_12
 18813 ;;		_change_state_to_logs_22
 18814 ;;		_change_state_to_logs_23
 18815 ;;		_change_state_to_logs_33
 18816 ;;		_change_state_to_logs_34
 18817 ;;		_printSortTimer
 18818 ;;		i2_change_state_to_menu_start
 18819 ;;		i2_change_state_to_menu_12
 18820 ;;		i2_change_state_to_menu_22
 18821 ;;		i2_printRTC
 18822 ;; This function uses a non-reentrant model
 18823 ;;
 18824                           
 18825                           	psect	text79
 18826  004040                     __ptext79:
 18827                           	opt stack 0
 18828  004040                     i2_lcdInst:
 18829                           	opt stack 19
 18830                           
 18831                           ;incstack = 0
 18832                           ;i2lcdInst@data stored from wreg
 18833  004040  6E03               	movwf	i2lcdInst@data,c
 18834                           
 18835                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18836  004042  948C               	bcf	3980,2,c	;volatile
 18837                           
 18838                           ;lcd.c: 17: lcdNibble(data);
 18839  004044  5003               	movf	i2lcdInst@data,w,c
 18840  004046  EC46  F01C         	call	i2_lcdNibble
 18841  00404A  0012               	return		;funcret
 18842  00404C                     __end_ofi2_lcdInst:
 18843                           	opt stack 0
 18844                           pclatu	equ	0xFFB
 18845                           pclath	equ	0xFFA
 18846                           tblptru	equ	0xFF8
 18847                           tblptrh	equ	0xFF7
 18848                           tblptrl	equ	0xFF6
 18849                           tablat	equ	0xFF5
 18850                           prodh	equ	0xFF4
 18851                           prodl	equ	0xFF3
 18852                           intcon	equ	0xFF2
 18853                           intcon2	equ	0xFF1
 18854                           intcon3	equ	0xFF0
 18855                           indf0	equ	0xFEF
 18856                           postinc0	equ	0xFEE
 18857                           fsr0h	equ	0xFEA
 18858                           fsr0l	equ	0xFE9
 18859                           wreg	equ	0xFE8
 18860                           postdec1	equ	0xFE5
 18861                           fsr1h	equ	0xFE2
 18862                           fsr1l	equ	0xFE1
 18863                           indf2	equ	0xFDF
 18864                           postinc2	equ	0xFDE
 18865                           postdec2	equ	0xFDD
 18866                           fsr2h	equ	0xFDA
 18867                           fsr2l	equ	0xFD9
 18868                           status	equ	0xFD8
 18869                           
 18870 ;; *************** function i2_lcdNibble *****************
 18871 ;; Defined at:
 18872 ;;		line 25 in file "lcd.c"
 18873 ;; Parameters:    Size  Location     Type
 18874 ;;  data            1    wreg     unsigned char 
 18875 ;; Auto vars:     Size  Location     Type
 18876 ;;  data            1    1[COMRAM] unsigned char 
 18877 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 18878 ;; Return value:  Size  Location     Type
 18879 ;;                  1    wreg      void 
 18880 ;; Registers used:
 18881 ;;		wreg, status,2, status,0
 18882 ;; Tracked objects:
 18883 ;;		On entry : 0/0
 18884 ;;		On exit  : 0/0
 18885 ;;		Unchanged: 0/0
 18886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18891 ;;Total ram usage:        2 bytes
 18892 ;; Hardware stack levels used:    1
 18893 ;; This function calls:
 18894 ;;		Nothing
 18895 ;; This function is called by:
 18896 ;;		i2_lcdInst
 18897 ;;		i2_putch
 18898 ;; This function uses a non-reentrant model
 18899 ;;
 18900                           
 18901                           	psect	text80
 18902  00388C                     __ptext80:
 18903                           	opt stack 0
 18904  00388C                     i2_lcdNibble:
 18905                           	opt stack 19
 18906                           
 18907                           ;incstack = 0
 18908                           ;i2lcdNibble@data stored from wreg
 18909  00388C  6E02               	movwf	i2lcdNibble@data,c
 18910                           
 18911                           ;lcd.c: 27: char temp = data & 0xF0;
 18912  00388E  5002               	movf	i2lcdNibble@data,w,c
 18913  003890  0BF0               	andlw	240
 18914  003892  6E01               	movwf	i2lcdNibble@temp,c
 18915                           
 18916                           ;lcd.c: 28: LATD = LATD & 0x0F;
 18917  003894  508C               	movf	3980,w,c	;volatile
 18918  003896  0B0F               	andlw	15
 18919  003898  6E8C               	movwf	3980,c	;volatile
 18920                           
 18921                           ;lcd.c: 29: LATD = temp | LATD;
 18922  00389A  5001               	movf	i2lcdNibble@temp,w,c
 18923  00389C  108C               	iorwf	3980,w,c	;volatile
 18924  00389E  6E8C               	movwf	3980,c	;volatile
 18925                           
 18926                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 18927  0038A0  868C               	bsf	3980,3,c	;volatile
 18928                           
 18929                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18930  0038A2  0E42               	movlw	66
 18931  0038A4                     i2u739_47:
 18932  0038A4  2EE8               	decfsz	wreg,f,c
 18933  0038A6  D7FE               	bra	i2u739_47
 18934  0038A8  D000               	nop2	
 18935                           
 18936                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 18937  0038AA  968C               	bcf	3980,3,c	;volatile
 18938                           
 18939                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18940  0038AC  0E42               	movlw	66
 18941  0038AE                     i2u740_47:
 18942  0038AE  2EE8               	decfsz	wreg,f,c
 18943  0038B0  D7FE               	bra	i2u740_47
 18944  0038B2  D000               	nop2	
 18945                           
 18946                           ;lcd.c: 36: data = data << 4;
 18947  0038B4  3802               	swapf	i2lcdNibble@data,w,c
 18948  0038B6  0BF0               	andlw	240
 18949  0038B8  6E02               	movwf	i2lcdNibble@data,c
 18950                           
 18951                           ;lcd.c: 38: temp = data & 0xF0;
 18952  0038BA  5002               	movf	i2lcdNibble@data,w,c
 18953  0038BC  0BF0               	andlw	240
 18954  0038BE  6E01               	movwf	i2lcdNibble@temp,c
 18955                           
 18956                           ;lcd.c: 39: LATD = LATD & 0x0F;
 18957  0038C0  508C               	movf	3980,w,c	;volatile
 18958  0038C2  0B0F               	andlw	15
 18959  0038C4  6E8C               	movwf	3980,c	;volatile
 18960                           
 18961                           ;lcd.c: 40: LATD = temp | LATD;
 18962  0038C6  5001               	movf	i2lcdNibble@temp,w,c
 18963  0038C8  108C               	iorwf	3980,w,c	;volatile
 18964  0038CA  6E8C               	movwf	3980,c	;volatile
 18965                           
 18966                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 18967  0038CC  868C               	bsf	3980,3,c	;volatile
 18968                           
 18969                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18970  0038CE  0E42               	movlw	66
 18971  0038D0                     i2u741_47:
 18972  0038D0  2EE8               	decfsz	wreg,f,c
 18973  0038D2  D7FE               	bra	i2u741_47
 18974  0038D4  D000               	nop2	
 18975                           
 18976                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 18977  0038D6  968C               	bcf	3980,3,c	;volatile
 18978                           
 18979                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18980  0038D8  0E42               	movlw	66
 18981  0038DA                     i2u742_47:
 18982  0038DA  2EE8               	decfsz	wreg,f,c
 18983  0038DC  D7FE               	bra	i2u742_47
 18984  0038DE  D000               	nop2	
 18985  0038E0  0012               	return		;funcret
 18986  0038E2                     __end_ofi2_lcdNibble:
 18987                           	opt stack 0
 18988                           pclatu	equ	0xFFB
 18989                           pclath	equ	0xFFA
 18990                           tblptru	equ	0xFF8
 18991                           tblptrh	equ	0xFF7
 18992                           tblptrl	equ	0xFF6
 18993                           tablat	equ	0xFF5
 18994                           prodh	equ	0xFF4
 18995                           prodl	equ	0xFF3
 18996                           intcon	equ	0xFF2
 18997                           intcon2	equ	0xFF1
 18998                           intcon3	equ	0xFF0
 18999                           indf0	equ	0xFEF
 19000                           postinc0	equ	0xFEE
 19001                           fsr0h	equ	0xFEA
 19002                           fsr0l	equ	0xFE9
 19003                           wreg	equ	0xFE8
 19004                           postdec1	equ	0xFE5
 19005                           fsr1h	equ	0xFE2
 19006                           fsr1l	equ	0xFE1
 19007                           indf2	equ	0xFDF
 19008                           postinc2	equ	0xFDE
 19009                           postdec2	equ	0xFDD
 19010                           fsr2h	equ	0xFDA
 19011                           fsr2l	equ	0xFD9
 19012                           status	equ	0xFD8
 19013                           
 19014 ;; *************** function i2_getRTC *****************
 19015 ;; Defined at:
 19016 ;;		line 44 in file "RTC.c"
 19017 ;; Parameters:    Size  Location     Type
 19018 ;;		None
 19019 ;; Auto vars:     Size  Location     Type
 19020 ;;  getRTC          2    3[COMRAM] int 
 19021 ;; Return value:  Size  Location     Type
 19022 ;;                  1    wreg      void 
 19023 ;; Registers used:
 19024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19025 ;; Tracked objects:
 19026 ;;		On entry : 0/0
 19027 ;;		On exit  : 0/0
 19028 ;;		Unchanged: 0/0
 19029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19033 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19034 ;;Total ram usage:        2 bytes
 19035 ;; Hardware stack levels used:    1
 19036 ;; Hardware stack levels required when called:    2
 19037 ;; This function calls:
 19038 ;;		i2_I2C_Master_Read
 19039 ;;		i2_I2C_Master_Start
 19040 ;;		i2_I2C_Master_Stop
 19041 ;;		i2_I2C_Master_Write
 19042 ;; This function is called by:
 19043 ;;		_printSortTimer
 19044 ;;		i2_printRTC
 19045 ;; This function uses a non-reentrant model
 19046 ;;
 19047                           
 19048                           	psect	text81
 19049  003572                     __ptext81:
 19050                           	opt stack 0
 19051  003572                     i2_getRTC:
 19052                           	opt stack 18
 19053                           
 19054                           ;RTC.c: 48: I2C_Master_Start();
 19055                           
 19056                           ;incstack = 0
 19057  003572  EC40  F020         	call	i2_I2C_Master_Start	;wreg free
 19058                           
 19059                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 19060  003576  0E00               	movlw	0
 19061  003578  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19062  00357A  0ED0               	movlw	208
 19063  00357C  6E02               	movwf	i2I2C_Master_Write@d,c
 19064  00357E  EC2B  F020         	call	i2_I2C_Master_Write	;wreg free
 19065                           
 19066                           ;RTC.c: 50: I2C_Master_Write(0x00);
 19067  003582  0E00               	movlw	0
 19068  003584  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19069  003586  0E00               	movlw	0
 19070  003588  6E02               	movwf	i2I2C_Master_Write@d,c
 19071  00358A  EC2B  F020         	call	i2_I2C_Master_Write	;wreg free
 19072                           
 19073                           ;RTC.c: 51: I2C_Master_Stop();
 19074  00358E  EC3C  F020         	call	i2_I2C_Master_Stop	;wreg free
 19075                           
 19076                           ;RTC.c: 54: I2C_Master_Start();
 19077  003592  EC40  F020         	call	i2_I2C_Master_Start	;wreg free
 19078                           
 19079                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 19080  003596  0E00               	movlw	0
 19081  003598  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19082  00359A  0ED1               	movlw	209
 19083  00359C  6E02               	movwf	i2I2C_Master_Write@d,c
 19084  00359E  EC2B  F020         	call	i2_I2C_Master_Write	;wreg free
 19085                           
 19086                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 19087  0035A2  0E00               	movlw	0
 19088  0035A4  6E05               	movwf	i2getRTC@i+1,c
 19089  0035A6  0E00               	movlw	0
 19090  0035A8  6E04               	movwf	i2getRTC@i,c
 19091  0035AA                     i2l5273:
 19092  0035AA  BE05               	btfsc	i2getRTC@i+1,7,c
 19093  0035AC  D006               	goto	i2l5277
 19094  0035AE  5005               	movf	i2getRTC@i+1,w,c
 19095  0035B0  E111               	bnz	i2l5283
 19096  0035B2  0E06               	movlw	6
 19097  0035B4  5C04               	subwf	i2getRTC@i,w,c
 19098  0035B6  B0D8               	btfsc	status,0,c
 19099  0035B8  D00D               	goto	i2l5283
 19100  0035BA                     i2l5277:
 19101                           
 19102                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 19103  0035BA  0E24               	movlw	low _time
 19104  0035BC  2404               	addwf	i2getRTC@i,w,c
 19105  0035BE  6ED9               	movwf	fsr2l,c
 19106  0035C0  0E01               	movlw	high _time
 19107  0035C2  2005               	addwfc	i2getRTC@i+1,w,c
 19108  0035C4  6EDA               	movwf	fsr2h,c
 19109  0035C6  0E01               	movlw	1
 19110  0035C8  EC6D  F01F         	call	i2_I2C_Master_Read
 19111  0035CC  6EDF               	movwf	indf2,c
 19112  0035CE  4A04               	infsnz	i2getRTC@i,f,c
 19113  0035D0  2A05               	incf	i2getRTC@i+1,f,c
 19114  0035D2  D7EB               	goto	i2l5273
 19115  0035D4                     i2l5283:
 19116                           
 19117                           ;RTC.c: 58: }
 19118                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 19119  0035D4  0E00               	movlw	0
 19120  0035D6  EC6D  F01F         	call	i2_I2C_Master_Read
 19121  0035DA  0101               	movlb	1	; () banked
 19122  0035DC  6F2A               	movwf	(_time+6)& (0+255),b
 19123                           
 19124                           ;RTC.c: 60: I2C_Master_Stop();
 19125  0035DE  EC3C  F020         	call	i2_I2C_Master_Stop	;wreg free
 19126  0035E2  0012               	return		;funcret
 19127  0035E4                     __end_ofi2_getRTC:
 19128                           	opt stack 0
 19129                           pclatu	equ	0xFFB
 19130                           pclath	equ	0xFFA
 19131                           tblptru	equ	0xFF8
 19132                           tblptrh	equ	0xFF7
 19133                           tblptrl	equ	0xFF6
 19134                           tablat	equ	0xFF5
 19135                           prodh	equ	0xFF4
 19136                           prodl	equ	0xFF3
 19137                           intcon	equ	0xFF2
 19138                           intcon2	equ	0xFF1
 19139                           intcon3	equ	0xFF0
 19140                           indf0	equ	0xFEF
 19141                           postinc0	equ	0xFEE
 19142                           fsr0h	equ	0xFEA
 19143                           fsr0l	equ	0xFE9
 19144                           wreg	equ	0xFE8
 19145                           postdec1	equ	0xFE5
 19146                           fsr1h	equ	0xFE2
 19147                           fsr1l	equ	0xFE1
 19148                           indf2	equ	0xFDF
 19149                           postinc2	equ	0xFDE
 19150                           postdec2	equ	0xFDD
 19151                           fsr2h	equ	0xFDA
 19152                           fsr2l	equ	0xFD9
 19153                           status	equ	0xFD8
 19154                           
 19155 ;; *************** function i2_I2C_Master_Write *****************
 19156 ;; Defined at:
 19157 ;;		line 49 in file "I2C.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;  d               2    1[COMRAM] unsigned int 
 19160 ;; Auto vars:     Size  Location     Type
 19161 ;;		None
 19162 ;; Return value:  Size  Location     Type
 19163 ;;                  1    wreg      void 
 19164 ;; Registers used:
 19165 ;;		wreg, status,2, status,0, cstack
 19166 ;; Tracked objects:
 19167 ;;		On entry : 0/0
 19168 ;;		On exit  : 0/0
 19169 ;;		Unchanged: 0/0
 19170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19174 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;Total ram usage:        2 bytes
 19176 ;; Hardware stack levels used:    1
 19177 ;; Hardware stack levels required when called:    1
 19178 ;; This function calls:
 19179 ;;		i2_I2C_Master_Wait
 19180 ;; This function is called by:
 19181 ;;		i2_getRTC
 19182 ;; This function uses a non-reentrant model
 19183 ;;
 19184                           
 19185                           	psect	text82
 19186  004056                     __ptext82:
 19187                           	opt stack 0
 19188  004056                     i2_I2C_Master_Write:
 19189                           	opt stack 18
 19190                           
 19191                           ;I2C.c: 51: I2C_Master_Wait();
 19192                           
 19193                           ;incstack = 0
 19194  004056  EC01  F020         	call	i2_I2C_Master_Wait	;wreg free
 19195                           
 19196                           ;I2C.c: 52: SSPBUF = d;
 19197  00405A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 19198  00405E  0012               	return		;funcret
 19199  004060                     __end_ofi2_I2C_Master_Write:
 19200                           	opt stack 0
 19201                           pclatu	equ	0xFFB
 19202                           pclath	equ	0xFFA
 19203                           tblptru	equ	0xFF8
 19204                           tblptrh	equ	0xFF7
 19205                           tblptrl	equ	0xFF6
 19206                           tablat	equ	0xFF5
 19207                           prodh	equ	0xFF4
 19208                           prodl	equ	0xFF3
 19209                           intcon	equ	0xFF2
 19210                           intcon2	equ	0xFF1
 19211                           intcon3	equ	0xFF0
 19212                           indf0	equ	0xFEF
 19213                           postinc0	equ	0xFEE
 19214                           fsr0h	equ	0xFEA
 19215                           fsr0l	equ	0xFE9
 19216                           wreg	equ	0xFE8
 19217                           postdec1	equ	0xFE5
 19218                           fsr1h	equ	0xFE2
 19219                           fsr1l	equ	0xFE1
 19220                           indf2	equ	0xFDF
 19221                           postinc2	equ	0xFDE
 19222                           postdec2	equ	0xFDD
 19223                           fsr2h	equ	0xFDA
 19224                           fsr2l	equ	0xFD9
 19225                           status	equ	0xFD8
 19226                           
 19227 ;; *************** function i2_I2C_Master_Stop *****************
 19228 ;; Defined at:
 19229 ;;		line 43 in file "I2C.c"
 19230 ;; Parameters:    Size  Location     Type
 19231 ;;		None
 19232 ;; Auto vars:     Size  Location     Type
 19233 ;;		None
 19234 ;; Return value:  Size  Location     Type
 19235 ;;                  1    wreg      void 
 19236 ;; Registers used:
 19237 ;;		wreg, status,2, status,0, cstack
 19238 ;; Tracked objects:
 19239 ;;		On entry : 0/0
 19240 ;;		On exit  : 0/0
 19241 ;;		Unchanged: 0/0
 19242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19247 ;;Total ram usage:        0 bytes
 19248 ;; Hardware stack levels used:    1
 19249 ;; Hardware stack levels required when called:    1
 19250 ;; This function calls:
 19251 ;;		i2_I2C_Master_Wait
 19252 ;; This function is called by:
 19253 ;;		i2_getRTC
 19254 ;; This function uses a non-reentrant model
 19255 ;;
 19256                           
 19257                           	psect	text83
 19258  004078                     __ptext83:
 19259                           	opt stack 0
 19260  004078                     i2_I2C_Master_Stop:
 19261                           	opt stack 18
 19262                           
 19263                           ;I2C.c: 45: I2C_Master_Wait();
 19264                           
 19265                           ;incstack = 0
 19266  004078  EC01  F020         	call	i2_I2C_Master_Wait	;wreg free
 19267                           
 19268                           ;I2C.c: 46: PEN = 1;
 19269  00407C  84C5               	bsf	4037,2,c	;volatile
 19270  00407E  0012               	return		;funcret
 19271  004080                     __end_ofi2_I2C_Master_Stop:
 19272                           	opt stack 0
 19273                           pclatu	equ	0xFFB
 19274                           pclath	equ	0xFFA
 19275                           tblptru	equ	0xFF8
 19276                           tblptrh	equ	0xFF7
 19277                           tblptrl	equ	0xFF6
 19278                           tablat	equ	0xFF5
 19279                           prodh	equ	0xFF4
 19280                           prodl	equ	0xFF3
 19281                           intcon	equ	0xFF2
 19282                           intcon2	equ	0xFF1
 19283                           intcon3	equ	0xFF0
 19284                           indf0	equ	0xFEF
 19285                           postinc0	equ	0xFEE
 19286                           fsr0h	equ	0xFEA
 19287                           fsr0l	equ	0xFE9
 19288                           wreg	equ	0xFE8
 19289                           postdec1	equ	0xFE5
 19290                           fsr1h	equ	0xFE2
 19291                           fsr1l	equ	0xFE1
 19292                           indf2	equ	0xFDF
 19293                           postinc2	equ	0xFDE
 19294                           postdec2	equ	0xFDD
 19295                           fsr2h	equ	0xFDA
 19296                           fsr2l	equ	0xFD9
 19297                           status	equ	0xFD8
 19298                           
 19299 ;; *************** function i2_I2C_Master_Start *****************
 19300 ;; Defined at:
 19301 ;;		line 31 in file "I2C.c"
 19302 ;; Parameters:    Size  Location     Type
 19303 ;;		None
 19304 ;; Auto vars:     Size  Location     Type
 19305 ;;		None
 19306 ;; Return value:  Size  Location     Type
 19307 ;;                  1    wreg      void 
 19308 ;; Registers used:
 19309 ;;		wreg, status,2, status,0, cstack
 19310 ;; Tracked objects:
 19311 ;;		On entry : 0/0
 19312 ;;		On exit  : 0/0
 19313 ;;		Unchanged: 0/0
 19314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19319 ;;Total ram usage:        0 bytes
 19320 ;; Hardware stack levels used:    1
 19321 ;; Hardware stack levels required when called:    1
 19322 ;; This function calls:
 19323 ;;		i2_I2C_Master_Wait
 19324 ;; This function is called by:
 19325 ;;		i2_getRTC
 19326 ;; This function uses a non-reentrant model
 19327 ;;
 19328                           
 19329                           	psect	text84
 19330  004080                     __ptext84:
 19331                           	opt stack 0
 19332  004080                     i2_I2C_Master_Start:
 19333                           	opt stack 18
 19334                           
 19335                           ;I2C.c: 33: I2C_Master_Wait();
 19336                           
 19337                           ;incstack = 0
 19338  004080  EC01  F020         	call	i2_I2C_Master_Wait	;wreg free
 19339                           
 19340                           ;I2C.c: 34: SEN = 1;
 19341  004084  80C5               	bsf	4037,0,c	;volatile
 19342  004086  0012               	return		;funcret
 19343  004088                     __end_ofi2_I2C_Master_Start:
 19344                           	opt stack 0
 19345                           pclatu	equ	0xFFB
 19346                           pclath	equ	0xFFA
 19347                           tblptru	equ	0xFF8
 19348                           tblptrh	equ	0xFF7
 19349                           tblptrl	equ	0xFF6
 19350                           tablat	equ	0xFF5
 19351                           prodh	equ	0xFF4
 19352                           prodl	equ	0xFF3
 19353                           intcon	equ	0xFF2
 19354                           intcon2	equ	0xFF1
 19355                           intcon3	equ	0xFF0
 19356                           indf0	equ	0xFEF
 19357                           postinc0	equ	0xFEE
 19358                           fsr0h	equ	0xFEA
 19359                           fsr0l	equ	0xFE9
 19360                           wreg	equ	0xFE8
 19361                           postdec1	equ	0xFE5
 19362                           fsr1h	equ	0xFE2
 19363                           fsr1l	equ	0xFE1
 19364                           indf2	equ	0xFDF
 19365                           postinc2	equ	0xFDE
 19366                           postdec2	equ	0xFDD
 19367                           fsr2h	equ	0xFDA
 19368                           fsr2l	equ	0xFD9
 19369                           status	equ	0xFD8
 19370                           
 19371 ;; *************** function i2_I2C_Master_Read *****************
 19372 ;; Defined at:
 19373 ;;		line 55 in file "I2C.c"
 19374 ;; Parameters:    Size  Location     Type
 19375 ;;  a               1    wreg     unsigned char 
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;  a               1    1[COMRAM] unsigned char 
 19378 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19379 ;; Return value:  Size  Location     Type
 19380 ;;                  1    wreg      unsigned char 
 19381 ;; Registers used:
 19382 ;;		wreg, status,2, status,0, cstack
 19383 ;; Tracked objects:
 19384 ;;		On entry : 0/0
 19385 ;;		On exit  : 0/0
 19386 ;;		Unchanged: 0/0
 19387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19391 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19392 ;;Total ram usage:        2 bytes
 19393 ;; Hardware stack levels used:    1
 19394 ;; Hardware stack levels required when called:    1
 19395 ;; This function calls:
 19396 ;;		i2_I2C_Master_Wait
 19397 ;; This function is called by:
 19398 ;;		i2_getRTC
 19399 ;; This function uses a non-reentrant model
 19400 ;;
 19401                           
 19402                           	psect	text85
 19403  003EDA                     __ptext85:
 19404                           	opt stack 0
 19405  003EDA                     i2_I2C_Master_Read:
 19406                           	opt stack 18
 19407                           
 19408                           ;incstack = 0
 19409                           ;i2I2C_Master_Read@a stored from wreg
 19410  003EDA  6E02               	movwf	i2I2C_Master_Read@a,c
 19411                           
 19412                           ;I2C.c: 57: unsigned char temp;
 19413                           ;I2C.c: 58: I2C_Master_Wait();
 19414  003EDC  EC01  F020         	call	i2_I2C_Master_Wait	;wreg free
 19415                           
 19416                           ;I2C.c: 59: RCEN = 1;
 19417  003EE0  86C5               	bsf	4037,3,c	;volatile
 19418                           
 19419                           ;I2C.c: 60: I2C_Master_Wait();
 19420  003EE2  EC01  F020         	call	i2_I2C_Master_Wait	;wreg free
 19421                           
 19422                           ;I2C.c: 61: temp = SSPBUF;
 19423  003EE6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 19424                           
 19425                           ;I2C.c: 62: I2C_Master_Wait();
 19426  003EEA  EC01  F020         	call	i2_I2C_Master_Wait	;wreg free
 19427                           
 19428                           ;I2C.c: 63: ACKDT = (a)?0:1;
 19429  003EEE  5002               	movf	i2I2C_Master_Read@a,w,c
 19430  003EF0  A4D8               	btfss	status,2,c
 19431  003EF2  D002               	goto	i2u340_40
 19432  003EF4  8AC5               	bsf	4037,5,c	;volatile
 19433  003EF6  D001               	goto	i2l4987
 19434  003EF8                     i2u340_40:
 19435  003EF8  9AC5               	bcf	4037,5,c	;volatile
 19436  003EFA                     i2l4987:
 19437                           
 19438                           ;I2C.c: 64: ACKEN = 1;
 19439  003EFA  88C5               	bsf	4037,4,c	;volatile
 19440                           
 19441                           ;I2C.c: 65: return temp;
 19442  003EFC  5003               	movf	i2I2C_Master_Read@temp,w,c
 19443  003EFE  0012               	return	
 19444  003F00                     __end_ofi2_I2C_Master_Read:
 19445                           	opt stack 0
 19446                           pclatu	equ	0xFFB
 19447                           pclath	equ	0xFFA
 19448                           tblptru	equ	0xFF8
 19449                           tblptrh	equ	0xFF7
 19450                           tblptrl	equ	0xFF6
 19451                           tablat	equ	0xFF5
 19452                           prodh	equ	0xFF4
 19453                           prodl	equ	0xFF3
 19454                           intcon	equ	0xFF2
 19455                           intcon2	equ	0xFF1
 19456                           intcon3	equ	0xFF0
 19457                           indf0	equ	0xFEF
 19458                           postinc0	equ	0xFEE
 19459                           fsr0h	equ	0xFEA
 19460                           fsr0l	equ	0xFE9
 19461                           wreg	equ	0xFE8
 19462                           postdec1	equ	0xFE5
 19463                           fsr1h	equ	0xFE2
 19464                           fsr1l	equ	0xFE1
 19465                           indf2	equ	0xFDF
 19466                           postinc2	equ	0xFDE
 19467                           postdec2	equ	0xFDD
 19468                           fsr2h	equ	0xFDA
 19469                           fsr2l	equ	0xFD9
 19470                           status	equ	0xFD8
 19471                           
 19472 ;; *************** function i2_I2C_Master_Wait *****************
 19473 ;; Defined at:
 19474 ;;		line 26 in file "I2C.c"
 19475 ;; Parameters:    Size  Location     Type
 19476 ;;		None
 19477 ;; Auto vars:     Size  Location     Type
 19478 ;;		None
 19479 ;; Return value:  Size  Location     Type
 19480 ;;                  1    wreg      void 
 19481 ;; Registers used:
 19482 ;;		wreg, status,2, status,0
 19483 ;; Tracked objects:
 19484 ;;		On entry : 0/0
 19485 ;;		On exit  : 0/0
 19486 ;;		Unchanged: 0/0
 19487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19492 ;;Total ram usage:        1 bytes
 19493 ;; Hardware stack levels used:    1
 19494 ;; This function calls:
 19495 ;;		Nothing
 19496 ;; This function is called by:
 19497 ;;		i2_I2C_Master_Start
 19498 ;;		i2_I2C_Master_Stop
 19499 ;;		i2_I2C_Master_Write
 19500 ;;		i2_I2C_Master_Read
 19501 ;; This function uses a non-reentrant model
 19502 ;;
 19503                           
 19504                           	psect	text86
 19505  004002                     __ptext86:
 19506                           	opt stack 0
 19507  004002                     i2_I2C_Master_Wait:
 19508                           	opt stack 18
 19509  004002                     i2l66:
 19510  004002  B4C7               	btfsc	4039,2,c	;volatile
 19511  004004  D7FE               	goto	i2l66
 19512  004006  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 19513  00400A  0E1F               	movlw	31
 19514  00400C  1601               	andwf	??i2_I2C_Master_Wait,f,c
 19515  00400E  B4D8               	btfsc	status,2,c
 19516  004010  0012               	return	
 19517  004012  D7F7               	goto	i2l66
 19518  004014                     __end_ofi2_I2C_Master_Wait:
 19519                           	opt stack 0
 19520                           pclatu	equ	0xFFB
 19521                           pclath	equ	0xFFA
 19522                           tblptru	equ	0xFF8
 19523                           tblptrh	equ	0xFF7
 19524                           tblptrl	equ	0xFF6
 19525                           tablat	equ	0xFF5
 19526                           prodh	equ	0xFF4
 19527                           prodl	equ	0xFF3
 19528                           intcon	equ	0xFF2
 19529                           intcon2	equ	0xFF1
 19530                           intcon3	equ	0xFF0
 19531                           indf0	equ	0xFEF
 19532                           postinc0	equ	0xFEE
 19533                           fsr0h	equ	0xFEA
 19534                           fsr0l	equ	0xFE9
 19535                           wreg	equ	0xFE8
 19536                           postdec1	equ	0xFE5
 19537                           fsr1h	equ	0xFE2
 19538                           fsr1l	equ	0xFE1
 19539                           indf2	equ	0xFDF
 19540                           postinc2	equ	0xFDE
 19541                           postdec2	equ	0xFDD
 19542                           fsr2h	equ	0xFDA
 19543                           fsr2l	equ	0xFD9
 19544                           status	equ	0xFD8
 19545                           pclatu	equ	0xFFB
 19546                           pclath	equ	0xFFA
 19547                           tblptru	equ	0xFF8
 19548                           tblptrh	equ	0xFF7
 19549                           tblptrl	equ	0xFF6
 19550                           tablat	equ	0xFF5
 19551                           prodh	equ	0xFF4
 19552                           prodl	equ	0xFF3
 19553                           intcon	equ	0xFF2
 19554                           intcon2	equ	0xFF1
 19555                           intcon3	equ	0xFF0
 19556                           indf0	equ	0xFEF
 19557                           postinc0	equ	0xFEE
 19558                           fsr0h	equ	0xFEA
 19559                           fsr0l	equ	0xFE9
 19560                           wreg	equ	0xFE8
 19561                           postdec1	equ	0xFE5
 19562                           fsr1h	equ	0xFE2
 19563                           fsr1l	equ	0xFE1
 19564                           indf2	equ	0xFDF
 19565                           postinc2	equ	0xFDE
 19566                           postdec2	equ	0xFDD
 19567                           fsr2h	equ	0xFDA
 19568                           fsr2l	equ	0xFD9
 19569                           status	equ	0xFD8
 19570                           
 19571                           	psect	rparam
 19572  0000                     pclatu	equ	0xFFB
 19573                           pclath	equ	0xFFA
 19574                           tblptru	equ	0xFF8
 19575                           tblptrh	equ	0xFF7
 19576                           tblptrl	equ	0xFF6
 19577                           tablat	equ	0xFF5
 19578                           prodh	equ	0xFF4
 19579                           prodl	equ	0xFF3
 19580                           intcon	equ	0xFF2
 19581                           intcon2	equ	0xFF1
 19582                           intcon3	equ	0xFF0
 19583                           indf0	equ	0xFEF
 19584                           postinc0	equ	0xFEE
 19585                           fsr0h	equ	0xFEA
 19586                           fsr0l	equ	0xFE9
 19587                           wreg	equ	0xFE8
 19588                           postdec1	equ	0xFE5
 19589                           fsr1h	equ	0xFE2
 19590                           fsr1l	equ	0xFE1
 19591                           indf2	equ	0xFDF
 19592                           postinc2	equ	0xFDE
 19593                           postdec2	equ	0xFDD
 19594                           fsr2h	equ	0xFDA
 19595                           fsr2l	equ	0xFD9
 19596                           status	equ	0xFD8
 19597                           
 19598                           	psect	temp
 19599  00007E                     btemp:
 19600                           	opt stack 0
 19601  00007E                     	ds	1
 19602  0000                     int$flags	set	btemp
 19603                           pclatu	equ	0xFFB
 19604                           pclath	equ	0xFFA
 19605                           tblptru	equ	0xFF8
 19606                           tblptrh	equ	0xFF7
 19607                           tblptrl	equ	0xFF6
 19608                           tablat	equ	0xFF5
 19609                           prodh	equ	0xFF4
 19610                           prodl	equ	0xFF3
 19611                           intcon	equ	0xFF2
 19612                           intcon2	equ	0xFF1
 19613                           intcon3	equ	0xFF0
 19614                           indf0	equ	0xFEF
 19615                           postinc0	equ	0xFEE
 19616                           fsr0h	equ	0xFEA
 19617                           fsr0l	equ	0xFE9
 19618                           wreg	equ	0xFE8
 19619                           postdec1	equ	0xFE5
 19620                           fsr1h	equ	0xFE2
 19621                           fsr1l	equ	0xFE1
 19622                           indf2	equ	0xFDF
 19623                           postinc2	equ	0xFDE
 19624                           postdec2	equ	0xFDD
 19625                           fsr2h	equ	0xFDA
 19626                           fsr2l	equ	0xFD9
 19627                           status	equ	0xFD8


Data Sizes:
    Strings     1138
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_107(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_106(CODE[18]), STR_105(CODE[18]), STR_104(CODE[15]), STR_103(CODE[15]), 
		 -> STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), STR_95(CODE[17]), 
		 -> STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), STR_91(CODE[15]), 
		 -> STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), STR_87(CODE[17]), 
		 -> STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), STR_83(CODE[10]), 
		 -> STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), STR_79(CODE[13]), 
		 -> STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), 
		 -> STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), 
		 -> STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[19]), 
		 -> STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  130434
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   15763
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   13119
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10146
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9399
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   20624
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   19774
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   41128
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12071
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7703
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7703
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   42100
                                             68 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           2     2      0    7793
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7703
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        25    25      0   11198
                                             43 BANK0     25    25      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7703
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7568
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 17:16:19 2017

                                    _i 00E4                     i2_I2C_Master_Start 4080  
                   i2_I2C_Master_Write 4056                                     l66 3FEE  
                                   _ID 29D6                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l900 2D18                                    l478 32C8  
                                  l591 198A                                    l913 3FBA  
                                  l922 288C                                    l772 3538  
                                  l996 2E38                                    l999 2E58  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E6  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 3CBE        __end_of_change_state_to_menu_12 3B60  
      __end_of_change_state_to_menu_22 3B28        __end_of_change_state_to_menu_23 3C8E  
         _f_can_coming_to_distribution 0071                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 3DAE        __end_of_change_state_to_logs_12 3D7E  
      __end_of_change_state_to_logs_22 3D4E        __end_of_change_state_to_logs_23 3E0A  
      __end_of_change_state_to_logs_33 3D1E        __end_of_change_state_to_logs_34 3CEE  
                                 ??_ID 0086                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1111 3420                                   l1112 3424  
                                 l1016 2F1A                                   l1113 3428  
                                 l1105 3400                                   l1025 24CA  
                                 l1130 3714                                   l1114 342C  
                                 l1050 09C2                                   l1034 2580  
                                 l1115 3430                                   l1043 0918  
                                 l1019 2F1E                                   l1132 370C  
                                 l1028 24CE                                   l1117 346E  
                                 l1109 341C                                   l1053 0A28  
                                 l1126 36FC                                   l1054 0A76  
                                 l1046 091C                                   l1055 0ADC  
                                 l1080 0E84                                   l1056 0B2A  
                                 l1092 101E                                   l1169 1374  
                                 l1616 34F2                                   l1626 3770  
                                 l1563 30FA                                   l5101 1260  
                                 l5111 12D8                                   l5113 12F0  
                                 l5201 3B76                                   l5107 12C6  
                                 l5123 133A                                   l5211 33D0  
                                 l5141 13CC                                   l5117 131C  
                                 l5109 12D2                                   l6101 28E0  
                                 l6013 2C82                                   l5135 13AC  
                                 l5119 1334                                   l5071 1162  
                                 l5207 33BA                                   l6103 28FA  
                                 l5153 1408                                   l5081 11A0  
                                 l5065 113C                                   l6201 25F2  
                                 l5217 33F0                                   l7001 070C  
                                 l5171 1486                                   l5163 1462  
                                 l5139 13C6                                   l5075 116C  
                                 l5235 3524                                   l5251 308E  
                                 l6107 2914                                   l5165 146C  
                                 l5069 1150                                   l5237 354E  
                                 l7005 0716                                   l5261 30E8  
                                 l5253 3094                                   l6109 2942  
                                 l6061 2A70                                   l6029 2CBC  
                                 l5183 14C8                                   l5159 142A  
                                 l7031 079E                                   l6071 2AA0  
                                 l5193 153A                                   l5177 14A2  
                                 l5097 124E                                   l5089 121C  
                                 l6241 098C                                   l7041 07C8  
                                 l7009 072E                                   l5249 307E  
                                 l5179 14AE                                   l5187 14DC  
                                 l5099 125A                                   l5195 1546  
                                 l6411 0D54                                   l6403 0D32  
                                 l7035 07B6                                   l7027 0794  
                                 l6075 2AAC                                   l5189 14E2  
                                 l6501 0F16                                   l6421 0D7C  
                                 l6413 0D5A                                   l6333 0BC8  
                                 l6325 0BA6                                   l6245 0996  
                                 l4901 3DD4                                   l7045 07D2  
                                 l6407 0D3C                                   l6351 0C2A  
                                 l6343 0BF0                                   l6335 0BCE  
                                 l6239 0986                                   l6183 255E  
                                 l5199 3B6A                                   l5471 19B2  
                                 l5463 1908                                   l7071 0852  
                                 l6079 2AB8                                   l6513 0F5A  
                                 l6433 0DC0                                   l6417 0D64  
                                 l6361 0C52                                   l6329 0BB0  
                                 l6249 09AE                                   l6177 251C  
                                 l7401 2E5E                                   l5481 1A48  
                                 l5473 19D0                                   l7081 087C  
                                 l7049 07EA                                   l6097 28AC  
                                 l5633 311A                                   l6603 10FE  
                                 l6523 0F82                                   l6443 0DE8  
                                 l6355 0C34                                   l6339 0BD8  
                                 l6195 25B0                                   l7411 2E7A  
                                 l7403 2E64                                   l5491 1ADE  
                                 l5483 1A66                                   l5475 19EE  
                                 l7075 086A                                   l7067 0848  
                                 l5803 3330                                   l6099 28C6  
                                 l5723 39C4                                   l5643 31A6  
                                 l6613 1126                                   l6605 1104  
                                 l6517 0F72                                   l6509 0F50  
                                 l6437 0DD8                                   l6429 0DB6  
                                 l6381 0CB8                                   l6365 0C5C  
                                 l7405 2E6A                                   l6701 31D2  
                                 l5485 1A84                                   l5477 1A0C  
                                 l5469 1994                                   l7085 0886  
                                 l7093 08AA                                   l5813 3372  
                                 l5637 3130                                   l4935 34A2  
                                 l4919 3E82                                   l6543 0FF6  
                                 l6535 0FD4                                   l6527 0F9A  
                                 l6519 0F78                                   l6463 0E5C  
                                 l6455 0E3A                                   l6447 0E00  
                                 l6439 0DDE                                   l6391 0CE0  
                                 l6359 0C4C                                   l7407 2E70  
                                 l7415 2E80                                   l6711 3202  
                                 l5487 1AA2                                   l5479 1A2A  
                                 l5495 1AFC                                   l5807 3346  
                                 _ADIE 007CEE                                   l4937 34AE  
                                 l6609 110E                                   l6545 0FFC  
                                 l6465 0E62                                   l6385 0CD0  
                                 l6377 0CAE                                   l6369 0C74  
                                 l7409 2E76                                   l6713 3208  
                                 l6721 323A                                   l6705 31E2  
                                 l5489 1AC0                                   l5497 1B5A  
                                 l7089 089E                                   l7345 27B2  
                                 l4947 34E4                                   l4939 34B4  
                                 l4963 3762                                   l4955 372C  
                                 l6619 3434                                   l6539 0FDE  
                                 l6491 0EEE                                   l6483 0ECC  
                                 l6459 0E44                                   l6395 0CF8  
                                 l6387 0CD6                                   l6803 01A4  
                                 l5691 2DB8                                   l5683 2D8A  
                                 l7371 2846                                   l7347 27C6  
                                 l4957 3738                                   l6573 1078  
                                 l6549 1006                                   l6493 0EF4  
                                 l6469 0E6C                                   l4877 3E4A  
                                 l6725 324E                                   l6717 322C  
                                 l6709 31F6                                   l6901 04BE  
                                 l6813 01CC                                   l6805 01AA  
                                 l4959 373E                                   l6583 10A0  
                                 l6487 0ED6                                   l4879 3E5C  
                                 l7383 2DDA                                   l6671 2FEE  
                                 l6663 2FC4                                   l5695 2DC2  
                                 l5679 2D80                                   l5687 2DA2  
                                 l6577 1090                                   l6569 106E  
                                 l6497 0EFE                                   l6681 3024  
                                 l6673 2FF4                                   l6657 2FAE  
                                 l6913 0522                                   l6905 0500  
                                 l6841 024E                                   l6833 022C  
                                 l6809 01B4                                   l6595 10DC  
                                 l6587 10B8                                   l6579 1096  
                                 l6923 053E                                   l6851 026A  
                                 l6819 01DA                                   l6771 0100  
                                 l7475 329A                                   l6669 2FE2  
                                 l6685 3032                                   l6909 050A  
                                 l6837 0236                                   l6781 0122  
                                 l6773 0106                                   l7477 32A0  
                                 l7493 32CA                                   l6599 10E6  
                                 l6951 0626                                   l6927 0556  
                                 l6919 0534                                   l6871 02D4  
                                 l6855 0282                                   l6847 0260  
                                 l7487 32BE                                   l7479 32A6  
                                 l6689 3046                                   l6961 0650  
                                 l6881 036A                                   l6873 02F2  
                                 l6785 013A                                   l6777 0118  
                                 l7489 32C4                                   l6955 063E  
                                 l6947 061C                                   l6891 0400  
                                 l6883 0388                                   l6875 0310  
                                 l6965 065A                                   l6893 041E  
                                 l6885 03A6                                   l6877 032E  
                                 l6789 014C                                   l6991 06E2  
                                 l6895 043C                                   l6887 03C4  
                                 l6879 034C                                   l6969 0672  
                                 l6889 03E2                                   l6995 06FA  
                                 l6987 06D8                                   l6899 045A  
                                 STR_1 FC15                                   STR_2 FF44  
                                 STR_3 FC03                                   STR_4 FE67  
                                 STR_5 FC03                                   STR_6 FE25  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3300 3DD2                                   u4210 198A  
                                 u3500 3A5E                                   u3501 3A5A  
                                 u3510 3A60                                   u3600 1312  
                                 u4170 3A12                                   u4171 3A0E  
                                 u4180 3A14                                   u3607 1308  
                                 u3560 129A                                   u4195 37AA  
                                 _PEIE 007F96                                   u3567 1290  
                                 u7007 090C                                   u4800 0B2A  
                                 u6320 288C                                   u4560 2A06  
                                 u7017 092E                                   u7107 0BB8  
                                 u7027 099E                                   _RCEN 007E2B  
                                 u7117 0BE0                                   u7037 09D2  
                                 u4590 2A60                                   u7207 0E4C  
                                 u7127 0C3C                                   u7047 0A38  
                                 u4760 09C2                                   u4568 2A0A  
                                 u7217 0E74                                   u7137 0C64  
                                 u7057 0A54                                   u7307 10A8  
                                 u7227 0EDE                                   u7147 0CC0  
                                 u7067 0A86                                   u6507 2CE6  
                                 u4780 0A76                                   u7317 10EE  
                                 u7237 0F06                                   u7157 0CE8  
                                 u7077 0AEC                                   u6517 381C  
                                 u4598 2A64                                   u7327 1116  
                                 u7247 0F62                                   u7167 0D44  
                                 u7087 0B08                                   u6607 2DCA  
                                 u6527 39A0                                   u7337 36C4  
                                 u7257 0F8A                                   u7177 0D6C  
                                 u7097 0B3A                                   u6617 3A70  
                                 u6537 29EC                                   i2l66 4002  
                                 u7347 366E                                   u7267 0FE6  
                                 u7187 0DC8                                   u6707 029C  
                                 u6627 3AA4                                   u6547 2A48  
                                 u7357 3678                                   u7277 100E  
                                 u7197 0DF0                                   u6717 0512  
                                 u6637 002A                                   u6557 2ADC  
                                 u7367 36A4                                   u7287 1030  
                                 u6807 07A6                                   u6727 0546  
                                 u6647 012A                                   u6567 2950  
                                 u7377 36AE                                   u7297 1080  
                                 u6817 07DA                                   u6737 0570  
                                 u6657 0166                                   u6577 2984  
                                 u6497 2C2E                                   u6907 250E  
                                 u6827 0804                                   u6747 062E  
                                 u6667 01BC                                   u6587 2D36  
                                 u6917 2552                                   u6837 085A  
                                 u6757 0662                                   u6677 01E8  
                                 u6597 2D92                                   u6927 2570  
                                 u6847 088E                                   u6767 068C  
                                 u6687 023E                                   u6937 25A2  
                                 u6857 2DE8                                   u6777 06EA  
                                 u6697 0272                                   u6947 25E6  
                                 u6867 2E2C                                   u6787 071E  
                                 u6957 3E52                                   u6877 247A  
                                 u6797 0748                                   u6967 2ECA  
                                 u6887 24BE                                   u6977 2F0E  
                                 u6897 24E0                                   u6987 2F30  
                                 u6997 08C8                                   _RSEN 007E29  
                          _stopSignals 3FC2                                   _Test 2DDA  
                                 _back 005B                                   _main 3258  
                                 _down 0069                                   _keys FB71  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 3F48                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4040  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1E5E  
                          i2_lcdNibble 388C                        __end_of_Loading 2CF6  
                 __end_of_actuatorTest 112E                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 2DDA                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3050                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FB8C  
                                STR_14 FFD6                                  STR_22 FFA3  
                                STR_30 FE36                                  STR_15 FFD2  
                                STR_23 FF36                                  STR_31 FE14  
                                STR_16 FFE2                                  STR_24 FD7B  
                                STR_32 FD59                                  STR_40 FD15  
                                STR_17 FFF2                                  STR_33 FD6A  
                                STR_41 FD04                                  STR_25 FBCC  
                                STR_18 FFF6                                  STR_34 FE03  
                                STR_50 FDE1                                  STR_42 FDBF  
                                STR_26 FD8C                                  STR_43 FDBF  
                                STR_35 FE03                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FBB9  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD9D                                  STR_36 FD48  
                                STR_44 FD26                        __end_of___awmod 3258  
                                STR_45 FD15                                  STR_37 FD59  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FBC9                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEEF  
                                STR_38 FDF2                                  STR_46 FDD0  
                                STR_47 FDD0                                  STR_55 FFFA  
                                STR_63 FB8C                                  STR_71 FF28  
                                STR_39 FDAE                                  STR_56 FFDE  
                                STR_64 FF8E                                  STR_80 FE77  
                                STR_48 FD37                                  STR_72 FCAF  
                                STR_49 FD26                                  STR_57 FFD6  
                                STR_65 FF5F                                  STR_73 FF0C  
                                STR_81 FEA4                                  STR_58 FFD2  
                                STR_90 FF83                                  STR_74 FF6C  
                                STR_82 FE47                                  STR_66 FBA4  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_83 FF99                                  STR_75 FED1  
                                STR_91 FEC2                                  STR_84 FF28  
                                STR_76 FF1A                                  STR_68 FCC0  
                                STR_92 FC7C                                  STR_77 FFAD  
                                STR_85 FEE0                                  STR_69 FCF3  
                                STR_93 FC6B                                  STR_78 FF28  
                                STR_86 FEFE                                  STR_94 FC49  
                                STR_79 FF52                                  STR_87 FCD1  
                                STR_95 FC8D                                  STR_88 FF78  
                                STR_96 FC9E                                  STR_89 FCE2  
                                STR_97 FC27                                  STR_98 FE57  
                                STR_99 FC5A                                  ?_sort 0001  
                      __end_of___lldiv 310C                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 34FC                        __end_of___lwmod 377A  
                                i2l254 1E5A                                  i2l591 1EEC  
                                i2l831 26BE                                  i2l913 3FE6  
                                i2l835 270A                                  i2l837 272A  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4034                        __end_of_handler 2766  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 3E62  
                      __end_of_initLCD 3AAE                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 3982                        __end_of_loadRTC 337A  
                      __end_of_readMAG 3A1C                        __end_of_dpowers FB8C  
                                _first 00E2                                  _enter 006B  
                      __end_of_isdigit 3E8C                                  _input 007D  
                                _putch 4014                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 3EDA  
                     __end_ofi2_getRTC 35E4                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 18D4  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 3BFE                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 3934                           __end_of_Test 2EBC  
                   __size_ofi2_lcdInst 000C                           __end_of_main 32EE  
                         __end_of_keys FB82                           __end_of_sort 3F6A  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C4  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC38  
                               STR_101 FC5A                                 STR_102 FEB3  
                               STR_103 FE95                                 STR_104 FE86  
                               STR_105 FBDF                                 STR_106 FBF1  
                               _ADRESH 000FC4                                 STR_107 FFB5  
                               _EEADRH 000FAA                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3C2E  
            i2_change_state_to_menu_22 3BFE                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1169 1740                                 i2l1616 392A  
                               i2l1626 3AE6                                 i2l5011 3FA2  
                               i2l5021 38F8                                 i2l5023 3900  
                               i2l5033 3920                                 i2l5025 3904  
                               i2l5041 3ABC                                 i2l5043 3AC4  
                               i2l5045 3AC8                                 i2l5301 1570  
                               i2l5311 1594                                 i2l5049 3ADC  
                               i2l5401 1802                                 i2l5305 1580  
                               i2l5307 158E                                 i2l5413 182E  
                               i2l5333 1650                                 i2l5325 1628  
                               i2l5317 15C6                                 i2l5415 1836  
                               i2l5423 185C                                 i2l5407 1818  
                               i2l5343 16A8                                 i2l5335 165A  
                               i2l5431 18B8                                 i2l5273 35AA  
                               i2l5425 1862                                 i2l5353 16F4  
                               i2l5345 16B2                                 i2l5337 165E  
                               i2l7201 1D22                                 i2l7121 1BFE  
                               i2l7113 1BE2                                 i2l5283 35D4  
                               i2l5419 184A                                 i2l5371 176E  
                               i2l5355 1706                                 i2l5347 16B8  
                               i2l5435 3BD6                                 i2l7107 1BCE  
                               i2l5277 35BA                                 i2l5429 18B0  
                               i2l5349 16CA                                 i2l5613 2BB4  
                               i2l5437 3BDE                                 i2l7221 1D70  
                               i2l7213 1D4C                                 i2l7205 1D30  
                               i2l7141 1C36                                 i2l7133 1C1A  
                               i2l7125 1C0C                                 i2l7117 1BF0  
                               i2l7109 1BD4                                 i2l5375 1786  
                               i2l5359 170A                                 i2l5377 178A  
                               i2l5625 2BF8                                 i2l5617 2BC4  
                               i2l7241 1DBE                                 i2l7233 1DA2  
                               i2l7225 1D7E                                 i2l7217 1D62  
                               i2l7209 1D3E                                 i2l7161 1C7E  
                               i2l7153 1C62                                 i2l7145 1C46  
                               i2l7137 1C28                                 i2l5395 17D6  
                               i2l5389 17BC                                 i2l7245 1DCC  
                               i2l7237 1DB0                                 i2l7229 1D8C  
                               i2l7181 1CCC                                 i2l7173 1CB0  
                               i2l7165 1C8C                                 i2l7157 1C70  
                               i2l7149 1C54                                 i2l5399 17FA  
                               i2l7255 1DF0                                 i2l7425 20A0  
                               i2l5913 2370                                 i2l5905 2358  
                               i2l5761 1EF6                                 i2l7249 1DE2  
                               i2l7193 1CFE                                 i2l7185 1CE2  
                               i2l7177 1CBE                                 i2l7169 1CA2  
                               i2l7435 210A                                 i2l5923 239A  
                               i2l5771 1F64                                 i2l5763 1F0C  
                               i2l5755 1E8A                                 i2l7523 2692  
                               i2l7507 2672                                 i2l7445 21CC  
                               i2l7429 20B0                                 i2l5933 23B8  
                               i2l5781 1FD2                                 i2l5773 1F7A  
                               i2l5765 1F22                                 i2l7197 1D0C  
                               i2l7189 1CF0                                 i2l7509 2676  
                               i2l5935 23BC                                 i2l5919 237E  
                               i2l5783 1FE8                                 i2l5775 1F90  
                               i2l5767 1F38                                 i2l5961 2410  
                               i2l5953 23EC                                 i2l5929 23A4  
                               i2l5881 22F6                                 i2l5865 22BE  
                               i2l5857 22A4                                 i2l5777 1FA6  
                               i2l5769 1F4E                                 i2l7545 26DC  
                               i2l4987 3EFA                                 i2l5947 23DE  
                               i2l5939 23C6                                 i2l5883 22FC  
                               i2l5867 22CE                                 i2l5875 22DC  
                               i2l5779 1FBC                                 i2l5787 1FFE  
                               i2l7547 26DE                                 i2l5965 2422  
                               i2l5957 23FE                                 i2l5885 2302  
                               i2l5893 2314                                 i2l5869 22D2  
                               i2l5789 2058                                 i2l5887 2308  
                               i2l5879 22F0                                 i2l5975 243E  
                               i2l5969 2434                                 i2l7841 232C  
                               i2l5889 230E                                 i2l7833 1E0E  
                               i2l7569 2728                                 i2l7843 2348  
                               i2l7835 1E30                                 i2l7837 1E4C  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 3F48  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 29D6                                 ___wmul 3B96  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 337A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 3F8C  
                               _initUI 3F00                                 _readIR 3A1C  
                               _logRun 2766                                 clear_0 395A  
                               clear_1 3966                                 clear_2 3972  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 36B6                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 112E  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 3B60  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 3EB4  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 3E8C                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 3934                       __end_of_printRTC 1B9E  
                         __mediumconst FB70                      __end_ofi2___lwmod 3AF0  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 2F92                      __end_ofi2_lcdInst 404C  
                    __end_ofi2_isdigit 3FAA                             __accesstop 0080  
              __end_of__initialization 3978                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0876                          i2_EEPROM_read 3FD8  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 408A                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 4060  
                        __end_of_getIR 39D0                            i2printRTC@i 0041  
                        _initSortTimer 310C            __end_of_updateServoPosition 3572  
                        __end_of_putch 4024                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2AF6  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 3E36  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 3E0A  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 2CF6                                UI@F3220 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      __end_of_PortTests 3484  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2205 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 4034  
                            ?_initTime 0080                        _f_loadingNewCan 00E0  
                      i2printRTC@month 003D                  __size_of_Distribution 0134  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 36B6  
                              _Loading 2C10            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 2F92                                ___awmod 31B6  
                           _initServos 37DA                                ___lldiv 3050  
                      __size_of___wmul 0036                                ___lwdiv 3484  
                              ___lwmod 3718                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 004C  
                              __pcinit 3934                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 35E4  
                              _lcdInst 4024                                _handler 0008  
                              __ptext0 3258                                __ptext1 3FC2  
                              __ptext2 3F48                                __ptext3 2C10  
                              __ptext4 310C                                __ptext5 37DA  
                              __ptext6 35E4                                __ptext7 3982  
                              __ptext8 29D6                                __ptext9 28A2  
                      __size_of_printf 0438                                _readADC 3E36  
                      __size_of_strcpy 0036                                _initLCD 3A68  
                              _cur_can 0065                                _loadRTC 32EE  
                              _readMAG 39D0                                _dpowers FB82  
                   actuatorTest@i_1562 00AE                     actuatorTest@i_1571 00B4  
                   actuatorTest@i_1563 00AF                     actuatorTest@i_1572 00B5  
                   actuatorTest@i_1581 00BA                     actuatorTest@i_1565 00B0  
                   actuatorTest@i_1582 00BB                     actuatorTest@i_1574 00B6  
                   actuatorTest@i_1566 00B1                     actuatorTest@i_1591 00C0  
                   actuatorTest@i_1575 00B7                     actuatorTest@i_1592 00C1  
                   actuatorTest@i_1584 00BC                     actuatorTest@i_1568 00B2  
                   actuatorTest@i_1585 00BD                     actuatorTest@i_1577 00B8  
                   actuatorTest@i_1569 00B3                     actuatorTest@i_1594 00C2  
                   actuatorTest@i_1578 00B9                     actuatorTest@i_1595 00C3  
                   actuatorTest@i_1587 00BE                     actuatorTest@i_1588 00BF  
                              _isdigit 3E62                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 28A2                         __pintcode_body 25F8  
                 end_of_initialization 3978                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 25F8                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 0062  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 364E  
                           _sensorTest 246C                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 246C                  __end_of_machineConfig 388C  
                           _updateMenu 1B9E                      i2_I2C_Master_Read 3EDA  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4002  
                    i2_I2C_Master_Stop 4078                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 38E2  
                            i2___lwmod 3AAE                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2094                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00AD           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4040                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 3F8C  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 3FC2  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 3BCC                         __end_of_getRTC 3400  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 3F24  
                       __end_of_readIR 3A68                         __end_of_logRun 28A2  
                     i2___wmul@product 0005                         __end_of_printf 1566  
                         i2printf@flag 0026                         __end_of_strcpy 3B96  
            __end_ofi2_I2C_Master_Read 3F00              __end_ofi2_I2C_Master_Wait 4014  
                         i2printf@prec 001D                    start_initialization 3934  
            __end_ofi2_I2C_Master_Stop 4080                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1310 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3400  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2325 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1852 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 3FAA                     __end_of_PortTestA5 3718  
                     _I2C_Master_Start 4070                              _f_lastCan 0073  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 404C                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB70  
                            _lcdNibble 364E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 2EBC  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0120  
                          __size_of_UI 08A6                    __size_of_sensorTest 018C  
           __end_ofi2_I2C_Master_Start 4088             __end_ofi2_I2C_Master_Write 4060  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2286                            ??i2_isdigit 0001  
                             i2u340_40 3EF8                               _PIR2bits 000FA1  
                             i2u436_40 1EEC                               i2u393_40 168C  
                             i2u393_47 1682                               i2u740_47 38AE  
                             i2u397_40 16EC                               i2u637_40 21C6  
                             i2u741_47 38D0                               i2u397_47 16E2  
                             i2u742_47 38DA                               i2u738_47 22C4  
                             i2u739_47 38A4                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 3EB4  
                        lcdNibble@data 0081                               i2_getRTC 3572  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 1566  
                             i2_strcpy 3BCC                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 3948  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 3FEE  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 00E6  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                  __end_of_initSortTimer 31B6  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 3C8E             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 3B28             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 3AF0                _change_state_to_menu_23 3C5E  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 3D7E  
              _change_state_to_logs_12 3D4E                _change_state_to_logs_22 3D1E  
              _change_state_to_logs_23 3DDC                _change_state_to_logs_33 3CEE  
              _change_state_to_logs_34 3CBE                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 275E  
                           _EEPROMTest 4088                        _I2C_Master_Init 377A  
                     __size_of_readADC 002C                        _I2C_Master_Read 3DAE  
                     __size_of_initLCD 0046                           _f_ID_receive 006D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 3FEE                        _I2C_Master_Stop 4068  
                     __size_of_isdigit 002A                         _printSortTimer 2094  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 2C10                               __ptext10 3834  
                             __ptext11 2766                               __ptext20 3A68  
                             __ptext12 2CF6                               __ptext21 0012  
                             __ptext13 3FAA                               __ptext30 3AF0  
                             __ptext22 18D4                               __ptext14 3F00  
                             __ptext31 3B28                               __ptext23 3B60  
                             __ptext15 32EE                               __ptext40 08B8  
                             __ptext32 31B6                               __ptext24 337A  
                             __ptext16 377A                               __ptext41 34FC  
                             __ptext33 2F92                               __ptext25 404C  
                             __ptext17 3050                               __ptext50 4024  
                             __ptext42 3400                               __ptext34 2DDA  
                             __ptext26 4068                               __ptext18 3E0A  
                             __ptext51 364E                               __ptext43 36B6  
                             __ptext35 246C                               __ptext27 4070  
                             __ptext19 3F6A                               __ptext60 3C2E  
                             __ptext52 4088                               __ptext44 112E  
                             __ptext36 39D0                               __ptext28 3DAE  
                             __ptext61 3C5E                               __ptext45 4014  
                             __ptext37 3A1C                               __ptext29 3FEE  
                             __ptext70 2AF6                               __ptext62 3C8E  
                             __ptext54 1B9E                               __ptext46 3E62  
                             __ptext38 3E36                               __ptext71 3FD8  
                             __ptext63 3CBE                               __ptext55 3E8C  
                             __ptext47 3B96                               __ptext39 2EBC  
                             __ptext80 388C                               __ptext72 2094  
                             __ptext64 3CEE                               __ptext56 1E5E  
                             __ptext48 3718                               __ptext81 3572  
                             __ptext73 1566                               __ptext65 3DDC  
                             __ptext57 3BCC                               __ptext49 3484  
                             __ptext82 4056                               __ptext74 4034  
                             __ptext66 3D1E                               __ptext58 2286  
                             __ptext83 4078                               __ptext75 3F8C  
                             __ptext67 3D4E                               __ptext59 3BFE  
                             __ptext84 4080                               __ptext76 3EB4  
                             __ptext68 3D7E                               __ptext85 3EDA  
                             __ptext77 3AAE                               __ptext69 3F24  
                             __ptext86 4002                               __ptext78 38E2  
                             __ptext79 4040                               _dispLogs 3F24  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1852 0002  
                   __end_of_initServos 3834                          __size_of_Test 00E2  
                        ?_EEPROM_write 00AB                               _initTime 3F6A  
                        __size_of_main 0096                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 34FC                 __size_of_machineConfig 0058  
                        ??i2_lcdNibble 0001                               _printRTC 18D4  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 3C5E      __end_ofi2_change_state_to_menu_22 3C2E  
                             loadRTC@i 0096                 __end_of_printSortTimer 2286  
                            putch@data 0082               __end_of_I2C_Master_Start 4078  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4056  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 25F8  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 3FD8  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 1E5E                __end_of_I2C_Master_Init 37DA  
              __end_of_I2C_Master_Read 3DDC                __end_of_I2C_Master_Wait 4002  
              __end_of_I2C_Master_Stop 4070                          printRTC@F3211 0131  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 2AF6                    __end_ofi2_lcdNibble 38E2  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012B                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3834  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
