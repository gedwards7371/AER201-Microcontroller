

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 11:38:35 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  005C1A                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3246
   161  005C1A  4D                 	db	77
   162  005C1B  4D                 	db	77
   163  005C1C  4D                 	db	77
   164  005C1D  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3236
   167  005C1E  4D                 	db	77
   168  005C1F  4D                 	db	77
   169  005C20  4D                 	db	77
   170  005C21  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FA8A                     __pmediumconst:
   174                           	opt stack 0
   175  00FA8A  00                 	db	0
   176  00FA8B                     _keys:
   177                           	opt stack 0
   178  00FA8B  31                 	db	49
   179  00FA8C  32                 	db	50
   180  00FA8D  33                 	db	51
   181  00FA8E  41                 	db	65
   182  00FA8F  34                 	db	52
   183  00FA90  35                 	db	53
   184  00FA91  36                 	db	54
   185  00FA92  42                 	db	66
   186  00FA93  37                 	db	55
   187  00FA94  38                 	db	56
   188  00FA95  39                 	db	57
   189  00FA96  43                 	db	67
   190  00FA97  2A                 	db	42
   191  00FA98  30                 	db	48
   192  00FA99  23                 	db	35
   193  00FA9A  44                 	db	68
   194  00FA9B  00                 	db	0
   195  00FA9C                     __end_of_keys:
   196                           	opt stack 0
   197  00FA9C                     _dpowers:
   198                           	opt stack 0
   199  00FA9C  0001               	dw	1
   200  00FA9E  000A               	dw	10
   201  00FAA0  0064               	dw	100
   202  00FAA2  03E8               	dw	1000
   203  00FAA4  2710               	dw	10000
   204  00FAA6                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAA6                     STR_21:
   282  00FAA6  25                 	db	37
   283  00FAA7  30                 	db	48	;'0'
   284  00FAA8  32                 	db	50	;'2'
   285  00FAA9  64                 	db	100	;'d'
   286  00FAAA  25                 	db	37
   287  00FAAB  73                 	db	115	;'s'
   288  00FAAC  20                 	db	32
   289  00FAAD  7C                 	db	124
   290  00FAAE  20                 	db	32
   291  00FAAF  25                 	db	37
   292  00FAB0  30                 	db	48	;'0'
   293  00FAB1  32                 	db	50	;'2'
   294  00FAB2  64                 	db	100	;'d'
   295  00FAB3  3A                 	db	58	;':'
   296  00FAB4  25                 	db	37
   297  00FAB5  30                 	db	48	;'0'
   298  00FAB6  32                 	db	50	;'2'
   299  00FAB7  64                 	db	100	;'d'
   300  00FAB8  3A                 	db	58	;':'
   301  00FAB9  25                 	db	37
   302  00FABA  30                 	db	48	;'0'
   303  00FABB  32                 	db	50	;'2'
   304  00FABC  64                 	db	100	;'d'
   305  00FABD  00                 	db	0
   306  00FABE                     STR_67:
   307  00FABE  28                 	db	40
   308  00FABF  64                 	db	100	;'d'
   309  00FAC0  61                 	db	97	;'a'
   310  00FAC1  74                 	db	116	;'t'
   311  00FAC2  61                 	db	97	;'a'
   312  00FAC3  3A                 	db	58	;':'
   313  00FAC4  20                 	db	32
   314  00FAC5  25                 	db	37
   315  00FAC6  75                 	db	117	;'u'
   316  00FAC7  2C                 	db	44
   317  00FAC8  20                 	db	32
   318  00FAC9  61                 	db	97	;'a'
   319  00FACA  64                 	db	100	;'d'
   320  00FACB  64                 	db	100	;'d'
   321  00FACC  72                 	db	114	;'r'
   322  00FACD  3A                 	db	58	;':'
   323  00FACE  20                 	db	32
   324  00FACF  25                 	db	37
   325  00FAD0  75                 	db	117	;'u'
   326  00FAD1  29                 	db	41
   327  00FAD2  00                 	db	0
   328  00FAD3                     STR_64:
   329  00FAD3  20                 	db	32
   330  00FAD4  20                 	db	32
   331  00FAD5  20                 	db	32
   332  00FAD6  20                 	db	32
   333  00FAD7  20                 	db	32
   334  00FAD8  20                 	db	32
   335  00FAD9  20                 	db	32
   336  00FADA  20                 	db	32
   337  00FADB  20                 	db	32
   338  00FADC  20                 	db	32
   339  00FADD  20                 	db	32
   340  00FADE  20                 	db	32
   341  00FADF  46                 	db	70	;'F'
   342  00FAE0  25                 	db	37
   343  00FAE1  64                 	db	100	;'d'
   344  00FAE2  4C                 	db	76	;'L'
   345  00FAE3  25                 	db	37
   346  00FAE4  64                 	db	100	;'d'
   347  00FAE5  00                 	db	0
   348  00FAE6                     STR_112:
   349  00FAE6  44                 	db	68	;'D'
   350  00FAE7  20                 	db	32
   351  00FAE8  57                 	db	87	;'W'
   352  00FAE9  49                 	db	73	;'I'
   353  00FAEA  4C                 	db	76	;'L'
   354  00FAEB  4C                 	db	76	;'L'
   355  00FAEC  20                 	db	32
   356  00FAED  52                 	db	82	;'R'
   357  00FAEE  45                 	db	69	;'E'
   358  00FAEF  54                 	db	84	;'T'
   359  00FAF0  55                 	db	85	;'U'
   360  00FAF1  52                 	db	82	;'R'
   361  00FAF2  4E                 	db	78	;'N'
   362  00FAF3  20                 	db	32
   363  00FAF4  20                 	db	32
   364  00FAF5  20                 	db	32
   365  00FAF6  20                 	db	32
   366  00FAF7  00                 	db	0
   367  00FAF8                     STR_122:
   368  00FAF8  4F                 	db	79	;'O'
   369  00FAF9  54                 	db	84	;'T'
   370  00FAFA  48                 	db	72	;'H'
   371  00FAFB  45                 	db	69	;'E'
   372  00FAFC  52                 	db	82	;'R'
   373  00FAFD  20                 	db	32
   374  00FAFE  53                 	db	83	;'S'
   375  00FAFF  45                 	db	69	;'E'
   376  00FB00  54                 	db	84	;'T'
   377  00FB01  53                 	db	83	;'S'
   378  00FB02  20                 	db	32
   379  00FB03  52                 	db	82	;'R'
   380  00FB04  41                 	db	65	;'A'
   381  00FB05  35                 	db	53	;'5'
   382  00FB06  20                 	db	32
   383  00FB07  20                 	db	32
   384  00FB08  20                 	db	32
   385  00FB09  00                 	db	0
   386  00FB0A                     STR_121:
   387  00FB0A  53                 	db	83	;'S'
   388  00FB0B  3A                 	db	58	;':'
   389  00FB0C  20                 	db	32
   390  00FB0D  44                 	db	68	;'D'
   391  00FB0E  20                 	db	32
   392  00FB0F  57                 	db	87	;'W'
   393  00FB10  49                 	db	73	;'I'
   394  00FB11  4C                 	db	76	;'L'
   395  00FB12  4C                 	db	76	;'L'
   396  00FB13  20                 	db	32
   397  00FB14  52                 	db	82	;'R'
   398  00FB15  45                 	db	69	;'E'
   399  00FB16  54                 	db	84	;'T'
   400  00FB17  55                 	db	85	;'U'
   401  00FB18  52                 	db	82	;'R'
   402  00FB19  4E                 	db	78	;'N'
   403  00FB1A  20                 	db	32
   404  00FB1B  00                 	db	0
   405  00FB1C                     STR_124:
   406  00FB1C  4F                 	db	79	;'O'
   407  00FB1D  54                 	db	84	;'T'
   408  00FB1E  48                 	db	72	;'H'
   409  00FB1F  45                 	db	69	;'E'
   410  00FB20  52                 	db	82	;'R'
   411  00FB21  3A                 	db	58	;':'
   412  00FB22  20                 	db	32
   413  00FB23  43                 	db	67	;'C'
   414  00FB24  41                 	db	65	;'A'
   415  00FB25  4D                 	db	77	;'M'
   416  00FB26  20                 	db	32
   417  00FB27  54                 	db	84	;'T'
   418  00FB28  4F                 	db	79	;'O'
   419  00FB29  47                 	db	71	;'G'
   420  00FB2A  47                 	db	71	;'G'
   421  00FB2B  4C                 	db	76	;'L'
   422  00FB2C  45                 	db	69	;'E'
   423  00FB2D  00                 	db	0
   424  00FB2E                     STR_130:
   425  00FB2E  4F                 	db	79	;'O'
   426  00FB2F  54                 	db	84	;'T'
   427  00FB30  48                 	db	72	;'H'
   428  00FB31  45                 	db	69	;'E'
   429  00FB32  52                 	db	82	;'R'
   430  00FB33  20                 	db	32
   431  00FB34  53                 	db	83	;'S'
   432  00FB35  45                 	db	69	;'E'
   433  00FB36  54                 	db	84	;'T'
   434  00FB37  53                 	db	83	;'S'
   435  00FB38  20                 	db	32
   436  00FB39  50                 	db	80	;'P'
   437  00FB3A  55                 	db	85	;'U'
   438  00FB3B  53                 	db	83	;'S'
   439  00FB3C  48                 	db	72	;'H'
   440  00FB3D  45                 	db	69	;'E'
   441  00FB3E  52                 	db	82	;'R'
   442  00FB3F  00                 	db	0
   443  00FB40                     STR_3:
   444  00FB40  2D                 	db	45
   445  00FB41  2D                 	db	45
   446  00FB42  20                 	db	32
   447  00FB43  4C                 	db	76	;'L'
   448  00FB44  4F                 	db	79	;'O'
   449  00FB45  47                 	db	71	;'G'
   450  00FB46  20                 	db	32
   451  00FB47  25                 	db	37
   452  00FB48  32                 	db	50	;'2'
   453  00FB49  64                 	db	100	;'d'
   454  00FB4A  20                 	db	32
   455  00FB4B  48                 	db	72	;'H'
   456  00FB4C  45                 	db	69	;'E'
   457  00FB4D  52                 	db	82	;'R'
   458  00FB4E  45                 	db	69	;'E'
   459  00FB4F  2D                 	db	45
   460  00FB50  2D                 	db	45
   461  00FB51  00                 	db	0
   462  00FB52                     STR_1:
   463  00FB52  52                 	db	82	;'R'
   464  00FB53  45                 	db	69	;'E'
   465  00FB54  53                 	db	83	;'S'
   466  00FB55  55                 	db	85	;'U'
   467  00FB56  4C                 	db	76	;'L'
   468  00FB57  54                 	db	84	;'T'
   469  00FB58  53                 	db	83	;'S'
   470  00FB59  20                 	db	32
   471  00FB5A  49                 	db	73	;'I'
   472  00FB5B  4E                 	db	78	;'N'
   473  00FB5C  20                 	db	32
   474  00FB5D  4C                 	db	76	;'L'
   475  00FB5E  4F                 	db	79	;'O'
   476  00FB5F  47                 	db	71	;'G'
   477  00FB60  20                 	db	32
   478  00FB61  25                 	db	37
   479  00FB62  64                 	db	100	;'d'
   480  00FB63  00                 	db	0
   481  00FB64                     STR_103:
   482  00FB64  4D                 	db	77	;'M'
   483  00FB65  49                 	db	73	;'I'
   484  00FB66  44                 	db	68	;'D'
   485  00FB67  20                 	db	32
   486  00FB68  2D                 	db	45
   487  00FB69  2D                 	db	45
   488  00FB6A  20                 	db	32
   489  00FB6B  32                 	db	50	;'2'
   490  00FB6C  73                 	db	115	;'s'
   491  00FB6D  20                 	db	32
   492  00FB6E  20                 	db	32
   493  00FB6F  20                 	db	32
   494  00FB70  20                 	db	32
   495  00FB71  20                 	db	32
   496  00FB72  20                 	db	32
   497  00FB73  20                 	db	32
   498  00FB74  00                 	db	0
   499  00FB75                     STR_106:
   500  00FB75  44                 	db	68	;'D'
   501  00FB76  52                 	db	82	;'R'
   502  00FB77  4F                 	db	79	;'O'
   503  00FB78  50                 	db	80	;'P'
   504  00FB79  20                 	db	32
   505  00FB7A  2D                 	db	45
   506  00FB7B  2D                 	db	45
   507  00FB7C  20                 	db	32
   508  00FB7D  32                 	db	50	;'2'
   509  00FB7E  73                 	db	115	;'s'
   510  00FB7F  20                 	db	32
   511  00FB80  20                 	db	32
   512  00FB81  20                 	db	32
   513  00FB82  20                 	db	32
   514  00FB83  20                 	db	32
   515  00FB84  20                 	db	32
   516  00FB85  00                 	db	0
   517  00FB86                     STR_100:
   518  00FB86  4C                 	db	76	;'L'
   519  00FB87  45                 	db	69	;'E'
   520  00FB88  46                 	db	70	;'F'
   521  00FB89  54                 	db	84	;'T'
   522  00FB8A  20                 	db	32
   523  00FB8B  2D                 	db	45
   524  00FB8C  2D                 	db	45
   525  00FB8D  20                 	db	32
   526  00FB8E  32                 	db	50	;'2'
   527  00FB8F  73                 	db	115	;'s'
   528  00FB90  20                 	db	32
   529  00FB91  20                 	db	32
   530  00FB92  20                 	db	32
   531  00FB93  20                 	db	32
   532  00FB94  20                 	db	32
   533  00FB95  20                 	db	32
   534  00FB96  00                 	db	0
   535  00FB97                     STR_105:
   536  00FB97  4C                 	db	76	;'L'
   537  00FB98  45                 	db	69	;'E'
   538  00FB99  56                 	db	86	;'V'
   539  00FB9A  45                 	db	69	;'E'
   540  00FB9B  4C                 	db	76	;'L'
   541  00FB9C  20                 	db	32
   542  00FB9D  2D                 	db	45
   543  00FB9E  2D                 	db	45
   544  00FB9F  20                 	db	32
   545  00FBA0  32                 	db	50	;'2'
   546  00FBA1  73                 	db	115	;'s'
   547  00FBA2  20                 	db	32
   548  00FBA3  20                 	db	32
   549  00FBA4  20                 	db	32
   550  00FBA5  20                 	db	32
   551  00FBA6  20                 	db	32
   552  00FBA7  00                 	db	0
   553  00FBA8                     STR_99:
   554  00FBA8  52                 	db	82	;'R'
   555  00FBA9  49                 	db	73	;'I'
   556  00FBAA  47                 	db	71	;'G'
   557  00FBAB  48                 	db	72	;'H'
   558  00FBAC  54                 	db	84	;'T'
   559  00FBAD  20                 	db	32
   560  00FBAE  2D                 	db	45
   561  00FBAF  2D                 	db	45
   562  00FBB0  20                 	db	32
   563  00FBB1  32                 	db	50	;'2'
   564  00FBB2  73                 	db	115	;'s'
   565  00FBB3  20                 	db	32
   566  00FBB4  20                 	db	32
   567  00FBB5  20                 	db	32
   568  00FBB6  20                 	db	32
   569  00FBB7  20                 	db	32
   570  00FBB8  00                 	db	0
   571  00FBB9                     STR_98:
   572  00FBB9  4D                 	db	77	;'M'
   573  00FBBA  49                 	db	73	;'I'
   574  00FBBB  44                 	db	68	;'D'
   575  00FBBC  44                 	db	68	;'D'
   576  00FBBD  4C                 	db	76	;'L'
   577  00FBBE  45                 	db	69	;'E'
   578  00FBBF  20                 	db	32
   579  00FBC0  2D                 	db	45
   580  00FBC1  2D                 	db	45
   581  00FBC2  20                 	db	32
   582  00FBC3  32                 	db	50	;'2'
   583  00FBC4  73                 	db	115	;'s'
   584  00FBC5  20                 	db	32
   585  00FBC6  20                 	db	32
   586  00FBC7  20                 	db	32
   587  00FBC8  20                 	db	32
   588  00FBC9  00                 	db	0
   589  00FBCA                     STR_113:
   590  00FBCA  4F                 	db	79	;'O'
   591  00FBCB  54                 	db	84	;'T'
   592  00FBCC  48                 	db	72	;'H'
   593  00FBCD  45                 	db	69	;'E'
   594  00FBCE  52                 	db	82	;'R'
   595  00FBCF  20                 	db	32
   596  00FBD0  53                 	db	83	;'S'
   597  00FBD1  45                 	db	69	;'E'
   598  00FBD2  54                 	db	84	;'T'
   599  00FBD3  53                 	db	83	;'S'
   600  00FBD4  20                 	db	32
   601  00FBD5  44                 	db	68	;'D'
   602  00FBD6  43                 	db	67	;'C'
   603  00FBD7  20                 	db	32
   604  00FBD8  20                 	db	32
   605  00FBD9  20                 	db	32
   606  00FBDA  00                 	db	0
   607  00FBDB                     STR_119:
   608  00FBDB  44                 	db	68	;'D'
   609  00FBDC  20                 	db	32
   610  00FBDD  57                 	db	87	;'W'
   611  00FBDE  49                 	db	73	;'I'
   612  00FBDF  4C                 	db	76	;'L'
   613  00FBE0  4C                 	db	76	;'L'
   614  00FBE1  20                 	db	32
   615  00FBE2  52                 	db	82	;'R'
   616  00FBE3  45                 	db	69	;'E'
   617  00FBE4  54                 	db	84	;'T'
   618  00FBE5  55                 	db	85	;'U'
   619  00FBE6  52                 	db	82	;'R'
   620  00FBE7  4E                 	db	78	;'N'
   621  00FBE8  20                 	db	32
   622  00FBE9  20                 	db	32
   623  00FBEA  20                 	db	32
   624  00FBEB  00                 	db	0
   625  00FBEC                     STR_116:
   626  00FBEC  35                 	db	53	;'5'
   627  00FBED  3A                 	db	58	;':'
   628  00FBEE  48                 	db	72	;'H'
   629  00FBEF  7C                 	db	124
   630  00FBF0  36                 	db	54	;'6'
   631  00FBF1  3A                 	db	58	;':'
   632  00FBF2  4C                 	db	76	;'L'
   633  00FBF3  7C                 	db	124
   634  00FBF4  49                 	db	73	;'I'
   635  00FBF5  52                 	db	82	;'R'
   636  00FBF6  3A                 	db	58	;':'
   637  00FBF7  25                 	db	37
   638  00FBF8  64                 	db	100	;'d'
   639  00FBF9  20                 	db	32
   640  00FBFA  20                 	db	32
   641  00FBFB  20                 	db	32
   642  00FBFC  00                 	db	0
   643  00FBFD                     STR_114:
   644  00FBFD  31                 	db	49	;'1'
   645  00FBFE  3A                 	db	58	;':'
   646  00FBFF  20                 	db	32
   647  00FC00  44                 	db	68	;'D'
   648  00FC01  43                 	db	67	;'C'
   649  00FC02  20                 	db	32
   650  00FC03  7C                 	db	124
   651  00FC04  20                 	db	32
   652  00FC05  41                 	db	65	;'A'
   653  00FC06  3A                 	db	58	;':'
   654  00FC07  20                 	db	32
   655  00FC08  41                 	db	65	;'A'
   656  00FC09  52                 	db	82	;'R'
   657  00FC0A  4D                 	db	77	;'M'
   658  00FC0B  20                 	db	32
   659  00FC0C  20                 	db	32
   660  00FC0D  00                 	db	0
   661  00FC0E                     STR_101:
   662  00FC0E  4D                 	db	77	;'M'
   663  00FC0F  49                 	db	73	;'I'
   664  00FC10  44                 	db	68	;'D'
   665  00FC11  2D                 	db	45
   666  00FC12  4C                 	db	76	;'L'
   667  00FC13  45                 	db	69	;'E'
   668  00FC14  46                 	db	70	;'F'
   669  00FC15  54                 	db	84	;'T'
   670  00FC16  20                 	db	32
   671  00FC17  2D                 	db	45
   672  00FC18  2D                 	db	45
   673  00FC19  20                 	db	32
   674  00FC1A  32                 	db	50	;'2'
   675  00FC1B  73                 	db	115	;'s'
   676  00FC1C  20                 	db	32
   677  00FC1D  20                 	db	32
   678  00FC1E  00                 	db	0
   679  00FC1F                     STR_102:
   680  00FC1F  4D                 	db	77	;'M'
   681  00FC20  49                 	db	73	;'I'
   682  00FC21  44                 	db	68	;'D'
   683  00FC22  2D                 	db	45
   684  00FC23  52                 	db	82	;'R'
   685  00FC24  49                 	db	73	;'I'
   686  00FC25  47                 	db	71	;'G'
   687  00FC26  48                 	db	72	;'H'
   688  00FC27  54                 	db	84	;'T'
   689  00FC28  20                 	db	32
   690  00FC29  2D                 	db	45
   691  00FC2A  2D                 	db	45
   692  00FC2B  20                 	db	32
   693  00FC2C  32                 	db	50	;'2'
   694  00FC2D  73                 	db	115	;'s'
   695  00FC2E  20                 	db	32
   696  00FC2F  00                 	db	0
   697  00FC30  45                 	db	69	;'E'
   698  00FC31  4C                 	db	76	;'L'
   699  00FC32  53                 	db	83	;'S'
   700  00FC33  45                 	db	69	;'E'
   701  00FC34  20                 	db	32
   702  00FC35  54                 	db	84	;'T'
   703  00FC36  4F                 	db	79	;'O'
   704  00FC37  47                 	db	71	;'G'
   705  00FC38  47                 	db	71	;'G'
   706  00FC39  4C                 	db	76	;'L'
   707  00FC3A  45                 	db	69	;'E'
   708  00FC3B  53                 	db	83	;'S'
   709  00FC3C  20                 	db	32
   710  00FC3D  52                 	db	82	;'R'
   711  00FC3E  41                 	db	65	;'A'
   712  00FC3F  35                 	db	53	;'5'
   713  00FC40  00                 	db	0
   714  00FC41                     STR_73:
   715  00FC41  41                 	db	65	;'A'
   716  00FC42  4C                 	db	76	;'L'
   717  00FC43  47                 	db	71	;'G'
   718  00FC44  31                 	db	49	;'1'
   719  00FC45  3A                 	db	58	;':'
   720  00FC46  20                 	db	32
   721  00FC47  39                 	db	57	;'9'
   722  00FC48  20                 	db	32
   723  00FC49  50                 	db	80	;'P'
   724  00FC4A  4F                 	db	79	;'O'
   725  00FC4B  50                 	db	80	;'P'
   726  00FC4C  4E                 	db	78	;'N'
   727  00FC4D  4F                 	db	79	;'O'
   728  00FC4E  54                 	db	84	;'T'
   729  00FC4F  41                 	db	65	;'A'
   730  00FC50  42                 	db	66	;'B'
   731  00FC51  00                 	db	0
   732  00FC52                     STR_93:
   733  00FC52  54                 	db	84	;'T'
   734  00FC53  53                 	db	83	;'S'
   735  00FC54  54                 	db	84	;'T'
   736  00FC55  3A                 	db	58	;':'
   737  00FC56  20                 	db	32
   738  00FC57  43                 	db	67	;'C'
   739  00FC58  4F                 	db	79	;'O'
   740  00FC59  4E                 	db	78	;'N'
   741  00FC5A  44                 	db	68	;'D'
   742  00FC5B  20                 	db	32
   743  00FC5C  53                 	db	83	;'S'
   744  00FC5D  4F                 	db	79	;'O'
   745  00FC5E  4C                 	db	76	;'L'
   746  00FC5F  4E                 	db	78	;'N'
   747  00FC60  27                 	db	39
   748  00FC61  44                 	db	68	;'D'
   749  00FC62  00                 	db	0
   750  00FC63                     STR_95:
   751  00FC63  54                 	db	84	;'T'
   752  00FC64  53                 	db	83	;'S'
   753  00FC65  54                 	db	84	;'T'
   754  00FC66  3A                 	db	58	;':'
   755  00FC67  20                 	db	32
   756  00FC68  50                 	db	80	;'P'
   757  00FC69  55                 	db	85	;'U'
   758  00FC6A  53                 	db	83	;'S'
   759  00FC6B  48                 	db	72	;'H'
   760  00FC6C  20                 	db	32
   761  00FC6D  53                 	db	83	;'S'
   762  00FC6E  4F                 	db	79	;'O'
   763  00FC6F  4C                 	db	76	;'L'
   764  00FC70  4E                 	db	78	;'N'
   765  00FC71  27                 	db	39
   766  00FC72  44                 	db	68	;'D'
   767  00FC73  00                 	db	0
   768  00FC74                     STR_69:
   769  00FC74  32                 	db	50	;'2'
   770  00FC75  2E                 	db	46
   771  00FC76  53                 	db	83	;'S'
   772  00FC77  4E                 	db	78	;'N'
   773  00FC78  52                 	db	82	;'R'
   774  00FC79  7C                 	db	124
   775  00FC7A  34                 	db	52	;'4'
   776  00FC7B  2E                 	db	46
   777  00FC7C  48                 	db	72	;'H'
   778  00FC7D  49                 	db	73	;'I'
   779  00FC7E  7C                 	db	124
   780  00FC7F  35                 	db	53	;'5'
   781  00FC80  2E                 	db	46
   782  00FC81  4D                 	db	77	;'M'
   783  00FC82  45                 	db	69	;'E'
   784  00FC83  44                 	db	68	;'D'
   785  00FC84  00                 	db	0
   786  00FC85                     STR_70:
   787  00FC85  42                 	db	66	;'B'
   788  00FC86  2E                 	db	46
   789  00FC87  50                 	db	80	;'P'
   790  00FC88  4C                 	db	76	;'L'
   791  00FC89  41                 	db	65	;'A'
   792  00FC8A  7C                 	db	124
   793  00FC8B  38                 	db	56	;'8'
   794  00FC8C  2E                 	db	46
   795  00FC8D  53                 	db	83	;'S'
   796  00FC8E  56                 	db	86	;'V'
   797  00FC8F  7C                 	db	124
   798  00FC90  39                 	db	57	;'9'
   799  00FC91  2E                 	db	46
   800  00FC92  42                 	db	66	;'B'
   801  00FC93  4C                 	db	76	;'L'
   802  00FC94  4B                 	db	75	;'K'
   803  00FC95  00                 	db	0
   804  00FC96                     STR_128:
   805  00FC96  45                 	db	69	;'E'
   806  00FC97  4C                 	db	76	;'L'
   807  00FC98  53                 	db	83	;'S'
   808  00FC99  45                 	db	69	;'E'
   809  00FC9A  20                 	db	32
   810  00FC9B  54                 	db	84	;'T'
   811  00FC9C  4F                 	db	79	;'O'
   812  00FC9D  47                 	db	71	;'G'
   813  00FC9E  47                 	db	71	;'G'
   814  00FC9F  4C                 	db	76	;'L'
   815  00FCA0  45                 	db	69	;'E'
   816  00FCA1  53                 	db	83	;'S'
   817  00FCA2  20                 	db	32
   818  00FCA3  41                 	db	65	;'A'
   819  00FCA4  52                 	db	82	;'R'
   820  00FCA5  4D                 	db	77	;'M'
   821  00FCA6  00                 	db	0
   822  00FCA7                     STR_111:
   823  00FCA7  54                 	db	84	;'T'
   824  00FCA8  53                 	db	83	;'S'
   825  00FCA9  54                 	db	84	;'T'
   826  00FCAA  3A                 	db	58	;':'
   827  00FCAB  20                 	db	32
   828  00FCAC  42                 	db	66	;'B'
   829  00FCAD  4F                 	db	79	;'O'
   830  00FCAE  54                 	db	84	;'T'
   831  00FCAF  48                 	db	72	;'H'
   832  00FCB0  20                 	db	32
   833  00FCB1  53                 	db	83	;'S'
   834  00FCB2  45                 	db	69	;'E'
   835  00FCB3  52                 	db	82	;'R'
   836  00FCB4  56                 	db	86	;'V'
   837  00FCB5  4F                 	db	79	;'O'
   838  00FCB6  53                 	db	83	;'S'
   839  00FCB7  00                 	db	0
   840  00FCB8                     STR_41:
   841  00FCB8  4C                 	db	76	;'L'
   842  00FCB9  4F                 	db	79	;'O'
   843  00FCBA  47                 	db	71	;'G'
   844  00FCBB  20                 	db	32
   845  00FCBC  31                 	db	49	;'1'
   846  00FCBD  20                 	db	32
   847  00FCBE  20                 	db	32
   848  00FCBF  20                 	db	32
   849  00FCC0  20                 	db	32
   850  00FCC1  20                 	db	32
   851  00FCC2  20                 	db	32
   852  00FCC3  20                 	db	32
   853  00FCC4  20                 	db	32
   854  00FCC5  20                 	db	32
   855  00FCC6  20                 	db	32
   856  00FCC7  20                 	db	32
   857  00FCC8  00                 	db	0
   858  00FCC9                     STR_40:
   859  00FCC9  4C                 	db	76	;'L'
   860  00FCCA  4F                 	db	79	;'O'
   861  00FCCB  47                 	db	71	;'G'
   862  00FCCC  20                 	db	32
   863  00FCCD  32                 	db	50	;'2'
   864  00FCCE  20                 	db	32
   865  00FCCF  20                 	db	32
   866  00FCD0  20                 	db	32
   867  00FCD1  20                 	db	32
   868  00FCD2  20                 	db	32
   869  00FCD3  20                 	db	32
   870  00FCD4  20                 	db	32
   871  00FCD5  20                 	db	32
   872  00FCD6  20                 	db	32
   873  00FCD7  20                 	db	32
   874  00FCD8  20                 	db	32
   875  00FCD9  00                 	db	0
   876  00FCDA                     STR_44:
   877  00FCDA  4C                 	db	76	;'L'
   878  00FCDB  4F                 	db	79	;'O'
   879  00FCDC  47                 	db	71	;'G'
   880  00FCDD  20                 	db	32
   881  00FCDE  33                 	db	51	;'3'
   882  00FCDF  20                 	db	32
   883  00FCE0  20                 	db	32
   884  00FCE1  20                 	db	32
   885  00FCE2  20                 	db	32
   886  00FCE3  20                 	db	32
   887  00FCE4  20                 	db	32
   888  00FCE5  20                 	db	32
   889  00FCE6  20                 	db	32
   890  00FCE7  20                 	db	32
   891  00FCE8  20                 	db	32
   892  00FCE9  20                 	db	32
   893  00FCEA  00                 	db	0
   894  00FCEB                     STR_48:
   895  00FCEB  4C                 	db	76	;'L'
   896  00FCEC  4F                 	db	79	;'O'
   897  00FCED  47                 	db	71	;'G'
   898  00FCEE  20                 	db	32
   899  00FCEF  34                 	db	52	;'4'
   900  00FCF0  20                 	db	32
   901  00FCF1  20                 	db	32
   902  00FCF2  20                 	db	32
   903  00FCF3  20                 	db	32
   904  00FCF4  20                 	db	32
   905  00FCF5  20                 	db	32
   906  00FCF6  20                 	db	32
   907  00FCF7  20                 	db	32
   908  00FCF8  20                 	db	32
   909  00FCF9  20                 	db	32
   910  00FCFA  20                 	db	32
   911  00FCFB  00                 	db	0
   912  00FCFC                     STR_36:
   913  00FCFC  33                 	db	51	;'3'
   914  00FCFD  2E                 	db	46
   915  00FCFE  20                 	db	32
   916  00FCFF  4C                 	db	76	;'L'
   917  00FD00  4F                 	db	79	;'O'
   918  00FD01  47                 	db	71	;'G'
   919  00FD02  53                 	db	83	;'S'
   920  00FD03  20                 	db	32
   921  00FD04  20                 	db	32
   922  00FD05  20                 	db	32
   923  00FD06  20                 	db	32
   924  00FD07  20                 	db	32
   925  00FD08  20                 	db	32
   926  00FD09  20                 	db	32
   927  00FD0A  20                 	db	32
   928  00FD0B  20                 	db	32
   929  00FD0C  00                 	db	0
   930  00FD0D                     STR_32:
   931  00FD0D  32                 	db	50	;'2'
   932  00FD0E  2E                 	db	46
   933  00FD0F  20                 	db	32
   934  00FD10  53                 	db	83	;'S'
   935  00FD11  4F                 	db	79	;'O'
   936  00FD12  52                 	db	82	;'R'
   937  00FD13  54                 	db	84	;'T'
   938  00FD14  20                 	db	32
   939  00FD15  20                 	db	32
   940  00FD16  20                 	db	32
   941  00FD17  20                 	db	32
   942  00FD18  20                 	db	32
   943  00FD19  20                 	db	32
   944  00FD1A  20                 	db	32
   945  00FD1B  20                 	db	32
   946  00FD1C  20                 	db	32
   947  00FD1D  00                 	db	0
   948  00FD1E                     STR_33:
   949  00FD1E  31                 	db	49	;'1'
   950  00FD1F  2E                 	db	46
   951  00FD20  20                 	db	32
   952  00FD21  44                 	db	68	;'D'
   953  00FD22  41                 	db	65	;'A'
   954  00FD23  54                 	db	84	;'T'
   955  00FD24  45                 	db	69	;'E'
   956  00FD25  2F                 	db	47
   957  00FD26  54                 	db	84	;'T'
   958  00FD27  49                 	db	73	;'I'
   959  00FD28  4D                 	db	77	;'M'
   960  00FD29  45                 	db	69	;'E'
   961  00FD2A  20                 	db	32
   962  00FD2B  20                 	db	32
   963  00FD2C  20                 	db	32
   964  00FD2D  20                 	db	32
   965  00FD2E  00                 	db	0
   966  00FD2F                     STR_24:
   967  00FD2F  20                 	db	32
   968  00FD30  2D                 	db	45
   969  00FD31  2D                 	db	45
   970  00FD32  20                 	db	32
   971  00FD33  50                 	db	80	;'P'
   972  00FD34  4F                 	db	79	;'O'
   973  00FD35  50                 	db	80	;'P'
   974  00FD36  20                 	db	32
   975  00FD37  20                 	db	32
   976  00FD38  43                 	db	67	;'C'
   977  00FD39  41                 	db	65	;'A'
   978  00FD3A  4E                 	db	78	;'N'
   979  00FD3B  20                 	db	32
   980  00FD3C  2D                 	db	45
   981  00FD3D  2D                 	db	45
   982  00FD3E  20                 	db	32
   983  00FD3F  00                 	db	0
   984  00FD40                     STR_26:
   985  00FD40  20                 	db	32
   986  00FD41  2D                 	db	45
   987  00FD42  2D                 	db	45
   988  00FD43  20                 	db	32
   989  00FD44  53                 	db	83	;'S'
   990  00FD45  4F                 	db	79	;'O'
   991  00FD46  55                 	db	85	;'U'
   992  00FD47  50                 	db	80	;'P'
   993  00FD48  20                 	db	32
   994  00FD49  43                 	db	67	;'C'
   995  00FD4A  41                 	db	65	;'A'
   996  00FD4B  4E                 	db	78	;'N'
   997  00FD4C  20                 	db	32
   998  00FD4D  2D                 	db	45
   999  00FD4E  2D                 	db	45
  1000  00FD4F  20                 	db	32
  1001  00FD50  00                 	db	0
  1002  00FD51                     STR_28:
  1003  00FD51  2D                 	db	45
  1004  00FD52  2D                 	db	45
  1005  00FD53  20                 	db	32
  1006  00FD54  54                 	db	84	;'T'
  1007  00FD55  4F                 	db	79	;'O'
  1008  00FD56  54                 	db	84	;'T'
  1009  00FD57  41                 	db	65	;'A'
  1010  00FD58  4C                 	db	76	;'L'
  1011  00FD59  20                 	db	32
  1012  00FD5A  43                 	db	67	;'C'
  1013  00FD5B  41                 	db	65	;'A'
  1014  00FD5C  4E                 	db	78	;'N'
  1015  00FD5D  53                 	db	83	;'S'
  1016  00FD5E  20                 	db	32
  1017  00FD5F  2D                 	db	45
  1018  00FD60  2D                 	db	45
  1019  00FD61  00                 	db	0
  1020  00FD62                     STR_39:
  1021  00FD62  4C                 	db	76	;'L'
  1022  00FD63  4F                 	db	79	;'O'
  1023  00FD64  47                 	db	71	;'G'
  1024  00FD65  20                 	db	32
  1025  00FD66  31                 	db	49	;'1'
  1026  00FD67  20                 	db	32
  1027  00FD68  20                 	db	32
  1028  00FD69  20                 	db	32
  1029  00FD6A  20                 	db	32
  1030  00FD6B  20                 	db	32
  1031  00FD6C  20                 	db	32
  1032  00FD6D  20                 	db	32
  1033  00FD6E  20                 	db	32
  1034  00FD6F  20                 	db	32
  1035  00FD70  20                 	db	32
  1036  00FD71  3C                 	db	60	;'<'
  1037  00FD72  00                 	db	0
  1038  00FD73                     STR_42:
  1039  00FD73  4C                 	db	76	;'L'
  1040  00FD74  4F                 	db	79	;'O'
  1041  00FD75  47                 	db	71	;'G'
  1042  00FD76  20                 	db	32
  1043  00FD77  32                 	db	50	;'2'
  1044  00FD78  20                 	db	32
  1045  00FD79  20                 	db	32
  1046  00FD7A  20                 	db	32
  1047  00FD7B  20                 	db	32
  1048  00FD7C  20                 	db	32
  1049  00FD7D  20                 	db	32
  1050  00FD7E  20                 	db	32
  1051  00FD7F  20                 	db	32
  1052  00FD80  20                 	db	32
  1053  00FD81  20                 	db	32
  1054  00FD82  3C                 	db	60	;'<'
  1055  00FD83  00                 	db	0
  1056  00FD84                     STR_46:
  1057  00FD84  4C                 	db	76	;'L'
  1058  00FD85  4F                 	db	79	;'O'
  1059  00FD86  47                 	db	71	;'G'
  1060  00FD87  20                 	db	32
  1061  00FD88  33                 	db	51	;'3'
  1062  00FD89  20                 	db	32
  1063  00FD8A  20                 	db	32
  1064  00FD8B  20                 	db	32
  1065  00FD8C  20                 	db	32
  1066  00FD8D  20                 	db	32
  1067  00FD8E  20                 	db	32
  1068  00FD8F  20                 	db	32
  1069  00FD90  20                 	db	32
  1070  00FD91  20                 	db	32
  1071  00FD92  20                 	db	32
  1072  00FD93  3C                 	db	60	;'<'
  1073  00FD94  00                 	db	0
  1074  00FD95                     STR_50:
  1075  00FD95  4C                 	db	76	;'L'
  1076  00FD96  4F                 	db	79	;'O'
  1077  00FD97  47                 	db	71	;'G'
  1078  00FD98  20                 	db	32
  1079  00FD99  34                 	db	52	;'4'
  1080  00FD9A  20                 	db	32
  1081  00FD9B  20                 	db	32
  1082  00FD9C  20                 	db	32
  1083  00FD9D  20                 	db	32
  1084  00FD9E  20                 	db	32
  1085  00FD9F  20                 	db	32
  1086  00FDA0  20                 	db	32
  1087  00FDA1  20                 	db	32
  1088  00FDA2  20                 	db	32
  1089  00FDA3  20                 	db	32
  1090  00FDA4  3C                 	db	60	;'<'
  1091  00FDA5  00                 	db	0
  1092  00FDA6                     STR_38:
  1093  00FDA6  33                 	db	51	;'3'
  1094  00FDA7  2E                 	db	46
  1095  00FDA8  20                 	db	32
  1096  00FDA9  4C                 	db	76	;'L'
  1097  00FDAA  4F                 	db	79	;'O'
  1098  00FDAB  47                 	db	71	;'G'
  1099  00FDAC  53                 	db	83	;'S'
  1100  00FDAD  20                 	db	32
  1101  00FDAE  20                 	db	32
  1102  00FDAF  20                 	db	32
  1103  00FDB0  20                 	db	32
  1104  00FDB1  20                 	db	32
  1105  00FDB2  20                 	db	32
  1106  00FDB3  20                 	db	32
  1107  00FDB4  20                 	db	32
  1108  00FDB5  3C                 	db	60	;'<'
  1109  00FDB6  00                 	db	0
  1110  00FDB7                     STR_34:
  1111  00FDB7  32                 	db	50	;'2'
  1112  00FDB8  2E                 	db	46
  1113  00FDB9  20                 	db	32
  1114  00FDBA  53                 	db	83	;'S'
  1115  00FDBB  4F                 	db	79	;'O'
  1116  00FDBC  52                 	db	82	;'R'
  1117  00FDBD  54                 	db	84	;'T'
  1118  00FDBE  20                 	db	32
  1119  00FDBF  20                 	db	32
  1120  00FDC0  20                 	db	32
  1121  00FDC1  20                 	db	32
  1122  00FDC2  20                 	db	32
  1123  00FDC3  20                 	db	32
  1124  00FDC4  20                 	db	32
  1125  00FDC5  20                 	db	32
  1126  00FDC6  3C                 	db	60	;'<'
  1127  00FDC7  00                 	db	0
  1128  00FDC8                     STR_31:
  1129  00FDC8  31                 	db	49	;'1'
  1130  00FDC9  2E                 	db	46
  1131  00FDCA  20                 	db	32
  1132  00FDCB  44                 	db	68	;'D'
  1133  00FDCC  41                 	db	65	;'A'
  1134  00FDCD  54                 	db	84	;'T'
  1135  00FDCE  45                 	db	69	;'E'
  1136  00FDCF  2F                 	db	47
  1137  00FDD0  54                 	db	84	;'T'
  1138  00FDD1  49                 	db	73	;'I'
  1139  00FDD2  4D                 	db	77	;'M'
  1140  00FDD3  45                 	db	69	;'E'
  1141  00FDD4  20                 	db	32
  1142  00FDD5  20                 	db	32
  1143  00FDD6  20                 	db	32
  1144  00FDD7  3C                 	db	60	;'<'
  1145  00FDD8  00                 	db	0
  1146  00FDD9                     STR_6:
  1147  00FDD9  50                 	db	80	;'P'
  1148  00FDDA  41                 	db	65	;'A'
  1149  00FDDB  55                 	db	85	;'U'
  1150  00FDDC  53                 	db	83	;'S'
  1151  00FDDD  45                 	db	69	;'E'
  1152  00FDDE  20                 	db	32
  1153  00FDDF  3C                 	db	60	;'<'
  1154  00FDE0  20                 	db	32
  1155  00FDE1  7C                 	db	124
  1156  00FDE2  20                 	db	32
  1157  00FDE3  42                 	db	66	;'B'
  1158  00FDE4  41                 	db	65	;'A'
  1159  00FDE5  43                 	db	67	;'C'
  1160  00FDE6  4B                 	db	75	;'K'
  1161  00FDE7  20                 	db	32
  1162  00FDE8  3E                 	db	62	;'>'
  1163  00FDE9  00                 	db	0
  1164  00FDEA                     STR_30:
  1165  00FDEA  50                 	db	80	;'P'
  1166  00FDEB  55                 	db	85	;'U'
  1167  00FDEC  53                 	db	83	;'S'
  1168  00FDED  48                 	db	72	;'H'
  1169  00FDEE  20                 	db	32
  1170  00FDEF  54                 	db	84	;'T'
  1171  00FDF0  4F                 	db	79	;'O'
  1172  00FDF1  20                 	db	32
  1173  00FDF2  43                 	db	67	;'C'
  1174  00FDF3  4F                 	db	79	;'O'
  1175  00FDF4  4E                 	db	78	;'N'
  1176  00FDF5  54                 	db	84	;'T'
  1177  00FDF6  49                 	db	73	;'I'
  1178  00FDF7  4E                 	db	78	;'N'
  1179  00FDF8  55                 	db	85	;'U'
  1180  00FDF9  45                 	db	69	;'E'
  1181  00FDFA  00                 	db	0
  1182  00FDFB                     STR_27:
  1183  00FDFB  4E                 	db	78	;'N'
  1184  00FDFC  4C                 	db	76	;'L'
  1185  00FDFD  41                 	db	65	;'A'
  1186  00FDFE  42                 	db	66	;'B'
  1187  00FDFF  3A                 	db	58	;':'
  1188  00FE00  20                 	db	32
  1189  00FE01  25                 	db	37
  1190  00FE02  64                 	db	100	;'d'
  1191  00FE03  7C                 	db	124
  1192  00FE04  4C                 	db	76	;'L'
  1193  00FE05  41                 	db	65	;'A'
  1194  00FE06  42                 	db	66	;'B'
  1195  00FE07  3A                 	db	58	;':'
  1196  00FE08  20                 	db	32
  1197  00FE09  25                 	db	37
  1198  00FE0A  64                 	db	100	;'d'
  1199  00FE0B  00                 	db	0
  1200  00FE0C                     STR_25:
  1201  00FE0C  4E                 	db	78	;'N'
  1202  00FE0D  54                 	db	84	;'T'
  1203  00FE0E  41                 	db	65	;'A'
  1204  00FE0F  42                 	db	66	;'B'
  1205  00FE10  3A                 	db	58	;':'
  1206  00FE11  20                 	db	32
  1207  00FE12  25                 	db	37
  1208  00FE13  64                 	db	100	;'d'
  1209  00FE14  7C                 	db	124
  1210  00FE15  54                 	db	84	;'T'
  1211  00FE16  41                 	db	65	;'A'
  1212  00FE17  42                 	db	66	;'B'
  1213  00FE18  3A                 	db	58	;':'
  1214  00FE19  20                 	db	32
  1215  00FE1A  25                 	db	37
  1216  00FE1B  64                 	db	100	;'d'
  1217  00FE1C  00                 	db	0
  1218  00FE1D                     STR_84:
  1219  00FE1D  4D                 	db	77	;'M'
  1220  00FE1E  41                 	db	65	;'A'
  1221  00FE1F  47                 	db	71	;'G'
  1222  00FE20  5F                 	db	95	;'_'
  1223  00FE21  73                 	db	115	;'s'
  1224  00FE22  69                 	db	105	;'i'
  1225  00FE23  67                 	db	103	;'g'
  1226  00FE24  6E                 	db	110	;'n'
  1227  00FE25  61                 	db	97	;'a'
  1228  00FE26  6C                 	db	108	;'l'
  1229  00FE27  3A                 	db	58	;':'
  1230  00FE28  20                 	db	32
  1231  00FE29  25                 	db	37
  1232  00FE2A  64                 	db	100	;'d'
  1233  00FE2B  20                 	db	32
  1234  00FE2C  00                 	db	0
  1235  00FE2D                     STR_104:
  1236  00FE2D  54                 	db	84	;'T'
  1237  00FE2E  53                 	db	83	;'S'
  1238  00FE2F  54                 	db	84	;'T'
  1239  00FE30  3A                 	db	58	;':'
  1240  00FE31  20                 	db	32
  1241  00FE32  54                 	db	84	;'T'
  1242  00FE33  49                 	db	73	;'I'
  1243  00FE34  4C                 	db	76	;'L'
  1244  00FE35  54                 	db	84	;'T'
  1245  00FE36  20                 	db	32
  1246  00FE37  53                 	db	83	;'S'
  1247  00FE38  45                 	db	69	;'E'
  1248  00FE39  52                 	db	82	;'R'
  1249  00FE3A  56                 	db	86	;'V'
  1250  00FE3B  4F                 	db	79	;'O'
  1251  00FE3C  00                 	db	0
  1252  00FE3D                     STR_65:
  1253  00FE3D  53                 	db	83	;'S'
  1254  00FE3E  4F                 	db	79	;'O'
  1255  00FE3F  52                 	db	82	;'R'
  1256  00FE40  54                 	db	84	;'T'
  1257  00FE41  49                 	db	73	;'I'
  1258  00FE42  4E                 	db	78	;'N'
  1259  00FE43  47                 	db	71	;'G'
  1260  00FE44  2E                 	db	46
  1261  00FE45  2E                 	db	46
  1262  00FE46  2E                 	db	46
  1263  00FE47  20                 	db	32
  1264  00FE48  20                 	db	32
  1265  00FE49  20                 	db	32
  1266  00FE4A  20                 	db	32
  1267  00FE4B  20                 	db	32
  1268  00FE4C  00                 	db	0
  1269  00FE4D                     STR_66:
  1270  00FE4D  54                 	db	84	;'T'
  1271  00FE4E  49                 	db	73	;'I'
  1272  00FE4F  4D                 	db	77	;'M'
  1273  00FE50  45                 	db	69	;'E'
  1274  00FE51  20                 	db	32
  1275  00FE52  25                 	db	37
  1276  00FE53  64                 	db	100	;'d'
  1277  00FE54  3A                 	db	58	;':'
  1278  00FE55  25                 	db	37
  1279  00FE56  30                 	db	48	;'0'
  1280  00FE57  32                 	db	50	;'2'
  1281  00FE58  64                 	db	100	;'d'
  1282  00FE59  20                 	db	32
  1283  00FE5A  20                 	db	32
  1284  00FE5B  20                 	db	32
  1285  00FE5C  00                 	db	0
  1286  00FE5D                     STR_4:
  1287  00FE5D  44                 	db	68	;'D'
  1288  00FE5E  49                 	db	73	;'I'
  1289  00FE5F  44                 	db	68	;'D'
  1290  00FE60  4E                 	db	78	;'N'
  1291  00FE61  27                 	db	39
  1292  00FE62  54                 	db	84	;'T'
  1293  00FE63  20                 	db	32
  1294  00FE64  43                 	db	67	;'C'
  1295  00FE65  4F                 	db	79	;'O'
  1296  00FE66  4D                 	db	77	;'M'
  1297  00FE67  50                 	db	80	;'P'
  1298  00FE68  4C                 	db	76	;'L'
  1299  00FE69  45                 	db	69	;'E'
  1300  00FE6A  54                 	db	84	;'T'
  1301  00FE6B  45                 	db	69	;'E'
  1302  00FE6C  00                 	db	0
  1303  00FE6D                     STR_123:
  1304  00FE6D  44                 	db	68	;'D'
  1305  00FE6E  3A                 	db	58	;':'
  1306  00FE6F  52                 	db	82	;'R'
  1307  00FE70  45                 	db	69	;'E'
  1308  00FE71  54                 	db	84	;'T'
  1309  00FE72  7C                 	db	124
  1310  00FE73  32                 	db	50	;'2'
  1311  00FE74  3A                 	db	58	;':'
  1312  00FE75  43                 	db	67	;'C'
  1313  00FE76  20                 	db	32
  1314  00FE77  25                 	db	37
  1315  00FE78  64                 	db	100	;'d'
  1316  00FE79  20                 	db	32
  1317  00FE7A  20                 	db	32
  1318  00FE7B  00                 	db	0
  1319  00FE7C                     STR_81:
  1320  00FE7C  49                 	db	73	;'I'
  1321  00FE7D  52                 	db	82	;'R'
  1322  00FE7E  5F                 	db	95	;'_'
  1323  00FE7F  73                 	db	115	;'s'
  1324  00FE80  69                 	db	105	;'i'
  1325  00FE81  67                 	db	103	;'g'
  1326  00FE82  6E                 	db	110	;'n'
  1327  00FE83  61                 	db	97	;'a'
  1328  00FE84  6C                 	db	108	;'l'
  1329  00FE85  3A                 	db	58	;':'
  1330  00FE86  20                 	db	32
  1331  00FE87  25                 	db	37
  1332  00FE88  64                 	db	100	;'d'
  1333  00FE89  20                 	db	32
  1334  00FE8A  00                 	db	0
  1335  00FE8B                     STR_110:
  1336  00FE8B  43                 	db	67	;'C'
  1337  00FE8C  41                 	db	65	;'A'
  1338  00FE8D  4D                 	db	77	;'M'
  1339  00FE8E  20                 	db	32
  1340  00FE8F  44                 	db	68	;'D'
  1341  00FE90  57                 	db	87	;'W'
  1342  00FE91  4E                 	db	78	;'N'
  1343  00FE92  20                 	db	32
  1344  00FE93  7C                 	db	124
  1345  00FE94  52                 	db	82	;'R'
  1346  00FE95  43                 	db	67	;'C'
  1347  00FE96  30                 	db	48	;'0'
  1348  00FE97  3D                 	db	61	;'='
  1349  00FE98  30                 	db	48	;'0'
  1350  00FE99  00                 	db	0
  1351  00FE9A                     STR_109:
  1352  00FE9A  43                 	db	67	;'C'
  1353  00FE9B  41                 	db	65	;'A'
  1354  00FE9C  4D                 	db	77	;'M'
  1355  00FE9D  20                 	db	32
  1356  00FE9E  55                 	db	85	;'U'
  1357  00FE9F  50                 	db	80	;'P'
  1358  00FEA0  20                 	db	32
  1359  00FEA1  20                 	db	32
  1360  00FEA2  7C                 	db	124
  1361  00FEA3  52                 	db	82	;'R'
  1362  00FEA4  43                 	db	67	;'C'
  1363  00FEA5  30                 	db	48	;'0'
  1364  00FEA6  3D                 	db	61	;'='
  1365  00FEA7  31                 	db	49	;'1'
  1366  00FEA8  00                 	db	0
  1367  00FEA9                     STR_83:
  1368  00FEA9  54                 	db	84	;'T'
  1369  00FEAA  53                 	db	83	;'S'
  1370  00FEAB  54                 	db	84	;'T'
  1371  00FEAC  3A                 	db	58	;':'
  1372  00FEAD  20                 	db	32
  1373  00FEAE  4D                 	db	77	;'M'
  1374  00FEAF  41                 	db	65	;'A'
  1375  00FEB0  47                 	db	71	;'G'
  1376  00FEB1  4E                 	db	78	;'N'
  1377  00FEB2  45                 	db	69	;'E'
  1378  00FEB3  54                 	db	84	;'T'
  1379  00FEB4  49                 	db	73	;'I'
  1380  00FEB5  53                 	db	83	;'S'
  1381  00FEB6  4D                 	db	77	;'M'
  1382  00FEB7  00                 	db	0
  1383  00FEB8                     STR_108:
  1384  00FEB8  54                 	db	84	;'T'
  1385  00FEB9  53                 	db	83	;'S'
  1386  00FEBA  54                 	db	84	;'T'
  1387  00FEBB  3A                 	db	58	;':'
  1388  00FEBC  20                 	db	32
  1389  00FEBD  43                 	db	67	;'C'
  1390  00FEBE  41                 	db	65	;'A'
  1391  00FEBF  4D                 	db	77	;'M'
  1392  00FEC0  20                 	db	32
  1393  00FEC1  53                 	db	83	;'S'
  1394  00FEC2  45                 	db	69	;'E'
  1395  00FEC3  52                 	db	82	;'R'
  1396  00FEC4  56                 	db	86	;'V'
  1397  00FEC5  4F                 	db	79	;'O'
  1398  00FEC6  00                 	db	0
  1399  00FEC7                     STR_97:
  1400  00FEC7  54                 	db	84	;'T'
  1401  00FEC8  53                 	db	83	;'S'
  1402  00FEC9  54                 	db	84	;'T'
  1403  00FECA  3A                 	db	58	;':'
  1404  00FECB  20                 	db	32
  1405  00FECC  50                 	db	80	;'P'
  1406  00FECD  41                 	db	65	;'A'
  1407  00FECE  4E                 	db	78	;'N'
  1408  00FECF  20                 	db	32
  1409  00FED0  53                 	db	83	;'S'
  1410  00FED1  45                 	db	69	;'E'
  1411  00FED2  52                 	db	82	;'R'
  1412  00FED3  56                 	db	86	;'V'
  1413  00FED4  4F                 	db	79	;'O'
  1414  00FED5  00                 	db	0
  1415  00FED6                     STR_76:
  1416  00FED6  41                 	db	65	;'A'
  1417  00FED7  4C                 	db	76	;'L'
  1418  00FED8  47                 	db	71	;'G'
  1419  00FED9  34                 	db	52	;'4'
  1420  00FEDA  3A                 	db	58	;':'
  1421  00FEDB  20                 	db	32
  1422  00FEDC  41                 	db	65	;'A'
  1423  00FEDD  4C                 	db	76	;'L'
  1424  00FEDE  4C                 	db	76	;'L'
  1425  00FEDF  20                 	db	32
  1426  00FEE0  43                 	db	67	;'C'
  1427  00FEE1  41                 	db	65	;'A'
  1428  00FEE2  4E                 	db	78	;'N'
  1429  00FEE3  53                 	db	83	;'S'
  1430  00FEE4  00                 	db	0
  1431  00FEE5                     STR_91:
  1432  00FEE5  54                 	db	84	;'T'
  1433  00FEE6  53                 	db	83	;'S'
  1434  00FEE7  54                 	db	84	;'T'
  1435  00FEE8  3A                 	db	58	;':'
  1436  00FEE9  20                 	db	32
  1437  00FEEA  44                 	db	68	;'D'
  1438  00FEEB  43                 	db	67	;'C'
  1439  00FEEC  20                 	db	32
  1440  00FEED  4D                 	db	77	;'M'
  1441  00FEEE  4F                 	db	79	;'O'
  1442  00FEEF  54                 	db	84	;'T'
  1443  00FEF0  4F                 	db	79	;'O'
  1444  00FEF1  52                 	db	82	;'R'
  1445  00FEF2  53                 	db	83	;'S'
  1446  00FEF3  00                 	db	0
  1447  00FEF4                     STR_71:
  1448  00FEF4  41                 	db	65	;'A'
  1449  00FEF5  4C                 	db	76	;'L'
  1450  00FEF6  47                 	db	71	;'G'
  1451  00FEF7  4F                 	db	79	;'O'
  1452  00FEF8  52                 	db	82	;'R'
  1453  00FEF9  49                 	db	73	;'I'
  1454  00FEFA  54                 	db	84	;'T'
  1455  00FEFB  48                 	db	72	;'H'
  1456  00FEFC  4D                 	db	77	;'M'
  1457  00FEFD  20                 	db	32
  1458  00FEFE  54                 	db	84	;'T'
  1459  00FEFF  45                 	db	69	;'E'
  1460  00FF00  53                 	db	83	;'S'
  1461  00FF01  54                 	db	84	;'T'
  1462  00FF02  00                 	db	0
  1463  00FF03                     STR_92:
  1464  00FF03  50                 	db	80	;'P'
  1465  00FF04  49                 	db	73	;'I'
  1466  00FF05  4E                 	db	78	;'N'
  1467  00FF06  20                 	db	32
  1468  00FF07  52                 	db	82	;'R'
  1469  00FF08  41                 	db	65	;'A'
  1470  00FF09  35                 	db	53	;'5'
  1471  00FF0A  20                 	db	32
  1472  00FF0B  48                 	db	72	;'H'
  1473  00FF0C  49                 	db	73	;'I'
  1474  00FF0D  47                 	db	71	;'G'
  1475  00FF0E  48                 	db	72	;'H'
  1476  00FF0F  2E                 	db	46
  1477  00FF10  00                 	db	0
  1478  00FF11                     STR_74:
  1479  00FF11  41                 	db	65	;'A'
  1480  00FF12  4C                 	db	76	;'L'
  1481  00FF13  47                 	db	71	;'G'
  1482  00FF14  32                 	db	50	;'2'
  1483  00FF15  3A                 	db	58	;':'
  1484  00FF16  20                 	db	32
  1485  00FF17  31                 	db	49	;'1'
  1486  00FF18  32                 	db	50	;'2'
  1487  00FF19  20                 	db	32
  1488  00FF1A  43                 	db	67	;'C'
  1489  00FF1B  41                 	db	65	;'A'
  1490  00FF1C  4E                 	db	78	;'N'
  1491  00FF1D  53                 	db	83	;'S'
  1492  00FF1E  00                 	db	0
  1493  00FF1F                     STR_77:
  1494  00FF1F  41                 	db	65	;'A'
  1495  00FF20  4C                 	db	76	;'L'
  1496  00FF21  47                 	db	71	;'G'
  1497  00FF22  35                 	db	53	;'5'
  1498  00FF23  3A                 	db	58	;':'
  1499  00FF24  20                 	db	32
  1500  00FF25  4E                 	db	78	;'N'
  1501  00FF26  4F                 	db	79	;'O'
  1502  00FF27  20                 	db	32
  1503  00FF28  43                 	db	67	;'C'
  1504  00FF29  41                 	db	65	;'A'
  1505  00FF2A  4E                 	db	78	;'N'
  1506  00FF2B  53                 	db	83	;'S'
  1507  00FF2C  00                 	db	0
  1508  00FF2D                     STR_72:
  1509  00FF2D  50                 	db	80	;'P'
  1510  00FF2E  55                 	db	85	;'U'
  1511  00FF2F  53                 	db	83	;'S'
  1512  00FF30  48                 	db	72	;'H'
  1513  00FF31  20                 	db	32
  1514  00FF32  54                 	db	84	;'T'
  1515  00FF33  4F                 	db	79	;'O'
  1516  00FF34  20                 	db	32
  1517  00FF35  53                 	db	83	;'S'
  1518  00FF36  54                 	db	84	;'T'
  1519  00FF37  41                 	db	65	;'A'
  1520  00FF38  52                 	db	82	;'R'
  1521  00FF39  54                 	db	84	;'T'
  1522  00FF3A  00                 	db	0
  1523  00FF3B                     STR_23:
  1524  00FF3B  25                 	db	37
  1525  00FF3C  64                 	db	100	;'d'
  1526  00FF3D  20                 	db	32
  1527  00FF3E  4D                 	db	77	;'M'
  1528  00FF3F  49                 	db	73	;'I'
  1529  00FF40  4E                 	db	78	;'N'
  1530  00FF41  20                 	db	32
  1531  00FF42  25                 	db	37
  1532  00FF43  64                 	db	100	;'d'
  1533  00FF44  20                 	db	32
  1534  00FF45  53                 	db	83	;'S'
  1535  00FF46  45                 	db	69	;'E'
  1536  00FF47  43                 	db	67	;'C'
  1537  00FF48  00                 	db	0
  1538  00FF49                     STR_2:
  1539  00FF49  54                 	db	84	;'T'
  1540  00FF4A  49                 	db	73	;'I'
  1541  00FF4B  4D                 	db	77	;'M'
  1542  00FF4C  45                 	db	69	;'E'
  1543  00FF4D  3A                 	db	58	;':'
  1544  00FF4E  20                 	db	32
  1545  00FF4F  25                 	db	37
  1546  00FF50  64                 	db	100	;'d'
  1547  00FF51  3A                 	db	58	;':'
  1548  00FF52  25                 	db	37
  1549  00FF53  30                 	db	48	;'0'
  1550  00FF54  32                 	db	50	;'2'
  1551  00FF55  64                 	db	100	;'d'
  1552  00FF56  00                 	db	0
  1553  00FF57                     STR_80:
  1554  00FF57  54                 	db	84	;'T'
  1555  00FF58  53                 	db	83	;'S'
  1556  00FF59  54                 	db	84	;'T'
  1557  00FF5A  3A                 	db	58	;':'
  1558  00FF5B  20                 	db	32
  1559  00FF5C  49                 	db	73	;'I'
  1560  00FF5D  52                 	db	82	;'R'
  1561  00FF5E  20                 	db	32
  1562  00FF5F  53                 	db	83	;'S'
  1563  00FF60  4E                 	db	78	;'N'
  1564  00FF61  53                 	db	83	;'S'
  1565  00FF62  52                 	db	82	;'R'
  1566  00FF63  00                 	db	0
  1567  00FF64                     STR_75:
  1568  00FF64  41                 	db	65	;'A'
  1569  00FF65  4C                 	db	76	;'L'
  1570  00FF66  47                 	db	71	;'G'
  1571  00FF67  33                 	db	51	;'3'
  1572  00FF68  3A                 	db	58	;':'
  1573  00FF69  20                 	db	32
  1574  00FF6A  31                 	db	49	;'1'
  1575  00FF6B  20                 	db	32
  1576  00FF6C  43                 	db	67	;'C'
  1577  00FF6D  41                 	db	65	;'A'
  1578  00FF6E  4E                 	db	78	;'N'
  1579  00FF6F  00                 	db	0
  1580  00FF70                     STR_94:
  1581  00FF70  50                 	db	80	;'P'
  1582  00FF71  49                 	db	73	;'I'
  1583  00FF72  4E                 	db	78	;'N'
  1584  00FF73  20                 	db	32
  1585  00FF74  52                 	db	82	;'R'
  1586  00FF75  41                 	db	65	;'A'
  1587  00FF76  33                 	db	51	;'3'
  1588  00FF77  2E                 	db	46
  1589  00FF78  2E                 	db	46
  1590  00FF79  2E                 	db	46
  1591  00FF7A  00                 	db	0
  1592  00FF7B                     STR_96:
  1593  00FF7B  50                 	db	80	;'P'
  1594  00FF7C  49                 	db	73	;'I'
  1595  00FF7D  4E                 	db	78	;'N'
  1596  00FF7E  20                 	db	32
  1597  00FF7F  52                 	db	82	;'R'
  1598  00FF80  41                 	db	65	;'A'
  1599  00FF81  34                 	db	52	;'4'
  1600  00FF82  2E                 	db	46
  1601  00FF83  2E                 	db	46
  1602  00FF84  2E                 	db	46
  1603  00FF85  00                 	db	0
  1604  00FF86                     STR_85:
  1605  00FF86  54                 	db	84	;'T'
  1606  00FF87  53                 	db	83	;'S'
  1607  00FF88  54                 	db	84	;'T'
  1608  00FF89  3A                 	db	58	;':'
  1609  00FF8A  20                 	db	32
  1610  00FF8B  43                 	db	67	;'C'
  1611  00FF8C  4F                 	db	79	;'O'
  1612  00FF8D  4E                 	db	78	;'N'
  1613  00FF8E  44                 	db	68	;'D'
  1614  00FF8F  00                 	db	0
  1615  00FF90                     STR_89:
  1616  00FF90  41                 	db	65	;'A'
  1617  00FF91  43                 	db	67	;'C'
  1618  00FF92  54                 	db	84	;'T'
  1619  00FF93  55                 	db	85	;'U'
  1620  00FF94  41                 	db	65	;'A'
  1621  00FF95  54                 	db	84	;'T'
  1622  00FF96  4F                 	db	79	;'O'
  1623  00FF97  52                 	db	82	;'R'
  1624  00FF98  53                 	db	83	;'S'
  1625  00FF99  00                 	db	0
  1626  00FF9A                     STR_22:
  1627  00FF9A  44                 	db	68	;'D'
  1628  00FF9B  55                 	db	85	;'U'
  1629  00FF9C  52                 	db	82	;'R'
  1630  00FF9D  41                 	db	65	;'A'
  1631  00FF9E  54                 	db	84	;'T'
  1632  00FF9F  49                 	db	73	;'I'
  1633  00FFA0  4F                 	db	79	;'O'
  1634  00FFA1  4E                 	db	78	;'N'
  1635  00FFA2  3A                 	db	58	;':'
  1636  00FFA3  00                 	db	0
  1637  00FFA4                     STR_87:
  1638  00FFA4  43                 	db	67	;'C'
  1639  00FFA5  4F                 	db	79	;'O'
  1640  00FFA6  4E                 	db	78	;'N'
  1641  00FFA7  44                 	db	68	;'D'
  1642  00FFA8  3A                 	db	58	;':'
  1643  00FFA9  20                 	db	32
  1644  00FFAA  25                 	db	37
  1645  00FFAB  64                 	db	100	;'d'
  1646  00FFAC  00                 	db	0
  1647  00FFAD                     STR_78:
  1648  00FFAD  53                 	db	83	;'S'
  1649  00FFAE  45                 	db	69	;'E'
  1650  00FFAF  4E                 	db	78	;'N'
  1651  00FFB0  53                 	db	83	;'S'
  1652  00FFB1  4F                 	db	79	;'O'
  1653  00FFB2  52                 	db	82	;'R'
  1654  00FFB3  53                 	db	83	;'S'
  1655  00FFB4  00                 	db	0
  1656  00FFB5                     STR_131:
  1657  00FFB5  28                 	db	40
  1658  00FFB6  6E                 	db	110	;'n'
  1659  00FFB7  75                 	db	117	;'u'
  1660  00FFB8  6C                 	db	108	;'l'
  1661  00FFB9  6C                 	db	108	;'l'
  1662  00FFBA  29                 	db	41
  1663  00FFBB  00                 	db	0
  1664  00FFBC                     STR_68:
  1665  00FFBC  46                 	db	70	;'F'
  1666  00FFBD  41                 	db	65	;'A'
  1667  00FFBE  49                 	db	73	;'I'
  1668  00FFBF  4C                 	db	76	;'L'
  1669  00FFC0  45                 	db	69	;'E'
  1670  00FFC1  44                 	db	68	;'D'
  1671  00FFC2  00                 	db	0
  1672  00FFC3                     STR_7:
  1673  00FFC3  53                 	db	83	;'S'
  1674  00FFC4  54                 	db	84	;'T'
  1675  00FFC5  41                 	db	65	;'A'
  1676  00FFC6  52                 	db	82	;'R'
  1677  00FFC7  54                 	db	84	;'T'
  1678  00FFC8  3A                 	db	58	;':'
  1679  00FFC9  00                 	db	0
  1680  00FFCA                     STR_9:
  1681  00FFCA  46                 	db	70	;'F'
  1682  00FFCB  45                 	db	69	;'E'
  1683  00FFCC  42                 	db	66	;'B'
  1684  00FFCD  00                 	db	0
  1685  00FFCE                     STR_19:
  1686  00FFCE  44                 	db	68	;'D'
  1687  00FFCF  45                 	db	69	;'E'
  1688  00FFD0  43                 	db	67	;'C'
  1689  00FFD1  00                 	db	0
  1690  00FFD2                     STR_15:
  1691  00FFD2  41                 	db	65	;'A'
  1692  00FFD3  55                 	db	85	;'U'
  1693  00FFD4  47                 	db	71	;'G'
  1694  00FFD5  00                 	db	0
  1695  00FFD6                     STR_14:
  1696  00FFD6  4A                 	db	74	;'J'
  1697  00FFD7  55                 	db	85	;'U'
  1698  00FFD8  4C                 	db	76	;'L'
  1699  00FFD9  00                 	db	0
  1700  00FFDA                     STR_8:
  1701  00FFDA  4A                 	db	74	;'J'
  1702  00FFDB  41                 	db	65	;'A'
  1703  00FFDC  4E                 	db	78	;'N'
  1704  00FFDD  00                 	db	0
  1705  00FFDE                     STR_13:
  1706  00FFDE  4A                 	db	74	;'J'
  1707  00FFDF  55                 	db	85	;'U'
  1708  00FFE0  4E                 	db	78	;'N'
  1709  00FFE1  00                 	db	0
  1710  00FFE2                     STR_16:
  1711  00FFE2  53                 	db	83	;'S'
  1712  00FFE3  45                 	db	69	;'E'
  1713  00FFE4  50                 	db	80	;'P'
  1714  00FFE5  00                 	db	0
  1715  00FFE6                     STR_10:
  1716  00FFE6  4D                 	db	77	;'M'
  1717  00FFE7  41                 	db	65	;'A'
  1718  00FFE8  52                 	db	82	;'R'
  1719  00FFE9  00                 	db	0
  1720  00FFEA                     STR_11:
  1721  00FFEA  41                 	db	65	;'A'
  1722  00FFEB  50                 	db	80	;'P'
  1723  00FFEC  52                 	db	82	;'R'
  1724  00FFED  00                 	db	0
  1725  00FFEE                     STR_20:
  1726  00FFEE  45                 	db	69	;'E'
  1727  00FFEF  52                 	db	82	;'R'
  1728  00FFF0  52                 	db	82	;'R'
  1729  00FFF1  00                 	db	0
  1730  00FFF2                     STR_17:
  1731  00FFF2  4F                 	db	79	;'O'
  1732  00FFF3  43                 	db	67	;'C'
  1733  00FFF4  54                 	db	84	;'T'
  1734  00FFF5  00                 	db	0
  1735  00FFF6                     STR_18:
  1736  00FFF6  4E                 	db	78	;'N'
  1737  00FFF7  4F                 	db	79	;'O'
  1738  00FFF8  56                 	db	86	;'V'
  1739  00FFF9  00                 	db	0
  1740  00FFFA                     STR_12:
  1741  00FFFA  4D                 	db	77	;'M'
  1742  00FFFB  41                 	db	65	;'A'
  1743  00FFFC  59                 	db	89	;'Y'
  1744  00FFFD  00                 	db	0
  1745  0000                     
  1746                           ; #config settings
  1747  00FFFE  00                 	db	0	; dummy byte at the end
  1748  0000                     
  1749                           	psect	cinit
  1750  0053D4                     __pcinit:
  1751                           	opt stack 0
  1752  0053D4                     start_initialization:
  1753                           	opt stack 0
  1754  0053D4                     __initialization:
  1755                           	opt stack 0
  1756                           
  1757                           ; Initialize objects allocated to BANK1 (8 bytes)
  1758                           ; load TBLPTR registers with __pidataBANK1
  1759  0053D4  0E1A               	movlw	low __pidataBANK1
  1760  0053D6  6EF6               	movwf	tblptrl,c
  1761  0053D8  0E5C               	movlw	high __pidataBANK1
  1762  0053DA  6EF7               	movwf	tblptrh,c
  1763  0053DC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1764  0053DE  6EF8               	movwf	tblptru,c
  1765  0053E0  EE01  F049         	lfsr	0,__pdataBANK1
  1766  0053E4  EE10 F008          	lfsr	1,8
  1767  0053E8                     copy_data0:
  1768  0053E8  0009               	tblrd		*+
  1769  0053EA  CFF5 FFEE          	movff	tablat,postinc0
  1770  0053EE  50E5               	movf	postdec1,w,c
  1771  0053F0  50E1               	movf	fsr1l,w,c
  1772  0053F2  E1FA               	bnz	copy_data0
  1773                           
  1774                           ; Clear objects allocated to BANK1 (73 bytes)
  1775  0053F4  EE01  F000         	lfsr	0,__pbssBANK1
  1776  0053F8  0E49               	movlw	73
  1777  0053FA                     clear_0:
  1778  0053FA  6AEE               	clrf	postinc0,c
  1779  0053FC  06E8               	decf	wreg,f,c
  1780  0053FE  E1FD               	bnz	clear_0
  1781                           
  1782                           ; Clear objects allocated to BANK0 (38 bytes)
  1783  005400  EE00  F0DA         	lfsr	0,__pbssBANK0
  1784  005404  0E26               	movlw	38
  1785  005406                     clear_1:
  1786  005406  6AEE               	clrf	postinc0,c
  1787  005408  06E8               	decf	wreg,f,c
  1788  00540A  E1FD               	bnz	clear_1
  1789                           
  1790                           ; Clear objects allocated to COMRAM (35 bytes)
  1791  00540C  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1792  005410  0E23               	movlw	35
  1793  005412                     clear_2:
  1794  005412  6AEE               	clrf	postinc0,c
  1795  005414  06E8               	decf	wreg,f,c
  1796  005416  E1FD               	bnz	clear_2
  1797  005418                     end_of_initialization:
  1798                           	opt stack 0
  1799  005418                     __end_of__initialization:
  1800                           	opt stack 0
  1801  005418  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1802  00541A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1803  00541C  0100               	movlb	0
  1804  00541E  EFBC  F023         	goto	_main	;jump to C main() function
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postdec1	equ	0xFE5
  1812                           fsr1l	equ	0xFE1
  1813                           
  1814                           	psect	bssCOMRAM
  1815  00005B                     __pbssCOMRAM:
  1816                           	opt stack 0
  1817  00005B                     _servoTimes:
  1818                           	opt stack 0
  1819  00005B                     	ds	8
  1820  000063                     _back:
  1821                           	opt stack 0
  1822  000063                     	ds	2
  1823  000065                     _down:
  1824                           	opt stack 0
  1825  000065                     	ds	2
  1826  000067                     _enter:
  1827                           	opt stack 0
  1828  000067                     	ds	2
  1829  000069                     _f_panning_to_bin:
  1830                           	opt stack 0
  1831  000069                     	ds	2
  1832  00006B                     _pan_servo_state:
  1833                           	opt stack 0
  1834  00006B                     	ds	2
  1835  00006D                     _servo_timer_counter:
  1836                           	opt stack 0
  1837  00006D                     	ds	2
  1838  00006F                     _servo_timer_target:
  1839                           	opt stack 0
  1840  00006F                     	ds	2
  1841  000071                     _tilt_servo_state:
  1842                           	opt stack 0
  1843  000071                     	ds	2
  1844  000073                     _timer2_counter:
  1845                           	opt stack 0
  1846  000073                     	ds	2
  1847  000075                     _up:
  1848                           	opt stack 0
  1849  000075                     	ds	2
  1850  000077                     _was_low_1:
  1851                           	opt stack 0
  1852  000077                     	ds	2
  1853  000079                     _was_low_2:
  1854                           	opt stack 0
  1855  000079                     	ds	2
  1856  00007B                     _was_low_3:
  1857                           	opt stack 0
  1858  00007B                     	ds	2
  1859  00007D                     _input:
  1860                           	opt stack 0
  1861  00007D                     	ds	1
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           postdec1	equ	0xFE5
  1869                           fsr1l	equ	0xFE1
  1870                           
  1871                           	psect	bssBANK0
  1872  0000DA                     __pbssBANK0:
  1873                           	opt stack 0
  1874  0000DA                     _sensor_outputs:
  1875                           	opt stack 0
  1876  0000DA                     	ds	4
  1877  0000DE                     _COND_signal:
  1878                           	opt stack 0
  1879  0000DE                     	ds	2
  1880  0000E0                     _IR_signal:
  1881                           	opt stack 0
  1882  0000E0                     	ds	2
  1883  0000E2                     _MAG_signal:
  1884                           	opt stack 0
  1885  0000E2                     	ds	2
  1886  0000E4                     _RTCflag:
  1887                           	opt stack 0
  1888  0000E4                     	ds	2
  1889  0000E6                     _cur_state:
  1890                           	opt stack 0
  1891  0000E6                     	ds	2
  1892  0000E8                     _debug:
  1893                           	opt stack 0
  1894  0000E8                     	ds	2
  1895  0000EA                     _f_arm_position:
  1896                           	opt stack 0
  1897  0000EA                     	ds	2
  1898  0000EC                     _f_lastCan:
  1899                           	opt stack 0
  1900  0000EC                     	ds	2
  1901  0000EE                     _f_loadingNewCan:
  1902                           	opt stack 0
  1903  0000EE                     	ds	2
  1904  0000F0                     _log:
  1905                           	opt stack 0
  1906  0000F0                     	ds	2
  1907  0000F2                     _log_completion:
  1908                           	opt stack 0
  1909  0000F2                     	ds	2
  1910  0000F4                     _log_count_pop_no_tab:
  1911                           	opt stack 0
  1912  0000F4                     	ds	2
  1913  0000F6                     _log_total_time:
  1914                           	opt stack 0
  1915  0000F6                     	ds	2
  1916  0000F8                     _logstate:
  1917                           	opt stack 0
  1918  0000F8                     	ds	2
  1919  0000FA                     _total_time:
  1920                           	opt stack 0
  1921  0000FA                     	ds	2
  1922  0000FC                     _machine_state:
  1923                           	opt stack 0
  1924  0000FC                     	ds	1
  1925  0000FD                     _sel:
  1926                           	opt stack 0
  1927  0000FD                     	ds	1
  1928  0000FE                     _count_total:
  1929                           	opt stack 0
  1930  0000FE                     	ds	2
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           postdec1	equ	0xFE5
  1938                           fsr1l	equ	0xFE1
  1939                           
  1940                           	psect	bssBANK1
  1941  000100                     __pbssBANK1:
  1942                           	opt stack 0
  1943  000100                     _log_startTime:
  1944                           	opt stack 0
  1945  000100                     	ds	14
  1946  00010E                     _startTime:
  1947                           	opt stack 0
  1948  00010E                     	ds	14
  1949  00011C                     _time:
  1950                           	opt stack 0
  1951  00011C                     	ds	7
  1952  000123                     _count_can_no_lab:
  1953                           	opt stack 0
  1954  000123                     	ds	2
  1955  000125                     _count_can_w_lab:
  1956                           	opt stack 0
  1957  000125                     	ds	2
  1958  000127                     _count_pop_no_tab:
  1959                           	opt stack 0
  1960  000127                     	ds	2
  1961  000129                     _count_pop_w_tab:
  1962                           	opt stack 0
  1963  000129                     	ds	2
  1964  00012B                     _cur_can:
  1965                           	opt stack 0
  1966  00012B                     	ds	2
  1967  00012D                     _f_ID_receive:
  1968                           	opt stack 0
  1969  00012D                     	ds	2
  1970  00012F                     _f_can_coming_to_ID:
  1971                           	opt stack 0
  1972  00012F                     	ds	2
  1973  000131                     _f_can_coming_to_distribution:
  1974                           	opt stack 0
  1975  000131                     	ds	2
  1976  000133                     _f_can_distributed:
  1977                           	opt stack 0
  1978  000133                     	ds	2
  1979  000135                     _f_most_recent_sort_time:
  1980                           	opt stack 0
  1981  000135                     	ds	2
  1982  000137                     _first:
  1983                           	opt stack 0
  1984  000137                     	ds	2
  1985  000139                     _firstboot:
  1986                           	opt stack 0
  1987  000139                     	ds	2
  1988  00013B                     _i:
  1989                           	opt stack 0
  1990  00013B                     	ds	2
  1991  00013D                     _log_count_can_no_lab:
  1992                           	opt stack 0
  1993  00013D                     	ds	2
  1994  00013F                     _log_count_can_w_lab:
  1995                           	opt stack 0
  1996  00013F                     	ds	2
  1997  000141                     _log_count_pop_w_tab:
  1998                           	opt stack 0
  1999  000141                     	ds	2
  2000  000143                     _log_count_total:
  2001                           	opt stack 0
  2002  000143                     	ds	2
  2003  000145                     _most_recent_sort_time:
  2004                           	opt stack 0
  2005  000145                     	ds	2
  2006  000147                     _var:
  2007                           	opt stack 0
  2008  000147                     	ds	2
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           
  2018                           	psect	dataBANK1
  2019  000149                     __pdataBANK1:
  2020                           	opt stack 0
  2021  000149                     UI@F3246:
  2022                           	opt stack 0
  2023  000149                     	ds	4
  2024  00014D                     printRTC@F3236:
  2025                           	opt stack 0
  2026  00014D                     	ds	4
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           postdec1	equ	0xFE5
  2034                           fsr1l	equ	0xFE1
  2035                           
  2036                           	psect	cstackBANK0
  2037  000080                     __pcstackBANK0:
  2038                           	opt stack 0
  2039  000080                     ??_delay_ms:
  2040  000080                     ??_isdigit:
  2041  000080                     ??_readADC:
  2042  000080                     ??_I2C_Master_Wait:
  2043  000080                     ?___wmul:
  2044                           	opt stack 0
  2045  000080                     ?___awmod:
  2046                           	opt stack 0
  2047  000080                     ?___lwdiv:
  2048                           	opt stack 0
  2049  000080                     ?___ftpack:
  2050                           	opt stack 0
  2051  000080                     ?___lldiv:
  2052                           	opt stack 0
  2053  000080                     lcdNibble@temp:
  2054                           	opt stack 0
  2055  000080                     initTime@m:
  2056                           	opt stack 0
  2057  000080                     updateServoPosition@time_us:
  2058                           	opt stack 0
  2059  000080                     EEPROM_read@address:
  2060                           	opt stack 0
  2061  000080                     ___wmul@multiplier:
  2062                           	opt stack 0
  2063  000080                     ___awmod@dividend:
  2064                           	opt stack 0
  2065  000080                     ___lwdiv@dividend:
  2066                           	opt stack 0
  2067  000080                     strcpy@to:
  2068                           	opt stack 0
  2069  000080                     ___ftpack@arg:
  2070                           	opt stack 0
  2071  000080                     ___lldiv@dividend:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0x0
  2075  000080                     	ds	1
  2076  000081                     readADC@channel:
  2077                           	opt stack 0
  2078  000081                     I2C_Master_Read@a:
  2079                           	opt stack 0
  2080  000081                     lcdNibble@data:
  2081                           	opt stack 0
  2082  000081                     initTime@h:
  2083                           	opt stack 0
  2084  000081                     delay_ms@milliseconds:
  2085                           	opt stack 0
  2086  000081                     _isdigit$2065:
  2087                           	opt stack 0
  2088  000081                     I2C_Master_Write@d:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x1
  2092  000081                     	ds	1
  2093  000082                     ??_readIR:
  2094  000082                     ??_readMAG:
  2095  000082                     ??_readCOND:
  2096  000082                     I2C_Master_Read@temp:
  2097                           	opt stack 0
  2098  000082                     lcdInst@data:
  2099                           	opt stack 0
  2100  000082                     putch@data:
  2101                           	opt stack 0
  2102  000082                     initTime@w:
  2103                           	opt stack 0
  2104  000082                     isdigit@c:
  2105                           	opt stack 0
  2106  000082                     updateServoPosition@timer:
  2107                           	opt stack 0
  2108  000082                     ___wmul@multiplicand:
  2109                           	opt stack 0
  2110  000082                     ___awmod@divisor:
  2111                           	opt stack 0
  2112  000082                     ___lwdiv@divisor:
  2113                           	opt stack 0
  2114  000082                     strcpy@from:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x2
  2118  000082                     	ds	1
  2119  000083                     ??_initLCD:
  2120  000083                     initTime@DD:
  2121                           	opt stack 0
  2122  000083                     ___ftpack@exp:
  2123                           	opt stack 0
  2124  000083                     getRTC@i:
  2125                           	opt stack 0
  2126                           
  2127                           ; 2 bytes @ 0x3
  2128  000083                     	ds	1
  2129  000084                     ??_updateServoPosition:
  2130  000084                     initTime@MM:
  2131                           	opt stack 0
  2132  000084                     ___awmod@counter:
  2133                           	opt stack 0
  2134  000084                     ___ftpack@sign:
  2135                           	opt stack 0
  2136  000084                     readIR@res:
  2137                           	opt stack 0
  2138  000084                     readMAG@res:
  2139                           	opt stack 0
  2140  000084                     readCOND@res:
  2141                           	opt stack 0
  2142  000084                     ___wmul@product:
  2143                           	opt stack 0
  2144  000084                     ___lwdiv@quotient:
  2145                           	opt stack 0
  2146  000084                     strcpy@cp:
  2147                           	opt stack 0
  2148  000084                     ___lldiv@divisor:
  2149                           	opt stack 0
  2150                           
  2151                           ; 4 bytes @ 0x4
  2152  000084                     	ds	1
  2153  000085                     ??_initSortTimer:
  2154  000085                     ??___ftpack:
  2155  000085                     initTime@YY:
  2156                           	opt stack 0
  2157  000085                     ___awmod@sign:
  2158                           	opt stack 0
  2159                           
  2160                           ; 1 bytes @ 0x5
  2161  000085                     	ds	1
  2162  000086                     ??_getIR:
  2163  000086                     ??_getMAG:
  2164  000086                     ?___awdiv:
  2165                           	opt stack 0
  2166  000086                     initTime@s:
  2167                           	opt stack 0
  2168  000086                     ___lwdiv@counter:
  2169                           	opt stack 0
  2170  000086                     updateServoPosition@my_time:
  2171                           	opt stack 0
  2172  000086                     ___awdiv@dividend:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x6
  2176  000086                     	ds	1
  2177  000087                     ?___lwmod:
  2178                           	opt stack 0
  2179  000087                     getIR@i:
  2180                           	opt stack 0
  2181  000087                     ___lwmod@dividend:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x7
  2185  000087                     	ds	1
  2186  000088                     ??_Distribution:
  2187  000088                     ??_initServos:
  2188  000088                     initSortTimer@i:
  2189                           	opt stack 0
  2190  000088                     ___awdiv@divisor:
  2191                           	opt stack 0
  2192  000088                     ___lldiv@quotient:
  2193                           	opt stack 0
  2194                           
  2195                           ; 4 bytes @ 0x8
  2196  000088                     	ds	1
  2197  000089                     ___lwmod@divisor:
  2198                           	opt stack 0
  2199                           
  2200                           ; 2 bytes @ 0x9
  2201  000089                     	ds	1
  2202  00008A                     ___awdiv@counter:
  2203                           	opt stack 0
  2204                           
  2205                           ; 1 bytes @ 0xA
  2206  00008A                     	ds	1
  2207  00008B                     ___awdiv@sign:
  2208                           	opt stack 0
  2209  00008B                     ___lwmod@counter:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0xB
  2213  00008B                     	ds	1
  2214  00008C                     ___lldiv@counter:
  2215                           	opt stack 0
  2216  00008C                     ___awdiv@quotient:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0xC
  2220  00008C                     	ds	1
  2221  00008D                     I2C_Master_Init@c:
  2222                           	opt stack 0
  2223                           
  2224                           ; 4 bytes @ 0xD
  2225  00008D                     	ds	1
  2226  00008E                     ?_printf:
  2227                           	opt stack 0
  2228  00008E                     ?___awtoft:
  2229                           	opt stack 0
  2230  00008E                     printf@f:
  2231                           	opt stack 0
  2232  00008E                     ___awtoft@c:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0xE
  2236  00008E                     	ds	3
  2237  000091                     ??_I2C_Master_Init:
  2238  000091                     ___awtoft@sign:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x11
  2242  000091                     	ds	1
  2243  000092                     ___ftge@ff1:
  2244                           	opt stack 0
  2245                           
  2246                           ; 3 bytes @ 0x12
  2247  000092                     	ds	3
  2248  000095                     ??_loadRTC:
  2249  000095                     ___ftge@ff2:
  2250                           	opt stack 0
  2251                           
  2252                           ; 3 bytes @ 0x15
  2253  000095                     	ds	1
  2254  000096                     loadRTC@i:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x16
  2258  000096                     	ds	2
  2259  000098                     ??___ftge:
  2260                           
  2261                           ; 1 bytes @ 0x18
  2262  000098                     	ds	2
  2263  00009A                     ??_printf:
  2264                           
  2265                           ; 1 bytes @ 0x1A
  2266  00009A                     	ds	4
  2267  00009E                     printf@prec:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x1E
  2271  00009E                     	ds	1
  2272  00009F                     printf@cp:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x1F
  2276  00009F                     	ds	2
  2277  0000A1                     printf@ap:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x21
  2281  0000A1                     	ds	2
  2282  0000A3                     printf@len:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x23
  2286  0000A3                     	ds	2
  2287  0000A5                     printf@val:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x25
  2291  0000A5                     	ds	2
  2292  0000A7                     printf@flag:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x27
  2296  0000A7                     	ds	1
  2297  0000A8                     printf@c:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x28
  2301  0000A8                     	ds	1
  2302  0000A9                     printf@width:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x29
  2306  0000A9                     	ds	2
  2307  0000AB                     ??_printRTC:
  2308  0000AB                     ??_ID:
  2309  0000AB                     ??_algorithmTest:
  2310  0000AB                     ??_sensorTest:
  2311  0000AB                     ??_actuatorTest:
  2312  0000AB                     ??_arm:
  2313  0000AB                     ??_PortTestDC:
  2314  0000AB                     ??_SpeedTest:
  2315  0000AB                     ??_PortTestPusher:
  2316  0000AB                     ??_PlatformTest:
  2317  0000AB                     ??_BothServos:
  2318  0000AB                     ??_BlockerTest:
  2319  0000AB                     EEPROM_write@address:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x2B
  2323  0000AB                     	ds	1
  2324  0000AC                     arm@on:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x2C
  2328  0000AC                     	ds	1
  2329  0000AD                     EEPROM_write@data:
  2330                           	opt stack 0
  2331  0000AD                     actuatorTest@i_1736:
  2332                           	opt stack 0
  2333  0000AD                     ID@res3:
  2334                           	opt stack 0
  2335  0000AD                     sensorTest@res:
  2336                           	opt stack 0
  2337  0000AD                     PlatformTest@res:
  2338                           	opt stack 0
  2339  0000AD                     BlockerTest@i:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x2D
  2343  0000AD                     	ds	1
  2344  0000AE                     ??_EEPROM_write:
  2345  0000AE                     actuatorTest@i_1743:
  2346                           	opt stack 0
  2347  0000AE                     printRTC@INT_time:
  2348                           	opt stack 0
  2349                           
  2350                           ; 14 bytes @ 0x2E
  2351  0000AE                     	ds	1
  2352  0000AF                     _ID$1142:
  2353                           	opt stack 0
  2354  0000AF                     EEPROM_write@i:
  2355                           	opt stack 0
  2356  0000AF                     actuatorTest@i_1744:
  2357                           	opt stack 0
  2358  0000AF                     PlatformTest@res_1788:
  2359                           	opt stack 0
  2360  0000AF                     BlockerTest@res:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x2F
  2364  0000AF                     	ds	1
  2365  0000B0                     _ID$1145:
  2366                           	opt stack 0
  2367  0000B0                     EEPROM_write@i_1404:
  2368                           	opt stack 0
  2369  0000B0                     actuatorTest@i_1746:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x30
  2373  0000B0                     	ds	1
  2374  0000B1                     ??_Loading:
  2375  0000B1                     logRun@num:
  2376                           	opt stack 0
  2377  0000B1                     actuatorTest@i_1747:
  2378                           	opt stack 0
  2379  0000B1                     ID@i:
  2380                           	opt stack 0
  2381  0000B1                     PlatformTest@i:
  2382                           	opt stack 0
  2383  0000B1                     BlockerTest@cam_flag:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x31
  2387  0000B1                     	ds	1
  2388  0000B2                     logRun@byte1:
  2389                           	opt stack 0
  2390  0000B2                     actuatorTest@i_1749:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x32
  2394  0000B2                     	ds	1
  2395  0000B3                     logRun@byte2:
  2396                           	opt stack 0
  2397  0000B3                     actuatorTest@i_1750:
  2398                           	opt stack 0
  2399  0000B3                     Loading@addr:
  2400                           	opt stack 0
  2401  0000B3                     ID@i_1141:
  2402                           	opt stack 0
  2403  0000B3                     PlatformTest@i_1792:
  2404                           	opt stack 0
  2405  0000B3                     BlockerTest@cond_flag:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x33
  2409  0000B3                     	ds	1
  2410  0000B4                     logRun@byte3:
  2411                           	opt stack 0
  2412  0000B4                     actuatorTest@i_1752:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x34
  2416  0000B4                     	ds	1
  2417  0000B5                     Loading@byte1:
  2418                           	opt stack 0
  2419  0000B5                     logRun@byte_i:
  2420                           	opt stack 0
  2421  0000B5                     actuatorTest@i_1753:
  2422                           	opt stack 0
  2423  0000B5                     ID@i_1144:
  2424                           	opt stack 0
  2425  0000B5                     PlatformTest@on:
  2426                           	opt stack 0
  2427                           
  2428                           ; 2 bytes @ 0x35
  2429  0000B5                     	ds	1
  2430  0000B6                     logRun@byte11:
  2431                           	opt stack 0
  2432  0000B6                     actuatorTest@i_1755:
  2433                           	opt stack 0
  2434  0000B6                     Loading@i_1119:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x36
  2438  0000B6                     	ds	1
  2439  0000B7                     actuatorTest@i_1756:
  2440                           	opt stack 0
  2441  0000B7                     ID@i_1147:
  2442                           	opt stack 0
  2443  0000B7                     logRun@i:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x37
  2447  0000B7                     	ds	1
  2448  0000B8                     actuatorTest@i_1758:
  2449                           	opt stack 0
  2450  0000B8                     Loading@i_1128:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x38
  2454  0000B8                     	ds	1
  2455  0000B9                     actuatorTest@i_1759:
  2456                           	opt stack 0
  2457  0000B9                     ID@i_1148:
  2458                           	opt stack 0
  2459  0000B9                     logRun@addr:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x39
  2463  0000B9                     	ds	1
  2464  0000BA                     actuatorTest@i_1762:
  2465                           	opt stack 0
  2466  0000BA                     Loading@i_1130:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x3A
  2470  0000BA                     	ds	1
  2471  0000BB                     ID@time:
  2472                           	opt stack 0
  2473  0000BB                     actuatorTest@i_1763:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x3B
  2477  0000BB                     	ds	1
  2478  0000BC                     actuatorTest@i_1765:
  2479                           	opt stack 0
  2480  0000BC                     printRTC@RTC_month:
  2481                           	opt stack 0
  2482  0000BC                     Loading@i_1131:
  2483                           	opt stack 0
  2484  0000BC                     ID@res1:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x3C
  2488  0000BC                     	ds	1
  2489  0000BD                     actuatorTest@i_1766:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x3D
  2493  0000BD                     	ds	1
  2494  0000BE                     actuatorTest@i_1768:
  2495                           	opt stack 0
  2496  0000BE                     Loading@i_1133:
  2497                           	opt stack 0
  2498  0000BE                     ID@res2:
  2499                           	opt stack 0
  2500  0000BE                     printRTC@month:
  2501                           	opt stack 0
  2502                           
  2503                           ; 4 bytes @ 0x3E
  2504  0000BE                     	ds	1
  2505  0000BF                     actuatorTest@i_1769:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x3F
  2509  0000BF                     	ds	1
  2510  0000C0                     actuatorTest@i_1772:
  2511                           	opt stack 0
  2512  0000C0                     Loading@i:
  2513                           	opt stack 0
  2514  0000C0                     ID@n:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x40
  2518  0000C0                     	ds	1
  2519  0000C1                     actuatorTest@i_1773:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0x41
  2523  0000C1                     	ds	1
  2524  0000C2                     actuatorTest@i_1775:
  2525                           	opt stack 0
  2526  0000C2                     printRTC@i:
  2527                           	opt stack 0
  2528  0000C2                     Loading@j:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x42
  2532  0000C2                     	ds	1
  2533  0000C3                     actuatorTest@i_1776:
  2534                           	opt stack 0
  2535                           
  2536                           ; 1 bytes @ 0x43
  2537  0000C3                     	ds	1
  2538  0000C4                     ??_UI:
  2539  0000C4                     actuatorTest@i:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x44
  2543  0000C4                     	ds	2
  2544  0000C6                     ??_Test:
  2545  0000C6                     _UI$2430:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x46
  2549  0000C6                     	ds	2
  2550  0000C8                     UI@i:
  2551                           	opt stack 0
  2552                           
  2553                           ; 1 bytes @ 0x48
  2554  0000C8                     	ds	1
  2555  0000C9                     UI@i_412:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x49
  2559  0000C9                     	ds	1
  2560  0000CA                     UI@i_415:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x4A
  2564  0000CA                     	ds	1
  2565  0000CB                     UI@i_416:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x4B
  2569  0000CB                     	ds	1
  2570  0000CC                     UI@i_434:
  2571                           	opt stack 0
  2572                           
  2573                           ; 1 bytes @ 0x4C
  2574  0000CC                     	ds	1
  2575  0000CD                     UI@i_435:
  2576                           	opt stack 0
  2577                           
  2578                           ; 1 bytes @ 0x4D
  2579  0000CD                     	ds	1
  2580  0000CE                     UI@i_438:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x4E
  2584  0000CE                     	ds	1
  2585  0000CF                     UI@i_439:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x4F
  2589  0000CF                     	ds	1
  2590  0000D0                     UI@i_442:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x50
  2594  0000D0                     	ds	1
  2595  0000D1                     UI@i_443:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x51
  2599  0000D1                     	ds	1
  2600  0000D2                     UI@i_446:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x52
  2604  0000D2                     	ds	1
  2605  0000D3                     UI@i_447:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x53
  2609  0000D3                     	ds	1
  2610  0000D4                     UI@i_450:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x54
  2614  0000D4                     	ds	1
  2615  0000D5                     UI@i_451:
  2616                           	opt stack 0
  2617                           
  2618                           ; 1 bytes @ 0x55
  2619  0000D5                     	ds	1
  2620  0000D6                     UI@month:
  2621                           	opt stack 0
  2622                           
  2623                           ; 4 bytes @ 0x56
  2624  0000D6                     	ds	4
  2625  0000DA                     tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           
  2634                           ; 1 bytes @ 0x5A
  2635                           
  2636                           	psect	cstackCOMRAM
  2637  000001                     __pcstackCOMRAM:
  2638                           	opt stack 0
  2639  000001                     ??_updateArmState:
  2640  000001                     ??i2_I2C_Master_Wait:
  2641  000001                     ??i2_delay_ms:
  2642  000001                     ??i2_isdigit:
  2643  000001                     ?i2___wmul:
  2644                           	opt stack 0
  2645  000001                     ?i2___lwmod:
  2646                           	opt stack 0
  2647  000001                     i2lcdNibble@temp:
  2648                           	opt stack 0
  2649  000001                     i2updateServoPosition@time_us:
  2650                           	opt stack 0
  2651  000001                     i2EEPROM_read@address:
  2652                           	opt stack 0
  2653  000001                     i2___wmul@multiplier:
  2654                           	opt stack 0
  2655  000001                     i2___lwmod@dividend:
  2656                           	opt stack 0
  2657  000001                     i2strcpy@to:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x0
  2661  000001                     	ds	1
  2662  000002                     i2I2C_Master_Read@a:
  2663                           	opt stack 0
  2664  000002                     i2lcdNibble@data:
  2665                           	opt stack 0
  2666  000002                     i2delay_ms@milliseconds:
  2667                           	opt stack 0
  2668  000002                     i2_isdigit$2065:
  2669                           	opt stack 0
  2670  000002                     i2I2C_Master_Write@d:
  2671                           	opt stack 0
  2672                           
  2673                           ; 2 bytes @ 0x1
  2674  000002                     	ds	1
  2675  000003                     i2I2C_Master_Read@temp:
  2676                           	opt stack 0
  2677  000003                     i2lcdInst@data:
  2678                           	opt stack 0
  2679  000003                     i2putch@data:
  2680                           	opt stack 0
  2681  000003                     i2isdigit@c:
  2682                           	opt stack 0
  2683  000003                     i2updateServoPosition@timer:
  2684                           	opt stack 0
  2685  000003                     i2___wmul@multiplicand:
  2686                           	opt stack 0
  2687  000003                     i2___lwmod@divisor:
  2688                           	opt stack 0
  2689  000003                     i2strcpy@from:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x2
  2693  000003                     	ds	1
  2694  000004                     i2getRTC@i:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x3
  2698  000004                     	ds	1
  2699  000005                     ??i2_updateServoPosition:
  2700  000005                     i2___lwmod@counter:
  2701                           	opt stack 0
  2702  000005                     i2___wmul@product:
  2703                           	opt stack 0
  2704  000005                     i2strcpy@cp:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x4
  2708  000005                     	ds	1
  2709  000006                     ?i2___lwdiv:
  2710                           	opt stack 0
  2711  000006                     i2___lwdiv@dividend:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x5
  2715  000006                     	ds	1
  2716  000007                     retrieveLog@logNum:
  2717                           	opt stack 0
  2718  000007                     i2updateServoPosition@my_time:
  2719                           	opt stack 0
  2720                           
  2721                           ; 2 bytes @ 0x6
  2722  000007                     	ds	1
  2723  000008                     i2___lwdiv@divisor:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x7
  2727  000008                     	ds	1
  2728  000009                     ??_retrieveLog:
  2729  000009                     ??_updateServoStates:
  2730                           
  2731                           ; 1 bytes @ 0x8
  2732  000009                     	ds	1
  2733  00000A                     i2___lwdiv@quotient:
  2734                           	opt stack 0
  2735                           
  2736                           ; 2 bytes @ 0x9
  2737  00000A                     	ds	1
  2738  00000B                     retrieveLog@byte1:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0xA
  2742  00000B                     	ds	1
  2743  00000C                     retrieveLog@byte2:
  2744                           	opt stack 0
  2745  00000C                     i2___lwdiv@counter:
  2746                           	opt stack 0
  2747                           
  2748                           ; 1 bytes @ 0xB
  2749  00000C                     	ds	1
  2750  00000D                     ?i2_printf:
  2751                           	opt stack 0
  2752  00000D                     retrieveLog@byte3:
  2753                           	opt stack 0
  2754  00000D                     i2printf@f:
  2755                           	opt stack 0
  2756                           
  2757                           ; 2 bytes @ 0xC
  2758  00000D                     	ds	1
  2759  00000E                     retrieveLog@i:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0xD
  2763  00000E                     	ds	2
  2764  000010                     retrieveLog@addr:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0xF
  2768  000010                     	ds	2
  2769  000012                     dispLogs@myLog:
  2770                           	opt stack 0
  2771                           
  2772                           ; 2 bytes @ 0x11
  2773  000012                     	ds	2
  2774  000014                     
  2775                           ; 1 bytes @ 0x13
  2776  000014                     	ds	5
  2777  000019                     ??i2_printf:
  2778                           
  2779                           ; 1 bytes @ 0x18
  2780  000019                     	ds	4
  2781  00001D                     i2printf@prec:
  2782                           	opt stack 0
  2783                           
  2784                           ; 1 bytes @ 0x1C
  2785  00001D                     	ds	1
  2786  00001E                     i2printf@cp:
  2787                           	opt stack 0
  2788                           
  2789                           ; 2 bytes @ 0x1D
  2790  00001E                     	ds	2
  2791  000020                     i2printf@ap:
  2792                           	opt stack 0
  2793                           
  2794                           ; 2 bytes @ 0x1F
  2795  000020                     	ds	2
  2796  000022                     i2printf@len:
  2797                           	opt stack 0
  2798                           
  2799                           ; 2 bytes @ 0x21
  2800  000022                     	ds	2
  2801  000024                     i2printf@val:
  2802                           	opt stack 0
  2803                           
  2804                           ; 2 bytes @ 0x23
  2805  000024                     	ds	2
  2806  000026                     i2printf@flag:
  2807                           	opt stack 0
  2808                           
  2809                           ; 1 bytes @ 0x25
  2810  000026                     	ds	1
  2811  000027                     i2printf@c:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x26
  2815  000027                     	ds	1
  2816  000028                     i2printf@width:
  2817                           	opt stack 0
  2818                           
  2819                           ; 2 bytes @ 0x27
  2820  000028                     	ds	2
  2821  00002A                     ??_printSortTimer:
  2822  00002A                     ??i2_printRTC:
  2823  00002A                     ?_inputHandler:
  2824                           	opt stack 0
  2825                           
  2826                           ; 2 bytes @ 0x29
  2827  00002A                     	ds	2
  2828  00002C                     ??_inputHandler:
  2829                           
  2830                           ; 1 bytes @ 0x2B
  2831  00002C                     	ds	1
  2832  00002D                     printSortTimer@curTime:
  2833                           	opt stack 0
  2834  00002D                     i2printRTC@INT_time:
  2835                           	opt stack 0
  2836                           
  2837                           ; 14 bytes @ 0x2C
  2838  00002D                     	ds	14
  2839  00003B                     printSortTimer@start_sec:
  2840                           	opt stack 0
  2841  00003B                     i2printRTC@RTC_month:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x3A
  2845  00003B                     	ds	2
  2846  00003D                     printSortTimer@cur_sec:
  2847                           	opt stack 0
  2848  00003D                     i2printRTC@month:
  2849                           	opt stack 0
  2850                           
  2851                           ; 4 bytes @ 0x3C
  2852  00003D                     	ds	2
  2853  00003F                     printSortTimer@min:
  2854                           	opt stack 0
  2855                           
  2856                           ; 2 bytes @ 0x3E
  2857  00003F                     	ds	2
  2858  000041                     printSortTimer@sec:
  2859                           	opt stack 0
  2860  000041                     i2printRTC@i:
  2861                           	opt stack 0
  2862                           
  2863                           ; 2 bytes @ 0x40
  2864  000041                     	ds	2
  2865  000043                     ??_updateMenu:
  2866  000043                     _printSortTimer$2562:
  2867                           	opt stack 0
  2868                           
  2869                           ; 2 bytes @ 0x42
  2870  000043                     	ds	2
  2871  000045                     printSortTimer@timeDiff:
  2872                           	opt stack 0
  2873                           
  2874                           ; 2 bytes @ 0x44
  2875  000045                     	ds	2
  2876  000047                     printSortTimer@i_1160:
  2877                           	opt stack 0
  2878                           
  2879                           ; 2 bytes @ 0x46
  2880  000047                     	ds	2
  2881  000049                     printSortTimer@i:
  2882                           	opt stack 0
  2883                           
  2884                           ; 2 bytes @ 0x48
  2885  000049                     	ds	2
  2886  00004B                     ??_handler:
  2887                           
  2888                           ; 1 bytes @ 0x4A
  2889  00004B                     	ds	16
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           postinc0	equ	0xFEE
  2895                           wreg	equ	0xFE8
  2896                           postdec1	equ	0xFE5
  2897                           fsr1l	equ	0xFE1
  2898                           
  2899 ;;
  2900 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2901 ;;
  2902 ;; *************** function _main *****************
  2903 ;; Defined at:
  2904 ;;		line 19 in file "main.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;		None
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;		None
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;Total ram usage:        0 bytes
  2923 ;; Hardware stack levels required when called:   13
  2924 ;; This function calls:
  2925 ;;		_I2C_Master_Init
  2926 ;;		_Test
  2927 ;;		_UI
  2928 ;;		_initEEPROM
  2929 ;;		_initLCD
  2930 ;;		_initTime
  2931 ;;		_initUI
  2932 ;;		_logRun
  2933 ;;		_machineConfig
  2934 ;;		_sort
  2935 ;;		_stopSignals
  2936 ;; This function is called by:
  2937 ;;		Startup code after reset
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text0
  2942  004778                     __ptext0:
  2943                           	opt stack 0
  2944  004778                     _main:
  2945                           	opt stack 18
  2946                           
  2947                           ;main.c: 20: machineConfig();
  2948                           
  2949                           ;incstack = 0
  2950  004778  ECA5  F028         	call	_machineConfig	;wreg free
  2951                           
  2952                           ;main.c: 21: initLCD();
  2953  00477C  EC83  F02A         	call	_initLCD	;wreg free
  2954                           
  2955                           ;main.c: 24: RTCflag = 0;
  2956  004780  0E00               	movlw	0
  2957  004782  0100               	movlb	0	; () banked
  2958  004784  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2959  004786  0E00               	movlw	0
  2960  004788  6FE4               	movwf	_RTCflag& (0+255),b
  2961                           
  2962                           ;main.c: 25: if(RTCflag){
  2963  00478A  0100               	movlb	0	; () banked
  2964  00478C  51E4               	movf	_RTCflag& (0+255),w,b
  2965  00478E  0100               	movlb	0	; () banked
  2966  004790  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2967  004792  B4D8               	btfsc	status,2,c
  2968  004794  D016               	goto	l10122
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2972  004796  0E47               	movlw	71
  2973  004798  0100               	movlb	0	; () banked
  2974  00479A  6F80               	movwf	initTime@m& (0+255),b
  2975  00479C  0E17               	movlw	23
  2976  00479E  0100               	movlb	0	; () banked
  2977  0047A0  6F81               	movwf	initTime@h& (0+255),b
  2978  0047A2  0E07               	movlw	7
  2979  0047A4  0100               	movlb	0	; () banked
  2980  0047A6  6F82               	movwf	initTime@w& (0+255),b
  2981  0047A8  0E08               	movlw	8
  2982  0047AA  0100               	movlb	0	; () banked
  2983  0047AC  6F83               	movwf	initTime@DD& (0+255),b
  2984  0047AE  0E04               	movlw	4
  2985  0047B0  0100               	movlb	0	; () banked
  2986  0047B2  6F84               	movwf	initTime@MM& (0+255),b
  2987  0047B4  0E17               	movlw	23
  2988  0047B6  0100               	movlb	0	; () banked
  2989  0047B8  6F85               	movwf	initTime@YY& (0+255),b
  2990  0047BA  0E42               	movlw	66
  2991  0047BC  EC76  F02D         	call	_initTime
  2992                           
  2993                           ;main.c: 27: }
  2994  0047C0  D00B               	goto	l10124
  2995  0047C2                     l10122:
  2996                           
  2997                           ;main.c: 28: else{
  2998                           ;main.c: 29: I2C_Master_Init(10000);
  2999  0047C2  0E10               	movlw	16
  3000  0047C4  0100               	movlb	0	; () banked
  3001  0047C6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3002  0047C8  0E27               	movlw	39
  3003  0047CA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3004  0047CC  0E00               	movlw	0
  3005  0047CE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3006  0047D0  0E00               	movlw	0
  3007  0047D2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3008  0047D4  EC08  F029         	call	_I2C_Master_Init	;wreg free
  3009  0047D8                     l10124:
  3010                           
  3011                           ;main.c: 30: }
  3012                           ;main.c: 32: initUI();
  3013  0047D8  ECA6  F02B         	call	_initUI	;wreg free
  3014                           
  3015                           ;main.c: 33: first = 1;
  3016  0047DC  0E00               	movlw	0
  3017  0047DE  0101               	movlb	1	; () banked
  3018  0047E0  6F38               	movwf	(_first+1)& (0+255),b
  3019  0047E2  0E01               	movlw	1
  3020  0047E4  6F37               	movwf	_first& (0+255),b
  3021                           
  3022                           ; BSR set to: 1
  3023                           ;main.c: 34: initEEPROM();
  3024  0047E6  ECBE  F02D         	call	_initEEPROM	;wreg free
  3025                           
  3026                           ;main.c: 45: switch(machine_state){
  3027                           
  3028                           ;main.c: 44: while(1){
  3029  0047EA  D018               	goto	l10148
  3030  0047EC                     l10130:
  3031                           
  3032                           ;main.c: 47: UI();
  3033  0047EC  EC09  F000         	call	_UI	;wreg free
  3034                           
  3035                           ;main.c: 48: break;
  3036  0047F0  D015               	goto	l10148
  3037  0047F2                     l10132:
  3038                           
  3039                           ;main.c: 50: sort();
  3040  0047F2  EC65  F02D         	call	_sort	;wreg free
  3041                           
  3042                           ;main.c: 51: break;
  3043  0047F6  D012               	goto	l10148
  3044  0047F8                     l10134:
  3045                           
  3046                           ;main.c: 53: stopSignals();
  3047  0047F8  EC96  F02D         	call	_stopSignals	;wreg free
  3048                           
  3049                           ;main.c: 54: logRun();
  3050  0047FC  ECAF  F01F         	call	_logRun	;wreg free
  3051                           
  3052                           ;main.c: 55: first = 1;
  3053  004800  0E00               	movlw	0
  3054  004802  0101               	movlb	1	; () banked
  3055  004804  6F38               	movwf	(_first+1)& (0+255),b
  3056  004806  0E01               	movlw	1
  3057  004808  6F37               	movwf	_first& (0+255),b
  3058                           
  3059                           ; BSR set to: 1
  3060                           ;main.c: 56: UI();
  3061  00480A  EC09  F000         	call	_UI	;wreg free
  3062                           
  3063                           ;main.c: 57: break;
  3064  00480E  D006               	goto	l10148
  3065  004810                     l10142:
  3066                           
  3067                           ;main.c: 59: Test();
  3068  004810  EC6A  F021         	call	_Test	;wreg free
  3069                           
  3070                           ;main.c: 60: break;
  3071  004814  D003               	goto	l10148
  3072  004816                     l10144:
  3073                           
  3074                           ;main.c: 62: stopSignals();
  3075  004816  EC96  F02D         	call	_stopSignals	;wreg free
  3076  00481A                     l508:
  3077  00481A  D7FF               	goto	l508
  3078  00481C                     l10148:
  3079  00481C  0100               	movlb	0	; () banked
  3080  00481E  51FC               	movf	_machine_state& (0+255),w,b
  3081                           
  3082                           ; Switch size 1, requested type "space"
  3083                           ; Number of cases is 5, Range of values is 0 to 4
  3084                           ; switch strategies available:
  3085                           ; Name         Instructions Cycles
  3086                           ; simple_byte           16     9 (average)
  3087                           ;	Chosen strategy is simple_byte
  3088  004820  0A00               	xorlw	0	; case 0
  3089  004822  B4D8               	btfsc	status,2,c
  3090  004824  D7E3               	goto	l10130
  3091  004826  0A01               	xorlw	1	; case 1
  3092  004828  B4D8               	btfsc	status,2,c
  3093  00482A  D7E3               	goto	l10132
  3094  00482C  0A03               	xorlw	3	; case 2
  3095  00482E  B4D8               	btfsc	status,2,c
  3096  004830  D7E3               	goto	l10134
  3097  004832  0A01               	xorlw	1	; case 3
  3098  004834  B4D8               	btfsc	status,2,c
  3099  004836  D7EC               	goto	l10142
  3100  004838  0A07               	xorlw	7	; case 4
  3101  00483A  B4D8               	btfsc	status,2,c
  3102  00483C  D7EC               	goto	l10144
  3103                           
  3104                           ; BSR set to: 0
  3105                           
  3106                           ; BSR set to: 0
  3107  00483E  D7EE               	goto	l10148
  3108  004840                     __end_of_main:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postdec1	equ	0xFE5
  3117                           fsr1l	equ	0xFE1
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _sort *****************
  3121 ;; Defined at:
  3122 ;;		line 67 in file "sort.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:   12
  3143 ;; This function calls:
  3144 ;;		_Distribution
  3145 ;;		_ID
  3146 ;;		_Loading
  3147 ;; This function is called by:
  3148 ;;		_main
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text1
  3153  005ACA                     __ptext1:
  3154                           	opt stack 0
  3155  005ACA                     _sort:
  3156                           	opt stack 18
  3157                           
  3158                           ;sort.c: 68: if(machine_state == Sorting_state){
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;incstack = 0
  3162  005ACA  0100               	movlb	0	; () banked
  3163  005ACC  05FC               	decf	_machine_state& (0+255),w,b
  3164  005ACE  B4D8               	btfsc	status,2,c
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;sort.c: 69: Loading();
  3168  005AD0  ECC9  F008         	call	_Loading	;wreg free
  3169                           
  3170                           ;sort.c: 70: }
  3171                           ;sort.c: 71: if(machine_state == Sorting_state){
  3172  005AD4  0100               	movlb	0	; () banked
  3173  005AD6  05FC               	decf	_machine_state& (0+255),w,b
  3174  005AD8  B4D8               	btfsc	status,2,c
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 72: ID();
  3178  005ADA  ECC2  F00B         	call	_ID	;wreg free
  3179                           
  3180                           ;sort.c: 73: }
  3181                           ;sort.c: 74: if(machine_state == Sorting_state){
  3182  005ADE  0100               	movlb	0	; () banked
  3183  005AE0  05FC               	decf	_machine_state& (0+255),w,b
  3184  005AE2  A4D8               	btfss	status,2,c
  3185  005AE4  0012               	return	
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;sort.c: 75: Distribution();
  3189  005AE6  ECE0  F022         	call	_Distribution	;wreg free
  3190  005AEA  0012               	return	
  3191  005AEC                     __end_of_sort:
  3192                           	opt stack 0
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           postdec1	equ	0xFE5
  3200                           fsr1l	equ	0xFE1
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function _Loading *****************
  3204 ;; Defined at:
  3205 ;;		line 79 in file "sort.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  i               2   62[BANK0 ] int 
  3210 ;;  i               2   60[BANK0 ] int 
  3211 ;;  i               2   58[BANK0 ] int 
  3212 ;;  i               2   56[BANK0 ] int 
  3213 ;;  i               2   54[BANK0 ] int 
  3214 ;;  j               2   66[BANK0 ] int 
  3215 ;;  i               2   64[BANK0 ] int 
  3216 ;;  addr            2   51[BANK0 ] unsigned short 
  3217 ;;  byte1           1   53[BANK0 ] unsigned char 
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:       19 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:   11
  3234 ;; This function calls:
  3235 ;;		_EEPROM_read
  3236 ;;		_EEPROM_write
  3237 ;;		_delay_ms
  3238 ;;		_getIR
  3239 ;;		_getMAG
  3240 ;;		_initGlobalVars
  3241 ;;		_initServos
  3242 ;;		_initSortTimer
  3243 ;;		_lcdInst
  3244 ;;		_readIR
  3245 ;; This function is called by:
  3246 ;;		_sort
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text2
  3251  001192                     __ptext2:
  3252                           	opt stack 0
  3253  001192                     _Loading:
  3254                           	opt stack 18
  3255                           
  3256                           ;sort.c: 80: if(first){
  3257                           
  3258                           ;incstack = 0
  3259  001192  0101               	movlb	1	; () banked
  3260  001194  5137               	movf	_first& (0+255),w,b
  3261  001196  0101               	movlb	1	; () banked
  3262  001198  1138               	iorwf	(_first+1)& (0+255),w,b
  3263  00119A  B4D8               	btfsc	status,2,c
  3264  00119C  D066               	goto	l7832
  3265                           
  3266                           ; BSR set to: 1
  3267                           ;sort.c: 81: initGlobalVars();
  3268  00119E  EC84  F024         	call	_initGlobalVars	;wreg free
  3269                           
  3270                           ;sort.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3271  0011A2  0E01               	movlw	1
  3272  0011A4  ECEF  F02D         	call	_lcdInst
  3273  0011A8  0E68               	movlw	104
  3274  0011AA  0100               	movlb	0	; () banked
  3275  0011AC  6FB1               	movwf	??_Loading& (0+255),b
  3276  0011AE  0EE4               	movlw	228
  3277  0011B0                     u9777:
  3278  0011B0  2EE8               	decfsz	wreg,f,c
  3279  0011B2  D7FE               	bra	u9777
  3280  0011B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3281  0011B6  D7FC               	bra	u9777
  3282  0011B8  F000               	nop	
  3283                           
  3284                           ;sort.c: 83: initSortTimer();
  3285  0011BA  ECA1  F025         	call	_initSortTimer	;wreg free
  3286                           
  3287                           ;sort.c: 84: LATCbits.LATC5 = 1;
  3288  0011BE  8A8B               	bsf	3979,5,c	;volatile
  3289                           
  3290                           ;sort.c: 89: sel = EEPROM_read(0);
  3291  0011C0  0E00               	movlw	0
  3292  0011C2  0100               	movlb	0	; () banked
  3293  0011C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3294  0011C6  0E00               	movlw	0
  3295  0011C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  3296  0011CA  ECB2  F02D         	call	_EEPROM_read	;wreg free
  3297  0011CE  0100               	movlb	0	; () banked
  3298  0011D0  6FFD               	movwf	_sel& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;sort.c: 90: unsigned short addr = 1 + 11 * sel;
  3302  0011D2  0100               	movlb	0	; () banked
  3303  0011D4  51FD               	movf	_sel& (0+255),w,b
  3304  0011D6  0D0B               	mullw	11
  3305  0011D8  0E01               	movlw	1
  3306  0011DA  24F3               	addwf	prodl,w,c
  3307  0011DC  0100               	movlb	0	; () banked
  3308  0011DE  6FB3               	movwf	Loading@addr& (0+255),b
  3309  0011E0  0E00               	movlw	0
  3310  0011E2  20F4               	addwfc	prodh,w,c
  3311  0011E4  0100               	movlb	0	; () banked
  3312  0011E6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;sort.c: 91: unsigned char byte1 = 0b01111111;
  3316  0011E8  0E7F               	movlw	127
  3317  0011EA  0100               	movlb	0	; () banked
  3318  0011EC  6FB5               	movwf	Loading@byte1& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;sort.c: 92: EEPROM_write(addr, byte1);
  3322  0011EE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3323  0011F2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3324  0011F6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3325  0011FA  EC6C  F022         	call	_EEPROM_write	;wreg free
  3326                           
  3327                           ;sort.c: 95: LATBbits.LATB2 = 0;
  3328  0011FE  948A               	bcf	3978,2,c	;volatile
  3329                           
  3330                           ;sort.c: 97: for(int i=0; i<46; i++){
  3331  001200  0E00               	movlw	0
  3332  001202  0100               	movlb	0	; () banked
  3333  001204  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3334  001206  0E00               	movlw	0
  3335  001208  6FC0               	movwf	Loading@i& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338  00120A  0100               	movlb	0	; () banked
  3339  00120C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3340  00120E  D008               	goto	l7822
  3341  001210  0100               	movlb	0	; () banked
  3342  001212  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3343  001214  E126               	bnz	l787
  3344  001216  0E2E               	movlw	46
  3345  001218  0100               	movlb	0	; () banked
  3346  00121A  5DC0               	subwf	Loading@i& (0+255),w,b
  3347  00121C  B0D8               	btfsc	status,0,c
  3348  00121E  D021               	goto	l787
  3349  001220                     l7822:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;sort.c: 98: LATBbits.LATB2 = !LATBbits.LATB2;
  3353  001220  B48A               	btfsc	3978,2,c	;volatile
  3354  001222  D004               	goto	u6400
  3355  001224  0100               	movlb	0	; () banked
  3356  001226  6BB1               	clrf	??_Loading& (0+255),b
  3357  001228  2BB1               	incf	??_Loading& (0+255),f,b
  3358  00122A  D002               	goto	u6418
  3359  00122C                     u6400:
  3360  00122C  0100               	movlb	0	; () banked
  3361  00122E  6BB1               	clrf	??_Loading& (0+255),b
  3362  001230                     u6418:
  3363  001230  0100               	movlb	0	; () banked
  3364  001232  47B1               	rlncf	??_Loading& (0+255),f,b
  3365  001234  47B1               	rlncf	??_Loading& (0+255),f,b
  3366  001236  508A               	movf	3978,w,c	;volatile
  3367  001238  0100               	movlb	0	; () banked
  3368  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3369  00123C  0BFB               	andlw	-5
  3370  00123E  19B1               	xorwf	??_Loading& (0+255),w,b
  3371  001240  6E8A               	movwf	3978,c	;volatile
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;sort.c: 99: delay_ms(45-i);
  3375  001242  0100               	movlb	0	; () banked
  3376  001244  51C0               	movf	Loading@i& (0+255),w,b
  3377  001246  0800               	sublw	0
  3378  001248  0F2D               	addlw	45
  3379  00124A  EC05  F02D         	call	_delay_ms
  3380  00124E  0100               	movlb	0	; () banked
  3381  001250  4BC0               	infsnz	Loading@i& (0+255),f,b
  3382  001252  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3383                           
  3384                           ; BSR set to: 0
  3385  001254  0100               	movlb	0	; () banked
  3386  001256  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3387  001258  D7E3               	goto	l7822
  3388  00125A  0100               	movlb	0	; () banked
  3389  00125C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3390  00125E  E101               	bnz	u6420
  3391  001260  D7DA               	goto	L1
  3392  001262                     u6420:
  3393  001262                     l787:
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;sort.c: 100: }
  3397                           ;sort.c: 101: LATBbits.LATB2 = 1;
  3398  001262  848A               	bsf	3978,2,c	;volatile
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;sort.c: 104: initServos();
  3402  001264  EC51  F027         	call	_initServos	;wreg free
  3403                           
  3404                           ;sort.c: 105: }
  3405  001268  0012               	return	
  3406  00126A                     l7832:
  3407                           
  3408                           ;sort.c: 106: else{
  3409                           ;sort.c: 109: if(!f_loadingNewCan){
  3410  00126A  0100               	movlb	0	; () banked
  3411  00126C  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3412  00126E  0100               	movlb	0	; () banked
  3413  001270  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3414  001272  A4D8               	btfss	status,2,c
  3415  001274  D018               	goto	l7848
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;sort.c: 111: getIR();
  3419  001276  ECC9  F027         	call	_getIR	;wreg free
  3420                           
  3421                           ;sort.c: 113: if(!f_loadingNewCan){
  3422  00127A  0100               	movlb	0	; () banked
  3423  00127C  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3424  00127E  0100               	movlb	0	; () banked
  3425  001280  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3426  001282  B4D8               	btfsc	status,2,c
  3427  001284  0012               	return	
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;sort.c: 117: else{
  3431                           ;sort.c: 118: count_total++;
  3432                           
  3433                           ; BSR set to: 0
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;sort.c: 115: }
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;sort.c: 114: return;
  3440  001286  0100               	movlb	0	; () banked
  3441  001288  4BFE               	infsnz	_count_total& (0+255),f,b
  3442  00128A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;sort.c: 119: if(count_total == 12){
  3446  00128C  0E0C               	movlw	12
  3447  00128E  0100               	movlb	0	; () banked
  3448  001290  19FE               	xorwf	_count_total& (0+255),w,b
  3449  001292  0100               	movlb	0	; () banked
  3450  001294  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3451  001296  A4D8               	btfss	status,2,c
  3452  001298  0012               	return	
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;sort.c: 120: f_lastCan = 1;
  3456  00129A  0E00               	movlw	0
  3457  00129C  0100               	movlb	0	; () banked
  3458  00129E  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3459  0012A0  0E01               	movlw	1
  3460  0012A2  6FEC               	movwf	_f_lastCan& (0+255),b
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;sort.c: 121: }
  3464                           ;sort.c: 122: }
  3465                           ;sort.c: 123: }
  3466                           
  3467                           ; BSR set to: 0
  3468  0012A4  0012               	return	
  3469  0012A6                     l7848:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;sort.c: 126: else if(f_ID_receive){
  3473  0012A6  0101               	movlb	1	; () banked
  3474  0012A8  512D               	movf	_f_ID_receive& (0+255),w,b
  3475  0012AA  0101               	movlb	1	; () banked
  3476  0012AC  112E               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3477  0012AE  B4D8               	btfsc	status,2,c
  3478  0012B0  0012               	return	
  3479                           
  3480                           ; BSR set to: 1
  3481                           ;sort.c: 127: f_most_recent_sort_time = 1;
  3482  0012B2  0E00               	movlw	0
  3483  0012B4  0101               	movlb	1	; () banked
  3484  0012B6  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3485  0012B8  0E01               	movlw	1
  3486  0012BA  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  3487                           
  3488                           ;sort.c: 128: f_loadingNewCan = 0;
  3489  0012BC  0E00               	movlw	0
  3490  0012BE  0100               	movlb	0	; () banked
  3491  0012C0  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3492  0012C2  0E00               	movlw	0
  3493  0012C4  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 129: _delay((unsigned long)((400)*(32000000/4000.0)));
  3497  0012C6  0E11               	movlw	17
  3498  0012C8  0100               	movlb	0	; () banked
  3499  0012CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3500  0012CC  0E3C               	movlw	60
  3501  0012CE  0100               	movlb	0	; () banked
  3502  0012D0  6FB1               	movwf	??_Loading& (0+255),b
  3503  0012D2  0ECB               	movlw	203
  3504  0012D4                     u9787:
  3505  0012D4  2EE8               	decfsz	wreg,f,c
  3506  0012D6  D7FE               	bra	u9787
  3507  0012D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3508  0012DA  D7FC               	bra	u9787
  3509  0012DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3510  0012DE  D7FA               	bra	u9787
  3511                           
  3512                           ;sort.c: 130: LATBbits.LATB2 = 0;
  3513  0012E0  948A               	bcf	3978,2,c	;volatile
  3514                           
  3515                           ;sort.c: 134: f_arm_position = 1;
  3516  0012E2  0E00               	movlw	0
  3517  0012E4  0100               	movlb	0	; () banked
  3518  0012E6  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3519  0012E8  0E01               	movlw	1
  3520  0012EA  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;sort.c: 136: delay_ms(750);
  3524  0012EC  0EEE               	movlw	238
  3525  0012EE  EC05  F02D         	call	_delay_ms
  3526                           
  3527                           ;sort.c: 137: getMAG();
  3528  0012F2  EC74  F02B         	call	_getMAG	;wreg free
  3529                           
  3530                           ;sort.c: 138: sensor_outputs[0] = MAG_signal;
  3531  0012F6  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3532  0012FA  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3533                           
  3534                           ;sort.c: 140: if(sensor_outputs[0]){
  3535  0012FE  0100               	movlb	0	; () banked
  3536  001300  51DA               	movf	_sensor_outputs& (0+255),w,b
  3537  001302  0100               	movlb	0	; () banked
  3538  001304  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3539  001306  B4D8               	btfsc	status,2,c
  3540  001308  D027               	goto	l7878
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;sort.c: 141: for(int i = 0; i<25; i++){
  3544  00130A  0E00               	movlw	0
  3545  00130C  0100               	movlb	0	; () banked
  3546  00130E  6FB7               	movwf	(Loading@i_1119+1)& (0+255),b
  3547  001310  0E00               	movlw	0
  3548  001312  6FB6               	movwf	Loading@i_1119& (0+255),b
  3549  001314                     l7868:
  3550                           
  3551                           ; BSR set to: 0
  3552  001314  0100               	movlb	0	; () banked
  3553  001316  BFB7               	btfsc	(Loading@i_1119+1)& (0+255),7,b
  3554  001318  D008               	goto	l797
  3555  00131A  0100               	movlb	0	; () banked
  3556  00131C  51B7               	movf	(Loading@i_1119+1)& (0+255),w,b
  3557  00131E  E143               	bnz	l7890
  3558  001320  0E19               	movlw	25
  3559  001322  0100               	movlb	0	; () banked
  3560  001324  5DB6               	subwf	Loading@i_1119& (0+255),w,b
  3561  001326  B0D8               	btfsc	status,0,c
  3562  001328  D03E               	goto	l7890
  3563  00132A                     l797:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3567  00132A  8889               	bsf	3977,4,c	;volatile
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;sort.c: 143: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3571  00132C  0E4E               	movlw	78
  3572  00132E  0100               	movlb	0	; () banked
  3573  001330  6FB1               	movwf	??_Loading& (0+255),b
  3574  001332  0EEB               	movlw	235
  3575  001334                     u9797:
  3576  001334  2EE8               	decfsz	wreg,f,c
  3577  001336  D7FE               	bra	u9797
  3578  001338  2FB1               	decfsz	??_Loading& (0+255),f,b
  3579  00133A  D7FC               	bra	u9797
  3580                           
  3581                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3582  00133C  9889               	bcf	3977,4,c	;volatile
  3583                           
  3584                           ;sort.c: 145: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3585  00133E  0E1A               	movlw	26
  3586  001340  0100               	movlb	0	; () banked
  3587  001342  6FB1               	movwf	??_Loading& (0+255),b
  3588  001344  0EF8               	movlw	248
  3589  001346                     u9807:
  3590  001346  2EE8               	decfsz	wreg,f,c
  3591  001348  D7FE               	bra	u9807
  3592  00134A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3593  00134C  D7FC               	bra	u9807
  3594  00134E  F000               	nop	
  3595  001350  0100               	movlb	0	; () banked
  3596  001352  4BB6               	infsnz	Loading@i_1119& (0+255),f,b
  3597  001354  2BB7               	incf	(Loading@i_1119+1)& (0+255),f,b
  3598  001356  D7DE               	goto	l7868
  3599  001358                     l7878:
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;sort.c: 148: else{
  3603                           ;sort.c: 149: for(int i = 0; i<25; i++){
  3604  001358  0E00               	movlw	0
  3605  00135A  0100               	movlb	0	; () banked
  3606  00135C  6FB9               	movwf	(Loading@i_1128+1)& (0+255),b
  3607  00135E  0E00               	movlw	0
  3608  001360  6FB8               	movwf	Loading@i_1128& (0+255),b
  3609  001362                     l7880:
  3610                           
  3611                           ; BSR set to: 0
  3612  001362  0100               	movlb	0	; () banked
  3613  001364  BFB9               	btfsc	(Loading@i_1128+1)& (0+255),7,b
  3614  001366  D008               	goto	l800
  3615  001368  0100               	movlb	0	; () banked
  3616  00136A  51B9               	movf	(Loading@i_1128+1)& (0+255),w,b
  3617  00136C  E11C               	bnz	l7890
  3618  00136E  0E19               	movlw	25
  3619  001370  0100               	movlb	0	; () banked
  3620  001372  5DB8               	subwf	Loading@i_1128& (0+255),w,b
  3621  001374  B0D8               	btfsc	status,0,c
  3622  001376  D017               	goto	l7890
  3623  001378                     l800:
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;sort.c: 150: LATAbits.LATA4 = 1;
  3627  001378  8889               	bsf	3977,4,c	;volatile
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;sort.c: 151: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3631  00137A  0E3D               	movlw	61
  3632  00137C  0100               	movlb	0	; () banked
  3633  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3634  001380  0E41               	movlw	65
  3635  001382                     u9817:
  3636  001382  2EE8               	decfsz	wreg,f,c
  3637  001384  D7FE               	bra	u9817
  3638  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3639  001388  D7FC               	bra	u9817
  3640                           
  3641                           ;sort.c: 152: LATAbits.LATA4 = 0;
  3642  00138A  9889               	bcf	3977,4,c	;volatile
  3643                           
  3644                           ;sort.c: 153: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3645  00138C  0E2C               	movlw	44
  3646  00138E  0100               	movlb	0	; () banked
  3647  001390  6FB1               	movwf	??_Loading& (0+255),b
  3648  001392  0EA1               	movlw	161
  3649  001394                     u9827:
  3650  001394  2EE8               	decfsz	wreg,f,c
  3651  001396  D7FE               	bra	u9827
  3652  001398  2FB1               	decfsz	??_Loading& (0+255),f,b
  3653  00139A  D7FC               	bra	u9827
  3654  00139C  D000               	nop2	
  3655  00139E  0100               	movlb	0	; () banked
  3656  0013A0  4BB8               	infsnz	Loading@i_1128& (0+255),f,b
  3657  0013A2  2BB9               	incf	(Loading@i_1128+1)& (0+255),f,b
  3658  0013A4  D7DE               	goto	l7880
  3659  0013A6                     l7890:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 154: }
  3663                           ;sort.c: 155: }
  3664                           ;sort.c: 157: _delay((unsigned long)((350)*(32000000/4000.0)));
  3665  0013A6  0E0F               	movlw	15
  3666  0013A8  0100               	movlb	0	; () banked
  3667  0013AA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3668  0013AC  0E35               	movlw	53
  3669  0013AE  0100               	movlb	0	; () banked
  3670  0013B0  6FB1               	movwf	??_Loading& (0+255),b
  3671  0013B2  0E51               	movlw	81
  3672  0013B4                     u9837:
  3673  0013B4  2EE8               	decfsz	wreg,f,c
  3674  0013B6  D7FE               	bra	u9837
  3675  0013B8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3676  0013BA  D7FC               	bra	u9837
  3677  0013BC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3678  0013BE  D7FA               	bra	u9837
  3679                           
  3680                           ;sort.c: 159: readIR();
  3681  0013C0  EC11  F02A         	call	_readIR	;wreg free
  3682                           
  3683                           ;sort.c: 160: if(IR_signal==1){
  3684  0013C4  0100               	movlb	0	; () banked
  3685  0013C6  05E0               	decf	_IR_signal& (0+255),w,b
  3686  0013C8  0100               	movlb	0	; () banked
  3687  0013CA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3688  0013CC  A4D8               	btfss	status,2,c
  3689  0013CE  D1D4               	goto	l8018
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;sort.c: 161: _delay((unsigned long)((30)*(32000000/4000.0)));
  3693  0013D0  0E02               	movlw	2
  3694  0013D2  0100               	movlb	0	; () banked
  3695  0013D4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3696  0013D6  0E38               	movlw	56
  3697  0013D8  0100               	movlb	0	; () banked
  3698  0013DA  6FB1               	movwf	??_Loading& (0+255),b
  3699  0013DC  0EAD               	movlw	173
  3700  0013DE                     u9847:
  3701  0013DE  2EE8               	decfsz	wreg,f,c
  3702  0013E0  D7FE               	bra	u9847
  3703  0013E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3704  0013E4  D7FC               	bra	u9847
  3705  0013E6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3706  0013E8  D7FA               	bra	u9847
  3707                           
  3708                           ;sort.c: 162: readIR();
  3709  0013EA  EC11  F02A         	call	_readIR	;wreg free
  3710                           
  3711                           ;sort.c: 163: if(IR_signal==1){
  3712  0013EE  0100               	movlb	0	; () banked
  3713  0013F0  05E0               	decf	_IR_signal& (0+255),w,b
  3714  0013F2  0100               	movlb	0	; () banked
  3715  0013F4  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3716  0013F6  A4D8               	btfss	status,2,c
  3717  0013F8  D054               	goto	l7928
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;sort.c: 164: if(sensor_outputs[0]){
  3721  0013FA  0100               	movlb	0	; () banked
  3722  0013FC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3723  0013FE  0100               	movlb	0	; () banked
  3724  001400  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3725  001402  B4D8               	btfsc	status,2,c
  3726  001404  D027               	goto	l7916
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;sort.c: 165: for(int i = 0; i<25; i++){
  3730  001406  0E00               	movlw	0
  3731  001408  0100               	movlb	0	; () banked
  3732  00140A  6FBB               	movwf	(Loading@i_1130+1)& (0+255),b
  3733  00140C  0E00               	movlw	0
  3734  00140E  6FBA               	movwf	Loading@i_1130& (0+255),b
  3735  001410                     l7906:
  3736                           
  3737                           ; BSR set to: 0
  3738  001410  0100               	movlb	0	; () banked
  3739  001412  BFBB               	btfsc	(Loading@i_1130+1)& (0+255),7,b
  3740  001414  D008               	goto	l805
  3741  001416  0100               	movlb	0	; () banked
  3742  001418  51BB               	movf	(Loading@i_1130+1)& (0+255),w,b
  3743  00141A  E143               	bnz	l7928
  3744  00141C  0E19               	movlw	25
  3745  00141E  0100               	movlb	0	; () banked
  3746  001420  5DBA               	subwf	Loading@i_1130& (0+255),w,b
  3747  001422  B0D8               	btfsc	status,0,c
  3748  001424  D03E               	goto	l7928
  3749  001426                     l805:
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3753  001426  8889               	bsf	3977,4,c	;volatile
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;sort.c: 167: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3757  001428  0E4E               	movlw	78
  3758  00142A  0100               	movlb	0	; () banked
  3759  00142C  6FB1               	movwf	??_Loading& (0+255),b
  3760  00142E  0EEB               	movlw	235
  3761  001430                     u9857:
  3762  001430  2EE8               	decfsz	wreg,f,c
  3763  001432  D7FE               	bra	u9857
  3764  001434  2FB1               	decfsz	??_Loading& (0+255),f,b
  3765  001436  D7FC               	bra	u9857
  3766                           
  3767                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3768  001438  9889               	bcf	3977,4,c	;volatile
  3769                           
  3770                           ;sort.c: 169: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3771  00143A  0E1A               	movlw	26
  3772  00143C  0100               	movlb	0	; () banked
  3773  00143E  6FB1               	movwf	??_Loading& (0+255),b
  3774  001440  0EF8               	movlw	248
  3775  001442                     u9867:
  3776  001442  2EE8               	decfsz	wreg,f,c
  3777  001444  D7FE               	bra	u9867
  3778  001446  2FB1               	decfsz	??_Loading& (0+255),f,b
  3779  001448  D7FC               	bra	u9867
  3780  00144A  F000               	nop	
  3781  00144C  0100               	movlb	0	; () banked
  3782  00144E  4BBA               	infsnz	Loading@i_1130& (0+255),f,b
  3783  001450  2BBB               	incf	(Loading@i_1130+1)& (0+255),f,b
  3784  001452  D7DE               	goto	l7906
  3785  001454                     l7916:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;sort.c: 172: else{
  3789                           ;sort.c: 173: for(int i = 0; i<25; i++){
  3790  001454  0E00               	movlw	0
  3791  001456  0100               	movlb	0	; () banked
  3792  001458  6FBD               	movwf	(Loading@i_1131+1)& (0+255),b
  3793  00145A  0E00               	movlw	0
  3794  00145C  6FBC               	movwf	Loading@i_1131& (0+255),b
  3795  00145E                     l7918:
  3796                           
  3797                           ; BSR set to: 0
  3798  00145E  0100               	movlb	0	; () banked
  3799  001460  BFBD               	btfsc	(Loading@i_1131+1)& (0+255),7,b
  3800  001462  D008               	goto	l808
  3801  001464  0100               	movlb	0	; () banked
  3802  001466  51BD               	movf	(Loading@i_1131+1)& (0+255),w,b
  3803  001468  E11C               	bnz	l7928
  3804  00146A  0E19               	movlw	25
  3805  00146C  0100               	movlb	0	; () banked
  3806  00146E  5DBC               	subwf	Loading@i_1131& (0+255),w,b
  3807  001470  B0D8               	btfsc	status,0,c
  3808  001472  D017               	goto	l7928
  3809  001474                     l808:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;sort.c: 174: LATAbits.LATA4 = 1;
  3813  001474  8889               	bsf	3977,4,c	;volatile
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;sort.c: 175: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3817  001476  0E3D               	movlw	61
  3818  001478  0100               	movlb	0	; () banked
  3819  00147A  6FB1               	movwf	??_Loading& (0+255),b
  3820  00147C  0E41               	movlw	65
  3821  00147E                     u9877:
  3822  00147E  2EE8               	decfsz	wreg,f,c
  3823  001480  D7FE               	bra	u9877
  3824  001482  2FB1               	decfsz	??_Loading& (0+255),f,b
  3825  001484  D7FC               	bra	u9877
  3826                           
  3827                           ;sort.c: 176: LATAbits.LATA4 = 0;
  3828  001486  9889               	bcf	3977,4,c	;volatile
  3829                           
  3830                           ;sort.c: 177: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3831  001488  0E2C               	movlw	44
  3832  00148A  0100               	movlb	0	; () banked
  3833  00148C  6FB1               	movwf	??_Loading& (0+255),b
  3834  00148E  0EA1               	movlw	161
  3835  001490                     u9887:
  3836  001490  2EE8               	decfsz	wreg,f,c
  3837  001492  D7FE               	bra	u9887
  3838  001494  2FB1               	decfsz	??_Loading& (0+255),f,b
  3839  001496  D7FC               	bra	u9887
  3840  001498  D000               	nop2	
  3841  00149A  0100               	movlb	0	; () banked
  3842  00149C  4BBC               	infsnz	Loading@i_1131& (0+255),f,b
  3843  00149E  2BBD               	incf	(Loading@i_1131+1)& (0+255),f,b
  3844  0014A0  D7DE               	goto	l7918
  3845  0014A2                     l7928:
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;sort.c: 178: }
  3849                           ;sort.c: 179: }
  3850                           ;sort.c: 180: }
  3851                           ;sort.c: 182: _delay((unsigned long)((350)*(32000000/4000.0)));
  3852  0014A2  0E0F               	movlw	15
  3853  0014A4  0100               	movlb	0	; () banked
  3854  0014A6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3855  0014A8  0E35               	movlw	53
  3856  0014AA  0100               	movlb	0	; () banked
  3857  0014AC  6FB1               	movwf	??_Loading& (0+255),b
  3858  0014AE  0E51               	movlw	81
  3859  0014B0                     u9897:
  3860  0014B0  2EE8               	decfsz	wreg,f,c
  3861  0014B2  D7FE               	bra	u9897
  3862  0014B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3863  0014B6  D7FC               	bra	u9897
  3864  0014B8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3865  0014BA  D7FA               	bra	u9897
  3866                           
  3867                           ;sort.c: 184: int j = 0;
  3868  0014BC  0E00               	movlw	0
  3869  0014BE  0100               	movlb	0	; () banked
  3870  0014C0  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3871  0014C2  0E00               	movlw	0
  3872  0014C4  6FC2               	movwf	Loading@j& (0+255),b
  3873                           
  3874                           ;sort.c: 185: while(IR_signal == 1){
  3875  0014C6  D151               	goto	l8016
  3876  0014C8                     l7932:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;sort.c: 186: readIR();
  3880  0014C8  EC11  F02A         	call	_readIR	;wreg free
  3881                           
  3882                           ;sort.c: 187: if(j == 3 || j == 4){
  3883  0014CC  0E03               	movlw	3
  3884  0014CE  0100               	movlb	0	; () banked
  3885  0014D0  19C2               	xorwf	Loading@j& (0+255),w,b
  3886  0014D2  0100               	movlb	0	; () banked
  3887  0014D4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3888  0014D6  B4D8               	btfsc	status,2,c
  3889  0014D8  D007               	goto	l7938
  3890                           
  3891                           ; BSR set to: 0
  3892  0014DA  0E04               	movlw	4
  3893  0014DC  0100               	movlb	0	; () banked
  3894  0014DE  19C2               	xorwf	Loading@j& (0+255),w,b
  3895  0014E0  0100               	movlb	0	; () banked
  3896  0014E2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3897  0014E4  A4D8               	btfss	status,2,c
  3898  0014E6  D005               	goto	l7940
  3899  0014E8                     l7938:
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;sort.c: 188: f_arm_position = 0;
  3903  0014E8  0E00               	movlw	0
  3904  0014EA  0100               	movlb	0	; () banked
  3905  0014EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3906  0014EE  0E00               	movlw	0
  3907  0014F0  D022               	goto	L2
  3908  0014F2                     l7940:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 190: else if(j == 5 || j == 6){
  3912  0014F2  0E05               	movlw	5
  3913  0014F4  0100               	movlb	0	; () banked
  3914  0014F6  19C2               	xorwf	Loading@j& (0+255),w,b
  3915  0014F8  0100               	movlb	0	; () banked
  3916  0014FA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3917  0014FC  B4D8               	btfsc	status,2,c
  3918  0014FE  D007               	goto	l818
  3919                           
  3920                           ; BSR set to: 0
  3921  001500  0E06               	movlw	6
  3922  001502  0100               	movlb	0	; () banked
  3923  001504  19C2               	xorwf	Loading@j& (0+255),w,b
  3924  001506  0100               	movlb	0	; () banked
  3925  001508  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3926  00150A  A4D8               	btfss	status,2,c
  3927  00150C  D002               	goto	l7944
  3928  00150E                     l818:
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;sort.c: 191: LATBbits.LATB2 = 1;
  3932  00150E  848A               	bsf	3978,2,c	;volatile
  3933                           
  3934                           ;sort.c: 192: }
  3935  001510  D034               	goto	l815
  3936  001512                     l7944:
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;sort.c: 193: else if(j == 7 || j == 8){
  3940  001512  0E07               	movlw	7
  3941  001514  0100               	movlb	0	; () banked
  3942  001516  19C2               	xorwf	Loading@j& (0+255),w,b
  3943  001518  0100               	movlb	0	; () banked
  3944  00151A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3945  00151C  B4D8               	btfsc	status,2,c
  3946  00151E  D007               	goto	l7948
  3947                           
  3948                           ; BSR set to: 0
  3949  001520  0E08               	movlw	8
  3950  001522  0100               	movlb	0	; () banked
  3951  001524  19C2               	xorwf	Loading@j& (0+255),w,b
  3952  001526  0100               	movlb	0	; () banked
  3953  001528  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3954  00152A  A4D8               	btfss	status,2,c
  3955  00152C  D006               	goto	l820
  3956  00152E                     l7948:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 194: f_arm_position = 1;
  3960  00152E  0E00               	movlw	0
  3961  001530  0100               	movlb	0	; () banked
  3962  001532  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3963  001534  0E01               	movlw	1
  3964  001536                     L2:
  3965  001536  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3966                           
  3967                           ;sort.c: 195: }
  3968  001538  D020               	goto	l815
  3969  00153A                     l820:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;sort.c: 196: else if(j % 2 == 0){
  3973  00153A  0100               	movlb	0	; () banked
  3974  00153C  B1C2               	btfsc	Loading@j& (0+255),0,b
  3975  00153E  D01D               	goto	l815
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;sort.c: 197: LATBbits.LATB2 = !LATBbits.LATB2;
  3979  001540  B48A               	btfsc	3978,2,c	;volatile
  3980  001542  D004               	goto	u6660
  3981  001544  0100               	movlb	0	; () banked
  3982  001546  6BB1               	clrf	??_Loading& (0+255),b
  3983  001548  2BB1               	incf	??_Loading& (0+255),f,b
  3984  00154A  D002               	goto	u6678
  3985  00154C                     u6660:
  3986  00154C  0100               	movlb	0	; () banked
  3987  00154E  6BB1               	clrf	??_Loading& (0+255),b
  3988  001550                     u6678:
  3989  001550  0100               	movlb	0	; () banked
  3990  001552  47B1               	rlncf	??_Loading& (0+255),f,b
  3991  001554  47B1               	rlncf	??_Loading& (0+255),f,b
  3992  001556  508A               	movf	3978,w,c	;volatile
  3993  001558  0100               	movlb	0	; () banked
  3994  00155A  19B1               	xorwf	??_Loading& (0+255),w,b
  3995  00155C  0BFB               	andlw	-5
  3996  00155E  19B1               	xorwf	??_Loading& (0+255),w,b
  3997  001560  6E8A               	movwf	3978,c	;volatile
  3998                           
  3999                           ;sort.c: 198: f_arm_position = !f_arm_position;
  4000  001562  0100               	movlb	0	; () banked
  4001  001564  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  4002  001566  0100               	movlb	0	; () banked
  4003  001568  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4004  00156A  A4D8               	btfss	status,2,c
  4005  00156C  D002               	goto	u6680
  4006  00156E  0E01               	movlw	1
  4007  001570  D001               	goto	u6690
  4008  001572                     u6680:
  4009  001572  0E00               	movlw	0
  4010  001574                     u6690:
  4011  001574  0100               	movlb	0	; () banked
  4012  001576  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4013  001578  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4014  00157A                     l815:
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;sort.c: 199: }
  4018                           ;sort.c: 202: if(IR_signal==1){
  4019  00157A  0100               	movlb	0	; () banked
  4020  00157C  05E0               	decf	_IR_signal& (0+255),w,b
  4021  00157E  0100               	movlb	0	; () banked
  4022  001580  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4023  001582  A4D8               	btfss	status,2,c
  4024  001584  D0D6               	goto	l8004
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;sort.c: 203: _delay((unsigned long)((350)*(32000000/4000.0)));
  4028  001586  0E0F               	movlw	15
  4029  001588  0100               	movlb	0	; () banked
  4030  00158A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4031  00158C  0E35               	movlw	53
  4032  00158E  0100               	movlb	0	; () banked
  4033  001590  6FB1               	movwf	??_Loading& (0+255),b
  4034  001592  0E51               	movlw	81
  4035  001594                     u9907:
  4036  001594  2EE8               	decfsz	wreg,f,c
  4037  001596  D7FE               	bra	u9907
  4038  001598  2FB1               	decfsz	??_Loading& (0+255),f,b
  4039  00159A  D7FC               	bra	u9907
  4040  00159C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4041  00159E  D7FA               	bra	u9907
  4042                           
  4043                           ;sort.c: 204: readIR();
  4044  0015A0  EC11  F02A         	call	_readIR	;wreg free
  4045                           
  4046                           ;sort.c: 205: if(IR_signal==1){
  4047  0015A4  0100               	movlb	0	; () banked
  4048  0015A6  05E0               	decf	_IR_signal& (0+255),w,b
  4049  0015A8  0100               	movlb	0	; () banked
  4050  0015AA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4051  0015AC  A4D8               	btfss	status,2,c
  4052  0015AE  D0BD               	goto	l826
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;sort.c: 206: if(sensor_outputs[0]){
  4056  0015B0  0100               	movlb	0	; () banked
  4057  0015B2  51DA               	movf	_sensor_outputs& (0+255),w,b
  4058  0015B4  0100               	movlb	0	; () banked
  4059  0015B6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4060  0015B8  B4D8               	btfsc	status,2,c
  4061  0015BA  D011               	goto	l7966
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;sort.c: 207: LATAbits.LATA4 = 1;
  4065  0015BC  8889               	bsf	3977,4,c	;volatile
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;sort.c: 208: _delay((unsigned long)((250)*(32000000/4000.0)));
  4069  0015BE  0E0B               	movlw	11
  4070  0015C0  0100               	movlb	0	; () banked
  4071  0015C2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4072  0015C4  0E26               	movlw	38
  4073  0015C6  0100               	movlb	0	; () banked
  4074  0015C8  6FB1               	movwf	??_Loading& (0+255),b
  4075  0015CA  0E5D               	movlw	93
  4076  0015CC                     u9917:
  4077  0015CC  2EE8               	decfsz	wreg,f,c
  4078  0015CE  D7FE               	bra	u9917
  4079  0015D0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4080  0015D2  D7FC               	bra	u9917
  4081  0015D4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4082  0015D6  D7FA               	bra	u9917
  4083  0015D8  D000               	nop2	
  4084                           
  4085                           ;sort.c: 209: LATAbits.LATA4 = 0;
  4086  0015DA  9889               	bcf	3977,4,c	;volatile
  4087                           
  4088                           ;sort.c: 210: }
  4089  0015DC  D0A6               	goto	l826
  4090  0015DE                     l7966:
  4091                           
  4092                           ;sort.c: 211: else{
  4093                           ;sort.c: 212: for(int i = 0; i<25; i++){
  4094  0015DE  0E00               	movlw	0
  4095  0015E0  0100               	movlb	0	; () banked
  4096  0015E2  6FBF               	movwf	(Loading@i_1133+1)& (0+255),b
  4097  0015E4  0E00               	movlw	0
  4098  0015E6  6FBE               	movwf	Loading@i_1133& (0+255),b
  4099                           
  4100                           ; BSR set to: 0
  4101  0015E8  0100               	movlb	0	; () banked
  4102  0015EA  BFBF               	btfsc	(Loading@i_1133+1)& (0+255),7,b
  4103  0015EC  D079               	goto	l7996
  4104  0015EE  0100               	movlb	0	; () banked
  4105  0015F0  51BF               	movf	(Loading@i_1133+1)& (0+255),w,b
  4106  0015F2  E106               	bnz	u6730
  4107  0015F4  0E19               	movlw	25
  4108  0015F6  0100               	movlb	0	; () banked
  4109  0015F8  5DBE               	subwf	Loading@i_1133& (0+255),w,b
  4110  0015FA  B0D8               	btfsc	status,0,c
  4111  0015FC  D096               	goto	l826
  4112  0015FE  D070               	goto	l7996
  4113  001600                     u6730:
  4114                           
  4115                           ; BSR set to: 0
  4116  001600  D094               	goto	l826
  4117  001602                     l832:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4121  001602  8889               	bsf	3977,4,c	;volatile
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;sort.c: 216: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4125  001604  0E4E               	movlw	78
  4126  001606  0100               	movlb	0	; () banked
  4127  001608  6FB1               	movwf	??_Loading& (0+255),b
  4128  00160A  0EEB               	movlw	235
  4129  00160C                     u9927:
  4130  00160C  2EE8               	decfsz	wreg,f,c
  4131  00160E  D7FE               	bra	u9927
  4132  001610  2FB1               	decfsz	??_Loading& (0+255),f,b
  4133  001612  D7FC               	bra	u9927
  4134                           
  4135                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4136  001614  9889               	bcf	3977,4,c	;volatile
  4137                           
  4138                           ;sort.c: 218: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4139  001616  0E1A               	movlw	26
  4140  001618  0100               	movlb	0	; () banked
  4141  00161A  6FB1               	movwf	??_Loading& (0+255),b
  4142  00161C  0EF8               	movlw	248
  4143  00161E                     u9937:
  4144  00161E  2EE8               	decfsz	wreg,f,c
  4145  001620  D7FE               	bra	u9937
  4146  001622  2FB1               	decfsz	??_Loading& (0+255),f,b
  4147  001624  D7FC               	bra	u9937
  4148  001626  D05A               	goto	L6
  4149  001628                     l834:
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;sort.c: 221: LATAbits.LATA4 = 1;
  4153  001628  8889               	bsf	3977,4,c	;volatile
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;sort.c: 222: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4157  00162A  0E54               	movlw	84
  4158  00162C  0100               	movlb	0	; () banked
  4159  00162E  6FB1               	movwf	??_Loading& (0+255),b
  4160  001630  0E1C               	movlw	28
  4161  001632                     u9947:
  4162  001632  2EE8               	decfsz	wreg,f,c
  4163  001634  D7FE               	bra	u9947
  4164  001636  2FB1               	decfsz	??_Loading& (0+255),f,b
  4165  001638  D7FC               	bra	u9947
  4166  00163A  F000               	nop	
  4167                           
  4168                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4169  00163C  9889               	bcf	3977,4,c	;volatile
  4170                           
  4171                           ;sort.c: 224: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4172  00163E  0E15               	movlw	21
  4173  001640  0100               	movlb	0	; () banked
  4174  001642  6FB1               	movwf	??_Loading& (0+255),b
  4175  001644  0EC6               	movlw	198
  4176  001646                     u9957:
  4177  001646  2EE8               	decfsz	wreg,f,c
  4178  001648  D7FE               	bra	u9957
  4179  00164A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4180  00164C  D7FC               	bra	u9957
  4181  00164E  D046               	goto	L6
  4182  001650                     l835:
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4186  001650  8889               	bsf	3977,4,c	;volatile
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;sort.c: 228: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4190  001652  0E59               	movlw	89
  4191  001654  0100               	movlb	0	; () banked
  4192  001656  6FB1               	movwf	??_Loading& (0+255),b
  4193  001658  0E4E               	movlw	78
  4194  00165A                     u9967:
  4195  00165A  2EE8               	decfsz	wreg,f,c
  4196  00165C  D7FE               	bra	u9967
  4197  00165E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4198  001660  D7FC               	bra	u9967
  4199  001662  F000               	nop	
  4200                           
  4201                           ;sort.c: 229: LATAbits.LATA4 = 0;
  4202  001664  9889               	bcf	3977,4,c	;volatile
  4203                           
  4204                           ;sort.c: 230: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4205  001666  0E10               	movlw	16
  4206  001668  0100               	movlb	0	; () banked
  4207  00166A  6FB1               	movwf	??_Loading& (0+255),b
  4208  00166C  0E94               	movlw	148
  4209  00166E                     u9977:
  4210  00166E  2EE8               	decfsz	wreg,f,c
  4211  001670  D7FE               	bra	u9977
  4212  001672  2FB1               	decfsz	??_Loading& (0+255),f,b
  4213  001674  D7FC               	bra	u9977
  4214  001676  D032               	goto	L6
  4215  001678                     l836:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4219  001678  8889               	bsf	3977,4,c	;volatile
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;sort.c: 234: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4223  00167A  0E5E               	movlw	94
  4224  00167C  0100               	movlb	0	; () banked
  4225  00167E  6FB1               	movwf	??_Loading& (0+255),b
  4226  001680  0E80               	movlw	128
  4227  001682                     u9987:
  4228  001682  2EE8               	decfsz	wreg,f,c
  4229  001684  D7FE               	bra	u9987
  4230  001686  2FB1               	decfsz	??_Loading& (0+255),f,b
  4231  001688  D7FC               	bra	u9987
  4232  00168A  F000               	nop	
  4233                           
  4234                           ;sort.c: 235: LATAbits.LATA4 = 0;
  4235  00168C  9889               	bcf	3977,4,c	;volatile
  4236                           
  4237                           ;sort.c: 236: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4238  00168E  0E0B               	movlw	11
  4239  001690  0100               	movlb	0	; () banked
  4240  001692  6FB1               	movwf	??_Loading& (0+255),b
  4241  001694  0E62               	movlw	98
  4242  001696                     u9997:
  4243  001696  2EE8               	decfsz	wreg,f,c
  4244  001698  D7FE               	bra	u9997
  4245  00169A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4246  00169C  D7FC               	bra	u9997
  4247  00169E  D01E               	goto	L6
  4248  0016A0                     l837:
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;sort.c: 239: LATAbits.LATA4 = 1;
  4252  0016A0  8889               	bsf	3977,4,c	;volatile
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;sort.c: 240: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4256  0016A2  0E63               	movlw	99
  4257  0016A4  0100               	movlb	0	; () banked
  4258  0016A6  6FB1               	movwf	??_Loading& (0+255),b
  4259  0016A8  0EB2               	movlw	178
  4260  0016AA                     u10007:
  4261  0016AA  2EE8               	decfsz	wreg,f,c
  4262  0016AC  D7FE               	bra	u10007
  4263  0016AE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4264  0016B0  D7FC               	bra	u10007
  4265  0016B2  F000               	nop	
  4266                           
  4267                           ;sort.c: 241: LATAbits.LATA4 = 0;
  4268  0016B4  9889               	bcf	3977,4,c	;volatile
  4269                           
  4270                           ;sort.c: 242: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4271  0016B6  0E34               	movlw	52
  4272  0016B8  0100               	movlb	0	; () banked
  4273  0016BA  6FB1               	movwf	??_Loading& (0+255),b
  4274  0016BC  0EF1               	movlw	241
  4275  0016BE                     u10017:
  4276  0016BE  2EE8               	decfsz	wreg,f,c
  4277  0016C0  D7FE               	bra	u10017
  4278  0016C2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4279  0016C4  D7FC               	bra	u10017
  4280  0016C6  D000               	nop2	
  4281                           
  4282                           ;sort.c: 243: break;
  4283  0016C8  D026               	goto	l7998
  4284  0016CA                     l838:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 245: LATAbits.LATA4 = 1;
  4288  0016CA  8889               	bsf	3977,4,c	;volatile
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000.0)));
  4292  0016CC  0E68               	movlw	104
  4293  0016CE  0100               	movlb	0	; () banked
  4294  0016D0  6FB1               	movwf	??_Loading& (0+255),b
  4295  0016D2  0EE4               	movlw	228
  4296  0016D4                     u10027:
  4297  0016D4  2EE8               	decfsz	wreg,f,c
  4298  0016D6  D7FE               	bra	u10027
  4299  0016D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  4300  0016DA  D7FC               	bra	u10027
  4301  0016DC                     L6:
  4302  0016DC  F000               	nop	
  4303                           
  4304                           ;sort.c: 248: }
  4305                           
  4306                           ;sort.c: 247: break;
  4307  0016DE  D01B               	goto	l7998
  4308  0016E0                     l7996:
  4309  0016E0  C0C2  F0B1         	movff	Loading@j,??_Loading
  4310  0016E4  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4311                           
  4312                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4313                           ; Switch size 1, requested type "space"
  4314                           ; Number of cases is 1, Range of values is 0 to 0
  4315                           ; switch strategies available:
  4316                           ; Name         Instructions Cycles
  4317                           ; simple_byte            4     3 (average)
  4318                           ;	Chosen strategy is simple_byte
  4319  0016E8  0100               	movlb	0	; () banked
  4320  0016EA  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4321  0016EC  0A00               	xorlw	0	; case 0
  4322  0016EE  A4D8               	btfss	status,2,c
  4323  0016F0  D7EC               	goto	l838
  4324                           
  4325                           ; BSR set to: 0
  4326                           ; Switch size 1, requested type "space"
  4327                           ; Number of cases is 5, Range of values is 0 to 4
  4328                           ; switch strategies available:
  4329                           ; Name         Instructions Cycles
  4330                           ; simple_byte           16     9 (average)
  4331                           ;	Chosen strategy is simple_byte
  4332  0016F2  0100               	movlb	0	; () banked
  4333  0016F4  51B1               	movf	??_Loading& (0+255),w,b
  4334  0016F6  0A00               	xorlw	0	; case 0
  4335  0016F8  B4D8               	btfsc	status,2,c
  4336  0016FA  D783               	goto	l832
  4337  0016FC  0A01               	xorlw	1	; case 1
  4338  0016FE  B4D8               	btfsc	status,2,c
  4339  001700  D793               	goto	l834
  4340  001702  0A03               	xorlw	3	; case 2
  4341  001704  B4D8               	btfsc	status,2,c
  4342  001706  D7A4               	goto	l835
  4343  001708  0A01               	xorlw	1	; case 3
  4344  00170A  B4D8               	btfsc	status,2,c
  4345  00170C  D7B5               	goto	l836
  4346  00170E  0A07               	xorlw	7	; case 4
  4347  001710  B4D8               	btfsc	status,2,c
  4348  001712  D7C6               	goto	l837
  4349  001714  D7DA               	goto	l838
  4350  001716                     l7998:
  4351  001716  0100               	movlb	0	; () banked
  4352  001718  4BBE               	infsnz	Loading@i_1133& (0+255),f,b
  4353  00171A  2BBF               	incf	(Loading@i_1133+1)& (0+255),f,b
  4354                           
  4355                           ; BSR set to: 0
  4356  00171C  0100               	movlb	0	; () banked
  4357  00171E  BFBF               	btfsc	(Loading@i_1133+1)& (0+255),7,b
  4358  001720  D7DF               	goto	l7996
  4359  001722  0100               	movlb	0	; () banked
  4360  001724  51BF               	movf	(Loading@i_1133+1)& (0+255),w,b
  4361  001726  E101               	bnz	l826
  4362  001728  D765               	goto	L7
  4363  00172A                     l826:
  4364                           
  4365                           ;sort.c: 249: }
  4366                           ;sort.c: 250: }
  4367                           ;sort.c: 251: }
  4368                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4369  00172A  9889               	bcf	3977,4,c	;volatile
  4370                           
  4371                           ;sort.c: 253: j++;
  4372  00172C  0100               	movlb	0	; () banked
  4373  00172E  4BC2               	infsnz	Loading@j& (0+255),f,b
  4374  001730  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4375  001732                     l8004:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;sort.c: 254: }
  4379                           ;sort.c: 256: if(!IR_signal){
  4380  001732  0100               	movlb	0	; () banked
  4381  001734  51E0               	movf	_IR_signal& (0+255),w,b
  4382  001736  0100               	movlb	0	; () banked
  4383  001738  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4384  00173A  A4D8               	btfss	status,2,c
  4385  00173C  D016               	goto	l8016
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;sort.c: 257: _delay((unsigned long)((500)*(32000000/4000.0)));
  4389  00173E  0E15               	movlw	21
  4390  001740  0100               	movlb	0	; () banked
  4391  001742  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4392  001744  0E4B               	movlw	75
  4393  001746  0100               	movlb	0	; () banked
  4394  001748  6FB1               	movwf	??_Loading& (0+255),b
  4395  00174A  0EBE               	movlw	190
  4396  00174C                     u10037:
  4397  00174C  2EE8               	decfsz	wreg,f,c
  4398  00174E  D7FE               	bra	u10037
  4399  001750  2FB1               	decfsz	??_Loading& (0+255),f,b
  4400  001752  D7FC               	bra	u10037
  4401  001754  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4402  001756  D7FA               	bra	u10037
  4403  001758  F000               	nop	
  4404                           
  4405                           ;sort.c: 258: readIR();
  4406  00175A  EC11  F02A         	call	_readIR	;wreg free
  4407                           
  4408                           ;sort.c: 259: if(IR_signal==1){
  4409  00175E  0100               	movlb	0	; () banked
  4410  001760  05E0               	decf	_IR_signal& (0+255),w,b
  4411  001762  0100               	movlb	0	; () banked
  4412  001764  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4413  001766  A4D8               	btfss	status,2,c
  4414  001768  D006               	goto	l842
  4415  00176A                     l8016:
  4416                           
  4417                           ; BSR set to: 0
  4418  00176A  0100               	movlb	0	; () banked
  4419  00176C  05E0               	decf	_IR_signal& (0+255),w,b
  4420  00176E  0100               	movlb	0	; () banked
  4421  001770  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4422  001772  B4D8               	btfsc	status,2,c
  4423  001774  D6A9               	goto	l7932
  4424  001776                     l842:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;sort.c: 264: }
  4428                           ;sort.c: 265: }
  4429                           ;sort.c: 266: }
  4430                           ;sort.c: 267: LATBbits.LATB2 = 0;
  4431  001776  948A               	bcf	3978,2,c	;volatile
  4432  001778                     l8018:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;sort.c: 268: }
  4436                           ;sort.c: 269: f_can_coming_to_ID = 1;
  4437  001778  0E00               	movlw	0
  4438  00177A  0101               	movlb	1	; () banked
  4439  00177C  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4440  00177E  0E01               	movlw	1
  4441  001780  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4442                           
  4443                           ; BSR set to: 1
  4444                           
  4445                           ; BSR set to: 1
  4446  001782  0012               	return	
  4447  001784                     __end_of_Loading:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           postdec1	equ	0xFE5
  4458                           fsr1l	equ	0xFE1
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _initSortTimer *****************
  4462 ;; Defined at:
  4463 ;;		line 444 in file "sort.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  i               2    8[BANK0 ] int 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;Total ram usage:        5 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:   10
  4484 ;; This function calls:
  4485 ;;		_getRTC
  4486 ;; This function is called by:
  4487 ;;		_Loading
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text3
  4492  004B42                     __ptext3:
  4493                           	opt stack 0
  4494  004B42                     _initSortTimer:
  4495                           	opt stack 18
  4496                           
  4497                           ;sort.c: 446: getRTC();
  4498                           
  4499                           ;incstack = 0
  4500  004B42  EC8D  F026         	call	_getRTC	;wreg free
  4501                           
  4502                           ;sort.c: 447: for(int i = 0; i < 7; i++){
  4503  004B46  0E00               	movlw	0
  4504  004B48  0100               	movlb	0	; () banked
  4505  004B4A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4506  004B4C  0E00               	movlw	0
  4507  004B4E  6F88               	movwf	initSortTimer@i& (0+255),b
  4508  004B50                     l7324:
  4509                           
  4510                           ; BSR set to: 0
  4511  004B50  0100               	movlb	0	; () banked
  4512  004B52  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4513  004B54  D008               	goto	l7328
  4514  004B56  0100               	movlb	0	; () banked
  4515  004B58  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4516  004B5A  E140               	bnz	l7334
  4517  004B5C  0E07               	movlw	7
  4518  004B5E  0100               	movlb	0	; () banked
  4519  004B60  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4520  004B62  B0D8               	btfsc	status,0,c
  4521  004B64  D03B               	goto	l7334
  4522  004B66                     l7328:
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;sort.c: 448: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4526  004B66  0E1C               	movlw	low _time
  4527  004B68  0100               	movlb	0	; () banked
  4528  004B6A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4529  004B6C  6ED9               	movwf	fsr2l,c
  4530  004B6E  0E01               	movlw	high _time
  4531  004B70  0100               	movlb	0	; () banked
  4532  004B72  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4533  004B74  6EDA               	movwf	fsr2h,c
  4534  004B76  50DF               	movf	indf2,w,c
  4535  004B78  0100               	movlb	0	; () banked
  4536  004B7A  6F85               	movwf	??_initSortTimer& (0+255),b
  4537  004B7C  0100               	movlb	0	; () banked
  4538  004B7E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4539  004B80  0E0F               	movlw	15
  4540  004B82  1785               	andwf	??_initSortTimer& (0+255),f,b
  4541  004B84  0E0F               	movlw	15
  4542  004B86  0100               	movlb	0	; () banked
  4543  004B88  1785               	andwf	??_initSortTimer& (0+255),f,b
  4544  004B8A  0100               	movlb	0	; () banked
  4545  004B8C  5185               	movf	??_initSortTimer& (0+255),w,b
  4546  004B8E  0D0A               	mullw	10
  4547  004B90  0E1C               	movlw	low _time
  4548  004B92  0100               	movlb	0	; () banked
  4549  004B94  2588               	addwf	initSortTimer@i& (0+255),w,b
  4550  004B96  6ED9               	movwf	fsr2l,c
  4551  004B98  0E01               	movlw	high _time
  4552  004B9A  0100               	movlb	0	; () banked
  4553  004B9C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4554  004B9E  6EDA               	movwf	fsr2h,c
  4555  004BA0  50DF               	movf	indf2,w,c
  4556  004BA2  0B0F               	andlw	15
  4557  004BA4  0100               	movlb	0	; () banked
  4558  004BA6  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4559  004BA8  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4560  004BAA  50F3               	movf	prodl,w,c
  4561  004BAC  0100               	movlb	0	; () banked
  4562  004BAE  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4563  004BB0  50F4               	movf	prodh,w,c
  4564  004BB2  0100               	movlb	0	; () banked
  4565  004BB4  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4566  004BB6  90D8               	bcf	status,0,c
  4567  004BB8  0100               	movlb	0	; () banked
  4568  004BBA  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4569  004BBC  6ED9               	movwf	fsr2l,c
  4570  004BBE  0100               	movlb	0	; () banked
  4571  004BC0  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4572  004BC2  6EDA               	movwf	fsr2h,c
  4573  004BC4  0E0E               	movlw	low _startTime
  4574  004BC6  26D9               	addwf	fsr2l,f,c
  4575  004BC8  0E01               	movlw	high _startTime
  4576  004BCA  22DA               	addwfc	fsr2h,f,c
  4577  004BCC  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4578  004BD0  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4579                           
  4580                           ; BSR set to: 0
  4581  004BD4  0100               	movlb	0	; () banked
  4582  004BD6  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4583  004BD8  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4584  004BDA  D7BA               	goto	l7324
  4585  004BDC                     l7334:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;sort.c: 449: }
  4589                           ;sort.c: 451: T0CON = 0b00010111;
  4590  004BDC  0E17               	movlw	23
  4591  004BDE  6ED5               	movwf	4053,c	;volatile
  4592                           
  4593                           ;sort.c: 460: TMR0H = 0b10000101;
  4594  004BE0  0E85               	movlw	133
  4595  004BE2  6ED7               	movwf	4055,c	;volatile
  4596                           
  4597                           ;sort.c: 461: TMR0L = 0b11101110;
  4598  004BE4  0EEE               	movlw	238
  4599  004BE6  6ED6               	movwf	4054,c	;volatile
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;sort.c: 462: TMR0ON = 1;
  4603  004BE8  8ED5               	bsf	4053,7,c	;volatile
  4604                           
  4605                           ; BSR set to: 0
  4606  004BEA  0012               	return		;funcret
  4607  004BEC                     __end_of_initSortTimer:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           postdec1	equ	0xFE5
  4618                           fsr1l	equ	0xFE1
  4619                           indf2	equ	0xFDF
  4620                           postinc2	equ	0xFDE
  4621                           postdec2	equ	0xFDD
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _initGlobalVars *****************
  4627 ;; Defined at:
  4628 ;;		line 412 in file "sort.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:        0 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    7
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_Loading
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text4
  4657  004908                     __ptext4:
  4658                           	opt stack 0
  4659  004908                     _initGlobalVars:
  4660                           	opt stack 21
  4661                           
  4662                           ;sort.c: 414: first = 0;
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;incstack = 0
  4666  004908  0E00               	movlw	0
  4667  00490A  0101               	movlb	1	; () banked
  4668  00490C  6F38               	movwf	(_first+1)& (0+255),b
  4669  00490E  0E00               	movlw	0
  4670  004910  6F37               	movwf	_first& (0+255),b
  4671                           
  4672                           ;sort.c: 417: f_loadingNewCan = 0;
  4673  004912  0E00               	movlw	0
  4674  004914  0100               	movlb	0	; () banked
  4675  004916  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4676  004918  0E00               	movlw	0
  4677  00491A  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4678                           
  4679                           ;sort.c: 418: f_lastCan = 0;
  4680  00491C  0E00               	movlw	0
  4681  00491E  0100               	movlb	0	; () banked
  4682  004920  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4683  004922  0E00               	movlw	0
  4684  004924  6FEC               	movwf	_f_lastCan& (0+255),b
  4685                           
  4686                           ;sort.c: 419: f_ID_receive = 1;
  4687  004926  0E00               	movlw	0
  4688  004928  0101               	movlb	1	; () banked
  4689  00492A  6F2E               	movwf	(_f_ID_receive+1)& (0+255),b
  4690  00492C  0E01               	movlw	1
  4691  00492E  6F2D               	movwf	_f_ID_receive& (0+255),b
  4692                           
  4693                           ;sort.c: 420: f_can_coming_to_ID = 0;
  4694  004930  0E00               	movlw	0
  4695  004932  0101               	movlb	1	; () banked
  4696  004934  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4697  004936  0E00               	movlw	0
  4698  004938  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4699                           
  4700                           ;sort.c: 421: f_can_coming_to_distribution = 0;
  4701  00493A  0E00               	movlw	0
  4702  00493C  0101               	movlb	1	; () banked
  4703  00493E  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4704  004940  0E00               	movlw	0
  4705  004942  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  4706                           
  4707                           ;sort.c: 422: f_can_distributed = 1;
  4708  004944  0E00               	movlw	0
  4709  004946  0101               	movlb	1	; () banked
  4710  004948  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  4711  00494A  0E01               	movlw	1
  4712  00494C  6F33               	movwf	_f_can_distributed& (0+255),b
  4713                           
  4714                           ;sort.c: 423: f_most_recent_sort_time = 0;
  4715  00494E  0E00               	movlw	0
  4716  004950  0101               	movlb	1	; () banked
  4717  004952  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4718  004954  0E00               	movlw	0
  4719  004956  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  4720                           
  4721                           ;sort.c: 426: count_total = 0;
  4722  004958  0E00               	movlw	0
  4723  00495A  0100               	movlb	0	; () banked
  4724  00495C  6FFF               	movwf	(_count_total+1)& (0+255),b
  4725  00495E  0E00               	movlw	0
  4726  004960  6FFE               	movwf	_count_total& (0+255),b
  4727                           
  4728                           ;sort.c: 427: count_pop_no_tab = 0;
  4729  004962  0E00               	movlw	0
  4730  004964  0101               	movlb	1	; () banked
  4731  004966  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4732  004968  0E00               	movlw	0
  4733  00496A  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4734                           
  4735                           ;sort.c: 428: count_pop_w_tab = 0;
  4736  00496C  0E00               	movlw	0
  4737  00496E  0101               	movlb	1	; () banked
  4738  004970  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4739  004972  0E00               	movlw	0
  4740  004974  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4741                           
  4742                           ;sort.c: 429: count_can_w_lab = 0;
  4743  004976  0E00               	movlw	0
  4744  004978  0101               	movlb	1	; () banked
  4745  00497A  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4746  00497C  0E00               	movlw	0
  4747  00497E  6F25               	movwf	_count_can_w_lab& (0+255),b
  4748                           
  4749                           ;sort.c: 430: count_can_no_lab = 0;
  4750  004980  0E00               	movlw	0
  4751  004982  0101               	movlb	1	; () banked
  4752  004984  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4753  004986  0E00               	movlw	0
  4754  004988  6F23               	movwf	_count_can_no_lab& (0+255),b
  4755                           
  4756                           ;sort.c: 433: most_recent_sort_time = 999;
  4757  00498A  0E03               	movlw	3
  4758  00498C  0101               	movlb	1	; () banked
  4759  00498E  6F46               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4760  004990  0EE7               	movlw	231
  4761  004992  6F45               	movwf	_most_recent_sort_time& (0+255),b
  4762                           
  4763                           ;sort.c: 436: servo_timer_counter = 0;
  4764  004994  0E00               	movlw	0
  4765  004996  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4766  004998  0E00               	movlw	0
  4767  00499A  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4768                           
  4769                           ;sort.c: 437: servo_timer_target = 9999;
  4770  00499C  0E27               	movlw	39
  4771  00499E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4772  0049A0  0E0F               	movlw	15
  4773  0049A2  6E6F               	movwf	_servo_timer_target,c	;volatile
  4774                           
  4775                           ;sort.c: 438: timer2_counter = 0;
  4776  0049A4  0E00               	movlw	0
  4777  0049A6  6E74               	movwf	_timer2_counter+1,c	;volatile
  4778  0049A8  0E00               	movlw	0
  4779  0049AA  6E73               	movwf	_timer2_counter,c	;volatile
  4780                           
  4781                           ;sort.c: 439: f_arm_position = 0;
  4782  0049AC  0E00               	movlw	0
  4783  0049AE  0100               	movlb	0	; () banked
  4784  0049B0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4785  0049B2  0E00               	movlw	0
  4786  0049B4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;sort.c: 440: pan_servo_state = -1;
  4790  0049B6  686B               	setf	_pan_servo_state,c	;volatile
  4791  0049B8  686C               	setf	_pan_servo_state+1,c	;volatile
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;sort.c: 441: tilt_servo_state = -1;
  4795  0049BA  6871               	setf	_tilt_servo_state,c	;volatile
  4796  0049BC  6872               	setf	_tilt_servo_state+1,c	;volatile
  4797                           
  4798                           ;sort.c: 442: f_panning_to_bin = 0;
  4799  0049BE  0E00               	movlw	0
  4800  0049C0  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4801  0049C2  0E00               	movlw	0
  4802  0049C4  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4803                           
  4804                           ; BSR set to: 0
  4805  0049C6  0012               	return		;funcret
  4806  0049C8                     __end_of_initGlobalVars:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           prodh	equ	0xFF4
  4813                           prodl	equ	0xFF3
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           postdec1	equ	0xFE5
  4817                           fsr1l	equ	0xFE1
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           postdec2	equ	0xFDD
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825 ;; *************** function _getMAG *****************
  4826 ;; Defined at:
  4827 ;;		line 546 in file "sort.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:        2 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    9
  4848 ;; This function calls:
  4849 ;;		_readMAG
  4850 ;; This function is called by:
  4851 ;;		_Loading
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text5
  4856  0056E8                     __ptext5:
  4857                           	opt stack 0
  4858  0056E8                     _getMAG:
  4859                           	opt stack 19
  4860                           
  4861                           ;sort.c: 547: readMAG();
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;incstack = 0
  4865  0056E8  EC5D  F02A         	call	_readMAG	;wreg free
  4866                           
  4867                           ;sort.c: 549: if(MAG_signal==1){
  4868  0056EC  0100               	movlb	0	; () banked
  4869  0056EE  05E2               	decf	_MAG_signal& (0+255),w,b
  4870  0056F0  0100               	movlb	0	; () banked
  4871  0056F2  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4872  0056F4  A4D8               	btfss	status,2,c
  4873  0056F6  0012               	return	
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;sort.c: 550: _delay((unsigned long)((500)*(32000000/4000.0)));
  4877  0056F8  0E15               	movlw	21
  4878  0056FA  0100               	movlb	0	; () banked
  4879  0056FC  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4880  0056FE  0E4B               	movlw	75
  4881  005700  0100               	movlb	0	; () banked
  4882  005702  6F86               	movwf	??_getMAG& (0+255),b
  4883  005704  0EBE               	movlw	190
  4884  005706                     u10047:
  4885  005706  2EE8               	decfsz	wreg,f,c
  4886  005708  D7FE               	bra	u10047
  4887  00570A  2F86               	decfsz	??_getMAG& (0+255),f,b
  4888  00570C  D7FC               	bra	u10047
  4889  00570E  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4890  005710  D7FA               	bra	u10047
  4891  005712  F000               	nop	
  4892                           
  4893                           ;sort.c: 551: readMAG();
  4894  005714  EC5D  F02A         	call	_readMAG	;wreg free
  4895  005718  0012               	return	
  4896  00571A                     __end_of_getMAG:
  4897                           	opt stack 0
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           postdec1	equ	0xFE5
  4907                           fsr1l	equ	0xFE1
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function _getIR *****************
  4916 ;; Defined at:
  4917 ;;		line 530 in file "sort.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  i               2    7[BANK0 ] int 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  1    wreg      void 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;Total ram usage:        3 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    9
  4938 ;; This function calls:
  4939 ;;		_readIR
  4940 ;; This function is called by:
  4941 ;;		_Loading
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text6
  4946  004F92                     __ptext6:
  4947                           	opt stack 0
  4948  004F92                     _getIR:
  4949                           	opt stack 19
  4950                           
  4951                           ;sort.c: 531: readIR();
  4952                           
  4953                           ;incstack = 0
  4954  004F92  EC11  F02A         	call	_readIR	;wreg free
  4955                           
  4956                           ;sort.c: 532: for(int i = 0; i < 150; i++){
  4957  004F96  0E00               	movlw	0
  4958  004F98  0100               	movlb	0	; () banked
  4959  004F9A  6F88               	movwf	(getIR@i+1)& (0+255),b
  4960  004F9C  0E00               	movlw	0
  4961  004F9E  6F87               	movwf	getIR@i& (0+255),b
  4962  004FA0                     l7424:
  4963                           
  4964                           ; BSR set to: 0
  4965  004FA0  0100               	movlb	0	; () banked
  4966  004FA2  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4967  004FA4  D008               	goto	l7428
  4968  004FA6  0100               	movlb	0	; () banked
  4969  004FA8  5188               	movf	(getIR@i+1)& (0+255),w,b
  4970  004FAA  E11A               	bnz	l7440
  4971  004FAC  0E96               	movlw	150
  4972  004FAE  0100               	movlb	0	; () banked
  4973  004FB0  5D87               	subwf	getIR@i& (0+255),w,b
  4974  004FB2  B0D8               	btfsc	status,0,c
  4975  004FB4  D015               	goto	l7440
  4976  004FB6                     l7428:
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;sort.c: 533: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4980  004FB6  0E06               	movlw	6
  4981  004FB8  0100               	movlb	0	; () banked
  4982  004FBA  6F86               	movwf	??_getIR& (0+255),b
  4983  004FBC  0E30               	movlw	48
  4984  004FBE                     u10057:
  4985  004FBE  2EE8               	decfsz	wreg,f,c
  4986  004FC0  D7FE               	bra	u10057
  4987  004FC2  2F86               	decfsz	??_getIR& (0+255),f,b
  4988  004FC4  D7FC               	bra	u10057
  4989  004FC6  F000               	nop	
  4990                           
  4991                           ;sort.c: 534: readIR();
  4992  004FC8  EC11  F02A         	call	_readIR	;wreg free
  4993                           
  4994                           ;sort.c: 535: if(!IR_signal){
  4995  004FCC  0100               	movlb	0	; () banked
  4996  004FCE  51E0               	movf	_IR_signal& (0+255),w,b
  4997  004FD0  0100               	movlb	0	; () banked
  4998  004FD2  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4999  004FD4  B4D8               	btfsc	status,2,c
  5000  004FD6  D004               	goto	l7440
  5001                           
  5002                           ; BSR set to: 0
  5003                           
  5004                           ; BSR set to: 0
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;sort.c: 536: break;
  5008  004FD8  0100               	movlb	0	; () banked
  5009  004FDA  4B87               	infsnz	getIR@i& (0+255),f,b
  5010  004FDC  2B88               	incf	(getIR@i+1)& (0+255),f,b
  5011  004FDE  D7E0               	goto	l7424
  5012  004FE0                     l7440:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;sort.c: 537: }
  5016                           ;sort.c: 538: }
  5017                           ;sort.c: 539: if(IR_signal==1){
  5018  004FE0  0100               	movlb	0	; () banked
  5019  004FE2  05E0               	decf	_IR_signal& (0+255),w,b
  5020  004FE4  0100               	movlb	0	; () banked
  5021  004FE6  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5022  004FE8  A4D8               	btfss	status,2,c
  5023  004FEA  D006               	goto	l7444
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;sort.c: 540: f_loadingNewCan = 1;
  5027  004FEC  0E00               	movlw	0
  5028  004FEE  0100               	movlb	0	; () banked
  5029  004FF0  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5030  004FF2  0E01               	movlw	1
  5031  004FF4  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5032                           
  5033                           ;sort.c: 541: }
  5034  004FF6  0012               	return	
  5035  004FF8                     l7444:
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;sort.c: 542: else{
  5039                           ;sort.c: 543: f_loadingNewCan = 0;
  5040  004FF8  0E00               	movlw	0
  5041  004FFA  0100               	movlb	0	; () banked
  5042  004FFC  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5043  004FFE  0E00               	movlw	0
  5044  005000  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5045  005002  0012               	return	
  5046  005004                     __end_of_getIR:
  5047                           	opt stack 0
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           postinc0	equ	0xFEE
  5055                           wreg	equ	0xFE8
  5056                           postdec1	equ	0xFE5
  5057                           fsr1l	equ	0xFE1
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function _readIR *****************
  5066 ;; Defined at:
  5067 ;;		line 23 in file "ADCFunctionality.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  res             2    4[BANK0 ] int 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      void 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;Total ram usage:        4 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    8
  5088 ;; This function calls:
  5089 ;;		_readADC
  5090 ;; This function is called by:
  5091 ;;		_Loading
  5092 ;;		_getIR
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text7
  5097  005422                     __ptext7:
  5098                           	opt stack 0
  5099  005422                     _readIR:
  5100                           	opt stack 20
  5101                           
  5102                           ;ADCFunctionality.c: 24: readADC(0);
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;incstack = 0
  5106  005422  0E00               	movlw	0
  5107  005424  ECDA  F02C         	call	_readADC
  5108                           
  5109                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5110  005428  50C3               	movf	4035,w,c	;volatile
  5111  00542A  CFC4 F082          	movff	4036,??_readIR	;volatile
  5112  00542E  0100               	movlb	0	; () banked
  5113  005430  6B83               	clrf	(??_readIR+1)& (0+255),b
  5114  005432  C082  F083         	movff	??_readIR,??_readIR+1
  5115  005436  0100               	movlb	0	; () banked
  5116  005438  6B82               	clrf	??_readIR& (0+255),b
  5117  00543A  0100               	movlb	0	; () banked
  5118  00543C  1182               	iorwf	??_readIR& (0+255),w,b
  5119  00543E  0100               	movlb	0	; () banked
  5120  005440  6F84               	movwf	readIR@res& (0+255),b
  5121  005442  0100               	movlb	0	; () banked
  5122  005444  5183               	movf	(??_readIR+1)& (0+255),w,b
  5123  005446  0100               	movlb	0	; () banked
  5124  005448  6F85               	movwf	(readIR@res+1)& (0+255),b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5128  00544A  0100               	movlb	0	; () banked
  5129  00544C  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5130  00544E  D00A               	goto	u5140
  5131  005450  0E21               	movlw	33
  5132  005452  0100               	movlb	0	; () banked
  5133  005454  5D84               	subwf	readIR@res& (0+255),w,b
  5134  005456  0E03               	movlw	3
  5135  005458  0100               	movlb	0	; () banked
  5136  00545A  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5137  00545C  A0D8               	btfss	status,0,c
  5138  00545E  D002               	goto	u5140
  5139  005460  0E01               	movlw	1
  5140  005462  D001               	goto	u5150
  5141  005464                     u5140:
  5142  005464  0E00               	movlw	0
  5143  005466                     u5150:
  5144  005466  0100               	movlb	0	; () banked
  5145  005468  6FE0               	movwf	_IR_signal& (0+255),b
  5146  00546A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5147                           
  5148                           ; BSR set to: 0
  5149  00546C  0012               	return		;funcret
  5150  00546E                     __end_of_readIR:
  5151                           	opt stack 0
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           postdec1	equ	0xFE5
  5161                           fsr1l	equ	0xFE1
  5162                           indf2	equ	0xFDF
  5163                           postinc2	equ	0xFDE
  5164                           postdec2	equ	0xFDD
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function _ID *****************
  5170 ;; Defined at:
  5171 ;;		line 273 in file "sort.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  i               2   57[BANK0 ] int 
  5176 ;;  i               2   53[BANK0 ] int 
  5177 ;;  i               2   55[BANK0 ] int 
  5178 ;;  res3            2   45[BANK0 ] int 
  5179 ;;  i               2   51[BANK0 ] int 
  5180 ;;  i               2   49[BANK0 ] int 
  5181 ;;  n               2   64[BANK0 ] const int 
  5182 ;;  res2            2   62[BANK0 ] int 
  5183 ;;  res1            2   60[BANK0 ] int 
  5184 ;;  time            1   59[BANK0 ] const unsigned char 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;Total ram usage:       23 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:   10
  5201 ;; This function calls:
  5202 ;;		___awdiv
  5203 ;;		___awtoft
  5204 ;;		___ftge
  5205 ;;		_delay_ms
  5206 ;;		_lcdInst
  5207 ;;		_printf
  5208 ;;		_readCOND
  5209 ;; This function is called by:
  5210 ;;		_sort
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           	psect	text8
  5215  001784                     __ptext8:
  5216                           	opt stack 0
  5217  001784                     _ID:
  5218                           	opt stack 19
  5219                           
  5220                           ;sort.c: 274: if(f_can_coming_to_ID){
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;incstack = 0
  5224  001784  0101               	movlb	1	; () banked
  5225  001786  512F               	movf	_f_can_coming_to_ID& (0+255),w,b
  5226  001788  0101               	movlb	1	; () banked
  5227  00178A  1130               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5228  00178C  B4D8               	btfsc	status,2,c
  5229  00178E  0012               	return	
  5230                           
  5231                           ; BSR set to: 1
  5232                           ;sort.c: 276: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5233  001790  0E29               	movlw	41
  5234  001792  0100               	movlb	0	; () banked
  5235  001794  6FAC               	movwf	(??_ID+1)& (0+255),b
  5236  001796  0E96               	movlw	150
  5237  001798  0100               	movlb	0	; () banked
  5238  00179A  6FAB               	movwf	??_ID& (0+255),b
  5239  00179C  0E7F               	movlw	127
  5240  00179E                     u10067:
  5241  00179E  2EE8               	decfsz	wreg,f,c
  5242  0017A0  D7FE               	bra	u10067
  5243  0017A2  2FAB               	decfsz	??_ID& (0+255),f,b
  5244  0017A4  D7FC               	bra	u10067
  5245  0017A6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5246  0017A8  D7FA               	bra	u10067
  5247                           
  5248                           ;sort.c: 278: f_arm_position = 0;
  5249  0017AA  0E00               	movlw	0
  5250  0017AC  0100               	movlb	0	; () banked
  5251  0017AE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5252  0017B0  0E00               	movlw	0
  5253  0017B2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;sort.c: 280: LATAbits.LATA3 = 1;
  5257  0017B4  8689               	bsf	3977,3,c	;volatile
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;sort.c: 283: const int n = 10;
  5261  0017B6  0E00               	movlw	0
  5262  0017B8  0100               	movlb	0	; () banked
  5263  0017BA  6FC1               	movwf	(ID@n+1)& (0+255),b
  5264  0017BC  0E0A               	movlw	10
  5265  0017BE  6FC0               	movwf	ID@n& (0+255),b
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;sort.c: 284: const unsigned char time = (600 / n);
  5269  0017C0  0E02               	movlw	2
  5270  0017C2  0100               	movlb	0	; () banked
  5271  0017C4  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5272  0017C6  0E58               	movlw	88
  5273  0017C8  6F86               	movwf	___awdiv@dividend& (0+255),b
  5274  0017CA  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5275  0017CE  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5276  0017D2  ECE4  F024         	call	___awdiv	;wreg free
  5277  0017D6  0100               	movlb	0	; () banked
  5278  0017D8  5186               	movf	?___awdiv& (0+255),w,b
  5279  0017DA  0100               	movlb	0	; () banked
  5280  0017DC  6FBB               	movwf	ID@time& (0+255),b
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;sort.c: 285: int res1 = 0;
  5284  0017DE  0E00               	movlw	0
  5285  0017E0  0100               	movlb	0	; () banked
  5286  0017E2  6FBD               	movwf	(ID@res1+1)& (0+255),b
  5287  0017E4  0E00               	movlw	0
  5288  0017E6  6FBC               	movwf	ID@res1& (0+255),b
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;sort.c: 286: int res2 = 0;
  5292  0017E8  0E00               	movlw	0
  5293  0017EA  0100               	movlb	0	; () banked
  5294  0017EC  6FBF               	movwf	(ID@res2+1)& (0+255),b
  5295  0017EE  0E00               	movlw	0
  5296  0017F0  6FBE               	movwf	ID@res2& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;sort.c: 287: for(int i = 0; i<n; i++){
  5300  0017F2  0E00               	movlw	0
  5301  0017F4  0100               	movlb	0	; () banked
  5302  0017F6  6FB2               	movwf	(ID@i+1)& (0+255),b
  5303  0017F8  0E00               	movlw	0
  5304  0017FA  6FB1               	movwf	ID@i& (0+255),b
  5305  0017FC                     l8044:
  5306                           
  5307                           ; BSR set to: 0
  5308  0017FC  0100               	movlb	0	; () banked
  5309  0017FE  51C0               	movf	ID@n& (0+255),w,b
  5310  001800  0100               	movlb	0	; () banked
  5311  001802  5DB1               	subwf	ID@i& (0+255),w,b
  5312  001804  0100               	movlb	0	; () banked
  5313  001806  51B2               	movf	(ID@i+1)& (0+255),w,b
  5314  001808  0A80               	xorlw	128
  5315  00180A  0100               	movlb	0	; () banked
  5316  00180C  6FAB               	movwf	??_ID& (0+255),b
  5317  00180E  0100               	movlb	0	; () banked
  5318  001810  51C1               	movf	(ID@n+1)& (0+255),w,b
  5319  001812  0A80               	xorlw	128
  5320  001814  0100               	movlb	0	; () banked
  5321  001816  59AB               	subwfb	??_ID& (0+255),w,b
  5322  001818  B0D8               	btfsc	status,0,c
  5323  00181A  D012               	goto	l847
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;sort.c: 288: delay_ms(time);
  5327                           
  5328                           ; BSR set to: 0
  5329                           
  5330                           ; BSR set to: 0
  5331  00181C  0100               	movlb	0	; () banked
  5332  00181E  51BB               	movf	ID@time& (0+255),w,b
  5333  001820  EC05  F02D         	call	_delay_ms
  5334                           
  5335                           ;sort.c: 289: readCOND();
  5336  001824  EC37  F02A         	call	_readCOND	;wreg free
  5337                           
  5338                           ;sort.c: 290: res1 += COND_signal;
  5339  001828  0100               	movlb	0	; () banked
  5340  00182A  51DE               	movf	_COND_signal& (0+255),w,b
  5341  00182C  0100               	movlb	0	; () banked
  5342  00182E  27BC               	addwf	ID@res1& (0+255),f,b
  5343  001830  0100               	movlb	0	; () banked
  5344  001832  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5345  001834  0100               	movlb	0	; () banked
  5346  001836  23BD               	addwfc	(ID@res1+1)& (0+255),f,b
  5347                           
  5348                           ; BSR set to: 0
  5349  001838  0100               	movlb	0	; () banked
  5350  00183A  4BB1               	infsnz	ID@i& (0+255),f,b
  5351  00183C  2BB2               	incf	(ID@i+1)& (0+255),f,b
  5352  00183E  D7DE               	goto	l8044
  5353  001840                     l847:
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;sort.c: 291: }
  5357                           ;sort.c: 292: LATAbits.LATA3 = 0;
  5358  001840  9689               	bcf	3977,3,c	;volatile
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;sort.c: 293: _delay((unsigned long)((200)*(32000000/4000.0)));
  5362  001842  0E09               	movlw	9
  5363  001844  0100               	movlb	0	; () banked
  5364  001846  6FAC               	movwf	(??_ID+1)& (0+255),b
  5365  001848  0E1E               	movlw	30
  5366  00184A  0100               	movlb	0	; () banked
  5367  00184C  6FAB               	movwf	??_ID& (0+255),b
  5368  00184E  0EE4               	movlw	228
  5369  001850                     u10077:
  5370  001850  2EE8               	decfsz	wreg,f,c
  5371  001852  D7FE               	bra	u10077
  5372  001854  2FAB               	decfsz	??_ID& (0+255),f,b
  5373  001856  D7FC               	bra	u10077
  5374  001858  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5375  00185A  D7FA               	bra	u10077
  5376  00185C  F000               	nop	
  5377                           
  5378                           ;sort.c: 294: LATAbits.LATA3 = 1;
  5379  00185E  8689               	bsf	3977,3,c	;volatile
  5380                           
  5381                           ;sort.c: 295: for(int i = 0; i<n; i++){
  5382  001860  0E00               	movlw	0
  5383  001862  0100               	movlb	0	; () banked
  5384  001864  6FB4               	movwf	(ID@i_1141+1)& (0+255),b
  5385  001866  0E00               	movlw	0
  5386  001868  6FB3               	movwf	ID@i_1141& (0+255),b
  5387  00186A                     l8062:
  5388                           
  5389                           ; BSR set to: 0
  5390  00186A  0100               	movlb	0	; () banked
  5391  00186C  51C0               	movf	ID@n& (0+255),w,b
  5392  00186E  0100               	movlb	0	; () banked
  5393  001870  5DB3               	subwf	ID@i_1141& (0+255),w,b
  5394  001872  0100               	movlb	0	; () banked
  5395  001874  51B4               	movf	(ID@i_1141+1)& (0+255),w,b
  5396  001876  0A80               	xorlw	128
  5397  001878  0100               	movlb	0	; () banked
  5398  00187A  6FAB               	movwf	??_ID& (0+255),b
  5399  00187C  0100               	movlb	0	; () banked
  5400  00187E  51C1               	movf	(ID@n+1)& (0+255),w,b
  5401  001880  0A80               	xorlw	128
  5402  001882  0100               	movlb	0	; () banked
  5403  001884  59AB               	subwfb	??_ID& (0+255),w,b
  5404  001886  B0D8               	btfsc	status,0,c
  5405  001888  D012               	goto	l8074
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;sort.c: 296: delay_ms(time);
  5409                           
  5410                           ; BSR set to: 0
  5411                           
  5412                           ; BSR set to: 0
  5413  00188A  0100               	movlb	0	; () banked
  5414  00188C  51BB               	movf	ID@time& (0+255),w,b
  5415  00188E  EC05  F02D         	call	_delay_ms
  5416                           
  5417                           ;sort.c: 297: readCOND();
  5418  001892  EC37  F02A         	call	_readCOND	;wreg free
  5419                           
  5420                           ;sort.c: 298: res2 += COND_signal;
  5421  001896  0100               	movlb	0	; () banked
  5422  001898  51DE               	movf	_COND_signal& (0+255),w,b
  5423  00189A  0100               	movlb	0	; () banked
  5424  00189C  27BE               	addwf	ID@res2& (0+255),f,b
  5425  00189E  0100               	movlb	0	; () banked
  5426  0018A0  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5427  0018A2  0100               	movlb	0	; () banked
  5428  0018A4  23BF               	addwfc	(ID@res2+1)& (0+255),f,b
  5429                           
  5430                           ; BSR set to: 0
  5431  0018A6  0100               	movlb	0	; () banked
  5432  0018A8  4BB3               	infsnz	ID@i_1141& (0+255),f,b
  5433  0018AA  2BB4               	incf	(ID@i_1141+1)& (0+255),f,b
  5434  0018AC  D7DE               	goto	l8062
  5435  0018AE                     l8074:
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;sort.c: 299: }
  5439                           ;sort.c: 300: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5440  0018AE  0E9A               	movlw	154
  5441  0018B0  0100               	movlb	0	; () banked
  5442  0018B2  6F92               	movwf	___ftge@ff1& (0+255),b
  5443  0018B4  0E99               	movlw	153
  5444  0018B6  0100               	movlb	0	; () banked
  5445  0018B8  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5446  0018BA  0E3E               	movlw	62
  5447  0018BC  0100               	movlb	0	; () banked
  5448  0018BE  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5449  0018C0  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5450  0018C4  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5451  0018C8  C0BC  F086         	movff	ID@res1,___awdiv@dividend
  5452  0018CC  C0BD  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5453  0018D0  ECE4  F024         	call	___awdiv	;wreg free
  5454  0018D4  C086  F08E         	movff	?___awdiv,___awtoft@c
  5455  0018D8  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5456  0018DC  ECA6  F02A         	call	___awtoft	;wreg free
  5457  0018E0  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5458  0018E4  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5459  0018E8  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5460  0018EC  EC20  F024         	call	___ftge	;wreg free
  5461  0018F0  0100               	movlb	0	; () banked
  5462  0018F2  B0D8               	btfsc	status,0,c
  5463  0018F4  D002               	goto	u6830
  5464  0018F6  0E01               	movlw	1
  5465  0018F8  D001               	goto	u6840
  5466  0018FA                     u6830:
  5467  0018FA  0E00               	movlw	0
  5468  0018FC                     u6840:
  5469  0018FC  0100               	movlb	0	; () banked
  5470  0018FE  6FBC               	movwf	ID@res1& (0+255),b
  5471  001900  6BBD               	clrf	(ID@res1+1)& (0+255),b
  5472                           
  5473                           ;sort.c: 301: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5474  001902  0E9A               	movlw	154
  5475  001904  0100               	movlb	0	; () banked
  5476  001906  6F92               	movwf	___ftge@ff1& (0+255),b
  5477  001908  0E99               	movlw	153
  5478  00190A  0100               	movlb	0	; () banked
  5479  00190C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5480  00190E  0E3E               	movlw	62
  5481  001910  0100               	movlb	0	; () banked
  5482  001912  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5483  001914  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5484  001918  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5485  00191C  C0BE  F086         	movff	ID@res2,___awdiv@dividend
  5486  001920  C0BF  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5487  001924  ECE4  F024         	call	___awdiv	;wreg free
  5488  001928  C086  F08E         	movff	?___awdiv,___awtoft@c
  5489  00192C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5490  001930  ECA6  F02A         	call	___awtoft	;wreg free
  5491  001934  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5492  001938  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5493  00193C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5494  001940  EC20  F024         	call	___ftge	;wreg free
  5495  001944  0100               	movlb	0	; () banked
  5496  001946  B0D8               	btfsc	status,0,c
  5497  001948  D002               	goto	u6850
  5498  00194A  0E01               	movlw	1
  5499  00194C  D001               	goto	u6860
  5500  00194E                     u6850:
  5501  00194E  0E00               	movlw	0
  5502  001950                     u6860:
  5503  001950  0100               	movlb	0	; () banked
  5504  001952  6FBE               	movwf	ID@res2& (0+255),b
  5505  001954  6BBF               	clrf	(ID@res2+1)& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;sort.c: 304: sensor_outputs[1] = (res1 || res2);
  5509  001956  0E01               	movlw	1
  5510  001958  0100               	movlb	0	; () banked
  5511  00195A  6FAF               	movwf	_ID$1142& (0+255),b
  5512                           
  5513                           ; BSR set to: 0
  5514  00195C  0100               	movlb	0	; () banked
  5515  00195E  51BC               	movf	ID@res1& (0+255),w,b
  5516  001960  0100               	movlb	0	; () banked
  5517  001962  11BD               	iorwf	(ID@res1+1)& (0+255),w,b
  5518  001964  A4D8               	btfss	status,2,c
  5519  001966  D009               	goto	l8084
  5520                           
  5521                           ; BSR set to: 0
  5522  001968  0100               	movlb	0	; () banked
  5523  00196A  51BE               	movf	ID@res2& (0+255),w,b
  5524  00196C  0100               	movlb	0	; () banked
  5525  00196E  11BF               	iorwf	(ID@res2+1)& (0+255),w,b
  5526  001970  A4D8               	btfss	status,2,c
  5527  001972  D003               	goto	l8084
  5528                           
  5529                           ; BSR set to: 0
  5530  001974  0E00               	movlw	0
  5531  001976  0100               	movlb	0	; () banked
  5532  001978  6FAF               	movwf	_ID$1142& (0+255),b
  5533  00197A                     l8084:
  5534                           
  5535                           ; BSR set to: 0
  5536  00197A  C0AF  F0DC         	movff	_ID$1142,_sensor_outputs+2
  5537  00197E  0100               	movlb	0	; () banked
  5538  001980  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;sort.c: 305: LATAbits.LATA3 = 0;
  5542  001982  9689               	bcf	3977,3,c	;volatile
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;sort.c: 307: if(sensor_outputs[0]){
  5546  001984  0100               	movlb	0	; () banked
  5547  001986  51DA               	movf	_sensor_outputs& (0+255),w,b
  5548  001988  0100               	movlb	0	; () banked
  5549  00198A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5550  00198C  B4D8               	btfsc	status,2,c
  5551  00198E  D052               	goto	l8120
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;sort.c: 308: _delay((unsigned long)((200)*(32000000/4000.0)));
  5555  001990  0E09               	movlw	9
  5556  001992  0100               	movlb	0	; () banked
  5557  001994  6FAC               	movwf	(??_ID+1)& (0+255),b
  5558  001996  0E1E               	movlw	30
  5559  001998  0100               	movlb	0	; () banked
  5560  00199A  6FAB               	movwf	??_ID& (0+255),b
  5561  00199C  0EE4               	movlw	228
  5562  00199E                     u10087:
  5563  00199E  2EE8               	decfsz	wreg,f,c
  5564  0019A0  D7FE               	bra	u10087
  5565  0019A2  2FAB               	decfsz	??_ID& (0+255),f,b
  5566  0019A4  D7FC               	bra	u10087
  5567  0019A6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5568  0019A8  D7FA               	bra	u10087
  5569  0019AA  F000               	nop	
  5570                           
  5571                           ;sort.c: 309: LATAbits.LATA3 = 1;
  5572  0019AC  8689               	bsf	3977,3,c	;volatile
  5573                           
  5574                           ;sort.c: 310: int res3 = 0;
  5575  0019AE  0E00               	movlw	0
  5576  0019B0  0100               	movlb	0	; () banked
  5577  0019B2  6FAE               	movwf	(ID@res3+1)& (0+255),b
  5578  0019B4  0E00               	movlw	0
  5579  0019B6  6FAD               	movwf	ID@res3& (0+255),b
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;sort.c: 311: for(int i = 0; i<n; i++){
  5583  0019B8  0E00               	movlw	0
  5584  0019BA  0100               	movlb	0	; () banked
  5585  0019BC  6FB6               	movwf	(ID@i_1144+1)& (0+255),b
  5586  0019BE  0E00               	movlw	0
  5587  0019C0  6FB5               	movwf	ID@i_1144& (0+255),b
  5588  0019C2                     l8098:
  5589                           
  5590                           ; BSR set to: 0
  5591  0019C2  0100               	movlb	0	; () banked
  5592  0019C4  51C0               	movf	ID@n& (0+255),w,b
  5593  0019C6  0100               	movlb	0	; () banked
  5594  0019C8  5DB5               	subwf	ID@i_1144& (0+255),w,b
  5595  0019CA  0100               	movlb	0	; () banked
  5596  0019CC  51B6               	movf	(ID@i_1144+1)& (0+255),w,b
  5597  0019CE  0A80               	xorlw	128
  5598  0019D0  0100               	movlb	0	; () banked
  5599  0019D2  6FAB               	movwf	??_ID& (0+255),b
  5600  0019D4  0100               	movlb	0	; () banked
  5601  0019D6  51C1               	movf	(ID@n+1)& (0+255),w,b
  5602  0019D8  0A80               	xorlw	128
  5603  0019DA  0100               	movlb	0	; () banked
  5604  0019DC  59AB               	subwfb	??_ID& (0+255),w,b
  5605  0019DE  B0D8               	btfsc	status,0,c
  5606  0019E0  D012               	goto	l854
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;sort.c: 312: delay_ms(time);
  5610                           
  5611                           ; BSR set to: 0
  5612                           
  5613                           ; BSR set to: 0
  5614  0019E2  0100               	movlb	0	; () banked
  5615  0019E4  51BB               	movf	ID@time& (0+255),w,b
  5616  0019E6  EC05  F02D         	call	_delay_ms
  5617                           
  5618                           ;sort.c: 313: readCOND();
  5619  0019EA  EC37  F02A         	call	_readCOND	;wreg free
  5620                           
  5621                           ;sort.c: 314: res3 += COND_signal;
  5622  0019EE  0100               	movlb	0	; () banked
  5623  0019F0  51DE               	movf	_COND_signal& (0+255),w,b
  5624  0019F2  0100               	movlb	0	; () banked
  5625  0019F4  27AD               	addwf	ID@res3& (0+255),f,b
  5626  0019F6  0100               	movlb	0	; () banked
  5627  0019F8  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5628  0019FA  0100               	movlb	0	; () banked
  5629  0019FC  23AE               	addwfc	(ID@res3+1)& (0+255),f,b
  5630                           
  5631                           ; BSR set to: 0
  5632  0019FE  0100               	movlb	0	; () banked
  5633  001A00  4BB5               	infsnz	ID@i_1144& (0+255),f,b
  5634  001A02  2BB6               	incf	(ID@i_1144+1)& (0+255),f,b
  5635  001A04  D7DE               	goto	l8098
  5636  001A06                     l854:
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;sort.c: 315: }
  5640                           ;sort.c: 316: LATAbits.LATA3 = 0;
  5641  001A06  9689               	bcf	3977,3,c	;volatile
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;sort.c: 317: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5645  001A08  0E01               	movlw	1
  5646  001A0A  0100               	movlb	0	; () banked
  5647  001A0C  6FB0               	movwf	_ID$1145& (0+255),b
  5648                           
  5649                           ; BSR set to: 0
  5650  001A0E  0100               	movlb	0	; () banked
  5651  001A10  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5652  001A12  0100               	movlb	0	; () banked
  5653  001A14  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5654  001A16  A4D8               	btfss	status,2,c
  5655  001A18  D009               	goto	l8118
  5656                           
  5657                           ; BSR set to: 0
  5658  001A1A  0100               	movlb	0	; () banked
  5659  001A1C  51AD               	movf	ID@res3& (0+255),w,b
  5660  001A1E  0100               	movlb	0	; () banked
  5661  001A20  11AE               	iorwf	(ID@res3+1)& (0+255),w,b
  5662  001A22  A4D8               	btfss	status,2,c
  5663  001A24  D003               	goto	l8118
  5664                           
  5665                           ; BSR set to: 0
  5666  001A26  0E00               	movlw	0
  5667  001A28  0100               	movlb	0	; () banked
  5668  001A2A  6FB0               	movwf	_ID$1145& (0+255),b
  5669  001A2C                     l8118:
  5670                           
  5671                           ; BSR set to: 0
  5672  001A2C  C0B0  F0DC         	movff	_ID$1145,_sensor_outputs+2
  5673  001A30  0100               	movlb	0	; () banked
  5674  001A32  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5675  001A34                     l8120:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;sort.c: 318: }
  5679                           ;sort.c: 326: if(!sensor_outputs[0]){
  5680  001A34  0100               	movlb	0	; () banked
  5681  001A36  51DA               	movf	_sensor_outputs& (0+255),w,b
  5682  001A38  0100               	movlb	0	; () banked
  5683  001A3A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5684  001A3C  A4D8               	btfss	status,2,c
  5685  001A3E  D016               	goto	l8132
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;sort.c: 327: if(!sensor_outputs[1]){
  5689  001A40  0100               	movlb	0	; () banked
  5690  001A42  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5691  001A44  0100               	movlb	0	; () banked
  5692  001A46  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5693  001A48  A4D8               	btfss	status,2,c
  5694  001A4A  D008               	goto	l8128
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;sort.c: 328: count_pop_no_tab++;
  5698  001A4C  0101               	movlb	1	; () banked
  5699  001A4E  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5700  001A50  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5701                           
  5702                           ; BSR set to: 1
  5703                           ;sort.c: 329: cur_can = 0;
  5704  001A52  0E00               	movlw	0
  5705  001A54  0101               	movlb	1	; () banked
  5706  001A56  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5707  001A58  0E00               	movlw	0
  5708  001A5A  D007               	goto	L8
  5709  001A5C                     l8128:
  5710                           
  5711                           ;sort.c: 331: else{
  5712                           ;sort.c: 332: count_pop_w_tab++;
  5713  001A5C  0101               	movlb	1	; () banked
  5714  001A5E  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5715  001A60  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5716                           
  5717                           ; BSR set to: 1
  5718                           ;sort.c: 333: cur_can = 1;
  5719  001A62  0E00               	movlw	0
  5720  001A64  0101               	movlb	1	; () banked
  5721  001A66  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5722  001A68  0E01               	movlw	1
  5723  001A6A                     L8:
  5724  001A6A  6F2B               	movwf	_cur_can& (0+255),b
  5725  001A6C                     l8132:
  5726                           
  5727                           ;sort.c: 334: }
  5728                           ;sort.c: 335: }
  5729                           ;sort.c: 336: if(sensor_outputs[0]){
  5730  001A6C  0100               	movlb	0	; () banked
  5731  001A6E  51DA               	movf	_sensor_outputs& (0+255),w,b
  5732  001A70  0100               	movlb	0	; () banked
  5733  001A72  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5734  001A74  B4D8               	btfsc	status,2,c
  5735  001A76  D016               	goto	l8144
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;sort.c: 337: if(!sensor_outputs[1]){
  5739  001A78  0100               	movlb	0	; () banked
  5740  001A7A  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5741  001A7C  0100               	movlb	0	; () banked
  5742  001A7E  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5743  001A80  A4D8               	btfss	status,2,c
  5744  001A82  D008               	goto	l8140
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;sort.c: 338: count_can_w_lab++;
  5748  001A84  0101               	movlb	1	; () banked
  5749  001A86  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5750  001A88  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5751                           
  5752                           ; BSR set to: 1
  5753                           ;sort.c: 339: cur_can = 2;
  5754  001A8A  0E00               	movlw	0
  5755  001A8C  0101               	movlb	1	; () banked
  5756  001A8E  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5757  001A90  0E02               	movlw	2
  5758  001A92  D007               	goto	L9
  5759  001A94                     l8140:
  5760                           
  5761                           ;sort.c: 341: else{
  5762                           ;sort.c: 342: count_can_no_lab++;
  5763  001A94  0101               	movlb	1	; () banked
  5764  001A96  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5765  001A98  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5766                           
  5767                           ; BSR set to: 1
  5768                           ;sort.c: 343: cur_can = 3;
  5769  001A9A  0E00               	movlw	0
  5770  001A9C  0101               	movlb	1	; () banked
  5771  001A9E  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5772  001AA0  0E03               	movlw	3
  5773  001AA2                     L9:
  5774  001AA2  6F2B               	movwf	_cur_can& (0+255),b
  5775  001AA4                     l8144:
  5776                           
  5777                           ;sort.c: 344: }
  5778                           ;sort.c: 345: }
  5779                           ;sort.c: 347: if(debug){
  5780  001AA4  0100               	movlb	0	; () banked
  5781  001AA6  51E8               	movf	_debug& (0+255),w,b
  5782  001AA8  0100               	movlb	0	; () banked
  5783  001AAA  11E9               	iorwf	(_debug+1)& (0+255),w,b
  5784  001AAC  B4D8               	btfsc	status,2,c
  5785  001AAE  D01F               	goto	l8154
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;sort.c: 348: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5789  001AB0  0E01               	movlw	1
  5790  001AB2  ECEF  F02D         	call	_lcdInst
  5791  001AB6  0E68               	movlw	104
  5792  001AB8  0100               	movlb	0	; () banked
  5793  001ABA  6FAB               	movwf	??_ID& (0+255),b
  5794  001ABC  0EE4               	movlw	228
  5795  001ABE                     u10097:
  5796  001ABE  2EE8               	decfsz	wreg,f,c
  5797  001AC0  D7FE               	bra	u10097
  5798  001AC2  2FAB               	decfsz	??_ID& (0+255),f,b
  5799  001AC4  D7FC               	bra	u10097
  5800  001AC6  F000               	nop	
  5801  001AC8  0E80               	movlw	128
  5802  001ACA  ECEF  F02D         	call	_lcdInst
  5803                           
  5804                           ;sort.c: 349: printf("            F%dL%d", res1, res2);
  5805  001ACE  0ED3               	movlw	low STR_64
  5806  001AD0  0100               	movlb	0	; () banked
  5807  001AD2  6F8E               	movwf	printf@f& (0+255),b
  5808  001AD4  0EFA               	movlw	high STR_64
  5809  001AD6  0100               	movlb	0	; () banked
  5810  001AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5811  001ADA  C0BC  F090         	movff	ID@res1,?_printf+2
  5812  001ADE  C0BD  F091         	movff	ID@res1+1,?_printf+3
  5813  001AE2  C0BE  F092         	movff	ID@res2,?_printf+4
  5814  001AE6  C0BF  F093         	movff	ID@res2+1,?_printf+5
  5815  001AEA  ECED  F00D         	call	_printf	;wreg free
  5816  001AEE                     l8154:
  5817  001AEE  0101               	movlb	1	; () banked
  5818  001AF0  5133               	movf	_f_can_distributed& (0+255),w,b
  5819  001AF2  0101               	movlb	1	; () banked
  5820  001AF4  1134               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5821  001AF6  B4D8               	btfsc	status,2,c
  5822  001AF8  D7FA               	goto	l8154
  5823                           
  5824                           ; BSR set to: 1
  5825                           ;sort.c: 354: for(int i=0;i<10000;i++)
  5826                           
  5827                           ; BSR set to: 1
  5828  001AFA  0E00               	movlw	0
  5829  001AFC  0100               	movlb	0	; () banked
  5830  001AFE  6FB8               	movwf	(ID@i_1147+1)& (0+255),b
  5831  001B00  0E00               	movlw	0
  5832  001B02  6FB7               	movwf	ID@i_1147& (0+255),b
  5833  001B04                     l8158:
  5834                           
  5835                           ; BSR set to: 0
  5836  001B04  0100               	movlb	0	; () banked
  5837  001B06  BFB8               	btfsc	(ID@i_1147+1)& (0+255),7,b
  5838  001B08  D008               	goto	l867
  5839  001B0A  0E10               	movlw	16
  5840  001B0C  0100               	movlb	0	; () banked
  5841  001B0E  5DB7               	subwf	ID@i_1147& (0+255),w,b
  5842  001B10  0E27               	movlw	39
  5843  001B12  0100               	movlb	0	; () banked
  5844  001B14  59B8               	subwfb	(ID@i_1147+1)& (0+255),w,b
  5845  001B16  B0D8               	btfsc	status,0,c
  5846  001B18  D00D               	goto	l868
  5847  001B1A                     l867:
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;sort.c: 355: {
  5851                           ;sort.c: 356: LATCbits.LATC0 = 1;
  5852  001B1A  808B               	bsf	3979,0,c	;volatile
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;sort.c: 357: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5856  001B1C  0E1A               	movlw	26
  5857  001B1E                     u10107:
  5858  001B1E  2EE8               	decfsz	wreg,f,c
  5859  001B20  D7FE               	bra	u10107
  5860  001B22  D000               	nop2	
  5861                           
  5862                           ;sort.c: 358: LATCbits.LATC0 = 0;
  5863  001B24  908B               	bcf	3979,0,c	;volatile
  5864                           
  5865                           ;sort.c: 359: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5866  001B26  0EF0               	movlw	240
  5867  001B28                     u10117:
  5868  001B28  2EE8               	decfsz	wreg,f,c
  5869  001B2A  D7FE               	bra	u10117
  5870  001B2C  0100               	movlb	0	; () banked
  5871  001B2E  4BB7               	infsnz	ID@i_1147& (0+255),f,b
  5872  001B30  2BB8               	incf	(ID@i_1147+1)& (0+255),f,b
  5873  001B32  D7E8               	goto	l8158
  5874  001B34                     l868:
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;sort.c: 360: }
  5878                           ;sort.c: 362: LATCbits.LATC0 = 0;
  5879  001B34  908B               	bcf	3979,0,c	;volatile
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;sort.c: 364: f_can_coming_to_distribution = 1;
  5883  001B36  0E00               	movlw	0
  5884  001B38  0101               	movlb	1	; () banked
  5885  001B3A  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5886  001B3C  0E01               	movlw	1
  5887  001B3E  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  5888                           
  5889                           ; BSR set to: 1
  5890                           ;sort.c: 365: _delay((unsigned long)((750)*(32000000/4000.0)));
  5891  001B40  0E1F               	movlw	31
  5892  001B42  0100               	movlb	0	; () banked
  5893  001B44  6FAC               	movwf	(??_ID+1)& (0+255),b
  5894  001B46  0E71               	movlw	113
  5895  001B48  0100               	movlb	0	; () banked
  5896  001B4A  6FAB               	movwf	??_ID& (0+255),b
  5897  001B4C  0E1E               	movlw	30
  5898  001B4E                     u10127:
  5899  001B4E  2EE8               	decfsz	wreg,f,c
  5900  001B50  D7FE               	bra	u10127
  5901  001B52  2FAB               	decfsz	??_ID& (0+255),f,b
  5902  001B54  D7FC               	bra	u10127
  5903  001B56  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5904  001B58  D7FA               	bra	u10127
  5905  001B5A  F000               	nop	
  5906                           
  5907                           ;sort.c: 366: LATCbits.LATC0 = 1;
  5908  001B5C  808B               	bsf	3979,0,c	;volatile
  5909                           
  5910                           ;sort.c: 369: if(!f_lastCan){
  5911  001B5E  0100               	movlb	0	; () banked
  5912  001B60  51EC               	movf	_f_lastCan& (0+255),w,b
  5913  001B62  0100               	movlb	0	; () banked
  5914  001B64  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5915  001B66  A4D8               	btfss	status,2,c
  5916  001B68  D032               	goto	l8190
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;sort.c: 370: for(int i=0; i<46; i++){
  5920  001B6A  0E00               	movlw	0
  5921  001B6C  0100               	movlb	0	; () banked
  5922  001B6E  6FBA               	movwf	(ID@i_1148+1)& (0+255),b
  5923  001B70  0E00               	movlw	0
  5924  001B72  6FB9               	movwf	ID@i_1148& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927  001B74  0100               	movlb	0	; () banked
  5928  001B76  BFBA               	btfsc	(ID@i_1148+1)& (0+255),7,b
  5929  001B78  D008               	goto	l8182
  5930  001B7A  0100               	movlb	0	; () banked
  5931  001B7C  51BA               	movf	(ID@i_1148+1)& (0+255),w,b
  5932  001B7E  E126               	bnz	l871
  5933  001B80  0E2E               	movlw	46
  5934  001B82  0100               	movlb	0	; () banked
  5935  001B84  5DB9               	subwf	ID@i_1148& (0+255),w,b
  5936  001B86  B0D8               	btfsc	status,0,c
  5937  001B88  D021               	goto	l871
  5938  001B8A                     l8182:
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;sort.c: 371: LATBbits.LATB2 = !LATBbits.LATB2;
  5942  001B8A  B48A               	btfsc	3978,2,c	;volatile
  5943  001B8C  D004               	goto	u7040
  5944  001B8E  0100               	movlb	0	; () banked
  5945  001B90  6BAB               	clrf	??_ID& (0+255),b
  5946  001B92  2BAB               	incf	??_ID& (0+255),f,b
  5947  001B94  D002               	goto	u7058
  5948  001B96                     u7040:
  5949  001B96  0100               	movlb	0	; () banked
  5950  001B98  6BAB               	clrf	??_ID& (0+255),b
  5951  001B9A                     u7058:
  5952  001B9A  0100               	movlb	0	; () banked
  5953  001B9C  47AB               	rlncf	??_ID& (0+255),f,b
  5954  001B9E  47AB               	rlncf	??_ID& (0+255),f,b
  5955  001BA0  508A               	movf	3978,w,c	;volatile
  5956  001BA2  0100               	movlb	0	; () banked
  5957  001BA4  19AB               	xorwf	??_ID& (0+255),w,b
  5958  001BA6  0BFB               	andlw	-5
  5959  001BA8  19AB               	xorwf	??_ID& (0+255),w,b
  5960  001BAA  6E8A               	movwf	3978,c	;volatile
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;sort.c: 372: delay_ms(45-i);
  5964  001BAC  0100               	movlb	0	; () banked
  5965  001BAE  51B9               	movf	ID@i_1148& (0+255),w,b
  5966  001BB0  0800               	sublw	0
  5967  001BB2  0F2D               	addlw	45
  5968  001BB4  EC05  F02D         	call	_delay_ms
  5969  001BB8  0100               	movlb	0	; () banked
  5970  001BBA  4BB9               	infsnz	ID@i_1148& (0+255),f,b
  5971  001BBC  2BBA               	incf	(ID@i_1148+1)& (0+255),f,b
  5972                           
  5973                           ; BSR set to: 0
  5974  001BBE  0100               	movlb	0	; () banked
  5975  001BC0  BFBA               	btfsc	(ID@i_1148+1)& (0+255),7,b
  5976  001BC2  D7E3               	goto	l8182
  5977  001BC4  0100               	movlb	0	; () banked
  5978  001BC6  51BA               	movf	(ID@i_1148+1)& (0+255),w,b
  5979  001BC8  E101               	bnz	u7060
  5980  001BCA  D7DA               	goto	L10
  5981  001BCC                     u7060:
  5982  001BCC                     l871:
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;sort.c: 373: }
  5986                           ;sort.c: 374: LATBbits.LATB2 = 1;
  5987  001BCC  848A               	bsf	3978,2,c	;volatile
  5988  001BCE                     l8190:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;sort.c: 375: }
  5992                           ;sort.c: 377: f_can_coming_to_ID = 0;
  5993  001BCE  0E00               	movlw	0
  5994  001BD0  0101               	movlb	1	; () banked
  5995  001BD2  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5996  001BD4  0E00               	movlw	0
  5997  001BD6  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  5998  001BD8  0012               	return	
  5999  001BDA                     __end_of_ID:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           postinc0	equ	0xFEE
  6008                           wreg	equ	0xFE8
  6009                           postdec1	equ	0xFE5
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           fsr2h	equ	0xFDA
  6015                           fsr2l	equ	0xFD9
  6016                           status	equ	0xFD8
  6017                           
  6018 ;; *************** function _readCOND *****************
  6019 ;; Defined at:
  6020 ;;		line 35 in file "ADCFunctionality.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;		None
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  res             2    4[BANK0 ] int 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      void 
  6027 ;; Registers used:
  6028 ;;		wreg, status,2, status,0, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;Total ram usage:        4 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    8
  6041 ;; This function calls:
  6042 ;;		_readADC
  6043 ;; This function is called by:
  6044 ;;		_ID
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text9
  6049  00546E                     __ptext9:
  6050                           	opt stack 0
  6051  00546E                     _readCOND:
  6052                           	opt stack 20
  6053                           
  6054                           ;ADCFunctionality.c: 36: readADC(2);
  6055                           
  6056                           ; BSR set to: 1
  6057                           ;incstack = 0
  6058  00546E  0E02               	movlw	2
  6059  005470  ECDA  F02C         	call	_readADC
  6060                           
  6061                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  6062  005474  50C3               	movf	4035,w,c	;volatile
  6063  005476  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6064  00547A  0100               	movlb	0	; () banked
  6065  00547C  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6066  00547E  C082  F083         	movff	??_readCOND,??_readCOND+1
  6067  005482  0100               	movlb	0	; () banked
  6068  005484  6B82               	clrf	??_readCOND& (0+255),b
  6069  005486  0100               	movlb	0	; () banked
  6070  005488  1182               	iorwf	??_readCOND& (0+255),w,b
  6071  00548A  0100               	movlb	0	; () banked
  6072  00548C  6F84               	movwf	readCOND@res& (0+255),b
  6073  00548E  0100               	movlb	0	; () banked
  6074  005490  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6075  005492  0100               	movlb	0	; () banked
  6076  005494  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6080  005496  0100               	movlb	0	; () banked
  6081  005498  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6082  00549A  D00A               	goto	u5910
  6083  00549C  0E2D               	movlw	45
  6084  00549E  0100               	movlb	0	; () banked
  6085  0054A0  5D84               	subwf	readCOND@res& (0+255),w,b
  6086  0054A2  0E01               	movlw	1
  6087  0054A4  0100               	movlb	0	; () banked
  6088  0054A6  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6089  0054A8  A0D8               	btfss	status,0,c
  6090  0054AA  D002               	goto	u5910
  6091  0054AC  0E01               	movlw	1
  6092  0054AE  D001               	goto	u5920
  6093  0054B0                     u5910:
  6094  0054B0  0E00               	movlw	0
  6095  0054B2                     u5920:
  6096  0054B2  0100               	movlb	0	; () banked
  6097  0054B4  6FDE               	movwf	_COND_signal& (0+255),b
  6098  0054B6  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6099                           
  6100                           ; BSR set to: 0
  6101  0054B8  0012               	return		;funcret
  6102  0054BA                     __end_of_readCOND:
  6103                           	opt stack 0
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           postinc0	equ	0xFEE
  6111                           wreg	equ	0xFE8
  6112                           postdec1	equ	0xFE5
  6113                           fsr1l	equ	0xFE1
  6114                           indf2	equ	0xFDF
  6115                           postinc2	equ	0xFDE
  6116                           postdec2	equ	0xFDD
  6117                           fsr2h	equ	0xFDA
  6118                           fsr2l	equ	0xFD9
  6119                           status	equ	0xFD8
  6120                           
  6121 ;; *************** function _delay_ms *****************
  6122 ;; Defined at:
  6123 ;;		line 665 in file "sort.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  milliseconds    1    wreg     unsigned char 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      void 
  6130 ;; Registers used:
  6131 ;;		wreg, status,2, status,0, cstack
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;Total ram usage:        2 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    7
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_Loading
  6148 ;;		_ID
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           	psect	text10
  6153  005A0A                     __ptext10:
  6154                           	opt stack 0
  6155  005A0A                     _delay_ms:
  6156                           	opt stack 21
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;incstack = 0
  6160                           ;delay_ms@milliseconds stored from wreg
  6161  005A0A  0100               	movlb	0	; () banked
  6162  005A0C  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6163                           
  6164                           ;sort.c: 666: while(milliseconds > 0)
  6165  005A0E  D00B               	goto	l7396
  6166  005A10                     l7392:
  6167                           
  6168                           ;sort.c: 667: {
  6169                           ;sort.c: 668: milliseconds--;
  6170  005A10  0100               	movlb	0	; () banked
  6171  005A12  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;sort.c: 669: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6175  005A14  0E0B               	movlw	11
  6176  005A16  0100               	movlb	0	; () banked
  6177  005A18  6F80               	movwf	??_delay_ms& (0+255),b
  6178  005A1A  0E47               	movlw	71
  6179  005A1C                     u10137:
  6180  005A1C  2EE8               	decfsz	wreg,f,c
  6181  005A1E  D7FE               	bra	u10137
  6182  005A20  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6183  005A22  D7FC               	bra	u10137
  6184  005A24  D000               	nop2	
  6185  005A26                     l7396:
  6186  005A26  0100               	movlb	0	; () banked
  6187  005A28  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6188  005A2A  0100               	movlb	0	; () banked
  6189  005A2C  B4D8               	btfsc	status,2,c
  6190  005A2E  0012               	return	
  6191  005A30  D7EF               	goto	l7392
  6192  005A32                     __end_of_delay_ms:
  6193                           	opt stack 0
  6194                           tblptru	equ	0xFF8
  6195                           tblptrh	equ	0xFF7
  6196                           tblptrl	equ	0xFF6
  6197                           tablat	equ	0xFF5
  6198                           prodh	equ	0xFF4
  6199                           prodl	equ	0xFF3
  6200                           postinc0	equ	0xFEE
  6201                           wreg	equ	0xFE8
  6202                           postdec1	equ	0xFE5
  6203                           fsr1l	equ	0xFE1
  6204                           indf2	equ	0xFDF
  6205                           postinc2	equ	0xFDE
  6206                           postdec2	equ	0xFDD
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function ___ftge *****************
  6212 ;; Defined at:
  6213 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  ff1             3   18[BANK0 ] float 
  6216 ;;  ff2             3   21[BANK0 ] float 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;		None
  6219 ;; Return value:  Size  Location     Type
  6220 ;;		None               void
  6221 ;; Registers used:
  6222 ;;		wreg, status,2, status,0
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6228 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;Total ram usage:        9 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    7
  6235 ;; This function calls:
  6236 ;;		Nothing
  6237 ;; This function is called by:
  6238 ;;		_ID
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text11
  6243  004840                     __ptext11:
  6244                           	opt stack 0
  6245  004840                     ___ftge:
  6246                           	opt stack 21
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;incstack = 0
  6250  004840  0100               	movlb	0	; () banked
  6251  004842  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6252  004844  D01D               	goto	l7514
  6253                           
  6254                           ; BSR set to: 0
  6255  004846  C092  F098         	movff	___ftge@ff1,??___ftge
  6256  00484A  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6257  00484E  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6258  004852  0100               	movlb	0	; () banked
  6259  004854  1F98               	comf	??___ftge& (0+255),f,b
  6260  004856  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6261  004858  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6262  00485A  2B98               	incf	??___ftge& (0+255),f,b
  6263  00485C  0E00               	movlw	0
  6264  00485E  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6265  004860  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6266  004862  0E00               	movlw	0
  6267  004864  0100               	movlb	0	; () banked
  6268  004866  2598               	addwf	??___ftge& (0+255),w,b
  6269  004868  0100               	movlb	0	; () banked
  6270  00486A  6F92               	movwf	___ftge@ff1& (0+255),b
  6271  00486C  0E00               	movlw	0
  6272  00486E  0100               	movlb	0	; () banked
  6273  004870  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6274  004872  0100               	movlb	0	; () banked
  6275  004874  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6276  004876  0E80               	movlw	128
  6277  004878  0100               	movlb	0	; () banked
  6278  00487A  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6279  00487C  0100               	movlb	0	; () banked
  6280  00487E  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6281  004880                     l7514:
  6282                           
  6283                           ; BSR set to: 0
  6284  004880  0100               	movlb	0	; () banked
  6285  004882  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6286  004884  D01D               	goto	l7518
  6287                           
  6288                           ; BSR set to: 0
  6289  004886  C095  F098         	movff	___ftge@ff2,??___ftge
  6290  00488A  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6291  00488E  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6292  004892  0100               	movlb	0	; () banked
  6293  004894  1F98               	comf	??___ftge& (0+255),f,b
  6294  004896  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6295  004898  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6296  00489A  2B98               	incf	??___ftge& (0+255),f,b
  6297  00489C  0E00               	movlw	0
  6298  00489E  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6299  0048A0  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6300  0048A2  0E00               	movlw	0
  6301  0048A4  0100               	movlb	0	; () banked
  6302  0048A6  2598               	addwf	??___ftge& (0+255),w,b
  6303  0048A8  0100               	movlb	0	; () banked
  6304  0048AA  6F95               	movwf	___ftge@ff2& (0+255),b
  6305  0048AC  0E00               	movlw	0
  6306  0048AE  0100               	movlb	0	; () banked
  6307  0048B0  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6308  0048B2  0100               	movlb	0	; () banked
  6309  0048B4  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6310  0048B6  0E80               	movlw	128
  6311  0048B8  0100               	movlb	0	; () banked
  6312  0048BA  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6313  0048BC  0100               	movlb	0	; () banked
  6314  0048BE  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6315  0048C0                     l7518:
  6316                           
  6317                           ; BSR set to: 0
  6318  0048C0  0E00               	movlw	0
  6319  0048C2  0100               	movlb	0	; () banked
  6320  0048C4  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6321  0048C6  0E00               	movlw	0
  6322  0048C8  0100               	movlb	0	; () banked
  6323  0048CA  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6324  0048CC  0E80               	movlw	128
  6325  0048CE  0100               	movlb	0	; () banked
  6326  0048D0  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6327                           
  6328                           ; BSR set to: 0
  6329  0048D2  0E00               	movlw	0
  6330  0048D4  0100               	movlb	0	; () banked
  6331  0048D6  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6332  0048D8  0E00               	movlw	0
  6333  0048DA  0100               	movlb	0	; () banked
  6334  0048DC  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6335  0048DE  0E80               	movlw	128
  6336  0048E0  0100               	movlb	0	; () banked
  6337  0048E2  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6338  0048E4  0100               	movlb	0	; () banked
  6339  0048E6  5195               	movf	___ftge@ff2& (0+255),w,b
  6340  0048E8  0100               	movlb	0	; () banked
  6341  0048EA  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6342  0048EC  0100               	movlb	0	; () banked
  6343  0048EE  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6344  0048F0  0100               	movlb	0	; () banked
  6345  0048F2  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6346  0048F4  0100               	movlb	0	; () banked
  6347  0048F6  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6348  0048F8  0100               	movlb	0	; () banked
  6349  0048FA  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6350  0048FC  B0D8               	btfsc	status,0,c
  6351  0048FE  D002               	goto	l7524
  6352                           
  6353                           ; BSR set to: 0
  6354  004900  90D8               	bcf	status,0,c
  6355  004902  0012               	return	
  6356  004904                     l7524:
  6357                           
  6358                           ; BSR set to: 0
  6359  004904  80D8               	bsf	status,0,c
  6360                           
  6361                           ; BSR set to: 0
  6362  004906  0012               	return	
  6363  004908                     __end_of___ftge:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           postinc0	equ	0xFEE
  6372                           wreg	equ	0xFE8
  6373                           postdec1	equ	0xFE5
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           postinc2	equ	0xFDE
  6377                           postdec2	equ	0xFDD
  6378                           fsr2h	equ	0xFDA
  6379                           fsr2l	equ	0xFD9
  6380                           status	equ	0xFD8
  6381                           
  6382 ;; *************** function ___awtoft *****************
  6383 ;; Defined at:
  6384 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  c               2   14[BANK0 ] int 
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  sign            1   17[BANK0 ] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  3   14[BANK0 ] float 
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6398 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;Total ram usage:        4 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    8
  6405 ;; This function calls:
  6406 ;;		___ftpack
  6407 ;; This function is called by:
  6408 ;;		_ID
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text12
  6413  00554C                     __ptext12:
  6414                           	opt stack 0
  6415  00554C                     ___awtoft:
  6416                           	opt stack 20
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;incstack = 0
  6420  00554C  0E00               	movlw	0
  6421  00554E  0100               	movlb	0	; () banked
  6422  005550  6F91               	movwf	___awtoft@sign& (0+255),b
  6423                           
  6424                           ; BSR set to: 0
  6425  005552  0100               	movlb	0	; () banked
  6426  005554  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6427  005556  D008               	goto	l7506
  6428                           
  6429                           ; BSR set to: 0
  6430  005558  0100               	movlb	0	; () banked
  6431  00555A  6D8E               	negf	___awtoft@c& (0+255),b
  6432  00555C  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6433  00555E  B0D8               	btfsc	status,0,c
  6434  005560  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6435                           
  6436                           ; BSR set to: 0
  6437  005562  0E01               	movlw	1
  6438  005564  0100               	movlb	0	; () banked
  6439  005566  6F91               	movwf	___awtoft@sign& (0+255),b
  6440  005568                     l7506:
  6441                           
  6442                           ; BSR set to: 0
  6443  005568  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6444  00556C  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6445  005570  0100               	movlb	0	; () banked
  6446  005572  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6447  005574  0E8E               	movlw	142
  6448  005576  0100               	movlb	0	; () banked
  6449  005578  6F83               	movwf	___ftpack@exp& (0+255),b
  6450  00557A  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6451  00557E  ECE4  F020         	call	___ftpack	;wreg free
  6452  005582  C080  F08E         	movff	?___ftpack,?___awtoft
  6453  005586  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6454  00558A  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6455  00558E  0012               	return	
  6456  005590                     __end_of___awtoft:
  6457                           	opt stack 0
  6458                           tblptru	equ	0xFF8
  6459                           tblptrh	equ	0xFF7
  6460                           tblptrl	equ	0xFF6
  6461                           tablat	equ	0xFF5
  6462                           prodh	equ	0xFF4
  6463                           prodl	equ	0xFF3
  6464                           postinc0	equ	0xFEE
  6465                           wreg	equ	0xFE8
  6466                           postdec1	equ	0xFE5
  6467                           fsr1l	equ	0xFE1
  6468                           indf2	equ	0xFDF
  6469                           postinc2	equ	0xFDE
  6470                           postdec2	equ	0xFDD
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function ___ftpack *****************
  6476 ;; Defined at:
  6477 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  arg             3    0[BANK0 ] unsigned um
  6480 ;;  exp             1    3[BANK0 ] unsigned char 
  6481 ;;  sign            1    4[BANK0 ] unsigned char 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;		None
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  3    0[BANK0 ] float 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6493 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;Total ram usage:        8 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    7
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		___awtoft
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text13
  6508  0041C8                     __ptext13:
  6509                           	opt stack 0
  6510  0041C8                     ___ftpack:
  6511                           	opt stack 20
  6512                           
  6513                           ;incstack = 0
  6514  0041C8  0100               	movlb	0	; () banked
  6515  0041CA  5183               	movf	___ftpack@exp& (0+255),w,b
  6516  0041CC  0100               	movlb	0	; () banked
  6517  0041CE  B4D8               	btfsc	status,2,c
  6518  0041D0  D008               	goto	l6890
  6519                           
  6520                           ; BSR set to: 0
  6521  0041D2  0100               	movlb	0	; () banked
  6522  0041D4  5180               	movf	___ftpack@arg& (0+255),w,b
  6523  0041D6  0100               	movlb	0	; () banked
  6524  0041D8  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6525  0041DA  0100               	movlb	0	; () banked
  6526  0041DC  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6527  0041DE  A4D8               	btfss	status,2,c
  6528  0041E0  D011               	goto	l6896
  6529  0041E2                     l6890:
  6530                           
  6531                           ; BSR set to: 0
  6532  0041E2  0E00               	movlw	0
  6533  0041E4  0100               	movlb	0	; () banked
  6534  0041E6  6F80               	movwf	?___ftpack& (0+255),b
  6535  0041E8  0E00               	movlw	0
  6536  0041EA  0100               	movlb	0	; () banked
  6537  0041EC  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6538  0041EE  0E00               	movlw	0
  6539  0041F0  0100               	movlb	0	; () banked
  6540  0041F2  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6541                           
  6542                           ; BSR set to: 0
  6543  0041F4  0012               	return	
  6544  0041F6                     l6894:
  6545                           
  6546                           ; BSR set to: 0
  6547  0041F6  0100               	movlb	0	; () banked
  6548  0041F8  2B83               	incf	___ftpack@exp& (0+255),f,b
  6549  0041FA  0100               	movlb	0	; () banked
  6550  0041FC  90D8               	bcf	status,0,c
  6551  0041FE  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6552  004200  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6553  004202  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6554  004204                     l6896:
  6555                           
  6556                           ; BSR set to: 0
  6557  004204  0E00               	movlw	0
  6558  004206  0100               	movlb	0	; () banked
  6559  004208  1580               	andwf	___ftpack@arg& (0+255),w,b
  6560  00420A  0100               	movlb	0	; () banked
  6561  00420C  6F85               	movwf	??___ftpack& (0+255),b
  6562  00420E  0E00               	movlw	0
  6563  004210  0100               	movlb	0	; () banked
  6564  004212  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6565  004214  0100               	movlb	0	; () banked
  6566  004216  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6567  004218  0EFE               	movlw	254
  6568  00421A  0100               	movlb	0	; () banked
  6569  00421C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6570  00421E  0100               	movlb	0	; () banked
  6571  004220  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6572  004222  0100               	movlb	0	; () banked
  6573  004224  5185               	movf	??___ftpack& (0+255),w,b
  6574  004226  0100               	movlb	0	; () banked
  6575  004228  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6576  00422A  0100               	movlb	0	; () banked
  6577  00422C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6578  00422E  B4D8               	btfsc	status,2,c
  6579  004230  D011               	goto	l6902
  6580  004232  D7E1               	goto	l6894
  6581  004234                     l6898:
  6582                           
  6583                           ; BSR set to: 0
  6584  004234  0100               	movlb	0	; () banked
  6585  004236  2B83               	incf	___ftpack@exp& (0+255),f,b
  6586                           
  6587                           ; BSR set to: 0
  6588  004238  0E01               	movlw	1
  6589  00423A  0100               	movlb	0	; () banked
  6590  00423C  2780               	addwf	___ftpack@arg& (0+255),f,b
  6591  00423E  0E00               	movlw	0
  6592  004240  0100               	movlb	0	; () banked
  6593  004242  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6594  004244  0E00               	movlw	0
  6595  004246  0100               	movlb	0	; () banked
  6596  004248  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6597  00424A  0100               	movlb	0	; () banked
  6598  00424C  90D8               	bcf	status,0,c
  6599  00424E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6600  004250  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6601  004252  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6602  004254                     l6902:
  6603                           
  6604                           ; BSR set to: 0
  6605  004254  0E00               	movlw	0
  6606  004256  0100               	movlb	0	; () banked
  6607  004258  1580               	andwf	___ftpack@arg& (0+255),w,b
  6608  00425A  0100               	movlb	0	; () banked
  6609  00425C  6F85               	movwf	??___ftpack& (0+255),b
  6610  00425E  0E00               	movlw	0
  6611  004260  0100               	movlb	0	; () banked
  6612  004262  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6613  004264  0100               	movlb	0	; () banked
  6614  004266  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6615  004268  0EFF               	movlw	255
  6616  00426A  0100               	movlb	0	; () banked
  6617  00426C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6618  00426E  0100               	movlb	0	; () banked
  6619  004270  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6620  004272  0100               	movlb	0	; () banked
  6621  004274  5185               	movf	??___ftpack& (0+255),w,b
  6622  004276  0100               	movlb	0	; () banked
  6623  004278  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6624  00427A  0100               	movlb	0	; () banked
  6625  00427C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6626  00427E  B4D8               	btfsc	status,2,c
  6627  004280  D008               	goto	l6906
  6628  004282  D7D8               	goto	l6898
  6629  004284                     l6904:
  6630                           
  6631                           ; BSR set to: 0
  6632  004284  0100               	movlb	0	; () banked
  6633  004286  0783               	decf	___ftpack@exp& (0+255),f,b
  6634  004288  0100               	movlb	0	; () banked
  6635  00428A  90D8               	bcf	status,0,c
  6636  00428C  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6637  00428E  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6638  004290  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6639  004292                     l6906:
  6640                           
  6641                           ; BSR set to: 0
  6642  004292  0100               	movlb	0	; () banked
  6643  004294  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6644  004296  D004               	goto	l1786
  6645                           
  6646                           ; BSR set to: 0
  6647  004298  0E02               	movlw	2
  6648  00429A  0100               	movlb	0	; () banked
  6649  00429C  6183               	cpfslt	___ftpack@exp& (0+255),b
  6650  00429E  D7F2               	goto	l6904
  6651  0042A0                     l1786:
  6652                           
  6653                           ; BSR set to: 0
  6654  0042A0  0100               	movlb	0	; () banked
  6655  0042A2  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6656  0042A4  D002               	goto	l6912
  6657                           
  6658                           ; BSR set to: 0
  6659  0042A6  0100               	movlb	0	; () banked
  6660  0042A8  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6661  0042AA                     l6912:
  6662                           
  6663                           ; BSR set to: 0
  6664  0042AA  0100               	movlb	0	; () banked
  6665  0042AC  90D8               	bcf	status,0,c
  6666  0042AE  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6667  0042B0  0100               	movlb	0	; () banked
  6668  0042B2  5183               	movf	___ftpack@exp& (0+255),w,b
  6669  0042B4  0100               	movlb	0	; () banked
  6670  0042B6  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6671                           
  6672                           ; BSR set to: 0
  6673  0042B8  0100               	movlb	0	; () banked
  6674  0042BA  5184               	movf	___ftpack@sign& (0+255),w,b
  6675  0042BC  0100               	movlb	0	; () banked
  6676  0042BE  B4D8               	btfsc	status,2,c
  6677  0042C0  D002               	goto	l6918
  6678                           
  6679                           ; BSR set to: 0
  6680  0042C2  0100               	movlb	0	; () banked
  6681  0042C4  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6682  0042C6                     l6918:
  6683                           
  6684                           ; BSR set to: 0
  6685  0042C6  C080  F080         	movff	___ftpack@arg,?___ftpack
  6686  0042CA  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6687  0042CE  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6688  0042D2  0012               	return	
  6689  0042D4                     __end_of___ftpack:
  6690                           	opt stack 0
  6691                           tblptru	equ	0xFF8
  6692                           tblptrh	equ	0xFF7
  6693                           tblptrl	equ	0xFF6
  6694                           tablat	equ	0xFF5
  6695                           prodh	equ	0xFF4
  6696                           prodl	equ	0xFF3
  6697                           postinc0	equ	0xFEE
  6698                           wreg	equ	0xFE8
  6699                           postdec1	equ	0xFE5
  6700                           fsr1l	equ	0xFE1
  6701                           indf2	equ	0xFDF
  6702                           postinc2	equ	0xFDE
  6703                           postdec2	equ	0xFDD
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           
  6708 ;; *************** function _Distribution *****************
  6709 ;; Defined at:
  6710 ;;		line 380 in file "sort.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;		None
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;		None
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  1    wreg      void 
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0, cstack
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;Total ram usage:        2 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; Hardware stack levels required when called:    8
  6731 ;; This function calls:
  6732 ;;		_updateServoPosition
  6733 ;; This function is called by:
  6734 ;;		_sort
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text14
  6739  0045C0                     __ptext14:
  6740                           	opt stack 0
  6741  0045C0                     _Distribution:
  6742                           	opt stack 21
  6743                           
  6744                           ;sort.c: 381: if(f_can_coming_to_distribution){
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;incstack = 0
  6748  0045C0  0101               	movlb	1	; () banked
  6749  0045C2  5131               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6750  0045C4  0101               	movlb	1	; () banked
  6751  0045C6  1132               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6752  0045C8  B4D8               	btfsc	status,2,c
  6753  0045CA  0012               	return	
  6754                           
  6755                           ; BSR set to: 1
  6756                           ;sort.c: 382: f_can_distributed = 0;
  6757  0045CC  0E00               	movlw	0
  6758  0045CE  0101               	movlb	1	; () banked
  6759  0045D0  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  6760  0045D2  0E00               	movlw	0
  6761  0045D4  6F33               	movwf	_f_can_distributed& (0+255),b
  6762                           
  6763                           ;sort.c: 389: switch(cur_can){
  6764  0045D6  D034               	goto	l8206
  6765  0045D8                     l8196:
  6766                           
  6767                           ;sort.c: 391: updateServoPosition(500, 1);
  6768  0045D8  0E01               	movlw	1
  6769  0045DA  0100               	movlb	0	; () banked
  6770  0045DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6771  0045DE  0EF4               	movlw	244
  6772  0045E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6773  0045E2  0E00               	movlw	0
  6774  0045E4  0100               	movlb	0	; () banked
  6775  0045E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6776  0045E8  0E01               	movlw	1
  6777  0045EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6778  0045EC  EC12  F027         	call	_updateServoPosition	;wreg free
  6779                           
  6780                           ;sort.c: 392: break;
  6781  0045F0  D03E               	goto	l8208
  6782  0045F2                     l8198:
  6783                           
  6784                           ;sort.c: 394: updateServoPosition(850, 1);
  6785  0045F2  0E03               	movlw	3
  6786  0045F4  0100               	movlb	0	; () banked
  6787  0045F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6788  0045F8  0E52               	movlw	82
  6789  0045FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6790  0045FC  0E00               	movlw	0
  6791  0045FE  0100               	movlb	0	; () banked
  6792  004600  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6793  004602  0E01               	movlw	1
  6794  004604  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6795  004606  EC12  F027         	call	_updateServoPosition	;wreg free
  6796                           
  6797                           ;sort.c: 395: break;
  6798  00460A  D031               	goto	l8208
  6799  00460C                     l8200:
  6800                           
  6801                           ;sort.c: 397: updateServoPosition(1670, 1);
  6802  00460C  0E06               	movlw	6
  6803  00460E  0100               	movlb	0	; () banked
  6804  004610  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6805  004612  0E86               	movlw	134
  6806  004614  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6807  004616  0E00               	movlw	0
  6808  004618  0100               	movlb	0	; () banked
  6809  00461A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6810  00461C  0E01               	movlw	1
  6811  00461E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6812  004620  EC12  F027         	call	_updateServoPosition	;wreg free
  6813                           
  6814                           ;sort.c: 398: break;
  6815  004624  D024               	goto	l8208
  6816  004626                     l8202:
  6817                           
  6818                           ;sort.c: 400: updateServoPosition(2400, 1);
  6819  004626  0E09               	movlw	9
  6820  004628  0100               	movlb	0	; () banked
  6821  00462A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6822  00462C  0E60               	movlw	96
  6823  00462E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6824  004630  0E00               	movlw	0
  6825  004632  0100               	movlb	0	; () banked
  6826  004634  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6827  004636  0E01               	movlw	1
  6828  004638  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6829  00463A  EC12  F027         	call	_updateServoPosition	;wreg free
  6830                           
  6831                           ;sort.c: 404: }
  6832                           
  6833                           ;sort.c: 403: break;
  6834                           
  6835                           ;sort.c: 402: default:
  6836                           
  6837                           ;sort.c: 401: break;
  6838  00463E  D017               	goto	l8208
  6839  004640                     l8206:
  6840  004640  C12B  F088         	movff	_cur_can,??_Distribution
  6841  004644  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6842                           
  6843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6844                           ; Switch size 1, requested type "space"
  6845                           ; Number of cases is 1, Range of values is 0 to 0
  6846                           ; switch strategies available:
  6847                           ; Name         Instructions Cycles
  6848                           ; simple_byte            4     3 (average)
  6849                           ;	Chosen strategy is simple_byte
  6850  004648  0100               	movlb	0	; () banked
  6851  00464A  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6852  00464C  0A00               	xorlw	0	; case 0
  6853  00464E  A4D8               	btfss	status,2,c
  6854  004650  D00E               	goto	l8208
  6855                           
  6856                           ; BSR set to: 0
  6857                           ; Switch size 1, requested type "space"
  6858                           ; Number of cases is 4, Range of values is 0 to 3
  6859                           ; switch strategies available:
  6860                           ; Name         Instructions Cycles
  6861                           ; simple_byte           13     7 (average)
  6862                           ;	Chosen strategy is simple_byte
  6863  004652  0100               	movlb	0	; () banked
  6864  004654  5188               	movf	??_Distribution& (0+255),w,b
  6865  004656  0A00               	xorlw	0	; case 0
  6866  004658  B4D8               	btfsc	status,2,c
  6867  00465A  D7BE               	goto	l8196
  6868  00465C  0A01               	xorlw	1	; case 1
  6869  00465E  B4D8               	btfsc	status,2,c
  6870  004660  D7C8               	goto	l8198
  6871  004662  0A03               	xorlw	3	; case 2
  6872  004664  B4D8               	btfsc	status,2,c
  6873  004666  D7D2               	goto	l8200
  6874  004668  0A01               	xorlw	1	; case 3
  6875  00466A  B4D8               	btfsc	status,2,c
  6876  00466C  D7DC               	goto	l8202
  6877  00466E                     l8208:
  6878                           
  6879                           ;sort.c: 405: updateServoPosition(1050, 3);
  6880  00466E  0E04               	movlw	4
  6881  004670  0100               	movlb	0	; () banked
  6882  004672  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6883  004674  0E1A               	movlw	26
  6884  004676  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6885  004678  0E00               	movlw	0
  6886  00467A  0100               	movlb	0	; () banked
  6887  00467C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6888  00467E  0E03               	movlw	3
  6889  004680  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6890  004682  EC12  F027         	call	_updateServoPosition	;wreg free
  6891                           
  6892                           ;sort.c: 406: servo_timer_target = 750;
  6893  004686  0E02               	movlw	2
  6894  004688  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6895  00468A  0EEE               	movlw	238
  6896  00468C  6E6F               	movwf	_servo_timer_target,c	;volatile
  6897                           
  6898                           ;sort.c: 407: f_panning_to_bin = 1;
  6899  00468E  0E00               	movlw	0
  6900  004690  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  6901  004692  0E01               	movlw	1
  6902  004694  6E69               	movwf	_f_panning_to_bin,c	;volatile
  6903                           
  6904                           ;sort.c: 408: f_can_coming_to_distribution = 0;
  6905  004696  0E00               	movlw	0
  6906  004698  0101               	movlb	1	; () banked
  6907  00469A  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6908  00469C  0E00               	movlw	0
  6909  00469E  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  6910  0046A0  0012               	return	
  6911  0046A2                     __end_of_Distribution:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           postinc0	equ	0xFEE
  6920                           wreg	equ	0xFE8
  6921                           postdec1	equ	0xFE5
  6922                           fsr1l	equ	0xFE1
  6923                           indf2	equ	0xFDF
  6924                           postinc2	equ	0xFDE
  6925                           postdec2	equ	0xFDD
  6926                           fsr2h	equ	0xFDA
  6927                           fsr2l	equ	0xFD9
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _machineConfig *****************
  6931 ;; Defined at:
  6932 ;;		line 15 in file "MachineConfig.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;		None
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;		None
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, status,2
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;Total ram usage:        0 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    7
  6953 ;; This function calls:
  6954 ;;		Nothing
  6955 ;; This function is called by:
  6956 ;;		_main
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           	psect	text15
  6961  00514A                     __ptext15:
  6962                           	opt stack 0
  6963  00514A                     _machineConfig:
  6964                           	opt stack 23
  6965                           
  6966                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6967                           
  6968                           ; BSR set to: 1
  6969                           ;incstack = 0
  6970  00514A  0EF0               	movlw	240
  6971  00514C  6ED3               	movwf	4051,c	;volatile
  6972                           
  6973                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6974  00514E  8C9B               	bsf	3995,6,c	;volatile
  6975                           
  6976                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6977  005150  0E07               	movlw	7
  6978  005152  6E92               	movwf	3986,c	;volatile
  6979                           
  6980                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6981  005154  0EF2               	movlw	242
  6982  005156  6E93               	movwf	3987,c	;volatile
  6983                           
  6984                           ;MachineConfig.c: 27: TRISC = 0x00;
  6985  005158  0E00               	movlw	0
  6986  00515A  6E94               	movwf	3988,c	;volatile
  6987                           
  6988                           ;MachineConfig.c: 31: TRISD = 0x00;
  6989  00515C  0E00               	movlw	0
  6990  00515E  6E95               	movwf	3989,c	;volatile
  6991                           
  6992                           ;MachineConfig.c: 34: TRISE = 0x00;
  6993  005160  0E00               	movlw	0
  6994  005162  6E96               	movwf	3990,c	;volatile
  6995                           
  6996                           ;MachineConfig.c: 37: LATA = 0x00;
  6997  005164  0E00               	movlw	0
  6998  005166  6E89               	movwf	3977,c	;volatile
  6999                           
  7000                           ;MachineConfig.c: 38: LATB = 0x00;
  7001  005168  0E00               	movlw	0
  7002  00516A  6E8A               	movwf	3978,c	;volatile
  7003                           
  7004                           ;MachineConfig.c: 39: LATC = 0x00;
  7005  00516C  0E00               	movlw	0
  7006  00516E  6E8B               	movwf	3979,c	;volatile
  7007                           
  7008                           ;MachineConfig.c: 40: LATD = 0x00;
  7009  005170  0E00               	movlw	0
  7010  005172  6E8C               	movwf	3980,c	;volatile
  7011                           
  7012                           ;MachineConfig.c: 41: LATE = 0x00;
  7013  005174  0E00               	movlw	0
  7014  005176  6E8D               	movwf	3981,c	;volatile
  7015                           
  7016                           ;MachineConfig.c: 43: nRBPU = 0;
  7017  005178  9EF1               	bcf	intcon2,7,c	;volatile
  7018                           
  7019                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7020  00517A  0E00               	movlw	0
  7021  00517C  6EC2               	movwf	4034,c	;volatile
  7022                           
  7023                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  7024  00517E  0E0C               	movlw	12
  7025  005180  6EC1               	movwf	4033,c	;volatile
  7026                           
  7027                           ;MachineConfig.c: 51: CVRCON = 0x00;
  7028  005182  0E00               	movlw	0
  7029  005184  6EB5               	movwf	4021,c	;volatile
  7030                           
  7031                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  7032  005186  96B4               	bcf	4020,3,c	;volatile
  7033                           
  7034                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  7035  005188  0EB1               	movlw	177
  7036  00518A  6EC0               	movwf	4032,c	;volatile
  7037                           
  7038                           ;MachineConfig.c: 56: INT1IE = 1;
  7039  00518C  86F0               	bsf	intcon3,3,c	;volatile
  7040                           
  7041                           ;MachineConfig.c: 58: TMR0IE = 1;
  7042  00518E  8AF2               	bsf	intcon,5,c	;volatile
  7043                           
  7044                           ;MachineConfig.c: 59: TMR1IE = 1;
  7045  005190  809D               	bsf	3997,0,c	;volatile
  7046                           
  7047                           ;MachineConfig.c: 60: TMR2IE = 1;
  7048  005192  829D               	bsf	3997,1,c	;volatile
  7049                           
  7050                           ;MachineConfig.c: 61: TMR3IE = 1;
  7051  005194  82A0               	bsf	4000,1,c	;volatile
  7052                           
  7053                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  7054  005196  0EB0               	movlw	176
  7055  005198  6ECD               	movwf	4045,c	;volatile
  7056                           
  7057                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  7058  00519A  0E7B               	movlw	123
  7059  00519C  6ECA               	movwf	4042,c	;volatile
  7060                           
  7061                           ;MachineConfig.c: 65: PR2 = 0x22;
  7062  00519E  0E22               	movlw	34
  7063  0051A0  6ECB               	movwf	4043,c	;volatile
  7064                           
  7065                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  7066  0051A2  0EB0               	movlw	176
  7067  0051A4  6EB1               	movwf	4017,c	;volatile
  7068                           
  7069                           ;MachineConfig.c: 67: PEIE = 1;
  7070  0051A6  8CF2               	bsf	intcon,6,c	;volatile
  7071                           
  7072                           ;MachineConfig.c: 68: ADIE = 0;
  7073  0051A8  9C9D               	bcf	3997,6,c	;volatile
  7074                           
  7075                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7076  0051AA  9EF2               	bcf	intcon,7,c	;volatile
  7077  0051AC  0012               	return		;funcret
  7078  0051AE                     __end_of_machineConfig:
  7079                           	opt stack 0
  7080                           tblptru	equ	0xFF8
  7081                           tblptrh	equ	0xFF7
  7082                           tblptrl	equ	0xFF6
  7083                           tablat	equ	0xFF5
  7084                           prodh	equ	0xFF4
  7085                           prodl	equ	0xFF3
  7086                           intcon	equ	0xFF2
  7087                           intcon2	equ	0xFF1
  7088                           intcon3	equ	0xFF0
  7089                           postinc0	equ	0xFEE
  7090                           wreg	equ	0xFE8
  7091                           postdec1	equ	0xFE5
  7092                           fsr1l	equ	0xFE1
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100 ;; *************** function _logRun *****************
  7101 ;; Defined at:
  7102 ;;		line 88 in file "EEPROM.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;		None
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7107 ;;  i               2   55[BANK0 ] int 
  7108 ;;  num             1   49[BANK0 ] unsigned char 
  7109 ;;  addr            2   57[BANK0 ] unsigned short 
  7110 ;;  byte11          1   54[BANK0 ] unsigned char 
  7111 ;;  byte3           1   52[BANK0 ] unsigned char 
  7112 ;;  byte2           1   51[BANK0 ] unsigned char 
  7113 ;;  byte1           1   50[BANK0 ] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      void 
  7116 ;; Registers used:
  7117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;Total ram usage:       10 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:   11
  7130 ;; This function calls:
  7131 ;;		_EEPROM_read
  7132 ;;		_EEPROM_write
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text16
  7139  003F5E                     __ptext16:
  7140                           	opt stack 0
  7141  003F5E                     _logRun:
  7142                           	opt stack 19
  7143                           
  7144                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7145                           
  7146                           ;incstack = 0
  7147  003F5E  0E00               	movlw	0
  7148  003F60  0100               	movlb	0	; () banked
  7149  003F62  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7150  003F64  0E00               	movlw	0
  7151  003F66  6F80               	movwf	EEPROM_read@address& (0+255),b
  7152  003F68  ECB2  F02D         	call	_EEPROM_read	;wreg free
  7153  003F6C  0100               	movlb	0	; () banked
  7154  003F6E  6FFD               	movwf	_sel& (0+255),b
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7158  003F70  0100               	movlb	0	; () banked
  7159  003F72  51FD               	movf	_sel& (0+255),w,b
  7160  003F74  0D0B               	mullw	11
  7161  003F76  0E01               	movlw	1
  7162  003F78  24F3               	addwf	prodl,w,c
  7163  003F7A  0100               	movlb	0	; () banked
  7164  003F7C  6FB9               	movwf	logRun@addr& (0+255),b
  7165  003F7E  0E00               	movlw	0
  7166  003F80  20F4               	addwfc	prodh,w,c
  7167  003F82  0100               	movlb	0	; () banked
  7168  003F84  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;EEPROM.c: 105: if (sel < 3){
  7172  003F86  0E03               	movlw	3
  7173  003F88  0100               	movlb	0	; () banked
  7174  003F8A  61FD               	cpfslt	_sel& (0+255),b
  7175  003F8C  D00E               	goto	l9848
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7179  003F8E  0100               	movlb	0	; () banked
  7180  003F90  29FD               	incf	_sel& (0+255),w,b
  7181  003F92  0100               	movlb	0	; () banked
  7182  003F94  6FB1               	movwf	logRun@num& (0+255),b
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7186  003F96  0E00               	movlw	0
  7187  003F98  0100               	movlb	0	; () banked
  7188  003F9A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7189  003F9C  0E00               	movlw	0
  7190  003F9E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7191  003FA0  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7192  003FA4  EC6C  F022         	call	_EEPROM_write	;wreg free
  7193                           
  7194                           ;EEPROM.c: 108: }
  7195  003FA8  D00A               	goto	l9850
  7196  003FAA                     l9848:
  7197                           
  7198                           ;EEPROM.c: 109: else{
  7199                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7200  003FAA  0E00               	movlw	0
  7201  003FAC  0100               	movlb	0	; () banked
  7202  003FAE  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7203  003FB0  0E00               	movlw	0
  7204  003FB2  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7205  003FB4  0E00               	movlw	0
  7206  003FB6  0100               	movlb	0	; () banked
  7207  003FB8  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7208  003FBA  EC6C  F022         	call	_EEPROM_write	;wreg free
  7209  003FBE                     l9850:
  7210                           
  7211                           ;EEPROM.c: 111: }
  7212                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7213  003FBE  0100               	movlb	0	; () banked
  7214  003FC0  51FE               	movf	_count_total& (0+255),w,b
  7215  003FC2  0980               	iorlw	128
  7216  003FC4  0100               	movlb	0	; () banked
  7217  003FC6  6FB2               	movwf	logRun@byte1& (0+255),b
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7221  003FC8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7222  003FCC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7223  003FD0  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7224  003FD4  EC6C  F022         	call	_EEPROM_write	;wreg free
  7225                           
  7226                           ;EEPROM.c: 116: addr++;
  7227  003FD8  0100               	movlb	0	; () banked
  7228  003FDA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7229  003FDC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7233  003FDE  0101               	movlb	1	; () banked
  7234  003FE0  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7235  003FE2  0BF0               	andlw	240
  7236  003FE4  0101               	movlb	1	; () banked
  7237  003FE6  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7238  003FE8  0100               	movlb	0	; () banked
  7239  003FEA  6FB3               	movwf	logRun@byte2& (0+255),b
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7243  003FEC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7244  003FF0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7245  003FF4  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7246  003FF8  EC6C  F022         	call	_EEPROM_write	;wreg free
  7247                           
  7248                           ;EEPROM.c: 121: addr++;
  7249  003FFC  0100               	movlb	0	; () banked
  7250  003FFE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7251  004000  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7255  004002  0101               	movlb	1	; () banked
  7256  004004  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7257  004006  0BF0               	andlw	240
  7258  004008  0101               	movlb	1	; () banked
  7259  00400A  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7260  00400C  0100               	movlb	0	; () banked
  7261  00400E  6FB4               	movwf	logRun@byte3& (0+255),b
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7265  004010  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7266  004014  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7267  004018  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7268  00401C  EC6C  F022         	call	_EEPROM_write	;wreg free
  7269                           
  7270                           ;EEPROM.c: 124: addr++;
  7271  004020  0100               	movlb	0	; () banked
  7272  004022  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7273  004024  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7277  004026  0E00               	movlw	0
  7278  004028  0100               	movlb	0	; () banked
  7279  00402A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7280  00402C  0E00               	movlw	0
  7281  00402E  6FB7               	movwf	logRun@i& (0+255),b
  7282                           
  7283                           ; BSR set to: 0
  7284  004030  0100               	movlb	0	; () banked
  7285  004032  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7286  004034  D008               	goto	l9874
  7287  004036  0100               	movlb	0	; () banked
  7288  004038  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7289  00403A  E128               	bnz	l1145
  7290  00403C  0E07               	movlw	7
  7291  00403E  0100               	movlb	0	; () banked
  7292  004040  5DB7               	subwf	logRun@i& (0+255),w,b
  7293  004042  B0D8               	btfsc	status,0,c
  7294  004044  D023               	goto	l1145
  7295  004046                     l9874:
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7299  004046  90D8               	bcf	status,0,c
  7300  004048  0100               	movlb	0	; () banked
  7301  00404A  35B7               	rlcf	logRun@i& (0+255),w,b
  7302  00404C  6ED9               	movwf	fsr2l,c
  7303  00404E  0100               	movlb	0	; () banked
  7304  004050  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7305  004052  6EDA               	movwf	fsr2h,c
  7306  004054  0E0E               	movlw	low _startTime
  7307  004056  26D9               	addwf	fsr2l,f,c
  7308  004058  0E01               	movlw	high _startTime
  7309  00405A  22DA               	addwfc	fsr2h,f,c
  7310  00405C  50DF               	movf	indf2,w,c
  7311  00405E  0100               	movlb	0	; () banked
  7312  004060  6FB5               	movwf	logRun@byte_i& (0+255),b
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7316  004062  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7317  004066  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7318  00406A  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7319  00406E  EC6C  F022         	call	_EEPROM_write	;wreg free
  7320                           
  7321                           ;EEPROM.c: 130: addr++;
  7322  004072  0100               	movlb	0	; () banked
  7323  004074  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7324  004076  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7325                           
  7326                           ; BSR set to: 0
  7327  004078  0100               	movlb	0	; () banked
  7328  00407A  4BB7               	infsnz	logRun@i& (0+255),f,b
  7329  00407C  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7330                           
  7331                           ; BSR set to: 0
  7332  00407E  0100               	movlb	0	; () banked
  7333  004080  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7334  004082  D7E1               	goto	l9874
  7335  004084  0100               	movlb	0	; () banked
  7336  004086  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7337  004088  E101               	bnz	u9360
  7338  00408A  D7D8               	goto	L11
  7339  00408C                     u9360:
  7340  00408C                     l1145:
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;EEPROM.c: 131: }
  7344                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7345  00408C  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7349  004090  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7350  004094  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7351  004098  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7352  00409C  EC6C  F022         	call	_EEPROM_write	;wreg free
  7353  0040A0  0012               	return		;funcret
  7354  0040A2                     __end_of_logRun:
  7355                           	opt stack 0
  7356                           tblptru	equ	0xFF8
  7357                           tblptrh	equ	0xFF7
  7358                           tblptrl	equ	0xFF6
  7359                           tablat	equ	0xFF5
  7360                           prodh	equ	0xFF4
  7361                           prodl	equ	0xFF3
  7362                           intcon	equ	0xFF2
  7363                           intcon2	equ	0xFF1
  7364                           intcon3	equ	0xFF0
  7365                           postinc0	equ	0xFEE
  7366                           wreg	equ	0xFE8
  7367                           postdec1	equ	0xFE5
  7368                           fsr1l	equ	0xFE1
  7369                           indf2	equ	0xFDF
  7370                           postinc2	equ	0xFDE
  7371                           postdec2	equ	0xFDD
  7372                           fsr2h	equ	0xFDA
  7373                           fsr2l	equ	0xFD9
  7374                           status	equ	0xFD8
  7375                           
  7376 ;; *************** function _initUI *****************
  7377 ;; Defined at:
  7378 ;;		line 62 in file "UI.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;		None
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;		None
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      void 
  7385 ;; Registers used:
  7386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;Total ram usage:        0 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:   12
  7399 ;; This function calls:
  7400 ;;		_change_state_to_menu_start
  7401 ;;		_loadRTC
  7402 ;; This function is called by:
  7403 ;;		_main
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text17
  7408  00574C                     __ptext17:
  7409                           	opt stack 0
  7410  00574C                     _initUI:
  7411                           	opt stack 18
  7412                           
  7413                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7414                           
  7415                           ;incstack = 0
  7416  00574C  8EF2               	bsf	intcon,7,c	;volatile
  7417                           
  7418                           ;UI.c: 64: machine_state = UI_state;
  7419  00574E  0E00               	movlw	0
  7420  005750  0100               	movlb	0	; () banked
  7421  005752  6FFC               	movwf	_machine_state& (0+255),b
  7422                           
  7423                           ;UI.c: 65: logstate = 0;
  7424  005754  0E00               	movlw	0
  7425  005756  0100               	movlb	0	; () banked
  7426  005758  6FF9               	movwf	(_logstate+1)& (0+255),b
  7427  00575A  0E00               	movlw	0
  7428  00575C  6FF8               	movwf	_logstate& (0+255),b
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;UI.c: 67: if(RTCflag){
  7432  00575E  0100               	movlb	0	; () banked
  7433  005760  51E4               	movf	_RTCflag& (0+255),w,b
  7434  005762  0100               	movlb	0	; () banked
  7435  005764  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7436  005766  A4D8               	btfss	status,2,c
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;UI.c: 68: loadRTC();
  7440  005768  EC47  F026         	call	_loadRTC	;wreg free
  7441                           
  7442                           ;UI.c: 69: }
  7443                           ;UI.c: 71: change_state_to_menu_start();
  7444  00576C  ECC4  F02C         	call	_change_state_to_menu_start	;wreg free
  7445                           
  7446                           ;UI.c: 72: firstboot = 1;
  7447  005770  0E00               	movlw	0
  7448  005772  0101               	movlb	1	; () banked
  7449  005774  6F3A               	movwf	(_firstboot+1)& (0+255),b
  7450  005776  0E01               	movlw	1
  7451  005778  6F39               	movwf	_firstboot& (0+255),b
  7452                           
  7453                           ; BSR set to: 1
  7454  00577A  0012               	return		;funcret
  7455  00577C                     __end_of_initUI:
  7456                           	opt stack 0
  7457                           tblptru	equ	0xFF8
  7458                           tblptrh	equ	0xFF7
  7459                           tblptrl	equ	0xFF6
  7460                           tablat	equ	0xFF5
  7461                           prodh	equ	0xFF4
  7462                           prodl	equ	0xFF3
  7463                           intcon	equ	0xFF2
  7464                           intcon2	equ	0xFF1
  7465                           intcon3	equ	0xFF0
  7466                           postinc0	equ	0xFEE
  7467                           wreg	equ	0xFE8
  7468                           postdec1	equ	0xFE5
  7469                           fsr1l	equ	0xFE1
  7470                           indf2	equ	0xFDF
  7471                           postinc2	equ	0xFDE
  7472                           postdec2	equ	0xFDD
  7473                           fsr2h	equ	0xFDA
  7474                           fsr2l	equ	0xFD9
  7475                           status	equ	0xFD8
  7476                           
  7477 ;; *************** function _loadRTC *****************
  7478 ;; Defined at:
  7479 ;;		line 28 in file "RTC.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  i               2   22[BANK0 ] int 
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      void 
  7486 ;; Registers used:
  7487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;Total ram usage:        3 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    9
  7500 ;; This function calls:
  7501 ;;		_I2C_Master_Init
  7502 ;;		_I2C_Master_Start
  7503 ;;		_I2C_Master_Stop
  7504 ;;		_I2C_Master_Write
  7505 ;; This function is called by:
  7506 ;;		_initUI
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text18
  7511  004C8E                     __ptext18:
  7512                           	opt stack 0
  7513  004C8E                     _loadRTC:
  7514                           	opt stack 20
  7515                           
  7516                           ;RTC.c: 30: I2C_Master_Init(10000);
  7517                           
  7518                           ; BSR set to: 1
  7519                           ;incstack = 0
  7520  004C8E  0E10               	movlw	16
  7521  004C90  0100               	movlb	0	; () banked
  7522  004C92  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7523  004C94  0E27               	movlw	39
  7524  004C96  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7525  004C98  0E00               	movlw	0
  7526  004C9A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7527  004C9C  0E00               	movlw	0
  7528  004C9E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7529  004CA0  EC08  F029         	call	_I2C_Master_Init	;wreg free
  7530                           
  7531                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7532  004CA4  9EF2               	bcf	intcon,7,c	;volatile
  7533                           
  7534                           ;RTC.c: 34: I2C_Master_Start();
  7535  004CA6  EC15  F02E         	call	_I2C_Master_Start	;wreg free
  7536                           
  7537                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7538  004CAA  0E00               	movlw	0
  7539  004CAC  0100               	movlb	0	; () banked
  7540  004CAE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7541  004CB0  0ED0               	movlw	208
  7542  004CB2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7543  004CB4  EC03  F02E         	call	_I2C_Master_Write	;wreg free
  7544                           
  7545                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7546  004CB8  0E00               	movlw	0
  7547  004CBA  0100               	movlb	0	; () banked
  7548  004CBC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7549  004CBE  0E00               	movlw	0
  7550  004CC0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7551  004CC2  EC03  F02E         	call	_I2C_Master_Write	;wreg free
  7552                           
  7553                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7554  004CC6  0E00               	movlw	0
  7555  004CC8  0100               	movlb	0	; () banked
  7556  004CCA  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7557  004CCC  0E00               	movlw	0
  7558  004CCE  6F96               	movwf	loadRTC@i& (0+255),b
  7559  004CD0                     l7606:
  7560                           
  7561                           ; BSR set to: 0
  7562  004CD0  0100               	movlb	0	; () banked
  7563  004CD2  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7564  004CD4  D008               	goto	l7610
  7565  004CD6  0100               	movlb	0	; () banked
  7566  004CD8  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7567  004CDA  E11B               	bnz	l7616
  7568  004CDC  0E07               	movlw	7
  7569  004CDE  0100               	movlb	0	; () banked
  7570  004CE0  5D96               	subwf	loadRTC@i& (0+255),w,b
  7571  004CE2  B0D8               	btfsc	status,0,c
  7572  004CE4  D016               	goto	l7616
  7573  004CE6                     l7610:
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7577  004CE6  0E1C               	movlw	low _time
  7578  004CE8  0100               	movlb	0	; () banked
  7579  004CEA  2596               	addwf	loadRTC@i& (0+255),w,b
  7580  004CEC  6ED9               	movwf	fsr2l,c
  7581  004CEE  0E01               	movlw	high _time
  7582  004CF0  0100               	movlb	0	; () banked
  7583  004CF2  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7584  004CF4  6EDA               	movwf	fsr2h,c
  7585  004CF6  50DF               	movf	indf2,w,c
  7586  004CF8  0100               	movlb	0	; () banked
  7587  004CFA  6F95               	movwf	??_loadRTC& (0+255),b
  7588  004CFC  0100               	movlb	0	; () banked
  7589  004CFE  5195               	movf	??_loadRTC& (0+255),w,b
  7590  004D00  0100               	movlb	0	; () banked
  7591  004D02  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7592  004D04  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7593  004D06  EC03  F02E         	call	_I2C_Master_Write	;wreg free
  7594  004D0A  0100               	movlb	0	; () banked
  7595  004D0C  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7596  004D0E  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7597  004D10  D7DF               	goto	l7606
  7598  004D12                     l7616:
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;RTC.c: 39: }
  7602                           ;RTC.c: 40: I2C_Master_Stop();
  7603  004D12  EC11  F02E         	call	_I2C_Master_Stop	;wreg free
  7604                           
  7605                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7606  004D16  8EF2               	bsf	intcon,7,c	;volatile
  7607  004D18  0012               	return		;funcret
  7608  004D1A                     __end_of_loadRTC:
  7609                           	opt stack 0
  7610                           tblptru	equ	0xFF8
  7611                           tblptrh	equ	0xFF7
  7612                           tblptrl	equ	0xFF6
  7613                           tablat	equ	0xFF5
  7614                           prodh	equ	0xFF4
  7615                           prodl	equ	0xFF3
  7616                           intcon	equ	0xFF2
  7617                           intcon2	equ	0xFF1
  7618                           intcon3	equ	0xFF0
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           postdec1	equ	0xFE5
  7622                           fsr1l	equ	0xFE1
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           fsr2h	equ	0xFDA
  7627                           fsr2l	equ	0xFD9
  7628                           status	equ	0xFD8
  7629                           
  7630 ;; *************** function _I2C_Master_Init *****************
  7631 ;; Defined at:
  7632 ;;		line 15 in file "I2C.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;  c               4   13[BANK0 ] const unsigned long 
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;		None
  7637 ;; Return value:  Size  Location     Type
  7638 ;;                  1    wreg      void 
  7639 ;; Registers used:
  7640 ;;		wreg, status,2, status,0, cstack
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7646 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;Total ram usage:        8 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; Hardware stack levels required when called:    8
  7653 ;; This function calls:
  7654 ;;		___lldiv
  7655 ;; This function is called by:
  7656 ;;		_main
  7657 ;;		_loadRTC
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           	psect	text19
  7662  005210                     __ptext19:
  7663                           	opt stack 0
  7664  005210                     _I2C_Master_Init:
  7665                           	opt stack 20
  7666                           
  7667                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7668                           
  7669                           ;incstack = 0
  7670  005210  0E00               	movlw	0
  7671  005212  6EC7               	movwf	4039,c	;volatile
  7672                           
  7673                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7674  005214  0E28               	movlw	40
  7675  005216  6EC6               	movwf	4038,c	;volatile
  7676                           
  7677                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7678  005218  0E00               	movlw	0
  7679  00521A  6EC5               	movwf	4037,c	;volatile
  7680                           
  7681                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7682  00521C  0E00               	movlw	0
  7683  00521E  0100               	movlb	0	; () banked
  7684  005220  6F80               	movwf	___lldiv@dividend& (0+255),b
  7685  005222  0E48               	movlw	72
  7686  005224  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7687  005226  0EE8               	movlw	232
  7688  005228  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7689  00522A  0E01               	movlw	1
  7690  00522C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7691  00522E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7692  005232  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7693  005236  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7694  00523A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7695  00523E  0E02               	movlw	2
  7696  005240                     u5935:
  7697  005240  90D8               	bcf	status,0,c
  7698  005242  0100               	movlb	0	; () banked
  7699  005244  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7700  005246  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7701  005248  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7702  00524A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7703  00524C  2EE8               	decfsz	wreg,f,c
  7704  00524E  D7F8               	goto	u5935
  7705  005250  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7706  005254  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7707  005258  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7708  00525C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7709  005260  EC43  F025         	call	___lldiv	;wreg free
  7710  005264  0100               	movlb	0	; () banked
  7711  005266  0580               	decf	?___lldiv& (0+255),w,b
  7712  005268  6EC8               	movwf	4040,c	;volatile
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;I2C.c: 22: TRISC3 = 1;
  7716  00526A  8694               	bsf	3988,3,c	;volatile
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;I2C.c: 23: TRISC4 = 1;
  7720  00526C  8894               	bsf	3988,4,c	;volatile
  7721                           
  7722                           ; BSR set to: 0
  7723  00526E  0012               	return		;funcret
  7724  005270                     __end_of_I2C_Master_Init:
  7725                           	opt stack 0
  7726                           tblptru	equ	0xFF8
  7727                           tblptrh	equ	0xFF7
  7728                           tblptrl	equ	0xFF6
  7729                           tablat	equ	0xFF5
  7730                           prodh	equ	0xFF4
  7731                           prodl	equ	0xFF3
  7732                           intcon	equ	0xFF2
  7733                           intcon2	equ	0xFF1
  7734                           intcon3	equ	0xFF0
  7735                           postinc0	equ	0xFEE
  7736                           wreg	equ	0xFE8
  7737                           postdec1	equ	0xFE5
  7738                           fsr1l	equ	0xFE1
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function ___lldiv *****************
  7747 ;; Defined at:
  7748 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  dividend        4    0[BANK0 ] unsigned long 
  7751 ;;  divisor         4    4[BANK0 ] unsigned long 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;  quotient        4    8[BANK0 ] unsigned long 
  7754 ;;  counter         1   12[BANK0 ] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  4    0[BANK0 ] unsigned long 
  7757 ;; Registers used:
  7758 ;;		wreg, status,2, status,0
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7764 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;Total ram usage:       13 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    7
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_I2C_Master_Init
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text20
  7779  004A86                     __ptext20:
  7780                           	opt stack 0
  7781  004A86                     ___lldiv:
  7782                           	opt stack 20
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;incstack = 0
  7786  004A86  0E00               	movlw	0
  7787  004A88  0100               	movlb	0	; () banked
  7788  004A8A  6F88               	movwf	___lldiv@quotient& (0+255),b
  7789  004A8C  0E00               	movlw	0
  7790  004A8E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7791  004A90  0E00               	movlw	0
  7792  004A92  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7793  004A94  0E00               	movlw	0
  7794  004A96  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7795                           
  7796                           ; BSR set to: 0
  7797  004A98  0100               	movlb	0	; () banked
  7798  004A9A  5184               	movf	___lldiv@divisor& (0+255),w,b
  7799  004A9C  0100               	movlb	0	; () banked
  7800  004A9E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7801  004AA0  0100               	movlb	0	; () banked
  7802  004AA2  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7803  004AA4  0100               	movlb	0	; () banked
  7804  004AA6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7805  004AA8  B4D8               	btfsc	status,2,c
  7806  004AAA  D042               	goto	l1916
  7807                           
  7808                           ; BSR set to: 0
  7809  004AAC  0E01               	movlw	1
  7810  004AAE  0100               	movlb	0	; () banked
  7811  004AB0  6F8C               	movwf	___lldiv@counter& (0+255),b
  7812  004AB2  D008               	goto	l6930
  7813  004AB4                     l6928:
  7814                           
  7815                           ; BSR set to: 0
  7816  004AB4  0100               	movlb	0	; () banked
  7817  004AB6  90D8               	bcf	status,0,c
  7818  004AB8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7819  004ABA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7820  004ABC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7821  004ABE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7822  004AC0  0100               	movlb	0	; () banked
  7823  004AC2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7824  004AC4                     l6930:
  7825                           
  7826                           ; BSR set to: 0
  7827  004AC4  0100               	movlb	0	; () banked
  7828  004AC6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7829  004AC8  D7F5               	goto	l6928
  7830  004ACA                     l6932:
  7831                           
  7832                           ; BSR set to: 0
  7833  004ACA  0100               	movlb	0	; () banked
  7834  004ACC  90D8               	bcf	status,0,c
  7835  004ACE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7836  004AD0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7837  004AD2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7838  004AD4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7839                           
  7840                           ; BSR set to: 0
  7841  004AD6  0100               	movlb	0	; () banked
  7842  004AD8  5184               	movf	___lldiv@divisor& (0+255),w,b
  7843  004ADA  0100               	movlb	0	; () banked
  7844  004ADC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7845  004ADE  0100               	movlb	0	; () banked
  7846  004AE0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7847  004AE2  0100               	movlb	0	; () banked
  7848  004AE4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7849  004AE6  0100               	movlb	0	; () banked
  7850  004AE8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7851  004AEA  0100               	movlb	0	; () banked
  7852  004AEC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7853  004AEE  0100               	movlb	0	; () banked
  7854  004AF0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7855  004AF2  0100               	movlb	0	; () banked
  7856  004AF4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7857  004AF6  A0D8               	btfss	status,0,c
  7858  004AF8  D012               	goto	l6940
  7859                           
  7860                           ; BSR set to: 0
  7861  004AFA  0100               	movlb	0	; () banked
  7862  004AFC  5184               	movf	___lldiv@divisor& (0+255),w,b
  7863  004AFE  0100               	movlb	0	; () banked
  7864  004B00  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7865  004B02  0100               	movlb	0	; () banked
  7866  004B04  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7867  004B06  0100               	movlb	0	; () banked
  7868  004B08  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7869  004B0A  0100               	movlb	0	; () banked
  7870  004B0C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7871  004B0E  0100               	movlb	0	; () banked
  7872  004B10  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7873  004B12  0100               	movlb	0	; () banked
  7874  004B14  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7875  004B16  0100               	movlb	0	; () banked
  7876  004B18  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7877                           
  7878                           ; BSR set to: 0
  7879  004B1A  0100               	movlb	0	; () banked
  7880  004B1C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7881  004B1E                     l6940:
  7882                           
  7883                           ; BSR set to: 0
  7884  004B1E  0100               	movlb	0	; () banked
  7885  004B20  90D8               	bcf	status,0,c
  7886  004B22  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7887  004B24  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7888  004B26  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7889  004B28  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7890                           
  7891                           ; BSR set to: 0
  7892  004B2A  0100               	movlb	0	; () banked
  7893  004B2C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7894  004B2E  D7CD               	goto	l6932
  7895  004B30                     l1916:
  7896                           
  7897                           ; BSR set to: 0
  7898  004B30  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7899  004B34  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7900  004B38  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7901  004B3C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7902                           
  7903                           ; BSR set to: 0
  7904  004B40  0012               	return		;funcret
  7905  004B42                     __end_of___lldiv:
  7906                           	opt stack 0
  7907                           tblptru	equ	0xFF8
  7908                           tblptrh	equ	0xFF7
  7909                           tblptrl	equ	0xFF6
  7910                           tablat	equ	0xFF5
  7911                           prodh	equ	0xFF4
  7912                           prodl	equ	0xFF3
  7913                           intcon	equ	0xFF2
  7914                           intcon2	equ	0xFF1
  7915                           intcon3	equ	0xFF0
  7916                           postinc0	equ	0xFEE
  7917                           wreg	equ	0xFE8
  7918                           postdec1	equ	0xFE5
  7919                           fsr1l	equ	0xFE1
  7920                           indf2	equ	0xFDF
  7921                           postinc2	equ	0xFDE
  7922                           postdec2	equ	0xFDD
  7923                           fsr2h	equ	0xFDA
  7924                           fsr2l	equ	0xFD9
  7925                           status	equ	0xFD8
  7926                           
  7927 ;; *************** function _change_state_to_menu_start *****************
  7928 ;; Defined at:
  7929 ;;		line 477 in file "UI.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7947 ;;Total ram usage:        0 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:   11
  7950 ;; This function calls:
  7951 ;;		_lcdInst
  7952 ;;		_printRTC
  7953 ;;		_printf
  7954 ;; This function is called by:
  7955 ;;		_initUI
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text21
  7960  005988                     __ptext21:
  7961                           	opt stack 0
  7962  005988                     _change_state_to_menu_start:
  7963                           	opt stack 18
  7964                           
  7965                           ;UI.c: 478: cur_state = 0;
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;incstack = 0
  7969  005988  0E00               	movlw	0
  7970  00598A  0100               	movlb	0	; () banked
  7971  00598C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7972  00598E  0E00               	movlw	0
  7973  005990  6FE6               	movwf	_cur_state& (0+255),b
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;UI.c: 480: lcdInst(0b10000000);;
  7977  005992  0E80               	movlw	128
  7978  005994  ECEF  F02D         	call	_lcdInst
  7979                           
  7980                           ;UI.c: 481: printRTC();
  7981  005998  ECC1  F016         	call	_printRTC	;wreg free
  7982                           
  7983                           ;UI.c: 482: lcdInst(0b11000000);;
  7984  00599C  0EC0               	movlw	192
  7985  00599E  ECEF  F02D         	call	_lcdInst
  7986                           
  7987                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7988  0059A2  0EEA               	movlw	low STR_30
  7989  0059A4  0100               	movlb	0	; () banked
  7990  0059A6  6F8E               	movwf	printf@f& (0+255),b
  7991  0059A8  0EFD               	movlw	high STR_30
  7992  0059AA  0100               	movlb	0	; () banked
  7993  0059AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7994  0059AE  ECED  F00D         	call	_printf	;wreg free
  7995  0059B2  0012               	return		;funcret
  7996  0059B4                     __end_of_change_state_to_menu_start:
  7997                           	opt stack 0
  7998                           tblptru	equ	0xFF8
  7999                           tblptrh	equ	0xFF7
  8000                           tblptrl	equ	0xFF6
  8001                           tablat	equ	0xFF5
  8002                           prodh	equ	0xFF4
  8003                           prodl	equ	0xFF3
  8004                           intcon	equ	0xFF2
  8005                           intcon2	equ	0xFF1
  8006                           intcon3	equ	0xFF0
  8007                           postinc0	equ	0xFEE
  8008                           wreg	equ	0xFE8
  8009                           postdec1	equ	0xFE5
  8010                           fsr1l	equ	0xFE1
  8011                           indf2	equ	0xFDF
  8012                           postinc2	equ	0xFDE
  8013                           postdec2	equ	0xFDD
  8014                           fsr2h	equ	0xFDA
  8015                           fsr2l	equ	0xFD9
  8016                           status	equ	0xFD8
  8017                           
  8018 ;; *************** function _initTime *****************
  8019 ;; Defined at:
  8020 ;;		line 17 in file "RTC.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  s               1    wreg     unsigned char 
  8023 ;;  m               1    0[BANK0 ] unsigned char 
  8024 ;;  h               1    1[BANK0 ] unsigned char 
  8025 ;;  w               1    2[BANK0 ] unsigned char 
  8026 ;;  DD              1    3[BANK0 ] unsigned char 
  8027 ;;  MM              1    4[BANK0 ] unsigned char 
  8028 ;;  YY              1    5[BANK0 ] unsigned char 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  s               1    6[BANK0 ] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8040 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;Total ram usage:        7 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    7
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		_main
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	text22
  8055  005AEC                     __ptext22:
  8056                           	opt stack 0
  8057  005AEC                     _initTime:
  8058                           	opt stack 23
  8059                           
  8060                           ;incstack = 0
  8061                           ;initTime@s stored from wreg
  8062  005AEC  0100               	movlb	0	; () banked
  8063  005AEE  6F86               	movwf	initTime@s& (0+255),b
  8064                           
  8065                           ;RTC.c: 19: time[0] = s;
  8066  005AF0  C086  F11C         	movff	initTime@s,_time
  8067                           
  8068                           ;RTC.c: 20: time[1] = m;
  8069  005AF4  C080  F11D         	movff	initTime@m,_time+1
  8070                           
  8071                           ;RTC.c: 21: time[2] = h;
  8072  005AF8  C081  F11E         	movff	initTime@h,_time+2
  8073                           
  8074                           ;RTC.c: 22: time[3] = w;
  8075  005AFC  C082  F11F         	movff	initTime@w,_time+3
  8076                           
  8077                           ;RTC.c: 23: time[4] = DD;
  8078  005B00  C083  F120         	movff	initTime@DD,_time+4
  8079                           
  8080                           ;RTC.c: 24: time[5] = MM;
  8081  005B04  C084  F121         	movff	initTime@MM,_time+5
  8082                           
  8083                           ;RTC.c: 25: time[6] = YY;
  8084  005B08  C085  F122         	movff	initTime@YY,_time+6
  8085  005B0C  0012               	return		;funcret
  8086  005B0E                     __end_of_initTime:
  8087                           	opt stack 0
  8088                           tblptru	equ	0xFF8
  8089                           tblptrh	equ	0xFF7
  8090                           tblptrl	equ	0xFF6
  8091                           tablat	equ	0xFF5
  8092                           prodh	equ	0xFF4
  8093                           prodl	equ	0xFF3
  8094                           intcon	equ	0xFF2
  8095                           intcon2	equ	0xFF1
  8096                           intcon3	equ	0xFF0
  8097                           postinc0	equ	0xFEE
  8098                           wreg	equ	0xFE8
  8099                           postdec1	equ	0xFE5
  8100                           fsr1l	equ	0xFE1
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _initLCD *****************
  8109 ;; Defined at:
  8110 ;;		line 50 in file "lcd.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, status,2, status,0, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        1 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    9
  8131 ;; This function calls:
  8132 ;;		_lcdInst
  8133 ;; This function is called by:
  8134 ;;		_main
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text23
  8139  005506                     __ptext23:
  8140                           	opt stack 0
  8141  005506                     _initLCD:
  8142                           	opt stack 21
  8143                           
  8144                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8145                           
  8146                           ;incstack = 0
  8147  005506  0E9C               	movlw	156
  8148  005508  0100               	movlb	0	; () banked
  8149  00550A  6F83               	movwf	??_initLCD& (0+255),b
  8150  00550C  0ED7               	movlw	215
  8151  00550E                     u10147:
  8152  00550E  2EE8               	decfsz	wreg,f,c
  8153  005510  D7FE               	bra	u10147
  8154  005512  2F83               	decfsz	??_initLCD& (0+255),f,b
  8155  005514  D7FC               	bra	u10147
  8156                           
  8157                           ;lcd.c: 52: lcdInst(0b00110011);
  8158  005516  0E33               	movlw	51
  8159  005518  ECEF  F02D         	call	_lcdInst
  8160                           
  8161                           ;lcd.c: 53: lcdInst(0b00110010);
  8162  00551C  0E32               	movlw	50
  8163  00551E  ECEF  F02D         	call	_lcdInst
  8164                           
  8165                           ;lcd.c: 55: lcdInst(0b00101000);
  8166  005522  0E28               	movlw	40
  8167  005524  ECEF  F02D         	call	_lcdInst
  8168                           
  8169                           ;lcd.c: 56: lcdInst(0b00001100);
  8170  005528  0E0C               	movlw	12
  8171  00552A  ECEF  F02D         	call	_lcdInst
  8172                           
  8173                           ;lcd.c: 57: lcdInst(0b00000110);
  8174  00552E  0E06               	movlw	6
  8175  005530  ECEF  F02D         	call	_lcdInst
  8176                           
  8177                           ;lcd.c: 58: lcdInst(0b00000001);
  8178  005534  0E01               	movlw	1
  8179  005536  ECEF  F02D         	call	_lcdInst
  8180                           
  8181                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8182  00553A  0E9C               	movlw	156
  8183  00553C  0100               	movlb	0	; () banked
  8184  00553E  6F83               	movwf	??_initLCD& (0+255),b
  8185  005540  0ED7               	movlw	215
  8186  005542                     u10157:
  8187  005542  2EE8               	decfsz	wreg,f,c
  8188  005544  D7FE               	bra	u10157
  8189  005546  2F83               	decfsz	??_initLCD& (0+255),f,b
  8190  005548  D7FC               	bra	u10157
  8191  00554A  0012               	return		;funcret
  8192  00554C                     __end_of_initLCD:
  8193                           	opt stack 0
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           intcon2	equ	0xFF1
  8202                           intcon3	equ	0xFF0
  8203                           postinc0	equ	0xFEE
  8204                           wreg	equ	0xFE8
  8205                           postdec1	equ	0xFE5
  8206                           fsr1l	equ	0xFE1
  8207                           indf2	equ	0xFDF
  8208                           postinc2	equ	0xFDE
  8209                           postdec2	equ	0xFDD
  8210                           fsr2h	equ	0xFDA
  8211                           fsr2l	equ	0xFD9
  8212                           status	equ	0xFD8
  8213                           
  8214 ;; *************** function _initEEPROM *****************
  8215 ;; Defined at:
  8216 ;;		line 32 in file "EEPROM.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;		None
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;Total ram usage:        0 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:   11
  8237 ;; This function calls:
  8238 ;;		_EEPROM_write
  8239 ;; This function is called by:
  8240 ;;		_main
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           	psect	text24
  8245  005B7C                     __ptext24:
  8246                           	opt stack 0
  8247  005B7C                     _initEEPROM:
  8248                           	opt stack 19
  8249                           
  8250                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8251                           
  8252                           ;incstack = 0
  8253  005B7C  0E00               	movlw	0
  8254  005B7E  0100               	movlb	0	; () banked
  8255  005B80  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8256  005B82  0E00               	movlw	0
  8257  005B84  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8258  005B86  0E01               	movlw	1
  8259  005B88  0100               	movlb	0	; () banked
  8260  005B8A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8261  005B8C  EC6C  F022         	call	_EEPROM_write	;wreg free
  8262  005B90  0012               	return		;funcret
  8263  005B92                     __end_of_initEEPROM:
  8264                           	opt stack 0
  8265                           tblptru	equ	0xFF8
  8266                           tblptrh	equ	0xFF7
  8267                           tblptrl	equ	0xFF6
  8268                           tablat	equ	0xFF5
  8269                           prodh	equ	0xFF4
  8270                           prodl	equ	0xFF3
  8271                           intcon	equ	0xFF2
  8272                           intcon2	equ	0xFF1
  8273                           intcon3	equ	0xFF0
  8274                           postinc0	equ	0xFEE
  8275                           wreg	equ	0xFE8
  8276                           postdec1	equ	0xFE5
  8277                           fsr1l	equ	0xFE1
  8278                           indf2	equ	0xFDF
  8279                           postinc2	equ	0xFDE
  8280                           postdec2	equ	0xFDD
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function _EEPROM_write *****************
  8286 ;; Defined at:
  8287 ;;		line 36 in file "EEPROM.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;  address         2   43[BANK0 ] unsigned short 
  8290 ;;  data            1   45[BANK0 ] unsigned char 
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;  i               1   48[BANK0 ] unsigned char 
  8293 ;;  i               1   47[BANK0 ] unsigned char 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  1    wreg      void 
  8296 ;; Registers used:
  8297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8303 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;Total ram usage:        6 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:   10
  8310 ;; This function calls:
  8311 ;;		_EEPROM_read
  8312 ;;		_lcdInst
  8313 ;;		_printf
  8314 ;; This function is called by:
  8315 ;;		_Loading
  8316 ;;		_initEEPROM
  8317 ;;		_logRun
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text25
  8322  0044D8                     __ptext25:
  8323                           	opt stack 0
  8324  0044D8                     _EEPROM_write:
  8325                           	opt stack 18
  8326                           
  8327                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8328                           
  8329                           ;incstack = 0
  8330  0044D8  84A6               	bsf	4006,2,c	;volatile
  8331                           
  8332                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8333  0044DA  0100               	movlb	0	; () banked
  8334  0044DC  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8335  0044DE  6EAA               	movwf	4010,c	;volatile
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8339  0044E0  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;EEPROM.c: 43: EEDATA = data;
  8343  0044E4  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8347  0044E8  9EA6               	bcf	4006,7,c	;volatile
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8351  0044EA  9CA6               	bcf	4006,6,c	;volatile
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8355  0044EC  9EF2               	bcf	intcon,7,c	;volatile
  8356                           
  8357                           ;EEPROM.c: 49: EECON2 = 0x55;
  8358  0044EE  0E55               	movlw	85
  8359  0044F0  6EA7               	movwf	4007,c	;volatile
  8360                           
  8361                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8362  0044F2  0EAA               	movlw	170
  8363  0044F4  6EA7               	movwf	4007,c	;volatile
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8367  0044F6  82A6               	bsf	4006,1,c	;volatile
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8371  0044F8  8EF2               	bsf	intcon,7,c	;volatile
  8372  0044FA                     l1123:
  8373  0044FA  A8A1               	btfss	4001,4,c	;volatile
  8374  0044FC  D7FE               	goto	l1123
  8375                           
  8376                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8377  0044FE  98A1               	bcf	4001,4,c	;volatile
  8378                           
  8379                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8380  004500  94A6               	bcf	4006,2,c	;volatile
  8381                           
  8382                           ;EEPROM.c: 61: if(debug){
  8383  004502  0100               	movlb	0	; () banked
  8384  004504  51E8               	movf	_debug& (0+255),w,b
  8385  004506  0100               	movlb	0	; () banked
  8386  004508  11E9               	iorwf	(_debug+1)& (0+255),w,b
  8387  00450A  B4D8               	btfsc	status,2,c
  8388  00450C  0012               	return	
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8392  00450E  0E01               	movlw	1
  8393  004510  ECEF  F02D         	call	_lcdInst
  8394  004514  0E68               	movlw	104
  8395  004516  0100               	movlb	0	; () banked
  8396  004518  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8397  00451A  0EE4               	movlw	228
  8398  00451C                     u10167:
  8399  00451C  2EE8               	decfsz	wreg,f,c
  8400  00451E  D7FE               	bra	u10167
  8401  004520  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8402  004522  D7FC               	bra	u10167
  8403  004524  F000               	nop	
  8404                           
  8405                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8406  004526  0E80               	movlw	128
  8407  004528  ECEF  F02D         	call	_lcdInst
  8408                           
  8409                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8410  00452C  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8411  004530  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8412  004534  ECB2  F02D         	call	_EEPROM_read	;wreg free
  8413  004538  0100               	movlb	0	; () banked
  8414  00453A  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8415  00453C  A4D8               	btfss	status,2,c
  8416  00453E  D024               	goto	l7378
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8420  004540  0EBE               	movlw	low STR_67
  8421  004542  0100               	movlb	0	; () banked
  8422  004544  6F8E               	movwf	printf@f& (0+255),b
  8423  004546  0EFA               	movlw	high STR_67
  8424  004548  0100               	movlb	0	; () banked
  8425  00454A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8426  00454C  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8427  004550  0100               	movlb	0	; () banked
  8428  004552  6B91               	clrf	(?_printf+3)& (0+255),b
  8429  004554  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8430  004558  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8431  00455C  ECED  F00D         	call	_printf	;wreg free
  8432                           
  8433                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8434  004560  0E00               	movlw	0
  8435  004562  0100               	movlb	0	; () banked
  8436  004564  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8437  004566                     l7370:
  8438                           
  8439                           ; BSR set to: 0
  8440  004566  0E63               	movlw	99
  8441  004568  0100               	movlb	0	; () banked
  8442  00456A  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8443  00456C  D001               	goto	l7374
  8444  00456E  0012               	return	
  8445  004570                     l7374:
  8446                           
  8447                           ; BSR set to: 0
  8448  004570  0E68               	movlw	104
  8449  004572  0100               	movlb	0	; () banked
  8450  004574  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8451  004576  0EE4               	movlw	228
  8452  004578                     u10177:
  8453  004578  2EE8               	decfsz	wreg,f,c
  8454  00457A  D7FE               	bra	u10177
  8455  00457C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8456  00457E  D7FC               	bra	u10177
  8457  004580  F000               	nop	
  8458  004582  0100               	movlb	0	; () banked
  8459  004584  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8460  004586  D7EF               	goto	l7370
  8461  004588                     l7378:
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8465  004588  0EBC               	movlw	low STR_68
  8466  00458A  0100               	movlb	0	; () banked
  8467  00458C  6F8E               	movwf	printf@f& (0+255),b
  8468  00458E  0EFF               	movlw	high STR_68
  8469  004590  0100               	movlb	0	; () banked
  8470  004592  6F8F               	movwf	(printf@f+1)& (0+255),b
  8471  004594  ECED  F00D         	call	_printf	;wreg free
  8472  004598  0E00               	movlw	0
  8473  00459A  0100               	movlb	0	; () banked
  8474  00459C  6FB0               	movwf	EEPROM_write@i_1404& (0+255),b
  8475  00459E                     l7382:
  8476                           
  8477                           ; BSR set to: 0
  8478  00459E  0E63               	movlw	99
  8479  0045A0  0100               	movlb	0	; () banked
  8480  0045A2  65B0               	cpfsgt	EEPROM_write@i_1404& (0+255),b
  8481  0045A4  D001               	goto	l7386
  8482  0045A6  0012               	return	
  8483  0045A8                     l7386:
  8484                           
  8485                           ; BSR set to: 0
  8486  0045A8  0E68               	movlw	104
  8487  0045AA  0100               	movlb	0	; () banked
  8488  0045AC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8489  0045AE  0EE4               	movlw	228
  8490  0045B0                     u10187:
  8491  0045B0  2EE8               	decfsz	wreg,f,c
  8492  0045B2  D7FE               	bra	u10187
  8493  0045B4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8494  0045B6  D7FC               	bra	u10187
  8495  0045B8  F000               	nop	
  8496  0045BA  0100               	movlb	0	; () banked
  8497  0045BC  2BB0               	incf	EEPROM_write@i_1404& (0+255),f,b
  8498  0045BE  D7EF               	goto	l7382
  8499  0045C0                     __end_of_EEPROM_write:
  8500                           	opt stack 0
  8501                           tblptru	equ	0xFF8
  8502                           tblptrh	equ	0xFF7
  8503                           tblptrl	equ	0xFF6
  8504                           tablat	equ	0xFF5
  8505                           prodh	equ	0xFF4
  8506                           prodl	equ	0xFF3
  8507                           intcon	equ	0xFF2
  8508                           intcon2	equ	0xFF1
  8509                           intcon3	equ	0xFF0
  8510                           postinc0	equ	0xFEE
  8511                           wreg	equ	0xFE8
  8512                           postdec1	equ	0xFE5
  8513                           fsr1l	equ	0xFE1
  8514                           indf2	equ	0xFDF
  8515                           postinc2	equ	0xFDE
  8516                           postdec2	equ	0xFDD
  8517                           fsr2h	equ	0xFDA
  8518                           fsr2l	equ	0xFD9
  8519                           status	equ	0xFD8
  8520                           
  8521 ;; *************** function _EEPROM_read *****************
  8522 ;; Defined at:
  8523 ;;		line 72 in file "EEPROM.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;  address         2    0[BANK0 ] unsigned short 
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;		None
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      unsigned char 
  8530 ;; Registers used:
  8531 ;;		wreg, status,2
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8537 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;Total ram usage:        2 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    7
  8544 ;; This function calls:
  8545 ;;		Nothing
  8546 ;; This function is called by:
  8547 ;;		_Loading
  8548 ;;		_EEPROM_write
  8549 ;;		_logRun
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           	psect	text26
  8554  005B64                     __ptext26:
  8555                           	opt stack 0
  8556  005B64                     _EEPROM_read:
  8557                           	opt stack 20
  8558                           
  8559                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;incstack = 0
  8563  005B64  0100               	movlb	0	; () banked
  8564  005B66  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8565  005B68  6EAA               	movwf	4010,c	;volatile
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8569  005B6A  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8573  005B6E  9EA6               	bcf	4006,7,c	;volatile
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8577  005B70  9CA6               	bcf	4006,6,c	;volatile
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8581  005B72  80A6               	bsf	4006,0,c	;volatile
  8582  005B74                     l1136:
  8583  005B74  B0A6               	btfsc	4006,0,c	;volatile
  8584  005B76  D7FE               	goto	l1136
  8585                           
  8586                           ;EEPROM.c: 85: return EEDATA;
  8587  005B78  50A8               	movf	4008,w,c	;volatile
  8588  005B7A  0012               	return	
  8589  005B7C                     __end_of_EEPROM_read:
  8590                           	opt stack 0
  8591                           tblptru	equ	0xFF8
  8592                           tblptrh	equ	0xFF7
  8593                           tblptrl	equ	0xFF6
  8594                           tablat	equ	0xFF5
  8595                           prodh	equ	0xFF4
  8596                           prodl	equ	0xFF3
  8597                           intcon	equ	0xFF2
  8598                           intcon2	equ	0xFF1
  8599                           intcon3	equ	0xFF0
  8600                           postinc0	equ	0xFEE
  8601                           wreg	equ	0xFE8
  8602                           postdec1	equ	0xFE5
  8603                           fsr1l	equ	0xFE1
  8604                           indf2	equ	0xFDF
  8605                           postinc2	equ	0xFDE
  8606                           postdec2	equ	0xFDD
  8607                           fsr2h	equ	0xFDA
  8608                           fsr2l	equ	0xFD9
  8609                           status	equ	0xFD8
  8610                           
  8611 ;; *************** function _UI *****************
  8612 ;; Defined at:
  8613 ;;		line 76 in file "UI.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;		None
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  i               1   73[BANK0 ] unsigned char 
  8618 ;;  i               1   85[BANK0 ] unsigned char 
  8619 ;;  i               1   84[BANK0 ] unsigned char 
  8620 ;;  i               1   83[BANK0 ] unsigned char 
  8621 ;;  i               1   82[BANK0 ] unsigned char 
  8622 ;;  i               1   81[BANK0 ] unsigned char 
  8623 ;;  i               1   80[BANK0 ] unsigned char 
  8624 ;;  i               1   79[BANK0 ] unsigned char 
  8625 ;;  i               1   78[BANK0 ] unsigned char 
  8626 ;;  i               1   77[BANK0 ] unsigned char 
  8627 ;;  i               1   76[BANK0 ] unsigned char 
  8628 ;;  i               1   75[BANK0 ] unsigned char 
  8629 ;;  i               1   74[BANK0 ] unsigned char 
  8630 ;;  month           4   86[BANK0 ] unsigned char [4]
  8631 ;;  i               1   72[BANK0 ] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;                  1    wreg      void 
  8634 ;; Registers used:
  8635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;Total ram usage:       22 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:   11
  8648 ;; This function calls:
  8649 ;;		___awdiv
  8650 ;;		___awmod
  8651 ;;		_change_state_to_menu_12
  8652 ;;		_change_state_to_menu_22
  8653 ;;		_lcdInst
  8654 ;;		_printRTC
  8655 ;;		_printf
  8656 ;;		_strcpy
  8657 ;; This function is called by:
  8658 ;;		_main
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           	psect	text27
  8663  000012                     __ptext27:
  8664                           	opt stack 0
  8665  000012                     _UI:
  8666                           	opt stack 19
  8667                           
  8668                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8669                           
  8670                           ;incstack = 0
  8671  000012  0E02               	movlw	2
  8672  000014  0100               	movlb	0	; () banked
  8673  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8674  000018  A4D8               	btfss	status,2,c
  8675  00001A  D086               	goto	l9276
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8679  00001C  0E01               	movlw	1
  8680  00001E  ECEF  F02D         	call	_lcdInst
  8681  000022  0E68               	movlw	104
  8682  000024  0100               	movlb	0	; () banked
  8683  000026  6FC4               	movwf	??_UI& (0+255),b
  8684  000028  0EE4               	movlw	228
  8685  00002A                     u10197:
  8686  00002A  2EE8               	decfsz	wreg,f,c
  8687  00002C  D7FE               	bra	u10197
  8688  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8689  000030  D7FC               	bra	u10197
  8690  000032  F000               	nop	
  8691                           
  8692                           ;UI.c: 79: lcdInst(0b10000000);;
  8693  000034  0E80               	movlw	128
  8694  000036  ECEF  F02D         	call	_lcdInst
  8695                           
  8696                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8697  00003A  0E52               	movlw	low STR_1
  8698  00003C  0100               	movlb	0	; () banked
  8699  00003E  6F8E               	movwf	printf@f& (0+255),b
  8700  000040  0EFB               	movlw	high STR_1
  8701  000042  0100               	movlb	0	; () banked
  8702  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8703  000046  0E01               	movlw	1
  8704  000048  0100               	movlb	0	; () banked
  8705  00004A  25FD               	addwf	_sel& (0+255),w,b
  8706  00004C  0100               	movlb	0	; () banked
  8707  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8708  000050  0100               	movlb	0	; () banked
  8709  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8710  000054  0E00               	movlw	0
  8711  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8712  000058  ECED  F00D         	call	_printf	;wreg free
  8713                           
  8714                           ;UI.c: 81: lcdInst(0b11000000);;
  8715  00005C  0EC0               	movlw	192
  8716  00005E  ECEF  F02D         	call	_lcdInst
  8717                           
  8718                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8719  000062  0E0E               	movlw	14
  8720  000064  0100               	movlb	0	; () banked
  8721  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8722  000068  0E10               	movlw	16
  8723  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8724  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8725  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8726  000074  ECF6  F025         	call	___awmod	;wreg free
  8727  000078  C080  F0C6         	movff	?___awmod,_UI$2430
  8728  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2430+1
  8729                           
  8730                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8731  000080  0E49               	movlw	low STR_2
  8732  000082  0100               	movlb	0	; () banked
  8733  000084  6F8E               	movwf	printf@f& (0+255),b
  8734  000086  0EFF               	movlw	high STR_2
  8735  000088  0100               	movlb	0	; () banked
  8736  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8737  00008C  0E0E               	movlw	14
  8738  00008E  0100               	movlb	0	; () banked
  8739  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8740  000092  0E10               	movlw	16
  8741  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8742  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8743  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8744  00009E  ECF6  F025         	call	___awmod	;wreg free
  8745  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8746  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8747  0000AA  0E00               	movlw	0
  8748  0000AC  0100               	movlb	0	; () banked
  8749  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8750  0000B0  0E3C               	movlw	60
  8751  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8752  0000B4  ECE4  F024         	call	___awdiv	;wreg free
  8753  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8754  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8755  0000C0  C0C6  F080         	movff	_UI$2430,___awmod@dividend
  8756  0000C4  C0C7  F081         	movff	_UI$2430+1,___awmod@dividend+1
  8757  0000C8  0E00               	movlw	0
  8758  0000CA  0100               	movlb	0	; () banked
  8759  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8760  0000CE  0E3C               	movlw	60
  8761  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8762  0000D2  ECF6  F025         	call	___awmod	;wreg free
  8763  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8764  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8765  0000DE  ECED  F00D         	call	_printf	;wreg free
  8766  0000E2                     l185:
  8767  0000E2  B281               	btfsc	3969,1,c	;volatile
  8768  0000E4  D7FE               	goto	l185
  8769  0000E6                     l188:
  8770  0000E6  A281               	btfss	3969,1,c	;volatile
  8771  0000E8  D7FE               	goto	l188
  8772                           
  8773                           ;UI.c: 86: }
  8774                           ;UI.c: 87: if(cur_state == 12){
  8775  0000EA  0E0C               	movlw	12
  8776  0000EC  0100               	movlb	0	; () banked
  8777  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8778  0000F0  0100               	movlb	0	; () banked
  8779  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8780  0000F4  A4D8               	btfss	status,2,c
  8781  0000F6  D003               	goto	l9270
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;UI.c: 88: change_state_to_menu_12();
  8785  0000F8  EC22  F02B         	call	_change_state_to_menu_12	;wreg free
  8786                           
  8787                           ;UI.c: 89: }
  8788  0000FC  D002               	goto	l193
  8789  0000FE                     l9270:
  8790                           
  8791                           ;UI.c: 90: else{
  8792                           ;UI.c: 91: change_state_to_menu_22();
  8793  0000FE  EC06  F02B         	call	_change_state_to_menu_22	;wreg free
  8794  000102                     l193:
  8795  000102  B281               	btfsc	3969,1,c	;volatile
  8796  000104  D7FE               	goto	l193
  8797                           
  8798                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8799  000106  0E05               	movlw	5
  8800  000108  0100               	movlb	0	; () banked
  8801  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8802  00010C  0E0F               	movlw	15
  8803  00010E  0100               	movlb	0	; () banked
  8804  000110  6FC4               	movwf	??_UI& (0+255),b
  8805  000112  0EF1               	movlw	241
  8806  000114                     u10207:
  8807  000114  2EE8               	decfsz	wreg,f,c
  8808  000116  D7FE               	bra	u10207
  8809  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8810  00011A  D7FC               	bra	u10207
  8811  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8812  00011E  D7FA               	bra	u10207
  8813                           
  8814                           ;UI.c: 95: machine_state = UI_state;
  8815  000120  0E00               	movlw	0
  8816  000122  0100               	movlb	0	; () banked
  8817  000124  6FFC               	movwf	_machine_state& (0+255),b
  8818                           
  8819                           ;UI.c: 96: }
  8820  000126  D3D2               	goto	l9596
  8821  000128                     l9276:
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;UI.c: 97: else if(cur_state == 0){
  8825  000128  0100               	movlb	0	; () banked
  8826  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8827  00012C  0100               	movlb	0	; () banked
  8828  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8829  000130  A4D8               	btfss	status,2,c
  8830  000132  D3CC               	goto	l9596
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8834  000134  0E00               	movlw	0
  8835  000136  0100               	movlb	0	; () banked
  8836  000138  6FC8               	movwf	UI@i& (0+255),b
  8837  00013A                     l9280:
  8838                           
  8839                           ; BSR set to: 0
  8840  00013A  0E63               	movlw	99
  8841  00013C  0100               	movlb	0	; () banked
  8842  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8843  000140  D001               	goto	l9284
  8844  000142  D00C               	goto	l9288
  8845  000144                     l9284:
  8846                           
  8847                           ; BSR set to: 0
  8848  000144  0E68               	movlw	104
  8849  000146  0100               	movlb	0	; () banked
  8850  000148  6FC4               	movwf	??_UI& (0+255),b
  8851  00014A  0EE4               	movlw	228
  8852  00014C                     u10217:
  8853  00014C  2EE8               	decfsz	wreg,f,c
  8854  00014E  D7FE               	bra	u10217
  8855  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8856  000152  D7FC               	bra	u10217
  8857  000154  F000               	nop	
  8858  000156  0100               	movlb	0	; () banked
  8859  000158  2BC8               	incf	UI@i& (0+255),f,b
  8860  00015A  D7EF               	goto	l9280
  8861  00015C                     l9288:
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;UI.c: 99: if(cur_state == 0){
  8865  00015C  0100               	movlb	0	; () banked
  8866  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8867  000160  0100               	movlb	0	; () banked
  8868  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8869  000164  A4D8               	btfss	status,2,c
  8870  000166  D3B2               	goto	l9596
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;UI.c: 100: printRTC();
  8874  000168  ECC1  F016         	call	_printRTC	;wreg free
  8875                           
  8876                           ;UI.c: 101: }
  8877                           ;UI.c: 102: }
  8878                           ;UI.c: 103: while(logstate){
  8879  00016C  D3AF               	goto	l9596
  8880  00016E                     l9292:
  8881                           
  8882                           ;UI.c: 105: if(!log_completion){
  8883  00016E  0100               	movlb	0	; () banked
  8884  000170  51F2               	movf	_log_completion& (0+255),w,b
  8885  000172  0100               	movlb	0	; () banked
  8886  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  8887  000176  A4D8               	btfss	status,2,c
  8888  000178  D041               	goto	l9322
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8892  00017A  0E01               	movlw	1
  8893  00017C  ECEF  F02D         	call	_lcdInst
  8894  000180  0E68               	movlw	104
  8895  000182  0100               	movlb	0	; () banked
  8896  000184  6FC4               	movwf	??_UI& (0+255),b
  8897  000186  0EE4               	movlw	228
  8898  000188                     u10227:
  8899  000188  2EE8               	decfsz	wreg,f,c
  8900  00018A  D7FE               	bra	u10227
  8901  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8902  00018E  D7FC               	bra	u10227
  8903  000190  F000               	nop	
  8904                           
  8905                           ;UI.c: 107: lcdInst(0b10000000);;
  8906  000192  0E80               	movlw	128
  8907  000194  ECEF  F02D         	call	_lcdInst
  8908                           
  8909                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8910  000198  0E40               	movlw	low STR_3
  8911  00019A  0100               	movlb	0	; () banked
  8912  00019C  6F8E               	movwf	printf@f& (0+255),b
  8913  00019E  0EFB               	movlw	high STR_3
  8914  0001A0  0100               	movlb	0	; () banked
  8915  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8916  0001A4  C0F0  F090         	movff	_log,?_printf+2
  8917  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  8918  0001AC  ECED  F00D         	call	_printf	;wreg free
  8919                           
  8920                           ;UI.c: 109: lcdInst(0b11000000);;
  8921  0001B0  0EC0               	movlw	192
  8922  0001B2  ECEF  F02D         	call	_lcdInst
  8923                           
  8924                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8925  0001B6  0E5D               	movlw	low STR_4
  8926  0001B8  0100               	movlb	0	; () banked
  8927  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8928  0001BC  0EFE               	movlw	high STR_4
  8929  0001BE  0100               	movlb	0	; () banked
  8930  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8931  0001C2  ECED  F00D         	call	_printf	;wreg free
  8932  0001C6                     l9306:
  8933  0001C6  0E00               	movlw	0
  8934  0001C8  0100               	movlb	0	; () banked
  8935  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8936  0001CC                     l9308:
  8937                           
  8938                           ; BSR set to: 0
  8939  0001CC  0E63               	movlw	99
  8940  0001CE  0100               	movlb	0	; () banked
  8941  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8942  0001D2  D001               	goto	l9312
  8943  0001D4  D00C               	goto	l9316
  8944  0001D6                     l9312:
  8945                           
  8946                           ; BSR set to: 0
  8947  0001D6  0E68               	movlw	104
  8948  0001D8  0100               	movlb	0	; () banked
  8949  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8950  0001DC  0EE4               	movlw	228
  8951  0001DE                     u10237:
  8952  0001DE  2EE8               	decfsz	wreg,f,c
  8953  0001E0  D7FE               	bra	u10237
  8954  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8955  0001E4  D7FC               	bra	u10237
  8956  0001E6  F000               	nop	
  8957  0001E8  0100               	movlb	0	; () banked
  8958  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8959  0001EC  D7EF               	goto	l9308
  8960  0001EE                     l9316:
  8961                           
  8962                           ; BSR set to: 0
  8963  0001EE  0100               	movlb	0	; () banked
  8964  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8965  0001F2  0100               	movlb	0	; () banked
  8966  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8967  0001F6  B4D8               	btfsc	status,2,c
  8968  0001F8  0012               	return	
  8969  0001FA  D7E5               	goto	l9306
  8970  0001FC                     l9322:
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;UI.c: 114: else{
  8974                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8975  0001FC  0E01               	movlw	1
  8976  0001FE  ECEF  F02D         	call	_lcdInst
  8977  000202  0E68               	movlw	104
  8978  000204  0100               	movlb	0	; () banked
  8979  000206  6FC4               	movwf	??_UI& (0+255),b
  8980  000208  0EE4               	movlw	228
  8981  00020A                     u10247:
  8982  00020A  2EE8               	decfsz	wreg,f,c
  8983  00020C  D7FE               	bra	u10247
  8984  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  8985  000210  D7FC               	bra	u10247
  8986  000212  F000               	nop	
  8987                           
  8988                           ;UI.c: 116: lcdInst(0b10000000);;
  8989  000214  0E80               	movlw	128
  8990  000216  ECEF  F02D         	call	_lcdInst
  8991                           
  8992                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8993  00021A  0E40               	movlw	low STR_3
  8994  00021C  0100               	movlb	0	; () banked
  8995  00021E  6F8E               	movwf	printf@f& (0+255),b
  8996  000220  0EFB               	movlw	high STR_3
  8997  000222  0100               	movlb	0	; () banked
  8998  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  8999  000226  C0F0  F090         	movff	_log,?_printf+2
  9000  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  9001  00022E  ECED  F00D         	call	_printf	;wreg free
  9002                           
  9003                           ;UI.c: 118: lcdInst(0b11000000);;
  9004  000232  0EC0               	movlw	192
  9005  000234  ECEF  F02D         	call	_lcdInst
  9006                           
  9007                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9008  000238  0ED9               	movlw	low STR_6
  9009  00023A  0100               	movlb	0	; () banked
  9010  00023C  6F8E               	movwf	printf@f& (0+255),b
  9011  00023E  0EFD               	movlw	high STR_6
  9012  000240  0100               	movlb	0	; () banked
  9013  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9014  000244  ECED  F00D         	call	_printf	;wreg free
  9015                           
  9016                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9017  000248  0E00               	movlw	0
  9018  00024A  0100               	movlb	0	; () banked
  9019  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  9020  00024E                     l9336:
  9021                           
  9022                           ; BSR set to: 0
  9023  00024E  0E63               	movlw	99
  9024  000250  0100               	movlb	0	; () banked
  9025  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  9026  000254  D001               	goto	l9340
  9027  000256  D00C               	goto	l9344
  9028  000258                     l9340:
  9029                           
  9030                           ; BSR set to: 0
  9031  000258  0E68               	movlw	104
  9032  00025A  0100               	movlb	0	; () banked
  9033  00025C  6FC4               	movwf	??_UI& (0+255),b
  9034  00025E  0EE4               	movlw	228
  9035  000260                     u10257:
  9036  000260  2EE8               	decfsz	wreg,f,c
  9037  000262  D7FE               	bra	u10257
  9038  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9039  000266  D7FC               	bra	u10257
  9040  000268  F000               	nop	
  9041  00026A  0100               	movlb	0	; () banked
  9042  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  9043  00026E  D7EF               	goto	l9336
  9044  000270                     l9344:
  9045                           
  9046                           ; BSR set to: 0
  9047  000270  0100               	movlb	0	; () banked
  9048  000272  51F8               	movf	_logstate& (0+255),w,b
  9049  000274  0100               	movlb	0	; () banked
  9050  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9051  000278  B4D8               	btfsc	status,2,c
  9052  00027A  0012               	return	
  9053                           
  9054                           ; BSR set to: 0
  9055                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9056                           
  9057                           ; BSR set to: 0
  9058                           
  9059                           ; BSR set to: 0
  9060  00027C  0E00               	movlw	0
  9061  00027E  0100               	movlb	0	; () banked
  9062  000280  6FCB               	movwf	UI@i_416& (0+255),b
  9063  000282                     l9350:
  9064                           
  9065                           ; BSR set to: 0
  9066  000282  0E63               	movlw	99
  9067  000284  0100               	movlb	0	; () banked
  9068  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  9069  000288  D001               	goto	l9354
  9070  00028A  D00C               	goto	l9358
  9071  00028C                     l9354:
  9072                           
  9073                           ; BSR set to: 0
  9074  00028C  0E68               	movlw	104
  9075  00028E  0100               	movlb	0	; () banked
  9076  000290  6FC4               	movwf	??_UI& (0+255),b
  9077  000292  0EE4               	movlw	228
  9078  000294                     u10267:
  9079  000294  2EE8               	decfsz	wreg,f,c
  9080  000296  D7FE               	bra	u10267
  9081  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9082  00029A  D7FC               	bra	u10267
  9083  00029C  F000               	nop	
  9084  00029E  0100               	movlb	0	; () banked
  9085  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9086  0002A2  D7EF               	goto	l9350
  9087  0002A4                     l9358:
  9088                           
  9089                           ; BSR set to: 0
  9090  0002A4  0100               	movlb	0	; () banked
  9091  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9092  0002A8  0100               	movlb	0	; () banked
  9093  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9094  0002AC  B4D8               	btfsc	status,2,c
  9095  0002AE  0012               	return	
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9099                           
  9100                           ; BSR set to: 0
  9101                           
  9102                           ; BSR set to: 0
  9103  0002B0  0E01               	movlw	1
  9104  0002B2  ECEF  F02D         	call	_lcdInst
  9105  0002B6  0E68               	movlw	104
  9106  0002B8  0100               	movlb	0	; () banked
  9107  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9108  0002BC  0EE4               	movlw	228
  9109  0002BE                     u10277:
  9110  0002BE  2EE8               	decfsz	wreg,f,c
  9111  0002C0  D7FE               	bra	u10277
  9112  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9113  0002C4  D7FC               	bra	u10277
  9114  0002C6  F000               	nop	
  9115                           
  9116                           ;UI.c: 125: lcdInst(0b10000000);;
  9117  0002C8  0E80               	movlw	128
  9118  0002CA  ECEF  F02D         	call	_lcdInst
  9119                           
  9120                           ;UI.c: 126: printf("START:");
  9121  0002CE  0EC3               	movlw	low STR_7
  9122  0002D0  0100               	movlb	0	; () banked
  9123  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9124  0002D4  0EFF               	movlw	high STR_7
  9125  0002D6  0100               	movlb	0	; () banked
  9126  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9127  0002DA  ECED  F00D         	call	_printf	;wreg free
  9128                           
  9129                           ;UI.c: 127: lcdInst(0b11000000);;
  9130  0002DE  0EC0               	movlw	192
  9131  0002E0  ECEF  F02D         	call	_lcdInst
  9132                           
  9133                           ;UI.c: 128: char month[] = "MMM";
  9134  0002E4  C149  F0D6         	movff	UI@F3246,UI@month
  9135  0002E8  C14A  F0D7         	movff	UI@F3246+1,UI@month+1
  9136  0002EC  C14B  F0D8         	movff	UI@F3246+2,UI@month+2
  9137  0002F0  C14C  F0D9         	movff	UI@F3246+3,UI@month+3
  9138                           
  9139                           ;UI.c: 129: switch(log_startTime[5]){
  9140  0002F4  D0C3               	goto	l9402
  9141  0002F6                     l9374:
  9142                           
  9143                           ;UI.c: 131: strcpy(month, "JAN");
  9144  0002F6  0ED6               	movlw	low UI@month
  9145  0002F8  0100               	movlb	0	; () banked
  9146  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9147  0002FC  0E00               	movlw	high UI@month
  9148  0002FE  0100               	movlb	0	; () banked
  9149  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9150  000302  0EDA               	movlw	low STR_8
  9151  000304  0100               	movlb	0	; () banked
  9152  000306  6F82               	movwf	strcpy@from& (0+255),b
  9153  000308  0EFF               	movlw	high STR_8
  9154  00030A  0100               	movlb	0	; () banked
  9155  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9156  00030E  EC3E  F02B         	call	_strcpy	;wreg free
  9157                           
  9158                           ;UI.c: 132: break;
  9159  000312  D0E6               	goto	l9404
  9160  000314                     l9376:
  9161                           
  9162                           ;UI.c: 134: strcpy(month, "FEB");
  9163  000314  0ED6               	movlw	low UI@month
  9164  000316  0100               	movlb	0	; () banked
  9165  000318  6F80               	movwf	strcpy@to& (0+255),b
  9166  00031A  0E00               	movlw	high UI@month
  9167  00031C  0100               	movlb	0	; () banked
  9168  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9169  000320  0ECA               	movlw	low STR_9
  9170  000322  0100               	movlb	0	; () banked
  9171  000324  6F82               	movwf	strcpy@from& (0+255),b
  9172  000326  0EFF               	movlw	high STR_9
  9173  000328  0100               	movlb	0	; () banked
  9174  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9175  00032C  EC3E  F02B         	call	_strcpy	;wreg free
  9176                           
  9177                           ;UI.c: 135: break;
  9178  000330  D0D7               	goto	l9404
  9179  000332                     l9378:
  9180                           
  9181                           ;UI.c: 137: strcpy(month, "MAR");
  9182  000332  0ED6               	movlw	low UI@month
  9183  000334  0100               	movlb	0	; () banked
  9184  000336  6F80               	movwf	strcpy@to& (0+255),b
  9185  000338  0E00               	movlw	high UI@month
  9186  00033A  0100               	movlb	0	; () banked
  9187  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9188  00033E  0EE6               	movlw	low STR_10
  9189  000340  0100               	movlb	0	; () banked
  9190  000342  6F82               	movwf	strcpy@from& (0+255),b
  9191  000344  0EFF               	movlw	high STR_10
  9192  000346  0100               	movlb	0	; () banked
  9193  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9194  00034A  EC3E  F02B         	call	_strcpy	;wreg free
  9195                           
  9196                           ;UI.c: 138: break;
  9197  00034E  D0C8               	goto	l9404
  9198  000350                     l9380:
  9199                           
  9200                           ;UI.c: 140: strcpy(month, "APR");
  9201  000350  0ED6               	movlw	low UI@month
  9202  000352  0100               	movlb	0	; () banked
  9203  000354  6F80               	movwf	strcpy@to& (0+255),b
  9204  000356  0E00               	movlw	high UI@month
  9205  000358  0100               	movlb	0	; () banked
  9206  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9207  00035C  0EEA               	movlw	low STR_11
  9208  00035E  0100               	movlb	0	; () banked
  9209  000360  6F82               	movwf	strcpy@from& (0+255),b
  9210  000362  0EFF               	movlw	high STR_11
  9211  000364  0100               	movlb	0	; () banked
  9212  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9213  000368  EC3E  F02B         	call	_strcpy	;wreg free
  9214                           
  9215                           ;UI.c: 141: break;
  9216  00036C  D0B9               	goto	l9404
  9217  00036E                     l9382:
  9218                           
  9219                           ;UI.c: 143: strcpy(month, "MAY");
  9220  00036E  0ED6               	movlw	low UI@month
  9221  000370  0100               	movlb	0	; () banked
  9222  000372  6F80               	movwf	strcpy@to& (0+255),b
  9223  000374  0E00               	movlw	high UI@month
  9224  000376  0100               	movlb	0	; () banked
  9225  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9226  00037A  0EFA               	movlw	low STR_12
  9227  00037C  0100               	movlb	0	; () banked
  9228  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9229  000380  0EFF               	movlw	high STR_12
  9230  000382  0100               	movlb	0	; () banked
  9231  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9232  000386  EC3E  F02B         	call	_strcpy	;wreg free
  9233                           
  9234                           ;UI.c: 144: break;
  9235  00038A  D0AA               	goto	l9404
  9236  00038C                     l9384:
  9237                           
  9238                           ;UI.c: 146: strcpy(month, "JUN");
  9239  00038C  0ED6               	movlw	low UI@month
  9240  00038E  0100               	movlb	0	; () banked
  9241  000390  6F80               	movwf	strcpy@to& (0+255),b
  9242  000392  0E00               	movlw	high UI@month
  9243  000394  0100               	movlb	0	; () banked
  9244  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9245  000398  0EDE               	movlw	low STR_13
  9246  00039A  0100               	movlb	0	; () banked
  9247  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9248  00039E  0EFF               	movlw	high STR_13
  9249  0003A0  0100               	movlb	0	; () banked
  9250  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9251  0003A4  EC3E  F02B         	call	_strcpy	;wreg free
  9252                           
  9253                           ;UI.c: 147: break;
  9254  0003A8  D09B               	goto	l9404
  9255  0003AA                     l9386:
  9256                           
  9257                           ;UI.c: 149: strcpy(month, "JUL");
  9258  0003AA  0ED6               	movlw	low UI@month
  9259  0003AC  0100               	movlb	0	; () banked
  9260  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9261  0003B0  0E00               	movlw	high UI@month
  9262  0003B2  0100               	movlb	0	; () banked
  9263  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9264  0003B6  0ED6               	movlw	low STR_14
  9265  0003B8  0100               	movlb	0	; () banked
  9266  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9267  0003BC  0EFF               	movlw	high STR_14
  9268  0003BE  0100               	movlb	0	; () banked
  9269  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9270  0003C2  EC3E  F02B         	call	_strcpy	;wreg free
  9271                           
  9272                           ;UI.c: 150: break;
  9273  0003C6  D08C               	goto	l9404
  9274  0003C8                     l9388:
  9275                           
  9276                           ;UI.c: 152: strcpy(month, "AUG");
  9277  0003C8  0ED6               	movlw	low UI@month
  9278  0003CA  0100               	movlb	0	; () banked
  9279  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9280  0003CE  0E00               	movlw	high UI@month
  9281  0003D0  0100               	movlb	0	; () banked
  9282  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9283  0003D4  0ED2               	movlw	low STR_15
  9284  0003D6  0100               	movlb	0	; () banked
  9285  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9286  0003DA  0EFF               	movlw	high STR_15
  9287  0003DC  0100               	movlb	0	; () banked
  9288  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9289  0003E0  EC3E  F02B         	call	_strcpy	;wreg free
  9290                           
  9291                           ;UI.c: 153: break;
  9292  0003E4  D07D               	goto	l9404
  9293  0003E6                     l9390:
  9294                           
  9295                           ;UI.c: 155: strcpy(month, "SEP");
  9296  0003E6  0ED6               	movlw	low UI@month
  9297  0003E8  0100               	movlb	0	; () banked
  9298  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9299  0003EC  0E00               	movlw	high UI@month
  9300  0003EE  0100               	movlb	0	; () banked
  9301  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9302  0003F2  0EE2               	movlw	low STR_16
  9303  0003F4  0100               	movlb	0	; () banked
  9304  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9305  0003F8  0EFF               	movlw	high STR_16
  9306  0003FA  0100               	movlb	0	; () banked
  9307  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9308  0003FE  EC3E  F02B         	call	_strcpy	;wreg free
  9309                           
  9310                           ;UI.c: 156: break;
  9311  000402  D06E               	goto	l9404
  9312  000404                     l9392:
  9313                           
  9314                           ;UI.c: 158: strcpy(month, "OCT");
  9315  000404  0ED6               	movlw	low UI@month
  9316  000406  0100               	movlb	0	; () banked
  9317  000408  6F80               	movwf	strcpy@to& (0+255),b
  9318  00040A  0E00               	movlw	high UI@month
  9319  00040C  0100               	movlb	0	; () banked
  9320  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9321  000410  0EF2               	movlw	low STR_17
  9322  000412  0100               	movlb	0	; () banked
  9323  000414  6F82               	movwf	strcpy@from& (0+255),b
  9324  000416  0EFF               	movlw	high STR_17
  9325  000418  0100               	movlb	0	; () banked
  9326  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9327  00041C  EC3E  F02B         	call	_strcpy	;wreg free
  9328                           
  9329                           ;UI.c: 159: break;
  9330  000420  D05F               	goto	l9404
  9331  000422                     l9394:
  9332                           
  9333                           ;UI.c: 161: strcpy(month, "NOV");
  9334  000422  0ED6               	movlw	low UI@month
  9335  000424  0100               	movlb	0	; () banked
  9336  000426  6F80               	movwf	strcpy@to& (0+255),b
  9337  000428  0E00               	movlw	high UI@month
  9338  00042A  0100               	movlb	0	; () banked
  9339  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9340  00042E  0EF6               	movlw	low STR_18
  9341  000430  0100               	movlb	0	; () banked
  9342  000432  6F82               	movwf	strcpy@from& (0+255),b
  9343  000434  0EFF               	movlw	high STR_18
  9344  000436  0100               	movlb	0	; () banked
  9345  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9346  00043A  EC3E  F02B         	call	_strcpy	;wreg free
  9347                           
  9348                           ;UI.c: 162: break;
  9349  00043E  D050               	goto	l9404
  9350  000440                     l9396:
  9351                           
  9352                           ;UI.c: 164: strcpy(month, "DEC");
  9353  000440  0ED6               	movlw	low UI@month
  9354  000442  0100               	movlb	0	; () banked
  9355  000444  6F80               	movwf	strcpy@to& (0+255),b
  9356  000446  0E00               	movlw	high UI@month
  9357  000448  0100               	movlb	0	; () banked
  9358  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9359  00044C  0ECE               	movlw	low STR_19
  9360  00044E  0100               	movlb	0	; () banked
  9361  000450  6F82               	movwf	strcpy@from& (0+255),b
  9362  000452  0EFF               	movlw	high STR_19
  9363  000454  0100               	movlb	0	; () banked
  9364  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9365  000458  EC3E  F02B         	call	_strcpy	;wreg free
  9366                           
  9367                           ;UI.c: 165: break;
  9368  00045C  D041               	goto	l9404
  9369  00045E                     l9398:
  9370                           
  9371                           ;UI.c: 167: strcpy(month, "ERR");
  9372  00045E  0ED6               	movlw	low UI@month
  9373  000460  0100               	movlb	0	; () banked
  9374  000462  6F80               	movwf	strcpy@to& (0+255),b
  9375  000464  0E00               	movlw	high UI@month
  9376  000466  0100               	movlb	0	; () banked
  9377  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9378  00046A  0EEE               	movlw	low STR_20
  9379  00046C  0100               	movlb	0	; () banked
  9380  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9381  000470  0EFF               	movlw	high STR_20
  9382  000472  0100               	movlb	0	; () banked
  9383  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9384  000476  EC3E  F02B         	call	_strcpy	;wreg free
  9385                           
  9386                           ;UI.c: 169: }
  9387                           
  9388                           ;UI.c: 168: break;
  9389  00047A  D032               	goto	l9404
  9390  00047C                     l9402:
  9391  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9392  000480  CFDE F0C4          	movff	postinc2,??_UI
  9393  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9394                           
  9395                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9396                           ; Switch size 1, requested type "space"
  9397                           ; Number of cases is 1, Range of values is 0 to 0
  9398                           ; switch strategies available:
  9399                           ; Name         Instructions Cycles
  9400                           ; simple_byte            4     3 (average)
  9401                           ;	Chosen strategy is simple_byte
  9402  000488  0100               	movlb	0	; () banked
  9403  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9404  00048C  0A00               	xorlw	0	; case 0
  9405  00048E  A4D8               	btfss	status,2,c
  9406  000490  D7E6               	goto	l9398
  9407                           
  9408                           ; BSR set to: 0
  9409                           ; Switch size 1, requested type "space"
  9410                           ; Number of cases is 12, Range of values is 1 to 12
  9411                           ; switch strategies available:
  9412                           ; Name         Instructions Cycles
  9413                           ; simple_byte           37    19 (average)
  9414                           ;	Chosen strategy is simple_byte
  9415  000492  0100               	movlb	0	; () banked
  9416  000494  51C4               	movf	??_UI& (0+255),w,b
  9417  000496  0A01               	xorlw	1	; case 1
  9418  000498  B4D8               	btfsc	status,2,c
  9419  00049A  D72D               	goto	l9374
  9420  00049C  0A03               	xorlw	3	; case 2
  9421  00049E  B4D8               	btfsc	status,2,c
  9422  0004A0  D739               	goto	l9376
  9423  0004A2  0A01               	xorlw	1	; case 3
  9424  0004A4  B4D8               	btfsc	status,2,c
  9425  0004A6  D745               	goto	l9378
  9426  0004A8  0A07               	xorlw	7	; case 4
  9427  0004AA  B4D8               	btfsc	status,2,c
  9428  0004AC  D751               	goto	l9380
  9429  0004AE  0A01               	xorlw	1	; case 5
  9430  0004B0  B4D8               	btfsc	status,2,c
  9431  0004B2  D75D               	goto	l9382
  9432  0004B4  0A03               	xorlw	3	; case 6
  9433  0004B6  B4D8               	btfsc	status,2,c
  9434  0004B8  D769               	goto	l9384
  9435  0004BA  0A01               	xorlw	1	; case 7
  9436  0004BC  B4D8               	btfsc	status,2,c
  9437  0004BE  D775               	goto	l9386
  9438  0004C0  0A0F               	xorlw	15	; case 8
  9439  0004C2  B4D8               	btfsc	status,2,c
  9440  0004C4  D781               	goto	l9388
  9441  0004C6  0A01               	xorlw	1	; case 9
  9442  0004C8  B4D8               	btfsc	status,2,c
  9443  0004CA  D78D               	goto	l9390
  9444  0004CC  0A03               	xorlw	3	; case 10
  9445  0004CE  B4D8               	btfsc	status,2,c
  9446  0004D0  D799               	goto	l9392
  9447  0004D2  0A01               	xorlw	1	; case 11
  9448  0004D4  B4D8               	btfsc	status,2,c
  9449  0004D6  D7A5               	goto	l9394
  9450  0004D8  0A07               	xorlw	7	; case 12
  9451  0004DA  B4D8               	btfsc	status,2,c
  9452  0004DC  D7B1               	goto	l9396
  9453  0004DE  D7BF               	goto	l9398
  9454  0004E0                     l9404:
  9455                           
  9456                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9457  0004E0  0EA6               	movlw	low STR_21
  9458  0004E2  0100               	movlb	0	; () banked
  9459  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9460  0004E6  0EFA               	movlw	high STR_21
  9461  0004E8  0100               	movlb	0	; () banked
  9462  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9463  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9464  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9465  0004F4  0ED6               	movlw	low UI@month
  9466  0004F6  0100               	movlb	0	; () banked
  9467  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9468  0004FA  0E00               	movlw	high UI@month
  9469  0004FC  0100               	movlb	0	; () banked
  9470  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9471  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9472  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9473  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9474  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9475  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9476  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9477  000518  ECED  F00D         	call	_printf	;wreg free
  9478                           
  9479                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9480  00051C  0E00               	movlw	0
  9481  00051E  0100               	movlb	0	; () banked
  9482  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9483  000522                     l9408:
  9484                           
  9485                           ; BSR set to: 0
  9486  000522  0E63               	movlw	99
  9487  000524  0100               	movlb	0	; () banked
  9488  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9489  000528  D001               	goto	l9412
  9490  00052A  D00C               	goto	l9416
  9491  00052C                     l9412:
  9492                           
  9493                           ; BSR set to: 0
  9494  00052C  0E68               	movlw	104
  9495  00052E  0100               	movlb	0	; () banked
  9496  000530  6FC4               	movwf	??_UI& (0+255),b
  9497  000532  0EE4               	movlw	228
  9498  000534                     u10287:
  9499  000534  2EE8               	decfsz	wreg,f,c
  9500  000536  D7FE               	bra	u10287
  9501  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9502  00053A  D7FC               	bra	u10287
  9503  00053C  F000               	nop	
  9504  00053E  0100               	movlb	0	; () banked
  9505  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9506  000542  D7EF               	goto	l9408
  9507  000544                     l9416:
  9508                           
  9509                           ; BSR set to: 0
  9510  000544  0100               	movlb	0	; () banked
  9511  000546  51F8               	movf	_logstate& (0+255),w,b
  9512  000548  0100               	movlb	0	; () banked
  9513  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9514  00054C  B4D8               	btfsc	status,2,c
  9515  00054E  0012               	return	
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9519                           
  9520                           ; BSR set to: 0
  9521                           
  9522                           ; BSR set to: 0
  9523  000550  0E00               	movlw	0
  9524  000552  0100               	movlb	0	; () banked
  9525  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9526  000556                     l9422:
  9527                           
  9528                           ; BSR set to: 0
  9529  000556  0E63               	movlw	99
  9530  000558  0100               	movlb	0	; () banked
  9531  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9532  00055C  D001               	goto	l9426
  9533  00055E  D00C               	goto	l9430
  9534  000560                     l9426:
  9535                           
  9536                           ; BSR set to: 0
  9537  000560  0E68               	movlw	104
  9538  000562  0100               	movlb	0	; () banked
  9539  000564  6FC4               	movwf	??_UI& (0+255),b
  9540  000566  0EE4               	movlw	228
  9541  000568                     u10297:
  9542  000568  2EE8               	decfsz	wreg,f,c
  9543  00056A  D7FE               	bra	u10297
  9544  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9545  00056E  D7FC               	bra	u10297
  9546  000570  F000               	nop	
  9547  000572  0100               	movlb	0	; () banked
  9548  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9549  000576  D7EF               	goto	l9422
  9550  000578                     l9430:
  9551                           
  9552                           ; BSR set to: 0
  9553  000578  0100               	movlb	0	; () banked
  9554  00057A  51F8               	movf	_logstate& (0+255),w,b
  9555  00057C  0100               	movlb	0	; () banked
  9556  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9557  000580  B4D8               	btfsc	status,2,c
  9558  000582  0012               	return	
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9562                           
  9563                           ; BSR set to: 0
  9564                           
  9565                           ; BSR set to: 0
  9566  000584  0E01               	movlw	1
  9567  000586  ECEF  F02D         	call	_lcdInst
  9568  00058A  0E68               	movlw	104
  9569  00058C  0100               	movlb	0	; () banked
  9570  00058E  6FC4               	movwf	??_UI& (0+255),b
  9571  000590  0EE4               	movlw	228
  9572  000592                     u10307:
  9573  000592  2EE8               	decfsz	wreg,f,c
  9574  000594  D7FE               	bra	u10307
  9575  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9576  000598  D7FC               	bra	u10307
  9577  00059A  F000               	nop	
  9578                           
  9579                           ;UI.c: 176: lcdInst(0b10000000);;
  9580  00059C  0E80               	movlw	128
  9581  00059E  ECEF  F02D         	call	_lcdInst
  9582                           
  9583                           ;UI.c: 177: printf("DURATION:");
  9584  0005A2  0E9A               	movlw	low STR_22
  9585  0005A4  0100               	movlb	0	; () banked
  9586  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9587  0005A8  0EFF               	movlw	high STR_22
  9588  0005AA  0100               	movlb	0	; () banked
  9589  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9590  0005AE  ECED  F00D         	call	_printf	;wreg free
  9591                           
  9592                           ;UI.c: 178: lcdInst(0b11000000);;
  9593  0005B2  0EC0               	movlw	192
  9594  0005B4  ECEF  F02D         	call	_lcdInst
  9595                           
  9596                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9597  0005B8  0E0E               	movlw	14
  9598  0005BA  0100               	movlb	0	; () banked
  9599  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9600  0005BE  0E10               	movlw	16
  9601  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9602  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9603  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9604  0005CA  ECF6  F025         	call	___awmod	;wreg free
  9605  0005CE  C080  F0C6         	movff	?___awmod,_UI$2430
  9606  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2430+1
  9607                           
  9608                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9609  0005D6  0E3B               	movlw	low STR_23
  9610  0005D8  0100               	movlb	0	; () banked
  9611  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9612  0005DC  0EFF               	movlw	high STR_23
  9613  0005DE  0100               	movlb	0	; () banked
  9614  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9615  0005E2  0E0E               	movlw	14
  9616  0005E4  0100               	movlb	0	; () banked
  9617  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9618  0005E8  0E10               	movlw	16
  9619  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9620  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9621  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9622  0005F4  ECF6  F025         	call	___awmod	;wreg free
  9623  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9624  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9625  000600  0E00               	movlw	0
  9626  000602  0100               	movlb	0	; () banked
  9627  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9628  000606  0E3C               	movlw	60
  9629  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9630  00060A  ECE4  F024         	call	___awdiv	;wreg free
  9631  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9632  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9633  000616  C0C6  F080         	movff	_UI$2430,___awmod@dividend
  9634  00061A  C0C7  F081         	movff	_UI$2430+1,___awmod@dividend+1
  9635  00061E  0E00               	movlw	0
  9636  000620  0100               	movlb	0	; () banked
  9637  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9638  000624  0E3C               	movlw	60
  9639  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9640  000628  ECF6  F025         	call	___awmod	;wreg free
  9641  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9642  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9643  000634  ECED  F00D         	call	_printf	;wreg free
  9644                           
  9645                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9646  000638  0E00               	movlw	0
  9647  00063A  0100               	movlb	0	; () banked
  9648  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9649  00063E                     l9450:
  9650                           
  9651                           ; BSR set to: 0
  9652  00063E  0E63               	movlw	99
  9653  000640  0100               	movlb	0	; () banked
  9654  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9655  000644  D001               	goto	l9454
  9656  000646  D00C               	goto	l9458
  9657  000648                     l9454:
  9658                           
  9659                           ; BSR set to: 0
  9660  000648  0E68               	movlw	104
  9661  00064A  0100               	movlb	0	; () banked
  9662  00064C  6FC4               	movwf	??_UI& (0+255),b
  9663  00064E  0EE4               	movlw	228
  9664  000650                     u10317:
  9665  000650  2EE8               	decfsz	wreg,f,c
  9666  000652  D7FE               	bra	u10317
  9667  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9668  000656  D7FC               	bra	u10317
  9669  000658  F000               	nop	
  9670  00065A  0100               	movlb	0	; () banked
  9671  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9672  00065E  D7EF               	goto	l9450
  9673  000660                     l9458:
  9674                           
  9675                           ; BSR set to: 0
  9676  000660  0100               	movlb	0	; () banked
  9677  000662  51F8               	movf	_logstate& (0+255),w,b
  9678  000664  0100               	movlb	0	; () banked
  9679  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9680  000668  B4D8               	btfsc	status,2,c
  9681  00066A  0012               	return	
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9685                           
  9686                           ; BSR set to: 0
  9687                           
  9688                           ; BSR set to: 0
  9689  00066C  0E00               	movlw	0
  9690  00066E  0100               	movlb	0	; () banked
  9691  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9692  000672                     l9464:
  9693                           
  9694                           ; BSR set to: 0
  9695  000672  0E63               	movlw	99
  9696  000674  0100               	movlb	0	; () banked
  9697  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9698  000678  D001               	goto	l9468
  9699  00067A  D00C               	goto	l9472
  9700  00067C                     l9468:
  9701                           
  9702                           ; BSR set to: 0
  9703  00067C  0E68               	movlw	104
  9704  00067E  0100               	movlb	0	; () banked
  9705  000680  6FC4               	movwf	??_UI& (0+255),b
  9706  000682  0EE4               	movlw	228
  9707  000684                     u10327:
  9708  000684  2EE8               	decfsz	wreg,f,c
  9709  000686  D7FE               	bra	u10327
  9710  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9711  00068A  D7FC               	bra	u10327
  9712  00068C  F000               	nop	
  9713  00068E  0100               	movlb	0	; () banked
  9714  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9715  000692  D7EF               	goto	l9464
  9716  000694                     l9472:
  9717                           
  9718                           ; BSR set to: 0
  9719  000694  0100               	movlb	0	; () banked
  9720  000696  51F8               	movf	_logstate& (0+255),w,b
  9721  000698  0100               	movlb	0	; () banked
  9722  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9723  00069C  B4D8               	btfsc	status,2,c
  9724  00069E  0012               	return	
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9728                           
  9729                           ; BSR set to: 0
  9730                           
  9731                           ; BSR set to: 0
  9732  0006A0  0E01               	movlw	1
  9733  0006A2  ECEF  F02D         	call	_lcdInst
  9734  0006A6  0E68               	movlw	104
  9735  0006A8  0100               	movlb	0	; () banked
  9736  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9737  0006AC  0EE4               	movlw	228
  9738  0006AE                     u10337:
  9739  0006AE  2EE8               	decfsz	wreg,f,c
  9740  0006B0  D7FE               	bra	u10337
  9741  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9742  0006B4  D7FC               	bra	u10337
  9743  0006B6  F000               	nop	
  9744                           
  9745                           ;UI.c: 185: lcdInst(0b10000000);;
  9746  0006B8  0E80               	movlw	128
  9747  0006BA  ECEF  F02D         	call	_lcdInst
  9748                           
  9749                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9750  0006BE  0E2F               	movlw	low STR_24
  9751  0006C0  0100               	movlb	0	; () banked
  9752  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9753  0006C4  0EFD               	movlw	high STR_24
  9754  0006C6  0100               	movlb	0	; () banked
  9755  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9756  0006CA  ECED  F00D         	call	_printf	;wreg free
  9757                           
  9758                           ;UI.c: 187: lcdInst(0b11000000);;
  9759  0006CE  0EC0               	movlw	192
  9760  0006D0  ECEF  F02D         	call	_lcdInst
  9761                           
  9762                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9763  0006D4  0E0C               	movlw	low STR_25
  9764  0006D6  0100               	movlb	0	; () banked
  9765  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9766  0006DA  0EFE               	movlw	high STR_25
  9767  0006DC  0100               	movlb	0	; () banked
  9768  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9769  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9770  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9771  0006E8  C141  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9772  0006EC  C142  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9773  0006F0  ECED  F00D         	call	_printf	;wreg free
  9774                           
  9775                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9776  0006F4  0E00               	movlw	0
  9777  0006F6  0100               	movlb	0	; () banked
  9778  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9779  0006FA                     l9490:
  9780                           
  9781                           ; BSR set to: 0
  9782  0006FA  0E63               	movlw	99
  9783  0006FC  0100               	movlb	0	; () banked
  9784  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9785  000700  D001               	goto	l9494
  9786  000702  D00C               	goto	l9498
  9787  000704                     l9494:
  9788                           
  9789                           ; BSR set to: 0
  9790  000704  0E68               	movlw	104
  9791  000706  0100               	movlb	0	; () banked
  9792  000708  6FC4               	movwf	??_UI& (0+255),b
  9793  00070A  0EE4               	movlw	228
  9794  00070C                     u10347:
  9795  00070C  2EE8               	decfsz	wreg,f,c
  9796  00070E  D7FE               	bra	u10347
  9797  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9798  000712  D7FC               	bra	u10347
  9799  000714  F000               	nop	
  9800  000716  0100               	movlb	0	; () banked
  9801  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9802  00071A  D7EF               	goto	l9490
  9803  00071C                     l9498:
  9804                           
  9805                           ; BSR set to: 0
  9806  00071C  0100               	movlb	0	; () banked
  9807  00071E  51F8               	movf	_logstate& (0+255),w,b
  9808  000720  0100               	movlb	0	; () banked
  9809  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9810  000724  B4D8               	btfsc	status,2,c
  9811  000726  0012               	return	
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9815                           
  9816                           ; BSR set to: 0
  9817                           
  9818                           ; BSR set to: 0
  9819  000728  0E00               	movlw	0
  9820  00072A  0100               	movlb	0	; () banked
  9821  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9822  00072E                     l9504:
  9823                           
  9824                           ; BSR set to: 0
  9825  00072E  0E63               	movlw	99
  9826  000730  0100               	movlb	0	; () banked
  9827  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9828  000734  D001               	goto	l9508
  9829  000736  D00C               	goto	l9512
  9830  000738                     l9508:
  9831                           
  9832                           ; BSR set to: 0
  9833  000738  0E68               	movlw	104
  9834  00073A  0100               	movlb	0	; () banked
  9835  00073C  6FC4               	movwf	??_UI& (0+255),b
  9836  00073E  0EE4               	movlw	228
  9837  000740                     u10357:
  9838  000740  2EE8               	decfsz	wreg,f,c
  9839  000742  D7FE               	bra	u10357
  9840  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9841  000746  D7FC               	bra	u10357
  9842  000748  F000               	nop	
  9843  00074A  0100               	movlb	0	; () banked
  9844  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9845  00074E  D7EF               	goto	l9504
  9846  000750                     l9512:
  9847                           
  9848                           ; BSR set to: 0
  9849  000750  0100               	movlb	0	; () banked
  9850  000752  51F8               	movf	_logstate& (0+255),w,b
  9851  000754  0100               	movlb	0	; () banked
  9852  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9853  000758  B4D8               	btfsc	status,2,c
  9854  00075A  0012               	return	
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9858                           
  9859                           ; BSR set to: 0
  9860                           
  9861                           ; BSR set to: 0
  9862  00075C  0E01               	movlw	1
  9863  00075E  ECEF  F02D         	call	_lcdInst
  9864  000762  0E68               	movlw	104
  9865  000764  0100               	movlb	0	; () banked
  9866  000766  6FC4               	movwf	??_UI& (0+255),b
  9867  000768  0EE4               	movlw	228
  9868  00076A                     u10367:
  9869  00076A  2EE8               	decfsz	wreg,f,c
  9870  00076C  D7FE               	bra	u10367
  9871  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9872  000770  D7FC               	bra	u10367
  9873  000772  F000               	nop	
  9874                           
  9875                           ;UI.c: 194: lcdInst(0b10000000);;
  9876  000774  0E80               	movlw	128
  9877  000776  ECEF  F02D         	call	_lcdInst
  9878                           
  9879                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9880  00077A  0E40               	movlw	low STR_26
  9881  00077C  0100               	movlb	0	; () banked
  9882  00077E  6F8E               	movwf	printf@f& (0+255),b
  9883  000780  0EFD               	movlw	high STR_26
  9884  000782  0100               	movlb	0	; () banked
  9885  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9886  000786  ECED  F00D         	call	_printf	;wreg free
  9887                           
  9888                           ;UI.c: 196: lcdInst(0b11000000);;
  9889  00078A  0EC0               	movlw	192
  9890  00078C  ECEF  F02D         	call	_lcdInst
  9891                           
  9892                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9893  000790  0EFB               	movlw	low STR_27
  9894  000792  0100               	movlb	0	; () banked
  9895  000794  6F8E               	movwf	printf@f& (0+255),b
  9896  000796  0EFD               	movlw	high STR_27
  9897  000798  0100               	movlb	0	; () banked
  9898  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9899  00079C  C13D  F090         	movff	_log_count_can_no_lab,?_printf+2
  9900  0007A0  C13E  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9901  0007A4  C13F  F092         	movff	_log_count_can_w_lab,?_printf+4
  9902  0007A8  C140  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9903  0007AC  ECED  F00D         	call	_printf	;wreg free
  9904                           
  9905                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9906  0007B0  0E00               	movlw	0
  9907  0007B2  0100               	movlb	0	; () banked
  9908  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9909  0007B6                     l9530:
  9910                           
  9911                           ; BSR set to: 0
  9912  0007B6  0E63               	movlw	99
  9913  0007B8  0100               	movlb	0	; () banked
  9914  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9915  0007BC  D001               	goto	l9534
  9916  0007BE  D00C               	goto	l9538
  9917  0007C0                     l9534:
  9918                           
  9919                           ; BSR set to: 0
  9920  0007C0  0E68               	movlw	104
  9921  0007C2  0100               	movlb	0	; () banked
  9922  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9923  0007C6  0EE4               	movlw	228
  9924  0007C8                     u10377:
  9925  0007C8  2EE8               	decfsz	wreg,f,c
  9926  0007CA  D7FE               	bra	u10377
  9927  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9928  0007CE  D7FC               	bra	u10377
  9929  0007D0  F000               	nop	
  9930  0007D2  0100               	movlb	0	; () banked
  9931  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9932  0007D6  D7EF               	goto	l9530
  9933  0007D8                     l9538:
  9934                           
  9935                           ; BSR set to: 0
  9936  0007D8  0100               	movlb	0	; () banked
  9937  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9938  0007DC  0100               	movlb	0	; () banked
  9939  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9940  0007E0  B4D8               	btfsc	status,2,c
  9941  0007E2  0012               	return	
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9945                           
  9946                           ; BSR set to: 0
  9947                           
  9948                           ; BSR set to: 0
  9949  0007E4  0E00               	movlw	0
  9950  0007E6  0100               	movlb	0	; () banked
  9951  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9952  0007EA                     l9544:
  9953                           
  9954                           ; BSR set to: 0
  9955  0007EA  0E63               	movlw	99
  9956  0007EC  0100               	movlb	0	; () banked
  9957  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9958  0007F0  D001               	goto	l9548
  9959  0007F2  D00C               	goto	l9552
  9960  0007F4                     l9548:
  9961                           
  9962                           ; BSR set to: 0
  9963  0007F4  0E68               	movlw	104
  9964  0007F6  0100               	movlb	0	; () banked
  9965  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9966  0007FA  0EE4               	movlw	228
  9967  0007FC                     u10387:
  9968  0007FC  2EE8               	decfsz	wreg,f,c
  9969  0007FE  D7FE               	bra	u10387
  9970  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  9971  000802  D7FC               	bra	u10387
  9972  000804  F000               	nop	
  9973  000806  0100               	movlb	0	; () banked
  9974  000808  2BD3               	incf	UI@i_447& (0+255),f,b
  9975  00080A  D7EF               	goto	l9544
  9976  00080C                     l9552:
  9977                           
  9978                           ; BSR set to: 0
  9979  00080C  0100               	movlb	0	; () banked
  9980  00080E  51F8               	movf	_logstate& (0+255),w,b
  9981  000810  0100               	movlb	0	; () banked
  9982  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9983  000814  B4D8               	btfsc	status,2,c
  9984  000816  0012               	return	
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9988                           
  9989                           ; BSR set to: 0
  9990                           
  9991                           ; BSR set to: 0
  9992  000818  0E01               	movlw	1
  9993  00081A  ECEF  F02D         	call	_lcdInst
  9994  00081E  0E68               	movlw	104
  9995  000820  0100               	movlb	0	; () banked
  9996  000822  6FC4               	movwf	??_UI& (0+255),b
  9997  000824  0EE4               	movlw	228
  9998  000826                     u10397:
  9999  000826  2EE8               	decfsz	wreg,f,c
 10000  000828  D7FE               	bra	u10397
 10001  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10002  00082C  D7FC               	bra	u10397
 10003  00082E  F000               	nop	
 10004                           
 10005                           ;UI.c: 203: lcdInst(0b10000000);;
 10006  000830  0E80               	movlw	128
 10007  000832  ECEF  F02D         	call	_lcdInst
 10008                           
 10009                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10010  000836  0E51               	movlw	low STR_28
 10011  000838  0100               	movlb	0	; () banked
 10012  00083A  6F8E               	movwf	printf@f& (0+255),b
 10013  00083C  0EFD               	movlw	high STR_28
 10014  00083E  0100               	movlb	0	; () banked
 10015  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10016  000842  ECED  F00D         	call	_printf	;wreg free
 10017                           
 10018                           ;UI.c: 205: lcdInst(0b11000000);;
 10019  000846  0EC0               	movlw	192
 10020  000848  ECEF  F02D         	call	_lcdInst
 10021                           
 10022                           ;UI.c: 206: printf("%d", log_count_total);
 10023  00084C  0E09               	movlw	low (STR_27+14)
 10024  00084E  0100               	movlb	0	; () banked
 10025  000850  6F8E               	movwf	printf@f& (0+255),b
 10026  000852  0EFE               	movlw	high (STR_27+14)
 10027  000854  0100               	movlb	0	; () banked
 10028  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10029  000858  C143  F090         	movff	_log_count_total,?_printf+2
 10030  00085C  C144  F091         	movff	_log_count_total+1,?_printf+3
 10031  000860  ECED  F00D         	call	_printf	;wreg free
 10032                           
 10033                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10034  000864  0E00               	movlw	0
 10035  000866  0100               	movlb	0	; () banked
 10036  000868  6FD4               	movwf	UI@i_450& (0+255),b
 10037  00086A                     l9570:
 10038                           
 10039                           ; BSR set to: 0
 10040  00086A  0E63               	movlw	99
 10041  00086C  0100               	movlb	0	; () banked
 10042  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
 10043  000870  D001               	goto	l9574
 10044  000872  D00C               	goto	l9578
 10045  000874                     l9574:
 10046                           
 10047                           ; BSR set to: 0
 10048  000874  0E68               	movlw	104
 10049  000876  0100               	movlb	0	; () banked
 10050  000878  6FC4               	movwf	??_UI& (0+255),b
 10051  00087A  0EE4               	movlw	228
 10052  00087C                     u10407:
 10053  00087C  2EE8               	decfsz	wreg,f,c
 10054  00087E  D7FE               	bra	u10407
 10055  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10056  000882  D7FC               	bra	u10407
 10057  000884  F000               	nop	
 10058  000886  0100               	movlb	0	; () banked
 10059  000888  2BD4               	incf	UI@i_450& (0+255),f,b
 10060  00088A  D7EF               	goto	l9570
 10061  00088C                     l9578:
 10062                           
 10063                           ; BSR set to: 0
 10064  00088C  0100               	movlb	0	; () banked
 10065  00088E  51F8               	movf	_logstate& (0+255),w,b
 10066  000890  0100               	movlb	0	; () banked
 10067  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10068  000894  B4D8               	btfsc	status,2,c
 10069  000896  0012               	return	
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10073                           
 10074                           ; BSR set to: 0
 10075                           
 10076                           ; BSR set to: 0
 10077  000898  0E00               	movlw	0
 10078  00089A  0100               	movlb	0	; () banked
 10079  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10080  00089E                     l9584:
 10081                           
 10082                           ; BSR set to: 0
 10083  00089E  0E63               	movlw	99
 10084  0008A0  0100               	movlb	0	; () banked
 10085  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10086  0008A4  D001               	goto	l9588
 10087  0008A6  D00C               	goto	l9592
 10088  0008A8                     l9588:
 10089                           
 10090                           ; BSR set to: 0
 10091  0008A8  0E68               	movlw	104
 10092  0008AA  0100               	movlb	0	; () banked
 10093  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10094  0008AE  0EE4               	movlw	228
 10095  0008B0                     u10417:
 10096  0008B0  2EE8               	decfsz	wreg,f,c
 10097  0008B2  D7FE               	bra	u10417
 10098  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10099  0008B6  D7FC               	bra	u10417
 10100  0008B8  F000               	nop	
 10101  0008BA  0100               	movlb	0	; () banked
 10102  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10103  0008BE  D7EF               	goto	l9584
 10104  0008C0                     l9592:
 10105                           
 10106                           ; BSR set to: 0
 10107  0008C0  0100               	movlb	0	; () banked
 10108  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10109  0008C4  0100               	movlb	0	; () banked
 10110  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10111  0008C8  B4D8               	btfsc	status,2,c
 10112  0008CA  0012               	return	
 10113  0008CC                     l9596:
 10114  0008CC  0100               	movlb	0	; () banked
 10115  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10116  0008D0  0100               	movlb	0	; () banked
 10117  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10118  0008D4  B4D8               	btfsc	status,2,c
 10119  0008D6  0012               	return	
 10120  0008D8  D44A               	goto	l9292
 10121  0008DA                     __end_of_UI:
 10122                           	opt stack 0
 10123                           tblptru	equ	0xFF8
 10124                           tblptrh	equ	0xFF7
 10125                           tblptrl	equ	0xFF6
 10126                           tablat	equ	0xFF5
 10127                           prodh	equ	0xFF4
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           intcon2	equ	0xFF1
 10131                           intcon3	equ	0xFF0
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           postdec1	equ	0xFE5
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           postdec2	equ	0xFDD
 10139                           fsr2h	equ	0xFDA
 10140                           fsr2l	equ	0xFD9
 10141                           status	equ	0xFD8
 10142                           
 10143 ;; *************** function _printRTC *****************
 10144 ;; Defined at:
 10145 ;;		line 63 in file "RTC.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;  i               2   66[BANK0 ] int 
 10150 ;;  INT_time       14   46[BANK0 ] int [7]
 10151 ;;  month           4   62[BANK0 ] unsigned char [4]
 10152 ;;  RTC_month       2   60[BANK0 ] int 
 10153 ;; Return value:  Size  Location     Type
 10154 ;;                  1    wreg      void 
 10155 ;; Registers used:
 10156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;Total ram usage:       25 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:   10
 10169 ;; This function calls:
 10170 ;;		_getRTC
 10171 ;;		_lcdInst
 10172 ;;		_printf
 10173 ;;		_strcpy
 10174 ;; This function is called by:
 10175 ;;		_UI
 10176 ;;		_change_state_to_menu_start
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           	psect	text28
 10181  002D82                     __ptext28:
 10182                           	opt stack 0
 10183  002D82                     _printRTC:
 10184                           	opt stack 18
 10185                           
 10186                           ;RTC.c: 64: getRTC();
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;incstack = 0
 10190  002D82  EC8D  F026         	call	_getRTC	;wreg free
 10191                           
 10192                           ;RTC.c: 65: char month[] = "MMM";
 10193  002D86  C14D  F0BE         	movff	printRTC@F3236,printRTC@month
 10194  002D8A  C14E  F0BF         	movff	printRTC@F3236+1,printRTC@month+1
 10195  002D8E  C14F  F0C0         	movff	printRTC@F3236+2,printRTC@month+2
 10196  002D92  C150  F0C1         	movff	printRTC@F3236+3,printRTC@month+3
 10197                           
 10198                           ;RTC.c: 66: int INT_time[7];
 10199                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10200  002D96  0E00               	movlw	0
 10201  002D98  0100               	movlb	0	; () banked
 10202  002D9A  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10203  002D9C  0E00               	movlw	0
 10204  002D9E  6FC2               	movwf	printRTC@i& (0+255),b
 10205                           
 10206                           ; BSR set to: 0
 10207  002DA0  0100               	movlb	0	; () banked
 10208  002DA2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10209  002DA4  D008               	goto	l7142
 10210  002DA6  0100               	movlb	0	; () banked
 10211  002DA8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10212  002DAA  E146               	bnz	l627
 10213  002DAC  0E07               	movlw	7
 10214  002DAE  0100               	movlb	0	; () banked
 10215  002DB0  5DC2               	subwf	printRTC@i& (0+255),w,b
 10216  002DB2  B0D8               	btfsc	status,0,c
 10217  002DB4  D041               	goto	l627
 10218  002DB6                     l7142:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10222  002DB6  0E1C               	movlw	low _time
 10223  002DB8  0100               	movlb	0	; () banked
 10224  002DBA  25C2               	addwf	printRTC@i& (0+255),w,b
 10225  002DBC  6ED9               	movwf	fsr2l,c
 10226  002DBE  0E01               	movlw	high _time
 10227  002DC0  0100               	movlb	0	; () banked
 10228  002DC2  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10229  002DC4  6EDA               	movwf	fsr2h,c
 10230  002DC6  50DF               	movf	indf2,w,c
 10231  002DC8  0100               	movlb	0	; () banked
 10232  002DCA  6FAB               	movwf	??_printRTC& (0+255),b
 10233  002DCC  0100               	movlb	0	; () banked
 10234  002DCE  3BAB               	swapf	??_printRTC& (0+255),f,b
 10235  002DD0  0E0F               	movlw	15
 10236  002DD2  17AB               	andwf	??_printRTC& (0+255),f,b
 10237  002DD4  0E0F               	movlw	15
 10238  002DD6  0100               	movlb	0	; () banked
 10239  002DD8  17AB               	andwf	??_printRTC& (0+255),f,b
 10240  002DDA  0100               	movlb	0	; () banked
 10241  002DDC  51AB               	movf	??_printRTC& (0+255),w,b
 10242  002DDE  0D0A               	mullw	10
 10243  002DE0  0E1C               	movlw	low _time
 10244  002DE2  0100               	movlb	0	; () banked
 10245  002DE4  25C2               	addwf	printRTC@i& (0+255),w,b
 10246  002DE6  6ED9               	movwf	fsr2l,c
 10247  002DE8  0E01               	movlw	high _time
 10248  002DEA  0100               	movlb	0	; () banked
 10249  002DEC  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10250  002DEE  6EDA               	movwf	fsr2h,c
 10251  002DF0  50DF               	movf	indf2,w,c
 10252  002DF2  0B0F               	andlw	15
 10253  002DF4  0100               	movlb	0	; () banked
 10254  002DF6  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10255  002DF8  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10256  002DFA  50F3               	movf	prodl,w,c
 10257  002DFC  0100               	movlb	0	; () banked
 10258  002DFE  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10259  002E00  50F4               	movf	prodh,w,c
 10260  002E02  0100               	movlb	0	; () banked
 10261  002E04  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10262  002E06  90D8               	bcf	status,0,c
 10263  002E08  0100               	movlb	0	; () banked
 10264  002E0A  35C2               	rlcf	printRTC@i& (0+255),w,b
 10265  002E0C  6ED9               	movwf	fsr2l,c
 10266  002E0E  0100               	movlb	0	; () banked
 10267  002E10  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10268  002E12  6EDA               	movwf	fsr2h,c
 10269  002E14  0EAE               	movlw	low printRTC@INT_time
 10270  002E16  26D9               	addwf	fsr2l,f,c
 10271  002E18  0E00               	movlw	high printRTC@INT_time
 10272  002E1A  22DA               	addwfc	fsr2h,f,c
 10273  002E1C  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10274  002E20  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10275                           
 10276                           ; BSR set to: 0
 10277  002E24  0100               	movlb	0	; () banked
 10278  002E26  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10279  002E28  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10280                           
 10281                           ; BSR set to: 0
 10282  002E2A  0100               	movlb	0	; () banked
 10283  002E2C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10284  002E2E  D7C3               	goto	l7142
 10285  002E30  0100               	movlb	0	; () banked
 10286  002E32  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10287  002E34  E101               	bnz	u5950
 10288  002E36  D7BA               	goto	L12
 10289  002E38                     u5950:
 10290  002E38                     l627:
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;RTC.c: 69: }
 10294                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10295  002E38  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10296  002E3C  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10297                           
 10298                           ;RTC.c: 72: switch(RTC_month){
 10299  002E40  D0B4               	goto	l7174
 10300  002E42                     l7148:
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;RTC.c: 74: strcpy(month, "JAN");
 10304  002E42  0EBE               	movlw	low printRTC@month
 10305  002E44  0100               	movlb	0	; () banked
 10306  002E46  6F80               	movwf	strcpy@to& (0+255),b
 10307  002E48  0E00               	movlw	high printRTC@month
 10308  002E4A  0100               	movlb	0	; () banked
 10309  002E4C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10310  002E4E  0EDA               	movlw	low STR_8
 10311  002E50  0100               	movlb	0	; () banked
 10312  002E52  6F82               	movwf	strcpy@from& (0+255),b
 10313  002E54  0EFF               	movlw	high STR_8
 10314  002E56  0100               	movlb	0	; () banked
 10315  002E58  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10316  002E5A  EC3E  F02B         	call	_strcpy	;wreg free
 10317                           
 10318                           ;RTC.c: 75: break;
 10319  002E5E  D0D4               	goto	l7176
 10320  002E60                     l7150:
 10321                           
 10322                           ;RTC.c: 77: strcpy(month, "FEB");
 10323  002E60  0EBE               	movlw	low printRTC@month
 10324  002E62  0100               	movlb	0	; () banked
 10325  002E64  6F80               	movwf	strcpy@to& (0+255),b
 10326  002E66  0E00               	movlw	high printRTC@month
 10327  002E68  0100               	movlb	0	; () banked
 10328  002E6A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10329  002E6C  0ECA               	movlw	low STR_9
 10330  002E6E  0100               	movlb	0	; () banked
 10331  002E70  6F82               	movwf	strcpy@from& (0+255),b
 10332  002E72  0EFF               	movlw	high STR_9
 10333  002E74  0100               	movlb	0	; () banked
 10334  002E76  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10335  002E78  EC3E  F02B         	call	_strcpy	;wreg free
 10336                           
 10337                           ;RTC.c: 78: break;
 10338  002E7C  D0C5               	goto	l7176
 10339  002E7E                     l7152:
 10340                           
 10341                           ;RTC.c: 80: strcpy(month, "MAR");
 10342  002E7E  0EBE               	movlw	low printRTC@month
 10343  002E80  0100               	movlb	0	; () banked
 10344  002E82  6F80               	movwf	strcpy@to& (0+255),b
 10345  002E84  0E00               	movlw	high printRTC@month
 10346  002E86  0100               	movlb	0	; () banked
 10347  002E88  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10348  002E8A  0EE6               	movlw	low STR_10
 10349  002E8C  0100               	movlb	0	; () banked
 10350  002E8E  6F82               	movwf	strcpy@from& (0+255),b
 10351  002E90  0EFF               	movlw	high STR_10
 10352  002E92  0100               	movlb	0	; () banked
 10353  002E94  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10354  002E96  EC3E  F02B         	call	_strcpy	;wreg free
 10355                           
 10356                           ;RTC.c: 81: break;
 10357  002E9A  D0B6               	goto	l7176
 10358  002E9C                     l7154:
 10359                           
 10360                           ;RTC.c: 83: strcpy(month, "APR");
 10361  002E9C  0EBE               	movlw	low printRTC@month
 10362  002E9E  0100               	movlb	0	; () banked
 10363  002EA0  6F80               	movwf	strcpy@to& (0+255),b
 10364  002EA2  0E00               	movlw	high printRTC@month
 10365  002EA4  0100               	movlb	0	; () banked
 10366  002EA6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10367  002EA8  0EEA               	movlw	low STR_11
 10368  002EAA  0100               	movlb	0	; () banked
 10369  002EAC  6F82               	movwf	strcpy@from& (0+255),b
 10370  002EAE  0EFF               	movlw	high STR_11
 10371  002EB0  0100               	movlb	0	; () banked
 10372  002EB2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10373  002EB4  EC3E  F02B         	call	_strcpy	;wreg free
 10374                           
 10375                           ;RTC.c: 84: break;
 10376  002EB8  D0A7               	goto	l7176
 10377  002EBA                     l7156:
 10378                           
 10379                           ;RTC.c: 86: strcpy(month, "MAY");
 10380  002EBA  0EBE               	movlw	low printRTC@month
 10381  002EBC  0100               	movlb	0	; () banked
 10382  002EBE  6F80               	movwf	strcpy@to& (0+255),b
 10383  002EC0  0E00               	movlw	high printRTC@month
 10384  002EC2  0100               	movlb	0	; () banked
 10385  002EC4  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10386  002EC6  0EFA               	movlw	low STR_12
 10387  002EC8  0100               	movlb	0	; () banked
 10388  002ECA  6F82               	movwf	strcpy@from& (0+255),b
 10389  002ECC  0EFF               	movlw	high STR_12
 10390  002ECE  0100               	movlb	0	; () banked
 10391  002ED0  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10392  002ED2  EC3E  F02B         	call	_strcpy	;wreg free
 10393                           
 10394                           ;RTC.c: 87: break;
 10395  002ED6  D098               	goto	l7176
 10396  002ED8                     l7158:
 10397                           
 10398                           ;RTC.c: 89: strcpy(month, "JUN");
 10399  002ED8  0EBE               	movlw	low printRTC@month
 10400  002EDA  0100               	movlb	0	; () banked
 10401  002EDC  6F80               	movwf	strcpy@to& (0+255),b
 10402  002EDE  0E00               	movlw	high printRTC@month
 10403  002EE0  0100               	movlb	0	; () banked
 10404  002EE2  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10405  002EE4  0EDE               	movlw	low STR_13
 10406  002EE6  0100               	movlb	0	; () banked
 10407  002EE8  6F82               	movwf	strcpy@from& (0+255),b
 10408  002EEA  0EFF               	movlw	high STR_13
 10409  002EEC  0100               	movlb	0	; () banked
 10410  002EEE  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10411  002EF0  EC3E  F02B         	call	_strcpy	;wreg free
 10412                           
 10413                           ;RTC.c: 90: break;
 10414  002EF4  D089               	goto	l7176
 10415  002EF6                     l7160:
 10416                           
 10417                           ;RTC.c: 92: strcpy(month, "JUL");
 10418  002EF6  0EBE               	movlw	low printRTC@month
 10419  002EF8  0100               	movlb	0	; () banked
 10420  002EFA  6F80               	movwf	strcpy@to& (0+255),b
 10421  002EFC  0E00               	movlw	high printRTC@month
 10422  002EFE  0100               	movlb	0	; () banked
 10423  002F00  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10424  002F02  0ED6               	movlw	low STR_14
 10425  002F04  0100               	movlb	0	; () banked
 10426  002F06  6F82               	movwf	strcpy@from& (0+255),b
 10427  002F08  0EFF               	movlw	high STR_14
 10428  002F0A  0100               	movlb	0	; () banked
 10429  002F0C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10430  002F0E  EC3E  F02B         	call	_strcpy	;wreg free
 10431                           
 10432                           ;RTC.c: 93: break;
 10433  002F12  D07A               	goto	l7176
 10434  002F14                     l7162:
 10435                           
 10436                           ;RTC.c: 95: strcpy(month, "AUG");
 10437  002F14  0EBE               	movlw	low printRTC@month
 10438  002F16  0100               	movlb	0	; () banked
 10439  002F18  6F80               	movwf	strcpy@to& (0+255),b
 10440  002F1A  0E00               	movlw	high printRTC@month
 10441  002F1C  0100               	movlb	0	; () banked
 10442  002F1E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10443  002F20  0ED2               	movlw	low STR_15
 10444  002F22  0100               	movlb	0	; () banked
 10445  002F24  6F82               	movwf	strcpy@from& (0+255),b
 10446  002F26  0EFF               	movlw	high STR_15
 10447  002F28  0100               	movlb	0	; () banked
 10448  002F2A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10449  002F2C  EC3E  F02B         	call	_strcpy	;wreg free
 10450                           
 10451                           ;RTC.c: 96: break;
 10452  002F30  D06B               	goto	l7176
 10453  002F32                     l7164:
 10454                           
 10455                           ;RTC.c: 98: strcpy(month, "SEP");
 10456  002F32  0EBE               	movlw	low printRTC@month
 10457  002F34  0100               	movlb	0	; () banked
 10458  002F36  6F80               	movwf	strcpy@to& (0+255),b
 10459  002F38  0E00               	movlw	high printRTC@month
 10460  002F3A  0100               	movlb	0	; () banked
 10461  002F3C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10462  002F3E  0EE2               	movlw	low STR_16
 10463  002F40  0100               	movlb	0	; () banked
 10464  002F42  6F82               	movwf	strcpy@from& (0+255),b
 10465  002F44  0EFF               	movlw	high STR_16
 10466  002F46  0100               	movlb	0	; () banked
 10467  002F48  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10468  002F4A  EC3E  F02B         	call	_strcpy	;wreg free
 10469                           
 10470                           ;RTC.c: 99: break;
 10471  002F4E  D05C               	goto	l7176
 10472  002F50                     l7166:
 10473                           
 10474                           ;RTC.c: 101: strcpy(month, "OCT");
 10475  002F50  0EBE               	movlw	low printRTC@month
 10476  002F52  0100               	movlb	0	; () banked
 10477  002F54  6F80               	movwf	strcpy@to& (0+255),b
 10478  002F56  0E00               	movlw	high printRTC@month
 10479  002F58  0100               	movlb	0	; () banked
 10480  002F5A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10481  002F5C  0EF2               	movlw	low STR_17
 10482  002F5E  0100               	movlb	0	; () banked
 10483  002F60  6F82               	movwf	strcpy@from& (0+255),b
 10484  002F62  0EFF               	movlw	high STR_17
 10485  002F64  0100               	movlb	0	; () banked
 10486  002F66  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10487  002F68  EC3E  F02B         	call	_strcpy	;wreg free
 10488                           
 10489                           ;RTC.c: 102: break;
 10490  002F6C  D04D               	goto	l7176
 10491  002F6E                     l7168:
 10492                           
 10493                           ;RTC.c: 104: strcpy(month, "NOV");
 10494  002F6E  0EBE               	movlw	low printRTC@month
 10495  002F70  0100               	movlb	0	; () banked
 10496  002F72  6F80               	movwf	strcpy@to& (0+255),b
 10497  002F74  0E00               	movlw	high printRTC@month
 10498  002F76  0100               	movlb	0	; () banked
 10499  002F78  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10500  002F7A  0EF6               	movlw	low STR_18
 10501  002F7C  0100               	movlb	0	; () banked
 10502  002F7E  6F82               	movwf	strcpy@from& (0+255),b
 10503  002F80  0EFF               	movlw	high STR_18
 10504  002F82  0100               	movlb	0	; () banked
 10505  002F84  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10506  002F86  EC3E  F02B         	call	_strcpy	;wreg free
 10507                           
 10508                           ;RTC.c: 105: break;
 10509  002F8A  D03E               	goto	l7176
 10510  002F8C                     l7170:
 10511                           
 10512                           ;RTC.c: 107: strcpy(month, "DEC");
 10513  002F8C  0EBE               	movlw	low printRTC@month
 10514  002F8E  0100               	movlb	0	; () banked
 10515  002F90  6F80               	movwf	strcpy@to& (0+255),b
 10516  002F92  0E00               	movlw	high printRTC@month
 10517  002F94  0100               	movlb	0	; () banked
 10518  002F96  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10519  002F98  0ECE               	movlw	low STR_19
 10520  002F9A  0100               	movlb	0	; () banked
 10521  002F9C  6F82               	movwf	strcpy@from& (0+255),b
 10522  002F9E  0EFF               	movlw	high STR_19
 10523  002FA0  0100               	movlb	0	; () banked
 10524  002FA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10525  002FA4  EC3E  F02B         	call	_strcpy	;wreg free
 10526                           
 10527                           ;RTC.c: 109: }
 10528                           
 10529                           ;RTC.c: 108: break;
 10530  002FA8  D02F               	goto	l7176
 10531  002FAA                     l7174:
 10532  002FAA  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10533  002FAE  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10534                           
 10535                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10536                           ; Switch size 1, requested type "space"
 10537                           ; Number of cases is 1, Range of values is 0 to 0
 10538                           ; switch strategies available:
 10539                           ; Name         Instructions Cycles
 10540                           ; simple_byte            4     3 (average)
 10541                           ;	Chosen strategy is simple_byte
 10542  002FB2  0100               	movlb	0	; () banked
 10543  002FB4  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10544  002FB6  0A00               	xorlw	0	; case 0
 10545  002FB8  A4D8               	btfss	status,2,c
 10546  002FBA  D026               	goto	l7176
 10547                           
 10548                           ; BSR set to: 0
 10549                           ; Switch size 1, requested type "space"
 10550                           ; Number of cases is 12, Range of values is 1 to 12
 10551                           ; switch strategies available:
 10552                           ; Name         Instructions Cycles
 10553                           ; simple_byte           37    19 (average)
 10554                           ;	Chosen strategy is simple_byte
 10555  002FBC  0100               	movlb	0	; () banked
 10556  002FBE  51AB               	movf	??_printRTC& (0+255),w,b
 10557  002FC0  0A01               	xorlw	1	; case 1
 10558  002FC2  B4D8               	btfsc	status,2,c
 10559  002FC4  D73E               	goto	l7148
 10560  002FC6  0A03               	xorlw	3	; case 2
 10561  002FC8  B4D8               	btfsc	status,2,c
 10562  002FCA  D74A               	goto	l7150
 10563  002FCC  0A01               	xorlw	1	; case 3
 10564  002FCE  B4D8               	btfsc	status,2,c
 10565  002FD0  D756               	goto	l7152
 10566  002FD2  0A07               	xorlw	7	; case 4
 10567  002FD4  B4D8               	btfsc	status,2,c
 10568  002FD6  D762               	goto	l7154
 10569  002FD8  0A01               	xorlw	1	; case 5
 10570  002FDA  B4D8               	btfsc	status,2,c
 10571  002FDC  D76E               	goto	l7156
 10572  002FDE  0A03               	xorlw	3	; case 6
 10573  002FE0  B4D8               	btfsc	status,2,c
 10574  002FE2  D77A               	goto	l7158
 10575  002FE4  0A01               	xorlw	1	; case 7
 10576  002FE6  B4D8               	btfsc	status,2,c
 10577  002FE8  D786               	goto	l7160
 10578  002FEA  0A0F               	xorlw	15	; case 8
 10579  002FEC  B4D8               	btfsc	status,2,c
 10580  002FEE  D792               	goto	l7162
 10581  002FF0  0A01               	xorlw	1	; case 9
 10582  002FF2  B4D8               	btfsc	status,2,c
 10583  002FF4  D79E               	goto	l7164
 10584  002FF6  0A03               	xorlw	3	; case 10
 10585  002FF8  B4D8               	btfsc	status,2,c
 10586  002FFA  D7AA               	goto	l7166
 10587  002FFC  0A01               	xorlw	1	; case 11
 10588  002FFE  B4D8               	btfsc	status,2,c
 10589  003000  D7B6               	goto	l7168
 10590  003002  0A07               	xorlw	7	; case 12
 10591  003004  B4D8               	btfsc	status,2,c
 10592  003006  D7C2               	goto	l7170
 10593  003008                     l7176:
 10594                           
 10595                           ;RTC.c: 110: lcdInst(0b10000000);;
 10596  003008  0E80               	movlw	128
 10597  00300A  ECEF  F02D         	call	_lcdInst
 10598                           
 10599                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10600  00300E  0EA6               	movlw	low STR_21
 10601  003010  0100               	movlb	0	; () banked
 10602  003012  6F8E               	movwf	printf@f& (0+255),b
 10603  003014  0EFA               	movlw	high STR_21
 10604  003016  0100               	movlb	0	; () banked
 10605  003018  6F8F               	movwf	(printf@f+1)& (0+255),b
 10606  00301A  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10607  00301E  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10608  003022  0EBE               	movlw	low printRTC@month
 10609  003024  0100               	movlb	0	; () banked
 10610  003026  6F92               	movwf	(?_printf+4)& (0+255),b
 10611  003028  0E00               	movlw	high printRTC@month
 10612  00302A  0100               	movlb	0	; () banked
 10613  00302C  6F93               	movwf	(?_printf+5)& (0+255),b
 10614  00302E  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10615  003032  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10616  003036  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10617  00303A  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10618  00303E  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10619  003042  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10620  003046  ECED  F00D         	call	_printf	;wreg free
 10621  00304A  0012               	return		;funcret
 10622  00304C                     __end_of_printRTC:
 10623                           	opt stack 0
 10624                           tblptru	equ	0xFF8
 10625                           tblptrh	equ	0xFF7
 10626                           tblptrl	equ	0xFF6
 10627                           tablat	equ	0xFF5
 10628                           prodh	equ	0xFF4
 10629                           prodl	equ	0xFF3
 10630                           intcon	equ	0xFF2
 10631                           intcon2	equ	0xFF1
 10632                           intcon3	equ	0xFF0
 10633                           postinc0	equ	0xFEE
 10634                           wreg	equ	0xFE8
 10635                           postdec1	equ	0xFE5
 10636                           fsr1l	equ	0xFE1
 10637                           indf2	equ	0xFDF
 10638                           postinc2	equ	0xFDE
 10639                           postdec2	equ	0xFDD
 10640                           fsr2h	equ	0xFDA
 10641                           fsr2l	equ	0xFD9
 10642                           status	equ	0xFD8
 10643                           
 10644 ;; *************** function _strcpy *****************
 10645 ;; Defined at:
 10646 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10649 ;;		 -> printRTC@month(4), UI@month(4), 
 10650 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10651 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10652 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10653 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10654 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10655 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10656 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10657 ;;		 -> STR_8(4), 
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10660 ;;		 -> printRTC@month(4), UI@month(4), 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  2    0[BANK0 ] PTR unsigned char 
 10663 ;; Registers used:
 10664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10670 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;Total ram usage:        6 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    7
 10677 ;; This function calls:
 10678 ;;		Nothing
 10679 ;; This function is called by:
 10680 ;;		_UI
 10681 ;;		_printRTC
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           	psect	text29
 10686  00567C                     __ptext29:
 10687                           	opt stack 0
 10688  00567C                     _strcpy:
 10689                           	opt stack 20
 10690                           
 10691                           ;incstack = 0
 10692  00567C  C080  F084         	movff	strcpy@to,strcpy@cp
 10693  005680  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10694  005684  D006               	goto	l6840
 10695  005686                     l6838:
 10696  005686  0100               	movlb	0	; () banked
 10697  005688  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10698  00568A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10699  00568C  0100               	movlb	0	; () banked
 10700  00568E  4B82               	infsnz	strcpy@from& (0+255),f,b
 10701  005690  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10702  005692                     l6840:
 10703  005692  C082  FFF6         	movff	strcpy@from,tblptrl
 10704  005696  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10705  00569A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10706  00569A  6AF8               	clrf	tblptru,c
 10707  00569C                     	endif
 10708  00569C                     	if	0	;tblptru may be non-zero
 10709  00569C                     	endif
 10710  00569C  C084  FFD9         	movff	strcpy@cp,fsr2l
 10711  0056A0  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10712  0056A4  0008               	tblrd		*
 10713  0056A6  CFF5 FFDF          	movff	tablat,indf2
 10714  0056AA  50DF               	movf	indf2,w,c
 10715  0056AC  B4D8               	btfsc	status,2,c
 10716  0056AE  0012               	return	
 10717  0056B0  D7EA               	goto	l6838
 10718  0056B2                     __end_of_strcpy:
 10719                           	opt stack 0
 10720                           tblptru	equ	0xFF8
 10721                           tblptrh	equ	0xFF7
 10722                           tblptrl	equ	0xFF6
 10723                           tablat	equ	0xFF5
 10724                           prodh	equ	0xFF4
 10725                           prodl	equ	0xFF3
 10726                           intcon	equ	0xFF2
 10727                           intcon2	equ	0xFF1
 10728                           intcon3	equ	0xFF0
 10729                           postinc0	equ	0xFEE
 10730                           wreg	equ	0xFE8
 10731                           postdec1	equ	0xFE5
 10732                           fsr1l	equ	0xFE1
 10733                           indf2	equ	0xFDF
 10734                           postinc2	equ	0xFDE
 10735                           postdec2	equ	0xFDD
 10736                           fsr2h	equ	0xFDA
 10737                           fsr2l	equ	0xFD9
 10738                           status	equ	0xFD8
 10739                           
 10740 ;; *************** function _getRTC *****************
 10741 ;; Defined at:
 10742 ;;		line 44 in file "RTC.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;		None
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;  i               2    3[BANK0 ] int 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      void 
 10749 ;; Registers used:
 10750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;Total ram usage:        2 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    9
 10763 ;; This function calls:
 10764 ;;		_I2C_Master_Read
 10765 ;;		_I2C_Master_Start
 10766 ;;		_I2C_Master_Stop
 10767 ;;		_I2C_Master_Write
 10768 ;; This function is called by:
 10769 ;;		_printRTC
 10770 ;;		_initSortTimer
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           	psect	text30
 10775  004D1A                     __ptext30:
 10776                           	opt stack 0
 10777  004D1A                     _getRTC:
 10778                           	opt stack 18
 10779                           
 10780                           ;RTC.c: 48: I2C_Master_Start();
 10781                           
 10782                           ;incstack = 0
 10783  004D1A  EC15  F02E         	call	_I2C_Master_Start	;wreg free
 10784                           
 10785                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10786  004D1E  0E00               	movlw	0
 10787  004D20  0100               	movlb	0	; () banked
 10788  004D22  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10789  004D24  0ED0               	movlw	208
 10790  004D26  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10791  004D28  EC03  F02E         	call	_I2C_Master_Write	;wreg free
 10792                           
 10793                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10794  004D2C  0E00               	movlw	0
 10795  004D2E  0100               	movlb	0	; () banked
 10796  004D30  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10797  004D32  0E00               	movlw	0
 10798  004D34  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10799  004D36  EC03  F02E         	call	_I2C_Master_Write	;wreg free
 10800                           
 10801                           ;RTC.c: 51: I2C_Master_Stop();
 10802  004D3A  EC11  F02E         	call	_I2C_Master_Stop	;wreg free
 10803                           
 10804                           ;RTC.c: 54: I2C_Master_Start();
 10805  004D3E  EC15  F02E         	call	_I2C_Master_Start	;wreg free
 10806                           
 10807                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10808  004D42  0E00               	movlw	0
 10809  004D44  0100               	movlb	0	; () banked
 10810  004D46  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10811  004D48  0ED1               	movlw	209
 10812  004D4A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10813  004D4C  EC03  F02E         	call	_I2C_Master_Write	;wreg free
 10814                           
 10815                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10816  004D50  0E00               	movlw	0
 10817  004D52  0100               	movlb	0	; () banked
 10818  004D54  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10819  004D56  0E00               	movlw	0
 10820  004D58  6F83               	movwf	getRTC@i& (0+255),b
 10821  004D5A                     l6846:
 10822                           
 10823                           ; BSR set to: 0
 10824  004D5A  0100               	movlb	0	; () banked
 10825  004D5C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10826  004D5E  D008               	goto	l6850
 10827  004D60  0100               	movlb	0	; () banked
 10828  004D62  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10829  004D64  E115               	bnz	l6856
 10830  004D66  0E06               	movlw	6
 10831  004D68  0100               	movlb	0	; () banked
 10832  004D6A  5D83               	subwf	getRTC@i& (0+255),w,b
 10833  004D6C  B0D8               	btfsc	status,0,c
 10834  004D6E  D010               	goto	l6856
 10835  004D70                     l6850:
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10839  004D70  0E1C               	movlw	low _time
 10840  004D72  0100               	movlb	0	; () banked
 10841  004D74  2583               	addwf	getRTC@i& (0+255),w,b
 10842  004D76  6ED9               	movwf	fsr2l,c
 10843  004D78  0E01               	movlw	high _time
 10844  004D7A  0100               	movlb	0	; () banked
 10845  004D7C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10846  004D7E  6EDA               	movwf	fsr2h,c
 10847  004D80  0E01               	movlw	1
 10848  004D82  EC96  F02C         	call	_I2C_Master_Read
 10849  004D86  6EDF               	movwf	indf2,c
 10850  004D88  0100               	movlb	0	; () banked
 10851  004D8A  4B83               	infsnz	getRTC@i& (0+255),f,b
 10852  004D8C  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10853  004D8E  D7E5               	goto	l6846
 10854  004D90                     l6856:
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;RTC.c: 58: }
 10858                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10859  004D90  0E00               	movlw	0
 10860  004D92  EC96  F02C         	call	_I2C_Master_Read
 10861  004D96  0101               	movlb	1	; () banked
 10862  004D98  6F22               	movwf	(_time+6)& (0+255),b
 10863                           
 10864                           ;RTC.c: 60: I2C_Master_Stop();
 10865  004D9A  EC11  F02E         	call	_I2C_Master_Stop	;wreg free
 10866  004D9E  0012               	return		;funcret
 10867  004DA0                     __end_of_getRTC:
 10868                           	opt stack 0
 10869                           tblptru	equ	0xFF8
 10870                           tblptrh	equ	0xFF7
 10871                           tblptrl	equ	0xFF6
 10872                           tablat	equ	0xFF5
 10873                           prodh	equ	0xFF4
 10874                           prodl	equ	0xFF3
 10875                           intcon	equ	0xFF2
 10876                           intcon2	equ	0xFF1
 10877                           intcon3	equ	0xFF0
 10878                           postinc0	equ	0xFEE
 10879                           wreg	equ	0xFE8
 10880                           postdec1	equ	0xFE5
 10881                           fsr1l	equ	0xFE1
 10882                           indf2	equ	0xFDF
 10883                           postinc2	equ	0xFDE
 10884                           postdec2	equ	0xFDD
 10885                           fsr2h	equ	0xFDA
 10886                           fsr2l	equ	0xFD9
 10887                           status	equ	0xFD8
 10888                           
 10889 ;; *************** function _I2C_Master_Write *****************
 10890 ;; Defined at:
 10891 ;;		line 49 in file "I2C.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  d               2    1[BANK0 ] unsigned int 
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;		None
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  1    wreg      void 
 10898 ;; Registers used:
 10899 ;;		wreg, status,2, status,0, cstack
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;Total ram usage:        2 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:    8
 10912 ;; This function calls:
 10913 ;;		_I2C_Master_Wait
 10914 ;; This function is called by:
 10915 ;;		_loadRTC
 10916 ;;		_getRTC
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text31
 10921  005C06                     __ptext31:
 10922                           	opt stack 0
 10923  005C06                     _I2C_Master_Write:
 10924                           	opt stack 18
 10925                           
 10926                           ;I2C.c: 51: I2C_Master_Wait();
 10927                           
 10928                           ;incstack = 0
 10929  005C06  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 10930                           
 10931                           ;I2C.c: 52: SSPBUF = d;
 10932  005C0A  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10933  005C0E  0012               	return		;funcret
 10934  005C10                     __end_of_I2C_Master_Write:
 10935                           	opt stack 0
 10936                           tblptru	equ	0xFF8
 10937                           tblptrh	equ	0xFF7
 10938                           tblptrl	equ	0xFF6
 10939                           tablat	equ	0xFF5
 10940                           prodh	equ	0xFF4
 10941                           prodl	equ	0xFF3
 10942                           intcon	equ	0xFF2
 10943                           intcon2	equ	0xFF1
 10944                           intcon3	equ	0xFF0
 10945                           postinc0	equ	0xFEE
 10946                           wreg	equ	0xFE8
 10947                           postdec1	equ	0xFE5
 10948                           fsr1l	equ	0xFE1
 10949                           indf2	equ	0xFDF
 10950                           postinc2	equ	0xFDE
 10951                           postdec2	equ	0xFDD
 10952                           fsr2h	equ	0xFDA
 10953                           fsr2l	equ	0xFD9
 10954                           status	equ	0xFD8
 10955                           
 10956 ;; *************** function _I2C_Master_Stop *****************
 10957 ;; Defined at:
 10958 ;;		line 43 in file "I2C.c"
 10959 ;; Parameters:    Size  Location     Type
 10960 ;;		None
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;		None
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  1    wreg      void 
 10965 ;; Registers used:
 10966 ;;		wreg, status,2, status,0, cstack
 10967 ;; Tracked objects:
 10968 ;;		On entry : 0/0
 10969 ;;		On exit  : 0/0
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;Total ram usage:        0 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    8
 10979 ;; This function calls:
 10980 ;;		_I2C_Master_Wait
 10981 ;; This function is called by:
 10982 ;;		_loadRTC
 10983 ;;		_getRTC
 10984 ;; This function uses a non-reentrant model
 10985 ;;
 10986                           
 10987                           	psect	text32
 10988  005C22                     __ptext32:
 10989                           	opt stack 0
 10990  005C22                     _I2C_Master_Stop:
 10991                           	opt stack 18
 10992                           
 10993                           ;I2C.c: 45: I2C_Master_Wait();
 10994                           
 10995                           ;incstack = 0
 10996  005C22  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 10997                           
 10998                           ;I2C.c: 46: PEN = 1;
 10999  005C26  84C5               	bsf	4037,2,c	;volatile
 11000  005C28  0012               	return		;funcret
 11001  005C2A                     __end_of_I2C_Master_Stop:
 11002                           	opt stack 0
 11003                           tblptru	equ	0xFF8
 11004                           tblptrh	equ	0xFF7
 11005                           tblptrl	equ	0xFF6
 11006                           tablat	equ	0xFF5
 11007                           prodh	equ	0xFF4
 11008                           prodl	equ	0xFF3
 11009                           intcon	equ	0xFF2
 11010                           intcon2	equ	0xFF1
 11011                           intcon3	equ	0xFF0
 11012                           postinc0	equ	0xFEE
 11013                           wreg	equ	0xFE8
 11014                           postdec1	equ	0xFE5
 11015                           fsr1l	equ	0xFE1
 11016                           indf2	equ	0xFDF
 11017                           postinc2	equ	0xFDE
 11018                           postdec2	equ	0xFDD
 11019                           fsr2h	equ	0xFDA
 11020                           fsr2l	equ	0xFD9
 11021                           status	equ	0xFD8
 11022                           
 11023 ;; *************** function _I2C_Master_Start *****************
 11024 ;; Defined at:
 11025 ;;		line 31 in file "I2C.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;		None
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;		None
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      void 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0, cstack
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;Total ram usage:        0 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    8
 11046 ;; This function calls:
 11047 ;;		_I2C_Master_Wait
 11048 ;; This function is called by:
 11049 ;;		_loadRTC
 11050 ;;		_getRTC
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           	psect	text33
 11055  005C2A                     __ptext33:
 11056                           	opt stack 0
 11057  005C2A                     _I2C_Master_Start:
 11058                           	opt stack 18
 11059                           
 11060                           ;I2C.c: 33: I2C_Master_Wait();
 11061                           
 11062                           ;incstack = 0
 11063  005C2A  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11064                           
 11065                           ;I2C.c: 34: SEN = 1;
 11066  005C2E  80C5               	bsf	4037,0,c	;volatile
 11067  005C30  0012               	return		;funcret
 11068  005C32                     __end_of_I2C_Master_Start:
 11069                           	opt stack 0
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           intcon2	equ	0xFF1
 11078                           intcon3	equ	0xFF0
 11079                           postinc0	equ	0xFEE
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           fsr1l	equ	0xFE1
 11083                           indf2	equ	0xFDF
 11084                           postinc2	equ	0xFDE
 11085                           postdec2	equ	0xFDD
 11086                           fsr2h	equ	0xFDA
 11087                           fsr2l	equ	0xFD9
 11088                           status	equ	0xFD8
 11089                           
 11090 ;; *************** function _I2C_Master_Read *****************
 11091 ;; Defined at:
 11092 ;;		line 55 in file "I2C.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;  a               1    wreg     unsigned char 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  a               1    1[BANK0 ] unsigned char 
 11097 ;;  temp            1    2[BANK0 ] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  1    wreg      unsigned char 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0, cstack
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;Total ram usage:        2 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    8
 11114 ;; This function calls:
 11115 ;;		_I2C_Master_Wait
 11116 ;; This function is called by:
 11117 ;;		_getRTC
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           	psect	text34
 11122  00592C                     __ptext34:
 11123                           	opt stack 0
 11124  00592C                     _I2C_Master_Read:
 11125                           	opt stack 18
 11126                           
 11127                           ;incstack = 0
 11128                           ;I2C_Master_Read@a stored from wreg
 11129  00592C  0100               	movlb	0	; () banked
 11130  00592E  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11131                           
 11132                           ;I2C.c: 57: unsigned char temp;
 11133                           ;I2C.c: 58: I2C_Master_Wait();
 11134  005930  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11135                           
 11136                           ;I2C.c: 59: RCEN = 1;
 11137  005934  86C5               	bsf	4037,3,c	;volatile
 11138                           
 11139                           ;I2C.c: 60: I2C_Master_Wait();
 11140  005936  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11141                           
 11142                           ;I2C.c: 61: temp = SSPBUF;
 11143  00593A  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11144                           
 11145                           ;I2C.c: 62: I2C_Master_Wait();
 11146  00593E  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11147                           
 11148                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11149  005942  0100               	movlb	0	; () banked
 11150  005944  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11151  005946  0100               	movlb	0	; () banked
 11152  005948  A4D8               	btfss	status,2,c
 11153  00594A  D002               	goto	u4940
 11154  00594C  8AC5               	bsf	4037,5,c	;volatile
 11155  00594E  D001               	goto	l6534
 11156  005950                     u4940:
 11157  005950  9AC5               	bcf	4037,5,c	;volatile
 11158  005952                     l6534:
 11159                           
 11160                           ;I2C.c: 64: ACKEN = 1;
 11161  005952  88C5               	bsf	4037,4,c	;volatile
 11162                           
 11163                           ;I2C.c: 65: return temp;
 11164  005954  0100               	movlb	0	; () banked
 11165  005956  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11166  005958  0012               	return	
 11167  00595A                     __end_of_I2C_Master_Read:
 11168                           	opt stack 0
 11169                           tblptru	equ	0xFF8
 11170                           tblptrh	equ	0xFF7
 11171                           tblptrl	equ	0xFF6
 11172                           tablat	equ	0xFF5
 11173                           prodh	equ	0xFF4
 11174                           prodl	equ	0xFF3
 11175                           intcon	equ	0xFF2
 11176                           intcon2	equ	0xFF1
 11177                           intcon3	equ	0xFF0
 11178                           postinc0	equ	0xFEE
 11179                           wreg	equ	0xFE8
 11180                           postdec1	equ	0xFE5
 11181                           fsr1l	equ	0xFE1
 11182                           indf2	equ	0xFDF
 11183                           postinc2	equ	0xFDE
 11184                           postdec2	equ	0xFDD
 11185                           fsr2h	equ	0xFDA
 11186                           fsr2l	equ	0xFD9
 11187                           status	equ	0xFD8
 11188                           
 11189 ;; *************** function _I2C_Master_Wait *****************
 11190 ;; Defined at:
 11191 ;;		line 26 in file "I2C.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;		None
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;		None
 11196 ;; Return value:  Size  Location     Type
 11197 ;;                  1    wreg      void 
 11198 ;; Registers used:
 11199 ;;		wreg, status,2, status,0
 11200 ;; Tracked objects:
 11201 ;;		On entry : 0/0
 11202 ;;		On exit  : 0/0
 11203 ;;		Unchanged: 0/0
 11204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;Total ram usage:        1 bytes
 11210 ;; Hardware stack levels used:    1
 11211 ;; Hardware stack levels required when called:    7
 11212 ;; This function calls:
 11213 ;;		Nothing
 11214 ;; This function is called by:
 11215 ;;		_I2C_Master_Start
 11216 ;;		_I2C_Master_Stop
 11217 ;;		_I2C_Master_Write
 11218 ;;		_I2C_Master_Read
 11219 ;;		_I2C_Master_RepeatedStart
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           	psect	text35
 11224  005BA8                     __ptext35:
 11225                           	opt stack 0
 11226  005BA8                     _I2C_Master_Wait:
 11227                           	opt stack 18
 11228  005BA8                     l71:
 11229  005BA8  B4C7               	btfsc	4039,2,c	;volatile
 11230  005BAA  D7FE               	goto	l71
 11231  005BAC  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11232  005BB0  0E1F               	movlw	31
 11233  005BB2  0100               	movlb	0	; () banked
 11234  005BB4  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11235  005BB6  B4D8               	btfsc	status,2,c
 11236  005BB8  0012               	return	
 11237  005BBA  D7F6               	goto	l71
 11238  005BBC                     __end_of_I2C_Master_Wait:
 11239                           	opt stack 0
 11240                           tblptru	equ	0xFF8
 11241                           tblptrh	equ	0xFF7
 11242                           tblptrl	equ	0xFF6
 11243                           tablat	equ	0xFF5
 11244                           prodh	equ	0xFF4
 11245                           prodl	equ	0xFF3
 11246                           intcon	equ	0xFF2
 11247                           intcon2	equ	0xFF1
 11248                           intcon3	equ	0xFF0
 11249                           postinc0	equ	0xFEE
 11250                           wreg	equ	0xFE8
 11251                           postdec1	equ	0xFE5
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           fsr2h	equ	0xFDA
 11257                           fsr2l	equ	0xFD9
 11258                           status	equ	0xFD8
 11259                           
 11260 ;; *************** function _change_state_to_menu_22 *****************
 11261 ;; Defined at:
 11262 ;;		line 501 in file "UI.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;		None
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;		None
 11267 ;; Return value:  Size  Location     Type
 11268 ;;                  1    wreg      void 
 11269 ;; Registers used:
 11270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/0
 11273 ;;		On exit  : 0/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;Total ram usage:        0 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:   10
 11283 ;; This function calls:
 11284 ;;		_lcdInst
 11285 ;;		_printf
 11286 ;; This function is called by:
 11287 ;;		_UI
 11288 ;; This function uses a non-reentrant model
 11289 ;;
 11290                           
 11291                           	psect	text36
 11292  00560C                     __ptext36:
 11293                           	opt stack 0
 11294  00560C                     _change_state_to_menu_22:
 11295                           	opt stack 19
 11296                           
 11297                           ;UI.c: 502: cur_state = 22;
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;incstack = 0
 11301  00560C  0E00               	movlw	0
 11302  00560E  0100               	movlb	0	; () banked
 11303  005610  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11304  005612  0E16               	movlw	22
 11305  005614  6FE6               	movwf	_cur_state& (0+255),b
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;UI.c: 504: lcdInst(0b10000000);;
 11309  005616  0E80               	movlw	128
 11310  005618  ECEF  F02D         	call	_lcdInst
 11311                           
 11312                           ;UI.c: 505: printf("2. SORT        <");
 11313  00561C  0EB7               	movlw	low STR_34
 11314  00561E  0100               	movlb	0	; () banked
 11315  005620  6F8E               	movwf	printf@f& (0+255),b
 11316  005622  0EFD               	movlw	high STR_34
 11317  005624  0100               	movlb	0	; () banked
 11318  005626  6F8F               	movwf	(printf@f+1)& (0+255),b
 11319  005628  ECED  F00D         	call	_printf	;wreg free
 11320                           
 11321                           ;UI.c: 506: lcdInst(0b11000000);;
 11322  00562C  0EC0               	movlw	192
 11323  00562E  ECEF  F02D         	call	_lcdInst
 11324                           
 11325                           ;UI.c: 507: printf("3. LOGS         ");
 11326  005632  0EFC               	movlw	low STR_36
 11327  005634  0100               	movlb	0	; () banked
 11328  005636  6F8E               	movwf	printf@f& (0+255),b
 11329  005638  0EFC               	movlw	high STR_36
 11330  00563A  0100               	movlb	0	; () banked
 11331  00563C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11332  00563E  ECED  F00D         	call	_printf	;wreg free
 11333  005642  0012               	return		;funcret
 11334  005644                     __end_of_change_state_to_menu_22:
 11335                           	opt stack 0
 11336                           tblptru	equ	0xFF8
 11337                           tblptrh	equ	0xFF7
 11338                           tblptrl	equ	0xFF6
 11339                           tablat	equ	0xFF5
 11340                           prodh	equ	0xFF4
 11341                           prodl	equ	0xFF3
 11342                           intcon	equ	0xFF2
 11343                           intcon2	equ	0xFF1
 11344                           intcon3	equ	0xFF0
 11345                           postinc0	equ	0xFEE
 11346                           wreg	equ	0xFE8
 11347                           postdec1	equ	0xFE5
 11348                           fsr1l	equ	0xFE1
 11349                           indf2	equ	0xFDF
 11350                           postinc2	equ	0xFDE
 11351                           postdec2	equ	0xFDD
 11352                           fsr2h	equ	0xFDA
 11353                           fsr2l	equ	0xFD9
 11354                           status	equ	0xFD8
 11355                           
 11356 ;; *************** function _change_state_to_menu_12 *****************
 11357 ;; Defined at:
 11358 ;;		line 493 in file "UI.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;		None
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      void 
 11365 ;; Registers used:
 11366 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;Total ram usage:        0 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:   10
 11379 ;; This function calls:
 11380 ;;		_lcdInst
 11381 ;;		_printf
 11382 ;; This function is called by:
 11383 ;;		_UI
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           	psect	text37
 11388  005644                     __ptext37:
 11389                           	opt stack 0
 11390  005644                     _change_state_to_menu_12:
 11391                           	opt stack 19
 11392                           
 11393                           ;UI.c: 494: cur_state = 12;
 11394                           
 11395                           ;incstack = 0
 11396  005644  0E00               	movlw	0
 11397  005646  0100               	movlb	0	; () banked
 11398  005648  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11399  00564A  0E0C               	movlw	12
 11400  00564C  6FE6               	movwf	_cur_state& (0+255),b
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;UI.c: 496: lcdInst(0b10000000);;
 11404  00564E  0E80               	movlw	128
 11405  005650  ECEF  F02D         	call	_lcdInst
 11406                           
 11407                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11408  005654  0E1E               	movlw	low STR_33
 11409  005656  0100               	movlb	0	; () banked
 11410  005658  6F8E               	movwf	printf@f& (0+255),b
 11411  00565A  0EFD               	movlw	high STR_33
 11412  00565C  0100               	movlb	0	; () banked
 11413  00565E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11414  005660  ECED  F00D         	call	_printf	;wreg free
 11415                           
 11416                           ;UI.c: 498: lcdInst(0b11000000);;
 11417  005664  0EC0               	movlw	192
 11418  005666  ECEF  F02D         	call	_lcdInst
 11419                           
 11420                           ;UI.c: 499: printf("2. SORT        <");
 11421  00566A  0EB7               	movlw	low STR_34
 11422  00566C  0100               	movlb	0	; () banked
 11423  00566E  6F8E               	movwf	printf@f& (0+255),b
 11424  005670  0EFD               	movlw	high STR_34
 11425  005672  0100               	movlb	0	; () banked
 11426  005674  6F8F               	movwf	(printf@f+1)& (0+255),b
 11427  005676  ECED  F00D         	call	_printf	;wreg free
 11428  00567A  0012               	return		;funcret
 11429  00567C                     __end_of_change_state_to_menu_12:
 11430                           	opt stack 0
 11431                           tblptru	equ	0xFF8
 11432                           tblptrh	equ	0xFF7
 11433                           tblptrl	equ	0xFF6
 11434                           tablat	equ	0xFF5
 11435                           prodh	equ	0xFF4
 11436                           prodl	equ	0xFF3
 11437                           intcon	equ	0xFF2
 11438                           intcon2	equ	0xFF1
 11439                           intcon3	equ	0xFF0
 11440                           postinc0	equ	0xFEE
 11441                           wreg	equ	0xFE8
 11442                           postdec1	equ	0xFE5
 11443                           fsr1l	equ	0xFE1
 11444                           indf2	equ	0xFDF
 11445                           postinc2	equ	0xFDE
 11446                           postdec2	equ	0xFDD
 11447                           fsr2h	equ	0xFDA
 11448                           fsr2l	equ	0xFD9
 11449                           status	equ	0xFD8
 11450                           
 11451 ;; *************** function ___awmod *****************
 11452 ;; Defined at:
 11453 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11454 ;; Parameters:    Size  Location     Type
 11455 ;;  dividend        2    0[BANK0 ] int 
 11456 ;;  divisor         2    2[BANK0 ] int 
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  sign            1    5[BANK0 ] unsigned char 
 11459 ;;  counter         1    4[BANK0 ] unsigned char 
 11460 ;; Return value:  Size  Location     Type
 11461 ;;                  2    0[BANK0 ] int 
 11462 ;; Registers used:
 11463 ;;		wreg, status,2, status,0
 11464 ;; Tracked objects:
 11465 ;;		On entry : 0/0
 11466 ;;		On exit  : 0/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11469 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;Total ram usage:        6 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    7
 11476 ;; This function calls:
 11477 ;;		Nothing
 11478 ;; This function is called by:
 11479 ;;		_UI
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           	psect	text38
 11484  004BEC                     __ptext38:
 11485                           	opt stack 0
 11486  004BEC                     ___awmod:
 11487                           	opt stack 22
 11488                           
 11489                           ;incstack = 0
 11490  004BEC  0E00               	movlw	0
 11491  004BEE  0100               	movlb	0	; () banked
 11492  004BF0  6F85               	movwf	___awmod@sign& (0+255),b
 11493                           
 11494                           ; BSR set to: 0
 11495  004BF2  0100               	movlb	0	; () banked
 11496  004BF4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11497  004BF6  D008               	goto	l9178
 11498                           
 11499                           ; BSR set to: 0
 11500  004BF8  0100               	movlb	0	; () banked
 11501  004BFA  6D80               	negf	___awmod@dividend& (0+255),b
 11502  004BFC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11503  004BFE  B0D8               	btfsc	status,0,c
 11504  004C00  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11505                           
 11506                           ; BSR set to: 0
 11507  004C02  0E01               	movlw	1
 11508  004C04  0100               	movlb	0	; () banked
 11509  004C06  6F85               	movwf	___awmod@sign& (0+255),b
 11510  004C08                     l9178:
 11511                           
 11512                           ; BSR set to: 0
 11513  004C08  0100               	movlb	0	; () banked
 11514  004C0A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11515  004C0C  D005               	goto	l9182
 11516                           
 11517                           ; BSR set to: 0
 11518  004C0E  0100               	movlb	0	; () banked
 11519  004C10  6D82               	negf	___awmod@divisor& (0+255),b
 11520  004C12  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11521  004C14  B0D8               	btfsc	status,0,c
 11522  004C16  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11523  004C18                     l9182:
 11524                           
 11525                           ; BSR set to: 0
 11526  004C18  0100               	movlb	0	; () banked
 11527  004C1A  5182               	movf	___awmod@divisor& (0+255),w,b
 11528  004C1C  0100               	movlb	0	; () banked
 11529  004C1E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11530  004C20  B4D8               	btfsc	status,2,c
 11531  004C22  D026               	goto	l9198
 11532                           
 11533                           ; BSR set to: 0
 11534  004C24  0E01               	movlw	1
 11535  004C26  0100               	movlb	0	; () banked
 11536  004C28  6F84               	movwf	___awmod@counter& (0+255),b
 11537  004C2A  D006               	goto	l9188
 11538  004C2C                     l9186:
 11539                           
 11540                           ; BSR set to: 0
 11541  004C2C  0100               	movlb	0	; () banked
 11542  004C2E  90D8               	bcf	status,0,c
 11543  004C30  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11544  004C32  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11545  004C34  0100               	movlb	0	; () banked
 11546  004C36  2B84               	incf	___awmod@counter& (0+255),f,b
 11547  004C38                     l9188:
 11548                           
 11549                           ; BSR set to: 0
 11550  004C38  0100               	movlb	0	; () banked
 11551  004C3A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11552  004C3C  D7F7               	goto	l9186
 11553  004C3E                     l9190:
 11554                           
 11555                           ; BSR set to: 0
 11556  004C3E  0100               	movlb	0	; () banked
 11557  004C40  5182               	movf	___awmod@divisor& (0+255),w,b
 11558  004C42  0100               	movlb	0	; () banked
 11559  004C44  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11560  004C46  0100               	movlb	0	; () banked
 11561  004C48  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11562  004C4A  0100               	movlb	0	; () banked
 11563  004C4C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11564  004C4E  A0D8               	btfss	status,0,c
 11565  004C50  D008               	goto	l9194
 11566                           
 11567                           ; BSR set to: 0
 11568  004C52  0100               	movlb	0	; () banked
 11569  004C54  5182               	movf	___awmod@divisor& (0+255),w,b
 11570  004C56  0100               	movlb	0	; () banked
 11571  004C58  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11572  004C5A  0100               	movlb	0	; () banked
 11573  004C5C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11574  004C5E  0100               	movlb	0	; () banked
 11575  004C60  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11576  004C62                     l9194:
 11577                           
 11578                           ; BSR set to: 0
 11579  004C62  0100               	movlb	0	; () banked
 11580  004C64  90D8               	bcf	status,0,c
 11581  004C66  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11582  004C68  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11583                           
 11584                           ; BSR set to: 0
 11585  004C6A  0100               	movlb	0	; () banked
 11586  004C6C  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11587  004C6E  D7E7               	goto	l9190
 11588  004C70                     l9198:
 11589                           
 11590                           ; BSR set to: 0
 11591  004C70  0100               	movlb	0	; () banked
 11592  004C72  5185               	movf	___awmod@sign& (0+255),w,b
 11593  004C74  0100               	movlb	0	; () banked
 11594  004C76  B4D8               	btfsc	status,2,c
 11595  004C78  D005               	goto	l9202
 11596                           
 11597                           ; BSR set to: 0
 11598  004C7A  0100               	movlb	0	; () banked
 11599  004C7C  6D80               	negf	___awmod@dividend& (0+255),b
 11600  004C7E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11601  004C80  B0D8               	btfsc	status,0,c
 11602  004C82  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11603  004C84                     l9202:
 11604                           
 11605                           ; BSR set to: 0
 11606  004C84  C080  F080         	movff	___awmod@dividend,?___awmod
 11607  004C88  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11608  004C8C  0012               	return	
 11609  004C8E                     __end_of___awmod:
 11610                           	opt stack 0
 11611                           tblptru	equ	0xFF8
 11612                           tblptrh	equ	0xFF7
 11613                           tblptrl	equ	0xFF6
 11614                           tablat	equ	0xFF5
 11615                           prodh	equ	0xFF4
 11616                           prodl	equ	0xFF3
 11617                           intcon	equ	0xFF2
 11618                           intcon2	equ	0xFF1
 11619                           intcon3	equ	0xFF0
 11620                           postinc0	equ	0xFEE
 11621                           wreg	equ	0xFE8
 11622                           postdec1	equ	0xFE5
 11623                           fsr1l	equ	0xFE1
 11624                           indf2	equ	0xFDF
 11625                           postinc2	equ	0xFDE
 11626                           postdec2	equ	0xFDD
 11627                           fsr2h	equ	0xFDA
 11628                           fsr2l	equ	0xFD9
 11629                           status	equ	0xFD8
 11630                           
 11631 ;; *************** function ___awdiv *****************
 11632 ;; Defined at:
 11633 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;  dividend        2    6[BANK0 ] int 
 11636 ;;  divisor         2    8[BANK0 ] int 
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;  quotient        2   12[BANK0 ] int 
 11639 ;;  sign            1   11[BANK0 ] unsigned char 
 11640 ;;  counter         1   10[BANK0 ] unsigned char 
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  2    6[BANK0 ] int 
 11643 ;; Registers used:
 11644 ;;		wreg, status,2, status,0
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11650 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;Total ram usage:        8 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    7
 11657 ;; This function calls:
 11658 ;;		Nothing
 11659 ;; This function is called by:
 11660 ;;		_UI
 11661 ;;		_ID
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           	psect	text39
 11666  0049C8                     __ptext39:
 11667                           	opt stack 0
 11668  0049C8                     ___awdiv:
 11669                           	opt stack 21
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;incstack = 0
 11673  0049C8  0E00               	movlw	0
 11674  0049CA  0100               	movlb	0	; () banked
 11675  0049CC  6F8B               	movwf	___awdiv@sign& (0+255),b
 11676                           
 11677                           ; BSR set to: 0
 11678  0049CE  0100               	movlb	0	; () banked
 11679  0049D0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11680  0049D2  D008               	goto	l7462
 11681                           
 11682                           ; BSR set to: 0
 11683  0049D4  0100               	movlb	0	; () banked
 11684  0049D6  6D88               	negf	___awdiv@divisor& (0+255),b
 11685  0049D8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11686  0049DA  B0D8               	btfsc	status,0,c
 11687  0049DC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11688                           
 11689                           ; BSR set to: 0
 11690  0049DE  0E01               	movlw	1
 11691  0049E0  0100               	movlb	0	; () banked
 11692  0049E2  6F8B               	movwf	___awdiv@sign& (0+255),b
 11693  0049E4                     l7462:
 11694                           
 11695                           ; BSR set to: 0
 11696  0049E4  0100               	movlb	0	; () banked
 11697  0049E6  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11698  0049E8  D008               	goto	l7468
 11699                           
 11700                           ; BSR set to: 0
 11701  0049EA  0100               	movlb	0	; () banked
 11702  0049EC  6D86               	negf	___awdiv@dividend& (0+255),b
 11703  0049EE  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11704  0049F0  B0D8               	btfsc	status,0,c
 11705  0049F2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11706                           
 11707                           ; BSR set to: 0
 11708  0049F4  0E01               	movlw	1
 11709  0049F6  0100               	movlb	0	; () banked
 11710  0049F8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11711  0049FA                     l7468:
 11712                           
 11713                           ; BSR set to: 0
 11714  0049FA  0E00               	movlw	0
 11715  0049FC  0100               	movlb	0	; () banked
 11716  0049FE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11717  004A00  0E00               	movlw	0
 11718  004A02  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11719                           
 11720                           ; BSR set to: 0
 11721  004A04  0100               	movlb	0	; () banked
 11722  004A06  5188               	movf	___awdiv@divisor& (0+255),w,b
 11723  004A08  0100               	movlb	0	; () banked
 11724  004A0A  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11725  004A0C  B4D8               	btfsc	status,2,c
 11726  004A0E  D02C               	goto	l7490
 11727                           
 11728                           ; BSR set to: 0
 11729  004A10  0E01               	movlw	1
 11730  004A12  0100               	movlb	0	; () banked
 11731  004A14  6F8A               	movwf	___awdiv@counter& (0+255),b
 11732  004A16  D006               	goto	l7476
 11733  004A18                     l7474:
 11734                           
 11735                           ; BSR set to: 0
 11736  004A18  0100               	movlb	0	; () banked
 11737  004A1A  90D8               	bcf	status,0,c
 11738  004A1C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11739  004A1E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11740  004A20  0100               	movlb	0	; () banked
 11741  004A22  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11742  004A24                     l7476:
 11743                           
 11744                           ; BSR set to: 0
 11745  004A24  0100               	movlb	0	; () banked
 11746  004A26  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11747  004A28  D7F7               	goto	l7474
 11748  004A2A                     l7478:
 11749                           
 11750                           ; BSR set to: 0
 11751  004A2A  0100               	movlb	0	; () banked
 11752  004A2C  90D8               	bcf	status,0,c
 11753  004A2E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11754  004A30  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11755                           
 11756                           ; BSR set to: 0
 11757  004A32  0100               	movlb	0	; () banked
 11758  004A34  5188               	movf	___awdiv@divisor& (0+255),w,b
 11759  004A36  0100               	movlb	0	; () banked
 11760  004A38  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11761  004A3A  0100               	movlb	0	; () banked
 11762  004A3C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11763  004A3E  0100               	movlb	0	; () banked
 11764  004A40  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11765  004A42  A0D8               	btfss	status,0,c
 11766  004A44  D00A               	goto	l7486
 11767                           
 11768                           ; BSR set to: 0
 11769  004A46  0100               	movlb	0	; () banked
 11770  004A48  5188               	movf	___awdiv@divisor& (0+255),w,b
 11771  004A4A  0100               	movlb	0	; () banked
 11772  004A4C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11773  004A4E  0100               	movlb	0	; () banked
 11774  004A50  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11775  004A52  0100               	movlb	0	; () banked
 11776  004A54  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11777                           
 11778                           ; BSR set to: 0
 11779  004A56  0100               	movlb	0	; () banked
 11780  004A58  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11781  004A5A                     l7486:
 11782                           
 11783                           ; BSR set to: 0
 11784  004A5A  0100               	movlb	0	; () banked
 11785  004A5C  90D8               	bcf	status,0,c
 11786  004A5E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11787  004A60  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11788                           
 11789                           ; BSR set to: 0
 11790  004A62  0100               	movlb	0	; () banked
 11791  004A64  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11792  004A66  D7E1               	goto	l7478
 11793  004A68                     l7490:
 11794                           
 11795                           ; BSR set to: 0
 11796  004A68  0100               	movlb	0	; () banked
 11797  004A6A  518B               	movf	___awdiv@sign& (0+255),w,b
 11798  004A6C  0100               	movlb	0	; () banked
 11799  004A6E  B4D8               	btfsc	status,2,c
 11800  004A70  D005               	goto	l7494
 11801                           
 11802                           ; BSR set to: 0
 11803  004A72  0100               	movlb	0	; () banked
 11804  004A74  6D8C               	negf	___awdiv@quotient& (0+255),b
 11805  004A76  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11806  004A78  B0D8               	btfsc	status,0,c
 11807  004A7A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11808  004A7C                     l7494:
 11809                           
 11810                           ; BSR set to: 0
 11811  004A7C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11812  004A80  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11813  004A84  0012               	return	
 11814  004A86                     __end_of___awdiv:
 11815                           	opt stack 0
 11816                           tblptru	equ	0xFF8
 11817                           tblptrh	equ	0xFF7
 11818                           tblptrl	equ	0xFF6
 11819                           tablat	equ	0xFF5
 11820                           prodh	equ	0xFF4
 11821                           prodl	equ	0xFF3
 11822                           intcon	equ	0xFF2
 11823                           intcon2	equ	0xFF1
 11824                           intcon3	equ	0xFF0
 11825                           postinc0	equ	0xFEE
 11826                           wreg	equ	0xFE8
 11827                           postdec1	equ	0xFE5
 11828                           fsr1l	equ	0xFE1
 11829                           indf2	equ	0xFDF
 11830                           postinc2	equ	0xFDE
 11831                           postdec2	equ	0xFDD
 11832                           fsr2h	equ	0xFDA
 11833                           fsr2l	equ	0xFD9
 11834                           status	equ	0xFD8
 11835                           
 11836 ;; *************** function _Test *****************
 11837 ;; Defined at:
 11838 ;;		line 31 in file "Test.c"
 11839 ;; Parameters:    Size  Location     Type
 11840 ;;		None
 11841 ;; Auto vars:     Size  Location     Type
 11842 ;;		None
 11843 ;; Return value:  Size  Location     Type
 11844 ;;                  1    wreg      void 
 11845 ;; Registers used:
 11846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11847 ;; Tracked objects:
 11848 ;;		On entry : 0/0
 11849 ;;		On exit  : 0/0
 11850 ;;		Unchanged: 0/0
 11851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;Total ram usage:        2 bytes
 11857 ;; Hardware stack levels used:    1
 11858 ;; Hardware stack levels required when called:   11
 11859 ;; This function calls:
 11860 ;;		_BlockerTest
 11861 ;;		_BothServos
 11862 ;;		_PlatformTest
 11863 ;;		_PortTestDC
 11864 ;;		_PortTestPusher
 11865 ;;		_SpeedTest
 11866 ;;		_actuatorTest
 11867 ;;		_algorithmTest
 11868 ;;		_arm
 11869 ;;		_lcdInst
 11870 ;;		_printf
 11871 ;;		_sensorTest
 11872 ;; This function is called by:
 11873 ;;		_main
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           	psect	text40
 11878  0042D4                     __ptext40:
 11879                           	opt stack 0
 11880  0042D4                     _Test:
 11881                           	opt stack 19
 11882                           
 11883                           ;Test.c: 33: while(machine_state == Testing_state){
 11884                           
 11885                           ; BSR set to: 0
 11886                           ;incstack = 0
 11887  0042D4  D07C               	goto	l9928
 11888  0042D6                     l9888:
 11889                           
 11890                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11891  0042D6  0E01               	movlw	1
 11892  0042D8  ECEF  F02D         	call	_lcdInst
 11893  0042DC  0E68               	movlw	104
 11894  0042DE  0100               	movlb	0	; () banked
 11895  0042E0  6FC6               	movwf	??_Test& (0+255),b
 11896  0042E2  0EE4               	movlw	228
 11897  0042E4                     u10427:
 11898  0042E4  2EE8               	decfsz	wreg,f,c
 11899  0042E6  D7FE               	bra	u10427
 11900  0042E8  2FC6               	decfsz	??_Test& (0+255),f,b
 11901  0042EA  D7FC               	bra	u10427
 11902  0042EC  F000               	nop	
 11903  0042EE  0E80               	movlw	128
 11904  0042F0  ECEF  F02D         	call	_lcdInst
 11905                           
 11906                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11907  0042F4  0E74               	movlw	low STR_69
 11908  0042F6  0100               	movlb	0	; () banked
 11909  0042F8  6F8E               	movwf	printf@f& (0+255),b
 11910  0042FA  0EFC               	movlw	high STR_69
 11911  0042FC  0100               	movlb	0	; () banked
 11912  0042FE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11913  004300  ECED  F00D         	call	_printf	;wreg free
 11914                           
 11915                           ;Test.c: 36: lcdInst(0b11000000);;
 11916  004304  0EC0               	movlw	192
 11917  004306  ECEF  F02D         	call	_lcdInst
 11918                           
 11919                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11920  00430A  0E85               	movlw	low STR_70
 11921  00430C  0100               	movlb	0	; () banked
 11922  00430E  6F8E               	movwf	printf@f& (0+255),b
 11923  004310  0EFC               	movlw	high STR_70
 11924  004312  0100               	movlb	0	; () banked
 11925  004314  6F8F               	movwf	(printf@f+1)& (0+255),b
 11926  004316  ECED  F00D         	call	_printf	;wreg free
 11927  00431A                     l1238:
 11928  00431A  A281               	btfss	3969,1,c	;volatile
 11929  00431C  D7FE               	goto	l1238
 11930                           
 11931                           ;Test.c: 39: var = PORTB >> 4;
 11932  00431E  CF81 F0C6          	movff	3969,??_Test	;volatile
 11933  004322  0100               	movlb	0	; () banked
 11934  004324  3BC6               	swapf	??_Test& (0+255),f,b
 11935  004326  0E0F               	movlw	15
 11936  004328  17C6               	andwf	??_Test& (0+255),f,b
 11937  00432A  0100               	movlb	0	; () banked
 11938  00432C  51C6               	movf	??_Test& (0+255),w,b
 11939  00432E  0101               	movlb	1	; () banked
 11940  004330  6F47               	movwf	_var& (0+255),b
 11941  004332  6B48               	clrf	(_var+1)& (0+255),b
 11942                           
 11943                           ; BSR set to: 1
 11944                           ;Test.c: 40: var++;
 11945  004334  0101               	movlb	1	; () banked
 11946  004336  4B47               	infsnz	_var& (0+255),f,b
 11947  004338  2B48               	incf	(_var+1)& (0+255),f,b
 11948  00433A                     l1241:
 11949  00433A  A281               	btfss	3969,1,c	;volatile
 11950  00433C  D01F               	goto	l9926
 11951  00433E  D7FD               	goto	l1241
 11952  004340                     l9904:
 11953                           
 11954                           ;Test.c: 44: algorithmTest();
 11955  004340  EC51  F023         	call	_algorithmTest	;wreg free
 11956                           
 11957                           ;Test.c: 45: break;
 11958  004344  D044               	goto	l9928
 11959  004346                     l9906:
 11960                           
 11961                           ;Test.c: 47: sensorTest();
 11962  004346  EC42  F015         	call	_sensorTest	;wreg free
 11963                           
 11964                           ;Test.c: 48: break;
 11965  00434A  D041               	goto	l9928
 11966  00434C                     l9908:
 11967                           
 11968                           ;Test.c: 50: actuatorTest();
 11969  00434C  EC6D  F004         	call	_actuatorTest	;wreg free
 11970                           
 11971                           ;Test.c: 51: break;
 11972  004350  D03E               	goto	l9928
 11973  004352                     l9910:
 11974                           
 11975                           ;Test.c: 53: arm();
 11976  004352  ECED  F021         	call	_arm	;wreg free
 11977                           
 11978                           ;Test.c: 54: break;
 11979  004356  D03B               	goto	l9928
 11980  004358                     l9912:
 11981                           
 11982                           ;Test.c: 56: PortTestDC();
 11983  004358  EC66  F029         	call	_PortTestDC	;wreg free
 11984                           
 11985                           ;Test.c: 57: break;
 11986  00435C  D038               	goto	l9928
 11987  00435E                     l9914:
 11988                           
 11989                           ;Test.c: 59: SpeedTest();
 11990  00435E  ECD0  F026         	call	_SpeedTest	;wreg free
 11991                           
 11992                           ;Test.c: 60: break;
 11993  004362  D035               	goto	l9928
 11994  004364                     l9916:
 11995                           
 11996                           ;Test.c: 62: PortTestPusher();
 11997  004364  EC38  F029         	call	_PortTestPusher	;wreg free
 11998                           
 11999                           ;Test.c: 63: break;
 12000  004368  D032               	goto	l9928
 12001  00436A                     l9918:
 12002                           
 12003                           ;Test.c: 65: PlatformTest();
 12004  00436A  ECB7  F013         	call	_PlatformTest	;wreg free
 12005                           
 12006                           ;Test.c: 66: break;
 12007  00436E  D02F               	goto	l9928
 12008  004370                     l9920:
 12009                           
 12010                           ;Test.c: 68: BothServos();
 12011  004370  EC09  F010         	call	_BothServos	;wreg free
 12012                           
 12013                           ;Test.c: 69: break;
 12014  004374  D02C               	goto	l9928
 12015  004376                     l9922:
 12016                           
 12017                           ;Test.c: 71: BlockerTest();
 12018  004376  ECCC  F01E         	call	_BlockerTest	;wreg free
 12019                           
 12020                           ;Test.c: 75: }
 12021                           
 12022                           ;Test.c: 74: break;
 12023                           
 12024                           ;Test.c: 73: default:
 12025                           
 12026                           ;Test.c: 72: break;
 12027  00437A  D029               	goto	l9928
 12028  00437C                     l9926:
 12029  00437C  C147  F0C6         	movff	_var,??_Test
 12030  004380  C148  F0C7         	movff	_var+1,??_Test+1
 12031                           
 12032                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12033                           ; Switch size 1, requested type "space"
 12034                           ; Number of cases is 1, Range of values is 0 to 0
 12035                           ; switch strategies available:
 12036                           ; Name         Instructions Cycles
 12037                           ; simple_byte            4     3 (average)
 12038                           ;	Chosen strategy is simple_byte
 12039  004384  0100               	movlb	0	; () banked
 12040  004386  51C7               	movf	(??_Test+1)& (0+255),w,b
 12041  004388  0A00               	xorlw	0	; case 0
 12042  00438A  A4D8               	btfss	status,2,c
 12043  00438C  D020               	goto	l9928
 12044                           
 12045                           ; BSR set to: 0
 12046                           ; Switch size 1, requested type "space"
 12047                           ; Number of cases is 10, Range of values is 1 to 11
 12048                           ; switch strategies available:
 12049                           ; Name         Instructions Cycles
 12050                           ; simple_byte           31    16 (average)
 12051                           ;	Chosen strategy is simple_byte
 12052  00438E  0100               	movlb	0	; () banked
 12053  004390  51C6               	movf	??_Test& (0+255),w,b
 12054  004392  0A01               	xorlw	1	; case 1
 12055  004394  B4D8               	btfsc	status,2,c
 12056  004396  D7D4               	goto	l9904
 12057  004398  0A03               	xorlw	3	; case 2
 12058  00439A  B4D8               	btfsc	status,2,c
 12059  00439C  D7D4               	goto	l9906
 12060  00439E  0A01               	xorlw	1	; case 3
 12061  0043A0  B4D8               	btfsc	status,2,c
 12062  0043A2  D7D4               	goto	l9908
 12063  0043A4  0A07               	xorlw	7	; case 4
 12064  0043A6  B4D8               	btfsc	status,2,c
 12065  0043A8  D7D4               	goto	l9910
 12066  0043AA  0A01               	xorlw	1	; case 5
 12067  0043AC  B4D8               	btfsc	status,2,c
 12068  0043AE  D7D4               	goto	l9912
 12069  0043B0  0A03               	xorlw	3	; case 6
 12070  0043B2  B4D8               	btfsc	status,2,c
 12071  0043B4  D7D4               	goto	l9914
 12072  0043B6  0A01               	xorlw	1	; case 7
 12073  0043B8  B4D8               	btfsc	status,2,c
 12074  0043BA  D7D4               	goto	l9916
 12075  0043BC  0A0F               	xorlw	15	; case 8
 12076  0043BE  B4D8               	btfsc	status,2,c
 12077  0043C0  D7D4               	goto	l9918
 12078  0043C2  0A02               	xorlw	2	; case 10
 12079  0043C4  B4D8               	btfsc	status,2,c
 12080  0043C6  D7D4               	goto	l9920
 12081  0043C8  0A01               	xorlw	1	; case 11
 12082  0043CA  B4D8               	btfsc	status,2,c
 12083  0043CC  D7D4               	goto	l9922
 12084  0043CE                     l9928:
 12085  0043CE  0E03               	movlw	3
 12086  0043D0  0100               	movlb	0	; () banked
 12087  0043D2  19FC               	xorwf	_machine_state& (0+255),w,b
 12088  0043D4  A4D8               	btfss	status,2,c
 12089  0043D6  0012               	return	
 12090  0043D8  D77E               	goto	l9888
 12091  0043DA                     __end_of_Test:
 12092                           	opt stack 0
 12093                           tblptru	equ	0xFF8
 12094                           tblptrh	equ	0xFF7
 12095                           tblptrl	equ	0xFF6
 12096                           tablat	equ	0xFF5
 12097                           prodh	equ	0xFF4
 12098                           prodl	equ	0xFF3
 12099                           intcon	equ	0xFF2
 12100                           intcon2	equ	0xFF1
 12101                           intcon3	equ	0xFF0
 12102                           postinc0	equ	0xFEE
 12103                           wreg	equ	0xFE8
 12104                           postdec1	equ	0xFE5
 12105                           fsr1l	equ	0xFE1
 12106                           indf2	equ	0xFDF
 12107                           postinc2	equ	0xFDE
 12108                           postdec2	equ	0xFDD
 12109                           fsr2h	equ	0xFDA
 12110                           fsr2l	equ	0xFD9
 12111                           status	equ	0xFD8
 12112                           
 12113 ;; *************** function _sensorTest *****************
 12114 ;; Defined at:
 12115 ;;		line 123 in file "Test.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;		None
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;  res             2   45[BANK0 ] int 
 12120 ;; Return value:  Size  Location     Type
 12121 ;;                  1    wreg      void 
 12122 ;; Registers used:
 12123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12133 ;;Total ram usage:        4 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:   10
 12136 ;; This function calls:
 12137 ;;		_lcdInst
 12138 ;;		_printf
 12139 ;;		_readADC
 12140 ;;		_readMAG
 12141 ;; This function is called by:
 12142 ;;		_Test
 12143 ;; This function uses a non-reentrant model
 12144 ;;
 12145                           
 12146                           	psect	text41
 12147  002A84                     __ptext41:
 12148                           	opt stack 0
 12149  002A84                     _sensorTest:
 12150                           	opt stack 19
 12151                           
 12152                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;incstack = 0
 12156  002A84  0E01               	movlw	1
 12157  002A86  ECEF  F02D         	call	_lcdInst
 12158  002A8A  0E68               	movlw	104
 12159  002A8C  0100               	movlb	0	; () banked
 12160  002A8E  6FAB               	movwf	??_sensorTest& (0+255),b
 12161  002A90  0EE4               	movlw	228
 12162  002A92                     u10437:
 12163  002A92  2EE8               	decfsz	wreg,f,c
 12164  002A94  D7FE               	bra	u10437
 12165  002A96  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12166  002A98  D7FC               	bra	u10437
 12167  002A9A  F000               	nop	
 12168  002A9C  0E80               	movlw	128
 12169  002A9E  ECEF  F02D         	call	_lcdInst
 12170                           
 12171                           ;Test.c: 126: printf("SENSORS");
 12172  002AA2  0EAD               	movlw	low STR_78
 12173  002AA4  0100               	movlb	0	; () banked
 12174  002AA6  6F8E               	movwf	printf@f& (0+255),b
 12175  002AA8  0EFF               	movlw	high STR_78
 12176  002AAA  0100               	movlb	0	; () banked
 12177  002AAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12178  002AAE  ECED  F00D         	call	_printf	;wreg free
 12179                           
 12180                           ;Test.c: 127: lcdInst(0b11000000);;
 12181  002AB2  0EC0               	movlw	192
 12182  002AB4  ECEF  F02D         	call	_lcdInst
 12183                           
 12184                           ;Test.c: 128: printf("PUSH TO START");
 12185  002AB8  0E2D               	movlw	low STR_72
 12186  002ABA  0100               	movlb	0	; () banked
 12187  002ABC  6F8E               	movwf	printf@f& (0+255),b
 12188  002ABE  0EFF               	movlw	high STR_72
 12189  002AC0  0100               	movlb	0	; () banked
 12190  002AC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12191  002AC4  ECED  F00D         	call	_printf	;wreg free
 12192                           
 12193                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12194  002AC8  0E05               	movlw	5
 12195  002ACA  0100               	movlb	0	; () banked
 12196  002ACC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12197  002ACE  0E0F               	movlw	15
 12198  002AD0  0100               	movlb	0	; () banked
 12199  002AD2  6FAB               	movwf	??_sensorTest& (0+255),b
 12200  002AD4  0EF1               	movlw	241
 12201  002AD6                     u10447:
 12202  002AD6  2EE8               	decfsz	wreg,f,c
 12203  002AD8  D7FE               	bra	u10447
 12204  002ADA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12205  002ADC  D7FC               	bra	u10447
 12206  002ADE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12207  002AE0  D7FA               	bra	u10447
 12208  002AE2                     l1270:
 12209  002AE2  A281               	btfss	3969,1,c	;volatile
 12210  002AE4  D7FE               	goto	l1270
 12211  002AE6                     l1273:
 12212  002AE6  B281               	btfsc	3969,1,c	;volatile
 12213  002AE8  D7FE               	goto	l1273
 12214                           
 12215                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12216  002AEA  0E01               	movlw	1
 12217  002AEC  ECEF  F02D         	call	_lcdInst
 12218  002AF0  0E68               	movlw	104
 12219  002AF2  0100               	movlb	0	; () banked
 12220  002AF4  6FAB               	movwf	??_sensorTest& (0+255),b
 12221  002AF6  0EE4               	movlw	228
 12222  002AF8                     u10457:
 12223  002AF8  2EE8               	decfsz	wreg,f,c
 12224  002AFA  D7FE               	bra	u10457
 12225  002AFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12226  002AFE  D7FC               	bra	u10457
 12227  002B00  F000               	nop	
 12228  002B02  0E80               	movlw	128
 12229  002B04  ECEF  F02D         	call	_lcdInst
 12230                           
 12231                           ;Test.c: 137: printf("TST: IR SNSR");
 12232  002B08  0E57               	movlw	low STR_80
 12233  002B0A  0100               	movlb	0	; () banked
 12234  002B0C  6F8E               	movwf	printf@f& (0+255),b
 12235  002B0E  0EFF               	movlw	high STR_80
 12236  002B10  0100               	movlb	0	; () banked
 12237  002B12  6F8F               	movwf	(printf@f+1)& (0+255),b
 12238  002B14  ECED  F00D         	call	_printf	;wreg free
 12239                           
 12240                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12241  002B18  0E05               	movlw	5
 12242  002B1A  0100               	movlb	0	; () banked
 12243  002B1C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12244  002B1E  0E0F               	movlw	15
 12245  002B20  0100               	movlb	0	; () banked
 12246  002B22  6FAB               	movwf	??_sensorTest& (0+255),b
 12247  002B24  0EF1               	movlw	241
 12248  002B26                     u10467:
 12249  002B26  2EE8               	decfsz	wreg,f,c
 12250  002B28  D7FE               	bra	u10467
 12251  002B2A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12252  002B2C  D7FC               	bra	u10467
 12253  002B2E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12254  002B30  D7FA               	bra	u10467
 12255                           
 12256                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12257  002B32  8A8B               	bsf	3979,5,c	;volatile
 12258                           
 12259                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12260  002B34  D05C               	goto	l8294
 12261  002B36                     l8276:
 12262                           
 12263                           ;Test.c: 142: readADC(0);
 12264  002B36  0E00               	movlw	0
 12265  002B38  ECDA  F02C         	call	_readADC
 12266                           
 12267                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12268  002B3C  50C3               	movf	4035,w,c	;volatile
 12269  002B3E  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12270  002B42  0100               	movlb	0	; () banked
 12271  002B44  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12272  002B46  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12273  002B4A  0100               	movlb	0	; () banked
 12274  002B4C  6BAB               	clrf	??_sensorTest& (0+255),b
 12275  002B4E  0100               	movlb	0	; () banked
 12276  002B50  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12277  002B52  0100               	movlb	0	; () banked
 12278  002B54  6FAD               	movwf	sensorTest@res& (0+255),b
 12279  002B56  0100               	movlb	0	; () banked
 12280  002B58  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12281  002B5A  0100               	movlb	0	; () banked
 12282  002B5C  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12286  002B5E  0100               	movlb	0	; () banked
 12287  002B60  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12288  002B62  D00A               	goto	u7120
 12289  002B64  0E21               	movlw	33
 12290  002B66  0100               	movlb	0	; () banked
 12291  002B68  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12292  002B6A  0E03               	movlw	3
 12293  002B6C  0100               	movlb	0	; () banked
 12294  002B6E  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12295  002B70  A0D8               	btfss	status,0,c
 12296  002B72  D002               	goto	u7120
 12297  002B74  0E01               	movlw	1
 12298  002B76  D001               	goto	u7130
 12299  002B78                     u7120:
 12300  002B78  0E00               	movlw	0
 12301  002B7A                     u7130:
 12302  002B7A  0100               	movlb	0	; () banked
 12303  002B7C  6FE0               	movwf	_IR_signal& (0+255),b
 12304  002B7E  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12305                           
 12306                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12307  002B80  0E01               	movlw	1
 12308  002B82  ECEF  F02D         	call	_lcdInst
 12309  002B86  0E68               	movlw	104
 12310  002B88  0100               	movlb	0	; () banked
 12311  002B8A  6FAB               	movwf	??_sensorTest& (0+255),b
 12312  002B8C  0EE4               	movlw	228
 12313  002B8E                     u10477:
 12314  002B8E  2EE8               	decfsz	wreg,f,c
 12315  002B90  D7FE               	bra	u10477
 12316  002B92  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12317  002B94  D7FC               	bra	u10477
 12318  002B96  F000               	nop	
 12319  002B98  0E80               	movlw	128
 12320  002B9A  ECEF  F02D         	call	_lcdInst
 12321                           
 12322                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12323  002B9E  0E7C               	movlw	low STR_81
 12324  002BA0  0100               	movlb	0	; () banked
 12325  002BA2  6F8E               	movwf	printf@f& (0+255),b
 12326  002BA4  0EFE               	movlw	high STR_81
 12327  002BA6  0100               	movlb	0	; () banked
 12328  002BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12329  002BAA  C0E0  F090         	movff	_IR_signal,?_printf+2
 12330  002BAE  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12331  002BB2  ECED  F00D         	call	_printf	;wreg free
 12332                           
 12333                           ;Test.c: 148: lcdInst(0b11000000);;
 12334  002BB6  0EC0               	movlw	192
 12335  002BB8  ECEF  F02D         	call	_lcdInst
 12336                           
 12337                           ;Test.c: 149: printf("%d", res);
 12338  002BBC  0E09               	movlw	low (STR_27+14)
 12339  002BBE  0100               	movlb	0	; () banked
 12340  002BC0  6F8E               	movwf	printf@f& (0+255),b
 12341  002BC2  0EFE               	movlw	high (STR_27+14)
 12342  002BC4  0100               	movlb	0	; () banked
 12343  002BC6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12344  002BC8  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12345  002BCC  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12346  002BD0  ECED  F00D         	call	_printf	;wreg free
 12347                           
 12348                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12349  002BD4  0E05               	movlw	5
 12350  002BD6  0100               	movlb	0	; () banked
 12351  002BD8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12352  002BDA  0E0F               	movlw	15
 12353  002BDC  0100               	movlb	0	; () banked
 12354  002BDE  6FAB               	movwf	??_sensorTest& (0+255),b
 12355  002BE0  0EF1               	movlw	241
 12356  002BE2                     u10487:
 12357  002BE2  2EE8               	decfsz	wreg,f,c
 12358  002BE4  D7FE               	bra	u10487
 12359  002BE6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12360  002BE8  D7FC               	bra	u10487
 12361  002BEA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12362  002BEC  D7FA               	bra	u10487
 12363  002BEE                     l8294:
 12364  002BEE  A281               	btfss	3969,1,c	;volatile
 12365  002BF0  D7A2               	goto	l8276
 12366                           
 12367                           ;Test.c: 151: }
 12368                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12369  002BF2  9A8B               	bcf	3979,5,c	;volatile
 12370                           
 12371                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12372  002BF4  0E01               	movlw	1
 12373  002BF6  ECEF  F02D         	call	_lcdInst
 12374  002BFA  0E68               	movlw	104
 12375  002BFC  0100               	movlb	0	; () banked
 12376  002BFE  6FAB               	movwf	??_sensorTest& (0+255),b
 12377  002C00  0EE4               	movlw	228
 12378  002C02                     u10497:
 12379  002C02  2EE8               	decfsz	wreg,f,c
 12380  002C04  D7FE               	bra	u10497
 12381  002C06  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12382  002C08  D7FC               	bra	u10497
 12383  002C0A  F000               	nop	
 12384  002C0C  0E80               	movlw	128
 12385  002C0E  ECEF  F02D         	call	_lcdInst
 12386                           
 12387                           ;Test.c: 161: printf("TST: MAGNETISM");
 12388  002C12  0EA9               	movlw	low STR_83
 12389  002C14  0100               	movlb	0	; () banked
 12390  002C16  6F8E               	movwf	printf@f& (0+255),b
 12391  002C18  0EFE               	movlw	high STR_83
 12392  002C1A  0100               	movlb	0	; () banked
 12393  002C1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12394  002C1E  ECED  F00D         	call	_printf	;wreg free
 12395                           
 12396                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12397  002C22  0E05               	movlw	5
 12398  002C24  0100               	movlb	0	; () banked
 12399  002C26  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12400  002C28  0E0F               	movlw	15
 12401  002C2A  0100               	movlb	0	; () banked
 12402  002C2C  6FAB               	movwf	??_sensorTest& (0+255),b
 12403  002C2E  0EF1               	movlw	241
 12404  002C30                     u10507:
 12405  002C30  2EE8               	decfsz	wreg,f,c
 12406  002C32  D7FE               	bra	u10507
 12407  002C34  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12408  002C36  D7FC               	bra	u10507
 12409  002C38  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12410  002C3A  D7FA               	bra	u10507
 12411                           
 12412                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12413  002C3C  D021               	goto	l8312
 12414  002C3E                     l8306:
 12415                           
 12416                           ;Test.c: 164: readMAG();
 12417  002C3E  EC5D  F02A         	call	_readMAG	;wreg free
 12418                           
 12419                           ;Test.c: 165: lcdInst(0b10000000);;
 12420  002C42  0E80               	movlw	128
 12421  002C44  ECEF  F02D         	call	_lcdInst
 12422                           
 12423                           ;Test.c: 166: lcdInst(0b11000000);;
 12424  002C48  0EC0               	movlw	192
 12425  002C4A  ECEF  F02D         	call	_lcdInst
 12426                           
 12427                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12428  002C4E  0E1D               	movlw	low STR_84
 12429  002C50  0100               	movlb	0	; () banked
 12430  002C52  6F8E               	movwf	printf@f& (0+255),b
 12431  002C54  0EFE               	movlw	high STR_84
 12432  002C56  0100               	movlb	0	; () banked
 12433  002C58  6F8F               	movwf	(printf@f+1)& (0+255),b
 12434  002C5A  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12435  002C5E  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12436  002C62  ECED  F00D         	call	_printf	;wreg free
 12437                           
 12438                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12439  002C66  0E05               	movlw	5
 12440  002C68  0100               	movlb	0	; () banked
 12441  002C6A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12442  002C6C  0E0F               	movlw	15
 12443  002C6E  0100               	movlb	0	; () banked
 12444  002C70  6FAB               	movwf	??_sensorTest& (0+255),b
 12445  002C72  0EF1               	movlw	241
 12446  002C74                     u10517:
 12447  002C74  2EE8               	decfsz	wreg,f,c
 12448  002C76  D7FE               	bra	u10517
 12449  002C78  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12450  002C7A  D7FC               	bra	u10517
 12451  002C7C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12452  002C7E  D7FA               	bra	u10517
 12453  002C80                     l8312:
 12454  002C80  A281               	btfss	3969,1,c	;volatile
 12455  002C82  D7DD               	goto	l8306
 12456                           
 12457                           ;Test.c: 169: }
 12458                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12459  002C84  0E01               	movlw	1
 12460  002C86  ECEF  F02D         	call	_lcdInst
 12461  002C8A  0E68               	movlw	104
 12462  002C8C  0100               	movlb	0	; () banked
 12463  002C8E  6FAB               	movwf	??_sensorTest& (0+255),b
 12464  002C90  0EE4               	movlw	228
 12465  002C92                     u10527:
 12466  002C92  2EE8               	decfsz	wreg,f,c
 12467  002C94  D7FE               	bra	u10527
 12468  002C96  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12469  002C98  D7FC               	bra	u10527
 12470  002C9A  F000               	nop	
 12471  002C9C  0E80               	movlw	128
 12472  002C9E  ECEF  F02D         	call	_lcdInst
 12473                           
 12474                           ;Test.c: 175: printf("TST: COND");
 12475  002CA2  0E86               	movlw	low STR_85
 12476  002CA4  0100               	movlb	0	; () banked
 12477  002CA6  6F8E               	movwf	printf@f& (0+255),b
 12478  002CA8  0EFF               	movlw	high STR_85
 12479  002CAA  0100               	movlb	0	; () banked
 12480  002CAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12481  002CAE  ECED  F00D         	call	_printf	;wreg free
 12482                           
 12483                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12484  002CB2  0E05               	movlw	5
 12485  002CB4  0100               	movlb	0	; () banked
 12486  002CB6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12487  002CB8  0E0F               	movlw	15
 12488  002CBA  0100               	movlb	0	; () banked
 12489  002CBC  6FAB               	movwf	??_sensorTest& (0+255),b
 12490  002CBE  0EF1               	movlw	241
 12491  002CC0                     u10537:
 12492  002CC0  2EE8               	decfsz	wreg,f,c
 12493  002CC2  D7FE               	bra	u10537
 12494  002CC4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12495  002CC6  D7FC               	bra	u10537
 12496  002CC8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12497  002CCA  D7FA               	bra	u10537
 12498  002CCC                     l8324:
 12499                           
 12500                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12501  002CCC  0E01               	movlw	1
 12502  002CCE  ECEF  F02D         	call	_lcdInst
 12503  002CD2  0E68               	movlw	104
 12504  002CD4  0100               	movlb	0	; () banked
 12505  002CD6  6FAB               	movwf	??_sensorTest& (0+255),b
 12506  002CD8  0EE4               	movlw	228
 12507  002CDA                     u10547:
 12508  002CDA  2EE8               	decfsz	wreg,f,c
 12509  002CDC  D7FE               	bra	u10547
 12510  002CDE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12511  002CE0  D7FC               	bra	u10547
 12512  002CE2  F000               	nop	
 12513  002CE4  0E80               	movlw	128
 12514  002CE6  ECEF  F02D         	call	_lcdInst
 12515                           
 12516                           ;Test.c: 179: printf("TST: COND");
 12517  002CEA  0E86               	movlw	low STR_85
 12518  002CEC  0100               	movlb	0	; () banked
 12519  002CEE  6F8E               	movwf	printf@f& (0+255),b
 12520  002CF0  0EFF               	movlw	high STR_85
 12521  002CF2  0100               	movlb	0	; () banked
 12522  002CF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12523  002CF6  ECED  F00D         	call	_printf	;wreg free
 12524                           
 12525                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12526  002CFA  D01B               	goto	l8336
 12527  002CFC                     l8332:
 12528                           
 12529                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12530  002CFC  0E80               	movlw	128
 12531  002CFE  ECEF  F02D         	call	_lcdInst
 12532  002D02  0EC0               	movlw	192
 12533  002D04  ECEF  F02D         	call	_lcdInst
 12534                           
 12535                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12536  002D08  0EA4               	movlw	low STR_87
 12537  002D0A  0100               	movlb	0	; () banked
 12538  002D0C  6F8E               	movwf	printf@f& (0+255),b
 12539  002D0E  0EFF               	movlw	high STR_87
 12540  002D10  0100               	movlb	0	; () banked
 12541  002D12  6F8F               	movwf	(printf@f+1)& (0+255),b
 12542  002D14  A480               	btfss	3968,2,c	;volatile
 12543  002D16  D004               	goto	u7160
 12544  002D18  0100               	movlb	0	; () banked
 12545  002D1A  6BAB               	clrf	??_sensorTest& (0+255),b
 12546  002D1C  2BAB               	incf	??_sensorTest& (0+255),f,b
 12547  002D1E  D002               	goto	u7168
 12548  002D20                     u7160:
 12549  002D20  0100               	movlb	0	; () banked
 12550  002D22  6BAB               	clrf	??_sensorTest& (0+255),b
 12551  002D24                     u7168:
 12552  002D24  0100               	movlb	0	; () banked
 12553  002D26  51AB               	movf	??_sensorTest& (0+255),w,b
 12554  002D28  0100               	movlb	0	; () banked
 12555  002D2A  6F90               	movwf	(?_printf+2)& (0+255),b
 12556  002D2C  6B91               	clrf	(?_printf+3)& (0+255),b
 12557  002D2E  ECED  F00D         	call	_printf	;wreg free
 12558  002D32                     l8336:
 12559  002D32  A281               	btfss	3969,1,c	;volatile
 12560  002D34  D7E3               	goto	l8332
 12561                           
 12562                           ;Test.c: 186: }
 12563                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12564  002D36  3881               	swapf	3969,w,c	;volatile
 12565  002D38  0B0F               	andlw	15
 12566  002D3A  0A0F               	xorlw	15
 12567  002D3C  B4D8               	btfsc	status,2,c
 12568  002D3E  0012               	return	
 12569                           
 12570                           ;Test.c: 190: else{
 12571                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12572                           
 12573                           ;Test.c: 189: }
 12574                           
 12575                           ;Test.c: 188: break;
 12576  002D40  8689               	bsf	3977,3,c	;volatile
 12577                           
 12578                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12579  002D42  D01B               	goto	l8348
 12580  002D44                     l8344:
 12581                           
 12582                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12583  002D44  0E80               	movlw	128
 12584  002D46  ECEF  F02D         	call	_lcdInst
 12585  002D4A  0EC0               	movlw	192
 12586  002D4C  ECEF  F02D         	call	_lcdInst
 12587                           
 12588                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12589  002D50  0EA4               	movlw	low STR_87
 12590  002D52  0100               	movlb	0	; () banked
 12591  002D54  6F8E               	movwf	printf@f& (0+255),b
 12592  002D56  0EFF               	movlw	high STR_87
 12593  002D58  0100               	movlb	0	; () banked
 12594  002D5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12595  002D5C  A480               	btfss	3968,2,c	;volatile
 12596  002D5E  D004               	goto	u7190
 12597  002D60  0100               	movlb	0	; () banked
 12598  002D62  6BAB               	clrf	??_sensorTest& (0+255),b
 12599  002D64  2BAB               	incf	??_sensorTest& (0+255),f,b
 12600  002D66  D002               	goto	u7198
 12601  002D68                     u7190:
 12602  002D68  0100               	movlb	0	; () banked
 12603  002D6A  6BAB               	clrf	??_sensorTest& (0+255),b
 12604  002D6C                     u7198:
 12605  002D6C  0100               	movlb	0	; () banked
 12606  002D6E  51AB               	movf	??_sensorTest& (0+255),w,b
 12607  002D70  0100               	movlb	0	; () banked
 12608  002D72  6F90               	movwf	(?_printf+2)& (0+255),b
 12609  002D74  6B91               	clrf	(?_printf+3)& (0+255),b
 12610  002D76  ECED  F00D         	call	_printf	;wreg free
 12611  002D7A                     l8348:
 12612  002D7A  B281               	btfsc	3969,1,c	;volatile
 12613  002D7C  D7E3               	goto	l8344
 12614                           
 12615                           ;Test.c: 196: }
 12616                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12617  002D7E  9689               	bcf	3977,3,c	;volatile
 12618  002D80  D7A5               	goto	l8324
 12619  002D82                     __end_of_sensorTest:
 12620                           	opt stack 0
 12621                           tblptru	equ	0xFF8
 12622                           tblptrh	equ	0xFF7
 12623                           tblptrl	equ	0xFF6
 12624                           tablat	equ	0xFF5
 12625                           prodh	equ	0xFF4
 12626                           prodl	equ	0xFF3
 12627                           intcon	equ	0xFF2
 12628                           intcon2	equ	0xFF1
 12629                           intcon3	equ	0xFF0
 12630                           postinc0	equ	0xFEE
 12631                           wreg	equ	0xFE8
 12632                           postdec1	equ	0xFE5
 12633                           fsr1l	equ	0xFE1
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           postdec2	equ	0xFDD
 12637                           fsr2h	equ	0xFDA
 12638                           fsr2l	equ	0xFD9
 12639                           status	equ	0xFD8
 12640                           
 12641 ;; *************** function _readMAG *****************
 12642 ;; Defined at:
 12643 ;;		line 29 in file "ADCFunctionality.c"
 12644 ;; Parameters:    Size  Location     Type
 12645 ;;		None
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;  res             2    4[BANK0 ] int 
 12648 ;; Return value:  Size  Location     Type
 12649 ;;                  1    wreg      void 
 12650 ;; Registers used:
 12651 ;;		wreg, status,2, status,0, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12661 ;;Total ram usage:        4 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    8
 12664 ;; This function calls:
 12665 ;;		_readADC
 12666 ;; This function is called by:
 12667 ;;		_getMAG
 12668 ;;		_sensorTest
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text42
 12673  0054BA                     __ptext42:
 12674                           	opt stack 0
 12675  0054BA                     _readMAG:
 12676                           	opt stack 19
 12677                           
 12678                           ;ADCFunctionality.c: 30: readADC(1);
 12679                           
 12680                           ;incstack = 0
 12681  0054BA  0E01               	movlw	1
 12682  0054BC  ECDA  F02C         	call	_readADC
 12683                           
 12684                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12685  0054C0  50C3               	movf	4035,w,c	;volatile
 12686  0054C2  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12687  0054C6  0100               	movlb	0	; () banked
 12688  0054C8  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12689  0054CA  C082  F083         	movff	??_readMAG,??_readMAG+1
 12690  0054CE  0100               	movlb	0	; () banked
 12691  0054D0  6B82               	clrf	??_readMAG& (0+255),b
 12692  0054D2  0100               	movlb	0	; () banked
 12693  0054D4  1182               	iorwf	??_readMAG& (0+255),w,b
 12694  0054D6  0100               	movlb	0	; () banked
 12695  0054D8  6F84               	movwf	readMAG@res& (0+255),b
 12696  0054DA  0100               	movlb	0	; () banked
 12697  0054DC  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12698  0054DE  0100               	movlb	0	; () banked
 12699  0054E0  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12703  0054E2  0100               	movlb	0	; () banked
 12704  0054E4  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12705  0054E6  D008               	goto	u5161
 12706  0054E8  0100               	movlb	0	; () banked
 12707  0054EA  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12708  0054EC  E107               	bnz	u5160
 12709  0054EE  0E96               	movlw	150
 12710  0054F0  0100               	movlb	0	; () banked
 12711  0054F2  5D84               	subwf	readMAG@res& (0+255),w,b
 12712  0054F4  B0D8               	btfsc	status,0,c
 12713  0054F6  D002               	goto	u5160
 12714  0054F8                     u5161:
 12715  0054F8  0E01               	movlw	1
 12716  0054FA  D001               	goto	u5170
 12717  0054FC                     u5160:
 12718  0054FC  0E00               	movlw	0
 12719  0054FE                     u5170:
 12720  0054FE  0100               	movlb	0	; () banked
 12721  005500  6FE2               	movwf	_MAG_signal& (0+255),b
 12722  005502  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12723                           
 12724                           ; BSR set to: 0
 12725  005504  0012               	return		;funcret
 12726  005506                     __end_of_readMAG:
 12727                           	opt stack 0
 12728                           tblptru	equ	0xFF8
 12729                           tblptrh	equ	0xFF7
 12730                           tblptrl	equ	0xFF6
 12731                           tablat	equ	0xFF5
 12732                           prodh	equ	0xFF4
 12733                           prodl	equ	0xFF3
 12734                           intcon	equ	0xFF2
 12735                           intcon2	equ	0xFF1
 12736                           intcon3	equ	0xFF0
 12737                           postinc0	equ	0xFEE
 12738                           wreg	equ	0xFE8
 12739                           postdec1	equ	0xFE5
 12740                           fsr1l	equ	0xFE1
 12741                           indf2	equ	0xFDF
 12742                           postinc2	equ	0xFDE
 12743                           postdec2	equ	0xFDD
 12744                           fsr2h	equ	0xFDA
 12745                           fsr2l	equ	0xFD9
 12746                           status	equ	0xFD8
 12747                           
 12748 ;; *************** function _arm *****************
 12749 ;; Defined at:
 12750 ;;		line 639 in file "Test.c"
 12751 ;; Parameters:    Size  Location     Type
 12752 ;;		None
 12753 ;; Auto vars:     Size  Location     Type
 12754 ;;  on              2   44[BANK0 ] int 
 12755 ;; Return value:  Size  Location     Type
 12756 ;;                  1    wreg      void 
 12757 ;; Registers used:
 12758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12759 ;; Tracked objects:
 12760 ;;		On entry : 0/0
 12761 ;;		On exit  : 0/0
 12762 ;;		Unchanged: 0/0
 12763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12765 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12767 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12768 ;;Total ram usage:        3 bytes
 12769 ;; Hardware stack levels used:    1
 12770 ;; Hardware stack levels required when called:   10
 12771 ;; This function calls:
 12772 ;;		_lcdInst
 12773 ;;		_printf
 12774 ;;		_stopSignals
 12775 ;; This function is called by:
 12776 ;;		_Test
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           	psect	text43
 12781  0043DA                     __ptext43:
 12782                           	opt stack 0
 12783  0043DA                     _arm:
 12784                           	opt stack 19
 12785                           
 12786                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;incstack = 0
 12790  0043DA  0E01               	movlw	1
 12791  0043DC  ECEF  F02D         	call	_lcdInst
 12792  0043E0  0E68               	movlw	104
 12793  0043E2  0100               	movlb	0	; () banked
 12794  0043E4  6FAB               	movwf	??_arm& (0+255),b
 12795  0043E6  0EE4               	movlw	228
 12796  0043E8                     u10557:
 12797  0043E8  2EE8               	decfsz	wreg,f,c
 12798  0043EA  D7FE               	bra	u10557
 12799  0043EC  2FAB               	decfsz	??_arm& (0+255),f,b
 12800  0043EE  D7FC               	bra	u10557
 12801  0043F0  F000               	nop	
 12802  0043F2  0E80               	movlw	128
 12803  0043F4  ECEF  F02D         	call	_lcdInst
 12804                           
 12805                           ;Test.c: 641: printf("D WILL RETURN   ");
 12806  0043F8  0EDB               	movlw	low STR_119
 12807  0043FA  0100               	movlb	0	; () banked
 12808  0043FC  6F8E               	movwf	printf@f& (0+255),b
 12809  0043FE  0EFB               	movlw	high STR_119
 12810  004400  0100               	movlb	0	; () banked
 12811  004402  6F8F               	movwf	(printf@f+1)& (0+255),b
 12812  004404  ECED  F00D         	call	_printf	;wreg free
 12813                           
 12814                           ;Test.c: 642: lcdInst(0b11000000);;
 12815  004408  0EC0               	movlw	192
 12816  00440A  ECEF  F02D         	call	_lcdInst
 12817                           
 12818                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12819  00440E  0E96               	movlw	low STR_128
 12820  004410  0100               	movlb	0	; () banked
 12821  004412  6F8E               	movwf	printf@f& (0+255),b
 12822  004414  0EFC               	movlw	high STR_128
 12823  004416  0100               	movlb	0	; () banked
 12824  004418  6F8F               	movwf	(printf@f+1)& (0+255),b
 12825  00441A  ECED  F00D         	call	_printf	;wreg free
 12826                           
 12827                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12828  00441E  8EF2               	bsf	intcon,7,c	;volatile
 12829                           
 12830                           ;Test.c: 646: machine_state = Sorting_state;
 12831  004420  0E01               	movlw	1
 12832  004422  0100               	movlb	0	; () banked
 12833  004424  6FFC               	movwf	_machine_state& (0+255),b
 12834                           
 12835                           ; BSR set to: 0
 12836                           ;Test.c: 647: f_arm_position = 2;
 12837  004426  0E00               	movlw	0
 12838  004428  0100               	movlb	0	; () banked
 12839  00442A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12840  00442C  0E02               	movlw	2
 12841  00442E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;Test.c: 648: timer2_counter = 0;
 12845  004430  0E00               	movlw	0
 12846  004432  6E74               	movwf	_timer2_counter+1,c	;volatile
 12847  004434  0E00               	movlw	0
 12848  004436  6E73               	movwf	_timer2_counter,c	;volatile
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12852  004438  868A               	bsf	3978,3,c	;volatile
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;Test.c: 650: TMR2ON = 1;
 12856  00443A  84CA               	bsf	4042,2,c	;volatile
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;Test.c: 651: was_low_2 = 0;
 12860  00443C  0E00               	movlw	0
 12861  00443E  6E7A               	movwf	_was_low_2+1,c	;volatile
 12862  004440  0E00               	movlw	0
 12863  004442  6E79               	movwf	_was_low_2,c	;volatile
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;Test.c: 653: int on = 0;
 12867  004444  0E00               	movlw	0
 12868  004446  0100               	movlb	0	; () banked
 12869  004448  6FAD               	movwf	(arm@on+1)& (0+255),b
 12870  00444A  0E00               	movlw	0
 12871  00444C  6FAC               	movwf	arm@on& (0+255),b
 12872  00444E                     l8802:
 12873                           
 12874                           ;Test.c: 655: if(on){
 12875  00444E  0100               	movlb	0	; () banked
 12876  004450  51AC               	movf	arm@on& (0+255),w,b
 12877  004452  0100               	movlb	0	; () banked
 12878  004454  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12879  004456  B4D8               	btfsc	status,2,c
 12880  004458  D01C               	goto	l8814
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;Test.c: 656: on = !on;
 12884  00445A  0100               	movlb	0	; () banked
 12885  00445C  51AC               	movf	arm@on& (0+255),w,b
 12886  00445E  0100               	movlb	0	; () banked
 12887  004460  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12888  004462  A4D8               	btfss	status,2,c
 12889  004464  D002               	goto	u7780
 12890  004466  0E01               	movlw	1
 12891  004468  D001               	goto	u7790
 12892  00446A                     u7780:
 12893  00446A  0E00               	movlw	0
 12894  00446C                     u7790:
 12895  00446C  0100               	movlb	0	; () banked
 12896  00446E  6FAC               	movwf	arm@on& (0+255),b
 12897  004470  6BAD               	clrf	(arm@on+1)& (0+255),b
 12898                           
 12899                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12900  004472  D005               	goto	l8808
 12901  004474                     l8806:
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;Test.c: 658: f_arm_position = 0;
 12905  004474  0E00               	movlw	0
 12906  004476  0100               	movlb	0	; () banked
 12907  004478  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12908  00447A  0E00               	movlw	0
 12909  00447C  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12910  00447E                     l8808:
 12911                           
 12912                           ; BSR set to: 0
 12913  00447E  A281               	btfss	3969,1,c	;volatile
 12914  004480  D7F9               	goto	l8806
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;Test.c: 659: }
 12918                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12919                           
 12920                           ; BSR set to: 0
 12921  004482  3881               	swapf	3969,w,c	;volatile
 12922  004484  0B0F               	andlw	15
 12923  004486  0A0F               	xorlw	15
 12924  004488  B4D8               	btfsc	status,2,c
 12925  00448A  D01F               	goto	l1465
 12926  00448C                     l1466:
 12927  00448C  A281               	btfss	3969,1,c	;volatile
 12928  00448E  D7DF               	goto	l8802
 12929  004490  D7FD               	goto	l1466
 12930  004492                     l8814:
 12931                           
 12932                           ;Test.c: 665: else{
 12933                           ;Test.c: 666: on = !on;
 12934  004492  0100               	movlb	0	; () banked
 12935  004494  51AC               	movf	arm@on& (0+255),w,b
 12936  004496  0100               	movlb	0	; () banked
 12937  004498  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12938  00449A  A4D8               	btfss	status,2,c
 12939  00449C  D002               	goto	u7830
 12940  00449E  0E01               	movlw	1
 12941  0044A0  D001               	goto	u7840
 12942  0044A2                     u7830:
 12943  0044A2  0E00               	movlw	0
 12944  0044A4                     u7840:
 12945  0044A4  0100               	movlb	0	; () banked
 12946  0044A6  6FAC               	movwf	arm@on& (0+255),b
 12947  0044A8  6BAD               	clrf	(arm@on+1)& (0+255),b
 12948                           
 12949                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12950  0044AA  D005               	goto	l8818
 12951  0044AC                     l8816:
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;Test.c: 668: f_arm_position = 1;
 12955  0044AC  0E00               	movlw	0
 12956  0044AE  0100               	movlb	0	; () banked
 12957  0044B0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12958  0044B2  0E01               	movlw	1
 12959  0044B4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12960  0044B6                     l8818:
 12961                           
 12962                           ; BSR set to: 0
 12963  0044B6  A281               	btfss	3969,1,c	;volatile
 12964  0044B8  D7F9               	goto	l8816
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;Test.c: 669: }
 12968                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12969                           
 12970                           ; BSR set to: 0
 12971  0044BA  3881               	swapf	3969,w,c	;volatile
 12972  0044BC  0B0F               	andlw	15
 12973  0044BE  0A0F               	xorlw	15
 12974  0044C0  B4D8               	btfsc	status,2,c
 12975  0044C2  D003               	goto	l1465
 12976  0044C4                     l1474:
 12977  0044C4  A281               	btfss	3969,1,c	;volatile
 12978  0044C6  D7C3               	goto	l8802
 12979  0044C8  D7FD               	goto	l1474
 12980  0044CA                     l1465:
 12981                           
 12982                           ; BSR set to: 0
 12983                           ;Test.c: 674: }
 12984                           ;Test.c: 675: }
 12985                           ;Test.c: 677: (INTCONbits.GIE = 0);
 12986  0044CA  9EF2               	bcf	intcon,7,c	;volatile
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;Test.c: 678: stopSignals();
 12990  0044CC  EC96  F02D         	call	_stopSignals	;wreg free
 12991                           
 12992                           ;Test.c: 679: machine_state = Testing_state;
 12993  0044D0  0E03               	movlw	3
 12994  0044D2  0100               	movlb	0	; () banked
 12995  0044D4  6FFC               	movwf	_machine_state& (0+255),b
 12996                           
 12997                           ; BSR set to: 0
 12998  0044D6  0012               	return		;funcret
 12999  0044D8                     __end_of_arm:
 13000                           	opt stack 0
 13001                           tblptru	equ	0xFF8
 13002                           tblptrh	equ	0xFF7
 13003                           tblptrl	equ	0xFF6
 13004                           tablat	equ	0xFF5
 13005                           prodh	equ	0xFF4
 13006                           prodl	equ	0xFF3
 13007                           intcon	equ	0xFF2
 13008                           intcon2	equ	0xFF1
 13009                           intcon3	equ	0xFF0
 13010                           postinc0	equ	0xFEE
 13011                           wreg	equ	0xFE8
 13012                           postdec1	equ	0xFE5
 13013                           fsr1l	equ	0xFE1
 13014                           indf2	equ	0xFDF
 13015                           postinc2	equ	0xFDE
 13016                           postdec2	equ	0xFDD
 13017                           fsr2h	equ	0xFDA
 13018                           fsr2l	equ	0xFD9
 13019                           status	equ	0xFD8
 13020                           
 13021 ;; *************** function _algorithmTest *****************
 13022 ;; Defined at:
 13023 ;;		line 79 in file "Test.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;		None
 13026 ;; Auto vars:     Size  Location     Type
 13027 ;;		None
 13028 ;; Return value:  Size  Location     Type
 13029 ;;                  1    wreg      void 
 13030 ;; Registers used:
 13031 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13032 ;; Tracked objects:
 13033 ;;		On entry : 0/0
 13034 ;;		On exit  : 0/0
 13035 ;;		Unchanged: 0/0
 13036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13039 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13040 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13041 ;;Total ram usage:        2 bytes
 13042 ;; Hardware stack levels used:    1
 13043 ;; Hardware stack levels required when called:   10
 13044 ;; This function calls:
 13045 ;;		_lcdInst
 13046 ;;		_printf
 13047 ;; This function is called by:
 13048 ;;		_Test
 13049 ;; This function uses a non-reentrant model
 13050 ;;
 13051                           
 13052                           	psect	text44
 13053  0046A2                     __ptext44:
 13054                           	opt stack 0
 13055  0046A2                     _algorithmTest:
 13056                           	opt stack 19
 13057                           
 13058                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;incstack = 0
 13062  0046A2  0E01               	movlw	1
 13063  0046A4  ECEF  F02D         	call	_lcdInst
 13064  0046A8  0E68               	movlw	104
 13065  0046AA  0100               	movlb	0	; () banked
 13066  0046AC  6FAB               	movwf	??_algorithmTest& (0+255),b
 13067  0046AE  0EE4               	movlw	228
 13068  0046B0                     u10567:
 13069  0046B0  2EE8               	decfsz	wreg,f,c
 13070  0046B2  D7FE               	bra	u10567
 13071  0046B4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13072  0046B6  D7FC               	bra	u10567
 13073  0046B8  F000               	nop	
 13074  0046BA  0E80               	movlw	128
 13075  0046BC  ECEF  F02D         	call	_lcdInst
 13076                           
 13077                           ;Test.c: 82: printf("ALGORITHM TEST");
 13078  0046C0  0EF4               	movlw	low STR_71
 13079  0046C2  0100               	movlb	0	; () banked
 13080  0046C4  6F8E               	movwf	printf@f& (0+255),b
 13081  0046C6  0EFE               	movlw	high STR_71
 13082  0046C8  0100               	movlb	0	; () banked
 13083  0046CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13084  0046CC  ECED  F00D         	call	_printf	;wreg free
 13085                           
 13086                           ;Test.c: 83: lcdInst(0b11000000);;
 13087  0046D0  0EC0               	movlw	192
 13088  0046D2  ECEF  F02D         	call	_lcdInst
 13089                           
 13090                           ;Test.c: 84: printf("PUSH TO START");
 13091  0046D6  0E2D               	movlw	low STR_72
 13092  0046D8  0100               	movlb	0	; () banked
 13093  0046DA  6F8E               	movwf	printf@f& (0+255),b
 13094  0046DC  0EFF               	movlw	high STR_72
 13095  0046DE  0100               	movlb	0	; () banked
 13096  0046E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13097  0046E2  ECED  F00D         	call	_printf	;wreg free
 13098                           
 13099                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13100  0046E6  0E05               	movlw	5
 13101  0046E8  0100               	movlb	0	; () banked
 13102  0046EA  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13103  0046EC  0E0F               	movlw	15
 13104  0046EE  0100               	movlb	0	; () banked
 13105  0046F0  6FAB               	movwf	??_algorithmTest& (0+255),b
 13106  0046F2  0EF1               	movlw	241
 13107  0046F4                     u10577:
 13108  0046F4  2EE8               	decfsz	wreg,f,c
 13109  0046F6  D7FE               	bra	u10577
 13110  0046F8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13111  0046FA  D7FC               	bra	u10577
 13112  0046FC  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13113  0046FE  D7FA               	bra	u10577
 13114  004700                     l1261:
 13115  004700  A281               	btfss	3969,1,c	;volatile
 13116  004702  D7FE               	goto	l1261
 13117  004704                     l1264:
 13118  004704  B281               	btfsc	3969,1,c	;volatile
 13119  004706  D7FE               	goto	l1264
 13120                           
 13121                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13122  004708  0E01               	movlw	1
 13123  00470A  ECEF  F02D         	call	_lcdInst
 13124  00470E  0E68               	movlw	104
 13125  004710  0100               	movlb	0	; () banked
 13126  004712  6FAB               	movwf	??_algorithmTest& (0+255),b
 13127  004714  0EE4               	movlw	228
 13128  004716                     u10587:
 13129  004716  2EE8               	decfsz	wreg,f,c
 13130  004718  D7FE               	bra	u10587
 13131  00471A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13132  00471C  D7FC               	bra	u10587
 13133  00471E  F000               	nop	
 13134  004720  0E80               	movlw	128
 13135  004722  ECEF  F02D         	call	_lcdInst
 13136                           
 13137                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13138  004726  0E41               	movlw	low STR_73
 13139  004728  0100               	movlb	0	; () banked
 13140  00472A  6F8E               	movwf	printf@f& (0+255),b
 13141  00472C  0EFC               	movlw	high STR_73
 13142  00472E  0100               	movlb	0	; () banked
 13143  004730  6F8F               	movwf	(printf@f+1)& (0+255),b
 13144  004732  ECED  F00D         	call	_printf	;wreg free
 13145                           
 13146                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13147  004736  0E11               	movlw	low STR_74
 13148  004738  0100               	movlb	0	; () banked
 13149  00473A  6F8E               	movwf	printf@f& (0+255),b
 13150  00473C  0EFF               	movlw	high STR_74
 13151  00473E  0100               	movlb	0	; () banked
 13152  004740  6F8F               	movwf	(printf@f+1)& (0+255),b
 13153  004742  ECED  F00D         	call	_printf	;wreg free
 13154                           
 13155                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13156  004746  0E64               	movlw	low STR_75
 13157  004748  0100               	movlb	0	; () banked
 13158  00474A  6F8E               	movwf	printf@f& (0+255),b
 13159  00474C  0EFF               	movlw	high STR_75
 13160  00474E  0100               	movlb	0	; () banked
 13161  004750  6F8F               	movwf	(printf@f+1)& (0+255),b
 13162  004752  ECED  F00D         	call	_printf	;wreg free
 13163                           
 13164                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13165  004756  0ED6               	movlw	low STR_76
 13166  004758  0100               	movlb	0	; () banked
 13167  00475A  6F8E               	movwf	printf@f& (0+255),b
 13168  00475C  0EFE               	movlw	high STR_76
 13169  00475E  0100               	movlb	0	; () banked
 13170  004760  6F8F               	movwf	(printf@f+1)& (0+255),b
 13171  004762  ECED  F00D         	call	_printf	;wreg free
 13172                           
 13173                           ;Test.c: 120: printf("ALG5: NO CANS");
 13174  004766  0E1F               	movlw	low STR_77
 13175  004768  0100               	movlb	0	; () banked
 13176  00476A  6F8E               	movwf	printf@f& (0+255),b
 13177  00476C  0EFF               	movlw	high STR_77
 13178  00476E  0100               	movlb	0	; () banked
 13179  004770  6F8F               	movwf	(printf@f+1)& (0+255),b
 13180  004772  ECED  F00D         	call	_printf	;wreg free
 13181  004776  0012               	return		;funcret
 13182  004778                     __end_of_algorithmTest:
 13183                           	opt stack 0
 13184                           tblptru	equ	0xFF8
 13185                           tblptrh	equ	0xFF7
 13186                           tblptrl	equ	0xFF6
 13187                           tablat	equ	0xFF5
 13188                           prodh	equ	0xFF4
 13189                           prodl	equ	0xFF3
 13190                           intcon	equ	0xFF2
 13191                           intcon2	equ	0xFF1
 13192                           intcon3	equ	0xFF0
 13193                           postinc0	equ	0xFEE
 13194                           wreg	equ	0xFE8
 13195                           postdec1	equ	0xFE5
 13196                           fsr1l	equ	0xFE1
 13197                           indf2	equ	0xFDF
 13198                           postinc2	equ	0xFDE
 13199                           postdec2	equ	0xFDD
 13200                           fsr2h	equ	0xFDA
 13201                           fsr2l	equ	0xFD9
 13202                           status	equ	0xFD8
 13203                           
 13204 ;; *************** function _actuatorTest *****************
 13205 ;; Defined at:
 13206 ;;		line 202 in file "Test.c"
 13207 ;; Parameters:    Size  Location     Type
 13208 ;;		None
 13209 ;; Auto vars:     Size  Location     Type
 13210 ;;  i               1   45[BANK0 ] unsigned char 
 13211 ;;  i               1   67[BANK0 ] unsigned char 
 13212 ;;  i               1   66[BANK0 ] unsigned char 
 13213 ;;  i               1   65[BANK0 ] unsigned char 
 13214 ;;  i               1   64[BANK0 ] unsigned char 
 13215 ;;  i               1   63[BANK0 ] unsigned char 
 13216 ;;  i               1   62[BANK0 ] unsigned char 
 13217 ;;  i               1   61[BANK0 ] unsigned char 
 13218 ;;  i               1   60[BANK0 ] unsigned char 
 13219 ;;  i               1   59[BANK0 ] unsigned char 
 13220 ;;  i               1   58[BANK0 ] unsigned char 
 13221 ;;  i               1   57[BANK0 ] unsigned char 
 13222 ;;  i               1   56[BANK0 ] unsigned char 
 13223 ;;  i               1   55[BANK0 ] unsigned char 
 13224 ;;  i               1   54[BANK0 ] unsigned char 
 13225 ;;  i               1   53[BANK0 ] unsigned char 
 13226 ;;  i               1   52[BANK0 ] unsigned char 
 13227 ;;  i               1   51[BANK0 ] unsigned char 
 13228 ;;  i               1   50[BANK0 ] unsigned char 
 13229 ;;  i               1   49[BANK0 ] unsigned char 
 13230 ;;  i               1   48[BANK0 ] unsigned char 
 13231 ;;  i               1   47[BANK0 ] unsigned char 
 13232 ;;  i               1   46[BANK0 ] unsigned char 
 13233 ;;  i               2   68[BANK0 ] int 
 13234 ;; Return value:  Size  Location     Type
 13235 ;;                  1    wreg      void 
 13236 ;; Registers used:
 13237 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13238 ;; Tracked objects:
 13239 ;;		On entry : 0/0
 13240 ;;		On exit  : 0/0
 13241 ;;		Unchanged: 0/0
 13242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13245 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13246 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13247 ;;Total ram usage:       27 bytes
 13248 ;; Hardware stack levels used:    1
 13249 ;; Hardware stack levels required when called:   10
 13250 ;; This function calls:
 13251 ;;		_lcdInst
 13252 ;;		_printf
 13253 ;;		_updateServoPosition
 13254 ;; This function is called by:
 13255 ;;		_Test
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           	psect	text45
 13260  0008DA                     __ptext45:
 13261                           	opt stack 0
 13262  0008DA                     _actuatorTest:
 13263                           	opt stack 19
 13264                           
 13265                           ;Test.c: 204: int i = 0;
 13266                           
 13267                           ;incstack = 0
 13268  0008DA  0E00               	movlw	0
 13269  0008DC  0100               	movlb	0	; () banked
 13270  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13271  0008E0  0E00               	movlw	0
 13272  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13276  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13280  0008E6  0E01               	movlw	1
 13281  0008E8  ECEF  F02D         	call	_lcdInst
 13282  0008EC  0E68               	movlw	104
 13283  0008EE  0100               	movlb	0	; () banked
 13284  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13285  0008F2  0EE4               	movlw	228
 13286  0008F4                     u10597:
 13287  0008F4  2EE8               	decfsz	wreg,f,c
 13288  0008F6  D7FE               	bra	u10597
 13289  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13290  0008FA  D7FC               	bra	u10597
 13291  0008FC  F000               	nop	
 13292  0008FE  0E80               	movlw	128
 13293  000900  ECEF  F02D         	call	_lcdInst
 13294                           
 13295                           ;Test.c: 208: printf("ACTUATORS");
 13296  000904  0E90               	movlw	low STR_89
 13297  000906  0100               	movlb	0	; () banked
 13298  000908  6F8E               	movwf	printf@f& (0+255),b
 13299  00090A  0EFF               	movlw	high STR_89
 13300  00090C  0100               	movlb	0	; () banked
 13301  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13302  000910  ECED  F00D         	call	_printf	;wreg free
 13303                           
 13304                           ;Test.c: 209: lcdInst(0b11000000);;
 13305  000914  0EC0               	movlw	192
 13306  000916  ECEF  F02D         	call	_lcdInst
 13307                           
 13308                           ;Test.c: 210: printf("PUSH TO START");
 13309  00091A  0E2D               	movlw	low STR_72
 13310  00091C  0100               	movlb	0	; () banked
 13311  00091E  6F8E               	movwf	printf@f& (0+255),b
 13312  000920  0EFF               	movlw	high STR_72
 13313  000922  0100               	movlb	0	; () banked
 13314  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13315  000926  ECED  F00D         	call	_printf	;wreg free
 13316                           
 13317                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13318  00092A  0E05               	movlw	5
 13319  00092C  0100               	movlb	0	; () banked
 13320  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13321  000930  0E0F               	movlw	15
 13322  000932  0100               	movlb	0	; () banked
 13323  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13324  000936  0EF1               	movlw	241
 13325  000938                     u10607:
 13326  000938  2EE8               	decfsz	wreg,f,c
 13327  00093A  D7FE               	bra	u10607
 13328  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13329  00093E  D7FC               	bra	u10607
 13330  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13331  000942  D7FA               	bra	u10607
 13332  000944                     l1296:
 13333  000944  A281               	btfss	3969,1,c	;volatile
 13334  000946  D7FE               	goto	l1296
 13335  000948                     l1299:
 13336  000948  B281               	btfsc	3969,1,c	;volatile
 13337  00094A  D7FE               	goto	l1299
 13338                           
 13339                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13340  00094C  0E01               	movlw	1
 13341  00094E  ECEF  F02D         	call	_lcdInst
 13342  000952  0E68               	movlw	104
 13343  000954  0100               	movlb	0	; () banked
 13344  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13345  000958  0EE4               	movlw	228
 13346  00095A                     u10617:
 13347  00095A  2EE8               	decfsz	wreg,f,c
 13348  00095C  D7FE               	bra	u10617
 13349  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13350  000960  D7FC               	bra	u10617
 13351  000962  F000               	nop	
 13352  000964  0E80               	movlw	128
 13353  000966  ECEF  F02D         	call	_lcdInst
 13354                           
 13355                           ;Test.c: 219: printf("TST: DC MOTORS");
 13356  00096A  0EE5               	movlw	low STR_91
 13357  00096C  0100               	movlb	0	; () banked
 13358  00096E  6F8E               	movwf	printf@f& (0+255),b
 13359  000970  0EFE               	movlw	high STR_91
 13360  000972  0100               	movlb	0	; () banked
 13361  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13362  000976  ECED  F00D         	call	_printf	;wreg free
 13363                           
 13364                           ;Test.c: 220: lcdInst(0b11000000);;
 13365  00097A  0EC0               	movlw	192
 13366  00097C  ECEF  F02D         	call	_lcdInst
 13367                           
 13368                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13369  000980  0E03               	movlw	low STR_92
 13370  000982  0100               	movlb	0	; () banked
 13371  000984  6F8E               	movwf	printf@f& (0+255),b
 13372  000986  0EFF               	movlw	high STR_92
 13373  000988  0100               	movlb	0	; () banked
 13374  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13375  00098C  ECED  F00D         	call	_printf	;wreg free
 13376                           
 13377                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13378  000990  848A               	bsf	3978,2,c	;volatile
 13379                           
 13380                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13381  000992  0E00               	movlw	0
 13382  000994  0100               	movlb	0	; () banked
 13383  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13384  000998  0E00               	movlw	0
 13385  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13386                           
 13387                           ; BSR set to: 0
 13388  00099C  0100               	movlb	0	; () banked
 13389  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13390  0009A0  D008               	goto	l8388
 13391  0009A2  0100               	movlb	0	; () banked
 13392  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13393  0009A6  E123               	bnz	l1303
 13394  0009A8  0E05               	movlw	5
 13395  0009AA  0100               	movlb	0	; () banked
 13396  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13397  0009AE  B0D8               	btfsc	status,0,c
 13398  0009B0  D01E               	goto	l1303
 13399  0009B2                     l8388:
 13400                           
 13401                           ; BSR set to: 0
 13402  0009B2  0E00               	movlw	0
 13403  0009B4  0100               	movlb	0	; () banked
 13404  0009B6  6FAD               	movwf	actuatorTest@i_1736& (0+255),b
 13405  0009B8                     l8390:
 13406                           
 13407                           ; BSR set to: 0
 13408  0009B8  0E63               	movlw	99
 13409  0009BA  0100               	movlb	0	; () banked
 13410  0009BC  65AD               	cpfsgt	actuatorTest@i_1736& (0+255),b
 13411  0009BE  D001               	goto	l8394
 13412  0009C0  D00C               	goto	l8398
 13413  0009C2                     l8394:
 13414                           
 13415                           ; BSR set to: 0
 13416  0009C2  0E68               	movlw	104
 13417  0009C4  0100               	movlb	0	; () banked
 13418  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13419  0009C8  0EE4               	movlw	228
 13420  0009CA                     u10627:
 13421  0009CA  2EE8               	decfsz	wreg,f,c
 13422  0009CC  D7FE               	bra	u10627
 13423  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13424  0009D0  D7FC               	bra	u10627
 13425  0009D2  F000               	nop	
 13426  0009D4  0100               	movlb	0	; () banked
 13427  0009D6  2BAD               	incf	actuatorTest@i_1736& (0+255),f,b
 13428  0009D8  D7EF               	goto	l8390
 13429  0009DA                     l8398:
 13430                           
 13431                           ; BSR set to: 0
 13432  0009DA  0100               	movlb	0	; () banked
 13433  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13434  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13435                           
 13436                           ; BSR set to: 0
 13437  0009E0  0100               	movlb	0	; () banked
 13438  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13439  0009E4  D7E6               	goto	l8388
 13440  0009E6  0100               	movlb	0	; () banked
 13441  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13442  0009EA  E101               	bnz	u7260
 13443  0009EC  D7DD               	goto	L13
 13444  0009EE                     u7260:
 13445  0009EE                     l1303:
 13446                           
 13447                           ; BSR set to: 0
 13448                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13449  0009EE  948A               	bcf	3978,2,c	;volatile
 13450                           
 13451                           ; BSR set to: 0
 13452                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13453  0009F0  0E01               	movlw	1
 13454  0009F2  ECEF  F02D         	call	_lcdInst
 13455  0009F6  0E68               	movlw	104
 13456  0009F8  0100               	movlb	0	; () banked
 13457  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13458  0009FC  0EE4               	movlw	228
 13459  0009FE                     u10637:
 13460  0009FE  2EE8               	decfsz	wreg,f,c
 13461  000A00  D7FE               	bra	u10637
 13462  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13463  000A04  D7FC               	bra	u10637
 13464  000A06  F000               	nop	
 13465  000A08  0E80               	movlw	128
 13466  000A0A  ECEF  F02D         	call	_lcdInst
 13467                           
 13468                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13469  000A0E  0E52               	movlw	low STR_93
 13470  000A10  0100               	movlb	0	; () banked
 13471  000A12  6F8E               	movwf	printf@f& (0+255),b
 13472  000A14  0EFC               	movlw	high STR_93
 13473  000A16  0100               	movlb	0	; () banked
 13474  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13475  000A1A  ECED  F00D         	call	_printf	;wreg free
 13476                           
 13477                           ;Test.c: 232: lcdInst(0b11000000);;
 13478  000A1E  0EC0               	movlw	192
 13479  000A20  ECEF  F02D         	call	_lcdInst
 13480                           
 13481                           ;Test.c: 233: printf("PIN RA3...");
 13482  000A24  0E70               	movlw	low STR_94
 13483  000A26  0100               	movlb	0	; () banked
 13484  000A28  6F8E               	movwf	printf@f& (0+255),b
 13485  000A2A  0EFF               	movlw	high STR_94
 13486  000A2C  0100               	movlb	0	; () banked
 13487  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13488  000A30  ECED  F00D         	call	_printf	;wreg free
 13489                           
 13490                           ;Test.c: 234: for(i=0;i<5;i++){
 13491  000A34  0E00               	movlw	0
 13492  000A36  0100               	movlb	0	; () banked
 13493  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13494  000A3A  0E00               	movlw	0
 13495  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13496                           
 13497                           ; BSR set to: 0
 13498  000A3E  0100               	movlb	0	; () banked
 13499  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13500  000A42  D008               	goto	l1306
 13501  000A44  0100               	movlb	0	; () banked
 13502  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13503  000A48  E12C               	bnz	l1307
 13504  000A4A  0E05               	movlw	5
 13505  000A4C  0100               	movlb	0	; () banked
 13506  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13507  000A50  B0D8               	btfsc	status,0,c
 13508  000A52  D027               	goto	l1307
 13509  000A54                     l1306:
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13513  000A54  8689               	bsf	3977,3,c	;volatile
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13517  000A56  0E0D               	movlw	13
 13518  000A58  0100               	movlb	0	; () banked
 13519  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13520  000A5C  0E2D               	movlw	45
 13521  000A5E  0100               	movlb	0	; () banked
 13522  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13523  000A62  0ED7               	movlw	215
 13524  000A64                     u10647:
 13525  000A64  2EE8               	decfsz	wreg,f,c
 13526  000A66  D7FE               	bra	u10647
 13527  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13528  000A6A  D7FC               	bra	u10647
 13529  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13530  000A6E  D7FA               	bra	u10647
 13531  000A70  D000               	nop2	
 13532                           
 13533                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13534  000A72  9689               	bcf	3977,3,c	;volatile
 13535                           
 13536                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13537  000A74  0E1D               	movlw	29
 13538  000A76  0100               	movlb	0	; () banked
 13539  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13540  000A7A  0E69               	movlw	105
 13541  000A7C  0100               	movlb	0	; () banked
 13542  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13543  000A80  0EA5               	movlw	165
 13544  000A82                     u10657:
 13545  000A82  2EE8               	decfsz	wreg,f,c
 13546  000A84  D7FE               	bra	u10657
 13547  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13548  000A88  D7FC               	bra	u10657
 13549  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13550  000A8C  D7FA               	bra	u10657
 13551  000A8E  0100               	movlb	0	; () banked
 13552  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13553  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13554  000A94  0100               	movlb	0	; () banked
 13555  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13556  000A98  D7DD               	goto	l1306
 13557  000A9A  0100               	movlb	0	; () banked
 13558  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13559  000A9E  E101               	bnz	u7280
 13560  000AA0  D7D4               	goto	L14
 13561  000AA2                     u7280:
 13562  000AA2                     l1307:
 13563                           
 13564                           ; BSR set to: 0
 13565                           ;Test.c: 239: }
 13566                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13567  000AA2  9689               	bcf	3977,3,c	;volatile
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13571  000AA4  0E01               	movlw	1
 13572  000AA6  ECEF  F02D         	call	_lcdInst
 13573  000AAA  0E68               	movlw	104
 13574  000AAC  0100               	movlb	0	; () banked
 13575  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13576  000AB0  0EE4               	movlw	228
 13577  000AB2                     u10667:
 13578  000AB2  2EE8               	decfsz	wreg,f,c
 13579  000AB4  D7FE               	bra	u10667
 13580  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13581  000AB8  D7FC               	bra	u10667
 13582  000ABA  F000               	nop	
 13583  000ABC  0E80               	movlw	128
 13584  000ABE  ECEF  F02D         	call	_lcdInst
 13585                           
 13586                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13587  000AC2  0E63               	movlw	low STR_95
 13588  000AC4  0100               	movlb	0	; () banked
 13589  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13590  000AC8  0EFC               	movlw	high STR_95
 13591  000ACA  0100               	movlb	0	; () banked
 13592  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13593  000ACE  ECED  F00D         	call	_printf	;wreg free
 13594                           
 13595                           ;Test.c: 248: lcdInst(0b11000000);;
 13596  000AD2  0EC0               	movlw	192
 13597  000AD4  ECEF  F02D         	call	_lcdInst
 13598                           
 13599                           ;Test.c: 249: printf("PIN RA4...");
 13600  000AD8  0E7B               	movlw	low STR_96
 13601  000ADA  0100               	movlb	0	; () banked
 13602  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13603  000ADE  0EFF               	movlw	high STR_96
 13604  000AE0  0100               	movlb	0	; () banked
 13605  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13606  000AE4  ECED  F00D         	call	_printf	;wreg free
 13607                           
 13608                           ;Test.c: 250: for(i=0;i<5;i++){
 13609  000AE8  0E00               	movlw	0
 13610  000AEA  0100               	movlb	0	; () banked
 13611  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13612  000AEE  0E00               	movlw	0
 13613  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13614                           
 13615                           ; BSR set to: 0
 13616  000AF2  0100               	movlb	0	; () banked
 13617  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13618  000AF6  D008               	goto	l1308
 13619  000AF8  0100               	movlb	0	; () banked
 13620  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13621  000AFC  E12C               	bnz	l1309
 13622  000AFE  0E05               	movlw	5
 13623  000B00  0100               	movlb	0	; () banked
 13624  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13625  000B04  B0D8               	btfsc	status,0,c
 13626  000B06  D027               	goto	l1309
 13627  000B08                     l1308:
 13628                           
 13629                           ; BSR set to: 0
 13630                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13631  000B08  8889               	bsf	3977,4,c	;volatile
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13635  000B0A  0E0D               	movlw	13
 13636  000B0C  0100               	movlb	0	; () banked
 13637  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13638  000B10  0E2D               	movlw	45
 13639  000B12  0100               	movlb	0	; () banked
 13640  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13641  000B16  0ED7               	movlw	215
 13642  000B18                     u10677:
 13643  000B18  2EE8               	decfsz	wreg,f,c
 13644  000B1A  D7FE               	bra	u10677
 13645  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13646  000B1E  D7FC               	bra	u10677
 13647  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13648  000B22  D7FA               	bra	u10677
 13649  000B24  D000               	nop2	
 13650                           
 13651                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13652  000B26  9889               	bcf	3977,4,c	;volatile
 13653                           
 13654                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13655  000B28  0E1D               	movlw	29
 13656  000B2A  0100               	movlb	0	; () banked
 13657  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13658  000B2E  0E69               	movlw	105
 13659  000B30  0100               	movlb	0	; () banked
 13660  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13661  000B34  0EA5               	movlw	165
 13662  000B36                     u10687:
 13663  000B36  2EE8               	decfsz	wreg,f,c
 13664  000B38  D7FE               	bra	u10687
 13665  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13666  000B3C  D7FC               	bra	u10687
 13667  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13668  000B40  D7FA               	bra	u10687
 13669  000B42  0100               	movlb	0	; () banked
 13670  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13671  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13672  000B48  0100               	movlb	0	; () banked
 13673  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13674  000B4C  D7DD               	goto	l1308
 13675  000B4E  0100               	movlb	0	; () banked
 13676  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13677  000B52  E101               	bnz	u7300
 13678  000B54  D7D4               	goto	L15
 13679  000B56                     u7300:
 13680  000B56                     l1309:
 13681                           
 13682                           ; BSR set to: 0
 13683                           ;Test.c: 255: }
 13684                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13685  000B56  9889               	bcf	3977,4,c	;volatile
 13686                           
 13687                           ; BSR set to: 0
 13688                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13689  000B58  0E01               	movlw	1
 13690  000B5A  ECEF  F02D         	call	_lcdInst
 13691  000B5E  0E68               	movlw	104
 13692  000B60  0100               	movlb	0	; () banked
 13693  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13694  000B64  0EE4               	movlw	228
 13695  000B66                     u10697:
 13696  000B66  2EE8               	decfsz	wreg,f,c
 13697  000B68  D7FE               	bra	u10697
 13698  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13699  000B6C  D7FC               	bra	u10697
 13700  000B6E  F000               	nop	
 13701  000B70  0E80               	movlw	128
 13702  000B72  ECEF  F02D         	call	_lcdInst
 13703                           
 13704                           ;Test.c: 260: machine_state = Sorting_state;
 13705  000B76  0E01               	movlw	1
 13706  000B78  0100               	movlb	0	; () banked
 13707  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;Test.c: 261: was_low_1 = 0;
 13711  000B7C  0E00               	movlw	0
 13712  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13713  000B80  0E00               	movlw	0
 13714  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;Test.c: 262: was_low_1 = 0;
 13718  000B84  0E00               	movlw	0
 13719  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13720  000B88  0E00               	movlw	0
 13721  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13722                           
 13723                           ; BSR set to: 0
 13724                           ;Test.c: 269: printf("TST: PAN SERVO");
 13725  000B8C  0EC7               	movlw	low STR_97
 13726  000B8E  0100               	movlb	0	; () banked
 13727  000B90  6F8E               	movwf	printf@f& (0+255),b
 13728  000B92  0EFE               	movlw	high STR_97
 13729  000B94  0100               	movlb	0	; () banked
 13730  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13731  000B98  ECED  F00D         	call	_printf	;wreg free
 13732                           
 13733                           ;Test.c: 270: lcdInst(0b11000000);;
 13734  000B9C  0EC0               	movlw	192
 13735  000B9E  ECEF  F02D         	call	_lcdInst
 13736                           
 13737                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13738  000BA2  0EB9               	movlw	low STR_98
 13739  000BA4  0100               	movlb	0	; () banked
 13740  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13741  000BA8  0EFB               	movlw	high STR_98
 13742  000BAA  0100               	movlb	0	; () banked
 13743  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13744  000BAE  ECED  F00D         	call	_printf	;wreg free
 13745                           
 13746                           ;Test.c: 272: updateServoPosition(1200, 1);
 13747  000BB2  0E04               	movlw	4
 13748  000BB4  0100               	movlb	0	; () banked
 13749  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13750  000BB8  0EB0               	movlw	176
 13751  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13752  000BBC  0E00               	movlw	0
 13753  000BBE  0100               	movlb	0	; () banked
 13754  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13755  000BC2  0E01               	movlw	1
 13756  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13757  000BC6  EC12  F027         	call	_updateServoPosition	;wreg free
 13758                           
 13759                           ;Test.c: 273: TMR1ON = 1;
 13760  000BCA  80CD               	bsf	4045,0,c	;volatile
 13761                           
 13762                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13763  000BCC  0E00               	movlw	0
 13764  000BCE  0100               	movlb	0	; () banked
 13765  000BD0  6FAE               	movwf	actuatorTest@i_1743& (0+255),b
 13766  000BD2                     l8474:
 13767                           
 13768                           ; BSR set to: 0
 13769  000BD2  0E63               	movlw	99
 13770  000BD4  0100               	movlb	0	; () banked
 13771  000BD6  65AE               	cpfsgt	actuatorTest@i_1743& (0+255),b
 13772  000BD8  D001               	goto	l8478
 13773  000BDA  D00C               	goto	l8482
 13774  000BDC                     l8478:
 13775                           
 13776                           ; BSR set to: 0
 13777  000BDC  0E68               	movlw	104
 13778  000BDE  0100               	movlb	0	; () banked
 13779  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13780  000BE2  0EE4               	movlw	228
 13781  000BE4                     u10707:
 13782  000BE4  2EE8               	decfsz	wreg,f,c
 13783  000BE6  D7FE               	bra	u10707
 13784  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13785  000BEA  D7FC               	bra	u10707
 13786  000BEC  F000               	nop	
 13787  000BEE  0100               	movlb	0	; () banked
 13788  000BF0  2BAE               	incf	actuatorTest@i_1743& (0+255),f,b
 13789  000BF2  D7EF               	goto	l8474
 13790  000BF4                     l8482:
 13791                           
 13792                           ; BSR set to: 0
 13793  000BF4  0E00               	movlw	0
 13794  000BF6  0100               	movlb	0	; () banked
 13795  000BF8  6FAF               	movwf	actuatorTest@i_1744& (0+255),b
 13796  000BFA                     l8484:
 13797                           
 13798                           ; BSR set to: 0
 13799  000BFA  0E63               	movlw	99
 13800  000BFC  0100               	movlb	0	; () banked
 13801  000BFE  65AF               	cpfsgt	actuatorTest@i_1744& (0+255),b
 13802  000C00  D001               	goto	l8488
 13803  000C02  D00C               	goto	l8492
 13804  000C04                     l8488:
 13805                           
 13806                           ; BSR set to: 0
 13807  000C04  0E68               	movlw	104
 13808  000C06  0100               	movlb	0	; () banked
 13809  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13810  000C0A  0EE4               	movlw	228
 13811  000C0C                     u10717:
 13812  000C0C  2EE8               	decfsz	wreg,f,c
 13813  000C0E  D7FE               	bra	u10717
 13814  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13815  000C12  D7FC               	bra	u10717
 13816  000C14  F000               	nop	
 13817  000C16  0100               	movlb	0	; () banked
 13818  000C18  2BAF               	incf	actuatorTest@i_1744& (0+255),f,b
 13819  000C1A  D7EF               	goto	l8484
 13820  000C1C                     l8492:
 13821                           
 13822                           ; BSR set to: 0
 13823                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13824  000C1C  0E80               	movlw	128
 13825  000C1E  ECEF  F02D         	call	_lcdInst
 13826  000C22  0EC0               	movlw	192
 13827  000C24  ECEF  F02D         	call	_lcdInst
 13828                           
 13829                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13830  000C28  0EA8               	movlw	low STR_99
 13831  000C2A  0100               	movlb	0	; () banked
 13832  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13833  000C2E  0EFB               	movlw	high STR_99
 13834  000C30  0100               	movlb	0	; () banked
 13835  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13836  000C34  ECED  F00D         	call	_printf	;wreg free
 13837                           
 13838                           ;Test.c: 278: updateServoPosition(500, 1);
 13839  000C38  0E01               	movlw	1
 13840  000C3A  0100               	movlb	0	; () banked
 13841  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13842  000C3E  0EF4               	movlw	244
 13843  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13844  000C42  0E00               	movlw	0
 13845  000C44  0100               	movlb	0	; () banked
 13846  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13847  000C48  0E01               	movlw	1
 13848  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13849  000C4C  EC12  F027         	call	_updateServoPosition	;wreg free
 13850                           
 13851                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13852  000C50  0E00               	movlw	0
 13853  000C52  0100               	movlb	0	; () banked
 13854  000C54  6FB0               	movwf	actuatorTest@i_1746& (0+255),b
 13855  000C56                     l8500:
 13856                           
 13857                           ; BSR set to: 0
 13858  000C56  0E63               	movlw	99
 13859  000C58  0100               	movlb	0	; () banked
 13860  000C5A  65B0               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13861  000C5C  D001               	goto	l8504
 13862  000C5E  D00C               	goto	l8508
 13863  000C60                     l8504:
 13864                           
 13865                           ; BSR set to: 0
 13866  000C60  0E68               	movlw	104
 13867  000C62  0100               	movlb	0	; () banked
 13868  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13869  000C66  0EE4               	movlw	228
 13870  000C68                     u10727:
 13871  000C68  2EE8               	decfsz	wreg,f,c
 13872  000C6A  D7FE               	bra	u10727
 13873  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13874  000C6E  D7FC               	bra	u10727
 13875  000C70  F000               	nop	
 13876  000C72  0100               	movlb	0	; () banked
 13877  000C74  2BB0               	incf	actuatorTest@i_1746& (0+255),f,b
 13878  000C76  D7EF               	goto	l8500
 13879  000C78                     l8508:
 13880                           
 13881                           ; BSR set to: 0
 13882  000C78  0E00               	movlw	0
 13883  000C7A  0100               	movlb	0	; () banked
 13884  000C7C  6FB1               	movwf	actuatorTest@i_1747& (0+255),b
 13885  000C7E                     l8510:
 13886                           
 13887                           ; BSR set to: 0
 13888  000C7E  0E63               	movlw	99
 13889  000C80  0100               	movlb	0	; () banked
 13890  000C82  65B1               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13891  000C84  D001               	goto	l8514
 13892  000C86  D00C               	goto	l8518
 13893  000C88                     l8514:
 13894                           
 13895                           ; BSR set to: 0
 13896  000C88  0E68               	movlw	104
 13897  000C8A  0100               	movlb	0	; () banked
 13898  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13899  000C8E  0EE4               	movlw	228
 13900  000C90                     u10737:
 13901  000C90  2EE8               	decfsz	wreg,f,c
 13902  000C92  D7FE               	bra	u10737
 13903  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13904  000C96  D7FC               	bra	u10737
 13905  000C98  F000               	nop	
 13906  000C9A  0100               	movlb	0	; () banked
 13907  000C9C  2BB1               	incf	actuatorTest@i_1747& (0+255),f,b
 13908  000C9E  D7EF               	goto	l8510
 13909  000CA0                     l8518:
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13913  000CA0  0E80               	movlw	128
 13914  000CA2  ECEF  F02D         	call	_lcdInst
 13915  000CA6  0EC0               	movlw	192
 13916  000CA8  ECEF  F02D         	call	_lcdInst
 13917                           
 13918                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13919  000CAC  0E86               	movlw	low STR_100
 13920  000CAE  0100               	movlb	0	; () banked
 13921  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13922  000CB2  0EFB               	movlw	high STR_100
 13923  000CB4  0100               	movlb	0	; () banked
 13924  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13925  000CB8  ECED  F00D         	call	_printf	;wreg free
 13926                           
 13927                           ;Test.c: 283: updateServoPosition(2400, 1);
 13928  000CBC  0E09               	movlw	9
 13929  000CBE  0100               	movlb	0	; () banked
 13930  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13931  000CC2  0E60               	movlw	96
 13932  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13933  000CC6  0E00               	movlw	0
 13934  000CC8  0100               	movlb	0	; () banked
 13935  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13936  000CCC  0E01               	movlw	1
 13937  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13938  000CD0  EC12  F027         	call	_updateServoPosition	;wreg free
 13939                           
 13940                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13941  000CD4  0E00               	movlw	0
 13942  000CD6  0100               	movlb	0	; () banked
 13943  000CD8  6FB2               	movwf	actuatorTest@i_1749& (0+255),b
 13944  000CDA                     l8526:
 13945                           
 13946                           ; BSR set to: 0
 13947  000CDA  0E63               	movlw	99
 13948  000CDC  0100               	movlb	0	; () banked
 13949  000CDE  65B2               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13950  000CE0  D001               	goto	l8530
 13951  000CE2  D00C               	goto	l8534
 13952  000CE4                     l8530:
 13953                           
 13954                           ; BSR set to: 0
 13955  000CE4  0E68               	movlw	104
 13956  000CE6  0100               	movlb	0	; () banked
 13957  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13958  000CEA  0EE4               	movlw	228
 13959  000CEC                     u10747:
 13960  000CEC  2EE8               	decfsz	wreg,f,c
 13961  000CEE  D7FE               	bra	u10747
 13962  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13963  000CF2  D7FC               	bra	u10747
 13964  000CF4  F000               	nop	
 13965  000CF6  0100               	movlb	0	; () banked
 13966  000CF8  2BB2               	incf	actuatorTest@i_1749& (0+255),f,b
 13967  000CFA  D7EF               	goto	l8526
 13968  000CFC                     l8534:
 13969                           
 13970                           ; BSR set to: 0
 13971  000CFC  0E00               	movlw	0
 13972  000CFE  0100               	movlb	0	; () banked
 13973  000D00  6FB3               	movwf	actuatorTest@i_1750& (0+255),b
 13974  000D02                     l8536:
 13975                           
 13976                           ; BSR set to: 0
 13977  000D02  0E63               	movlw	99
 13978  000D04  0100               	movlb	0	; () banked
 13979  000D06  65B3               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13980  000D08  D001               	goto	l8540
 13981  000D0A  D00C               	goto	l8544
 13982  000D0C                     l8540:
 13983                           
 13984                           ; BSR set to: 0
 13985  000D0C  0E68               	movlw	104
 13986  000D0E  0100               	movlb	0	; () banked
 13987  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13988  000D12  0EE4               	movlw	228
 13989  000D14                     u10757:
 13990  000D14  2EE8               	decfsz	wreg,f,c
 13991  000D16  D7FE               	bra	u10757
 13992  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13993  000D1A  D7FC               	bra	u10757
 13994  000D1C  F000               	nop	
 13995  000D1E  0100               	movlb	0	; () banked
 13996  000D20  2BB3               	incf	actuatorTest@i_1750& (0+255),f,b
 13997  000D22  D7EF               	goto	l8536
 13998  000D24                     l8544:
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14002  000D24  0E80               	movlw	128
 14003  000D26  ECEF  F02D         	call	_lcdInst
 14004  000D2A  0EC0               	movlw	192
 14005  000D2C  ECEF  F02D         	call	_lcdInst
 14006                           
 14007                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 14008  000D30  0E0E               	movlw	low STR_101
 14009  000D32  0100               	movlb	0	; () banked
 14010  000D34  6F8E               	movwf	printf@f& (0+255),b
 14011  000D36  0EFC               	movlw	high STR_101
 14012  000D38  0100               	movlb	0	; () banked
 14013  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14014  000D3C  ECED  F00D         	call	_printf	;wreg free
 14015                           
 14016                           ;Test.c: 288: updateServoPosition(1670, 1);
 14017  000D40  0E06               	movlw	6
 14018  000D42  0100               	movlb	0	; () banked
 14019  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14020  000D46  0E86               	movlw	134
 14021  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14022  000D4A  0E00               	movlw	0
 14023  000D4C  0100               	movlb	0	; () banked
 14024  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14025  000D50  0E01               	movlw	1
 14026  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14027  000D54  EC12  F027         	call	_updateServoPosition	;wreg free
 14028                           
 14029                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14030  000D58  0E00               	movlw	0
 14031  000D5A  0100               	movlb	0	; () banked
 14032  000D5C  6FB4               	movwf	actuatorTest@i_1752& (0+255),b
 14033  000D5E                     l8552:
 14034                           
 14035                           ; BSR set to: 0
 14036  000D5E  0E63               	movlw	99
 14037  000D60  0100               	movlb	0	; () banked
 14038  000D62  65B4               	cpfsgt	actuatorTest@i_1752& (0+255),b
 14039  000D64  D001               	goto	l8556
 14040  000D66  D00C               	goto	l8560
 14041  000D68                     l8556:
 14042                           
 14043                           ; BSR set to: 0
 14044  000D68  0E68               	movlw	104
 14045  000D6A  0100               	movlb	0	; () banked
 14046  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14047  000D6E  0EE4               	movlw	228
 14048  000D70                     u10767:
 14049  000D70  2EE8               	decfsz	wreg,f,c
 14050  000D72  D7FE               	bra	u10767
 14051  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14052  000D76  D7FC               	bra	u10767
 14053  000D78  F000               	nop	
 14054  000D7A  0100               	movlb	0	; () banked
 14055  000D7C  2BB4               	incf	actuatorTest@i_1752& (0+255),f,b
 14056  000D7E  D7EF               	goto	l8552
 14057  000D80                     l8560:
 14058                           
 14059                           ; BSR set to: 0
 14060  000D80  0E00               	movlw	0
 14061  000D82  0100               	movlb	0	; () banked
 14062  000D84  6FB5               	movwf	actuatorTest@i_1753& (0+255),b
 14063  000D86                     l8562:
 14064                           
 14065                           ; BSR set to: 0
 14066  000D86  0E63               	movlw	99
 14067  000D88  0100               	movlb	0	; () banked
 14068  000D8A  65B5               	cpfsgt	actuatorTest@i_1753& (0+255),b
 14069  000D8C  D001               	goto	l8566
 14070  000D8E  D00C               	goto	l8570
 14071  000D90                     l8566:
 14072                           
 14073                           ; BSR set to: 0
 14074  000D90  0E68               	movlw	104
 14075  000D92  0100               	movlb	0	; () banked
 14076  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14077  000D96  0EE4               	movlw	228
 14078  000D98                     u10777:
 14079  000D98  2EE8               	decfsz	wreg,f,c
 14080  000D9A  D7FE               	bra	u10777
 14081  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14082  000D9E  D7FC               	bra	u10777
 14083  000DA0  F000               	nop	
 14084  000DA2  0100               	movlb	0	; () banked
 14085  000DA4  2BB5               	incf	actuatorTest@i_1753& (0+255),f,b
 14086  000DA6  D7EF               	goto	l8562
 14087  000DA8                     l8570:
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14091  000DA8  0E80               	movlw	128
 14092  000DAA  ECEF  F02D         	call	_lcdInst
 14093  000DAE  0EC0               	movlw	192
 14094  000DB0  ECEF  F02D         	call	_lcdInst
 14095                           
 14096                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14097  000DB4  0E1F               	movlw	low STR_102
 14098  000DB6  0100               	movlb	0	; () banked
 14099  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14100  000DBA  0EFC               	movlw	high STR_102
 14101  000DBC  0100               	movlb	0	; () banked
 14102  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14103  000DC0  ECED  F00D         	call	_printf	;wreg free
 14104                           
 14105                           ;Test.c: 293: updateServoPosition(850, 1);
 14106  000DC4  0E03               	movlw	3
 14107  000DC6  0100               	movlb	0	; () banked
 14108  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14109  000DCA  0E52               	movlw	82
 14110  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14111  000DCE  0E00               	movlw	0
 14112  000DD0  0100               	movlb	0	; () banked
 14113  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14114  000DD4  0E01               	movlw	1
 14115  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14116  000DD8  EC12  F027         	call	_updateServoPosition	;wreg free
 14117                           
 14118                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14119  000DDC  0E00               	movlw	0
 14120  000DDE  0100               	movlb	0	; () banked
 14121  000DE0  6FB6               	movwf	actuatorTest@i_1755& (0+255),b
 14122  000DE2                     l8578:
 14123                           
 14124                           ; BSR set to: 0
 14125  000DE2  0E63               	movlw	99
 14126  000DE4  0100               	movlb	0	; () banked
 14127  000DE6  65B6               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14128  000DE8  D001               	goto	l8582
 14129  000DEA  D00C               	goto	l8586
 14130  000DEC                     l8582:
 14131                           
 14132                           ; BSR set to: 0
 14133  000DEC  0E68               	movlw	104
 14134  000DEE  0100               	movlb	0	; () banked
 14135  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14136  000DF2  0EE4               	movlw	228
 14137  000DF4                     u10787:
 14138  000DF4  2EE8               	decfsz	wreg,f,c
 14139  000DF6  D7FE               	bra	u10787
 14140  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14141  000DFA  D7FC               	bra	u10787
 14142  000DFC  F000               	nop	
 14143  000DFE  0100               	movlb	0	; () banked
 14144  000E00  2BB6               	incf	actuatorTest@i_1755& (0+255),f,b
 14145  000E02  D7EF               	goto	l8578
 14146  000E04                     l8586:
 14147                           
 14148                           ; BSR set to: 0
 14149  000E04  0E00               	movlw	0
 14150  000E06  0100               	movlb	0	; () banked
 14151  000E08  6FB7               	movwf	actuatorTest@i_1756& (0+255),b
 14152  000E0A                     l8588:
 14153                           
 14154                           ; BSR set to: 0
 14155  000E0A  0E63               	movlw	99
 14156  000E0C  0100               	movlb	0	; () banked
 14157  000E0E  65B7               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14158  000E10  D001               	goto	l8592
 14159  000E12  D00C               	goto	l8596
 14160  000E14                     l8592:
 14161                           
 14162                           ; BSR set to: 0
 14163  000E14  0E68               	movlw	104
 14164  000E16  0100               	movlb	0	; () banked
 14165  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14166  000E1A  0EE4               	movlw	228
 14167  000E1C                     u10797:
 14168  000E1C  2EE8               	decfsz	wreg,f,c
 14169  000E1E  D7FE               	bra	u10797
 14170  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14171  000E22  D7FC               	bra	u10797
 14172  000E24  F000               	nop	
 14173  000E26  0100               	movlb	0	; () banked
 14174  000E28  2BB7               	incf	actuatorTest@i_1756& (0+255),f,b
 14175  000E2A  D7EF               	goto	l8588
 14176  000E2C                     l8596:
 14177                           
 14178                           ; BSR set to: 0
 14179                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14180  000E2C  0E80               	movlw	128
 14181  000E2E  ECEF  F02D         	call	_lcdInst
 14182  000E32  0EC0               	movlw	192
 14183  000E34  ECEF  F02D         	call	_lcdInst
 14184                           
 14185                           ;Test.c: 297: printf("MID -- 2s       ");
 14186  000E38  0E64               	movlw	low STR_103
 14187  000E3A  0100               	movlb	0	; () banked
 14188  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14189  000E3E  0EFB               	movlw	high STR_103
 14190  000E40  0100               	movlb	0	; () banked
 14191  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14192  000E44  ECED  F00D         	call	_printf	;wreg free
 14193                           
 14194                           ;Test.c: 298: updateServoPosition(1200, 1);
 14195  000E48  0E04               	movlw	4
 14196  000E4A  0100               	movlb	0	; () banked
 14197  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14198  000E4E  0EB0               	movlw	176
 14199  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14200  000E52  0E00               	movlw	0
 14201  000E54  0100               	movlb	0	; () banked
 14202  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14203  000E58  0E01               	movlw	1
 14204  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14205  000E5C  EC12  F027         	call	_updateServoPosition	;wreg free
 14206                           
 14207                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14208  000E60  0E00               	movlw	0
 14209  000E62  0100               	movlb	0	; () banked
 14210  000E64  6FB8               	movwf	actuatorTest@i_1758& (0+255),b
 14211  000E66                     l8604:
 14212                           
 14213                           ; BSR set to: 0
 14214  000E66  0E63               	movlw	99
 14215  000E68  0100               	movlb	0	; () banked
 14216  000E6A  65B8               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14217  000E6C  D001               	goto	l8608
 14218  000E6E  D00C               	goto	l8612
 14219  000E70                     l8608:
 14220                           
 14221                           ; BSR set to: 0
 14222  000E70  0E68               	movlw	104
 14223  000E72  0100               	movlb	0	; () banked
 14224  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14225  000E76  0EE4               	movlw	228
 14226  000E78                     u10807:
 14227  000E78  2EE8               	decfsz	wreg,f,c
 14228  000E7A  D7FE               	bra	u10807
 14229  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14230  000E7E  D7FC               	bra	u10807
 14231  000E80  F000               	nop	
 14232  000E82  0100               	movlb	0	; () banked
 14233  000E84  2BB8               	incf	actuatorTest@i_1758& (0+255),f,b
 14234  000E86  D7EF               	goto	l8604
 14235  000E88                     l8612:
 14236                           
 14237                           ; BSR set to: 0
 14238  000E88  0E00               	movlw	0
 14239  000E8A  0100               	movlb	0	; () banked
 14240  000E8C  6FB9               	movwf	actuatorTest@i_1759& (0+255),b
 14241  000E8E                     l8614:
 14242                           
 14243                           ; BSR set to: 0
 14244  000E8E  0E63               	movlw	99
 14245  000E90  0100               	movlb	0	; () banked
 14246  000E92  65B9               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14247  000E94  D001               	goto	l8618
 14248  000E96  D00C               	goto	l1333
 14249  000E98                     l8618:
 14250                           
 14251                           ; BSR set to: 0
 14252  000E98  0E68               	movlw	104
 14253  000E9A  0100               	movlb	0	; () banked
 14254  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14255  000E9E  0EE4               	movlw	228
 14256  000EA0                     u10817:
 14257  000EA0  2EE8               	decfsz	wreg,f,c
 14258  000EA2  D7FE               	bra	u10817
 14259  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14260  000EA6  D7FC               	bra	u10817
 14261  000EA8  F000               	nop	
 14262  000EAA  0100               	movlb	0	; () banked
 14263  000EAC  2BB9               	incf	actuatorTest@i_1759& (0+255),f,b
 14264  000EAE  D7EF               	goto	l8614
 14265  000EB0                     l1333:
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;Test.c: 300: TMR1ON = 0;
 14269  000EB0  90CD               	bcf	4045,0,c	;volatile
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;Test.c: 307: printf("TST: TILT SERVO");
 14273  000EB2  0E2D               	movlw	low STR_104
 14274  000EB4  0100               	movlb	0	; () banked
 14275  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14276  000EB8  0EFE               	movlw	high STR_104
 14277  000EBA  0100               	movlb	0	; () banked
 14278  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14279  000EBE  ECED  F00D         	call	_printf	;wreg free
 14280                           
 14281                           ;Test.c: 308: lcdInst(0b11000000);;
 14282  000EC2  0EC0               	movlw	192
 14283  000EC4  ECEF  F02D         	call	_lcdInst
 14284                           
 14285                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14286  000EC8  0E97               	movlw	low STR_105
 14287  000ECA  0100               	movlb	0	; () banked
 14288  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14289  000ECE  0EFB               	movlw	high STR_105
 14290  000ED0  0100               	movlb	0	; () banked
 14291  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14292  000ED4  ECED  F00D         	call	_printf	;wreg free
 14293                           
 14294                           ;Test.c: 310: updateServoPosition(1050, 3);
 14295  000ED8  0E04               	movlw	4
 14296  000EDA  0100               	movlb	0	; () banked
 14297  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14298  000EDE  0E1A               	movlw	26
 14299  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14300  000EE2  0E00               	movlw	0
 14301  000EE4  0100               	movlb	0	; () banked
 14302  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14303  000EE8  0E03               	movlw	3
 14304  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14305  000EEC  EC12  F027         	call	_updateServoPosition	;wreg free
 14306                           
 14307                           ;Test.c: 311: TMR3ON = 1;
 14308  000EF0  80B1               	bsf	4017,0,c	;volatile
 14309                           
 14310                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14311  000EF2  0E00               	movlw	0
 14312  000EF4  0100               	movlb	0	; () banked
 14313  000EF6  6FBA               	movwf	actuatorTest@i_1762& (0+255),b
 14314  000EF8                     l8632:
 14315                           
 14316                           ; BSR set to: 0
 14317  000EF8  0E63               	movlw	99
 14318  000EFA  0100               	movlb	0	; () banked
 14319  000EFC  65BA               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14320  000EFE  D001               	goto	l8636
 14321  000F00  D00C               	goto	l8640
 14322  000F02                     l8636:
 14323                           
 14324                           ; BSR set to: 0
 14325  000F02  0E68               	movlw	104
 14326  000F04  0100               	movlb	0	; () banked
 14327  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14328  000F08  0EE4               	movlw	228
 14329  000F0A                     u10827:
 14330  000F0A  2EE8               	decfsz	wreg,f,c
 14331  000F0C  D7FE               	bra	u10827
 14332  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14333  000F10  D7FC               	bra	u10827
 14334  000F12  F000               	nop	
 14335  000F14  0100               	movlb	0	; () banked
 14336  000F16  2BBA               	incf	actuatorTest@i_1762& (0+255),f,b
 14337  000F18  D7EF               	goto	l8632
 14338  000F1A                     l8640:
 14339                           
 14340                           ; BSR set to: 0
 14341  000F1A  0E00               	movlw	0
 14342  000F1C  0100               	movlb	0	; () banked
 14343  000F1E  6FBB               	movwf	actuatorTest@i_1763& (0+255),b
 14344  000F20                     l8642:
 14345                           
 14346                           ; BSR set to: 0
 14347  000F20  0E63               	movlw	99
 14348  000F22  0100               	movlb	0	; () banked
 14349  000F24  65BB               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14350  000F26  D001               	goto	l8646
 14351  000F28  D00C               	goto	l8650
 14352  000F2A                     l8646:
 14353                           
 14354                           ; BSR set to: 0
 14355  000F2A  0E68               	movlw	104
 14356  000F2C  0100               	movlb	0	; () banked
 14357  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14358  000F30  0EE4               	movlw	228
 14359  000F32                     u10837:
 14360  000F32  2EE8               	decfsz	wreg,f,c
 14361  000F34  D7FE               	bra	u10837
 14362  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14363  000F38  D7FC               	bra	u10837
 14364  000F3A  F000               	nop	
 14365  000F3C  0100               	movlb	0	; () banked
 14366  000F3E  2BBB               	incf	actuatorTest@i_1763& (0+255),f,b
 14367  000F40  D7EF               	goto	l8642
 14368  000F42                     l8650:
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14372  000F42  0E80               	movlw	128
 14373  000F44  ECEF  F02D         	call	_lcdInst
 14374  000F48  0EC0               	movlw	192
 14375  000F4A  ECEF  F02D         	call	_lcdInst
 14376                           
 14377                           ;Test.c: 315: printf("DROP -- 2s      ");
 14378  000F4E  0E75               	movlw	low STR_106
 14379  000F50  0100               	movlb	0	; () banked
 14380  000F52  6F8E               	movwf	printf@f& (0+255),b
 14381  000F54  0EFB               	movlw	high STR_106
 14382  000F56  0100               	movlb	0	; () banked
 14383  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14384  000F5A  ECED  F00D         	call	_printf	;wreg free
 14385                           
 14386                           ;Test.c: 316: updateServoPosition(1260, 3);
 14387  000F5E  0E04               	movlw	4
 14388  000F60  0100               	movlb	0	; () banked
 14389  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14390  000F64  0EEC               	movlw	236
 14391  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14392  000F68  0E00               	movlw	0
 14393  000F6A  0100               	movlb	0	; () banked
 14394  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14395  000F6E  0E03               	movlw	3
 14396  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14397  000F72  EC12  F027         	call	_updateServoPosition	;wreg free
 14398                           
 14399                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14400  000F76  0E00               	movlw	0
 14401  000F78  0100               	movlb	0	; () banked
 14402  000F7A  6FBC               	movwf	actuatorTest@i_1765& (0+255),b
 14403  000F7C                     l8658:
 14404                           
 14405                           ; BSR set to: 0
 14406  000F7C  0E63               	movlw	99
 14407  000F7E  0100               	movlb	0	; () banked
 14408  000F80  65BC               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14409  000F82  D001               	goto	l8662
 14410  000F84  D00C               	goto	l8666
 14411  000F86                     l8662:
 14412                           
 14413                           ; BSR set to: 0
 14414  000F86  0E68               	movlw	104
 14415  000F88  0100               	movlb	0	; () banked
 14416  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14417  000F8C  0EE4               	movlw	228
 14418  000F8E                     u10847:
 14419  000F8E  2EE8               	decfsz	wreg,f,c
 14420  000F90  D7FE               	bra	u10847
 14421  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14422  000F94  D7FC               	bra	u10847
 14423  000F96  F000               	nop	
 14424  000F98  0100               	movlb	0	; () banked
 14425  000F9A  2BBC               	incf	actuatorTest@i_1765& (0+255),f,b
 14426  000F9C  D7EF               	goto	l8658
 14427  000F9E                     l8666:
 14428                           
 14429                           ; BSR set to: 0
 14430  000F9E  0E00               	movlw	0
 14431  000FA0  0100               	movlb	0	; () banked
 14432  000FA2  6FBD               	movwf	actuatorTest@i_1766& (0+255),b
 14433  000FA4                     l8668:
 14434                           
 14435                           ; BSR set to: 0
 14436  000FA4  0E63               	movlw	99
 14437  000FA6  0100               	movlb	0	; () banked
 14438  000FA8  65BD               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14439  000FAA  D001               	goto	l8672
 14440  000FAC  D00C               	goto	l8676
 14441  000FAE                     l8672:
 14442                           
 14443                           ; BSR set to: 0
 14444  000FAE  0E68               	movlw	104
 14445  000FB0  0100               	movlb	0	; () banked
 14446  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14447  000FB4  0EE4               	movlw	228
 14448  000FB6                     u10857:
 14449  000FB6  2EE8               	decfsz	wreg,f,c
 14450  000FB8  D7FE               	bra	u10857
 14451  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14452  000FBC  D7FC               	bra	u10857
 14453  000FBE  F000               	nop	
 14454  000FC0  0100               	movlb	0	; () banked
 14455  000FC2  2BBD               	incf	actuatorTest@i_1766& (0+255),f,b
 14456  000FC4  D7EF               	goto	l8668
 14457  000FC6                     l8676:
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14461  000FC6  0E80               	movlw	128
 14462  000FC8  ECEF  F02D         	call	_lcdInst
 14463  000FCC  0EC0               	movlw	192
 14464  000FCE  ECEF  F02D         	call	_lcdInst
 14465                           
 14466                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14467  000FD2  0E97               	movlw	low STR_105
 14468  000FD4  0100               	movlb	0	; () banked
 14469  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14470  000FD8  0EFB               	movlw	high STR_105
 14471  000FDA  0100               	movlb	0	; () banked
 14472  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14473  000FDE  ECED  F00D         	call	_printf	;wreg free
 14474                           
 14475                           ;Test.c: 321: updateServoPosition(1050, 3);
 14476  000FE2  0E04               	movlw	4
 14477  000FE4  0100               	movlb	0	; () banked
 14478  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14479  000FE8  0E1A               	movlw	26
 14480  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14481  000FEC  0E00               	movlw	0
 14482  000FEE  0100               	movlb	0	; () banked
 14483  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14484  000FF2  0E03               	movlw	3
 14485  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14486  000FF6  EC12  F027         	call	_updateServoPosition	;wreg free
 14487                           
 14488                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14489  000FFA  0E00               	movlw	0
 14490  000FFC  0100               	movlb	0	; () banked
 14491  000FFE  6FBE               	movwf	actuatorTest@i_1768& (0+255),b
 14492  001000                     l8684:
 14493                           
 14494                           ; BSR set to: 0
 14495  001000  0E63               	movlw	99
 14496  001002  0100               	movlb	0	; () banked
 14497  001004  65BE               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14498  001006  D001               	goto	l8688
 14499  001008  D00C               	goto	l8692
 14500  00100A                     l8688:
 14501                           
 14502                           ; BSR set to: 0
 14503  00100A  0E68               	movlw	104
 14504  00100C  0100               	movlb	0	; () banked
 14505  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14506  001010  0EE4               	movlw	228
 14507  001012                     u10867:
 14508  001012  2EE8               	decfsz	wreg,f,c
 14509  001014  D7FE               	bra	u10867
 14510  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14511  001018  D7FC               	bra	u10867
 14512  00101A  F000               	nop	
 14513  00101C  0100               	movlb	0	; () banked
 14514  00101E  2BBE               	incf	actuatorTest@i_1768& (0+255),f,b
 14515  001020  D7EF               	goto	l8684
 14516  001022                     l8692:
 14517                           
 14518                           ; BSR set to: 0
 14519  001022  0E00               	movlw	0
 14520  001024  0100               	movlb	0	; () banked
 14521  001026  6FBF               	movwf	actuatorTest@i_1769& (0+255),b
 14522  001028                     l8694:
 14523                           
 14524                           ; BSR set to: 0
 14525  001028  0E63               	movlw	99
 14526  00102A  0100               	movlb	0	; () banked
 14527  00102C  65BF               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14528  00102E  D001               	goto	l8698
 14529  001030  D00C               	goto	l1345
 14530  001032                     l8698:
 14531                           
 14532                           ; BSR set to: 0
 14533  001032  0E68               	movlw	104
 14534  001034  0100               	movlb	0	; () banked
 14535  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14536  001038  0EE4               	movlw	228
 14537  00103A                     u10877:
 14538  00103A  2EE8               	decfsz	wreg,f,c
 14539  00103C  D7FE               	bra	u10877
 14540  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14541  001040  D7FC               	bra	u10877
 14542  001042  F000               	nop	
 14543  001044  0100               	movlb	0	; () banked
 14544  001046  2BBF               	incf	actuatorTest@i_1769& (0+255),f,b
 14545  001048  D7EF               	goto	l8694
 14546  00104A                     l1345:
 14547                           
 14548                           ; BSR set to: 0
 14549                           ;Test.c: 323: TMR3ON = 0;
 14550  00104A  90B1               	bcf	4017,0,c	;volatile
 14551                           
 14552                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14553  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14557  00104E  0E01               	movlw	1
 14558  001050  ECEF  F02D         	call	_lcdInst
 14559  001054  0E68               	movlw	104
 14560  001056  0100               	movlb	0	; () banked
 14561  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14562  00105A  0EE4               	movlw	228
 14563  00105C                     u10887:
 14564  00105C  2EE8               	decfsz	wreg,f,c
 14565  00105E  D7FE               	bra	u10887
 14566  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14567  001062  D7FC               	bra	u10887
 14568  001064  F000               	nop	
 14569  001066  0E80               	movlw	128
 14570  001068  ECEF  F02D         	call	_lcdInst
 14571                           
 14572                           ;Test.c: 330: printf("TST: CAM SERVO");
 14573  00106C  0EB8               	movlw	low STR_108
 14574  00106E  0100               	movlb	0	; () banked
 14575  001070  6F8E               	movwf	printf@f& (0+255),b
 14576  001072  0EFE               	movlw	high STR_108
 14577  001074  0100               	movlb	0	; () banked
 14578  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14579  001078  ECED  F00D         	call	_printf	;wreg free
 14580                           
 14581                           ;Test.c: 331: lcdInst(0b11000000);;
 14582  00107C  0EC0               	movlw	192
 14583  00107E  ECEF  F02D         	call	_lcdInst
 14584                           
 14585                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14586  001082  0E9A               	movlw	low STR_109
 14587  001084  0100               	movlb	0	; () banked
 14588  001086  6F8E               	movwf	printf@f& (0+255),b
 14589  001088  0EFE               	movlw	high STR_109
 14590  00108A  0100               	movlb	0	; () banked
 14591  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14592  00108E  ECED  F00D         	call	_printf	;wreg free
 14593                           
 14594                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14595  001092  808B               	bsf	3979,0,c	;volatile
 14596                           
 14597                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14598  001094  0E00               	movlw	0
 14599  001096  0100               	movlb	0	; () banked
 14600  001098  6FC0               	movwf	actuatorTest@i_1772& (0+255),b
 14601  00109A                     l8718:
 14602                           
 14603                           ; BSR set to: 0
 14604  00109A  0E63               	movlw	99
 14605  00109C  0100               	movlb	0	; () banked
 14606  00109E  65C0               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14607  0010A0  D001               	goto	l8722
 14608  0010A2  D00C               	goto	l8726
 14609  0010A4                     l8722:
 14610                           
 14611                           ; BSR set to: 0
 14612  0010A4  0E68               	movlw	104
 14613  0010A6  0100               	movlb	0	; () banked
 14614  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14615  0010AA  0EE4               	movlw	228
 14616  0010AC                     u10897:
 14617  0010AC  2EE8               	decfsz	wreg,f,c
 14618  0010AE  D7FE               	bra	u10897
 14619  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14620  0010B2  D7FC               	bra	u10897
 14621  0010B4  F000               	nop	
 14622  0010B6  0100               	movlb	0	; () banked
 14623  0010B8  2BC0               	incf	actuatorTest@i_1772& (0+255),f,b
 14624  0010BA  D7EF               	goto	l8718
 14625  0010BC                     l8726:
 14626                           
 14627                           ; BSR set to: 0
 14628  0010BC  0E00               	movlw	0
 14629  0010BE  0100               	movlb	0	; () banked
 14630  0010C0  6FC1               	movwf	actuatorTest@i_1773& (0+255),b
 14631  0010C2                     l8728:
 14632                           
 14633                           ; BSR set to: 0
 14634  0010C2  0E63               	movlw	99
 14635  0010C4  0100               	movlb	0	; () banked
 14636  0010C6  65C1               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14637  0010C8  D001               	goto	l8732
 14638  0010CA  D00C               	goto	l8736
 14639  0010CC                     l8732:
 14640                           
 14641                           ; BSR set to: 0
 14642  0010CC  0E68               	movlw	104
 14643  0010CE  0100               	movlb	0	; () banked
 14644  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14645  0010D2  0EE4               	movlw	228
 14646  0010D4                     u10907:
 14647  0010D4  2EE8               	decfsz	wreg,f,c
 14648  0010D6  D7FE               	bra	u10907
 14649  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14650  0010DA  D7FC               	bra	u10907
 14651  0010DC  F000               	nop	
 14652  0010DE  0100               	movlb	0	; () banked
 14653  0010E0  2BC1               	incf	actuatorTest@i_1773& (0+255),f,b
 14654  0010E2  D7EF               	goto	l8728
 14655  0010E4                     l8736:
 14656                           
 14657                           ; BSR set to: 0
 14658                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14659  0010E4  0E80               	movlw	128
 14660  0010E6  ECEF  F02D         	call	_lcdInst
 14661  0010EA  0EC0               	movlw	192
 14662  0010EC  ECEF  F02D         	call	_lcdInst
 14663                           
 14664                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14665  0010F0  0E8B               	movlw	low STR_110
 14666  0010F2  0100               	movlb	0	; () banked
 14667  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14668  0010F6  0EFE               	movlw	high STR_110
 14669  0010F8  0100               	movlb	0	; () banked
 14670  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14671  0010FC  ECED  F00D         	call	_printf	;wreg free
 14672                           
 14673                           ;Test.c: 339: for(i=0;i<10000;i++)
 14674  001100  0E00               	movlw	0
 14675  001102  0100               	movlb	0	; () banked
 14676  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14677  001106  0E00               	movlw	0
 14678  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14679  00110A                     l8742:
 14680                           
 14681                           ; BSR set to: 0
 14682  00110A  0100               	movlb	0	; () banked
 14683  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14684  00110E  D008               	goto	l1350
 14685  001110  0E10               	movlw	16
 14686  001112  0100               	movlb	0	; () banked
 14687  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14688  001116  0E27               	movlw	39
 14689  001118  0100               	movlb	0	; () banked
 14690  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14691  00111C  B0D8               	btfsc	status,0,c
 14692  00111E  D00D               	goto	l8752
 14693  001120                     l1350:
 14694                           
 14695                           ; BSR set to: 0
 14696                           ;Test.c: 340: {
 14697                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14698  001120  808B               	bsf	3979,0,c	;volatile
 14699                           
 14700                           ; BSR set to: 0
 14701                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14702  001122  0E1A               	movlw	26
 14703  001124                     u10917:
 14704  001124  2EE8               	decfsz	wreg,f,c
 14705  001126  D7FE               	bra	u10917
 14706  001128  D000               	nop2	
 14707                           
 14708                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14709  00112A  908B               	bcf	3979,0,c	;volatile
 14710                           
 14711                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14712  00112C  0EF0               	movlw	240
 14713  00112E                     u10927:
 14714  00112E  2EE8               	decfsz	wreg,f,c
 14715  001130  D7FE               	bra	u10927
 14716  001132  0100               	movlb	0	; () banked
 14717  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14718  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14719  001138  D7E8               	goto	l8742
 14720  00113A                     l8752:
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;Test.c: 345: }
 14724                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14725  00113A  0E00               	movlw	0
 14726  00113C  0100               	movlb	0	; () banked
 14727  00113E  6FC2               	movwf	actuatorTest@i_1775& (0+255),b
 14728  001140                     l8754:
 14729                           
 14730                           ; BSR set to: 0
 14731  001140  0E63               	movlw	99
 14732  001142  0100               	movlb	0	; () banked
 14733  001144  65C2               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14734  001146  D001               	goto	l8758
 14735  001148  D00C               	goto	l8762
 14736  00114A                     l8758:
 14737                           
 14738                           ; BSR set to: 0
 14739  00114A  0E68               	movlw	104
 14740  00114C  0100               	movlb	0	; () banked
 14741  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14742  001150  0EE4               	movlw	228
 14743  001152                     u10937:
 14744  001152  2EE8               	decfsz	wreg,f,c
 14745  001154  D7FE               	bra	u10937
 14746  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14747  001158  D7FC               	bra	u10937
 14748  00115A  F000               	nop	
 14749  00115C  0100               	movlb	0	; () banked
 14750  00115E  2BC2               	incf	actuatorTest@i_1775& (0+255),f,b
 14751  001160  D7EF               	goto	l8754
 14752  001162                     l8762:
 14753                           
 14754                           ; BSR set to: 0
 14755  001162  0E00               	movlw	0
 14756  001164  0100               	movlb	0	; () banked
 14757  001166  6FC3               	movwf	actuatorTest@i_1776& (0+255),b
 14758  001168                     l8764:
 14759                           
 14760                           ; BSR set to: 0
 14761  001168  0E63               	movlw	99
 14762  00116A  0100               	movlb	0	; () banked
 14763  00116C  65C3               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14764  00116E  D001               	goto	l8768
 14765  001170  D00C               	goto	l8772
 14766  001172                     l8768:
 14767                           
 14768                           ; BSR set to: 0
 14769  001172  0E68               	movlw	104
 14770  001174  0100               	movlb	0	; () banked
 14771  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14772  001178  0EE4               	movlw	228
 14773  00117A                     u10947:
 14774  00117A  2EE8               	decfsz	wreg,f,c
 14775  00117C  D7FE               	bra	u10947
 14776  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14777  001180  D7FC               	bra	u10947
 14778  001182  F000               	nop	
 14779  001184  0100               	movlb	0	; () banked
 14780  001186  2BC3               	incf	actuatorTest@i_1776& (0+255),f,b
 14781  001188  D7EF               	goto	l8764
 14782  00118A                     l8772:
 14783                           
 14784                           ; BSR set to: 0
 14785                           ;Test.c: 348: machine_state = Testing_state;
 14786  00118A  0E03               	movlw	3
 14787  00118C  0100               	movlb	0	; () banked
 14788  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14789                           
 14790                           ; BSR set to: 0
 14791  001190  0012               	return		;funcret
 14792  001192                     __end_of_actuatorTest:
 14793                           	opt stack 0
 14794                           tblptru	equ	0xFF8
 14795                           tblptrh	equ	0xFF7
 14796                           tblptrl	equ	0xFF6
 14797                           tablat	equ	0xFF5
 14798                           prodh	equ	0xFF4
 14799                           prodl	equ	0xFF3
 14800                           intcon	equ	0xFF2
 14801                           intcon2	equ	0xFF1
 14802                           intcon3	equ	0xFF0
 14803                           postinc0	equ	0xFEE
 14804                           wreg	equ	0xFE8
 14805                           postdec1	equ	0xFE5
 14806                           fsr1l	equ	0xFE1
 14807                           indf2	equ	0xFDF
 14808                           postinc2	equ	0xFDE
 14809                           postdec2	equ	0xFDD
 14810                           fsr2h	equ	0xFDA
 14811                           fsr2l	equ	0xFD9
 14812                           status	equ	0xFD8
 14813                           
 14814 ;; *************** function _SpeedTest *****************
 14815 ;; Defined at:
 14816 ;;		line 541 in file "Test.c"
 14817 ;; Parameters:    Size  Location     Type
 14818 ;;		None
 14819 ;; Auto vars:     Size  Location     Type
 14820 ;;		None
 14821 ;; Return value:  Size  Location     Type
 14822 ;;                  1    wreg      void 
 14823 ;; Registers used:
 14824 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14825 ;; Tracked objects:
 14826 ;;		On entry : 0/0
 14827 ;;		On exit  : 0/0
 14828 ;;		Unchanged: 0/0
 14829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14833 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14834 ;;Total ram usage:        1 bytes
 14835 ;; Hardware stack levels used:    1
 14836 ;; Hardware stack levels required when called:   10
 14837 ;; This function calls:
 14838 ;;		_lcdInst
 14839 ;;		_printf
 14840 ;; This function is called by:
 14841 ;;		_Test
 14842 ;; This function uses a non-reentrant model
 14843 ;;
 14844                           
 14845                           	psect	text46
 14846  004DA0                     __ptext46:
 14847                           	opt stack 0
 14848  004DA0                     _SpeedTest:
 14849                           	opt stack 19
 14850                           
 14851                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14852                           
 14853                           ; BSR set to: 0
 14854                           ;incstack = 0
 14855  004DA0  0E01               	movlw	1
 14856  004DA2  ECEF  F02D         	call	_lcdInst
 14857  004DA6  0E68               	movlw	104
 14858  004DA8  0100               	movlb	0	; () banked
 14859  004DAA  6FAB               	movwf	??_SpeedTest& (0+255),b
 14860  004DAC  0EE4               	movlw	228
 14861  004DAE                     u10957:
 14862  004DAE  2EE8               	decfsz	wreg,f,c
 14863  004DB0  D7FE               	bra	u10957
 14864  004DB2  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14865  004DB4  D7FC               	bra	u10957
 14866  004DB6  F000               	nop	
 14867  004DB8  0E80               	movlw	128
 14868  004DBA  ECEF  F02D         	call	_lcdInst
 14869                           
 14870                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14871  004DBE  0E0A               	movlw	low STR_121
 14872  004DC0  0100               	movlb	0	; () banked
 14873  004DC2  6F8E               	movwf	printf@f& (0+255),b
 14874  004DC4  0EFB               	movlw	high STR_121
 14875  004DC6  0100               	movlb	0	; () banked
 14876  004DC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14877  004DCA  ECED  F00D         	call	_printf	;wreg free
 14878                           
 14879                           ;Test.c: 545: lcdInst(0b11000000);;
 14880  004DCE  0EC0               	movlw	192
 14881  004DD0  ECEF  F02D         	call	_lcdInst
 14882                           
 14883                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14884  004DD4  0EF8               	movlw	low STR_122
 14885  004DD6  0100               	movlb	0	; () banked
 14886  004DD8  6F8E               	movwf	printf@f& (0+255),b
 14887  004DDA  0EFA               	movlw	high STR_122
 14888  004DDC  0100               	movlb	0	; () banked
 14889  004DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14890  004DE0  ECED  F00D         	call	_printf	;wreg free
 14891  004DE4                     l1421:
 14892  004DE4  A281               	btfss	3969,1,c	;volatile
 14893  004DE6  D7FE               	goto	l1421
 14894                           
 14895                           ;Test.c: 551: }
 14896                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14897  004DE8  3881               	swapf	3969,w,c	;volatile
 14898  004DEA  0B0F               	andlw	15
 14899  004DEC  0A0F               	xorlw	15
 14900  004DEE  B4D8               	btfsc	status,2,c
 14901  004DF0  0012               	return	
 14902  004DF2  D014               	goto	l8868
 14903  004DF4                     l1428:
 14904                           
 14905                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14906  004DF4  848A               	bsf	3978,2,c	;volatile
 14907                           
 14908                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14909  004DF6  0E34               	movlw	52
 14910  004DF8  0100               	movlb	0	; () banked
 14911  004DFA  6FAB               	movwf	??_SpeedTest& (0+255),b
 14912  004DFC  0EF1               	movlw	241
 14913  004DFE                     u10967:
 14914  004DFE  2EE8               	decfsz	wreg,f,c
 14915  004E00  D7FE               	bra	u10967
 14916  004E02  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14917  004E04  D7FC               	bra	u10967
 14918  004E06  D000               	nop2	
 14919                           
 14920                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14921  004E08  948A               	bcf	3978,2,c	;volatile
 14922                           
 14923                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14924  004E0A  0E34               	movlw	52
 14925  004E0C  0100               	movlb	0	; () banked
 14926  004E0E  6FAB               	movwf	??_SpeedTest& (0+255),b
 14927  004E10  0EF1               	movlw	241
 14928  004E12                     u10977:
 14929  004E12  2EE8               	decfsz	wreg,f,c
 14930  004E14  D7FE               	bra	u10977
 14931  004E16  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14932  004E18  D7FC               	bra	u10977
 14933  004E1A  D000               	nop2	
 14934  004E1C                     l8868:
 14935  004E1C  B281               	btfsc	3969,1,c	;volatile
 14936  004E1E  D7EA               	goto	l1428
 14937                           
 14938                           ;Test.c: 563: }
 14939                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14940  004E20  948A               	bcf	3978,2,c	;volatile
 14941  004E22  D7E0               	goto	l1421
 14942  004E24                     __end_of_SpeedTest:
 14943                           	opt stack 0
 14944                           tblptru	equ	0xFF8
 14945                           tblptrh	equ	0xFF7
 14946                           tblptrl	equ	0xFF6
 14947                           tablat	equ	0xFF5
 14948                           prodh	equ	0xFF4
 14949                           prodl	equ	0xFF3
 14950                           intcon	equ	0xFF2
 14951                           intcon2	equ	0xFF1
 14952                           intcon3	equ	0xFF0
 14953                           postinc0	equ	0xFEE
 14954                           wreg	equ	0xFE8
 14955                           postdec1	equ	0xFE5
 14956                           fsr1l	equ	0xFE1
 14957                           indf2	equ	0xFDF
 14958                           postinc2	equ	0xFDE
 14959                           postdec2	equ	0xFDD
 14960                           fsr2h	equ	0xFDA
 14961                           fsr2l	equ	0xFD9
 14962                           status	equ	0xFD8
 14963                           
 14964 ;; *************** function _PortTestPusher *****************
 14965 ;; Defined at:
 14966 ;;		line 682 in file "Test.c"
 14967 ;; Parameters:    Size  Location     Type
 14968 ;;		None
 14969 ;; Auto vars:     Size  Location     Type
 14970 ;;		None
 14971 ;; Return value:  Size  Location     Type
 14972 ;;                  1    wreg      void 
 14973 ;; Registers used:
 14974 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14975 ;; Tracked objects:
 14976 ;;		On entry : 0/0
 14977 ;;		On exit  : 0/0
 14978 ;;		Unchanged: 0/0
 14979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14984 ;;Total ram usage:        1 bytes
 14985 ;; Hardware stack levels used:    1
 14986 ;; Hardware stack levels required when called:   10
 14987 ;; This function calls:
 14988 ;;		_lcdInst
 14989 ;;		_printf
 14990 ;; This function is called by:
 14991 ;;		_Test
 14992 ;; This function uses a non-reentrant model
 14993 ;;
 14994                           
 14995                           	psect	text47
 14996  005270                     __ptext47:
 14997                           	opt stack 0
 14998  005270                     _PortTestPusher:
 14999                           	opt stack 19
 15000                           
 15001                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15002                           
 15003                           ;incstack = 0
 15004  005270  0E01               	movlw	1
 15005  005272  ECEF  F02D         	call	_lcdInst
 15006  005276  0E68               	movlw	104
 15007  005278  0100               	movlb	0	; () banked
 15008  00527A  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15009  00527C  0EE4               	movlw	228
 15010  00527E                     u10987:
 15011  00527E  2EE8               	decfsz	wreg,f,c
 15012  005280  D7FE               	bra	u10987
 15013  005282  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15014  005284  D7FC               	bra	u10987
 15015  005286  F000               	nop	
 15016  005288  0E80               	movlw	128
 15017  00528A  ECEF  F02D         	call	_lcdInst
 15018                           
 15019                           ;Test.c: 684: printf("D WILL RETURN    ");
 15020  00528E  0EE6               	movlw	low STR_112
 15021  005290  0100               	movlb	0	; () banked
 15022  005292  6F8E               	movwf	printf@f& (0+255),b
 15023  005294  0EFA               	movlw	high STR_112
 15024  005296  0100               	movlb	0	; () banked
 15025  005298  6F8F               	movwf	(printf@f+1)& (0+255),b
 15026  00529A  ECED  F00D         	call	_printf	;wreg free
 15027                           
 15028                           ;Test.c: 685: lcdInst(0b11000000);;
 15029  00529E  0EC0               	movlw	192
 15030  0052A0  ECEF  F02D         	call	_lcdInst
 15031                           
 15032                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 15033  0052A4  0E2E               	movlw	low STR_130
 15034  0052A6  0100               	movlb	0	; () banked
 15035  0052A8  6F8E               	movwf	printf@f& (0+255),b
 15036  0052AA  0EFB               	movlw	high STR_130
 15037  0052AC  0100               	movlb	0	; () banked
 15038  0052AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15039  0052B0  ECED  F00D         	call	_printf	;wreg free
 15040  0052B4                     l1482:
 15041  0052B4  A281               	btfss	3969,1,c	;volatile
 15042  0052B6  D7FE               	goto	l1482
 15043                           
 15044                           ;Test.c: 691: }
 15045                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 15046  0052B8  3881               	swapf	3969,w,c	;volatile
 15047  0052BA  0B0F               	andlw	15
 15048  0052BC  0A0F               	xorlw	15
 15049  0052BE  B4D8               	btfsc	status,2,c
 15050  0052C0  0012               	return	
 15051                           
 15052                           ;Test.c: 695: else{
 15053                           ;Test.c: 696: LATAbits.LATA4 = 1;
 15054                           
 15055                           ;Test.c: 694: }
 15056                           
 15057                           ;Test.c: 693: break;
 15058  0052C2  8889               	bsf	3977,4,c	;volatile
 15059  0052C4                     l1488:
 15060  0052C4  B281               	btfsc	3969,1,c	;volatile
 15061  0052C6  D7FE               	goto	l1488
 15062                           
 15063                           ;Test.c: 699: }
 15064                           ;Test.c: 700: LATAbits.LATA4 = 0;
 15065  0052C8  9889               	bcf	3977,4,c	;volatile
 15066  0052CA  D7F4               	goto	l1482
 15067  0052CC                     __end_of_PortTestPusher:
 15068                           	opt stack 0
 15069                           tblptru	equ	0xFF8
 15070                           tblptrh	equ	0xFF7
 15071                           tblptrl	equ	0xFF6
 15072                           tablat	equ	0xFF5
 15073                           prodh	equ	0xFF4
 15074                           prodl	equ	0xFF3
 15075                           intcon	equ	0xFF2
 15076                           intcon2	equ	0xFF1
 15077                           intcon3	equ	0xFF0
 15078                           postinc0	equ	0xFEE
 15079                           wreg	equ	0xFE8
 15080                           postdec1	equ	0xFE5
 15081                           fsr1l	equ	0xFE1
 15082                           indf2	equ	0xFDF
 15083                           postinc2	equ	0xFDE
 15084                           postdec2	equ	0xFDD
 15085                           fsr2h	equ	0xFDA
 15086                           fsr2l	equ	0xFD9
 15087                           status	equ	0xFD8
 15088                           
 15089 ;; *************** function _PortTestDC *****************
 15090 ;; Defined at:
 15091 ;;		line 411 in file "Test.c"
 15092 ;; Parameters:    Size  Location     Type
 15093 ;;		None
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;		None
 15096 ;; Return value:  Size  Location     Type
 15097 ;;                  1    wreg      void 
 15098 ;; Registers used:
 15099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15100 ;; Tracked objects:
 15101 ;;		On entry : 0/0
 15102 ;;		On exit  : 0/0
 15103 ;;		Unchanged: 0/0
 15104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;Total ram usage:        1 bytes
 15110 ;; Hardware stack levels used:    1
 15111 ;; Hardware stack levels required when called:   10
 15112 ;; This function calls:
 15113 ;;		_lcdInst
 15114 ;;		_printf
 15115 ;; This function is called by:
 15116 ;;		_Test
 15117 ;; This function uses a non-reentrant model
 15118 ;;
 15119                           
 15120                           	psect	text48
 15121  0052CC                     __ptext48:
 15122                           	opt stack 0
 15123  0052CC                     _PortTestDC:
 15124                           	opt stack 19
 15125                           
 15126                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15127                           
 15128                           ;incstack = 0
 15129  0052CC  0E01               	movlw	1
 15130  0052CE  ECEF  F02D         	call	_lcdInst
 15131  0052D2  0E68               	movlw	104
 15132  0052D4  0100               	movlb	0	; () banked
 15133  0052D6  6FAB               	movwf	??_PortTestDC& (0+255),b
 15134  0052D8  0EE4               	movlw	228
 15135  0052DA                     u10997:
 15136  0052DA  2EE8               	decfsz	wreg,f,c
 15137  0052DC  D7FE               	bra	u10997
 15138  0052DE  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15139  0052E0  D7FC               	bra	u10997
 15140  0052E2  F000               	nop	
 15141  0052E4  0E80               	movlw	128
 15142  0052E6  ECEF  F02D         	call	_lcdInst
 15143                           
 15144                           ;Test.c: 413: printf("D WILL RETURN    ");
 15145  0052EA  0EE6               	movlw	low STR_112
 15146  0052EC  0100               	movlb	0	; () banked
 15147  0052EE  6F8E               	movwf	printf@f& (0+255),b
 15148  0052F0  0EFA               	movlw	high STR_112
 15149  0052F2  0100               	movlb	0	; () banked
 15150  0052F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15151  0052F6  ECED  F00D         	call	_printf	;wreg free
 15152                           
 15153                           ;Test.c: 414: lcdInst(0b11000000);;
 15154  0052FA  0EC0               	movlw	192
 15155  0052FC  ECEF  F02D         	call	_lcdInst
 15156                           
 15157                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15158  005300  0ECA               	movlw	low STR_113
 15159  005302  0100               	movlb	0	; () banked
 15160  005304  6F8E               	movwf	printf@f& (0+255),b
 15161  005306  0EFB               	movlw	high STR_113
 15162  005308  0100               	movlb	0	; () banked
 15163  00530A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15164  00530C  ECED  F00D         	call	_printf	;wreg free
 15165  005310                     l1363:
 15166  005310  A281               	btfss	3969,1,c	;volatile
 15167  005312  D7FE               	goto	l1363
 15168                           
 15169                           ;Test.c: 420: }
 15170                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15171  005314  3881               	swapf	3969,w,c	;volatile
 15172  005316  0B0F               	andlw	15
 15173  005318  0A0F               	xorlw	15
 15174  00531A  B4D8               	btfsc	status,2,c
 15175  00531C  0012               	return	
 15176                           
 15177                           ;Test.c: 424: else{
 15178                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15179                           
 15180                           ;Test.c: 423: }
 15181                           
 15182                           ;Test.c: 422: break;
 15183  00531E  848A               	bsf	3978,2,c	;volatile
 15184  005320                     l1369:
 15185  005320  B281               	btfsc	3969,1,c	;volatile
 15186  005322  D7FE               	goto	l1369
 15187                           
 15188                           ;Test.c: 428: }
 15189                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15190  005324  948A               	bcf	3978,2,c	;volatile
 15191  005326  D7F4               	goto	l1363
 15192  005328                     __end_of_PortTestDC:
 15193                           	opt stack 0
 15194                           tblptru	equ	0xFF8
 15195                           tblptrh	equ	0xFF7
 15196                           tblptrl	equ	0xFF6
 15197                           tablat	equ	0xFF5
 15198                           prodh	equ	0xFF4
 15199                           prodl	equ	0xFF3
 15200                           intcon	equ	0xFF2
 15201                           intcon2	equ	0xFF1
 15202                           intcon3	equ	0xFF0
 15203                           postinc0	equ	0xFEE
 15204                           wreg	equ	0xFE8
 15205                           postdec1	equ	0xFE5
 15206                           fsr1l	equ	0xFE1
 15207                           indf2	equ	0xFDF
 15208                           postinc2	equ	0xFDE
 15209                           postdec2	equ	0xFDD
 15210                           fsr2h	equ	0xFDA
 15211                           fsr2l	equ	0xFD9
 15212                           status	equ	0xFD8
 15213                           
 15214 ;; *************** function _PlatformTest *****************
 15215 ;; Defined at:
 15216 ;;		line 434 in file "Test.c"
 15217 ;; Parameters:    Size  Location     Type
 15218 ;;		None
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;  i               2   51[BANK0 ] int 
 15221 ;;  i               2   49[BANK0 ] int 
 15222 ;;  res             2   47[BANK0 ] int 
 15223 ;;  res             2   45[BANK0 ] int 
 15224 ;;  on              2   53[BANK0 ] int 
 15225 ;; Return value:  Size  Location     Type
 15226 ;;                  1    wreg      void 
 15227 ;; Registers used:
 15228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15229 ;; Tracked objects:
 15230 ;;		On entry : 0/0
 15231 ;;		On exit  : 0/0
 15232 ;;		Unchanged: 0/0
 15233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15235 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15237 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15238 ;;Total ram usage:       12 bytes
 15239 ;; Hardware stack levels used:    1
 15240 ;; Hardware stack levels required when called:   10
 15241 ;; This function calls:
 15242 ;;		_lcdInst
 15243 ;;		_printf
 15244 ;;		_readADC
 15245 ;;		_stopSignals
 15246 ;; This function is called by:
 15247 ;;		_Test
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           	psect	text49
 15252  00276E                     __ptext49:
 15253                           	opt stack 0
 15254  00276E                     _PlatformTest:
 15255                           	opt stack 19
 15256                           
 15257                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15258                           
 15259                           ;incstack = 0
 15260  00276E  8A8B               	bsf	3979,5,c	;volatile
 15261                           
 15262                           ;Test.c: 437: machine_state = Sorting_state;
 15263  002770  0E01               	movlw	1
 15264  002772  0100               	movlb	0	; () banked
 15265  002774  6FFC               	movwf	_machine_state& (0+255),b
 15266                           
 15267                           ;Test.c: 438: f_arm_position = 0;
 15268  002776  0E00               	movlw	0
 15269  002778  0100               	movlb	0	; () banked
 15270  00277A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15271  00277C  0E00               	movlw	0
 15272  00277E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15273                           
 15274                           ;Test.c: 439: timer2_counter = 0;
 15275  002780  0E00               	movlw	0
 15276  002782  6E74               	movwf	_timer2_counter+1,c	;volatile
 15277  002784  0E00               	movlw	0
 15278  002786  6E73               	movwf	_timer2_counter,c	;volatile
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15282  002788  968A               	bcf	3978,3,c	;volatile
 15283                           
 15284                           ; BSR set to: 0
 15285                           ;Test.c: 441: TMR2ON = 1;
 15286  00278A  84CA               	bsf	4042,2,c	;volatile
 15287                           
 15288                           ;Test.c: 442: was_low_2 = 0;
 15289  00278C  0E00               	movlw	0
 15290  00278E  6E7A               	movwf	_was_low_2+1,c	;volatile
 15291  002790  0E00               	movlw	0
 15292  002792  6E79               	movwf	_was_low_2,c	;volatile
 15293                           
 15294                           ;Test.c: 444: int on = 1;
 15295  002794  0E00               	movlw	0
 15296  002796  0100               	movlb	0	; () banked
 15297  002798  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15298  00279A  0E01               	movlw	1
 15299  00279C  6FB5               	movwf	PlatformTest@on& (0+255),b
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15303  00279E  0E01               	movlw	1
 15304  0027A0  ECEF  F02D         	call	_lcdInst
 15305  0027A4  0E68               	movlw	104
 15306  0027A6  0100               	movlb	0	; () banked
 15307  0027A8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15308  0027AA  0EE4               	movlw	228
 15309  0027AC                     u11007:
 15310  0027AC  2EE8               	decfsz	wreg,f,c
 15311  0027AE  D7FE               	bra	u11007
 15312  0027B0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15313  0027B2  D7FC               	bra	u11007
 15314  0027B4  F000               	nop	
 15315  0027B6  0E80               	movlw	128
 15316  0027B8  ECEF  F02D         	call	_lcdInst
 15317                           
 15318                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15319  0027BC  0EFD               	movlw	low STR_114
 15320  0027BE  0100               	movlb	0	; () banked
 15321  0027C0  6F8E               	movwf	printf@f& (0+255),b
 15322  0027C2  0EFB               	movlw	high STR_114
 15323  0027C4  0100               	movlb	0	; () banked
 15324  0027C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15325  0027C8  ECED  F00D         	call	_printf	;wreg free
 15326                           
 15327                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15328  0027CC  D058               	goto	l8922
 15329  0027CE                     l8904:
 15330                           
 15331                           ;Test.c: 449: readADC(0);
 15332  0027CE  0E00               	movlw	0
 15333  0027D0  ECDA  F02C         	call	_readADC
 15334                           
 15335                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15336  0027D4  50C3               	movf	4035,w,c	;volatile
 15337  0027D6  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15338  0027DA  0100               	movlb	0	; () banked
 15339  0027DC  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15340  0027DE  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15341  0027E2  0100               	movlb	0	; () banked
 15342  0027E4  6BAB               	clrf	??_PlatformTest& (0+255),b
 15343  0027E6  0100               	movlb	0	; () banked
 15344  0027E8  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15345  0027EA  0100               	movlb	0	; () banked
 15346  0027EC  6FAD               	movwf	PlatformTest@res& (0+255),b
 15347  0027EE  0100               	movlb	0	; () banked
 15348  0027F0  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15349  0027F2  0100               	movlb	0	; () banked
 15350  0027F4  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15351                           
 15352                           ; BSR set to: 0
 15353                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15354  0027F6  0100               	movlb	0	; () banked
 15355  0027F8  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15356  0027FA  D00A               	goto	u7970
 15357  0027FC  0E21               	movlw	33
 15358  0027FE  0100               	movlb	0	; () banked
 15359  002800  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15360  002802  0E03               	movlw	3
 15361  002804  0100               	movlb	0	; () banked
 15362  002806  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15363  002808  A0D8               	btfss	status,0,c
 15364  00280A  D002               	goto	u7970
 15365  00280C  0E01               	movlw	1
 15366  00280E  D001               	goto	u7980
 15367  002810                     u7970:
 15368  002810  0E00               	movlw	0
 15369  002812                     u7980:
 15370  002812  0100               	movlb	0	; () banked
 15371  002814  6FE0               	movwf	_IR_signal& (0+255),b
 15372  002816  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15373                           
 15374                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15375  002818  0E01               	movlw	1
 15376  00281A  ECEF  F02D         	call	_lcdInst
 15377  00281E  0E68               	movlw	104
 15378  002820  0100               	movlb	0	; () banked
 15379  002822  6FAB               	movwf	??_PlatformTest& (0+255),b
 15380  002824  0EE4               	movlw	228
 15381  002826                     u11017:
 15382  002826  2EE8               	decfsz	wreg,f,c
 15383  002828  D7FE               	bra	u11017
 15384  00282A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15385  00282C  D7FC               	bra	u11017
 15386  00282E  F000               	nop	
 15387  002830  0E80               	movlw	128
 15388  002832  ECEF  F02D         	call	_lcdInst
 15389                           
 15390                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15391  002836  0EFD               	movlw	low STR_114
 15392  002838  0100               	movlb	0	; () banked
 15393  00283A  6F8E               	movwf	printf@f& (0+255),b
 15394  00283C  0EFB               	movlw	high STR_114
 15395  00283E  0100               	movlb	0	; () banked
 15396  002840  6F8F               	movwf	(printf@f+1)& (0+255),b
 15397  002842  ECED  F00D         	call	_printf	;wreg free
 15398                           
 15399                           ;Test.c: 455: lcdInst(0b11000000);;
 15400  002846  0EC0               	movlw	192
 15401  002848  ECEF  F02D         	call	_lcdInst
 15402                           
 15403                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15404  00284C  0EEC               	movlw	low STR_116
 15405  00284E  0100               	movlb	0	; () banked
 15406  002850  6F8E               	movwf	printf@f& (0+255),b
 15407  002852  0EFB               	movlw	high STR_116
 15408  002854  0100               	movlb	0	; () banked
 15409  002856  6F8F               	movwf	(printf@f+1)& (0+255),b
 15410  002858  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15411  00285C  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15412  002860  ECED  F00D         	call	_printf	;wreg free
 15413                           
 15414                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15415  002864  0E05               	movlw	5
 15416  002866  0100               	movlb	0	; () banked
 15417  002868  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15418  00286A  0E0F               	movlw	15
 15419  00286C  0100               	movlb	0	; () banked
 15420  00286E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15421  002870  0EF1               	movlw	241
 15422  002872                     u11027:
 15423  002872  2EE8               	decfsz	wreg,f,c
 15424  002874  D7FE               	bra	u11027
 15425  002876  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15426  002878  D7FC               	bra	u11027
 15427  00287A  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15428  00287C  D7FA               	bra	u11027
 15429  00287E                     l8922:
 15430  00287E  B281               	btfsc	3969,1,c	;volatile
 15431  002880  D059               	goto	l8942
 15432  002882  D7A5               	goto	l8904
 15433  002884                     l8924:
 15434                           
 15435                           ;Test.c: 462: readADC(0);
 15436  002884  0E00               	movlw	0
 15437  002886  ECDA  F02C         	call	_readADC
 15438                           
 15439                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15440  00288A  50C3               	movf	4035,w,c	;volatile
 15441  00288C  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15442  002890  0100               	movlb	0	; () banked
 15443  002892  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15444  002894  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15445  002898  0100               	movlb	0	; () banked
 15446  00289A  6BAB               	clrf	??_PlatformTest& (0+255),b
 15447  00289C  0100               	movlb	0	; () banked
 15448  00289E  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15449  0028A0  0100               	movlb	0	; () banked
 15450  0028A2  6FAF               	movwf	PlatformTest@res_1788& (0+255),b
 15451  0028A4  0100               	movlb	0	; () banked
 15452  0028A6  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15453  0028A8  0100               	movlb	0	; () banked
 15454  0028AA  6FB0               	movwf	(PlatformTest@res_1788+1)& (0+255),b
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15458  0028AC  0100               	movlb	0	; () banked
 15459  0028AE  BFB0               	btfsc	(PlatformTest@res_1788+1)& (0+255),7,b
 15460  0028B0  D00A               	goto	u8000
 15461  0028B2  0E21               	movlw	33
 15462  0028B4  0100               	movlb	0	; () banked
 15463  0028B6  5DAF               	subwf	PlatformTest@res_1788& (0+255),w,b
 15464  0028B8  0E03               	movlw	3
 15465  0028BA  0100               	movlb	0	; () banked
 15466  0028BC  59B0               	subwfb	(PlatformTest@res_1788+1)& (0+255),w,b
 15467  0028BE  A0D8               	btfss	status,0,c
 15468  0028C0  D002               	goto	u8000
 15469  0028C2  0E01               	movlw	1
 15470  0028C4  D001               	goto	u8010
 15471  0028C6                     u8000:
 15472  0028C6  0E00               	movlw	0
 15473  0028C8                     u8010:
 15474  0028C8  0100               	movlb	0	; () banked
 15475  0028CA  6FE0               	movwf	_IR_signal& (0+255),b
 15476  0028CC  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15477                           
 15478                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15479  0028CE  0E01               	movlw	1
 15480  0028D0  ECEF  F02D         	call	_lcdInst
 15481  0028D4  0E68               	movlw	104
 15482  0028D6  0100               	movlb	0	; () banked
 15483  0028D8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15484  0028DA  0EE4               	movlw	228
 15485  0028DC                     u11037:
 15486  0028DC  2EE8               	decfsz	wreg,f,c
 15487  0028DE  D7FE               	bra	u11037
 15488  0028E0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15489  0028E2  D7FC               	bra	u11037
 15490  0028E4  F000               	nop	
 15491  0028E6  0E80               	movlw	128
 15492  0028E8  ECEF  F02D         	call	_lcdInst
 15493                           
 15494                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15495  0028EC  0EFD               	movlw	low STR_114
 15496  0028EE  0100               	movlb	0	; () banked
 15497  0028F0  6F8E               	movwf	printf@f& (0+255),b
 15498  0028F2  0EFB               	movlw	high STR_114
 15499  0028F4  0100               	movlb	0	; () banked
 15500  0028F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15501  0028F8  ECED  F00D         	call	_printf	;wreg free
 15502                           
 15503                           ;Test.c: 468: lcdInst(0b11000000);;
 15504  0028FC  0EC0               	movlw	192
 15505  0028FE  ECEF  F02D         	call	_lcdInst
 15506                           
 15507                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15508  002902  0EEC               	movlw	low STR_116
 15509  002904  0100               	movlb	0	; () banked
 15510  002906  6F8E               	movwf	printf@f& (0+255),b
 15511  002908  0EFB               	movlw	high STR_116
 15512  00290A  0100               	movlb	0	; () banked
 15513  00290C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15514  00290E  C0AF  F090         	movff	PlatformTest@res_1788,?_printf+2
 15515  002912  C0B0  F091         	movff	PlatformTest@res_1788+1,?_printf+3
 15516  002916  ECED  F00D         	call	_printf	;wreg free
 15517                           
 15518                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15519  00291A  0E05               	movlw	5
 15520  00291C  0100               	movlb	0	; () banked
 15521  00291E  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15522  002920  0E0F               	movlw	15
 15523  002922  0100               	movlb	0	; () banked
 15524  002924  6FAB               	movwf	??_PlatformTest& (0+255),b
 15525  002926  0EF1               	movlw	241
 15526  002928                     u11047:
 15527  002928  2EE8               	decfsz	wreg,f,c
 15528  00292A  D7FE               	bra	u11047
 15529  00292C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15530  00292E  D7FC               	bra	u11047
 15531  002930  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15532  002932  D7FA               	bra	u11047
 15533  002934                     l8942:
 15534  002934  A281               	btfss	3969,1,c	;volatile
 15535  002936  D7A6               	goto	l8924
 15536                           
 15537                           ;Test.c: 471: }
 15538                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15539  002938  3881               	swapf	3969,w,c	;volatile
 15540  00293A  0B0F               	andlw	15
 15541  00293C  0A0F               	xorlw	15
 15542  00293E  B4D8               	btfsc	status,2,c
 15543  002940  D09A               	goto	l1384
 15544                           
 15545                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15546                           
 15547                           ;Test.c: 474: }
 15548                           
 15549                           ;Test.c: 473: break;
 15550  002942  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15551  002946  0100               	movlb	0	; () banked
 15552  002948  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15553  00294A  0E0F               	movlw	15
 15554  00294C  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15555  00294E  A4D8               	btfss	status,2,c
 15556  002950  D012               	goto	l8954
 15557                           
 15558                           ; BSR set to: 0
 15559                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15560  002952  B48A               	btfsc	3978,2,c	;volatile
 15561  002954  D004               	goto	u8050
 15562  002956  0100               	movlb	0	; () banked
 15563  002958  6BAB               	clrf	??_PlatformTest& (0+255),b
 15564  00295A  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15565  00295C  D002               	goto	u8068
 15566  00295E                     u8050:
 15567  00295E  0100               	movlb	0	; () banked
 15568  002960  6BAB               	clrf	??_PlatformTest& (0+255),b
 15569  002962                     u8068:
 15570  002962  0100               	movlb	0	; () banked
 15571  002964  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15572  002966  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15573  002968  508A               	movf	3978,w,c	;volatile
 15574  00296A  0100               	movlb	0	; () banked
 15575  00296C  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15576  00296E  0BFB               	andlw	-5
 15577  002970  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15578  002972  6E8A               	movwf	3978,c	;volatile
 15579                           
 15580                           ;Test.c: 477: }
 15581  002974  D07D               	goto	l1399
 15582  002976                     l8954:
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15586  002976  3881               	swapf	3969,w,c	;volatile
 15587  002978  0B0F               	andlw	15
 15588  00297A  0A03               	xorlw	3
 15589  00297C  A4D8               	btfss	status,2,c
 15590  00297E  D020               	goto	l8966
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;Test.c: 479: if(on){
 15594  002980  0100               	movlb	0	; () banked
 15595  002982  51B5               	movf	PlatformTest@on& (0+255),w,b
 15596  002984  0100               	movlb	0	; () banked
 15597  002986  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15598  002988  B4D8               	btfsc	status,2,c
 15599  00298A  D010               	goto	l8962
 15600                           
 15601                           ; BSR set to: 0
 15602                           ;Test.c: 480: f_arm_position = 1;
 15603  00298C  0E00               	movlw	0
 15604  00298E  0100               	movlb	0	; () banked
 15605  002990  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15606  002992  0E01               	movlw	1
 15607  002994  D00F               	goto	L16
 15608  002996                     l8960:
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;Test.c: 481: on = !on;
 15612  002996  0100               	movlb	0	; () banked
 15613  002998  51B5               	movf	PlatformTest@on& (0+255),w,b
 15614  00299A  0100               	movlb	0	; () banked
 15615  00299C  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15616  00299E  A4D8               	btfss	status,2,c
 15617  0029A0  D00D               	goto	u8110
 15618  0029A2  D00A               	goto	u8111
 15619  0029A4                     u8100:
 15620  0029A4  0100               	movlb	0	; () banked
 15621  0029A6  6FB5               	movwf	PlatformTest@on& (0+255),b
 15622  0029A8  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15623                           
 15624                           ;Test.c: 482: }
 15625  0029AA  D062               	goto	l1399
 15626  0029AC                     l8962:
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;Test.c: 483: else{
 15630                           ;Test.c: 484: f_arm_position = 0;
 15631  0029AC  0E00               	movlw	0
 15632  0029AE  0100               	movlb	0	; () banked
 15633  0029B0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15634  0029B2  0E00               	movlw	0
 15635  0029B4                     L16:
 15636  0029B4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15637  0029B6  D7EF               	goto	l8960
 15638  0029B8                     u8111:
 15639  0029B8  0E01               	movlw	1
 15640  0029BA  D7F4               	goto	u8100
 15641  0029BC                     u8110:
 15642  0029BC  0E00               	movlw	0
 15643  0029BE  D7F2               	goto	u8100
 15644  0029C0                     l8966:
 15645                           
 15646                           ; BSR set to: 0
 15647                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15648  0029C0  3881               	swapf	3969,w,c	;volatile
 15649  0029C2  0B0F               	andlw	15
 15650  0029C4  0A05               	xorlw	5
 15651  0029C6  A4D8               	btfss	status,2,c
 15652  0029C8  D027               	goto	l8980
 15653                           
 15654                           ; BSR set to: 0
 15655                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15656  0029CA  0E00               	movlw	0
 15657  0029CC  0100               	movlb	0	; () banked
 15658  0029CE  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15659  0029D0  0E00               	movlw	0
 15660  0029D2  6FB1               	movwf	PlatformTest@i& (0+255),b
 15661  0029D4                     l8970:
 15662                           
 15663                           ; BSR set to: 0
 15664  0029D4  0100               	movlb	0	; () banked
 15665  0029D6  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15666  0029D8  D008               	goto	l1393
 15667  0029DA  0100               	movlb	0	; () banked
 15668  0029DC  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15669  0029DE  E148               	bnz	l1399
 15670  0029E0  0E1E               	movlw	30
 15671  0029E2  0100               	movlb	0	; () banked
 15672  0029E4  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15673  0029E6  B0D8               	btfsc	status,0,c
 15674  0029E8  D043               	goto	l1399
 15675  0029EA                     l1393:
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15679  0029EA  8889               	bsf	3977,4,c	;volatile
 15680                           
 15681                           ; BSR set to: 0
 15682                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15683  0029EC  0E4E               	movlw	78
 15684  0029EE  0100               	movlb	0	; () banked
 15685  0029F0  6FAB               	movwf	??_PlatformTest& (0+255),b
 15686  0029F2  0EEB               	movlw	235
 15687  0029F4                     u11057:
 15688  0029F4  2EE8               	decfsz	wreg,f,c
 15689  0029F6  D7FE               	bra	u11057
 15690  0029F8  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15691  0029FA  D7FC               	bra	u11057
 15692                           
 15693                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15694  0029FC  9889               	bcf	3977,4,c	;volatile
 15695                           
 15696                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15697  0029FE  0E1A               	movlw	26
 15698  002A00  0100               	movlb	0	; () banked
 15699  002A02  6FAB               	movwf	??_PlatformTest& (0+255),b
 15700  002A04  0EF8               	movlw	248
 15701  002A06                     u11067:
 15702  002A06  2EE8               	decfsz	wreg,f,c
 15703  002A08  D7FE               	bra	u11067
 15704  002A0A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15705  002A0C  D7FC               	bra	u11067
 15706  002A0E  F000               	nop	
 15707  002A10  0100               	movlb	0	; () banked
 15708  002A12  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15709  002A14  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15710  002A16  D7DE               	goto	l8970
 15711  002A18                     l8980:
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15715  002A18  3881               	swapf	3969,w,c	;volatile
 15716  002A1A  0B0F               	andlw	15
 15717  002A1C  0A06               	xorlw	6
 15718  002A1E  A4D8               	btfss	status,2,c
 15719  002A20  D027               	goto	l1399
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15723  002A22  0E00               	movlw	0
 15724  002A24  0100               	movlb	0	; () banked
 15725  002A26  6FB4               	movwf	(PlatformTest@i_1792+1)& (0+255),b
 15726  002A28  0E00               	movlw	0
 15727  002A2A  6FB3               	movwf	PlatformTest@i_1792& (0+255),b
 15728  002A2C                     l8984:
 15729                           
 15730                           ; BSR set to: 0
 15731  002A2C  0100               	movlb	0	; () banked
 15732  002A2E  BFB4               	btfsc	(PlatformTest@i_1792+1)& (0+255),7,b
 15733  002A30  D008               	goto	l1397
 15734  002A32  0100               	movlb	0	; () banked
 15735  002A34  51B4               	movf	(PlatformTest@i_1792+1)& (0+255),w,b
 15736  002A36  E11C               	bnz	l1399
 15737  002A38  0E1E               	movlw	30
 15738  002A3A  0100               	movlb	0	; () banked
 15739  002A3C  5DB3               	subwf	PlatformTest@i_1792& (0+255),w,b
 15740  002A3E  B0D8               	btfsc	status,0,c
 15741  002A40  D017               	goto	l1399
 15742  002A42                     l1397:
 15743                           
 15744                           ; BSR set to: 0
 15745                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15746  002A42  8889               	bsf	3977,4,c	;volatile
 15747                           
 15748                           ; BSR set to: 0
 15749                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15750  002A44  0E3D               	movlw	61
 15751  002A46  0100               	movlb	0	; () banked
 15752  002A48  6FAB               	movwf	??_PlatformTest& (0+255),b
 15753  002A4A  0E41               	movlw	65
 15754  002A4C                     u11077:
 15755  002A4C  2EE8               	decfsz	wreg,f,c
 15756  002A4E  D7FE               	bra	u11077
 15757  002A50  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15758  002A52  D7FC               	bra	u11077
 15759                           
 15760                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15761  002A54  9889               	bcf	3977,4,c	;volatile
 15762                           
 15763                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15764  002A56  0E2C               	movlw	44
 15765  002A58  0100               	movlb	0	; () banked
 15766  002A5A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15767  002A5C  0EA1               	movlw	161
 15768  002A5E                     u11087:
 15769  002A5E  2EE8               	decfsz	wreg,f,c
 15770  002A60  D7FE               	bra	u11087
 15771  002A62  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15772  002A64  D7FC               	bra	u11087
 15773  002A66  D000               	nop2	
 15774  002A68  0100               	movlb	0	; () banked
 15775  002A6A  4BB3               	infsnz	PlatformTest@i_1792& (0+255),f,b
 15776  002A6C  2BB4               	incf	(PlatformTest@i_1792+1)& (0+255),f,b
 15777  002A6E  D7DE               	goto	l8984
 15778  002A70                     l1399:
 15779  002A70  A281               	btfss	3969,1,c	;volatile
 15780  002A72  D760               	goto	l8942
 15781  002A74  D7FD               	goto	l1399
 15782  002A76                     l1384:
 15783                           
 15784                           ;Test.c: 508: }
 15785                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15786  002A76  9A8B               	bcf	3979,5,c	;volatile
 15787                           
 15788                           ;Test.c: 511: stopSignals();
 15789  002A78  EC96  F02D         	call	_stopSignals	;wreg free
 15790                           
 15791                           ;Test.c: 512: machine_state = Testing_state;
 15792  002A7C  0E03               	movlw	3
 15793  002A7E  0100               	movlb	0	; () banked
 15794  002A80  6FFC               	movwf	_machine_state& (0+255),b
 15795                           
 15796                           ; BSR set to: 0
 15797  002A82  0012               	return		;funcret
 15798  002A84                     __end_of_PlatformTest:
 15799                           	opt stack 0
 15800                           tblptru	equ	0xFF8
 15801                           tblptrh	equ	0xFF7
 15802                           tblptrl	equ	0xFF6
 15803                           tablat	equ	0xFF5
 15804                           prodh	equ	0xFF4
 15805                           prodl	equ	0xFF3
 15806                           intcon	equ	0xFF2
 15807                           intcon2	equ	0xFF1
 15808                           intcon3	equ	0xFF0
 15809                           postinc0	equ	0xFEE
 15810                           wreg	equ	0xFE8
 15811                           postdec1	equ	0xFE5
 15812                           fsr1l	equ	0xFE1
 15813                           indf2	equ	0xFDF
 15814                           postinc2	equ	0xFDE
 15815                           postdec2	equ	0xFDD
 15816                           fsr2h	equ	0xFDA
 15817                           fsr2l	equ	0xFD9
 15818                           status	equ	0xFD8
 15819                           
 15820 ;; *************** function _BothServos *****************
 15821 ;; Defined at:
 15822 ;;		line 351 in file "Test.c"
 15823 ;; Parameters:    Size  Location     Type
 15824 ;;		None
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;		None
 15827 ;; Return value:  Size  Location     Type
 15828 ;;                  1    wreg      void 
 15829 ;; Registers used:
 15830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15831 ;; Tracked objects:
 15832 ;;		On entry : 0/0
 15833 ;;		On exit  : 0/0
 15834 ;;		Unchanged: 0/0
 15835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;Total ram usage:        2 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; Hardware stack levels required when called:   10
 15843 ;; This function calls:
 15844 ;;		_initServos
 15845 ;;		_lcdInst
 15846 ;;		_printf
 15847 ;;		_stopSignals
 15848 ;;		_updateServoPosition
 15849 ;; This function is called by:
 15850 ;;		_Test
 15851 ;; This function uses a non-reentrant model
 15852 ;;
 15853                           
 15854                           	psect	text50
 15855  002012                     __ptext50:
 15856                           	opt stack 0
 15857  002012                     _BothServos:
 15858                           	opt stack 19
 15859                           
 15860                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15861                           
 15862                           ; BSR set to: 0
 15863                           ;incstack = 0
 15864  002012  0E01               	movlw	1
 15865  002014  ECEF  F02D         	call	_lcdInst
 15866  002018  0E68               	movlw	104
 15867  00201A  0100               	movlb	0	; () banked
 15868  00201C  6FAB               	movwf	??_BothServos& (0+255),b
 15869  00201E  0EE4               	movlw	228
 15870  002020                     u11097:
 15871  002020  2EE8               	decfsz	wreg,f,c
 15872  002022  D7FE               	bra	u11097
 15873  002024  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15874  002026  D7FC               	bra	u11097
 15875  002028  F000               	nop	
 15876  00202A  0E80               	movlw	128
 15877  00202C  ECEF  F02D         	call	_lcdInst
 15878                           
 15879                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15880  002030  0EA7               	movlw	low STR_111
 15881  002032  0100               	movlb	0	; () banked
 15882  002034  6F8E               	movwf	printf@f& (0+255),b
 15883  002036  0EFC               	movlw	high STR_111
 15884  002038  0100               	movlb	0	; () banked
 15885  00203A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15886  00203C  ECED  F00D         	call	_printf	;wreg free
 15887                           
 15888                           ;Test.c: 354: TMR1ON = 1;
 15889  002040  80CD               	bsf	4045,0,c	;volatile
 15890                           
 15891                           ;Test.c: 355: TMR3ON = 1;
 15892  002042  80B1               	bsf	4017,0,c	;volatile
 15893                           
 15894                           ;Test.c: 356: machine_state = Sorting_state;
 15895  002044  0E01               	movlw	1
 15896  002046  0100               	movlb	0	; () banked
 15897  002048  6FFC               	movwf	_machine_state& (0+255),b
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;Test.c: 357: was_low_1 = 0;
 15901  00204A  0E00               	movlw	0
 15902  00204C  6E78               	movwf	_was_low_1+1,c	;volatile
 15903  00204E  0E00               	movlw	0
 15904  002050  6E77               	movwf	_was_low_1,c	;volatile
 15905                           
 15906                           ; BSR set to: 0
 15907                           ;Test.c: 358: was_low_3 = 0;
 15908  002052  0E00               	movlw	0
 15909  002054  6E7C               	movwf	_was_low_3+1,c	;volatile
 15910  002056  0E00               	movlw	0
 15911  002058  6E7B               	movwf	_was_low_3,c	;volatile
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;Test.c: 364: initServos();
 15915  00205A  EC51  F027         	call	_initServos	;wreg free
 15916                           
 15917                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15918  00205E  0E3D               	movlw	61
 15919  002060  0100               	movlb	0	; () banked
 15920  002062  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15921  002064  0EE1               	movlw	225
 15922  002066  0100               	movlb	0	; () banked
 15923  002068  6FAB               	movwf	??_BothServos& (0+255),b
 15924  00206A  0E3F               	movlw	63
 15925  00206C                     u11107:
 15926  00206C  2EE8               	decfsz	wreg,f,c
 15927  00206E  D7FE               	bra	u11107
 15928  002070  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15929  002072  D7FC               	bra	u11107
 15930  002074  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15931  002076  D7FA               	bra	u11107
 15932  002078  D000               	nop2	
 15933                           
 15934                           ;Test.c: 367: updateServoPosition(500, 1);
 15935  00207A  0E01               	movlw	1
 15936  00207C  0100               	movlb	0	; () banked
 15937  00207E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15938  002080  0EF4               	movlw	244
 15939  002082  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15940  002084  0E00               	movlw	0
 15941  002086  0100               	movlb	0	; () banked
 15942  002088  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15943  00208A  0E01               	movlw	1
 15944  00208C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15945  00208E  EC12  F027         	call	_updateServoPosition	;wreg free
 15946                           
 15947                           ;Test.c: 368: updateServoPosition(1050, 3);
 15948  002092  0E04               	movlw	4
 15949  002094  0100               	movlb	0	; () banked
 15950  002096  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15951  002098  0E1A               	movlw	26
 15952  00209A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15953  00209C  0E00               	movlw	0
 15954  00209E  0100               	movlb	0	; () banked
 15955  0020A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15956  0020A2  0E03               	movlw	3
 15957  0020A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15958  0020A6  EC12  F027         	call	_updateServoPosition	;wreg free
 15959                           
 15960                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15961  0020AA  0E1F               	movlw	31
 15962  0020AC  0100               	movlb	0	; () banked
 15963  0020AE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15964  0020B0  0E71               	movlw	113
 15965  0020B2  0100               	movlb	0	; () banked
 15966  0020B4  6FAB               	movwf	??_BothServos& (0+255),b
 15967  0020B6  0E1E               	movlw	30
 15968  0020B8                     u11117:
 15969  0020B8  2EE8               	decfsz	wreg,f,c
 15970  0020BA  D7FE               	bra	u11117
 15971  0020BC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15972  0020BE  D7FC               	bra	u11117
 15973  0020C0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15974  0020C2  D7FA               	bra	u11117
 15975  0020C4  F000               	nop	
 15976                           
 15977                           ;Test.c: 370: updateServoPosition(1260, 3);
 15978  0020C6  0E04               	movlw	4
 15979  0020C8  0100               	movlb	0	; () banked
 15980  0020CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15981  0020CC  0EEC               	movlw	236
 15982  0020CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15983  0020D0  0E00               	movlw	0
 15984  0020D2  0100               	movlb	0	; () banked
 15985  0020D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15986  0020D6  0E03               	movlw	3
 15987  0020D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15988  0020DA  EC12  F027         	call	_updateServoPosition	;wreg free
 15989                           
 15990                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15991  0020DE  0E1D               	movlw	29
 15992  0020E0  0100               	movlb	0	; () banked
 15993  0020E2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15994  0020E4  0E69               	movlw	105
 15995  0020E6  0100               	movlb	0	; () banked
 15996  0020E8  6FAB               	movwf	??_BothServos& (0+255),b
 15997  0020EA  0EA5               	movlw	165
 15998  0020EC                     u11127:
 15999  0020EC  2EE8               	decfsz	wreg,f,c
 16000  0020EE  D7FE               	bra	u11127
 16001  0020F0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16002  0020F2  D7FC               	bra	u11127
 16003  0020F4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16004  0020F6  D7FA               	bra	u11127
 16005                           
 16006                           ;Test.c: 372: updateServoPosition(1050, 3);
 16007  0020F8  0E04               	movlw	4
 16008  0020FA  0100               	movlb	0	; () banked
 16009  0020FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16010  0020FE  0E1A               	movlw	26
 16011  002100  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16012  002102  0E00               	movlw	0
 16013  002104  0100               	movlb	0	; () banked
 16014  002106  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16015  002108  0E03               	movlw	3
 16016  00210A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16017  00210C  EC12  F027         	call	_updateServoPosition	;wreg free
 16018                           
 16019                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 16020  002110  0E1F               	movlw	31
 16021  002112  0100               	movlb	0	; () banked
 16022  002114  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16023  002116  0E71               	movlw	113
 16024  002118  0100               	movlb	0	; () banked
 16025  00211A  6FAB               	movwf	??_BothServos& (0+255),b
 16026  00211C  0E1E               	movlw	30
 16027  00211E                     u11137:
 16028  00211E  2EE8               	decfsz	wreg,f,c
 16029  002120  D7FE               	bra	u11137
 16030  002122  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16031  002124  D7FC               	bra	u11137
 16032  002126  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16033  002128  D7FA               	bra	u11137
 16034  00212A  F000               	nop	
 16035                           
 16036                           ;Test.c: 375: updateServoPosition(850, 1);
 16037  00212C  0E03               	movlw	3
 16038  00212E  0100               	movlb	0	; () banked
 16039  002130  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16040  002132  0E52               	movlw	82
 16041  002134  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16042  002136  0E00               	movlw	0
 16043  002138  0100               	movlb	0	; () banked
 16044  00213A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16045  00213C  0E01               	movlw	1
 16046  00213E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16047  002140  EC12  F027         	call	_updateServoPosition	;wreg free
 16048                           
 16049                           ;Test.c: 376: updateServoPosition(1050, 3);
 16050  002144  0E04               	movlw	4
 16051  002146  0100               	movlb	0	; () banked
 16052  002148  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16053  00214A  0E1A               	movlw	26
 16054  00214C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16055  00214E  0E00               	movlw	0
 16056  002150  0100               	movlb	0	; () banked
 16057  002152  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16058  002154  0E03               	movlw	3
 16059  002156  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16060  002158  EC12  F027         	call	_updateServoPosition	;wreg free
 16061                           
 16062                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 16063  00215C  0E1F               	movlw	31
 16064  00215E  0100               	movlb	0	; () banked
 16065  002160  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16066  002162  0E71               	movlw	113
 16067  002164  0100               	movlb	0	; () banked
 16068  002166  6FAB               	movwf	??_BothServos& (0+255),b
 16069  002168  0E1E               	movlw	30
 16070  00216A                     u11147:
 16071  00216A  2EE8               	decfsz	wreg,f,c
 16072  00216C  D7FE               	bra	u11147
 16073  00216E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16074  002170  D7FC               	bra	u11147
 16075  002172  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16076  002174  D7FA               	bra	u11147
 16077  002176  F000               	nop	
 16078                           
 16079                           ;Test.c: 378: updateServoPosition(1260, 3);
 16080  002178  0E04               	movlw	4
 16081  00217A  0100               	movlb	0	; () banked
 16082  00217C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16083  00217E  0EEC               	movlw	236
 16084  002180  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16085  002182  0E00               	movlw	0
 16086  002184  0100               	movlb	0	; () banked
 16087  002186  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16088  002188  0E03               	movlw	3
 16089  00218A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16090  00218C  EC12  F027         	call	_updateServoPosition	;wreg free
 16091                           
 16092                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16093  002190  0E1D               	movlw	29
 16094  002192  0100               	movlb	0	; () banked
 16095  002194  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16096  002196  0E69               	movlw	105
 16097  002198  0100               	movlb	0	; () banked
 16098  00219A  6FAB               	movwf	??_BothServos& (0+255),b
 16099  00219C  0EA5               	movlw	165
 16100  00219E                     u11157:
 16101  00219E  2EE8               	decfsz	wreg,f,c
 16102  0021A0  D7FE               	bra	u11157
 16103  0021A2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16104  0021A4  D7FC               	bra	u11157
 16105  0021A6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16106  0021A8  D7FA               	bra	u11157
 16107                           
 16108                           ;Test.c: 380: updateServoPosition(1050, 3);
 16109  0021AA  0E04               	movlw	4
 16110  0021AC  0100               	movlb	0	; () banked
 16111  0021AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16112  0021B0  0E1A               	movlw	26
 16113  0021B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16114  0021B4  0E00               	movlw	0
 16115  0021B6  0100               	movlb	0	; () banked
 16116  0021B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16117  0021BA  0E03               	movlw	3
 16118  0021BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16119  0021BE  EC12  F027         	call	_updateServoPosition	;wreg free
 16120                           
 16121                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16122  0021C2  0E1F               	movlw	31
 16123  0021C4  0100               	movlb	0	; () banked
 16124  0021C6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16125  0021C8  0E71               	movlw	113
 16126  0021CA  0100               	movlb	0	; () banked
 16127  0021CC  6FAB               	movwf	??_BothServos& (0+255),b
 16128  0021CE  0E1E               	movlw	30
 16129  0021D0                     u11167:
 16130  0021D0  2EE8               	decfsz	wreg,f,c
 16131  0021D2  D7FE               	bra	u11167
 16132  0021D4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16133  0021D6  D7FC               	bra	u11167
 16134  0021D8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16135  0021DA  D7FA               	bra	u11167
 16136  0021DC  F000               	nop	
 16137                           
 16138                           ;Test.c: 383: updateServoPosition(500, 1);
 16139  0021DE  0E01               	movlw	1
 16140  0021E0  0100               	movlb	0	; () banked
 16141  0021E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16142  0021E4  0EF4               	movlw	244
 16143  0021E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16144  0021E8  0E00               	movlw	0
 16145  0021EA  0100               	movlb	0	; () banked
 16146  0021EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16147  0021EE  0E01               	movlw	1
 16148  0021F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16149  0021F2  EC12  F027         	call	_updateServoPosition	;wreg free
 16150                           
 16151                           ;Test.c: 384: updateServoPosition(1050, 3);
 16152  0021F6  0E04               	movlw	4
 16153  0021F8  0100               	movlb	0	; () banked
 16154  0021FA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16155  0021FC  0E1A               	movlw	26
 16156  0021FE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16157  002200  0E00               	movlw	0
 16158  002202  0100               	movlb	0	; () banked
 16159  002204  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16160  002206  0E03               	movlw	3
 16161  002208  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16162  00220A  EC12  F027         	call	_updateServoPosition	;wreg free
 16163                           
 16164                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16165  00220E  0E1F               	movlw	31
 16166  002210  0100               	movlb	0	; () banked
 16167  002212  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16168  002214  0E71               	movlw	113
 16169  002216  0100               	movlb	0	; () banked
 16170  002218  6FAB               	movwf	??_BothServos& (0+255),b
 16171  00221A  0E1E               	movlw	30
 16172  00221C                     u11177:
 16173  00221C  2EE8               	decfsz	wreg,f,c
 16174  00221E  D7FE               	bra	u11177
 16175  002220  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16176  002222  D7FC               	bra	u11177
 16177  002224  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16178  002226  D7FA               	bra	u11177
 16179  002228  F000               	nop	
 16180                           
 16181                           ;Test.c: 386: updateServoPosition(1260, 3);
 16182  00222A  0E04               	movlw	4
 16183  00222C  0100               	movlb	0	; () banked
 16184  00222E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16185  002230  0EEC               	movlw	236
 16186  002232  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16187  002234  0E00               	movlw	0
 16188  002236  0100               	movlb	0	; () banked
 16189  002238  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16190  00223A  0E03               	movlw	3
 16191  00223C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16192  00223E  EC12  F027         	call	_updateServoPosition	;wreg free
 16193                           
 16194                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16195  002242  0E1D               	movlw	29
 16196  002244  0100               	movlb	0	; () banked
 16197  002246  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16198  002248  0E69               	movlw	105
 16199  00224A  0100               	movlb	0	; () banked
 16200  00224C  6FAB               	movwf	??_BothServos& (0+255),b
 16201  00224E  0EA5               	movlw	165
 16202  002250                     u11187:
 16203  002250  2EE8               	decfsz	wreg,f,c
 16204  002252  D7FE               	bra	u11187
 16205  002254  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16206  002256  D7FC               	bra	u11187
 16207  002258  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16208  00225A  D7FA               	bra	u11187
 16209                           
 16210                           ;Test.c: 388: updateServoPosition(1050, 3);
 16211  00225C  0E04               	movlw	4
 16212  00225E  0100               	movlb	0	; () banked
 16213  002260  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16214  002262  0E1A               	movlw	26
 16215  002264  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16216  002266  0E00               	movlw	0
 16217  002268  0100               	movlb	0	; () banked
 16218  00226A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16219  00226C  0E03               	movlw	3
 16220  00226E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16221  002270  EC12  F027         	call	_updateServoPosition	;wreg free
 16222                           
 16223                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16224  002274  0E3D               	movlw	61
 16225  002276  0100               	movlb	0	; () banked
 16226  002278  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16227  00227A  0EE1               	movlw	225
 16228  00227C  0100               	movlb	0	; () banked
 16229  00227E  6FAB               	movwf	??_BothServos& (0+255),b
 16230  002280  0E3F               	movlw	63
 16231  002282                     u11197:
 16232  002282  2EE8               	decfsz	wreg,f,c
 16233  002284  D7FE               	bra	u11197
 16234  002286  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16235  002288  D7FC               	bra	u11197
 16236  00228A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16237  00228C  D7FA               	bra	u11197
 16238  00228E  D000               	nop2	
 16239                           
 16240                           ;Test.c: 391: updateServoPosition(1670, 1);
 16241  002290  0E06               	movlw	6
 16242  002292  0100               	movlb	0	; () banked
 16243  002294  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16244  002296  0E86               	movlw	134
 16245  002298  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16246  00229A  0E00               	movlw	0
 16247  00229C  0100               	movlb	0	; () banked
 16248  00229E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16249  0022A0  0E01               	movlw	1
 16250  0022A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16251  0022A4  EC12  F027         	call	_updateServoPosition	;wreg free
 16252                           
 16253                           ;Test.c: 392: updateServoPosition(1050, 3);
 16254  0022A8  0E04               	movlw	4
 16255  0022AA  0100               	movlb	0	; () banked
 16256  0022AC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16257  0022AE  0E1A               	movlw	26
 16258  0022B0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16259  0022B2  0E00               	movlw	0
 16260  0022B4  0100               	movlb	0	; () banked
 16261  0022B6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16262  0022B8  0E03               	movlw	3
 16263  0022BA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16264  0022BC  EC12  F027         	call	_updateServoPosition	;wreg free
 16265                           
 16266                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16267  0022C0  0E1F               	movlw	31
 16268  0022C2  0100               	movlb	0	; () banked
 16269  0022C4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16270  0022C6  0E71               	movlw	113
 16271  0022C8  0100               	movlb	0	; () banked
 16272  0022CA  6FAB               	movwf	??_BothServos& (0+255),b
 16273  0022CC  0E1E               	movlw	30
 16274  0022CE                     u11207:
 16275  0022CE  2EE8               	decfsz	wreg,f,c
 16276  0022D0  D7FE               	bra	u11207
 16277  0022D2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16278  0022D4  D7FC               	bra	u11207
 16279  0022D6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16280  0022D8  D7FA               	bra	u11207
 16281  0022DA  F000               	nop	
 16282                           
 16283                           ;Test.c: 394: updateServoPosition(1390, 3);
 16284  0022DC  0E05               	movlw	5
 16285  0022DE  0100               	movlb	0	; () banked
 16286  0022E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16287  0022E2  0E6E               	movlw	110
 16288  0022E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16289  0022E6  0E00               	movlw	0
 16290  0022E8  0100               	movlb	0	; () banked
 16291  0022EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16292  0022EC  0E03               	movlw	3
 16293  0022EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16294  0022F0  EC12  F027         	call	_updateServoPosition	;wreg free
 16295                           
 16296                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16297  0022F4  0E1D               	movlw	29
 16298  0022F6  0100               	movlb	0	; () banked
 16299  0022F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16300  0022FA  0E69               	movlw	105
 16301  0022FC  0100               	movlb	0	; () banked
 16302  0022FE  6FAB               	movwf	??_BothServos& (0+255),b
 16303  002300  0EA5               	movlw	165
 16304  002302                     u11217:
 16305  002302  2EE8               	decfsz	wreg,f,c
 16306  002304  D7FE               	bra	u11217
 16307  002306  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16308  002308  D7FC               	bra	u11217
 16309  00230A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16310  00230C  D7FA               	bra	u11217
 16311                           
 16312                           ;Test.c: 396: updateServoPosition(1050, 3);
 16313  00230E  0E04               	movlw	4
 16314  002310  0100               	movlb	0	; () banked
 16315  002312  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16316  002314  0E1A               	movlw	26
 16317  002316  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16318  002318  0E00               	movlw	0
 16319  00231A  0100               	movlb	0	; () banked
 16320  00231C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16321  00231E  0E03               	movlw	3
 16322  002320  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16323  002322  EC12  F027         	call	_updateServoPosition	;wreg free
 16324                           
 16325                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16326  002326  0E1F               	movlw	31
 16327  002328  0100               	movlb	0	; () banked
 16328  00232A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16329  00232C  0E71               	movlw	113
 16330  00232E  0100               	movlb	0	; () banked
 16331  002330  6FAB               	movwf	??_BothServos& (0+255),b
 16332  002332  0E1E               	movlw	30
 16333  002334                     u11227:
 16334  002334  2EE8               	decfsz	wreg,f,c
 16335  002336  D7FE               	bra	u11227
 16336  002338  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16337  00233A  D7FC               	bra	u11227
 16338  00233C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16339  00233E  D7FA               	bra	u11227
 16340  002340  F000               	nop	
 16341                           
 16342                           ;Test.c: 399: updateServoPosition(2400, 1);
 16343  002342  0E09               	movlw	9
 16344  002344  0100               	movlb	0	; () banked
 16345  002346  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16346  002348  0E60               	movlw	96
 16347  00234A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16348  00234C  0E00               	movlw	0
 16349  00234E  0100               	movlb	0	; () banked
 16350  002350  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16351  002352  0E01               	movlw	1
 16352  002354  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16353  002356  EC12  F027         	call	_updateServoPosition	;wreg free
 16354                           
 16355                           ;Test.c: 400: updateServoPosition(1050, 3);
 16356  00235A  0E04               	movlw	4
 16357  00235C  0100               	movlb	0	; () banked
 16358  00235E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16359  002360  0E1A               	movlw	26
 16360  002362  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16361  002364  0E00               	movlw	0
 16362  002366  0100               	movlb	0	; () banked
 16363  002368  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16364  00236A  0E03               	movlw	3
 16365  00236C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16366  00236E  EC12  F027         	call	_updateServoPosition	;wreg free
 16367                           
 16368                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16369  002372  0E1F               	movlw	31
 16370  002374  0100               	movlb	0	; () banked
 16371  002376  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16372  002378  0E71               	movlw	113
 16373  00237A  0100               	movlb	0	; () banked
 16374  00237C  6FAB               	movwf	??_BothServos& (0+255),b
 16375  00237E  0E1E               	movlw	30
 16376  002380                     u11237:
 16377  002380  2EE8               	decfsz	wreg,f,c
 16378  002382  D7FE               	bra	u11237
 16379  002384  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16380  002386  D7FC               	bra	u11237
 16381  002388  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16382  00238A  D7FA               	bra	u11237
 16383  00238C  F000               	nop	
 16384                           
 16385                           ;Test.c: 402: updateServoPosition(1390, 3);
 16386  00238E  0E05               	movlw	5
 16387  002390  0100               	movlb	0	; () banked
 16388  002392  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16389  002394  0E6E               	movlw	110
 16390  002396  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16391  002398  0E00               	movlw	0
 16392  00239A  0100               	movlb	0	; () banked
 16393  00239C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16394  00239E  0E03               	movlw	3
 16395  0023A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16396  0023A2  EC12  F027         	call	_updateServoPosition	;wreg free
 16397                           
 16398                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16399  0023A6  0E1D               	movlw	29
 16400  0023A8  0100               	movlb	0	; () banked
 16401  0023AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16402  0023AC  0E69               	movlw	105
 16403  0023AE  0100               	movlb	0	; () banked
 16404  0023B0  6FAB               	movwf	??_BothServos& (0+255),b
 16405  0023B2  0EA5               	movlw	165
 16406  0023B4                     u11247:
 16407  0023B4  2EE8               	decfsz	wreg,f,c
 16408  0023B6  D7FE               	bra	u11247
 16409  0023B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16410  0023BA  D7FC               	bra	u11247
 16411  0023BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16412  0023BE  D7FA               	bra	u11247
 16413                           
 16414                           ;Test.c: 404: updateServoPosition(1050, 3);
 16415  0023C0  0E04               	movlw	4
 16416  0023C2  0100               	movlb	0	; () banked
 16417  0023C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16418  0023C6  0E1A               	movlw	26
 16419  0023C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16420  0023CA  0E00               	movlw	0
 16421  0023CC  0100               	movlb	0	; () banked
 16422  0023CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16423  0023D0  0E03               	movlw	3
 16424  0023D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16425  0023D4  EC12  F027         	call	_updateServoPosition	;wreg free
 16426                           
 16427                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16428  0023D8  0E1F               	movlw	31
 16429  0023DA  0100               	movlb	0	; () banked
 16430  0023DC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16431  0023DE  0E71               	movlw	113
 16432  0023E0  0100               	movlb	0	; () banked
 16433  0023E2  6FAB               	movwf	??_BothServos& (0+255),b
 16434  0023E4  0E1E               	movlw	30
 16435  0023E6                     u11257:
 16436  0023E6  2EE8               	decfsz	wreg,f,c
 16437  0023E8  D7FE               	bra	u11257
 16438  0023EA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16439  0023EC  D7FC               	bra	u11257
 16440  0023EE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16441  0023F0  D7FA               	bra	u11257
 16442  0023F2  F000               	nop	
 16443                           
 16444                           ;Test.c: 407: stopSignals();
 16445  0023F4  EC96  F02D         	call	_stopSignals	;wreg free
 16446                           
 16447                           ;Test.c: 408: machine_state = Testing_state;
 16448  0023F8  0E03               	movlw	3
 16449  0023FA  0100               	movlb	0	; () banked
 16450  0023FC  6FFC               	movwf	_machine_state& (0+255),b
 16451                           
 16452                           ; BSR set to: 0
 16453  0023FE  0012               	return		;funcret
 16454  002400                     __end_of_BothServos:
 16455                           	opt stack 0
 16456                           tblptru	equ	0xFF8
 16457                           tblptrh	equ	0xFF7
 16458                           tblptrl	equ	0xFF6
 16459                           tablat	equ	0xFF5
 16460                           prodh	equ	0xFF4
 16461                           prodl	equ	0xFF3
 16462                           intcon	equ	0xFF2
 16463                           intcon2	equ	0xFF1
 16464                           intcon3	equ	0xFF0
 16465                           postinc0	equ	0xFEE
 16466                           wreg	equ	0xFE8
 16467                           postdec1	equ	0xFE5
 16468                           fsr1l	equ	0xFE1
 16469                           indf2	equ	0xFDF
 16470                           postinc2	equ	0xFDE
 16471                           postdec2	equ	0xFDD
 16472                           fsr2h	equ	0xFDA
 16473                           fsr2l	equ	0xFD9
 16474                           status	equ	0xFD8
 16475                           
 16476 ;; *************** function _stopSignals *****************
 16477 ;; Defined at:
 16478 ;;		line 71 in file "main.c"
 16479 ;; Parameters:    Size  Location     Type
 16480 ;;		None
 16481 ;; Auto vars:     Size  Location     Type
 16482 ;;		None
 16483 ;; Return value:  Size  Location     Type
 16484 ;;                  1    wreg      void 
 16485 ;; Registers used:
 16486 ;;		wreg, status,2
 16487 ;; Tracked objects:
 16488 ;;		On entry : 0/0
 16489 ;;		On exit  : 0/0
 16490 ;;		Unchanged: 0/0
 16491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16496 ;;Total ram usage:        0 bytes
 16497 ;; Hardware stack levels used:    1
 16498 ;; Hardware stack levels required when called:    7
 16499 ;; This function calls:
 16500 ;;		Nothing
 16501 ;; This function is called by:
 16502 ;;		_main
 16503 ;;		_BothServos
 16504 ;;		_PlatformTest
 16505 ;;		_arm
 16506 ;; This function uses a non-reentrant model
 16507 ;;
 16508                           
 16509                           	psect	text51
 16510  005B2C                     __ptext51:
 16511                           	opt stack 0
 16512  005B2C                     _stopSignals:
 16513                           	opt stack 23
 16514                           
 16515                           ;main.c: 72: LATA = 0x00;
 16516                           
 16517                           ; BSR set to: 0
 16518                           ;incstack = 0
 16519  005B2C  0E00               	movlw	0
 16520  005B2E  6E89               	movwf	3977,c	;volatile
 16521                           
 16522                           ;main.c: 73: LATB = 0x00;
 16523  005B30  0E00               	movlw	0
 16524  005B32  6E8A               	movwf	3978,c	;volatile
 16525                           
 16526                           ;main.c: 74: LATC = 0x00;
 16527  005B34  0E00               	movlw	0
 16528  005B36  6E8B               	movwf	3979,c	;volatile
 16529                           
 16530                           ;main.c: 75: LATD = 0x00;
 16531  005B38  0E00               	movlw	0
 16532  005B3A  6E8C               	movwf	3980,c	;volatile
 16533                           
 16534                           ;main.c: 76: LATE = 0x00;
 16535  005B3C  0E00               	movlw	0
 16536  005B3E  6E8D               	movwf	3981,c	;volatile
 16537                           
 16538                           ;main.c: 77: TMR1ON = 0;
 16539  005B40  90CD               	bcf	4045,0,c	;volatile
 16540                           
 16541                           ;main.c: 78: TMR2ON = 0;
 16542  005B42  94CA               	bcf	4042,2,c	;volatile
 16543                           
 16544                           ;main.c: 79: TMR3ON = 0;
 16545  005B44  90B1               	bcf	4017,0,c	;volatile
 16546  005B46  0012               	return		;funcret
 16547  005B48                     __end_of_stopSignals:
 16548                           	opt stack 0
 16549                           tblptru	equ	0xFF8
 16550                           tblptrh	equ	0xFF7
 16551                           tblptrl	equ	0xFF6
 16552                           tablat	equ	0xFF5
 16553                           prodh	equ	0xFF4
 16554                           prodl	equ	0xFF3
 16555                           intcon	equ	0xFF2
 16556                           intcon2	equ	0xFF1
 16557                           intcon3	equ	0xFF0
 16558                           postinc0	equ	0xFEE
 16559                           wreg	equ	0xFE8
 16560                           postdec1	equ	0xFE5
 16561                           fsr1l	equ	0xFE1
 16562                           indf2	equ	0xFDF
 16563                           postinc2	equ	0xFDE
 16564                           postdec2	equ	0xFDD
 16565                           fsr2h	equ	0xFDA
 16566                           fsr2l	equ	0xFD9
 16567                           status	equ	0xFD8
 16568                           
 16569 ;; *************** function _initServos *****************
 16570 ;; Defined at:
 16571 ;;		line 464 in file "sort.c"
 16572 ;; Parameters:    Size  Location     Type
 16573 ;;		None
 16574 ;; Auto vars:     Size  Location     Type
 16575 ;;		None
 16576 ;; Return value:  Size  Location     Type
 16577 ;;                  1    wreg      void 
 16578 ;; Registers used:
 16579 ;;		wreg, status,2, status,0, cstack
 16580 ;; Tracked objects:
 16581 ;;		On entry : 0/0
 16582 ;;		On exit  : 0/0
 16583 ;;		Unchanged: 0/0
 16584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16588 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16589 ;;Total ram usage:        1 bytes
 16590 ;; Hardware stack levels used:    1
 16591 ;; Hardware stack levels required when called:    8
 16592 ;; This function calls:
 16593 ;;		_updateServoPosition
 16594 ;; This function is called by:
 16595 ;;		_Loading
 16596 ;;		_BothServos
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           	psect	text52
 16601  004EA2                     __ptext52:
 16602                           	opt stack 0
 16603  004EA2                     _initServos:
 16604                           	opt stack 20
 16605                           
 16606                           ;sort.c: 466: updateServoPosition(1200, 1);
 16607                           
 16608                           ;incstack = 0
 16609  004EA2  0E04               	movlw	4
 16610  004EA4  0100               	movlb	0	; () banked
 16611  004EA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16612  004EA8  0EB0               	movlw	176
 16613  004EAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16614  004EAC  0E00               	movlw	0
 16615  004EAE  0100               	movlb	0	; () banked
 16616  004EB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16617  004EB2  0E01               	movlw	1
 16618  004EB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16619  004EB6  EC12  F027         	call	_updateServoPosition	;wreg free
 16620                           
 16621                           ;sort.c: 467: updateServoPosition(1050, 3);
 16622  004EBA  0E04               	movlw	4
 16623  004EBC  0100               	movlb	0	; () banked
 16624  004EBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16625  004EC0  0E1A               	movlw	26
 16626  004EC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16627  004EC4  0E00               	movlw	0
 16628  004EC6  0100               	movlb	0	; () banked
 16629  004EC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16630  004ECA  0E03               	movlw	3
 16631  004ECC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16632  004ECE  EC12  F027         	call	_updateServoPosition	;wreg free
 16633                           
 16634                           ;sort.c: 468: TMR1ON = 1;
 16635  004ED2  80CD               	bsf	4045,0,c	;volatile
 16636                           
 16637                           ;sort.c: 469: was_low_1 = 0;
 16638  004ED4  0E00               	movlw	0
 16639  004ED6  6E78               	movwf	_was_low_1+1,c	;volatile
 16640  004ED8  0E00               	movlw	0
 16641  004EDA  6E77               	movwf	_was_low_1,c	;volatile
 16642                           
 16643                           ;sort.c: 471: _delay((unsigned long)((5)*(32000000/4000.0)));
 16644  004EDC  0E34               	movlw	52
 16645  004EDE  0100               	movlb	0	; () banked
 16646  004EE0  6F88               	movwf	??_initServos& (0+255),b
 16647  004EE2  0EF1               	movlw	241
 16648  004EE4                     u11267:
 16649  004EE4  2EE8               	decfsz	wreg,f,c
 16650  004EE6  D7FE               	bra	u11267
 16651  004EE8  2F88               	decfsz	??_initServos& (0+255),f,b
 16652  004EEA  D7FC               	bra	u11267
 16653  004EEC  D000               	nop2	
 16654                           
 16655                           ;sort.c: 473: TMR3ON = 1;
 16656  004EEE  80B1               	bsf	4017,0,c	;volatile
 16657                           
 16658                           ;sort.c: 474: was_low_3 = 0;
 16659  004EF0  0E00               	movlw	0
 16660  004EF2  6E7C               	movwf	_was_low_3+1,c	;volatile
 16661  004EF4  0E00               	movlw	0
 16662  004EF6  6E7B               	movwf	_was_low_3,c	;volatile
 16663                           
 16664                           ;sort.c: 477: _delay((unsigned long)((1)*(32000000/4000.0)));
 16665  004EF8  0E0B               	movlw	11
 16666  004EFA  0100               	movlb	0	; () banked
 16667  004EFC  6F88               	movwf	??_initServos& (0+255),b
 16668  004EFE  0E62               	movlw	98
 16669  004F00                     u11277:
 16670  004F00  2EE8               	decfsz	wreg,f,c
 16671  004F02  D7FE               	bra	u11277
 16672  004F04  2F88               	decfsz	??_initServos& (0+255),f,b
 16673  004F06  D7FC               	bra	u11277
 16674  004F08  F000               	nop	
 16675                           
 16676                           ;sort.c: 478: LATBbits.LATB3 = 0;
 16677  004F0A  968A               	bcf	3978,3,c	;volatile
 16678                           
 16679                           ;sort.c: 479: TMR2ON = 1;
 16680  004F0C  84CA               	bsf	4042,2,c	;volatile
 16681                           
 16682                           ;sort.c: 480: was_low_2 = 0;
 16683  004F0E  0E00               	movlw	0
 16684  004F10  6E7A               	movwf	_was_low_2+1,c	;volatile
 16685  004F12  0E00               	movlw	0
 16686  004F14  6E79               	movwf	_was_low_2,c	;volatile
 16687                           
 16688                           ;sort.c: 482: LATCbits.LATC0 = 1;
 16689  004F16  808B               	bsf	3979,0,c	;volatile
 16690  004F18  0012               	return		;funcret
 16691  004F1A                     __end_of_initServos:
 16692                           	opt stack 0
 16693                           tblptru	equ	0xFF8
 16694                           tblptrh	equ	0xFF7
 16695                           tblptrl	equ	0xFF6
 16696                           tablat	equ	0xFF5
 16697                           prodh	equ	0xFF4
 16698                           prodl	equ	0xFF3
 16699                           intcon	equ	0xFF2
 16700                           intcon2	equ	0xFF1
 16701                           intcon3	equ	0xFF0
 16702                           postinc0	equ	0xFEE
 16703                           wreg	equ	0xFE8
 16704                           postdec1	equ	0xFE5
 16705                           fsr1l	equ	0xFE1
 16706                           indf2	equ	0xFDF
 16707                           postinc2	equ	0xFDE
 16708                           postdec2	equ	0xFDD
 16709                           fsr2h	equ	0xFDA
 16710                           fsr2l	equ	0xFD9
 16711                           status	equ	0xFD8
 16712                           
 16713 ;; *************** function _updateServoPosition *****************
 16714 ;; Defined at:
 16715 ;;		line 555 in file "sort.c"
 16716 ;; Parameters:    Size  Location     Type
 16717 ;;  time_us         2    0[BANK0 ] int 
 16718 ;;  timer           2    2[BANK0 ] int 
 16719 ;; Auto vars:     Size  Location     Type
 16720 ;;  my_time         2    6[BANK0 ] unsigned int 
 16721 ;; Return value:  Size  Location     Type
 16722 ;;                  1    wreg      void 
 16723 ;; Registers used:
 16724 ;;		wreg, status,2, status,0
 16725 ;; Tracked objects:
 16726 ;;		On entry : 0/0
 16727 ;;		On exit  : 0/0
 16728 ;;		Unchanged: 0/0
 16729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16730 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16732 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16733 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;Total ram usage:        8 bytes
 16735 ;; Hardware stack levels used:    1
 16736 ;; Hardware stack levels required when called:    7
 16737 ;; This function calls:
 16738 ;;		Nothing
 16739 ;; This function is called by:
 16740 ;;		_Distribution
 16741 ;;		_initServos
 16742 ;;		_actuatorTest
 16743 ;;		_BothServos
 16744 ;; This function uses a non-reentrant model
 16745 ;;
 16746                           
 16747                           	psect	text53
 16748  004E24                     __ptext53:
 16749                           	opt stack 0
 16750  004E24                     _updateServoPosition:
 16751                           	opt stack 20
 16752                           
 16753                           ;sort.c: 556: unsigned int my_time = 65535 - time_us;
 16754                           
 16755                           ;incstack = 0
 16756  004E24  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16757  004E28  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16758  004E2C  0100               	movlb	0	; () banked
 16759  004E2E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16760  004E30  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16761  004E32  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16762  004E34  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16763  004E36  0EFF               	movlw	255
 16764  004E38  0100               	movlb	0	; () banked
 16765  004E3A  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16766  004E3C  0100               	movlb	0	; () banked
 16767  004E3E  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16768  004E40  0EFF               	movlw	255
 16769  004E42  0100               	movlb	0	; () banked
 16770  004E44  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16771  004E46  0100               	movlb	0	; () banked
 16772  004E48  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16773                           
 16774                           ;sort.c: 557: switch(timer){
 16775  004E4A  D019               	goto	l6880
 16776  004E4C                     l6874:
 16777                           
 16778                           ; BSR set to: 0
 16779                           ;sort.c: 559: servoTimes[0] = my_time >> 8;
 16780  004E4C  0100               	movlb	0	; () banked
 16781  004E4E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16782  004E50  6E5B               	movwf	_servoTimes,c
 16783  004E52  6A5C               	clrf	_servoTimes+1,c
 16784                           
 16785                           ;sort.c: 560: servoTimes[1] = my_time & 0xFF;
 16786  004E54  0100               	movlb	0	; () banked
 16787  004E56  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16788  004E58  6E5D               	movwf	_servoTimes+2,c
 16789  004E5A  6A5E               	clrf	_servoTimes+3,c
 16790                           
 16791                           ; BSR set to: 0
 16792                           ;sort.c: 562: pan_servo_state = time_us;
 16793  004E5C  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16794  004E60  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16795  004E64                     l925:
 16796                           
 16797                           ; BSR set to: 0
 16798                           ;sort.c: 564: servoTimes[2] = my_time >> 8;
 16799  004E64  0100               	movlb	0	; () banked
 16800  004E66  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16801  004E68  6E5F               	movwf	_servoTimes+4,c
 16802  004E6A  6A60               	clrf	_servoTimes+5,c
 16803                           
 16804                           ;sort.c: 565: servoTimes[3] = my_time & 0xFF;
 16805  004E6C  0100               	movlb	0	; () banked
 16806  004E6E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16807  004E70  6E61               	movwf	_servoTimes+6,c
 16808  004E72  6A62               	clrf	_servoTimes+7,c
 16809                           
 16810                           ; BSR set to: 0
 16811                           ;sort.c: 567: tilt_servo_state = time_us;
 16812  004E74  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16813  004E78  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16814                           
 16815                           ;sort.c: 568: }
 16816  004E7C  0012               	return	
 16817  004E7E                     l6880:
 16818                           
 16819                           ; BSR set to: 0
 16820  004E7E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16821  004E82  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16822                           
 16823                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16824                           ; Switch size 1, requested type "space"
 16825                           ; Number of cases is 1, Range of values is 0 to 0
 16826                           ; switch strategies available:
 16827                           ; Name         Instructions Cycles
 16828                           ; simple_byte            4     3 (average)
 16829                           ;	Chosen strategy is simple_byte
 16830  004E86  0100               	movlb	0	; () banked
 16831  004E88  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16832  004E8A  0A00               	xorlw	0	; case 0
 16833  004E8C  A4D8               	btfss	status,2,c
 16834  004E8E  0012               	return	
 16835                           
 16836                           ; BSR set to: 0
 16837                           ; Switch size 1, requested type "space"
 16838                           ; Number of cases is 2, Range of values is 1 to 3
 16839                           ; switch strategies available:
 16840                           ; Name         Instructions Cycles
 16841                           ; simple_byte            7     4 (average)
 16842                           ;	Chosen strategy is simple_byte
 16843  004E90  0100               	movlb	0	; () banked
 16844  004E92  5184               	movf	??_updateServoPosition& (0+255),w,b
 16845  004E94  0A01               	xorlw	1	; case 1
 16846  004E96  B4D8               	btfsc	status,2,c
 16847  004E98  D7D9               	goto	l6874
 16848  004E9A  0A02               	xorlw	2	; case 3
 16849  004E9C  A4D8               	btfss	status,2,c
 16850  004E9E  0012               	return	
 16851  004EA0  D7E1               	goto	l925
 16852  004EA2                     __end_of_updateServoPosition:
 16853                           	opt stack 0
 16854                           tblptru	equ	0xFF8
 16855                           tblptrh	equ	0xFF7
 16856                           tblptrl	equ	0xFF6
 16857                           tablat	equ	0xFF5
 16858                           prodh	equ	0xFF4
 16859                           prodl	equ	0xFF3
 16860                           intcon	equ	0xFF2
 16861                           intcon2	equ	0xFF1
 16862                           intcon3	equ	0xFF0
 16863                           postinc0	equ	0xFEE
 16864                           wreg	equ	0xFE8
 16865                           postdec1	equ	0xFE5
 16866                           fsr1l	equ	0xFE1
 16867                           indf2	equ	0xFDF
 16868                           postinc2	equ	0xFDE
 16869                           postdec2	equ	0xFDD
 16870                           fsr2h	equ	0xFDA
 16871                           fsr2l	equ	0xFD9
 16872                           status	equ	0xFD8
 16873                           
 16874 ;; *************** function _BlockerTest *****************
 16875 ;; Defined at:
 16876 ;;		line 581 in file "Test.c"
 16877 ;; Parameters:    Size  Location     Type
 16878 ;;		None
 16879 ;; Auto vars:     Size  Location     Type
 16880 ;;  i               2   45[BANK0 ] int 
 16881 ;;  cond_flag       2   51[BANK0 ] int 
 16882 ;;  cam_flag        2   49[BANK0 ] int 
 16883 ;;  res             2   47[BANK0 ] int 
 16884 ;; Return value:  Size  Location     Type
 16885 ;;                  1    wreg      void 
 16886 ;; Registers used:
 16887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16888 ;; Tracked objects:
 16889 ;;		On entry : 0/0
 16890 ;;		On exit  : 0/0
 16891 ;;		Unchanged: 0/0
 16892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16894 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16896 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16897 ;;Total ram usage:       10 bytes
 16898 ;; Hardware stack levels used:    1
 16899 ;; Hardware stack levels required when called:   10
 16900 ;; This function calls:
 16901 ;;		_lcdInst
 16902 ;;		_printf
 16903 ;;		_readADC
 16904 ;; This function is called by:
 16905 ;;		_Test
 16906 ;; This function uses a non-reentrant model
 16907 ;;
 16908                           
 16909                           	psect	text54
 16910  003D98                     __ptext54:
 16911                           	opt stack 0
 16912  003D98                     _BlockerTest:
 16913                           	opt stack 19
 16914                           
 16915                           ;Test.c: 582: readADC(2);
 16916                           
 16917                           ; BSR set to: 0
 16918                           ;incstack = 0
 16919  003D98  0E02               	movlw	2
 16920  003D9A  ECDA  F02C         	call	_readADC
 16921                           
 16922                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16923  003D9E  50C3               	movf	4035,w,c	;volatile
 16924  003DA0  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16925  003DA4  0100               	movlb	0	; () banked
 16926  003DA6  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16927  003DA8  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16928  003DAC  0100               	movlb	0	; () banked
 16929  003DAE  6BAB               	clrf	??_BlockerTest& (0+255),b
 16930  003DB0  0100               	movlb	0	; () banked
 16931  003DB2  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16932  003DB4  0100               	movlb	0	; () banked
 16933  003DB6  6FAF               	movwf	BlockerTest@res& (0+255),b
 16934  003DB8  0100               	movlb	0	; () banked
 16935  003DBA  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16936  003DBC  0100               	movlb	0	; () banked
 16937  003DBE  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16938                           
 16939                           ; BSR set to: 0
 16940                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16941  003DC0  0E01               	movlw	1
 16942  003DC2  ECEF  F02D         	call	_lcdInst
 16943  003DC6  0E68               	movlw	104
 16944  003DC8  0100               	movlb	0	; () banked
 16945  003DCA  6FAB               	movwf	??_BlockerTest& (0+255),b
 16946  003DCC  0EE4               	movlw	228
 16947  003DCE                     u11287:
 16948  003DCE  2EE8               	decfsz	wreg,f,c
 16949  003DD0  D7FE               	bra	u11287
 16950  003DD2  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16951  003DD4  D7FC               	bra	u11287
 16952  003DD6  F000               	nop	
 16953  003DD8  0E80               	movlw	128
 16954  003DDA  ECEF  F02D         	call	_lcdInst
 16955                           
 16956                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16957  003DDE  0E6D               	movlw	low STR_123
 16958  003DE0  0100               	movlb	0	; () banked
 16959  003DE2  6F8E               	movwf	printf@f& (0+255),b
 16960  003DE4  0EFE               	movlw	high STR_123
 16961  003DE6  0100               	movlb	0	; () banked
 16962  003DE8  6F8F               	movwf	(printf@f+1)& (0+255),b
 16963  003DEA  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16964  003DEE  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16965  003DF2  ECED  F00D         	call	_printf	;wreg free
 16966                           
 16967                           ;Test.c: 587: lcdInst(0b11000000);;
 16968  003DF6  0EC0               	movlw	192
 16969  003DF8  ECEF  F02D         	call	_lcdInst
 16970                           
 16971                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 16972  003DFC  0E1C               	movlw	low STR_124
 16973  003DFE  0100               	movlb	0	; () banked
 16974  003E00  6F8E               	movwf	printf@f& (0+255),b
 16975  003E02  0EFB               	movlw	high STR_124
 16976  003E04  0100               	movlb	0	; () banked
 16977  003E06  6F8F               	movwf	(printf@f+1)& (0+255),b
 16978  003E08  ECED  F00D         	call	_printf	;wreg free
 16979                           
 16980                           ;Test.c: 589: int cam_flag = 1;
 16981  003E0C  0E00               	movlw	0
 16982  003E0E  0100               	movlb	0	; () banked
 16983  003E10  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16984  003E12  0E01               	movlw	1
 16985  003E14  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16986                           
 16987                           ; BSR set to: 0
 16988                           ;Test.c: 590: int cond_flag = 0;
 16989  003E16  0E00               	movlw	0
 16990  003E18  0100               	movlb	0	; () banked
 16991  003E1A  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16992  003E1C  0E00               	movlw	0
 16993  003E1E  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16994                           
 16995                           ; BSR set to: 0
 16996                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 16997                           
 16998                           ;Test.c: 592: while(1){
 16999  003E20  D023               	goto	l9122
 17000  003E22                     l9114:
 17001                           
 17002                           ;Test.c: 594: readADC(2);
 17003  003E22  0E02               	movlw	2
 17004  003E24  ECDA  F02C         	call	_readADC
 17005                           
 17006                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 17007  003E28  50C3               	movf	4035,w,c	;volatile
 17008  003E2A  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17009  003E2E  0100               	movlb	0	; () banked
 17010  003E30  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17011  003E32  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17012  003E36  0100               	movlb	0	; () banked
 17013  003E38  6BAB               	clrf	??_BlockerTest& (0+255),b
 17014  003E3A  0100               	movlb	0	; () banked
 17015  003E3C  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17016  003E3E  0100               	movlb	0	; () banked
 17017  003E40  6FAF               	movwf	BlockerTest@res& (0+255),b
 17018  003E42  0100               	movlb	0	; () banked
 17019  003E44  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17020  003E46  0100               	movlb	0	; () banked
 17021  003E48  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;Test.c: 596: lcdInst(0b10000000);;
 17025  003E4A  0E80               	movlw	128
 17026  003E4C  ECEF  F02D         	call	_lcdInst
 17027                           
 17028                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 17029  003E50  0E6D               	movlw	low STR_123
 17030  003E52  0100               	movlb	0	; () banked
 17031  003E54  6F8E               	movwf	printf@f& (0+255),b
 17032  003E56  0EFE               	movlw	high STR_123
 17033  003E58  0100               	movlb	0	; () banked
 17034  003E5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 17035  003E5C  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17036  003E60  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17037  003E64  ECED  F00D         	call	_printf	;wreg free
 17038  003E68                     l9122:
 17039  003E68  A281               	btfss	3969,1,c	;volatile
 17040  003E6A  D7DB               	goto	l9114
 17041                           
 17042                           ;Test.c: 598: }
 17043                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 17044  003E6C  3881               	swapf	3969,w,c	;volatile
 17045  003E6E  0B0F               	andlw	15
 17046  003E70  0A0F               	xorlw	15
 17047  003E72  B4D8               	btfsc	status,2,c
 17048  003E74  0012               	return	
 17049                           
 17050                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 17051                           
 17052                           ;Test.c: 601: }
 17053                           
 17054                           ;Test.c: 600: break;
 17055  003E76  3881               	swapf	3969,w,c	;volatile
 17056  003E78  0B0F               	andlw	15
 17057  003E7A  06E8               	decf	wreg,f,c
 17058  003E7C  A4D8               	btfss	status,2,c
 17059  003E7E  D016               	goto	l9140
 17060                           
 17061                           ;Test.c: 603: if(cond_flag){
 17062  003E80  0100               	movlb	0	; () banked
 17063  003E82  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17064  003E84  0100               	movlb	0	; () banked
 17065  003E86  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17066  003E88  B4D8               	btfsc	status,2,c
 17067  003E8A  D007               	goto	l1445
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;Test.c: 604: LATAbits.LATA3 = 1;
 17071  003E8C  8689               	bsf	3977,3,c	;volatile
 17072  003E8E  D006               	goto	l9138
 17073  003E90                     u8241:
 17074  003E90  0E01               	movlw	1
 17075  003E92                     u8250:
 17076  003E92  0100               	movlb	0	; () banked
 17077  003E94  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17078  003E96  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17079                           
 17080                           ;Test.c: 606: }
 17081  003E98  D05F               	goto	l9168
 17082  003E9A                     l1445:
 17083                           
 17084                           ; BSR set to: 0
 17085                           ;Test.c: 607: else{
 17086                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17087  003E9A  9689               	bcf	3977,3,c	;volatile
 17088  003E9C                     l9138:
 17089                           
 17090                           ; BSR set to: 0
 17091                           ;Test.c: 609: cond_flag = !cond_flag;
 17092  003E9C  0100               	movlb	0	; () banked
 17093  003E9E  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17094  003EA0  0100               	movlb	0	; () banked
 17095  003EA2  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17096  003EA4  B4D8               	btfsc	status,2,c
 17097  003EA6  D7F4               	goto	u8241
 17098  003EA8  0E00               	movlw	0
 17099  003EAA  D7F3               	goto	u8250
 17100  003EAC                     l9140:
 17101                           
 17102                           ;Test.c: 612: else{
 17103                           ;Test.c: 613: if(cam_flag){
 17104  003EAC  0100               	movlb	0	; () banked
 17105  003EAE  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17106  003EB0  0100               	movlb	0	; () banked
 17107  003EB2  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17108  003EB4  B4D8               	btfsc	status,2,c
 17109  003EB6  D007               	goto	l9146
 17110                           
 17111                           ; BSR set to: 0
 17112                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17113  003EB8  808B               	bsf	3979,0,c	;volatile
 17114  003EBA  D023               	goto	l9158
 17115  003EBC                     u8291:
 17116  003EBC  0E01               	movlw	1
 17117  003EBE                     u8300:
 17118  003EBE  0100               	movlb	0	; () banked
 17119  003EC0  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17120  003EC2  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17121                           
 17122                           ;Test.c: 616: }
 17123  003EC4  D049               	goto	l9168
 17124  003EC6                     l9146:
 17125                           
 17126                           ; BSR set to: 0
 17127                           ;Test.c: 617: else{
 17128                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17129  003EC6  0E00               	movlw	0
 17130  003EC8  0100               	movlb	0	; () banked
 17131  003ECA  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17132  003ECC  0E00               	movlw	0
 17133  003ECE  6FAD               	movwf	BlockerTest@i& (0+255),b
 17134  003ED0                     l9148:
 17135                           
 17136                           ; BSR set to: 0
 17137  003ED0  0100               	movlb	0	; () banked
 17138  003ED2  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17139  003ED4  D008               	goto	l1450
 17140  003ED6  0E88               	movlw	136
 17141  003ED8  0100               	movlb	0	; () banked
 17142  003EDA  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17143  003EDC  0E13               	movlw	19
 17144  003EDE  0100               	movlb	0	; () banked
 17145  003EE0  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17146  003EE2  B0D8               	btfsc	status,0,c
 17147  003EE4  D00D               	goto	l1451
 17148  003EE6                     l1450:
 17149                           
 17150                           ; BSR set to: 0
 17151                           ;Test.c: 619: {
 17152                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17153  003EE6  808B               	bsf	3979,0,c	;volatile
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17157  003EE8  0E1A               	movlw	26
 17158  003EEA                     u11297:
 17159  003EEA  2EE8               	decfsz	wreg,f,c
 17160  003EEC  D7FE               	bra	u11297
 17161  003EEE  D000               	nop2	
 17162                           
 17163                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17164  003EF0  908B               	bcf	3979,0,c	;volatile
 17165                           
 17166                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17167  003EF2  0EF0               	movlw	240
 17168  003EF4                     u11307:
 17169  003EF4  2EE8               	decfsz	wreg,f,c
 17170  003EF6  D7FE               	bra	u11307
 17171  003EF8  0100               	movlb	0	; () banked
 17172  003EFA  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17173  003EFC  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17174  003EFE  D7E8               	goto	l9148
 17175  003F00                     l1451:
 17176                           
 17177                           ; BSR set to: 0
 17178                           ;Test.c: 624: }
 17179                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17180  003F00  908B               	bcf	3979,0,c	;volatile
 17181  003F02                     l9158:
 17182                           
 17183                           ; BSR set to: 0
 17184                           ;Test.c: 626: cam_flag = !cam_flag;
 17185  003F02  0100               	movlb	0	; () banked
 17186  003F04  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17187  003F06  0100               	movlb	0	; () banked
 17188  003F08  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17189  003F0A  B4D8               	btfsc	status,2,c
 17190  003F0C  D7D7               	goto	u8291
 17191  003F0E  0E00               	movlw	0
 17192  003F10  D7D6               	goto	u8300
 17193  003F12                     l9160:
 17194                           
 17195                           ;Test.c: 631: readADC(2);
 17196  003F12  0E02               	movlw	2
 17197  003F14  ECDA  F02C         	call	_readADC
 17198                           
 17199                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17200  003F18  50C3               	movf	4035,w,c	;volatile
 17201  003F1A  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17202  003F1E  0100               	movlb	0	; () banked
 17203  003F20  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17204  003F22  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17205  003F26  0100               	movlb	0	; () banked
 17206  003F28  6BAB               	clrf	??_BlockerTest& (0+255),b
 17207  003F2A  0100               	movlb	0	; () banked
 17208  003F2C  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17209  003F2E  0100               	movlb	0	; () banked
 17210  003F30  6FAF               	movwf	BlockerTest@res& (0+255),b
 17211  003F32  0100               	movlb	0	; () banked
 17212  003F34  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17213  003F36  0100               	movlb	0	; () banked
 17214  003F38  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;Test.c: 633: lcdInst(0b10000000);;
 17218  003F3A  0E80               	movlw	128
 17219  003F3C  ECEF  F02D         	call	_lcdInst
 17220                           
 17221                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17222  003F40  0E6D               	movlw	low STR_123
 17223  003F42  0100               	movlb	0	; () banked
 17224  003F44  6F8E               	movwf	printf@f& (0+255),b
 17225  003F46  0EFE               	movlw	high STR_123
 17226  003F48  0100               	movlb	0	; () banked
 17227  003F4A  6F8F               	movwf	(printf@f+1)& (0+255),b
 17228  003F4C  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17229  003F50  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17230  003F54  ECED  F00D         	call	_printf	;wreg free
 17231  003F58                     l9168:
 17232  003F58  A281               	btfss	3969,1,c	;volatile
 17233  003F5A  D786               	goto	l9122
 17234  003F5C  D7DA               	goto	l9160
 17235  003F5E                     __end_of_BlockerTest:
 17236                           	opt stack 0
 17237                           tblptru	equ	0xFF8
 17238                           tblptrh	equ	0xFF7
 17239                           tblptrl	equ	0xFF6
 17240                           tablat	equ	0xFF5
 17241                           prodh	equ	0xFF4
 17242                           prodl	equ	0xFF3
 17243                           intcon	equ	0xFF2
 17244                           intcon2	equ	0xFF1
 17245                           intcon3	equ	0xFF0
 17246                           postinc0	equ	0xFEE
 17247                           wreg	equ	0xFE8
 17248                           postdec1	equ	0xFE5
 17249                           fsr1l	equ	0xFE1
 17250                           indf2	equ	0xFDF
 17251                           postinc2	equ	0xFDE
 17252                           postdec2	equ	0xFDD
 17253                           fsr2h	equ	0xFDA
 17254                           fsr2l	equ	0xFD9
 17255                           status	equ	0xFD8
 17256                           
 17257 ;; *************** function _readADC *****************
 17258 ;; Defined at:
 17259 ;;		line 15 in file "ADCFunctionality.c"
 17260 ;; Parameters:    Size  Location     Type
 17261 ;;  channel         1    wreg     unsigned char 
 17262 ;; Auto vars:     Size  Location     Type
 17263 ;;  channel         1    1[BANK0 ] unsigned char 
 17264 ;; Return value:  Size  Location     Type
 17265 ;;                  1    wreg      void 
 17266 ;; Registers used:
 17267 ;;		wreg, status,2, status,0, cstack
 17268 ;; Tracked objects:
 17269 ;;		On entry : 0/0
 17270 ;;		On exit  : 0/0
 17271 ;;		Unchanged: 0/0
 17272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17277 ;;Total ram usage:        2 bytes
 17278 ;; Hardware stack levels used:    1
 17279 ;; Hardware stack levels required when called:    7
 17280 ;; This function calls:
 17281 ;;		Nothing
 17282 ;; This function is called by:
 17283 ;;		_readIR
 17284 ;;		_readMAG
 17285 ;;		_readCOND
 17286 ;;		_sensorTest
 17287 ;;		_PlatformTest
 17288 ;;		_BlockerTest
 17289 ;; This function uses a non-reentrant model
 17290 ;;
 17291                           
 17292                           	psect	text55
 17293  0059B4                     __ptext55:
 17294                           	opt stack 0
 17295  0059B4                     _readADC:
 17296                           	opt stack 20
 17297                           
 17298                           ;incstack = 0
 17299                           ;readADC@channel stored from wreg
 17300  0059B4  0100               	movlb	0	; () banked
 17301  0059B6  6F81               	movwf	readADC@channel& (0+255),b
 17302                           
 17303                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17304  0059B8  0100               	movlb	0	; () banked
 17305  0059BA  4581               	rlncf	readADC@channel& (0+255),w,b
 17306  0059BC  46E8               	rlncf	wreg,f,c
 17307  0059BE  0BFC               	andlw	252
 17308  0059C0  6EC2               	movwf	4034,c	;volatile
 17309                           
 17310                           ; BSR set to: 0
 17311                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17312  0059C2  80C2               	bsf	4034,0,c	;volatile
 17313                           
 17314                           ; BSR set to: 0
 17315                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17316  0059C4  82C2               	bsf	4034,1,c	;volatile
 17317                           
 17318                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17319  0059C6  D009               	goto	l6512
 17320  0059C8                     l6510:
 17321  0059C8  0E34               	movlw	52
 17322  0059CA  0100               	movlb	0	; () banked
 17323  0059CC  6F80               	movwf	??_readADC& (0+255),b
 17324  0059CE  0EF1               	movlw	241
 17325  0059D0                     u11317:
 17326  0059D0  2EE8               	decfsz	wreg,f,c
 17327  0059D2  D7FE               	bra	u11317
 17328  0059D4  2F80               	decfsz	??_readADC& (0+255),f,b
 17329  0059D6  D7FC               	bra	u11317
 17330  0059D8  D000               	nop2	
 17331  0059DA                     l6512:
 17332  0059DA  A2C2               	btfss	4034,1,c	;volatile
 17333  0059DC  0012               	return	
 17334  0059DE  D7F4               	goto	l6510
 17335  0059E0                     __end_of_readADC:
 17336                           	opt stack 0
 17337                           tblptru	equ	0xFF8
 17338                           tblptrh	equ	0xFF7
 17339                           tblptrl	equ	0xFF6
 17340                           tablat	equ	0xFF5
 17341                           prodh	equ	0xFF4
 17342                           prodl	equ	0xFF3
 17343                           intcon	equ	0xFF2
 17344                           intcon2	equ	0xFF1
 17345                           intcon3	equ	0xFF0
 17346                           postinc0	equ	0xFEE
 17347                           wreg	equ	0xFE8
 17348                           postdec1	equ	0xFE5
 17349                           fsr1l	equ	0xFE1
 17350                           indf2	equ	0xFDF
 17351                           postinc2	equ	0xFDE
 17352                           postdec2	equ	0xFDD
 17353                           fsr2h	equ	0xFDA
 17354                           fsr2l	equ	0xFD9
 17355                           status	equ	0xFD8
 17356                           
 17357 ;; *************** function _printf *****************
 17358 ;; Defined at:
 17359 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17360 ;; Parameters:    Size  Location     Type
 17361 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17362 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 17363 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 17364 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 17365 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 17366 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 17367 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 17368 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 17369 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 17370 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 17371 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 17372 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 17373 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 17374 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 17375 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 17376 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 17377 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 17378 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 17379 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17380 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17381 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17382 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17383 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17384 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17385 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17386 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17387 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17388 ;;		 -> STR_1(18), 
 17389 ;; Auto vars:     Size  Location     Type
 17390 ;;  tmpval          4    0        struct .
 17391 ;;  width           2   41[BANK0 ] int 
 17392 ;;  val             2   37[BANK0 ] unsigned int 
 17393 ;;  len             2   35[BANK0 ] unsigned int 
 17394 ;;  ap              2   33[BANK0 ] PTR void [1]
 17395 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17396 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17397 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 17398 ;;		 -> printRTC@month(4), UI@month(4), 
 17399 ;;  c               1   40[BANK0 ] char 
 17400 ;;  flag            1   39[BANK0 ] unsigned char 
 17401 ;;  prec            1   30[BANK0 ] char 
 17402 ;; Return value:  Size  Location     Type
 17403 ;;                  2   14[BANK0 ] int 
 17404 ;; Registers used:
 17405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17411 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17412 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17413 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17414 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17415 ;;Total ram usage:       29 bytes
 17416 ;; Hardware stack levels used:    1
 17417 ;; Hardware stack levels required when called:    9
 17418 ;; This function calls:
 17419 ;;		___lwdiv
 17420 ;;		___lwmod
 17421 ;;		___wmul
 17422 ;;		_isdigit
 17423 ;;		_putch
 17424 ;; This function is called by:
 17425 ;;		_UI
 17426 ;;		_change_state_to_menu_start
 17427 ;;		_change_state_to_menu_12
 17428 ;;		_change_state_to_menu_22
 17429 ;;		_printRTC
 17430 ;;		_ID
 17431 ;;		_EEPROM_write
 17432 ;;		_Test
 17433 ;;		_algorithmTest
 17434 ;;		_sensorTest
 17435 ;;		_actuatorTest
 17436 ;;		_BothServos
 17437 ;;		_PortTestDC
 17438 ;;		_PlatformTest
 17439 ;;		_SpeedTest
 17440 ;;		_BlockerTest
 17441 ;;		_arm
 17442 ;;		_PortTestPusher
 17443 ;;		_ToggleTestA5
 17444 ;; This function uses a non-reentrant model
 17445 ;;
 17446                           
 17447                           	psect	text56
 17448  001BDA                     __ptext56:
 17449                           	opt stack 0
 17450  001BDA                     _printf:
 17451                           	opt stack 18
 17452                           
 17453                           ;doprnt.c: 466: va_list ap;
 17454                           ;doprnt.c: 499: signed char c;
 17455                           ;doprnt.c: 501: int width;
 17456                           ;doprnt.c: 506: signed char prec;
 17457                           ;doprnt.c: 508: unsigned char flag;
 17458                           ;doprnt.c: 523: union {
 17459                           ;doprnt.c: 524: unsigned long vd;
 17460                           ;doprnt.c: 525: double integ;
 17461                           ;doprnt.c: 526: } tmpval;
 17462                           ;doprnt.c: 528: unsigned int val;
 17463                           ;doprnt.c: 529: unsigned len;
 17464                           ;doprnt.c: 530: const char * cp;
 17465                           ;doprnt.c: 533: *ap = __va_start();
 17466                           
 17467                           ;incstack = 0
 17468  001BDA  0E90               	movlw	low (?_printf+2)
 17469  001BDC  0100               	movlb	0	; () banked
 17470  001BDE  6FA1               	movwf	printf@ap& (0+255),b
 17471  001BE0  0E00               	movlw	high (?_printf+2)
 17472  001BE2  0100               	movlb	0	; () banked
 17473  001BE4  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17474                           
 17475                           ;doprnt.c: 536: while(c = *f++) {
 17476  001BE6  D205               	goto	l6834
 17477  001BE8                     l6704:
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;doprnt.c: 538: if(c != '%')
 17481  001BE8  0E25               	movlw	37
 17482  001BEA  0100               	movlb	0	; () banked
 17483  001BEC  19A8               	xorwf	printf@c& (0+255),w,b
 17484  001BEE  B4D8               	btfsc	status,2,c
 17485  001BF0  D005               	goto	l6708
 17486                           
 17487                           ; BSR set to: 0
 17488                           ;doprnt.c: 540: {
 17489                           ;doprnt.c: 541: (putch(c) );
 17490  001BF2  0100               	movlb	0	; () banked
 17491  001BF4  51A8               	movf	printf@c& (0+255),w,b
 17492  001BF6  ECE7  F02D         	call	_putch
 17493                           
 17494                           ;doprnt.c: 542: continue;
 17495  001BFA  D1FB               	goto	l6834
 17496  001BFC                     l6708:
 17497                           
 17498                           ;doprnt.c: 543: }
 17499                           ;doprnt.c: 546: width = 0;
 17500  001BFC  0E00               	movlw	0
 17501  001BFE  0100               	movlb	0	; () banked
 17502  001C00  6FAA               	movwf	(printf@width+1)& (0+255),b
 17503  001C02  0E00               	movlw	0
 17504  001C04  6FA9               	movwf	printf@width& (0+255),b
 17505                           
 17506                           ;doprnt.c: 548: flag = 0;
 17507  001C06  0E00               	movlw	0
 17508  001C08  0100               	movlb	0	; () banked
 17509  001C0A  6FA7               	movwf	printf@flag& (0+255),b
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;doprnt.c: 551: switch(*f) {
 17513                           
 17514                           ;doprnt.c: 550: for(;;) {
 17515  001C0C  D005               	goto	l6714
 17516  001C0E                     l6710:
 17517                           
 17518                           ;doprnt.c: 580: flag |= 0x04;
 17519  001C0E  0100               	movlb	0	; () banked
 17520  001C10  85A7               	bsf	printf@flag& (0+255),2,b
 17521                           
 17522                           ;doprnt.c: 581: f++;
 17523  001C12  0100               	movlb	0	; () banked
 17524  001C14  4B8E               	infsnz	printf@f& (0+255),f,b
 17525  001C16  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17526  001C18                     l6714:
 17527  001C18  C08E  FFF6         	movff	printf@f,tblptrl
 17528  001C1C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17529  001C20                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17530  001C20  6AF8               	clrf	tblptru,c
 17531  001C22                     	endif
 17532  001C22                     	if	0	;tblptru may be non-zero
 17533  001C22                     	endif
 17534  001C22  0008               	tblrd		*
 17535  001C24  50F5               	movf	tablat,w,c
 17536                           
 17537                           ; Switch size 1, requested type "space"
 17538                           ; Number of cases is 1, Range of values is 48 to 48
 17539                           ; switch strategies available:
 17540                           ; Name         Instructions Cycles
 17541                           ; simple_byte            4     3 (average)
 17542                           ;	Chosen strategy is simple_byte
 17543  001C26  0A30               	xorlw	48	; case 48
 17544  001C28  B4D8               	btfsc	status,2,c
 17545  001C2A  D7F1               	goto	l6710
 17546                           
 17547                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17548                           
 17549                           ;doprnt.c: 586: }
 17550                           
 17551                           ;doprnt.c: 585: break;
 17552  001C2C  C08E  FFF6         	movff	printf@f,tblptrl
 17553  001C30  C08F  FFF7         	movff	printf@f+1,tblptrh
 17554  001C34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17555  001C34  6AF8               	clrf	tblptru,c
 17556  001C36                     	endif
 17557  001C36                     	if	0	;tblptru may be non-zero
 17558  001C36                     	endif
 17559  001C36  0008               	tblrd		*
 17560  001C38  50F5               	movf	tablat,w,c
 17561  001C3A  ECF0  F02C         	call	_isdigit
 17562  001C3E  A0D8               	btfss	status,0,c
 17563  001C40  D0D2               	goto	l6762
 17564                           
 17565                           ;doprnt.c: 598: width = 0;
 17566  001C42  0E00               	movlw	0
 17567  001C44  0100               	movlb	0	; () banked
 17568  001C46  6FAA               	movwf	(printf@width+1)& (0+255),b
 17569  001C48  0E00               	movlw	0
 17570  001C4A  6FA9               	movwf	printf@width& (0+255),b
 17571  001C4C                     l6720:
 17572                           
 17573                           ;doprnt.c: 600: width *= 10;
 17574  001C4C  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17575  001C50  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17576  001C54  0E00               	movlw	0
 17577  001C56  0100               	movlb	0	; () banked
 17578  001C58  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17579  001C5A  0E0A               	movlw	10
 17580  001C5C  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17581  001C5E  EC59  F02B         	call	___wmul	;wreg free
 17582  001C62  C080  F0A9         	movff	?___wmul,printf@width
 17583  001C66  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17584                           
 17585                           ;doprnt.c: 601: width += *f++ - '0';
 17586  001C6A  0ED0               	movlw	208
 17587  001C6C  0100               	movlb	0	; () banked
 17588  001C6E  6F9A               	movwf	??_printf& (0+255),b
 17589  001C70  0EFF               	movlw	255
 17590  001C72  0100               	movlb	0	; () banked
 17591  001C74  6F9B               	movwf	(??_printf+1)& (0+255),b
 17592  001C76  C08E  FFF6         	movff	printf@f,tblptrl
 17593  001C7A  C08F  FFF7         	movff	printf@f+1,tblptrh
 17594  001C7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17595  001C7E  6AF8               	clrf	tblptru,c
 17596  001C80                     	endif
 17597  001C80                     	if	0	;tblptru may be non-zero
 17598  001C80                     	endif
 17599  001C80  0008               	tblrd		*
 17600  001C82  50F5               	movf	tablat,w,c
 17601  001C84  0100               	movlb	0	; () banked
 17602  001C86  6F9C               	movwf	(??_printf+2)& (0+255),b
 17603  001C88  6B9D               	clrf	(??_printf+3)& (0+255),b
 17604  001C8A  0100               	movlb	0	; () banked
 17605  001C8C  519A               	movf	??_printf& (0+255),w,b
 17606  001C8E  0100               	movlb	0	; () banked
 17607  001C90  279C               	addwf	(??_printf+2)& (0+255),f,b
 17608  001C92  0100               	movlb	0	; () banked
 17609  001C94  519B               	movf	(??_printf+1)& (0+255),w,b
 17610  001C96  0100               	movlb	0	; () banked
 17611  001C98  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17612  001C9A  0100               	movlb	0	; () banked
 17613  001C9C  519C               	movf	(??_printf+2)& (0+255),w,b
 17614  001C9E  0100               	movlb	0	; () banked
 17615  001CA0  27A9               	addwf	printf@width& (0+255),f,b
 17616  001CA2  0100               	movlb	0	; () banked
 17617  001CA4  519D               	movf	(??_printf+3)& (0+255),w,b
 17618  001CA6  0100               	movlb	0	; () banked
 17619  001CA8  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17620                           
 17621                           ; BSR set to: 0
 17622  001CAA  0100               	movlb	0	; () banked
 17623  001CAC  4B8E               	infsnz	printf@f& (0+255),f,b
 17624  001CAE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17625                           
 17626                           ; BSR set to: 0
 17627                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17628  001CB0  C08E  FFF6         	movff	printf@f,tblptrl
 17629  001CB4  C08F  FFF7         	movff	printf@f+1,tblptrh
 17630  001CB8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17631  001CB8  6AF8               	clrf	tblptru,c
 17632  001CBA                     	endif
 17633  001CBA                     	if	0	;tblptru may be non-zero
 17634  001CBA                     	endif
 17635  001CBA  0008               	tblrd		*
 17636  001CBC  50F5               	movf	tablat,w,c
 17637  001CBE  ECF0  F02C         	call	_isdigit
 17638  001CC2  A0D8               	btfss	status,0,c
 17639  001CC4  D090               	goto	l6762
 17640  001CC6  D7C2               	goto	l6720
 17641  001CC8                     l6728:
 17642                           
 17643                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17644  001CC8  C0A1  FFD9         	movff	printf@ap,fsr2l
 17645  001CCC  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17646  001CD0  CFDE F09F          	movff	postinc2,printf@cp
 17647  001CD4  CFDD F0A0          	movff	postdec2,printf@cp+1
 17648  001CD8  0E02               	movlw	2
 17649  001CDA  0100               	movlb	0	; () banked
 17650  001CDC  27A1               	addwf	printf@ap& (0+255),f,b
 17651  001CDE  0E00               	movlw	0
 17652  001CE0  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17653                           
 17654                           ; BSR set to: 0
 17655                           ;doprnt.c: 740: if(!cp)
 17656  001CE2  0100               	movlb	0	; () banked
 17657  001CE4  519F               	movf	printf@cp& (0+255),w,b
 17658  001CE6  0100               	movlb	0	; () banked
 17659  001CE8  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17660  001CEA  A4D8               	btfss	status,2,c
 17661  001CEC  D006               	goto	l6736
 17662                           
 17663                           ; BSR set to: 0
 17664                           ;doprnt.c: 741: cp = "(null)";
 17665  001CEE  0EB5               	movlw	low STR_131
 17666  001CF0  0100               	movlb	0	; () banked
 17667  001CF2  6F9F               	movwf	printf@cp& (0+255),b
 17668  001CF4  0EFF               	movlw	high STR_131
 17669  001CF6  0100               	movlb	0	; () banked
 17670  001CF8  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17671  001CFA                     l6736:
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;doprnt.c: 745: len = 0;
 17675  001CFA  0E00               	movlw	0
 17676  001CFC  0100               	movlb	0	; () banked
 17677  001CFE  6FA4               	movwf	(printf@len+1)& (0+255),b
 17678  001D00  0E00               	movlw	0
 17679  001D02  6FA3               	movwf	printf@len& (0+255),b
 17680                           
 17681                           ;doprnt.c: 746: while(cp[len])
 17682  001D04  D003               	goto	l6740
 17683  001D06                     l6738:
 17684                           
 17685                           ;doprnt.c: 747: len++;
 17686  001D06  0100               	movlb	0	; () banked
 17687  001D08  4BA3               	infsnz	printf@len& (0+255),f,b
 17688  001D0A  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17689  001D0C                     l6740:
 17690                           
 17691                           ; BSR set to: 0
 17692  001D0C  0100               	movlb	0	; () banked
 17693  001D0E  51A3               	movf	printf@len& (0+255),w,b
 17694  001D10  0100               	movlb	0	; () banked
 17695  001D12  259F               	addwf	printf@cp& (0+255),w,b
 17696  001D14  0100               	movlb	0	; () banked
 17697  001D16  6F9A               	movwf	??_printf& (0+255),b
 17698  001D18  0100               	movlb	0	; () banked
 17699  001D1A  51A4               	movf	(printf@len+1)& (0+255),w,b
 17700  001D1C  0100               	movlb	0	; () banked
 17701  001D1E  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17702  001D20  0100               	movlb	0	; () banked
 17703  001D22  6F9B               	movwf	(??_printf+1)& (0+255),b
 17704  001D24  C09A  FFF6         	movff	??_printf,tblptrl
 17705  001D28  C09B  FFF7         	movff	??_printf+1,tblptrh
 17706  001D2C  0E00               	movlw	low (__mediumconst shr (0+16))
 17707  001D2E  6EF8               	movwf	tblptru,c
 17708  001D30  0E0F               	movlw	(high __ramtop+-1)
 17709  001D32  64F7               	cpfsgt	tblptrh,c
 17710  001D34  D003               	bra	u5227
 17711  001D36  0008               	tblrd		*
 17712  001D38  50F5               	movf	tablat,w,c
 17713  001D3A  D005               	bra	u5220
 17714  001D3C                     u5227:
 17715  001D3C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17716  001D40  CFF7 FFEA          	movff	tblptrh,fsr0h
 17717  001D44  50EF               	movf	indf0,w,c
 17718  001D46                     u5220:
 17719  001D46  0900               	iorlw	0
 17720  001D48  A4D8               	btfss	status,2,c
 17721  001D4A  D7DD               	goto	l6738
 17722                           
 17723                           ;doprnt.c: 757: if(width > len)
 17724  001D4C  0100               	movlb	0	; () banked
 17725  001D4E  51A9               	movf	printf@width& (0+255),w,b
 17726  001D50  0100               	movlb	0	; () banked
 17727  001D52  5DA3               	subwf	printf@len& (0+255),w,b
 17728  001D54  0100               	movlb	0	; () banked
 17729  001D56  51AA               	movf	(printf@width+1)& (0+255),w,b
 17730  001D58  0100               	movlb	0	; () banked
 17731  001D5A  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17732  001D5C  B0D8               	btfsc	status,0,c
 17733  001D5E  D009               	goto	l6746
 17734                           
 17735                           ; BSR set to: 0
 17736                           ;doprnt.c: 758: width -= len;
 17737  001D60  0100               	movlb	0	; () banked
 17738  001D62  51A3               	movf	printf@len& (0+255),w,b
 17739  001D64  0100               	movlb	0	; () banked
 17740  001D66  5FA9               	subwf	printf@width& (0+255),f,b
 17741  001D68  0100               	movlb	0	; () banked
 17742  001D6A  51A4               	movf	(printf@len+1)& (0+255),w,b
 17743  001D6C  0100               	movlb	0	; () banked
 17744  001D6E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17745  001D70  D009               	goto	l6750
 17746  001D72                     l6746:
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;doprnt.c: 759: else
 17750                           ;doprnt.c: 760: width = 0;
 17751  001D72  0E00               	movlw	0
 17752  001D74  0100               	movlb	0	; () banked
 17753  001D76  6FAA               	movwf	(printf@width+1)& (0+255),b
 17754  001D78  0E00               	movlw	0
 17755  001D7A  6FA9               	movwf	printf@width& (0+255),b
 17756                           
 17757                           ; BSR set to: 0
 17758                           ;doprnt.c: 764: while(width--)
 17759  001D7C  D003               	goto	l6750
 17760  001D7E                     l6748:
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;doprnt.c: 765: (putch(' ') );
 17764  001D7E  0E20               	movlw	32
 17765  001D80  ECE7  F02D         	call	_putch
 17766  001D84                     l6750:
 17767  001D84  0100               	movlb	0	; () banked
 17768  001D86  07A9               	decf	printf@width& (0+255),f,b
 17769  001D88  A0D8               	btfss	status,0,c
 17770  001D8A  07AA               	decf	(printf@width+1)& (0+255),f,b
 17771  001D8C  0100               	movlb	0	; () banked
 17772  001D8E  29A9               	incf	printf@width& (0+255),w,b
 17773  001D90  E1F6               	bnz	l6748
 17774  001D92  0100               	movlb	0	; () banked
 17775  001D94  29AA               	incf	(printf@width+1)& (0+255),w,b
 17776  001D96  B4D8               	btfsc	status,2,c
 17777  001D98  D017               	goto	l6756
 17778  001D9A  D7F1               	goto	l6748
 17779  001D9C                     l6752:
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;doprnt.c: 768: (putch(*cp++) );
 17783  001D9C  C09F  FFF6         	movff	printf@cp,tblptrl
 17784  001DA0  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17785  001DA4  0E00               	movlw	low (__mediumconst shr (0+16))
 17786  001DA6  6EF8               	movwf	tblptru,c
 17787  001DA8  0E0F               	movlw	(high __ramtop+-1)
 17788  001DAA  64F7               	cpfsgt	tblptrh,c
 17789  001DAC  D003               	bra	u5267
 17790  001DAE  0008               	tblrd		*
 17791  001DB0  50F5               	movf	tablat,w,c
 17792  001DB2  D005               	bra	u5260
 17793  001DB4                     u5267:
 17794  001DB4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17795  001DB8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17796  001DBC  50EF               	movf	indf0,w,c
 17797  001DBE                     u5260:
 17798  001DBE  ECE7  F02D         	call	_putch
 17799  001DC2  0100               	movlb	0	; () banked
 17800  001DC4  4B9F               	infsnz	printf@cp& (0+255),f,b
 17801  001DC6  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17802  001DC8                     l6756:
 17803                           
 17804                           ; BSR set to: 0
 17805  001DC8  0100               	movlb	0	; () banked
 17806  001DCA  07A3               	decf	printf@len& (0+255),f,b
 17807  001DCC  A0D8               	btfss	status,0,c
 17808  001DCE  07A4               	decf	(printf@len+1)& (0+255),f,b
 17809  001DD0  0100               	movlb	0	; () banked
 17810  001DD2  29A3               	incf	printf@len& (0+255),w,b
 17811  001DD4  E1E3               	bnz	l6752
 17812  001DD6  0100               	movlb	0	; () banked
 17813  001DD8  29A4               	incf	(printf@len+1)& (0+255),w,b
 17814  001DDA  B4D8               	btfsc	status,2,c
 17815  001DDC  D10A               	goto	l6834
 17816  001DDE  D7DE               	goto	l6752
 17817  001DE0                     l6758:
 17818                           
 17819                           ; BSR set to: 0
 17820                           ;doprnt.c: 818: flag |= 0x40;
 17821  001DE0  0100               	movlb	0	; () banked
 17822  001DE2  8DA7               	bsf	printf@flag& (0+255),6,b
 17823                           
 17824                           ; BSR set to: 0
 17825                           ;doprnt.c: 822: }
 17826                           
 17827                           ;doprnt.c: 819: break;
 17828  001DE4  D01D               	goto	l1522
 17829  001DE6                     l6762:
 17830  001DE6  C08E  FFF6         	movff	printf@f,tblptrl
 17831  001DEA  C08F  FFF7         	movff	printf@f+1,tblptrh
 17832  001DEE  0100               	movlb	0	; () banked
 17833  001DF0  4B8E               	infsnz	printf@f& (0+255),f,b
 17834  001DF2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17835  001DF4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17836  001DF4  6AF8               	clrf	tblptru,c
 17837  001DF6                     	endif
 17838  001DF6                     	if	0	;tblptru may be non-zero
 17839  001DF6                     	endif
 17840  001DF6  0008               	tblrd		*
 17841  001DF8  CFF5 F0A8          	movff	tablat,printf@c
 17842  001DFC  0100               	movlb	0	; () banked
 17843  001DFE  51A8               	movf	printf@c& (0+255),w,b
 17844                           
 17845                           ; Switch size 1, requested type "space"
 17846                           ; Number of cases is 5, Range of values is 0 to 117
 17847                           ; switch strategies available:
 17848                           ; Name         Instructions Cycles
 17849                           ; simple_byte           16     9 (average)
 17850                           ;	Chosen strategy is simple_byte
 17851  001E00  0A00               	xorlw	0	; case 0
 17852  001E02  B4D8               	btfsc	status,2,c
 17853  001E04  0012               	return	
 17854  001E06  0A64               	xorlw	100	; case 100
 17855  001E08  B4D8               	btfsc	status,2,c
 17856  001E0A  D00A               	goto	l1522
 17857  001E0C  0A0D               	xorlw	13	; case 105
 17858  001E0E  B4D8               	btfsc	status,2,c
 17859  001E10  D007               	goto	l1522
 17860  001E12  0A1A               	xorlw	26	; case 115
 17861  001E14  B4D8               	btfsc	status,2,c
 17862  001E16  D758               	goto	l6728
 17863  001E18  0A06               	xorlw	6	; case 117
 17864  001E1A  B4D8               	btfsc	status,2,c
 17865  001E1C  D7E1               	goto	l6758
 17866  001E1E  D0E9               	goto	l6834
 17867  001E20                     l1522:
 17868                           
 17869                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17870  001E20  0100               	movlb	0	; () banked
 17871  001E22  BDA7               	btfsc	printf@flag& (0+255),6,b
 17872  001E24  D019               	goto	l6774
 17873                           
 17874                           ; BSR set to: 0
 17875                           ;doprnt.c: 1253: {
 17876                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17877  001E26  C0A1  FFD9         	movff	printf@ap,fsr2l
 17878  001E2A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17879  001E2E  CFDE F0A5          	movff	postinc2,printf@val
 17880  001E32  CFDD F0A6          	movff	postdec2,printf@val+1
 17881                           
 17882                           ; BSR set to: 0
 17883  001E36  0E02               	movlw	2
 17884  001E38  0100               	movlb	0	; () banked
 17885  001E3A  27A1               	addwf	printf@ap& (0+255),f,b
 17886  001E3C  0E00               	movlw	0
 17887  001E3E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;doprnt.c: 1261: if((int)val < 0) {
 17891  001E40  0100               	movlb	0	; () banked
 17892  001E42  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17893  001E44  D016               	goto	l6778
 17894                           
 17895                           ; BSR set to: 0
 17896                           ;doprnt.c: 1262: flag |= 0x03;
 17897  001E46  0E03               	movlw	3
 17898  001E48  0100               	movlb	0	; () banked
 17899  001E4A  13A7               	iorwf	printf@flag& (0+255),f,b
 17900                           
 17901                           ; BSR set to: 0
 17902                           ;doprnt.c: 1263: val = -val;
 17903  001E4C  0100               	movlb	0	; () banked
 17904  001E4E  6DA5               	negf	printf@val& (0+255),b
 17905  001E50  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17906  001E52  B0D8               	btfsc	status,0,c
 17907  001E54  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;doprnt.c: 1264: }
 17911                           ;doprnt.c: 1266: }
 17912  001E56  D00D               	goto	l6778
 17913  001E58                     l6774:
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;doprnt.c: 1268: else
 17917                           ;doprnt.c: 1273: {
 17918                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17919  001E58  C0A1  FFD9         	movff	printf@ap,fsr2l
 17920  001E5C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17921  001E60  CFDE F0A5          	movff	postinc2,printf@val
 17922  001E64  CFDD F0A6          	movff	postdec2,printf@val+1
 17923                           
 17924                           ; BSR set to: 0
 17925  001E68  0E02               	movlw	2
 17926  001E6A  0100               	movlb	0	; () banked
 17927  001E6C  27A1               	addwf	printf@ap& (0+255),f,b
 17928  001E6E  0E00               	movlw	0
 17929  001E70  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17930  001E72                     l6778:
 17931                           
 17932                           ; BSR set to: 0
 17933                           ;doprnt.c: 1287: }
 17934                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17935  001E72  0E01               	movlw	1
 17936  001E74  0100               	movlb	0	; () banked
 17937  001E76  6FA8               	movwf	printf@c& (0+255),b
 17938  001E78                     l6780:
 17939                           
 17940                           ; BSR set to: 0
 17941  001E78  0E05               	movlw	5
 17942  001E7A  0100               	movlb	0	; () banked
 17943  001E7C  19A8               	xorwf	printf@c& (0+255),w,b
 17944  001E7E  B4D8               	btfsc	status,2,c
 17945  001E80  D019               	goto	l6792
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;doprnt.c: 1306: if(val < dpowers[c])
 17949                           
 17950                           ; BSR set to: 0
 17951                           
 17952                           ; BSR set to: 0
 17953  001E82  0100               	movlb	0	; () banked
 17954  001E84  51A8               	movf	printf@c& (0+255),w,b
 17955  001E86  0D02               	mullw	2
 17956  001E88  0E9C               	movlw	low _dpowers
 17957  001E8A  24F3               	addwf	prodl,w,c
 17958  001E8C  6EF6               	movwf	tblptrl,c
 17959  001E8E  0EFA               	movlw	high _dpowers
 17960  001E90  20F4               	addwfc	prodh,w,c
 17961  001E92  6EF7               	movwf	tblptrh,c
 17962  001E94                     	if	1	;There are 3 active tblptr bytes
 17963  001E94  6AF8               	clrf	tblptru,c
 17964  001E96  0E00               	movlw	low (__mediumconst shr (0+16))
 17965  001E98  22F8               	addwfc	tblptru,f,c
 17966  001E9A                     	endif
 17967  001E9A  0009               	tblrd		*+
 17968  001E9C  50F5               	movf	tablat,w,c
 17969  001E9E  0100               	movlb	0	; () banked
 17970  001EA0  5DA5               	subwf	printf@val& (0+255),w,b
 17971  001EA2  0009               	tblrd		*+
 17972  001EA4  50F5               	movf	tablat,w,c
 17973  001EA6  0100               	movlb	0	; () banked
 17974  001EA8  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17975  001EAA  A0D8               	btfss	status,0,c
 17976  001EAC  D003               	goto	l6792
 17977                           
 17978                           ; BSR set to: 0
 17979                           
 17980                           ; BSR set to: 0
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;doprnt.c: 1307: break;
 17984  001EAE  0100               	movlb	0	; () banked
 17985  001EB0  2BA8               	incf	printf@c& (0+255),f,b
 17986  001EB2  D7E2               	goto	l6780
 17987  001EB4                     l6792:
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17991  001EB4  0100               	movlb	0	; () banked
 17992  001EB6  51A9               	movf	printf@width& (0+255),w,b
 17993  001EB8  0100               	movlb	0	; () banked
 17994  001EBA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17995  001EBC  B4D8               	btfsc	status,2,c
 17996  001EBE  D00B               	goto	l6798
 17997                           
 17998                           ; BSR set to: 0
 17999  001EC0  C0A7  F09A         	movff	printf@flag,??_printf
 18000  001EC4  0E03               	movlw	3
 18001  001EC6  0100               	movlb	0	; () banked
 18002  001EC8  179A               	andwf	??_printf& (0+255),f,b
 18003  001ECA  B4D8               	btfsc	status,2,c
 18004  001ECC  D004               	goto	l6798
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;doprnt.c: 1346: width--;
 18008  001ECE  0100               	movlb	0	; () banked
 18009  001ED0  07A9               	decf	printf@width& (0+255),f,b
 18010  001ED2  A0D8               	btfss	status,0,c
 18011  001ED4  07AA               	decf	(printf@width+1)& (0+255),f,b
 18012  001ED6                     l6798:
 18013                           
 18014                           ; BSR set to: 0
 18015                           ;doprnt.c: 1381: if(width > c)
 18016  001ED6  0E80               	movlw	128
 18017  001ED8  0100               	movlb	0	; () banked
 18018  001EDA  BFA8               	btfsc	printf@c& (0+255),7,b
 18019  001EDC  0E7F               	movlw	127
 18020  001EDE  0100               	movlb	0	; () banked
 18021  001EE0  6F9A               	movwf	??_printf& (0+255),b
 18022  001EE2  0100               	movlb	0	; () banked
 18023  001EE4  51A9               	movf	printf@width& (0+255),w,b
 18024  001EE6  0100               	movlb	0	; () banked
 18025  001EE8  5DA8               	subwf	printf@c& (0+255),w,b
 18026  001EEA  0100               	movlb	0	; () banked
 18027  001EEC  51AA               	movf	(printf@width+1)& (0+255),w,b
 18028  001EEE  0A80               	xorlw	128
 18029  001EF0  0100               	movlb	0	; () banked
 18030  001EF2  599A               	subwfb	??_printf& (0+255),w,b
 18031  001EF4  B0D8               	btfsc	status,0,c
 18032  001EF6  D00B               	goto	l6802
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;doprnt.c: 1382: width -= c;
 18036  001EF8  0100               	movlb	0	; () banked
 18037  001EFA  51A8               	movf	printf@c& (0+255),w,b
 18038  001EFC  0100               	movlb	0	; () banked
 18039  001EFE  5FA9               	subwf	printf@width& (0+255),f,b
 18040  001F00  0E00               	movlw	0
 18041  001F02  0100               	movlb	0	; () banked
 18042  001F04  BFA8               	btfsc	printf@c& (0+255),7,b
 18043  001F06  0EFF               	movlw	255
 18044  001F08  0100               	movlb	0	; () banked
 18045  001F0A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18046  001F0C  D005               	goto	l6804
 18047  001F0E                     l6802:
 18048                           
 18049                           ; BSR set to: 0
 18050                           ;doprnt.c: 1383: else
 18051                           ;doprnt.c: 1384: width = 0;
 18052  001F0E  0E00               	movlw	0
 18053  001F10  0100               	movlb	0	; () banked
 18054  001F12  6FAA               	movwf	(printf@width+1)& (0+255),b
 18055  001F14  0E00               	movlw	0
 18056  001F16  6FA9               	movwf	printf@width& (0+255),b
 18057  001F18                     l6804:
 18058                           
 18059                           ; BSR set to: 0
 18060                           ;doprnt.c: 1387: if(flag & 0x04) {
 18061  001F18  0100               	movlb	0	; () banked
 18062  001F1A  A5A7               	btfss	printf@flag& (0+255),2,b
 18063  001F1C  D018               	goto	l6816
 18064                           
 18065                           ; BSR set to: 0
 18066                           ;doprnt.c: 1392: if(flag & 0x03)
 18067  001F1E  C0A7  F09A         	movff	printf@flag,??_printf
 18068  001F22  0E03               	movlw	3
 18069  001F24  0100               	movlb	0	; () banked
 18070  001F26  179A               	andwf	??_printf& (0+255),f,b
 18071  001F28  B4D8               	btfsc	status,2,c
 18072  001F2A  D003               	goto	l6810
 18073                           
 18074                           ; BSR set to: 0
 18075                           ;doprnt.c: 1393: (putch('-') );
 18076  001F2C  0E2D               	movlw	45
 18077  001F2E  ECE7  F02D         	call	_putch
 18078  001F32                     l6810:
 18079                           
 18080                           ;doprnt.c: 1415: if(width)
 18081  001F32  0100               	movlb	0	; () banked
 18082  001F34  51A9               	movf	printf@width& (0+255),w,b
 18083  001F36  0100               	movlb	0	; () banked
 18084  001F38  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18085  001F3A  B4D8               	btfsc	status,2,c
 18086  001F3C  D025               	goto	l6826
 18087                           
 18088                           ; BSR set to: 0
 18089                           ;doprnt.c: 1417: (putch('0') );
 18090                           
 18091                           ; BSR set to: 0
 18092                           
 18093                           ;doprnt.c: 1416: do
 18094  001F3E  0E30               	movlw	48
 18095  001F40  ECE7  F02D         	call	_putch
 18096                           
 18097                           ;doprnt.c: 1418: while(--width);
 18098  001F44  0100               	movlb	0	; () banked
 18099  001F46  07A9               	decf	printf@width& (0+255),f,b
 18100  001F48  A0D8               	btfss	status,0,c
 18101  001F4A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18102  001F4C  D7F2               	goto	l6810
 18103  001F4E                     l6816:
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;doprnt.c: 1422: {
 18107                           ;doprnt.c: 1424: if(width
 18108                           ;doprnt.c: 1428: )
 18109  001F4E  0100               	movlb	0	; () banked
 18110  001F50  51A9               	movf	printf@width& (0+255),w,b
 18111  001F52  0100               	movlb	0	; () banked
 18112  001F54  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18113  001F56  B4D8               	btfsc	status,2,c
 18114  001F58  D00D               	goto	l6822
 18115  001F5A                     l6818:
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;doprnt.c: 1430: (putch(' ') );
 18119  001F5A  0E20               	movlw	32
 18120  001F5C  ECE7  F02D         	call	_putch
 18121                           
 18122                           ;doprnt.c: 1431: while(--width);
 18123  001F60  0100               	movlb	0	; () banked
 18124  001F62  07A9               	decf	printf@width& (0+255),f,b
 18125  001F64  A0D8               	btfss	status,0,c
 18126  001F66  07AA               	decf	(printf@width+1)& (0+255),f,b
 18127  001F68  0100               	movlb	0	; () banked
 18128  001F6A  51A9               	movf	printf@width& (0+255),w,b
 18129  001F6C  0100               	movlb	0	; () banked
 18130  001F6E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18131  001F70  A4D8               	btfss	status,2,c
 18132  001F72  D7F3               	goto	l6818
 18133  001F74                     l6822:
 18134                           
 18135                           ; BSR set to: 0
 18136                           ;doprnt.c: 1438: if(flag & 0x03)
 18137  001F74  C0A7  F09A         	movff	printf@flag,??_printf
 18138  001F78  0E03               	movlw	3
 18139  001F7A  0100               	movlb	0	; () banked
 18140  001F7C  179A               	andwf	??_printf& (0+255),f,b
 18141  001F7E  B4D8               	btfsc	status,2,c
 18142  001F80  D003               	goto	l6826
 18143                           
 18144                           ; BSR set to: 0
 18145                           ;doprnt.c: 1439: (putch('-') );
 18146  001F82  0E2D               	movlw	45
 18147  001F84  ECE7  F02D         	call	_putch
 18148  001F88                     l6826:
 18149                           
 18150                           ;doprnt.c: 1469: }
 18151                           ;doprnt.c: 1472: prec = c;
 18152  001F88  C0A8  F09E         	movff	printf@c,printf@prec
 18153                           
 18154                           ;doprnt.c: 1474: while(prec--) {
 18155  001F8C  D02C               	goto	l6832
 18156  001F8E                     l6828:
 18157                           
 18158                           ;doprnt.c: 1478: {
 18159                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18160  001F8E  0100               	movlb	0	; () banked
 18161  001F90  519E               	movf	printf@prec& (0+255),w,b
 18162  001F92  0D02               	mullw	2
 18163  001F94  0E9C               	movlw	low _dpowers
 18164  001F96  24F3               	addwf	prodl,w,c
 18165  001F98  6EF6               	movwf	tblptrl,c
 18166  001F9A  0EFA               	movlw	high _dpowers
 18167  001F9C  20F4               	addwfc	prodh,w,c
 18168  001F9E  6EF7               	movwf	tblptrh,c
 18169  001FA0                     	if	1	;There are 3 active tblptr bytes
 18170  001FA0  6AF8               	clrf	tblptru,c
 18171  001FA2  0E00               	movlw	low (__mediumconst shr (0+16))
 18172  001FA4  22F8               	addwfc	tblptru,f,c
 18173  001FA6                     	endif
 18174  001FA6  0009               	tblrd		*+
 18175  001FA8  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18176  001FAC  000A               	tblrd		*-
 18177  001FAE  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18178  001FB2  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18179  001FB6  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18180  001FBA  EC8D  F027         	call	___lwdiv	;wreg free
 18181  001FBE  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18182  001FC2  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18183  001FC6  0E00               	movlw	0
 18184  001FC8  0100               	movlb	0	; () banked
 18185  001FCA  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18186  001FCC  0E0A               	movlw	10
 18187  001FCE  6F89               	movwf	___lwmod@divisor& (0+255),b
 18188  001FD0  ECD7  F028         	call	___lwmod	;wreg free
 18189  001FD4  0100               	movlb	0	; () banked
 18190  001FD6  5187               	movf	?___lwmod& (0+255),w,b
 18191  001FD8  0F30               	addlw	48
 18192  001FDA  0100               	movlb	0	; () banked
 18193  001FDC  6FA8               	movwf	printf@c& (0+255),b
 18194                           
 18195                           ; BSR set to: 0
 18196                           ;doprnt.c: 1523: }
 18197                           ;doprnt.c: 1524: (putch(c) );
 18198  001FDE  0100               	movlb	0	; () banked
 18199  001FE0  51A8               	movf	printf@c& (0+255),w,b
 18200  001FE2  ECE7  F02D         	call	_putch
 18201  001FE6                     l6832:
 18202  001FE6  0100               	movlb	0	; () banked
 18203  001FE8  079E               	decf	printf@prec& (0+255),f,b
 18204  001FEA  0100               	movlb	0	; () banked
 18205  001FEC  299E               	incf	printf@prec& (0+255),w,b
 18206  001FEE  A4D8               	btfss	status,2,c
 18207  001FF0  D7CE               	goto	l6828
 18208  001FF2                     l6834:
 18209  001FF2  C08E  FFF6         	movff	printf@f,tblptrl
 18210  001FF6  C08F  FFF7         	movff	printf@f+1,tblptrh
 18211  001FFA  0100               	movlb	0	; () banked
 18212  001FFC  4B8E               	infsnz	printf@f& (0+255),f,b
 18213  001FFE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18214  002000                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18215  002000  6AF8               	clrf	tblptru,c
 18216  002002                     	endif
 18217  002002                     	if	0	;tblptru may be non-zero
 18218  002002                     	endif
 18219  002002  0008               	tblrd		*
 18220  002004  CFF5 F0A8          	movff	tablat,printf@c
 18221  002008  0100               	movlb	0	; () banked
 18222  00200A  51A8               	movf	printf@c& (0+255),w,b
 18223  00200C  B4D8               	btfsc	status,2,c
 18224  00200E  0012               	return	
 18225  002010  D5EB               	goto	l6704
 18226  002012                     __end_of_printf:
 18227                           	opt stack 0
 18228                           tblptru	equ	0xFF8
 18229                           tblptrh	equ	0xFF7
 18230                           tblptrl	equ	0xFF6
 18231                           tablat	equ	0xFF5
 18232                           prodh	equ	0xFF4
 18233                           prodl	equ	0xFF3
 18234                           intcon	equ	0xFF2
 18235                           intcon2	equ	0xFF1
 18236                           intcon3	equ	0xFF0
 18237                           indf0	equ	0xFEF
 18238                           postinc0	equ	0xFEE
 18239                           fsr0h	equ	0xFEA
 18240                           fsr0l	equ	0xFE9
 18241                           wreg	equ	0xFE8
 18242                           postdec1	equ	0xFE5
 18243                           fsr1l	equ	0xFE1
 18244                           indf2	equ	0xFDF
 18245                           postinc2	equ	0xFDE
 18246                           postdec2	equ	0xFDD
 18247                           fsr2h	equ	0xFDA
 18248                           fsr2l	equ	0xFD9
 18249                           status	equ	0xFD8
 18250                           
 18251 ;; *************** function _putch *****************
 18252 ;; Defined at:
 18253 ;;		line 20 in file "lcd.c"
 18254 ;; Parameters:    Size  Location     Type
 18255 ;;  data            1    wreg     unsigned char 
 18256 ;; Auto vars:     Size  Location     Type
 18257 ;;  data            1    2[BANK0 ] unsigned char 
 18258 ;; Return value:  Size  Location     Type
 18259 ;;                  1    wreg      void 
 18260 ;; Registers used:
 18261 ;;		wreg, status,2, status,0, cstack
 18262 ;; Tracked objects:
 18263 ;;		On entry : 0/0
 18264 ;;		On exit  : 0/0
 18265 ;;		Unchanged: 0/0
 18266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18271 ;;Total ram usage:        1 bytes
 18272 ;; Hardware stack levels used:    1
 18273 ;; Hardware stack levels required when called:    8
 18274 ;; This function calls:
 18275 ;;		_lcdNibble
 18276 ;; This function is called by:
 18277 ;;		_printf
 18278 ;; This function uses a non-reentrant model
 18279 ;;
 18280                           
 18281                           	psect	text57
 18282  005BCE                     __ptext57:
 18283                           	opt stack 0
 18284  005BCE                     _putch:
 18285                           	opt stack 18
 18286                           
 18287                           ;incstack = 0
 18288                           ;putch@data stored from wreg
 18289  005BCE  0100               	movlb	0	; () banked
 18290  005BD0  6F82               	movwf	putch@data& (0+255),b
 18291                           
 18292                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18293  005BD2  848C               	bsf	3980,2,c	;volatile
 18294                           
 18295                           ;lcd.c: 22: lcdNibble(data);
 18296  005BD4  0100               	movlb	0	; () banked
 18297  005BD6  5182               	movf	putch@data& (0+255),w,b
 18298  005BD8  EC3B  F028         	call	_lcdNibble
 18299  005BDC  0012               	return		;funcret
 18300  005BDE                     __end_of_putch:
 18301                           	opt stack 0
 18302                           tblptru	equ	0xFF8
 18303                           tblptrh	equ	0xFF7
 18304                           tblptrl	equ	0xFF6
 18305                           tablat	equ	0xFF5
 18306                           prodh	equ	0xFF4
 18307                           prodl	equ	0xFF3
 18308                           intcon	equ	0xFF2
 18309                           intcon2	equ	0xFF1
 18310                           intcon3	equ	0xFF0
 18311                           indf0	equ	0xFEF
 18312                           postinc0	equ	0xFEE
 18313                           fsr0h	equ	0xFEA
 18314                           fsr0l	equ	0xFE9
 18315                           wreg	equ	0xFE8
 18316                           postdec1	equ	0xFE5
 18317                           fsr1l	equ	0xFE1
 18318                           indf2	equ	0xFDF
 18319                           postinc2	equ	0xFDE
 18320                           postdec2	equ	0xFDD
 18321                           fsr2h	equ	0xFDA
 18322                           fsr2l	equ	0xFD9
 18323                           status	equ	0xFD8
 18324                           
 18325 ;; *************** function _isdigit *****************
 18326 ;; Defined at:
 18327 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18328 ;; Parameters:    Size  Location     Type
 18329 ;;  c               1    wreg     unsigned char 
 18330 ;; Auto vars:     Size  Location     Type
 18331 ;;  c               1    2[BANK0 ] unsigned char 
 18332 ;; Return value:  Size  Location     Type
 18333 ;;		None               void
 18334 ;; Registers used:
 18335 ;;		wreg, status,2, status,0
 18336 ;; Tracked objects:
 18337 ;;		On entry : 0/0
 18338 ;;		On exit  : 0/0
 18339 ;;		Unchanged: 0/0
 18340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18342 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18344 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18345 ;;Total ram usage:        3 bytes
 18346 ;; Hardware stack levels used:    1
 18347 ;; Hardware stack levels required when called:    7
 18348 ;; This function calls:
 18349 ;;		Nothing
 18350 ;; This function is called by:
 18351 ;;		_printf
 18352 ;; This function uses a non-reentrant model
 18353 ;;
 18354                           
 18355                           	psect	text58
 18356  0059E0                     __ptext58:
 18357                           	opt stack 0
 18358  0059E0                     _isdigit:
 18359                           	opt stack 19
 18360                           
 18361                           ;incstack = 0
 18362                           ;isdigit@c stored from wreg
 18363  0059E0  0100               	movlb	0	; () banked
 18364  0059E2  6F82               	movwf	isdigit@c& (0+255),b
 18365  0059E4  0E00               	movlw	0
 18366  0059E6  0100               	movlb	0	; () banked
 18367  0059E8  6F81               	movwf	_isdigit$2065& (0+255),b
 18368                           
 18369                           ; BSR set to: 0
 18370  0059EA  0E3A               	movlw	58
 18371  0059EC  0100               	movlb	0	; () banked
 18372  0059EE  6182               	cpfslt	isdigit@c& (0+255),b
 18373  0059F0  D007               	goto	l6552
 18374                           
 18375                           ; BSR set to: 0
 18376  0059F2  0E2F               	movlw	47
 18377  0059F4  0100               	movlb	0	; () banked
 18378  0059F6  6582               	cpfsgt	isdigit@c& (0+255),b
 18379  0059F8  D003               	goto	l6552
 18380                           
 18381                           ; BSR set to: 0
 18382  0059FA  0E01               	movlw	1
 18383  0059FC  0100               	movlb	0	; () banked
 18384  0059FE  6F81               	movwf	_isdigit$2065& (0+255),b
 18385  005A00                     l6552:
 18386                           
 18387                           ; BSR set to: 0
 18388  005A00  C081  F080         	movff	_isdigit$2065,??_isdigit
 18389  005A04  0100               	movlb	0	; () banked
 18390  005A06  3180               	rrcf	??_isdigit& (0+255),w,b
 18391  005A08  0012               	return	
 18392  005A0A                     __end_of_isdigit:
 18393                           	opt stack 0
 18394                           tblptru	equ	0xFF8
 18395                           tblptrh	equ	0xFF7
 18396                           tblptrl	equ	0xFF6
 18397                           tablat	equ	0xFF5
 18398                           prodh	equ	0xFF4
 18399                           prodl	equ	0xFF3
 18400                           intcon	equ	0xFF2
 18401                           intcon2	equ	0xFF1
 18402                           intcon3	equ	0xFF0
 18403                           indf0	equ	0xFEF
 18404                           postinc0	equ	0xFEE
 18405                           fsr0h	equ	0xFEA
 18406                           fsr0l	equ	0xFE9
 18407                           wreg	equ	0xFE8
 18408                           postdec1	equ	0xFE5
 18409                           fsr1l	equ	0xFE1
 18410                           indf2	equ	0xFDF
 18411                           postinc2	equ	0xFDE
 18412                           postdec2	equ	0xFDD
 18413                           fsr2h	equ	0xFDA
 18414                           fsr2l	equ	0xFD9
 18415                           status	equ	0xFD8
 18416                           
 18417 ;; *************** function ___wmul *****************
 18418 ;; Defined at:
 18419 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18420 ;; Parameters:    Size  Location     Type
 18421 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18422 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18423 ;; Auto vars:     Size  Location     Type
 18424 ;;  product         2    4[BANK0 ] unsigned int 
 18425 ;; Return value:  Size  Location     Type
 18426 ;;                  2    0[BANK0 ] unsigned int 
 18427 ;; Registers used:
 18428 ;;		wreg, status,2, status,0, prodl, prodh
 18429 ;; Tracked objects:
 18430 ;;		On entry : 0/0
 18431 ;;		On exit  : 0/0
 18432 ;;		Unchanged: 0/0
 18433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18434 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18437 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18438 ;;Total ram usage:        6 bytes
 18439 ;; Hardware stack levels used:    1
 18440 ;; Hardware stack levels required when called:    7
 18441 ;; This function calls:
 18442 ;;		Nothing
 18443 ;; This function is called by:
 18444 ;;		_printf
 18445 ;; This function uses a non-reentrant model
 18446 ;;
 18447                           
 18448                           	psect	text59
 18449  0056B2                     __ptext59:
 18450                           	opt stack 0
 18451  0056B2                     ___wmul:
 18452                           	opt stack 19
 18453                           
 18454                           ; BSR set to: 0
 18455                           ;incstack = 0
 18456  0056B2  0100               	movlb	0	; () banked
 18457  0056B4  5180               	movf	___wmul@multiplier& (0+255),w,b
 18458  0056B6  0100               	movlb	0	; () banked
 18459  0056B8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18460  0056BA  CFF3 F084          	movff	prodl,___wmul@product
 18461  0056BE  CFF4 F085          	movff	prodh,___wmul@product+1
 18462  0056C2  0100               	movlb	0	; () banked
 18463  0056C4  5180               	movf	___wmul@multiplier& (0+255),w,b
 18464  0056C6  0100               	movlb	0	; () banked
 18465  0056C8  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18466  0056CA  50F3               	movf	prodl,w,c
 18467  0056CC  0100               	movlb	0	; () banked
 18468  0056CE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18469  0056D0  0100               	movlb	0	; () banked
 18470  0056D2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18471  0056D4  0100               	movlb	0	; () banked
 18472  0056D6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18473  0056D8  50F3               	movf	prodl,w,c
 18474  0056DA  0100               	movlb	0	; () banked
 18475  0056DC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18476                           
 18477                           ; BSR set to: 0
 18478  0056DE  C084  F080         	movff	___wmul@product,?___wmul
 18479  0056E2  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18480  0056E6  0012               	return	
 18481  0056E8                     __end_of___wmul:
 18482                           	opt stack 0
 18483                           tblptru	equ	0xFF8
 18484                           tblptrh	equ	0xFF7
 18485                           tblptrl	equ	0xFF6
 18486                           tablat	equ	0xFF5
 18487                           prodh	equ	0xFF4
 18488                           prodl	equ	0xFF3
 18489                           intcon	equ	0xFF2
 18490                           intcon2	equ	0xFF1
 18491                           intcon3	equ	0xFF0
 18492                           indf0	equ	0xFEF
 18493                           postinc0	equ	0xFEE
 18494                           fsr0h	equ	0xFEA
 18495                           fsr0l	equ	0xFE9
 18496                           wreg	equ	0xFE8
 18497                           postdec1	equ	0xFE5
 18498                           fsr1l	equ	0xFE1
 18499                           indf2	equ	0xFDF
 18500                           postinc2	equ	0xFDE
 18501                           postdec2	equ	0xFDD
 18502                           fsr2h	equ	0xFDA
 18503                           fsr2l	equ	0xFD9
 18504                           status	equ	0xFD8
 18505                           
 18506 ;; *************** function ___lwmod *****************
 18507 ;; Defined at:
 18508 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18509 ;; Parameters:    Size  Location     Type
 18510 ;;  dividend        2    7[BANK0 ] unsigned int 
 18511 ;;  divisor         2    9[BANK0 ] unsigned int 
 18512 ;; Auto vars:     Size  Location     Type
 18513 ;;  counter         1   11[BANK0 ] unsigned char 
 18514 ;; Return value:  Size  Location     Type
 18515 ;;                  2    7[BANK0 ] unsigned int 
 18516 ;; Registers used:
 18517 ;;		wreg, status,2, status,0
 18518 ;; Tracked objects:
 18519 ;;		On entry : 0/0
 18520 ;;		On exit  : 0/0
 18521 ;;		Unchanged: 0/0
 18522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18523 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18527 ;;Total ram usage:        5 bytes
 18528 ;; Hardware stack levels used:    1
 18529 ;; Hardware stack levels required when called:    7
 18530 ;; This function calls:
 18531 ;;		Nothing
 18532 ;; This function is called by:
 18533 ;;		_printf
 18534 ;; This function uses a non-reentrant model
 18535 ;;
 18536                           
 18537                           	psect	text60
 18538  0051AE                     __ptext60:
 18539                           	opt stack 0
 18540  0051AE                     ___lwmod:
 18541                           	opt stack 19
 18542                           
 18543                           ; BSR set to: 0
 18544                           ;incstack = 0
 18545  0051AE  0100               	movlb	0	; () banked
 18546  0051B0  5189               	movf	___lwmod@divisor& (0+255),w,b
 18547  0051B2  0100               	movlb	0	; () banked
 18548  0051B4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18549  0051B6  B4D8               	btfsc	status,2,c
 18550  0051B8  D026               	goto	l1979
 18551                           
 18552                           ; BSR set to: 0
 18553  0051BA  0E01               	movlw	1
 18554  0051BC  0100               	movlb	0	; () banked
 18555  0051BE  6F8B               	movwf	___lwmod@counter& (0+255),b
 18556  0051C0  D006               	goto	l6590
 18557  0051C2                     l6588:
 18558                           
 18559                           ; BSR set to: 0
 18560  0051C2  0100               	movlb	0	; () banked
 18561  0051C4  90D8               	bcf	status,0,c
 18562  0051C6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18563  0051C8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18564  0051CA  0100               	movlb	0	; () banked
 18565  0051CC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18566  0051CE                     l6590:
 18567                           
 18568                           ; BSR set to: 0
 18569  0051CE  0100               	movlb	0	; () banked
 18570  0051D0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18571  0051D2  D7F7               	goto	l6588
 18572  0051D4                     l6592:
 18573                           
 18574                           ; BSR set to: 0
 18575  0051D4  0100               	movlb	0	; () banked
 18576  0051D6  5189               	movf	___lwmod@divisor& (0+255),w,b
 18577  0051D8  0100               	movlb	0	; () banked
 18578  0051DA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18579  0051DC  0100               	movlb	0	; () banked
 18580  0051DE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18581  0051E0  0100               	movlb	0	; () banked
 18582  0051E2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18583  0051E4  A0D8               	btfss	status,0,c
 18584  0051E6  D008               	goto	l6596
 18585                           
 18586                           ; BSR set to: 0
 18587  0051E8  0100               	movlb	0	; () banked
 18588  0051EA  5189               	movf	___lwmod@divisor& (0+255),w,b
 18589  0051EC  0100               	movlb	0	; () banked
 18590  0051EE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18591  0051F0  0100               	movlb	0	; () banked
 18592  0051F2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18593  0051F4  0100               	movlb	0	; () banked
 18594  0051F6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18595  0051F8                     l6596:
 18596                           
 18597                           ; BSR set to: 0
 18598  0051F8  0100               	movlb	0	; () banked
 18599  0051FA  90D8               	bcf	status,0,c
 18600  0051FC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18601  0051FE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18602                           
 18603                           ; BSR set to: 0
 18604  005200  0100               	movlb	0	; () banked
 18605  005202  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18606  005204  D7E7               	goto	l6592
 18607  005206                     l1979:
 18608                           
 18609                           ; BSR set to: 0
 18610  005206  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18611  00520A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18612                           
 18613                           ; BSR set to: 0
 18614  00520E  0012               	return		;funcret
 18615  005210                     __end_of___lwmod:
 18616                           	opt stack 0
 18617                           tblptru	equ	0xFF8
 18618                           tblptrh	equ	0xFF7
 18619                           tblptrl	equ	0xFF6
 18620                           tablat	equ	0xFF5
 18621                           prodh	equ	0xFF4
 18622                           prodl	equ	0xFF3
 18623                           intcon	equ	0xFF2
 18624                           intcon2	equ	0xFF1
 18625                           intcon3	equ	0xFF0
 18626                           indf0	equ	0xFEF
 18627                           postinc0	equ	0xFEE
 18628                           fsr0h	equ	0xFEA
 18629                           fsr0l	equ	0xFE9
 18630                           wreg	equ	0xFE8
 18631                           postdec1	equ	0xFE5
 18632                           fsr1l	equ	0xFE1
 18633                           indf2	equ	0xFDF
 18634                           postinc2	equ	0xFDE
 18635                           postdec2	equ	0xFDD
 18636                           fsr2h	equ	0xFDA
 18637                           fsr2l	equ	0xFD9
 18638                           status	equ	0xFD8
 18639                           
 18640 ;; *************** function ___lwdiv *****************
 18641 ;; Defined at:
 18642 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18643 ;; Parameters:    Size  Location     Type
 18644 ;;  dividend        2    0[BANK0 ] unsigned int 
 18645 ;;  divisor         2    2[BANK0 ] unsigned int 
 18646 ;; Auto vars:     Size  Location     Type
 18647 ;;  quotient        2    4[BANK0 ] unsigned int 
 18648 ;;  counter         1    6[BANK0 ] unsigned char 
 18649 ;; Return value:  Size  Location     Type
 18650 ;;                  2    0[BANK0 ] unsigned int 
 18651 ;; Registers used:
 18652 ;;		wreg, status,2, status,0
 18653 ;; Tracked objects:
 18654 ;;		On entry : 0/0
 18655 ;;		On exit  : 0/0
 18656 ;;		Unchanged: 0/0
 18657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18661 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18662 ;;Total ram usage:        7 bytes
 18663 ;; Hardware stack levels used:    1
 18664 ;; Hardware stack levels required when called:    7
 18665 ;; This function calls:
 18666 ;;		Nothing
 18667 ;; This function is called by:
 18668 ;;		_printf
 18669 ;; This function uses a non-reentrant model
 18670 ;;
 18671                           
 18672                           	psect	text61
 18673  004F1A                     __ptext61:
 18674                           	opt stack 0
 18675  004F1A                     ___lwdiv:
 18676                           	opt stack 19
 18677                           
 18678                           ; BSR set to: 0
 18679                           ;incstack = 0
 18680  004F1A  0E00               	movlw	0
 18681  004F1C  0100               	movlb	0	; () banked
 18682  004F1E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18683  004F20  0E00               	movlw	0
 18684  004F22  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18685                           
 18686                           ; BSR set to: 0
 18687  004F24  0100               	movlb	0	; () banked
 18688  004F26  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18689  004F28  0100               	movlb	0	; () banked
 18690  004F2A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18691  004F2C  B4D8               	btfsc	status,2,c
 18692  004F2E  D02C               	goto	l1969
 18693                           
 18694                           ; BSR set to: 0
 18695  004F30  0E01               	movlw	1
 18696  004F32  0100               	movlb	0	; () banked
 18697  004F34  6F86               	movwf	___lwdiv@counter& (0+255),b
 18698  004F36  D006               	goto	l6570
 18699  004F38                     l6568:
 18700                           
 18701                           ; BSR set to: 0
 18702  004F38  0100               	movlb	0	; () banked
 18703  004F3A  90D8               	bcf	status,0,c
 18704  004F3C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18705  004F3E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18706  004F40  0100               	movlb	0	; () banked
 18707  004F42  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18708  004F44                     l6570:
 18709                           
 18710                           ; BSR set to: 0
 18711  004F44  0100               	movlb	0	; () banked
 18712  004F46  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18713  004F48  D7F7               	goto	l6568
 18714  004F4A                     l6572:
 18715                           
 18716                           ; BSR set to: 0
 18717  004F4A  0100               	movlb	0	; () banked
 18718  004F4C  90D8               	bcf	status,0,c
 18719  004F4E  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18720  004F50  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18721                           
 18722                           ; BSR set to: 0
 18723  004F52  0100               	movlb	0	; () banked
 18724  004F54  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18725  004F56  0100               	movlb	0	; () banked
 18726  004F58  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18727  004F5A  0100               	movlb	0	; () banked
 18728  004F5C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18729  004F5E  0100               	movlb	0	; () banked
 18730  004F60  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18731  004F62  A0D8               	btfss	status,0,c
 18732  004F64  D00A               	goto	l6580
 18733                           
 18734                           ; BSR set to: 0
 18735  004F66  0100               	movlb	0	; () banked
 18736  004F68  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18737  004F6A  0100               	movlb	0	; () banked
 18738  004F6C  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18739  004F6E  0100               	movlb	0	; () banked
 18740  004F70  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18741  004F72  0100               	movlb	0	; () banked
 18742  004F74  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18743                           
 18744                           ; BSR set to: 0
 18745  004F76  0100               	movlb	0	; () banked
 18746  004F78  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18747  004F7A                     l6580:
 18748                           
 18749                           ; BSR set to: 0
 18750  004F7A  0100               	movlb	0	; () banked
 18751  004F7C  90D8               	bcf	status,0,c
 18752  004F7E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18753  004F80  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18754                           
 18755                           ; BSR set to: 0
 18756  004F82  0100               	movlb	0	; () banked
 18757  004F84  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18758  004F86  D7E1               	goto	l6572
 18759  004F88                     l1969:
 18760                           
 18761                           ; BSR set to: 0
 18762  004F88  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18763  004F8C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18764                           
 18765                           ; BSR set to: 0
 18766  004F90  0012               	return		;funcret
 18767  004F92                     __end_of___lwdiv:
 18768                           	opt stack 0
 18769                           tblptru	equ	0xFF8
 18770                           tblptrh	equ	0xFF7
 18771                           tblptrl	equ	0xFF6
 18772                           tablat	equ	0xFF5
 18773                           prodh	equ	0xFF4
 18774                           prodl	equ	0xFF3
 18775                           intcon	equ	0xFF2
 18776                           intcon2	equ	0xFF1
 18777                           intcon3	equ	0xFF0
 18778                           indf0	equ	0xFEF
 18779                           postinc0	equ	0xFEE
 18780                           fsr0h	equ	0xFEA
 18781                           fsr0l	equ	0xFE9
 18782                           wreg	equ	0xFE8
 18783                           postdec1	equ	0xFE5
 18784                           fsr1l	equ	0xFE1
 18785                           indf2	equ	0xFDF
 18786                           postinc2	equ	0xFDE
 18787                           postdec2	equ	0xFDD
 18788                           fsr2h	equ	0xFDA
 18789                           fsr2l	equ	0xFD9
 18790                           status	equ	0xFD8
 18791                           
 18792 ;; *************** function _lcdInst *****************
 18793 ;; Defined at:
 18794 ;;		line 15 in file "lcd.c"
 18795 ;; Parameters:    Size  Location     Type
 18796 ;;  data            1    wreg     unsigned char 
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;  data            1    2[BANK0 ] unsigned char 
 18799 ;; Return value:  Size  Location     Type
 18800 ;;                  1    wreg      void 
 18801 ;; Registers used:
 18802 ;;		wreg, status,2, status,0, cstack
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18812 ;;Total ram usage:        1 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    8
 18815 ;; This function calls:
 18816 ;;		_lcdNibble
 18817 ;; This function is called by:
 18818 ;;		_UI
 18819 ;;		_change_state_to_menu_start
 18820 ;;		_change_state_to_menu_12
 18821 ;;		_change_state_to_menu_22
 18822 ;;		_initLCD
 18823 ;;		_printRTC
 18824 ;;		_Loading
 18825 ;;		_ID
 18826 ;;		_EEPROM_write
 18827 ;;		_Test
 18828 ;;		_algorithmTest
 18829 ;;		_sensorTest
 18830 ;;		_actuatorTest
 18831 ;;		_BothServos
 18832 ;;		_PortTestDC
 18833 ;;		_PlatformTest
 18834 ;;		_SpeedTest
 18835 ;;		_BlockerTest
 18836 ;;		_arm
 18837 ;;		_PortTestPusher
 18838 ;;		_ToggleTestA5
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           	psect	text62
 18843  005BDE                     __ptext62:
 18844                           	opt stack 0
 18845  005BDE                     _lcdInst:
 18846                           	opt stack 20
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;incstack = 0
 18850                           ;lcdInst@data stored from wreg
 18851  005BDE  0100               	movlb	0	; () banked
 18852  005BE0  6F82               	movwf	lcdInst@data& (0+255),b
 18853                           
 18854                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18855  005BE2  948C               	bcf	3980,2,c	;volatile
 18856                           
 18857                           ;lcd.c: 17: lcdNibble(data);
 18858  005BE4  0100               	movlb	0	; () banked
 18859  005BE6  5182               	movf	lcdInst@data& (0+255),w,b
 18860  005BE8  EC3B  F028         	call	_lcdNibble
 18861  005BEC  0012               	return		;funcret
 18862  005BEE                     __end_of_lcdInst:
 18863                           	opt stack 0
 18864                           tblptru	equ	0xFF8
 18865                           tblptrh	equ	0xFF7
 18866                           tblptrl	equ	0xFF6
 18867                           tablat	equ	0xFF5
 18868                           prodh	equ	0xFF4
 18869                           prodl	equ	0xFF3
 18870                           intcon	equ	0xFF2
 18871                           intcon2	equ	0xFF1
 18872                           intcon3	equ	0xFF0
 18873                           indf0	equ	0xFEF
 18874                           postinc0	equ	0xFEE
 18875                           fsr0h	equ	0xFEA
 18876                           fsr0l	equ	0xFE9
 18877                           wreg	equ	0xFE8
 18878                           postdec1	equ	0xFE5
 18879                           fsr1l	equ	0xFE1
 18880                           indf2	equ	0xFDF
 18881                           postinc2	equ	0xFDE
 18882                           postdec2	equ	0xFDD
 18883                           fsr2h	equ	0xFDA
 18884                           fsr2l	equ	0xFD9
 18885                           status	equ	0xFD8
 18886                           
 18887 ;; *************** function _lcdNibble *****************
 18888 ;; Defined at:
 18889 ;;		line 25 in file "lcd.c"
 18890 ;; Parameters:    Size  Location     Type
 18891 ;;  data            1    wreg     unsigned char 
 18892 ;; Auto vars:     Size  Location     Type
 18893 ;;  data            1    1[BANK0 ] unsigned char 
 18894 ;;  temp            1    0[BANK0 ] unsigned char 
 18895 ;; Return value:  Size  Location     Type
 18896 ;;                  1    wreg      void 
 18897 ;; Registers used:
 18898 ;;		wreg, status,2, status,0
 18899 ;; Tracked objects:
 18900 ;;		On entry : 0/0
 18901 ;;		On exit  : 0/0
 18902 ;;		Unchanged: 0/0
 18903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18907 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18908 ;;Total ram usage:        2 bytes
 18909 ;; Hardware stack levels used:    1
 18910 ;; Hardware stack levels required when called:    7
 18911 ;; This function calls:
 18912 ;;		Nothing
 18913 ;; This function is called by:
 18914 ;;		_lcdInst
 18915 ;;		_putch
 18916 ;; This function uses a non-reentrant model
 18917 ;;
 18918                           
 18919                           	psect	text63
 18920  005076                     __ptext63:
 18921                           	opt stack 0
 18922  005076                     _lcdNibble:
 18923                           	opt stack 20
 18924                           
 18925                           ;incstack = 0
 18926                           ;lcdNibble@data stored from wreg
 18927  005076  0100               	movlb	0	; () banked
 18928  005078  6F81               	movwf	lcdNibble@data& (0+255),b
 18929                           
 18930                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18931  00507A  9EF2               	bcf	intcon,7,c	;volatile
 18932                           
 18933                           ;lcd.c: 28: char temp = data & 0xF0;
 18934  00507C  0100               	movlb	0	; () banked
 18935  00507E  5181               	movf	lcdNibble@data& (0+255),w,b
 18936  005080  0BF0               	andlw	240
 18937  005082  0100               	movlb	0	; () banked
 18938  005084  6F80               	movwf	lcdNibble@temp& (0+255),b
 18939                           
 18940                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18941  005086  508C               	movf	3980,w,c	;volatile
 18942  005088  0B0F               	andlw	15
 18943  00508A  6E8C               	movwf	3980,c	;volatile
 18944                           
 18945                           ;lcd.c: 30: LATD = temp | LATD;
 18946  00508C  0100               	movlb	0	; () banked
 18947  00508E  5180               	movf	lcdNibble@temp& (0+255),w,b
 18948  005090  108C               	iorwf	3980,w,c	;volatile
 18949  005092  6E8C               	movwf	3980,c	;volatile
 18950                           
 18951                           ; BSR set to: 0
 18952                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18953  005094  868C               	bsf	3980,3,c	;volatile
 18954                           
 18955                           ; BSR set to: 0
 18956                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18957  005096  0E42               	movlw	66
 18958  005098                     u11327:
 18959  005098  2EE8               	decfsz	wreg,f,c
 18960  00509A  D7FE               	bra	u11327
 18961  00509C  D000               	nop2	
 18962                           
 18963                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18964  00509E  968C               	bcf	3980,3,c	;volatile
 18965                           
 18966                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18967  0050A0  0E42               	movlw	66
 18968  0050A2                     u11337:
 18969  0050A2  2EE8               	decfsz	wreg,f,c
 18970  0050A4  D7FE               	bra	u11337
 18971  0050A6  D000               	nop2	
 18972                           
 18973                           ;lcd.c: 37: data = data << 4;
 18974  0050A8  0100               	movlb	0	; () banked
 18975  0050AA  3981               	swapf	lcdNibble@data& (0+255),w,b
 18976  0050AC  0BF0               	andlw	240
 18977  0050AE  0100               	movlb	0	; () banked
 18978  0050B0  6F81               	movwf	lcdNibble@data& (0+255),b
 18979                           
 18980                           ;lcd.c: 39: temp = data & 0xF0;
 18981  0050B2  0100               	movlb	0	; () banked
 18982  0050B4  5181               	movf	lcdNibble@data& (0+255),w,b
 18983  0050B6  0BF0               	andlw	240
 18984  0050B8  0100               	movlb	0	; () banked
 18985  0050BA  6F80               	movwf	lcdNibble@temp& (0+255),b
 18986                           
 18987                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18988  0050BC  508C               	movf	3980,w,c	;volatile
 18989  0050BE  0B0F               	andlw	15
 18990  0050C0  6E8C               	movwf	3980,c	;volatile
 18991                           
 18992                           ;lcd.c: 41: LATD = temp | LATD;
 18993  0050C2  0100               	movlb	0	; () banked
 18994  0050C4  5180               	movf	lcdNibble@temp& (0+255),w,b
 18995  0050C6  108C               	iorwf	3980,w,c	;volatile
 18996  0050C8  6E8C               	movwf	3980,c	;volatile
 18997                           
 18998                           ; BSR set to: 0
 18999                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19000  0050CA  868C               	bsf	3980,3,c	;volatile
 19001                           
 19002                           ; BSR set to: 0
 19003                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19004  0050CC  0E42               	movlw	66
 19005  0050CE                     u11347:
 19006  0050CE  2EE8               	decfsz	wreg,f,c
 19007  0050D0  D7FE               	bra	u11347
 19008  0050D2  D000               	nop2	
 19009                           
 19010                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19011  0050D4  968C               	bcf	3980,3,c	;volatile
 19012                           
 19013                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19014  0050D6  0E42               	movlw	66
 19015  0050D8                     u11357:
 19016  0050D8  2EE8               	decfsz	wreg,f,c
 19017  0050DA  D7FE               	bra	u11357
 19018  0050DC  D000               	nop2	
 19019                           
 19020                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19021  0050DE  8EF2               	bsf	intcon,7,c	;volatile
 19022  0050E0  0012               	return		;funcret
 19023  0050E2                     __end_of_lcdNibble:
 19024                           	opt stack 0
 19025                           tblptru	equ	0xFF8
 19026                           tblptrh	equ	0xFF7
 19027                           tblptrl	equ	0xFF6
 19028                           tablat	equ	0xFF5
 19029                           prodh	equ	0xFF4
 19030                           prodl	equ	0xFF3
 19031                           intcon	equ	0xFF2
 19032                           intcon2	equ	0xFF1
 19033                           intcon3	equ	0xFF0
 19034                           indf0	equ	0xFEF
 19035                           postinc0	equ	0xFEE
 19036                           fsr0h	equ	0xFEA
 19037                           fsr0l	equ	0xFE9
 19038                           wreg	equ	0xFE8
 19039                           postdec1	equ	0xFE5
 19040                           fsr1l	equ	0xFE1
 19041                           indf2	equ	0xFDF
 19042                           postinc2	equ	0xFDE
 19043                           postdec2	equ	0xFDD
 19044                           fsr2h	equ	0xFDA
 19045                           fsr2l	equ	0xFD9
 19046                           status	equ	0xFD8
 19047                           
 19048 ;; *************** function _handler *****************
 19049 ;; Defined at:
 19050 ;;		line 16 in file "interruptHandler.c"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;		None
 19053 ;; Auto vars:     Size  Location     Type
 19054 ;;		None
 19055 ;; Return value:  Size  Location     Type
 19056 ;;                  1    wreg      void 
 19057 ;; Registers used:
 19058 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19059 ;; Tracked objects:
 19060 ;;		On entry : 0/0
 19061 ;;		On exit  : 0/0
 19062 ;;		Unchanged: 0/0
 19063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19066 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19067 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19068 ;;Total ram usage:       16 bytes
 19069 ;; Hardware stack levels used:    1
 19070 ;; Hardware stack levels required when called:    6
 19071 ;; This function calls:
 19072 ;;		_printSortTimer
 19073 ;;		_updateArmState
 19074 ;;		_updateMenu
 19075 ;;		_updateServoStates
 19076 ;;		i2_change_state_to_menu_start
 19077 ;; This function is called by:
 19078 ;;		Interrupt level 2
 19079 ;; This function uses a non-reentrant model
 19080 ;;
 19081                           
 19082                           	psect	intcode
 19083  000008                     __pintcode:
 19084                           	opt stack 0
 19085  000008                     _handler:
 19086                           	opt stack 18
 19087                           
 19088                           ;incstack = 0
 19089  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19090  00000A  EDF3  F01C         	call	int_func,f	;refresh shadow registers
 19091                           tblptru	equ	0xFF8
 19092                           tblptrh	equ	0xFF7
 19093                           tblptrl	equ	0xFF6
 19094                           tablat	equ	0xFF5
 19095                           prodh	equ	0xFF4
 19096                           prodl	equ	0xFF3
 19097                           intcon	equ	0xFF2
 19098                           intcon2	equ	0xFF1
 19099                           intcon3	equ	0xFF0
 19100                           indf0	equ	0xFEF
 19101                           postinc0	equ	0xFEE
 19102                           fsr0h	equ	0xFEA
 19103                           fsr0l	equ	0xFE9
 19104                           wreg	equ	0xFE8
 19105                           postdec1	equ	0xFE5
 19106                           fsr1l	equ	0xFE1
 19107                           indf2	equ	0xFDF
 19108                           postinc2	equ	0xFDE
 19109                           postdec2	equ	0xFDD
 19110                           fsr2h	equ	0xFDA
 19111                           fsr2l	equ	0xFD9
 19112                           status	equ	0xFD8
 19113                           
 19114                           	psect	intcode_body
 19115  0039E6                     __pintcode_body:
 19116                           	opt stack 18
 19117  0039E6                     int_func:
 19118                           	opt stack 18
 19119  0039E6  0006               	pop		; remove dummy address from shadow register refresh
 19120  0039E8  CFFA F04D          	movff	pclath,??_handler+2
 19121  0039EC  CFFB F04E          	movff	pclatu,??_handler+3
 19122  0039F0  CFE9 F04F          	movff	fsr0l,??_handler+4
 19123  0039F4  CFEA F050          	movff	fsr0h,??_handler+5
 19124  0039F8  CFE1 F051          	movff	fsr1l,??_handler+6
 19125  0039FC  CFE2 F052          	movff	fsr1h,??_handler+7
 19126  003A00  CFD9 F053          	movff	fsr2l,??_handler+8
 19127  003A04  CFDA F054          	movff	fsr2h,??_handler+9
 19128  003A08  CFF3 F055          	movff	prodl,??_handler+10
 19129  003A0C  CFF4 F056          	movff	prodh,??_handler+11
 19130  003A10  CFF6 F057          	movff	tblptrl,??_handler+12
 19131  003A14  CFF7 F058          	movff	tblptrh,??_handler+13
 19132  003A18  CFF8 F059          	movff	tblptru,??_handler+14
 19133  003A1C  CFF5 F05A          	movff	tablat,??_handler+15
 19134                           
 19135                           ;interruptHandler.c: 18: if(INT1IF){
 19136  003A20  A0F0               	btfss	intcon3,0,c	;volatile
 19137  003A22  D034               	goto	i2l10176
 19138                           
 19139                           ;interruptHandler.c: 19: INT1IF = 0;
 19140  003A24  90F0               	bcf	intcon3,0,c	;volatile
 19141                           
 19142                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19143  003A26  3881               	swapf	3969,w,c	;volatile
 19144  003A28  0B0F               	andlw	15
 19145  003A2A  0B0F               	andlw	15
 19146  003A2C  6E4B               	movwf	??_handler& (0+255),c
 19147  003A2E  6A4C               	clrf	(??_handler+1)& (0+255),c
 19148  003A30  0E8B               	movlw	low _keys
 19149  003A32  244B               	addwf	??_handler,w,c
 19150  003A34  6EF6               	movwf	tblptrl,c
 19151  003A36  0EFA               	movlw	high _keys
 19152  003A38  204C               	addwfc	??_handler+1,w,c
 19153  003A3A  6EF7               	movwf	tblptrh,c
 19154  003A3C                     	if	1	;There are 3 active tblptr bytes
 19155  003A3C  6AF8               	clrf	tblptru,c
 19156  003A3E  0E00               	movlw	low (__mediumconst shr (0+16))
 19157  003A40  22F8               	addwfc	tblptru,f,c
 19158  003A42                     	endif
 19159  003A42  0008               	tblrd		*
 19160  003A44  CFF5 F07D          	movff	tablat,_input	;volatile
 19161                           
 19162                           ;interruptHandler.c: 21: if(input == '*'){
 19163  003A48  0E2A               	movlw	42
 19164  003A4A  187D               	xorwf	_input,w,c	;volatile
 19165  003A4C  B4D8               	btfsc	status,2,c
 19166  003A4E  D00D               	goto	i2l10170
 19167  003A50  D018               	goto	i2l10172
 19168  003A52                     i2l10160:
 19169                           
 19170                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19171  003A52  0E03               	movlw	3
 19172  003A54  D007               	goto	L17
 19173  003A56                     i2l10162:
 19174                           
 19175                           ; BSR set to: 0
 19176                           ;interruptHandler.c: 27: machine_state = UI_state;
 19177  003A56  0E00               	movlw	0
 19178  003A58  0100               	movlb	0	; () banked
 19179  003A5A  6FFC               	movwf	_machine_state& (0+255),b
 19180                           
 19181                           ; BSR set to: 0
 19182                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19183  003A5C  EC19  F02D         	call	i2_change_state_to_menu_start	;wreg free
 19184                           
 19185                           ;interruptHandler.c: 29: break;
 19186  003A60  D015               	goto	i2l10176
 19187  003A62                     i2l10166:
 19188                           
 19189                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19190  003A62  0E02               	movlw	2
 19191  003A64                     L17:
 19192  003A64  0100               	movlb	0	; () banked
 19193  003A66  6FFC               	movwf	_machine_state& (0+255),b
 19194                           
 19195                           ; BSR set to: 0
 19196                           ;interruptHandler.c: 33: }
 19197                           
 19198                           ;interruptHandler.c: 32: break;
 19199  003A68  D011               	goto	i2l10176
 19200  003A6A                     i2l10170:
 19201  003A6A  0100               	movlb	0	; () banked
 19202  003A6C  51FC               	movf	_machine_state& (0+255),w,b
 19203                           
 19204                           ; Switch size 1, requested type "space"
 19205                           ; Number of cases is 3, Range of values is 0 to 3
 19206                           ; switch strategies available:
 19207                           ; Name         Instructions Cycles
 19208                           ; simple_byte           10     6 (average)
 19209                           ;	Chosen strategy is simple_byte
 19210  003A6E  0A00               	xorlw	0	; case 0
 19211  003A70  B4D8               	btfsc	status,2,c
 19212  003A72  D7EF               	goto	i2l10160
 19213  003A74  0A01               	xorlw	1	; case 1
 19214  003A76  B4D8               	btfsc	status,2,c
 19215  003A78  D7F4               	goto	i2l10166
 19216  003A7A  0A02               	xorlw	2	; case 3
 19217  003A7C  B4D8               	btfsc	status,2,c
 19218  003A7E  D7EB               	goto	i2l10162
 19219                           
 19220                           ; BSR set to: 0
 19221                           ;interruptHandler.c: 34: }
 19222  003A80  D005               	goto	i2l10176
 19223  003A82                     i2l10172:
 19224                           
 19225                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19226  003A82  0100               	movlb	0	; () banked
 19227  003A84  51FC               	movf	_machine_state& (0+255),w,b
 19228  003A86  B4D8               	btfsc	status,2,c
 19229                           
 19230                           ; BSR set to: 0
 19231                           ;interruptHandler.c: 36: updateMenu();
 19232  003A88  EC26  F018         	call	_updateMenu	;wreg free
 19233  003A8C                     i2l10176:
 19234                           
 19235                           ;interruptHandler.c: 37: }
 19236                           ;interruptHandler.c: 38: }
 19237                           ;interruptHandler.c: 41: if(TMR0IF){
 19238  003A8C  A4F2               	btfss	intcon,2,c	;volatile
 19239  003A8E  D00C               	goto	i2l10190
 19240                           
 19241                           ;interruptHandler.c: 42: TMR0IF = 0;
 19242  003A90  94F2               	bcf	intcon,2,c	;volatile
 19243                           
 19244                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19245  003A92  0100               	movlb	0	; () banked
 19246  003A94  05FC               	decf	_machine_state& (0+255),w,b
 19247  003A96  A4D8               	btfss	status,2,c
 19248  003A98  D007               	goto	i2l10190
 19249                           
 19250                           ; BSR set to: 0
 19251                           ;interruptHandler.c: 44: printSortTimer();
 19252  003A9A  EC86  F019         	call	_printSortTimer	;wreg free
 19253                           
 19254                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19255  003A9E  0E85               	movlw	133
 19256  003AA0  6ED7               	movwf	4055,c	;volatile
 19257                           
 19258                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19259  003AA2  0EEE               	movlw	238
 19260  003AA4  6ED6               	movwf	4054,c	;volatile
 19261                           
 19262                           ;interruptHandler.c: 48: TMR0ON = 1;
 19263  003AA6  8ED5               	bsf	4053,7,c	;volatile
 19264  003AA8                     i2l10190:
 19265                           
 19266                           ;interruptHandler.c: 49: }
 19267                           ;interruptHandler.c: 50: }
 19268                           ;interruptHandler.c: 53: if(TMR1IF){
 19269  003AA8  A09E               	btfss	3998,0,c	;volatile
 19270  003AAA  D028               	goto	i2l10218
 19271                           
 19272                           ;interruptHandler.c: 54: TMR1IF = 0;
 19273  003AAC  909E               	bcf	3998,0,c	;volatile
 19274                           
 19275                           ;interruptHandler.c: 55: TMR1ON = 0;
 19276  003AAE  90CD               	bcf	4045,0,c	;volatile
 19277                           
 19278                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19279  003AB0  0100               	movlb	0	; () banked
 19280  003AB2  05FC               	decf	_machine_state& (0+255),w,b
 19281  003AB4  A4D8               	btfss	status,2,c
 19282  003AB6  D022               	goto	i2l10218
 19283                           
 19284                           ; BSR set to: 0
 19285                           ;interruptHandler.c: 57: if(was_low_1){
 19286  003AB8  5077               	movf	_was_low_1,w,c	;volatile
 19287  003ABA  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19288  003ABC  B4D8               	btfsc	status,2,c
 19289  003ABE  D00A               	goto	i2l1044
 19290                           
 19291                           ; BSR set to: 0
 19292                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19293  003AC0  828B               	bsf	3979,1,c	;volatile
 19294                           
 19295                           ; BSR set to: 0
 19296                           ;interruptHandler.c: 59: was_low_1 = 0;
 19297  003AC2  0E00               	movlw	0
 19298  003AC4  6E78               	movwf	_was_low_1+1,c	;volatile
 19299  003AC6  0E00               	movlw	0
 19300  003AC8  6E77               	movwf	_was_low_1,c	;volatile
 19301                           
 19302                           ; BSR set to: 0
 19303                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19304  003ACA  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19305                           
 19306                           ; BSR set to: 0
 19307                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19308  003ACE  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19309                           
 19310                           ;interruptHandler.c: 62: }
 19311  003AD2  D00D               	goto	i2l10212
 19312  003AD4                     i2l1044:
 19313                           
 19314                           ; BSR set to: 0
 19315                           ;interruptHandler.c: 63: else{
 19316                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19317  003AD4  928B               	bcf	3979,1,c	;volatile
 19318                           
 19319                           ; BSR set to: 0
 19320                           ;interruptHandler.c: 65: was_low_1 = 1;
 19321  003AD6  0E00               	movlw	0
 19322  003AD8  6E78               	movwf	_was_low_1+1,c	;volatile
 19323  003ADA  0E01               	movlw	1
 19324  003ADC  6E77               	movwf	_was_low_1,c	;volatile
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19328  003ADE  505B               	movf	_servoTimes,w,c
 19329  003AE0  0800               	sublw	0
 19330  003AE2  0F20               	addlw	32
 19331  003AE4  6ECF               	movwf	4047,c	;volatile
 19332                           
 19333                           ; BSR set to: 0
 19334                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19335  003AE6  505D               	movf	_servoTimes+2,w,c
 19336  003AE8  0800               	sublw	0
 19337  003AEA  0F20               	addlw	32
 19338  003AEC  6ECE               	movwf	4046,c	;volatile
 19339  003AEE                     i2l10212:
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;interruptHandler.c: 68: }
 19343                           ;interruptHandler.c: 69: TMR1ON = 1;
 19344  003AEE  80CD               	bsf	4045,0,c	;volatile
 19345                           
 19346                           ; BSR set to: 0
 19347                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19348  003AF0  0E0A               	movlw	10
 19349  003AF2  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19350  003AF4  0E00               	movlw	0
 19351  003AF6  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19352                           
 19353                           ; BSR set to: 0
 19354                           ;interruptHandler.c: 72: updateServoStates();
 19355  003AF8  ECE8  F01D         	call	_updateServoStates	;wreg free
 19356  003AFC                     i2l10218:
 19357                           
 19358                           ;interruptHandler.c: 73: }
 19359                           ;interruptHandler.c: 74: }
 19360                           ;interruptHandler.c: 77: if(TMR2IF){
 19361  003AFC  A29E               	btfss	3998,1,c	;volatile
 19362  003AFE  D026               	goto	i2l10244
 19363                           
 19364                           ;interruptHandler.c: 80: TMR2IF = 0;
 19365  003B00  929E               	bcf	3998,1,c	;volatile
 19366                           
 19367                           ;interruptHandler.c: 81: TMR2ON = 0;
 19368  003B02  94CA               	bcf	4042,2,c	;volatile
 19369                           
 19370                           ;interruptHandler.c: 82: timer2_counter++;
 19371  003B04  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19372  003B06  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19373                           
 19374                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19375  003B08  0100               	movlb	0	; () banked
 19376  003B0A  05FC               	decf	_machine_state& (0+255),w,b
 19377  003B0C  A4D8               	btfss	status,2,c
 19378  003B0E  D01E               	goto	i2l10244
 19379                           
 19380                           ; BSR set to: 0
 19381                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19382  003B10  5079               	movf	_was_low_2,w,c	;volatile
 19383  003B12  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19384  003B14  B4D8               	btfsc	status,2,c
 19385  003B16  D00A               	goto	i2l10234
 19386                           
 19387                           ; BSR set to: 0
 19388  003B18  0E02               	movlw	2
 19389  003B1A  1873               	xorwf	_timer2_counter,w,c	;volatile
 19390  003B1C  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19391  003B1E  A4D8               	btfss	status,2,c
 19392  003B20  D005               	goto	i2l10234
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19396  003B22  868A               	bsf	3978,3,c	;volatile
 19397                           
 19398                           ; BSR set to: 0
 19399                           ;interruptHandler.c: 87: was_low_2 = 0;
 19400  003B24  0E00               	movlw	0
 19401  003B26  6E7A               	movwf	_was_low_2+1,c	;volatile
 19402  003B28  0E00               	movlw	0
 19403  003B2A  D008               	goto	L18
 19404  003B2C                     i2l10234:
 19405                           
 19406                           ; BSR set to: 0
 19407                           ;interruptHandler.c: 90: else if(!was_low_2){
 19408  003B2C  5079               	movf	_was_low_2,w,c	;volatile
 19409  003B2E  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19410  003B30  A4D8               	btfss	status,2,c
 19411  003B32  D009               	goto	i2l10240
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19415  003B34  968A               	bcf	3978,3,c	;volatile
 19416                           
 19417                           ; BSR set to: 0
 19418                           ;interruptHandler.c: 92: was_low_2 = 1;
 19419  003B36  0E00               	movlw	0
 19420  003B38  6E7A               	movwf	_was_low_2+1,c	;volatile
 19421  003B3A  0E01               	movlw	1
 19422  003B3C                     L18:
 19423  003B3C  6E79               	movwf	_was_low_2,c	;volatile
 19424                           
 19425                           ;interruptHandler.c: 93: timer2_counter = 0;
 19426  003B3E  0E00               	movlw	0
 19427  003B40  6E74               	movwf	_timer2_counter+1,c	;volatile
 19428  003B42  0E00               	movlw	0
 19429  003B44  6E73               	movwf	_timer2_counter,c	;volatile
 19430  003B46                     i2l10240:
 19431                           
 19432                           ; BSR set to: 0
 19433                           ;interruptHandler.c: 94: }
 19434                           ;interruptHandler.c: 95: updateArmState();
 19435  003B46  ECE9  F02A         	call	_updateArmState	;wreg free
 19436                           
 19437                           ;interruptHandler.c: 96: TMR2ON = 1;
 19438  003B4A  84CA               	bsf	4042,2,c	;volatile
 19439  003B4C                     i2l10244:
 19440                           
 19441                           ;interruptHandler.c: 97: }
 19442                           ;interruptHandler.c: 98: }
 19443                           ;interruptHandler.c: 101: if(TMR3IF){
 19444  003B4C  A2A1               	btfss	4001,1,c	;volatile
 19445  003B4E  D022               	goto	i2l1055
 19446                           
 19447                           ;interruptHandler.c: 102: TMR3IF = 0;
 19448  003B50  92A1               	bcf	4001,1,c	;volatile
 19449                           
 19450                           ;interruptHandler.c: 103: TMR3ON = 0;
 19451  003B52  90B1               	bcf	4017,0,c	;volatile
 19452                           
 19453                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19454  003B54  0100               	movlb	0	; () banked
 19455  003B56  05FC               	decf	_machine_state& (0+255),w,b
 19456  003B58  A4D8               	btfss	status,2,c
 19457  003B5A  D01C               	goto	i2l1055
 19458                           
 19459                           ; BSR set to: 0
 19460                           ;interruptHandler.c: 105: if(was_low_3){
 19461  003B5C  507B               	movf	_was_low_3,w,c	;volatile
 19462  003B5E  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19463  003B60  B4D8               	btfsc	status,2,c
 19464  003B62  D00A               	goto	i2l1053
 19465                           
 19466                           ; BSR set to: 0
 19467                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19468  003B64  848B               	bsf	3979,2,c	;volatile
 19469                           
 19470                           ; BSR set to: 0
 19471                           ;interruptHandler.c: 107: was_low_3 = 0;
 19472  003B66  0E00               	movlw	0
 19473  003B68  6E7C               	movwf	_was_low_3+1,c	;volatile
 19474  003B6A  0E00               	movlw	0
 19475  003B6C  6E7B               	movwf	_was_low_3,c	;volatile
 19476                           
 19477                           ; BSR set to: 0
 19478                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19479  003B6E  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19480                           
 19481                           ; BSR set to: 0
 19482                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19483  003B72  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19484                           
 19485                           ;interruptHandler.c: 110: }
 19486  003B76  D00D               	goto	i2l10266
 19487  003B78                     i2l1053:
 19488                           
 19489                           ; BSR set to: 0
 19490                           ;interruptHandler.c: 111: else{
 19491                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19492  003B78  948B               	bcf	3979,2,c	;volatile
 19493                           
 19494                           ; BSR set to: 0
 19495                           ;interruptHandler.c: 113: was_low_3 = 1;
 19496  003B7A  0E00               	movlw	0
 19497  003B7C  6E7C               	movwf	_was_low_3+1,c	;volatile
 19498  003B7E  0E01               	movlw	1
 19499  003B80  6E7B               	movwf	_was_low_3,c	;volatile
 19500                           
 19501                           ; BSR set to: 0
 19502                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19503  003B82  505F               	movf	_servoTimes+4,w,c
 19504  003B84  0800               	sublw	0
 19505  003B86  0F20               	addlw	32
 19506  003B88  6EB3               	movwf	4019,c	;volatile
 19507                           
 19508                           ; BSR set to: 0
 19509                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19510  003B8A  5061               	movf	_servoTimes+6,w,c
 19511  003B8C  0800               	sublw	0
 19512  003B8E  0F20               	addlw	32
 19513  003B90  6EB2               	movwf	4018,c	;volatile
 19514  003B92                     i2l10266:
 19515                           
 19516                           ; BSR set to: 0
 19517                           ;interruptHandler.c: 116: }
 19518                           ;interruptHandler.c: 117: TMR3ON = 1;
 19519  003B92  80B1               	bsf	4017,0,c	;volatile
 19520  003B94                     i2l1055:
 19521  003B94  C05A  FFF5         	movff	??_handler+15,tablat
 19522  003B98  C059  FFF8         	movff	??_handler+14,tblptru
 19523  003B9C  C058  FFF7         	movff	??_handler+13,tblptrh
 19524  003BA0  C057  FFF6         	movff	??_handler+12,tblptrl
 19525  003BA4  C056  FFF4         	movff	??_handler+11,prodh
 19526  003BA8  C055  FFF3         	movff	??_handler+10,prodl
 19527  003BAC  C054  FFDA         	movff	??_handler+9,fsr2h
 19528  003BB0  C053  FFD9         	movff	??_handler+8,fsr2l
 19529  003BB4  C052  FFE2         	movff	??_handler+7,fsr1h
 19530  003BB8  C051  FFE1         	movff	??_handler+6,fsr1l
 19531  003BBC  C050  FFEA         	movff	??_handler+5,fsr0h
 19532  003BC0  C04F  FFE9         	movff	??_handler+4,fsr0l
 19533  003BC4  C04E  FFFB         	movff	??_handler+3,pclatu
 19534  003BC8  C04D  FFFA         	movff	??_handler+2,pclath
 19535  003BCC  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19536  003BCE  0011               	retfie		f
 19537  003BD0                     __end_of_handler:
 19538                           	opt stack 0
 19539                           pclatu	equ	0xFFB
 19540                           pclath	equ	0xFFA
 19541                           tblptru	equ	0xFF8
 19542                           tblptrh	equ	0xFF7
 19543                           tblptrl	equ	0xFF6
 19544                           tablat	equ	0xFF5
 19545                           prodh	equ	0xFF4
 19546                           prodl	equ	0xFF3
 19547                           intcon	equ	0xFF2
 19548                           intcon2	equ	0xFF1
 19549                           intcon3	equ	0xFF0
 19550                           indf0	equ	0xFEF
 19551                           postinc0	equ	0xFEE
 19552                           fsr0h	equ	0xFEA
 19553                           fsr0l	equ	0xFE9
 19554                           wreg	equ	0xFE8
 19555                           postdec1	equ	0xFE5
 19556                           fsr1h	equ	0xFE2
 19557                           fsr1l	equ	0xFE1
 19558                           indf2	equ	0xFDF
 19559                           postinc2	equ	0xFDE
 19560                           postdec2	equ	0xFDD
 19561                           fsr2h	equ	0xFDA
 19562                           fsr2l	equ	0xFD9
 19563                           status	equ	0xFD8
 19564                           
 19565 ;; *************** function _updateServoStates *****************
 19566 ;; Defined at:
 19567 ;;		line 570 in file "sort.c"
 19568 ;; Parameters:    Size  Location     Type
 19569 ;;		None
 19570 ;; Auto vars:     Size  Location     Type
 19571 ;;		None
 19572 ;; Return value:  Size  Location     Type
 19573 ;;                  1    wreg      void 
 19574 ;; Registers used:
 19575 ;;		wreg, status,2, status,0, cstack
 19576 ;; Tracked objects:
 19577 ;;		On entry : 0/0
 19578 ;;		On exit  : 0/0
 19579 ;;		Unchanged: 0/0
 19580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19583 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19585 ;;Total ram usage:        2 bytes
 19586 ;; Hardware stack levels used:    1
 19587 ;; Hardware stack levels required when called:    1
 19588 ;; This function calls:
 19589 ;;		i2_updateServoPosition
 19590 ;; This function is called by:
 19591 ;;		_handler
 19592 ;; This function uses a non-reentrant model
 19593 ;;
 19594                           
 19595                           	psect	text65
 19596  003BD0                     __ptext65:
 19597                           	opt stack 0
 19598  003BD0                     _updateServoStates:
 19599                           	opt stack 22
 19600                           
 19601                           ;sort.c: 572: if(servo_timer_counter >= servo_timer_target){
 19602                           
 19603                           ;incstack = 0
 19604  003BD0  506F               	movf	_servo_timer_target,w,c	;volatile
 19605  003BD2  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19606  003BD4  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19607  003BD6  0A80               	xorlw	128
 19608  003BD8  6E09               	movwf	??_updateServoStates& (0+255),c
 19609  003BDA  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19610  003BDC  0A80               	xorlw	128
 19611  003BDE  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19612  003BE0  A0D8               	btfss	status,0,c
 19613  003BE2  0012               	return	
 19614                           
 19615                           ;sort.c: 574: if(f_panning_to_bin){
 19616  003BE4  5069               	movf	_f_panning_to_bin,w,c	;volatile
 19617  003BE6  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19618  003BE8  A4D8               	btfss	status,2,c
 19619  003BEA  D036               	goto	i2l10034
 19620  003BEC  D05F               	goto	i2l10038
 19621  003BEE                     i2l10008:
 19622                           
 19623                           ;sort.c: 578: updateServoPosition(1260, 3);
 19624  003BEE  0E04               	movlw	4
 19625  003BF0  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19626  003BF2  0EEC               	movlw	236
 19627  003BF4  6E01               	movwf	i2updateServoPosition@time_us,c
 19628  003BF6  0E00               	movlw	0
 19629  003BF8  6E04               	movwf	i2updateServoPosition@timer+1,c
 19630  003BFA  0E03               	movlw	3
 19631  003BFC  6E03               	movwf	i2updateServoPosition@timer,c
 19632  003BFE  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19633  003C02  D025               	goto	i2l10028
 19634  003C04                     i2l10012:
 19635                           
 19636                           ;sort.c: 580: servo_timer_target = 700;
 19637  003C04  0E02               	movlw	2
 19638  003C06  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19639  003C08  0EBC               	movlw	188
 19640  003C0A  6E6F               	movwf	_servo_timer_target,c	;volatile
 19641                           
 19642                           ;sort.c: 581: break;
 19643  003C0C  D04A               	goto	i2l10036
 19644  003C0E                     i2l10014:
 19645                           
 19646                           ;sort.c: 583: updateServoPosition(1260, 3);
 19647  003C0E  0E04               	movlw	4
 19648  003C10  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19649  003C12  0EEC               	movlw	236
 19650  003C14  6E01               	movwf	i2updateServoPosition@time_us,c
 19651  003C16  0E00               	movlw	0
 19652  003C18  6E04               	movwf	i2updateServoPosition@timer+1,c
 19653  003C1A  0E03               	movlw	3
 19654  003C1C  6E03               	movwf	i2updateServoPosition@timer,c
 19655  003C1E  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19656  003C22  D015               	goto	i2l10028
 19657  003C24                     i2l10020:
 19658                           
 19659                           ;sort.c: 589: updateServoPosition(1390, 3);
 19660  003C24  0E05               	movlw	5
 19661  003C26  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19662  003C28  0E6E               	movlw	110
 19663  003C2A  6E01               	movwf	i2updateServoPosition@time_us,c
 19664  003C2C  0E00               	movlw	0
 19665  003C2E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19666  003C30  0E03               	movlw	3
 19667  003C32  6E03               	movwf	i2updateServoPosition@timer,c
 19668  003C34  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19669  003C38  D00A               	goto	i2l10028
 19670  003C3A                     i2l10026:
 19671                           
 19672                           ;sort.c: 594: updateServoPosition(1390, 3);
 19673  003C3A  0E05               	movlw	5
 19674  003C3C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19675  003C3E  0E6E               	movlw	110
 19676  003C40  6E01               	movwf	i2updateServoPosition@time_us,c
 19677  003C42  0E00               	movlw	0
 19678  003C44  6E04               	movwf	i2updateServoPosition@timer+1,c
 19679  003C46  0E03               	movlw	3
 19680  003C48  6E03               	movwf	i2updateServoPosition@timer,c
 19681  003C4A  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19682  003C4E                     i2l10028:
 19683                           
 19684                           ;sort.c: 595: servo_timer_counter = 0;
 19685  003C4E  0E00               	movlw	0
 19686  003C50  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19687  003C52  0E00               	movlw	0
 19688  003C54  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19689  003C56  D7D6               	goto	i2l10012
 19690  003C58                     i2l10034:
 19691  003C58  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19692  003C5C  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19693                           
 19694                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19695                           ; Switch size 1, requested type "space"
 19696                           ; Number of cases is 4, Range of values is 1 to 9
 19697                           ; switch strategies available:
 19698                           ; Name         Instructions Cycles
 19699                           ; simple_byte           13     7 (average)
 19700                           ;	Chosen strategy is simple_byte
 19701  003C60  500A               	movf	??_updateServoStates+1,w,c
 19702  003C62  0A01               	xorlw	1	; case 1
 19703  003C64  B4D8               	btfsc	status,2,c
 19704  003C66  D00A               	goto	i2l10714
 19705  003C68  0A02               	xorlw	2	; case 3
 19706  003C6A  B4D8               	btfsc	status,2,c
 19707  003C6C  D00C               	goto	i2l10716
 19708  003C6E  0A05               	xorlw	5	; case 6
 19709  003C70  B4D8               	btfsc	status,2,c
 19710  003C72  D00E               	goto	i2l10718
 19711  003C74  0A0F               	xorlw	15	; case 9
 19712  003C76  B4D8               	btfsc	status,2,c
 19713  003C78  D010               	goto	i2l10720
 19714  003C7A  D013               	goto	i2l10036
 19715  003C7C                     i2l10714:
 19716                           
 19717                           ; Switch size 1, requested type "space"
 19718                           ; Number of cases is 1, Range of values is 244 to 244
 19719                           ; switch strategies available:
 19720                           ; Name         Instructions Cycles
 19721                           ; simple_byte            4     3 (average)
 19722                           ;	Chosen strategy is simple_byte
 19723  003C7C  5009               	movf	??_updateServoStates,w,c
 19724  003C7E  0AF4               	xorlw	244	; case 244
 19725  003C80  B4D8               	btfsc	status,2,c
 19726  003C82  D7B5               	goto	i2l10008
 19727  003C84  D00E               	goto	i2l10036
 19728  003C86                     i2l10716:
 19729                           
 19730                           ; Switch size 1, requested type "space"
 19731                           ; Number of cases is 1, Range of values is 82 to 82
 19732                           ; switch strategies available:
 19733                           ; Name         Instructions Cycles
 19734                           ; simple_byte            4     3 (average)
 19735                           ;	Chosen strategy is simple_byte
 19736  003C86  5009               	movf	??_updateServoStates,w,c
 19737  003C88  0A52               	xorlw	82	; case 82
 19738  003C8A  B4D8               	btfsc	status,2,c
 19739  003C8C  D7C0               	goto	i2l10014
 19740  003C8E  D009               	goto	i2l10036
 19741  003C90                     i2l10718:
 19742                           
 19743                           ; Switch size 1, requested type "space"
 19744                           ; Number of cases is 1, Range of values is 134 to 134
 19745                           ; switch strategies available:
 19746                           ; Name         Instructions Cycles
 19747                           ; simple_byte            4     3 (average)
 19748                           ;	Chosen strategy is simple_byte
 19749  003C90  5009               	movf	??_updateServoStates,w,c
 19750  003C92  0A86               	xorlw	134	; case 134
 19751  003C94  B4D8               	btfsc	status,2,c
 19752  003C96  D7C6               	goto	i2l10020
 19753  003C98  D004               	goto	i2l10036
 19754  003C9A                     i2l10720:
 19755                           
 19756                           ; Switch size 1, requested type "space"
 19757                           ; Number of cases is 1, Range of values is 96 to 96
 19758                           ; switch strategies available:
 19759                           ; Name         Instructions Cycles
 19760                           ; simple_byte            4     3 (average)
 19761                           ;	Chosen strategy is simple_byte
 19762  003C9A  5009               	movf	??_updateServoStates,w,c
 19763  003C9C  0A60               	xorlw	96	; case 96
 19764  003C9E  B4D8               	btfsc	status,2,c
 19765  003CA0  D7CC               	goto	i2l10026
 19766  003CA2                     i2l10036:
 19767                           
 19768                           ;sort.c: 601: f_panning_to_bin = 0;
 19769  003CA2  0E00               	movlw	0
 19770  003CA4  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 19771  003CA6  0E00               	movlw	0
 19772  003CA8  6E69               	movwf	_f_panning_to_bin,c	;volatile
 19773                           
 19774                           ;sort.c: 602: }
 19775  003CAA  0012               	return	
 19776  003CAC                     i2l10038:
 19777                           
 19778                           ;sort.c: 603: else if(pan_servo_state == 1200){
 19779  003CAC  0EB0               	movlw	176
 19780  003CAE  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19781  003CB0  E15A               	bnz	i2l10068
 19782  003CB2  0E04               	movlw	4
 19783  003CB4  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19784  003CB6  A4D8               	btfss	status,2,c
 19785  003CB8  D056               	goto	i2l10068
 19786                           
 19787                           ;sort.c: 605: servo_timer_counter = 0;
 19788  003CBA  0E00               	movlw	0
 19789  003CBC  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19790  003CBE  0E00               	movlw	0
 19791  003CC0  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19792                           
 19793                           ;sort.c: 606: }
 19794  003CC2  0012               	return	
 19795  003CC4                     i2l10042:
 19796                           
 19797                           ;sort.c: 611: updateServoPosition(1050, 3);
 19798  003CC4  0E04               	movlw	4
 19799  003CC6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19800  003CC8  0E1A               	movlw	26
 19801  003CCA  6E01               	movwf	i2updateServoPosition@time_us,c
 19802  003CCC  0E00               	movlw	0
 19803  003CCE  6E04               	movwf	i2updateServoPosition@timer+1,c
 19804  003CD0  0E03               	movlw	3
 19805  003CD2  6E03               	movwf	i2updateServoPosition@timer,c
 19806  003CD4  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19807                           
 19808                           ;sort.c: 612: servo_timer_counter = 0;
 19809  003CD8  0E00               	movlw	0
 19810  003CDA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19811  003CDC  0E00               	movlw	0
 19812  003CDE  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19813                           
 19814                           ;sort.c: 613: servo_timer_target = 750;
 19815  003CE0  0E02               	movlw	2
 19816  003CE2  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19817  003CE4  0EEE               	movlw	238
 19818  003CE6  6E6F               	movwf	_servo_timer_target,c	;volatile
 19819                           
 19820                           ;sort.c: 614: break;
 19821  003CE8  0012               	return	
 19822  003CEA                     i2l10048:
 19823                           
 19824                           ;sort.c: 616: updateServoPosition(1050, 3);
 19825  003CEA  0E04               	movlw	4
 19826  003CEC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19827  003CEE  0E1A               	movlw	26
 19828  003CF0  6E01               	movwf	i2updateServoPosition@time_us,c
 19829  003CF2  0E00               	movlw	0
 19830  003CF4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19831  003CF6  0E03               	movlw	3
 19832  003CF8  6E03               	movwf	i2updateServoPosition@timer,c
 19833  003CFA  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19834                           
 19835                           ;sort.c: 617: servo_timer_counter = 0;
 19836  003CFE  0E00               	movlw	0
 19837  003D00  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19838  003D02  0E00               	movlw	0
 19839  003D04  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19840                           
 19841                           ;sort.c: 618: servo_timer_target = 750;
 19842  003D06  0E02               	movlw	2
 19843  003D08  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19844  003D0A  0EEE               	movlw	238
 19845  003D0C  6E6F               	movwf	_servo_timer_target,c	;volatile
 19846                           
 19847                           ;sort.c: 619: break;
 19848  003D0E  0012               	return	
 19849  003D10                     i2l10054:
 19850                           
 19851                           ;sort.c: 622: updateServoPosition(1200, 1);
 19852  003D10  0E04               	movlw	4
 19853  003D12  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19854  003D14  0EB0               	movlw	176
 19855  003D16  6E01               	movwf	i2updateServoPosition@time_us,c
 19856  003D18  0E00               	movlw	0
 19857  003D1A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19858  003D1C  0E01               	movlw	1
 19859  003D1E  6E03               	movwf	i2updateServoPosition@timer,c
 19860  003D20  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19861                           
 19862                           ;sort.c: 623: updateServoPosition(1050, 3);
 19863  003D24  0E04               	movlw	4
 19864  003D26  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19865  003D28  0E1A               	movlw	26
 19866  003D2A  6E01               	movwf	i2updateServoPosition@time_us,c
 19867  003D2C  0E00               	movlw	0
 19868  003D2E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19869  003D30  0E03               	movlw	3
 19870  003D32  6E03               	movwf	i2updateServoPosition@timer,c
 19871  003D34  EC71  F028         	call	i2_updateServoPosition	;wreg free
 19872                           
 19873                           ;sort.c: 624: servo_timer_counter = 0;
 19874  003D38  0E00               	movlw	0
 19875  003D3A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19876  003D3C  0E00               	movlw	0
 19877  003D3E  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19878                           
 19879                           ;sort.c: 625: servo_timer_target = 9999;
 19880  003D40  0E27               	movlw	39
 19881  003D42  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19882  003D44  0E0F               	movlw	15
 19883  003D46  6E6F               	movwf	_servo_timer_target,c	;volatile
 19884                           
 19885                           ;sort.c: 627: f_can_distributed = 1;
 19886  003D48  0E00               	movlw	0
 19887  003D4A  0101               	movlb	1	; () banked
 19888  003D4C  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
 19889  003D4E  0E01               	movlw	1
 19890  003D50  6F33               	movwf	_f_can_distributed& (0+255),b
 19891                           
 19892                           ; BSR set to: 1
 19893                           ;sort.c: 628: if(f_lastCan == 1){
 19894  003D52  0100               	movlb	0	; () banked
 19895  003D54  05EC               	decf	_f_lastCan& (0+255),w,b
 19896  003D56  0100               	movlb	0	; () banked
 19897  003D58  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19898  003D5A  A4D8               	btfss	status,2,c
 19899  003D5C  0012               	return	
 19900                           
 19901                           ; BSR set to: 0
 19902                           ;sort.c: 629: machine_state = DoneSorting_state;
 19903  003D5E  0E02               	movlw	2
 19904  003D60  0100               	movlb	0	; () banked
 19905  003D62  6FFC               	movwf	_machine_state& (0+255),b
 19906                           
 19907                           ; BSR set to: 0
 19908                           ;sort.c: 635: }
 19909                           
 19910                           ; BSR set to: 0
 19911                           ;sort.c: 634: break;
 19912                           
 19913                           ;sort.c: 633: default:
 19914                           
 19915                           ; BSR set to: 0
 19916                           ;sort.c: 630: }
 19917                           ;sort.c: 631: break;
 19918  003D64  0012               	return	
 19919  003D66                     i2l10068:
 19920  003D66  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19921  003D6A  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19922                           
 19923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19924                           ; Switch size 1, requested type "space"
 19925                           ; Number of cases is 2, Range of values is 4 to 5
 19926                           ; switch strategies available:
 19927                           ; Name         Instructions Cycles
 19928                           ; simple_byte            7     4 (average)
 19929                           ;	Chosen strategy is simple_byte
 19930  003D6E  500A               	movf	??_updateServoStates+1,w,c
 19931  003D70  0A04               	xorlw	4	; case 4
 19932  003D72  B4D8               	btfsc	status,2,c
 19933  003D74  D004               	goto	i2l10722
 19934  003D76  0A01               	xorlw	1	; case 5
 19935  003D78  A4D8               	btfss	status,2,c
 19936  003D7A  0012               	return	
 19937  003D7C  D008               	goto	i2l10724
 19938  003D7E                     i2l10722:
 19939                           
 19940                           ; Switch size 1, requested type "space"
 19941                           ; Number of cases is 2, Range of values is 26 to 236
 19942                           ; switch strategies available:
 19943                           ; Name         Instructions Cycles
 19944                           ; simple_byte            7     4 (average)
 19945                           ;	Chosen strategy is simple_byte
 19946  003D7E  5009               	movf	??_updateServoStates,w,c
 19947  003D80  0A1A               	xorlw	26	; case 26
 19948  003D82  B4D8               	btfsc	status,2,c
 19949  003D84  D7C5               	goto	i2l10054
 19950  003D86  0AF6               	xorlw	246	; case 236
 19951  003D88  A4D8               	btfss	status,2,c
 19952  003D8A  0012               	return	
 19953  003D8C  D79B               	goto	i2l10042
 19954  003D8E                     i2l10724:
 19955                           
 19956                           ; Switch size 1, requested type "space"
 19957                           ; Number of cases is 1, Range of values is 110 to 110
 19958                           ; switch strategies available:
 19959                           ; Name         Instructions Cycles
 19960                           ; simple_byte            4     3 (average)
 19961                           ;	Chosen strategy is simple_byte
 19962  003D8E  5009               	movf	??_updateServoStates,w,c
 19963  003D90  0A6E               	xorlw	110	; case 110
 19964  003D92  A4D8               	btfss	status,2,c
 19965  003D94  0012               	return	
 19966  003D96  D7A9               	goto	i2l10048
 19967  003D98                     __end_of_updateServoStates:
 19968                           	opt stack 0
 19969                           pclatu	equ	0xFFB
 19970                           pclath	equ	0xFFA
 19971                           tblptru	equ	0xFF8
 19972                           tblptrh	equ	0xFF7
 19973                           tblptrl	equ	0xFF6
 19974                           tablat	equ	0xFF5
 19975                           prodh	equ	0xFF4
 19976                           prodl	equ	0xFF3
 19977                           intcon	equ	0xFF2
 19978                           intcon2	equ	0xFF1
 19979                           intcon3	equ	0xFF0
 19980                           indf0	equ	0xFEF
 19981                           postinc0	equ	0xFEE
 19982                           fsr0h	equ	0xFEA
 19983                           fsr0l	equ	0xFE9
 19984                           wreg	equ	0xFE8
 19985                           postdec1	equ	0xFE5
 19986                           fsr1h	equ	0xFE2
 19987                           fsr1l	equ	0xFE1
 19988                           indf2	equ	0xFDF
 19989                           postinc2	equ	0xFDE
 19990                           postdec2	equ	0xFDD
 19991                           fsr2h	equ	0xFDA
 19992                           fsr2l	equ	0xFD9
 19993                           status	equ	0xFD8
 19994                           
 19995 ;; *************** function i2_updateServoPosition *****************
 19996 ;; Defined at:
 19997 ;;		line 555 in file "sort.c"
 19998 ;; Parameters:    Size  Location     Type
 19999 ;;  time_us         2    0[COMRAM] int 
 20000 ;;  timer           2    2[COMRAM] int 
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20003 ;; Return value:  Size  Location     Type
 20004 ;;                  1    wreg      void 
 20005 ;; Registers used:
 20006 ;;		wreg, status,2, status,0
 20007 ;; Tracked objects:
 20008 ;;		On entry : 0/0
 20009 ;;		On exit  : 0/0
 20010 ;;		Unchanged: 0/0
 20011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20015 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20016 ;;Total ram usage:        8 bytes
 20017 ;; Hardware stack levels used:    1
 20018 ;; This function calls:
 20019 ;;		Nothing
 20020 ;; This function is called by:
 20021 ;;		_updateServoStates
 20022 ;; This function uses a non-reentrant model
 20023 ;;
 20024                           
 20025                           	psect	text66
 20026  0050E2                     __ptext66:
 20027                           	opt stack 0
 20028  0050E2                     i2_updateServoPosition:
 20029                           	opt stack 22
 20030                           
 20031                           ;sort.c: 556: unsigned int my_time = 65535 - time_us;
 20032                           
 20033                           ;incstack = 0
 20034  0050E2  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20035  0050E6  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20036  0050EA  1E05               	comf	??i2_updateServoPosition,f,c
 20037  0050EC  1E06               	comf	??i2_updateServoPosition+1,f,c
 20038  0050EE  4A05               	infsnz	??i2_updateServoPosition,f,c
 20039  0050F0  2A06               	incf	??i2_updateServoPosition+1,f,c
 20040  0050F2  0EFF               	movlw	255
 20041  0050F4  2405               	addwf	??i2_updateServoPosition,w,c
 20042  0050F6  6E07               	movwf	i2updateServoPosition@my_time,c
 20043  0050F8  0EFF               	movlw	255
 20044  0050FA  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20045  0050FC  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20046                           
 20047                           ;sort.c: 557: switch(timer){
 20048  0050FE  D015               	goto	i2l9224
 20049  005100                     i2l9218:
 20050                           
 20051                           ;sort.c: 559: servoTimes[0] = my_time >> 8;
 20052  005100  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20053  005102  6E5B               	movwf	_servoTimes,c
 20054  005104  6A5C               	clrf	_servoTimes+1,c
 20055                           
 20056                           ;sort.c: 560: servoTimes[1] = my_time & 0xFF;
 20057  005106  5007               	movf	i2updateServoPosition@my_time,w,c
 20058  005108  6E5D               	movwf	_servoTimes+2,c
 20059  00510A  6A5E               	clrf	_servoTimes+3,c
 20060                           
 20061                           ;sort.c: 562: pan_servo_state = time_us;
 20062  00510C  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20063  005110  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20064  005114                     i2l925:
 20065                           
 20066                           ;sort.c: 564: servoTimes[2] = my_time >> 8;
 20067  005114  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20068  005116  6E5F               	movwf	_servoTimes+4,c
 20069  005118  6A60               	clrf	_servoTimes+5,c
 20070                           
 20071                           ;sort.c: 565: servoTimes[3] = my_time & 0xFF;
 20072  00511A  5007               	movf	i2updateServoPosition@my_time,w,c
 20073  00511C  6E61               	movwf	_servoTimes+6,c
 20074  00511E  6A62               	clrf	_servoTimes+7,c
 20075                           
 20076                           ;sort.c: 567: tilt_servo_state = time_us;
 20077  005120  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20078  005124  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20079                           
 20080                           ;sort.c: 568: }
 20081  005128  0012               	return	
 20082  00512A                     i2l9224:
 20083  00512A  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20084  00512E  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20085                           
 20086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20087                           ; Switch size 1, requested type "space"
 20088                           ; Number of cases is 1, Range of values is 0 to 0
 20089                           ; switch strategies available:
 20090                           ; Name         Instructions Cycles
 20091                           ; simple_byte            4     3 (average)
 20092                           ;	Chosen strategy is simple_byte
 20093  005132  5006               	movf	??i2_updateServoPosition+1,w,c
 20094  005134  0A00               	xorlw	0	; case 0
 20095  005136  A4D8               	btfss	status,2,c
 20096  005138  0012               	return	
 20097                           
 20098                           ; Switch size 1, requested type "space"
 20099                           ; Number of cases is 2, Range of values is 1 to 3
 20100                           ; switch strategies available:
 20101                           ; Name         Instructions Cycles
 20102                           ; simple_byte            7     4 (average)
 20103                           ;	Chosen strategy is simple_byte
 20104  00513A  5005               	movf	??i2_updateServoPosition,w,c
 20105  00513C  0A01               	xorlw	1	; case 1
 20106  00513E  B4D8               	btfsc	status,2,c
 20107  005140  D7DF               	goto	i2l9218
 20108  005142  0A02               	xorlw	2	; case 3
 20109  005144  A4D8               	btfss	status,2,c
 20110  005146  0012               	return	
 20111  005148  D7E5               	goto	i2l925
 20112  00514A                     __end_ofi2_updateServoPosition:
 20113                           	opt stack 0
 20114                           pclatu	equ	0xFFB
 20115                           pclath	equ	0xFFA
 20116                           tblptru	equ	0xFF8
 20117                           tblptrh	equ	0xFF7
 20118                           tblptrl	equ	0xFF6
 20119                           tablat	equ	0xFF5
 20120                           prodh	equ	0xFF4
 20121                           prodl	equ	0xFF3
 20122                           intcon	equ	0xFF2
 20123                           intcon2	equ	0xFF1
 20124                           intcon3	equ	0xFF0
 20125                           indf0	equ	0xFEF
 20126                           postinc0	equ	0xFEE
 20127                           fsr0h	equ	0xFEA
 20128                           fsr0l	equ	0xFE9
 20129                           wreg	equ	0xFE8
 20130                           postdec1	equ	0xFE5
 20131                           fsr1h	equ	0xFE2
 20132                           fsr1l	equ	0xFE1
 20133                           indf2	equ	0xFDF
 20134                           postinc2	equ	0xFDE
 20135                           postdec2	equ	0xFDD
 20136                           fsr2h	equ	0xFDA
 20137                           fsr2l	equ	0xFD9
 20138                           status	equ	0xFD8
 20139                           
 20140 ;; *************** function _updateMenu *****************
 20141 ;; Defined at:
 20142 ;;		line 216 in file "UI.c"
 20143 ;; Parameters:    Size  Location     Type
 20144 ;;		None
 20145 ;; Auto vars:     Size  Location     Type
 20146 ;;		None
 20147 ;; Return value:  Size  Location     Type
 20148 ;;                  1    wreg      void 
 20149 ;; Registers used:
 20150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20151 ;; Tracked objects:
 20152 ;;		On entry : 0/0
 20153 ;;		On exit  : 0/0
 20154 ;;		Unchanged: 0/0
 20155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20158 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20159 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20160 ;;Total ram usage:        2 bytes
 20161 ;; Hardware stack levels used:    1
 20162 ;; Hardware stack levels required when called:    5
 20163 ;; This function calls:
 20164 ;;		_change_state_to_logs_11
 20165 ;;		_change_state_to_logs_12
 20166 ;;		_change_state_to_logs_22
 20167 ;;		_change_state_to_logs_23
 20168 ;;		_change_state_to_logs_33
 20169 ;;		_change_state_to_logs_34
 20170 ;;		_change_state_to_menu_11
 20171 ;;		_change_state_to_menu_23
 20172 ;;		_dispLogs
 20173 ;;		_inputHandler
 20174 ;;		i2_change_state_to_menu_12
 20175 ;;		i2_change_state_to_menu_22
 20176 ;;		i2_change_state_to_menu_start
 20177 ;; This function is called by:
 20178 ;;		_handler
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text67
 20183  00304C                     __ptext67:
 20184                           	opt stack 0
 20185  00304C                     _updateMenu:
 20186                           	opt stack 18
 20187                           
 20188                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20189                           
 20190                           ;incstack = 0
 20191  00304C  0E00               	movlw	0
 20192  00304E  6E76               	movwf	_up+1,c
 20193  003050  0E00               	movlw	0
 20194  003052  6E75               	movwf	_up,c
 20195  003054  0E00               	movlw	0
 20196  003056  6E66               	movwf	_down+1,c
 20197  003058  0E00               	movlw	0
 20198  00305A  6E65               	movwf	_down,c
 20199  00305C  0E00               	movlw	0
 20200  00305E  6E68               	movwf	_enter+1,c
 20201  003060  0E00               	movlw	0
 20202  003062  6E67               	movwf	_enter,c
 20203  003064  0E00               	movlw	0
 20204  003066  6E64               	movwf	_back+1,c
 20205  003068  0E00               	movlw	0
 20206  00306A  6E63               	movwf	_back,c
 20207                           
 20208                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20209  00306C  9EF2               	bcf	intcon,7,c	;volatile
 20210                           
 20211                           ;UI.c: 220: if (inputHandler()
 20212                           ;UI.c: 223: ){
 20213  00306E  ECFD  F01B         	call	_inputHandler	;wreg free
 20214  003072  502A               	movf	?_inputHandler,w,c
 20215  003074  102B               	iorwf	?_inputHandler+1,w,c
 20216  003076  A4D8               	btfss	status,2,c
 20217  003078  D112               	goto	i2l9758
 20218  00307A  D146               	goto	i2l268
 20219  00307C                     i2l9610:
 20220                           
 20221                           ;UI.c: 227: change_state_to_menu_11();
 20222  00307C  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20223                           
 20224                           ;UI.c: 228: break;
 20225  003080  D143               	goto	i2l268
 20226  003082                     i2l9612:
 20227                           
 20228                           ;UI.c: 231: if(up){
 20229  003082  5075               	movf	_up,w,c
 20230  003084  1076               	iorwf	_up+1,w,c
 20231  003086  B4D8               	btfsc	status,2,c
 20232  003088  D003               	goto	i2l9616
 20233                           
 20234                           ;UI.c: 232: change_state_to_menu_23();
 20235  00308A  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20236                           
 20237                           ;UI.c: 233: }
 20238  00308E  D13C               	goto	i2l268
 20239  003090                     i2l9616:
 20240                           
 20241                           ;UI.c: 234: else if(down){
 20242  003090  5065               	movf	_down,w,c
 20243  003092  1066               	iorwf	_down+1,w,c
 20244  003094  B4D8               	btfsc	status,2,c
 20245  003096  D003               	goto	i2l9620
 20246                           
 20247                           ;UI.c: 235: change_state_to_menu_12();
 20248  003098  ECD6  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20249                           
 20250                           ;UI.c: 236: }
 20251  00309C  D135               	goto	i2l268
 20252  00309E                     i2l9620:
 20253                           
 20254                           ;UI.c: 237: else if(enter){
 20255  00309E  5067               	movf	_enter,w,c
 20256  0030A0  1068               	iorwf	_enter+1,w,c
 20257  0030A2  B4D8               	btfsc	status,2,c
 20258  0030A4  D131               	goto	i2l268
 20259                           
 20260                           ;UI.c: 238: change_state_to_menu_start();
 20261  0030A6  EC19  F02D         	call	i2_change_state_to_menu_start	;wreg free
 20262                           
 20263                           ;UI.c: 239: }
 20264                           ;UI.c: 240: break;
 20265  0030AA  D12E               	goto	i2l268
 20266  0030AC                     i2l9624:
 20267                           
 20268                           ;UI.c: 243: if(up){
 20269  0030AC  5075               	movf	_up,w,c
 20270  0030AE  1076               	iorwf	_up+1,w,c
 20271  0030B0  B4D8               	btfsc	status,2,c
 20272  0030B2  D003               	goto	i2l9628
 20273                           
 20274                           ;UI.c: 244: change_state_to_menu_11();
 20275  0030B4  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20276                           
 20277                           ;UI.c: 245: }
 20278  0030B8  D127               	goto	i2l268
 20279  0030BA                     i2l9628:
 20280                           
 20281                           ;UI.c: 246: else if(down){
 20282  0030BA  5065               	movf	_down,w,c
 20283  0030BC  1066               	iorwf	_down+1,w,c
 20284  0030BE  B4D8               	btfsc	status,2,c
 20285  0030C0  D011               	goto	i2l9644
 20286                           
 20287                           ;UI.c: 247: change_state_to_menu_23();
 20288  0030C2  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20289                           
 20290                           ;UI.c: 248: }
 20291  0030C6  D120               	goto	i2l268
 20292  0030C8                     i2l9636:
 20293                           
 20294                           ;UI.c: 255: if(up){
 20295  0030C8  5075               	movf	_up,w,c
 20296  0030CA  1076               	iorwf	_up+1,w,c
 20297  0030CC  B4D8               	btfsc	status,2,c
 20298  0030CE  D003               	goto	i2l9640
 20299                           
 20300                           ;UI.c: 256: change_state_to_menu_11();
 20301  0030D0  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20302                           
 20303                           ;UI.c: 257: }
 20304  0030D4  D119               	goto	i2l268
 20305  0030D6                     i2l9640:
 20306                           
 20307                           ;UI.c: 258: else if(down){
 20308  0030D6  5065               	movf	_down,w,c
 20309  0030D8  1066               	iorwf	_down+1,w,c
 20310  0030DA  B4D8               	btfsc	status,2,c
 20311  0030DC  D003               	goto	i2l9644
 20312                           
 20313                           ;UI.c: 259: change_state_to_menu_23();
 20314  0030DE  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20315                           
 20316                           ;UI.c: 260: }
 20317  0030E2  D112               	goto	i2l268
 20318  0030E4                     i2l9644:
 20319                           
 20320                           ;UI.c: 261: else if(enter){
 20321  0030E4  5067               	movf	_enter,w,c
 20322  0030E6  1068               	iorwf	_enter+1,w,c
 20323  0030E8  B4D8               	btfsc	status,2,c
 20324  0030EA  D10E               	goto	i2l268
 20325                           
 20326                           ;UI.c: 262: machine_state = Sorting_state;
 20327  0030EC  0E01               	movlw	1
 20328  0030EE  0100               	movlb	0	; () banked
 20329  0030F0  6FFC               	movwf	_machine_state& (0+255),b
 20330                           
 20331                           ; BSR set to: 0
 20332                           ;UI.c: 263: }
 20333                           ;UI.c: 264: break;
 20334                           
 20335                           ; BSR set to: 0
 20336                           
 20337                           ; BSR set to: 0
 20338  0030F2  D10A               	goto	i2l268
 20339  0030F4                     i2l9648:
 20340                           
 20341                           ;UI.c: 267: if(up){
 20342  0030F4  5075               	movf	_up,w,c
 20343  0030F6  1076               	iorwf	_up+1,w,c
 20344  0030F8  B4D8               	btfsc	status,2,c
 20345  0030FA  D003               	goto	i2l9652
 20346                           
 20347                           ;UI.c: 268: change_state_to_menu_22();
 20348  0030FC  ECBE  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20349                           
 20350                           ;UI.c: 269: }
 20351  003100  D103               	goto	i2l268
 20352  003102                     i2l9652:
 20353                           
 20354                           ;UI.c: 270: else if(down){
 20355  003102  5065               	movf	_down,w,c
 20356  003104  1066               	iorwf	_down+1,w,c
 20357  003106  B4D8               	btfsc	status,2,c
 20358  003108  D003               	goto	i2l9656
 20359                           
 20360                           ;UI.c: 271: change_state_to_menu_11();
 20361  00310A  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20362                           
 20363                           ;UI.c: 272: }
 20364  00310E  D0FC               	goto	i2l268
 20365  003110                     i2l9656:
 20366                           
 20367                           ;UI.c: 273: else if(enter){
 20368  003110  5067               	movf	_enter,w,c
 20369  003112  1068               	iorwf	_enter+1,w,c
 20370  003114  B4D8               	btfsc	status,2,c
 20371  003116  D0F8               	goto	i2l268
 20372                           
 20373                           ;UI.c: 274: change_state_to_logs_11();
 20374  003118  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20375                           
 20376                           ;UI.c: 275: }
 20377                           ;UI.c: 276: break;
 20378  00311C  D0F5               	goto	i2l268
 20379  00311E                     i2l9660:
 20380                           
 20381                           ;UI.c: 279: if(up){
 20382  00311E  5075               	movf	_up,w,c
 20383  003120  1076               	iorwf	_up+1,w,c
 20384  003122  B4D8               	btfsc	status,2,c
 20385  003124  D003               	goto	i2l9664
 20386                           
 20387                           ;UI.c: 280: change_state_to_logs_34();
 20388  003126  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 20389                           
 20390                           ;UI.c: 281: }
 20391  00312A  D0EE               	goto	i2l268
 20392  00312C                     i2l9664:
 20393                           
 20394                           ;UI.c: 282: else if(down){
 20395  00312C  5065               	movf	_down,w,c
 20396  00312E  1066               	iorwf	_down+1,w,c
 20397  003130  B4D8               	btfsc	status,2,c
 20398  003132  D003               	goto	i2l9668
 20399                           
 20400                           ;UI.c: 283: change_state_to_logs_12();
 20401  003134  EC66  F02C         	call	_change_state_to_logs_12	;wreg free
 20402                           
 20403                           ;UI.c: 284: }
 20404  003138  D0E7               	goto	i2l268
 20405  00313A                     i2l9668:
 20406                           
 20407                           ;UI.c: 285: else if(enter){
 20408  00313A  5067               	movf	_enter,w,c
 20409  00313C  1068               	iorwf	_enter+1,w,c
 20410  00313E  B4D8               	btfsc	status,2,c
 20411  003140  D007               	goto	i2l9672
 20412                           
 20413                           ;UI.c: 286: dispLogs(1);
 20414  003142  0E00               	movlw	0
 20415  003144  6E13               	movwf	dispLogs@myLog+1,c
 20416  003146  0E01               	movlw	1
 20417  003148  6E12               	movwf	dispLogs@myLog,c
 20418  00314A  EC53  F02D         	call	_dispLogs	;wreg free
 20419                           
 20420                           ;UI.c: 287: }
 20421  00314E  D0DC               	goto	i2l268
 20422  003150                     i2l9672:
 20423                           
 20424                           ;UI.c: 288: else if(back){
 20425  003150  5063               	movf	_back,w,c
 20426  003152  1064               	iorwf	_back+1,w,c
 20427  003154  B4D8               	btfsc	status,2,c
 20428  003156  D0D8               	goto	i2l268
 20429                           
 20430                           ;UI.c: 289: change_state_to_menu_23();
 20431  003158  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20432                           
 20433                           ;UI.c: 290: }
 20434                           ;UI.c: 291: break;
 20435  00315C  D0D5               	goto	i2l268
 20436  00315E                     i2l9676:
 20437                           
 20438                           ;UI.c: 294: if(up){
 20439  00315E  5075               	movf	_up,w,c
 20440  003160  1076               	iorwf	_up+1,w,c
 20441  003162  B4D8               	btfsc	status,2,c
 20442  003164  D003               	goto	i2l9680
 20443                           
 20444                           ;UI.c: 295: change_state_to_logs_11();
 20445  003166  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20446                           
 20447                           ;UI.c: 296: }
 20448  00316A  D0CE               	goto	i2l268
 20449  00316C                     i2l9680:
 20450                           
 20451                           ;UI.c: 297: else if(down){
 20452  00316C  5065               	movf	_down,w,c
 20453  00316E  1066               	iorwf	_down+1,w,c
 20454  003170  B4D8               	btfsc	status,2,c
 20455  003172  D003               	goto	i2l9684
 20456                           
 20457                           ;UI.c: 298: change_state_to_logs_23();
 20458  003174  ECAD  F02C         	call	_change_state_to_logs_23	;wreg free
 20459                           
 20460                           ;UI.c: 299: }
 20461  003178  D0C7               	goto	i2l268
 20462  00317A                     i2l9684:
 20463                           
 20464                           ;UI.c: 300: else if(enter){
 20465  00317A  5067               	movf	_enter,w,c
 20466  00317C  1068               	iorwf	_enter+1,w,c
 20467  00317E  B4D8               	btfsc	status,2,c
 20468  003180  D007               	goto	i2l9688
 20469                           
 20470                           ;UI.c: 301: dispLogs(2);
 20471  003182  0E00               	movlw	0
 20472  003184  6E13               	movwf	dispLogs@myLog+1,c
 20473  003186  0E02               	movlw	2
 20474  003188  6E12               	movwf	dispLogs@myLog,c
 20475  00318A  EC53  F02D         	call	_dispLogs	;wreg free
 20476                           
 20477                           ;UI.c: 302: }
 20478  00318E  D0BC               	goto	i2l268
 20479  003190                     i2l9688:
 20480                           
 20481                           ;UI.c: 303: else if(back){
 20482  003190  5063               	movf	_back,w,c
 20483  003192  1064               	iorwf	_back+1,w,c
 20484  003194  B4D8               	btfsc	status,2,c
 20485  003196  D0B8               	goto	i2l268
 20486                           
 20487                           ;UI.c: 304: change_state_to_menu_23();
 20488  003198  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20489                           
 20490                           ;UI.c: 305: }
 20491                           ;UI.c: 306: break;
 20492  00319C  D0B5               	goto	i2l268
 20493  00319E                     i2l9692:
 20494                           
 20495                           ;UI.c: 309: if(up){
 20496  00319E  5075               	movf	_up,w,c
 20497  0031A0  1076               	iorwf	_up+1,w,c
 20498  0031A2  B4D8               	btfsc	status,2,c
 20499  0031A4  D003               	goto	i2l9696
 20500                           
 20501                           ;UI.c: 310: change_state_to_logs_11();
 20502  0031A6  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20503                           
 20504                           ;UI.c: 311: }
 20505  0031AA  D0AE               	goto	i2l268
 20506  0031AC                     i2l9696:
 20507                           
 20508                           ;UI.c: 312: else if(down){
 20509  0031AC  5065               	movf	_down,w,c
 20510  0031AE  1066               	iorwf	_down+1,w,c
 20511  0031B0  B4D8               	btfsc	status,2,c
 20512  0031B2  D003               	goto	i2l9700
 20513                           
 20514                           ;UI.c: 313: change_state_to_logs_23();
 20515  0031B4  ECAD  F02C         	call	_change_state_to_logs_23	;wreg free
 20516                           
 20517                           ;UI.c: 314: }
 20518  0031B8  D0A7               	goto	i2l268
 20519  0031BA                     i2l9700:
 20520                           
 20521                           ;UI.c: 315: else if(enter){
 20522  0031BA  5067               	movf	_enter,w,c
 20523  0031BC  1068               	iorwf	_enter+1,w,c
 20524  0031BE  B4D8               	btfsc	status,2,c
 20525  0031C0  D007               	goto	i2l9704
 20526                           
 20527                           ;UI.c: 316: dispLogs(2);
 20528  0031C2  0E00               	movlw	0
 20529  0031C4  6E13               	movwf	dispLogs@myLog+1,c
 20530  0031C6  0E02               	movlw	2
 20531  0031C8  6E12               	movwf	dispLogs@myLog,c
 20532  0031CA  EC53  F02D         	call	_dispLogs	;wreg free
 20533                           
 20534                           ;UI.c: 317: }
 20535  0031CE  D09C               	goto	i2l268
 20536  0031D0                     i2l9704:
 20537                           
 20538                           ;UI.c: 318: else if(back){
 20539  0031D0  5063               	movf	_back,w,c
 20540  0031D2  1064               	iorwf	_back+1,w,c
 20541  0031D4  B4D8               	btfsc	status,2,c
 20542  0031D6  D098               	goto	i2l268
 20543                           
 20544                           ;UI.c: 319: change_state_to_menu_23();
 20545  0031D8  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20546                           
 20547                           ;UI.c: 320: }
 20548                           ;UI.c: 321: break;
 20549  0031DC  D095               	goto	i2l268
 20550  0031DE                     i2l9708:
 20551                           
 20552                           ;UI.c: 324: if(up){
 20553  0031DE  5075               	movf	_up,w,c
 20554  0031E0  1076               	iorwf	_up+1,w,c
 20555  0031E2  B4D8               	btfsc	status,2,c
 20556  0031E4  D003               	goto	i2l9712
 20557                           
 20558                           ;UI.c: 325: change_state_to_logs_22();
 20559  0031E6  EC4E  F02C         	call	_change_state_to_logs_22	;wreg free
 20560                           
 20561                           ;UI.c: 326: }
 20562  0031EA  D08E               	goto	i2l268
 20563  0031EC                     i2l9712:
 20564                           
 20565                           ;UI.c: 327: else if(down){
 20566  0031EC  5065               	movf	_down,w,c
 20567  0031EE  1066               	iorwf	_down+1,w,c
 20568  0031F0  B4D8               	btfsc	status,2,c
 20569  0031F2  D003               	goto	i2l9716
 20570                           
 20571                           ;UI.c: 328: change_state_to_logs_34();
 20572  0031F4  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 20573                           
 20574                           ;UI.c: 329: }
 20575  0031F8  D087               	goto	i2l268
 20576  0031FA                     i2l9716:
 20577                           
 20578                           ;UI.c: 330: else if(enter){
 20579  0031FA  5067               	movf	_enter,w,c
 20580  0031FC  1068               	iorwf	_enter+1,w,c
 20581  0031FE  B4D8               	btfsc	status,2,c
 20582  003200  D007               	goto	i2l9720
 20583                           
 20584                           ;UI.c: 331: dispLogs(3);
 20585  003202  0E00               	movlw	0
 20586  003204  6E13               	movwf	dispLogs@myLog+1,c
 20587  003206  0E03               	movlw	3
 20588  003208  6E12               	movwf	dispLogs@myLog,c
 20589  00320A  EC53  F02D         	call	_dispLogs	;wreg free
 20590                           
 20591                           ;UI.c: 332: }
 20592  00320E  D07C               	goto	i2l268
 20593  003210                     i2l9720:
 20594                           
 20595                           ;UI.c: 333: else if(back){
 20596  003210  5063               	movf	_back,w,c
 20597  003212  1064               	iorwf	_back+1,w,c
 20598  003214  B4D8               	btfsc	status,2,c
 20599  003216  D078               	goto	i2l268
 20600                           
 20601                           ;UI.c: 334: change_state_to_menu_23();
 20602  003218  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20603                           
 20604                           ;UI.c: 335: }
 20605                           ;UI.c: 336: break;
 20606  00321C  D075               	goto	i2l268
 20607  00321E                     i2l9724:
 20608                           
 20609                           ;UI.c: 339: if(up){
 20610  00321E  5075               	movf	_up,w,c
 20611  003220  1076               	iorwf	_up+1,w,c
 20612  003222  B4D8               	btfsc	status,2,c
 20613  003224  D003               	goto	i2l9728
 20614                           
 20615                           ;UI.c: 340: change_state_to_logs_22();
 20616  003226  EC4E  F02C         	call	_change_state_to_logs_22	;wreg free
 20617                           
 20618                           ;UI.c: 341: }
 20619  00322A  D06E               	goto	i2l268
 20620  00322C                     i2l9728:
 20621                           
 20622                           ;UI.c: 342: else if(down){
 20623  00322C  5065               	movf	_down,w,c
 20624  00322E  1066               	iorwf	_down+1,w,c
 20625  003230  B4D8               	btfsc	status,2,c
 20626  003232  D003               	goto	i2l9732
 20627                           
 20628                           ;UI.c: 343: change_state_to_logs_34();
 20629  003234  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 20630                           
 20631                           ;UI.c: 344: }
 20632  003238  D067               	goto	i2l268
 20633  00323A                     i2l9732:
 20634                           
 20635                           ;UI.c: 345: else if(enter){
 20636  00323A  5067               	movf	_enter,w,c
 20637  00323C  1068               	iorwf	_enter+1,w,c
 20638  00323E  B4D8               	btfsc	status,2,c
 20639  003240  D007               	goto	i2l9736
 20640                           
 20641                           ;UI.c: 346: dispLogs(3);
 20642  003242  0E00               	movlw	0
 20643  003244  6E13               	movwf	dispLogs@myLog+1,c
 20644  003246  0E03               	movlw	3
 20645  003248  6E12               	movwf	dispLogs@myLog,c
 20646  00324A  EC53  F02D         	call	_dispLogs	;wreg free
 20647                           
 20648                           ;UI.c: 347: }
 20649  00324E  D05C               	goto	i2l268
 20650  003250                     i2l9736:
 20651                           
 20652                           ;UI.c: 348: else if(back){
 20653  003250  5063               	movf	_back,w,c
 20654  003252  1064               	iorwf	_back+1,w,c
 20655  003254  B4D8               	btfsc	status,2,c
 20656  003256  D058               	goto	i2l268
 20657                           
 20658                           ;UI.c: 349: change_state_to_menu_23();
 20659  003258  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20660                           
 20661                           ;UI.c: 350: }
 20662                           ;UI.c: 351: break;
 20663  00325C  D055               	goto	i2l268
 20664  00325E                     i2l9740:
 20665                           
 20666                           ;UI.c: 354: if(up){
 20667  00325E  5075               	movf	_up,w,c
 20668  003260  1076               	iorwf	_up+1,w,c
 20669  003262  B4D8               	btfsc	status,2,c
 20670  003264  D003               	goto	i2l9744
 20671                           
 20672                           ;UI.c: 355: change_state_to_logs_33();
 20673  003266  EC36  F02C         	call	_change_state_to_logs_33	;wreg free
 20674                           
 20675                           ;UI.c: 356: }
 20676  00326A  D04E               	goto	i2l268
 20677  00326C                     i2l9744:
 20678                           
 20679                           ;UI.c: 357: else if(down){
 20680  00326C  5065               	movf	_down,w,c
 20681  00326E  1066               	iorwf	_down+1,w,c
 20682  003270  B4D8               	btfsc	status,2,c
 20683  003272  D003               	goto	i2l9748
 20684                           
 20685                           ;UI.c: 358: change_state_to_logs_11();
 20686  003274  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20687                           
 20688                           ;UI.c: 359: }
 20689  003278  D047               	goto	i2l268
 20690  00327A                     i2l9748:
 20691                           
 20692                           ;UI.c: 360: else if(enter){
 20693  00327A  5067               	movf	_enter,w,c
 20694  00327C  1068               	iorwf	_enter+1,w,c
 20695  00327E  B4D8               	btfsc	status,2,c
 20696  003280  D007               	goto	i2l9752
 20697                           
 20698                           ;UI.c: 361: dispLogs(4);
 20699  003282  0E00               	movlw	0
 20700  003284  6E13               	movwf	dispLogs@myLog+1,c
 20701  003286  0E04               	movlw	4
 20702  003288  6E12               	movwf	dispLogs@myLog,c
 20703  00328A  EC53  F02D         	call	_dispLogs	;wreg free
 20704                           
 20705                           ;UI.c: 362: }
 20706  00328E  D03C               	goto	i2l268
 20707  003290                     i2l9752:
 20708                           
 20709                           ;UI.c: 363: else if(back){
 20710  003290  5063               	movf	_back,w,c
 20711  003292  1064               	iorwf	_back+1,w,c
 20712  003294  B4D8               	btfsc	status,2,c
 20713  003296  D038               	goto	i2l268
 20714                           
 20715                           ;UI.c: 364: change_state_to_menu_23();
 20716  003298  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20717                           
 20718                           ;UI.c: 370: }
 20719                           
 20720                           ;UI.c: 369: break;
 20721                           
 20722                           ;UI.c: 368: default:
 20723                           
 20724                           ;UI.c: 365: }
 20725                           ;UI.c: 366: break;
 20726  00329C  D035               	goto	i2l268
 20727  00329E                     i2l9758:
 20728  00329E  C0E6  F043         	movff	_cur_state,??_updateMenu
 20729  0032A2  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20730                           
 20731                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20732                           ; Switch size 1, requested type "space"
 20733                           ; Number of cases is 3, Range of values is 0 to 4
 20734                           ; switch strategies available:
 20735                           ; Name         Instructions Cycles
 20736                           ; simple_byte           10     6 (average)
 20737                           ;	Chosen strategy is simple_byte
 20738  0032A6  5044               	movf	??_updateMenu+1,w,c
 20739  0032A8  0A00               	xorlw	0	; case 0
 20740  0032AA  B4D8               	btfsc	status,2,c
 20741  0032AC  D007               	goto	i2l10728
 20742  0032AE  0A03               	xorlw	3	; case 3
 20743  0032B0  B4D8               	btfsc	status,2,c
 20744  0032B2  D015               	goto	i2l10730
 20745  0032B4  0A07               	xorlw	7	; case 4
 20746  0032B6  B4D8               	btfsc	status,2,c
 20747  0032B8  D020               	goto	i2l10732
 20748  0032BA  D026               	goto	i2l268
 20749  0032BC                     i2l10728:
 20750                           
 20751                           ; Switch size 1, requested type "space"
 20752                           ; Number of cases is 5, Range of values is 0 to 23
 20753                           ; switch strategies available:
 20754                           ; Name         Instructions Cycles
 20755                           ; simple_byte           16     9 (average)
 20756                           ;	Chosen strategy is simple_byte
 20757  0032BC  5043               	movf	??_updateMenu,w,c
 20758  0032BE  0A00               	xorlw	0	; case 0
 20759  0032C0  B4D8               	btfsc	status,2,c
 20760  0032C2  D6DC               	goto	i2l9610
 20761  0032C4  0A0B               	xorlw	11	; case 11
 20762  0032C6  B4D8               	btfsc	status,2,c
 20763  0032C8  D6DC               	goto	i2l9612
 20764  0032CA  0A07               	xorlw	7	; case 12
 20765  0032CC  B4D8               	btfsc	status,2,c
 20766  0032CE  D6EE               	goto	i2l9624
 20767  0032D0  0A1A               	xorlw	26	; case 22
 20768  0032D2  B4D8               	btfsc	status,2,c
 20769  0032D4  D6F9               	goto	i2l9636
 20770  0032D6  0A01               	xorlw	1	; case 23
 20771  0032D8  B4D8               	btfsc	status,2,c
 20772  0032DA  D70C               	goto	i2l9648
 20773  0032DC  D015               	goto	i2l268
 20774  0032DE                     i2l10730:
 20775                           
 20776                           ; Switch size 1, requested type "space"
 20777                           ; Number of cases is 4, Range of values is 243 to 255
 20778                           ; switch strategies available:
 20779                           ; Name         Instructions Cycles
 20780                           ; simple_byte           13     7 (average)
 20781                           ;	Chosen strategy is simple_byte
 20782  0032DE  5043               	movf	??_updateMenu,w,c
 20783  0032E0  0AF3               	xorlw	243	; case 243
 20784  0032E2  B4D8               	btfsc	status,2,c
 20785  0032E4  D71C               	goto	i2l9660
 20786  0032E6  0A07               	xorlw	7	; case 244
 20787  0032E8  B4D8               	btfsc	status,2,c
 20788  0032EA  D739               	goto	i2l9676
 20789  0032EC  0A0A               	xorlw	10	; case 254
 20790  0032EE  B4D8               	btfsc	status,2,c
 20791  0032F0  D756               	goto	i2l9692
 20792  0032F2  0A01               	xorlw	1	; case 255
 20793  0032F4  B4D8               	btfsc	status,2,c
 20794  0032F6  D773               	goto	i2l9708
 20795  0032F8  D007               	goto	i2l268
 20796  0032FA                     i2l10732:
 20797                           
 20798                           ; Switch size 1, requested type "space"
 20799                           ; Number of cases is 2, Range of values is 9 to 10
 20800                           ; switch strategies available:
 20801                           ; Name         Instructions Cycles
 20802                           ; simple_byte            7     4 (average)
 20803                           ;	Chosen strategy is simple_byte
 20804  0032FA  5043               	movf	??_updateMenu,w,c
 20805  0032FC  0A09               	xorlw	9	; case 9
 20806  0032FE  B4D8               	btfsc	status,2,c
 20807  003300  D78E               	goto	i2l9724
 20808  003302  0A03               	xorlw	3	; case 10
 20809  003304  B4D8               	btfsc	status,2,c
 20810  003306  D7AB               	goto	i2l9740
 20811  003308                     i2l268:
 20812                           
 20813                           ;UI.c: 371: }
 20814                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20815  003308  8EF2               	bsf	intcon,7,c	;volatile
 20816  00330A  0012               	return		;funcret
 20817  00330C                     __end_of_updateMenu:
 20818                           	opt stack 0
 20819                           pclatu	equ	0xFFB
 20820                           pclath	equ	0xFFA
 20821                           tblptru	equ	0xFF8
 20822                           tblptrh	equ	0xFF7
 20823                           tblptrl	equ	0xFF6
 20824                           tablat	equ	0xFF5
 20825                           prodh	equ	0xFF4
 20826                           prodl	equ	0xFF3
 20827                           intcon	equ	0xFF2
 20828                           intcon2	equ	0xFF1
 20829                           intcon3	equ	0xFF0
 20830                           indf0	equ	0xFEF
 20831                           postinc0	equ	0xFEE
 20832                           fsr0h	equ	0xFEA
 20833                           fsr0l	equ	0xFE9
 20834                           wreg	equ	0xFE8
 20835                           postdec1	equ	0xFE5
 20836                           fsr1h	equ	0xFE2
 20837                           fsr1l	equ	0xFE1
 20838                           indf2	equ	0xFDF
 20839                           postinc2	equ	0xFDE
 20840                           postdec2	equ	0xFDD
 20841                           fsr2h	equ	0xFDA
 20842                           fsr2l	equ	0xFD9
 20843                           status	equ	0xFD8
 20844                           
 20845 ;; *************** function i2_change_state_to_menu_start *****************
 20846 ;; Defined at:
 20847 ;;		line 477 in file "UI.c"
 20848 ;; Parameters:    Size  Location     Type
 20849 ;;		None
 20850 ;; Auto vars:     Size  Location     Type
 20851 ;;		None
 20852 ;; Return value:  Size  Location     Type
 20853 ;;                  1    wreg      void 
 20854 ;; Registers used:
 20855 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20856 ;; Tracked objects:
 20857 ;;		On entry : 0/0
 20858 ;;		On exit  : 0/0
 20859 ;;		Unchanged: 0/0
 20860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20865 ;;Total ram usage:        0 bytes
 20866 ;; Hardware stack levels used:    1
 20867 ;; Hardware stack levels required when called:    4
 20868 ;; This function calls:
 20869 ;;		i2_lcdInst
 20870 ;;		i2_printRTC
 20871 ;;		i2_printf
 20872 ;; This function is called by:
 20873 ;;		_updateMenu
 20874 ;;		_handler
 20875 ;; This function uses a non-reentrant model
 20876 ;;
 20877                           
 20878                           	psect	text68
 20879  005A32                     __ptext68:
 20880                           	opt stack 0
 20881  005A32                     i2_change_state_to_menu_start:
 20882                           	opt stack 19
 20883                           
 20884                           ;UI.c: 478: cur_state = 0;
 20885                           
 20886                           ;incstack = 0
 20887  005A32  0E00               	movlw	0
 20888  005A34  0100               	movlb	0	; () banked
 20889  005A36  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20890  005A38  0E00               	movlw	0
 20891  005A3A  6FE6               	movwf	_cur_state& (0+255),b
 20892                           
 20893                           ; BSR set to: 0
 20894                           ;UI.c: 480: lcdInst(0b10000000);;
 20895  005A3C  0E80               	movlw	128
 20896  005A3E  ECFD  F02D         	call	i2_lcdInst
 20897                           
 20898                           ;UI.c: 481: printRTC();
 20899  005A42  ECE2  F01A         	call	i2_printRTC	;wreg free
 20900                           
 20901                           ;UI.c: 482: lcdInst(0b11000000);;
 20902  005A46  0EC0               	movlw	192
 20903  005A48  ECFD  F02D         	call	i2_lcdInst
 20904                           
 20905                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20906  005A4C  0EEA               	movlw	low STR_30
 20907  005A4E  6E0D               	movwf	i2printf@f,c
 20908  005A50  0EFD               	movlw	high STR_30
 20909  005A52  6E0E               	movwf	i2printf@f+1,c
 20910  005A54  EC00  F012         	call	i2_printf	;wreg free
 20911  005A58  0012               	return		;funcret
 20912  005A5A                     __end_ofi2_change_state_to_menu_start:
 20913                           	opt stack 0
 20914                           pclatu	equ	0xFFB
 20915                           pclath	equ	0xFFA
 20916                           tblptru	equ	0xFF8
 20917                           tblptrh	equ	0xFF7
 20918                           tblptrl	equ	0xFF6
 20919                           tablat	equ	0xFF5
 20920                           prodh	equ	0xFF4
 20921                           prodl	equ	0xFF3
 20922                           intcon	equ	0xFF2
 20923                           intcon2	equ	0xFF1
 20924                           intcon3	equ	0xFF0
 20925                           indf0	equ	0xFEF
 20926                           postinc0	equ	0xFEE
 20927                           fsr0h	equ	0xFEA
 20928                           fsr0l	equ	0xFE9
 20929                           wreg	equ	0xFE8
 20930                           postdec1	equ	0xFE5
 20931                           fsr1h	equ	0xFE2
 20932                           fsr1l	equ	0xFE1
 20933                           indf2	equ	0xFDF
 20934                           postinc2	equ	0xFDE
 20935                           postdec2	equ	0xFDD
 20936                           fsr2h	equ	0xFDA
 20937                           fsr2l	equ	0xFD9
 20938                           status	equ	0xFD8
 20939                           
 20940 ;; *************** function i2_printRTC *****************
 20941 ;; Defined at:
 20942 ;;		line 63 in file "RTC.c"
 20943 ;; Parameters:    Size  Location     Type
 20944 ;;		None
 20945 ;; Auto vars:     Size  Location     Type
 20946 ;;  printRTC       14   44[COMRAM] int [7]
 20947 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20948 ;;  printRTC        2   64[COMRAM] int 
 20949 ;;  printRTC        2   58[COMRAM] int 
 20950 ;; Return value:  Size  Location     Type
 20951 ;;                  1    wreg      void 
 20952 ;; Registers used:
 20953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20954 ;; Tracked objects:
 20955 ;;		On entry : 0/0
 20956 ;;		On exit  : 0/0
 20957 ;;		Unchanged: 0/0
 20958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20960 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20961 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20962 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20963 ;;Total ram usage:       25 bytes
 20964 ;; Hardware stack levels used:    1
 20965 ;; Hardware stack levels required when called:    3
 20966 ;; This function calls:
 20967 ;;		i2_getRTC
 20968 ;;		i2_lcdInst
 20969 ;;		i2_printf
 20970 ;;		i2_strcpy
 20971 ;; This function is called by:
 20972 ;;		i2_change_state_to_menu_start
 20973 ;; This function uses a non-reentrant model
 20974 ;;
 20975                           
 20976                           	psect	text69
 20977  0035C4                     __ptext69:
 20978                           	opt stack 0
 20979  0035C4                     i2_printRTC:
 20980                           	opt stack 19
 20981                           
 20982                           ;RTC.c: 64: getRTC();
 20983                           
 20984                           ;incstack = 0
 20985  0035C4  EC02  F028         	call	i2_getRTC	;wreg free
 20986                           
 20987                           ;RTC.c: 65: char month[] = "MMM";
 20988  0035C8  C14D  F03D         	movff	printRTC@F3236,i2printRTC@month
 20989  0035CC  C14E  F03E         	movff	printRTC@F3236+1,i2printRTC@month+1
 20990  0035D0  C14F  F03F         	movff	printRTC@F3236+2,i2printRTC@month+2
 20991  0035D4  C150  F040         	movff	printRTC@F3236+3,i2printRTC@month+3
 20992                           
 20993                           ;RTC.c: 66: int INT_time[7];
 20994                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20995  0035D8  0E00               	movlw	0
 20996  0035DA  6E42               	movwf	i2printRTC@i+1,c
 20997  0035DC  0E00               	movlw	0
 20998  0035DE  6E41               	movwf	i2printRTC@i,c
 20999  0035E0  BE42               	btfsc	i2printRTC@i+1,7,c
 21000  0035E2  D006               	goto	i2l7558
 21001  0035E4  5042               	movf	i2printRTC@i+1,w,c
 21002  0035E6  E135               	bnz	i2l627
 21003  0035E8  0E07               	movlw	7
 21004  0035EA  5C41               	subwf	i2printRTC@i,w,c
 21005  0035EC  B0D8               	btfsc	status,0,c
 21006  0035EE  D031               	goto	i2l627
 21007  0035F0                     i2l7558:
 21008                           
 21009                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21010  0035F0  0E1C               	movlw	low _time
 21011  0035F2  2441               	addwf	i2printRTC@i,w,c
 21012  0035F4  6ED9               	movwf	fsr2l,c
 21013  0035F6  0E01               	movlw	high _time
 21014  0035F8  2042               	addwfc	i2printRTC@i+1,w,c
 21015  0035FA  6EDA               	movwf	fsr2h,c
 21016  0035FC  50DF               	movf	indf2,w,c
 21017  0035FE  6E2A               	movwf	??i2_printRTC& (0+255),c
 21018  003600  3A2A               	swapf	??i2_printRTC,f,c
 21019  003602  0E0F               	movlw	15
 21020  003604  162A               	andwf	??i2_printRTC,f,c
 21021  003606  0E0F               	movlw	15
 21022  003608  162A               	andwf	??i2_printRTC,f,c
 21023  00360A  502A               	movf	??i2_printRTC,w,c
 21024  00360C  0D0A               	mullw	10
 21025  00360E  0E1C               	movlw	low _time
 21026  003610  2441               	addwf	i2printRTC@i,w,c
 21027  003612  6ED9               	movwf	fsr2l,c
 21028  003614  0E01               	movlw	high _time
 21029  003616  2042               	addwfc	i2printRTC@i+1,w,c
 21030  003618  6EDA               	movwf	fsr2h,c
 21031  00361A  50DF               	movf	indf2,w,c
 21032  00361C  0B0F               	andlw	15
 21033  00361E  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21034  003620  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21035  003622  50F3               	movf	prodl,w,c
 21036  003624  262B               	addwf	??i2_printRTC+1,f,c
 21037  003626  50F4               	movf	prodh,w,c
 21038  003628  222C               	addwfc	??i2_printRTC+2,f,c
 21039  00362A  90D8               	bcf	status,0,c
 21040  00362C  3441               	rlcf	i2printRTC@i,w,c
 21041  00362E  6ED9               	movwf	fsr2l,c
 21042  003630  3442               	rlcf	i2printRTC@i+1,w,c
 21043  003632  6EDA               	movwf	fsr2h,c
 21044  003634  0E2D               	movlw	low i2printRTC@INT_time
 21045  003636  26D9               	addwf	fsr2l,f,c
 21046  003638  0E00               	movlw	high i2printRTC@INT_time
 21047  00363A  22DA               	addwfc	fsr2h,f,c
 21048  00363C  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21049  003640  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21050  003644  4A41               	infsnz	i2printRTC@i,f,c
 21051  003646  2A42               	incf	i2printRTC@i+1,f,c
 21052  003648  BE42               	btfsc	i2printRTC@i+1,7,c
 21053  00364A  D7D2               	goto	i2l7558
 21054  00364C  5042               	movf	i2printRTC@i+1,w,c
 21055  00364E  E101               	bnz	i2u624_40
 21056  003650  D7CB               	goto	L19
 21057  003652                     i2u624_40:
 21058  003652                     i2l627:
 21059                           
 21060                           ;RTC.c: 69: }
 21061                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21062  003652  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21063  003656  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21064                           
 21065                           ;RTC.c: 72: switch(RTC_month){
 21066  00365A  D084               	goto	i2l7590
 21067  00365C                     i2l7564:
 21068                           
 21069                           ;RTC.c: 74: strcpy(month, "JAN");
 21070  00365C  0E3D               	movlw	low i2printRTC@month
 21071  00365E  6E01               	movwf	i2strcpy@to,c
 21072  003660  0E00               	movlw	high i2printRTC@month
 21073  003662  6E02               	movwf	i2strcpy@to+1,c
 21074  003664  0EDA               	movlw	low STR_8
 21075  003666  6E03               	movwf	i2strcpy@from,c
 21076  003668  0EFF               	movlw	high STR_8
 21077  00366A  6E04               	movwf	i2strcpy@from+1,c
 21078  00366C  EC8D  F02B         	call	i2_strcpy	;wreg free
 21079                           
 21080                           ;RTC.c: 75: break;
 21081  003670  D0A6               	goto	i2l7592
 21082  003672                     i2l7566:
 21083                           
 21084                           ;RTC.c: 77: strcpy(month, "FEB");
 21085  003672  0E3D               	movlw	low i2printRTC@month
 21086  003674  6E01               	movwf	i2strcpy@to,c
 21087  003676  0E00               	movlw	high i2printRTC@month
 21088  003678  6E02               	movwf	i2strcpy@to+1,c
 21089  00367A  0ECA               	movlw	low STR_9
 21090  00367C  6E03               	movwf	i2strcpy@from,c
 21091  00367E  0EFF               	movlw	high STR_9
 21092  003680  6E04               	movwf	i2strcpy@from+1,c
 21093  003682  EC8D  F02B         	call	i2_strcpy	;wreg free
 21094                           
 21095                           ;RTC.c: 78: break;
 21096  003686  D09B               	goto	i2l7592
 21097  003688                     i2l7568:
 21098                           
 21099                           ;RTC.c: 80: strcpy(month, "MAR");
 21100  003688  0E3D               	movlw	low i2printRTC@month
 21101  00368A  6E01               	movwf	i2strcpy@to,c
 21102  00368C  0E00               	movlw	high i2printRTC@month
 21103  00368E  6E02               	movwf	i2strcpy@to+1,c
 21104  003690  0EE6               	movlw	low STR_10
 21105  003692  6E03               	movwf	i2strcpy@from,c
 21106  003694  0EFF               	movlw	high STR_10
 21107  003696  6E04               	movwf	i2strcpy@from+1,c
 21108  003698  EC8D  F02B         	call	i2_strcpy	;wreg free
 21109                           
 21110                           ;RTC.c: 81: break;
 21111  00369C  D090               	goto	i2l7592
 21112  00369E                     i2l7570:
 21113                           
 21114                           ;RTC.c: 83: strcpy(month, "APR");
 21115  00369E  0E3D               	movlw	low i2printRTC@month
 21116  0036A0  6E01               	movwf	i2strcpy@to,c
 21117  0036A2  0E00               	movlw	high i2printRTC@month
 21118  0036A4  6E02               	movwf	i2strcpy@to+1,c
 21119  0036A6  0EEA               	movlw	low STR_11
 21120  0036A8  6E03               	movwf	i2strcpy@from,c
 21121  0036AA  0EFF               	movlw	high STR_11
 21122  0036AC  6E04               	movwf	i2strcpy@from+1,c
 21123  0036AE  EC8D  F02B         	call	i2_strcpy	;wreg free
 21124                           
 21125                           ;RTC.c: 84: break;
 21126  0036B2  D085               	goto	i2l7592
 21127  0036B4                     i2l7572:
 21128                           
 21129                           ;RTC.c: 86: strcpy(month, "MAY");
 21130  0036B4  0E3D               	movlw	low i2printRTC@month
 21131  0036B6  6E01               	movwf	i2strcpy@to,c
 21132  0036B8  0E00               	movlw	high i2printRTC@month
 21133  0036BA  6E02               	movwf	i2strcpy@to+1,c
 21134  0036BC  0EFA               	movlw	low STR_12
 21135  0036BE  6E03               	movwf	i2strcpy@from,c
 21136  0036C0  0EFF               	movlw	high STR_12
 21137  0036C2  6E04               	movwf	i2strcpy@from+1,c
 21138  0036C4  EC8D  F02B         	call	i2_strcpy	;wreg free
 21139                           
 21140                           ;RTC.c: 87: break;
 21141  0036C8  D07A               	goto	i2l7592
 21142  0036CA                     i2l7574:
 21143                           
 21144                           ;RTC.c: 89: strcpy(month, "JUN");
 21145  0036CA  0E3D               	movlw	low i2printRTC@month
 21146  0036CC  6E01               	movwf	i2strcpy@to,c
 21147  0036CE  0E00               	movlw	high i2printRTC@month
 21148  0036D0  6E02               	movwf	i2strcpy@to+1,c
 21149  0036D2  0EDE               	movlw	low STR_13
 21150  0036D4  6E03               	movwf	i2strcpy@from,c
 21151  0036D6  0EFF               	movlw	high STR_13
 21152  0036D8  6E04               	movwf	i2strcpy@from+1,c
 21153  0036DA  EC8D  F02B         	call	i2_strcpy	;wreg free
 21154                           
 21155                           ;RTC.c: 90: break;
 21156  0036DE  D06F               	goto	i2l7592
 21157  0036E0                     i2l7576:
 21158                           
 21159                           ;RTC.c: 92: strcpy(month, "JUL");
 21160  0036E0  0E3D               	movlw	low i2printRTC@month
 21161  0036E2  6E01               	movwf	i2strcpy@to,c
 21162  0036E4  0E00               	movlw	high i2printRTC@month
 21163  0036E6  6E02               	movwf	i2strcpy@to+1,c
 21164  0036E8  0ED6               	movlw	low STR_14
 21165  0036EA  6E03               	movwf	i2strcpy@from,c
 21166  0036EC  0EFF               	movlw	high STR_14
 21167  0036EE  6E04               	movwf	i2strcpy@from+1,c
 21168  0036F0  EC8D  F02B         	call	i2_strcpy	;wreg free
 21169                           
 21170                           ;RTC.c: 93: break;
 21171  0036F4  D064               	goto	i2l7592
 21172  0036F6                     i2l7578:
 21173                           
 21174                           ;RTC.c: 95: strcpy(month, "AUG");
 21175  0036F6  0E3D               	movlw	low i2printRTC@month
 21176  0036F8  6E01               	movwf	i2strcpy@to,c
 21177  0036FA  0E00               	movlw	high i2printRTC@month
 21178  0036FC  6E02               	movwf	i2strcpy@to+1,c
 21179  0036FE  0ED2               	movlw	low STR_15
 21180  003700  6E03               	movwf	i2strcpy@from,c
 21181  003702  0EFF               	movlw	high STR_15
 21182  003704  6E04               	movwf	i2strcpy@from+1,c
 21183  003706  EC8D  F02B         	call	i2_strcpy	;wreg free
 21184                           
 21185                           ;RTC.c: 96: break;
 21186  00370A  D059               	goto	i2l7592
 21187  00370C                     i2l7580:
 21188                           
 21189                           ;RTC.c: 98: strcpy(month, "SEP");
 21190  00370C  0E3D               	movlw	low i2printRTC@month
 21191  00370E  6E01               	movwf	i2strcpy@to,c
 21192  003710  0E00               	movlw	high i2printRTC@month
 21193  003712  6E02               	movwf	i2strcpy@to+1,c
 21194  003714  0EE2               	movlw	low STR_16
 21195  003716  6E03               	movwf	i2strcpy@from,c
 21196  003718  0EFF               	movlw	high STR_16
 21197  00371A  6E04               	movwf	i2strcpy@from+1,c
 21198  00371C  EC8D  F02B         	call	i2_strcpy	;wreg free
 21199                           
 21200                           ;RTC.c: 99: break;
 21201  003720  D04E               	goto	i2l7592
 21202  003722                     i2l7582:
 21203                           
 21204                           ;RTC.c: 101: strcpy(month, "OCT");
 21205  003722  0E3D               	movlw	low i2printRTC@month
 21206  003724  6E01               	movwf	i2strcpy@to,c
 21207  003726  0E00               	movlw	high i2printRTC@month
 21208  003728  6E02               	movwf	i2strcpy@to+1,c
 21209  00372A  0EF2               	movlw	low STR_17
 21210  00372C  6E03               	movwf	i2strcpy@from,c
 21211  00372E  0EFF               	movlw	high STR_17
 21212  003730  6E04               	movwf	i2strcpy@from+1,c
 21213  003732  EC8D  F02B         	call	i2_strcpy	;wreg free
 21214                           
 21215                           ;RTC.c: 102: break;
 21216  003736  D043               	goto	i2l7592
 21217  003738                     i2l7584:
 21218                           
 21219                           ;RTC.c: 104: strcpy(month, "NOV");
 21220  003738  0E3D               	movlw	low i2printRTC@month
 21221  00373A  6E01               	movwf	i2strcpy@to,c
 21222  00373C  0E00               	movlw	high i2printRTC@month
 21223  00373E  6E02               	movwf	i2strcpy@to+1,c
 21224  003740  0EF6               	movlw	low STR_18
 21225  003742  6E03               	movwf	i2strcpy@from,c
 21226  003744  0EFF               	movlw	high STR_18
 21227  003746  6E04               	movwf	i2strcpy@from+1,c
 21228  003748  EC8D  F02B         	call	i2_strcpy	;wreg free
 21229                           
 21230                           ;RTC.c: 105: break;
 21231  00374C  D038               	goto	i2l7592
 21232  00374E                     i2l7586:
 21233                           
 21234                           ;RTC.c: 107: strcpy(month, "DEC");
 21235  00374E  0E3D               	movlw	low i2printRTC@month
 21236  003750  6E01               	movwf	i2strcpy@to,c
 21237  003752  0E00               	movlw	high i2printRTC@month
 21238  003754  6E02               	movwf	i2strcpy@to+1,c
 21239  003756  0ECE               	movlw	low STR_19
 21240  003758  6E03               	movwf	i2strcpy@from,c
 21241  00375A  0EFF               	movlw	high STR_19
 21242  00375C  6E04               	movwf	i2strcpy@from+1,c
 21243  00375E  EC8D  F02B         	call	i2_strcpy	;wreg free
 21244                           
 21245                           ;RTC.c: 109: }
 21246                           
 21247                           ;RTC.c: 108: break;
 21248  003762  D02D               	goto	i2l7592
 21249  003764                     i2l7590:
 21250  003764  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21251  003768  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21252                           
 21253                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21254                           ; Switch size 1, requested type "space"
 21255                           ; Number of cases is 1, Range of values is 0 to 0
 21256                           ; switch strategies available:
 21257                           ; Name         Instructions Cycles
 21258                           ; simple_byte            4     3 (average)
 21259                           ;	Chosen strategy is simple_byte
 21260  00376C  502B               	movf	??i2_printRTC+1,w,c
 21261  00376E  0A00               	xorlw	0	; case 0
 21262  003770  A4D8               	btfss	status,2,c
 21263  003772  D025               	goto	i2l7592
 21264                           
 21265                           ; Switch size 1, requested type "space"
 21266                           ; Number of cases is 12, Range of values is 1 to 12
 21267                           ; switch strategies available:
 21268                           ; Name         Instructions Cycles
 21269                           ; simple_byte           37    19 (average)
 21270                           ;	Chosen strategy is simple_byte
 21271  003774  502A               	movf	??i2_printRTC,w,c
 21272  003776  0A01               	xorlw	1	; case 1
 21273  003778  B4D8               	btfsc	status,2,c
 21274  00377A  D770               	goto	i2l7564
 21275  00377C  0A03               	xorlw	3	; case 2
 21276  00377E  B4D8               	btfsc	status,2,c
 21277  003780  D778               	goto	i2l7566
 21278  003782  0A01               	xorlw	1	; case 3
 21279  003784  B4D8               	btfsc	status,2,c
 21280  003786  D780               	goto	i2l7568
 21281  003788  0A07               	xorlw	7	; case 4
 21282  00378A  B4D8               	btfsc	status,2,c
 21283  00378C  D788               	goto	i2l7570
 21284  00378E  0A01               	xorlw	1	; case 5
 21285  003790  B4D8               	btfsc	status,2,c
 21286  003792  D790               	goto	i2l7572
 21287  003794  0A03               	xorlw	3	; case 6
 21288  003796  B4D8               	btfsc	status,2,c
 21289  003798  D798               	goto	i2l7574
 21290  00379A  0A01               	xorlw	1	; case 7
 21291  00379C  B4D8               	btfsc	status,2,c
 21292  00379E  D7A0               	goto	i2l7576
 21293  0037A0  0A0F               	xorlw	15	; case 8
 21294  0037A2  B4D8               	btfsc	status,2,c
 21295  0037A4  D7A8               	goto	i2l7578
 21296  0037A6  0A01               	xorlw	1	; case 9
 21297  0037A8  B4D8               	btfsc	status,2,c
 21298  0037AA  D7B0               	goto	i2l7580
 21299  0037AC  0A03               	xorlw	3	; case 10
 21300  0037AE  B4D8               	btfsc	status,2,c
 21301  0037B0  D7B8               	goto	i2l7582
 21302  0037B2  0A01               	xorlw	1	; case 11
 21303  0037B4  B4D8               	btfsc	status,2,c
 21304  0037B6  D7C0               	goto	i2l7584
 21305  0037B8  0A07               	xorlw	7	; case 12
 21306  0037BA  B4D8               	btfsc	status,2,c
 21307  0037BC  D7C8               	goto	i2l7586
 21308  0037BE                     i2l7592:
 21309                           
 21310                           ;RTC.c: 110: lcdInst(0b10000000);;
 21311  0037BE  0E80               	movlw	128
 21312  0037C0  ECFD  F02D         	call	i2_lcdInst
 21313                           
 21314                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21315  0037C4  0EA6               	movlw	low STR_21
 21316  0037C6  6E0D               	movwf	i2printf@f,c
 21317  0037C8  0EFA               	movlw	high STR_21
 21318  0037CA  6E0E               	movwf	i2printf@f+1,c
 21319  0037CC  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21320  0037D0  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21321  0037D4  0E3D               	movlw	low i2printRTC@month
 21322  0037D6  6E11               	movwf	?i2_printf+4,c
 21323  0037D8  0E00               	movlw	high i2printRTC@month
 21324  0037DA  6E12               	movwf	?i2_printf+5,c
 21325  0037DC  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21326  0037E0  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21327  0037E4  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21328  0037E8  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21329  0037EC  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21330  0037F0  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21331  0037F4  EC00  F012         	call	i2_printf	;wreg free
 21332  0037F8  0012               	return		;funcret
 21333  0037FA                     __end_ofi2_printRTC:
 21334                           	opt stack 0
 21335                           pclatu	equ	0xFFB
 21336                           pclath	equ	0xFFA
 21337                           tblptru	equ	0xFF8
 21338                           tblptrh	equ	0xFF7
 21339                           tblptrl	equ	0xFF6
 21340                           tablat	equ	0xFF5
 21341                           prodh	equ	0xFF4
 21342                           prodl	equ	0xFF3
 21343                           intcon	equ	0xFF2
 21344                           intcon2	equ	0xFF1
 21345                           intcon3	equ	0xFF0
 21346                           indf0	equ	0xFEF
 21347                           postinc0	equ	0xFEE
 21348                           fsr0h	equ	0xFEA
 21349                           fsr0l	equ	0xFE9
 21350                           wreg	equ	0xFE8
 21351                           postdec1	equ	0xFE5
 21352                           fsr1h	equ	0xFE2
 21353                           fsr1l	equ	0xFE1
 21354                           indf2	equ	0xFDF
 21355                           postinc2	equ	0xFDE
 21356                           postdec2	equ	0xFDD
 21357                           fsr2h	equ	0xFDA
 21358                           fsr2l	equ	0xFD9
 21359                           status	equ	0xFD8
 21360                           
 21361 ;; *************** function i2_strcpy *****************
 21362 ;; Defined at:
 21363 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21364 ;; Parameters:    Size  Location     Type
 21365 ;;  to              2    0[COMRAM] PTR unsigned char 
 21366 ;;		 -> printRTC@month(4), UI@month(4), 
 21367 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21368 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21369 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21370 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21371 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21372 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21373 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21374 ;;		 -> STR_8(4), 
 21375 ;; Auto vars:     Size  Location     Type
 21376 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21377 ;;		 -> printRTC@month(4), UI@month(4), 
 21378 ;; Return value:  Size  Location     Type
 21379 ;;                  2    0[COMRAM] PTR unsigned char 
 21380 ;; Registers used:
 21381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21382 ;; Tracked objects:
 21383 ;;		On entry : 0/0
 21384 ;;		On exit  : 0/0
 21385 ;;		Unchanged: 0/0
 21386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21391 ;;Total ram usage:        6 bytes
 21392 ;; Hardware stack levels used:    1
 21393 ;; This function calls:
 21394 ;;		Nothing
 21395 ;; This function is called by:
 21396 ;;		i2_printRTC
 21397 ;; This function uses a non-reentrant model
 21398 ;;
 21399                           
 21400                           	psect	text70
 21401  00571A                     __ptext70:
 21402                           	opt stack 0
 21403  00571A                     i2_strcpy:
 21404                           	opt stack 21
 21405                           
 21406                           ;incstack = 0
 21407  00571A  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21408  00571E  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21409  005722  D004               	goto	i2l7116
 21410  005724                     i2l7114:
 21411  005724  4A05               	infsnz	i2strcpy@cp,f,c
 21412  005726  2A06               	incf	i2strcpy@cp+1,f,c
 21413  005728  4A03               	infsnz	i2strcpy@from,f,c
 21414  00572A  2A04               	incf	i2strcpy@from+1,f,c
 21415  00572C                     i2l7116:
 21416  00572C  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21417  005730  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21418  005734                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21419  005734  6AF8               	clrf	tblptru,c
 21420  005736                     	endif
 21421  005736                     	if	0	;tblptru may be non-zero
 21422  005736                     	endif
 21423  005736  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21424  00573A  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21425  00573E  0008               	tblrd		*
 21426  005740  CFF5 FFDF          	movff	tablat,indf2
 21427  005744  50DF               	movf	indf2,w,c
 21428  005746  B4D8               	btfsc	status,2,c
 21429  005748  0012               	return	
 21430  00574A  D7EC               	goto	i2l7114
 21431  00574C                     __end_ofi2_strcpy:
 21432                           	opt stack 0
 21433                           pclatu	equ	0xFFB
 21434                           pclath	equ	0xFFA
 21435                           tblptru	equ	0xFF8
 21436                           tblptrh	equ	0xFF7
 21437                           tblptrl	equ	0xFF6
 21438                           tablat	equ	0xFF5
 21439                           prodh	equ	0xFF4
 21440                           prodl	equ	0xFF3
 21441                           intcon	equ	0xFF2
 21442                           intcon2	equ	0xFF1
 21443                           intcon3	equ	0xFF0
 21444                           indf0	equ	0xFEF
 21445                           postinc0	equ	0xFEE
 21446                           fsr0h	equ	0xFEA
 21447                           fsr0l	equ	0xFE9
 21448                           wreg	equ	0xFE8
 21449                           postdec1	equ	0xFE5
 21450                           fsr1h	equ	0xFE2
 21451                           fsr1l	equ	0xFE1
 21452                           indf2	equ	0xFDF
 21453                           postinc2	equ	0xFDE
 21454                           postdec2	equ	0xFDD
 21455                           fsr2h	equ	0xFDA
 21456                           fsr2l	equ	0xFD9
 21457                           status	equ	0xFD8
 21458                           
 21459 ;; *************** function _inputHandler *****************
 21460 ;; Defined at:
 21461 ;;		line 375 in file "UI.c"
 21462 ;; Parameters:    Size  Location     Type
 21463 ;;		None
 21464 ;; Auto vars:     Size  Location     Type
 21465 ;;		None
 21466 ;; Return value:  Size  Location     Type
 21467 ;;                  2   41[COMRAM] int 
 21468 ;; Registers used:
 21469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21470 ;; Tracked objects:
 21471 ;;		On entry : 0/0
 21472 ;;		On exit  : 0/0
 21473 ;;		Unchanged: 0/0
 21474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21478 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21479 ;;Total ram usage:        4 bytes
 21480 ;; Hardware stack levels used:    1
 21481 ;; Hardware stack levels required when called:    4
 21482 ;; This function calls:
 21483 ;;		_change_state_to_logs_11
 21484 ;;		_change_state_to_logs_12
 21485 ;;		_change_state_to_logs_22
 21486 ;;		_change_state_to_logs_23
 21487 ;;		_change_state_to_logs_33
 21488 ;;		_change_state_to_logs_34
 21489 ;;		_change_state_to_menu_11
 21490 ;;		_change_state_to_menu_23
 21491 ;;		i2_change_state_to_menu_12
 21492 ;;		i2_change_state_to_menu_22
 21493 ;; This function is called by:
 21494 ;;		_updateMenu
 21495 ;; This function uses a non-reentrant model
 21496 ;;
 21497                           
 21498                           	psect	text71
 21499  0037FA                     __ptext71:
 21500                           	opt stack 0
 21501  0037FA                     _inputHandler:
 21502                           	opt stack 18
 21503                           
 21504                           ;UI.c: 380: if(firstboot){
 21505                           
 21506                           ;incstack = 0
 21507  0037FA  0101               	movlb	1	; () banked
 21508  0037FC  5139               	movf	_firstboot& (0+255),w,b
 21509  0037FE  0101               	movlb	1	; () banked
 21510  003800  113A               	iorwf	(_firstboot+1)& (0+255),w,b
 21511  003802  B4D8               	btfsc	status,2,c
 21512  003804  D00C               	goto	i2l7660
 21513                           
 21514                           ; BSR set to: 1
 21515                           ;UI.c: 381: change_state_to_menu_11();
 21516  003806  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 21517                           
 21518                           ;UI.c: 382: firstboot = 0;
 21519  00380A  0E00               	movlw	0
 21520  00380C  0101               	movlb	1	; () banked
 21521  00380E  6F3A               	movwf	(_firstboot+1)& (0+255),b
 21522  003810  0E00               	movlw	0
 21523  003812  6F39               	movwf	_firstboot& (0+255),b
 21524                           
 21525                           ; BSR set to: 1
 21526                           ;UI.c: 383: return 0;
 21527  003814  0E00               	movlw	0
 21528  003816  6E2B               	movwf	?_inputHandler+1,c
 21529  003818  0E00               	movlw	0
 21530  00381A  6E2A               	movwf	?_inputHandler,c
 21531                           
 21532                           ; BSR set to: 1
 21533  00381C  0012               	return	
 21534  00381E                     i2l7660:
 21535                           
 21536                           ; BSR set to: 1
 21537                           ;UI.c: 384: }
 21538                           ;UI.c: 385: if (logstate){
 21539  00381E  0100               	movlb	0	; () banked
 21540  003820  51F8               	movf	_logstate& (0+255),w,b
 21541  003822  0100               	movlb	0	; () banked
 21542  003824  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21543  003826  B4D8               	btfsc	status,2,c
 21544  003828  D0C7               	goto	i2l7778
 21545                           
 21546                           ; BSR set to: 0
 21547                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21548  00382A  0E43               	movlw	67
 21549  00382C  187D               	xorwf	_input,w,c	;volatile
 21550  00382E  A4D8               	btfss	status,2,c
 21551  003830  D012               	goto	i2l7678
 21552                           
 21553                           ; BSR set to: 0
 21554  003832  B281               	btfsc	3969,1,c	;volatile
 21555  003834  D009               	goto	i2l7670
 21556  003836  D00F               	goto	i2l7678
 21557  003838                     i2l7668:
 21558                           
 21559                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21560  003838  0E68               	movlw	104
 21561  00383A  6E2C               	movwf	??_inputHandler& (0+255),c
 21562  00383C  0EE4               	movlw	228
 21563  00383E                     i2u1136_47:
 21564  00383E  2EE8               	decfsz	wreg,f,c
 21565  003840  D7FE               	bra	i2u1136_47
 21566  003842  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21567  003844  D7FC               	bra	i2u1136_47
 21568  003846  D000               	nop2	
 21569  003848                     i2l7670:
 21570  003848  B281               	btfsc	3969,1,c	;volatile
 21571  00384A  D7F6               	goto	i2l7668
 21572  00384C                     i2l7672:
 21573                           
 21574                           ;UI.c: 390: }
 21575                           ;UI.c: 391: return 0;
 21576  00384C  0E00               	movlw	0
 21577  00384E  6E2B               	movwf	?_inputHandler+1,c
 21578  003850  0E00               	movlw	0
 21579  003852  6E2A               	movwf	?_inputHandler,c
 21580  003854  0012               	return	
 21581  003856                     i2l7678:
 21582                           
 21583                           ;UI.c: 393: else if (input == 'D'){
 21584  003856  0E44               	movlw	68
 21585  003858  187D               	xorwf	_input,w,c	;volatile
 21586  00385A  A4D8               	btfss	status,2,c
 21587  00385C  D7F7               	goto	i2l7672
 21588                           
 21589                           ;UI.c: 395: logstate = 0;
 21590  00385E  0E00               	movlw	0
 21591  003860  0100               	movlb	0	; () banked
 21592  003862  6FF9               	movwf	(_logstate+1)& (0+255),b
 21593  003864  0E00               	movlw	0
 21594  003866  6FF8               	movwf	_logstate& (0+255),b
 21595                           
 21596                           ;UI.c: 396: switch(cur_state){
 21597  003868  D012               	goto	i2l7696
 21598  00386A                     i2l7682:
 21599                           
 21600                           ;UI.c: 398: change_state_to_logs_11();
 21601  00386A  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 21602                           
 21603                           ;UI.c: 399: break;
 21604  00386E  D7EE               	goto	i2l7672
 21605  003870                     i2l7684:
 21606                           
 21607                           ;UI.c: 401: change_state_to_logs_12();
 21608  003870  EC66  F02C         	call	_change_state_to_logs_12	;wreg free
 21609                           
 21610                           ;UI.c: 402: break;
 21611  003874  D7EB               	goto	i2l7672
 21612  003876                     i2l7686:
 21613                           
 21614                           ;UI.c: 404: change_state_to_logs_22();
 21615  003876  EC4E  F02C         	call	_change_state_to_logs_22	;wreg free
 21616                           
 21617                           ;UI.c: 405: break;
 21618  00387A  D7E8               	goto	i2l7672
 21619  00387C                     i2l7688:
 21620                           
 21621                           ;UI.c: 407: change_state_to_logs_23();
 21622  00387C  ECAD  F02C         	call	_change_state_to_logs_23	;wreg free
 21623                           
 21624                           ;UI.c: 408: break;
 21625  003880  D7E5               	goto	i2l7672
 21626  003882                     i2l7690:
 21627                           
 21628                           ;UI.c: 410: change_state_to_logs_33();
 21629  003882  EC36  F02C         	call	_change_state_to_logs_33	;wreg free
 21630                           
 21631                           ;UI.c: 411: break;
 21632  003886  D7E2               	goto	i2l7672
 21633  003888                     i2l7692:
 21634                           
 21635                           ;UI.c: 413: change_state_to_logs_34();
 21636  003888  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 21637                           
 21638                           ;UI.c: 415: }
 21639                           
 21640                           ;UI.c: 414: break;
 21641  00388C  D7DF               	goto	i2l7672
 21642  00388E                     i2l7696:
 21643  00388E  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21644  003892  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21645                           
 21646                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21647                           ; Switch size 1, requested type "space"
 21648                           ; Number of cases is 2, Range of values is 3 to 4
 21649                           ; switch strategies available:
 21650                           ; Name         Instructions Cycles
 21651                           ; simple_byte            7     4 (average)
 21652                           ;	Chosen strategy is simple_byte
 21653  003896  502D               	movf	??_inputHandler+1,w,c
 21654  003898  0A03               	xorlw	3	; case 3
 21655  00389A  B4D8               	btfsc	status,2,c
 21656  00389C  D004               	goto	i2l10736
 21657  00389E  0A07               	xorlw	7	; case 4
 21658  0038A0  B4D8               	btfsc	status,2,c
 21659  0038A2  D00F               	goto	i2l10738
 21660  0038A4  D7D3               	goto	i2l7672
 21661  0038A6                     i2l10736:
 21662                           
 21663                           ; Switch size 1, requested type "space"
 21664                           ; Number of cases is 4, Range of values is 243 to 255
 21665                           ; switch strategies available:
 21666                           ; Name         Instructions Cycles
 21667                           ; simple_byte           13     7 (average)
 21668                           ;	Chosen strategy is simple_byte
 21669  0038A6  502C               	movf	??_inputHandler,w,c
 21670  0038A8  0AF3               	xorlw	243	; case 243
 21671  0038AA  B4D8               	btfsc	status,2,c
 21672  0038AC  D7DE               	goto	i2l7682
 21673  0038AE  0A07               	xorlw	7	; case 244
 21674  0038B0  B4D8               	btfsc	status,2,c
 21675  0038B2  D7DE               	goto	i2l7684
 21676  0038B4  0A0A               	xorlw	10	; case 254
 21677  0038B6  B4D8               	btfsc	status,2,c
 21678  0038B8  D7DE               	goto	i2l7686
 21679  0038BA  0A01               	xorlw	1	; case 255
 21680  0038BC  B4D8               	btfsc	status,2,c
 21681  0038BE  D7DE               	goto	i2l7688
 21682  0038C0  D7C5               	goto	i2l7672
 21683  0038C2                     i2l10738:
 21684                           
 21685                           ; Switch size 1, requested type "space"
 21686                           ; Number of cases is 2, Range of values is 9 to 10
 21687                           ; switch strategies available:
 21688                           ; Name         Instructions Cycles
 21689                           ; simple_byte            7     4 (average)
 21690                           ;	Chosen strategy is simple_byte
 21691  0038C2  502C               	movf	??_inputHandler,w,c
 21692  0038C4  0A09               	xorlw	9	; case 9
 21693  0038C6  B4D8               	btfsc	status,2,c
 21694  0038C8  D7DC               	goto	i2l7690
 21695  0038CA  0A03               	xorlw	3	; case 10
 21696  0038CC  B4D8               	btfsc	status,2,c
 21697  0038CE  D7DC               	goto	i2l7692
 21698  0038D0  D7BD               	goto	i2l7672
 21699  0038D2                     i2l7708:
 21700                           
 21701                           ;UI.c: 425: if(cur_state == 11){
 21702  0038D2  0E0B               	movlw	11
 21703  0038D4  0100               	movlb	0	; () banked
 21704  0038D6  19E6               	xorwf	_cur_state& (0+255),w,b
 21705  0038D8  0100               	movlb	0	; () banked
 21706  0038DA  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21707  0038DC  A4D8               	btfss	status,2,c
 21708  0038DE  D005               	goto	i2l7716
 21709                           
 21710                           ; BSR set to: 0
 21711                           ;UI.c: 426: return 0;
 21712  0038E0  0E00               	movlw	0
 21713  0038E2  6E2B               	movwf	?_inputHandler+1,c
 21714  0038E4  0E00               	movlw	0
 21715  0038E6  6E2A               	movwf	?_inputHandler,c
 21716                           
 21717                           ; BSR set to: 0
 21718  0038E8  0012               	return	
 21719  0038EA                     i2l7716:
 21720                           
 21721                           ; BSR set to: 0
 21722                           ;UI.c: 428: else{
 21723                           ;UI.c: 429: change_state_to_menu_11();
 21724  0038EA  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 21725                           
 21726                           ;UI.c: 430: }
 21727                           ;UI.c: 431: return 0;
 21728  0038EE  0E00               	movlw	0
 21729  0038F0  6E2B               	movwf	?_inputHandler+1,c
 21730  0038F2  0E00               	movlw	0
 21731  0038F4  6E2A               	movwf	?_inputHandler,c
 21732  0038F6  0012               	return	
 21733  0038F8                     i2l7722:
 21734                           
 21735                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21736  0038F8  0E16               	movlw	22
 21737  0038FA  0100               	movlb	0	; () banked
 21738  0038FC  19E6               	xorwf	_cur_state& (0+255),w,b
 21739  0038FE  0100               	movlb	0	; () banked
 21740  003900  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21741  003902  B4D8               	btfsc	status,2,c
 21742  003904  D007               	goto	i2l7726
 21743                           
 21744                           ; BSR set to: 0
 21745  003906  0E0C               	movlw	12
 21746  003908  0100               	movlb	0	; () banked
 21747  00390A  19E6               	xorwf	_cur_state& (0+255),w,b
 21748  00390C  0100               	movlb	0	; () banked
 21749  00390E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21750  003910  A4D8               	btfss	status,2,c
 21751  003912  D005               	goto	i2l7732
 21752  003914                     i2l7726:
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;UI.c: 434: return 0;
 21756  003914  0E00               	movlw	0
 21757  003916  6E2B               	movwf	?_inputHandler+1,c
 21758  003918  0E00               	movlw	0
 21759  00391A  6E2A               	movwf	?_inputHandler,c
 21760                           
 21761                           ; BSR set to: 0
 21762  00391C  0012               	return	
 21763  00391E                     i2l7732:
 21764                           
 21765                           ; BSR set to: 0
 21766                           ;UI.c: 436: else if(cur_state == 23){
 21767  00391E  0E17               	movlw	23
 21768  003920  0100               	movlb	0	; () banked
 21769  003922  19E6               	xorwf	_cur_state& (0+255),w,b
 21770  003924  0100               	movlb	0	; () banked
 21771  003926  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21772  003928  A4D8               	btfss	status,2,c
 21773  00392A  D003               	goto	i2l7736
 21774                           
 21775                           ; BSR set to: 0
 21776                           ;UI.c: 437: change_state_to_menu_22();
 21777  00392C  ECBE  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21778                           
 21779                           ;UI.c: 438: }
 21780  003930  D002               	goto	i2l7738
 21781  003932                     i2l7736:
 21782                           
 21783                           ;UI.c: 439: else{
 21784                           ;UI.c: 440: change_state_to_menu_12();
 21785  003932  ECD6  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21786  003936                     i2l7738:
 21787                           
 21788                           ;UI.c: 441: }
 21789                           ;UI.c: 442: return 0;
 21790  003936  0E00               	movlw	0
 21791  003938  6E2B               	movwf	?_inputHandler+1,c
 21792  00393A  0E00               	movlw	0
 21793  00393C  6E2A               	movwf	?_inputHandler,c
 21794  00393E  0012               	return	
 21795  003940                     i2l7742:
 21796                           
 21797                           ;UI.c: 444: if(cur_state == 23){
 21798  003940  0E17               	movlw	23
 21799  003942  0100               	movlb	0	; () banked
 21800  003944  19E6               	xorwf	_cur_state& (0+255),w,b
 21801  003946  0100               	movlb	0	; () banked
 21802  003948  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21803  00394A  A4D8               	btfss	status,2,c
 21804  00394C  D005               	goto	i2l7750
 21805                           
 21806                           ; BSR set to: 0
 21807                           ;UI.c: 445: return 0;
 21808  00394E  0E00               	movlw	0
 21809  003950  6E2B               	movwf	?_inputHandler+1,c
 21810  003952  0E00               	movlw	0
 21811  003954  6E2A               	movwf	?_inputHandler,c
 21812                           
 21813                           ; BSR set to: 0
 21814  003956  0012               	return	
 21815  003958                     i2l7750:
 21816                           
 21817                           ; BSR set to: 0
 21818                           ;UI.c: 447: else{
 21819                           ;UI.c: 448: change_state_to_menu_23();
 21820  003958  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 21821                           
 21822                           ;UI.c: 449: }
 21823                           ;UI.c: 450: return 0;
 21824  00395C  0E00               	movlw	0
 21825  00395E  6E2B               	movwf	?_inputHandler+1,c
 21826  003960  0E00               	movlw	0
 21827  003962  6E2A               	movwf	?_inputHandler,c
 21828  003964  0012               	return	
 21829  003966                     i2l7756:
 21830                           
 21831                           ;UI.c: 453: up = 1;
 21832  003966  0E00               	movlw	0
 21833  003968  6E76               	movwf	_up+1,c
 21834  00396A  0E01               	movlw	1
 21835  00396C  6E75               	movwf	_up,c
 21836                           
 21837                           ;UI.c: 454: return 1;
 21838  00396E  0E00               	movlw	0
 21839  003970  6E2B               	movwf	?_inputHandler+1,c
 21840  003972  0E01               	movlw	1
 21841  003974  6E2A               	movwf	?_inputHandler,c
 21842  003976  0012               	return	
 21843  003978                     i2l7760:
 21844                           
 21845                           ;UI.c: 456: down = 1;
 21846  003978  0E00               	movlw	0
 21847  00397A  6E66               	movwf	_down+1,c
 21848  00397C  0E01               	movlw	1
 21849  00397E  6E65               	movwf	_down,c
 21850                           
 21851                           ;UI.c: 457: return 1;
 21852  003980  0E00               	movlw	0
 21853  003982  6E2B               	movwf	?_inputHandler+1,c
 21854  003984  0E01               	movlw	1
 21855  003986  6E2A               	movwf	?_inputHandler,c
 21856  003988  0012               	return	
 21857  00398A                     i2l7764:
 21858                           
 21859                           ;UI.c: 459: enter = 1;
 21860  00398A  0E00               	movlw	0
 21861  00398C  6E68               	movwf	_enter+1,c
 21862  00398E  0E01               	movlw	1
 21863  003990  6E67               	movwf	_enter,c
 21864                           
 21865                           ;UI.c: 460: return 1;
 21866  003992  0E00               	movlw	0
 21867  003994  6E2B               	movwf	?_inputHandler+1,c
 21868  003996  0E01               	movlw	1
 21869  003998  6E2A               	movwf	?_inputHandler,c
 21870  00399A  0012               	return	
 21871  00399C                     i2l7768:
 21872                           
 21873                           ;UI.c: 462: back = 1;
 21874  00399C  0E00               	movlw	0
 21875  00399E  6E64               	movwf	_back+1,c
 21876  0039A0  0E01               	movlw	1
 21877  0039A2  6E63               	movwf	_back,c
 21878                           
 21879                           ;UI.c: 463: return 1;
 21880  0039A4  0E00               	movlw	0
 21881  0039A6  6E2B               	movwf	?_inputHandler+1,c
 21882  0039A8  0E01               	movlw	1
 21883  0039AA  6E2A               	movwf	?_inputHandler,c
 21884  0039AC  0012               	return	
 21885  0039AE                     i2l7772:
 21886                           
 21887                           ;UI.c: 466: return 1;
 21888  0039AE  0E00               	movlw	0
 21889  0039B0  6E2B               	movwf	?_inputHandler+1,c
 21890  0039B2  0E01               	movlw	1
 21891  0039B4  6E2A               	movwf	?_inputHandler,c
 21892                           
 21893                           ;UI.c: 467: }
 21894  0039B6  0012               	return	
 21895  0039B8                     i2l7778:
 21896  0039B8  507D               	movf	_input,w,c	;volatile
 21897                           
 21898                           ; Switch size 1, requested type "space"
 21899                           ; Number of cases is 7, Range of values is 49 to 68
 21900                           ; switch strategies available:
 21901                           ; Name         Instructions Cycles
 21902                           ; simple_byte           22    12 (average)
 21903                           ;	Chosen strategy is simple_byte
 21904  0039BA  0A31               	xorlw	49	; case 49
 21905  0039BC  B4D8               	btfsc	status,2,c
 21906  0039BE  D789               	goto	i2l7708
 21907  0039C0  0A03               	xorlw	3	; case 50
 21908  0039C2  B4D8               	btfsc	status,2,c
 21909  0039C4  D799               	goto	i2l7722
 21910  0039C6  0A01               	xorlw	1	; case 51
 21911  0039C8  B4D8               	btfsc	status,2,c
 21912  0039CA  D7BA               	goto	i2l7742
 21913  0039CC  0A72               	xorlw	114	; case 65
 21914  0039CE  B4D8               	btfsc	status,2,c
 21915  0039D0  D7CA               	goto	i2l7756
 21916  0039D2  0A03               	xorlw	3	; case 66
 21917  0039D4  B4D8               	btfsc	status,2,c
 21918  0039D6  D7D0               	goto	i2l7760
 21919  0039D8  0A01               	xorlw	1	; case 67
 21920  0039DA  B4D8               	btfsc	status,2,c
 21921  0039DC  D7D6               	goto	i2l7764
 21922  0039DE  0A07               	xorlw	7	; case 68
 21923  0039E0  B4D8               	btfsc	status,2,c
 21924  0039E2  D7DC               	goto	i2l7768
 21925  0039E4  D7E4               	goto	i2l7772
 21926  0039E6                     __end_of_inputHandler:
 21927                           	opt stack 0
 21928                           pclatu	equ	0xFFB
 21929                           pclath	equ	0xFFA
 21930                           tblptru	equ	0xFF8
 21931                           tblptrh	equ	0xFF7
 21932                           tblptrl	equ	0xFF6
 21933                           tablat	equ	0xFF5
 21934                           prodh	equ	0xFF4
 21935                           prodl	equ	0xFF3
 21936                           intcon	equ	0xFF2
 21937                           intcon2	equ	0xFF1
 21938                           intcon3	equ	0xFF0
 21939                           indf0	equ	0xFEF
 21940                           postinc0	equ	0xFEE
 21941                           fsr0h	equ	0xFEA
 21942                           fsr0l	equ	0xFE9
 21943                           wreg	equ	0xFE8
 21944                           postdec1	equ	0xFE5
 21945                           fsr1h	equ	0xFE2
 21946                           fsr1l	equ	0xFE1
 21947                           indf2	equ	0xFDF
 21948                           postinc2	equ	0xFDE
 21949                           postdec2	equ	0xFDD
 21950                           fsr2h	equ	0xFDA
 21951                           fsr2l	equ	0xFD9
 21952                           status	equ	0xFD8
 21953                           
 21954 ;; *************** function i2_change_state_to_menu_22 *****************
 21955 ;; Defined at:
 21956 ;;		line 501 in file "UI.c"
 21957 ;; Parameters:    Size  Location     Type
 21958 ;;		None
 21959 ;; Auto vars:     Size  Location     Type
 21960 ;;		None
 21961 ;; Return value:  Size  Location     Type
 21962 ;;                  1    wreg      void 
 21963 ;; Registers used:
 21964 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21965 ;; Tracked objects:
 21966 ;;		On entry : 0/0
 21967 ;;		On exit  : 0/0
 21968 ;;		Unchanged: 0/0
 21969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21974 ;;Total ram usage:        0 bytes
 21975 ;; Hardware stack levels used:    1
 21976 ;; Hardware stack levels required when called:    3
 21977 ;; This function calls:
 21978 ;;		i2_lcdInst
 21979 ;;		i2_printf
 21980 ;; This function is called by:
 21981 ;;		_updateMenu
 21982 ;;		_inputHandler
 21983 ;; This function uses a non-reentrant model
 21984 ;;
 21985                           
 21986                           	psect	text72
 21987  00577C                     __ptext72:
 21988                           	opt stack 0
 21989  00577C                     i2_change_state_to_menu_22:
 21990                           	opt stack 19
 21991                           
 21992                           ;UI.c: 502: cur_state = 22;
 21993                           
 21994                           ;incstack = 0
 21995  00577C  0E00               	movlw	0
 21996  00577E  0100               	movlb	0	; () banked
 21997  005780  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21998  005782  0E16               	movlw	22
 21999  005784  6FE6               	movwf	_cur_state& (0+255),b
 22000                           
 22001                           ; BSR set to: 0
 22002                           ;UI.c: 504: lcdInst(0b10000000);;
 22003  005786  0E80               	movlw	128
 22004  005788  ECFD  F02D         	call	i2_lcdInst
 22005                           
 22006                           ;UI.c: 505: printf("2. SORT        <");
 22007  00578C  0EB7               	movlw	low STR_34
 22008  00578E  6E0D               	movwf	i2printf@f,c
 22009  005790  0EFD               	movlw	high STR_34
 22010  005792  6E0E               	movwf	i2printf@f+1,c
 22011  005794  EC00  F012         	call	i2_printf	;wreg free
 22012                           
 22013                           ;UI.c: 506: lcdInst(0b11000000);;
 22014  005798  0EC0               	movlw	192
 22015  00579A  ECFD  F02D         	call	i2_lcdInst
 22016                           
 22017                           ;UI.c: 507: printf("3. LOGS         ");
 22018  00579E  0EFC               	movlw	low STR_36
 22019  0057A0  6E0D               	movwf	i2printf@f,c
 22020  0057A2  0EFC               	movlw	high STR_36
 22021  0057A4  6E0E               	movwf	i2printf@f+1,c
 22022  0057A6  EC00  F012         	call	i2_printf	;wreg free
 22023  0057AA  0012               	return		;funcret
 22024  0057AC                     __end_ofi2_change_state_to_menu_22:
 22025                           	opt stack 0
 22026                           pclatu	equ	0xFFB
 22027                           pclath	equ	0xFFA
 22028                           tblptru	equ	0xFF8
 22029                           tblptrh	equ	0xFF7
 22030                           tblptrl	equ	0xFF6
 22031                           tablat	equ	0xFF5
 22032                           prodh	equ	0xFF4
 22033                           prodl	equ	0xFF3
 22034                           intcon	equ	0xFF2
 22035                           intcon2	equ	0xFF1
 22036                           intcon3	equ	0xFF0
 22037                           indf0	equ	0xFEF
 22038                           postinc0	equ	0xFEE
 22039                           fsr0h	equ	0xFEA
 22040                           fsr0l	equ	0xFE9
 22041                           wreg	equ	0xFE8
 22042                           postdec1	equ	0xFE5
 22043                           fsr1h	equ	0xFE2
 22044                           fsr1l	equ	0xFE1
 22045                           indf2	equ	0xFDF
 22046                           postinc2	equ	0xFDE
 22047                           postdec2	equ	0xFDD
 22048                           fsr2h	equ	0xFDA
 22049                           fsr2l	equ	0xFD9
 22050                           status	equ	0xFD8
 22051                           
 22052 ;; *************** function i2_change_state_to_menu_12 *****************
 22053 ;; Defined at:
 22054 ;;		line 493 in file "UI.c"
 22055 ;; Parameters:    Size  Location     Type
 22056 ;;		None
 22057 ;; Auto vars:     Size  Location     Type
 22058 ;;		None
 22059 ;; Return value:  Size  Location     Type
 22060 ;;                  1    wreg      void 
 22061 ;; Registers used:
 22062 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22063 ;; Tracked objects:
 22064 ;;		On entry : 0/0
 22065 ;;		On exit  : 0/0
 22066 ;;		Unchanged: 0/0
 22067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22072 ;;Total ram usage:        0 bytes
 22073 ;; Hardware stack levels used:    1
 22074 ;; Hardware stack levels required when called:    3
 22075 ;; This function calls:
 22076 ;;		i2_lcdInst
 22077 ;;		i2_printf
 22078 ;; This function is called by:
 22079 ;;		_updateMenu
 22080 ;;		_inputHandler
 22081 ;; This function uses a non-reentrant model
 22082 ;;
 22083                           
 22084                           	psect	text73
 22085  0057AC                     __ptext73:
 22086                           	opt stack 0
 22087  0057AC                     i2_change_state_to_menu_12:
 22088                           	opt stack 19
 22089                           
 22090                           ;UI.c: 494: cur_state = 12;
 22091                           
 22092                           ;incstack = 0
 22093  0057AC  0E00               	movlw	0
 22094  0057AE  0100               	movlb	0	; () banked
 22095  0057B0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22096  0057B2  0E0C               	movlw	12
 22097  0057B4  6FE6               	movwf	_cur_state& (0+255),b
 22098                           
 22099                           ; BSR set to: 0
 22100                           ;UI.c: 496: lcdInst(0b10000000);;
 22101  0057B6  0E80               	movlw	128
 22102  0057B8  ECFD  F02D         	call	i2_lcdInst
 22103                           
 22104                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22105  0057BC  0E1E               	movlw	low STR_33
 22106  0057BE  6E0D               	movwf	i2printf@f,c
 22107  0057C0  0EFD               	movlw	high STR_33
 22108  0057C2  6E0E               	movwf	i2printf@f+1,c
 22109  0057C4  EC00  F012         	call	i2_printf	;wreg free
 22110                           
 22111                           ;UI.c: 498: lcdInst(0b11000000);;
 22112  0057C8  0EC0               	movlw	192
 22113  0057CA  ECFD  F02D         	call	i2_lcdInst
 22114                           
 22115                           ;UI.c: 499: printf("2. SORT        <");
 22116  0057CE  0EB7               	movlw	low STR_34
 22117  0057D0  6E0D               	movwf	i2printf@f,c
 22118  0057D2  0EFD               	movlw	high STR_34
 22119  0057D4  6E0E               	movwf	i2printf@f+1,c
 22120  0057D6  EC00  F012         	call	i2_printf	;wreg free
 22121  0057DA  0012               	return		;funcret
 22122  0057DC                     __end_ofi2_change_state_to_menu_12:
 22123                           	opt stack 0
 22124                           pclatu	equ	0xFFB
 22125                           pclath	equ	0xFFA
 22126                           tblptru	equ	0xFF8
 22127                           tblptrh	equ	0xFF7
 22128                           tblptrl	equ	0xFF6
 22129                           tablat	equ	0xFF5
 22130                           prodh	equ	0xFF4
 22131                           prodl	equ	0xFF3
 22132                           intcon	equ	0xFF2
 22133                           intcon2	equ	0xFF1
 22134                           intcon3	equ	0xFF0
 22135                           indf0	equ	0xFEF
 22136                           postinc0	equ	0xFEE
 22137                           fsr0h	equ	0xFEA
 22138                           fsr0l	equ	0xFE9
 22139                           wreg	equ	0xFE8
 22140                           postdec1	equ	0xFE5
 22141                           fsr1h	equ	0xFE2
 22142                           fsr1l	equ	0xFE1
 22143                           indf2	equ	0xFDF
 22144                           postinc2	equ	0xFDE
 22145                           postdec2	equ	0xFDD
 22146                           fsr2h	equ	0xFDA
 22147                           fsr2l	equ	0xFD9
 22148                           status	equ	0xFD8
 22149                           
 22150 ;; *************** function _change_state_to_menu_23 *****************
 22151 ;; Defined at:
 22152 ;;		line 509 in file "UI.c"
 22153 ;; Parameters:    Size  Location     Type
 22154 ;;		None
 22155 ;; Auto vars:     Size  Location     Type
 22156 ;;		None
 22157 ;; Return value:  Size  Location     Type
 22158 ;;                  1    wreg      void 
 22159 ;; Registers used:
 22160 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22161 ;; Tracked objects:
 22162 ;;		On entry : 0/0
 22163 ;;		On exit  : 0/0
 22164 ;;		Unchanged: 0/0
 22165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22170 ;;Total ram usage:        0 bytes
 22171 ;; Hardware stack levels used:    1
 22172 ;; Hardware stack levels required when called:    3
 22173 ;; This function calls:
 22174 ;;		i2_lcdInst
 22175 ;;		i2_printf
 22176 ;; This function is called by:
 22177 ;;		_updateMenu
 22178 ;;		_inputHandler
 22179 ;; This function uses a non-reentrant model
 22180 ;;
 22181                           
 22182                           	psect	text74
 22183  0057DC                     __ptext74:
 22184                           	opt stack 0
 22185  0057DC                     _change_state_to_menu_23:
 22186                           	opt stack 18
 22187                           
 22188                           ;UI.c: 510: cur_state = 23;
 22189                           
 22190                           ;incstack = 0
 22191  0057DC  0E00               	movlw	0
 22192  0057DE  0100               	movlb	0	; () banked
 22193  0057E0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22194  0057E2  0E17               	movlw	23
 22195  0057E4  6FE6               	movwf	_cur_state& (0+255),b
 22196                           
 22197                           ; BSR set to: 0
 22198                           ;UI.c: 512: lcdInst(0b10000000);;
 22199  0057E6  0E80               	movlw	128
 22200  0057E8  ECFD  F02D         	call	i2_lcdInst
 22201                           
 22202                           ;UI.c: 513: printf("2. SORT         ");
 22203  0057EC  0E0D               	movlw	low STR_32
 22204  0057EE  6E0D               	movwf	i2printf@f,c
 22205  0057F0  0EFD               	movlw	high STR_32
 22206  0057F2  6E0E               	movwf	i2printf@f+1,c
 22207  0057F4  EC00  F012         	call	i2_printf	;wreg free
 22208                           
 22209                           ;UI.c: 514: lcdInst(0b11000000);;
 22210  0057F8  0EC0               	movlw	192
 22211  0057FA  ECFD  F02D         	call	i2_lcdInst
 22212                           
 22213                           ;UI.c: 515: printf("3. LOGS        <");
 22214  0057FE  0EA6               	movlw	low STR_38
 22215  005800  6E0D               	movwf	i2printf@f,c
 22216  005802  0EFD               	movlw	high STR_38
 22217  005804  6E0E               	movwf	i2printf@f+1,c
 22218  005806  EC00  F012         	call	i2_printf	;wreg free
 22219  00580A  0012               	return		;funcret
 22220  00580C                     __end_of_change_state_to_menu_23:
 22221                           	opt stack 0
 22222                           pclatu	equ	0xFFB
 22223                           pclath	equ	0xFFA
 22224                           tblptru	equ	0xFF8
 22225                           tblptrh	equ	0xFF7
 22226                           tblptrl	equ	0xFF6
 22227                           tablat	equ	0xFF5
 22228                           prodh	equ	0xFF4
 22229                           prodl	equ	0xFF3
 22230                           intcon	equ	0xFF2
 22231                           intcon2	equ	0xFF1
 22232                           intcon3	equ	0xFF0
 22233                           indf0	equ	0xFEF
 22234                           postinc0	equ	0xFEE
 22235                           fsr0h	equ	0xFEA
 22236                           fsr0l	equ	0xFE9
 22237                           wreg	equ	0xFE8
 22238                           postdec1	equ	0xFE5
 22239                           fsr1h	equ	0xFE2
 22240                           fsr1l	equ	0xFE1
 22241                           indf2	equ	0xFDF
 22242                           postinc2	equ	0xFDE
 22243                           postdec2	equ	0xFDD
 22244                           fsr2h	equ	0xFDA
 22245                           fsr2l	equ	0xFD9
 22246                           status	equ	0xFD8
 22247                           
 22248 ;; *************** function _change_state_to_menu_11 *****************
 22249 ;; Defined at:
 22250 ;;		line 485 in file "UI.c"
 22251 ;; Parameters:    Size  Location     Type
 22252 ;;		None
 22253 ;; Auto vars:     Size  Location     Type
 22254 ;;		None
 22255 ;; Return value:  Size  Location     Type
 22256 ;;                  1    wreg      void 
 22257 ;; Registers used:
 22258 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22259 ;; Tracked objects:
 22260 ;;		On entry : 0/0
 22261 ;;		On exit  : 0/0
 22262 ;;		Unchanged: 0/0
 22263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22268 ;;Total ram usage:        0 bytes
 22269 ;; Hardware stack levels used:    1
 22270 ;; Hardware stack levels required when called:    3
 22271 ;; This function calls:
 22272 ;;		i2_lcdInst
 22273 ;;		i2_printf
 22274 ;; This function is called by:
 22275 ;;		_updateMenu
 22276 ;;		_inputHandler
 22277 ;; This function uses a non-reentrant model
 22278 ;;
 22279                           
 22280                           	psect	text75
 22281  00580C                     __ptext75:
 22282                           	opt stack 0
 22283  00580C                     _change_state_to_menu_11:
 22284                           	opt stack 18
 22285                           
 22286                           ;UI.c: 486: cur_state = 11;
 22287                           
 22288                           ;incstack = 0
 22289  00580C  0E00               	movlw	0
 22290  00580E  0100               	movlb	0	; () banked
 22291  005810  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22292  005812  0E0B               	movlw	11
 22293  005814  6FE6               	movwf	_cur_state& (0+255),b
 22294                           
 22295                           ; BSR set to: 0
 22296                           ;UI.c: 488: lcdInst(0b10000000);;
 22297  005816  0E80               	movlw	128
 22298  005818  ECFD  F02D         	call	i2_lcdInst
 22299                           
 22300                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22301  00581C  0EC8               	movlw	low STR_31
 22302  00581E  6E0D               	movwf	i2printf@f,c
 22303  005820  0EFD               	movlw	high STR_31
 22304  005822  6E0E               	movwf	i2printf@f+1,c
 22305  005824  EC00  F012         	call	i2_printf	;wreg free
 22306                           
 22307                           ;UI.c: 490: lcdInst(0b11000000);;
 22308  005828  0EC0               	movlw	192
 22309  00582A  ECFD  F02D         	call	i2_lcdInst
 22310                           
 22311                           ;UI.c: 491: printf("2. SORT         ");
 22312  00582E  0E0D               	movlw	low STR_32
 22313  005830  6E0D               	movwf	i2printf@f,c
 22314  005832  0EFD               	movlw	high STR_32
 22315  005834  6E0E               	movwf	i2printf@f+1,c
 22316  005836  EC00  F012         	call	i2_printf	;wreg free
 22317  00583A  0012               	return		;funcret
 22318  00583C                     __end_of_change_state_to_menu_11:
 22319                           	opt stack 0
 22320                           pclatu	equ	0xFFB
 22321                           pclath	equ	0xFFA
 22322                           tblptru	equ	0xFF8
 22323                           tblptrh	equ	0xFF7
 22324                           tblptrl	equ	0xFF6
 22325                           tablat	equ	0xFF5
 22326                           prodh	equ	0xFF4
 22327                           prodl	equ	0xFF3
 22328                           intcon	equ	0xFF2
 22329                           intcon2	equ	0xFF1
 22330                           intcon3	equ	0xFF0
 22331                           indf0	equ	0xFEF
 22332                           postinc0	equ	0xFEE
 22333                           fsr0h	equ	0xFEA
 22334                           fsr0l	equ	0xFE9
 22335                           wreg	equ	0xFE8
 22336                           postdec1	equ	0xFE5
 22337                           fsr1h	equ	0xFE2
 22338                           fsr1l	equ	0xFE1
 22339                           indf2	equ	0xFDF
 22340                           postinc2	equ	0xFDE
 22341                           postdec2	equ	0xFDD
 22342                           fsr2h	equ	0xFDA
 22343                           fsr2l	equ	0xFD9
 22344                           status	equ	0xFD8
 22345                           
 22346 ;; *************** function _change_state_to_logs_34 *****************
 22347 ;; Defined at:
 22348 ;;		line 552 in file "UI.c"
 22349 ;; Parameters:    Size  Location     Type
 22350 ;;		None
 22351 ;; Auto vars:     Size  Location     Type
 22352 ;;		None
 22353 ;; Return value:  Size  Location     Type
 22354 ;;                  1    wreg      void 
 22355 ;; Registers used:
 22356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22357 ;; Tracked objects:
 22358 ;;		On entry : 0/0
 22359 ;;		On exit  : 0/0
 22360 ;;		Unchanged: 0/0
 22361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22366 ;;Total ram usage:        0 bytes
 22367 ;; Hardware stack levels used:    1
 22368 ;; Hardware stack levels required when called:    3
 22369 ;; This function calls:
 22370 ;;		i2_lcdInst
 22371 ;;		i2_printf
 22372 ;; This function is called by:
 22373 ;;		_updateMenu
 22374 ;;		_inputHandler
 22375 ;; This function uses a non-reentrant model
 22376 ;;
 22377                           
 22378                           	psect	text76
 22379  00583C                     __ptext76:
 22380                           	opt stack 0
 22381  00583C                     _change_state_to_logs_34:
 22382                           	opt stack 18
 22383                           
 22384                           ;UI.c: 553: cur_state = 1034;
 22385                           
 22386                           ;incstack = 0
 22387  00583C  0E04               	movlw	4
 22388  00583E  0100               	movlb	0	; () banked
 22389  005840  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22390  005842  0E0A               	movlw	10
 22391  005844  6FE6               	movwf	_cur_state& (0+255),b
 22392                           
 22393                           ; BSR set to: 0
 22394                           ;UI.c: 554: lcdInst(0b10000000);;
 22395  005846  0E80               	movlw	128
 22396  005848  ECFD  F02D         	call	i2_lcdInst
 22397                           
 22398                           ;UI.c: 555: printf("LOG 3           ");
 22399  00584C  0EDA               	movlw	low STR_44
 22400  00584E  6E0D               	movwf	i2printf@f,c
 22401  005850  0EFC               	movlw	high STR_44
 22402  005852  6E0E               	movwf	i2printf@f+1,c
 22403  005854  EC00  F012         	call	i2_printf	;wreg free
 22404                           
 22405                           ;UI.c: 556: lcdInst(0b11000000);;
 22406  005858  0EC0               	movlw	192
 22407  00585A  ECFD  F02D         	call	i2_lcdInst
 22408                           
 22409                           ;UI.c: 557: printf("LOG 4          <");
 22410  00585E  0E95               	movlw	low STR_50
 22411  005860  6E0D               	movwf	i2printf@f,c
 22412  005862  0EFD               	movlw	high STR_50
 22413  005864  6E0E               	movwf	i2printf@f+1,c
 22414  005866  EC00  F012         	call	i2_printf	;wreg free
 22415  00586A  0012               	return		;funcret
 22416  00586C                     __end_of_change_state_to_logs_34:
 22417                           	opt stack 0
 22418                           pclatu	equ	0xFFB
 22419                           pclath	equ	0xFFA
 22420                           tblptru	equ	0xFF8
 22421                           tblptrh	equ	0xFF7
 22422                           tblptrl	equ	0xFF6
 22423                           tablat	equ	0xFF5
 22424                           prodh	equ	0xFF4
 22425                           prodl	equ	0xFF3
 22426                           intcon	equ	0xFF2
 22427                           intcon2	equ	0xFF1
 22428                           intcon3	equ	0xFF0
 22429                           indf0	equ	0xFEF
 22430                           postinc0	equ	0xFEE
 22431                           fsr0h	equ	0xFEA
 22432                           fsr0l	equ	0xFE9
 22433                           wreg	equ	0xFE8
 22434                           postdec1	equ	0xFE5
 22435                           fsr1h	equ	0xFE2
 22436                           fsr1l	equ	0xFE1
 22437                           indf2	equ	0xFDF
 22438                           postinc2	equ	0xFDE
 22439                           postdec2	equ	0xFDD
 22440                           fsr2h	equ	0xFDA
 22441                           fsr2l	equ	0xFD9
 22442                           status	equ	0xFD8
 22443                           
 22444 ;; *************** function _change_state_to_logs_33 *****************
 22445 ;; Defined at:
 22446 ;;		line 545 in file "UI.c"
 22447 ;; Parameters:    Size  Location     Type
 22448 ;;		None
 22449 ;; Auto vars:     Size  Location     Type
 22450 ;;		None
 22451 ;; Return value:  Size  Location     Type
 22452 ;;                  1    wreg      void 
 22453 ;; Registers used:
 22454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22455 ;; Tracked objects:
 22456 ;;		On entry : 0/0
 22457 ;;		On exit  : 0/0
 22458 ;;		Unchanged: 0/0
 22459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22464 ;;Total ram usage:        0 bytes
 22465 ;; Hardware stack levels used:    1
 22466 ;; Hardware stack levels required when called:    3
 22467 ;; This function calls:
 22468 ;;		i2_lcdInst
 22469 ;;		i2_printf
 22470 ;; This function is called by:
 22471 ;;		_updateMenu
 22472 ;;		_inputHandler
 22473 ;; This function uses a non-reentrant model
 22474 ;;
 22475                           
 22476                           	psect	text77
 22477  00586C                     __ptext77:
 22478                           	opt stack 0
 22479  00586C                     _change_state_to_logs_33:
 22480                           	opt stack 18
 22481                           
 22482                           ;UI.c: 546: cur_state = 1033;
 22483                           
 22484                           ;incstack = 0
 22485  00586C  0E04               	movlw	4
 22486  00586E  0100               	movlb	0	; () banked
 22487  005870  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22488  005872  0E09               	movlw	9
 22489  005874  6FE6               	movwf	_cur_state& (0+255),b
 22490                           
 22491                           ; BSR set to: 0
 22492                           ;UI.c: 547: lcdInst(0b10000000);;
 22493  005876  0E80               	movlw	128
 22494  005878  ECFD  F02D         	call	i2_lcdInst
 22495                           
 22496                           ;UI.c: 548: printf("LOG 3          <");
 22497  00587C  0E84               	movlw	low STR_46
 22498  00587E  6E0D               	movwf	i2printf@f,c
 22499  005880  0EFD               	movlw	high STR_46
 22500  005882  6E0E               	movwf	i2printf@f+1,c
 22501  005884  EC00  F012         	call	i2_printf	;wreg free
 22502                           
 22503                           ;UI.c: 549: lcdInst(0b11000000);;
 22504  005888  0EC0               	movlw	192
 22505  00588A  ECFD  F02D         	call	i2_lcdInst
 22506                           
 22507                           ;UI.c: 550: printf("LOG 4           ");
 22508  00588E  0EEB               	movlw	low STR_48
 22509  005890  6E0D               	movwf	i2printf@f,c
 22510  005892  0EFC               	movlw	high STR_48
 22511  005894  6E0E               	movwf	i2printf@f+1,c
 22512  005896  EC00  F012         	call	i2_printf	;wreg free
 22513  00589A  0012               	return		;funcret
 22514  00589C                     __end_of_change_state_to_logs_33:
 22515                           	opt stack 0
 22516                           pclatu	equ	0xFFB
 22517                           pclath	equ	0xFFA
 22518                           tblptru	equ	0xFF8
 22519                           tblptrh	equ	0xFF7
 22520                           tblptrl	equ	0xFF6
 22521                           tablat	equ	0xFF5
 22522                           prodh	equ	0xFF4
 22523                           prodl	equ	0xFF3
 22524                           intcon	equ	0xFF2
 22525                           intcon2	equ	0xFF1
 22526                           intcon3	equ	0xFF0
 22527                           indf0	equ	0xFEF
 22528                           postinc0	equ	0xFEE
 22529                           fsr0h	equ	0xFEA
 22530                           fsr0l	equ	0xFE9
 22531                           wreg	equ	0xFE8
 22532                           postdec1	equ	0xFE5
 22533                           fsr1h	equ	0xFE2
 22534                           fsr1l	equ	0xFE1
 22535                           indf2	equ	0xFDF
 22536                           postinc2	equ	0xFDE
 22537                           postdec2	equ	0xFDD
 22538                           fsr2h	equ	0xFDA
 22539                           fsr2l	equ	0xFD9
 22540                           status	equ	0xFD8
 22541                           
 22542 ;; *************** function _change_state_to_logs_23 *****************
 22543 ;; Defined at:
 22544 ;;		line 538 in file "UI.c"
 22545 ;; Parameters:    Size  Location     Type
 22546 ;;		None
 22547 ;; Auto vars:     Size  Location     Type
 22548 ;;		None
 22549 ;; Return value:  Size  Location     Type
 22550 ;;                  1    wreg      void 
 22551 ;; Registers used:
 22552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22553 ;; Tracked objects:
 22554 ;;		On entry : 0/0
 22555 ;;		On exit  : 0/0
 22556 ;;		Unchanged: 0/0
 22557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22562 ;;Total ram usage:        0 bytes
 22563 ;; Hardware stack levels used:    1
 22564 ;; Hardware stack levels required when called:    3
 22565 ;; This function calls:
 22566 ;;		i2_lcdInst
 22567 ;;		i2_printf
 22568 ;; This function is called by:
 22569 ;;		_updateMenu
 22570 ;;		_inputHandler
 22571 ;; This function uses a non-reentrant model
 22572 ;;
 22573                           
 22574                           	psect	text78
 22575  00595A                     __ptext78:
 22576                           	opt stack 0
 22577  00595A                     _change_state_to_logs_23:
 22578                           	opt stack 18
 22579                           
 22580                           ;UI.c: 539: cur_state = 1023;
 22581                           
 22582                           ;incstack = 0
 22583  00595A  0E03               	movlw	3
 22584  00595C  0100               	movlb	0	; () banked
 22585  00595E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22586  005960  69E6               	setf	_cur_state& (0+255),b
 22587                           
 22588                           ; BSR set to: 0
 22589                           ;UI.c: 540: lcdInst(0b10000000);;
 22590  005962  0E80               	movlw	128
 22591  005964  ECFD  F02D         	call	i2_lcdInst
 22592                           
 22593                           ;UI.c: 541: printf("LOG 2           ");
 22594  005968  0EC9               	movlw	low STR_40
 22595  00596A  6E0D               	movwf	i2printf@f,c
 22596  00596C  0EFC               	movlw	high STR_40
 22597  00596E  6E0E               	movwf	i2printf@f+1,c
 22598  005970  EC00  F012         	call	i2_printf	;wreg free
 22599                           
 22600                           ;UI.c: 542: lcdInst(0b11000000);;
 22601  005974  0EC0               	movlw	192
 22602  005976  ECFD  F02D         	call	i2_lcdInst
 22603                           
 22604                           ;UI.c: 543: printf("LOG 3          <");
 22605  00597A  0E84               	movlw	low STR_46
 22606  00597C  6E0D               	movwf	i2printf@f,c
 22607  00597E  0EFD               	movlw	high STR_46
 22608  005980  6E0E               	movwf	i2printf@f+1,c
 22609  005982  EC00  F012         	call	i2_printf	;wreg free
 22610  005986  0012               	return		;funcret
 22611  005988                     __end_of_change_state_to_logs_23:
 22612                           	opt stack 0
 22613                           pclatu	equ	0xFFB
 22614                           pclath	equ	0xFFA
 22615                           tblptru	equ	0xFF8
 22616                           tblptrh	equ	0xFF7
 22617                           tblptrl	equ	0xFF6
 22618                           tablat	equ	0xFF5
 22619                           prodh	equ	0xFF4
 22620                           prodl	equ	0xFF3
 22621                           intcon	equ	0xFF2
 22622                           intcon2	equ	0xFF1
 22623                           intcon3	equ	0xFF0
 22624                           indf0	equ	0xFEF
 22625                           postinc0	equ	0xFEE
 22626                           fsr0h	equ	0xFEA
 22627                           fsr0l	equ	0xFE9
 22628                           wreg	equ	0xFE8
 22629                           postdec1	equ	0xFE5
 22630                           fsr1h	equ	0xFE2
 22631                           fsr1l	equ	0xFE1
 22632                           indf2	equ	0xFDF
 22633                           postinc2	equ	0xFDE
 22634                           postdec2	equ	0xFDD
 22635                           fsr2h	equ	0xFDA
 22636                           fsr2l	equ	0xFD9
 22637                           status	equ	0xFD8
 22638                           
 22639 ;; *************** function _change_state_to_logs_22 *****************
 22640 ;; Defined at:
 22641 ;;		line 531 in file "UI.c"
 22642 ;; Parameters:    Size  Location     Type
 22643 ;;		None
 22644 ;; Auto vars:     Size  Location     Type
 22645 ;;		None
 22646 ;; Return value:  Size  Location     Type
 22647 ;;                  1    wreg      void 
 22648 ;; Registers used:
 22649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22650 ;; Tracked objects:
 22651 ;;		On entry : 0/0
 22652 ;;		On exit  : 0/0
 22653 ;;		Unchanged: 0/0
 22654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22659 ;;Total ram usage:        0 bytes
 22660 ;; Hardware stack levels used:    1
 22661 ;; Hardware stack levels required when called:    3
 22662 ;; This function calls:
 22663 ;;		i2_lcdInst
 22664 ;;		i2_printf
 22665 ;; This function is called by:
 22666 ;;		_updateMenu
 22667 ;;		_inputHandler
 22668 ;; This function uses a non-reentrant model
 22669 ;;
 22670                           
 22671                           	psect	text79
 22672  00589C                     __ptext79:
 22673                           	opt stack 0
 22674  00589C                     _change_state_to_logs_22:
 22675                           	opt stack 18
 22676                           
 22677                           ;UI.c: 532: cur_state = 1022;
 22678                           
 22679                           ;incstack = 0
 22680  00589C  0E03               	movlw	3
 22681  00589E  0100               	movlb	0	; () banked
 22682  0058A0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22683  0058A2  0EFE               	movlw	254
 22684  0058A4  6FE6               	movwf	_cur_state& (0+255),b
 22685                           
 22686                           ; BSR set to: 0
 22687                           ;UI.c: 533: lcdInst(0b10000000);;
 22688  0058A6  0E80               	movlw	128
 22689  0058A8  ECFD  F02D         	call	i2_lcdInst
 22690                           
 22691                           ;UI.c: 534: printf("LOG 2          <");
 22692  0058AC  0E73               	movlw	low STR_42
 22693  0058AE  6E0D               	movwf	i2printf@f,c
 22694  0058B0  0EFD               	movlw	high STR_42
 22695  0058B2  6E0E               	movwf	i2printf@f+1,c
 22696  0058B4  EC00  F012         	call	i2_printf	;wreg free
 22697                           
 22698                           ;UI.c: 535: lcdInst(0b11000000);;
 22699  0058B8  0EC0               	movlw	192
 22700  0058BA  ECFD  F02D         	call	i2_lcdInst
 22701                           
 22702                           ;UI.c: 536: printf("LOG 3           ");
 22703  0058BE  0EDA               	movlw	low STR_44
 22704  0058C0  6E0D               	movwf	i2printf@f,c
 22705  0058C2  0EFC               	movlw	high STR_44
 22706  0058C4  6E0E               	movwf	i2printf@f+1,c
 22707  0058C6  EC00  F012         	call	i2_printf	;wreg free
 22708  0058CA  0012               	return		;funcret
 22709  0058CC                     __end_of_change_state_to_logs_22:
 22710                           	opt stack 0
 22711                           pclatu	equ	0xFFB
 22712                           pclath	equ	0xFFA
 22713                           tblptru	equ	0xFF8
 22714                           tblptrh	equ	0xFF7
 22715                           tblptrl	equ	0xFF6
 22716                           tablat	equ	0xFF5
 22717                           prodh	equ	0xFF4
 22718                           prodl	equ	0xFF3
 22719                           intcon	equ	0xFF2
 22720                           intcon2	equ	0xFF1
 22721                           intcon3	equ	0xFF0
 22722                           indf0	equ	0xFEF
 22723                           postinc0	equ	0xFEE
 22724                           fsr0h	equ	0xFEA
 22725                           fsr0l	equ	0xFE9
 22726                           wreg	equ	0xFE8
 22727                           postdec1	equ	0xFE5
 22728                           fsr1h	equ	0xFE2
 22729                           fsr1l	equ	0xFE1
 22730                           indf2	equ	0xFDF
 22731                           postinc2	equ	0xFDE
 22732                           postdec2	equ	0xFDD
 22733                           fsr2h	equ	0xFDA
 22734                           fsr2l	equ	0xFD9
 22735                           status	equ	0xFD8
 22736                           
 22737 ;; *************** function _change_state_to_logs_12 *****************
 22738 ;; Defined at:
 22739 ;;		line 524 in file "UI.c"
 22740 ;; Parameters:    Size  Location     Type
 22741 ;;		None
 22742 ;; Auto vars:     Size  Location     Type
 22743 ;;		None
 22744 ;; Return value:  Size  Location     Type
 22745 ;;                  1    wreg      void 
 22746 ;; Registers used:
 22747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22748 ;; Tracked objects:
 22749 ;;		On entry : 0/0
 22750 ;;		On exit  : 0/0
 22751 ;;		Unchanged: 0/0
 22752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22757 ;;Total ram usage:        0 bytes
 22758 ;; Hardware stack levels used:    1
 22759 ;; Hardware stack levels required when called:    3
 22760 ;; This function calls:
 22761 ;;		i2_lcdInst
 22762 ;;		i2_printf
 22763 ;; This function is called by:
 22764 ;;		_updateMenu
 22765 ;;		_inputHandler
 22766 ;; This function uses a non-reentrant model
 22767 ;;
 22768                           
 22769                           	psect	text80
 22770  0058CC                     __ptext80:
 22771                           	opt stack 0
 22772  0058CC                     _change_state_to_logs_12:
 22773                           	opt stack 18
 22774                           
 22775                           ;UI.c: 525: cur_state = 1012;
 22776                           
 22777                           ;incstack = 0
 22778  0058CC  0E03               	movlw	3
 22779  0058CE  0100               	movlb	0	; () banked
 22780  0058D0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22781  0058D2  0EF4               	movlw	244
 22782  0058D4  6FE6               	movwf	_cur_state& (0+255),b
 22783                           
 22784                           ; BSR set to: 0
 22785                           ;UI.c: 526: lcdInst(0b10000000);;
 22786  0058D6  0E80               	movlw	128
 22787  0058D8  ECFD  F02D         	call	i2_lcdInst
 22788                           
 22789                           ;UI.c: 527: printf("LOG 1           ");
 22790  0058DC  0EB8               	movlw	low STR_41
 22791  0058DE  6E0D               	movwf	i2printf@f,c
 22792  0058E0  0EFC               	movlw	high STR_41
 22793  0058E2  6E0E               	movwf	i2printf@f+1,c
 22794  0058E4  EC00  F012         	call	i2_printf	;wreg free
 22795                           
 22796                           ;UI.c: 528: lcdInst(0b11000000);;
 22797  0058E8  0EC0               	movlw	192
 22798  0058EA  ECFD  F02D         	call	i2_lcdInst
 22799                           
 22800                           ;UI.c: 529: printf("LOG 2          <");
 22801  0058EE  0E73               	movlw	low STR_42
 22802  0058F0  6E0D               	movwf	i2printf@f,c
 22803  0058F2  0EFD               	movlw	high STR_42
 22804  0058F4  6E0E               	movwf	i2printf@f+1,c
 22805  0058F6  EC00  F012         	call	i2_printf	;wreg free
 22806  0058FA  0012               	return		;funcret
 22807  0058FC                     __end_of_change_state_to_logs_12:
 22808                           	opt stack 0
 22809                           pclatu	equ	0xFFB
 22810                           pclath	equ	0xFFA
 22811                           tblptru	equ	0xFF8
 22812                           tblptrh	equ	0xFF7
 22813                           tblptrl	equ	0xFF6
 22814                           tablat	equ	0xFF5
 22815                           prodh	equ	0xFF4
 22816                           prodl	equ	0xFF3
 22817                           intcon	equ	0xFF2
 22818                           intcon2	equ	0xFF1
 22819                           intcon3	equ	0xFF0
 22820                           indf0	equ	0xFEF
 22821                           postinc0	equ	0xFEE
 22822                           fsr0h	equ	0xFEA
 22823                           fsr0l	equ	0xFE9
 22824                           wreg	equ	0xFE8
 22825                           postdec1	equ	0xFE5
 22826                           fsr1h	equ	0xFE2
 22827                           fsr1l	equ	0xFE1
 22828                           indf2	equ	0xFDF
 22829                           postinc2	equ	0xFDE
 22830                           postdec2	equ	0xFDD
 22831                           fsr2h	equ	0xFDA
 22832                           fsr2l	equ	0xFD9
 22833                           status	equ	0xFD8
 22834                           
 22835 ;; *************** function _change_state_to_logs_11 *****************
 22836 ;; Defined at:
 22837 ;;		line 517 in file "UI.c"
 22838 ;; Parameters:    Size  Location     Type
 22839 ;;		None
 22840 ;; Auto vars:     Size  Location     Type
 22841 ;;		None
 22842 ;; Return value:  Size  Location     Type
 22843 ;;                  1    wreg      void 
 22844 ;; Registers used:
 22845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22846 ;; Tracked objects:
 22847 ;;		On entry : 0/0
 22848 ;;		On exit  : 0/0
 22849 ;;		Unchanged: 0/0
 22850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;Total ram usage:        0 bytes
 22856 ;; Hardware stack levels used:    1
 22857 ;; Hardware stack levels required when called:    3
 22858 ;; This function calls:
 22859 ;;		i2_lcdInst
 22860 ;;		i2_printf
 22861 ;; This function is called by:
 22862 ;;		_updateMenu
 22863 ;;		_inputHandler
 22864 ;; This function uses a non-reentrant model
 22865 ;;
 22866                           
 22867                           	psect	text81
 22868  0058FC                     __ptext81:
 22869                           	opt stack 0
 22870  0058FC                     _change_state_to_logs_11:
 22871                           	opt stack 18
 22872                           
 22873                           ;UI.c: 518: cur_state = 1011;
 22874                           
 22875                           ;incstack = 0
 22876  0058FC  0E03               	movlw	3
 22877  0058FE  0100               	movlb	0	; () banked
 22878  005900  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22879  005902  0EF3               	movlw	243
 22880  005904  6FE6               	movwf	_cur_state& (0+255),b
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;UI.c: 519: lcdInst(0b10000000);;
 22884  005906  0E80               	movlw	128
 22885  005908  ECFD  F02D         	call	i2_lcdInst
 22886                           
 22887                           ;UI.c: 520: printf("LOG 1          <");
 22888  00590C  0E62               	movlw	low STR_39
 22889  00590E  6E0D               	movwf	i2printf@f,c
 22890  005910  0EFD               	movlw	high STR_39
 22891  005912  6E0E               	movwf	i2printf@f+1,c
 22892  005914  EC00  F012         	call	i2_printf	;wreg free
 22893                           
 22894                           ;UI.c: 521: lcdInst(0b11000000);;
 22895  005918  0EC0               	movlw	192
 22896  00591A  ECFD  F02D         	call	i2_lcdInst
 22897                           
 22898                           ;UI.c: 522: printf("LOG 2           ");
 22899  00591E  0EC9               	movlw	low STR_40
 22900  005920  6E0D               	movwf	i2printf@f,c
 22901  005922  0EFC               	movlw	high STR_40
 22902  005924  6E0E               	movwf	i2printf@f+1,c
 22903  005926  EC00  F012         	call	i2_printf	;wreg free
 22904  00592A  0012               	return		;funcret
 22905  00592C                     __end_of_change_state_to_logs_11:
 22906                           	opt stack 0
 22907                           pclatu	equ	0xFFB
 22908                           pclath	equ	0xFFA
 22909                           tblptru	equ	0xFF8
 22910                           tblptrh	equ	0xFF7
 22911                           tblptrl	equ	0xFF6
 22912                           tablat	equ	0xFF5
 22913                           prodh	equ	0xFF4
 22914                           prodl	equ	0xFF3
 22915                           intcon	equ	0xFF2
 22916                           intcon2	equ	0xFF1
 22917                           intcon3	equ	0xFF0
 22918                           indf0	equ	0xFEF
 22919                           postinc0	equ	0xFEE
 22920                           fsr0h	equ	0xFEA
 22921                           fsr0l	equ	0xFE9
 22922                           wreg	equ	0xFE8
 22923                           postdec1	equ	0xFE5
 22924                           fsr1h	equ	0xFE2
 22925                           fsr1l	equ	0xFE1
 22926                           indf2	equ	0xFDF
 22927                           postinc2	equ	0xFDE
 22928                           postdec2	equ	0xFDD
 22929                           fsr2h	equ	0xFDA
 22930                           fsr2l	equ	0xFD9
 22931                           status	equ	0xFD8
 22932                           
 22933 ;; *************** function _dispLogs *****************
 22934 ;; Defined at:
 22935 ;;		line 470 in file "UI.c"
 22936 ;; Parameters:    Size  Location     Type
 22937 ;;  myLog           2   17[COMRAM] int 
 22938 ;; Auto vars:     Size  Location     Type
 22939 ;;		None
 22940 ;; Return value:  Size  Location     Type
 22941 ;;                  1    wreg      void 
 22942 ;; Registers used:
 22943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22944 ;; Tracked objects:
 22945 ;;		On entry : 0/0
 22946 ;;		On exit  : 0/0
 22947 ;;		Unchanged: 0/0
 22948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22949 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22953 ;;Total ram usage:        2 bytes
 22954 ;; Hardware stack levels used:    1
 22955 ;; Hardware stack levels required when called:    2
 22956 ;; This function calls:
 22957 ;;		_retrieveLog
 22958 ;; This function is called by:
 22959 ;;		_updateMenu
 22960 ;; This function uses a non-reentrant model
 22961 ;;
 22962                           
 22963                           	psect	text82
 22964  005AA6                     __ptext82:
 22965                           	opt stack 0
 22966  005AA6                     _dispLogs:
 22967                           	opt stack 20
 22968                           
 22969                           ;UI.c: 471: logstate = 1;
 22970                           
 22971                           ;incstack = 0
 22972  005AA6  0E00               	movlw	0
 22973  005AA8  0100               	movlb	0	; () banked
 22974  005AAA  6FF9               	movwf	(_logstate+1)& (0+255),b
 22975  005AAC  0E01               	movlw	1
 22976  005AAE  6FF8               	movwf	_logstate& (0+255),b
 22977                           
 22978                           ; BSR set to: 0
 22979                           ;UI.c: 472: log = myLog;
 22980  005AB0  C012  F0F0         	movff	dispLogs@myLog,_log
 22981  005AB4  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 22982                           
 22983                           ; BSR set to: 0
 22984                           ;UI.c: 473: retrieveLog(myLog - 1);
 22985  005AB8  0EFF               	movlw	255
 22986  005ABA  2412               	addwf	dispLogs@myLog,w,c
 22987  005ABC  6E07               	movwf	retrieveLog@logNum,c
 22988  005ABE  0EFF               	movlw	255
 22989  005AC0  2013               	addwfc	dispLogs@myLog+1,w,c
 22990  005AC2  6E08               	movwf	retrieveLog@logNum+1,c
 22991  005AC4  EC51  F020         	call	_retrieveLog	;wreg free
 22992  005AC8  0012               	return		;funcret
 22993  005ACA                     __end_of_dispLogs:
 22994                           	opt stack 0
 22995                           pclatu	equ	0xFFB
 22996                           pclath	equ	0xFFA
 22997                           tblptru	equ	0xFF8
 22998                           tblptrh	equ	0xFF7
 22999                           tblptrl	equ	0xFF6
 23000                           tablat	equ	0xFF5
 23001                           prodh	equ	0xFF4
 23002                           prodl	equ	0xFF3
 23003                           intcon	equ	0xFF2
 23004                           intcon2	equ	0xFF1
 23005                           intcon3	equ	0xFF0
 23006                           indf0	equ	0xFEF
 23007                           postinc0	equ	0xFEE
 23008                           fsr0h	equ	0xFEA
 23009                           fsr0l	equ	0xFE9
 23010                           wreg	equ	0xFE8
 23011                           postdec1	equ	0xFE5
 23012                           fsr1h	equ	0xFE2
 23013                           fsr1l	equ	0xFE1
 23014                           indf2	equ	0xFDF
 23015                           postinc2	equ	0xFDE
 23016                           postdec2	equ	0xFDD
 23017                           fsr2h	equ	0xFDA
 23018                           fsr2l	equ	0xFD9
 23019                           status	equ	0xFD8
 23020                           
 23021 ;; *************** function _retrieveLog *****************
 23022 ;; Defined at:
 23023 ;;		line 138 in file "EEPROM.c"
 23024 ;; Parameters:    Size  Location     Type
 23025 ;;  logNum          2    6[COMRAM] int 
 23026 ;; Auto vars:     Size  Location     Type
 23027 ;;  i               2   13[COMRAM] int 
 23028 ;;  addr            2   15[COMRAM] unsigned short 
 23029 ;;  byte3           1   12[COMRAM] unsigned char 
 23030 ;;  byte2           1   11[COMRAM] unsigned char 
 23031 ;;  byte1           1   10[COMRAM] unsigned char 
 23032 ;; Return value:  Size  Location     Type
 23033 ;;                  1    wreg      void 
 23034 ;; Registers used:
 23035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23036 ;; Tracked objects:
 23037 ;;		On entry : 0/0
 23038 ;;		On exit  : 0/0
 23039 ;;		Unchanged: 0/0
 23040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23041 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23042 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23043 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23044 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23045 ;;Total ram usage:       11 bytes
 23046 ;; Hardware stack levels used:    1
 23047 ;; Hardware stack levels required when called:    1
 23048 ;; This function calls:
 23049 ;;		i2_EEPROM_read
 23050 ;;		i2___wmul
 23051 ;; This function is called by:
 23052 ;;		_dispLogs
 23053 ;; This function uses a non-reentrant model
 23054 ;;
 23055                           
 23056                           	psect	text83
 23057  0040A2                     __ptext83:
 23058                           	opt stack 0
 23059  0040A2                     _retrieveLog:
 23060                           	opt stack 20
 23061                           
 23062                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23063                           
 23064                           ;incstack = 0
 23065  0040A2  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23066  0040A6  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23067  0040AA  0E00               	movlw	0
 23068  0040AC  6E04               	movwf	i2___wmul@multiplicand+1,c
 23069  0040AE  0E0B               	movlw	11
 23070  0040B0  6E03               	movwf	i2___wmul@multiplicand,c
 23071  0040B2  EC2D  F02D         	call	i2___wmul	;wreg free
 23072  0040B6  0E01               	movlw	1
 23073  0040B8  2401               	addwf	?i2___wmul,w,c
 23074  0040BA  6E10               	movwf	retrieveLog@addr,c
 23075  0040BC  0E00               	movlw	0
 23076  0040BE  2002               	addwfc	?i2___wmul+1,w,c
 23077  0040C0  6E11               	movwf	retrieveLog@addr+1,c
 23078                           
 23079                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23080  0040C2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23081  0040C6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23082  0040CA  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23083  0040CE  6E0B               	movwf	retrieveLog@byte1,c
 23084                           
 23085                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23086  0040D0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23087  0040D4  0E80               	movlw	128
 23088  0040D6  1609               	andwf	??_retrieveLog,f,c
 23089  0040D8  5009               	movf	??_retrieveLog,w,c
 23090  0040DA  0100               	movlb	0	; () banked
 23091  0040DC  6FF2               	movwf	_log_completion& (0+255),b
 23092  0040DE  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23093                           
 23094                           ; BSR set to: 0
 23095                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23096  0040E0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23097  0040E4  0E0F               	movlw	15
 23098  0040E6  1609               	andwf	??_retrieveLog,f,c
 23099  0040E8  5009               	movf	??_retrieveLog,w,c
 23100  0040EA  0101               	movlb	1	; () banked
 23101  0040EC  6F43               	movwf	_log_count_total& (0+255),b
 23102  0040EE  6B44               	clrf	(_log_count_total+1)& (0+255),b
 23103                           
 23104                           ; BSR set to: 1
 23105                           ;EEPROM.c: 150: addr++;
 23106  0040F0  4A10               	infsnz	retrieveLog@addr,f,c
 23107  0040F2  2A11               	incf	retrieveLog@addr+1,f,c
 23108                           
 23109                           ; BSR set to: 1
 23110                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23111  0040F4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23112  0040F8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23113  0040FC  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23114  004100  6E0C               	movwf	retrieveLog@byte2,c
 23115                           
 23116                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23117  004102  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23118  004106  3A09               	swapf	??_retrieveLog,f,c
 23119  004108  0E0F               	movlw	15
 23120  00410A  1609               	andwf	??_retrieveLog,f,c
 23121  00410C  0E0F               	movlw	15
 23122  00410E  1609               	andwf	??_retrieveLog,f,c
 23123  004110  5009               	movf	??_retrieveLog,w,c
 23124  004112  0100               	movlb	0	; () banked
 23125  004114  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23126  004116  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23127                           
 23128                           ; BSR set to: 0
 23129                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23130  004118  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23131  00411C  0E0F               	movlw	15
 23132  00411E  1609               	andwf	??_retrieveLog,f,c
 23133  004120  5009               	movf	??_retrieveLog,w,c
 23134  004122  0101               	movlb	1	; () banked
 23135  004124  6F41               	movwf	_log_count_pop_w_tab& (0+255),b
 23136  004126  6B42               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23137                           
 23138                           ; BSR set to: 1
 23139                           ;EEPROM.c: 156: addr++;
 23140  004128  4A10               	infsnz	retrieveLog@addr,f,c
 23141  00412A  2A11               	incf	retrieveLog@addr+1,f,c
 23142                           
 23143                           ; BSR set to: 1
 23144                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23145  00412C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23146  004130  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23147  004134  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23148  004138  6E0D               	movwf	retrieveLog@byte3,c
 23149                           
 23150                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23151  00413A  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23152  00413E  3A09               	swapf	??_retrieveLog,f,c
 23153  004140  0E0F               	movlw	15
 23154  004142  1609               	andwf	??_retrieveLog,f,c
 23155  004144  0E0F               	movlw	15
 23156  004146  1609               	andwf	??_retrieveLog,f,c
 23157  004148  5009               	movf	??_retrieveLog,w,c
 23158  00414A  0101               	movlb	1	; () banked
 23159  00414C  6F3F               	movwf	_log_count_can_w_lab& (0+255),b
 23160  00414E  6B40               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23161                           
 23162                           ; BSR set to: 1
 23163                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23164  004150  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23165  004154  0E0F               	movlw	15
 23166  004156  1609               	andwf	??_retrieveLog,f,c
 23167  004158  5009               	movf	??_retrieveLog,w,c
 23168  00415A  0101               	movlb	1	; () banked
 23169  00415C  6F3D               	movwf	_log_count_can_no_lab& (0+255),b
 23170  00415E  6B3E               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23171                           
 23172                           ; BSR set to: 1
 23173                           ;EEPROM.c: 160: addr++;
 23174  004160  4A10               	infsnz	retrieveLog@addr,f,c
 23175  004162  2A11               	incf	retrieveLog@addr+1,f,c
 23176                           
 23177                           ; BSR set to: 1
 23178                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23179  004164  0E00               	movlw	0
 23180  004166  6E0F               	movwf	retrieveLog@i+1,c
 23181  004168  0E00               	movlw	0
 23182  00416A  6E0E               	movwf	retrieveLog@i,c
 23183  00416C                     i2l7292:
 23184                           
 23185                           ; BSR set to: 1
 23186  00416C  BE0F               	btfsc	retrieveLog@i+1,7,c
 23187  00416E  D006               	goto	i2l7296
 23188  004170  500F               	movf	retrieveLog@i+1,w,c
 23189  004172  E11E               	bnz	i2l7304
 23190  004174  0E07               	movlw	7
 23191  004176  5C0E               	subwf	retrieveLog@i,w,c
 23192  004178  B0D8               	btfsc	status,0,c
 23193  00417A  D01A               	goto	i2l7304
 23194  00417C                     i2l7296:
 23195                           
 23196                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23197  00417C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23198  004180  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23199  004184  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23200  004188  6E09               	movwf	??_retrieveLog& (0+255),c
 23201  00418A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23202  00418C  90D8               	bcf	status,0,c
 23203  00418E  340E               	rlcf	retrieveLog@i,w,c
 23204  004190  6ED9               	movwf	fsr2l,c
 23205  004192  340F               	rlcf	retrieveLog@i+1,w,c
 23206  004194  6EDA               	movwf	fsr2h,c
 23207  004196  0E00               	movlw	low _log_startTime
 23208  004198  26D9               	addwf	fsr2l,f,c
 23209  00419A  0E01               	movlw	high _log_startTime
 23210  00419C  22DA               	addwfc	fsr2h,f,c
 23211  00419E  C009  FFDE         	movff	??_retrieveLog,postinc2
 23212  0041A2  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23213                           
 23214                           ;EEPROM.c: 165: addr++;
 23215  0041A6  4A10               	infsnz	retrieveLog@addr,f,c
 23216  0041A8  2A11               	incf	retrieveLog@addr+1,f,c
 23217  0041AA  4A0E               	infsnz	retrieveLog@i,f,c
 23218  0041AC  2A0F               	incf	retrieveLog@i+1,f,c
 23219  0041AE  D7DE               	goto	i2l7292
 23220  0041B0                     i2l7304:
 23221                           
 23222                           ;EEPROM.c: 166: }
 23223                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23224  0041B0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23225  0041B4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23226  0041B8  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23227  0041BC  6E09               	movwf	??_retrieveLog& (0+255),c
 23228  0041BE  5009               	movf	??_retrieveLog,w,c
 23229  0041C0  0100               	movlb	0	; () banked
 23230  0041C2  6FF6               	movwf	_log_total_time& (0+255),b
 23231  0041C4  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23232                           
 23233                           ; BSR set to: 0
 23234  0041C6  0012               	return		;funcret
 23235  0041C8                     __end_of_retrieveLog:
 23236                           	opt stack 0
 23237                           pclatu	equ	0xFFB
 23238                           pclath	equ	0xFFA
 23239                           tblptru	equ	0xFF8
 23240                           tblptrh	equ	0xFF7
 23241                           tblptrl	equ	0xFF6
 23242                           tablat	equ	0xFF5
 23243                           prodh	equ	0xFF4
 23244                           prodl	equ	0xFF3
 23245                           intcon	equ	0xFF2
 23246                           intcon2	equ	0xFF1
 23247                           intcon3	equ	0xFF0
 23248                           indf0	equ	0xFEF
 23249                           postinc0	equ	0xFEE
 23250                           fsr0h	equ	0xFEA
 23251                           fsr0l	equ	0xFE9
 23252                           wreg	equ	0xFE8
 23253                           postdec1	equ	0xFE5
 23254                           fsr1h	equ	0xFE2
 23255                           fsr1l	equ	0xFE1
 23256                           indf2	equ	0xFDF
 23257                           postinc2	equ	0xFDE
 23258                           postdec2	equ	0xFDD
 23259                           fsr2h	equ	0xFDA
 23260                           fsr2l	equ	0xFD9
 23261                           status	equ	0xFD8
 23262                           
 23263 ;; *************** function i2_EEPROM_read *****************
 23264 ;; Defined at:
 23265 ;;		line 72 in file "EEPROM.c"
 23266 ;; Parameters:    Size  Location     Type
 23267 ;;  address         2    0[COMRAM] unsigned short 
 23268 ;; Auto vars:     Size  Location     Type
 23269 ;;		None
 23270 ;; Return value:  Size  Location     Type
 23271 ;;                  1    wreg      unsigned char 
 23272 ;; Registers used:
 23273 ;;		wreg, status,2
 23274 ;; Tracked objects:
 23275 ;;		On entry : 0/0
 23276 ;;		On exit  : 0/0
 23277 ;;		Unchanged: 0/0
 23278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23283 ;;Total ram usage:        2 bytes
 23284 ;; Hardware stack levels used:    1
 23285 ;; This function calls:
 23286 ;;		Nothing
 23287 ;; This function is called by:
 23288 ;;		_retrieveLog
 23289 ;; This function uses a non-reentrant model
 23290 ;;
 23291                           
 23292                           	psect	text84
 23293  005B92                     __ptext84:
 23294                           	opt stack 0
 23295  005B92                     i2_EEPROM_read:
 23296                           	opt stack 20
 23297                           
 23298                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23299                           
 23300                           ; BSR set to: 0
 23301                           ;incstack = 0
 23302  005B92  5002               	movf	i2EEPROM_read@address+1,w,c
 23303  005B94  6EAA               	movwf	4010,c	;volatile
 23304                           
 23305                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23306  005B96  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23307                           
 23308                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23309  005B9A  9EA6               	bcf	4006,7,c	;volatile
 23310                           
 23311                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23312  005B9C  9CA6               	bcf	4006,6,c	;volatile
 23313                           
 23314                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23315  005B9E  80A6               	bsf	4006,0,c	;volatile
 23316  005BA0                     i2l1136:
 23317  005BA0  B0A6               	btfsc	4006,0,c	;volatile
 23318  005BA2  D7FE               	goto	i2l1136
 23319                           
 23320                           ;EEPROM.c: 85: return EEDATA;
 23321  005BA4  50A8               	movf	4008,w,c	;volatile
 23322  005BA6  0012               	return	
 23323  005BA8                     __end_ofi2_EEPROM_read:
 23324                           	opt stack 0
 23325                           pclatu	equ	0xFFB
 23326                           pclath	equ	0xFFA
 23327                           tblptru	equ	0xFF8
 23328                           tblptrh	equ	0xFF7
 23329                           tblptrl	equ	0xFF6
 23330                           tablat	equ	0xFF5
 23331                           prodh	equ	0xFF4
 23332                           prodl	equ	0xFF3
 23333                           intcon	equ	0xFF2
 23334                           intcon2	equ	0xFF1
 23335                           intcon3	equ	0xFF0
 23336                           indf0	equ	0xFEF
 23337                           postinc0	equ	0xFEE
 23338                           fsr0h	equ	0xFEA
 23339                           fsr0l	equ	0xFE9
 23340                           wreg	equ	0xFE8
 23341                           postdec1	equ	0xFE5
 23342                           fsr1h	equ	0xFE2
 23343                           fsr1l	equ	0xFE1
 23344                           indf2	equ	0xFDF
 23345                           postinc2	equ	0xFDE
 23346                           postdec2	equ	0xFDD
 23347                           fsr2h	equ	0xFDA
 23348                           fsr2l	equ	0xFD9
 23349                           status	equ	0xFD8
 23350                           
 23351 ;; *************** function _updateArmState *****************
 23352 ;; Defined at:
 23353 ;;		line 639 in file "sort.c"
 23354 ;; Parameters:    Size  Location     Type
 23355 ;;		None
 23356 ;; Auto vars:     Size  Location     Type
 23357 ;;		None
 23358 ;; Return value:  Size  Location     Type
 23359 ;;                  1    wreg      void 
 23360 ;; Registers used:
 23361 ;;		wreg, status,2, status,0
 23362 ;; Tracked objects:
 23363 ;;		On entry : 0/0
 23364 ;;		On exit  : 0/0
 23365 ;;		Unchanged: 0/0
 23366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23369 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23371 ;;Total ram usage:        2 bytes
 23372 ;; Hardware stack levels used:    1
 23373 ;; This function calls:
 23374 ;;		Nothing
 23375 ;; This function is called by:
 23376 ;;		_handler
 23377 ;; This function uses a non-reentrant model
 23378 ;;
 23379                           
 23380                           	psect	text85
 23381  0055D2                     __ptext85:
 23382                           	opt stack 0
 23383  0055D2                     _updateArmState:
 23384                           	opt stack 23
 23385                           
 23386                           ;sort.c: 646: if(!was_low_2){
 23387                           
 23388                           ;incstack = 0
 23389  0055D2  5079               	movf	_was_low_2,w,c	;volatile
 23390  0055D4  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23391  0055D6  B4D8               	btfsc	status,2,c
 23392  0055D8  D007               	goto	i2l10104
 23393  0055DA  D016               	goto	i2l952
 23394  0055DC                     i2l10098:
 23395                           
 23396                           ;sort.c: 651: PR2 = 0x20;
 23397  0055DC  0E20               	movlw	32
 23398  0055DE  6ECB               	movwf	4043,c	;volatile
 23399                           
 23400                           ;sort.c: 652: break;
 23401  0055E0  0012               	return	
 23402  0055E2                     i2l10100:
 23403                           
 23404                           ;sort.c: 655: PR2 = 0x40;
 23405  0055E2  0E40               	movlw	64
 23406  0055E4  6ECB               	movwf	4043,c	;volatile
 23407                           
 23408                           ;sort.c: 657: }
 23409                           
 23410                           ;sort.c: 656: break;
 23411  0055E6  0012               	return	
 23412  0055E8                     i2l10104:
 23413  0055E8  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23414  0055EC  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23415                           
 23416                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23417                           ; Switch size 1, requested type "space"
 23418                           ; Number of cases is 1, Range of values is 0 to 0
 23419                           ; switch strategies available:
 23420                           ; Name         Instructions Cycles
 23421                           ; simple_byte            4     3 (average)
 23422                           ;	Chosen strategy is simple_byte
 23423  0055F0  5002               	movf	??_updateArmState+1,w,c
 23424  0055F2  0A00               	xorlw	0	; case 0
 23425  0055F4  A4D8               	btfss	status,2,c
 23426  0055F6  0012               	return	
 23427                           
 23428                           ; Switch size 1, requested type "space"
 23429                           ; Number of cases is 2, Range of values is 0 to 1
 23430                           ; switch strategies available:
 23431                           ; Name         Instructions Cycles
 23432                           ; simple_byte            7     4 (average)
 23433                           ;	Chosen strategy is simple_byte
 23434  0055F8  5001               	movf	??_updateArmState,w,c
 23435  0055FA  0A00               	xorlw	0	; case 0
 23436  0055FC  B4D8               	btfsc	status,2,c
 23437  0055FE  D7EE               	goto	i2l10098
 23438  005600  0A01               	xorlw	1	; case 1
 23439  005602  A4D8               	btfss	status,2,c
 23440                           
 23441                           ;sort.c: 658: }
 23442  005604  0012               	return	
 23443  005606  D7ED               	goto	i2l10100
 23444  005608                     i2l952:
 23445                           
 23446                           ;sort.c: 659: else{
 23447                           ;sort.c: 661: PR2 = 0xFF;
 23448  005608  68CB               	setf	4043,c	;volatile
 23449  00560A  0012               	return	
 23450  00560C                     __end_of_updateArmState:
 23451                           	opt stack 0
 23452                           pclatu	equ	0xFFB
 23453                           pclath	equ	0xFFA
 23454                           tblptru	equ	0xFF8
 23455                           tblptrh	equ	0xFF7
 23456                           tblptrl	equ	0xFF6
 23457                           tablat	equ	0xFF5
 23458                           prodh	equ	0xFF4
 23459                           prodl	equ	0xFF3
 23460                           intcon	equ	0xFF2
 23461                           intcon2	equ	0xFF1
 23462                           intcon3	equ	0xFF0
 23463                           indf0	equ	0xFEF
 23464                           postinc0	equ	0xFEE
 23465                           fsr0h	equ	0xFEA
 23466                           fsr0l	equ	0xFE9
 23467                           wreg	equ	0xFE8
 23468                           postdec1	equ	0xFE5
 23469                           fsr1h	equ	0xFE2
 23470                           fsr1l	equ	0xFE1
 23471                           indf2	equ	0xFDF
 23472                           postinc2	equ	0xFDE
 23473                           postdec2	equ	0xFDD
 23474                           fsr2h	equ	0xFDA
 23475                           fsr2l	equ	0xFD9
 23476                           status	equ	0xFD8
 23477                           
 23478 ;; *************** function _printSortTimer *****************
 23479 ;; Defined at:
 23480 ;;		line 484 in file "sort.c"
 23481 ;; Parameters:    Size  Location     Type
 23482 ;;		None
 23483 ;; Auto vars:     Size  Location     Type
 23484 ;;  i               2   70[COMRAM] int 
 23485 ;;  i               2   72[COMRAM] int 
 23486 ;;  curTime        14   44[COMRAM] int [7]
 23487 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23488 ;;  sec             2   64[COMRAM] int 
 23489 ;;  min             2   62[COMRAM] int 
 23490 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23491 ;;  start_sec       2   58[COMRAM] unsigned int 
 23492 ;; Return value:  Size  Location     Type
 23493 ;;                  1    wreg      void 
 23494 ;; Registers used:
 23495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23496 ;; Tracked objects:
 23497 ;;		On entry : 0/0
 23498 ;;		On exit  : 0/0
 23499 ;;		Unchanged: 0/0
 23500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23502 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23503 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23504 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23505 ;;Total ram usage:       33 bytes
 23506 ;; Hardware stack levels used:    1
 23507 ;; Hardware stack levels required when called:    3
 23508 ;; This function calls:
 23509 ;;		i2___lwdiv
 23510 ;;		i2___lwmod
 23511 ;;		i2___wmul
 23512 ;;		i2_delay_ms
 23513 ;;		i2_getRTC
 23514 ;;		i2_lcdInst
 23515 ;;		i2_printf
 23516 ;; This function is called by:
 23517 ;;		_handler
 23518 ;; This function uses a non-reentrant model
 23519 ;;
 23520                           
 23521                           	psect	text86
 23522  00330C                     __ptext86:
 23523                           	opt stack 0
 23524  00330C                     _printSortTimer:
 23525                           	opt stack 20
 23526                           
 23527                           ;sort.c: 485: getRTC();
 23528                           
 23529                           ;incstack = 0
 23530  00330C  EC02  F028         	call	i2_getRTC	;wreg free
 23531                           
 23532                           ;sort.c: 486: int curTime[7];
 23533                           ;sort.c: 487: for(int i = 0; i < 7; i++){
 23534  003310  0E00               	movlw	0
 23535  003312  6E4A               	movwf	printSortTimer@i+1,c
 23536  003314  0E00               	movlw	0
 23537  003316  6E49               	movwf	printSortTimer@i,c
 23538  003318                     i2l9938:
 23539  003318  BE4A               	btfsc	printSortTimer@i+1,7,c
 23540  00331A  D006               	goto	i2l9942
 23541  00331C  504A               	movf	printSortTimer@i+1,w,c
 23542  00331E  E131               	bnz	i2l9948
 23543  003320  0E07               	movlw	7
 23544  003322  5C49               	subwf	printSortTimer@i,w,c
 23545  003324  B0D8               	btfsc	status,0,c
 23546  003326  D02D               	goto	i2l9948
 23547  003328                     i2l9942:
 23548                           
 23549                           ;sort.c: 488: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23550  003328  0E1C               	movlw	low _time
 23551  00332A  2449               	addwf	printSortTimer@i,w,c
 23552  00332C  6ED9               	movwf	fsr2l,c
 23553  00332E  0E01               	movlw	high _time
 23554  003330  204A               	addwfc	printSortTimer@i+1,w,c
 23555  003332  6EDA               	movwf	fsr2h,c
 23556  003334  50DF               	movf	indf2,w,c
 23557  003336  6E2A               	movwf	??_printSortTimer& (0+255),c
 23558  003338  3A2A               	swapf	??_printSortTimer,f,c
 23559  00333A  0E0F               	movlw	15
 23560  00333C  162A               	andwf	??_printSortTimer,f,c
 23561  00333E  0E0F               	movlw	15
 23562  003340  162A               	andwf	??_printSortTimer,f,c
 23563  003342  502A               	movf	??_printSortTimer,w,c
 23564  003344  0D0A               	mullw	10
 23565  003346  0E1C               	movlw	low _time
 23566  003348  2449               	addwf	printSortTimer@i,w,c
 23567  00334A  6ED9               	movwf	fsr2l,c
 23568  00334C  0E01               	movlw	high _time
 23569  00334E  204A               	addwfc	printSortTimer@i+1,w,c
 23570  003350  6EDA               	movwf	fsr2h,c
 23571  003352  50DF               	movf	indf2,w,c
 23572  003354  0B0F               	andlw	15
 23573  003356  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23574  003358  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23575  00335A  50F3               	movf	prodl,w,c
 23576  00335C  262B               	addwf	??_printSortTimer+1,f,c
 23577  00335E  50F4               	movf	prodh,w,c
 23578  003360  222C               	addwfc	??_printSortTimer+2,f,c
 23579  003362  90D8               	bcf	status,0,c
 23580  003364  3449               	rlcf	printSortTimer@i,w,c
 23581  003366  6ED9               	movwf	fsr2l,c
 23582  003368  344A               	rlcf	printSortTimer@i+1,w,c
 23583  00336A  6EDA               	movwf	fsr2h,c
 23584  00336C  0E2D               	movlw	low printSortTimer@curTime
 23585  00336E  26D9               	addwf	fsr2l,f,c
 23586  003370  0E00               	movlw	high printSortTimer@curTime
 23587  003372  22DA               	addwfc	fsr2h,f,c
 23588  003374  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23589  003378  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23590  00337C  4A49               	infsnz	printSortTimer@i,f,c
 23591  00337E  2A4A               	incf	printSortTimer@i+1,f,c
 23592  003380  D7CB               	goto	i2l9938
 23593  003382                     i2l9948:
 23594                           
 23595                           ;sort.c: 489: }
 23596                           ;sort.c: 490: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23597  003382  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23598  003386  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23599  00338A  0E00               	movlw	0
 23600  00338C  6E04               	movwf	i2___wmul@multiplicand+1,c
 23601  00338E  0E3C               	movlw	60
 23602  003390  6E03               	movwf	i2___wmul@multiplicand,c
 23603  003392  EC2D  F02D         	call	i2___wmul	;wreg free
 23604  003396  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23605  00339A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23606  00339E  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23607  0033A2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23608  0033A6  0E0E               	movlw	14
 23609  0033A8  6E04               	movwf	i2___wmul@multiplicand+1,c
 23610  0033AA  0E10               	movlw	16
 23611  0033AC  6E03               	movwf	i2___wmul@multiplicand,c
 23612  0033AE  EC2D  F02D         	call	i2___wmul	;wreg free
 23613  0033B2  5001               	movf	?i2___wmul,w,c
 23614  0033B4  262A               	addwf	??_printSortTimer,f,c
 23615  0033B6  5002               	movf	?i2___wmul+1,w,c
 23616  0033B8  222B               	addwfc	??_printSortTimer+1,f,c
 23617  0033BA  0101               	movlb	1	; () banked
 23618  0033BC  510E               	movf	_startTime& (0+255),w,b
 23619  0033BE  242A               	addwf	??_printSortTimer,w,c
 23620  0033C0  6E3B               	movwf	printSortTimer@start_sec,c
 23621  0033C2  0101               	movlb	1	; () banked
 23622  0033C4  510F               	movf	(_startTime+1)& (0+255),w,b
 23623  0033C6  202B               	addwfc	??_printSortTimer+1,w,c
 23624  0033C8  6E3C               	movwf	printSortTimer@start_sec+1,c
 23625                           
 23626                           ;sort.c: 491: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23627  0033CA  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23628  0033CE  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23629  0033D2  0E00               	movlw	0
 23630  0033D4  6E04               	movwf	i2___wmul@multiplicand+1,c
 23631  0033D6  0E3C               	movlw	60
 23632  0033D8  6E03               	movwf	i2___wmul@multiplicand,c
 23633  0033DA  EC2D  F02D         	call	i2___wmul	;wreg free
 23634  0033DE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23635  0033E2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23636  0033E6  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23637  0033EA  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23638  0033EE  0E0E               	movlw	14
 23639  0033F0  6E04               	movwf	i2___wmul@multiplicand+1,c
 23640  0033F2  0E10               	movlw	16
 23641  0033F4  6E03               	movwf	i2___wmul@multiplicand,c
 23642  0033F6  EC2D  F02D         	call	i2___wmul	;wreg free
 23643  0033FA  5001               	movf	?i2___wmul,w,c
 23644  0033FC  262A               	addwf	??_printSortTimer,f,c
 23645  0033FE  5002               	movf	?i2___wmul+1,w,c
 23646  003400  222B               	addwfc	??_printSortTimer+1,f,c
 23647  003402  502D               	movf	printSortTimer@curTime,w,c
 23648  003404  242A               	addwf	??_printSortTimer,w,c
 23649  003406  6E3D               	movwf	printSortTimer@cur_sec,c
 23650  003408  502E               	movf	printSortTimer@curTime+1,w,c
 23651  00340A  202B               	addwfc	??_printSortTimer+1,w,c
 23652  00340C  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23653                           
 23654                           ;sort.c: 492: unsigned int timeDiff = cur_sec - start_sec;
 23655  00340E  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23656  003412  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23657  003416  1E2A               	comf	??_printSortTimer,f,c
 23658  003418  1E2B               	comf	??_printSortTimer+1,f,c
 23659  00341A  4A2A               	infsnz	??_printSortTimer,f,c
 23660  00341C  2A2B               	incf	??_printSortTimer+1,f,c
 23661  00341E  503D               	movf	printSortTimer@cur_sec,w,c
 23662  003420  242A               	addwf	??_printSortTimer,w,c
 23663  003422  6E45               	movwf	printSortTimer@timeDiff,c
 23664  003424  503E               	movf	printSortTimer@cur_sec+1,w,c
 23665  003426  202B               	addwfc	??_printSortTimer+1,w,c
 23666  003428  6E46               	movwf	printSortTimer@timeDiff+1,c
 23667                           
 23668                           ;sort.c: 494: total_time = timeDiff;
 23669  00342A  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23670  00342E  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23671                           
 23672                           ;sort.c: 496: if(f_most_recent_sort_time){
 23673  003432  0101               	movlb	1	; () banked
 23674  003434  5135               	movf	_f_most_recent_sort_time& (0+255),w,b
 23675  003436  0101               	movlb	1	; () banked
 23676  003438  1136               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23677  00343A  B4D8               	btfsc	status,2,c
 23678  00343C  D009               	goto	i2l9960
 23679                           
 23680                           ; BSR set to: 1
 23681                           ;sort.c: 497: most_recent_sort_time = total_time;
 23682  00343E  C0FA  F145         	movff	_total_time,_most_recent_sort_time
 23683  003442  C0FB  F146         	movff	_total_time+1,_most_recent_sort_time+1
 23684                           
 23685                           ; BSR set to: 1
 23686                           ;sort.c: 498: f_most_recent_sort_time = 0;
 23687  003446  0E00               	movlw	0
 23688  003448  0101               	movlb	1	; () banked
 23689  00344A  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23690  00344C  0E00               	movlw	0
 23691  00344E  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
 23692  003450                     i2l9960:
 23693                           
 23694                           ; BSR set to: 1
 23695                           ;sort.c: 499: }
 23696                           ;sort.c: 501: if((total_time >= 4) && (total_time % 4 == 0)){
 23697  003450  0100               	movlb	0	; () banked
 23698  003452  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 23699  003454  D04B               	goto	i2l9982
 23700  003456  0100               	movlb	0	; () banked
 23701  003458  51FB               	movf	(_total_time+1)& (0+255),w,b
 23702  00345A  E105               	bnz	i2u943_40
 23703  00345C  0E04               	movlw	4
 23704  00345E  0100               	movlb	0	; () banked
 23705  003460  5DFA               	subwf	_total_time& (0+255),w,b
 23706  003462  A0D8               	btfss	status,0,c
 23707  003464  D043               	goto	i2l9982
 23708  003466                     i2u943_40:
 23709                           
 23710                           ; BSR set to: 0
 23711  003466  0E03               	movlw	3
 23712  003468  0100               	movlb	0	; () banked
 23713  00346A  15FA               	andwf	_total_time& (0+255),w,b
 23714  00346C  6E2A               	movwf	??_printSortTimer& (0+255),c
 23715  00346E  0E00               	movlw	0
 23716  003470  0100               	movlb	0	; () banked
 23717  003472  15FB               	andwf	(_total_time+1)& (0+255),w,b
 23718  003474  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23719  003476  502A               	movf	??_printSortTimer,w,c
 23720  003478  102B               	iorwf	??_printSortTimer+1,w,c
 23721  00347A  A4D8               	btfss	status,2,c
 23722  00347C  D037               	goto	i2l9982
 23723                           
 23724                           ; BSR set to: 0
 23725                           ;sort.c: 502: if(LATBbits.LATB2){
 23726  00347E  A48A               	btfss	3978,2,c	;volatile
 23727  003480  D00F               	goto	i2l9968
 23728                           
 23729                           ; BSR set to: 0
 23730                           ;sort.c: 504: LATBbits.LATB2 = ~LATBbits.LATB2;
 23731  003482  A48A               	btfss	3978,2,c	;volatile
 23732  003484  D002               	goto	i2u946_40
 23733  003486  0E01               	movlw	1
 23734  003488  D001               	goto	i2u946_46
 23735  00348A                     i2u946_40:
 23736  00348A  0E00               	movlw	0
 23737  00348C                     i2u946_46:
 23738  00348C  0AFF               	xorlw	255
 23739  00348E  6E2A               	movwf	??_printSortTimer& (0+255),c
 23740  003490  462A               	rlncf	??_printSortTimer,f,c
 23741  003492  462A               	rlncf	??_printSortTimer,f,c
 23742  003494  508A               	movf	3978,w,c	;volatile
 23743  003496  182A               	xorwf	??_printSortTimer,w,c
 23744  003498  0BFB               	andlw	-5
 23745  00349A  182A               	xorwf	??_printSortTimer,w,c
 23746  00349C  6E8A               	movwf	3978,c	;volatile
 23747                           
 23748                           ;sort.c: 505: }
 23749  00349E  D026               	goto	i2l9982
 23750  0034A0                     i2l9968:
 23751                           
 23752                           ; BSR set to: 0
 23753                           ;sort.c: 506: else{
 23754                           ;sort.c: 508: for(int i=0; i<46; i++){
 23755  0034A0  0E00               	movlw	0
 23756  0034A2  6E48               	movwf	printSortTimer@i_1160+1,c
 23757  0034A4  0E00               	movlw	0
 23758  0034A6  6E47               	movwf	printSortTimer@i_1160,c
 23759                           
 23760                           ; BSR set to: 0
 23761  0034A8  BE48               	btfsc	printSortTimer@i_1160+1,7,c
 23762  0034AA  D006               	goto	i2l9974
 23763  0034AC  5048               	movf	printSortTimer@i_1160+1,w,c
 23764  0034AE  E11D               	bnz	i2l904
 23765  0034B0  0E2E               	movlw	46
 23766  0034B2  5C47               	subwf	printSortTimer@i_1160,w,c
 23767  0034B4  B0D8               	btfsc	status,0,c
 23768  0034B6  D019               	goto	i2l904
 23769  0034B8                     i2l9974:
 23770                           
 23771                           ;sort.c: 509: LATBbits.LATB2 = !LATBbits.LATB2;
 23772  0034B8  B48A               	btfsc	3978,2,c	;volatile
 23773  0034BA  D003               	goto	i2u948_40
 23774  0034BC  6A2A               	clrf	??_printSortTimer& (0+255),c
 23775  0034BE  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23776  0034C0  D001               	goto	i2u949_48
 23777  0034C2                     i2u948_40:
 23778  0034C2  6A2A               	clrf	??_printSortTimer& (0+255),c
 23779  0034C4                     i2u949_48:
 23780  0034C4  462A               	rlncf	??_printSortTimer,f,c
 23781  0034C6  462A               	rlncf	??_printSortTimer,f,c
 23782  0034C8  508A               	movf	3978,w,c	;volatile
 23783  0034CA  182A               	xorwf	??_printSortTimer,w,c
 23784  0034CC  0BFB               	andlw	-5
 23785  0034CE  182A               	xorwf	??_printSortTimer,w,c
 23786  0034D0  6E8A               	movwf	3978,c	;volatile
 23787                           
 23788                           ;sort.c: 510: delay_ms(45-i);
 23789  0034D2  5047               	movf	printSortTimer@i_1160,w,c
 23790  0034D4  0800               	sublw	0
 23791  0034D6  0F2D               	addlw	45
 23792  0034D8  ECA4  F02D         	call	i2_delay_ms
 23793  0034DC  4A47               	infsnz	printSortTimer@i_1160,f,c
 23794  0034DE  2A48               	incf	printSortTimer@i_1160+1,f,c
 23795  0034E0  BE48               	btfsc	printSortTimer@i_1160+1,7,c
 23796  0034E2  D7EA               	goto	i2l9974
 23797  0034E4  5048               	movf	printSortTimer@i_1160+1,w,c
 23798  0034E6  E101               	bnz	i2u950_40
 23799  0034E8  D7E3               	goto	L20
 23800  0034EA                     i2u950_40:
 23801  0034EA                     i2l904:
 23802                           
 23803                           ;sort.c: 511: }
 23804                           ;sort.c: 512: LATBbits.LATB2 = 1;
 23805  0034EA  848A               	bsf	3978,2,c	;volatile
 23806  0034EC                     i2l9982:
 23807                           
 23808                           ;sort.c: 513: }
 23809                           ;sort.c: 514: }
 23810                           ;sort.c: 516: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23811  0034EC  C145  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23812  0034F0  C146  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23813  0034F4  1E2A               	comf	??_printSortTimer,f,c
 23814  0034F6  1E2B               	comf	??_printSortTimer+1,f,c
 23815  0034F8  4A2A               	infsnz	??_printSortTimer,f,c
 23816  0034FA  2A2B               	incf	??_printSortTimer+1,f,c
 23817  0034FC  0100               	movlb	0	; () banked
 23818  0034FE  51FA               	movf	_total_time& (0+255),w,b
 23819  003500  262A               	addwf	??_printSortTimer,f,c
 23820  003502  0100               	movlb	0	; () banked
 23821  003504  51FB               	movf	(_total_time+1)& (0+255),w,b
 23822  003506  222B               	addwfc	??_printSortTimer+1,f,c
 23823  003508  0E2A               	movlw	42
 23824  00350A  182A               	xorwf	??_printSortTimer,w,c
 23825  00350C  102B               	iorwf	??_printSortTimer+1,w,c
 23826  00350E  B4D8               	btfsc	status,2,c
 23827  003510  D007               	goto	i2l9986
 23828                           
 23829                           ; BSR set to: 0
 23830  003512  0EB3               	movlw	179
 23831  003514  0100               	movlb	0	; () banked
 23832  003516  19FA               	xorwf	_total_time& (0+255),w,b
 23833  003518  0100               	movlb	0	; () banked
 23834  00351A  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23835  00351C  A4D8               	btfss	status,2,c
 23836  00351E  D003               	goto	i2l9988
 23837  003520                     i2l9986:
 23838                           
 23839                           ; BSR set to: 0
 23840                           ;sort.c: 517: machine_state = DoneSorting_state;
 23841  003520  0E02               	movlw	2
 23842  003522  0100               	movlb	0	; () banked
 23843  003524  6FFC               	movwf	_machine_state& (0+255),b
 23844  003526                     i2l9988:
 23845                           
 23846                           ; BSR set to: 0
 23847                           ;sort.c: 519: }
 23848                           ;sort.c: 521: int min = (timeDiff % 3600) / 60;
 23849  003526  0E0E               	movlw	14
 23850  003528  6E04               	movwf	i2___lwmod@divisor+1,c
 23851  00352A  0E10               	movlw	16
 23852  00352C  6E03               	movwf	i2___lwmod@divisor,c
 23853  00352E  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23854  003532  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23855  003536  ECC8  F02A         	call	i2___lwmod	;wreg free
 23856  00353A  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23857  00353E  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23858  003542  0E00               	movlw	0
 23859  003544  6E09               	movwf	i2___lwdiv@divisor+1,c
 23860  003546  0E3C               	movlw	60
 23861  003548  6E08               	movwf	i2___lwdiv@divisor,c
 23862  00354A  ECC1  F029         	call	i2___lwdiv	;wreg free
 23863  00354E  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23864  003552  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23865                           
 23866                           ;sort.c: 522: int sec = (timeDiff % 3600) % 60;
 23867  003556  0E0E               	movlw	14
 23868  003558  6E04               	movwf	i2___lwmod@divisor+1,c
 23869  00355A  0E10               	movlw	16
 23870  00355C  6E03               	movwf	i2___lwmod@divisor,c
 23871  00355E  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23872  003562  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23873  003566  ECC8  F02A         	call	i2___lwmod	;wreg free
 23874  00356A  C001  F043         	movff	?i2___lwmod,_printSortTimer$2562
 23875  00356E  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2562+1
 23876                           
 23877                           ;sort.c: 522: int sec = (timeDiff % 3600) % 60;
 23878  003572  C043  F001         	movff	_printSortTimer$2562,i2___lwmod@dividend
 23879  003576  C044  F002         	movff	_printSortTimer$2562+1,i2___lwmod@dividend+1
 23880  00357A  0E00               	movlw	0
 23881  00357C  6E04               	movwf	i2___lwmod@divisor+1,c
 23882  00357E  0E3C               	movlw	60
 23883  003580  6E03               	movwf	i2___lwmod@divisor,c
 23884  003582  ECC8  F02A         	call	i2___lwmod	;wreg free
 23885  003586  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23886  00358A  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23887                           
 23888                           ;sort.c: 524: lcdInst(0b10000000);;
 23889  00358E  0E80               	movlw	128
 23890  003590  ECFD  F02D         	call	i2_lcdInst
 23891                           
 23892                           ;sort.c: 525: printf("SORTING...     ");
 23893  003594  0E3D               	movlw	low STR_65
 23894  003596  6E0D               	movwf	i2printf@f,c
 23895  003598  0EFE               	movlw	high STR_65
 23896  00359A  6E0E               	movwf	i2printf@f+1,c
 23897  00359C  EC00  F012         	call	i2_printf	;wreg free
 23898                           
 23899                           ;sort.c: 526: lcdInst(0b11000000);;
 23900  0035A0  0EC0               	movlw	192
 23901  0035A2  ECFD  F02D         	call	i2_lcdInst
 23902                           
 23903                           ;sort.c: 527: printf("TIME %d:%02d   ", min, sec);
 23904  0035A6  0E4D               	movlw	low STR_66
 23905  0035A8  6E0D               	movwf	i2printf@f,c
 23906  0035AA  0EFE               	movlw	high STR_66
 23907  0035AC  6E0E               	movwf	i2printf@f+1,c
 23908  0035AE  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23909  0035B2  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23910  0035B6  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23911  0035BA  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23912  0035BE  EC00  F012         	call	i2_printf	;wreg free
 23913  0035C2  0012               	return		;funcret
 23914  0035C4                     __end_of_printSortTimer:
 23915                           	opt stack 0
 23916                           pclatu	equ	0xFFB
 23917                           pclath	equ	0xFFA
 23918                           tblptru	equ	0xFF8
 23919                           tblptrh	equ	0xFF7
 23920                           tblptrl	equ	0xFF6
 23921                           tablat	equ	0xFF5
 23922                           prodh	equ	0xFF4
 23923                           prodl	equ	0xFF3
 23924                           intcon	equ	0xFF2
 23925                           intcon2	equ	0xFF1
 23926                           intcon3	equ	0xFF0
 23927                           indf0	equ	0xFEF
 23928                           postinc0	equ	0xFEE
 23929                           fsr0h	equ	0xFEA
 23930                           fsr0l	equ	0xFE9
 23931                           wreg	equ	0xFE8
 23932                           postdec1	equ	0xFE5
 23933                           fsr1h	equ	0xFE2
 23934                           fsr1l	equ	0xFE1
 23935                           indf2	equ	0xFDF
 23936                           postinc2	equ	0xFDE
 23937                           postdec2	equ	0xFDD
 23938                           fsr2h	equ	0xFDA
 23939                           fsr2l	equ	0xFD9
 23940                           status	equ	0xFD8
 23941                           
 23942 ;; *************** function i2_printf *****************
 23943 ;; Defined at:
 23944 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23945 ;; Parameters:    Size  Location     Type
 23946 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23947 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 23948 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 23949 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 23950 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 23951 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 23952 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 23953 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 23954 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 23955 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 23956 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 23957 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 23958 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 23959 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 23960 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 23961 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 23962 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 23963 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 23964 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 23965 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23966 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 23967 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 23968 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 23969 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 23970 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 23971 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 23972 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 23973 ;;		 -> STR_1(18), 
 23974 ;; Auto vars:     Size  Location     Type
 23975 ;;  printf          4    0        struct .
 23976 ;;  printf          2   39[COMRAM] int 
 23977 ;;  printf          2   35[COMRAM] unsigned int 
 23978 ;;  printf          2   33[COMRAM] unsigned int 
 23979 ;;  printf          2   31[COMRAM] PTR void [1]
 23980 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23981 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23982 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 23983 ;;		 -> printRTC@month(4), UI@month(4), 
 23984 ;;  printf          1   38[COMRAM] char 
 23985 ;;  printf          1   37[COMRAM] unsigned char 
 23986 ;;  printf          1   28[COMRAM] char 
 23987 ;; Return value:  Size  Location     Type
 23988 ;;                  2   12[COMRAM] int 
 23989 ;; Registers used:
 23990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23991 ;; Tracked objects:
 23992 ;;		On entry : 0/0
 23993 ;;		On exit  : 0/0
 23994 ;;		Unchanged: 0/0
 23995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23996 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23997 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23998 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23999 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24000 ;;Total ram usage:       29 bytes
 24001 ;; Hardware stack levels used:    1
 24002 ;; Hardware stack levels required when called:    2
 24003 ;; This function calls:
 24004 ;;		i2___lwdiv
 24005 ;;		i2___lwmod
 24006 ;;		i2___wmul
 24007 ;;		i2_isdigit
 24008 ;;		i2_putch
 24009 ;; This function is called by:
 24010 ;;		_change_state_to_menu_11
 24011 ;;		_change_state_to_menu_23
 24012 ;;		_change_state_to_logs_11
 24013 ;;		_change_state_to_logs_12
 24014 ;;		_change_state_to_logs_22
 24015 ;;		_change_state_to_logs_23
 24016 ;;		_change_state_to_logs_33
 24017 ;;		_change_state_to_logs_34
 24018 ;;		_printSortTimer
 24019 ;;		i2_change_state_to_menu_start
 24020 ;;		i2_change_state_to_menu_12
 24021 ;;		i2_change_state_to_menu_22
 24022 ;;		i2_printRTC
 24023 ;; This function uses a non-reentrant model
 24024 ;;
 24025                           
 24026                           	psect	text87
 24027  002400                     __ptext87:
 24028                           	opt stack 0
 24029  002400                     i2_printf:
 24030                           	opt stack 20
 24031                           
 24032                           ;doprnt.c: 466: va_list ap;
 24033                           ;doprnt.c: 499: signed char c;
 24034                           ;doprnt.c: 501: int width;
 24035                           ;doprnt.c: 506: signed char prec;
 24036                           ;doprnt.c: 508: unsigned char flag;
 24037                           ;doprnt.c: 523: union {
 24038                           ;doprnt.c: 524: unsigned long vd;
 24039                           ;doprnt.c: 525: double integ;
 24040                           ;doprnt.c: 526: } tmpval;
 24041                           ;doprnt.c: 528: unsigned int val;
 24042                           ;doprnt.c: 529: unsigned len;
 24043                           ;doprnt.c: 530: const char * cp;
 24044                           ;doprnt.c: 533: *ap = __va_start();
 24045                           
 24046                           ;incstack = 0
 24047  002400  0E0F               	movlw	low (?i2_printf+2)
 24048  002402  6E20               	movwf	i2printf@ap,c
 24049  002404  0E00               	movlw	high (?i2_printf+2)
 24050  002406  6E21               	movwf	i2printf@ap+1,c
 24051                           
 24052                           ;doprnt.c: 536: while(c = *f++) {
 24053  002408  D1A4               	goto	i2l7110
 24054  00240A                     i2l6980:
 24055                           
 24056                           ;doprnt.c: 538: if(c != '%')
 24057  00240A  0E25               	movlw	37
 24058  00240C  1827               	xorwf	i2printf@c,w,c
 24059  00240E  B4D8               	btfsc	status,2,c
 24060  002410  D004               	goto	i2l6984
 24061                           
 24062                           ;doprnt.c: 540: {
 24063                           ;doprnt.c: 541: (putch(c) );
 24064  002412  5027               	movf	i2printf@c,w,c
 24065  002414  ECF7  F02D         	call	i2_putch
 24066                           
 24067                           ;doprnt.c: 542: continue;
 24068  002418  D19C               	goto	i2l7110
 24069  00241A                     i2l6984:
 24070                           
 24071                           ;doprnt.c: 543: }
 24072                           ;doprnt.c: 546: width = 0;
 24073  00241A  0E00               	movlw	0
 24074  00241C  6E29               	movwf	i2printf@width+1,c
 24075  00241E  0E00               	movlw	0
 24076  002420  6E28               	movwf	i2printf@width,c
 24077                           
 24078                           ;doprnt.c: 548: flag = 0;
 24079  002422  0E00               	movlw	0
 24080  002424  6E26               	movwf	i2printf@flag,c
 24081                           
 24082                           ;doprnt.c: 551: switch(*f) {
 24083                           
 24084                           ;doprnt.c: 550: for(;;) {
 24085  002426  D003               	goto	i2l6990
 24086  002428                     i2l6986:
 24087                           
 24088                           ;doprnt.c: 580: flag |= 0x04;
 24089  002428  8426               	bsf	i2printf@flag,2,c
 24090                           
 24091                           ;doprnt.c: 581: f++;
 24092  00242A  4A0D               	infsnz	i2printf@f,f,c
 24093  00242C  2A0E               	incf	i2printf@f+1,f,c
 24094  00242E                     i2l6990:
 24095  00242E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24096  002432  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24097  002436                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24098  002436  6AF8               	clrf	tblptru,c
 24099  002438                     	endif
 24100  002438                     	if	0	;tblptru may be non-zero
 24101  002438                     	endif
 24102  002438  0008               	tblrd		*
 24103  00243A  50F5               	movf	tablat,w,c
 24104                           
 24105                           ; Switch size 1, requested type "space"
 24106                           ; Number of cases is 1, Range of values is 48 to 48
 24107                           ; switch strategies available:
 24108                           ; Name         Instructions Cycles
 24109                           ; simple_byte            4     3 (average)
 24110                           ;	Chosen strategy is simple_byte
 24111  00243C  0A30               	xorlw	48	; case 48
 24112  00243E  B4D8               	btfsc	status,2,c
 24113  002440  D7F3               	goto	i2l6986
 24114                           
 24115                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24116                           
 24117                           ;doprnt.c: 586: }
 24118                           
 24119                           ;doprnt.c: 585: break;
 24120  002442  C00D  FFF6         	movff	i2printf@f,tblptrl
 24121  002446  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24122  00244A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24123  00244A  6AF8               	clrf	tblptru,c
 24124  00244C                     	endif
 24125  00244C                     	if	0	;tblptru may be non-zero
 24126  00244C                     	endif
 24127  00244C  0008               	tblrd		*
 24128  00244E  50F5               	movf	tablat,w,c
 24129  002450  EC87  F02D         	call	i2_isdigit
 24130  002454  A0D8               	btfss	status,0,c
 24131  002456  D0A6               	goto	i2l7038
 24132                           
 24133                           ;doprnt.c: 598: width = 0;
 24134  002458  0E00               	movlw	0
 24135  00245A  6E29               	movwf	i2printf@width+1,c
 24136  00245C  0E00               	movlw	0
 24137  00245E  6E28               	movwf	i2printf@width,c
 24138  002460                     i2l6996:
 24139                           
 24140                           ;doprnt.c: 600: width *= 10;
 24141  002460  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24142  002464  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24143  002468  0E00               	movlw	0
 24144  00246A  6E04               	movwf	i2___wmul@multiplicand+1,c
 24145  00246C  0E0A               	movlw	10
 24146  00246E  6E03               	movwf	i2___wmul@multiplicand,c
 24147  002470  EC2D  F02D         	call	i2___wmul	;wreg free
 24148  002474  C001  F028         	movff	?i2___wmul,i2printf@width
 24149  002478  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24150                           
 24151                           ;doprnt.c: 601: width += *f++ - '0';
 24152  00247C  0ED0               	movlw	208
 24153  00247E  6E19               	movwf	??i2_printf& (0+255),c
 24154  002480  0EFF               	movlw	255
 24155  002482  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24156  002484  C00D  FFF6         	movff	i2printf@f,tblptrl
 24157  002488  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24158  00248C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24159  00248C  6AF8               	clrf	tblptru,c
 24160  00248E                     	endif
 24161  00248E                     	if	0	;tblptru may be non-zero
 24162  00248E                     	endif
 24163  00248E  0008               	tblrd		*
 24164  002490  50F5               	movf	tablat,w,c
 24165  002492  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24166  002494  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24167  002496  5019               	movf	??i2_printf,w,c
 24168  002498  261B               	addwf	??i2_printf+2,f,c
 24169  00249A  501A               	movf	??i2_printf+1,w,c
 24170  00249C  221C               	addwfc	??i2_printf+3,f,c
 24171  00249E  501B               	movf	??i2_printf+2,w,c
 24172  0024A0  2628               	addwf	i2printf@width,f,c
 24173  0024A2  501C               	movf	??i2_printf+3,w,c
 24174  0024A4  2229               	addwfc	i2printf@width+1,f,c
 24175  0024A6  4A0D               	infsnz	i2printf@f,f,c
 24176  0024A8  2A0E               	incf	i2printf@f+1,f,c
 24177                           
 24178                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24179  0024AA  C00D  FFF6         	movff	i2printf@f,tblptrl
 24180  0024AE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24181  0024B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24182  0024B2  6AF8               	clrf	tblptru,c
 24183  0024B4                     	endif
 24184  0024B4                     	if	0	;tblptru may be non-zero
 24185  0024B4                     	endif
 24186  0024B4  0008               	tblrd		*
 24187  0024B6  50F5               	movf	tablat,w,c
 24188  0024B8  EC87  F02D         	call	i2_isdigit
 24189  0024BC  A0D8               	btfss	status,0,c
 24190  0024BE  D072               	goto	i2l7038
 24191  0024C0  D7CF               	goto	i2l6996
 24192  0024C2                     i2l7004:
 24193                           
 24194                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24195  0024C2  C020  FFD9         	movff	i2printf@ap,fsr2l
 24196  0024C6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24197  0024CA  CFDE F01E          	movff	postinc2,i2printf@cp
 24198  0024CE  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24199  0024D2  0E02               	movlw	2
 24200  0024D4  2620               	addwf	i2printf@ap,f,c
 24201  0024D6  0E00               	movlw	0
 24202  0024D8  2221               	addwfc	i2printf@ap+1,f,c
 24203                           
 24204                           ;doprnt.c: 740: if(!cp)
 24205  0024DA  501E               	movf	i2printf@cp,w,c
 24206  0024DC  101F               	iorwf	i2printf@cp+1,w,c
 24207  0024DE  A4D8               	btfss	status,2,c
 24208  0024E0  D004               	goto	i2l7012
 24209                           
 24210                           ;doprnt.c: 741: cp = "(null)";
 24211  0024E2  0EB5               	movlw	low STR_131
 24212  0024E4  6E1E               	movwf	i2printf@cp,c
 24213  0024E6  0EFF               	movlw	high STR_131
 24214  0024E8  6E1F               	movwf	i2printf@cp+1,c
 24215  0024EA                     i2l7012:
 24216                           
 24217                           ;doprnt.c: 745: len = 0;
 24218  0024EA  0E00               	movlw	0
 24219  0024EC  6E23               	movwf	i2printf@len+1,c
 24220  0024EE  0E00               	movlw	0
 24221  0024F0  6E22               	movwf	i2printf@len,c
 24222                           
 24223                           ;doprnt.c: 746: while(cp[len])
 24224  0024F2  D002               	goto	i2l7016
 24225  0024F4                     i2l7014:
 24226                           
 24227                           ;doprnt.c: 747: len++;
 24228  0024F4  4A22               	infsnz	i2printf@len,f,c
 24229  0024F6  2A23               	incf	i2printf@len+1,f,c
 24230  0024F8                     i2l7016:
 24231  0024F8  5022               	movf	i2printf@len,w,c
 24232  0024FA  241E               	addwf	i2printf@cp,w,c
 24233  0024FC  6E19               	movwf	??i2_printf& (0+255),c
 24234  0024FE  5023               	movf	i2printf@len+1,w,c
 24235  002500  201F               	addwfc	i2printf@cp+1,w,c
 24236  002502  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24237  002504  C019  FFF6         	movff	??i2_printf,tblptrl
 24238  002508  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24239  00250C  0E00               	movlw	low (__mediumconst shr (0+16))
 24240  00250E  6EF8               	movwf	tblptru,c
 24241  002510  0E0F               	movlw	(high __ramtop+-1)
 24242  002512  64F7               	cpfsgt	tblptrh,c
 24243  002514  D003               	bra	i2u567_47
 24244  002516  0008               	tblrd		*
 24245  002518  50F5               	movf	tablat,w,c
 24246  00251A  D005               	bra	i2u567_40
 24247  00251C                     i2u567_47:
 24248  00251C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24249  002520  CFF7 FFEA          	movff	tblptrh,fsr0h
 24250  002524  50EF               	movf	indf0,w,c
 24251  002526                     i2u567_40:
 24252  002526  0900               	iorlw	0
 24253  002528  A4D8               	btfss	status,2,c
 24254  00252A  D7E4               	goto	i2l7014
 24255                           
 24256                           ;doprnt.c: 757: if(width > len)
 24257  00252C  5028               	movf	i2printf@width,w,c
 24258  00252E  5C22               	subwf	i2printf@len,w,c
 24259  002530  5029               	movf	i2printf@width+1,w,c
 24260  002532  5823               	subwfb	i2printf@len+1,w,c
 24261  002534  B0D8               	btfsc	status,0,c
 24262  002536  D005               	goto	i2l7022
 24263                           
 24264                           ;doprnt.c: 758: width -= len;
 24265  002538  5022               	movf	i2printf@len,w,c
 24266  00253A  5E28               	subwf	i2printf@width,f,c
 24267  00253C  5023               	movf	i2printf@len+1,w,c
 24268  00253E  5A29               	subwfb	i2printf@width+1,f,c
 24269  002540  D008               	goto	i2l7026
 24270  002542                     i2l7022:
 24271                           
 24272                           ;doprnt.c: 759: else
 24273                           ;doprnt.c: 760: width = 0;
 24274  002542  0E00               	movlw	0
 24275  002544  6E29               	movwf	i2printf@width+1,c
 24276  002546  0E00               	movlw	0
 24277  002548  6E28               	movwf	i2printf@width,c
 24278                           
 24279                           ;doprnt.c: 764: while(width--)
 24280  00254A  D003               	goto	i2l7026
 24281  00254C                     i2l7024:
 24282                           
 24283                           ;doprnt.c: 765: (putch(' ') );
 24284  00254C  0E20               	movlw	32
 24285  00254E  ECF7  F02D         	call	i2_putch
 24286  002552                     i2l7026:
 24287  002552  0628               	decf	i2printf@width,f,c
 24288  002554  A0D8               	btfss	status,0,c
 24289  002556  0629               	decf	i2printf@width+1,f,c
 24290  002558  2828               	incf	i2printf@width,w,c
 24291  00255A  E1F8               	bnz	i2l7024
 24292  00255C  2829               	incf	i2printf@width+1,w,c
 24293  00255E  B4D8               	btfsc	status,2,c
 24294  002560  D016               	goto	i2l7032
 24295  002562  D7F4               	goto	i2l7024
 24296  002564                     i2l7028:
 24297                           
 24298                           ;doprnt.c: 768: (putch(*cp++) );
 24299  002564  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24300  002568  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24301  00256C  0E00               	movlw	low (__mediumconst shr (0+16))
 24302  00256E  6EF8               	movwf	tblptru,c
 24303  002570  0E0F               	movlw	(high __ramtop+-1)
 24304  002572  64F7               	cpfsgt	tblptrh,c
 24305  002574  D003               	bra	i2u571_47
 24306  002576  0008               	tblrd		*
 24307  002578  50F5               	movf	tablat,w,c
 24308  00257A  D005               	bra	i2u571_40
 24309  00257C                     i2u571_47:
 24310  00257C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24311  002580  CFF7 FFEA          	movff	tblptrh,fsr0h
 24312  002584  50EF               	movf	indf0,w,c
 24313  002586                     i2u571_40:
 24314  002586  ECF7  F02D         	call	i2_putch
 24315  00258A  4A1E               	infsnz	i2printf@cp,f,c
 24316  00258C  2A1F               	incf	i2printf@cp+1,f,c
 24317  00258E                     i2l7032:
 24318  00258E  0622               	decf	i2printf@len,f,c
 24319  002590  A0D8               	btfss	status,0,c
 24320  002592  0623               	decf	i2printf@len+1,f,c
 24321  002594  2822               	incf	i2printf@len,w,c
 24322  002596  E1E6               	bnz	i2l7028
 24323  002598  2823               	incf	i2printf@len+1,w,c
 24324  00259A  B4D8               	btfsc	status,2,c
 24325  00259C  D0DA               	goto	i2l7110
 24326  00259E  D7E2               	goto	i2l7028
 24327  0025A0                     i2l7034:
 24328                           
 24329                           ;doprnt.c: 818: flag |= 0x40;
 24330  0025A0  8C26               	bsf	i2printf@flag,6,c
 24331                           
 24332                           ;doprnt.c: 822: }
 24333                           
 24334                           ;doprnt.c: 819: break;
 24335  0025A2  D01B               	goto	i2l1522
 24336  0025A4                     i2l7038:
 24337  0025A4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24338  0025A8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24339  0025AC  4A0D               	infsnz	i2printf@f,f,c
 24340  0025AE  2A0E               	incf	i2printf@f+1,f,c
 24341  0025B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24342  0025B0  6AF8               	clrf	tblptru,c
 24343  0025B2                     	endif
 24344  0025B2                     	if	0	;tblptru may be non-zero
 24345  0025B2                     	endif
 24346  0025B2  0008               	tblrd		*
 24347  0025B4  CFF5 F027          	movff	tablat,i2printf@c
 24348  0025B8  5027               	movf	i2printf@c,w,c
 24349                           
 24350                           ; Switch size 1, requested type "space"
 24351                           ; Number of cases is 5, Range of values is 0 to 117
 24352                           ; switch strategies available:
 24353                           ; Name         Instructions Cycles
 24354                           ; simple_byte           16     9 (average)
 24355                           ;	Chosen strategy is simple_byte
 24356  0025BA  0A00               	xorlw	0	; case 0
 24357  0025BC  B4D8               	btfsc	status,2,c
 24358  0025BE  0012               	return	
 24359  0025C0  0A64               	xorlw	100	; case 100
 24360  0025C2  B4D8               	btfsc	status,2,c
 24361  0025C4  D00A               	goto	i2l1522
 24362  0025C6  0A0D               	xorlw	13	; case 105
 24363  0025C8  B4D8               	btfsc	status,2,c
 24364  0025CA  D007               	goto	i2l1522
 24365  0025CC  0A1A               	xorlw	26	; case 115
 24366  0025CE  B4D8               	btfsc	status,2,c
 24367  0025D0  D778               	goto	i2l7004
 24368  0025D2  0A06               	xorlw	6	; case 117
 24369  0025D4  B4D8               	btfsc	status,2,c
 24370  0025D6  D7E4               	goto	i2l7034
 24371  0025D8  D0BC               	goto	i2l7110
 24372  0025DA                     i2l1522:
 24373                           
 24374                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24375  0025DA  BC26               	btfsc	i2printf@flag,6,c
 24376  0025DC  D015               	goto	i2l7050
 24377                           
 24378                           ;doprnt.c: 1253: {
 24379                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24380  0025DE  C020  FFD9         	movff	i2printf@ap,fsr2l
 24381  0025E2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24382  0025E6  CFDE F024          	movff	postinc2,i2printf@val
 24383  0025EA  CFDD F025          	movff	postdec2,i2printf@val+1
 24384  0025EE  0E02               	movlw	2
 24385  0025F0  2620               	addwf	i2printf@ap,f,c
 24386  0025F2  0E00               	movlw	0
 24387  0025F4  2221               	addwfc	i2printf@ap+1,f,c
 24388                           
 24389                           ;doprnt.c: 1261: if((int)val < 0) {
 24390  0025F6  AE25               	btfss	i2printf@val+1,7,c
 24391  0025F8  D013               	goto	i2l7054
 24392                           
 24393                           ;doprnt.c: 1262: flag |= 0x03;
 24394  0025FA  0E03               	movlw	3
 24395  0025FC  1226               	iorwf	i2printf@flag,f,c
 24396                           
 24397                           ;doprnt.c: 1263: val = -val;
 24398  0025FE  6C24               	negf	i2printf@val,c
 24399  002600  1E25               	comf	i2printf@val+1,f,c
 24400  002602  B0D8               	btfsc	status,0,c
 24401  002604  2A25               	incf	i2printf@val+1,f,c
 24402                           
 24403                           ;doprnt.c: 1264: }
 24404                           ;doprnt.c: 1266: }
 24405  002606  D00C               	goto	i2l7054
 24406  002608                     i2l7050:
 24407                           
 24408                           ;doprnt.c: 1268: else
 24409                           ;doprnt.c: 1273: {
 24410                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24411  002608  C020  FFD9         	movff	i2printf@ap,fsr2l
 24412  00260C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24413  002610  CFDE F024          	movff	postinc2,i2printf@val
 24414  002614  CFDD F025          	movff	postdec2,i2printf@val+1
 24415  002618  0E02               	movlw	2
 24416  00261A  2620               	addwf	i2printf@ap,f,c
 24417  00261C  0E00               	movlw	0
 24418  00261E  2221               	addwfc	i2printf@ap+1,f,c
 24419  002620                     i2l7054:
 24420                           
 24421                           ;doprnt.c: 1287: }
 24422                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24423  002620  0E01               	movlw	1
 24424  002622  6E27               	movwf	i2printf@c,c
 24425  002624                     i2l7056:
 24426  002624  0E05               	movlw	5
 24427  002626  1827               	xorwf	i2printf@c,w,c
 24428  002628  B4D8               	btfsc	status,2,c
 24429  00262A  D015               	goto	i2l7068
 24430                           
 24431                           ;doprnt.c: 1306: if(val < dpowers[c])
 24432  00262C  5027               	movf	i2printf@c,w,c
 24433  00262E  0D02               	mullw	2
 24434  002630  0E9C               	movlw	low _dpowers
 24435  002632  24F3               	addwf	prodl,w,c
 24436  002634  6EF6               	movwf	tblptrl,c
 24437  002636  0EFA               	movlw	high _dpowers
 24438  002638  20F4               	addwfc	prodh,w,c
 24439  00263A  6EF7               	movwf	tblptrh,c
 24440  00263C                     	if	1	;There are 3 active tblptr bytes
 24441  00263C  6AF8               	clrf	tblptru,c
 24442  00263E  0E00               	movlw	low (__mediumconst shr (0+16))
 24443  002640  22F8               	addwfc	tblptru,f,c
 24444  002642                     	endif
 24445  002642  0009               	tblrd		*+
 24446  002644  50F5               	movf	tablat,w,c
 24447  002646  5C24               	subwf	i2printf@val,w,c
 24448  002648  0009               	tblrd		*+
 24449  00264A  50F5               	movf	tablat,w,c
 24450  00264C  5825               	subwfb	i2printf@val+1,w,c
 24451  00264E  A0D8               	btfss	status,0,c
 24452  002650  D002               	goto	i2l7068
 24453                           
 24454                           ;doprnt.c: 1307: break;
 24455  002652  2A27               	incf	i2printf@c,f,c
 24456  002654  D7E7               	goto	i2l7056
 24457  002656                     i2l7068:
 24458                           
 24459                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24460  002656  5028               	movf	i2printf@width,w,c
 24461  002658  1029               	iorwf	i2printf@width+1,w,c
 24462  00265A  B4D8               	btfsc	status,2,c
 24463  00265C  D009               	goto	i2l7074
 24464  00265E  C026  F019         	movff	i2printf@flag,??i2_printf
 24465  002662  0E03               	movlw	3
 24466  002664  1619               	andwf	??i2_printf,f,c
 24467  002666  B4D8               	btfsc	status,2,c
 24468  002668  D003               	goto	i2l7074
 24469                           
 24470                           ;doprnt.c: 1346: width--;
 24471  00266A  0628               	decf	i2printf@width,f,c
 24472  00266C  A0D8               	btfss	status,0,c
 24473  00266E  0629               	decf	i2printf@width+1,f,c
 24474  002670                     i2l7074:
 24475                           
 24476                           ;doprnt.c: 1381: if(width > c)
 24477  002670  0E80               	movlw	128
 24478  002672  BE27               	btfsc	i2printf@c,7,c
 24479  002674  0E7F               	movlw	127
 24480  002676  6E19               	movwf	??i2_printf& (0+255),c
 24481  002678  5028               	movf	i2printf@width,w,c
 24482  00267A  5C27               	subwf	i2printf@c,w,c
 24483  00267C  5029               	movf	i2printf@width+1,w,c
 24484  00267E  0A80               	xorlw	128
 24485  002680  5819               	subwfb	??i2_printf& (0+255),w,c
 24486  002682  B0D8               	btfsc	status,0,c
 24487  002684  D007               	goto	i2l7078
 24488                           
 24489                           ;doprnt.c: 1382: width -= c;
 24490  002686  5027               	movf	i2printf@c,w,c
 24491  002688  5E28               	subwf	i2printf@width,f,c
 24492  00268A  0E00               	movlw	0
 24493  00268C  BE27               	btfsc	i2printf@c,7,c
 24494  00268E  0EFF               	movlw	255
 24495  002690  5A29               	subwfb	i2printf@width+1,f,c
 24496  002692  D004               	goto	i2l7080
 24497  002694                     i2l7078:
 24498                           
 24499                           ;doprnt.c: 1383: else
 24500                           ;doprnt.c: 1384: width = 0;
 24501  002694  0E00               	movlw	0
 24502  002696  6E29               	movwf	i2printf@width+1,c
 24503  002698  0E00               	movlw	0
 24504  00269A  6E28               	movwf	i2printf@width,c
 24505  00269C                     i2l7080:
 24506                           
 24507                           ;doprnt.c: 1387: if(flag & 0x04) {
 24508  00269C  A426               	btfss	i2printf@flag,2,c
 24509  00269E  D014               	goto	i2l7092
 24510                           
 24511                           ;doprnt.c: 1392: if(flag & 0x03)
 24512  0026A0  C026  F019         	movff	i2printf@flag,??i2_printf
 24513  0026A4  0E03               	movlw	3
 24514  0026A6  1619               	andwf	??i2_printf,f,c
 24515  0026A8  B4D8               	btfsc	status,2,c
 24516  0026AA  D003               	goto	i2l7086
 24517                           
 24518                           ;doprnt.c: 1393: (putch('-') );
 24519  0026AC  0E2D               	movlw	45
 24520  0026AE  ECF7  F02D         	call	i2_putch
 24521  0026B2                     i2l7086:
 24522                           
 24523                           ;doprnt.c: 1415: if(width)
 24524  0026B2  5028               	movf	i2printf@width,w,c
 24525  0026B4  1029               	iorwf	i2printf@width+1,w,c
 24526  0026B6  B4D8               	btfsc	status,2,c
 24527  0026B8  D01E               	goto	i2l7102
 24528                           
 24529                           ;doprnt.c: 1417: (putch('0') );
 24530                           
 24531                           ;doprnt.c: 1416: do
 24532  0026BA  0E30               	movlw	48
 24533  0026BC  ECF7  F02D         	call	i2_putch
 24534                           
 24535                           ;doprnt.c: 1418: while(--width);
 24536  0026C0  0628               	decf	i2printf@width,f,c
 24537  0026C2  A0D8               	btfss	status,0,c
 24538  0026C4  0629               	decf	i2printf@width+1,f,c
 24539  0026C6  D7F5               	goto	i2l7086
 24540  0026C8                     i2l7092:
 24541                           
 24542                           ;doprnt.c: 1422: {
 24543                           ;doprnt.c: 1424: if(width
 24544                           ;doprnt.c: 1428: )
 24545  0026C8  5028               	movf	i2printf@width,w,c
 24546  0026CA  1029               	iorwf	i2printf@width+1,w,c
 24547  0026CC  B4D8               	btfsc	status,2,c
 24548  0026CE  D00A               	goto	i2l7098
 24549  0026D0                     i2l7094:
 24550                           
 24551                           ;doprnt.c: 1430: (putch(' ') );
 24552  0026D0  0E20               	movlw	32
 24553  0026D2  ECF7  F02D         	call	i2_putch
 24554                           
 24555                           ;doprnt.c: 1431: while(--width);
 24556  0026D6  0628               	decf	i2printf@width,f,c
 24557  0026D8  A0D8               	btfss	status,0,c
 24558  0026DA  0629               	decf	i2printf@width+1,f,c
 24559  0026DC  5028               	movf	i2printf@width,w,c
 24560  0026DE  1029               	iorwf	i2printf@width+1,w,c
 24561  0026E0  A4D8               	btfss	status,2,c
 24562  0026E2  D7F6               	goto	i2l7094
 24563  0026E4                     i2l7098:
 24564                           
 24565                           ;doprnt.c: 1438: if(flag & 0x03)
 24566  0026E4  C026  F019         	movff	i2printf@flag,??i2_printf
 24567  0026E8  0E03               	movlw	3
 24568  0026EA  1619               	andwf	??i2_printf,f,c
 24569  0026EC  B4D8               	btfsc	status,2,c
 24570  0026EE  D003               	goto	i2l7102
 24571                           
 24572                           ;doprnt.c: 1439: (putch('-') );
 24573  0026F0  0E2D               	movlw	45
 24574  0026F2  ECF7  F02D         	call	i2_putch
 24575  0026F6                     i2l7102:
 24576                           
 24577                           ;doprnt.c: 1469: }
 24578                           ;doprnt.c: 1472: prec = c;
 24579  0026F6  C027  F01D         	movff	i2printf@c,i2printf@prec
 24580                           
 24581                           ;doprnt.c: 1474: while(prec--) {
 24582  0026FA  D027               	goto	i2l7108
 24583  0026FC                     i2l7104:
 24584                           
 24585                           ;doprnt.c: 1478: {
 24586                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24587  0026FC  501D               	movf	i2printf@prec,w,c
 24588  0026FE  0D02               	mullw	2
 24589  002700  0E9C               	movlw	low _dpowers
 24590  002702  24F3               	addwf	prodl,w,c
 24591  002704  6EF6               	movwf	tblptrl,c
 24592  002706  0EFA               	movlw	high _dpowers
 24593  002708  20F4               	addwfc	prodh,w,c
 24594  00270A  6EF7               	movwf	tblptrh,c
 24595  00270C                     	if	1	;There are 3 active tblptr bytes
 24596  00270C  6AF8               	clrf	tblptru,c
 24597  00270E  0E00               	movlw	low (__mediumconst shr (0+16))
 24598  002710  22F8               	addwfc	tblptru,f,c
 24599  002712                     	endif
 24600  002712  0009               	tblrd		*+
 24601  002714  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24602  002718  000A               	tblrd		*-
 24603  00271A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24604  00271E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24605  002722  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24606  002726  ECC1  F029         	call	i2___lwdiv	;wreg free
 24607  00272A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24608  00272E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24609  002732  0E00               	movlw	0
 24610  002734  6E04               	movwf	i2___lwmod@divisor+1,c
 24611  002736  0E0A               	movlw	10
 24612  002738  6E03               	movwf	i2___lwmod@divisor,c
 24613  00273A  ECC8  F02A         	call	i2___lwmod	;wreg free
 24614  00273E  5001               	movf	?i2___lwmod,w,c
 24615  002740  0F30               	addlw	48
 24616  002742  6E27               	movwf	i2printf@c,c
 24617                           
 24618                           ;doprnt.c: 1523: }
 24619                           ;doprnt.c: 1524: (putch(c) );
 24620  002744  5027               	movf	i2printf@c,w,c
 24621  002746  ECF7  F02D         	call	i2_putch
 24622  00274A                     i2l7108:
 24623  00274A  061D               	decf	i2printf@prec,f,c
 24624  00274C  281D               	incf	i2printf@prec,w,c
 24625  00274E  A4D8               	btfss	status,2,c
 24626  002750  D7D5               	goto	i2l7104
 24627  002752                     i2l7110:
 24628  002752  C00D  FFF6         	movff	i2printf@f,tblptrl
 24629  002756  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24630  00275A  4A0D               	infsnz	i2printf@f,f,c
 24631  00275C  2A0E               	incf	i2printf@f+1,f,c
 24632  00275E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24633  00275E  6AF8               	clrf	tblptru,c
 24634  002760                     	endif
 24635  002760                     	if	0	;tblptru may be non-zero
 24636  002760                     	endif
 24637  002760  0008               	tblrd		*
 24638  002762  CFF5 F027          	movff	tablat,i2printf@c
 24639  002766  5027               	movf	i2printf@c,w,c
 24640  002768  B4D8               	btfsc	status,2,c
 24641  00276A  0012               	return	
 24642  00276C  D64E               	goto	i2l6980
 24643  00276E                     __end_ofi2_printf:
 24644                           	opt stack 0
 24645                           pclatu	equ	0xFFB
 24646                           pclath	equ	0xFFA
 24647                           tblptru	equ	0xFF8
 24648                           tblptrh	equ	0xFF7
 24649                           tblptrl	equ	0xFF6
 24650                           tablat	equ	0xFF5
 24651                           prodh	equ	0xFF4
 24652                           prodl	equ	0xFF3
 24653                           intcon	equ	0xFF2
 24654                           intcon2	equ	0xFF1
 24655                           intcon3	equ	0xFF0
 24656                           indf0	equ	0xFEF
 24657                           postinc0	equ	0xFEE
 24658                           fsr0h	equ	0xFEA
 24659                           fsr0l	equ	0xFE9
 24660                           wreg	equ	0xFE8
 24661                           postdec1	equ	0xFE5
 24662                           fsr1h	equ	0xFE2
 24663                           fsr1l	equ	0xFE1
 24664                           indf2	equ	0xFDF
 24665                           postinc2	equ	0xFDE
 24666                           postdec2	equ	0xFDD
 24667                           fsr2h	equ	0xFDA
 24668                           fsr2l	equ	0xFD9
 24669                           status	equ	0xFD8
 24670                           
 24671 ;; *************** function i2_putch *****************
 24672 ;; Defined at:
 24673 ;;		line 20 in file "lcd.c"
 24674 ;; Parameters:    Size  Location     Type
 24675 ;;  data            1    wreg     unsigned char 
 24676 ;; Auto vars:     Size  Location     Type
 24677 ;;  data            1    2[COMRAM] unsigned char 
 24678 ;; Return value:  Size  Location     Type
 24679 ;;                  1    wreg      void 
 24680 ;; Registers used:
 24681 ;;		wreg, status,2, status,0, cstack
 24682 ;; Tracked objects:
 24683 ;;		On entry : 0/0
 24684 ;;		On exit  : 0/0
 24685 ;;		Unchanged: 0/0
 24686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24691 ;;Total ram usage:        1 bytes
 24692 ;; Hardware stack levels used:    1
 24693 ;; Hardware stack levels required when called:    1
 24694 ;; This function calls:
 24695 ;;		i2_lcdNibble
 24696 ;; This function is called by:
 24697 ;;		i2_printf
 24698 ;; This function uses a non-reentrant model
 24699 ;;
 24700                           
 24701                           	psect	text88
 24702  005BEE                     __ptext88:
 24703                           	opt stack 0
 24704  005BEE                     i2_putch:
 24705                           	opt stack 20
 24706                           
 24707                           ;incstack = 0
 24708                           ;i2putch@data stored from wreg
 24709  005BEE  6E03               	movwf	i2putch@data,c
 24710                           
 24711                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24712  005BF0  848C               	bsf	3980,2,c	;volatile
 24713                           
 24714                           ;lcd.c: 22: lcdNibble(data);
 24715  005BF2  5003               	movf	i2putch@data,w,c
 24716  005BF4  EC94  F029         	call	i2_lcdNibble
 24717  005BF8  0012               	return		;funcret
 24718  005BFA                     __end_ofi2_putch:
 24719                           	opt stack 0
 24720                           pclatu	equ	0xFFB
 24721                           pclath	equ	0xFFA
 24722                           tblptru	equ	0xFF8
 24723                           tblptrh	equ	0xFF7
 24724                           tblptrl	equ	0xFF6
 24725                           tablat	equ	0xFF5
 24726                           prodh	equ	0xFF4
 24727                           prodl	equ	0xFF3
 24728                           intcon	equ	0xFF2
 24729                           intcon2	equ	0xFF1
 24730                           intcon3	equ	0xFF0
 24731                           indf0	equ	0xFEF
 24732                           postinc0	equ	0xFEE
 24733                           fsr0h	equ	0xFEA
 24734                           fsr0l	equ	0xFE9
 24735                           wreg	equ	0xFE8
 24736                           postdec1	equ	0xFE5
 24737                           fsr1h	equ	0xFE2
 24738                           fsr1l	equ	0xFE1
 24739                           indf2	equ	0xFDF
 24740                           postinc2	equ	0xFDE
 24741                           postdec2	equ	0xFDD
 24742                           fsr2h	equ	0xFDA
 24743                           fsr2l	equ	0xFD9
 24744                           status	equ	0xFD8
 24745                           
 24746 ;; *************** function i2_isdigit *****************
 24747 ;; Defined at:
 24748 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24749 ;; Parameters:    Size  Location     Type
 24750 ;;  c               1    wreg     unsigned char 
 24751 ;; Auto vars:     Size  Location     Type
 24752 ;;  c               1    2[COMRAM] unsigned char 
 24753 ;; Return value:  Size  Location     Type
 24754 ;;		None               void
 24755 ;; Registers used:
 24756 ;;		wreg, status,2, status,0
 24757 ;; Tracked objects:
 24758 ;;		On entry : 0/0
 24759 ;;		On exit  : 0/0
 24760 ;;		Unchanged: 0/0
 24761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24763 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24764 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24765 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24766 ;;Total ram usage:        3 bytes
 24767 ;; Hardware stack levels used:    1
 24768 ;; This function calls:
 24769 ;;		Nothing
 24770 ;; This function is called by:
 24771 ;;		i2_printf
 24772 ;; This function uses a non-reentrant model
 24773 ;;
 24774                           
 24775                           	psect	text89
 24776  005B0E                     __ptext89:
 24777                           	opt stack 0
 24778  005B0E                     i2_isdigit:
 24779                           	opt stack 21
 24780                           
 24781                           ;incstack = 0
 24782                           ;i2isdigit@c stored from wreg
 24783  005B0E  6E03               	movwf	i2isdigit@c,c
 24784  005B10  0E00               	movlw	0
 24785  005B12  6E02               	movwf	i2_isdigit$2065,c
 24786  005B14  0E3A               	movlw	58
 24787  005B16  6003               	cpfslt	i2isdigit@c,c
 24788  005B18  D005               	goto	i2l6644
 24789  005B1A  0E2F               	movlw	47
 24790  005B1C  6403               	cpfsgt	i2isdigit@c,c
 24791  005B1E  D002               	goto	i2l6644
 24792  005B20  0E01               	movlw	1
 24793  005B22  6E02               	movwf	i2_isdigit$2065,c
 24794  005B24                     i2l6644:
 24795  005B24  C002  F001         	movff	i2_isdigit$2065,??i2_isdigit
 24796  005B28  3001               	rrcf	??i2_isdigit,w,c
 24797  005B2A  0012               	return	
 24798  005B2C                     __end_ofi2_isdigit:
 24799                           	opt stack 0
 24800                           pclatu	equ	0xFFB
 24801                           pclath	equ	0xFFA
 24802                           tblptru	equ	0xFF8
 24803                           tblptrh	equ	0xFF7
 24804                           tblptrl	equ	0xFF6
 24805                           tablat	equ	0xFF5
 24806                           prodh	equ	0xFF4
 24807                           prodl	equ	0xFF3
 24808                           intcon	equ	0xFF2
 24809                           intcon2	equ	0xFF1
 24810                           intcon3	equ	0xFF0
 24811                           indf0	equ	0xFEF
 24812                           postinc0	equ	0xFEE
 24813                           fsr0h	equ	0xFEA
 24814                           fsr0l	equ	0xFE9
 24815                           wreg	equ	0xFE8
 24816                           postdec1	equ	0xFE5
 24817                           fsr1h	equ	0xFE2
 24818                           fsr1l	equ	0xFE1
 24819                           indf2	equ	0xFDF
 24820                           postinc2	equ	0xFDE
 24821                           postdec2	equ	0xFDD
 24822                           fsr2h	equ	0xFDA
 24823                           fsr2l	equ	0xFD9
 24824                           status	equ	0xFD8
 24825                           
 24826 ;; *************** function i2___wmul *****************
 24827 ;; Defined at:
 24828 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24829 ;; Parameters:    Size  Location     Type
 24830 ;;  multiplier      2    0[COMRAM] unsigned int 
 24831 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24832 ;; Auto vars:     Size  Location     Type
 24833 ;;  __wmul          2    4[COMRAM] unsigned int 
 24834 ;; Return value:  Size  Location     Type
 24835 ;;                  2    0[COMRAM] unsigned int 
 24836 ;; Registers used:
 24837 ;;		wreg, status,2, status,0, prodl, prodh
 24838 ;; Tracked objects:
 24839 ;;		On entry : 0/0
 24840 ;;		On exit  : 0/0
 24841 ;;		Unchanged: 0/0
 24842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24843 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24846 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24847 ;;Total ram usage:        6 bytes
 24848 ;; Hardware stack levels used:    1
 24849 ;; This function calls:
 24850 ;;		Nothing
 24851 ;; This function is called by:
 24852 ;;		_printSortTimer
 24853 ;;		_retrieveLog
 24854 ;;		i2_printf
 24855 ;; This function uses a non-reentrant model
 24856 ;;
 24857                           
 24858                           	psect	text90
 24859  005A5A                     __ptext90:
 24860                           	opt stack 0
 24861  005A5A                     i2___wmul:
 24862                           	opt stack 21
 24863                           
 24864                           ;incstack = 0
 24865  005A5A  5001               	movf	i2___wmul@multiplier,w,c
 24866  005A5C  0203               	mulwf	i2___wmul@multiplicand,c
 24867  005A5E  CFF3 F005          	movff	prodl,i2___wmul@product
 24868  005A62  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24869  005A66  5001               	movf	i2___wmul@multiplier,w,c
 24870  005A68  0204               	mulwf	i2___wmul@multiplicand+1,c
 24871  005A6A  50F3               	movf	prodl,w,c
 24872  005A6C  2606               	addwf	i2___wmul@product+1,f,c
 24873  005A6E  5002               	movf	i2___wmul@multiplier+1,w,c
 24874  005A70  0203               	mulwf	i2___wmul@multiplicand,c
 24875  005A72  50F3               	movf	prodl,w,c
 24876  005A74  2606               	addwf	i2___wmul@product+1,f,c
 24877  005A76  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24878  005A7A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24879  005A7E  0012               	return	
 24880  005A80                     __end_ofi2___wmul:
 24881                           	opt stack 0
 24882                           pclatu	equ	0xFFB
 24883                           pclath	equ	0xFFA
 24884                           tblptru	equ	0xFF8
 24885                           tblptrh	equ	0xFF7
 24886                           tblptrl	equ	0xFF6
 24887                           tablat	equ	0xFF5
 24888                           prodh	equ	0xFF4
 24889                           prodl	equ	0xFF3
 24890                           intcon	equ	0xFF2
 24891                           intcon2	equ	0xFF1
 24892                           intcon3	equ	0xFF0
 24893                           indf0	equ	0xFEF
 24894                           postinc0	equ	0xFEE
 24895                           fsr0h	equ	0xFEA
 24896                           fsr0l	equ	0xFE9
 24897                           wreg	equ	0xFE8
 24898                           postdec1	equ	0xFE5
 24899                           fsr1h	equ	0xFE2
 24900                           fsr1l	equ	0xFE1
 24901                           indf2	equ	0xFDF
 24902                           postinc2	equ	0xFDE
 24903                           postdec2	equ	0xFDD
 24904                           fsr2h	equ	0xFDA
 24905                           fsr2l	equ	0xFD9
 24906                           status	equ	0xFD8
 24907                           
 24908 ;; *************** function i2___lwmod *****************
 24909 ;; Defined at:
 24910 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24911 ;; Parameters:    Size  Location     Type
 24912 ;;  dividend        2    0[COMRAM] unsigned int 
 24913 ;;  divisor         2    2[COMRAM] unsigned int 
 24914 ;; Auto vars:     Size  Location     Type
 24915 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24916 ;; Return value:  Size  Location     Type
 24917 ;;                  2    0[COMRAM] unsigned int 
 24918 ;; Registers used:
 24919 ;;		wreg, status,2, status,0
 24920 ;; Tracked objects:
 24921 ;;		On entry : 0/0
 24922 ;;		On exit  : 0/0
 24923 ;;		Unchanged: 0/0
 24924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24928 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24929 ;;Total ram usage:        5 bytes
 24930 ;; Hardware stack levels used:    1
 24931 ;; This function calls:
 24932 ;;		Nothing
 24933 ;; This function is called by:
 24934 ;;		_printSortTimer
 24935 ;;		i2_printf
 24936 ;; This function uses a non-reentrant model
 24937 ;;
 24938                           
 24939                           	psect	text91
 24940  005590                     __ptext91:
 24941                           	opt stack 0
 24942  005590                     i2___lwmod:
 24943                           	opt stack 21
 24944                           
 24945                           ;incstack = 0
 24946  005590  5003               	movf	i2___lwmod@divisor,w,c
 24947  005592  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24948  005594  B4D8               	btfsc	status,2,c
 24949  005596  D018               	goto	i2l1979
 24950  005598  0E01               	movlw	1
 24951  00559A  6E05               	movwf	i2___lwmod@counter,c
 24952  00559C  D004               	goto	i2l6676
 24953  00559E                     i2l6674:
 24954  00559E  90D8               	bcf	status,0,c
 24955  0055A0  3603               	rlcf	i2___lwmod@divisor,f,c
 24956  0055A2  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24957  0055A4  2A05               	incf	i2___lwmod@counter,f,c
 24958  0055A6                     i2l6676:
 24959  0055A6  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24960  0055A8  D7FA               	goto	i2l6674
 24961  0055AA                     i2l6678:
 24962  0055AA  5003               	movf	i2___lwmod@divisor,w,c
 24963  0055AC  5C01               	subwf	i2___lwmod@dividend,w,c
 24964  0055AE  5004               	movf	i2___lwmod@divisor+1,w,c
 24965  0055B0  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24966  0055B2  A0D8               	btfss	status,0,c
 24967  0055B4  D004               	goto	i2l6682
 24968  0055B6  5003               	movf	i2___lwmod@divisor,w,c
 24969  0055B8  5E01               	subwf	i2___lwmod@dividend,f,c
 24970  0055BA  5004               	movf	i2___lwmod@divisor+1,w,c
 24971  0055BC  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24972  0055BE                     i2l6682:
 24973  0055BE  90D8               	bcf	status,0,c
 24974  0055C0  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24975  0055C2  3203               	rrcf	i2___lwmod@divisor,f,c
 24976  0055C4  2E05               	decfsz	i2___lwmod@counter,f,c
 24977  0055C6  D7F1               	goto	i2l6678
 24978  0055C8                     i2l1979:
 24979  0055C8  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24980  0055CC  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24981  0055D0  0012               	return		;funcret
 24982  0055D2                     __end_ofi2___lwmod:
 24983                           	opt stack 0
 24984                           pclatu	equ	0xFFB
 24985                           pclath	equ	0xFFA
 24986                           tblptru	equ	0xFF8
 24987                           tblptrh	equ	0xFF7
 24988                           tblptrl	equ	0xFF6
 24989                           tablat	equ	0xFF5
 24990                           prodh	equ	0xFF4
 24991                           prodl	equ	0xFF3
 24992                           intcon	equ	0xFF2
 24993                           intcon2	equ	0xFF1
 24994                           intcon3	equ	0xFF0
 24995                           indf0	equ	0xFEF
 24996                           postinc0	equ	0xFEE
 24997                           fsr0h	equ	0xFEA
 24998                           fsr0l	equ	0xFE9
 24999                           wreg	equ	0xFE8
 25000                           postdec1	equ	0xFE5
 25001                           fsr1h	equ	0xFE2
 25002                           fsr1l	equ	0xFE1
 25003                           indf2	equ	0xFDF
 25004                           postinc2	equ	0xFDE
 25005                           postdec2	equ	0xFDD
 25006                           fsr2h	equ	0xFDA
 25007                           fsr2l	equ	0xFD9
 25008                           status	equ	0xFD8
 25009                           
 25010 ;; *************** function i2___lwdiv *****************
 25011 ;; Defined at:
 25012 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25013 ;; Parameters:    Size  Location     Type
 25014 ;;  dividend        2    5[COMRAM] unsigned int 
 25015 ;;  divisor         2    7[COMRAM] unsigned int 
 25016 ;; Auto vars:     Size  Location     Type
 25017 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25018 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25019 ;; Return value:  Size  Location     Type
 25020 ;;                  2    5[COMRAM] unsigned int 
 25021 ;; Registers used:
 25022 ;;		wreg, status,2, status,0
 25023 ;; Tracked objects:
 25024 ;;		On entry : 0/0
 25025 ;;		On exit  : 0/0
 25026 ;;		Unchanged: 0/0
 25027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25029 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25031 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25032 ;;Total ram usage:        7 bytes
 25033 ;; Hardware stack levels used:    1
 25034 ;; This function calls:
 25035 ;;		Nothing
 25036 ;; This function is called by:
 25037 ;;		_printSortTimer
 25038 ;;		i2_printf
 25039 ;; This function uses a non-reentrant model
 25040 ;;
 25041                           
 25042                           	psect	text92
 25043  005382                     __ptext92:
 25044                           	opt stack 0
 25045  005382                     i2___lwdiv:
 25046                           	opt stack 21
 25047                           
 25048                           ;incstack = 0
 25049  005382  0E00               	movlw	0
 25050  005384  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25051  005386  0E00               	movlw	0
 25052  005388  6E0A               	movwf	i2___lwdiv@quotient,c
 25053  00538A  5008               	movf	i2___lwdiv@divisor,w,c
 25054  00538C  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25055  00538E  B4D8               	btfsc	status,2,c
 25056  005390  D01C               	goto	i2l1969
 25057  005392  0E01               	movlw	1
 25058  005394  6E0C               	movwf	i2___lwdiv@counter,c
 25059  005396  D004               	goto	i2l6656
 25060  005398                     i2l6654:
 25061  005398  90D8               	bcf	status,0,c
 25062  00539A  3608               	rlcf	i2___lwdiv@divisor,f,c
 25063  00539C  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25064  00539E  2A0C               	incf	i2___lwdiv@counter,f,c
 25065  0053A0                     i2l6656:
 25066  0053A0  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25067  0053A2  D7FA               	goto	i2l6654
 25068  0053A4                     i2l6658:
 25069  0053A4  90D8               	bcf	status,0,c
 25070  0053A6  360A               	rlcf	i2___lwdiv@quotient,f,c
 25071  0053A8  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25072  0053AA  5008               	movf	i2___lwdiv@divisor,w,c
 25073  0053AC  5C06               	subwf	i2___lwdiv@dividend,w,c
 25074  0053AE  5009               	movf	i2___lwdiv@divisor+1,w,c
 25075  0053B0  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25076  0053B2  A0D8               	btfss	status,0,c
 25077  0053B4  D005               	goto	i2l6666
 25078  0053B6  5008               	movf	i2___lwdiv@divisor,w,c
 25079  0053B8  5E06               	subwf	i2___lwdiv@dividend,f,c
 25080  0053BA  5009               	movf	i2___lwdiv@divisor+1,w,c
 25081  0053BC  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25082  0053BE  800A               	bsf	i2___lwdiv@quotient,0,c
 25083  0053C0                     i2l6666:
 25084  0053C0  90D8               	bcf	status,0,c
 25085  0053C2  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25086  0053C4  3208               	rrcf	i2___lwdiv@divisor,f,c
 25087  0053C6  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25088  0053C8  D7ED               	goto	i2l6658
 25089  0053CA                     i2l1969:
 25090  0053CA  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25091  0053CE  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25092  0053D2  0012               	return		;funcret
 25093  0053D4                     __end_ofi2___lwdiv:
 25094                           	opt stack 0
 25095                           pclatu	equ	0xFFB
 25096                           pclath	equ	0xFFA
 25097                           tblptru	equ	0xFF8
 25098                           tblptrh	equ	0xFF7
 25099                           tblptrl	equ	0xFF6
 25100                           tablat	equ	0xFF5
 25101                           prodh	equ	0xFF4
 25102                           prodl	equ	0xFF3
 25103                           intcon	equ	0xFF2
 25104                           intcon2	equ	0xFF1
 25105                           intcon3	equ	0xFF0
 25106                           indf0	equ	0xFEF
 25107                           postinc0	equ	0xFEE
 25108                           fsr0h	equ	0xFEA
 25109                           fsr0l	equ	0xFE9
 25110                           wreg	equ	0xFE8
 25111                           postdec1	equ	0xFE5
 25112                           fsr1h	equ	0xFE2
 25113                           fsr1l	equ	0xFE1
 25114                           indf2	equ	0xFDF
 25115                           postinc2	equ	0xFDE
 25116                           postdec2	equ	0xFDD
 25117                           fsr2h	equ	0xFDA
 25118                           fsr2l	equ	0xFD9
 25119                           status	equ	0xFD8
 25120                           
 25121 ;; *************** function i2_lcdInst *****************
 25122 ;; Defined at:
 25123 ;;		line 15 in file "lcd.c"
 25124 ;; Parameters:    Size  Location     Type
 25125 ;;  data            1    wreg     unsigned char 
 25126 ;; Auto vars:     Size  Location     Type
 25127 ;;  data            1    2[COMRAM] unsigned char 
 25128 ;; Return value:  Size  Location     Type
 25129 ;;                  1    wreg      void 
 25130 ;; Registers used:
 25131 ;;		wreg, status,2, status,0, cstack
 25132 ;; Tracked objects:
 25133 ;;		On entry : 0/0
 25134 ;;		On exit  : 0/0
 25135 ;;		Unchanged: 0/0
 25136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25140 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25141 ;;Total ram usage:        1 bytes
 25142 ;; Hardware stack levels used:    1
 25143 ;; Hardware stack levels required when called:    1
 25144 ;; This function calls:
 25145 ;;		i2_lcdNibble
 25146 ;; This function is called by:
 25147 ;;		_change_state_to_menu_11
 25148 ;;		_change_state_to_menu_23
 25149 ;;		_change_state_to_logs_11
 25150 ;;		_change_state_to_logs_12
 25151 ;;		_change_state_to_logs_22
 25152 ;;		_change_state_to_logs_23
 25153 ;;		_change_state_to_logs_33
 25154 ;;		_change_state_to_logs_34
 25155 ;;		_printSortTimer
 25156 ;;		i2_change_state_to_menu_start
 25157 ;;		i2_change_state_to_menu_12
 25158 ;;		i2_change_state_to_menu_22
 25159 ;;		i2_printRTC
 25160 ;; This function uses a non-reentrant model
 25161 ;;
 25162                           
 25163                           	psect	text93
 25164  005BFA                     __ptext93:
 25165                           	opt stack 0
 25166  005BFA                     i2_lcdInst:
 25167                           	opt stack 20
 25168                           
 25169                           ;incstack = 0
 25170                           ;i2lcdInst@data stored from wreg
 25171  005BFA  6E03               	movwf	i2lcdInst@data,c
 25172                           
 25173                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25174  005BFC  948C               	bcf	3980,2,c	;volatile
 25175                           
 25176                           ;lcd.c: 17: lcdNibble(data);
 25177  005BFE  5003               	movf	i2lcdInst@data,w,c
 25178  005C00  EC94  F029         	call	i2_lcdNibble
 25179  005C04  0012               	return		;funcret
 25180  005C06                     __end_ofi2_lcdInst:
 25181                           	opt stack 0
 25182                           pclatu	equ	0xFFB
 25183                           pclath	equ	0xFFA
 25184                           tblptru	equ	0xFF8
 25185                           tblptrh	equ	0xFF7
 25186                           tblptrl	equ	0xFF6
 25187                           tablat	equ	0xFF5
 25188                           prodh	equ	0xFF4
 25189                           prodl	equ	0xFF3
 25190                           intcon	equ	0xFF2
 25191                           intcon2	equ	0xFF1
 25192                           intcon3	equ	0xFF0
 25193                           indf0	equ	0xFEF
 25194                           postinc0	equ	0xFEE
 25195                           fsr0h	equ	0xFEA
 25196                           fsr0l	equ	0xFE9
 25197                           wreg	equ	0xFE8
 25198                           postdec1	equ	0xFE5
 25199                           fsr1h	equ	0xFE2
 25200                           fsr1l	equ	0xFE1
 25201                           indf2	equ	0xFDF
 25202                           postinc2	equ	0xFDE
 25203                           postdec2	equ	0xFDD
 25204                           fsr2h	equ	0xFDA
 25205                           fsr2l	equ	0xFD9
 25206                           status	equ	0xFD8
 25207                           
 25208 ;; *************** function i2_lcdNibble *****************
 25209 ;; Defined at:
 25210 ;;		line 25 in file "lcd.c"
 25211 ;; Parameters:    Size  Location     Type
 25212 ;;  data            1    wreg     unsigned char 
 25213 ;; Auto vars:     Size  Location     Type
 25214 ;;  data            1    1[COMRAM] unsigned char 
 25215 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25216 ;; Return value:  Size  Location     Type
 25217 ;;                  1    wreg      void 
 25218 ;; Registers used:
 25219 ;;		wreg, status,2, status,0
 25220 ;; Tracked objects:
 25221 ;;		On entry : 0/0
 25222 ;;		On exit  : 0/0
 25223 ;;		Unchanged: 0/0
 25224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25229 ;;Total ram usage:        2 bytes
 25230 ;; Hardware stack levels used:    1
 25231 ;; This function calls:
 25232 ;;		Nothing
 25233 ;; This function is called by:
 25234 ;;		i2_lcdInst
 25235 ;;		i2_putch
 25236 ;; This function uses a non-reentrant model
 25237 ;;
 25238                           
 25239                           	psect	text94
 25240  005328                     __ptext94:
 25241                           	opt stack 0
 25242  005328                     i2_lcdNibble:
 25243                           	opt stack 20
 25244                           
 25245                           ;incstack = 0
 25246                           ;i2lcdNibble@data stored from wreg
 25247  005328  6E02               	movwf	i2lcdNibble@data,c
 25248                           
 25249                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25250  00532A  9EF2               	bcf	intcon,7,c	;volatile
 25251                           
 25252                           ;lcd.c: 28: char temp = data & 0xF0;
 25253  00532C  5002               	movf	i2lcdNibble@data,w,c
 25254  00532E  0BF0               	andlw	240
 25255  005330  6E01               	movwf	i2lcdNibble@temp,c
 25256                           
 25257                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25258  005332  508C               	movf	3980,w,c	;volatile
 25259  005334  0B0F               	andlw	15
 25260  005336  6E8C               	movwf	3980,c	;volatile
 25261                           
 25262                           ;lcd.c: 30: LATD = temp | LATD;
 25263  005338  5001               	movf	i2lcdNibble@temp,w,c
 25264  00533A  108C               	iorwf	3980,w,c	;volatile
 25265  00533C  6E8C               	movwf	3980,c	;volatile
 25266                           
 25267                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25268  00533E  868C               	bsf	3980,3,c	;volatile
 25269                           
 25270                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25271  005340  0E42               	movlw	66
 25272  005342                     i2u1137_47:
 25273  005342  2EE8               	decfsz	wreg,f,c
 25274  005344  D7FE               	bra	i2u1137_47
 25275  005346  D000               	nop2	
 25276                           
 25277                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25278  005348  968C               	bcf	3980,3,c	;volatile
 25279                           
 25280                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25281  00534A  0E42               	movlw	66
 25282  00534C                     i2u1138_47:
 25283  00534C  2EE8               	decfsz	wreg,f,c
 25284  00534E  D7FE               	bra	i2u1138_47
 25285  005350  D000               	nop2	
 25286                           
 25287                           ;lcd.c: 37: data = data << 4;
 25288  005352  3802               	swapf	i2lcdNibble@data,w,c
 25289  005354  0BF0               	andlw	240
 25290  005356  6E02               	movwf	i2lcdNibble@data,c
 25291                           
 25292                           ;lcd.c: 39: temp = data & 0xF0;
 25293  005358  5002               	movf	i2lcdNibble@data,w,c
 25294  00535A  0BF0               	andlw	240
 25295  00535C  6E01               	movwf	i2lcdNibble@temp,c
 25296                           
 25297                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25298  00535E  508C               	movf	3980,w,c	;volatile
 25299  005360  0B0F               	andlw	15
 25300  005362  6E8C               	movwf	3980,c	;volatile
 25301                           
 25302                           ;lcd.c: 41: LATD = temp | LATD;
 25303  005364  5001               	movf	i2lcdNibble@temp,w,c
 25304  005366  108C               	iorwf	3980,w,c	;volatile
 25305  005368  6E8C               	movwf	3980,c	;volatile
 25306                           
 25307                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25308  00536A  868C               	bsf	3980,3,c	;volatile
 25309                           
 25310                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25311  00536C  0E42               	movlw	66
 25312  00536E                     i2u1139_47:
 25313  00536E  2EE8               	decfsz	wreg,f,c
 25314  005370  D7FE               	bra	i2u1139_47
 25315  005372  D000               	nop2	
 25316                           
 25317                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25318  005374  968C               	bcf	3980,3,c	;volatile
 25319                           
 25320                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25321  005376  0E42               	movlw	66
 25322  005378                     i2u1140_47:
 25323  005378  2EE8               	decfsz	wreg,f,c
 25324  00537A  D7FE               	bra	i2u1140_47
 25325  00537C  D000               	nop2	
 25326                           
 25327                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25328  00537E  8EF2               	bsf	intcon,7,c	;volatile
 25329  005380  0012               	return		;funcret
 25330  005382                     __end_ofi2_lcdNibble:
 25331                           	opt stack 0
 25332                           pclatu	equ	0xFFB
 25333                           pclath	equ	0xFFA
 25334                           tblptru	equ	0xFF8
 25335                           tblptrh	equ	0xFF7
 25336                           tblptrl	equ	0xFF6
 25337                           tablat	equ	0xFF5
 25338                           prodh	equ	0xFF4
 25339                           prodl	equ	0xFF3
 25340                           intcon	equ	0xFF2
 25341                           intcon2	equ	0xFF1
 25342                           intcon3	equ	0xFF0
 25343                           indf0	equ	0xFEF
 25344                           postinc0	equ	0xFEE
 25345                           fsr0h	equ	0xFEA
 25346                           fsr0l	equ	0xFE9
 25347                           wreg	equ	0xFE8
 25348                           postdec1	equ	0xFE5
 25349                           fsr1h	equ	0xFE2
 25350                           fsr1l	equ	0xFE1
 25351                           indf2	equ	0xFDF
 25352                           postinc2	equ	0xFDE
 25353                           postdec2	equ	0xFDD
 25354                           fsr2h	equ	0xFDA
 25355                           fsr2l	equ	0xFD9
 25356                           status	equ	0xFD8
 25357                           
 25358 ;; *************** function i2_getRTC *****************
 25359 ;; Defined at:
 25360 ;;		line 44 in file "RTC.c"
 25361 ;; Parameters:    Size  Location     Type
 25362 ;;		None
 25363 ;; Auto vars:     Size  Location     Type
 25364 ;;  getRTC          2    3[COMRAM] int 
 25365 ;; Return value:  Size  Location     Type
 25366 ;;                  1    wreg      void 
 25367 ;; Registers used:
 25368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25369 ;; Tracked objects:
 25370 ;;		On entry : 0/0
 25371 ;;		On exit  : 0/0
 25372 ;;		Unchanged: 0/0
 25373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25375 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25377 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25378 ;;Total ram usage:        2 bytes
 25379 ;; Hardware stack levels used:    1
 25380 ;; Hardware stack levels required when called:    2
 25381 ;; This function calls:
 25382 ;;		i2_I2C_Master_Read
 25383 ;;		i2_I2C_Master_Start
 25384 ;;		i2_I2C_Master_Stop
 25385 ;;		i2_I2C_Master_Write
 25386 ;; This function is called by:
 25387 ;;		_printSortTimer
 25388 ;;		i2_printRTC
 25389 ;; This function uses a non-reentrant model
 25390 ;;
 25391                           
 25392                           	psect	text95
 25393  005004                     __ptext95:
 25394                           	opt stack 0
 25395  005004                     i2_getRTC:
 25396                           	opt stack 19
 25397                           
 25398                           ;RTC.c: 48: I2C_Master_Start();
 25399                           
 25400                           ;incstack = 0
 25401  005004  EC1D  F02E         	call	i2_I2C_Master_Start	;wreg free
 25402                           
 25403                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25404  005008  0E00               	movlw	0
 25405  00500A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25406  00500C  0ED0               	movlw	208
 25407  00500E  6E02               	movwf	i2I2C_Master_Write@d,c
 25408  005010  EC08  F02E         	call	i2_I2C_Master_Write	;wreg free
 25409                           
 25410                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25411  005014  0E00               	movlw	0
 25412  005016  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25413  005018  0E00               	movlw	0
 25414  00501A  6E02               	movwf	i2I2C_Master_Write@d,c
 25415  00501C  EC08  F02E         	call	i2_I2C_Master_Write	;wreg free
 25416                           
 25417                           ;RTC.c: 51: I2C_Master_Stop();
 25418  005020  EC19  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25419                           
 25420                           ;RTC.c: 54: I2C_Master_Start();
 25421  005024  EC1D  F02E         	call	i2_I2C_Master_Start	;wreg free
 25422                           
 25423                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25424  005028  0E00               	movlw	0
 25425  00502A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25426  00502C  0ED1               	movlw	209
 25427  00502E  6E02               	movwf	i2I2C_Master_Write@d,c
 25428  005030  EC08  F02E         	call	i2_I2C_Master_Write	;wreg free
 25429                           
 25430                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25431  005034  0E00               	movlw	0
 25432  005036  6E05               	movwf	i2getRTC@i+1,c
 25433  005038  0E00               	movlw	0
 25434  00503A  6E04               	movwf	i2getRTC@i,c
 25435  00503C                     i2l6952:
 25436  00503C  BE05               	btfsc	i2getRTC@i+1,7,c
 25437  00503E  D006               	goto	i2l6956
 25438  005040  5005               	movf	i2getRTC@i+1,w,c
 25439  005042  E111               	bnz	i2l6962
 25440  005044  0E06               	movlw	6
 25441  005046  5C04               	subwf	i2getRTC@i,w,c
 25442  005048  B0D8               	btfsc	status,0,c
 25443  00504A  D00D               	goto	i2l6962
 25444  00504C                     i2l6956:
 25445                           
 25446                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25447  00504C  0E1C               	movlw	low _time
 25448  00504E  2404               	addwf	i2getRTC@i,w,c
 25449  005050  6ED9               	movwf	fsr2l,c
 25450  005052  0E01               	movlw	high _time
 25451  005054  2005               	addwfc	i2getRTC@i+1,w,c
 25452  005056  6EDA               	movwf	fsr2h,c
 25453  005058  0E01               	movlw	1
 25454  00505A  EC40  F02D         	call	i2_I2C_Master_Read
 25455  00505E  6EDF               	movwf	indf2,c
 25456  005060  4A04               	infsnz	i2getRTC@i,f,c
 25457  005062  2A05               	incf	i2getRTC@i+1,f,c
 25458  005064  D7EB               	goto	i2l6952
 25459  005066                     i2l6962:
 25460                           
 25461                           ;RTC.c: 58: }
 25462                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25463  005066  0E00               	movlw	0
 25464  005068  EC40  F02D         	call	i2_I2C_Master_Read
 25465  00506C  0101               	movlb	1	; () banked
 25466  00506E  6F22               	movwf	(_time+6)& (0+255),b
 25467                           
 25468                           ;RTC.c: 60: I2C_Master_Stop();
 25469  005070  EC19  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25470  005074  0012               	return		;funcret
 25471  005076                     __end_ofi2_getRTC:
 25472                           	opt stack 0
 25473                           pclatu	equ	0xFFB
 25474                           pclath	equ	0xFFA
 25475                           tblptru	equ	0xFF8
 25476                           tblptrh	equ	0xFF7
 25477                           tblptrl	equ	0xFF6
 25478                           tablat	equ	0xFF5
 25479                           prodh	equ	0xFF4
 25480                           prodl	equ	0xFF3
 25481                           intcon	equ	0xFF2
 25482                           intcon2	equ	0xFF1
 25483                           intcon3	equ	0xFF0
 25484                           indf0	equ	0xFEF
 25485                           postinc0	equ	0xFEE
 25486                           fsr0h	equ	0xFEA
 25487                           fsr0l	equ	0xFE9
 25488                           wreg	equ	0xFE8
 25489                           postdec1	equ	0xFE5
 25490                           fsr1h	equ	0xFE2
 25491                           fsr1l	equ	0xFE1
 25492                           indf2	equ	0xFDF
 25493                           postinc2	equ	0xFDE
 25494                           postdec2	equ	0xFDD
 25495                           fsr2h	equ	0xFDA
 25496                           fsr2l	equ	0xFD9
 25497                           status	equ	0xFD8
 25498                           
 25499 ;; *************** function i2_I2C_Master_Write *****************
 25500 ;; Defined at:
 25501 ;;		line 49 in file "I2C.c"
 25502 ;; Parameters:    Size  Location     Type
 25503 ;;  d               2    1[COMRAM] unsigned int 
 25504 ;; Auto vars:     Size  Location     Type
 25505 ;;		None
 25506 ;; Return value:  Size  Location     Type
 25507 ;;                  1    wreg      void 
 25508 ;; Registers used:
 25509 ;;		wreg, status,2, status,0, cstack
 25510 ;; Tracked objects:
 25511 ;;		On entry : 0/0
 25512 ;;		On exit  : 0/0
 25513 ;;		Unchanged: 0/0
 25514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25519 ;;Total ram usage:        2 bytes
 25520 ;; Hardware stack levels used:    1
 25521 ;; Hardware stack levels required when called:    1
 25522 ;; This function calls:
 25523 ;;		i2_I2C_Master_Wait
 25524 ;; This function is called by:
 25525 ;;		i2_getRTC
 25526 ;; This function uses a non-reentrant model
 25527 ;;
 25528                           
 25529                           	psect	text96
 25530  005C10                     __ptext96:
 25531                           	opt stack 0
 25532  005C10                     i2_I2C_Master_Write:
 25533                           	opt stack 19
 25534                           
 25535                           ;I2C.c: 51: I2C_Master_Wait();
 25536                           
 25537                           ;incstack = 0
 25538  005C10  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25539                           
 25540                           ;I2C.c: 52: SSPBUF = d;
 25541  005C14  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25542  005C18  0012               	return		;funcret
 25543  005C1A                     __end_ofi2_I2C_Master_Write:
 25544                           	opt stack 0
 25545                           pclatu	equ	0xFFB
 25546                           pclath	equ	0xFFA
 25547                           tblptru	equ	0xFF8
 25548                           tblptrh	equ	0xFF7
 25549                           tblptrl	equ	0xFF6
 25550                           tablat	equ	0xFF5
 25551                           prodh	equ	0xFF4
 25552                           prodl	equ	0xFF3
 25553                           intcon	equ	0xFF2
 25554                           intcon2	equ	0xFF1
 25555                           intcon3	equ	0xFF0
 25556                           indf0	equ	0xFEF
 25557                           postinc0	equ	0xFEE
 25558                           fsr0h	equ	0xFEA
 25559                           fsr0l	equ	0xFE9
 25560                           wreg	equ	0xFE8
 25561                           postdec1	equ	0xFE5
 25562                           fsr1h	equ	0xFE2
 25563                           fsr1l	equ	0xFE1
 25564                           indf2	equ	0xFDF
 25565                           postinc2	equ	0xFDE
 25566                           postdec2	equ	0xFDD
 25567                           fsr2h	equ	0xFDA
 25568                           fsr2l	equ	0xFD9
 25569                           status	equ	0xFD8
 25570                           
 25571 ;; *************** function i2_I2C_Master_Stop *****************
 25572 ;; Defined at:
 25573 ;;		line 43 in file "I2C.c"
 25574 ;; Parameters:    Size  Location     Type
 25575 ;;		None
 25576 ;; Auto vars:     Size  Location     Type
 25577 ;;		None
 25578 ;; Return value:  Size  Location     Type
 25579 ;;                  1    wreg      void 
 25580 ;; Registers used:
 25581 ;;		wreg, status,2, status,0, cstack
 25582 ;; Tracked objects:
 25583 ;;		On entry : 0/0
 25584 ;;		On exit  : 0/0
 25585 ;;		Unchanged: 0/0
 25586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25591 ;;Total ram usage:        0 bytes
 25592 ;; Hardware stack levels used:    1
 25593 ;; Hardware stack levels required when called:    1
 25594 ;; This function calls:
 25595 ;;		i2_I2C_Master_Wait
 25596 ;; This function is called by:
 25597 ;;		i2_getRTC
 25598 ;; This function uses a non-reentrant model
 25599 ;;
 25600                           
 25601                           	psect	text97
 25602  005C32                     __ptext97:
 25603                           	opt stack 0
 25604  005C32                     i2_I2C_Master_Stop:
 25605                           	opt stack 19
 25606                           
 25607                           ;I2C.c: 45: I2C_Master_Wait();
 25608                           
 25609                           ;incstack = 0
 25610  005C32  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25611                           
 25612                           ;I2C.c: 46: PEN = 1;
 25613  005C36  84C5               	bsf	4037,2,c	;volatile
 25614  005C38  0012               	return		;funcret
 25615  005C3A                     __end_ofi2_I2C_Master_Stop:
 25616                           	opt stack 0
 25617                           pclatu	equ	0xFFB
 25618                           pclath	equ	0xFFA
 25619                           tblptru	equ	0xFF8
 25620                           tblptrh	equ	0xFF7
 25621                           tblptrl	equ	0xFF6
 25622                           tablat	equ	0xFF5
 25623                           prodh	equ	0xFF4
 25624                           prodl	equ	0xFF3
 25625                           intcon	equ	0xFF2
 25626                           intcon2	equ	0xFF1
 25627                           intcon3	equ	0xFF0
 25628                           indf0	equ	0xFEF
 25629                           postinc0	equ	0xFEE
 25630                           fsr0h	equ	0xFEA
 25631                           fsr0l	equ	0xFE9
 25632                           wreg	equ	0xFE8
 25633                           postdec1	equ	0xFE5
 25634                           fsr1h	equ	0xFE2
 25635                           fsr1l	equ	0xFE1
 25636                           indf2	equ	0xFDF
 25637                           postinc2	equ	0xFDE
 25638                           postdec2	equ	0xFDD
 25639                           fsr2h	equ	0xFDA
 25640                           fsr2l	equ	0xFD9
 25641                           status	equ	0xFD8
 25642                           
 25643 ;; *************** function i2_I2C_Master_Start *****************
 25644 ;; Defined at:
 25645 ;;		line 31 in file "I2C.c"
 25646 ;; Parameters:    Size  Location     Type
 25647 ;;		None
 25648 ;; Auto vars:     Size  Location     Type
 25649 ;;		None
 25650 ;; Return value:  Size  Location     Type
 25651 ;;                  1    wreg      void 
 25652 ;; Registers used:
 25653 ;;		wreg, status,2, status,0, cstack
 25654 ;; Tracked objects:
 25655 ;;		On entry : 0/0
 25656 ;;		On exit  : 0/0
 25657 ;;		Unchanged: 0/0
 25658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25663 ;;Total ram usage:        0 bytes
 25664 ;; Hardware stack levels used:    1
 25665 ;; Hardware stack levels required when called:    1
 25666 ;; This function calls:
 25667 ;;		i2_I2C_Master_Wait
 25668 ;; This function is called by:
 25669 ;;		i2_getRTC
 25670 ;; This function uses a non-reentrant model
 25671 ;;
 25672                           
 25673                           	psect	text98
 25674  005C3A                     __ptext98:
 25675                           	opt stack 0
 25676  005C3A                     i2_I2C_Master_Start:
 25677                           	opt stack 19
 25678                           
 25679                           ;I2C.c: 33: I2C_Master_Wait();
 25680                           
 25681                           ;incstack = 0
 25682  005C3A  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25683                           
 25684                           ;I2C.c: 34: SEN = 1;
 25685  005C3E  80C5               	bsf	4037,0,c	;volatile
 25686  005C40  0012               	return		;funcret
 25687  005C42                     __end_ofi2_I2C_Master_Start:
 25688                           	opt stack 0
 25689                           pclatu	equ	0xFFB
 25690                           pclath	equ	0xFFA
 25691                           tblptru	equ	0xFF8
 25692                           tblptrh	equ	0xFF7
 25693                           tblptrl	equ	0xFF6
 25694                           tablat	equ	0xFF5
 25695                           prodh	equ	0xFF4
 25696                           prodl	equ	0xFF3
 25697                           intcon	equ	0xFF2
 25698                           intcon2	equ	0xFF1
 25699                           intcon3	equ	0xFF0
 25700                           indf0	equ	0xFEF
 25701                           postinc0	equ	0xFEE
 25702                           fsr0h	equ	0xFEA
 25703                           fsr0l	equ	0xFE9
 25704                           wreg	equ	0xFE8
 25705                           postdec1	equ	0xFE5
 25706                           fsr1h	equ	0xFE2
 25707                           fsr1l	equ	0xFE1
 25708                           indf2	equ	0xFDF
 25709                           postinc2	equ	0xFDE
 25710                           postdec2	equ	0xFDD
 25711                           fsr2h	equ	0xFDA
 25712                           fsr2l	equ	0xFD9
 25713                           status	equ	0xFD8
 25714                           
 25715 ;; *************** function i2_I2C_Master_Read *****************
 25716 ;; Defined at:
 25717 ;;		line 55 in file "I2C.c"
 25718 ;; Parameters:    Size  Location     Type
 25719 ;;  a               1    wreg     unsigned char 
 25720 ;; Auto vars:     Size  Location     Type
 25721 ;;  a               1    1[COMRAM] unsigned char 
 25722 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25723 ;; Return value:  Size  Location     Type
 25724 ;;                  1    wreg      unsigned char 
 25725 ;; Registers used:
 25726 ;;		wreg, status,2, status,0, cstack
 25727 ;; Tracked objects:
 25728 ;;		On entry : 0/0
 25729 ;;		On exit  : 0/0
 25730 ;;		Unchanged: 0/0
 25731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25736 ;;Total ram usage:        2 bytes
 25737 ;; Hardware stack levels used:    1
 25738 ;; Hardware stack levels required when called:    1
 25739 ;; This function calls:
 25740 ;;		i2_I2C_Master_Wait
 25741 ;; This function is called by:
 25742 ;;		i2_getRTC
 25743 ;; This function uses a non-reentrant model
 25744 ;;
 25745                           
 25746                           	psect	text99
 25747  005A80                     __ptext99:
 25748                           	opt stack 0
 25749  005A80                     i2_I2C_Master_Read:
 25750                           	opt stack 19
 25751                           
 25752                           ;incstack = 0
 25753                           ;i2I2C_Master_Read@a stored from wreg
 25754  005A80  6E02               	movwf	i2I2C_Master_Read@a,c
 25755                           
 25756                           ;I2C.c: 57: unsigned char temp;
 25757                           ;I2C.c: 58: I2C_Master_Wait();
 25758  005A82  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25759                           
 25760                           ;I2C.c: 59: RCEN = 1;
 25761  005A86  86C5               	bsf	4037,3,c	;volatile
 25762                           
 25763                           ;I2C.c: 60: I2C_Master_Wait();
 25764  005A88  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25765                           
 25766                           ;I2C.c: 61: temp = SSPBUF;
 25767  005A8C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25768                           
 25769                           ;I2C.c: 62: I2C_Master_Wait();
 25770  005A90  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25771                           
 25772                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25773  005A94  5002               	movf	i2I2C_Master_Read@a,w,c
 25774  005A96  A4D8               	btfss	status,2,c
 25775  005A98  D002               	goto	i2u504_40
 25776  005A9A  8AC5               	bsf	4037,5,c	;volatile
 25777  005A9C  D001               	goto	i2l6620
 25778  005A9E                     i2u504_40:
 25779  005A9E  9AC5               	bcf	4037,5,c	;volatile
 25780  005AA0                     i2l6620:
 25781                           
 25782                           ;I2C.c: 64: ACKEN = 1;
 25783  005AA0  88C5               	bsf	4037,4,c	;volatile
 25784                           
 25785                           ;I2C.c: 65: return temp;
 25786  005AA2  5003               	movf	i2I2C_Master_Read@temp,w,c
 25787  005AA4  0012               	return	
 25788  005AA6                     __end_ofi2_I2C_Master_Read:
 25789                           	opt stack 0
 25790                           pclatu	equ	0xFFB
 25791                           pclath	equ	0xFFA
 25792                           tblptru	equ	0xFF8
 25793                           tblptrh	equ	0xFF7
 25794                           tblptrl	equ	0xFF6
 25795                           tablat	equ	0xFF5
 25796                           prodh	equ	0xFF4
 25797                           prodl	equ	0xFF3
 25798                           intcon	equ	0xFF2
 25799                           intcon2	equ	0xFF1
 25800                           intcon3	equ	0xFF0
 25801                           indf0	equ	0xFEF
 25802                           postinc0	equ	0xFEE
 25803                           fsr0h	equ	0xFEA
 25804                           fsr0l	equ	0xFE9
 25805                           wreg	equ	0xFE8
 25806                           postdec1	equ	0xFE5
 25807                           fsr1h	equ	0xFE2
 25808                           fsr1l	equ	0xFE1
 25809                           indf2	equ	0xFDF
 25810                           postinc2	equ	0xFDE
 25811                           postdec2	equ	0xFDD
 25812                           fsr2h	equ	0xFDA
 25813                           fsr2l	equ	0xFD9
 25814                           status	equ	0xFD8
 25815                           
 25816 ;; *************** function i2_I2C_Master_Wait *****************
 25817 ;; Defined at:
 25818 ;;		line 26 in file "I2C.c"
 25819 ;; Parameters:    Size  Location     Type
 25820 ;;		None
 25821 ;; Auto vars:     Size  Location     Type
 25822 ;;		None
 25823 ;; Return value:  Size  Location     Type
 25824 ;;                  1    wreg      void 
 25825 ;; Registers used:
 25826 ;;		wreg, status,2, status,0
 25827 ;; Tracked objects:
 25828 ;;		On entry : 0/0
 25829 ;;		On exit  : 0/0
 25830 ;;		Unchanged: 0/0
 25831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25835 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25836 ;;Total ram usage:        1 bytes
 25837 ;; Hardware stack levels used:    1
 25838 ;; This function calls:
 25839 ;;		Nothing
 25840 ;; This function is called by:
 25841 ;;		i2_I2C_Master_Start
 25842 ;;		i2_I2C_Master_Stop
 25843 ;;		i2_I2C_Master_Write
 25844 ;;		i2_I2C_Master_Read
 25845 ;; This function uses a non-reentrant model
 25846 ;;
 25847                           
 25848                           	psect	text100
 25849  005BBC                     __ptext100:
 25850                           	opt stack 0
 25851  005BBC                     i2_I2C_Master_Wait:
 25852                           	opt stack 19
 25853  005BBC                     i2l71:
 25854  005BBC  B4C7               	btfsc	4039,2,c	;volatile
 25855  005BBE  D7FE               	goto	i2l71
 25856  005BC0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25857  005BC4  0E1F               	movlw	31
 25858  005BC6  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25859  005BC8  B4D8               	btfsc	status,2,c
 25860  005BCA  0012               	return	
 25861  005BCC  D7F7               	goto	i2l71
 25862  005BCE                     __end_ofi2_I2C_Master_Wait:
 25863                           	opt stack 0
 25864                           pclatu	equ	0xFFB
 25865                           pclath	equ	0xFFA
 25866                           tblptru	equ	0xFF8
 25867                           tblptrh	equ	0xFF7
 25868                           tblptrl	equ	0xFF6
 25869                           tablat	equ	0xFF5
 25870                           prodh	equ	0xFF4
 25871                           prodl	equ	0xFF3
 25872                           intcon	equ	0xFF2
 25873                           intcon2	equ	0xFF1
 25874                           intcon3	equ	0xFF0
 25875                           indf0	equ	0xFEF
 25876                           postinc0	equ	0xFEE
 25877                           fsr0h	equ	0xFEA
 25878                           fsr0l	equ	0xFE9
 25879                           wreg	equ	0xFE8
 25880                           postdec1	equ	0xFE5
 25881                           fsr1h	equ	0xFE2
 25882                           fsr1l	equ	0xFE1
 25883                           indf2	equ	0xFDF
 25884                           postinc2	equ	0xFDE
 25885                           postdec2	equ	0xFDD
 25886                           fsr2h	equ	0xFDA
 25887                           fsr2l	equ	0xFD9
 25888                           status	equ	0xFD8
 25889                           
 25890 ;; *************** function i2_delay_ms *****************
 25891 ;; Defined at:
 25892 ;;		line 665 in file "sort.c"
 25893 ;; Parameters:    Size  Location     Type
 25894 ;;  milliseconds    1    wreg     unsigned char 
 25895 ;; Auto vars:     Size  Location     Type
 25896 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25897 ;; Return value:  Size  Location     Type
 25898 ;;                  1    wreg      void 
 25899 ;; Registers used:
 25900 ;;		wreg, status,2, status,0, cstack
 25901 ;; Tracked objects:
 25902 ;;		On entry : 0/0
 25903 ;;		On exit  : 0/0
 25904 ;;		Unchanged: 0/0
 25905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25909 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25910 ;;Total ram usage:        2 bytes
 25911 ;; Hardware stack levels used:    1
 25912 ;; This function calls:
 25913 ;;		Nothing
 25914 ;; This function is called by:
 25915 ;;		_printSortTimer
 25916 ;; This function uses a non-reentrant model
 25917 ;;
 25918                           
 25919                           	psect	text101
 25920  005B48                     __ptext101:
 25921                           	opt stack 0
 25922  005B48                     i2_delay_ms:
 25923                           	opt stack 22
 25924                           
 25925                           ;incstack = 0
 25926                           ;i2delay_ms@milliseconds stored from wreg
 25927  005B48  6E02               	movwf	i2delay_ms@milliseconds,c
 25928                           
 25929                           ;sort.c: 666: while(milliseconds > 0)
 25930  005B4A  D008               	goto	i2l9236
 25931  005B4C                     i2l9232:
 25932                           
 25933                           ;sort.c: 667: {
 25934                           ;sort.c: 668: milliseconds--;
 25935  005B4C  0602               	decf	i2delay_ms@milliseconds,f,c
 25936                           
 25937                           ;sort.c: 669: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25938  005B4E  0E0B               	movlw	11
 25939  005B50  6E01               	movwf	??i2_delay_ms& (0+255),c
 25940  005B52  0E48               	movlw	72
 25941  005B54                     i2u1141_47:
 25942  005B54  2EE8               	decfsz	wreg,f,c
 25943  005B56  D7FE               	bra	i2u1141_47
 25944  005B58  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25945  005B5A  D7FC               	bra	i2u1141_47
 25946  005B5C                     i2l9236:
 25947  005B5C  5002               	movf	i2delay_ms@milliseconds,w,c
 25948  005B5E  B4D8               	btfsc	status,2,c
 25949  005B60  0012               	return	
 25950  005B62  D7F4               	goto	i2l9232
 25951  005B64                     __end_ofi2_delay_ms:
 25952                           	opt stack 0
 25953                           pclatu	equ	0xFFB
 25954                           pclath	equ	0xFFA
 25955                           tblptru	equ	0xFF8
 25956                           tblptrh	equ	0xFF7
 25957                           tblptrl	equ	0xFF6
 25958                           tablat	equ	0xFF5
 25959                           prodh	equ	0xFF4
 25960                           prodl	equ	0xFF3
 25961                           intcon	equ	0xFF2
 25962                           intcon2	equ	0xFF1
 25963                           intcon3	equ	0xFF0
 25964                           indf0	equ	0xFEF
 25965                           postinc0	equ	0xFEE
 25966                           fsr0h	equ	0xFEA
 25967                           fsr0l	equ	0xFE9
 25968                           wreg	equ	0xFE8
 25969                           postdec1	equ	0xFE5
 25970                           fsr1h	equ	0xFE2
 25971                           fsr1l	equ	0xFE1
 25972                           indf2	equ	0xFDF
 25973                           postinc2	equ	0xFDE
 25974                           postdec2	equ	0xFDD
 25975                           fsr2h	equ	0xFDA
 25976                           fsr2l	equ	0xFD9
 25977                           status	equ	0xFD8
 25978                           pclatu	equ	0xFFB
 25979                           pclath	equ	0xFFA
 25980                           tblptru	equ	0xFF8
 25981                           tblptrh	equ	0xFF7
 25982                           tblptrl	equ	0xFF6
 25983                           tablat	equ	0xFF5
 25984                           prodh	equ	0xFF4
 25985                           prodl	equ	0xFF3
 25986                           intcon	equ	0xFF2
 25987                           intcon2	equ	0xFF1
 25988                           intcon3	equ	0xFF0
 25989                           indf0	equ	0xFEF
 25990                           postinc0	equ	0xFEE
 25991                           fsr0h	equ	0xFEA
 25992                           fsr0l	equ	0xFE9
 25993                           wreg	equ	0xFE8
 25994                           postdec1	equ	0xFE5
 25995                           fsr1h	equ	0xFE2
 25996                           fsr1l	equ	0xFE1
 25997                           indf2	equ	0xFDF
 25998                           postinc2	equ	0xFDE
 25999                           postdec2	equ	0xFDD
 26000                           fsr2h	equ	0xFDA
 26001                           fsr2l	equ	0xFD9
 26002                           status	equ	0xFD8
 26003                           
 26004                           	psect	rparam
 26005  0000                     pclatu	equ	0xFFB
 26006                           pclath	equ	0xFFA
 26007                           tblptru	equ	0xFF8
 26008                           tblptrh	equ	0xFF7
 26009                           tblptrl	equ	0xFF6
 26010                           tablat	equ	0xFF5
 26011                           prodh	equ	0xFF4
 26012                           prodl	equ	0xFF3
 26013                           intcon	equ	0xFF2
 26014                           intcon2	equ	0xFF1
 26015                           intcon3	equ	0xFF0
 26016                           indf0	equ	0xFEF
 26017                           postinc0	equ	0xFEE
 26018                           fsr0h	equ	0xFEA
 26019                           fsr0l	equ	0xFE9
 26020                           wreg	equ	0xFE8
 26021                           postdec1	equ	0xFE5
 26022                           fsr1h	equ	0xFE2
 26023                           fsr1l	equ	0xFE1
 26024                           indf2	equ	0xFDF
 26025                           postinc2	equ	0xFDE
 26026                           postdec2	equ	0xFDD
 26027                           fsr2h	equ	0xFDA
 26028                           fsr2l	equ	0xFD9
 26029                           status	equ	0xFD8
 26030                           
 26031                           	psect	temp
 26032  00007E                     btemp:
 26033                           	opt stack 0
 26034  00007E                     	ds	1
 26035  0000                     int$flags	set	btemp
 26036                           pclatu	equ	0xFFB
 26037                           pclath	equ	0xFFA
 26038                           tblptru	equ	0xFF8
 26039                           tblptrh	equ	0xFF7
 26040                           tblptrl	equ	0xFF6
 26041                           tablat	equ	0xFF5
 26042                           prodh	equ	0xFF4
 26043                           prodl	equ	0xFF3
 26044                           intcon	equ	0xFF2
 26045                           intcon2	equ	0xFF1
 26046                           intcon3	equ	0xFF0
 26047                           indf0	equ	0xFEF
 26048                           postinc0	equ	0xFEE
 26049                           fsr0h	equ	0xFEA
 26050                           fsr0l	equ	0xFE9
 26051                           wreg	equ	0xFE8
 26052                           postdec1	equ	0xFE5
 26053                           fsr1h	equ	0xFE2
 26054                           fsr1l	equ	0xFE1
 26055                           indf2	equ	0xFDF
 26056                           postinc2	equ	0xFDE
 26057                           postdec2	equ	0xFDD
 26058                           fsr2h	equ	0xFDA
 26059                           fsr2l	equ	0xFD9
 26060                           status	equ	0xFD8


Data Sizes:
    Strings     1368
    Constant    27
    Data        8
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_131(CODE[7]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_130(CODE[18]), STR_129(CODE[18]), STR_128(CODE[17]), STR_127(CODE[17]), 
		 -> STR_126(CODE[15]), STR_125(CODE[15]), STR_124(CODE[18]), STR_123(CODE[15]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[16]), STR_65(CODE[16]), STR_64(CODE[19]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  250900
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37162
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18298
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  23    23      0   13471
                                             43 BANK0     23    23      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     392
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2172
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11734
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23608
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22694
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10987
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10987
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47352
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13531
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     940
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118944
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9275
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9232
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9163
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15799
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9436
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19949
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9438
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9028
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 11:38:35 2017

                                    _i 013B                     i2_I2C_Master_Start 5C3A  
                   i2_I2C_Master_Write 5C10                                     l71 5BA8  
                                   _ID 1784                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 560C                                    ID@i 00B1  
                                  ID@n 00C0                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 481A  
                                  l800 1378                                    l627 2E38  
                                  l820 153A                                    l805 1426  
                                  l815 157A                                    l832 1602  
                                  l808 1474                                    l842 1776  
                                  l834 1628                                    l826 172A  
                                  l818 150E                                    l835 1650  
                                  l836 1678                                    l925 4E64  
                                  l837 16A0                                    l854 1A06  
                                  l838 16CA                                    l871 1BCC  
                                  l847 1840                                    l867 1B1A  
                                  l787 1262                                    l868 1B34  
                                  l797 132A                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3D98                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 43DA  
                                  _log 00F0                                    _sel 00FD  
                                  _var 0147                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3F5E                    _log_count_can_w_lab 013F  
                           i2_delay_ms 5B48        __end_of_change_state_to_menu_11 583C  
      __end_of_change_state_to_menu_12 567C        __end_of_change_state_to_menu_22 5644  
      __end_of_change_state_to_menu_23 580C           _f_can_coming_to_distribution 0131  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 592C  
      __end_of_change_state_to_logs_12 58FC        __end_of_change_state_to_logs_22 58CC  
      __end_of_change_state_to_logs_23 5988        __end_of_change_state_to_logs_33 589C  
      __end_of_change_state_to_logs_34 586C                                   ??_ID 00AB  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1123 44FA  
                                 l1303 09EE                                   l1136 5B74  
                                 l1241 433A                                   l1145 408C  
                                 l1306 0A54                                   l1307 0AA2  
                                 l1308 0B08                                   l1421 4DE4  
                                 l1333 0EB0                                   l1309 0B56  
                                 l1261 4700                                   l1350 1120  
                                 l1270 2AE2                                   l1238 431A  
                                 l1264 4704                                   l1345 104A  
                                 l1273 2AE6                                   l1522 1E20  
                                 l1450 3EE6                                   l1451 3F00  
                                 l1363 5310                                   l1428 4DF4  
                                 l1445 3E9A                                   l1384 2A76  
                                 l1296 0944                                   l1393 29EA  
                                 l1369 5320                                   l1465 44CA  
                                 l1482 52B4                                   l1474 44C4  
                                 l1466 448C                                   l1299 0948  
                                 l1397 2A42                                   ?_arm 0001  
                                 l1399 2A70                                   l1488 52C4  
                                 l1916 4B30                                   l1786 42A0  
                                 l1969 4F88                                   l1979 5206  
                                 l8004 1732                                   l6510 59C8  
                                 l7150 2E60                                   l7142 2DB6  
                                 l6512 59DA                                   l7160 2EF6  
                                 l7152 2E7E                                   l8200 460C  
                                 l8120 1A34                                   l8016 176A  
                                 l7170 2F8C                                   l7162 2F14  
                                 l7154 2E9C                                   l8202 4626  
                                 l8018 1778                                   l7164 2F32  
                                 l7156 2EBA                                   l7148 2E42  
                                 l8140 1A94                                   l8132 1A6C  
                                 l8044 17FC                                   l7324 4B50  
                                 l6710 1C0E                                   l6534 5952  
                                 l7166 2F50                                   l7158 2ED8  
                                 l7174 2FAA                                   l8206 4640  
                                 l8118 1A2C                                   l8062 186A  
                                 l7334 4BDC                                   _ADIE 007CEE  
                                 l6552 5A00                                   l6720 1C4C  
                                 l6704 1BE8                                   l8312 2C80  
                                 l7168 2F6E                                   l7176 3008  
                                 l8208 466E                                   l8144 1AA4  
                                 l8128 1A5C                                   l7440 4FE0  
                                 l7424 4FA0                                   l7328 4B66  
                                 l6570 4F44                                   l6810 1F32  
                                 l6802 1F0E                                   l6714 1C18  
                                 l9114 3E22                                   l9122 3E68  
                                 l8306 2C3E                                   l9202 4C84  
                                 l7370 4566                                   l7610 4CE6  
                                 l7506 5568                                   l7514 4880  
                                 l8154 1AEE                                   l8074 18AE  
                                 l6580 4F7A                                   l6572 4F4A  
                                 l6804 1F18                                   l6740 1D0C  
                                 l6708 1BFC                                   l9140 3EAC  
                                 l8500 0C56                                   l8332 2CFC  
                                 l8324 2CCC                                   l7524 4904  
                                 l8084 197A                                   l7444 4FF8  
                                 l7428 4FB6                                   l6590 51CE  
                                 l6822 1F74                                   l6750 1D84  
                                 l8510 0C7E                                   l7462 49E4  
                                 l7382 459E                                   l7374 4570  
                                 l7606 4CD0                                   l6902 4254  
                                 l7518 48C0                                   l8182 1B8A  
                                 l8190 1BCE                                   l8158 1B04  
                                 l6568 4F38                                   l6592 51D4  
                                 l6832 1FE6                                   l6816 1F4E  
                                 l6752 1D9C                                   l6736 1CFA  
                                 l6728 1CC8                                   l9160 3F12  
                                 l8504 0C60                                   l8344 2D44  
                                 l8336 2D32                                   l6840 5692  
                                 l9312 01D6                                   l7616 4D12  
                                 l6912 42AA                                   l6904 4284  
                                 l7392 5A10                                   l6818 1F5A  
                                 l6826 1F88                                   l6746 1D72  
                                 l6738 1D06                                   l6762 1DE6  
                                 l6834 1FF2                                   l9146 3EC6  
                                 l9138 3E9C                                   l8530 0CE4  
                                 l8514 0C88                                   l7474 4A18  
                                 l7490 4A68                                   l6850 4D70  
                                 l9402 047C                                   l9306 01C6  
                                 l9322 01FC                                   l7386 45A8  
                                 l7378 4588                                   l6930 4AC4  
                                 l6906 4292                                   l8098 19C2  
                                 l6596 51F8                                   l6588 51C2  
                                 l6828 1F8E                                   l6780 1E78  
                                 l6756 1DC8                                   l6748 1D7E  
                                 l9148 3ED0                                   l8612 0E88  
                                 l8604 0E66                                   l8540 0D0C  
                                 l8508 0C78                                   l8348 2D7A  
                                 l8276 2B36                                   l7476 4A24  
                                 l7468 49FA                                   l9412 052C  
                                 l9404 04E0                                   l9340 0258  
                                 l9316 01EE                                   l9308 01CC  
                                 l6940 4B1E                                   l6932 4ACA  
                                 l8196 45D8                                   l7396 5A26  
                                 l6774 1E58                                   l6758 1DE0  
                                 l9158 3F02                                   l8614 0E8E  
                                 l8534 0CFC                                   l8526 0CDA  
                                 l8518 0CA0                                   l8390 09B8  
                                 l8294 2BEE                                   l7494 4A7C  
                                 l7486 4A5A                                   l7478 4A2A  
                                 l9190 4C3E                                   l9182 4C18  
                                 l6846 4D5A                                   l6838 5686  
                                 l9430 0578                                   l9422 0556  
                                 l9350 0282                                   l9270 00FE  
                                 l8198 45F2                                   l6918 42C6  
                                 l7822 1220                                   l6792 1EB4  
                                 l9168 3F58                                   l6880 4E7E  
                                 l8640 0F1A                                   l8632 0EF8  
                                 l8608 0E70                                   l8560 0D80  
                                 l8552 0D5E                                   l8544 0D24  
                                 l8536 0D02                                   l6856 4D90  
                                 l9512 0750                                   l9504 072E  
                                 l9416 0544                                   l9408 0522  
                                 l9344 0270                                   l9336 024E  
                                 l9280 013A                                   l6928 4AB4  
                                 l7832 126A                                   l6778 1E72  
                                 l6874 4E4C                                   l8722 10A4  
                                 l8650 0F42                                   l8642 0F20  
                                 l8618 0E98                                   l8570 0DA8  
                                 l8562 0D86                                   l8482 0BF4  
                                 l8474 0BD2                                   l8394 09C2  
                                 l8802 444E                                   l9194 4C62  
                                 l9186 4C2C                                   l9178 4C08  
                                 l9530 07B6                                   l9450 063E  
                                 l9426 0560                                   l9354 028C  
                                 l6890 41E2                                   l7906 1410  
                                 l8732 10CC                                   l8636 0F02  
                                 l8556 0D68                                   l8492 0C1C  
                                 l8484 0BFA                                   l8388 09B2  
                                 l9188 4C38                                   l9508 0738  
                                 l9380 0350                                   l9292 016E  
                                 l9284 0144                                   l9276 0128  
                                 l7940 14F2                                   l7932 14C8  
                                 l7916 1454                                   l6798 1ED6  
                                 l8742 110A                                   l8726 10BC  
                                 l8718 109A                                   l8662 0F86  
                                 l8646 0F2A                                   l8582 0DEC  
                                 l8566 0D90                                   l8478 0BDC  
                                 l8398 09DA                                   l8806 4474  
                                 l8814 4492                                   l9198 4C70  
                                 l9534 07C0                                   l9454 0648  
                                 l9390 03E6                                   l9382 036E  
                                 l9374 02F6                                   l9358 02A4  
                                 l6894 41F6                                   l7918 145E  
                                 l8904 27CE                                   l8752 113A  
                                 l8736 10E4                                   l8728 10C2  
                                 l8672 0FAE                                   l8592 0E14  
                                 l8488 0C04                                   l8816 44AC  
                                 l8808 447E                                   l9552 080C  
                                 l9544 07EA                                   l9472 0694  
                                 l9464 0672                                   l9392 0404  
                                 l9384 038C                                   l9376 0314  
                                 l9288 015C                                   l6896 4204  
                                 l7944 1512                                   l7928 14A2  
                                 l7880 1362                                   l7848 12A6  
                                 l8922 287E                                   l8762 1162  
                                 l8754 1140                                   l8666 0F9E  
                                 l8658 0F7C                                   l8586 0E04  
                                 l8578 0DE2                                   l8818 44B6  
                                 l9570 086A                                   l9538 07D8  
                                 l9490 06FA                                   l9458 0660  
                                 l9394 0422                                   l9386 03AA  
                                 l9378 0332                                   l6898 4234  
                                 l7938 14E8                                   l7890 13A6  
                                 l8924 2884                                   l8772 118A  
                                 l8764 1168                                   l8692 1022  
                                 l8684 1000                                   l8676 0FC6  
                                 l8668 0FA4                                   l8596 0E2C  
                                 l8588 0E0A                                   l9548 07F4  
                                 l9468 067C                                   l9396 0440  
                                 l9388 03C8                                   l7948 152E  
                                 l7868 1314                                   l8942 2934  
                                 l8758 114A                                   l8694 1028  
                                 l9910 4352                                   l9574 0874  
                                 l9494 0704                                   l9398 045E  
                                 l7966 15DE                                   l7878 1358  
                                 l8960 2996                                   l8768 1172  
                                 l8688 100A                                   l9920 4370  
                                 l9912 4358                                   l9904 4340  
                                 l9592 08C0                                   l9584 089E  
                                 l8970 29D4                                   l8962 29AC  
                                 l8954 2976                                   l8698 1032  
                                 l9922 4376                                   l9914 435E  
                                 l9906 4346                                   l9578 088C  
                                 l9498 071C                                   l9850 3FBE  
                                 l8980 2A18                                   l8868 4E1C  
                                 l9916 4364                                   l9908 434C  
                                 l9588 08A8                                   l9596 08CC  
                                 l7996 16E0                                   l8966 29C0  
                                 l9918 436A                                   l9926 437C  
                                 l7998 1716                                   STR_1 FB52  
                                 l8984 2A2C                                   l9928 43CE  
                                 l9848 3FAA                                   STR_2 FF49  
                                 STR_3 FB40                                   l9874 4046  
                                 STR_4 FE5D                                   STR_5 FB40  
                                 STR_6 FDD9                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 l9888 42D6                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5220 1D46  
                                 u5140 5464                                   u5150 5466  
                                 u5160 54FC                                   u5161 54F8  
                                 u5170 54FE                                   u5227 1D3C  
                                 _PEIE 007F96                                   u5260 1DBE  
                                 u8000 28C6                                   u7120 2B78  
                                 u7040 1B96                                   u6400 122C  
                                 u8010 28C8                                   u7130 2B7A  
                                 u5267 1DB4                                   u8100 29A4  
                                 u7300 0B56                                   u7060 1BCC  
                                 u6420 1262                                   _RCEN 007E2B  
                                 u8110 29BC                                   u8111 29B8  
                                 u7160 2D20                                   u8050 295E  
                                 u7058 1B9A                                   u6418 1230  
                                 u8300 3EBE                                   u7260 09EE  
                                 u4940 5950                                   u7190 2D68  
                                 u5910 54B0                                   i2l71 5BBC  
                                 u7280 0AA2                                   u7168 2D24  
                                 u5920 54B2                                   u8241 3E90  
                                 u8250 3E92                                   u6730 1600  
                                 u8068 2962                                   u6660 154C  
                                 u7198 2D6C                                   u5950 2E38  
                                 u6830 18FA                                   u5935 5240  
                                 u6840 18FC                                   u6680 1572  
                                 u6850 194E                                   u6690 1574  
                                 u8291 3EBC                                   u6860 1950  
                                 u7830 44A2                                   u6678 1550  
                                 u7840 44A4                                   u9360 408C  
                                 u7780 446A                                   u7790 446C  
                                 u7970 2810                                   u7980 2812  
                                 u9807 1346                                   u9817 1382  
                                 u9907 1594                                   u9827 1394  
                                 u9917 15CC                                   u9837 13B4  
                                 u9927 160C                                   u9847 13DE  
                                 u9937 161E                                   u9857 1430  
                                 u9777 11B0                                   u9947 1632  
                                 u9867 1442                                   u9787 12D4  
                                 u9957 1646                                   u9877 147E  
                                 u9797 1334                                   u9967 165A  
                                 u9887 1490                                   u9977 166E  
                                 u9897 14B0                                   u9987 1682  
                                 _RSEN 007E29                                   u9997 1696  
                          _stopSignals 5B2C                                   _Test 42D4  
                                 _back 0063                                   _main 4778  
                                 _down 0065                           ___ftpack@arg 0080  
                                 _keys FA8B                           ___ftpack@exp 0083  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5ACA                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013D                        __end_ofi2_putch 5BFA  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 35C4                            i2_lcdNibble 5328  
                      __end_of_Loading 1784                   __end_of_actuatorTest 1192  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10130 47EC  
                                l10122 47C2                                  l10132 47F2  
                                l10124 47D8                                  l10142 4810  
                                l10134 47F8                                  l10144 4816  
                                l10148 481C                   __end_of_EEPROM_write 45C0  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4A86  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAA6  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FDEA                                  STR_15 FFD2  
                                STR_23 FF3B                                  STR_31 FDC8  
                                STR_16 FFE2                                  STR_24 FD2F  
                                STR_32 FD0D                                  STR_40 FCC9  
                                STR_17 FFF2                                  STR_25 FE0C  
                                STR_33 FD1E                                  STR_41 FCB8  
                                STR_18 FFF6                                  STR_34 FDB7  
                                STR_50 FD95                                  STR_42 FD73  
                                STR_26 FD40                                  STR_43 FD73  
                                STR_35 FDB7                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FDFB  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD51                                  STR_36 FCFC  
                                STR_44 FCDA                        __end_of___awmod 4C8E  
                                STR_45 FCC9                                  STR_37 FD0D  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE09                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_38 FDA6  
                                STR_46 FD84                                  STR_70 FC85  
                                STR_47 FD84                                  STR_55 FFFA  
                                STR_63 FAA6                                  STR_71 FEF4  
                                STR_39 FD62                                  STR_56 FFDE  
                                STR_80 FF57                                  STR_72 FF2D  
                                STR_48 FCEB                                  STR_64 FAD3  
                                STR_49 FCDA                                  STR_57 FFD6  
                                STR_81 FE7C                                  STR_65 FE3D  
                                STR_73 FC41                                  STR_58 FFD2  
                                STR_90 FF2D                                  STR_82 FE09  
                                STR_74 FF11                                  STR_66 FE4D  
                                STR_59 FFE2                                  STR_75 FF64  
                                STR_91 FEE5                                  STR_83 FEA9  
                                STR_67 FABE                                  STR_68 FFBC  
                                STR_92 FF03                                  STR_76 FED6  
                                STR_84 FE1D                                  STR_85 FF86  
                                STR_77 FF1F                                  STR_69 FC74  
                                STR_93 FC52                                  STR_86 FF86  
                                STR_78 FFAD                                  STR_94 FF70  
                                STR_79 FF2D                                  STR_87 FFA4  
                                STR_95 FC63                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FEC7                                  STR_98 FBB9  
                                STR_99 FBA8           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4B42  
         i2updateServoPosition@time_us 0001                                  u10007 16AA  
                                u10017 16BE                                  u10107 1B1E  
                                u10027 16D4                                  u10117 1B28  
                                u10037 174C                                  u11007 27AC  
                                u10207 0114                                  u10127 1B4E  
                                u10047 5706                                  u11017 2826  
                                u10217 014C                                  u10137 5A1C  
                                u10057 4FBE                                  u11107 206C  
                                u11027 2872                                  u10307 0592  
                                u10227 0188                                  u10147 550E  
                                u10067 179E                                  u11117 20B8  
                                u11037 28DC                                  u10317 0650  
                                u10237 01DE                                  u10157 5542  
                                u10077 1850                                  u11207 22CE  
                                u11127 20EC                                  u11047 2928  
                                u10407 087C                                  u10327 0684  
                                u10247 020A                                  u10167 451C  
                                u10087 199E                                  _T0CON 000FD5  
                                u11217 2302                                  u11137 211E  
                                u11057 29F4                                  u10417 08B0  
                                u10337 06AE                                  u10257 0260  
                                u10177 4578                                  u10097 1ABE  
                                u11307 3EF4                                  u11227 2334  
                                u11147 216A                                  u11067 2A06  
                                u10507 2C30                                  u10427 42E4  
                                u10347 070C                                  u10267 0294  
                                u10187 45B0                        ___awdiv@divisor 0088  
                                u11317 59D0                                  u11237 2380  
                                u11157 219E                                  u11077 2A4C  
                                u10517 2C74                                  u10437 2A92  
                                u10357 0740                                  u10277 02BE  
                                u10197 002A                                  u11327 5098  
                                u11247 23B4                                  u11167 21D0  
                                u11087 2A5E                                  u10607 0938  
                                u10527 2C92                                  u10447 2AD6  
                                u10367 076A                                  u10287 0534  
                                _T1CON 000FCD                                  u11337 50A2  
                                u11257 23E6                                  u11177 221C  
                                u11097 2020                                  u10617 095A  
                                u10537 2CC0                                  u10457 2AF8  
                                u10377 07C8                                  u10297 0568  
                                u11347 50CE                                  u11267 4EE4  
                                u11187 2250                                  u10707 0BE4  
                                u10627 09CA                                  u10547 2CDA  
                                u10467 2B26                                  u10387 07FC  
                                u11357 50D8                                  u11277 4F00  
                                u11197 2282                                  u10717 0C0C  
                                u10637 09FE                                  u10557 43E8  
                                u10477 2B8E                                  u10397 0826  
                                u11287 3DCE                                  u10807 0E78  
                                u10727 0C68                                  u10647 0A64  
                                u10567 46B0                                  u10487 2BE2  
                                _T2CON 000FCA                                  u11297 3EEA  
                                u10817 0EA0                                  u10737 0C90  
                                u10657 0A82                                  u10577 46F4  
                                u10497 2C02                                  u10907 10D4  
                                u10827 0F0A                                  u10747 0CEC  
                                u10667 0AB2                                  u10587 4716  
                                u10917 1124                                  u10837 0F32  
                                u10757 0D14                                  u10677 0B18  
                                u10597 08F4                                  u10927 112E  
                                u10847 0F8E                                  u10767 0D70  
                                u10687 0B36                                  _T3CON 000FB1  
                                u10937 1152                                  u10857 0FB6  
                                u10777 0D98                                  u10697 0B66  
                                u10947 117A                                  u10867 1012  
                                u10787 0DF4                                  u10957 4DAE  
                                u10877 103A                                  u10797 0E1C  
                                u10967 4DFE                                  u10887 105C  
                                u10977 4E12                                  u10897 10AC  
                                u10987 527E                                  u10997 52DA  
                      __end_of___lwdiv 4F92                        __end_of___lwmod 5210  
                                i2l268 3308                                  i2l627 3652  
                                i2l904 34EA                                  i2l925 5114  
                                i2l952 5608                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 2012                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5BEE                        __end_of_handler 3BD0  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 59E0  
                      __end_of_initLCD 554C                         __CFG_EBTRB$OFF 000000  
                                _debug 00E8                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 4F92  
                      __end_of_loadRTC 4D1A                        __end_of_readMAG 5506  
                      __end_of_dpowers FAA6                                  _first 0137  
                                _enter 0067                                  arm@on 00AC  
                      __end_of_isdigit 5A0A                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5BCE  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5A80                       __end_ofi2_getRTC 5076  
                  _log_count_pop_w_tab 0141                                  status 000FD8  
                          readCOND@res 0084                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 276E  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 574C                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   printSortTimer@i_1160 0047  
                 __size_of_EEPROM_read 0018                        __initialization 53D4  
                         __end_of_Test 43DA                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4840                           __end_of_keys FA9C  
                         __end_of_sort 5AEC                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3D98                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00BC  
                               ID@res2 00BE             __size_of_updateServoStates 01C8  
                               ID@res3 00AD                                 ID@time 00BB  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FB86  
                               STR_101 FC0E                                 STR_110 FE8B  
                               STR_102 FC1F                                 STR_111 FCA7  
                               STR_103 FB64                                 STR_104 FE2D  
                               STR_120 FC30                                 STR_112 FAE6  
                               STR_113 FBCA                                 STR_105 FB97  
                               STR_121 FB0A                                 STR_114 FBFD  
                               STR_106 FB75                                 STR_130 FB2E  
                               STR_122 FAF8                                 _ADRESH 000FC4  
                               STR_107 FB97                                 STR_115 FBFD  
                               STR_131 FFB5                                 STR_123 FE6D  
                               STR_108 FEB8                                 STR_116 FBEC  
                               STR_124 FB1C                                 _EEADRH 000FAA  
                               STR_117 FBFD                                 STR_125 FE6D  
                               STR_109 FE9A                                 STR_118 FBEC  
                               STR_126 FE6D                                 _ADRESL 000FC3  
                               STR_127 FBDB                                 STR_119 FBDB  
                               STR_128 FC96                                 STR_129 FAE6  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 5590                                 ?_putch 0001  
                     __end_of___ftpack 42D4                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 57AC  
            i2_change_state_to_menu_22 577C                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1044 3AD4                                 i2l1053 3B78  
                               i2l1055 3B94                                 i2l1136 5BA0  
                               i2l1522 25DA                                 i2l7012 24EA  
                               i2l7004 24C2                                 i2l7102 26F6  
                               i2l7022 2542                                 i2l7014 24F4  
                               i2l7110 2752                                 i2l7104 26FC  
                               i2l7032 258E                                 i2l7024 254C  
                               i2l7016 24F8                                 i2l1969 53CA  
                               i2l7050 2608                                 i2l7034 25A0  
                               i2l7026 2552                                 i2l7114 5724  
                               i2l1979 55C8                                 i2l7108 274A  
                               i2l7028 2564                                 i2l7116 572C  
                               i2l7054 2620                                 i2l7038 25A4  
                               i2l7080 269C                                 i2l7056 2624  
                               i2l7304 41B0                                 i2l7074 2670  
                               i2l6620 5AA0                                 i2l7092 26C8  
                               i2l7068 2656                                 i2l7094 26D0  
                               i2l7086 26B2                                 i2l7078 2694  
                               i2l7098 26E4                                 i2l6644 5B24  
                               i2l7292 416C                                 i2l6654 5398  
                               i2l9232 5B4C                                 i2l6656 53A0  
                               i2l7296 417C                                 i2l9224 512A  
                               i2l6666 53C0                                 i2l6658 53A4  
                               i2l6682 55BE                                 i2l6674 559E  
                               i2l7722 38F8                                 i2l7570 369E  
                               i2l9218 5100                                 i2l9236 5B5C  
                               i2l6676 55A6                                 i2l7732 391E  
                               i2l7716 38EA                                 i2l7708 38D2  
                               i2l7660 381E                                 i2l7580 370C  
                               i2l7572 36B4                                 i2l7564 365C  
                               i2l6678 55AA                                 i2l7750 3958  
                               i2l7742 3940                                 i2l7726 3914  
                               i2l7670 3848                                 i2l7582 3722  
                               i2l7574 36CA                                 i2l7566 3672  
                               i2l7590 3764                                 i2l7558 35F0  
                               i2l6952 503C                                 i2l7760 3978  
                               i2l7736 3932                                 i2l7672 384C  
                               i2l7584 3738                                 i2l7576 36E0  
                               i2l7568 3688                                 i2l7592 37BE  
                               i2l6962 5066                                 i2l7738 3936  
                               i2l7690 3882                                 i2l7682 386A  
                               i2l7586 374E                                 i2l7578 36F6  
                               i2l9610 307C                                 i2l6956 504C  
                               i2l6980 240A                                 i2l7772 39AE  
                               i2l7764 398A                                 i2l7756 3966  
                               i2l7692 3888                                 i2l7684 3870  
                               i2l7668 3838                                 i2l9700 31BA  
                               i2l9620 309E                                 i2l9612 3082  
                               i2l6990 242E                                 i2l7686 3876  
                               i2l7678 3856                                 i2l6984 241A  
                               i2l7768 399C                                 i2l7688 387C  
                               i2l7696 388E                                 i2l9720 3210  
                               i2l9712 31EC                                 i2l9704 31D0  
                               i2l9640 30D6                                 i2l9624 30AC  
                               i2l9616 3090                                 i2l6986 2428  
                               i2l7778 39B8                                 i2l6996 2460  
                               i2l9740 325E                                 i2l9732 323A  
                               i2l9724 321E                                 i2l9716 31FA  
                               i2l9708 31DE                                 i2l9660 311E  
                               i2l9652 3102                                 i2l9644 30E4  
                               i2l9636 30C8                                 i2l9628 30BA  
                               i2l9752 3290                                 i2l9744 326C  
                               i2l9736 3250                                 i2l9728 322C  
                               i2l9680 316C                                 i2l9672 3150  
                               i2l9664 312C                                 i2l9656 3110  
                               i2l9648 30F4                                 i2l9748 327A  
                               i2l9692 319E                                 i2l9684 317A  
                               i2l9676 315E                                 i2l9668 313A  
                               i2l9942 3328                                 i2l9758 329E  
                               i2l9960 3450                                 i2l9696 31AC  
                               i2l9688 3190                                 i2l9938 3318  
                               i2l9948 3382                                 i2l9974 34B8  
                               i2l9982 34EC                                 i2l9968 34A0  
                               i2l9986 3520                _f_most_recent_sort_time 0135  
                               i2l9988 3526                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5A32  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5ACA                                 ___ftge 4840  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 46A2                                 ___wmul 56B2  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 56E8                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 54BA  
                               _getRTC 4D1A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5B0E  
                               _initUI 574C                                 _readIR 5422  
                               _logRun 3F5E                                 getIR@i 0087  
                               clear_0 53FA                                 clear_1 5406  
                               clear_2 5412                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 52CC  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1BDA                              ??_handler 004B  
              __size_of_initGlobalVars 00C0                           ?_retrieveLog 0007  
                               _strcpy 567C                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5A5A  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5A32                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 53D4  
                     __end_of_printRTC 304C                           __mediumconst FA8A  
                    __end_ofi2___lwmod 55D2                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F4                  __end_of_algorithmTest 4778  
                    __end_ofi2_lcdInst 5C06                      __end_ofi2_isdigit 5B2C  
                           __accesstop 0080                __end_of__initialization 5418  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0145  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5B92  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5C1A  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 5004  
                          i2printRTC@i 0041                          _initSortTimer 4B42  
          __end_of_updateServoPosition 4EA2                          __end_of_putch 5BDE  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 1BDA                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 59B4  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5988  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 514A                           _EEPROM_write 44D8  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3246 0149  
                    __end_of_SpeedTest 4E24                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1142 00AF  
                              _ID$1145 00B0                           ?i2_lcdNibble 0001  
                              UI@i_412 00C9                                UI@i_415 00CA  
                              UI@i_416 00CB                                UI@i_450 00D4  
                              UI@i_442 00D0                                UI@i_434 00CC  
                              UI@i_451 00D5                                UI@i_443 00D1  
                              UI@i_435 00CD                                UI@i_446 00D2  
                              UI@i_438 00CE                                UI@i_447 00D3  
                              UI@i_439 00CF                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2430 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10100 55E2                                i2l10020 3C24  
                              i2l10012 3C04                                i2l10014 3C0E  
                              i2l10104 55E8                                i2l10008 3BEE  
                              i2l10042 3CC4                                i2l10026 3C3A  
                              i2l10034 3C58                                i2l10028 3C4E  
                              i2l10036 3CA2                                i2l10212 3AEE  
                              i2l10054 3D10                                i2l10038 3CAC  
                              i2l10048 3CEA                                i2l10240 3B46  
                              i2l10160 3A52                                i2l10234 3B2C  
                              i2l10218 3AFC                                i2l10162 3A56  
                              i2l10170 3A6A                                i2l10068 3D66  
                              i2l10244 3B4C                                i2l10172 3A82  
                              i2l10190 3AA8                                i2l10166 3A62  
                              i2l10176 3A8C                                i2l10098 55DC  
                              i2l10266 3B92                                i2l10720 3C9A  
                              i2l10730 32DE                                i2l10722 3D7E  
                              i2l10714 3C7C                                i2l10732 32FA  
                              i2l10724 3D8E                                i2l10716 3C86  
                              i2l10718 3C90                                i2l10736 38A6  
                              i2l10728 32BC                                i2l10738 38C2  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00E4                              ?_readCOND 0001  
                           _initEEPROM 5B7C                                i2_putch 5BEE  
                            ?_initTime 0080                        _f_loadingNewCan 00EE  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 50E2  
                              _Loading 1192            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 49C8  
                              ___awmod 4BEC                             _initServos 4EA2  
                              ___lldiv 4A86                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4F1A  
                              ___lwmod 51AE                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 53D4  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4908                                _lcdInst 5BDE  
                              _handler 0008                                __ptext0 4778  
                              __ptext1 5ACA                                __ptext2 1192  
                              __ptext3 4B42                                __ptext4 4908  
                              __ptext5 56E8                                __ptext6 4F92  
                              __ptext7 5422                                __ptext8 1784  
                              __ptext9 546E                        __size_of_printf 0438  
                              _readADC 59B4                        __size_of_strcpy 0036  
                              _initLCD 5506                                _cur_can 012B  
                              _loadRTC 4C8E                                _readMAG 54BA  
                              _dpowers FA9C                     actuatorTest@i_1750 00B3  
                   actuatorTest@i_1743 00AE                     actuatorTest@i_1752 00B4  
                   actuatorTest@i_1744 00AF                     actuatorTest@i_1736 00AD  
                   actuatorTest@i_1753 00B5                     actuatorTest@i_1762 00BA  
                   actuatorTest@i_1746 00B0                     actuatorTest@i_1763 00BB  
                   actuatorTest@i_1755 00B6                     actuatorTest@i_1747 00B1  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00C0  
                   actuatorTest@i_1756 00B7                     actuatorTest@i_1773 00C1  
                   actuatorTest@i_1765 00BC                     actuatorTest@i_1749 00B2  
                   actuatorTest@i_1766 00BD                     actuatorTest@i_1758 00B8  
                   actuatorTest@i_1775 00C2                     actuatorTest@i_1759 00B9  
                   actuatorTest@i_1776 00C3                     actuatorTest@i_1768 00BE  
                   actuatorTest@i_1769 00BF                                _isdigit 59E0  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 45C0  
                       __pintcode_body 39E6                   PlatformTest@res_1788 00AF  
                 end_of_initialization 5418                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 39E6  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 005C                              i2u1140_47 5378  
                            i2u1141_47 5B54                              i2u1136_47 383E  
                            i2u1137_47 5342                              i2u1138_47 534C  
                            i2u1139_47 536E              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5B64                 __end_of_initGlobalVars 49C8  
                           _sensorTest 2A84                             _servoTimes 005B  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 39E6                           ??_BothServos 00AB  
                __end_of_machineConfig 51AE                   __end_of_PlatformTest 2A84  
                           _updateMenu 304C                      i2_I2C_Master_Read 5A80  
                            _IR_signal 00E0                      i2_I2C_Master_Wait 5BBC  
                    i2_I2C_Master_Stop 5C32                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 5270  
                            i2___lwdiv 5382                              i2___lwmod 5590  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 37FA  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5BFA                          Loading@i_1130 00BA  
                        Loading@i_1131 00BC                          Loading@i_1133 00BE  
                        Loading@i_1119 00B6                          Loading@i_1128 00B8  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5B0E                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 2400                    __end_of_EEPROM_read 5B7C  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 4908                         __end_of___wmul 56E8  
                       __end_of_getMAG 571A                         __end_of_getRTC 4DA0  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 577C                         __end_of_readIR 546E  
                       __end_of_logRun 40A2                       i2___wmul@product 0005  
                       __end_of_printf 2012                           i2printf@flag 0026  
                       __end_of_strcpy 56B2              __end_ofi2_I2C_Master_Read 5AA6  
            __end_ofi2_I2C_Master_Wait 5BCE                           i2printf@prec 001D  
                  start_initialization 53D4              __end_ofi2_I2C_Master_Stop 5C3A  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 52CC  
                          __end_of_arm 44D8                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1404 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 4DA0  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 0149  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1141 00B3                               ID@i_1144 00B5  
                             ID@i_1147 00B7                               ID@i_1148 00B9  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0016                    _printSortTimer$2562 0043  
                 __size_of_BlockerTest 01C6                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 007E                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02B8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2065 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                      __size_of_readCOND 004C  
                          _EEPROM_read 5B64                       _I2C_Master_Start 5C2A  
                   __end_of_PortTestDC 5328                              _f_lastCan 00EC  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5C06                      __size_of_initTime 0022  
                i2_updateServoPosition 50E2                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FA8A  
                            _lcdNibble 5076                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 5BBC  
                            __ptext101 5B48                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0139                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 46A2                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0456  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5C42             __end_ofi2_I2C_Master_Write 5C1A  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 37FA                            ??i2_isdigit 0001  
                         _PlatformTest 276E                           BlockerTest@i 00AD  
                             i2u504_40 5A9E                               _PIR2bits 000FA1  
                      PlatformTest@res 00AD                               i2u624_40 3652  
                             i2u571_40 2586                               i2u571_47 257C  
                             i2u567_40 2526                               i2u567_47 251C  
                             i2u950_40 34EA                               i2u943_40 3466  
                             i2u946_40 348A                               i2u946_46 348C  
                             i2u948_40 34C2                               i2u949_48 34C4  
                  __size_of_updateMenu 02C0                         _log_completion 00F2  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5A5A  
                        lcdNibble@data 0081                               i2_getRTC 5004  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 2400                               i2_strcpy 571A  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 53E8                           ??_initEEPROM 00B1  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5BA8                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 05F2  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4BEC                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 580C             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 5644             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 560C                _change_state_to_menu_23 57DC  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 58FC  
              _change_state_to_logs_12 58CC                _change_state_to_logs_22 589C  
              _change_state_to_logs_23 595A                _change_state_to_logs_33 586C  
              _change_state_to_logs_34 583C                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 554C  
                             ___ftpack 41C8                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3BC8  
                   __end_of_initEEPROM 5B92                        _I2C_Master_Init 5210  
                     __size_of_readADC 002C                        _I2C_Master_Read 592C  
                     __size_of_initLCD 0046                           _f_ID_receive 012D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 5BA8                        _I2C_Master_Stop 5C22  
                     __size_of_isdigit 002A                               _delay_ms 5A0A  
                       _printSortTimer 330C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 41C8  
                             __ptext10 5A0A                               __ptext11 4840  
                             __ptext20 4A86                               __ptext12 554C  
                             __ptext21 5988                               __ptext13 41C8  
                             __ptext30 4D1A                               __ptext22 5AEC  
                             __ptext14 45C0                               __ptext31 5C06  
                             __ptext23 5506                               __ptext15 514A  
                             __ptext40 42D4                               __ptext32 5C22  
                             __ptext24 5B7C                               __ptext16 3F5E  
                             __ptext41 2A84                               __ptext33 5C2A  
                             __ptext25 44D8                               __ptext17 574C  
                             __ptext50 2012                               __ptext42 54BA  
                             __ptext34 592C                               __ptext26 5B64  
                             __ptext18 4C8E                               __ptext51 5B2C  
                             __ptext43 43DA                               __ptext35 5BA8  
                             __ptext27 0012                               __ptext19 5210  
                             __ptext60 51AE                               __ptext52 4EA2  
                             __ptext44 46A2                               __ptext36 560C  
                             __ptext28 2D82                               __ptext61 4F1A  
                             __ptext53 4E24                               __ptext45 08DA  
                             __ptext37 5644                               __ptext29 567C  
                             __ptext70 571A                               __ptext62 5BDE  
                             __ptext54 3D98                               __ptext46 4DA0  
                             __ptext38 4BEC                               __ptext71 37FA  
                             __ptext63 5076                               __ptext55 59B4  
                             __ptext47 5270                               __ptext39 49C8  
                             __ptext80 58CC                               __ptext72 577C  
                             __ptext56 1BDA                               __ptext48 52CC  
                             __ptext81 58FC                               __ptext73 57AC  
                             __ptext65 3BD0                               __ptext57 5BCE  
                             __ptext49 276E                               __ptext90 5A5A  
                             __ptext82 5AA6                               __ptext74 57DC  
                             __ptext66 50E2                               __ptext58 59E0  
                             __ptext91 5590                               __ptext83 40A2  
                             __ptext75 580C                               __ptext67 304C  
                             __ptext59 56B2                               __ptext92 5382  
                             __ptext84 5B92                               __ptext76 583C  
                             __ptext68 5A32                               __ptext93 5BFA  
                             __ptext85 55D2                               __ptext77 586C  
                             __ptext69 35C4                               __ptext94 5328  
                             __ptext86 330C                               __ptext78 595A  
                             __ptext95 5004                               __ptext87 2400  
                             __ptext79 589C                               __ptext96 5C10  
                             __ptext88 5BEE                               __ptext97 5C32  
                             __ptext89 5B0E                               __ptext98 5C3A  
                             __ptext99 5A80                               _dispLogs 5AA6  
                        ?_actuatorTest 0001                     PlatformTest@i_1792 00B3  
                             _readCOND 546E                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2065 0002  
                   __end_of_initServos 4F1A                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5AEC  
                        __size_of_main 00C8                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 4E24                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 2D82  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 012F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 57DC      __end_ofi2_change_state_to_menu_22 57AC  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
               __end_of_printSortTimer 35C4                              putch@data 0082  
             __end_of_I2C_Master_Start 5C32                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5C10                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E2  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 2D82  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5B48  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 330C                __end_of_I2C_Master_Init 5270  
              __end_of_I2C_Master_Read 595A                __end_of_I2C_Master_Wait 5BBC  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5C2A  
                          lcdInst@data 0082                          printRTC@F3236 014D  
                         retrieveLog@i 000E                            _retrieveLog 40A2  
                  __end_ofi2_lcdNibble 5382                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 55D2  
                    _f_can_distributed 0133                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 514A  
                      ___lwmod@counter 008B                      _updateServoStates 3BD0  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EA  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
