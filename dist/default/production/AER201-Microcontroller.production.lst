

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 21:25:58 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   107                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   108  0000                     
   109                           ; Version 1.40
   110                           ; Generated 01/12/2016 GMT
   111                           ; 
   112                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC18F4620 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143  0000                     
   144                           	psect	idataBANK1
   145  00442E                     __pidataBANK1:
   146                           	opt stack 0
   147                           
   148                           ;initializer for UI@F3222
   149  00442E  4D                 	db	77
   150  00442F  4D                 	db	77
   151  004430  4D                 	db	77
   152  004431  00                 	db	0
   153                           
   154                           ;initializer for printRTC@F3213
   155  004432  4D                 	db	77
   156  004433  4D                 	db	77
   157  004434  4D                 	db	77
   158  004435  00                 	db	0
   159                           
   160                           	psect	mediumconst
   161  00FB38                     __pmediumconst:
   162                           	opt stack 0
   163  00FB38  00                 	db	0
   164  00FB39                     _keys:
   165                           	opt stack 0
   166  00FB39  31                 	db	49
   167  00FB3A  32                 	db	50
   168  00FB3B  33                 	db	51
   169  00FB3C  41                 	db	65
   170  00FB3D  34                 	db	52
   171  00FB3E  35                 	db	53
   172  00FB3F  36                 	db	54
   173  00FB40  42                 	db	66
   174  00FB41  37                 	db	55
   175  00FB42  38                 	db	56
   176  00FB43  39                 	db	57
   177  00FB44  43                 	db	67
   178  00FB45  2A                 	db	42
   179  00FB46  30                 	db	48
   180  00FB47  23                 	db	35
   181  00FB48  44                 	db	68
   182  00FB49  00                 	db	0
   183  00FB4A                     __end_of_keys:
   184                           	opt stack 0
   185  00FB4A                     _dpowers:
   186                           	opt stack 0
   187  00FB4A  0001               	dw	1
   188  00FB4C  000A               	dw	10
   189  00FB4E  0064               	dw	100
   190  00FB50  03E8               	dw	1000
   191  00FB52  2710               	dw	10000
   192  00FB54                     __end_of_dpowers:
   193                           	opt stack 0
   194  0000                     _ADCON0	set	4034
   195  0000                     _ADCON0bits	set	4034
   196  0000                     _ADCON1	set	4033
   197  0000                     _ADCON2	set	4032
   198  0000                     _ADRESH	set	4036
   199  0000                     _ADRESL	set	4035
   200  0000                     _CMCONbits	set	4020
   201  0000                     _CVRCON	set	4021
   202  0000                     _EEADR	set	4009
   203  0000                     _EEADRH	set	4010
   204  0000                     _EECON1bits	set	4006
   205  0000                     _EECON2	set	4007
   206  0000                     _EEDATA	set	4008
   207  0000                     _INTCONbits	set	4082
   208  0000                     _LATA	set	3977
   209  0000                     _LATAbits	set	3977
   210  0000                     _LATB	set	3978
   211  0000                     _LATC	set	3979
   212  0000                     _LATCbits	set	3979
   213  0000                     _LATD	set	3980
   214  0000                     _LATDbits	set	3980
   215  0000                     _LATE	set	3981
   216  0000                     _LATEbits	set	3981
   217  0000                     _OSCCON	set	4051
   218  0000                     _OSCTUNEbits	set	3995
   219  0000                     _PIR2bits	set	4001
   220  0000                     _PORTAbits	set	3968
   221  0000                     _PORTB	set	3969
   222  0000                     _PORTBbits	set	3969
   223  0000                     _SSPADD	set	4040
   224  0000                     _SSPBUF	set	4041
   225  0000                     _SSPCON1	set	4038
   226  0000                     _SSPCON2	set	4037
   227  0000                     _SSPSTAT	set	4039
   228  0000                     _T0CON	set	4053
   229  0000                     _T1CON	set	4045
   230  0000                     _T3CON	set	4017
   231  0000                     _TMR0H	set	4055
   232  0000                     _TMR0L	set	4054
   233  0000                     _TMR1H	set	4047
   234  0000                     _TMR1L	set	4046
   235  0000                     _TMR3H	set	4019
   236  0000                     _TMR3L	set	4018
   237  0000                     _TRISA	set	3986
   238  0000                     _TRISB	set	3987
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISD	set	3989
   241  0000                     _TRISE	set	3990
   242  0000                     _ACKDT	set	32301
   243  0000                     _ACKEN	set	32300
   244  0000                     _ADIE	set	31982
   245  0000                     _INT1IE	set	32643
   246  0000                     _INT1IF	set	32640
   247  0000                     _PEIE	set	32662
   248  0000                     _PEN	set	32298
   249  0000                     _RCEN	set	32299
   250  0000                     _RSEN	set	32297
   251  0000                     _SEN	set	32296
   252  0000                     _TMR0IE	set	32661
   253  0000                     _TMR0IF	set	32658
   254  0000                     _TMR0ON	set	32431
   255  0000                     _TMR1IE	set	31976
   256  0000                     _TMR1IF	set	31984
   257  0000                     _TMR1ON	set	32360
   258  0000                     _TMR2IE	set	31977
   259  0000                     _TMR3IE	set	32001
   260  0000                     _TMR3IF	set	32009
   261  0000                     _TMR3ON	set	32136
   262  0000                     _TRISC3	set	31907
   263  0000                     _TRISC4	set	31908
   264  0000                     _nRBPU	set	32655
   265  00FB54                     STR_21:
   266  00FB54  25                 	db	37
   267  00FB55  30                 	db	48	;'0'
   268  00FB56  32                 	db	50	;'2'
   269  00FB57  64                 	db	100	;'d'
   270  00FB58  25                 	db	37
   271  00FB59  73                 	db	115	;'s'
   272  00FB5A  20                 	db	32
   273  00FB5B  7C                 	db	124
   274  00FB5C  20                 	db	32
   275  00FB5D  25                 	db	37
   276  00FB5E  30                 	db	48	;'0'
   277  00FB5F  32                 	db	50	;'2'
   278  00FB60  64                 	db	100	;'d'
   279  00FB61  3A                 	db	58	;':'
   280  00FB62  25                 	db	37
   281  00FB63  30                 	db	48	;'0'
   282  00FB64  32                 	db	50	;'2'
   283  00FB65  64                 	db	100	;'d'
   284  00FB66  3A                 	db	58	;':'
   285  00FB67  25                 	db	37
   286  00FB68  30                 	db	48	;'0'
   287  00FB69  32                 	db	50	;'2'
   288  00FB6A  64                 	db	100	;'d'
   289  00FB6B  00                 	db	0
   290  00FB6C                     STR_66:
   291  00FB6C  28                 	db	40
   292  00FB6D  64                 	db	100	;'d'
   293  00FB6E  61                 	db	97	;'a'
   294  00FB6F  74                 	db	116	;'t'
   295  00FB70  61                 	db	97	;'a'
   296  00FB71  3A                 	db	58	;':'
   297  00FB72  20                 	db	32
   298  00FB73  25                 	db	37
   299  00FB74  75                 	db	117	;'u'
   300  00FB75  2C                 	db	44
   301  00FB76  20                 	db	32
   302  00FB77  61                 	db	97	;'a'
   303  00FB78  64                 	db	100	;'d'
   304  00FB79  64                 	db	100	;'d'
   305  00FB7A  72                 	db	114	;'r'
   306  00FB7B  3A                 	db	58	;':'
   307  00FB7C  20                 	db	32
   308  00FB7D  25                 	db	37
   309  00FB7E  75                 	db	117	;'u'
   310  00FB7F  29                 	db	41
   311  00FB80  00                 	db	0
   312  00FB81                     STR_27:
   313  00FB81  4E                 	db	78	;'N'
   314  00FB82  4F                 	db	79	;'O'
   315  00FB83  20                 	db	32
   316  00FB84  4C                 	db	76	;'L'
   317  00FB85  41                 	db	65	;'A'
   318  00FB86  42                 	db	66	;'B'
   319  00FB87  3A                 	db	58	;':'
   320  00FB88  20                 	db	32
   321  00FB89  25                 	db	37
   322  00FB8A  64                 	db	100	;'d'
   323  00FB8B  7C                 	db	124
   324  00FB8C  4C                 	db	76	;'L'
   325  00FB8D  41                 	db	65	;'A'
   326  00FB8E  42                 	db	66	;'B'
   327  00FB8F  3A                 	db	58	;':'
   328  00FB90  20                 	db	32
   329  00FB91  25                 	db	37
   330  00FB92  64                 	db	100	;'d'
   331  00FB93  00                 	db	0
   332  00FB94                     STR_25:
   333  00FB94  4E                 	db	78	;'N'
   334  00FB95  4F                 	db	79	;'O'
   335  00FB96  20                 	db	32
   336  00FB97  54                 	db	84	;'T'
   337  00FB98  41                 	db	65	;'A'
   338  00FB99  42                 	db	66	;'B'
   339  00FB9A  3A                 	db	58	;':'
   340  00FB9B  20                 	db	32
   341  00FB9C  25                 	db	37
   342  00FB9D  64                 	db	100	;'d'
   343  00FB9E  7C                 	db	124
   344  00FB9F  54                 	db	84	;'T'
   345  00FBA0  41                 	db	65	;'A'
   346  00FBA1  42                 	db	66	;'B'
   347  00FBA2  3A                 	db	58	;':'
   348  00FBA3  20                 	db	32
   349  00FBA4  25                 	db	37
   350  00FBA5  64                 	db	100	;'d'
   351  00FBA6  00                 	db	0
   352  00FBA7                     STR_105:
   353  00FBA7  44                 	db	68	;'D'
   354  00FBA8  20                 	db	32
   355  00FBA9  57                 	db	87	;'W'
   356  00FBAA  49                 	db	73	;'I'
   357  00FBAB  4C                 	db	76	;'L'
   358  00FBAC  4C                 	db	76	;'L'
   359  00FBAD  20                 	db	32
   360  00FBAE  52                 	db	82	;'R'
   361  00FBAF  45                 	db	69	;'E'
   362  00FBB0  54                 	db	84	;'T'
   363  00FBB1  55                 	db	85	;'U'
   364  00FBB2  52                 	db	82	;'R'
   365  00FBB3  4E                 	db	78	;'N'
   366  00FBB4  20                 	db	32
   367  00FBB5  20                 	db	32
   368  00FBB6  20                 	db	32
   369  00FBB7  20                 	db	32
   370  00FBB8  00                 	db	0
   371  00FBB9                     STR_106:
   372  00FBB9  4F                 	db	79	;'O'
   373  00FBBA  54                 	db	84	;'T'
   374  00FBBB  48                 	db	72	;'H'
   375  00FBBC  45                 	db	69	;'E'
   376  00FBBD  52                 	db	82	;'R'
   377  00FBBE  20                 	db	32
   378  00FBBF  53                 	db	83	;'S'
   379  00FBC0  45                 	db	69	;'E'
   380  00FBC1  54                 	db	84	;'T'
   381  00FBC2  53                 	db	83	;'S'
   382  00FBC3  20                 	db	32
   383  00FBC4  52                 	db	82	;'R'
   384  00FBC5  41                 	db	65	;'A'
   385  00FBC6  35                 	db	53	;'5'
   386  00FBC7  20                 	db	32
   387  00FBC8  20                 	db	32
   388  00FBC9  20                 	db	32
   389  00FBCA  00                 	db	0
   390  00FBCB                     STR_3:
   391  00FBCB  2D                 	db	45
   392  00FBCC  2D                 	db	45
   393  00FBCD  20                 	db	32
   394  00FBCE  4C                 	db	76	;'L'
   395  00FBCF  4F                 	db	79	;'O'
   396  00FBD0  47                 	db	71	;'G'
   397  00FBD1  20                 	db	32
   398  00FBD2  25                 	db	37
   399  00FBD3  32                 	db	50	;'2'
   400  00FBD4  64                 	db	100	;'d'
   401  00FBD5  20                 	db	32
   402  00FBD6  48                 	db	72	;'H'
   403  00FBD7  45                 	db	69	;'E'
   404  00FBD8  52                 	db	82	;'R'
   405  00FBD9  45                 	db	69	;'E'
   406  00FBDA  2D                 	db	45
   407  00FBDB  2D                 	db	45
   408  00FBDC  00                 	db	0
   409  00FBDD                     STR_1:
   410  00FBDD  52                 	db	82	;'R'
   411  00FBDE  45                 	db	69	;'E'
   412  00FBDF  53                 	db	83	;'S'
   413  00FBE0  55                 	db	85	;'U'
   414  00FBE1  4C                 	db	76	;'L'
   415  00FBE2  54                 	db	84	;'T'
   416  00FBE3  53                 	db	83	;'S'
   417  00FBE4  20                 	db	32
   418  00FBE5  49                 	db	73	;'I'
   419  00FBE6  4E                 	db	78	;'N'
   420  00FBE7  20                 	db	32
   421  00FBE8  4C                 	db	76	;'L'
   422  00FBE9  4F                 	db	79	;'O'
   423  00FBEA  47                 	db	71	;'G'
   424  00FBEB  20                 	db	32
   425  00FBEC  25                 	db	37
   426  00FBED  64                 	db	100	;'d'
   427  00FBEE  00                 	db	0
   428  00FBEF                     STR_97:
   429  00FBEF  4D                 	db	77	;'M'
   430  00FBF0  49                 	db	73	;'I'
   431  00FBF1  44                 	db	68	;'D'
   432  00FBF2  20                 	db	32
   433  00FBF3  2D                 	db	45
   434  00FBF4  2D                 	db	45
   435  00FBF5  20                 	db	32
   436  00FBF6  32                 	db	50	;'2'
   437  00FBF7  73                 	db	115	;'s'
   438  00FBF8  20                 	db	32
   439  00FBF9  20                 	db	32
   440  00FBFA  20                 	db	32
   441  00FBFB  20                 	db	32
   442  00FBFC  20                 	db	32
   443  00FBFD  20                 	db	32
   444  00FBFE  20                 	db	32
   445  00FBFF  00                 	db	0
   446  00FC00                     STR_100:
   447  00FC00  44                 	db	68	;'D'
   448  00FC01  52                 	db	82	;'R'
   449  00FC02  4F                 	db	79	;'O'
   450  00FC03  50                 	db	80	;'P'
   451  00FC04  20                 	db	32
   452  00FC05  2D                 	db	45
   453  00FC06  2D                 	db	45
   454  00FC07  20                 	db	32
   455  00FC08  32                 	db	50	;'2'
   456  00FC09  73                 	db	115	;'s'
   457  00FC0A  20                 	db	32
   458  00FC0B  20                 	db	32
   459  00FC0C  20                 	db	32
   460  00FC0D  20                 	db	32
   461  00FC0E  20                 	db	32
   462  00FC0F  20                 	db	32
   463  00FC10  00                 	db	0
   464  00FC11                     STR_94:
   465  00FC11  4C                 	db	76	;'L'
   466  00FC12  45                 	db	69	;'E'
   467  00FC13  46                 	db	70	;'F'
   468  00FC14  54                 	db	84	;'T'
   469  00FC15  20                 	db	32
   470  00FC16  2D                 	db	45
   471  00FC17  2D                 	db	45
   472  00FC18  20                 	db	32
   473  00FC19  32                 	db	50	;'2'
   474  00FC1A  73                 	db	115	;'s'
   475  00FC1B  20                 	db	32
   476  00FC1C  20                 	db	32
   477  00FC1D  20                 	db	32
   478  00FC1E  20                 	db	32
   479  00FC1F  20                 	db	32
   480  00FC20  20                 	db	32
   481  00FC21  00                 	db	0
   482  00FC22                     STR_99:
   483  00FC22  4C                 	db	76	;'L'
   484  00FC23  45                 	db	69	;'E'
   485  00FC24  56                 	db	86	;'V'
   486  00FC25  45                 	db	69	;'E'
   487  00FC26  4C                 	db	76	;'L'
   488  00FC27  20                 	db	32
   489  00FC28  2D                 	db	45
   490  00FC29  2D                 	db	45
   491  00FC2A  20                 	db	32
   492  00FC2B  32                 	db	50	;'2'
   493  00FC2C  73                 	db	115	;'s'
   494  00FC2D  20                 	db	32
   495  00FC2E  20                 	db	32
   496  00FC2F  20                 	db	32
   497  00FC30  20                 	db	32
   498  00FC31  20                 	db	32
   499  00FC32  00                 	db	0
   500  00FC33                     STR_93:
   501  00FC33  52                 	db	82	;'R'
   502  00FC34  49                 	db	73	;'I'
   503  00FC35  47                 	db	71	;'G'
   504  00FC36  48                 	db	72	;'H'
   505  00FC37  54                 	db	84	;'T'
   506  00FC38  20                 	db	32
   507  00FC39  2D                 	db	45
   508  00FC3A  2D                 	db	45
   509  00FC3B  20                 	db	32
   510  00FC3C  32                 	db	50	;'2'
   511  00FC3D  73                 	db	115	;'s'
   512  00FC3E  20                 	db	32
   513  00FC3F  20                 	db	32
   514  00FC40  20                 	db	32
   515  00FC41  20                 	db	32
   516  00FC42  20                 	db	32
   517  00FC43  00                 	db	0
   518  00FC44                     STR_92:
   519  00FC44  4D                 	db	77	;'M'
   520  00FC45  49                 	db	73	;'I'
   521  00FC46  44                 	db	68	;'D'
   522  00FC47  44                 	db	68	;'D'
   523  00FC48  4C                 	db	76	;'L'
   524  00FC49  45                 	db	69	;'E'
   525  00FC4A  20                 	db	32
   526  00FC4B  2D                 	db	45
   527  00FC4C  2D                 	db	45
   528  00FC4D  20                 	db	32
   529  00FC4E  32                 	db	50	;'2'
   530  00FC4F  73                 	db	115	;'s'
   531  00FC50  20                 	db	32
   532  00FC51  20                 	db	32
   533  00FC52  20                 	db	32
   534  00FC53  20                 	db	32
   535  00FC54  00                 	db	0
   536  00FC55                     STR_109:
   537  00FC55  44                 	db	68	;'D'
   538  00FC56  20                 	db	32
   539  00FC57  57                 	db	87	;'W'
   540  00FC58  49                 	db	73	;'I'
   541  00FC59  4C                 	db	76	;'L'
   542  00FC5A  4C                 	db	76	;'L'
   543  00FC5B  20                 	db	32
   544  00FC5C  52                 	db	82	;'R'
   545  00FC5D  45                 	db	69	;'E'
   546  00FC5E  54                 	db	84	;'T'
   547  00FC5F  55                 	db	85	;'U'
   548  00FC60  52                 	db	82	;'R'
   549  00FC61  4E                 	db	78	;'N'
   550  00FC62  20                 	db	32
   551  00FC63  20                 	db	32
   552  00FC64  20                 	db	32
   553  00FC65  00                 	db	0
   554  00FC66                     STR_95:
   555  00FC66  4D                 	db	77	;'M'
   556  00FC67  49                 	db	73	;'I'
   557  00FC68  44                 	db	68	;'D'
   558  00FC69  2D                 	db	45
   559  00FC6A  4C                 	db	76	;'L'
   560  00FC6B  45                 	db	69	;'E'
   561  00FC6C  46                 	db	70	;'F'
   562  00FC6D  54                 	db	84	;'T'
   563  00FC6E  20                 	db	32
   564  00FC6F  2D                 	db	45
   565  00FC70  2D                 	db	45
   566  00FC71  20                 	db	32
   567  00FC72  32                 	db	50	;'2'
   568  00FC73  73                 	db	115	;'s'
   569  00FC74  20                 	db	32
   570  00FC75  20                 	db	32
   571  00FC76  00                 	db	0
   572  00FC77                     STR_96:
   573  00FC77  4D                 	db	77	;'M'
   574  00FC78  49                 	db	73	;'I'
   575  00FC79  44                 	db	68	;'D'
   576  00FC7A  2D                 	db	45
   577  00FC7B  52                 	db	82	;'R'
   578  00FC7C  49                 	db	73	;'I'
   579  00FC7D  47                 	db	71	;'G'
   580  00FC7E  48                 	db	72	;'H'
   581  00FC7F  54                 	db	84	;'T'
   582  00FC80  20                 	db	32
   583  00FC81  2D                 	db	45
   584  00FC82  2D                 	db	45
   585  00FC83  20                 	db	32
   586  00FC84  32                 	db	50	;'2'
   587  00FC85  73                 	db	115	;'s'
   588  00FC86  20                 	db	32
   589  00FC87  00                 	db	0
   590  00FC88                     STR_110:
   591  00FC88  45                 	db	69	;'E'
   592  00FC89  4C                 	db	76	;'L'
   593  00FC8A  53                 	db	83	;'S'
   594  00FC8B  45                 	db	69	;'E'
   595  00FC8C  20                 	db	32
   596  00FC8D  54                 	db	84	;'T'
   597  00FC8E  4F                 	db	79	;'O'
   598  00FC8F  47                 	db	71	;'G'
   599  00FC90  47                 	db	71	;'G'
   600  00FC91  4C                 	db	76	;'L'
   601  00FC92  45                 	db	69	;'E'
   602  00FC93  53                 	db	83	;'S'
   603  00FC94  20                 	db	32
   604  00FC95  52                 	db	82	;'R'
   605  00FC96  41                 	db	65	;'A'
   606  00FC97  35                 	db	53	;'5'
   607  00FC98  00                 	db	0
   608  00FC99                     STR_72:
   609  00FC99  41                 	db	65	;'A'
   610  00FC9A  4C                 	db	76	;'L'
   611  00FC9B  47                 	db	71	;'G'
   612  00FC9C  31                 	db	49	;'1'
   613  00FC9D  3A                 	db	58	;':'
   614  00FC9E  20                 	db	32
   615  00FC9F  39                 	db	57	;'9'
   616  00FCA0  20                 	db	32
   617  00FCA1  50                 	db	80	;'P'
   618  00FCA2  4F                 	db	79	;'O'
   619  00FCA3  50                 	db	80	;'P'
   620  00FCA4  4E                 	db	78	;'N'
   621  00FCA5  4F                 	db	79	;'O'
   622  00FCA6  54                 	db	84	;'T'
   623  00FCA7  41                 	db	65	;'A'
   624  00FCA8  42                 	db	66	;'B'
   625  00FCA9  00                 	db	0
   626  00FCAA                     STR_68:
   627  00FCAA  31                 	db	49	;'1'
   628  00FCAB  2E                 	db	46
   629  00FCAC  41                 	db	65	;'A'
   630  00FCAD  4C                 	db	76	;'L'
   631  00FCAE  47                 	db	71	;'G'
   632  00FCAF  7C                 	db	124
   633  00FCB0  32                 	db	50	;'2'
   634  00FCB1  2E                 	db	46
   635  00FCB2  53                 	db	83	;'S'
   636  00FCB3  4E                 	db	78	;'N'
   637  00FCB4  52                 	db	82	;'R'
   638  00FCB5  7C                 	db	124
   639  00FCB6  33                 	db	51	;'3'
   640  00FCB7  2E                 	db	46
   641  00FCB8  41                 	db	65	;'A'
   642  00FCB9  43                 	db	67	;'C'
   643  00FCBA  00                 	db	0
   644  00FCBB                     STR_87:
   645  00FCBB  54                 	db	84	;'T'
   646  00FCBC  53                 	db	83	;'S'
   647  00FCBD  54                 	db	84	;'T'
   648  00FCBE  3A                 	db	58	;':'
   649  00FCBF  20                 	db	32
   650  00FCC0  43                 	db	67	;'C'
   651  00FCC1  4F                 	db	79	;'O'
   652  00FCC2  4E                 	db	78	;'N'
   653  00FCC3  44                 	db	68	;'D'
   654  00FCC4  20                 	db	32
   655  00FCC5  53                 	db	83	;'S'
   656  00FCC6  4F                 	db	79	;'O'
   657  00FCC7  4C                 	db	76	;'L'
   658  00FCC8  4E                 	db	78	;'N'
   659  00FCC9  27                 	db	39
   660  00FCCA  44                 	db	68	;'D'
   661  00FCCB  00                 	db	0
   662  00FCCC                     STR_89:
   663  00FCCC  54                 	db	84	;'T'
   664  00FCCD  53                 	db	83	;'S'
   665  00FCCE  54                 	db	84	;'T'
   666  00FCCF  3A                 	db	58	;':'
   667  00FCD0  20                 	db	32
   668  00FCD1  50                 	db	80	;'P'
   669  00FCD2  55                 	db	85	;'U'
   670  00FCD3  53                 	db	83	;'S'
   671  00FCD4  48                 	db	72	;'H'
   672  00FCD5  20                 	db	32
   673  00FCD6  53                 	db	83	;'S'
   674  00FCD7  4F                 	db	79	;'O'
   675  00FCD8  4C                 	db	76	;'L'
   676  00FCD9  4E                 	db	78	;'N'
   677  00FCDA  27                 	db	39
   678  00FCDB  44                 	db	68	;'D'
   679  00FCDC  00                 	db	0
   680  00FCDD                     STR_69:
   681  00FCDD  34                 	db	52	;'4'
   682  00FCDE  2E                 	db	46
   683  00FCDF  48                 	db	72	;'H'
   684  00FCE0  49                 	db	73	;'I'
   685  00FCE1  7C                 	db	124
   686  00FCE2  35                 	db	53	;'5'
   687  00FCE3  2E                 	db	46
   688  00FCE4  54                 	db	84	;'T'
   689  00FCE5  4F                 	db	79	;'O'
   690  00FCE6  47                 	db	71	;'G'
   691  00FCE7  7C                 	db	124
   692  00FCE8  36                 	db	54	;'6'
   693  00FCE9  2E                 	db	46
   694  00FCEA  45                 	db	69	;'E'
   695  00FCEB  45                 	db	69	;'E'
   696  00FCEC  50                 	db	80	;'P'
   697  00FCED  00                 	db	0
   698  00FCEE                     STR_41:
   699  00FCEE  4C                 	db	76	;'L'
   700  00FCEF  4F                 	db	79	;'O'
   701  00FCF0  47                 	db	71	;'G'
   702  00FCF1  20                 	db	32
   703  00FCF2  31                 	db	49	;'1'
   704  00FCF3  20                 	db	32
   705  00FCF4  20                 	db	32
   706  00FCF5  20                 	db	32
   707  00FCF6  20                 	db	32
   708  00FCF7  20                 	db	32
   709  00FCF8  20                 	db	32
   710  00FCF9  20                 	db	32
   711  00FCFA  20                 	db	32
   712  00FCFB  20                 	db	32
   713  00FCFC  20                 	db	32
   714  00FCFD  20                 	db	32
   715  00FCFE  00                 	db	0
   716  00FCFF                     STR_40:
   717  00FCFF  4C                 	db	76	;'L'
   718  00FD00  4F                 	db	79	;'O'
   719  00FD01  47                 	db	71	;'G'
   720  00FD02  20                 	db	32
   721  00FD03  32                 	db	50	;'2'
   722  00FD04  20                 	db	32
   723  00FD05  20                 	db	32
   724  00FD06  20                 	db	32
   725  00FD07  20                 	db	32
   726  00FD08  20                 	db	32
   727  00FD09  20                 	db	32
   728  00FD0A  20                 	db	32
   729  00FD0B  20                 	db	32
   730  00FD0C  20                 	db	32
   731  00FD0D  20                 	db	32
   732  00FD0E  20                 	db	32
   733  00FD0F  00                 	db	0
   734  00FD10                     STR_44:
   735  00FD10  4C                 	db	76	;'L'
   736  00FD11  4F                 	db	79	;'O'
   737  00FD12  47                 	db	71	;'G'
   738  00FD13  20                 	db	32
   739  00FD14  33                 	db	51	;'3'
   740  00FD15  20                 	db	32
   741  00FD16  20                 	db	32
   742  00FD17  20                 	db	32
   743  00FD18  20                 	db	32
   744  00FD19  20                 	db	32
   745  00FD1A  20                 	db	32
   746  00FD1B  20                 	db	32
   747  00FD1C  20                 	db	32
   748  00FD1D  20                 	db	32
   749  00FD1E  20                 	db	32
   750  00FD1F  20                 	db	32
   751  00FD20  00                 	db	0
   752  00FD21                     STR_48:
   753  00FD21  4C                 	db	76	;'L'
   754  00FD22  4F                 	db	79	;'O'
   755  00FD23  47                 	db	71	;'G'
   756  00FD24  20                 	db	32
   757  00FD25  34                 	db	52	;'4'
   758  00FD26  20                 	db	32
   759  00FD27  20                 	db	32
   760  00FD28  20                 	db	32
   761  00FD29  20                 	db	32
   762  00FD2A  20                 	db	32
   763  00FD2B  20                 	db	32
   764  00FD2C  20                 	db	32
   765  00FD2D  20                 	db	32
   766  00FD2E  20                 	db	32
   767  00FD2F  20                 	db	32
   768  00FD30  20                 	db	32
   769  00FD31  00                 	db	0
   770  00FD32                     STR_36:
   771  00FD32  33                 	db	51	;'3'
   772  00FD33  2E                 	db	46
   773  00FD34  20                 	db	32
   774  00FD35  4C                 	db	76	;'L'
   775  00FD36  4F                 	db	79	;'O'
   776  00FD37  47                 	db	71	;'G'
   777  00FD38  53                 	db	83	;'S'
   778  00FD39  20                 	db	32
   779  00FD3A  20                 	db	32
   780  00FD3B  20                 	db	32
   781  00FD3C  20                 	db	32
   782  00FD3D  20                 	db	32
   783  00FD3E  20                 	db	32
   784  00FD3F  20                 	db	32
   785  00FD40  20                 	db	32
   786  00FD41  20                 	db	32
   787  00FD42  00                 	db	0
   788  00FD43                     STR_32:
   789  00FD43  32                 	db	50	;'2'
   790  00FD44  2E                 	db	46
   791  00FD45  20                 	db	32
   792  00FD46  53                 	db	83	;'S'
   793  00FD47  4F                 	db	79	;'O'
   794  00FD48  52                 	db	82	;'R'
   795  00FD49  54                 	db	84	;'T'
   796  00FD4A  20                 	db	32
   797  00FD4B  20                 	db	32
   798  00FD4C  20                 	db	32
   799  00FD4D  20                 	db	32
   800  00FD4E  20                 	db	32
   801  00FD4F  20                 	db	32
   802  00FD50  20                 	db	32
   803  00FD51  20                 	db	32
   804  00FD52  20                 	db	32
   805  00FD53  00                 	db	0
   806  00FD54                     STR_33:
   807  00FD54  31                 	db	49	;'1'
   808  00FD55  2E                 	db	46
   809  00FD56  20                 	db	32
   810  00FD57  44                 	db	68	;'D'
   811  00FD58  41                 	db	65	;'A'
   812  00FD59  54                 	db	84	;'T'
   813  00FD5A  45                 	db	69	;'E'
   814  00FD5B  2F                 	db	47
   815  00FD5C  54                 	db	84	;'T'
   816  00FD5D  49                 	db	73	;'I'
   817  00FD5E  4D                 	db	77	;'M'
   818  00FD5F  45                 	db	69	;'E'
   819  00FD60  20                 	db	32
   820  00FD61  20                 	db	32
   821  00FD62  20                 	db	32
   822  00FD63  20                 	db	32
   823  00FD64  00                 	db	0
   824  00FD65                     STR_24:
   825  00FD65  20                 	db	32
   826  00FD66  2D                 	db	45
   827  00FD67  2D                 	db	45
   828  00FD68  20                 	db	32
   829  00FD69  50                 	db	80	;'P'
   830  00FD6A  4F                 	db	79	;'O'
   831  00FD6B  50                 	db	80	;'P'
   832  00FD6C  20                 	db	32
   833  00FD6D  20                 	db	32
   834  00FD6E  43                 	db	67	;'C'
   835  00FD6F  41                 	db	65	;'A'
   836  00FD70  4E                 	db	78	;'N'
   837  00FD71  20                 	db	32
   838  00FD72  2D                 	db	45
   839  00FD73  2D                 	db	45
   840  00FD74  20                 	db	32
   841  00FD75  00                 	db	0
   842  00FD76                     STR_26:
   843  00FD76  20                 	db	32
   844  00FD77  2D                 	db	45
   845  00FD78  2D                 	db	45
   846  00FD79  20                 	db	32
   847  00FD7A  53                 	db	83	;'S'
   848  00FD7B  4F                 	db	79	;'O'
   849  00FD7C  55                 	db	85	;'U'
   850  00FD7D  50                 	db	80	;'P'
   851  00FD7E  20                 	db	32
   852  00FD7F  43                 	db	67	;'C'
   853  00FD80  41                 	db	65	;'A'
   854  00FD81  4E                 	db	78	;'N'
   855  00FD82  20                 	db	32
   856  00FD83  2D                 	db	45
   857  00FD84  2D                 	db	45
   858  00FD85  20                 	db	32
   859  00FD86  00                 	db	0
   860  00FD87                     STR_28:
   861  00FD87  2D                 	db	45
   862  00FD88  2D                 	db	45
   863  00FD89  20                 	db	32
   864  00FD8A  54                 	db	84	;'T'
   865  00FD8B  4F                 	db	79	;'O'
   866  00FD8C  54                 	db	84	;'T'
   867  00FD8D  41                 	db	65	;'A'
   868  00FD8E  4C                 	db	76	;'L'
   869  00FD8F  20                 	db	32
   870  00FD90  43                 	db	67	;'C'
   871  00FD91  41                 	db	65	;'A'
   872  00FD92  4E                 	db	78	;'N'
   873  00FD93  53                 	db	83	;'S'
   874  00FD94  20                 	db	32
   875  00FD95  2D                 	db	45
   876  00FD96  2D                 	db	45
   877  00FD97  00                 	db	0
   878  00FD98                     STR_39:
   879  00FD98  4C                 	db	76	;'L'
   880  00FD99  4F                 	db	79	;'O'
   881  00FD9A  47                 	db	71	;'G'
   882  00FD9B  20                 	db	32
   883  00FD9C  31                 	db	49	;'1'
   884  00FD9D  20                 	db	32
   885  00FD9E  20                 	db	32
   886  00FD9F  20                 	db	32
   887  00FDA0  20                 	db	32
   888  00FDA1  20                 	db	32
   889  00FDA2  20                 	db	32
   890  00FDA3  20                 	db	32
   891  00FDA4  20                 	db	32
   892  00FDA5  20                 	db	32
   893  00FDA6  20                 	db	32
   894  00FDA7  3C                 	db	60	;'<'
   895  00FDA8  00                 	db	0
   896  00FDA9                     STR_42:
   897  00FDA9  4C                 	db	76	;'L'
   898  00FDAA  4F                 	db	79	;'O'
   899  00FDAB  47                 	db	71	;'G'
   900  00FDAC  20                 	db	32
   901  00FDAD  32                 	db	50	;'2'
   902  00FDAE  20                 	db	32
   903  00FDAF  20                 	db	32
   904  00FDB0  20                 	db	32
   905  00FDB1  20                 	db	32
   906  00FDB2  20                 	db	32
   907  00FDB3  20                 	db	32
   908  00FDB4  20                 	db	32
   909  00FDB5  20                 	db	32
   910  00FDB6  20                 	db	32
   911  00FDB7  20                 	db	32
   912  00FDB8  3C                 	db	60	;'<'
   913  00FDB9  00                 	db	0
   914  00FDBA                     STR_46:
   915  00FDBA  4C                 	db	76	;'L'
   916  00FDBB  4F                 	db	79	;'O'
   917  00FDBC  47                 	db	71	;'G'
   918  00FDBD  20                 	db	32
   919  00FDBE  33                 	db	51	;'3'
   920  00FDBF  20                 	db	32
   921  00FDC0  20                 	db	32
   922  00FDC1  20                 	db	32
   923  00FDC2  20                 	db	32
   924  00FDC3  20                 	db	32
   925  00FDC4  20                 	db	32
   926  00FDC5  20                 	db	32
   927  00FDC6  20                 	db	32
   928  00FDC7  20                 	db	32
   929  00FDC8  20                 	db	32
   930  00FDC9  3C                 	db	60	;'<'
   931  00FDCA  00                 	db	0
   932  00FDCB                     STR_50:
   933  00FDCB  4C                 	db	76	;'L'
   934  00FDCC  4F                 	db	79	;'O'
   935  00FDCD  47                 	db	71	;'G'
   936  00FDCE  20                 	db	32
   937  00FDCF  34                 	db	52	;'4'
   938  00FDD0  20                 	db	32
   939  00FDD1  20                 	db	32
   940  00FDD2  20                 	db	32
   941  00FDD3  20                 	db	32
   942  00FDD4  20                 	db	32
   943  00FDD5  20                 	db	32
   944  00FDD6  20                 	db	32
   945  00FDD7  20                 	db	32
   946  00FDD8  20                 	db	32
   947  00FDD9  20                 	db	32
   948  00FDDA  3C                 	db	60	;'<'
   949  00FDDB  00                 	db	0
   950  00FDDC                     STR_38:
   951  00FDDC  33                 	db	51	;'3'
   952  00FDDD  2E                 	db	46
   953  00FDDE  20                 	db	32
   954  00FDDF  4C                 	db	76	;'L'
   955  00FDE0  4F                 	db	79	;'O'
   956  00FDE1  47                 	db	71	;'G'
   957  00FDE2  53                 	db	83	;'S'
   958  00FDE3  20                 	db	32
   959  00FDE4  20                 	db	32
   960  00FDE5  20                 	db	32
   961  00FDE6  20                 	db	32
   962  00FDE7  20                 	db	32
   963  00FDE8  20                 	db	32
   964  00FDE9  20                 	db	32
   965  00FDEA  20                 	db	32
   966  00FDEB  3C                 	db	60	;'<'
   967  00FDEC  00                 	db	0
   968  00FDED                     STR_34:
   969  00FDED  32                 	db	50	;'2'
   970  00FDEE  2E                 	db	46
   971  00FDEF  20                 	db	32
   972  00FDF0  53                 	db	83	;'S'
   973  00FDF1  4F                 	db	79	;'O'
   974  00FDF2  52                 	db	82	;'R'
   975  00FDF3  54                 	db	84	;'T'
   976  00FDF4  20                 	db	32
   977  00FDF5  20                 	db	32
   978  00FDF6  20                 	db	32
   979  00FDF7  20                 	db	32
   980  00FDF8  20                 	db	32
   981  00FDF9  20                 	db	32
   982  00FDFA  20                 	db	32
   983  00FDFB  20                 	db	32
   984  00FDFC  3C                 	db	60	;'<'
   985  00FDFD  00                 	db	0
   986  00FDFE                     STR_31:
   987  00FDFE  31                 	db	49	;'1'
   988  00FDFF  2E                 	db	46
   989  00FE00  20                 	db	32
   990  00FE01  44                 	db	68	;'D'
   991  00FE02  41                 	db	65	;'A'
   992  00FE03  54                 	db	84	;'T'
   993  00FE04  45                 	db	69	;'E'
   994  00FE05  2F                 	db	47
   995  00FE06  54                 	db	84	;'T'
   996  00FE07  49                 	db	73	;'I'
   997  00FE08  4D                 	db	77	;'M'
   998  00FE09  45                 	db	69	;'E'
   999  00FE0A  20                 	db	32
  1000  00FE0B  20                 	db	32
  1001  00FE0C  20                 	db	32
  1002  00FE0D  3C                 	db	60	;'<'
  1003  00FE0E  00                 	db	0
  1004  00FE0F                     STR_6:
  1005  00FE0F  50                 	db	80	;'P'
  1006  00FE10  41                 	db	65	;'A'
  1007  00FE11  55                 	db	85	;'U'
  1008  00FE12  53                 	db	83	;'S'
  1009  00FE13  45                 	db	69	;'E'
  1010  00FE14  20                 	db	32
  1011  00FE15  3C                 	db	60	;'<'
  1012  00FE16  20                 	db	32
  1013  00FE17  7C                 	db	124
  1014  00FE18  20                 	db	32
  1015  00FE19  42                 	db	66	;'B'
  1016  00FE1A  41                 	db	65	;'A'
  1017  00FE1B  43                 	db	67	;'C'
  1018  00FE1C  4B                 	db	75	;'K'
  1019  00FE1D  20                 	db	32
  1020  00FE1E  3E                 	db	62	;'>'
  1021  00FE1F  00                 	db	0
  1022  00FE20                     STR_30:
  1023  00FE20  50                 	db	80	;'P'
  1024  00FE21  55                 	db	85	;'U'
  1025  00FE22  53                 	db	83	;'S'
  1026  00FE23  48                 	db	72	;'H'
  1027  00FE24  20                 	db	32
  1028  00FE25  54                 	db	84	;'T'
  1029  00FE26  4F                 	db	79	;'O'
  1030  00FE27  20                 	db	32
  1031  00FE28  43                 	db	67	;'C'
  1032  00FE29  4F                 	db	79	;'O'
  1033  00FE2A  4E                 	db	78	;'N'
  1034  00FE2B  54                 	db	84	;'T'
  1035  00FE2C  49                 	db	73	;'I'
  1036  00FE2D  4E                 	db	78	;'N'
  1037  00FE2E  55                 	db	85	;'U'
  1038  00FE2F  45                 	db	69	;'E'
  1039  00FE30  00                 	db	0
  1040  00FE31                     STR_82:
  1041  00FE31  4D                 	db	77	;'M'
  1042  00FE32  41                 	db	65	;'A'
  1043  00FE33  47                 	db	71	;'G'
  1044  00FE34  5F                 	db	95	;'_'
  1045  00FE35  73                 	db	115	;'s'
  1046  00FE36  69                 	db	105	;'i'
  1047  00FE37  67                 	db	103	;'g'
  1048  00FE38  6E                 	db	110	;'n'
  1049  00FE39  61                 	db	97	;'a'
  1050  00FE3A  6C                 	db	108	;'l'
  1051  00FE3B  3A                 	db	58	;':'
  1052  00FE3C  20                 	db	32
  1053  00FE3D  25                 	db	37
  1054  00FE3E  64                 	db	100	;'d'
  1055  00FE3F  20                 	db	32
  1056  00FE40  00                 	db	0
  1057  00FE41                     STR_98:
  1058  00FE41  54                 	db	84	;'T'
  1059  00FE42  53                 	db	83	;'S'
  1060  00FE43  54                 	db	84	;'T'
  1061  00FE44  3A                 	db	58	;':'
  1062  00FE45  20                 	db	32
  1063  00FE46  54                 	db	84	;'T'
  1064  00FE47  49                 	db	73	;'I'
  1065  00FE48  4C                 	db	76	;'L'
  1066  00FE49  54                 	db	84	;'T'
  1067  00FE4A  20                 	db	32
  1068  00FE4B  53                 	db	83	;'S'
  1069  00FE4C  45                 	db	69	;'E'
  1070  00FE4D  52                 	db	82	;'R'
  1071  00FE4E  56                 	db	86	;'V'
  1072  00FE4F  4F                 	db	79	;'O'
  1073  00FE50  00                 	db	0
  1074  00FE51                     STR_4:
  1075  00FE51  44                 	db	68	;'D'
  1076  00FE52  49                 	db	73	;'I'
  1077  00FE53  44                 	db	68	;'D'
  1078  00FE54  4E                 	db	78	;'N'
  1079  00FE55  27                 	db	39
  1080  00FE56  54                 	db	84	;'T'
  1081  00FE57  20                 	db	32
  1082  00FE58  43                 	db	67	;'C'
  1083  00FE59  4F                 	db	79	;'O'
  1084  00FE5A  4D                 	db	77	;'M'
  1085  00FE5B  50                 	db	80	;'P'
  1086  00FE5C  4C                 	db	76	;'L'
  1087  00FE5D  45                 	db	69	;'E'
  1088  00FE5E  54                 	db	84	;'T'
  1089  00FE5F  45                 	db	69	;'E'
  1090  00FE60  00                 	db	0
  1091  00FE61                     STR_80:
  1092  00FE61  49                 	db	73	;'I'
  1093  00FE62  52                 	db	82	;'R'
  1094  00FE63  5F                 	db	95	;'_'
  1095  00FE64  73                 	db	115	;'s'
  1096  00FE65  69                 	db	105	;'i'
  1097  00FE66  67                 	db	103	;'g'
  1098  00FE67  6E                 	db	110	;'n'
  1099  00FE68  61                 	db	97	;'a'
  1100  00FE69  6C                 	db	108	;'l'
  1101  00FE6A  3A                 	db	58	;':'
  1102  00FE6B  20                 	db	32
  1103  00FE6C  25                 	db	37
  1104  00FE6D  64                 	db	100	;'d'
  1105  00FE6E  20                 	db	32
  1106  00FE6F  00                 	db	0
  1107  00FE70                     STR_104:
  1108  00FE70  43                 	db	67	;'C'
  1109  00FE71  41                 	db	65	;'A'
  1110  00FE72  4D                 	db	77	;'M'
  1111  00FE73  20                 	db	32
  1112  00FE74  44                 	db	68	;'D'
  1113  00FE75  57                 	db	87	;'W'
  1114  00FE76  4E                 	db	78	;'N'
  1115  00FE77  20                 	db	32
  1116  00FE78  7C                 	db	124
  1117  00FE79  52                 	db	82	;'R'
  1118  00FE7A  43                 	db	67	;'C'
  1119  00FE7B  30                 	db	48	;'0'
  1120  00FE7C  3D                 	db	61	;'='
  1121  00FE7D  30                 	db	48	;'0'
  1122  00FE7E  00                 	db	0
  1123  00FE7F                     STR_103:
  1124  00FE7F  43                 	db	67	;'C'
  1125  00FE80  41                 	db	65	;'A'
  1126  00FE81  4D                 	db	77	;'M'
  1127  00FE82  20                 	db	32
  1128  00FE83  55                 	db	85	;'U'
  1129  00FE84  50                 	db	80	;'P'
  1130  00FE85  20                 	db	32
  1131  00FE86  20                 	db	32
  1132  00FE87  7C                 	db	124
  1133  00FE88  52                 	db	82	;'R'
  1134  00FE89  43                 	db	67	;'C'
  1135  00FE8A  30                 	db	48	;'0'
  1136  00FE8B  3D                 	db	61	;'='
  1137  00FE8C  31                 	db	49	;'1'
  1138  00FE8D  00                 	db	0
  1139  00FE8E                     STR_81:
  1140  00FE8E  54                 	db	84	;'T'
  1141  00FE8F  53                 	db	83	;'S'
  1142  00FE90  54                 	db	84	;'T'
  1143  00FE91  3A                 	db	58	;':'
  1144  00FE92  20                 	db	32
  1145  00FE93  4D                 	db	77	;'M'
  1146  00FE94  41                 	db	65	;'A'
  1147  00FE95  47                 	db	71	;'G'
  1148  00FE96  4E                 	db	78	;'N'
  1149  00FE97  45                 	db	69	;'E'
  1150  00FE98  54                 	db	84	;'T'
  1151  00FE99  49                 	db	73	;'I'
  1152  00FE9A  53                 	db	83	;'S'
  1153  00FE9B  4D                 	db	77	;'M'
  1154  00FE9C  00                 	db	0
  1155  00FE9D                     STR_102:
  1156  00FE9D  54                 	db	84	;'T'
  1157  00FE9E  53                 	db	83	;'S'
  1158  00FE9F  54                 	db	84	;'T'
  1159  00FEA0  3A                 	db	58	;':'
  1160  00FEA1  20                 	db	32
  1161  00FEA2  43                 	db	67	;'C'
  1162  00FEA3  41                 	db	65	;'A'
  1163  00FEA4  4D                 	db	77	;'M'
  1164  00FEA5  20                 	db	32
  1165  00FEA6  53                 	db	83	;'S'
  1166  00FEA7  45                 	db	69	;'E'
  1167  00FEA8  52                 	db	82	;'R'
  1168  00FEA9  56                 	db	86	;'V'
  1169  00FEAA  4F                 	db	79	;'O'
  1170  00FEAB  00                 	db	0
  1171  00FEAC                     STR_91:
  1172  00FEAC  54                 	db	84	;'T'
  1173  00FEAD  53                 	db	83	;'S'
  1174  00FEAE  54                 	db	84	;'T'
  1175  00FEAF  3A                 	db	58	;':'
  1176  00FEB0  20                 	db	32
  1177  00FEB1  50                 	db	80	;'P'
  1178  00FEB2  41                 	db	65	;'A'
  1179  00FEB3  4E                 	db	78	;'N'
  1180  00FEB4  20                 	db	32
  1181  00FEB5  53                 	db	83	;'S'
  1182  00FEB6  45                 	db	69	;'E'
  1183  00FEB7  52                 	db	82	;'R'
  1184  00FEB8  56                 	db	86	;'V'
  1185  00FEB9  4F                 	db	79	;'O'
  1186  00FEBA  00                 	db	0
  1187  00FEBB                     STR_75:
  1188  00FEBB  41                 	db	65	;'A'
  1189  00FEBC  4C                 	db	76	;'L'
  1190  00FEBD  47                 	db	71	;'G'
  1191  00FEBE  34                 	db	52	;'4'
  1192  00FEBF  3A                 	db	58	;':'
  1193  00FEC0  20                 	db	32
  1194  00FEC1  41                 	db	65	;'A'
  1195  00FEC2  4C                 	db	76	;'L'
  1196  00FEC3  4C                 	db	76	;'L'
  1197  00FEC4  20                 	db	32
  1198  00FEC5  43                 	db	67	;'C'
  1199  00FEC6  41                 	db	65	;'A'
  1200  00FEC7  4E                 	db	78	;'N'
  1201  00FEC8  53                 	db	83	;'S'
  1202  00FEC9  00                 	db	0
  1203  00FECA                     STR_85:
  1204  00FECA  54                 	db	84	;'T'
  1205  00FECB  53                 	db	83	;'S'
  1206  00FECC  54                 	db	84	;'T'
  1207  00FECD  3A                 	db	58	;':'
  1208  00FECE  20                 	db	32
  1209  00FECF  44                 	db	68	;'D'
  1210  00FED0  43                 	db	67	;'C'
  1211  00FED1  20                 	db	32
  1212  00FED2  4D                 	db	77	;'M'
  1213  00FED3  4F                 	db	79	;'O'
  1214  00FED4  54                 	db	84	;'T'
  1215  00FED5  4F                 	db	79	;'O'
  1216  00FED6  52                 	db	82	;'R'
  1217  00FED7  53                 	db	83	;'S'
  1218  00FED8  00                 	db	0
  1219  00FED9                     STR_70:
  1220  00FED9  41                 	db	65	;'A'
  1221  00FEDA  4C                 	db	76	;'L'
  1222  00FEDB  47                 	db	71	;'G'
  1223  00FEDC  4F                 	db	79	;'O'
  1224  00FEDD  52                 	db	82	;'R'
  1225  00FEDE  49                 	db	73	;'I'
  1226  00FEDF  54                 	db	84	;'T'
  1227  00FEE0  48                 	db	72	;'H'
  1228  00FEE1  4D                 	db	77	;'M'
  1229  00FEE2  20                 	db	32
  1230  00FEE3  54                 	db	84	;'T'
  1231  00FEE4  45                 	db	69	;'E'
  1232  00FEE5  53                 	db	83	;'S'
  1233  00FEE6  54                 	db	84	;'T'
  1234  00FEE7  00                 	db	0
  1235  00FEE8                     STR_86:
  1236  00FEE8  50                 	db	80	;'P'
  1237  00FEE9  49                 	db	73	;'I'
  1238  00FEEA  4E                 	db	78	;'N'
  1239  00FEEB  20                 	db	32
  1240  00FEEC  52                 	db	82	;'R'
  1241  00FEED  41                 	db	65	;'A'
  1242  00FEEE  35                 	db	53	;'5'
  1243  00FEEF  20                 	db	32
  1244  00FEF0  48                 	db	72	;'H'
  1245  00FEF1  49                 	db	73	;'I'
  1246  00FEF2  47                 	db	71	;'G'
  1247  00FEF3  48                 	db	72	;'H'
  1248  00FEF4  2E                 	db	46
  1249  00FEF5  00                 	db	0
  1250  00FEF6                     STR_73:
  1251  00FEF6  41                 	db	65	;'A'
  1252  00FEF7  4C                 	db	76	;'L'
  1253  00FEF8  47                 	db	71	;'G'
  1254  00FEF9  32                 	db	50	;'2'
  1255  00FEFA  3A                 	db	58	;':'
  1256  00FEFB  20                 	db	32
  1257  00FEFC  31                 	db	49	;'1'
  1258  00FEFD  32                 	db	50	;'2'
  1259  00FEFE  20                 	db	32
  1260  00FEFF  43                 	db	67	;'C'
  1261  00FF00  41                 	db	65	;'A'
  1262  00FF01  4E                 	db	78	;'N'
  1263  00FF02  53                 	db	83	;'S'
  1264  00FF03  00                 	db	0
  1265  00FF04                     STR_76:
  1266  00FF04  41                 	db	65	;'A'
  1267  00FF05  4C                 	db	76	;'L'
  1268  00FF06  47                 	db	71	;'G'
  1269  00FF07  35                 	db	53	;'5'
  1270  00FF08  3A                 	db	58	;':'
  1271  00FF09  20                 	db	32
  1272  00FF0A  4E                 	db	78	;'N'
  1273  00FF0B  4F                 	db	79	;'O'
  1274  00FF0C  20                 	db	32
  1275  00FF0D  43                 	db	67	;'C'
  1276  00FF0E  41                 	db	65	;'A'
  1277  00FF0F  4E                 	db	78	;'N'
  1278  00FF10  53                 	db	83	;'S'
  1279  00FF11  00                 	db	0
  1280  00FF12                     STR_71:
  1281  00FF12  50                 	db	80	;'P'
  1282  00FF13  55                 	db	85	;'U'
  1283  00FF14  53                 	db	83	;'S'
  1284  00FF15  48                 	db	72	;'H'
  1285  00FF16  20                 	db	32
  1286  00FF17  54                 	db	84	;'T'
  1287  00FF18  4F                 	db	79	;'O'
  1288  00FF19  20                 	db	32
  1289  00FF1A  53                 	db	83	;'S'
  1290  00FF1B  54                 	db	84	;'T'
  1291  00FF1C  41                 	db	65	;'A'
  1292  00FF1D  52                 	db	82	;'R'
  1293  00FF1E  54                 	db	84	;'T'
  1294  00FF1F  00                 	db	0
  1295  00FF20                     STR_23:
  1296  00FF20  25                 	db	37
  1297  00FF21  64                 	db	100	;'d'
  1298  00FF22  20                 	db	32
  1299  00FF23  4D                 	db	77	;'M'
  1300  00FF24  49                 	db	73	;'I'
  1301  00FF25  4E                 	db	78	;'N'
  1302  00FF26  20                 	db	32
  1303  00FF27  25                 	db	37
  1304  00FF28  64                 	db	100	;'d'
  1305  00FF29  20                 	db	32
  1306  00FF2A  53                 	db	83	;'S'
  1307  00FF2B  45                 	db	69	;'E'
  1308  00FF2C  43                 	db	67	;'C'
  1309  00FF2D  00                 	db	0
  1310  00FF2E                     STR_2:
  1311  00FF2E  54                 	db	84	;'T'
  1312  00FF2F  49                 	db	73	;'I'
  1313  00FF30  4D                 	db	77	;'M'
  1314  00FF31  45                 	db	69	;'E'
  1315  00FF32  3A                 	db	58	;':'
  1316  00FF33  20                 	db	32
  1317  00FF34  25                 	db	37
  1318  00FF35  64                 	db	100	;'d'
  1319  00FF36  3A                 	db	58	;':'
  1320  00FF37  25                 	db	37
  1321  00FF38  30                 	db	48	;'0'
  1322  00FF39  32                 	db	50	;'2'
  1323  00FF3A  64                 	db	100	;'d'
  1324  00FF3B  00                 	db	0
  1325  00FF3C                     STR_79:
  1326  00FF3C  54                 	db	84	;'T'
  1327  00FF3D  53                 	db	83	;'S'
  1328  00FF3E  54                 	db	84	;'T'
  1329  00FF3F  3A                 	db	58	;':'
  1330  00FF40  20                 	db	32
  1331  00FF41  49                 	db	73	;'I'
  1332  00FF42  52                 	db	82	;'R'
  1333  00FF43  20                 	db	32
  1334  00FF44  53                 	db	83	;'S'
  1335  00FF45  4E                 	db	78	;'N'
  1336  00FF46  53                 	db	83	;'S'
  1337  00FF47  52                 	db	82	;'R'
  1338  00FF48  00                 	db	0
  1339  00FF49                     STR_107:
  1340  00FF49  53                 	db	83	;'S'
  1341  00FF4A  4F                 	db	79	;'O'
  1342  00FF4B  4C                 	db	76	;'L'
  1343  00FF4C  45                 	db	69	;'E'
  1344  00FF4D  4E                 	db	78	;'N'
  1345  00FF4E  4F                 	db	79	;'O'
  1346  00FF4F  49                 	db	73	;'I'
  1347  00FF50  44                 	db	68	;'D'
  1348  00FF51  20                 	db	32
  1349  00FF52  54                 	db	84	;'T'
  1350  00FF53  53                 	db	83	;'S'
  1351  00FF54  54                 	db	84	;'T'
  1352  00FF55  00                 	db	0
  1353  00FF56                     STR_65:
  1354  00FF56  54                 	db	84	;'T'
  1355  00FF57  49                 	db	73	;'I'
  1356  00FF58  4D                 	db	77	;'M'
  1357  00FF59  45                 	db	69	;'E'
  1358  00FF5A  20                 	db	32
  1359  00FF5B  25                 	db	37
  1360  00FF5C  64                 	db	100	;'d'
  1361  00FF5D  3A                 	db	58	;':'
  1362  00FF5E  25                 	db	37
  1363  00FF5F  30                 	db	48	;'0'
  1364  00FF60  32                 	db	50	;'2'
  1365  00FF61  64                 	db	100	;'d'
  1366  00FF62  00                 	db	0
  1367  00FF63                     STR_74:
  1368  00FF63  41                 	db	65	;'A'
  1369  00FF64  4C                 	db	76	;'L'
  1370  00FF65  47                 	db	71	;'G'
  1371  00FF66  33                 	db	51	;'3'
  1372  00FF67  3A                 	db	58	;':'
  1373  00FF68  20                 	db	32
  1374  00FF69  31                 	db	49	;'1'
  1375  00FF6A  20                 	db	32
  1376  00FF6B  43                 	db	67	;'C'
  1377  00FF6C  41                 	db	65	;'A'
  1378  00FF6D  4E                 	db	78	;'N'
  1379  00FF6E  00                 	db	0
  1380  00FF6F                     STR_88:
  1381  00FF6F  50                 	db	80	;'P'
  1382  00FF70  49                 	db	73	;'I'
  1383  00FF71  4E                 	db	78	;'N'
  1384  00FF72  20                 	db	32
  1385  00FF73  52                 	db	82	;'R'
  1386  00FF74  41                 	db	65	;'A'
  1387  00FF75  33                 	db	51	;'3'
  1388  00FF76  2E                 	db	46
  1389  00FF77  2E                 	db	46
  1390  00FF78  2E                 	db	46
  1391  00FF79  00                 	db	0
  1392  00FF7A                     STR_90:
  1393  00FF7A  50                 	db	80	;'P'
  1394  00FF7B  49                 	db	73	;'I'
  1395  00FF7C  4E                 	db	78	;'N'
  1396  00FF7D  20                 	db	32
  1397  00FF7E  52                 	db	82	;'R'
  1398  00FF7F  41                 	db	65	;'A'
  1399  00FF80  34                 	db	52	;'4'
  1400  00FF81  2E                 	db	46
  1401  00FF82  2E                 	db	46
  1402  00FF83  2E                 	db	46
  1403  00FF84  00                 	db	0
  1404  00FF85                     STR_64:
  1405  00FF85  53                 	db	83	;'S'
  1406  00FF86  4F                 	db	79	;'O'
  1407  00FF87  52                 	db	82	;'R'
  1408  00FF88  54                 	db	84	;'T'
  1409  00FF89  49                 	db	73	;'I'
  1410  00FF8A  4E                 	db	78	;'N'
  1411  00FF8B  47                 	db	71	;'G'
  1412  00FF8C  2E                 	db	46
  1413  00FF8D  2E                 	db	46
  1414  00FF8E  2E                 	db	46
  1415  00FF8F  00                 	db	0
  1416  00FF90                     STR_108:
  1417  00FF90  50                 	db	80	;'P'
  1418  00FF91  55                 	db	85	;'U'
  1419  00FF92  53                 	db	83	;'S'
  1420  00FF93  48                 	db	72	;'H'
  1421  00FF94  20                 	db	32
  1422  00FF95  44                 	db	68	;'D'
  1423  00FF96  4F                 	db	79	;'O'
  1424  00FF97  4E                 	db	78	;'N'
  1425  00FF98  45                 	db	69	;'E'
  1426  00FF99  00                 	db	0
  1427  00FF9A                     STR_83:
  1428  00FF9A  41                 	db	65	;'A'
  1429  00FF9B  43                 	db	67	;'C'
  1430  00FF9C  54                 	db	84	;'T'
  1431  00FF9D  55                 	db	85	;'U'
  1432  00FF9E  41                 	db	65	;'A'
  1433  00FF9F  54                 	db	84	;'T'
  1434  00FFA0  4F                 	db	79	;'O'
  1435  00FFA1  52                 	db	82	;'R'
  1436  00FFA2  53                 	db	83	;'S'
  1437  00FFA3  00                 	db	0
  1438  00FFA4                     STR_22:
  1439  00FFA4  44                 	db	68	;'D'
  1440  00FFA5  55                 	db	85	;'U'
  1441  00FFA6  52                 	db	82	;'R'
  1442  00FFA7  41                 	db	65	;'A'
  1443  00FFA8  54                 	db	84	;'T'
  1444  00FFA9  49                 	db	73	;'I'
  1445  00FFAA  4F                 	db	79	;'O'
  1446  00FFAB  4E                 	db	78	;'N'
  1447  00FFAC  3A                 	db	58	;':'
  1448  00FFAD  00                 	db	0
  1449  00FFAE                     STR_77:
  1450  00FFAE  53                 	db	83	;'S'
  1451  00FFAF  45                 	db	69	;'E'
  1452  00FFB0  4E                 	db	78	;'N'
  1453  00FFB1  53                 	db	83	;'S'
  1454  00FFB2  4F                 	db	79	;'O'
  1455  00FFB3  52                 	db	82	;'R'
  1456  00FFB4  53                 	db	83	;'S'
  1457  00FFB5  00                 	db	0
  1458  00FFB6                     STR_111:
  1459  00FFB6  28                 	db	40
  1460  00FFB7  6E                 	db	110	;'n'
  1461  00FFB8  75                 	db	117	;'u'
  1462  00FFB9  6C                 	db	108	;'l'
  1463  00FFBA  6C                 	db	108	;'l'
  1464  00FFBB  29                 	db	41
  1465  00FFBC  00                 	db	0
  1466  00FFBD                     STR_67:
  1467  00FFBD  46                 	db	70	;'F'
  1468  00FFBE  41                 	db	65	;'A'
  1469  00FFBF  49                 	db	73	;'I'
  1470  00FFC0  4C                 	db	76	;'L'
  1471  00FFC1  45                 	db	69	;'E'
  1472  00FFC2  44                 	db	68	;'D'
  1473  00FFC3  00                 	db	0
  1474  00FFC4                     STR_7:
  1475  00FFC4  53                 	db	83	;'S'
  1476  00FFC5  54                 	db	84	;'T'
  1477  00FFC6  41                 	db	65	;'A'
  1478  00FFC7  52                 	db	82	;'R'
  1479  00FFC8  54                 	db	84	;'T'
  1480  00FFC9  3A                 	db	58	;':'
  1481  00FFCA  00                 	db	0
  1482  00FFCB                     STR_9:
  1483  00FFCB  46                 	db	70	;'F'
  1484  00FFCC  45                 	db	69	;'E'
  1485  00FFCD  42                 	db	66	;'B'
  1486  00FFCE  00                 	db	0
  1487  00FFCF                     STR_19:
  1488  00FFCF  44                 	db	68	;'D'
  1489  00FFD0  45                 	db	69	;'E'
  1490  00FFD1  43                 	db	67	;'C'
  1491  00FFD2  00                 	db	0
  1492  00FFD3                     STR_15:
  1493  00FFD3  41                 	db	65	;'A'
  1494  00FFD4  55                 	db	85	;'U'
  1495  00FFD5  47                 	db	71	;'G'
  1496  00FFD6  00                 	db	0
  1497  00FFD7                     STR_14:
  1498  00FFD7  4A                 	db	74	;'J'
  1499  00FFD8  55                 	db	85	;'U'
  1500  00FFD9  4C                 	db	76	;'L'
  1501  00FFDA  00                 	db	0
  1502  00FFDB                     STR_8:
  1503  00FFDB  4A                 	db	74	;'J'
  1504  00FFDC  41                 	db	65	;'A'
  1505  00FFDD  4E                 	db	78	;'N'
  1506  00FFDE  00                 	db	0
  1507  00FFDF                     STR_13:
  1508  00FFDF  4A                 	db	74	;'J'
  1509  00FFE0  55                 	db	85	;'U'
  1510  00FFE1  4E                 	db	78	;'N'
  1511  00FFE2  00                 	db	0
  1512  00FFE3                     STR_16:
  1513  00FFE3  53                 	db	83	;'S'
  1514  00FFE4  45                 	db	69	;'E'
  1515  00FFE5  50                 	db	80	;'P'
  1516  00FFE6  00                 	db	0
  1517  00FFE7                     STR_10:
  1518  00FFE7  4D                 	db	77	;'M'
  1519  00FFE8  41                 	db	65	;'A'
  1520  00FFE9  52                 	db	82	;'R'
  1521  00FFEA  00                 	db	0
  1522  00FFEB                     STR_11:
  1523  00FFEB  41                 	db	65	;'A'
  1524  00FFEC  50                 	db	80	;'P'
  1525  00FFED  52                 	db	82	;'R'
  1526  00FFEE  00                 	db	0
  1527  00FFEF                     STR_20:
  1528  00FFEF  45                 	db	69	;'E'
  1529  00FFF0  52                 	db	82	;'R'
  1530  00FFF1  52                 	db	82	;'R'
  1531  00FFF2  00                 	db	0
  1532  00FFF3                     STR_17:
  1533  00FFF3  4F                 	db	79	;'O'
  1534  00FFF4  43                 	db	67	;'C'
  1535  00FFF5  54                 	db	84	;'T'
  1536  00FFF6  00                 	db	0
  1537  00FFF7                     STR_18:
  1538  00FFF7  4E                 	db	78	;'N'
  1539  00FFF8  4F                 	db	79	;'O'
  1540  00FFF9  56                 	db	86	;'V'
  1541  00FFFA  00                 	db	0
  1542  00FFFB                     STR_12:
  1543  00FFFB  4D                 	db	77	;'M'
  1544  00FFFC  41                 	db	65	;'A'
  1545  00FFFD  59                 	db	89	;'Y'
  1546  00FFFE  00                 	db	0
  1547  0000                     
  1548                           ; #config settings
  1549  00FFFF  00                 	db	0	; dummy byte at the end
  1550  0000                     
  1551                           	psect	cinit
  1552  003CDA                     __pcinit:
  1553                           	opt stack 0
  1554  003CDA                     start_initialization:
  1555                           	opt stack 0
  1556  003CDA                     __initialization:
  1557                           	opt stack 0
  1558                           
  1559                           ; Initialize objects allocated to BANK1 (8 bytes)
  1560                           ; load TBLPTR registers with __pidataBANK1
  1561  003CDA  0E2E               	movlw	low __pidataBANK1
  1562  003CDC  6EF6               	movwf	tblptrl,c
  1563  003CDE  0E44               	movlw	high __pidataBANK1
  1564  003CE0  6EF7               	movwf	tblptrh,c
  1565  003CE2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1566  003CE4  6EF8               	movwf	tblptru,c
  1567  003CE6  EE01  F02D         	lfsr	0,__pdataBANK1
  1568  003CEA  EE10 F008          	lfsr	1,8
  1569  003CEE                     copy_data0:
  1570  003CEE  0009               	tblrd		*+
  1571  003CF0  CFF5 FFEE          	movff	tablat,postinc0
  1572  003CF4  50E5               	movf	postdec1,w,c
  1573  003CF6  50E1               	movf	fsr1l,w,c
  1574  003CF8  E1FA               	bnz	copy_data0
  1575                           
  1576                           ; Clear objects allocated to BANK1 (45 bytes)
  1577  003CFA  EE01  F000         	lfsr	0,__pbssBANK1
  1578  003CFE  0E2D               	movlw	45
  1579  003D00                     clear_0:
  1580  003D00  6AEE               	clrf	postinc0,c
  1581  003D02  06E8               	decf	wreg,f,c
  1582  003D04  E1FD               	bnz	clear_0
  1583                           
  1584                           ; Clear objects allocated to BANK0 (38 bytes)
  1585  003D06  EE00  F0DA         	lfsr	0,__pbssBANK0
  1586  003D0A  0E26               	movlw	38
  1587  003D0C                     clear_1:
  1588  003D0C  6AEE               	clrf	postinc0,c
  1589  003D0E  06E8               	decf	wreg,f,c
  1590  003D10  E1FD               	bnz	clear_1
  1591                           
  1592                           ; Clear objects allocated to COMRAM (35 bytes)
  1593  003D12  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1594  003D16  0E23               	movlw	35
  1595  003D18                     clear_2:
  1596  003D18  6AEE               	clrf	postinc0,c
  1597  003D1A  06E8               	decf	wreg,f,c
  1598  003D1C  E1FD               	bnz	clear_2
  1599  003D1E                     end_of_initialization:
  1600                           	opt stack 0
  1601  003D1E                     __end_of__initialization:
  1602                           	opt stack 0
  1603  003D1E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1604  003D20  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1605  003D22  0100               	movlb	0
  1606  003D24  EFBD  F01A         	goto	_main	;jump to C main() function
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           postdec1	equ	0xFE5
  1614                           fsr1l	equ	0xFE1
  1615                           
  1616                           	psect	bssCOMRAM
  1617  00005B                     __pbssCOMRAM:
  1618                           	opt stack 0
  1619  00005B                     _back:
  1620                           	opt stack 0
  1621  00005B                     	ds	2
  1622  00005D                     _count_can_no_lab:
  1623                           	opt stack 0
  1624  00005D                     	ds	2
  1625  00005F                     _count_can_w_lab:
  1626                           	opt stack 0
  1627  00005F                     	ds	2
  1628  000061                     _count_pop_no_tab:
  1629                           	opt stack 0
  1630  000061                     	ds	2
  1631  000063                     _count_pop_w_tab:
  1632                           	opt stack 0
  1633  000063                     	ds	2
  1634  000065                     _cur_can:
  1635                           	opt stack 0
  1636  000065                     	ds	2
  1637  000067                     _down:
  1638                           	opt stack 0
  1639  000067                     	ds	2
  1640  000069                     _enter:
  1641                           	opt stack 0
  1642  000069                     	ds	2
  1643  00006B                     _f_ID_receive:
  1644                           	opt stack 0
  1645  00006B                     	ds	2
  1646  00006D                     _f_can_coming_to_ID:
  1647                           	opt stack 0
  1648  00006D                     	ds	2
  1649  00006F                     _f_can_coming_to_distribution:
  1650                           	opt stack 0
  1651  00006F                     	ds	2
  1652  000071                     _f_can_distributed:
  1653                           	opt stack 0
  1654  000071                     	ds	2
  1655  000073                     _f_lastCan:
  1656                           	opt stack 0
  1657  000073                     	ds	2
  1658  000075                     _firstboot:
  1659                           	opt stack 0
  1660  000075                     	ds	2
  1661  000077                     _up:
  1662                           	opt stack 0
  1663  000077                     	ds	2
  1664  000079                     _was_low_1:
  1665                           	opt stack 0
  1666  000079                     	ds	2
  1667  00007B                     _was_low_3:
  1668                           	opt stack 0
  1669  00007B                     	ds	2
  1670  00007D                     _input:
  1671                           	opt stack 0
  1672  00007D                     	ds	1
  1673                           tblptru	equ	0xFF8
  1674                           tblptrh	equ	0xFF7
  1675                           tblptrl	equ	0xFF6
  1676                           tablat	equ	0xFF5
  1677                           postinc0	equ	0xFEE
  1678                           wreg	equ	0xFE8
  1679                           postdec1	equ	0xFE5
  1680                           fsr1l	equ	0xFE1
  1681                           
  1682                           	psect	bssBANK0
  1683  0000DA                     __pbssBANK0:
  1684                           	opt stack 0
  1685  0000DA                     _IR_signal:
  1686                           	opt stack 0
  1687  0000DA                     	ds	2
  1688  0000DC                     _MAG_signal:
  1689                           	opt stack 0
  1690  0000DC                     	ds	2
  1691  0000DE                     _cur_state:
  1692                           	opt stack 0
  1693  0000DE                     	ds	2
  1694  0000E0                     _debug:
  1695                           	opt stack 0
  1696  0000E0                     	ds	2
  1697  0000E2                     _f_loadingNewCan:
  1698                           	opt stack 0
  1699  0000E2                     	ds	2
  1700  0000E4                     _first:
  1701                           	opt stack 0
  1702  0000E4                     	ds	2
  1703  0000E6                     _log:
  1704                           	opt stack 0
  1705  0000E6                     	ds	2
  1706  0000E8                     _log_completion:
  1707                           	opt stack 0
  1708  0000E8                     	ds	2
  1709  0000EA                     _log_count_can_no_lab:
  1710                           	opt stack 0
  1711  0000EA                     	ds	2
  1712  0000EC                     _log_count_can_w_lab:
  1713                           	opt stack 0
  1714  0000EC                     	ds	2
  1715  0000EE                     _log_count_pop_no_tab:
  1716                           	opt stack 0
  1717  0000EE                     	ds	2
  1718  0000F0                     _log_count_pop_w_tab:
  1719                           	opt stack 0
  1720  0000F0                     	ds	2
  1721  0000F2                     _log_count_total:
  1722                           	opt stack 0
  1723  0000F2                     	ds	2
  1724  0000F4                     _log_total_time:
  1725                           	opt stack 0
  1726  0000F4                     	ds	2
  1727  0000F6                     _logstate:
  1728                           	opt stack 0
  1729  0000F6                     	ds	2
  1730  0000F8                     _total_time:
  1731                           	opt stack 0
  1732  0000F8                     	ds	2
  1733  0000FA                     _var:
  1734                           	opt stack 0
  1735  0000FA                     	ds	2
  1736  0000FC                     _machine_state:
  1737                           	opt stack 0
  1738  0000FC                     	ds	1
  1739  0000FD                     _sel:
  1740                           	opt stack 0
  1741  0000FD                     	ds	1
  1742  0000FE                     _count_total:
  1743                           	opt stack 0
  1744  0000FE                     	ds	2
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           postdec1	equ	0xFE5
  1752                           fsr1l	equ	0xFE1
  1753                           
  1754                           	psect	bssBANK1
  1755  000100                     __pbssBANK1:
  1756                           	opt stack 0
  1757  000100                     _log_startTime:
  1758                           	opt stack 0
  1759  000100                     	ds	14
  1760  00010E                     _startTime:
  1761                           	opt stack 0
  1762  00010E                     	ds	14
  1763  00011C                     _servoTimes:
  1764                           	opt stack 0
  1765  00011C                     	ds	8
  1766  000124                     _time:
  1767                           	opt stack 0
  1768  000124                     	ds	7
  1769  00012B                     _i:
  1770                           	opt stack 0
  1771  00012B                     	ds	2
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1l	equ	0xFE1
  1780                           
  1781                           	psect	dataBANK1
  1782  00012D                     __pdataBANK1:
  1783                           	opt stack 0
  1784  00012D                     UI@F3222:
  1785                           	opt stack 0
  1786  00012D                     	ds	4
  1787  000131                     printRTC@F3213:
  1788                           	opt stack 0
  1789  000131                     	ds	4
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           postdec1	equ	0xFE5
  1797                           fsr1l	equ	0xFE1
  1798                           
  1799                           	psect	cstackBANK0
  1800  000080                     __pcstackBANK0:
  1801                           	opt stack 0
  1802  000080                     ??_delay_ms:
  1803  000080                     ??_PortTests:
  1804  000080                     ??_isdigit:
  1805  000080                     ??_readADC:
  1806  000080                     ??_I2C_Master_Wait:
  1807  000080                     ?___wmul:
  1808                           	opt stack 0
  1809  000080                     ?___awmod:
  1810                           	opt stack 0
  1811  000080                     ?___lwdiv:
  1812                           	opt stack 0
  1813  000080                     ?___lldiv:
  1814                           	opt stack 0
  1815  000080                     lcdNibble@temp:
  1816                           	opt stack 0
  1817  000080                     initTime@m:
  1818                           	opt stack 0
  1819  000080                     updateServoPosition@time_us:
  1820                           	opt stack 0
  1821  000080                     EEPROM_read@address:
  1822                           	opt stack 0
  1823  000080                     ___wmul@multiplier:
  1824                           	opt stack 0
  1825  000080                     ___awmod@dividend:
  1826                           	opt stack 0
  1827  000080                     ___lwdiv@dividend:
  1828                           	opt stack 0
  1829  000080                     strcpy@to:
  1830                           	opt stack 0
  1831  000080                     ___lldiv@dividend:
  1832                           	opt stack 0
  1833                           
  1834                           ; 4 bytes @ 0x0
  1835  000080                     	ds	1
  1836  000081                     readADC@channel:
  1837                           	opt stack 0
  1838  000081                     I2C_Master_Read@a:
  1839                           	opt stack 0
  1840  000081                     lcdNibble@data:
  1841                           	opt stack 0
  1842  000081                     initTime@h:
  1843                           	opt stack 0
  1844  000081                     delay_ms@milliseconds:
  1845                           	opt stack 0
  1846  000081                     _isdigit$1881:
  1847                           	opt stack 0
  1848  000081                     I2C_Master_Write@d:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x1
  1852  000081                     	ds	1
  1853  000082                     ??_readIR:
  1854  000082                     ??_readMAG:
  1855  000082                     I2C_Master_Read@temp:
  1856                           	opt stack 0
  1857  000082                     lcdInst@data:
  1858                           	opt stack 0
  1859  000082                     putch@data:
  1860                           	opt stack 0
  1861  000082                     initTime@w:
  1862                           	opt stack 0
  1863  000082                     isdigit@c:
  1864                           	opt stack 0
  1865  000082                     updateServoPosition@timer:
  1866                           	opt stack 0
  1867  000082                     ___wmul@multiplicand:
  1868                           	opt stack 0
  1869  000082                     ___awmod@divisor:
  1870                           	opt stack 0
  1871  000082                     ___lwdiv@divisor:
  1872                           	opt stack 0
  1873  000082                     strcpy@from:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x2
  1877  000082                     	ds	1
  1878  000083                     ??_initLCD:
  1879  000083                     initTime@DD:
  1880                           	opt stack 0
  1881  000083                     getRTC@i:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x3
  1885  000083                     	ds	1
  1886  000084                     ??_updateServoPosition:
  1887  000084                     initTime@MM:
  1888                           	opt stack 0
  1889  000084                     ___awmod@counter:
  1890                           	opt stack 0
  1891  000084                     readIR@res:
  1892                           	opt stack 0
  1893  000084                     readMAG@res:
  1894                           	opt stack 0
  1895  000084                     ___wmul@product:
  1896                           	opt stack 0
  1897  000084                     ___lwdiv@quotient:
  1898                           	opt stack 0
  1899  000084                     strcpy@cp:
  1900                           	opt stack 0
  1901  000084                     ___lldiv@divisor:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x4
  1905  000084                     	ds	1
  1906  000085                     ??_initSortTimer:
  1907  000085                     initTime@YY:
  1908                           	opt stack 0
  1909  000085                     ___awmod@sign:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x5
  1913  000085                     	ds	1
  1914  000086                     ??_ID:
  1915  000086                     ??_getIR:
  1916  000086                     ?___awdiv:
  1917                           	opt stack 0
  1918  000086                     initTime@s:
  1919                           	opt stack 0
  1920  000086                     ___lwdiv@counter:
  1921                           	opt stack 0
  1922  000086                     updateServoPosition@my_time:
  1923                           	opt stack 0
  1924  000086                     ___awdiv@dividend:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x6
  1928  000086                     	ds	1
  1929  000087                     ?___lwmod:
  1930                           	opt stack 0
  1931  000087                     ___lwmod@dividend:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0x7
  1935  000087                     	ds	1
  1936  000088                     ??_Distribution:
  1937  000088                     ??_initServos:
  1938  000088                     initSortTimer@i:
  1939                           	opt stack 0
  1940  000088                     ___awdiv@divisor:
  1941                           	opt stack 0
  1942  000088                     ___lldiv@quotient:
  1943                           	opt stack 0
  1944  000088                     ID@sensor_outputs:
  1945                           	opt stack 0
  1946                           
  1947                           ; 6 bytes @ 0x8
  1948  000088                     	ds	1
  1949  000089                     ___lwmod@divisor:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x9
  1953  000089                     	ds	1
  1954  00008A                     ___awdiv@counter:
  1955                           	opt stack 0
  1956                           
  1957                           ; 1 bytes @ 0xA
  1958  00008A                     	ds	1
  1959  00008B                     ___awdiv@sign:
  1960                           	opt stack 0
  1961  00008B                     ___lwmod@counter:
  1962                           	opt stack 0
  1963                           
  1964                           ; 1 bytes @ 0xB
  1965  00008B                     	ds	1
  1966  00008C                     ___lldiv@counter:
  1967                           	opt stack 0
  1968  00008C                     ___awdiv@quotient:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0xC
  1972  00008C                     	ds	1
  1973  00008D                     I2C_Master_Init@c:
  1974                           	opt stack 0
  1975                           
  1976                           ; 4 bytes @ 0xD
  1977  00008D                     	ds	1
  1978  00008E                     ?_printf:
  1979                           	opt stack 0
  1980  00008E                     printf@f:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0xE
  1984  00008E                     	ds	3
  1985  000091                     ??_I2C_Master_Init:
  1986                           
  1987                           ; 1 bytes @ 0x11
  1988  000091                     	ds	4
  1989  000095                     ??_loadRTC:
  1990                           
  1991                           ; 1 bytes @ 0x15
  1992  000095                     	ds	1
  1993  000096                     loadRTC@i:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x16
  1997  000096                     	ds	4
  1998  00009A                     ??_printf:
  1999                           
  2000                           ; 1 bytes @ 0x1A
  2001  00009A                     	ds	4
  2002  00009E                     printf@prec:
  2003                           	opt stack 0
  2004                           
  2005                           ; 1 bytes @ 0x1E
  2006  00009E                     	ds	1
  2007  00009F                     printf@cp:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x1F
  2011  00009F                     	ds	2
  2012  0000A1                     printf@ap:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x21
  2016  0000A1                     	ds	2
  2017  0000A3                     printf@len:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x23
  2021  0000A3                     	ds	2
  2022  0000A5                     printf@val:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x25
  2026  0000A5                     	ds	2
  2027  0000A7                     printf@flag:
  2028                           	opt stack 0
  2029                           
  2030                           ; 1 bytes @ 0x27
  2031  0000A7                     	ds	1
  2032  0000A8                     printf@c:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x28
  2036  0000A8                     	ds	1
  2037  0000A9                     printf@width:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x29
  2041  0000A9                     	ds	2
  2042  0000AB                     ??_printRTC:
  2043  0000AB                     ??_algorithmTest:
  2044  0000AB                     ??_sensorTest:
  2045  0000AB                     ??_actuatorTest:
  2046  0000AB                     ??_PortTestA5:
  2047  0000AB                     ??_ToggleTestA5:
  2048  0000AB                     ??_SolenoidTestA5:
  2049  0000AB                     EEPROM_write@address:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x2B
  2053  0000AB                     	ds	1
  2054  0000AC                     ToggleTestA5@on:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x2C
  2058  0000AC                     	ds	1
  2059  0000AD                     EEPROM_write@data:
  2060                           	opt stack 0
  2061  0000AD                     actuatorTest@i_1574:
  2062                           	opt stack 0
  2063  0000AD                     sensorTest@on:
  2064                           	opt stack 0
  2065  0000AD                     SolenoidTestA5@i:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0x2D
  2069  0000AD                     	ds	1
  2070  0000AE                     ??_EEPROM_write:
  2071  0000AE                     actuatorTest@i_1581:
  2072                           	opt stack 0
  2073  0000AE                     printRTC@INT_time:
  2074                           	opt stack 0
  2075                           
  2076                           ; 14 bytes @ 0x2E
  2077  0000AE                     	ds	1
  2078  0000AF                     EEPROM_write@i:
  2079                           	opt stack 0
  2080  0000AF                     actuatorTest@i_1582:
  2081                           	opt stack 0
  2082  0000AF                     SolenoidTestA5@i_1625:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0x2F
  2086  0000AF                     	ds	1
  2087  0000B0                     EEPROM_write@i_1319:
  2088                           	opt stack 0
  2089  0000B0                     actuatorTest@i_1584:
  2090                           	opt stack 0
  2091  0000B0                     SolenoidTestA5@i_1627:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x30
  2095  0000B0                     	ds	1
  2096  0000B1                     ??_Loading:
  2097  0000B1                     logRun@num:
  2098                           	opt stack 0
  2099  0000B1                     actuatorTest@i_1585:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x31
  2103  0000B1                     	ds	1
  2104  0000B2                     logRun@byte1:
  2105                           	opt stack 0
  2106  0000B2                     actuatorTest@i_1587:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x32
  2110  0000B2                     	ds	1
  2111  0000B3                     logRun@byte2:
  2112                           	opt stack 0
  2113  0000B3                     actuatorTest@i_1588:
  2114                           	opt stack 0
  2115  0000B3                     Loading@addr:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x33
  2119  0000B3                     	ds	1
  2120  0000B4                     logRun@byte3:
  2121                           	opt stack 0
  2122  0000B4                     actuatorTest@i_1590:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x34
  2126  0000B4                     	ds	1
  2127  0000B5                     Loading@byte1:
  2128                           	opt stack 0
  2129  0000B5                     logRun@byte_i:
  2130                           	opt stack 0
  2131  0000B5                     actuatorTest@i_1591:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x35
  2135  0000B5                     	ds	1
  2136  0000B6                     logRun@byte11:
  2137                           	opt stack 0
  2138  0000B6                     actuatorTest@i_1593:
  2139                           	opt stack 0
  2140  0000B6                     Loading@i:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x36
  2144  0000B6                     	ds	1
  2145  0000B7                     actuatorTest@i_1594:
  2146                           	opt stack 0
  2147  0000B7                     logRun@i:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x37
  2151  0000B7                     	ds	1
  2152  0000B8                     actuatorTest@i_1596:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x38
  2156  0000B8                     	ds	1
  2157  0000B9                     actuatorTest@i_1597:
  2158                           	opt stack 0
  2159  0000B9                     logRun@addr:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x39
  2163  0000B9                     	ds	1
  2164  0000BA                     actuatorTest@i_1600:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0x3A
  2168  0000BA                     	ds	1
  2169  0000BB                     actuatorTest@i_1601:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x3B
  2173  0000BB                     	ds	1
  2174  0000BC                     actuatorTest@i_1603:
  2175                           	opt stack 0
  2176  0000BC                     printRTC@RTC_month:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x3C
  2180  0000BC                     	ds	1
  2181  0000BD                     actuatorTest@i_1604:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x3D
  2185  0000BD                     	ds	1
  2186  0000BE                     actuatorTest@i_1606:
  2187                           	opt stack 0
  2188  0000BE                     printRTC@month:
  2189                           	opt stack 0
  2190                           
  2191                           ; 4 bytes @ 0x3E
  2192  0000BE                     	ds	1
  2193  0000BF                     actuatorTest@i_1607:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x3F
  2197  0000BF                     	ds	1
  2198  0000C0                     actuatorTest@i_1610:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x40
  2202  0000C0                     	ds	1
  2203  0000C1                     actuatorTest@i_1611:
  2204                           	opt stack 0
  2205                           
  2206                           ; 1 bytes @ 0x41
  2207  0000C1                     	ds	1
  2208  0000C2                     actuatorTest@i_1613:
  2209                           	opt stack 0
  2210  0000C2                     printRTC@i:
  2211                           	opt stack 0
  2212                           
  2213                           ; 2 bytes @ 0x42
  2214  0000C2                     	ds	1
  2215  0000C3                     actuatorTest@i_1614:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x43
  2219  0000C3                     	ds	1
  2220  0000C4                     ??_UI:
  2221  0000C4                     actuatorTest@i:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x44
  2225  0000C4                     	ds	2
  2226  0000C6                     ??_Test:
  2227  0000C6                     _UI$2234:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x46
  2231  0000C6                     	ds	2
  2232  0000C8                     UI@i:
  2233                           	opt stack 0
  2234                           
  2235                           ; 1 bytes @ 0x48
  2236  0000C8                     	ds	1
  2237  0000C9                     UI@i_408:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x49
  2241  0000C9                     	ds	1
  2242  0000CA                     UI@i_411:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x4A
  2246  0000CA                     	ds	1
  2247  0000CB                     UI@i_412:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x4B
  2251  0000CB                     	ds	1
  2252  0000CC                     UI@i_430:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x4C
  2256  0000CC                     	ds	1
  2257  0000CD                     UI@i_431:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x4D
  2261  0000CD                     	ds	1
  2262  0000CE                     UI@i_434:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x4E
  2266  0000CE                     	ds	1
  2267  0000CF                     UI@i_435:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x4F
  2271  0000CF                     	ds	1
  2272  0000D0                     UI@i_438:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x50
  2276  0000D0                     	ds	1
  2277  0000D1                     UI@i_439:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x51
  2281  0000D1                     	ds	1
  2282  0000D2                     UI@i_442:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x52
  2286  0000D2                     	ds	1
  2287  0000D3                     UI@i_443:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x53
  2291  0000D3                     	ds	1
  2292  0000D4                     UI@i_446:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x54
  2296  0000D4                     	ds	1
  2297  0000D5                     UI@i_447:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x55
  2301  0000D5                     	ds	1
  2302  0000D6                     UI@month:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x56
  2306  0000D6                     	ds	4
  2307  0000DA                     tblptru	equ	0xFF8
  2308                           tblptrh	equ	0xFF7
  2309                           tblptrl	equ	0xFF6
  2310                           tablat	equ	0xFF5
  2311                           postinc0	equ	0xFEE
  2312                           wreg	equ	0xFE8
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           
  2316                           ; 1 bytes @ 0x5A
  2317                           
  2318                           	psect	cstackCOMRAM
  2319  000001                     __pcstackCOMRAM:
  2320                           	opt stack 0
  2321  000001                     ??i2_I2C_Master_Wait:
  2322  000001                     ??i2_isdigit:
  2323  000001                     ?i2___wmul:
  2324                           	opt stack 0
  2325  000001                     ?i2___lwmod:
  2326                           	opt stack 0
  2327  000001                     i2lcdNibble@temp:
  2328                           	opt stack 0
  2329  000001                     i2EEPROM_read@address:
  2330                           	opt stack 0
  2331  000001                     i2___wmul@multiplier:
  2332                           	opt stack 0
  2333  000001                     i2___lwmod@dividend:
  2334                           	opt stack 0
  2335  000001                     i2strcpy@to:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x0
  2339  000001                     	ds	1
  2340  000002                     i2I2C_Master_Read@a:
  2341                           	opt stack 0
  2342  000002                     i2lcdNibble@data:
  2343                           	opt stack 0
  2344  000002                     i2_isdigit$1881:
  2345                           	opt stack 0
  2346  000002                     i2I2C_Master_Write@d:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x1
  2350  000002                     	ds	1
  2351  000003                     i2I2C_Master_Read@temp:
  2352                           	opt stack 0
  2353  000003                     i2lcdInst@data:
  2354                           	opt stack 0
  2355  000003                     i2putch@data:
  2356                           	opt stack 0
  2357  000003                     i2isdigit@c:
  2358                           	opt stack 0
  2359  000003                     i2___wmul@multiplicand:
  2360                           	opt stack 0
  2361  000003                     i2___lwmod@divisor:
  2362                           	opt stack 0
  2363  000003                     i2strcpy@from:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x2
  2367  000003                     	ds	1
  2368  000004                     i2getRTC@i:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x3
  2372  000004                     	ds	1
  2373  000005                     i2___lwmod@counter:
  2374                           	opt stack 0
  2375  000005                     i2___wmul@product:
  2376                           	opt stack 0
  2377  000005                     i2strcpy@cp:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0x4
  2381  000005                     	ds	1
  2382  000006                     ?i2___lwdiv:
  2383                           	opt stack 0
  2384  000006                     i2___lwdiv@dividend:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x5
  2388  000006                     	ds	1
  2389  000007                     retrieveLog@logNum:
  2390                           	opt stack 0
  2391                           
  2392                           ; 2 bytes @ 0x6
  2393  000007                     	ds	1
  2394  000008                     i2___lwdiv@divisor:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x7
  2398  000008                     	ds	1
  2399  000009                     ??_retrieveLog:
  2400                           
  2401                           ; 1 bytes @ 0x8
  2402  000009                     	ds	1
  2403  00000A                     i2___lwdiv@quotient:
  2404                           	opt stack 0
  2405                           
  2406                           ; 2 bytes @ 0x9
  2407  00000A                     	ds	1
  2408  00000B                     retrieveLog@byte1:
  2409                           	opt stack 0
  2410                           
  2411                           ; 1 bytes @ 0xA
  2412  00000B                     	ds	1
  2413  00000C                     retrieveLog@byte2:
  2414                           	opt stack 0
  2415  00000C                     i2___lwdiv@counter:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0xB
  2419  00000C                     	ds	1
  2420  00000D                     ?i2_printf:
  2421                           	opt stack 0
  2422  00000D                     retrieveLog@byte3:
  2423                           	opt stack 0
  2424  00000D                     i2printf@f:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0xC
  2428  00000D                     	ds	1
  2429  00000E                     retrieveLog@i:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0xD
  2433  00000E                     	ds	2
  2434  000010                     retrieveLog@addr:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0xF
  2438  000010                     	ds	2
  2439  000012                     dispLogs@myLog:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x11
  2443  000012                     	ds	2
  2444  000014                     
  2445                           ; 1 bytes @ 0x13
  2446  000014                     	ds	5
  2447  000019                     ??i2_printf:
  2448                           
  2449                           ; 1 bytes @ 0x18
  2450  000019                     	ds	4
  2451  00001D                     i2printf@prec:
  2452                           	opt stack 0
  2453                           
  2454                           ; 1 bytes @ 0x1C
  2455  00001D                     	ds	1
  2456  00001E                     i2printf@cp:
  2457                           	opt stack 0
  2458                           
  2459                           ; 2 bytes @ 0x1D
  2460  00001E                     	ds	2
  2461  000020                     i2printf@ap:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x1F
  2465  000020                     	ds	2
  2466  000022                     i2printf@len:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x21
  2470  000022                     	ds	2
  2471  000024                     i2printf@val:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0x23
  2475  000024                     	ds	2
  2476  000026                     i2printf@flag:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x25
  2480  000026                     	ds	1
  2481  000027                     i2printf@c:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x26
  2485  000027                     	ds	1
  2486  000028                     i2printf@width:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x27
  2490  000028                     	ds	2
  2491  00002A                     ??_printSortTimer:
  2492  00002A                     ??i2_printRTC:
  2493  00002A                     ?_inputHandler:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0x29
  2497  00002A                     	ds	2
  2498  00002C                     ??_inputHandler:
  2499                           
  2500                           ; 1 bytes @ 0x2B
  2501  00002C                     	ds	1
  2502  00002D                     printSortTimer@hour:
  2503                           	opt stack 0
  2504  00002D                     i2printRTC@INT_time:
  2505                           	opt stack 0
  2506                           
  2507                           ; 14 bytes @ 0x2C
  2508  00002D                     	ds	2
  2509  00002F                     printSortTimer@curTime:
  2510                           	opt stack 0
  2511                           
  2512                           ; 14 bytes @ 0x2E
  2513  00002F                     	ds	12
  2514  00003B                     i2printRTC@RTC_month:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x3A
  2518  00003B                     	ds	2
  2519  00003D                     printSortTimer@start_sec:
  2520                           	opt stack 0
  2521  00003D                     i2printRTC@month:
  2522                           	opt stack 0
  2523                           
  2524                           ; 4 bytes @ 0x3C
  2525  00003D                     	ds	2
  2526  00003F                     printSortTimer@cur_sec:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x3E
  2530  00003F                     	ds	2
  2531  000041                     printSortTimer@min:
  2532                           	opt stack 0
  2533  000041                     i2printRTC@i:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x40
  2537  000041                     	ds	2
  2538  000043                     ??_updateMenu:
  2539  000043                     printSortTimer@sec:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x42
  2543  000043                     	ds	2
  2544  000045                     _printSortTimer$2354:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x44
  2548  000045                     	ds	2
  2549  000047                     printSortTimer@timeDiff:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x46
  2553  000047                     	ds	2
  2554  000049                     printSortTimer@i:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x48
  2558  000049                     	ds	2
  2559  00004B                     ??_handler:
  2560                           
  2561                           ; 1 bytes @ 0x4A
  2562  00004B                     	ds	16
  2563                           tblptru	equ	0xFF8
  2564                           tblptrh	equ	0xFF7
  2565                           tblptrl	equ	0xFF6
  2566                           tablat	equ	0xFF5
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           postdec1	equ	0xFE5
  2570                           fsr1l	equ	0xFE1
  2571                           
  2572 ;;
  2573 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2574 ;;
  2575 ;; *************** function _main *****************
  2576 ;; Defined at:
  2577 ;;		line 18 in file "main.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;Total ram usage:        0 bytes
  2596 ;; Hardware stack levels required when called:   13
  2597 ;; This function calls:
  2598 ;;		_Test
  2599 ;;		_UI
  2600 ;;		_initLCD
  2601 ;;		_initTime
  2602 ;;		_initUI
  2603 ;;		_logRun
  2604 ;;		_machineConfig
  2605 ;;		_sort
  2606 ;;		_stopSignals
  2607 ;; This function is called by:
  2608 ;;		Startup code after reset
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text0
  2613  00357A                     __ptext0:
  2614                           	opt stack 0
  2615  00357A                     _main:
  2616                           	opt stack 18
  2617                           
  2618                           ;main.c: 19: machineConfig();
  2619                           
  2620                           ;incstack = 0
  2621  00357A  EC90  F01D         	call	_machineConfig	;wreg free
  2622                           
  2623                           ;main.c: 20: initLCD();
  2624  00357E  EC07  F01F         	call	_initLCD	;wreg free
  2625                           
  2626                           ;main.c: 21: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2627  003582  0E20               	movlw	32
  2628  003584  0100               	movlb	0	; () banked
  2629  003586  6F80               	movwf	initTime@m& (0+255),b
  2630  003588  0E13               	movlw	19
  2631  00358A  0100               	movlb	0	; () banked
  2632  00358C  6F81               	movwf	initTime@h& (0+255),b
  2633  00358E  0E04               	movlw	4
  2634  003590  0100               	movlb	0	; () banked
  2635  003592  6F82               	movwf	initTime@w& (0+255),b
  2636  003594  0E01               	movlw	1
  2637  003596  0100               	movlb	0	; () banked
  2638  003598  6F83               	movwf	initTime@DD& (0+255),b
  2639  00359A  0E03               	movlw	3
  2640  00359C  0100               	movlb	0	; () banked
  2641  00359E  6F84               	movwf	initTime@MM& (0+255),b
  2642  0035A0  0E17               	movlw	23
  2643  0035A2  0100               	movlb	0	; () banked
  2644  0035A4  6F85               	movwf	initTime@YY& (0+255),b
  2645  0035A6  0E42               	movlw	66
  2646  0035A8  EC9C  F021         	call	_initTime
  2647                           
  2648                           ;main.c: 22: initUI();
  2649  0035AC  EC67  F021         	call	_initUI	;wreg free
  2650                           
  2651                           ;main.c: 23: first = 1;
  2652  0035B0  0E00               	movlw	0
  2653  0035B2  0100               	movlb	0	; () banked
  2654  0035B4  6FE5               	movwf	(_first+1)& (0+255),b
  2655  0035B6  0E01               	movlw	1
  2656  0035B8  6FE4               	movwf	_first& (0+255),b
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 34: switch(machine_state){
  2660                           
  2661                           ;main.c: 33: while(1){
  2662  0035BA  D018               	goto	l7820
  2663  0035BC                     l7802:
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 36: UI();
  2667  0035BC  EC09  F000         	call	_UI	;wreg free
  2668                           
  2669                           ;main.c: 37: break;
  2670  0035C0  D015               	goto	l7820
  2671  0035C2                     l7804:
  2672                           
  2673                           ;main.c: 39: sort();
  2674  0035C2  EC8B  F021         	call	_sort	;wreg free
  2675                           
  2676                           ;main.c: 40: break;
  2677  0035C6  D012               	goto	l7820
  2678  0035C8                     l7806:
  2679                           
  2680                           ;main.c: 42: stopSignals();
  2681  0035C8  ECC8  F021         	call	_stopSignals	;wreg free
  2682                           
  2683                           ;main.c: 43: logRun();
  2684  0035CC  ECC2  F015         	call	_logRun	;wreg free
  2685                           
  2686                           ;main.c: 44: first = 1;
  2687  0035D0  0E00               	movlw	0
  2688  0035D2  0100               	movlb	0	; () banked
  2689  0035D4  6FE5               	movwf	(_first+1)& (0+255),b
  2690  0035D6  0E01               	movlw	1
  2691  0035D8  6FE4               	movwf	_first& (0+255),b
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 45: UI();
  2695  0035DA  EC09  F000         	call	_UI	;wreg free
  2696                           
  2697                           ;main.c: 46: break;
  2698  0035DE  D006               	goto	l7820
  2699  0035E0                     l7814:
  2700                           
  2701                           ;main.c: 48: Test();
  2702  0035E0  ECFD  F017         	call	_Test	;wreg free
  2703                           
  2704                           ;main.c: 49: break;
  2705  0035E4  D003               	goto	l7820
  2706  0035E6                     l7816:
  2707                           
  2708                           ;main.c: 51: stopSignals();
  2709  0035E6  ECC8  F021         	call	_stopSignals	;wreg free
  2710  0035EA                     l478:
  2711  0035EA  D7FF               	goto	l478
  2712  0035EC                     l7820:
  2713  0035EC  0100               	movlb	0	; () banked
  2714  0035EE  51FC               	movf	_machine_state& (0+255),w,b
  2715                           
  2716                           ; Switch size 1, requested type "space"
  2717                           ; Number of cases is 5, Range of values is 0 to 4
  2718                           ; switch strategies available:
  2719                           ; Name         Instructions Cycles
  2720                           ; simple_byte           16     9 (average)
  2721                           ;	Chosen strategy is simple_byte
  2722  0035F0  0A00               	xorlw	0	; case 0
  2723  0035F2  B4D8               	btfsc	status,2,c
  2724  0035F4  D7E3               	goto	l7802
  2725  0035F6  0A01               	xorlw	1	; case 1
  2726  0035F8  B4D8               	btfsc	status,2,c
  2727  0035FA  D7E3               	goto	l7804
  2728  0035FC  0A03               	xorlw	3	; case 2
  2729  0035FE  B4D8               	btfsc	status,2,c
  2730  003600  D7E3               	goto	l7806
  2731  003602  0A01               	xorlw	1	; case 3
  2732  003604  B4D8               	btfsc	status,2,c
  2733  003606  D7EC               	goto	l7814
  2734  003608  0A07               	xorlw	7	; case 4
  2735  00360A  B4D8               	btfsc	status,2,c
  2736  00360C  D7EC               	goto	l7816
  2737                           
  2738                           ; BSR set to: 0
  2739                           
  2740                           ; BSR set to: 0
  2741  00360E  D7EE               	goto	l7820
  2742  003610                     __end_of_main:
  2743                           	opt stack 0
  2744                           tblptru	equ	0xFF8
  2745                           tblptrh	equ	0xFF7
  2746                           tblptrl	equ	0xFF6
  2747                           tablat	equ	0xFF5
  2748                           postinc0	equ	0xFEE
  2749                           wreg	equ	0xFE8
  2750                           postdec1	equ	0xFE5
  2751                           fsr1l	equ	0xFE1
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function _stopSignals *****************
  2755 ;; Defined at:
  2756 ;;		line 60 in file "main.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    7
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_main
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text1
  2785  004390                     __ptext1:
  2786                           	opt stack 0
  2787  004390                     _stopSignals:
  2788                           	opt stack 23
  2789                           
  2790                           ;main.c: 61: LATA = 0x00;
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;incstack = 0
  2794  004390  0E00               	movlw	0
  2795  004392  6E89               	movwf	3977,c	;volatile
  2796                           
  2797                           ;main.c: 62: LATB = 0x00;
  2798  004394  0E00               	movlw	0
  2799  004396  6E8A               	movwf	3978,c	;volatile
  2800                           
  2801                           ;main.c: 63: LATC = 0x00;
  2802  004398  0E00               	movlw	0
  2803  00439A  6E8B               	movwf	3979,c	;volatile
  2804                           
  2805                           ;main.c: 64: LATD = 0x00;
  2806  00439C  0E00               	movlw	0
  2807  00439E  6E8C               	movwf	3980,c	;volatile
  2808                           
  2809                           ;main.c: 65: LATE = 0x00;
  2810  0043A0  0E00               	movlw	0
  2811  0043A2  6E8D               	movwf	3981,c	;volatile
  2812  0043A4  0012               	return		;funcret
  2813  0043A6                     __end_of_stopSignals:
  2814                           	opt stack 0
  2815                           tblptru	equ	0xFF8
  2816                           tblptrh	equ	0xFF7
  2817                           tblptrl	equ	0xFF6
  2818                           tablat	equ	0xFF5
  2819                           postinc0	equ	0xFEE
  2820                           wreg	equ	0xFE8
  2821                           postdec1	equ	0xFE5
  2822                           fsr1l	equ	0xFE1
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _sort *****************
  2826 ;; Defined at:
  2827 ;;		line 55 in file "sort.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:   12
  2848 ;; This function calls:
  2849 ;;		_Distribution
  2850 ;;		_ID
  2851 ;;		_Loading
  2852 ;; This function is called by:
  2853 ;;		_main
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text2
  2858  004316                     __ptext2:
  2859                           	opt stack 0
  2860  004316                     _sort:
  2861                           	opt stack 18
  2862                           
  2863                           ;sort.c: 56: if(machine_state == Sorting_state){
  2864                           
  2865                           ;incstack = 0
  2866  004316  0100               	movlb	0	; () banked
  2867  004318  05FC               	decf	_machine_state& (0+255),w,b
  2868  00431A  B4D8               	btfsc	status,2,c
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;sort.c: 57: Loading();
  2872  00431C  EC6F  F00C         	call	_Loading	;wreg free
  2873                           
  2874                           ;sort.c: 58: }
  2875                           ;sort.c: 59: if(machine_state == Sorting_state){
  2876  004320  0100               	movlb	0	; () banked
  2877  004322  05FC               	decf	_machine_state& (0+255),w,b
  2878  004324  B4D8               	btfsc	status,2,c
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;sort.c: 60: ID();
  2882  004326  EC60  F016         	call	_ID	;wreg free
  2883                           
  2884                           ;sort.c: 61: }
  2885                           ;sort.c: 62: if(machine_state == Sorting_state){
  2886  00432A  0100               	movlb	0	; () banked
  2887  00432C  05FC               	decf	_machine_state& (0+255),w,b
  2888  00432E  A4D8               	btfss	status,2,c
  2889  004330  0012               	return	
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;sort.c: 63: Distribution();
  2893  004332  EC22  F015         	call	_Distribution	;wreg free
  2894  004336  0012               	return	
  2895  004338                     __end_of_sort:
  2896                           	opt stack 0
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           status	equ	0xFD8
  2906                           
  2907 ;; *************** function _Loading *****************
  2908 ;; Defined at:
  2909 ;;		line 67 in file "sort.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  i               2   54[BANK0 ] int 
  2914 ;;  addr            2   51[BANK0 ] unsigned short 
  2915 ;;  byte1           1   53[BANK0 ] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;Total ram usage:        7 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:   11
  2932 ;; This function calls:
  2933 ;;		_EEPROM_read
  2934 ;;		_EEPROM_write
  2935 ;;		_delay_ms
  2936 ;;		_getIR
  2937 ;;		_initGlobalVars
  2938 ;;		_initServos
  2939 ;;		_initSortTimer
  2940 ;;		_lcdInst
  2941 ;;		_updateServoPosition
  2942 ;; This function is called by:
  2943 ;;		_sort
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text3
  2948  0018DE                     __ptext3:
  2949                           	opt stack 0
  2950  0018DE                     _Loading:
  2951                           	opt stack 18
  2952                           
  2953                           ;sort.c: 68: if(first){
  2954                           
  2955                           ;incstack = 0
  2956  0018DE  0100               	movlb	0	; () banked
  2957  0018E0  51E4               	movf	_first& (0+255),w,b
  2958  0018E2  0100               	movlb	0	; () banked
  2959  0018E4  11E5               	iorwf	(_first+1)& (0+255),w,b
  2960  0018E6  B4D8               	btfsc	status,2,c
  2961  0018E8  D127               	goto	l6246
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;sort.c: 69: initGlobalVars();
  2965  0018EA  ECC7  F01C         	call	_initGlobalVars	;wreg free
  2966                           
  2967                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2968  0018EE  0E01               	movlw	1
  2969  0018F0  ECF9  F021         	call	_lcdInst
  2970  0018F4  0E68               	movlw	104
  2971  0018F6  0100               	movlb	0	; () banked
  2972  0018F8  6FB1               	movwf	??_Loading& (0+255),b
  2973  0018FA  0EE4               	movlw	228
  2974  0018FC                     u6857:
  2975  0018FC  2EE8               	decfsz	wreg,f,c
  2976  0018FE  D7FE               	bra	u6857
  2977  001900  2FB1               	decfsz	??_Loading& (0+255),f,b
  2978  001902  D7FC               	bra	u6857
  2979  001904  F000               	nop	
  2980                           
  2981                           ;sort.c: 71: initSortTimer();
  2982  001906  EC17  F01A         	call	_initSortTimer	;wreg free
  2983                           
  2984                           ;sort.c: 76: sel = EEPROM_read(0);
  2985  00190A  0E00               	movlw	0
  2986  00190C  0100               	movlb	0	; () banked
  2987  00190E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2988  001910  0E00               	movlw	0
  2989  001912  6F80               	movwf	EEPROM_read@address& (0+255),b
  2990  001914  ECBC  F021         	call	_EEPROM_read	;wreg free
  2991  001918  0100               	movlb	0	; () banked
  2992  00191A  6FFD               	movwf	_sel& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2996  00191C  0100               	movlb	0	; () banked
  2997  00191E  51FD               	movf	_sel& (0+255),w,b
  2998  001920  0D0B               	mullw	11
  2999  001922  0E01               	movlw	1
  3000  001924  24F3               	addwf	prodl,w,c
  3001  001926  0100               	movlb	0	; () banked
  3002  001928  6FB3               	movwf	Loading@addr& (0+255),b
  3003  00192A  0E00               	movlw	0
  3004  00192C  20F4               	addwfc	prodh,w,c
  3005  00192E  0100               	movlb	0	; () banked
  3006  001930  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  3010  001932  0E7F               	movlw	127
  3011  001934  0100               	movlb	0	; () banked
  3012  001936  6FB5               	movwf	Loading@byte1& (0+255),b
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;sort.c: 79: EEPROM_write(addr, byte1);
  3016  001938  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3017  00193C  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3018  001940  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3019  001944  EC7B  F018         	call	_EEPROM_write	;wreg free
  3020                           
  3021                           ;sort.c: 82: LATAbits.LATA5 = 0;
  3022  001948  9A89               	bcf	3977,5,c	;volatile
  3023                           
  3024                           ;sort.c: 83: for(int i=0; i<46; i++){
  3025  00194A  0E00               	movlw	0
  3026  00194C  0100               	movlb	0	; () banked
  3027  00194E  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3028  001950  0E00               	movlw	0
  3029  001952  6FB6               	movwf	Loading@i& (0+255),b
  3030                           
  3031                           ; BSR set to: 0
  3032  001954  0100               	movlb	0	; () banked
  3033  001956  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3034  001958  D008               	goto	l6216
  3035  00195A  0100               	movlb	0	; () banked
  3036  00195C  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3037  00195E  E126               	bnz	l719
  3038  001960  0E2E               	movlw	46
  3039  001962  0100               	movlb	0	; () banked
  3040  001964  5DB6               	subwf	Loading@i& (0+255),w,b
  3041  001966  B0D8               	btfsc	status,0,c
  3042  001968  D021               	goto	l719
  3043  00196A                     l6216:
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;sort.c: 84: LATAbits.LATA5 = !LATAbits.LATA5;
  3047  00196A  BA89               	btfsc	3977,5,c	;volatile
  3048  00196C  D004               	goto	u4710
  3049  00196E  0100               	movlb	0	; () banked
  3050  001970  6BB1               	clrf	??_Loading& (0+255),b
  3051  001972  2BB1               	incf	??_Loading& (0+255),f,b
  3052  001974  D002               	goto	u4728
  3053  001976                     u4710:
  3054  001976  0100               	movlb	0	; () banked
  3055  001978  6BB1               	clrf	??_Loading& (0+255),b
  3056  00197A                     u4728:
  3057  00197A  0100               	movlb	0	; () banked
  3058  00197C  3BB1               	swapf	??_Loading& (0+255),f,b
  3059  00197E  47B1               	rlncf	??_Loading& (0+255),f,b
  3060  001980  5089               	movf	3977,w,c	;volatile
  3061  001982  0100               	movlb	0	; () banked
  3062  001984  19B1               	xorwf	??_Loading& (0+255),w,b
  3063  001986  0BDF               	andlw	-33
  3064  001988  19B1               	xorwf	??_Loading& (0+255),w,b
  3065  00198A  6E89               	movwf	3977,c	;volatile
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;sort.c: 85: delay_ms(45-i);
  3069  00198C  0100               	movlb	0	; () banked
  3070  00198E  51B6               	movf	Loading@i& (0+255),w,b
  3071  001990  0800               	sublw	0
  3072  001992  0F2D               	addlw	45
  3073  001994  EC19  F021         	call	_delay_ms
  3074  001998  0100               	movlb	0	; () banked
  3075  00199A  4BB6               	infsnz	Loading@i& (0+255),f,b
  3076  00199C  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3077                           
  3078                           ; BSR set to: 0
  3079  00199E  0100               	movlb	0	; () banked
  3080  0019A0  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3081  0019A2  D7E3               	goto	l6216
  3082  0019A4  0100               	movlb	0	; () banked
  3083  0019A6  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3084  0019A8  E101               	bnz	u4730
  3085  0019AA  D7DA               	goto	L1
  3086  0019AC                     u4730:
  3087  0019AC                     l719:
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;sort.c: 86: }
  3091                           ;sort.c: 87: LATAbits.LATA5 = 1;
  3092  0019AC  8A89               	bsf	3977,5,c	;volatile
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;sort.c: 90: initServos();
  3096  0019AE  ECEC  F01D         	call	_initServos	;wreg free
  3097                           
  3098                           ;sort.c: 91: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3099  0019B2  0E3D               	movlw	61
  3100  0019B4  0100               	movlb	0	; () banked
  3101  0019B6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3102  0019B8  0EE1               	movlw	225
  3103  0019BA  0100               	movlb	0	; () banked
  3104  0019BC  6FB1               	movwf	??_Loading& (0+255),b
  3105  0019BE  0E3F               	movlw	63
  3106  0019C0                     u6867:
  3107  0019C0  2EE8               	decfsz	wreg,f,c
  3108  0019C2  D7FE               	bra	u6867
  3109  0019C4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3110  0019C6  D7FC               	bra	u6867
  3111  0019C8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3112  0019CA  D7FA               	bra	u6867
  3113  0019CC  D000               	nop2	
  3114                           
  3115                           ;sort.c: 92: updateServoPosition(500, 1);
  3116  0019CE  0E01               	movlw	1
  3117  0019D0  0100               	movlb	0	; () banked
  3118  0019D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3119  0019D4  0EF4               	movlw	244
  3120  0019D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3121  0019D8  0E00               	movlw	0
  3122  0019DA  0100               	movlb	0	; () banked
  3123  0019DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3124  0019DE  0E01               	movlw	1
  3125  0019E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3126  0019E2  EC53  F01C         	call	_updateServoPosition	;wreg free
  3127                           
  3128                           ;sort.c: 93: updateServoPosition(2000, 3);
  3129  0019E6  0E07               	movlw	7
  3130  0019E8  0100               	movlb	0	; () banked
  3131  0019EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3132  0019EC  0ED0               	movlw	208
  3133  0019EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3134  0019F0  0E00               	movlw	0
  3135  0019F2  0100               	movlb	0	; () banked
  3136  0019F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3137  0019F6  0E03               	movlw	3
  3138  0019F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3139  0019FA  EC53  F01C         	call	_updateServoPosition	;wreg free
  3140                           
  3141                           ;sort.c: 94: _delay((unsigned long)((750)*(32000000/4000.0)));
  3142  0019FE  0E1F               	movlw	31
  3143  001A00  0100               	movlb	0	; () banked
  3144  001A02  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3145  001A04  0E71               	movlw	113
  3146  001A06  0100               	movlb	0	; () banked
  3147  001A08  6FB1               	movwf	??_Loading& (0+255),b
  3148  001A0A  0E1E               	movlw	30
  3149  001A0C                     u6877:
  3150  001A0C  2EE8               	decfsz	wreg,f,c
  3151  001A0E  D7FE               	bra	u6877
  3152  001A10  2FB1               	decfsz	??_Loading& (0+255),f,b
  3153  001A12  D7FC               	bra	u6877
  3154  001A14  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3155  001A16  D7FA               	bra	u6877
  3156  001A18  F000               	nop	
  3157                           
  3158                           ;sort.c: 95: updateServoPosition(1250, 3);
  3159  001A1A  0E04               	movlw	4
  3160  001A1C  0100               	movlb	0	; () banked
  3161  001A1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3162  001A20  0EE2               	movlw	226
  3163  001A22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3164  001A24  0E00               	movlw	0
  3165  001A26  0100               	movlb	0	; () banked
  3166  001A28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3167  001A2A  0E03               	movlw	3
  3168  001A2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3169  001A2E  EC53  F01C         	call	_updateServoPosition	;wreg free
  3170                           
  3171                           ;sort.c: 96: _delay((unsigned long)((750)*(32000000/4000.0)));
  3172  001A32  0E1F               	movlw	31
  3173  001A34  0100               	movlb	0	; () banked
  3174  001A36  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3175  001A38  0E71               	movlw	113
  3176  001A3A  0100               	movlb	0	; () banked
  3177  001A3C  6FB1               	movwf	??_Loading& (0+255),b
  3178  001A3E  0E1E               	movlw	30
  3179  001A40                     u6887:
  3180  001A40  2EE8               	decfsz	wreg,f,c
  3181  001A42  D7FE               	bra	u6887
  3182  001A44  2FB1               	decfsz	??_Loading& (0+255),f,b
  3183  001A46  D7FC               	bra	u6887
  3184  001A48  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3185  001A4A  D7FA               	bra	u6887
  3186  001A4C  F000               	nop	
  3187                           
  3188                           ;sort.c: 97: updateServoPosition(700, 1);
  3189  001A4E  0E02               	movlw	2
  3190  001A50  0100               	movlb	0	; () banked
  3191  001A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3192  001A54  0EBC               	movlw	188
  3193  001A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3194  001A58  0E00               	movlw	0
  3195  001A5A  0100               	movlb	0	; () banked
  3196  001A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3197  001A5E  0E01               	movlw	1
  3198  001A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3199  001A62  EC53  F01C         	call	_updateServoPosition	;wreg free
  3200                           
  3201                           ;sort.c: 98: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3202  001A66  0E3D               	movlw	61
  3203  001A68  0100               	movlb	0	; () banked
  3204  001A6A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3205  001A6C  0EE1               	movlw	225
  3206  001A6E  0100               	movlb	0	; () banked
  3207  001A70  6FB1               	movwf	??_Loading& (0+255),b
  3208  001A72  0E3F               	movlw	63
  3209  001A74                     u6897:
  3210  001A74  2EE8               	decfsz	wreg,f,c
  3211  001A76  D7FE               	bra	u6897
  3212  001A78  2FB1               	decfsz	??_Loading& (0+255),f,b
  3213  001A7A  D7FC               	bra	u6897
  3214  001A7C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3215  001A7E  D7FA               	bra	u6897
  3216  001A80  D000               	nop2	
  3217                           
  3218                           ;sort.c: 99: updateServoPosition(1700, 1);
  3219  001A82  0E06               	movlw	6
  3220  001A84  0100               	movlb	0	; () banked
  3221  001A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3222  001A88  0EA4               	movlw	164
  3223  001A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3224  001A8C  0E00               	movlw	0
  3225  001A8E  0100               	movlb	0	; () banked
  3226  001A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3227  001A92  0E01               	movlw	1
  3228  001A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3229  001A96  EC53  F01C         	call	_updateServoPosition	;wreg free
  3230                           
  3231                           ;sort.c: 100: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3232  001A9A  0E3D               	movlw	61
  3233  001A9C  0100               	movlb	0	; () banked
  3234  001A9E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3235  001AA0  0EE1               	movlw	225
  3236  001AA2  0100               	movlb	0	; () banked
  3237  001AA4  6FB1               	movwf	??_Loading& (0+255),b
  3238  001AA6  0E3F               	movlw	63
  3239  001AA8                     u6907:
  3240  001AA8  2EE8               	decfsz	wreg,f,c
  3241  001AAA  D7FE               	bra	u6907
  3242  001AAC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3243  001AAE  D7FC               	bra	u6907
  3244  001AB0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3245  001AB2  D7FA               	bra	u6907
  3246  001AB4  D000               	nop2	
  3247                           
  3248                           ;sort.c: 101: updateServoPosition(2000, 1);
  3249  001AB6  0E07               	movlw	7
  3250  001AB8  0100               	movlb	0	; () banked
  3251  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3252  001ABC  0ED0               	movlw	208
  3253  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3254  001AC0  0E00               	movlw	0
  3255  001AC2  0100               	movlb	0	; () banked
  3256  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3257  001AC6  0E01               	movlw	1
  3258  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3259  001ACA  EC53  F01C         	call	_updateServoPosition	;wreg free
  3260                           
  3261                           ;sort.c: 102: updateServoPosition(2000, 3);
  3262  001ACE  0E07               	movlw	7
  3263  001AD0  0100               	movlb	0	; () banked
  3264  001AD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3265  001AD4  0ED0               	movlw	208
  3266  001AD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3267  001AD8  0E00               	movlw	0
  3268  001ADA  0100               	movlb	0	; () banked
  3269  001ADC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3270  001ADE  0E03               	movlw	3
  3271  001AE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3272  001AE2  EC53  F01C         	call	_updateServoPosition	;wreg free
  3273                           
  3274                           ;sort.c: 103: _delay((unsigned long)((750)*(32000000/4000.0)));
  3275  001AE6  0E1F               	movlw	31
  3276  001AE8  0100               	movlb	0	; () banked
  3277  001AEA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3278  001AEC  0E71               	movlw	113
  3279  001AEE  0100               	movlb	0	; () banked
  3280  001AF0  6FB1               	movwf	??_Loading& (0+255),b
  3281  001AF2  0E1E               	movlw	30
  3282  001AF4                     u6917:
  3283  001AF4  2EE8               	decfsz	wreg,f,c
  3284  001AF6  D7FE               	bra	u6917
  3285  001AF8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3286  001AFA  D7FC               	bra	u6917
  3287  001AFC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3288  001AFE  D7FA               	bra	u6917
  3289  001B00  F000               	nop	
  3290                           
  3291                           ;sort.c: 104: updateServoPosition(1250, 3);
  3292  001B02  0E04               	movlw	4
  3293  001B04  0100               	movlb	0	; () banked
  3294  001B06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3295  001B08  0EE2               	movlw	226
  3296  001B0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3297  001B0C  0E00               	movlw	0
  3298  001B0E  0100               	movlb	0	; () banked
  3299  001B10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3300  001B12  0E03               	movlw	3
  3301  001B14  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3302  001B16  EC53  F01C         	call	_updateServoPosition	;wreg free
  3303                           
  3304                           ;sort.c: 105: _delay((unsigned long)((750)*(32000000/4000.0)));
  3305  001B1A  0E1F               	movlw	31
  3306  001B1C  0100               	movlb	0	; () banked
  3307  001B1E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3308  001B20  0E71               	movlw	113
  3309  001B22  0100               	movlb	0	; () banked
  3310  001B24  6FB1               	movwf	??_Loading& (0+255),b
  3311  001B26  0E1E               	movlw	30
  3312  001B28                     u6927:
  3313  001B28  2EE8               	decfsz	wreg,f,c
  3314  001B2A  D7FE               	bra	u6927
  3315  001B2C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3316  001B2E  D7FC               	bra	u6927
  3317  001B30  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3318  001B32  D7FA               	bra	u6927
  3319  001B34  F000               	nop	
  3320                           
  3321                           ;sort.c: 106: }
  3322  001B36  0012               	return	
  3323  001B38                     l6246:
  3324                           
  3325                           ;sort.c: 107: else{
  3326                           ;sort.c: 110: if(!f_loadingNewCan){
  3327  001B38  0100               	movlb	0	; () banked
  3328  001B3A  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3329  001B3C  0100               	movlb	0	; () banked
  3330  001B3E  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3331  001B40  A4D8               	btfss	status,2,c
  3332  001B42  D017               	goto	l6262
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;sort.c: 112: getIR();
  3336  001B44  EC94  F01E         	call	_getIR	;wreg free
  3337                           
  3338                           ;sort.c: 114: if(!f_loadingNewCan){
  3339  001B48  0100               	movlb	0	; () banked
  3340  001B4A  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3341  001B4C  0100               	movlb	0	; () banked
  3342  001B4E  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3343  001B50  B4D8               	btfsc	status,2,c
  3344  001B52  0012               	return	
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;sort.c: 118: else{
  3348                           ;sort.c: 119: count_total++;
  3349                           
  3350                           ; BSR set to: 0
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;sort.c: 116: }
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;sort.c: 115: return;
  3357  001B54  0100               	movlb	0	; () banked
  3358  001B56  4BFE               	infsnz	_count_total& (0+255),f,b
  3359  001B58  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;sort.c: 120: if(count_total == 12){
  3363  001B5A  0E0C               	movlw	12
  3364  001B5C  0100               	movlb	0	; () banked
  3365  001B5E  19FE               	xorwf	_count_total& (0+255),w,b
  3366  001B60  0100               	movlb	0	; () banked
  3367  001B62  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3368  001B64  A4D8               	btfss	status,2,c
  3369  001B66  0012               	return	
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;sort.c: 121: f_lastCan = 1;
  3373  001B68  0E00               	movlw	0
  3374  001B6A  6E74               	movwf	_f_lastCan+1,c
  3375  001B6C  0E01               	movlw	1
  3376  001B6E  6E73               	movwf	_f_lastCan,c
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;sort.c: 122: }
  3380                           ;sort.c: 123: }
  3381                           ;sort.c: 124: }
  3382                           
  3383                           ; BSR set to: 0
  3384  001B70  0012               	return	
  3385  001B72                     l6262:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;sort.c: 127: else if(f_ID_receive){
  3389  001B72  506B               	movf	_f_ID_receive,w,c
  3390  001B74  106C               	iorwf	_f_ID_receive+1,w,c
  3391  001B76  B4D8               	btfsc	status,2,c
  3392  001B78  0012               	return	
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;sort.c: 128: f_loadingNewCan = 0;
  3396  001B7A  0E00               	movlw	0
  3397  001B7C  0100               	movlb	0	; () banked
  3398  001B7E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3399  001B80  0E00               	movlw	0
  3400  001B82  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;sort.c: 129: LATAbits.LATA4 = 1;
  3404  001B84  8889               	bsf	3977,4,c	;volatile
  3405                           
  3406                           ;sort.c: 130: f_can_coming_to_ID = 1;
  3407  001B86  0E00               	movlw	0
  3408  001B88  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3409  001B8A  0E01               	movlw	1
  3410  001B8C  6E6D               	movwf	_f_can_coming_to_ID,c
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;sort.c: 131: _delay((unsigned long)((300)*(32000000/4000.0)));
  3414  001B8E  0E0D               	movlw	13
  3415  001B90  0100               	movlb	0	; () banked
  3416  001B92  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3417  001B94  0E2D               	movlw	45
  3418  001B96  0100               	movlb	0	; () banked
  3419  001B98  6FB1               	movwf	??_Loading& (0+255),b
  3420  001B9A  0ED7               	movlw	215
  3421  001B9C                     u6937:
  3422  001B9C  2EE8               	decfsz	wreg,f,c
  3423  001B9E  D7FE               	bra	u6937
  3424  001BA0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3425  001BA2  D7FC               	bra	u6937
  3426  001BA4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3427  001BA6  D7FA               	bra	u6937
  3428  001BA8  D000               	nop2	
  3429                           
  3430                           ;sort.c: 132: LATAbits.LATA4 = 0;
  3431  001BAA  9889               	bcf	3977,4,c	;volatile
  3432  001BAC  0012               	return	
  3433  001BAE                     __end_of_Loading:
  3434                           	opt stack 0
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           prodh	equ	0xFF4
  3440                           prodl	equ	0xFF3
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postdec1	equ	0xFE5
  3444                           fsr1l	equ	0xFE1
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _initSortTimer *****************
  3448 ;; Defined at:
  3449 ;;		line 248 in file "sort.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  i               2    8[BANK0 ] int 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;Total ram usage:        5 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:   10
  3470 ;; This function calls:
  3471 ;;		_getRTC
  3472 ;; This function is called by:
  3473 ;;		_Loading
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text4
  3478  00342E                     __ptext4:
  3479                           	opt stack 0
  3480  00342E                     _initSortTimer:
  3481                           	opt stack 18
  3482                           
  3483                           ;sort.c: 250: getRTC();
  3484                           
  3485                           ;incstack = 0
  3486  00342E  EC92  F01B         	call	_getRTC	;wreg free
  3487                           
  3488                           ;sort.c: 251: for(int i = 0; i < 7; i++){
  3489  003432  0E00               	movlw	0
  3490  003434  0100               	movlb	0	; () banked
  3491  003436  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3492  003438  0E00               	movlw	0
  3493  00343A  6F88               	movwf	initSortTimer@i& (0+255),b
  3494  00343C                     l5824:
  3495                           
  3496                           ; BSR set to: 0
  3497  00343C  0100               	movlb	0	; () banked
  3498  00343E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3499  003440  D008               	goto	l5828
  3500  003442  0100               	movlb	0	; () banked
  3501  003444  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3502  003446  E140               	bnz	l5834
  3503  003448  0E07               	movlw	7
  3504  00344A  0100               	movlb	0	; () banked
  3505  00344C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3506  00344E  B0D8               	btfsc	status,0,c
  3507  003450  D03B               	goto	l5834
  3508  003452                     l5828:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;sort.c: 252: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3512  003452  0E24               	movlw	low _time
  3513  003454  0100               	movlb	0	; () banked
  3514  003456  2588               	addwf	initSortTimer@i& (0+255),w,b
  3515  003458  6ED9               	movwf	fsr2l,c
  3516  00345A  0E01               	movlw	high _time
  3517  00345C  0100               	movlb	0	; () banked
  3518  00345E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3519  003460  6EDA               	movwf	fsr2h,c
  3520  003462  50DF               	movf	indf2,w,c
  3521  003464  0100               	movlb	0	; () banked
  3522  003466  6F85               	movwf	??_initSortTimer& (0+255),b
  3523  003468  0100               	movlb	0	; () banked
  3524  00346A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3525  00346C  0E0F               	movlw	15
  3526  00346E  1785               	andwf	??_initSortTimer& (0+255),f,b
  3527  003470  0E0F               	movlw	15
  3528  003472  0100               	movlb	0	; () banked
  3529  003474  1785               	andwf	??_initSortTimer& (0+255),f,b
  3530  003476  0100               	movlb	0	; () banked
  3531  003478  5185               	movf	??_initSortTimer& (0+255),w,b
  3532  00347A  0D0A               	mullw	10
  3533  00347C  0E24               	movlw	low _time
  3534  00347E  0100               	movlb	0	; () banked
  3535  003480  2588               	addwf	initSortTimer@i& (0+255),w,b
  3536  003482  6ED9               	movwf	fsr2l,c
  3537  003484  0E01               	movlw	high _time
  3538  003486  0100               	movlb	0	; () banked
  3539  003488  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3540  00348A  6EDA               	movwf	fsr2h,c
  3541  00348C  50DF               	movf	indf2,w,c
  3542  00348E  0B0F               	andlw	15
  3543  003490  0100               	movlb	0	; () banked
  3544  003492  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3545  003494  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3546  003496  50F3               	movf	prodl,w,c
  3547  003498  0100               	movlb	0	; () banked
  3548  00349A  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3549  00349C  50F4               	movf	prodh,w,c
  3550  00349E  0100               	movlb	0	; () banked
  3551  0034A0  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3552  0034A2  90D8               	bcf	status,0,c
  3553  0034A4  0100               	movlb	0	; () banked
  3554  0034A6  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3555  0034A8  6ED9               	movwf	fsr2l,c
  3556  0034AA  0100               	movlb	0	; () banked
  3557  0034AC  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3558  0034AE  6EDA               	movwf	fsr2h,c
  3559  0034B0  0E0E               	movlw	low _startTime
  3560  0034B2  26D9               	addwf	fsr2l,f,c
  3561  0034B4  0E01               	movlw	high _startTime
  3562  0034B6  22DA               	addwfc	fsr2h,f,c
  3563  0034B8  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3564  0034BC  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3565                           
  3566                           ; BSR set to: 0
  3567  0034C0  0100               	movlb	0	; () banked
  3568  0034C2  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3569  0034C4  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3570  0034C6  D7BA               	goto	l5824
  3571  0034C8                     l5834:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;sort.c: 253: }
  3575                           ;sort.c: 255: T0CON = 0b00010111;
  3576  0034C8  0E17               	movlw	23
  3577  0034CA  6ED5               	movwf	4053,c	;volatile
  3578                           
  3579                           ;sort.c: 264: TMR0H = 0b10000101;
  3580  0034CC  0E85               	movlw	133
  3581  0034CE  6ED7               	movwf	4055,c	;volatile
  3582                           
  3583                           ;sort.c: 265: TMR0L = 0b11101110;
  3584  0034D0  0EEE               	movlw	238
  3585  0034D2  6ED6               	movwf	4054,c	;volatile
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;sort.c: 266: TMR0ON = 1;
  3589  0034D4  8ED5               	bsf	4053,7,c	;volatile
  3590                           
  3591                           ; BSR set to: 0
  3592  0034D6  0012               	return		;funcret
  3593  0034D8                     __end_of_initSortTimer:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           postdec1	equ	0xFE5
  3604                           fsr1l	equ	0xFE1
  3605                           indf2	equ	0xFDF
  3606                           postinc2	equ	0xFDE
  3607                           postdec2	equ	0xFDD
  3608                           fsr2h	equ	0xFDA
  3609                           fsr2l	equ	0xFD9
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function _initServos *****************
  3613 ;; Defined at:
  3614 ;;		line 268 in file "sort.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		wreg, status,2, status,0, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;Total ram usage:        1 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    8
  3635 ;; This function calls:
  3636 ;;		_updateServoPosition
  3637 ;; This function is called by:
  3638 ;;		_Loading
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text5
  3643  003BD8                     __ptext5:
  3644                           	opt stack 0
  3645  003BD8                     _initServos:
  3646                           	opt stack 20
  3647                           
  3648                           ;sort.c: 269: updateServoPosition(1250, 1);
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;incstack = 0
  3652  003BD8  0E04               	movlw	4
  3653  003BDA  0100               	movlb	0	; () banked
  3654  003BDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3655  003BDE  0EE2               	movlw	226
  3656  003BE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3657  003BE2  0E00               	movlw	0
  3658  003BE4  0100               	movlb	0	; () banked
  3659  003BE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3660  003BE8  0E01               	movlw	1
  3661  003BEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3662  003BEC  EC53  F01C         	call	_updateServoPosition	;wreg free
  3663                           
  3664                           ;sort.c: 270: updateServoPosition(1250, 3);
  3665  003BF0  0E04               	movlw	4
  3666  003BF2  0100               	movlb	0	; () banked
  3667  003BF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3668  003BF6  0EE2               	movlw	226
  3669  003BF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3670  003BFA  0E00               	movlw	0
  3671  003BFC  0100               	movlb	0	; () banked
  3672  003BFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3673  003C00  0E03               	movlw	3
  3674  003C02  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3675  003C04  EC53  F01C         	call	_updateServoPosition	;wreg free
  3676                           
  3677                           ;sort.c: 271: TMR1ON = 1;
  3678  003C08  80CD               	bsf	4045,0,c	;volatile
  3679                           
  3680                           ;sort.c: 272: was_low_1 = 0;
  3681  003C0A  0E00               	movlw	0
  3682  003C0C  6E7A               	movwf	_was_low_1+1,c	;volatile
  3683  003C0E  0E00               	movlw	0
  3684  003C10  6E79               	movwf	_was_low_1,c	;volatile
  3685                           
  3686                           ;sort.c: 273: _delay((unsigned long)((5)*(32000000/4000.0)));
  3687  003C12  0E34               	movlw	52
  3688  003C14  0100               	movlb	0	; () banked
  3689  003C16  6F88               	movwf	??_initServos& (0+255),b
  3690  003C18  0EF1               	movlw	241
  3691  003C1A                     u6947:
  3692  003C1A  2EE8               	decfsz	wreg,f,c
  3693  003C1C  D7FE               	bra	u6947
  3694  003C1E  2F88               	decfsz	??_initServos& (0+255),f,b
  3695  003C20  D7FC               	bra	u6947
  3696  003C22  D000               	nop2	
  3697                           
  3698                           ;sort.c: 274: TMR3ON = 1;
  3699  003C24  80B1               	bsf	4017,0,c	;volatile
  3700                           
  3701                           ;sort.c: 275: was_low_3 = 0;
  3702  003C26  0E00               	movlw	0
  3703  003C28  6E7C               	movwf	_was_low_3+1,c	;volatile
  3704  003C2A  0E00               	movlw	0
  3705  003C2C  6E7B               	movwf	_was_low_3,c	;volatile
  3706                           
  3707                           ;sort.c: 276: LATCbits.LATC0 = 0;
  3708  003C2E  908B               	bcf	3979,0,c	;volatile
  3709  003C30  0012               	return		;funcret
  3710  003C32                     __end_of_initServos:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           postinc0	equ	0xFEE
  3719                           wreg	equ	0xFE8
  3720                           postdec1	equ	0xFE5
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729 ;; *************** function _initGlobalVars *****************
  3730 ;; Defined at:
  3731 ;;		line 229 in file "sort.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, status,2
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;Total ram usage:        0 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    7
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_Loading
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text6
  3760  00398E                     __ptext6:
  3761                           	opt stack 0
  3762  00398E                     _initGlobalVars:
  3763                           	opt stack 21
  3764                           
  3765                           ;sort.c: 231: first = 0;
  3766                           
  3767                           ;incstack = 0
  3768  00398E  0E00               	movlw	0
  3769  003990  0100               	movlb	0	; () banked
  3770  003992  6FE5               	movwf	(_first+1)& (0+255),b
  3771  003994  0E00               	movlw	0
  3772  003996  6FE4               	movwf	_first& (0+255),b
  3773                           
  3774                           ;sort.c: 234: f_loadingNewCan = 0;
  3775  003998  0E00               	movlw	0
  3776  00399A  0100               	movlb	0	; () banked
  3777  00399C  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3778  00399E  0E00               	movlw	0
  3779  0039A0  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3780                           
  3781                           ;sort.c: 235: f_lastCan = 0;
  3782  0039A2  0E00               	movlw	0
  3783  0039A4  6E74               	movwf	_f_lastCan+1,c
  3784  0039A6  0E00               	movlw	0
  3785  0039A8  6E73               	movwf	_f_lastCan,c
  3786                           
  3787                           ;sort.c: 236: f_ID_receive = 1;
  3788  0039AA  0E00               	movlw	0
  3789  0039AC  6E6C               	movwf	_f_ID_receive+1,c
  3790  0039AE  0E01               	movlw	1
  3791  0039B0  6E6B               	movwf	_f_ID_receive,c
  3792                           
  3793                           ;sort.c: 237: f_can_coming_to_ID = 0;
  3794  0039B2  0E00               	movlw	0
  3795  0039B4  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3796  0039B6  0E00               	movlw	0
  3797  0039B8  6E6D               	movwf	_f_can_coming_to_ID,c
  3798                           
  3799                           ;sort.c: 238: f_can_coming_to_distribution = 0;
  3800  0039BA  0E00               	movlw	0
  3801  0039BC  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3802  0039BE  0E00               	movlw	0
  3803  0039C0  6E6F               	movwf	_f_can_coming_to_distribution,c
  3804                           
  3805                           ;sort.c: 239: f_can_distributed = 0;
  3806  0039C2  0E00               	movlw	0
  3807  0039C4  6E72               	movwf	_f_can_distributed+1,c
  3808  0039C6  0E00               	movlw	0
  3809  0039C8  6E71               	movwf	_f_can_distributed,c
  3810                           
  3811                           ;sort.c: 242: count_total = 0;
  3812  0039CA  0E00               	movlw	0
  3813  0039CC  0100               	movlb	0	; () banked
  3814  0039CE  6FFF               	movwf	(_count_total+1)& (0+255),b
  3815  0039D0  0E00               	movlw	0
  3816  0039D2  6FFE               	movwf	_count_total& (0+255),b
  3817                           
  3818                           ;sort.c: 243: count_pop_no_tab = 0;
  3819  0039D4  0E00               	movlw	0
  3820  0039D6  6E62               	movwf	_count_pop_no_tab+1,c
  3821  0039D8  0E00               	movlw	0
  3822  0039DA  6E61               	movwf	_count_pop_no_tab,c
  3823                           
  3824                           ;sort.c: 244: count_pop_w_tab = 0;
  3825  0039DC  0E00               	movlw	0
  3826  0039DE  6E64               	movwf	_count_pop_w_tab+1,c
  3827  0039E0  0E00               	movlw	0
  3828  0039E2  6E63               	movwf	_count_pop_w_tab,c
  3829                           
  3830                           ;sort.c: 245: count_can_w_lab = 0;
  3831  0039E4  0E00               	movlw	0
  3832  0039E6  6E60               	movwf	_count_can_w_lab+1,c
  3833  0039E8  0E00               	movlw	0
  3834  0039EA  6E5F               	movwf	_count_can_w_lab,c
  3835                           
  3836                           ;sort.c: 246: count_can_no_lab = 0;
  3837  0039EC  0E00               	movlw	0
  3838  0039EE  6E5E               	movwf	_count_can_no_lab+1,c
  3839  0039F0  0E00               	movlw	0
  3840  0039F2  6E5D               	movwf	_count_can_no_lab,c
  3841                           
  3842                           ; BSR set to: 0
  3843  0039F4  0012               	return		;funcret
  3844  0039F6                     __end_of_initGlobalVars:
  3845                           	opt stack 0
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           postinc0	equ	0xFEE
  3853                           wreg	equ	0xFE8
  3854                           postdec1	equ	0xFE5
  3855                           fsr1l	equ	0xFE1
  3856                           indf2	equ	0xFDF
  3857                           postinc2	equ	0xFDE
  3858                           postdec2	equ	0xFDD
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _getIR *****************
  3864 ;; Defined at:
  3865 ;;		line 305 in file "sort.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;		None
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;		None
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;Total ram usage:        2 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    9
  3886 ;; This function calls:
  3887 ;;		_readIR
  3888 ;; This function is called by:
  3889 ;;		_Loading
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text7
  3894  003D28                     __ptext7:
  3895                           	opt stack 0
  3896  003D28                     _getIR:
  3897                           	opt stack 19
  3898                           
  3899                           ;sort.c: 306: readIR();
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;incstack = 0
  3903  003D28  ECE1  F01E         	call	_readIR	;wreg free
  3904                           
  3905                           ;sort.c: 307: if(IR_signal==1){
  3906  003D2C  0100               	movlb	0	; () banked
  3907  003D2E  05DA               	decf	_IR_signal& (0+255),w,b
  3908  003D30  0100               	movlb	0	; () banked
  3909  003D32  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3910  003D34  A4D8               	btfss	status,2,c
  3911  003D36  0012               	return	
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;sort.c: 308: _delay((unsigned long)((100)*(32000000/4000.0)));
  3915  003D38  0E05               	movlw	5
  3916  003D3A  0100               	movlb	0	; () banked
  3917  003D3C  6F87               	movwf	(??_getIR+1)& (0+255),b
  3918  003D3E  0E0F               	movlw	15
  3919  003D40  0100               	movlb	0	; () banked
  3920  003D42  6F86               	movwf	??_getIR& (0+255),b
  3921  003D44  0EF1               	movlw	241
  3922  003D46                     u6957:
  3923  003D46  2EE8               	decfsz	wreg,f,c
  3924  003D48  D7FE               	bra	u6957
  3925  003D4A  2F86               	decfsz	??_getIR& (0+255),f,b
  3926  003D4C  D7FC               	bra	u6957
  3927  003D4E  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3928  003D50  D7FA               	bra	u6957
  3929                           
  3930                           ;sort.c: 309: if(IR_signal==1){
  3931  003D52  0100               	movlb	0	; () banked
  3932  003D54  05DA               	decf	_IR_signal& (0+255),w,b
  3933  003D56  0100               	movlb	0	; () banked
  3934  003D58  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3935  003D5A  A4D8               	btfss	status,2,c
  3936  003D5C  D006               	goto	l5922
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;sort.c: 310: f_loadingNewCan = 1;
  3940  003D5E  0E00               	movlw	0
  3941  003D60  0100               	movlb	0	; () banked
  3942  003D62  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3943  003D64  0E01               	movlw	1
  3944  003D66  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3945                           
  3946                           ;sort.c: 311: }
  3947  003D68  0012               	return	
  3948  003D6A                     l5922:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;sort.c: 312: else{
  3952                           ;sort.c: 313: f_loadingNewCan = 0;
  3953  003D6A  0E00               	movlw	0
  3954  003D6C  0100               	movlb	0	; () banked
  3955  003D6E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3956  003D70  0E00               	movlw	0
  3957  003D72  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3958                           
  3959                           ; BSR set to: 0
  3960  003D74  0012               	return	
  3961  003D76                     __end_of_getIR:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           tblptrh	equ	0xFF7
  3965                           tblptrl	equ	0xFF6
  3966                           tablat	equ	0xFF5
  3967                           prodh	equ	0xFF4
  3968                           prodl	equ	0xFF3
  3969                           postinc0	equ	0xFEE
  3970                           wreg	equ	0xFE8
  3971                           postdec1	equ	0xFE5
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           postdec2	equ	0xFDD
  3976                           fsr2h	equ	0xFDA
  3977                           fsr2l	equ	0xFD9
  3978                           status	equ	0xFD8
  3979                           
  3980 ;; *************** function _delay_ms *****************
  3981 ;; Defined at:
  3982 ;;		line 330 in file "sort.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  milliseconds    1    wreg     unsigned char 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;Total ram usage:        2 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    7
  4003 ;; This function calls:
  4004 ;;		Nothing
  4005 ;; This function is called by:
  4006 ;;		_Loading
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           	psect	text8
  4011  004232                     __ptext8:
  4012                           	opt stack 0
  4013  004232                     _delay_ms:
  4014                           	opt stack 21
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;incstack = 0
  4018                           ;delay_ms@milliseconds stored from wreg
  4019  004232  0100               	movlb	0	; () banked
  4020  004234  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4021                           
  4022                           ;sort.c: 331: while(milliseconds > 0)
  4023  004236  D00B               	goto	l5896
  4024  004238                     l5892:
  4025                           
  4026                           ;sort.c: 332: {
  4027                           ;sort.c: 333: milliseconds--;
  4028  004238  0100               	movlb	0	; () banked
  4029  00423A  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;sort.c: 334: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4033  00423C  0E0B               	movlw	11
  4034  00423E  0100               	movlb	0	; () banked
  4035  004240  6F80               	movwf	??_delay_ms& (0+255),b
  4036  004242  0E47               	movlw	71
  4037  004244                     u6967:
  4038  004244  2EE8               	decfsz	wreg,f,c
  4039  004246  D7FE               	bra	u6967
  4040  004248  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4041  00424A  D7FC               	bra	u6967
  4042  00424C  D000               	nop2	
  4043  00424E                     l5896:
  4044  00424E  0100               	movlb	0	; () banked
  4045  004250  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4046  004252  0100               	movlb	0	; () banked
  4047  004254  B4D8               	btfsc	status,2,c
  4048  004256  0012               	return	
  4049  004258  D7EF               	goto	l5892
  4050  00425A                     __end_of_delay_ms:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           postinc0	equ	0xFEE
  4059                           wreg	equ	0xFE8
  4060                           postdec1	equ	0xFE5
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function _ID *****************
  4070 ;; Defined at:
  4071 ;;		line 136 in file "sort.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;		None
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0, cstack
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;Total ram usage:        8 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    9
  4092 ;; This function calls:
  4093 ;;		_readMAG
  4094 ;; This function is called by:
  4095 ;;		_sort
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text9
  4100  002CC0                     __ptext9:
  4101                           	opt stack 0
  4102  002CC0                     _ID:
  4103                           	opt stack 20
  4104                           
  4105                           ;sort.c: 137: if(f_can_coming_to_ID){
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;incstack = 0
  4109  002CC0  506D               	movf	_f_can_coming_to_ID,w,c
  4110  002CC2  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  4111  002CC4  B4D8               	btfsc	status,2,c
  4112  002CC6  0012               	return	
  4113                           
  4114                           ;sort.c: 139: _delay((unsigned long)((500)*(32000000/4000.0)));
  4115  002CC8  0E15               	movlw	21
  4116  002CCA  0100               	movlb	0	; () banked
  4117  002CCC  6F87               	movwf	(??_ID+1)& (0+255),b
  4118  002CCE  0E4B               	movlw	75
  4119  002CD0  0100               	movlb	0	; () banked
  4120  002CD2  6F86               	movwf	??_ID& (0+255),b
  4121  002CD4  0EBE               	movlw	190
  4122  002CD6                     u6977:
  4123  002CD6  2EE8               	decfsz	wreg,f,c
  4124  002CD8  D7FE               	bra	u6977
  4125  002CDA  2F86               	decfsz	??_ID& (0+255),f,b
  4126  002CDC  D7FC               	bra	u6977
  4127  002CDE  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4128  002CE0  D7FA               	bra	u6977
  4129  002CE2  F000               	nop	
  4130                           
  4131                           ;sort.c: 144: int sensor_outputs[3];
  4132                           ;sort.c: 148: sensor_outputs[0] = PORTAbits.RA2;
  4133  002CE4  A480               	btfss	3968,2,c	;volatile
  4134  002CE6  D004               	goto	u4790
  4135  002CE8  0100               	movlb	0	; () banked
  4136  002CEA  6B86               	clrf	??_ID& (0+255),b
  4137  002CEC  2B86               	incf	??_ID& (0+255),f,b
  4138  002CEE  D002               	goto	u4798
  4139  002CF0                     u4790:
  4140  002CF0  0100               	movlb	0	; () banked
  4141  002CF2  6B86               	clrf	??_ID& (0+255),b
  4142  002CF4                     u4798:
  4143  002CF4  0100               	movlb	0	; () banked
  4144  002CF6  5186               	movf	??_ID& (0+255),w,b
  4145  002CF8  0100               	movlb	0	; () banked
  4146  002CFA  6F88               	movwf	ID@sensor_outputs& (0+255),b
  4147  002CFC  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;sort.c: 150: if(!sensor_outputs[0]){
  4151  002CFE  0100               	movlb	0	; () banked
  4152  002D00  5188               	movf	ID@sensor_outputs& (0+255),w,b
  4153  002D02  0100               	movlb	0	; () banked
  4154  002D04  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4155  002D06  A4D8               	btfss	status,2,c
  4156  002D08  D029               	goto	l6294
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;sort.c: 151: readMAG();
  4160  002D0A  ECBB  F01E         	call	_readMAG	;wreg free
  4161                           
  4162                           ;sort.c: 152: sensor_outputs[1] = MAG_signal;
  4163  002D0E  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  4164  002D12  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4165                           
  4166                           ;sort.c: 153: if(!sensor_outputs[1]){
  4167  002D16  0100               	movlb	0	; () banked
  4168  002D18  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4169  002D1A  0100               	movlb	0	; () banked
  4170  002D1C  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4171  002D1E  A4D8               	btfss	status,2,c
  4172  002D20  D01D               	goto	l6294
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;sort.c: 154: LATAbits.LATA3 = 1;
  4176  002D22  8689               	bsf	3977,3,c	;volatile
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;sort.c: 156: _delay((unsigned long)((300)*(32000000/4000.0)));
  4180  002D24  0E0D               	movlw	13
  4181  002D26  0100               	movlb	0	; () banked
  4182  002D28  6F87               	movwf	(??_ID+1)& (0+255),b
  4183  002D2A  0E2D               	movlw	45
  4184  002D2C  0100               	movlb	0	; () banked
  4185  002D2E  6F86               	movwf	??_ID& (0+255),b
  4186  002D30  0ED7               	movlw	215
  4187  002D32                     u6987:
  4188  002D32  2EE8               	decfsz	wreg,f,c
  4189  002D34  D7FE               	bra	u6987
  4190  002D36  2F86               	decfsz	??_ID& (0+255),f,b
  4191  002D38  D7FC               	bra	u6987
  4192  002D3A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4193  002D3C  D7FA               	bra	u6987
  4194  002D3E  D000               	nop2	
  4195                           
  4196                           ;sort.c: 157: sensor_outputs[2] = PORTAbits.RA2;
  4197  002D40  A480               	btfss	3968,2,c	;volatile
  4198  002D42  D004               	goto	u4820
  4199  002D44  0100               	movlb	0	; () banked
  4200  002D46  6B86               	clrf	??_ID& (0+255),b
  4201  002D48  2B86               	incf	??_ID& (0+255),f,b
  4202  002D4A  D002               	goto	u4828
  4203  002D4C                     u4820:
  4204  002D4C  0100               	movlb	0	; () banked
  4205  002D4E  6B86               	clrf	??_ID& (0+255),b
  4206  002D50                     u4828:
  4207  002D50  0100               	movlb	0	; () banked
  4208  002D52  5186               	movf	??_ID& (0+255),w,b
  4209  002D54  0100               	movlb	0	; () banked
  4210  002D56  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4211  002D58  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;sort.c: 158: LATAbits.LATA3 = 0;
  4215  002D5A  9689               	bcf	3977,3,c	;volatile
  4216  002D5C                     l6294:
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;sort.c: 159: }
  4220                           ;sort.c: 160: }
  4221                           ;sort.c: 163: if(!sensor_outputs[0]){
  4222  002D5C  0100               	movlb	0	; () banked
  4223  002D5E  5188               	movf	ID@sensor_outputs& (0+255),w,b
  4224  002D60  0100               	movlb	0	; () banked
  4225  002D62  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4226  002D64  A4D8               	btfss	status,2,c
  4227  002D66  D01E               	goto	l6312
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;sort.c: 164: if(!sensor_outputs[1]){
  4231  002D68  0100               	movlb	0	; () banked
  4232  002D6A  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4233  002D6C  0100               	movlb	0	; () banked
  4234  002D6E  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4235  002D70  A4D8               	btfss	status,2,c
  4236  002D72  D012               	goto	l6308
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;sort.c: 165: if(!sensor_outputs[2]){
  4240  002D74  0100               	movlb	0	; () banked
  4241  002D76  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4242  002D78  0100               	movlb	0	; () banked
  4243  002D7A  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4244  002D7C  A4D8               	btfss	status,2,c
  4245  002D7E  D006               	goto	l6304
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;sort.c: 166: count_pop_no_tab++;
  4249  002D80  4A61               	infsnz	_count_pop_no_tab,f,c
  4250  002D82  2A62               	incf	_count_pop_no_tab+1,f,c
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;sort.c: 167: cur_can = 0;
  4254  002D84  0E00               	movlw	0
  4255  002D86  6E66               	movwf	_cur_can+1,c
  4256  002D88  0E00               	movlw	0
  4257  002D8A  D011               	goto	L4
  4258  002D8C                     l6304:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;sort.c: 169: else{
  4262                           ;sort.c: 170: count_pop_w_tab++;
  4263  002D8C  4A63               	infsnz	_count_pop_w_tab,f,c
  4264  002D8E  2A64               	incf	_count_pop_w_tab+1,f,c
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;sort.c: 171: cur_can = 1;
  4268  002D90  0E00               	movlw	0
  4269  002D92  6E66               	movwf	_cur_can+1,c
  4270  002D94  0E01               	movlw	1
  4271  002D96  D00B               	goto	L4
  4272  002D98                     l6308:
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;sort.c: 174: else{
  4276                           ;sort.c: 175: count_can_w_lab++;
  4277  002D98  4A5F               	infsnz	_count_can_w_lab,f,c
  4278  002D9A  2A60               	incf	_count_can_w_lab+1,f,c
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;sort.c: 176: cur_can = 2;
  4282  002D9C  0E00               	movlw	0
  4283  002D9E  6E66               	movwf	_cur_can+1,c
  4284  002DA0  0E02               	movlw	2
  4285  002DA2  D005               	goto	L4
  4286  002DA4                     l6312:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;sort.c: 179: else{
  4290                           ;sort.c: 180: count_can_no_lab++;
  4291  002DA4  4A5D               	infsnz	_count_can_no_lab,f,c
  4292  002DA6  2A5E               	incf	_count_can_no_lab+1,f,c
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;sort.c: 181: cur_can = 3;
  4296  002DA8  0E00               	movlw	0
  4297  002DAA  6E66               	movwf	_cur_can+1,c
  4298  002DAC  0E03               	movlw	3
  4299  002DAE                     L4:
  4300  002DAE  6E65               	movwf	_cur_can,c
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;sort.c: 182: }
  4304                           ;sort.c: 184: LATCbits.LATC0 = 1;
  4305                           
  4306                           ; BSR set to: 0
  4307  002DB0  808B               	bsf	3979,0,c	;volatile
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;sort.c: 185: f_can_coming_to_distribution = 1;
  4311  002DB2  0E00               	movlw	0
  4312  002DB4  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4313  002DB6  0E01               	movlw	1
  4314  002DB8  6E6F               	movwf	_f_can_coming_to_distribution,c
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;sort.c: 186: _delay((unsigned long)((500)*(32000000/4000.0)));
  4318  002DBA  0E15               	movlw	21
  4319  002DBC  0100               	movlb	0	; () banked
  4320  002DBE  6F87               	movwf	(??_ID+1)& (0+255),b
  4321  002DC0  0E4B               	movlw	75
  4322  002DC2  0100               	movlb	0	; () banked
  4323  002DC4  6F86               	movwf	??_ID& (0+255),b
  4324  002DC6  0EBE               	movlw	190
  4325  002DC8                     u6997:
  4326  002DC8  2EE8               	decfsz	wreg,f,c
  4327  002DCA  D7FE               	bra	u6997
  4328  002DCC  2F86               	decfsz	??_ID& (0+255),f,b
  4329  002DCE  D7FC               	bra	u6997
  4330  002DD0  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4331  002DD2  D7FA               	bra	u6997
  4332  002DD4  F000               	nop	
  4333                           
  4334                           ;sort.c: 187: LATCbits.LATC0 = 0;
  4335  002DD6  908B               	bcf	3979,0,c	;volatile
  4336                           
  4337                           ;sort.c: 189: f_can_coming_to_ID = 0;
  4338  002DD8  0E00               	movlw	0
  4339  002DDA  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4340  002DDC  0E00               	movlw	0
  4341  002DDE  6E6D               	movwf	_f_can_coming_to_ID,c
  4342  002DE0  0012               	return	
  4343  002DE2                     __end_of_ID:
  4344                           	opt stack 0
  4345                           tblptru	equ	0xFF8
  4346                           tblptrh	equ	0xFF7
  4347                           tblptrl	equ	0xFF6
  4348                           tablat	equ	0xFF5
  4349                           prodh	equ	0xFF4
  4350                           prodl	equ	0xFF3
  4351                           postinc0	equ	0xFEE
  4352                           wreg	equ	0xFE8
  4353                           postdec1	equ	0xFE5
  4354                           fsr1l	equ	0xFE1
  4355                           indf2	equ	0xFDF
  4356                           postinc2	equ	0xFDE
  4357                           postdec2	equ	0xFDD
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function _Distribution *****************
  4363 ;; Defined at:
  4364 ;;		line 192 in file "sort.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;		None
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;		None
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;Total ram usage:        2 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    8
  4385 ;; This function calls:
  4386 ;;		_updateServoPosition
  4387 ;; This function is called by:
  4388 ;;		_sort
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text10
  4393  002A44                     __ptext10:
  4394                           	opt stack 0
  4395  002A44                     _Distribution:
  4396                           	opt stack 21
  4397                           
  4398                           ;sort.c: 193: if(f_can_coming_to_distribution){
  4399                           
  4400                           ;incstack = 0
  4401  002A44  506F               	movf	_f_can_coming_to_distribution,w,c
  4402  002A46  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4403  002A48  B4D8               	btfsc	status,2,c
  4404  002A4A  0012               	return	
  4405  002A4C  D034               	goto	l6340
  4406  002A4E                     l6330:
  4407                           
  4408                           ;sort.c: 198: updateServoPosition(500, 1);
  4409  002A4E  0E01               	movlw	1
  4410  002A50  0100               	movlb	0	; () banked
  4411  002A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4412  002A54  0EF4               	movlw	244
  4413  002A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4414  002A58  0E00               	movlw	0
  4415  002A5A  0100               	movlb	0	; () banked
  4416  002A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4417  002A5E  0E01               	movlw	1
  4418  002A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4419  002A62  EC53  F01C         	call	_updateServoPosition	;wreg free
  4420                           
  4421                           ;sort.c: 199: break;
  4422  002A66  D03E               	goto	l6342
  4423  002A68                     l6332:
  4424                           
  4425                           ;sort.c: 201: updateServoPosition(700, 1);
  4426  002A68  0E02               	movlw	2
  4427  002A6A  0100               	movlb	0	; () banked
  4428  002A6C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4429  002A6E  0EBC               	movlw	188
  4430  002A70  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4431  002A72  0E00               	movlw	0
  4432  002A74  0100               	movlb	0	; () banked
  4433  002A76  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4434  002A78  0E01               	movlw	1
  4435  002A7A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4436  002A7C  EC53  F01C         	call	_updateServoPosition	;wreg free
  4437                           
  4438                           ;sort.c: 202: break;
  4439  002A80  D031               	goto	l6342
  4440  002A82                     l6334:
  4441                           
  4442                           ;sort.c: 204: updateServoPosition(1700, 1);
  4443  002A82  0E06               	movlw	6
  4444  002A84  0100               	movlb	0	; () banked
  4445  002A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4446  002A88  0EA4               	movlw	164
  4447  002A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4448  002A8C  0E00               	movlw	0
  4449  002A8E  0100               	movlb	0	; () banked
  4450  002A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4451  002A92  0E01               	movlw	1
  4452  002A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4453  002A96  EC53  F01C         	call	_updateServoPosition	;wreg free
  4454                           
  4455                           ;sort.c: 205: break;
  4456  002A9A  D024               	goto	l6342
  4457  002A9C                     l6336:
  4458                           
  4459                           ;sort.c: 207: updateServoPosition(2000, 1);
  4460  002A9C  0E07               	movlw	7
  4461  002A9E  0100               	movlb	0	; () banked
  4462  002AA0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4463  002AA2  0ED0               	movlw	208
  4464  002AA4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4465  002AA6  0E00               	movlw	0
  4466  002AA8  0100               	movlb	0	; () banked
  4467  002AAA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4468  002AAC  0E01               	movlw	1
  4469  002AAE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4470  002AB0  EC53  F01C         	call	_updateServoPosition	;wreg free
  4471                           
  4472                           ;sort.c: 211: }
  4473                           
  4474                           ;sort.c: 210: break;
  4475                           
  4476                           ;sort.c: 209: default:
  4477                           
  4478                           ;sort.c: 208: break;
  4479  002AB4  D017               	goto	l6342
  4480  002AB6                     l6340:
  4481  002AB6  C065  F088         	movff	_cur_can,??_Distribution
  4482  002ABA  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4483                           
  4484                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4485                           ; Switch size 1, requested type "space"
  4486                           ; Number of cases is 1, Range of values is 0 to 0
  4487                           ; switch strategies available:
  4488                           ; Name         Instructions Cycles
  4489                           ; simple_byte            4     3 (average)
  4490                           ;	Chosen strategy is simple_byte
  4491  002ABE  0100               	movlb	0	; () banked
  4492  002AC0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4493  002AC2  0A00               	xorlw	0	; case 0
  4494  002AC4  A4D8               	btfss	status,2,c
  4495  002AC6  D00E               	goto	l6342
  4496                           
  4497                           ; BSR set to: 0
  4498                           ; Switch size 1, requested type "space"
  4499                           ; Number of cases is 4, Range of values is 0 to 3
  4500                           ; switch strategies available:
  4501                           ; Name         Instructions Cycles
  4502                           ; simple_byte           13     7 (average)
  4503                           ;	Chosen strategy is simple_byte
  4504  002AC8  0100               	movlb	0	; () banked
  4505  002ACA  5188               	movf	??_Distribution& (0+255),w,b
  4506  002ACC  0A00               	xorlw	0	; case 0
  4507  002ACE  B4D8               	btfsc	status,2,c
  4508  002AD0  D7BE               	goto	l6330
  4509  002AD2  0A01               	xorlw	1	; case 1
  4510  002AD4  B4D8               	btfsc	status,2,c
  4511  002AD6  D7C8               	goto	l6332
  4512  002AD8  0A03               	xorlw	3	; case 2
  4513  002ADA  B4D8               	btfsc	status,2,c
  4514  002ADC  D7D2               	goto	l6334
  4515  002ADE  0A01               	xorlw	1	; case 3
  4516  002AE0  B4D8               	btfsc	status,2,c
  4517  002AE2  D7DC               	goto	l6336
  4518  002AE4                     l6342:
  4519                           
  4520                           ;sort.c: 212: _delay((unsigned long)((500)*(32000000/4000.0)));
  4521  002AE4  0E15               	movlw	21
  4522  002AE6  0100               	movlb	0	; () banked
  4523  002AE8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4524  002AEA  0E4B               	movlw	75
  4525  002AEC  0100               	movlb	0	; () banked
  4526  002AEE  6F88               	movwf	??_Distribution& (0+255),b
  4527  002AF0  0EBE               	movlw	190
  4528  002AF2                     u7007:
  4529  002AF2  2EE8               	decfsz	wreg,f,c
  4530  002AF4  D7FE               	bra	u7007
  4531  002AF6  2F88               	decfsz	??_Distribution& (0+255),f,b
  4532  002AF8  D7FC               	bra	u7007
  4533  002AFA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4534  002AFC  D7FA               	bra	u7007
  4535  002AFE  F000               	nop	
  4536                           
  4537                           ;sort.c: 215: updateServoPosition(2000, 3);
  4538  002B00  0E07               	movlw	7
  4539  002B02  0100               	movlb	0	; () banked
  4540  002B04  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4541  002B06  0ED0               	movlw	208
  4542  002B08  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4543  002B0A  0E00               	movlw	0
  4544  002B0C  0100               	movlb	0	; () banked
  4545  002B0E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4546  002B10  0E03               	movlw	3
  4547  002B12  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4548  002B14  EC53  F01C         	call	_updateServoPosition	;wreg free
  4549                           
  4550                           ;sort.c: 216: _delay((unsigned long)((500)*(32000000/4000.0)));
  4551  002B18  0E15               	movlw	21
  4552  002B1A  0100               	movlb	0	; () banked
  4553  002B1C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4554  002B1E  0E4B               	movlw	75
  4555  002B20  0100               	movlb	0	; () banked
  4556  002B22  6F88               	movwf	??_Distribution& (0+255),b
  4557  002B24  0EBE               	movlw	190
  4558  002B26                     u7017:
  4559  002B26  2EE8               	decfsz	wreg,f,c
  4560  002B28  D7FE               	bra	u7017
  4561  002B2A  2F88               	decfsz	??_Distribution& (0+255),f,b
  4562  002B2C  D7FC               	bra	u7017
  4563  002B2E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4564  002B30  D7FA               	bra	u7017
  4565  002B32  F000               	nop	
  4566                           
  4567                           ;sort.c: 219: updateServoPosition(1250, 1);
  4568  002B34  0E04               	movlw	4
  4569  002B36  0100               	movlb	0	; () banked
  4570  002B38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4571  002B3A  0EE2               	movlw	226
  4572  002B3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4573  002B3E  0E00               	movlw	0
  4574  002B40  0100               	movlb	0	; () banked
  4575  002B42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4576  002B44  0E01               	movlw	1
  4577  002B46  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4578  002B48  EC53  F01C         	call	_updateServoPosition	;wreg free
  4579                           
  4580                           ;sort.c: 220: updateServoPosition(1250, 3);
  4581  002B4C  0E04               	movlw	4
  4582  002B4E  0100               	movlb	0	; () banked
  4583  002B50  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4584  002B52  0EE2               	movlw	226
  4585  002B54  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4586  002B56  0E00               	movlw	0
  4587  002B58  0100               	movlb	0	; () banked
  4588  002B5A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4589  002B5C  0E03               	movlw	3
  4590  002B5E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4591  002B60  EC53  F01C         	call	_updateServoPosition	;wreg free
  4592                           
  4593                           ;sort.c: 221: f_can_coming_to_distribution = 0;
  4594  002B64  0E00               	movlw	0
  4595  002B66  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4596  002B68  0E00               	movlw	0
  4597  002B6A  6E6F               	movwf	_f_can_coming_to_distribution,c
  4598                           
  4599                           ;sort.c: 222: f_can_distributed = 1;
  4600  002B6C  0E00               	movlw	0
  4601  002B6E  6E72               	movwf	_f_can_distributed+1,c
  4602  002B70  0E01               	movlw	1
  4603  002B72  6E71               	movwf	_f_can_distributed,c
  4604                           
  4605                           ;sort.c: 223: if(f_lastCan == 1){
  4606  002B74  0473               	decf	_f_lastCan,w,c
  4607  002B76  1074               	iorwf	_f_lastCan+1,w,c
  4608  002B78  A4D8               	btfss	status,2,c
  4609  002B7A  0012               	return	
  4610                           
  4611                           ;sort.c: 224: machine_state = DoneSorting_state;
  4612  002B7C  0E02               	movlw	2
  4613  002B7E  0100               	movlb	0	; () banked
  4614  002B80  6FFC               	movwf	_machine_state& (0+255),b
  4615                           
  4616                           ; BSR set to: 0
  4617  002B82  0012               	return	
  4618  002B84                     __end_of_Distribution:
  4619                           	opt stack 0
  4620                           tblptru	equ	0xFF8
  4621                           tblptrh	equ	0xFF7
  4622                           tblptrl	equ	0xFF6
  4623                           tablat	equ	0xFF5
  4624                           prodh	equ	0xFF4
  4625                           prodl	equ	0xFF3
  4626                           postinc0	equ	0xFEE
  4627                           wreg	equ	0xFE8
  4628                           postdec1	equ	0xFE5
  4629                           fsr1l	equ	0xFE1
  4630                           indf2	equ	0xFDF
  4631                           postinc2	equ	0xFDE
  4632                           postdec2	equ	0xFDD
  4633                           fsr2h	equ	0xFDA
  4634                           fsr2l	equ	0xFD9
  4635                           status	equ	0xFD8
  4636                           
  4637 ;; *************** function _machineConfig *****************
  4638 ;; Defined at:
  4639 ;;		line 15 in file "MachineConfig.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;		None
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      void 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;Total ram usage:        0 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    7
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_main
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text11
  4668  003B20                     __ptext11:
  4669                           	opt stack 0
  4670  003B20                     _machineConfig:
  4671                           	opt stack 23
  4672                           
  4673                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4674                           
  4675                           ;incstack = 0
  4676  003B20  0EF0               	movlw	240
  4677  003B22  6ED3               	movwf	4051,c	;volatile
  4678                           
  4679                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4680  003B24  8C9B               	bsf	3995,6,c	;volatile
  4681                           
  4682                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4683  003B26  0E47               	movlw	71
  4684  003B28  6E92               	movwf	3986,c	;volatile
  4685                           
  4686                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4687  003B2A  0EF2               	movlw	242
  4688  003B2C  6E93               	movwf	3987,c	;volatile
  4689                           
  4690                           ;MachineConfig.c: 27: TRISC = 0x00;
  4691  003B2E  0E00               	movlw	0
  4692  003B30  6E94               	movwf	3988,c	;volatile
  4693                           
  4694                           ;MachineConfig.c: 31: TRISD = 0x00;
  4695  003B32  0E00               	movlw	0
  4696  003B34  6E95               	movwf	3989,c	;volatile
  4697                           
  4698                           ;MachineConfig.c: 34: TRISE = 0x00;
  4699  003B36  0E00               	movlw	0
  4700  003B38  6E96               	movwf	3990,c	;volatile
  4701                           
  4702                           ;MachineConfig.c: 37: LATA = 0x00;
  4703  003B3A  0E00               	movlw	0
  4704  003B3C  6E89               	movwf	3977,c	;volatile
  4705                           
  4706                           ;MachineConfig.c: 38: LATB = 0x00;
  4707  003B3E  0E00               	movlw	0
  4708  003B40  6E8A               	movwf	3978,c	;volatile
  4709                           
  4710                           ;MachineConfig.c: 39: LATC = 0x00;
  4711  003B42  0E00               	movlw	0
  4712  003B44  6E8B               	movwf	3979,c	;volatile
  4713                           
  4714                           ;MachineConfig.c: 40: LATD = 0x00;
  4715  003B46  0E00               	movlw	0
  4716  003B48  6E8C               	movwf	3980,c	;volatile
  4717                           
  4718                           ;MachineConfig.c: 41: LATE = 0x00;
  4719  003B4A  0E00               	movlw	0
  4720  003B4C  6E8D               	movwf	3981,c	;volatile
  4721                           
  4722                           ;MachineConfig.c: 43: nRBPU = 0;
  4723  003B4E  9EF1               	bcf	intcon2,7,c	;volatile
  4724                           
  4725                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4726  003B50  0E00               	movlw	0
  4727  003B52  6EC2               	movwf	4034,c	;volatile
  4728                           
  4729                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4730  003B54  0E0D               	movlw	13
  4731  003B56  6EC1               	movwf	4033,c	;volatile
  4732                           
  4733                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4734  003B58  0E00               	movlw	0
  4735  003B5A  6EB5               	movwf	4021,c	;volatile
  4736                           
  4737                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4738  003B5C  96B4               	bcf	4020,3,c	;volatile
  4739                           
  4740                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4741  003B5E  0EB1               	movlw	177
  4742  003B60  6EC0               	movwf	4032,c	;volatile
  4743                           
  4744                           ;MachineConfig.c: 55: INT1IE = 1;
  4745  003B62  86F0               	bsf	intcon3,3,c	;volatile
  4746                           
  4747                           ;MachineConfig.c: 57: TMR0IE = 1;
  4748  003B64  8AF2               	bsf	intcon,5,c	;volatile
  4749                           
  4750                           ;MachineConfig.c: 58: TMR1IE = 1;
  4751  003B66  809D               	bsf	3997,0,c	;volatile
  4752                           
  4753                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4754  003B68  0EB0               	movlw	176
  4755  003B6A  6ECD               	movwf	4045,c	;volatile
  4756                           
  4757                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4758  003B6C  0EB0               	movlw	176
  4759  003B6E  6EB1               	movwf	4017,c	;volatile
  4760                           
  4761                           ;MachineConfig.c: 61: TMR2IE = 1;
  4762  003B70  829D               	bsf	3997,1,c	;volatile
  4763                           
  4764                           ;MachineConfig.c: 62: TMR3IE = 1;
  4765  003B72  82A0               	bsf	4000,1,c	;volatile
  4766                           
  4767                           ;MachineConfig.c: 63: PEIE = 1;
  4768  003B74  8CF2               	bsf	intcon,6,c	;volatile
  4769                           
  4770                           ;MachineConfig.c: 64: ADIE = 0;
  4771  003B76  9C9D               	bcf	3997,6,c	;volatile
  4772                           
  4773                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4774  003B78  9EF2               	bcf	intcon,7,c	;volatile
  4775  003B7A  0012               	return		;funcret
  4776  003B7C                     __end_of_machineConfig:
  4777                           	opt stack 0
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           intcon2	equ	0xFF1
  4786                           intcon3	equ	0xFF0
  4787                           postinc0	equ	0xFEE
  4788                           wreg	equ	0xFE8
  4789                           postdec1	equ	0xFE5
  4790                           fsr1l	equ	0xFE1
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           fsr2h	equ	0xFDA
  4795                           fsr2l	equ	0xFD9
  4796                           status	equ	0xFD8
  4797                           
  4798 ;; *************** function _logRun *****************
  4799 ;; Defined at:
  4800 ;;		line 84 in file "EEPROM.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;		None
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4805 ;;  i               2   55[BANK0 ] int 
  4806 ;;  num             1   49[BANK0 ] unsigned char 
  4807 ;;  addr            2   57[BANK0 ] unsigned short 
  4808 ;;  byte11          1   54[BANK0 ] unsigned char 
  4809 ;;  byte3           1   52[BANK0 ] unsigned char 
  4810 ;;  byte2           1   51[BANK0 ] unsigned char 
  4811 ;;  byte1           1   50[BANK0 ] unsigned char 
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      void 
  4814 ;; Registers used:
  4815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;Total ram usage:       10 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:   11
  4828 ;; This function calls:
  4829 ;;		_EEPROM_read
  4830 ;;		_EEPROM_write
  4831 ;; This function is called by:
  4832 ;;		_main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text12
  4837  002B84                     __ptext12:
  4838                           	opt stack 0
  4839  002B84                     _logRun:
  4840                           	opt stack 19
  4841                           
  4842                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4843                           
  4844                           ;incstack = 0
  4845  002B84  0E00               	movlw	0
  4846  002B86  0100               	movlb	0	; () banked
  4847  002B88  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4848  002B8A  0E00               	movlw	0
  4849  002B8C  6F80               	movwf	EEPROM_read@address& (0+255),b
  4850  002B8E  ECBC  F021         	call	_EEPROM_read	;wreg free
  4851  002B92  0100               	movlb	0	; () banked
  4852  002B94  6FFD               	movwf	_sel& (0+255),b
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4856  002B96  0100               	movlb	0	; () banked
  4857  002B98  51FD               	movf	_sel& (0+255),w,b
  4858  002B9A  0D0B               	mullw	11
  4859  002B9C  0E01               	movlw	1
  4860  002B9E  24F3               	addwf	prodl,w,c
  4861  002BA0  0100               	movlb	0	; () banked
  4862  002BA2  6FB9               	movwf	logRun@addr& (0+255),b
  4863  002BA4  0E00               	movlw	0
  4864  002BA6  20F4               	addwfc	prodh,w,c
  4865  002BA8  0100               	movlb	0	; () banked
  4866  002BAA  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;EEPROM.c: 101: if (sel < 3){
  4870  002BAC  0E03               	movlw	3
  4871  002BAE  0100               	movlb	0	; () banked
  4872  002BB0  61FD               	cpfslt	_sel& (0+255),b
  4873  002BB2  D00E               	goto	l7668
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4877  002BB4  0100               	movlb	0	; () banked
  4878  002BB6  29FD               	incf	_sel& (0+255),w,b
  4879  002BB8  0100               	movlb	0	; () banked
  4880  002BBA  6FB1               	movwf	logRun@num& (0+255),b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4884  002BBC  0E00               	movlw	0
  4885  002BBE  0100               	movlb	0	; () banked
  4886  002BC0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4887  002BC2  0E00               	movlw	0
  4888  002BC4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4889  002BC6  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4890  002BCA  EC7B  F018         	call	_EEPROM_write	;wreg free
  4891                           
  4892                           ;EEPROM.c: 104: }
  4893  002BCE  D00A               	goto	l7670
  4894  002BD0                     l7668:
  4895                           
  4896                           ;EEPROM.c: 105: else{
  4897                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4898  002BD0  0E00               	movlw	0
  4899  002BD2  0100               	movlb	0	; () banked
  4900  002BD4  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4901  002BD6  0E00               	movlw	0
  4902  002BD8  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4903  002BDA  0E00               	movlw	0
  4904  002BDC  0100               	movlb	0	; () banked
  4905  002BDE  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4906  002BE0  EC7B  F018         	call	_EEPROM_write	;wreg free
  4907  002BE4                     l7670:
  4908                           
  4909                           ;EEPROM.c: 107: }
  4910                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4911  002BE4  0100               	movlb	0	; () banked
  4912  002BE6  51FE               	movf	_count_total& (0+255),w,b
  4913  002BE8  0980               	iorlw	128
  4914  002BEA  0100               	movlb	0	; () banked
  4915  002BEC  6FB2               	movwf	logRun@byte1& (0+255),b
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4919  002BEE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4920  002BF2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4921  002BF6  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4922  002BFA  EC7B  F018         	call	_EEPROM_write	;wreg free
  4923                           
  4924                           ;EEPROM.c: 112: addr++;
  4925  002BFE  0100               	movlb	0	; () banked
  4926  002C00  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4927  002C02  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4931  002C04  3861               	swapf	_count_pop_no_tab,w,c
  4932  002C06  0BF0               	andlw	240
  4933  002C08  1063               	iorwf	_count_pop_w_tab,w,c
  4934  002C0A  0100               	movlb	0	; () banked
  4935  002C0C  6FB3               	movwf	logRun@byte2& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4939  002C0E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4940  002C12  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4941  002C16  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4942  002C1A  EC7B  F018         	call	_EEPROM_write	;wreg free
  4943                           
  4944                           ;EEPROM.c: 117: addr++;
  4945  002C1E  0100               	movlb	0	; () banked
  4946  002C20  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4947  002C22  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4951  002C24  385F               	swapf	_count_can_w_lab,w,c
  4952  002C26  0BF0               	andlw	240
  4953  002C28  105D               	iorwf	_count_can_no_lab,w,c
  4954  002C2A  0100               	movlb	0	; () banked
  4955  002C2C  6FB4               	movwf	logRun@byte3& (0+255),b
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4959  002C2E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4960  002C32  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4961  002C36  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4962  002C3A  EC7B  F018         	call	_EEPROM_write	;wreg free
  4963                           
  4964                           ;EEPROM.c: 120: addr++;
  4965  002C3E  0100               	movlb	0	; () banked
  4966  002C40  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4967  002C42  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4971  002C44  0E00               	movlw	0
  4972  002C46  0100               	movlb	0	; () banked
  4973  002C48  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4974  002C4A  0E00               	movlw	0
  4975  002C4C  6FB7               	movwf	logRun@i& (0+255),b
  4976                           
  4977                           ; BSR set to: 0
  4978  002C4E  0100               	movlb	0	; () banked
  4979  002C50  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4980  002C52  D008               	goto	l7694
  4981  002C54  0100               	movlb	0	; () banked
  4982  002C56  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4983  002C58  E128               	bnz	l935
  4984  002C5A  0E07               	movlw	7
  4985  002C5C  0100               	movlb	0	; () banked
  4986  002C5E  5DB7               	subwf	logRun@i& (0+255),w,b
  4987  002C60  B0D8               	btfsc	status,0,c
  4988  002C62  D023               	goto	l935
  4989  002C64                     l7694:
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4993  002C64  90D8               	bcf	status,0,c
  4994  002C66  0100               	movlb	0	; () banked
  4995  002C68  35B7               	rlcf	logRun@i& (0+255),w,b
  4996  002C6A  6ED9               	movwf	fsr2l,c
  4997  002C6C  0100               	movlb	0	; () banked
  4998  002C6E  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4999  002C70  6EDA               	movwf	fsr2h,c
  5000  002C72  0E0E               	movlw	low _startTime
  5001  002C74  26D9               	addwf	fsr2l,f,c
  5002  002C76  0E01               	movlw	high _startTime
  5003  002C78  22DA               	addwfc	fsr2h,f,c
  5004  002C7A  50DF               	movf	indf2,w,c
  5005  002C7C  0100               	movlb	0	; () banked
  5006  002C7E  6FB5               	movwf	logRun@byte_i& (0+255),b
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5010  002C80  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5011  002C84  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5012  002C88  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5013  002C8C  EC7B  F018         	call	_EEPROM_write	;wreg free
  5014                           
  5015                           ;EEPROM.c: 126: addr++;
  5016  002C90  0100               	movlb	0	; () banked
  5017  002C92  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5018  002C94  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5019                           
  5020                           ; BSR set to: 0
  5021  002C96  0100               	movlb	0	; () banked
  5022  002C98  4BB7               	infsnz	logRun@i& (0+255),f,b
  5023  002C9A  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5024                           
  5025                           ; BSR set to: 0
  5026  002C9C  0100               	movlb	0	; () banked
  5027  002C9E  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5028  002CA0  D7E1               	goto	l7694
  5029  002CA2  0100               	movlb	0	; () banked
  5030  002CA4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5031  002CA6  E101               	bnz	u6680
  5032  002CA8  D7D8               	goto	L5
  5033  002CAA                     u6680:
  5034  002CAA                     l935:
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;EEPROM.c: 127: }
  5038                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5039  002CAA  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5043  002CAE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5044  002CB2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5045  002CB6  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5046  002CBA  EC7B  F018         	call	_EEPROM_write	;wreg free
  5047  002CBE  0012               	return		;funcret
  5048  002CC0                     __end_of_logRun:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           intcon2	equ	0xFF1
  5058                           intcon3	equ	0xFF0
  5059                           postinc0	equ	0xFEE
  5060                           wreg	equ	0xFE8
  5061                           postdec1	equ	0xFE5
  5062                           fsr1l	equ	0xFE1
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           fsr2h	equ	0xFDA
  5067                           fsr2l	equ	0xFD9
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _EEPROM_write *****************
  5071 ;; Defined at:
  5072 ;;		line 32 in file "EEPROM.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  address         2   43[BANK0 ] unsigned short 
  5075 ;;  data            1   45[BANK0 ] unsigned char 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  i               1   48[BANK0 ] unsigned char 
  5078 ;;  i               1   47[BANK0 ] unsigned char 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5088 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;Total ram usage:        6 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:   10
  5095 ;; This function calls:
  5096 ;;		_EEPROM_read
  5097 ;;		_lcdInst
  5098 ;;		_printf
  5099 ;; This function is called by:
  5100 ;;		_Loading
  5101 ;;		_logRun
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text13
  5106  0030F6                     __ptext13:
  5107                           	opt stack 0
  5108  0030F6                     _EEPROM_write:
  5109                           	opt stack 18
  5110                           
  5111                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5112                           
  5113                           ;incstack = 0
  5114  0030F6  84A6               	bsf	4006,2,c	;volatile
  5115                           
  5116                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5117  0030F8  0100               	movlb	0	; () banked
  5118  0030FA  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5119  0030FC  6EAA               	movwf	4010,c	;volatile
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5123  0030FE  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;EEPROM.c: 39: EEDATA = data;
  5127  003102  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5131  003106  9EA6               	bcf	4006,7,c	;volatile
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5135  003108  9CA6               	bcf	4006,6,c	;volatile
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5139  00310A  9EF2               	bcf	intcon,7,c	;volatile
  5140                           
  5141                           ;EEPROM.c: 45: EECON2 = 0x55;
  5142  00310C  0E55               	movlw	85
  5143  00310E  6EA7               	movwf	4007,c	;volatile
  5144                           
  5145                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5146  003110  0EAA               	movlw	170
  5147  003112  6EA7               	movwf	4007,c	;volatile
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5151  003114  82A6               	bsf	4006,1,c	;volatile
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5155  003116  8EF2               	bsf	intcon,7,c	;volatile
  5156  003118                     l913:
  5157  003118  A8A1               	btfss	4001,4,c	;volatile
  5158  00311A  D7FE               	goto	l913
  5159                           
  5160                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5161  00311C  98A1               	bcf	4001,4,c	;volatile
  5162                           
  5163                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5164  00311E  94A6               	bcf	4006,2,c	;volatile
  5165                           
  5166                           ;EEPROM.c: 57: if(debug){
  5167  003120  0100               	movlb	0	; () banked
  5168  003122  51E0               	movf	_debug& (0+255),w,b
  5169  003124  0100               	movlb	0	; () banked
  5170  003126  11E1               	iorwf	(_debug+1)& (0+255),w,b
  5171  003128  B4D8               	btfsc	status,2,c
  5172  00312A  0012               	return	
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5176  00312C  0E01               	movlw	1
  5177  00312E  ECF9  F021         	call	_lcdInst
  5178  003132  0E68               	movlw	104
  5179  003134  0100               	movlb	0	; () banked
  5180  003136  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5181  003138  0EE4               	movlw	228
  5182  00313A                     u7027:
  5183  00313A  2EE8               	decfsz	wreg,f,c
  5184  00313C  D7FE               	bra	u7027
  5185  00313E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5186  003140  D7FC               	bra	u7027
  5187  003142  F000               	nop	
  5188                           
  5189                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5190  003144  0E80               	movlw	128
  5191  003146  ECF9  F021         	call	_lcdInst
  5192                           
  5193                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5194  00314A  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5195  00314E  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5196  003152  ECBC  F021         	call	_EEPROM_read	;wreg free
  5197  003156  0100               	movlb	0	; () banked
  5198  003158  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5199  00315A  A4D8               	btfss	status,2,c
  5200  00315C  D024               	goto	l5878
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5204  00315E  0E6C               	movlw	low STR_66
  5205  003160  0100               	movlb	0	; () banked
  5206  003162  6F8E               	movwf	printf@f& (0+255),b
  5207  003164  0EFB               	movlw	high STR_66
  5208  003166  0100               	movlb	0	; () banked
  5209  003168  6F8F               	movwf	(printf@f+1)& (0+255),b
  5210  00316A  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5211  00316E  0100               	movlb	0	; () banked
  5212  003170  6B91               	clrf	(?_printf+3)& (0+255),b
  5213  003172  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5214  003176  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5215  00317A  EC9C  F008         	call	_printf	;wreg free
  5216                           
  5217                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5218  00317E  0E00               	movlw	0
  5219  003180  0100               	movlb	0	; () banked
  5220  003182  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5221  003184                     l5870:
  5222                           
  5223                           ; BSR set to: 0
  5224  003184  0E63               	movlw	99
  5225  003186  0100               	movlb	0	; () banked
  5226  003188  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5227  00318A  D001               	goto	l5874
  5228  00318C  0012               	return	
  5229  00318E                     l5874:
  5230                           
  5231                           ; BSR set to: 0
  5232  00318E  0E68               	movlw	104
  5233  003190  0100               	movlb	0	; () banked
  5234  003192  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5235  003194  0EE4               	movlw	228
  5236  003196                     u7037:
  5237  003196  2EE8               	decfsz	wreg,f,c
  5238  003198  D7FE               	bra	u7037
  5239  00319A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5240  00319C  D7FC               	bra	u7037
  5241  00319E  F000               	nop	
  5242  0031A0  0100               	movlb	0	; () banked
  5243  0031A2  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5244  0031A4  D7EF               	goto	l5870
  5245  0031A6                     l5878:
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5249  0031A6  0EBD               	movlw	low STR_67
  5250  0031A8  0100               	movlb	0	; () banked
  5251  0031AA  6F8E               	movwf	printf@f& (0+255),b
  5252  0031AC  0EFF               	movlw	high STR_67
  5253  0031AE  0100               	movlb	0	; () banked
  5254  0031B0  6F8F               	movwf	(printf@f+1)& (0+255),b
  5255  0031B2  EC9C  F008         	call	_printf	;wreg free
  5256  0031B6  0E00               	movlw	0
  5257  0031B8  0100               	movlb	0	; () banked
  5258  0031BA  6FB0               	movwf	EEPROM_write@i_1319& (0+255),b
  5259  0031BC                     l5882:
  5260                           
  5261                           ; BSR set to: 0
  5262  0031BC  0E63               	movlw	99
  5263  0031BE  0100               	movlb	0	; () banked
  5264  0031C0  65B0               	cpfsgt	EEPROM_write@i_1319& (0+255),b
  5265  0031C2  D001               	goto	l5886
  5266  0031C4  0012               	return	
  5267  0031C6                     l5886:
  5268                           
  5269                           ; BSR set to: 0
  5270  0031C6  0E68               	movlw	104
  5271  0031C8  0100               	movlb	0	; () banked
  5272  0031CA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5273  0031CC  0EE4               	movlw	228
  5274  0031CE                     u7047:
  5275  0031CE  2EE8               	decfsz	wreg,f,c
  5276  0031D0  D7FE               	bra	u7047
  5277  0031D2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5278  0031D4  D7FC               	bra	u7047
  5279  0031D6  F000               	nop	
  5280  0031D8  0100               	movlb	0	; () banked
  5281  0031DA  2BB0               	incf	EEPROM_write@i_1319& (0+255),f,b
  5282  0031DC  D7EF               	goto	l5882
  5283  0031DE                     __end_of_EEPROM_write:
  5284                           	opt stack 0
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           intcon	equ	0xFF2
  5292                           intcon2	equ	0xFF1
  5293                           intcon3	equ	0xFF0
  5294                           postinc0	equ	0xFEE
  5295                           wreg	equ	0xFE8
  5296                           postdec1	equ	0xFE5
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           postinc2	equ	0xFDE
  5300                           postdec2	equ	0xFDD
  5301                           fsr2h	equ	0xFDA
  5302                           fsr2l	equ	0xFD9
  5303                           status	equ	0xFD8
  5304                           
  5305 ;; *************** function _EEPROM_read *****************
  5306 ;; Defined at:
  5307 ;;		line 68 in file "EEPROM.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  address         2    0[BANK0 ] unsigned short 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;		None
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  1    wreg      unsigned char 
  5314 ;; Registers used:
  5315 ;;		wreg, status,2
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5321 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;Total ram usage:        2 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    7
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_Loading
  5332 ;;		_EEPROM_write
  5333 ;;		_logRun
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text14
  5338  004378                     __ptext14:
  5339                           	opt stack 0
  5340  004378                     _EEPROM_read:
  5341                           	opt stack 20
  5342                           
  5343                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;incstack = 0
  5347  004378  0100               	movlb	0	; () banked
  5348  00437A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5349  00437C  6EAA               	movwf	4010,c	;volatile
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5353  00437E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5357  004382  9EA6               	bcf	4006,7,c	;volatile
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5361  004384  9CA6               	bcf	4006,6,c	;volatile
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5365  004386  80A6               	bsf	4006,0,c	;volatile
  5366  004388                     l926:
  5367  004388  B0A6               	btfsc	4006,0,c	;volatile
  5368  00438A  D7FE               	goto	l926
  5369                           
  5370                           ;EEPROM.c: 81: return EEDATA;
  5371  00438C  50A8               	movf	4008,w,c	;volatile
  5372  00438E  0012               	return	
  5373  004390                     __end_of_EEPROM_read:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           intcon	equ	0xFF2
  5382                           intcon2	equ	0xFF1
  5383                           intcon3	equ	0xFF0
  5384                           postinc0	equ	0xFEE
  5385                           wreg	equ	0xFE8
  5386                           postdec1	equ	0xFE5
  5387                           fsr1l	equ	0xFE1
  5388                           indf2	equ	0xFDF
  5389                           postinc2	equ	0xFDE
  5390                           postdec2	equ	0xFDD
  5391                           fsr2h	equ	0xFDA
  5392                           fsr2l	equ	0xFD9
  5393                           status	equ	0xFD8
  5394                           
  5395 ;; *************** function _initUI *****************
  5396 ;; Defined at:
  5397 ;;		line 62 in file "UI.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  1    wreg      void 
  5404 ;; Registers used:
  5405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;Total ram usage:        0 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:   12
  5418 ;; This function calls:
  5419 ;;		_change_state_to_menu_start
  5420 ;;		_loadRTC
  5421 ;; This function is called by:
  5422 ;;		_main
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           	psect	text15
  5427  0042CE                     __ptext15:
  5428                           	opt stack 0
  5429  0042CE                     _initUI:
  5430                           	opt stack 18
  5431                           
  5432                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5433                           
  5434                           ;incstack = 0
  5435  0042CE  8EF2               	bsf	intcon,7,c	;volatile
  5436                           
  5437                           ;UI.c: 64: machine_state = UI_state;
  5438  0042D0  0E00               	movlw	0
  5439  0042D2  0100               	movlb	0	; () banked
  5440  0042D4  6FFC               	movwf	_machine_state& (0+255),b
  5441                           
  5442                           ;UI.c: 65: logstate = 0;
  5443  0042D6  0E00               	movlw	0
  5444  0042D8  0100               	movlb	0	; () banked
  5445  0042DA  6FF7               	movwf	(_logstate+1)& (0+255),b
  5446  0042DC  0E00               	movlw	0
  5447  0042DE  6FF6               	movwf	_logstate& (0+255),b
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;UI.c: 67: loadRTC();
  5451  0042E0  EC08  F01B         	call	_loadRTC	;wreg free
  5452                           
  5453                           ;UI.c: 69: change_state_to_menu_start();
  5454  0042E4  ECD8  F020         	call	_change_state_to_menu_start	;wreg free
  5455                           
  5456                           ;UI.c: 70: firstboot = 1;
  5457  0042E8  0E00               	movlw	0
  5458  0042EA  6E76               	movwf	_firstboot+1,c
  5459  0042EC  0E01               	movlw	1
  5460  0042EE  6E75               	movwf	_firstboot,c
  5461  0042F0  0012               	return		;funcret
  5462  0042F2                     __end_of_initUI:
  5463                           	opt stack 0
  5464                           tblptru	equ	0xFF8
  5465                           tblptrh	equ	0xFF7
  5466                           tblptrl	equ	0xFF6
  5467                           tablat	equ	0xFF5
  5468                           prodh	equ	0xFF4
  5469                           prodl	equ	0xFF3
  5470                           intcon	equ	0xFF2
  5471                           intcon2	equ	0xFF1
  5472                           intcon3	equ	0xFF0
  5473                           postinc0	equ	0xFEE
  5474                           wreg	equ	0xFE8
  5475                           postdec1	equ	0xFE5
  5476                           fsr1l	equ	0xFE1
  5477                           indf2	equ	0xFDF
  5478                           postinc2	equ	0xFDE
  5479                           postdec2	equ	0xFDD
  5480                           fsr2h	equ	0xFDA
  5481                           fsr2l	equ	0xFD9
  5482                           status	equ	0xFD8
  5483                           
  5484 ;; *************** function _loadRTC *****************
  5485 ;; Defined at:
  5486 ;;		line 28 in file "RTC.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;		None
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  i               2   22[BANK0 ] int 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      void 
  5493 ;; Registers used:
  5494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;Total ram usage:        3 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    9
  5507 ;; This function calls:
  5508 ;;		_I2C_Master_Init
  5509 ;;		_I2C_Master_Start
  5510 ;;		_I2C_Master_Stop
  5511 ;;		_I2C_Master_Write
  5512 ;; This function is called by:
  5513 ;;		_initUI
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text16
  5518  003610                     __ptext16:
  5519                           	opt stack 0
  5520  003610                     _loadRTC:
  5521                           	opt stack 20
  5522                           
  5523                           ;RTC.c: 30: I2C_Master_Init(10000);
  5524                           
  5525                           ;incstack = 0
  5526  003610  0E10               	movlw	16
  5527  003612  0100               	movlb	0	; () banked
  5528  003614  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5529  003616  0E27               	movlw	39
  5530  003618  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5531  00361A  0E00               	movlw	0
  5532  00361C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5533  00361E  0E00               	movlw	0
  5534  003620  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5535  003622  EC60  F01D         	call	_I2C_Master_Init	;wreg free
  5536                           
  5537                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5538  003626  9EF2               	bcf	intcon,7,c	;volatile
  5539                           
  5540                           ;RTC.c: 34: I2C_Master_Start();
  5541  003628  EC1F  F022         	call	_I2C_Master_Start	;wreg free
  5542                           
  5543                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5544  00362C  0E00               	movlw	0
  5545  00362E  0100               	movlb	0	; () banked
  5546  003630  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5547  003632  0ED0               	movlw	208
  5548  003634  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5549  003636  EC0D  F022         	call	_I2C_Master_Write	;wreg free
  5550                           
  5551                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5552  00363A  0E00               	movlw	0
  5553  00363C  0100               	movlb	0	; () banked
  5554  00363E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5555  003640  0E00               	movlw	0
  5556  003642  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5557  003644  EC0D  F022         	call	_I2C_Master_Write	;wreg free
  5558                           
  5559                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5560  003648  0E00               	movlw	0
  5561  00364A  0100               	movlb	0	; () banked
  5562  00364C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5563  00364E  0E00               	movlw	0
  5564  003650  6F96               	movwf	loadRTC@i& (0+255),b
  5565  003652                     l6002:
  5566                           
  5567                           ; BSR set to: 0
  5568  003652  0100               	movlb	0	; () banked
  5569  003654  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5570  003656  D008               	goto	l6006
  5571  003658  0100               	movlb	0	; () banked
  5572  00365A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5573  00365C  E11B               	bnz	l6012
  5574  00365E  0E07               	movlw	7
  5575  003660  0100               	movlb	0	; () banked
  5576  003662  5D96               	subwf	loadRTC@i& (0+255),w,b
  5577  003664  B0D8               	btfsc	status,0,c
  5578  003666  D016               	goto	l6012
  5579  003668                     l6006:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5583  003668  0E24               	movlw	low _time
  5584  00366A  0100               	movlb	0	; () banked
  5585  00366C  2596               	addwf	loadRTC@i& (0+255),w,b
  5586  00366E  6ED9               	movwf	fsr2l,c
  5587  003670  0E01               	movlw	high _time
  5588  003672  0100               	movlb	0	; () banked
  5589  003674  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5590  003676  6EDA               	movwf	fsr2h,c
  5591  003678  50DF               	movf	indf2,w,c
  5592  00367A  0100               	movlb	0	; () banked
  5593  00367C  6F95               	movwf	??_loadRTC& (0+255),b
  5594  00367E  0100               	movlb	0	; () banked
  5595  003680  5195               	movf	??_loadRTC& (0+255),w,b
  5596  003682  0100               	movlb	0	; () banked
  5597  003684  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5598  003686  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5599  003688  EC0D  F022         	call	_I2C_Master_Write	;wreg free
  5600  00368C  0100               	movlb	0	; () banked
  5601  00368E  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5602  003690  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5603  003692  D7DF               	goto	l6002
  5604  003694                     l6012:
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;RTC.c: 39: }
  5608                           ;RTC.c: 40: I2C_Master_Stop();
  5609  003694  EC1B  F022         	call	_I2C_Master_Stop	;wreg free
  5610                           
  5611                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5612  003698  8EF2               	bsf	intcon,7,c	;volatile
  5613  00369A  0012               	return		;funcret
  5614  00369C                     __end_of_loadRTC:
  5615                           	opt stack 0
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           intcon	equ	0xFF2
  5623                           intcon2	equ	0xFF1
  5624                           intcon3	equ	0xFF0
  5625                           postinc0	equ	0xFEE
  5626                           wreg	equ	0xFE8
  5627                           postdec1	equ	0xFE5
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           postinc2	equ	0xFDE
  5631                           postdec2	equ	0xFDD
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function _I2C_Master_Init *****************
  5637 ;; Defined at:
  5638 ;;		line 15 in file "I2C.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;  c               4   13[BANK0 ] const unsigned long 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, status,0, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5652 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;Total ram usage:        8 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    8
  5659 ;; This function calls:
  5660 ;;		___lldiv
  5661 ;; This function is called by:
  5662 ;;		_loadRTC
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           	psect	text17
  5667  003AC0                     __ptext17:
  5668                           	opt stack 0
  5669  003AC0                     _I2C_Master_Init:
  5670                           	opt stack 20
  5671                           
  5672                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5673                           
  5674                           ;incstack = 0
  5675  003AC0  0E00               	movlw	0
  5676  003AC2  6EC7               	movwf	4039,c	;volatile
  5677                           
  5678                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5679  003AC4  0E28               	movlw	40
  5680  003AC6  6EC6               	movwf	4038,c	;volatile
  5681                           
  5682                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5683  003AC8  0E00               	movlw	0
  5684  003ACA  6EC5               	movwf	4037,c	;volatile
  5685                           
  5686                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5687  003ACC  0E00               	movlw	0
  5688  003ACE  0100               	movlb	0	; () banked
  5689  003AD0  6F80               	movwf	___lldiv@dividend& (0+255),b
  5690  003AD2  0E48               	movlw	72
  5691  003AD4  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5692  003AD6  0EE8               	movlw	232
  5693  003AD8  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5694  003ADA  0E01               	movlw	1
  5695  003ADC  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5696  003ADE  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5697  003AE2  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5698  003AE6  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5699  003AEA  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5700  003AEE  0E02               	movlw	2
  5701  003AF0                     u4375:
  5702  003AF0  90D8               	bcf	status,0,c
  5703  003AF2  0100               	movlb	0	; () banked
  5704  003AF4  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5705  003AF6  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5706  003AF8  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5707  003AFA  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5708  003AFC  2EE8               	decfsz	wreg,f,c
  5709  003AFE  D7F8               	goto	u4375
  5710  003B00  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5711  003B04  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5712  003B08  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5713  003B0C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5714  003B10  ECB9  F019         	call	___lldiv	;wreg free
  5715  003B14  0100               	movlb	0	; () banked
  5716  003B16  0580               	decf	?___lldiv& (0+255),w,b
  5717  003B18  6EC8               	movwf	4040,c	;volatile
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;I2C.c: 22: TRISC3 = 1;
  5721  003B1A  8694               	bsf	3988,3,c	;volatile
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;I2C.c: 23: TRISC4 = 1;
  5725  003B1C  8894               	bsf	3988,4,c	;volatile
  5726                           
  5727                           ; BSR set to: 0
  5728  003B1E  0012               	return		;funcret
  5729  003B20                     __end_of_I2C_Master_Init:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           intcon2	equ	0xFF1
  5739                           intcon3	equ	0xFF0
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           postdec1	equ	0xFE5
  5743                           fsr1l	equ	0xFE1
  5744                           indf2	equ	0xFDF
  5745                           postinc2	equ	0xFDE
  5746                           postdec2	equ	0xFDD
  5747                           fsr2h	equ	0xFDA
  5748                           fsr2l	equ	0xFD9
  5749                           status	equ	0xFD8
  5750                           
  5751 ;; *************** function ___lldiv *****************
  5752 ;; Defined at:
  5753 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;  dividend        4    0[BANK0 ] unsigned long 
  5756 ;;  divisor         4    4[BANK0 ] unsigned long 
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  quotient        4    8[BANK0 ] unsigned long 
  5759 ;;  counter         1   12[BANK0 ] unsigned char 
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  4    0[BANK0 ] unsigned long 
  5762 ;; Registers used:
  5763 ;;		wreg, status,2, status,0
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5769 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;Total ram usage:       13 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:    7
  5776 ;; This function calls:
  5777 ;;		Nothing
  5778 ;; This function is called by:
  5779 ;;		_I2C_Master_Init
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text18
  5784  003372                     __ptext18:
  5785                           	opt stack 0
  5786  003372                     ___lldiv:
  5787                           	opt stack 20
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;incstack = 0
  5791  003372  0E00               	movlw	0
  5792  003374  0100               	movlb	0	; () banked
  5793  003376  6F88               	movwf	___lldiv@quotient& (0+255),b
  5794  003378  0E00               	movlw	0
  5795  00337A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5796  00337C  0E00               	movlw	0
  5797  00337E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5798  003380  0E00               	movlw	0
  5799  003382  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5800                           
  5801                           ; BSR set to: 0
  5802  003384  0100               	movlb	0	; () banked
  5803  003386  5184               	movf	___lldiv@divisor& (0+255),w,b
  5804  003388  0100               	movlb	0	; () banked
  5805  00338A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5806  00338C  0100               	movlb	0	; () banked
  5807  00338E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5808  003390  0100               	movlb	0	; () banked
  5809  003392  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5810  003394  B4D8               	btfsc	status,2,c
  5811  003396  D042               	goto	l1618
  5812                           
  5813                           ; BSR set to: 0
  5814  003398  0E01               	movlw	1
  5815  00339A  0100               	movlb	0	; () banked
  5816  00339C  6F8C               	movwf	___lldiv@counter& (0+255),b
  5817  00339E  D008               	goto	l5442
  5818  0033A0                     l5440:
  5819                           
  5820                           ; BSR set to: 0
  5821  0033A0  0100               	movlb	0	; () banked
  5822  0033A2  90D8               	bcf	status,0,c
  5823  0033A4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5824  0033A6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5825  0033A8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5826  0033AA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5827  0033AC  0100               	movlb	0	; () banked
  5828  0033AE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5829  0033B0                     l5442:
  5830                           
  5831                           ; BSR set to: 0
  5832  0033B0  0100               	movlb	0	; () banked
  5833  0033B2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5834  0033B4  D7F5               	goto	l5440
  5835  0033B6                     l5444:
  5836                           
  5837                           ; BSR set to: 0
  5838  0033B6  0100               	movlb	0	; () banked
  5839  0033B8  90D8               	bcf	status,0,c
  5840  0033BA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5841  0033BC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5842  0033BE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5843  0033C0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5844                           
  5845                           ; BSR set to: 0
  5846  0033C2  0100               	movlb	0	; () banked
  5847  0033C4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5848  0033C6  0100               	movlb	0	; () banked
  5849  0033C8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5850  0033CA  0100               	movlb	0	; () banked
  5851  0033CC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5852  0033CE  0100               	movlb	0	; () banked
  5853  0033D0  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5854  0033D2  0100               	movlb	0	; () banked
  5855  0033D4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5856  0033D6  0100               	movlb	0	; () banked
  5857  0033D8  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5858  0033DA  0100               	movlb	0	; () banked
  5859  0033DC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5860  0033DE  0100               	movlb	0	; () banked
  5861  0033E0  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5862  0033E2  A0D8               	btfss	status,0,c
  5863  0033E4  D012               	goto	l5452
  5864                           
  5865                           ; BSR set to: 0
  5866  0033E6  0100               	movlb	0	; () banked
  5867  0033E8  5184               	movf	___lldiv@divisor& (0+255),w,b
  5868  0033EA  0100               	movlb	0	; () banked
  5869  0033EC  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5870  0033EE  0100               	movlb	0	; () banked
  5871  0033F0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5872  0033F2  0100               	movlb	0	; () banked
  5873  0033F4  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5874  0033F6  0100               	movlb	0	; () banked
  5875  0033F8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5876  0033FA  0100               	movlb	0	; () banked
  5877  0033FC  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5878  0033FE  0100               	movlb	0	; () banked
  5879  003400  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5880  003402  0100               	movlb	0	; () banked
  5881  003404  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5882                           
  5883                           ; BSR set to: 0
  5884  003406  0100               	movlb	0	; () banked
  5885  003408  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5886  00340A                     l5452:
  5887                           
  5888                           ; BSR set to: 0
  5889  00340A  0100               	movlb	0	; () banked
  5890  00340C  90D8               	bcf	status,0,c
  5891  00340E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5892  003410  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5893  003412  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5894  003414  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5895                           
  5896                           ; BSR set to: 0
  5897  003416  0100               	movlb	0	; () banked
  5898  003418  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5899  00341A  D7CD               	goto	l5444
  5900  00341C                     l1618:
  5901                           
  5902                           ; BSR set to: 0
  5903  00341C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5904  003420  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5905  003424  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5906  003428  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5907                           
  5908                           ; BSR set to: 0
  5909  00342C  0012               	return		;funcret
  5910  00342E                     __end_of___lldiv:
  5911                           	opt stack 0
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           intcon2	equ	0xFF1
  5920                           intcon3	equ	0xFF0
  5921                           postinc0	equ	0xFEE
  5922                           wreg	equ	0xFE8
  5923                           postdec1	equ	0xFE5
  5924                           fsr1l	equ	0xFE1
  5925                           indf2	equ	0xFDF
  5926                           postinc2	equ	0xFDE
  5927                           postdec2	equ	0xFDD
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function _change_state_to_menu_start *****************
  5933 ;; Defined at:
  5934 ;;		line 472 in file "UI.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;		None
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      void 
  5941 ;; Registers used:
  5942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;Total ram usage:        0 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:   11
  5955 ;; This function calls:
  5956 ;;		_lcdInst
  5957 ;;		_printRTC
  5958 ;;		_printf
  5959 ;; This function is called by:
  5960 ;;		_initUI
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text19
  5965  0041B0                     __ptext19:
  5966                           	opt stack 0
  5967  0041B0                     _change_state_to_menu_start:
  5968                           	opt stack 18
  5969                           
  5970                           ;UI.c: 473: cur_state = 0;
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;incstack = 0
  5974  0041B0  0E00               	movlw	0
  5975  0041B2  0100               	movlb	0	; () banked
  5976  0041B4  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5977  0041B6  0E00               	movlw	0
  5978  0041B8  6FDE               	movwf	_cur_state& (0+255),b
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;UI.c: 475: lcdInst(0b10000000);;
  5982  0041BA  0E80               	movlw	128
  5983  0041BC  ECF9  F021         	call	_lcdInst
  5984                           
  5985                           ;UI.c: 476: printRTC();
  5986  0041C0  ECD7  F00D         	call	_printRTC	;wreg free
  5987                           
  5988                           ;UI.c: 477: lcdInst(0b11000000);;
  5989  0041C4  0EC0               	movlw	192
  5990  0041C6  ECF9  F021         	call	_lcdInst
  5991                           
  5992                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5993  0041CA  0E20               	movlw	low STR_30
  5994  0041CC  0100               	movlb	0	; () banked
  5995  0041CE  6F8E               	movwf	printf@f& (0+255),b
  5996  0041D0  0EFE               	movlw	high STR_30
  5997  0041D2  0100               	movlb	0	; () banked
  5998  0041D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5999  0041D6  EC9C  F008         	call	_printf	;wreg free
  6000  0041DA  0012               	return		;funcret
  6001  0041DC                     __end_of_change_state_to_menu_start:
  6002                           	opt stack 0
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           intcon	equ	0xFF2
  6010                           intcon2	equ	0xFF1
  6011                           intcon3	equ	0xFF0
  6012                           postinc0	equ	0xFEE
  6013                           wreg	equ	0xFE8
  6014                           postdec1	equ	0xFE5
  6015                           fsr1l	equ	0xFE1
  6016                           indf2	equ	0xFDF
  6017                           postinc2	equ	0xFDE
  6018                           postdec2	equ	0xFDD
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function _initTime *****************
  6024 ;; Defined at:
  6025 ;;		line 17 in file "RTC.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;  s               1    wreg     unsigned char 
  6028 ;;  m               1    0[BANK0 ] unsigned char 
  6029 ;;  h               1    1[BANK0 ] unsigned char 
  6030 ;;  w               1    2[BANK0 ] unsigned char 
  6031 ;;  DD              1    3[BANK0 ] unsigned char 
  6032 ;;  MM              1    4[BANK0 ] unsigned char 
  6033 ;;  YY              1    5[BANK0 ] unsigned char 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  s               1    6[BANK0 ] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:        7 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    7
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_main
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text20
  6060  004338                     __ptext20:
  6061                           	opt stack 0
  6062  004338                     _initTime:
  6063                           	opt stack 23
  6064                           
  6065                           ;incstack = 0
  6066                           ;initTime@s stored from wreg
  6067  004338  0100               	movlb	0	; () banked
  6068  00433A  6F86               	movwf	initTime@s& (0+255),b
  6069                           
  6070                           ;RTC.c: 19: time[0] = s;
  6071  00433C  C086  F124         	movff	initTime@s,_time
  6072                           
  6073                           ;RTC.c: 20: time[1] = m;
  6074  004340  C080  F125         	movff	initTime@m,_time+1
  6075                           
  6076                           ;RTC.c: 21: time[2] = h;
  6077  004344  C081  F126         	movff	initTime@h,_time+2
  6078                           
  6079                           ;RTC.c: 22: time[3] = w;
  6080  004348  C082  F127         	movff	initTime@w,_time+3
  6081                           
  6082                           ;RTC.c: 23: time[4] = DD;
  6083  00434C  C083  F128         	movff	initTime@DD,_time+4
  6084                           
  6085                           ;RTC.c: 24: time[5] = MM;
  6086  004350  C084  F129         	movff	initTime@MM,_time+5
  6087                           
  6088                           ;RTC.c: 25: time[6] = YY;
  6089  004354  C085  F12A         	movff	initTime@YY,_time+6
  6090  004358  0012               	return		;funcret
  6091  00435A                     __end_of_initTime:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           intcon	equ	0xFF2
  6100                           intcon2	equ	0xFF1
  6101                           intcon3	equ	0xFF0
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function _initLCD *****************
  6114 ;; Defined at:
  6115 ;;		line 48 in file "lcd.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;		None
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      void 
  6122 ;; Registers used:
  6123 ;;		wreg, status,2, status,0, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;Total ram usage:        1 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    9
  6136 ;; This function calls:
  6137 ;;		_lcdInst
  6138 ;; This function is called by:
  6139 ;;		_main
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           	psect	text21
  6144  003E0E                     __ptext21:
  6145                           	opt stack 0
  6146  003E0E                     _initLCD:
  6147                           	opt stack 21
  6148                           
  6149                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6150                           
  6151                           ;incstack = 0
  6152  003E0E  0E9C               	movlw	156
  6153  003E10  0100               	movlb	0	; () banked
  6154  003E12  6F83               	movwf	??_initLCD& (0+255),b
  6155  003E14  0ED7               	movlw	215
  6156  003E16                     u7057:
  6157  003E16  2EE8               	decfsz	wreg,f,c
  6158  003E18  D7FE               	bra	u7057
  6159  003E1A  2F83               	decfsz	??_initLCD& (0+255),f,b
  6160  003E1C  D7FC               	bra	u7057
  6161                           
  6162                           ;lcd.c: 50: lcdInst(0b00110011);
  6163  003E1E  0E33               	movlw	51
  6164  003E20  ECF9  F021         	call	_lcdInst
  6165                           
  6166                           ;lcd.c: 51: lcdInst(0b00110010);
  6167  003E24  0E32               	movlw	50
  6168  003E26  ECF9  F021         	call	_lcdInst
  6169                           
  6170                           ;lcd.c: 53: lcdInst(0b00101000);
  6171  003E2A  0E28               	movlw	40
  6172  003E2C  ECF9  F021         	call	_lcdInst
  6173                           
  6174                           ;lcd.c: 54: lcdInst(0b00001100);
  6175  003E30  0E0C               	movlw	12
  6176  003E32  ECF9  F021         	call	_lcdInst
  6177                           
  6178                           ;lcd.c: 55: lcdInst(0b00000110);
  6179  003E36  0E06               	movlw	6
  6180  003E38  ECF9  F021         	call	_lcdInst
  6181                           
  6182                           ;lcd.c: 56: lcdInst(0b00000001);
  6183  003E3C  0E01               	movlw	1
  6184  003E3E  ECF9  F021         	call	_lcdInst
  6185                           
  6186                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6187  003E42  0E9C               	movlw	156
  6188  003E44  0100               	movlb	0	; () banked
  6189  003E46  6F83               	movwf	??_initLCD& (0+255),b
  6190  003E48  0ED7               	movlw	215
  6191  003E4A                     u7067:
  6192  003E4A  2EE8               	decfsz	wreg,f,c
  6193  003E4C  D7FE               	bra	u7067
  6194  003E4E  2F83               	decfsz	??_initLCD& (0+255),f,b
  6195  003E50  D7FC               	bra	u7067
  6196  003E52  0012               	return		;funcret
  6197  003E54                     __end_of_initLCD:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           intcon2	equ	0xFF1
  6207                           intcon3	equ	0xFF0
  6208                           postinc0	equ	0xFEE
  6209                           wreg	equ	0xFE8
  6210                           postdec1	equ	0xFE5
  6211                           fsr1l	equ	0xFE1
  6212                           indf2	equ	0xFDF
  6213                           postinc2	equ	0xFDE
  6214                           postdec2	equ	0xFDD
  6215                           fsr2h	equ	0xFDA
  6216                           fsr2l	equ	0xFD9
  6217                           status	equ	0xFD8
  6218                           
  6219 ;; *************** function _UI *****************
  6220 ;; Defined at:
  6221 ;;		line 74 in file "UI.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;		None
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  i               1   73[BANK0 ] unsigned char 
  6226 ;;  i               1   85[BANK0 ] unsigned char 
  6227 ;;  i               1   84[BANK0 ] unsigned char 
  6228 ;;  i               1   83[BANK0 ] unsigned char 
  6229 ;;  i               1   82[BANK0 ] unsigned char 
  6230 ;;  i               1   81[BANK0 ] unsigned char 
  6231 ;;  i               1   80[BANK0 ] unsigned char 
  6232 ;;  i               1   79[BANK0 ] unsigned char 
  6233 ;;  i               1   78[BANK0 ] unsigned char 
  6234 ;;  i               1   77[BANK0 ] unsigned char 
  6235 ;;  i               1   76[BANK0 ] unsigned char 
  6236 ;;  i               1   75[BANK0 ] unsigned char 
  6237 ;;  i               1   74[BANK0 ] unsigned char 
  6238 ;;  month           4   86[BANK0 ] unsigned char [4]
  6239 ;;  i               1   72[BANK0 ] unsigned char 
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;Total ram usage:       22 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:   11
  6256 ;; This function calls:
  6257 ;;		___awdiv
  6258 ;;		___awmod
  6259 ;;		_change_state_to_menu_12
  6260 ;;		_change_state_to_menu_22
  6261 ;;		_lcdInst
  6262 ;;		_printRTC
  6263 ;;		_printf
  6264 ;;		_strcpy
  6265 ;; This function is called by:
  6266 ;;		_main
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           	psect	text22
  6271  000012                     __ptext22:
  6272                           	opt stack 0
  6273  000012                     _UI:
  6274                           	opt stack 19
  6275                           
  6276                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  6277                           
  6278                           ;incstack = 0
  6279  000012  0E02               	movlw	2
  6280  000014  0100               	movlb	0	; () banked
  6281  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  6282  000018  A4D8               	btfss	status,2,c
  6283  00001A  D075               	goto	l7096
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6287  00001C  0E01               	movlw	1
  6288  00001E  ECF9  F021         	call	_lcdInst
  6289  000022  0E68               	movlw	104
  6290  000024  0100               	movlb	0	; () banked
  6291  000026  6FC4               	movwf	??_UI& (0+255),b
  6292  000028  0EE4               	movlw	228
  6293  00002A                     u7077:
  6294  00002A  2EE8               	decfsz	wreg,f,c
  6295  00002C  D7FE               	bra	u7077
  6296  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  6297  000030  D7FC               	bra	u7077
  6298  000032  F000               	nop	
  6299                           
  6300                           ;UI.c: 77: lcdInst(0b10000000);;
  6301  000034  0E80               	movlw	128
  6302  000036  ECF9  F021         	call	_lcdInst
  6303                           
  6304                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  6305  00003A  0EDD               	movlw	low STR_1
  6306  00003C  0100               	movlb	0	; () banked
  6307  00003E  6F8E               	movwf	printf@f& (0+255),b
  6308  000040  0EFB               	movlw	high STR_1
  6309  000042  0100               	movlb	0	; () banked
  6310  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  6311  000046  0E01               	movlw	1
  6312  000048  0100               	movlb	0	; () banked
  6313  00004A  25FD               	addwf	_sel& (0+255),w,b
  6314  00004C  0100               	movlb	0	; () banked
  6315  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  6316  000050  0100               	movlb	0	; () banked
  6317  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  6318  000054  0E00               	movlw	0
  6319  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6320  000058  EC9C  F008         	call	_printf	;wreg free
  6321                           
  6322                           ;UI.c: 79: lcdInst(0b11000000);;
  6323  00005C  0EC0               	movlw	192
  6324  00005E  ECF9  F021         	call	_lcdInst
  6325                           
  6326                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6327  000062  0E0E               	movlw	14
  6328  000064  0100               	movlb	0	; () banked
  6329  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6330  000068  0E10               	movlw	16
  6331  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  6332  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  6333  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6334  000074  EC6C  F01A         	call	___awmod	;wreg free
  6335  000078  C080  F0C6         	movff	?___awmod,_UI$2234
  6336  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2234+1
  6337                           
  6338                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6339  000080  0E2E               	movlw	low STR_2
  6340  000082  0100               	movlb	0	; () banked
  6341  000084  6F8E               	movwf	printf@f& (0+255),b
  6342  000086  0EFF               	movlw	high STR_2
  6343  000088  0100               	movlb	0	; () banked
  6344  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6345  00008C  0E0E               	movlw	14
  6346  00008E  0100               	movlb	0	; () banked
  6347  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6348  000092  0E10               	movlw	16
  6349  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  6350  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  6351  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6352  00009E  EC6C  F01A         	call	___awmod	;wreg free
  6353  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6354  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6355  0000AA  0E00               	movlw	0
  6356  0000AC  0100               	movlb	0	; () banked
  6357  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6358  0000B0  0E3C               	movlw	60
  6359  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6360  0000B4  EC5A  F019         	call	___awdiv	;wreg free
  6361  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  6362  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6363  0000C0  C0C6  F080         	movff	_UI$2234,___awmod@dividend
  6364  0000C4  C0C7  F081         	movff	_UI$2234+1,___awmod@dividend+1
  6365  0000C8  0E00               	movlw	0
  6366  0000CA  0100               	movlb	0	; () banked
  6367  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6368  0000CE  0E3C               	movlw	60
  6369  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6370  0000D2  EC6C  F01A         	call	___awmod	;wreg free
  6371  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  6372  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6373  0000DE  EC9C  F008         	call	_printf	;wreg free
  6374                           
  6375                           ;UI.c: 81: machine_state = UI_state;
  6376  0000E2  0E00               	movlw	0
  6377  0000E4  0100               	movlb	0	; () banked
  6378  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  6379  0000E8                     l177:
  6380  0000E8  A281               	btfss	3969,1,c	;volatile
  6381  0000EA  D7FE               	goto	l177
  6382                           
  6383                           ;UI.c: 84: }
  6384                           ;UI.c: 85: if(cur_state==12){
  6385  0000EC  0E0C               	movlw	12
  6386  0000EE  0100               	movlb	0	; () banked
  6387  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  6388  0000F2  0100               	movlb	0	; () banked
  6389  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6390  0000F6  A4D8               	btfss	status,2,c
  6391  0000F8  D003               	goto	l7094
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;UI.c: 86: change_state_to_menu_12();
  6395  0000FA  EC67  F01F         	call	_change_state_to_menu_12	;wreg free
  6396                           
  6397                           ;UI.c: 87: }
  6398  0000FE  D3D5               	goto	l7416
  6399  000100                     l7094:
  6400                           
  6401                           ;UI.c: 88: else{
  6402                           ;UI.c: 89: change_state_to_menu_22();
  6403  000100  EC4B  F01F         	call	_change_state_to_menu_22	;wreg free
  6404                           
  6405                           ;UI.c: 90: }
  6406                           ;UI.c: 91: }
  6407  000104  D3D2               	goto	l7416
  6408  000106                     l7096:
  6409                           
  6410                           ;UI.c: 92: else if(cur_state == 0){
  6411  000106  0100               	movlb	0	; () banked
  6412  000108  51DE               	movf	_cur_state& (0+255),w,b
  6413  00010A  0100               	movlb	0	; () banked
  6414  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6415  00010E  A4D8               	btfss	status,2,c
  6416  000110  D3CC               	goto	l7416
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6420  000112  0E00               	movlw	0
  6421  000114  0100               	movlb	0	; () banked
  6422  000116  6FC8               	movwf	UI@i& (0+255),b
  6423  000118                     l7100:
  6424                           
  6425                           ; BSR set to: 0
  6426  000118  0E63               	movlw	99
  6427  00011A  0100               	movlb	0	; () banked
  6428  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6429  00011E  D001               	goto	l7104
  6430  000120  D00C               	goto	l7108
  6431  000122                     l7104:
  6432                           
  6433                           ; BSR set to: 0
  6434  000122  0E68               	movlw	104
  6435  000124  0100               	movlb	0	; () banked
  6436  000126  6FC4               	movwf	??_UI& (0+255),b
  6437  000128  0EE4               	movlw	228
  6438  00012A                     u7087:
  6439  00012A  2EE8               	decfsz	wreg,f,c
  6440  00012C  D7FE               	bra	u7087
  6441  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6442  000130  D7FC               	bra	u7087
  6443  000132  F000               	nop	
  6444  000134  0100               	movlb	0	; () banked
  6445  000136  2BC8               	incf	UI@i& (0+255),f,b
  6446  000138  D7EF               	goto	l7100
  6447  00013A                     l7108:
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;UI.c: 94: if(cur_state == 0){
  6451  00013A  0100               	movlb	0	; () banked
  6452  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6453  00013E  0100               	movlb	0	; () banked
  6454  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6455  000142  A4D8               	btfss	status,2,c
  6456  000144  D3B2               	goto	l7416
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;UI.c: 95: printRTC();
  6460  000146  ECD7  F00D         	call	_printRTC	;wreg free
  6461                           
  6462                           ;UI.c: 96: }
  6463                           ;UI.c: 97: }
  6464                           ;UI.c: 98: while(logstate){
  6465  00014A  D3AF               	goto	l7416
  6466  00014C                     l7112:
  6467                           
  6468                           ;UI.c: 100: if(!log_completion){
  6469  00014C  0100               	movlb	0	; () banked
  6470  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6471  000150  0100               	movlb	0	; () banked
  6472  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6473  000154  A4D8               	btfss	status,2,c
  6474  000156  D041               	goto	l7142
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6478  000158  0E01               	movlw	1
  6479  00015A  ECF9  F021         	call	_lcdInst
  6480  00015E  0E68               	movlw	104
  6481  000160  0100               	movlb	0	; () banked
  6482  000162  6FC4               	movwf	??_UI& (0+255),b
  6483  000164  0EE4               	movlw	228
  6484  000166                     u7097:
  6485  000166  2EE8               	decfsz	wreg,f,c
  6486  000168  D7FE               	bra	u7097
  6487  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6488  00016C  D7FC               	bra	u7097
  6489  00016E  F000               	nop	
  6490                           
  6491                           ;UI.c: 102: lcdInst(0b10000000);;
  6492  000170  0E80               	movlw	128
  6493  000172  ECF9  F021         	call	_lcdInst
  6494                           
  6495                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6496  000176  0ECB               	movlw	low STR_3
  6497  000178  0100               	movlb	0	; () banked
  6498  00017A  6F8E               	movwf	printf@f& (0+255),b
  6499  00017C  0EFB               	movlw	high STR_3
  6500  00017E  0100               	movlb	0	; () banked
  6501  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6502  000182  C0E6  F090         	movff	_log,?_printf+2
  6503  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6504  00018A  EC9C  F008         	call	_printf	;wreg free
  6505                           
  6506                           ;UI.c: 104: lcdInst(0b11000000);;
  6507  00018E  0EC0               	movlw	192
  6508  000190  ECF9  F021         	call	_lcdInst
  6509                           
  6510                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6511  000194  0E51               	movlw	low STR_4
  6512  000196  0100               	movlb	0	; () banked
  6513  000198  6F8E               	movwf	printf@f& (0+255),b
  6514  00019A  0EFE               	movlw	high STR_4
  6515  00019C  0100               	movlb	0	; () banked
  6516  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6517  0001A0  EC9C  F008         	call	_printf	;wreg free
  6518  0001A4                     l7126:
  6519  0001A4  0E00               	movlw	0
  6520  0001A6  0100               	movlb	0	; () banked
  6521  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6522  0001AA                     l7128:
  6523                           
  6524                           ; BSR set to: 0
  6525  0001AA  0E63               	movlw	99
  6526  0001AC  0100               	movlb	0	; () banked
  6527  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6528  0001B0  D001               	goto	l7132
  6529  0001B2  D00C               	goto	l7136
  6530  0001B4                     l7132:
  6531                           
  6532                           ; BSR set to: 0
  6533  0001B4  0E68               	movlw	104
  6534  0001B6  0100               	movlb	0	; () banked
  6535  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6536  0001BA  0EE4               	movlw	228
  6537  0001BC                     u7107:
  6538  0001BC  2EE8               	decfsz	wreg,f,c
  6539  0001BE  D7FE               	bra	u7107
  6540  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6541  0001C2  D7FC               	bra	u7107
  6542  0001C4  F000               	nop	
  6543  0001C6  0100               	movlb	0	; () banked
  6544  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6545  0001CA  D7EF               	goto	l7128
  6546  0001CC                     l7136:
  6547                           
  6548                           ; BSR set to: 0
  6549  0001CC  0100               	movlb	0	; () banked
  6550  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6551  0001D0  0100               	movlb	0	; () banked
  6552  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6553  0001D4  B4D8               	btfsc	status,2,c
  6554  0001D6  0012               	return	
  6555  0001D8  D7E5               	goto	l7126
  6556  0001DA                     l7142:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;UI.c: 109: else{
  6560                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6561  0001DA  0E01               	movlw	1
  6562  0001DC  ECF9  F021         	call	_lcdInst
  6563  0001E0  0E68               	movlw	104
  6564  0001E2  0100               	movlb	0	; () banked
  6565  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6566  0001E6  0EE4               	movlw	228
  6567  0001E8                     u7117:
  6568  0001E8  2EE8               	decfsz	wreg,f,c
  6569  0001EA  D7FE               	bra	u7117
  6570  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6571  0001EE  D7FC               	bra	u7117
  6572  0001F0  F000               	nop	
  6573                           
  6574                           ;UI.c: 111: lcdInst(0b10000000);;
  6575  0001F2  0E80               	movlw	128
  6576  0001F4  ECF9  F021         	call	_lcdInst
  6577                           
  6578                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6579  0001F8  0ECB               	movlw	low STR_3
  6580  0001FA  0100               	movlb	0	; () banked
  6581  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6582  0001FE  0EFB               	movlw	high STR_3
  6583  000200  0100               	movlb	0	; () banked
  6584  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6585  000204  C0E6  F090         	movff	_log,?_printf+2
  6586  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6587  00020C  EC9C  F008         	call	_printf	;wreg free
  6588                           
  6589                           ;UI.c: 113: lcdInst(0b11000000);;
  6590  000210  0EC0               	movlw	192
  6591  000212  ECF9  F021         	call	_lcdInst
  6592                           
  6593                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6594  000216  0E0F               	movlw	low STR_6
  6595  000218  0100               	movlb	0	; () banked
  6596  00021A  6F8E               	movwf	printf@f& (0+255),b
  6597  00021C  0EFE               	movlw	high STR_6
  6598  00021E  0100               	movlb	0	; () banked
  6599  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6600  000222  EC9C  F008         	call	_printf	;wreg free
  6601                           
  6602                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6603  000226  0E00               	movlw	0
  6604  000228  0100               	movlb	0	; () banked
  6605  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6606  00022C                     l7156:
  6607                           
  6608                           ; BSR set to: 0
  6609  00022C  0E63               	movlw	99
  6610  00022E  0100               	movlb	0	; () banked
  6611  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6612  000232  D001               	goto	l7160
  6613  000234  D00C               	goto	l7164
  6614  000236                     l7160:
  6615                           
  6616                           ; BSR set to: 0
  6617  000236  0E68               	movlw	104
  6618  000238  0100               	movlb	0	; () banked
  6619  00023A  6FC4               	movwf	??_UI& (0+255),b
  6620  00023C  0EE4               	movlw	228
  6621  00023E                     u7127:
  6622  00023E  2EE8               	decfsz	wreg,f,c
  6623  000240  D7FE               	bra	u7127
  6624  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6625  000244  D7FC               	bra	u7127
  6626  000246  F000               	nop	
  6627  000248  0100               	movlb	0	; () banked
  6628  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6629  00024C  D7EF               	goto	l7156
  6630  00024E                     l7164:
  6631                           
  6632                           ; BSR set to: 0
  6633  00024E  0100               	movlb	0	; () banked
  6634  000250  51F6               	movf	_logstate& (0+255),w,b
  6635  000252  0100               	movlb	0	; () banked
  6636  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6637  000256  B4D8               	btfsc	status,2,c
  6638  000258  0012               	return	
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6642                           
  6643                           ; BSR set to: 0
  6644                           
  6645                           ; BSR set to: 0
  6646  00025A  0E00               	movlw	0
  6647  00025C  0100               	movlb	0	; () banked
  6648  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6649  000260                     l7170:
  6650                           
  6651                           ; BSR set to: 0
  6652  000260  0E63               	movlw	99
  6653  000262  0100               	movlb	0	; () banked
  6654  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6655  000266  D001               	goto	l7174
  6656  000268  D00C               	goto	l7178
  6657  00026A                     l7174:
  6658                           
  6659                           ; BSR set to: 0
  6660  00026A  0E68               	movlw	104
  6661  00026C  0100               	movlb	0	; () banked
  6662  00026E  6FC4               	movwf	??_UI& (0+255),b
  6663  000270  0EE4               	movlw	228
  6664  000272                     u7137:
  6665  000272  2EE8               	decfsz	wreg,f,c
  6666  000274  D7FE               	bra	u7137
  6667  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6668  000278  D7FC               	bra	u7137
  6669  00027A  F000               	nop	
  6670  00027C  0100               	movlb	0	; () banked
  6671  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6672  000280  D7EF               	goto	l7170
  6673  000282                     l7178:
  6674                           
  6675                           ; BSR set to: 0
  6676  000282  0100               	movlb	0	; () banked
  6677  000284  51F6               	movf	_logstate& (0+255),w,b
  6678  000286  0100               	movlb	0	; () banked
  6679  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6680  00028A  B4D8               	btfsc	status,2,c
  6681  00028C  0012               	return	
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6685                           
  6686                           ; BSR set to: 0
  6687                           
  6688                           ; BSR set to: 0
  6689  00028E  0E01               	movlw	1
  6690  000290  ECF9  F021         	call	_lcdInst
  6691  000294  0E68               	movlw	104
  6692  000296  0100               	movlb	0	; () banked
  6693  000298  6FC4               	movwf	??_UI& (0+255),b
  6694  00029A  0EE4               	movlw	228
  6695  00029C                     u7147:
  6696  00029C  2EE8               	decfsz	wreg,f,c
  6697  00029E  D7FE               	bra	u7147
  6698  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6699  0002A2  D7FC               	bra	u7147
  6700  0002A4  F000               	nop	
  6701                           
  6702                           ;UI.c: 120: lcdInst(0b10000000);;
  6703  0002A6  0E80               	movlw	128
  6704  0002A8  ECF9  F021         	call	_lcdInst
  6705                           
  6706                           ;UI.c: 121: printf("START:");
  6707  0002AC  0EC4               	movlw	low STR_7
  6708  0002AE  0100               	movlb	0	; () banked
  6709  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6710  0002B2  0EFF               	movlw	high STR_7
  6711  0002B4  0100               	movlb	0	; () banked
  6712  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6713  0002B8  EC9C  F008         	call	_printf	;wreg free
  6714                           
  6715                           ;UI.c: 122: lcdInst(0b11000000);;
  6716  0002BC  0EC0               	movlw	192
  6717  0002BE  ECF9  F021         	call	_lcdInst
  6718                           
  6719                           ;UI.c: 123: char month[] = "MMM";
  6720  0002C2  C12D  F0D6         	movff	UI@F3222,UI@month
  6721  0002C6  C12E  F0D7         	movff	UI@F3222+1,UI@month+1
  6722  0002CA  C12F  F0D8         	movff	UI@F3222+2,UI@month+2
  6723  0002CE  C130  F0D9         	movff	UI@F3222+3,UI@month+3
  6724                           
  6725                           ;UI.c: 124: switch(log_startTime[5]){
  6726  0002D2  D0C3               	goto	l7222
  6727  0002D4                     l7194:
  6728                           
  6729                           ;UI.c: 126: strcpy(month, "JAN");
  6730  0002D4  0ED6               	movlw	low UI@month
  6731  0002D6  0100               	movlb	0	; () banked
  6732  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6733  0002DA  0E00               	movlw	high UI@month
  6734  0002DC  0100               	movlb	0	; () banked
  6735  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6736  0002E0  0EDB               	movlw	low STR_8
  6737  0002E2  0100               	movlb	0	; () banked
  6738  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6739  0002E6  0EFF               	movlw	high STR_8
  6740  0002E8  0100               	movlb	0	; () banked
  6741  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6742  0002EC  EC83  F01F         	call	_strcpy	;wreg free
  6743                           
  6744                           ;UI.c: 127: break;
  6745  0002F0  D0E6               	goto	l7224
  6746  0002F2                     l7196:
  6747                           
  6748                           ;UI.c: 129: strcpy(month, "FEB");
  6749  0002F2  0ED6               	movlw	low UI@month
  6750  0002F4  0100               	movlb	0	; () banked
  6751  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6752  0002F8  0E00               	movlw	high UI@month
  6753  0002FA  0100               	movlb	0	; () banked
  6754  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6755  0002FE  0ECB               	movlw	low STR_9
  6756  000300  0100               	movlb	0	; () banked
  6757  000302  6F82               	movwf	strcpy@from& (0+255),b
  6758  000304  0EFF               	movlw	high STR_9
  6759  000306  0100               	movlb	0	; () banked
  6760  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6761  00030A  EC83  F01F         	call	_strcpy	;wreg free
  6762                           
  6763                           ;UI.c: 130: break;
  6764  00030E  D0D7               	goto	l7224
  6765  000310                     l7198:
  6766                           
  6767                           ;UI.c: 132: strcpy(month, "MAR");
  6768  000310  0ED6               	movlw	low UI@month
  6769  000312  0100               	movlb	0	; () banked
  6770  000314  6F80               	movwf	strcpy@to& (0+255),b
  6771  000316  0E00               	movlw	high UI@month
  6772  000318  0100               	movlb	0	; () banked
  6773  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6774  00031C  0EE7               	movlw	low STR_10
  6775  00031E  0100               	movlb	0	; () banked
  6776  000320  6F82               	movwf	strcpy@from& (0+255),b
  6777  000322  0EFF               	movlw	high STR_10
  6778  000324  0100               	movlb	0	; () banked
  6779  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6780  000328  EC83  F01F         	call	_strcpy	;wreg free
  6781                           
  6782                           ;UI.c: 133: break;
  6783  00032C  D0C8               	goto	l7224
  6784  00032E                     l7200:
  6785                           
  6786                           ;UI.c: 135: strcpy(month, "APR");
  6787  00032E  0ED6               	movlw	low UI@month
  6788  000330  0100               	movlb	0	; () banked
  6789  000332  6F80               	movwf	strcpy@to& (0+255),b
  6790  000334  0E00               	movlw	high UI@month
  6791  000336  0100               	movlb	0	; () banked
  6792  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6793  00033A  0EEB               	movlw	low STR_11
  6794  00033C  0100               	movlb	0	; () banked
  6795  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6796  000340  0EFF               	movlw	high STR_11
  6797  000342  0100               	movlb	0	; () banked
  6798  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6799  000346  EC83  F01F         	call	_strcpy	;wreg free
  6800                           
  6801                           ;UI.c: 136: break;
  6802  00034A  D0B9               	goto	l7224
  6803  00034C                     l7202:
  6804                           
  6805                           ;UI.c: 138: strcpy(month, "MAY");
  6806  00034C  0ED6               	movlw	low UI@month
  6807  00034E  0100               	movlb	0	; () banked
  6808  000350  6F80               	movwf	strcpy@to& (0+255),b
  6809  000352  0E00               	movlw	high UI@month
  6810  000354  0100               	movlb	0	; () banked
  6811  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6812  000358  0EFB               	movlw	low STR_12
  6813  00035A  0100               	movlb	0	; () banked
  6814  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6815  00035E  0EFF               	movlw	high STR_12
  6816  000360  0100               	movlb	0	; () banked
  6817  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6818  000364  EC83  F01F         	call	_strcpy	;wreg free
  6819                           
  6820                           ;UI.c: 139: break;
  6821  000368  D0AA               	goto	l7224
  6822  00036A                     l7204:
  6823                           
  6824                           ;UI.c: 141: strcpy(month, "JUN");
  6825  00036A  0ED6               	movlw	low UI@month
  6826  00036C  0100               	movlb	0	; () banked
  6827  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6828  000370  0E00               	movlw	high UI@month
  6829  000372  0100               	movlb	0	; () banked
  6830  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6831  000376  0EDF               	movlw	low STR_13
  6832  000378  0100               	movlb	0	; () banked
  6833  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6834  00037C  0EFF               	movlw	high STR_13
  6835  00037E  0100               	movlb	0	; () banked
  6836  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6837  000382  EC83  F01F         	call	_strcpy	;wreg free
  6838                           
  6839                           ;UI.c: 142: break;
  6840  000386  D09B               	goto	l7224
  6841  000388                     l7206:
  6842                           
  6843                           ;UI.c: 144: strcpy(month, "JUL");
  6844  000388  0ED6               	movlw	low UI@month
  6845  00038A  0100               	movlb	0	; () banked
  6846  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6847  00038E  0E00               	movlw	high UI@month
  6848  000390  0100               	movlb	0	; () banked
  6849  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6850  000394  0ED7               	movlw	low STR_14
  6851  000396  0100               	movlb	0	; () banked
  6852  000398  6F82               	movwf	strcpy@from& (0+255),b
  6853  00039A  0EFF               	movlw	high STR_14
  6854  00039C  0100               	movlb	0	; () banked
  6855  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6856  0003A0  EC83  F01F         	call	_strcpy	;wreg free
  6857                           
  6858                           ;UI.c: 145: break;
  6859  0003A4  D08C               	goto	l7224
  6860  0003A6                     l7208:
  6861                           
  6862                           ;UI.c: 147: strcpy(month, "AUG");
  6863  0003A6  0ED6               	movlw	low UI@month
  6864  0003A8  0100               	movlb	0	; () banked
  6865  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6866  0003AC  0E00               	movlw	high UI@month
  6867  0003AE  0100               	movlb	0	; () banked
  6868  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6869  0003B2  0ED3               	movlw	low STR_15
  6870  0003B4  0100               	movlb	0	; () banked
  6871  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6872  0003B8  0EFF               	movlw	high STR_15
  6873  0003BA  0100               	movlb	0	; () banked
  6874  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6875  0003BE  EC83  F01F         	call	_strcpy	;wreg free
  6876                           
  6877                           ;UI.c: 148: break;
  6878  0003C2  D07D               	goto	l7224
  6879  0003C4                     l7210:
  6880                           
  6881                           ;UI.c: 150: strcpy(month, "SEP");
  6882  0003C4  0ED6               	movlw	low UI@month
  6883  0003C6  0100               	movlb	0	; () banked
  6884  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6885  0003CA  0E00               	movlw	high UI@month
  6886  0003CC  0100               	movlb	0	; () banked
  6887  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6888  0003D0  0EE3               	movlw	low STR_16
  6889  0003D2  0100               	movlb	0	; () banked
  6890  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6891  0003D6  0EFF               	movlw	high STR_16
  6892  0003D8  0100               	movlb	0	; () banked
  6893  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6894  0003DC  EC83  F01F         	call	_strcpy	;wreg free
  6895                           
  6896                           ;UI.c: 151: break;
  6897  0003E0  D06E               	goto	l7224
  6898  0003E2                     l7212:
  6899                           
  6900                           ;UI.c: 153: strcpy(month, "OCT");
  6901  0003E2  0ED6               	movlw	low UI@month
  6902  0003E4  0100               	movlb	0	; () banked
  6903  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6904  0003E8  0E00               	movlw	high UI@month
  6905  0003EA  0100               	movlb	0	; () banked
  6906  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6907  0003EE  0EF3               	movlw	low STR_17
  6908  0003F0  0100               	movlb	0	; () banked
  6909  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6910  0003F4  0EFF               	movlw	high STR_17
  6911  0003F6  0100               	movlb	0	; () banked
  6912  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6913  0003FA  EC83  F01F         	call	_strcpy	;wreg free
  6914                           
  6915                           ;UI.c: 154: break;
  6916  0003FE  D05F               	goto	l7224
  6917  000400                     l7214:
  6918                           
  6919                           ;UI.c: 156: strcpy(month, "NOV");
  6920  000400  0ED6               	movlw	low UI@month
  6921  000402  0100               	movlb	0	; () banked
  6922  000404  6F80               	movwf	strcpy@to& (0+255),b
  6923  000406  0E00               	movlw	high UI@month
  6924  000408  0100               	movlb	0	; () banked
  6925  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6926  00040C  0EF7               	movlw	low STR_18
  6927  00040E  0100               	movlb	0	; () banked
  6928  000410  6F82               	movwf	strcpy@from& (0+255),b
  6929  000412  0EFF               	movlw	high STR_18
  6930  000414  0100               	movlb	0	; () banked
  6931  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6932  000418  EC83  F01F         	call	_strcpy	;wreg free
  6933                           
  6934                           ;UI.c: 157: break;
  6935  00041C  D050               	goto	l7224
  6936  00041E                     l7216:
  6937                           
  6938                           ;UI.c: 159: strcpy(month, "DEC");
  6939  00041E  0ED6               	movlw	low UI@month
  6940  000420  0100               	movlb	0	; () banked
  6941  000422  6F80               	movwf	strcpy@to& (0+255),b
  6942  000424  0E00               	movlw	high UI@month
  6943  000426  0100               	movlb	0	; () banked
  6944  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6945  00042A  0ECF               	movlw	low STR_19
  6946  00042C  0100               	movlb	0	; () banked
  6947  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6948  000430  0EFF               	movlw	high STR_19
  6949  000432  0100               	movlb	0	; () banked
  6950  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6951  000436  EC83  F01F         	call	_strcpy	;wreg free
  6952                           
  6953                           ;UI.c: 160: break;
  6954  00043A  D041               	goto	l7224
  6955  00043C                     l7218:
  6956                           
  6957                           ;UI.c: 162: strcpy(month, "ERR");
  6958  00043C  0ED6               	movlw	low UI@month
  6959  00043E  0100               	movlb	0	; () banked
  6960  000440  6F80               	movwf	strcpy@to& (0+255),b
  6961  000442  0E00               	movlw	high UI@month
  6962  000444  0100               	movlb	0	; () banked
  6963  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6964  000448  0EEF               	movlw	low STR_20
  6965  00044A  0100               	movlb	0	; () banked
  6966  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6967  00044E  0EFF               	movlw	high STR_20
  6968  000450  0100               	movlb	0	; () banked
  6969  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6970  000454  EC83  F01F         	call	_strcpy	;wreg free
  6971                           
  6972                           ;UI.c: 164: }
  6973                           
  6974                           ;UI.c: 163: break;
  6975  000458  D032               	goto	l7224
  6976  00045A                     l7222:
  6977  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6978  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6979  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6980                           
  6981                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6982                           ; Switch size 1, requested type "space"
  6983                           ; Number of cases is 1, Range of values is 0 to 0
  6984                           ; switch strategies available:
  6985                           ; Name         Instructions Cycles
  6986                           ; simple_byte            4     3 (average)
  6987                           ;	Chosen strategy is simple_byte
  6988  000466  0100               	movlb	0	; () banked
  6989  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6990  00046A  0A00               	xorlw	0	; case 0
  6991  00046C  A4D8               	btfss	status,2,c
  6992  00046E  D7E6               	goto	l7218
  6993                           
  6994                           ; BSR set to: 0
  6995                           ; Switch size 1, requested type "space"
  6996                           ; Number of cases is 12, Range of values is 1 to 12
  6997                           ; switch strategies available:
  6998                           ; Name         Instructions Cycles
  6999                           ; simple_byte           37    19 (average)
  7000                           ;	Chosen strategy is simple_byte
  7001  000470  0100               	movlb	0	; () banked
  7002  000472  51C4               	movf	??_UI& (0+255),w,b
  7003  000474  0A01               	xorlw	1	; case 1
  7004  000476  B4D8               	btfsc	status,2,c
  7005  000478  D72D               	goto	l7194
  7006  00047A  0A03               	xorlw	3	; case 2
  7007  00047C  B4D8               	btfsc	status,2,c
  7008  00047E  D739               	goto	l7196
  7009  000480  0A01               	xorlw	1	; case 3
  7010  000482  B4D8               	btfsc	status,2,c
  7011  000484  D745               	goto	l7198
  7012  000486  0A07               	xorlw	7	; case 4
  7013  000488  B4D8               	btfsc	status,2,c
  7014  00048A  D751               	goto	l7200
  7015  00048C  0A01               	xorlw	1	; case 5
  7016  00048E  B4D8               	btfsc	status,2,c
  7017  000490  D75D               	goto	l7202
  7018  000492  0A03               	xorlw	3	; case 6
  7019  000494  B4D8               	btfsc	status,2,c
  7020  000496  D769               	goto	l7204
  7021  000498  0A01               	xorlw	1	; case 7
  7022  00049A  B4D8               	btfsc	status,2,c
  7023  00049C  D775               	goto	l7206
  7024  00049E  0A0F               	xorlw	15	; case 8
  7025  0004A0  B4D8               	btfsc	status,2,c
  7026  0004A2  D781               	goto	l7208
  7027  0004A4  0A01               	xorlw	1	; case 9
  7028  0004A6  B4D8               	btfsc	status,2,c
  7029  0004A8  D78D               	goto	l7210
  7030  0004AA  0A03               	xorlw	3	; case 10
  7031  0004AC  B4D8               	btfsc	status,2,c
  7032  0004AE  D799               	goto	l7212
  7033  0004B0  0A01               	xorlw	1	; case 11
  7034  0004B2  B4D8               	btfsc	status,2,c
  7035  0004B4  D7A5               	goto	l7214
  7036  0004B6  0A07               	xorlw	7	; case 12
  7037  0004B8  B4D8               	btfsc	status,2,c
  7038  0004BA  D7B1               	goto	l7216
  7039  0004BC  D7BF               	goto	l7218
  7040  0004BE                     l7224:
  7041                           
  7042                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7043  0004BE  0E54               	movlw	low STR_21
  7044  0004C0  0100               	movlb	0	; () banked
  7045  0004C2  6F8E               	movwf	printf@f& (0+255),b
  7046  0004C4  0EFB               	movlw	high STR_21
  7047  0004C6  0100               	movlb	0	; () banked
  7048  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7049  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  7050  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  7051  0004D2  0ED6               	movlw	low UI@month
  7052  0004D4  0100               	movlb	0	; () banked
  7053  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  7054  0004D8  0E00               	movlw	high UI@month
  7055  0004DA  0100               	movlb	0	; () banked
  7056  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  7057  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  7058  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  7059  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  7060  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  7061  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  7062  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  7063  0004F6  EC9C  F008         	call	_printf	;wreg free
  7064                           
  7065                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7066  0004FA  0E00               	movlw	0
  7067  0004FC  0100               	movlb	0	; () banked
  7068  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  7069  000500                     l7228:
  7070                           
  7071                           ; BSR set to: 0
  7072  000500  0E63               	movlw	99
  7073  000502  0100               	movlb	0	; () banked
  7074  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  7075  000506  D001               	goto	l7232
  7076  000508  D00C               	goto	l7236
  7077  00050A                     l7232:
  7078                           
  7079                           ; BSR set to: 0
  7080  00050A  0E68               	movlw	104
  7081  00050C  0100               	movlb	0	; () banked
  7082  00050E  6FC4               	movwf	??_UI& (0+255),b
  7083  000510  0EE4               	movlw	228
  7084  000512                     u7157:
  7085  000512  2EE8               	decfsz	wreg,f,c
  7086  000514  D7FE               	bra	u7157
  7087  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  7088  000518  D7FC               	bra	u7157
  7089  00051A  F000               	nop	
  7090  00051C  0100               	movlb	0	; () banked
  7091  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  7092  000520  D7EF               	goto	l7228
  7093  000522                     l7236:
  7094                           
  7095                           ; BSR set to: 0
  7096  000522  0100               	movlb	0	; () banked
  7097  000524  51F6               	movf	_logstate& (0+255),w,b
  7098  000526  0100               	movlb	0	; () banked
  7099  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7100  00052A  B4D8               	btfsc	status,2,c
  7101  00052C  0012               	return	
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7105                           
  7106                           ; BSR set to: 0
  7107                           
  7108                           ; BSR set to: 0
  7109  00052E  0E00               	movlw	0
  7110  000530  0100               	movlb	0	; () banked
  7111  000532  6FCD               	movwf	UI@i_431& (0+255),b
  7112  000534                     l7242:
  7113                           
  7114                           ; BSR set to: 0
  7115  000534  0E63               	movlw	99
  7116  000536  0100               	movlb	0	; () banked
  7117  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  7118  00053A  D001               	goto	l7246
  7119  00053C  D00C               	goto	l7250
  7120  00053E                     l7246:
  7121                           
  7122                           ; BSR set to: 0
  7123  00053E  0E68               	movlw	104
  7124  000540  0100               	movlb	0	; () banked
  7125  000542  6FC4               	movwf	??_UI& (0+255),b
  7126  000544  0EE4               	movlw	228
  7127  000546                     u7167:
  7128  000546  2EE8               	decfsz	wreg,f,c
  7129  000548  D7FE               	bra	u7167
  7130  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  7131  00054C  D7FC               	bra	u7167
  7132  00054E  F000               	nop	
  7133  000550  0100               	movlb	0	; () banked
  7134  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  7135  000554  D7EF               	goto	l7242
  7136  000556                     l7250:
  7137                           
  7138                           ; BSR set to: 0
  7139  000556  0100               	movlb	0	; () banked
  7140  000558  51F6               	movf	_logstate& (0+255),w,b
  7141  00055A  0100               	movlb	0	; () banked
  7142  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7143  00055E  B4D8               	btfsc	status,2,c
  7144  000560  0012               	return	
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7148                           
  7149                           ; BSR set to: 0
  7150                           
  7151                           ; BSR set to: 0
  7152  000562  0E01               	movlw	1
  7153  000564  ECF9  F021         	call	_lcdInst
  7154  000568  0E68               	movlw	104
  7155  00056A  0100               	movlb	0	; () banked
  7156  00056C  6FC4               	movwf	??_UI& (0+255),b
  7157  00056E  0EE4               	movlw	228
  7158  000570                     u7177:
  7159  000570  2EE8               	decfsz	wreg,f,c
  7160  000572  D7FE               	bra	u7177
  7161  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  7162  000576  D7FC               	bra	u7177
  7163  000578  F000               	nop	
  7164                           
  7165                           ;UI.c: 171: lcdInst(0b10000000);;
  7166  00057A  0E80               	movlw	128
  7167  00057C  ECF9  F021         	call	_lcdInst
  7168                           
  7169                           ;UI.c: 172: printf("DURATION:");
  7170  000580  0EA4               	movlw	low STR_22
  7171  000582  0100               	movlb	0	; () banked
  7172  000584  6F8E               	movwf	printf@f& (0+255),b
  7173  000586  0EFF               	movlw	high STR_22
  7174  000588  0100               	movlb	0	; () banked
  7175  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7176  00058C  EC9C  F008         	call	_printf	;wreg free
  7177                           
  7178                           ;UI.c: 173: lcdInst(0b11000000);;
  7179  000590  0EC0               	movlw	192
  7180  000592  ECF9  F021         	call	_lcdInst
  7181                           
  7182                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7183  000596  0E0E               	movlw	14
  7184  000598  0100               	movlb	0	; () banked
  7185  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7186  00059C  0E10               	movlw	16
  7187  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  7188  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7189  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7190  0005A8  EC6C  F01A         	call	___awmod	;wreg free
  7191  0005AC  C080  F0C6         	movff	?___awmod,_UI$2234
  7192  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2234+1
  7193                           
  7194                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7195  0005B4  0E20               	movlw	low STR_23
  7196  0005B6  0100               	movlb	0	; () banked
  7197  0005B8  6F8E               	movwf	printf@f& (0+255),b
  7198  0005BA  0EFF               	movlw	high STR_23
  7199  0005BC  0100               	movlb	0	; () banked
  7200  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  7201  0005C0  0E0E               	movlw	14
  7202  0005C2  0100               	movlb	0	; () banked
  7203  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7204  0005C6  0E10               	movlw	16
  7205  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  7206  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7207  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7208  0005D2  EC6C  F01A         	call	___awmod	;wreg free
  7209  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  7210  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7211  0005DE  0E00               	movlw	0
  7212  0005E0  0100               	movlb	0	; () banked
  7213  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7214  0005E4  0E3C               	movlw	60
  7215  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  7216  0005E8  EC5A  F019         	call	___awdiv	;wreg free
  7217  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  7218  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  7219  0005F4  C0C6  F080         	movff	_UI$2234,___awmod@dividend
  7220  0005F8  C0C7  F081         	movff	_UI$2234+1,___awmod@dividend+1
  7221  0005FC  0E00               	movlw	0
  7222  0005FE  0100               	movlb	0	; () banked
  7223  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7224  000602  0E3C               	movlw	60
  7225  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  7226  000606  EC6C  F01A         	call	___awmod	;wreg free
  7227  00060A  C080  F092         	movff	?___awmod,?_printf+4
  7228  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  7229  000612  EC9C  F008         	call	_printf	;wreg free
  7230                           
  7231                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7232  000616  0E00               	movlw	0
  7233  000618  0100               	movlb	0	; () banked
  7234  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  7235  00061C                     l7270:
  7236                           
  7237                           ; BSR set to: 0
  7238  00061C  0E63               	movlw	99
  7239  00061E  0100               	movlb	0	; () banked
  7240  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  7241  000622  D001               	goto	l7274
  7242  000624  D00C               	goto	l7278
  7243  000626                     l7274:
  7244                           
  7245                           ; BSR set to: 0
  7246  000626  0E68               	movlw	104
  7247  000628  0100               	movlb	0	; () banked
  7248  00062A  6FC4               	movwf	??_UI& (0+255),b
  7249  00062C  0EE4               	movlw	228
  7250  00062E                     u7187:
  7251  00062E  2EE8               	decfsz	wreg,f,c
  7252  000630  D7FE               	bra	u7187
  7253  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  7254  000634  D7FC               	bra	u7187
  7255  000636  F000               	nop	
  7256  000638  0100               	movlb	0	; () banked
  7257  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  7258  00063C  D7EF               	goto	l7270
  7259  00063E                     l7278:
  7260                           
  7261                           ; BSR set to: 0
  7262  00063E  0100               	movlb	0	; () banked
  7263  000640  51F6               	movf	_logstate& (0+255),w,b
  7264  000642  0100               	movlb	0	; () banked
  7265  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7266  000646  B4D8               	btfsc	status,2,c
  7267  000648  0012               	return	
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7271                           
  7272                           ; BSR set to: 0
  7273                           
  7274                           ; BSR set to: 0
  7275  00064A  0E00               	movlw	0
  7276  00064C  0100               	movlb	0	; () banked
  7277  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  7278  000650                     l7284:
  7279                           
  7280                           ; BSR set to: 0
  7281  000650  0E63               	movlw	99
  7282  000652  0100               	movlb	0	; () banked
  7283  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  7284  000656  D001               	goto	l7288
  7285  000658  D00C               	goto	l7292
  7286  00065A                     l7288:
  7287                           
  7288                           ; BSR set to: 0
  7289  00065A  0E68               	movlw	104
  7290  00065C  0100               	movlb	0	; () banked
  7291  00065E  6FC4               	movwf	??_UI& (0+255),b
  7292  000660  0EE4               	movlw	228
  7293  000662                     u7197:
  7294  000662  2EE8               	decfsz	wreg,f,c
  7295  000664  D7FE               	bra	u7197
  7296  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  7297  000668  D7FC               	bra	u7197
  7298  00066A  F000               	nop	
  7299  00066C  0100               	movlb	0	; () banked
  7300  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  7301  000670  D7EF               	goto	l7284
  7302  000672                     l7292:
  7303                           
  7304                           ; BSR set to: 0
  7305  000672  0100               	movlb	0	; () banked
  7306  000674  51F6               	movf	_logstate& (0+255),w,b
  7307  000676  0100               	movlb	0	; () banked
  7308  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7309  00067A  B4D8               	btfsc	status,2,c
  7310  00067C  0012               	return	
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7314                           
  7315                           ; BSR set to: 0
  7316                           
  7317                           ; BSR set to: 0
  7318  00067E  0E01               	movlw	1
  7319  000680  ECF9  F021         	call	_lcdInst
  7320  000684  0E68               	movlw	104
  7321  000686  0100               	movlb	0	; () banked
  7322  000688  6FC4               	movwf	??_UI& (0+255),b
  7323  00068A  0EE4               	movlw	228
  7324  00068C                     u7207:
  7325  00068C  2EE8               	decfsz	wreg,f,c
  7326  00068E  D7FE               	bra	u7207
  7327  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  7328  000692  D7FC               	bra	u7207
  7329  000694  F000               	nop	
  7330                           
  7331                           ;UI.c: 180: lcdInst(0b10000000);;
  7332  000696  0E80               	movlw	128
  7333  000698  ECF9  F021         	call	_lcdInst
  7334                           
  7335                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7336  00069C  0E65               	movlw	low STR_24
  7337  00069E  0100               	movlb	0	; () banked
  7338  0006A0  6F8E               	movwf	printf@f& (0+255),b
  7339  0006A2  0EFD               	movlw	high STR_24
  7340  0006A4  0100               	movlb	0	; () banked
  7341  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7342  0006A8  EC9C  F008         	call	_printf	;wreg free
  7343                           
  7344                           ;UI.c: 182: lcdInst(0b11000000);;
  7345  0006AC  0EC0               	movlw	192
  7346  0006AE  ECF9  F021         	call	_lcdInst
  7347                           
  7348                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7349  0006B2  0E94               	movlw	low STR_25
  7350  0006B4  0100               	movlb	0	; () banked
  7351  0006B6  6F8E               	movwf	printf@f& (0+255),b
  7352  0006B8  0EFB               	movlw	high STR_25
  7353  0006BA  0100               	movlb	0	; () banked
  7354  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7355  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7356  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7357  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7358  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7359  0006CE  EC9C  F008         	call	_printf	;wreg free
  7360                           
  7361                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7362  0006D2  0E00               	movlw	0
  7363  0006D4  0100               	movlb	0	; () banked
  7364  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  7365  0006D8                     l7310:
  7366                           
  7367                           ; BSR set to: 0
  7368  0006D8  0E63               	movlw	99
  7369  0006DA  0100               	movlb	0	; () banked
  7370  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  7371  0006DE  D001               	goto	l7314
  7372  0006E0  D00C               	goto	l7318
  7373  0006E2                     l7314:
  7374                           
  7375                           ; BSR set to: 0
  7376  0006E2  0E68               	movlw	104
  7377  0006E4  0100               	movlb	0	; () banked
  7378  0006E6  6FC4               	movwf	??_UI& (0+255),b
  7379  0006E8  0EE4               	movlw	228
  7380  0006EA                     u7217:
  7381  0006EA  2EE8               	decfsz	wreg,f,c
  7382  0006EC  D7FE               	bra	u7217
  7383  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  7384  0006F0  D7FC               	bra	u7217
  7385  0006F2  F000               	nop	
  7386  0006F4  0100               	movlb	0	; () banked
  7387  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  7388  0006F8  D7EF               	goto	l7310
  7389  0006FA                     l7318:
  7390                           
  7391                           ; BSR set to: 0
  7392  0006FA  0100               	movlb	0	; () banked
  7393  0006FC  51F6               	movf	_logstate& (0+255),w,b
  7394  0006FE  0100               	movlb	0	; () banked
  7395  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7396  000702  B4D8               	btfsc	status,2,c
  7397  000704  0012               	return	
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7401                           
  7402                           ; BSR set to: 0
  7403                           
  7404                           ; BSR set to: 0
  7405  000706  0E00               	movlw	0
  7406  000708  0100               	movlb	0	; () banked
  7407  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  7408  00070C                     l7324:
  7409                           
  7410                           ; BSR set to: 0
  7411  00070C  0E63               	movlw	99
  7412  00070E  0100               	movlb	0	; () banked
  7413  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  7414  000712  D001               	goto	l7328
  7415  000714  D00C               	goto	l7332
  7416  000716                     l7328:
  7417                           
  7418                           ; BSR set to: 0
  7419  000716  0E68               	movlw	104
  7420  000718  0100               	movlb	0	; () banked
  7421  00071A  6FC4               	movwf	??_UI& (0+255),b
  7422  00071C  0EE4               	movlw	228
  7423  00071E                     u7227:
  7424  00071E  2EE8               	decfsz	wreg,f,c
  7425  000720  D7FE               	bra	u7227
  7426  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7427  000724  D7FC               	bra	u7227
  7428  000726  F000               	nop	
  7429  000728  0100               	movlb	0	; () banked
  7430  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  7431  00072C  D7EF               	goto	l7324
  7432  00072E                     l7332:
  7433                           
  7434                           ; BSR set to: 0
  7435  00072E  0100               	movlb	0	; () banked
  7436  000730  51F6               	movf	_logstate& (0+255),w,b
  7437  000732  0100               	movlb	0	; () banked
  7438  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7439  000736  B4D8               	btfsc	status,2,c
  7440  000738  0012               	return	
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7444                           
  7445                           ; BSR set to: 0
  7446                           
  7447                           ; BSR set to: 0
  7448  00073A  0E01               	movlw	1
  7449  00073C  ECF9  F021         	call	_lcdInst
  7450  000740  0E68               	movlw	104
  7451  000742  0100               	movlb	0	; () banked
  7452  000744  6FC4               	movwf	??_UI& (0+255),b
  7453  000746  0EE4               	movlw	228
  7454  000748                     u7237:
  7455  000748  2EE8               	decfsz	wreg,f,c
  7456  00074A  D7FE               	bra	u7237
  7457  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7458  00074E  D7FC               	bra	u7237
  7459  000750  F000               	nop	
  7460                           
  7461                           ;UI.c: 189: lcdInst(0b10000000);;
  7462  000752  0E80               	movlw	128
  7463  000754  ECF9  F021         	call	_lcdInst
  7464                           
  7465                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7466  000758  0E76               	movlw	low STR_26
  7467  00075A  0100               	movlb	0	; () banked
  7468  00075C  6F8E               	movwf	printf@f& (0+255),b
  7469  00075E  0EFD               	movlw	high STR_26
  7470  000760  0100               	movlb	0	; () banked
  7471  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7472  000764  EC9C  F008         	call	_printf	;wreg free
  7473                           
  7474                           ;UI.c: 191: lcdInst(0b11000000);;
  7475  000768  0EC0               	movlw	192
  7476  00076A  ECF9  F021         	call	_lcdInst
  7477                           
  7478                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7479  00076E  0E81               	movlw	low STR_27
  7480  000770  0100               	movlb	0	; () banked
  7481  000772  6F8E               	movwf	printf@f& (0+255),b
  7482  000774  0EFB               	movlw	high STR_27
  7483  000776  0100               	movlb	0	; () banked
  7484  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7485  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7486  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7487  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7488  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7489  00078A  EC9C  F008         	call	_printf	;wreg free
  7490                           
  7491                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7492  00078E  0E00               	movlw	0
  7493  000790  0100               	movlb	0	; () banked
  7494  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7495  000794                     l7350:
  7496                           
  7497                           ; BSR set to: 0
  7498  000794  0E63               	movlw	99
  7499  000796  0100               	movlb	0	; () banked
  7500  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7501  00079A  D001               	goto	l7354
  7502  00079C  D00C               	goto	l7358
  7503  00079E                     l7354:
  7504                           
  7505                           ; BSR set to: 0
  7506  00079E  0E68               	movlw	104
  7507  0007A0  0100               	movlb	0	; () banked
  7508  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7509  0007A4  0EE4               	movlw	228
  7510  0007A6                     u7247:
  7511  0007A6  2EE8               	decfsz	wreg,f,c
  7512  0007A8  D7FE               	bra	u7247
  7513  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7514  0007AC  D7FC               	bra	u7247
  7515  0007AE  F000               	nop	
  7516  0007B0  0100               	movlb	0	; () banked
  7517  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7518  0007B4  D7EF               	goto	l7350
  7519  0007B6                     l7358:
  7520                           
  7521                           ; BSR set to: 0
  7522  0007B6  0100               	movlb	0	; () banked
  7523  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7524  0007BA  0100               	movlb	0	; () banked
  7525  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7526  0007BE  B4D8               	btfsc	status,2,c
  7527  0007C0  0012               	return	
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7531                           
  7532                           ; BSR set to: 0
  7533                           
  7534                           ; BSR set to: 0
  7535  0007C2  0E00               	movlw	0
  7536  0007C4  0100               	movlb	0	; () banked
  7537  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7538  0007C8                     l7364:
  7539                           
  7540                           ; BSR set to: 0
  7541  0007C8  0E63               	movlw	99
  7542  0007CA  0100               	movlb	0	; () banked
  7543  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7544  0007CE  D001               	goto	l7368
  7545  0007D0  D00C               	goto	l7372
  7546  0007D2                     l7368:
  7547                           
  7548                           ; BSR set to: 0
  7549  0007D2  0E68               	movlw	104
  7550  0007D4  0100               	movlb	0	; () banked
  7551  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7552  0007D8  0EE4               	movlw	228
  7553  0007DA                     u7257:
  7554  0007DA  2EE8               	decfsz	wreg,f,c
  7555  0007DC  D7FE               	bra	u7257
  7556  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7557  0007E0  D7FC               	bra	u7257
  7558  0007E2  F000               	nop	
  7559  0007E4  0100               	movlb	0	; () banked
  7560  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7561  0007E8  D7EF               	goto	l7364
  7562  0007EA                     l7372:
  7563                           
  7564                           ; BSR set to: 0
  7565  0007EA  0100               	movlb	0	; () banked
  7566  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7567  0007EE  0100               	movlb	0	; () banked
  7568  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7569  0007F2  B4D8               	btfsc	status,2,c
  7570  0007F4  0012               	return	
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7574                           
  7575                           ; BSR set to: 0
  7576                           
  7577                           ; BSR set to: 0
  7578  0007F6  0E01               	movlw	1
  7579  0007F8  ECF9  F021         	call	_lcdInst
  7580  0007FC  0E68               	movlw	104
  7581  0007FE  0100               	movlb	0	; () banked
  7582  000800  6FC4               	movwf	??_UI& (0+255),b
  7583  000802  0EE4               	movlw	228
  7584  000804                     u7267:
  7585  000804  2EE8               	decfsz	wreg,f,c
  7586  000806  D7FE               	bra	u7267
  7587  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7588  00080A  D7FC               	bra	u7267
  7589  00080C  F000               	nop	
  7590                           
  7591                           ;UI.c: 198: lcdInst(0b10000000);;
  7592  00080E  0E80               	movlw	128
  7593  000810  ECF9  F021         	call	_lcdInst
  7594                           
  7595                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7596  000814  0E87               	movlw	low STR_28
  7597  000816  0100               	movlb	0	; () banked
  7598  000818  6F8E               	movwf	printf@f& (0+255),b
  7599  00081A  0EFD               	movlw	high STR_28
  7600  00081C  0100               	movlb	0	; () banked
  7601  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7602  000820  EC9C  F008         	call	_printf	;wreg free
  7603                           
  7604                           ;UI.c: 200: lcdInst(0b11000000);;
  7605  000824  0EC0               	movlw	192
  7606  000826  ECF9  F021         	call	_lcdInst
  7607                           
  7608                           ;UI.c: 201: printf("%d", log_count_total);
  7609  00082A  0E91               	movlw	low (STR_27+16)
  7610  00082C  0100               	movlb	0	; () banked
  7611  00082E  6F8E               	movwf	printf@f& (0+255),b
  7612  000830  0EFB               	movlw	high (STR_27+16)
  7613  000832  0100               	movlb	0	; () banked
  7614  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7615  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7616  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7617  00083E  EC9C  F008         	call	_printf	;wreg free
  7618                           
  7619                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7620  000842  0E00               	movlw	0
  7621  000844  0100               	movlb	0	; () banked
  7622  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7623  000848                     l7390:
  7624                           
  7625                           ; BSR set to: 0
  7626  000848  0E63               	movlw	99
  7627  00084A  0100               	movlb	0	; () banked
  7628  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7629  00084E  D001               	goto	l7394
  7630  000850  D00C               	goto	l7398
  7631  000852                     l7394:
  7632                           
  7633                           ; BSR set to: 0
  7634  000852  0E68               	movlw	104
  7635  000854  0100               	movlb	0	; () banked
  7636  000856  6FC4               	movwf	??_UI& (0+255),b
  7637  000858  0EE4               	movlw	228
  7638  00085A                     u7277:
  7639  00085A  2EE8               	decfsz	wreg,f,c
  7640  00085C  D7FE               	bra	u7277
  7641  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7642  000860  D7FC               	bra	u7277
  7643  000862  F000               	nop	
  7644  000864  0100               	movlb	0	; () banked
  7645  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7646  000868  D7EF               	goto	l7390
  7647  00086A                     l7398:
  7648                           
  7649                           ; BSR set to: 0
  7650  00086A  0100               	movlb	0	; () banked
  7651  00086C  51F6               	movf	_logstate& (0+255),w,b
  7652  00086E  0100               	movlb	0	; () banked
  7653  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7654  000872  B4D8               	btfsc	status,2,c
  7655  000874  0012               	return	
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7659                           
  7660                           ; BSR set to: 0
  7661                           
  7662                           ; BSR set to: 0
  7663  000876  0E00               	movlw	0
  7664  000878  0100               	movlb	0	; () banked
  7665  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7666  00087C                     l7404:
  7667                           
  7668                           ; BSR set to: 0
  7669  00087C  0E63               	movlw	99
  7670  00087E  0100               	movlb	0	; () banked
  7671  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7672  000882  D001               	goto	l7408
  7673  000884  D00C               	goto	l7412
  7674  000886                     l7408:
  7675                           
  7676                           ; BSR set to: 0
  7677  000886  0E68               	movlw	104
  7678  000888  0100               	movlb	0	; () banked
  7679  00088A  6FC4               	movwf	??_UI& (0+255),b
  7680  00088C  0EE4               	movlw	228
  7681  00088E                     u7287:
  7682  00088E  2EE8               	decfsz	wreg,f,c
  7683  000890  D7FE               	bra	u7287
  7684  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7685  000894  D7FC               	bra	u7287
  7686  000896  F000               	nop	
  7687  000898  0100               	movlb	0	; () banked
  7688  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7689  00089C  D7EF               	goto	l7404
  7690  00089E                     l7412:
  7691                           
  7692                           ; BSR set to: 0
  7693  00089E  0100               	movlb	0	; () banked
  7694  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7695  0008A2  0100               	movlb	0	; () banked
  7696  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7697  0008A6  B4D8               	btfsc	status,2,c
  7698  0008A8  0012               	return	
  7699  0008AA                     l7416:
  7700  0008AA  0100               	movlb	0	; () banked
  7701  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7702  0008AE  0100               	movlb	0	; () banked
  7703  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7704  0008B2  B4D8               	btfsc	status,2,c
  7705  0008B4  0012               	return	
  7706  0008B6  D44A               	goto	l7112
  7707  0008B8                     __end_of_UI:
  7708                           	opt stack 0
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           intcon2	equ	0xFF1
  7717                           intcon3	equ	0xFF0
  7718                           postinc0	equ	0xFEE
  7719                           wreg	equ	0xFE8
  7720                           postdec1	equ	0xFE5
  7721                           fsr1l	equ	0xFE1
  7722                           indf2	equ	0xFDF
  7723                           postinc2	equ	0xFDE
  7724                           postdec2	equ	0xFDD
  7725                           fsr2h	equ	0xFDA
  7726                           fsr2l	equ	0xFD9
  7727                           status	equ	0xFD8
  7728                           
  7729 ;; *************** function _printRTC *****************
  7730 ;; Defined at:
  7731 ;;		line 63 in file "RTC.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;		None
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;  i               2   66[BANK0 ] int 
  7736 ;;  INT_time       14   46[BANK0 ] int [7]
  7737 ;;  month           4   62[BANK0 ] unsigned char [4]
  7738 ;;  RTC_month       2   60[BANK0 ] int 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  1    wreg      void 
  7741 ;; Registers used:
  7742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;Total ram usage:       25 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:   10
  7755 ;; This function calls:
  7756 ;;		_getRTC
  7757 ;;		_lcdInst
  7758 ;;		_printf
  7759 ;;		_strcpy
  7760 ;; This function is called by:
  7761 ;;		_UI
  7762 ;;		_change_state_to_menu_start
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text23
  7767  001BAE                     __ptext23:
  7768                           	opt stack 0
  7769  001BAE                     _printRTC:
  7770                           	opt stack 18
  7771                           
  7772                           ;RTC.c: 64: getRTC();
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;incstack = 0
  7776  001BAE  EC92  F01B         	call	_getRTC	;wreg free
  7777                           
  7778                           ;RTC.c: 65: char month[] = "MMM";
  7779  001BB2  C131  F0BE         	movff	printRTC@F3213,printRTC@month
  7780  001BB6  C132  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  7781  001BBA  C133  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  7782  001BBE  C134  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  7783                           
  7784                           ;RTC.c: 66: int INT_time[7];
  7785                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7786  001BC2  0E00               	movlw	0
  7787  001BC4  0100               	movlb	0	; () banked
  7788  001BC6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7789  001BC8  0E00               	movlw	0
  7790  001BCA  6FC2               	movwf	printRTC@i& (0+255),b
  7791                           
  7792                           ; BSR set to: 0
  7793  001BCC  0100               	movlb	0	; () banked
  7794  001BCE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7795  001BD0  D008               	goto	l5654
  7796  001BD2  0100               	movlb	0	; () banked
  7797  001BD4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7798  001BD6  E146               	bnz	l593
  7799  001BD8  0E07               	movlw	7
  7800  001BDA  0100               	movlb	0	; () banked
  7801  001BDC  5DC2               	subwf	printRTC@i& (0+255),w,b
  7802  001BDE  B0D8               	btfsc	status,0,c
  7803  001BE0  D041               	goto	l593
  7804  001BE2                     l5654:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7808  001BE2  0E24               	movlw	low _time
  7809  001BE4  0100               	movlb	0	; () banked
  7810  001BE6  25C2               	addwf	printRTC@i& (0+255),w,b
  7811  001BE8  6ED9               	movwf	fsr2l,c
  7812  001BEA  0E01               	movlw	high _time
  7813  001BEC  0100               	movlb	0	; () banked
  7814  001BEE  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7815  001BF0  6EDA               	movwf	fsr2h,c
  7816  001BF2  50DF               	movf	indf2,w,c
  7817  001BF4  0100               	movlb	0	; () banked
  7818  001BF6  6FAB               	movwf	??_printRTC& (0+255),b
  7819  001BF8  0100               	movlb	0	; () banked
  7820  001BFA  3BAB               	swapf	??_printRTC& (0+255),f,b
  7821  001BFC  0E0F               	movlw	15
  7822  001BFE  17AB               	andwf	??_printRTC& (0+255),f,b
  7823  001C00  0E0F               	movlw	15
  7824  001C02  0100               	movlb	0	; () banked
  7825  001C04  17AB               	andwf	??_printRTC& (0+255),f,b
  7826  001C06  0100               	movlb	0	; () banked
  7827  001C08  51AB               	movf	??_printRTC& (0+255),w,b
  7828  001C0A  0D0A               	mullw	10
  7829  001C0C  0E24               	movlw	low _time
  7830  001C0E  0100               	movlb	0	; () banked
  7831  001C10  25C2               	addwf	printRTC@i& (0+255),w,b
  7832  001C12  6ED9               	movwf	fsr2l,c
  7833  001C14  0E01               	movlw	high _time
  7834  001C16  0100               	movlb	0	; () banked
  7835  001C18  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7836  001C1A  6EDA               	movwf	fsr2h,c
  7837  001C1C  50DF               	movf	indf2,w,c
  7838  001C1E  0B0F               	andlw	15
  7839  001C20  0100               	movlb	0	; () banked
  7840  001C22  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7841  001C24  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7842  001C26  50F3               	movf	prodl,w,c
  7843  001C28  0100               	movlb	0	; () banked
  7844  001C2A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7845  001C2C  50F4               	movf	prodh,w,c
  7846  001C2E  0100               	movlb	0	; () banked
  7847  001C30  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7848  001C32  90D8               	bcf	status,0,c
  7849  001C34  0100               	movlb	0	; () banked
  7850  001C36  35C2               	rlcf	printRTC@i& (0+255),w,b
  7851  001C38  6ED9               	movwf	fsr2l,c
  7852  001C3A  0100               	movlb	0	; () banked
  7853  001C3C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7854  001C3E  6EDA               	movwf	fsr2h,c
  7855  001C40  0EAE               	movlw	low printRTC@INT_time
  7856  001C42  26D9               	addwf	fsr2l,f,c
  7857  001C44  0E00               	movlw	high printRTC@INT_time
  7858  001C46  22DA               	addwfc	fsr2h,f,c
  7859  001C48  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7860  001C4C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7861                           
  7862                           ; BSR set to: 0
  7863  001C50  0100               	movlb	0	; () banked
  7864  001C52  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7865  001C54  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7866                           
  7867                           ; BSR set to: 0
  7868  001C56  0100               	movlb	0	; () banked
  7869  001C58  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7870  001C5A  D7C3               	goto	l5654
  7871  001C5C  0100               	movlb	0	; () banked
  7872  001C5E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7873  001C60  E101               	bnz	u4390
  7874  001C62  D7BA               	goto	L6
  7875  001C64                     u4390:
  7876  001C64                     l593:
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;RTC.c: 69: }
  7880                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7881  001C64  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7882  001C68  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7883                           
  7884                           ;RTC.c: 71: switch(RTC_month){
  7885  001C6C  D0B4               	goto	l5686
  7886  001C6E                     l5660:
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;RTC.c: 73: strcpy(month, "JAN");
  7890  001C6E  0EBE               	movlw	low printRTC@month
  7891  001C70  0100               	movlb	0	; () banked
  7892  001C72  6F80               	movwf	strcpy@to& (0+255),b
  7893  001C74  0E00               	movlw	high printRTC@month
  7894  001C76  0100               	movlb	0	; () banked
  7895  001C78  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7896  001C7A  0EDB               	movlw	low STR_8
  7897  001C7C  0100               	movlb	0	; () banked
  7898  001C7E  6F82               	movwf	strcpy@from& (0+255),b
  7899  001C80  0EFF               	movlw	high STR_8
  7900  001C82  0100               	movlb	0	; () banked
  7901  001C84  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7902  001C86  EC83  F01F         	call	_strcpy	;wreg free
  7903                           
  7904                           ;RTC.c: 74: break;
  7905  001C8A  D0D4               	goto	l5688
  7906  001C8C                     l5662:
  7907                           
  7908                           ;RTC.c: 76: strcpy(month, "FEB");
  7909  001C8C  0EBE               	movlw	low printRTC@month
  7910  001C8E  0100               	movlb	0	; () banked
  7911  001C90  6F80               	movwf	strcpy@to& (0+255),b
  7912  001C92  0E00               	movlw	high printRTC@month
  7913  001C94  0100               	movlb	0	; () banked
  7914  001C96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7915  001C98  0ECB               	movlw	low STR_9
  7916  001C9A  0100               	movlb	0	; () banked
  7917  001C9C  6F82               	movwf	strcpy@from& (0+255),b
  7918  001C9E  0EFF               	movlw	high STR_9
  7919  001CA0  0100               	movlb	0	; () banked
  7920  001CA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7921  001CA4  EC83  F01F         	call	_strcpy	;wreg free
  7922                           
  7923                           ;RTC.c: 77: break;
  7924  001CA8  D0C5               	goto	l5688
  7925  001CAA                     l5664:
  7926                           
  7927                           ;RTC.c: 79: strcpy(month, "MAR");
  7928  001CAA  0EBE               	movlw	low printRTC@month
  7929  001CAC  0100               	movlb	0	; () banked
  7930  001CAE  6F80               	movwf	strcpy@to& (0+255),b
  7931  001CB0  0E00               	movlw	high printRTC@month
  7932  001CB2  0100               	movlb	0	; () banked
  7933  001CB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7934  001CB6  0EE7               	movlw	low STR_10
  7935  001CB8  0100               	movlb	0	; () banked
  7936  001CBA  6F82               	movwf	strcpy@from& (0+255),b
  7937  001CBC  0EFF               	movlw	high STR_10
  7938  001CBE  0100               	movlb	0	; () banked
  7939  001CC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7940  001CC2  EC83  F01F         	call	_strcpy	;wreg free
  7941                           
  7942                           ;RTC.c: 80: break;
  7943  001CC6  D0B6               	goto	l5688
  7944  001CC8                     l5666:
  7945                           
  7946                           ;RTC.c: 82: strcpy(month, "APR");
  7947  001CC8  0EBE               	movlw	low printRTC@month
  7948  001CCA  0100               	movlb	0	; () banked
  7949  001CCC  6F80               	movwf	strcpy@to& (0+255),b
  7950  001CCE  0E00               	movlw	high printRTC@month
  7951  001CD0  0100               	movlb	0	; () banked
  7952  001CD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7953  001CD4  0EEB               	movlw	low STR_11
  7954  001CD6  0100               	movlb	0	; () banked
  7955  001CD8  6F82               	movwf	strcpy@from& (0+255),b
  7956  001CDA  0EFF               	movlw	high STR_11
  7957  001CDC  0100               	movlb	0	; () banked
  7958  001CDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7959  001CE0  EC83  F01F         	call	_strcpy	;wreg free
  7960                           
  7961                           ;RTC.c: 83: break;
  7962  001CE4  D0A7               	goto	l5688
  7963  001CE6                     l5668:
  7964                           
  7965                           ;RTC.c: 85: strcpy(month, "MAY");
  7966  001CE6  0EBE               	movlw	low printRTC@month
  7967  001CE8  0100               	movlb	0	; () banked
  7968  001CEA  6F80               	movwf	strcpy@to& (0+255),b
  7969  001CEC  0E00               	movlw	high printRTC@month
  7970  001CEE  0100               	movlb	0	; () banked
  7971  001CF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7972  001CF2  0EFB               	movlw	low STR_12
  7973  001CF4  0100               	movlb	0	; () banked
  7974  001CF6  6F82               	movwf	strcpy@from& (0+255),b
  7975  001CF8  0EFF               	movlw	high STR_12
  7976  001CFA  0100               	movlb	0	; () banked
  7977  001CFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7978  001CFE  EC83  F01F         	call	_strcpy	;wreg free
  7979                           
  7980                           ;RTC.c: 86: break;
  7981  001D02  D098               	goto	l5688
  7982  001D04                     l5670:
  7983                           
  7984                           ;RTC.c: 88: strcpy(month, "JUN");
  7985  001D04  0EBE               	movlw	low printRTC@month
  7986  001D06  0100               	movlb	0	; () banked
  7987  001D08  6F80               	movwf	strcpy@to& (0+255),b
  7988  001D0A  0E00               	movlw	high printRTC@month
  7989  001D0C  0100               	movlb	0	; () banked
  7990  001D0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7991  001D10  0EDF               	movlw	low STR_13
  7992  001D12  0100               	movlb	0	; () banked
  7993  001D14  6F82               	movwf	strcpy@from& (0+255),b
  7994  001D16  0EFF               	movlw	high STR_13
  7995  001D18  0100               	movlb	0	; () banked
  7996  001D1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7997  001D1C  EC83  F01F         	call	_strcpy	;wreg free
  7998                           
  7999                           ;RTC.c: 89: break;
  8000  001D20  D089               	goto	l5688
  8001  001D22                     l5672:
  8002                           
  8003                           ;RTC.c: 91: strcpy(month, "JUL");
  8004  001D22  0EBE               	movlw	low printRTC@month
  8005  001D24  0100               	movlb	0	; () banked
  8006  001D26  6F80               	movwf	strcpy@to& (0+255),b
  8007  001D28  0E00               	movlw	high printRTC@month
  8008  001D2A  0100               	movlb	0	; () banked
  8009  001D2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8010  001D2E  0ED7               	movlw	low STR_14
  8011  001D30  0100               	movlb	0	; () banked
  8012  001D32  6F82               	movwf	strcpy@from& (0+255),b
  8013  001D34  0EFF               	movlw	high STR_14
  8014  001D36  0100               	movlb	0	; () banked
  8015  001D38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8016  001D3A  EC83  F01F         	call	_strcpy	;wreg free
  8017                           
  8018                           ;RTC.c: 92: break;
  8019  001D3E  D07A               	goto	l5688
  8020  001D40                     l5674:
  8021                           
  8022                           ;RTC.c: 94: strcpy(month, "AUG");
  8023  001D40  0EBE               	movlw	low printRTC@month
  8024  001D42  0100               	movlb	0	; () banked
  8025  001D44  6F80               	movwf	strcpy@to& (0+255),b
  8026  001D46  0E00               	movlw	high printRTC@month
  8027  001D48  0100               	movlb	0	; () banked
  8028  001D4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8029  001D4C  0ED3               	movlw	low STR_15
  8030  001D4E  0100               	movlb	0	; () banked
  8031  001D50  6F82               	movwf	strcpy@from& (0+255),b
  8032  001D52  0EFF               	movlw	high STR_15
  8033  001D54  0100               	movlb	0	; () banked
  8034  001D56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8035  001D58  EC83  F01F         	call	_strcpy	;wreg free
  8036                           
  8037                           ;RTC.c: 95: break;
  8038  001D5C  D06B               	goto	l5688
  8039  001D5E                     l5676:
  8040                           
  8041                           ;RTC.c: 97: strcpy(month, "SEP");
  8042  001D5E  0EBE               	movlw	low printRTC@month
  8043  001D60  0100               	movlb	0	; () banked
  8044  001D62  6F80               	movwf	strcpy@to& (0+255),b
  8045  001D64  0E00               	movlw	high printRTC@month
  8046  001D66  0100               	movlb	0	; () banked
  8047  001D68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8048  001D6A  0EE3               	movlw	low STR_16
  8049  001D6C  0100               	movlb	0	; () banked
  8050  001D6E  6F82               	movwf	strcpy@from& (0+255),b
  8051  001D70  0EFF               	movlw	high STR_16
  8052  001D72  0100               	movlb	0	; () banked
  8053  001D74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8054  001D76  EC83  F01F         	call	_strcpy	;wreg free
  8055                           
  8056                           ;RTC.c: 98: break;
  8057  001D7A  D05C               	goto	l5688
  8058  001D7C                     l5678:
  8059                           
  8060                           ;RTC.c: 100: strcpy(month, "OCT");
  8061  001D7C  0EBE               	movlw	low printRTC@month
  8062  001D7E  0100               	movlb	0	; () banked
  8063  001D80  6F80               	movwf	strcpy@to& (0+255),b
  8064  001D82  0E00               	movlw	high printRTC@month
  8065  001D84  0100               	movlb	0	; () banked
  8066  001D86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8067  001D88  0EF3               	movlw	low STR_17
  8068  001D8A  0100               	movlb	0	; () banked
  8069  001D8C  6F82               	movwf	strcpy@from& (0+255),b
  8070  001D8E  0EFF               	movlw	high STR_17
  8071  001D90  0100               	movlb	0	; () banked
  8072  001D92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8073  001D94  EC83  F01F         	call	_strcpy	;wreg free
  8074                           
  8075                           ;RTC.c: 101: break;
  8076  001D98  D04D               	goto	l5688
  8077  001D9A                     l5680:
  8078                           
  8079                           ;RTC.c: 103: strcpy(month, "NOV");
  8080  001D9A  0EBE               	movlw	low printRTC@month
  8081  001D9C  0100               	movlb	0	; () banked
  8082  001D9E  6F80               	movwf	strcpy@to& (0+255),b
  8083  001DA0  0E00               	movlw	high printRTC@month
  8084  001DA2  0100               	movlb	0	; () banked
  8085  001DA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8086  001DA6  0EF7               	movlw	low STR_18
  8087  001DA8  0100               	movlb	0	; () banked
  8088  001DAA  6F82               	movwf	strcpy@from& (0+255),b
  8089  001DAC  0EFF               	movlw	high STR_18
  8090  001DAE  0100               	movlb	0	; () banked
  8091  001DB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8092  001DB2  EC83  F01F         	call	_strcpy	;wreg free
  8093                           
  8094                           ;RTC.c: 104: break;
  8095  001DB6  D03E               	goto	l5688
  8096  001DB8                     l5682:
  8097                           
  8098                           ;RTC.c: 106: strcpy(month, "DEC");
  8099  001DB8  0EBE               	movlw	low printRTC@month
  8100  001DBA  0100               	movlb	0	; () banked
  8101  001DBC  6F80               	movwf	strcpy@to& (0+255),b
  8102  001DBE  0E00               	movlw	high printRTC@month
  8103  001DC0  0100               	movlb	0	; () banked
  8104  001DC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8105  001DC4  0ECF               	movlw	low STR_19
  8106  001DC6  0100               	movlb	0	; () banked
  8107  001DC8  6F82               	movwf	strcpy@from& (0+255),b
  8108  001DCA  0EFF               	movlw	high STR_19
  8109  001DCC  0100               	movlb	0	; () banked
  8110  001DCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8111  001DD0  EC83  F01F         	call	_strcpy	;wreg free
  8112                           
  8113                           ;RTC.c: 108: }
  8114                           
  8115                           ;RTC.c: 107: break;
  8116  001DD4  D02F               	goto	l5688
  8117  001DD6                     l5686:
  8118  001DD6  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8119  001DDA  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8120                           
  8121                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8122                           ; Switch size 1, requested type "space"
  8123                           ; Number of cases is 1, Range of values is 0 to 0
  8124                           ; switch strategies available:
  8125                           ; Name         Instructions Cycles
  8126                           ; simple_byte            4     3 (average)
  8127                           ;	Chosen strategy is simple_byte
  8128  001DDE  0100               	movlb	0	; () banked
  8129  001DE0  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8130  001DE2  0A00               	xorlw	0	; case 0
  8131  001DE4  A4D8               	btfss	status,2,c
  8132  001DE6  D026               	goto	l5688
  8133                           
  8134                           ; BSR set to: 0
  8135                           ; Switch size 1, requested type "space"
  8136                           ; Number of cases is 12, Range of values is 1 to 12
  8137                           ; switch strategies available:
  8138                           ; Name         Instructions Cycles
  8139                           ; simple_byte           37    19 (average)
  8140                           ;	Chosen strategy is simple_byte
  8141  001DE8  0100               	movlb	0	; () banked
  8142  001DEA  51AB               	movf	??_printRTC& (0+255),w,b
  8143  001DEC  0A01               	xorlw	1	; case 1
  8144  001DEE  B4D8               	btfsc	status,2,c
  8145  001DF0  D73E               	goto	l5660
  8146  001DF2  0A03               	xorlw	3	; case 2
  8147  001DF4  B4D8               	btfsc	status,2,c
  8148  001DF6  D74A               	goto	l5662
  8149  001DF8  0A01               	xorlw	1	; case 3
  8150  001DFA  B4D8               	btfsc	status,2,c
  8151  001DFC  D756               	goto	l5664
  8152  001DFE  0A07               	xorlw	7	; case 4
  8153  001E00  B4D8               	btfsc	status,2,c
  8154  001E02  D762               	goto	l5666
  8155  001E04  0A01               	xorlw	1	; case 5
  8156  001E06  B4D8               	btfsc	status,2,c
  8157  001E08  D76E               	goto	l5668
  8158  001E0A  0A03               	xorlw	3	; case 6
  8159  001E0C  B4D8               	btfsc	status,2,c
  8160  001E0E  D77A               	goto	l5670
  8161  001E10  0A01               	xorlw	1	; case 7
  8162  001E12  B4D8               	btfsc	status,2,c
  8163  001E14  D786               	goto	l5672
  8164  001E16  0A0F               	xorlw	15	; case 8
  8165  001E18  B4D8               	btfsc	status,2,c
  8166  001E1A  D792               	goto	l5674
  8167  001E1C  0A01               	xorlw	1	; case 9
  8168  001E1E  B4D8               	btfsc	status,2,c
  8169  001E20  D79E               	goto	l5676
  8170  001E22  0A03               	xorlw	3	; case 10
  8171  001E24  B4D8               	btfsc	status,2,c
  8172  001E26  D7AA               	goto	l5678
  8173  001E28  0A01               	xorlw	1	; case 11
  8174  001E2A  B4D8               	btfsc	status,2,c
  8175  001E2C  D7B6               	goto	l5680
  8176  001E2E  0A07               	xorlw	7	; case 12
  8177  001E30  B4D8               	btfsc	status,2,c
  8178  001E32  D7C2               	goto	l5682
  8179  001E34                     l5688:
  8180                           
  8181                           ;RTC.c: 109: lcdInst(0b10000000);;
  8182  001E34  0E80               	movlw	128
  8183  001E36  ECF9  F021         	call	_lcdInst
  8184                           
  8185                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8186  001E3A  0E54               	movlw	low STR_21
  8187  001E3C  0100               	movlb	0	; () banked
  8188  001E3E  6F8E               	movwf	printf@f& (0+255),b
  8189  001E40  0EFB               	movlw	high STR_21
  8190  001E42  0100               	movlb	0	; () banked
  8191  001E44  6F8F               	movwf	(printf@f+1)& (0+255),b
  8192  001E46  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8193  001E4A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8194  001E4E  0EBE               	movlw	low printRTC@month
  8195  001E50  0100               	movlb	0	; () banked
  8196  001E52  6F92               	movwf	(?_printf+4)& (0+255),b
  8197  001E54  0E00               	movlw	high printRTC@month
  8198  001E56  0100               	movlb	0	; () banked
  8199  001E58  6F93               	movwf	(?_printf+5)& (0+255),b
  8200  001E5A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8201  001E5E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8202  001E62  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8203  001E66  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8204  001E6A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8205  001E6E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8206  001E72  EC9C  F008         	call	_printf	;wreg free
  8207  001E76  0012               	return		;funcret
  8208  001E78                     __end_of_printRTC:
  8209                           	opt stack 0
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           prodh	equ	0xFF4
  8215                           prodl	equ	0xFF3
  8216                           intcon	equ	0xFF2
  8217                           intcon2	equ	0xFF1
  8218                           intcon3	equ	0xFF0
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           postdec1	equ	0xFE5
  8222                           fsr1l	equ	0xFE1
  8223                           indf2	equ	0xFDF
  8224                           postinc2	equ	0xFDE
  8225                           postdec2	equ	0xFDD
  8226                           fsr2h	equ	0xFDA
  8227                           fsr2l	equ	0xFD9
  8228                           status	equ	0xFD8
  8229                           
  8230 ;; *************** function _strcpy *****************
  8231 ;; Defined at:
  8232 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8235 ;;		 -> printRTC@month(4), UI@month(4), 
  8236 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8237 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8238 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8239 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8240 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8241 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8242 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8243 ;;		 -> STR_8(4), 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8246 ;;		 -> printRTC@month(4), UI@month(4), 
  8247 ;; Return value:  Size  Location     Type
  8248 ;;                  2    0[BANK0 ] PTR unsigned char 
  8249 ;; Registers used:
  8250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8256 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;Total ram usage:        6 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    7
  8263 ;; This function calls:
  8264 ;;		Nothing
  8265 ;; This function is called by:
  8266 ;;		_UI
  8267 ;;		_printRTC
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text24
  8272  003F06                     __ptext24:
  8273                           	opt stack 0
  8274  003F06                     _strcpy:
  8275                           	opt stack 20
  8276                           
  8277                           ;incstack = 0
  8278  003F06  C080  F084         	movff	strcpy@to,strcpy@cp
  8279  003F0A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8280  003F0E  D006               	goto	l5392
  8281  003F10                     l5390:
  8282  003F10  0100               	movlb	0	; () banked
  8283  003F12  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8284  003F14  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8285  003F16  0100               	movlb	0	; () banked
  8286  003F18  4B82               	infsnz	strcpy@from& (0+255),f,b
  8287  003F1A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8288  003F1C                     l5392:
  8289  003F1C  C082  FFF6         	movff	strcpy@from,tblptrl
  8290  003F20  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8291  003F24                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8292  003F24  6AF8               	clrf	tblptru,c
  8293  003F26                     	endif
  8294  003F26                     	if	0	;tblptru may be non-zero
  8295  003F26                     	endif
  8296  003F26  C084  FFD9         	movff	strcpy@cp,fsr2l
  8297  003F2A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8298  003F2E  0008               	tblrd		*
  8299  003F30  CFF5 FFDF          	movff	tablat,indf2
  8300  003F34  50DF               	movf	indf2,w,c
  8301  003F36  B4D8               	btfsc	status,2,c
  8302  003F38  0012               	return	
  8303  003F3A  D7EA               	goto	l5390
  8304  003F3C                     __end_of_strcpy:
  8305                           	opt stack 0
  8306                           tblptru	equ	0xFF8
  8307                           tblptrh	equ	0xFF7
  8308                           tblptrl	equ	0xFF6
  8309                           tablat	equ	0xFF5
  8310                           prodh	equ	0xFF4
  8311                           prodl	equ	0xFF3
  8312                           intcon	equ	0xFF2
  8313                           intcon2	equ	0xFF1
  8314                           intcon3	equ	0xFF0
  8315                           postinc0	equ	0xFEE
  8316                           wreg	equ	0xFE8
  8317                           postdec1	equ	0xFE5
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           postdec2	equ	0xFDD
  8322                           fsr2h	equ	0xFDA
  8323                           fsr2l	equ	0xFD9
  8324                           status	equ	0xFD8
  8325                           
  8326 ;; *************** function _getRTC *****************
  8327 ;; Defined at:
  8328 ;;		line 44 in file "RTC.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;		None
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  i               2    3[BANK0 ] int 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  1    wreg      void 
  8335 ;; Registers used:
  8336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;Total ram usage:        2 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    9
  8349 ;; This function calls:
  8350 ;;		_I2C_Master_Read
  8351 ;;		_I2C_Master_Start
  8352 ;;		_I2C_Master_Stop
  8353 ;;		_I2C_Master_Write
  8354 ;; This function is called by:
  8355 ;;		_printRTC
  8356 ;;		_initSortTimer
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text25
  8361  003724                     __ptext25:
  8362                           	opt stack 0
  8363  003724                     _getRTC:
  8364                           	opt stack 18
  8365                           
  8366                           ;RTC.c: 48: I2C_Master_Start();
  8367                           
  8368                           ;incstack = 0
  8369  003724  EC1F  F022         	call	_I2C_Master_Start	;wreg free
  8370                           
  8371                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8372  003728  0E00               	movlw	0
  8373  00372A  0100               	movlb	0	; () banked
  8374  00372C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8375  00372E  0ED0               	movlw	208
  8376  003730  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8377  003732  EC0D  F022         	call	_I2C_Master_Write	;wreg free
  8378                           
  8379                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8380  003736  0E00               	movlw	0
  8381  003738  0100               	movlb	0	; () banked
  8382  00373A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8383  00373C  0E00               	movlw	0
  8384  00373E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8385  003740  EC0D  F022         	call	_I2C_Master_Write	;wreg free
  8386                           
  8387                           ;RTC.c: 51: I2C_Master_Stop();
  8388  003744  EC1B  F022         	call	_I2C_Master_Stop	;wreg free
  8389                           
  8390                           ;RTC.c: 54: I2C_Master_Start();
  8391  003748  EC1F  F022         	call	_I2C_Master_Start	;wreg free
  8392                           
  8393                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8394  00374C  0E00               	movlw	0
  8395  00374E  0100               	movlb	0	; () banked
  8396  003750  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8397  003752  0ED1               	movlw	209
  8398  003754  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8399  003756  EC0D  F022         	call	_I2C_Master_Write	;wreg free
  8400                           
  8401                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8402  00375A  0E00               	movlw	0
  8403  00375C  0100               	movlb	0	; () banked
  8404  00375E  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8405  003760  0E00               	movlw	0
  8406  003762  6F83               	movwf	getRTC@i& (0+255),b
  8407  003764                     l5398:
  8408                           
  8409                           ; BSR set to: 0
  8410  003764  0100               	movlb	0	; () banked
  8411  003766  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8412  003768  D008               	goto	l5402
  8413  00376A  0100               	movlb	0	; () banked
  8414  00376C  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8415  00376E  E115               	bnz	l5408
  8416  003770  0E06               	movlw	6
  8417  003772  0100               	movlb	0	; () banked
  8418  003774  5D83               	subwf	getRTC@i& (0+255),w,b
  8419  003776  B0D8               	btfsc	status,0,c
  8420  003778  D010               	goto	l5408
  8421  00377A                     l5402:
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8425  00377A  0E24               	movlw	low _time
  8426  00377C  0100               	movlb	0	; () banked
  8427  00377E  2583               	addwf	getRTC@i& (0+255),w,b
  8428  003780  6ED9               	movwf	fsr2l,c
  8429  003782  0E01               	movlw	high _time
  8430  003784  0100               	movlb	0	; () banked
  8431  003786  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8432  003788  6EDA               	movwf	fsr2h,c
  8433  00378A  0E01               	movlw	1
  8434  00378C  ECAA  F020         	call	_I2C_Master_Read
  8435  003790  6EDF               	movwf	indf2,c
  8436  003792  0100               	movlb	0	; () banked
  8437  003794  4B83               	infsnz	getRTC@i& (0+255),f,b
  8438  003796  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8439  003798  D7E5               	goto	l5398
  8440  00379A                     l5408:
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;RTC.c: 58: }
  8444                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8445  00379A  0E00               	movlw	0
  8446  00379C  ECAA  F020         	call	_I2C_Master_Read
  8447  0037A0  0101               	movlb	1	; () banked
  8448  0037A2  6F2A               	movwf	(_time+6)& (0+255),b
  8449                           
  8450                           ;RTC.c: 60: I2C_Master_Stop();
  8451  0037A4  EC1B  F022         	call	_I2C_Master_Stop	;wreg free
  8452  0037A8  0012               	return		;funcret
  8453  0037AA                     __end_of_getRTC:
  8454                           	opt stack 0
  8455                           tblptru	equ	0xFF8
  8456                           tblptrh	equ	0xFF7
  8457                           tblptrl	equ	0xFF6
  8458                           tablat	equ	0xFF5
  8459                           prodh	equ	0xFF4
  8460                           prodl	equ	0xFF3
  8461                           intcon	equ	0xFF2
  8462                           intcon2	equ	0xFF1
  8463                           intcon3	equ	0xFF0
  8464                           postinc0	equ	0xFEE
  8465                           wreg	equ	0xFE8
  8466                           postdec1	equ	0xFE5
  8467                           fsr1l	equ	0xFE1
  8468                           indf2	equ	0xFDF
  8469                           postinc2	equ	0xFDE
  8470                           postdec2	equ	0xFDD
  8471                           fsr2h	equ	0xFDA
  8472                           fsr2l	equ	0xFD9
  8473                           status	equ	0xFD8
  8474                           
  8475 ;; *************** function _I2C_Master_Write *****************
  8476 ;; Defined at:
  8477 ;;		line 49 in file "I2C.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;  d               2    1[BANK0 ] unsigned int 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;		None
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      void 
  8484 ;; Registers used:
  8485 ;;		wreg, status,2, status,0, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8491 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;Total ram usage:        2 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    8
  8498 ;; This function calls:
  8499 ;;		_I2C_Master_Wait
  8500 ;; This function is called by:
  8501 ;;		_loadRTC
  8502 ;;		_getRTC
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           	psect	text26
  8507  00441A                     __ptext26:
  8508                           	opt stack 0
  8509  00441A                     _I2C_Master_Write:
  8510                           	opt stack 18
  8511                           
  8512                           ;I2C.c: 51: I2C_Master_Wait();
  8513                           
  8514                           ;incstack = 0
  8515  00441A  ECDE  F021         	call	_I2C_Master_Wait	;wreg free
  8516                           
  8517                           ;I2C.c: 52: SSPBUF = d;
  8518  00441E  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8519  004422  0012               	return		;funcret
  8520  004424                     __end_of_I2C_Master_Write:
  8521                           	opt stack 0
  8522                           tblptru	equ	0xFF8
  8523                           tblptrh	equ	0xFF7
  8524                           tblptrl	equ	0xFF6
  8525                           tablat	equ	0xFF5
  8526                           prodh	equ	0xFF4
  8527                           prodl	equ	0xFF3
  8528                           intcon	equ	0xFF2
  8529                           intcon2	equ	0xFF1
  8530                           intcon3	equ	0xFF0
  8531                           postinc0	equ	0xFEE
  8532                           wreg	equ	0xFE8
  8533                           postdec1	equ	0xFE5
  8534                           fsr1l	equ	0xFE1
  8535                           indf2	equ	0xFDF
  8536                           postinc2	equ	0xFDE
  8537                           postdec2	equ	0xFDD
  8538                           fsr2h	equ	0xFDA
  8539                           fsr2l	equ	0xFD9
  8540                           status	equ	0xFD8
  8541                           
  8542 ;; *************** function _I2C_Master_Stop *****************
  8543 ;; Defined at:
  8544 ;;		line 43 in file "I2C.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;		None
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      void 
  8551 ;; Registers used:
  8552 ;;		wreg, status,2, status,0, cstack
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;Total ram usage:        0 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    8
  8565 ;; This function calls:
  8566 ;;		_I2C_Master_Wait
  8567 ;; This function is called by:
  8568 ;;		_loadRTC
  8569 ;;		_getRTC
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           	psect	text27
  8574  004436                     __ptext27:
  8575                           	opt stack 0
  8576  004436                     _I2C_Master_Stop:
  8577                           	opt stack 18
  8578                           
  8579                           ;I2C.c: 45: I2C_Master_Wait();
  8580                           
  8581                           ;incstack = 0
  8582  004436  ECDE  F021         	call	_I2C_Master_Wait	;wreg free
  8583                           
  8584                           ;I2C.c: 46: PEN = 1;
  8585  00443A  84C5               	bsf	4037,2,c	;volatile
  8586  00443C  0012               	return		;funcret
  8587  00443E                     __end_of_I2C_Master_Stop:
  8588                           	opt stack 0
  8589                           tblptru	equ	0xFF8
  8590                           tblptrh	equ	0xFF7
  8591                           tblptrl	equ	0xFF6
  8592                           tablat	equ	0xFF5
  8593                           prodh	equ	0xFF4
  8594                           prodl	equ	0xFF3
  8595                           intcon	equ	0xFF2
  8596                           intcon2	equ	0xFF1
  8597                           intcon3	equ	0xFF0
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           postdec1	equ	0xFE5
  8601                           fsr1l	equ	0xFE1
  8602                           indf2	equ	0xFDF
  8603                           postinc2	equ	0xFDE
  8604                           postdec2	equ	0xFDD
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _I2C_Master_Start *****************
  8610 ;; Defined at:
  8611 ;;		line 31 in file "I2C.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  1    wreg      void 
  8618 ;; Registers used:
  8619 ;;		wreg, status,2, status,0, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    8
  8632 ;; This function calls:
  8633 ;;		_I2C_Master_Wait
  8634 ;; This function is called by:
  8635 ;;		_loadRTC
  8636 ;;		_getRTC
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           	psect	text28
  8641  00443E                     __ptext28:
  8642                           	opt stack 0
  8643  00443E                     _I2C_Master_Start:
  8644                           	opt stack 18
  8645                           
  8646                           ;I2C.c: 33: I2C_Master_Wait();
  8647                           
  8648                           ;incstack = 0
  8649  00443E  ECDE  F021         	call	_I2C_Master_Wait	;wreg free
  8650                           
  8651                           ;I2C.c: 34: SEN = 1;
  8652  004442  80C5               	bsf	4037,0,c	;volatile
  8653  004444  0012               	return		;funcret
  8654  004446                     __end_of_I2C_Master_Start:
  8655                           	opt stack 0
  8656                           tblptru	equ	0xFF8
  8657                           tblptrh	equ	0xFF7
  8658                           tblptrl	equ	0xFF6
  8659                           tablat	equ	0xFF5
  8660                           prodh	equ	0xFF4
  8661                           prodl	equ	0xFF3
  8662                           intcon	equ	0xFF2
  8663                           intcon2	equ	0xFF1
  8664                           intcon3	equ	0xFF0
  8665                           postinc0	equ	0xFEE
  8666                           wreg	equ	0xFE8
  8667                           postdec1	equ	0xFE5
  8668                           fsr1l	equ	0xFE1
  8669                           indf2	equ	0xFDF
  8670                           postinc2	equ	0xFDE
  8671                           postdec2	equ	0xFDD
  8672                           fsr2h	equ	0xFDA
  8673                           fsr2l	equ	0xFD9
  8674                           status	equ	0xFD8
  8675                           
  8676 ;; *************** function _I2C_Master_Read *****************
  8677 ;; Defined at:
  8678 ;;		line 55 in file "I2C.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;  a               1    wreg     unsigned char 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  a               1    1[BANK0 ] unsigned char 
  8683 ;;  temp            1    2[BANK0 ] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      unsigned char 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;Total ram usage:        2 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    8
  8700 ;; This function calls:
  8701 ;;		_I2C_Master_Wait
  8702 ;; This function is called by:
  8703 ;;		_getRTC
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text29
  8708  004154                     __ptext29:
  8709                           	opt stack 0
  8710  004154                     _I2C_Master_Read:
  8711                           	opt stack 18
  8712                           
  8713                           ;incstack = 0
  8714                           ;I2C_Master_Read@a stored from wreg
  8715  004154  0100               	movlb	0	; () banked
  8716  004156  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8717                           
  8718                           ;I2C.c: 57: unsigned char temp;
  8719                           ;I2C.c: 58: I2C_Master_Wait();
  8720  004158  ECDE  F021         	call	_I2C_Master_Wait	;wreg free
  8721                           
  8722                           ;I2C.c: 59: RCEN = 1;
  8723  00415C  86C5               	bsf	4037,3,c	;volatile
  8724                           
  8725                           ;I2C.c: 60: I2C_Master_Wait();
  8726  00415E  ECDE  F021         	call	_I2C_Master_Wait	;wreg free
  8727                           
  8728                           ;I2C.c: 61: temp = SSPBUF;
  8729  004162  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8730                           
  8731                           ;I2C.c: 62: I2C_Master_Wait();
  8732  004166  ECDE  F021         	call	_I2C_Master_Wait	;wreg free
  8733                           
  8734                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8735  00416A  0100               	movlb	0	; () banked
  8736  00416C  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8737  00416E  0100               	movlb	0	; () banked
  8738  004170  A4D8               	btfss	status,2,c
  8739  004172  D002               	goto	u3480
  8740  004174  8AC5               	bsf	4037,5,c	;volatile
  8741  004176  D001               	goto	l5092
  8742  004178                     u3480:
  8743  004178  9AC5               	bcf	4037,5,c	;volatile
  8744  00417A                     l5092:
  8745                           
  8746                           ;I2C.c: 64: ACKEN = 1;
  8747  00417A  88C5               	bsf	4037,4,c	;volatile
  8748                           
  8749                           ;I2C.c: 65: return temp;
  8750  00417C  0100               	movlb	0	; () banked
  8751  00417E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8752  004180  0012               	return	
  8753  004182                     __end_of_I2C_Master_Read:
  8754                           	opt stack 0
  8755                           tblptru	equ	0xFF8
  8756                           tblptrh	equ	0xFF7
  8757                           tblptrl	equ	0xFF6
  8758                           tablat	equ	0xFF5
  8759                           prodh	equ	0xFF4
  8760                           prodl	equ	0xFF3
  8761                           intcon	equ	0xFF2
  8762                           intcon2	equ	0xFF1
  8763                           intcon3	equ	0xFF0
  8764                           postinc0	equ	0xFEE
  8765                           wreg	equ	0xFE8
  8766                           postdec1	equ	0xFE5
  8767                           fsr1l	equ	0xFE1
  8768                           indf2	equ	0xFDF
  8769                           postinc2	equ	0xFDE
  8770                           postdec2	equ	0xFDD
  8771                           fsr2h	equ	0xFDA
  8772                           fsr2l	equ	0xFD9
  8773                           status	equ	0xFD8
  8774                           
  8775 ;; *************** function _I2C_Master_Wait *****************
  8776 ;; Defined at:
  8777 ;;		line 26 in file "I2C.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;		None
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;		None
  8782 ;; Return value:  Size  Location     Type
  8783 ;;                  1    wreg      void 
  8784 ;; Registers used:
  8785 ;;		wreg, status,2, status,0
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;Total ram usage:        1 bytes
  8796 ;; Hardware stack levels used:    1
  8797 ;; Hardware stack levels required when called:    7
  8798 ;; This function calls:
  8799 ;;		Nothing
  8800 ;; This function is called by:
  8801 ;;		_I2C_Master_Start
  8802 ;;		_I2C_Master_Stop
  8803 ;;		_I2C_Master_Write
  8804 ;;		_I2C_Master_Read
  8805 ;;		_I2C_Master_RepeatedStart
  8806 ;; This function uses a non-reentrant model
  8807 ;;
  8808                           
  8809                           	psect	text30
  8810  0043BC                     __ptext30:
  8811                           	opt stack 0
  8812  0043BC                     _I2C_Master_Wait:
  8813                           	opt stack 18
  8814  0043BC                     l66:
  8815  0043BC  B4C7               	btfsc	4039,2,c	;volatile
  8816  0043BE  D7FE               	goto	l66
  8817  0043C0  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8818  0043C4  0E1F               	movlw	31
  8819  0043C6  0100               	movlb	0	; () banked
  8820  0043C8  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8821  0043CA  B4D8               	btfsc	status,2,c
  8822  0043CC  0012               	return	
  8823  0043CE  D7F6               	goto	l66
  8824  0043D0                     __end_of_I2C_Master_Wait:
  8825                           	opt stack 0
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodh	equ	0xFF4
  8831                           prodl	equ	0xFF3
  8832                           intcon	equ	0xFF2
  8833                           intcon2	equ	0xFF1
  8834                           intcon3	equ	0xFF0
  8835                           postinc0	equ	0xFEE
  8836                           wreg	equ	0xFE8
  8837                           postdec1	equ	0xFE5
  8838                           fsr1l	equ	0xFE1
  8839                           indf2	equ	0xFDF
  8840                           postinc2	equ	0xFDE
  8841                           postdec2	equ	0xFDD
  8842                           fsr2h	equ	0xFDA
  8843                           fsr2l	equ	0xFD9
  8844                           status	equ	0xFD8
  8845                           
  8846 ;; *************** function _change_state_to_menu_22 *****************
  8847 ;; Defined at:
  8848 ;;		line 496 in file "UI.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;		None
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      void 
  8855 ;; Registers used:
  8856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;Total ram usage:        0 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:   10
  8869 ;; This function calls:
  8870 ;;		_lcdInst
  8871 ;;		_printf
  8872 ;; This function is called by:
  8873 ;;		_UI
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text31
  8878  003E96                     __ptext31:
  8879                           	opt stack 0
  8880  003E96                     _change_state_to_menu_22:
  8881                           	opt stack 19
  8882                           
  8883                           ;UI.c: 497: cur_state = 22;
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;incstack = 0
  8887  003E96  0E00               	movlw	0
  8888  003E98  0100               	movlb	0	; () banked
  8889  003E9A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8890  003E9C  0E16               	movlw	22
  8891  003E9E  6FDE               	movwf	_cur_state& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;UI.c: 499: lcdInst(0b10000000);;
  8895  003EA0  0E80               	movlw	128
  8896  003EA2  ECF9  F021         	call	_lcdInst
  8897                           
  8898                           ;UI.c: 500: printf("2. SORT        <");
  8899  003EA6  0EED               	movlw	low STR_34
  8900  003EA8  0100               	movlb	0	; () banked
  8901  003EAA  6F8E               	movwf	printf@f& (0+255),b
  8902  003EAC  0EFD               	movlw	high STR_34
  8903  003EAE  0100               	movlb	0	; () banked
  8904  003EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8905  003EB2  EC9C  F008         	call	_printf	;wreg free
  8906                           
  8907                           ;UI.c: 501: lcdInst(0b11000000);;
  8908  003EB6  0EC0               	movlw	192
  8909  003EB8  ECF9  F021         	call	_lcdInst
  8910                           
  8911                           ;UI.c: 502: printf("3. LOGS         ");
  8912  003EBC  0E32               	movlw	low STR_36
  8913  003EBE  0100               	movlb	0	; () banked
  8914  003EC0  6F8E               	movwf	printf@f& (0+255),b
  8915  003EC2  0EFD               	movlw	high STR_36
  8916  003EC4  0100               	movlb	0	; () banked
  8917  003EC6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8918  003EC8  EC9C  F008         	call	_printf	;wreg free
  8919  003ECC  0012               	return		;funcret
  8920  003ECE                     __end_of_change_state_to_menu_22:
  8921                           	opt stack 0
  8922                           tblptru	equ	0xFF8
  8923                           tblptrh	equ	0xFF7
  8924                           tblptrl	equ	0xFF6
  8925                           tablat	equ	0xFF5
  8926                           prodh	equ	0xFF4
  8927                           prodl	equ	0xFF3
  8928                           intcon	equ	0xFF2
  8929                           intcon2	equ	0xFF1
  8930                           intcon3	equ	0xFF0
  8931                           postinc0	equ	0xFEE
  8932                           wreg	equ	0xFE8
  8933                           postdec1	equ	0xFE5
  8934                           fsr1l	equ	0xFE1
  8935                           indf2	equ	0xFDF
  8936                           postinc2	equ	0xFDE
  8937                           postdec2	equ	0xFDD
  8938                           fsr2h	equ	0xFDA
  8939                           fsr2l	equ	0xFD9
  8940                           status	equ	0xFD8
  8941                           
  8942 ;; *************** function _change_state_to_menu_12 *****************
  8943 ;; Defined at:
  8944 ;;		line 488 in file "UI.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;		None
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;		None
  8949 ;; Return value:  Size  Location     Type
  8950 ;;                  1    wreg      void 
  8951 ;; Registers used:
  8952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8953 ;; Tracked objects:
  8954 ;;		On entry : 0/0
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;Total ram usage:        0 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; Hardware stack levels required when called:   10
  8965 ;; This function calls:
  8966 ;;		_lcdInst
  8967 ;;		_printf
  8968 ;; This function is called by:
  8969 ;;		_UI
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           	psect	text32
  8974  003ECE                     __ptext32:
  8975                           	opt stack 0
  8976  003ECE                     _change_state_to_menu_12:
  8977                           	opt stack 19
  8978                           
  8979                           ;UI.c: 489: cur_state = 12;
  8980                           
  8981                           ;incstack = 0
  8982  003ECE  0E00               	movlw	0
  8983  003ED0  0100               	movlb	0	; () banked
  8984  003ED2  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8985  003ED4  0E0C               	movlw	12
  8986  003ED6  6FDE               	movwf	_cur_state& (0+255),b
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;UI.c: 491: lcdInst(0b10000000);;
  8990  003ED8  0E80               	movlw	128
  8991  003EDA  ECF9  F021         	call	_lcdInst
  8992                           
  8993                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8994  003EDE  0E54               	movlw	low STR_33
  8995  003EE0  0100               	movlb	0	; () banked
  8996  003EE2  6F8E               	movwf	printf@f& (0+255),b
  8997  003EE4  0EFD               	movlw	high STR_33
  8998  003EE6  0100               	movlb	0	; () banked
  8999  003EE8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9000  003EEA  EC9C  F008         	call	_printf	;wreg free
  9001                           
  9002                           ;UI.c: 493: lcdInst(0b11000000);;
  9003  003EEE  0EC0               	movlw	192
  9004  003EF0  ECF9  F021         	call	_lcdInst
  9005                           
  9006                           ;UI.c: 494: printf("2. SORT        <");
  9007  003EF4  0EED               	movlw	low STR_34
  9008  003EF6  0100               	movlb	0	; () banked
  9009  003EF8  6F8E               	movwf	printf@f& (0+255),b
  9010  003EFA  0EFD               	movlw	high STR_34
  9011  003EFC  0100               	movlb	0	; () banked
  9012  003EFE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9013  003F00  EC9C  F008         	call	_printf	;wreg free
  9014  003F04  0012               	return		;funcret
  9015  003F06                     __end_of_change_state_to_menu_12:
  9016                           	opt stack 0
  9017                           tblptru	equ	0xFF8
  9018                           tblptrh	equ	0xFF7
  9019                           tblptrl	equ	0xFF6
  9020                           tablat	equ	0xFF5
  9021                           prodh	equ	0xFF4
  9022                           prodl	equ	0xFF3
  9023                           intcon	equ	0xFF2
  9024                           intcon2	equ	0xFF1
  9025                           intcon3	equ	0xFF0
  9026                           postinc0	equ	0xFEE
  9027                           wreg	equ	0xFE8
  9028                           postdec1	equ	0xFE5
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           postinc2	equ	0xFDE
  9032                           postdec2	equ	0xFDD
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function ___awmod *****************
  9038 ;; Defined at:
  9039 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  dividend        2    0[BANK0 ] int 
  9042 ;;  divisor         2    2[BANK0 ] int 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  sign            1    5[BANK0 ] unsigned char 
  9045 ;;  counter         1    4[BANK0 ] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  2    0[BANK0 ] int 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9055 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;Total ram usage:        6 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    7
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_UI
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text33
  9070  0034D8                     __ptext33:
  9071                           	opt stack 0
  9072  0034D8                     ___awmod:
  9073                           	opt stack 22
  9074                           
  9075                           ;incstack = 0
  9076  0034D8  0E00               	movlw	0
  9077  0034DA  0100               	movlb	0	; () banked
  9078  0034DC  6F85               	movwf	___awmod@sign& (0+255),b
  9079                           
  9080                           ; BSR set to: 0
  9081  0034DE  0100               	movlb	0	; () banked
  9082  0034E0  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9083  0034E2  D008               	goto	l7024
  9084                           
  9085                           ; BSR set to: 0
  9086  0034E4  0100               	movlb	0	; () banked
  9087  0034E6  6D80               	negf	___awmod@dividend& (0+255),b
  9088  0034E8  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9089  0034EA  B0D8               	btfsc	status,0,c
  9090  0034EC  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9091                           
  9092                           ; BSR set to: 0
  9093  0034EE  0E01               	movlw	1
  9094  0034F0  0100               	movlb	0	; () banked
  9095  0034F2  6F85               	movwf	___awmod@sign& (0+255),b
  9096  0034F4                     l7024:
  9097                           
  9098                           ; BSR set to: 0
  9099  0034F4  0100               	movlb	0	; () banked
  9100  0034F6  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9101  0034F8  D005               	goto	l7028
  9102                           
  9103                           ; BSR set to: 0
  9104  0034FA  0100               	movlb	0	; () banked
  9105  0034FC  6D82               	negf	___awmod@divisor& (0+255),b
  9106  0034FE  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9107  003500  B0D8               	btfsc	status,0,c
  9108  003502  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9109  003504                     l7028:
  9110                           
  9111                           ; BSR set to: 0
  9112  003504  0100               	movlb	0	; () banked
  9113  003506  5182               	movf	___awmod@divisor& (0+255),w,b
  9114  003508  0100               	movlb	0	; () banked
  9115  00350A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9116  00350C  B4D8               	btfsc	status,2,c
  9117  00350E  D026               	goto	l7044
  9118                           
  9119                           ; BSR set to: 0
  9120  003510  0E01               	movlw	1
  9121  003512  0100               	movlb	0	; () banked
  9122  003514  6F84               	movwf	___awmod@counter& (0+255),b
  9123  003516  D006               	goto	l7034
  9124  003518                     l7032:
  9125                           
  9126                           ; BSR set to: 0
  9127  003518  0100               	movlb	0	; () banked
  9128  00351A  90D8               	bcf	status,0,c
  9129  00351C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9130  00351E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9131  003520  0100               	movlb	0	; () banked
  9132  003522  2B84               	incf	___awmod@counter& (0+255),f,b
  9133  003524                     l7034:
  9134                           
  9135                           ; BSR set to: 0
  9136  003524  0100               	movlb	0	; () banked
  9137  003526  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9138  003528  D7F7               	goto	l7032
  9139  00352A                     l7036:
  9140                           
  9141                           ; BSR set to: 0
  9142  00352A  0100               	movlb	0	; () banked
  9143  00352C  5182               	movf	___awmod@divisor& (0+255),w,b
  9144  00352E  0100               	movlb	0	; () banked
  9145  003530  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9146  003532  0100               	movlb	0	; () banked
  9147  003534  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9148  003536  0100               	movlb	0	; () banked
  9149  003538  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9150  00353A  A0D8               	btfss	status,0,c
  9151  00353C  D008               	goto	l7040
  9152                           
  9153                           ; BSR set to: 0
  9154  00353E  0100               	movlb	0	; () banked
  9155  003540  5182               	movf	___awmod@divisor& (0+255),w,b
  9156  003542  0100               	movlb	0	; () banked
  9157  003544  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9158  003546  0100               	movlb	0	; () banked
  9159  003548  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9160  00354A  0100               	movlb	0	; () banked
  9161  00354C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9162  00354E                     l7040:
  9163                           
  9164                           ; BSR set to: 0
  9165  00354E  0100               	movlb	0	; () banked
  9166  003550  90D8               	bcf	status,0,c
  9167  003552  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9168  003554  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9169                           
  9170                           ; BSR set to: 0
  9171  003556  0100               	movlb	0	; () banked
  9172  003558  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9173  00355A  D7E7               	goto	l7036
  9174  00355C                     l7044:
  9175                           
  9176                           ; BSR set to: 0
  9177  00355C  0100               	movlb	0	; () banked
  9178  00355E  5185               	movf	___awmod@sign& (0+255),w,b
  9179  003560  0100               	movlb	0	; () banked
  9180  003562  B4D8               	btfsc	status,2,c
  9181  003564  D005               	goto	l7048
  9182                           
  9183                           ; BSR set to: 0
  9184  003566  0100               	movlb	0	; () banked
  9185  003568  6D80               	negf	___awmod@dividend& (0+255),b
  9186  00356A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9187  00356C  B0D8               	btfsc	status,0,c
  9188  00356E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9189  003570                     l7048:
  9190                           
  9191                           ; BSR set to: 0
  9192  003570  C080  F080         	movff	___awmod@dividend,?___awmod
  9193  003574  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9194  003578  0012               	return	
  9195  00357A                     __end_of___awmod:
  9196                           	opt stack 0
  9197                           tblptru	equ	0xFF8
  9198                           tblptrh	equ	0xFF7
  9199                           tblptrl	equ	0xFF6
  9200                           tablat	equ	0xFF5
  9201                           prodh	equ	0xFF4
  9202                           prodl	equ	0xFF3
  9203                           intcon	equ	0xFF2
  9204                           intcon2	equ	0xFF1
  9205                           intcon3	equ	0xFF0
  9206                           postinc0	equ	0xFEE
  9207                           wreg	equ	0xFE8
  9208                           postdec1	equ	0xFE5
  9209                           fsr1l	equ	0xFE1
  9210                           indf2	equ	0xFDF
  9211                           postinc2	equ	0xFDE
  9212                           postdec2	equ	0xFDD
  9213                           fsr2h	equ	0xFDA
  9214                           fsr2l	equ	0xFD9
  9215                           status	equ	0xFD8
  9216                           
  9217 ;; *************** function ___awdiv *****************
  9218 ;; Defined at:
  9219 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;  dividend        2    6[BANK0 ] int 
  9222 ;;  divisor         2    8[BANK0 ] int 
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;  quotient        2   12[BANK0 ] int 
  9225 ;;  sign            1   11[BANK0 ] unsigned char 
  9226 ;;  counter         1   10[BANK0 ] unsigned char 
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  2    6[BANK0 ] int 
  9229 ;; Registers used:
  9230 ;;		wreg, status,2, status,0
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9236 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;Total ram usage:        8 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    7
  9243 ;; This function calls:
  9244 ;;		Nothing
  9245 ;; This function is called by:
  9246 ;;		_UI
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text34
  9251  0032B4                     __ptext34:
  9252                           	opt stack 0
  9253  0032B4                     ___awdiv:
  9254                           	opt stack 22
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;incstack = 0
  9258  0032B4  0E00               	movlw	0
  9259  0032B6  0100               	movlb	0	; () banked
  9260  0032B8  6F8B               	movwf	___awdiv@sign& (0+255),b
  9261                           
  9262                           ; BSR set to: 0
  9263  0032BA  0100               	movlb	0	; () banked
  9264  0032BC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9265  0032BE  D008               	goto	l6980
  9266                           
  9267                           ; BSR set to: 0
  9268  0032C0  0100               	movlb	0	; () banked
  9269  0032C2  6D88               	negf	___awdiv@divisor& (0+255),b
  9270  0032C4  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9271  0032C6  B0D8               	btfsc	status,0,c
  9272  0032C8  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9273                           
  9274                           ; BSR set to: 0
  9275  0032CA  0E01               	movlw	1
  9276  0032CC  0100               	movlb	0	; () banked
  9277  0032CE  6F8B               	movwf	___awdiv@sign& (0+255),b
  9278  0032D0                     l6980:
  9279                           
  9280                           ; BSR set to: 0
  9281  0032D0  0100               	movlb	0	; () banked
  9282  0032D2  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9283  0032D4  D008               	goto	l6986
  9284                           
  9285                           ; BSR set to: 0
  9286  0032D6  0100               	movlb	0	; () banked
  9287  0032D8  6D86               	negf	___awdiv@dividend& (0+255),b
  9288  0032DA  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9289  0032DC  B0D8               	btfsc	status,0,c
  9290  0032DE  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9291                           
  9292                           ; BSR set to: 0
  9293  0032E0  0E01               	movlw	1
  9294  0032E2  0100               	movlb	0	; () banked
  9295  0032E4  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9296  0032E6                     l6986:
  9297                           
  9298                           ; BSR set to: 0
  9299  0032E6  0E00               	movlw	0
  9300  0032E8  0100               	movlb	0	; () banked
  9301  0032EA  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9302  0032EC  0E00               	movlw	0
  9303  0032EE  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9304                           
  9305                           ; BSR set to: 0
  9306  0032F0  0100               	movlb	0	; () banked
  9307  0032F2  5188               	movf	___awdiv@divisor& (0+255),w,b
  9308  0032F4  0100               	movlb	0	; () banked
  9309  0032F6  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9310  0032F8  B4D8               	btfsc	status,2,c
  9311  0032FA  D02C               	goto	l7008
  9312                           
  9313                           ; BSR set to: 0
  9314  0032FC  0E01               	movlw	1
  9315  0032FE  0100               	movlb	0	; () banked
  9316  003300  6F8A               	movwf	___awdiv@counter& (0+255),b
  9317  003302  D006               	goto	l6994
  9318  003304                     l6992:
  9319                           
  9320                           ; BSR set to: 0
  9321  003304  0100               	movlb	0	; () banked
  9322  003306  90D8               	bcf	status,0,c
  9323  003308  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9324  00330A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9325  00330C  0100               	movlb	0	; () banked
  9326  00330E  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9327  003310                     l6994:
  9328                           
  9329                           ; BSR set to: 0
  9330  003310  0100               	movlb	0	; () banked
  9331  003312  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9332  003314  D7F7               	goto	l6992
  9333  003316                     l6996:
  9334                           
  9335                           ; BSR set to: 0
  9336  003316  0100               	movlb	0	; () banked
  9337  003318  90D8               	bcf	status,0,c
  9338  00331A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9339  00331C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9340                           
  9341                           ; BSR set to: 0
  9342  00331E  0100               	movlb	0	; () banked
  9343  003320  5188               	movf	___awdiv@divisor& (0+255),w,b
  9344  003322  0100               	movlb	0	; () banked
  9345  003324  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9346  003326  0100               	movlb	0	; () banked
  9347  003328  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9348  00332A  0100               	movlb	0	; () banked
  9349  00332C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9350  00332E  A0D8               	btfss	status,0,c
  9351  003330  D00A               	goto	l7004
  9352                           
  9353                           ; BSR set to: 0
  9354  003332  0100               	movlb	0	; () banked
  9355  003334  5188               	movf	___awdiv@divisor& (0+255),w,b
  9356  003336  0100               	movlb	0	; () banked
  9357  003338  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9358  00333A  0100               	movlb	0	; () banked
  9359  00333C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9360  00333E  0100               	movlb	0	; () banked
  9361  003340  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9362                           
  9363                           ; BSR set to: 0
  9364  003342  0100               	movlb	0	; () banked
  9365  003344  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9366  003346                     l7004:
  9367                           
  9368                           ; BSR set to: 0
  9369  003346  0100               	movlb	0	; () banked
  9370  003348  90D8               	bcf	status,0,c
  9371  00334A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9372  00334C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9373                           
  9374                           ; BSR set to: 0
  9375  00334E  0100               	movlb	0	; () banked
  9376  003350  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9377  003352  D7E1               	goto	l6996
  9378  003354                     l7008:
  9379                           
  9380                           ; BSR set to: 0
  9381  003354  0100               	movlb	0	; () banked
  9382  003356  518B               	movf	___awdiv@sign& (0+255),w,b
  9383  003358  0100               	movlb	0	; () banked
  9384  00335A  B4D8               	btfsc	status,2,c
  9385  00335C  D005               	goto	l7012
  9386                           
  9387                           ; BSR set to: 0
  9388  00335E  0100               	movlb	0	; () banked
  9389  003360  6D8C               	negf	___awdiv@quotient& (0+255),b
  9390  003362  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9391  003364  B0D8               	btfsc	status,0,c
  9392  003366  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9393  003368                     l7012:
  9394                           
  9395                           ; BSR set to: 0
  9396  003368  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9397  00336C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9398  003370  0012               	return	
  9399  003372                     __end_of___awdiv:
  9400                           	opt stack 0
  9401                           tblptru	equ	0xFF8
  9402                           tblptrh	equ	0xFF7
  9403                           tblptrl	equ	0xFF6
  9404                           tablat	equ	0xFF5
  9405                           prodh	equ	0xFF4
  9406                           prodl	equ	0xFF3
  9407                           intcon	equ	0xFF2
  9408                           intcon2	equ	0xFF1
  9409                           intcon3	equ	0xFF0
  9410                           postinc0	equ	0xFEE
  9411                           wreg	equ	0xFE8
  9412                           postdec1	equ	0xFE5
  9413                           fsr1l	equ	0xFE1
  9414                           indf2	equ	0xFDF
  9415                           postinc2	equ	0xFDE
  9416                           postdec2	equ	0xFDD
  9417                           fsr2h	equ	0xFDA
  9418                           fsr2l	equ	0xFD9
  9419                           status	equ	0xFD8
  9420                           
  9421 ;; *************** function _Test *****************
  9422 ;; Defined at:
  9423 ;;		line 27 in file "Test.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;		None
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;		None
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  1    wreg      void 
  9430 ;; Registers used:
  9431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;Total ram usage:        2 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:   11
  9444 ;; This function calls:
  9445 ;;		_EEPROMTest
  9446 ;;		_PortTestA5
  9447 ;;		_PortTests
  9448 ;;		_SolenoidTestA5
  9449 ;;		_ToggleTestA5
  9450 ;;		_actuatorTest
  9451 ;;		_algorithmTest
  9452 ;;		_lcdInst
  9453 ;;		_printf
  9454 ;;		_sensorTest
  9455 ;; This function is called by:
  9456 ;;		_main
  9457 ;; This function uses a non-reentrant model
  9458 ;;
  9459                           
  9460                           	psect	text35
  9461  002FFA                     __ptext35:
  9462                           	opt stack 0
  9463  002FFA                     _Test:
  9464                           	opt stack 19
  9465  002FFA                     
  9466                           ;Test.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9467  002FFA  0E01               	movlw	1
  9468  002FFC  ECF9  F021         	call	_lcdInst
  9469  003000  0E68               	movlw	104
  9470  003002  0100               	movlb	0	; () banked
  9471  003004  6FC6               	movwf	??_Test& (0+255),b
  9472  003006  0EE4               	movlw	228
  9473  003008                     u7297:
  9474  003008  2EE8               	decfsz	wreg,f,c
  9475  00300A  D7FE               	bra	u7297
  9476  00300C  2FC6               	decfsz	??_Test& (0+255),f,b
  9477  00300E  D7FC               	bra	u7297
  9478  003010  F000               	nop	
  9479  003012  0E80               	movlw	128
  9480  003014  ECF9  F021         	call	_lcdInst
  9481                           
  9482                           ;Test.c: 31: printf("1.ALG|2.SNR|3.AC");
  9483  003018  0EAA               	movlw	low STR_68
  9484  00301A  0100               	movlb	0	; () banked
  9485  00301C  6F8E               	movwf	printf@f& (0+255),b
  9486  00301E  0EFC               	movlw	high STR_68
  9487  003020  0100               	movlb	0	; () banked
  9488  003022  6F8F               	movwf	(printf@f+1)& (0+255),b
  9489  003024  EC9C  F008         	call	_printf	;wreg free
  9490                           
  9491                           ;Test.c: 32: lcdInst(0b11000000);;
  9492  003028  0EC0               	movlw	192
  9493  00302A  ECF9  F021         	call	_lcdInst
  9494                           
  9495                           ;Test.c: 33: printf("4.HI|5.TOG|6.EEP");
  9496  00302E  0EDD               	movlw	low STR_69
  9497  003030  0100               	movlb	0	; () banked
  9498  003032  6F8E               	movwf	printf@f& (0+255),b
  9499  003034  0EFC               	movlw	high STR_69
  9500  003036  0100               	movlb	0	; () banked
  9501  003038  6F8F               	movwf	(printf@f+1)& (0+255),b
  9502  00303A  EC9C  F008         	call	_printf	;wreg free
  9503                           
  9504                           ;Test.c: 34: _delay((unsigned long)((100)*(32000000/4000.0)));
  9505  00303E  0E05               	movlw	5
  9506  003040  0100               	movlb	0	; () banked
  9507  003042  6FC7               	movwf	(??_Test+1)& (0+255),b
  9508  003044  0E0F               	movlw	15
  9509  003046  0100               	movlb	0	; () banked
  9510  003048  6FC6               	movwf	??_Test& (0+255),b
  9511  00304A  0EF1               	movlw	241
  9512  00304C                     u7307:
  9513  00304C  2EE8               	decfsz	wreg,f,c
  9514  00304E  D7FE               	bra	u7307
  9515  003050  2FC6               	decfsz	??_Test& (0+255),f,b
  9516  003052  D7FC               	bra	u7307
  9517  003054  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9518  003056  D7FA               	bra	u7307
  9519  003058                     l1013:
  9520  003058  A281               	btfss	3969,1,c	;volatile
  9521  00305A  D7FE               	goto	l1013
  9522                           
  9523                           ;Test.c: 36: var = PORTB >> 4;
  9524  00305C  CF81 F0C6          	movff	3969,??_Test	;volatile
  9525  003060  0100               	movlb	0	; () banked
  9526  003062  3BC6               	swapf	??_Test& (0+255),f,b
  9527  003064  0E0F               	movlw	15
  9528  003066  17C6               	andwf	??_Test& (0+255),f,b
  9529  003068  0100               	movlb	0	; () banked
  9530  00306A  51C6               	movf	??_Test& (0+255),w,b
  9531  00306C  0100               	movlb	0	; () banked
  9532  00306E  6FFA               	movwf	_var& (0+255),b
  9533  003070  6BFB               	clrf	(_var+1)& (0+255),b
  9534                           
  9535                           ; BSR set to: 0
  9536                           ;Test.c: 37: var++;
  9537  003072  0100               	movlb	0	; () banked
  9538  003074  4BFA               	infsnz	_var& (0+255),f,b
  9539  003076  2BFB               	incf	(_var+1)& (0+255),f,b
  9540  003078                     l1016:
  9541  003078  A281               	btfss	3969,1,c	;volatile
  9542  00307A  D019               	goto	l7742
  9543  00307C  D7FD               	goto	l1016
  9544  00307E                     l7724:
  9545                           
  9546                           ;Test.c: 41: algorithmTest();
  9547  00307E  ECEF  F018         	call	_algorithmTest	;wreg free
  9548                           
  9549                           ;Test.c: 42: break;
  9550  003082  D7BB               	goto	l7706
  9551  003084                     l7726:
  9552                           
  9553                           ;Test.c: 44: sensorTest();
  9554  003084  ECA3  F013         	call	_sensorTest	;wreg free
  9555                           
  9556                           ;Test.c: 45: break;
  9557  003088  D7B8               	goto	l7706
  9558  00308A                     l7728:
  9559                           
  9560                           ;Test.c: 47: actuatorTest();
  9561  00308A  EC5C  F004         	call	_actuatorTest	;wreg free
  9562                           
  9563                           ;Test.c: 48: break;
  9564  00308E  D7B5               	goto	l7706
  9565  003090                     l7730:
  9566                           
  9567                           ;Test.c: 50: PortTestA5();
  9568  003090  ECBE  F01D         	call	_PortTestA5	;wreg free
  9569                           
  9570                           ;Test.c: 51: break;
  9571  003094  D7B2               	goto	l7706
  9572  003096                     l7732:
  9573                           
  9574                           ;Test.c: 53: ToggleTestA5();
  9575  003096  EC4E  F01B         	call	_ToggleTestA5	;wreg free
  9576                           
  9577                           ;Test.c: 54: break;
  9578  00309A  D7AF               	goto	l7706
  9579  00309C                     l7734:
  9580                           
  9581                           ;Test.c: 56: EEPROMTest();
  9582  00309C  EC2B  F022         	call	_EEPROMTest	;wreg free
  9583                           
  9584                           ;Test.c: 57: break;
  9585  0030A0  D7AC               	goto	l7706
  9586  0030A2                     l7736:
  9587                           
  9588                           ;Test.c: 59: SolenoidTestA5();
  9589  0030A2  EC7E  F017         	call	_SolenoidTestA5	;wreg free
  9590                           
  9591                           ;Test.c: 60: break;
  9592  0030A6  D7A9               	goto	l7706
  9593  0030A8                     l7738:
  9594                           
  9595                           ;Test.c: 62: PortTests();
  9596  0030A8  ECD5  F01B         	call	_PortTests	;wreg free
  9597                           
  9598                           ;Test.c: 66: }
  9599                           
  9600                           ;Test.c: 65: break;
  9601                           
  9602                           ;Test.c: 64: default:
  9603                           
  9604                           ;Test.c: 63: break;
  9605  0030AC  D7A6               	goto	l7706
  9606  0030AE                     l7742:
  9607  0030AE  C0FA  F0C6         	movff	_var,??_Test
  9608  0030B2  C0FB  F0C7         	movff	_var+1,??_Test+1
  9609                           
  9610                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9611                           ; Switch size 1, requested type "space"
  9612                           ; Number of cases is 1, Range of values is 0 to 0
  9613                           ; switch strategies available:
  9614                           ; Name         Instructions Cycles
  9615                           ; simple_byte            4     3 (average)
  9616                           ;	Chosen strategy is simple_byte
  9617  0030B6  0100               	movlb	0	; () banked
  9618  0030B8  51C7               	movf	(??_Test+1)& (0+255),w,b
  9619  0030BA  0A00               	xorlw	0	; case 0
  9620  0030BC  A4D8               	btfss	status,2,c
  9621  0030BE  D79D               	goto	l7706
  9622                           
  9623                           ; BSR set to: 0
  9624                           ; Switch size 1, requested type "space"
  9625                           ; Number of cases is 8, Range of values is 1 to 9
  9626                           ; switch strategies available:
  9627                           ; Name         Instructions Cycles
  9628                           ; simple_byte           25    13 (average)
  9629                           ;	Chosen strategy is simple_byte
  9630  0030C0  0100               	movlb	0	; () banked
  9631  0030C2  51C6               	movf	??_Test& (0+255),w,b
  9632  0030C4  0A01               	xorlw	1	; case 1
  9633  0030C6  B4D8               	btfsc	status,2,c
  9634  0030C8  D7DA               	goto	l7724
  9635  0030CA  0A03               	xorlw	3	; case 2
  9636  0030CC  B4D8               	btfsc	status,2,c
  9637  0030CE  D7DA               	goto	l7726
  9638  0030D0  0A01               	xorlw	1	; case 3
  9639  0030D2  B4D8               	btfsc	status,2,c
  9640  0030D4  D7DA               	goto	l7728
  9641  0030D6  0A06               	xorlw	6	; case 5
  9642  0030D8  B4D8               	btfsc	status,2,c
  9643  0030DA  D7DA               	goto	l7730
  9644  0030DC  0A03               	xorlw	3	; case 6
  9645  0030DE  B4D8               	btfsc	status,2,c
  9646  0030E0  D7DA               	goto	l7732
  9647  0030E2  0A01               	xorlw	1	; case 7
  9648  0030E4  B4D8               	btfsc	status,2,c
  9649  0030E6  D7DA               	goto	l7734
  9650  0030E8  0A0F               	xorlw	15	; case 8
  9651  0030EA  B4D8               	btfsc	status,2,c
  9652  0030EC  D7DA               	goto	l7736
  9653  0030EE  0A01               	xorlw	1	; case 9
  9654  0030F0  B4D8               	btfsc	status,2,c
  9655  0030F2  D7DA               	goto	l7738
  9656                           
  9657                           ; BSR set to: 0
  9658                           
  9659                           ; BSR set to: 0
  9660  0030F4  D782               	goto	l7706
  9661  0030F6                     __end_of_Test:
  9662                           	opt stack 0
  9663                           tblptru	equ	0xFF8
  9664                           tblptrh	equ	0xFF7
  9665                           tblptrl	equ	0xFF6
  9666                           tablat	equ	0xFF5
  9667                           prodh	equ	0xFF4
  9668                           prodl	equ	0xFF3
  9669                           intcon	equ	0xFF2
  9670                           intcon2	equ	0xFF1
  9671                           intcon3	equ	0xFF0
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           fsr2h	equ	0xFDA
  9680                           fsr2l	equ	0xFD9
  9681                           status	equ	0xFD8
  9682                           
  9683 ;; *************** function _sensorTest *****************
  9684 ;; Defined at:
  9685 ;;		line 114 in file "Test.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  on              2   45[BANK0 ] int 
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  1    wreg      void 
  9692 ;; Registers used:
  9693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;Total ram usage:        4 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:   10
  9706 ;; This function calls:
  9707 ;;		_lcdInst
  9708 ;;		_printf
  9709 ;;		_readIR
  9710 ;;		_readMAG
  9711 ;; This function is called by:
  9712 ;;		_Test
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           	psect	text36
  9717  002746                     __ptext36:
  9718                           	opt stack 0
  9719  002746                     _sensorTest:
  9720                           	opt stack 19
  9721                           
  9722                           ;Test.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;incstack = 0
  9726  002746  0E01               	movlw	1
  9727  002748  ECF9  F021         	call	_lcdInst
  9728  00274C  0E68               	movlw	104
  9729  00274E  0100               	movlb	0	; () banked
  9730  002750  6FAB               	movwf	??_sensorTest& (0+255),b
  9731  002752  0EE4               	movlw	228
  9732  002754                     u7317:
  9733  002754  2EE8               	decfsz	wreg,f,c
  9734  002756  D7FE               	bra	u7317
  9735  002758  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9736  00275A  D7FC               	bra	u7317
  9737  00275C  F000               	nop	
  9738  00275E  0E80               	movlw	128
  9739  002760  ECF9  F021         	call	_lcdInst
  9740                           
  9741                           ;Test.c: 117: printf("SENSORS");
  9742  002764  0EAE               	movlw	low STR_77
  9743  002766  0100               	movlb	0	; () banked
  9744  002768  6F8E               	movwf	printf@f& (0+255),b
  9745  00276A  0EFF               	movlw	high STR_77
  9746  00276C  0100               	movlb	0	; () banked
  9747  00276E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9748  002770  EC9C  F008         	call	_printf	;wreg free
  9749                           
  9750                           ;Test.c: 118: lcdInst(0b11000000);;
  9751  002774  0EC0               	movlw	192
  9752  002776  ECF9  F021         	call	_lcdInst
  9753                           
  9754                           ;Test.c: 119: printf("PUSH TO START");
  9755  00277A  0E12               	movlw	low STR_71
  9756  00277C  0100               	movlb	0	; () banked
  9757  00277E  6F8E               	movwf	printf@f& (0+255),b
  9758  002780  0EFF               	movlw	high STR_71
  9759  002782  0100               	movlb	0	; () banked
  9760  002784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9761  002786  EC9C  F008         	call	_printf	;wreg free
  9762                           
  9763                           ;Test.c: 120: _delay((unsigned long)((100)*(32000000/4000.0)));
  9764  00278A  0E05               	movlw	5
  9765  00278C  0100               	movlb	0	; () banked
  9766  00278E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9767  002790  0E0F               	movlw	15
  9768  002792  0100               	movlb	0	; () banked
  9769  002794  6FAB               	movwf	??_sensorTest& (0+255),b
  9770  002796  0EF1               	movlw	241
  9771  002798                     u7327:
  9772  002798  2EE8               	decfsz	wreg,f,c
  9773  00279A  D7FE               	bra	u7327
  9774  00279C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9775  00279E  D7FC               	bra	u7327
  9776  0027A0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9777  0027A2  D7FA               	bra	u7327
  9778  0027A4                     l1044:
  9779  0027A4  A281               	btfss	3969,1,c	;volatile
  9780  0027A6  D7FE               	goto	l1044
  9781  0027A8                     l1047:
  9782  0027A8  B281               	btfsc	3969,1,c	;volatile
  9783  0027AA  D7FE               	goto	l1047
  9784                           
  9785                           ;Test.c: 123: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9786  0027AC  0E01               	movlw	1
  9787  0027AE  ECF9  F021         	call	_lcdInst
  9788  0027B2  0E68               	movlw	104
  9789  0027B4  0100               	movlb	0	; () banked
  9790  0027B6  6FAB               	movwf	??_sensorTest& (0+255),b
  9791  0027B8  0EE4               	movlw	228
  9792  0027BA                     u7337:
  9793  0027BA  2EE8               	decfsz	wreg,f,c
  9794  0027BC  D7FE               	bra	u7337
  9795  0027BE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9796  0027C0  D7FC               	bra	u7337
  9797  0027C2  F000               	nop	
  9798  0027C4  0E80               	movlw	128
  9799  0027C6  ECF9  F021         	call	_lcdInst
  9800                           
  9801                           ;Test.c: 128: printf("TST: IR SNSR");
  9802  0027CA  0E3C               	movlw	low STR_79
  9803  0027CC  0100               	movlb	0	; () banked
  9804  0027CE  6F8E               	movwf	printf@f& (0+255),b
  9805  0027D0  0EFF               	movlw	high STR_79
  9806  0027D2  0100               	movlb	0	; () banked
  9807  0027D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9808  0027D6  EC9C  F008         	call	_printf	;wreg free
  9809                           
  9810                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
  9811  0027DA  0E05               	movlw	5
  9812  0027DC  0100               	movlb	0	; () banked
  9813  0027DE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9814  0027E0  0E0F               	movlw	15
  9815  0027E2  0100               	movlb	0	; () banked
  9816  0027E4  6FAB               	movwf	??_sensorTest& (0+255),b
  9817  0027E6  0EF1               	movlw	241
  9818  0027E8                     u7347:
  9819  0027E8  2EE8               	decfsz	wreg,f,c
  9820  0027EA  D7FE               	bra	u7347
  9821  0027EC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9822  0027EE  D7FC               	bra	u7347
  9823  0027F0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9824  0027F2  D7FA               	bra	u7347
  9825                           
  9826                           ;Test.c: 130: int on = 0;
  9827  0027F4  0E00               	movlw	0
  9828  0027F6  0100               	movlb	0	; () banked
  9829  0027F8  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9830  0027FA  0E00               	movlw	0
  9831  0027FC  6FAD               	movwf	sensorTest@on& (0+255),b
  9832                           
  9833                           ; BSR set to: 0
  9834                           ;Test.c: 132: while(PORTBbits.RB1 == 0){
  9835                           
  9836                           ;Test.c: 131: while(1){
  9837  0027FE  D021               	goto	l6422
  9838  002800                     l6416:
  9839                           
  9840                           ;Test.c: 133: readIR();
  9841  002800  ECE1  F01E         	call	_readIR	;wreg free
  9842                           
  9843                           ;Test.c: 134: lcdInst(0b10000000);;
  9844  002804  0E80               	movlw	128
  9845  002806  ECF9  F021         	call	_lcdInst
  9846                           
  9847                           ;Test.c: 135: lcdInst(0b11000000);;
  9848  00280A  0EC0               	movlw	192
  9849  00280C  ECF9  F021         	call	_lcdInst
  9850                           
  9851                           ;Test.c: 136: printf("IR_signal: %d ", IR_signal);
  9852  002810  0E61               	movlw	low STR_80
  9853  002812  0100               	movlb	0	; () banked
  9854  002814  6F8E               	movwf	printf@f& (0+255),b
  9855  002816  0EFE               	movlw	high STR_80
  9856  002818  0100               	movlb	0	; () banked
  9857  00281A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9858  00281C  C0DA  F090         	movff	_IR_signal,?_printf+2
  9859  002820  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9860  002824  EC9C  F008         	call	_printf	;wreg free
  9861                           
  9862                           ;Test.c: 137: _delay((unsigned long)((100)*(32000000/4000.0)));
  9863  002828  0E05               	movlw	5
  9864  00282A  0100               	movlb	0	; () banked
  9865  00282C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9866  00282E  0E0F               	movlw	15
  9867  002830  0100               	movlb	0	; () banked
  9868  002832  6FAB               	movwf	??_sensorTest& (0+255),b
  9869  002834  0EF1               	movlw	241
  9870  002836                     u7357:
  9871  002836  2EE8               	decfsz	wreg,f,c
  9872  002838  D7FE               	bra	u7357
  9873  00283A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9874  00283C  D7FC               	bra	u7357
  9875  00283E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9876  002840  D7FA               	bra	u7357
  9877  002842                     l6422:
  9878  002842  A281               	btfss	3969,1,c	;volatile
  9879  002844  D7DD               	goto	l6416
  9880                           
  9881                           ;Test.c: 138: }
  9882                           ;Test.c: 139: if(on == 0){
  9883  002846  0100               	movlb	0	; () banked
  9884  002848  51AD               	movf	sensorTest@on& (0+255),w,b
  9885  00284A  0100               	movlb	0	; () banked
  9886  00284C  11AE               	iorwf	(sensorTest@on+1)& (0+255),w,b
  9887  00284E  A4D8               	btfss	status,2,c
  9888  002850  D007               	goto	l6430
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;Test.c: 140: on = 1;
  9892  002852  0E00               	movlw	0
  9893  002854  0100               	movlb	0	; () banked
  9894  002856  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9895  002858  0E01               	movlw	1
  9896  00285A  6FAD               	movwf	sensorTest@on& (0+255),b
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;Test.c: 141: LATAbits.LATA5 = 1;
  9900  00285C  8A89               	bsf	3977,5,c	;volatile
  9901                           
  9902                           ;Test.c: 142: }
  9903  00285E  D006               	goto	l1056
  9904  002860                     l6430:
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;Test.c: 143: else{
  9908                           ;Test.c: 144: on = 0;
  9909  002860  0E00               	movlw	0
  9910  002862  0100               	movlb	0	; () banked
  9911  002864  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9912  002866  0E00               	movlw	0
  9913  002868  6FAD               	movwf	sensorTest@on& (0+255),b
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;Test.c: 145: LATAbits.LATA5 = 0;
  9917  00286A  9A89               	bcf	3977,5,c	;volatile
  9918  00286C                     l1056:
  9919  00286C  A281               	btfss	3969,1,c	;volatile
  9920  00286E  D7E9               	goto	l6422
  9921  002870  D7FD               	goto	l1056
  9922                           
  9923                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9924                           
  9925                           ;Test.c: 148: }
  9926                           ;Test.c: 154: printf("TST: MAGNETISM");
  9927  002872  0E05               	movlw	5
  9928  002874  0100               	movlb	0	; () banked
  9929  002876  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9930  002878  0E0F               	movlw	15
  9931  00287A  0100               	movlb	0	; () banked
  9932  00287C  6FAB               	movwf	??_sensorTest& (0+255),b
  9933  00287E  0EF1               	movlw	241
  9934  002880                     u7367:
  9935  002880  2EE8               	decfsz	wreg,f,c
  9936  002882  D7FE               	bra	u7367
  9937  002884  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9938  002886  D7FC               	bra	u7367
  9939  002888  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9940  00288A  D7FA               	bra	u7367
  9941                           
  9942                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
  9943  00288C  D021               	goto	l6444
  9944  00288E                     l6438:
  9945                           
  9946                           ;Test.c: 157: readMAG();
  9947  00288E  ECBB  F01E         	call	_readMAG	;wreg free
  9948                           
  9949                           ;Test.c: 158: lcdInst(0b10000000);;
  9950  002892  0E80               	movlw	128
  9951  002894  ECF9  F021         	call	_lcdInst
  9952                           
  9953                           ;Test.c: 159: lcdInst(0b11000000);;
  9954  002898  0EC0               	movlw	192
  9955  00289A  ECF9  F021         	call	_lcdInst
  9956                           
  9957                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
  9958  00289E  0E31               	movlw	low STR_82
  9959  0028A0  0100               	movlb	0	; () banked
  9960  0028A2  6F8E               	movwf	printf@f& (0+255),b
  9961  0028A4  0EFE               	movlw	high STR_82
  9962  0028A6  0100               	movlb	0	; () banked
  9963  0028A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9964  0028AA  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9965  0028AE  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9966  0028B2  EC9C  F008         	call	_printf	;wreg free
  9967                           
  9968                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
  9969  0028B6  0E05               	movlw	5
  9970  0028B8  0100               	movlb	0	; () banked
  9971  0028BA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9972  0028BC  0E0F               	movlw	15
  9973  0028BE  0100               	movlb	0	; () banked
  9974  0028C0  6FAB               	movwf	??_sensorTest& (0+255),b
  9975  0028C2  0EF1               	movlw	241
  9976  0028C4                     u7377:
  9977  0028C4  2EE8               	decfsz	wreg,f,c
  9978  0028C6  D7FE               	bra	u7377
  9979  0028C8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9980  0028CA  D7FC               	bra	u7377
  9981  0028CC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9982  0028CE  D7FA               	bra	u7377
  9983  0028D0                     l6444:
  9984  0028D0  B281               	btfsc	3969,1,c	;volatile
  9985  0028D2  0012               	return	
  9986  0028D4  D7DC               	goto	l6438
  9987  0028D6                     __end_of_sensorTest:
  9988                           	opt stack 0
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           intcon2	equ	0xFF1
  9997                           intcon3	equ	0xFF0
  9998                           postinc0	equ	0xFEE
  9999                           wreg	equ	0xFE8
 10000                           postdec1	equ	0xFE5
 10001                           fsr1l	equ	0xFE1
 10002                           indf2	equ	0xFDF
 10003                           postinc2	equ	0xFDE
 10004                           postdec2	equ	0xFDD
 10005                           fsr2h	equ	0xFDA
 10006                           fsr2l	equ	0xFD9
 10007                           status	equ	0xFD8
 10008                           
 10009 ;; *************** function _readMAG *****************
 10010 ;; Defined at:
 10011 ;;		line 29 in file "ADCFunctionality.c"
 10012 ;; Parameters:    Size  Location     Type
 10013 ;;		None
 10014 ;; Auto vars:     Size  Location     Type
 10015 ;;  res             2    4[BANK0 ] int 
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  1    wreg      void 
 10018 ;; Registers used:
 10019 ;;		wreg, status,2, status,0, cstack
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;Total ram usage:        4 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:    8
 10032 ;; This function calls:
 10033 ;;		_readADC
 10034 ;; This function is called by:
 10035 ;;		_ID
 10036 ;;		_sensorTest
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text37
 10041  003D76                     __ptext37:
 10042                           	opt stack 0
 10043  003D76                     _readMAG:
 10044                           	opt stack 20
 10045                           
 10046                           ;ADCFunctionality.c: 30: readADC(1);
 10047                           
 10048                           ;incstack = 0
 10049  003D76  0E01               	movlw	1
 10050  003D78  ECEE  F020         	call	_readADC
 10051                           
 10052                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10053  003D7C  50C3               	movf	4035,w,c	;volatile
 10054  003D7E  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10055  003D82  0100               	movlb	0	; () banked
 10056  003D84  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10057  003D86  C082  F083         	movff	??_readMAG,??_readMAG+1
 10058  003D8A  0100               	movlb	0	; () banked
 10059  003D8C  6B82               	clrf	??_readMAG& (0+255),b
 10060  003D8E  0100               	movlb	0	; () banked
 10061  003D90  1182               	iorwf	??_readMAG& (0+255),w,b
 10062  003D92  0100               	movlb	0	; () banked
 10063  003D94  6F84               	movwf	readMAG@res& (0+255),b
 10064  003D96  0100               	movlb	0	; () banked
 10065  003D98  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10066  003D9A  0100               	movlb	0	; () banked
 10067  003D9C  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10071  003D9E  0100               	movlb	0	; () banked
 10072  003DA0  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10073  003DA2  D008               	goto	u4351
 10074  003DA4  0100               	movlb	0	; () banked
 10075  003DA6  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10076  003DA8  E107               	bnz	u4350
 10077  003DAA  0E96               	movlw	150
 10078  003DAC  0100               	movlb	0	; () banked
 10079  003DAE  5D84               	subwf	readMAG@res& (0+255),w,b
 10080  003DB0  B0D8               	btfsc	status,0,c
 10081  003DB2  D002               	goto	u4350
 10082  003DB4                     u4351:
 10083  003DB4  0E01               	movlw	1
 10084  003DB6  D001               	goto	u4360
 10085  003DB8                     u4350:
 10086  003DB8  0E00               	movlw	0
 10087  003DBA                     u4360:
 10088  003DBA  0100               	movlb	0	; () banked
 10089  003DBC  6FDC               	movwf	_MAG_signal& (0+255),b
 10090  003DBE  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10091                           
 10092                           ; BSR set to: 0
 10093  003DC0  0012               	return		;funcret
 10094  003DC2                     __end_of_readMAG:
 10095                           	opt stack 0
 10096                           tblptru	equ	0xFF8
 10097                           tblptrh	equ	0xFF7
 10098                           tblptrl	equ	0xFF6
 10099                           tablat	equ	0xFF5
 10100                           prodh	equ	0xFF4
 10101                           prodl	equ	0xFF3
 10102                           intcon	equ	0xFF2
 10103                           intcon2	equ	0xFF1
 10104                           intcon3	equ	0xFF0
 10105                           postinc0	equ	0xFEE
 10106                           wreg	equ	0xFE8
 10107                           postdec1	equ	0xFE5
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           fsr2h	equ	0xFDA
 10113                           fsr2l	equ	0xFD9
 10114                           status	equ	0xFD8
 10115                           
 10116 ;; *************** function _readIR *****************
 10117 ;; Defined at:
 10118 ;;		line 23 in file "ADCFunctionality.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;  res             2    4[BANK0 ] int 
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      void 
 10125 ;; Registers used:
 10126 ;;		wreg, status,2, status,0, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10135 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10136 ;;Total ram usage:        4 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    8
 10139 ;; This function calls:
 10140 ;;		_readADC
 10141 ;; This function is called by:
 10142 ;;		_getIR
 10143 ;;		_sensorTest
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           	psect	text38
 10148  003DC2                     __ptext38:
 10149                           	opt stack 0
 10150  003DC2                     _readIR:
 10151                           	opt stack 19
 10152                           
 10153                           ;ADCFunctionality.c: 24: readADC(0);
 10154                           
 10155                           ; BSR set to: 0
 10156                           ;incstack = 0
 10157  003DC2  0E00               	movlw	0
 10158  003DC4  ECEE  F020         	call	_readADC
 10159                           
 10160                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
 10161  003DC8  50C3               	movf	4035,w,c	;volatile
 10162  003DCA  CFC4 F082          	movff	4036,??_readIR	;volatile
 10163  003DCE  0100               	movlb	0	; () banked
 10164  003DD0  6B83               	clrf	(??_readIR+1)& (0+255),b
 10165  003DD2  C082  F083         	movff	??_readIR,??_readIR+1
 10166  003DD6  0100               	movlb	0	; () banked
 10167  003DD8  6B82               	clrf	??_readIR& (0+255),b
 10168  003DDA  0100               	movlb	0	; () banked
 10169  003DDC  1182               	iorwf	??_readIR& (0+255),w,b
 10170  003DDE  0100               	movlb	0	; () banked
 10171  003DE0  6F84               	movwf	readIR@res& (0+255),b
 10172  003DE2  0100               	movlb	0	; () banked
 10173  003DE4  5183               	movf	(??_readIR+1)& (0+255),w,b
 10174  003DE6  0100               	movlb	0	; () banked
 10175  003DE8  6F85               	movwf	(readIR@res+1)& (0+255),b
 10176                           
 10177                           ; BSR set to: 0
 10178                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
 10179  003DEA  0100               	movlb	0	; () banked
 10180  003DEC  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
 10181  003DEE  D00A               	goto	u3680
 10182  003DF0  0E85               	movlw	133
 10183  003DF2  0100               	movlb	0	; () banked
 10184  003DF4  5D84               	subwf	readIR@res& (0+255),w,b
 10185  003DF6  0E03               	movlw	3
 10186  003DF8  0100               	movlb	0	; () banked
 10187  003DFA  5985               	subwfb	(readIR@res+1)& (0+255),w,b
 10188  003DFC  A0D8               	btfss	status,0,c
 10189  003DFE  D002               	goto	u3680
 10190  003E00  0E01               	movlw	1
 10191  003E02  D001               	goto	u3690
 10192  003E04                     u3680:
 10193  003E04  0E00               	movlw	0
 10194  003E06                     u3690:
 10195  003E06  0100               	movlb	0	; () banked
 10196  003E08  6FDA               	movwf	_IR_signal& (0+255),b
 10197  003E0A  6BDB               	clrf	(_IR_signal+1)& (0+255),b
 10198                           
 10199                           ; BSR set to: 0
 10200  003E0C  0012               	return		;funcret
 10201  003E0E                     __end_of_readIR:
 10202                           	opt stack 0
 10203                           tblptru	equ	0xFF8
 10204                           tblptrh	equ	0xFF7
 10205                           tblptrl	equ	0xFF6
 10206                           tablat	equ	0xFF5
 10207                           prodh	equ	0xFF4
 10208                           prodl	equ	0xFF3
 10209                           intcon	equ	0xFF2
 10210                           intcon2	equ	0xFF1
 10211                           intcon3	equ	0xFF0
 10212                           postinc0	equ	0xFEE
 10213                           wreg	equ	0xFE8
 10214                           postdec1	equ	0xFE5
 10215                           fsr1l	equ	0xFE1
 10216                           indf2	equ	0xFDF
 10217                           postinc2	equ	0xFDE
 10218                           postdec2	equ	0xFDD
 10219                           fsr2h	equ	0xFDA
 10220                           fsr2l	equ	0xFD9
 10221                           status	equ	0xFD8
 10222                           
 10223 ;; *************** function _readADC *****************
 10224 ;; Defined at:
 10225 ;;		line 15 in file "ADCFunctionality.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;  channel         1    wreg     unsigned char 
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;  channel         1    1[BANK0 ] unsigned char 
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  1    wreg      void 
 10232 ;; Registers used:
 10233 ;;		wreg, status,2, status,0, cstack
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;Total ram usage:        2 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    7
 10246 ;; This function calls:
 10247 ;;		Nothing
 10248 ;; This function is called by:
 10249 ;;		_readIR
 10250 ;;		_readMAG
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           	psect	text39
 10255  0041DC                     __ptext39:
 10256                           	opt stack 0
 10257  0041DC                     _readADC:
 10258                           	opt stack 19
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;incstack = 0
 10262                           ;readADC@channel stored from wreg
 10263  0041DC  0100               	movlb	0	; () banked
 10264  0041DE  6F81               	movwf	readADC@channel& (0+255),b
 10265                           
 10266                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10267  0041E0  0100               	movlb	0	; () banked
 10268  0041E2  4581               	rlncf	readADC@channel& (0+255),w,b
 10269  0041E4  46E8               	rlncf	wreg,f,c
 10270  0041E6  0BFC               	andlw	252
 10271  0041E8  6EC2               	movwf	4034,c	;volatile
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10275  0041EA  80C2               	bsf	4034,0,c	;volatile
 10276                           
 10277                           ; BSR set to: 0
 10278                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10279  0041EC  82C2               	bsf	4034,1,c	;volatile
 10280                           
 10281                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10282  0041EE  D009               	goto	l5070
 10283  0041F0                     l5068:
 10284  0041F0  0E34               	movlw	52
 10285  0041F2  0100               	movlb	0	; () banked
 10286  0041F4  6F80               	movwf	??_readADC& (0+255),b
 10287  0041F6  0EF1               	movlw	241
 10288  0041F8                     u7387:
 10289  0041F8  2EE8               	decfsz	wreg,f,c
 10290  0041FA  D7FE               	bra	u7387
 10291  0041FC  2F80               	decfsz	??_readADC& (0+255),f,b
 10292  0041FE  D7FC               	bra	u7387
 10293  004200  D000               	nop2	
 10294  004202                     l5070:
 10295  004202  A2C2               	btfss	4034,1,c	;volatile
 10296  004204  0012               	return	
 10297  004206  D7F4               	goto	l5068
 10298  004208                     __end_of_readADC:
 10299                           	opt stack 0
 10300                           tblptru	equ	0xFF8
 10301                           tblptrh	equ	0xFF7
 10302                           tblptrl	equ	0xFF6
 10303                           tablat	equ	0xFF5
 10304                           prodh	equ	0xFF4
 10305                           prodl	equ	0xFF3
 10306                           intcon	equ	0xFF2
 10307                           intcon2	equ	0xFF1
 10308                           intcon3	equ	0xFF0
 10309                           postinc0	equ	0xFEE
 10310                           wreg	equ	0xFE8
 10311                           postdec1	equ	0xFE5
 10312                           fsr1l	equ	0xFE1
 10313                           indf2	equ	0xFDF
 10314                           postinc2	equ	0xFDE
 10315                           postdec2	equ	0xFDD
 10316                           fsr2h	equ	0xFDA
 10317                           fsr2l	equ	0xFD9
 10318                           status	equ	0xFD8
 10319                           
 10320 ;; *************** function _algorithmTest *****************
 10321 ;; Defined at:
 10322 ;;		line 70 in file "Test.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  1    wreg      void 
 10329 ;; Registers used:
 10330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;Total ram usage:        2 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:   10
 10343 ;; This function calls:
 10344 ;;		_lcdInst
 10345 ;;		_printf
 10346 ;; This function is called by:
 10347 ;;		_Test
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           	psect	text40
 10352  0031DE                     __ptext40:
 10353                           	opt stack 0
 10354  0031DE                     _algorithmTest:
 10355                           	opt stack 19
 10356                           
 10357                           ;Test.c: 72: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10358                           
 10359                           ;incstack = 0
 10360  0031DE  0E01               	movlw	1
 10361  0031E0  ECF9  F021         	call	_lcdInst
 10362  0031E4  0E68               	movlw	104
 10363  0031E6  0100               	movlb	0	; () banked
 10364  0031E8  6FAB               	movwf	??_algorithmTest& (0+255),b
 10365  0031EA  0EE4               	movlw	228
 10366  0031EC                     u7397:
 10367  0031EC  2EE8               	decfsz	wreg,f,c
 10368  0031EE  D7FE               	bra	u7397
 10369  0031F0  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10370  0031F2  D7FC               	bra	u7397
 10371  0031F4  F000               	nop	
 10372  0031F6  0E80               	movlw	128
 10373  0031F8  ECF9  F021         	call	_lcdInst
 10374                           
 10375                           ;Test.c: 73: printf("ALGORITHM TEST");
 10376  0031FC  0ED9               	movlw	low STR_70
 10377  0031FE  0100               	movlb	0	; () banked
 10378  003200  6F8E               	movwf	printf@f& (0+255),b
 10379  003202  0EFE               	movlw	high STR_70
 10380  003204  0100               	movlb	0	; () banked
 10381  003206  6F8F               	movwf	(printf@f+1)& (0+255),b
 10382  003208  EC9C  F008         	call	_printf	;wreg free
 10383                           
 10384                           ;Test.c: 74: lcdInst(0b11000000);;
 10385  00320C  0EC0               	movlw	192
 10386  00320E  ECF9  F021         	call	_lcdInst
 10387                           
 10388                           ;Test.c: 75: printf("PUSH TO START");
 10389  003212  0E12               	movlw	low STR_71
 10390  003214  0100               	movlb	0	; () banked
 10391  003216  6F8E               	movwf	printf@f& (0+255),b
 10392  003218  0EFF               	movlw	high STR_71
 10393  00321A  0100               	movlb	0	; () banked
 10394  00321C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10395  00321E  EC9C  F008         	call	_printf	;wreg free
 10396                           
 10397                           ;Test.c: 76: _delay((unsigned long)((100)*(32000000/4000.0)));
 10398  003222  0E05               	movlw	5
 10399  003224  0100               	movlb	0	; () banked
 10400  003226  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10401  003228  0E0F               	movlw	15
 10402  00322A  0100               	movlb	0	; () banked
 10403  00322C  6FAB               	movwf	??_algorithmTest& (0+255),b
 10404  00322E  0EF1               	movlw	241
 10405  003230                     u7407:
 10406  003230  2EE8               	decfsz	wreg,f,c
 10407  003232  D7FE               	bra	u7407
 10408  003234  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10409  003236  D7FC               	bra	u7407
 10410  003238  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10411  00323A  D7FA               	bra	u7407
 10412  00323C                     l1035:
 10413  00323C  A281               	btfss	3969,1,c	;volatile
 10414  00323E  D7FE               	goto	l1035
 10415  003240                     l1038:
 10416  003240  B281               	btfsc	3969,1,c	;volatile
 10417  003242  D7FE               	goto	l1038
 10418                           
 10419                           ;Test.c: 79: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10420  003244  0E01               	movlw	1
 10421  003246  ECF9  F021         	call	_lcdInst
 10422  00324A  0E68               	movlw	104
 10423  00324C  0100               	movlb	0	; () banked
 10424  00324E  6FAB               	movwf	??_algorithmTest& (0+255),b
 10425  003250  0EE4               	movlw	228
 10426  003252                     u7417:
 10427  003252  2EE8               	decfsz	wreg,f,c
 10428  003254  D7FE               	bra	u7417
 10429  003256  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10430  003258  D7FC               	bra	u7417
 10431  00325A  F000               	nop	
 10432  00325C  0E80               	movlw	128
 10433  00325E  ECF9  F021         	call	_lcdInst
 10434                           
 10435                           ;Test.c: 84: printf("ALG1: 9 POPNOTAB");
 10436  003262  0E99               	movlw	low STR_72
 10437  003264  0100               	movlb	0	; () banked
 10438  003266  6F8E               	movwf	printf@f& (0+255),b
 10439  003268  0EFC               	movlw	high STR_72
 10440  00326A  0100               	movlb	0	; () banked
 10441  00326C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10442  00326E  EC9C  F008         	call	_printf	;wreg free
 10443                           
 10444                           ;Test.c: 91: printf("ALG2: 12 CANS");
 10445  003272  0EF6               	movlw	low STR_73
 10446  003274  0100               	movlb	0	; () banked
 10447  003276  6F8E               	movwf	printf@f& (0+255),b
 10448  003278  0EFE               	movlw	high STR_73
 10449  00327A  0100               	movlb	0	; () banked
 10450  00327C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10451  00327E  EC9C  F008         	call	_printf	;wreg free
 10452                           
 10453                           ;Test.c: 100: printf("ALG3: 1 CAN");
 10454  003282  0E63               	movlw	low STR_74
 10455  003284  0100               	movlb	0	; () banked
 10456  003286  6F8E               	movwf	printf@f& (0+255),b
 10457  003288  0EFF               	movlw	high STR_74
 10458  00328A  0100               	movlb	0	; () banked
 10459  00328C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10460  00328E  EC9C  F008         	call	_printf	;wreg free
 10461                           
 10462                           ;Test.c: 106: printf("ALG4: ALL CANS");
 10463  003292  0EBB               	movlw	low STR_75
 10464  003294  0100               	movlb	0	; () banked
 10465  003296  6F8E               	movwf	printf@f& (0+255),b
 10466  003298  0EFE               	movlw	high STR_75
 10467  00329A  0100               	movlb	0	; () banked
 10468  00329C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10469  00329E  EC9C  F008         	call	_printf	;wreg free
 10470                           
 10471                           ;Test.c: 111: printf("ALG5: NO CANS");
 10472  0032A2  0E04               	movlw	low STR_76
 10473  0032A4  0100               	movlb	0	; () banked
 10474  0032A6  6F8E               	movwf	printf@f& (0+255),b
 10475  0032A8  0EFF               	movlw	high STR_76
 10476  0032AA  0100               	movlb	0	; () banked
 10477  0032AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10478  0032AE  EC9C  F008         	call	_printf	;wreg free
 10479  0032B2  0012               	return		;funcret
 10480  0032B4                     __end_of_algorithmTest:
 10481                           	opt stack 0
 10482                           tblptru	equ	0xFF8
 10483                           tblptrh	equ	0xFF7
 10484                           tblptrl	equ	0xFF6
 10485                           tablat	equ	0xFF5
 10486                           prodh	equ	0xFF4
 10487                           prodl	equ	0xFF3
 10488                           intcon	equ	0xFF2
 10489                           intcon2	equ	0xFF1
 10490                           intcon3	equ	0xFF0
 10491                           postinc0	equ	0xFEE
 10492                           wreg	equ	0xFE8
 10493                           postdec1	equ	0xFE5
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           postdec2	equ	0xFDD
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function _actuatorTest *****************
 10503 ;; Defined at:
 10504 ;;		line 165 in file "Test.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  i               1   45[BANK0 ] unsigned char 
 10509 ;;  i               1   67[BANK0 ] unsigned char 
 10510 ;;  i               1   66[BANK0 ] unsigned char 
 10511 ;;  i               1   65[BANK0 ] unsigned char 
 10512 ;;  i               1   64[BANK0 ] unsigned char 
 10513 ;;  i               1   63[BANK0 ] unsigned char 
 10514 ;;  i               1   62[BANK0 ] unsigned char 
 10515 ;;  i               1   61[BANK0 ] unsigned char 
 10516 ;;  i               1   60[BANK0 ] unsigned char 
 10517 ;;  i               1   59[BANK0 ] unsigned char 
 10518 ;;  i               1   58[BANK0 ] unsigned char 
 10519 ;;  i               1   57[BANK0 ] unsigned char 
 10520 ;;  i               1   56[BANK0 ] unsigned char 
 10521 ;;  i               1   55[BANK0 ] unsigned char 
 10522 ;;  i               1   54[BANK0 ] unsigned char 
 10523 ;;  i               1   53[BANK0 ] unsigned char 
 10524 ;;  i               1   52[BANK0 ] unsigned char 
 10525 ;;  i               1   51[BANK0 ] unsigned char 
 10526 ;;  i               1   50[BANK0 ] unsigned char 
 10527 ;;  i               1   49[BANK0 ] unsigned char 
 10528 ;;  i               1   48[BANK0 ] unsigned char 
 10529 ;;  i               1   47[BANK0 ] unsigned char 
 10530 ;;  i               1   46[BANK0 ] unsigned char 
 10531 ;;  i               2   68[BANK0 ] int 
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  1    wreg      void 
 10534 ;; Registers used:
 10535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;Total ram usage:       27 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:   10
 10548 ;; This function calls:
 10549 ;;		_lcdInst
 10550 ;;		_printf
 10551 ;;		_updateServoPosition
 10552 ;; This function is called by:
 10553 ;;		_Test
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           	psect	text41
 10558  0008B8                     __ptext41:
 10559                           	opt stack 0
 10560  0008B8                     _actuatorTest:
 10561                           	opt stack 19
 10562                           
 10563                           ;Test.c: 167: int i = 0;
 10564                           
 10565                           ;incstack = 0
 10566  0008B8  0E00               	movlw	0
 10567  0008BA  0100               	movlb	0	; () banked
 10568  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10569  0008BE  0E00               	movlw	0
 10570  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;Test.c: 169: (INTCONbits.GIE = 1);
 10574  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10575                           
 10576                           ; BSR set to: 0
 10577                           ;Test.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10578  0008C4  0E01               	movlw	1
 10579  0008C6  ECF9  F021         	call	_lcdInst
 10580  0008CA  0E68               	movlw	104
 10581  0008CC  0100               	movlb	0	; () banked
 10582  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10583  0008D0  0EE4               	movlw	228
 10584  0008D2                     u7427:
 10585  0008D2  2EE8               	decfsz	wreg,f,c
 10586  0008D4  D7FE               	bra	u7427
 10587  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10588  0008D8  D7FC               	bra	u7427
 10589  0008DA  F000               	nop	
 10590  0008DC  0E80               	movlw	128
 10591  0008DE  ECF9  F021         	call	_lcdInst
 10592                           
 10593                           ;Test.c: 171: printf("ACTUATORS");
 10594  0008E2  0E9A               	movlw	low STR_83
 10595  0008E4  0100               	movlb	0	; () banked
 10596  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10597  0008E8  0EFF               	movlw	high STR_83
 10598  0008EA  0100               	movlb	0	; () banked
 10599  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10600  0008EE  EC9C  F008         	call	_printf	;wreg free
 10601                           
 10602                           ;Test.c: 172: lcdInst(0b11000000);;
 10603  0008F2  0EC0               	movlw	192
 10604  0008F4  ECF9  F021         	call	_lcdInst
 10605                           
 10606                           ;Test.c: 173: printf("PUSH TO START");
 10607  0008F8  0E12               	movlw	low STR_71
 10608  0008FA  0100               	movlb	0	; () banked
 10609  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10610  0008FE  0EFF               	movlw	high STR_71
 10611  000900  0100               	movlb	0	; () banked
 10612  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10613  000904  EC9C  F008         	call	_printf	;wreg free
 10614                           
 10615                           ;Test.c: 174: _delay((unsigned long)((100)*(32000000/4000.0)));
 10616  000908  0E05               	movlw	5
 10617  00090A  0100               	movlb	0	; () banked
 10618  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10619  00090E  0E0F               	movlw	15
 10620  000910  0100               	movlb	0	; () banked
 10621  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10622  000914  0EF1               	movlw	241
 10623  000916                     u7437:
 10624  000916  2EE8               	decfsz	wreg,f,c
 10625  000918  D7FE               	bra	u7437
 10626  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10627  00091C  D7FC               	bra	u7437
 10628  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10629  000920  D7FA               	bra	u7437
 10630  000922                     l1067:
 10631  000922  A281               	btfss	3969,1,c	;volatile
 10632  000924  D7FE               	goto	l1067
 10633  000926                     l1070:
 10634  000926  B281               	btfsc	3969,1,c	;volatile
 10635  000928  D7FE               	goto	l1070
 10636                           
 10637                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10638  00092A  0E01               	movlw	1
 10639  00092C  ECF9  F021         	call	_lcdInst
 10640  000930  0E68               	movlw	104
 10641  000932  0100               	movlb	0	; () banked
 10642  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10643  000936  0EE4               	movlw	228
 10644  000938                     u7447:
 10645  000938  2EE8               	decfsz	wreg,f,c
 10646  00093A  D7FE               	bra	u7447
 10647  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10648  00093E  D7FC               	bra	u7447
 10649  000940  F000               	nop	
 10650  000942  0E80               	movlw	128
 10651  000944  ECF9  F021         	call	_lcdInst
 10652                           
 10653                           ;Test.c: 182: printf("TST: DC MOTORS");
 10654  000948  0ECA               	movlw	low STR_85
 10655  00094A  0100               	movlb	0	; () banked
 10656  00094C  6F8E               	movwf	printf@f& (0+255),b
 10657  00094E  0EFE               	movlw	high STR_85
 10658  000950  0100               	movlb	0	; () banked
 10659  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10660  000954  EC9C  F008         	call	_printf	;wreg free
 10661                           
 10662                           ;Test.c: 183: lcdInst(0b11000000);;
 10663  000958  0EC0               	movlw	192
 10664  00095A  ECF9  F021         	call	_lcdInst
 10665                           
 10666                           ;Test.c: 184: printf("PIN RA5 HIGH.");
 10667  00095E  0EE8               	movlw	low STR_86
 10668  000960  0100               	movlb	0	; () banked
 10669  000962  6F8E               	movwf	printf@f& (0+255),b
 10670  000964  0EFE               	movlw	high STR_86
 10671  000966  0100               	movlb	0	; () banked
 10672  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10673  00096A  EC9C  F008         	call	_printf	;wreg free
 10674                           
 10675                           ;Test.c: 185: LATAbits.LATA5 = 1;
 10676  00096E  8A89               	bsf	3977,5,c	;volatile
 10677                           
 10678                           ;Test.c: 186: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10679  000970  0E00               	movlw	0
 10680  000972  0100               	movlb	0	; () banked
 10681  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10682  000976  0E00               	movlw	0
 10683  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10684                           
 10685                           ; BSR set to: 0
 10686  00097A  0100               	movlb	0	; () banked
 10687  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10688  00097E  D008               	goto	l6484
 10689  000980  0100               	movlb	0	; () banked
 10690  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10691  000984  E123               	bnz	l1074
 10692  000986  0E05               	movlw	5
 10693  000988  0100               	movlb	0	; () banked
 10694  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10695  00098C  B0D8               	btfsc	status,0,c
 10696  00098E  D01E               	goto	l1074
 10697  000990                     l6484:
 10698                           
 10699                           ; BSR set to: 0
 10700  000990  0E00               	movlw	0
 10701  000992  0100               	movlb	0	; () banked
 10702  000994  6FAD               	movwf	actuatorTest@i_1574& (0+255),b
 10703  000996                     l6486:
 10704                           
 10705                           ; BSR set to: 0
 10706  000996  0E63               	movlw	99
 10707  000998  0100               	movlb	0	; () banked
 10708  00099A  65AD               	cpfsgt	actuatorTest@i_1574& (0+255),b
 10709  00099C  D001               	goto	l6490
 10710  00099E  D00C               	goto	l6494
 10711  0009A0                     l6490:
 10712                           
 10713                           ; BSR set to: 0
 10714  0009A0  0E68               	movlw	104
 10715  0009A2  0100               	movlb	0	; () banked
 10716  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10717  0009A6  0EE4               	movlw	228
 10718  0009A8                     u7457:
 10719  0009A8  2EE8               	decfsz	wreg,f,c
 10720  0009AA  D7FE               	bra	u7457
 10721  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10722  0009AE  D7FC               	bra	u7457
 10723  0009B0  F000               	nop	
 10724  0009B2  0100               	movlb	0	; () banked
 10725  0009B4  2BAD               	incf	actuatorTest@i_1574& (0+255),f,b
 10726  0009B6  D7EF               	goto	l6486
 10727  0009B8                     l6494:
 10728                           
 10729                           ; BSR set to: 0
 10730  0009B8  0100               	movlb	0	; () banked
 10731  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10732  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10733                           
 10734                           ; BSR set to: 0
 10735  0009BE  0100               	movlb	0	; () banked
 10736  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10737  0009C2  D7E6               	goto	l6484
 10738  0009C4  0100               	movlb	0	; () banked
 10739  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10740  0009C8  E101               	bnz	u5010
 10741  0009CA  D7DD               	goto	L7
 10742  0009CC                     u5010:
 10743  0009CC                     l1074:
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;Test.c: 187: LATAbits.LATA5 = 0;
 10747  0009CC  9A89               	bcf	3977,5,c	;volatile
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;Test.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10751  0009CE  0E01               	movlw	1
 10752  0009D0  ECF9  F021         	call	_lcdInst
 10753  0009D4  0E68               	movlw	104
 10754  0009D6  0100               	movlb	0	; () banked
 10755  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10756  0009DA  0EE4               	movlw	228
 10757  0009DC                     u7467:
 10758  0009DC  2EE8               	decfsz	wreg,f,c
 10759  0009DE  D7FE               	bra	u7467
 10760  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10761  0009E2  D7FC               	bra	u7467
 10762  0009E4  F000               	nop	
 10763  0009E6  0E80               	movlw	128
 10764  0009E8  ECF9  F021         	call	_lcdInst
 10765                           
 10766                           ;Test.c: 194: printf("TST: COND SOLN'D");
 10767  0009EC  0EBB               	movlw	low STR_87
 10768  0009EE  0100               	movlb	0	; () banked
 10769  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10770  0009F2  0EFC               	movlw	high STR_87
 10771  0009F4  0100               	movlb	0	; () banked
 10772  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10773  0009F8  EC9C  F008         	call	_printf	;wreg free
 10774                           
 10775                           ;Test.c: 195: lcdInst(0b11000000);;
 10776  0009FC  0EC0               	movlw	192
 10777  0009FE  ECF9  F021         	call	_lcdInst
 10778                           
 10779                           ;Test.c: 196: printf("PIN RA3...");
 10780  000A02  0E6F               	movlw	low STR_88
 10781  000A04  0100               	movlb	0	; () banked
 10782  000A06  6F8E               	movwf	printf@f& (0+255),b
 10783  000A08  0EFF               	movlw	high STR_88
 10784  000A0A  0100               	movlb	0	; () banked
 10785  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10786  000A0E  EC9C  F008         	call	_printf	;wreg free
 10787                           
 10788                           ;Test.c: 197: for(i=0;i<5;i++){
 10789  000A12  0E00               	movlw	0
 10790  000A14  0100               	movlb	0	; () banked
 10791  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10792  000A18  0E00               	movlw	0
 10793  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10794                           
 10795                           ; BSR set to: 0
 10796  000A1C  0100               	movlb	0	; () banked
 10797  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10798  000A20  D008               	goto	l1077
 10799  000A22  0100               	movlb	0	; () banked
 10800  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10801  000A26  E12C               	bnz	l1078
 10802  000A28  0E05               	movlw	5
 10803  000A2A  0100               	movlb	0	; () banked
 10804  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10805  000A2E  B0D8               	btfsc	status,0,c
 10806  000A30  D027               	goto	l1078
 10807  000A32                     l1077:
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;Test.c: 198: LATAbits.LATA3 = 1;
 10811  000A32  8689               	bsf	3977,3,c	;volatile
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;Test.c: 199: _delay((unsigned long)((300)*(32000000/4000.0)));
 10815  000A34  0E0D               	movlw	13
 10816  000A36  0100               	movlb	0	; () banked
 10817  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10818  000A3A  0E2D               	movlw	45
 10819  000A3C  0100               	movlb	0	; () banked
 10820  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10821  000A40  0ED7               	movlw	215
 10822  000A42                     u7477:
 10823  000A42  2EE8               	decfsz	wreg,f,c
 10824  000A44  D7FE               	bra	u7477
 10825  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10826  000A48  D7FC               	bra	u7477
 10827  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10828  000A4C  D7FA               	bra	u7477
 10829  000A4E  D000               	nop2	
 10830                           
 10831                           ;Test.c: 200: LATAbits.LATA3 = ~1;
 10832  000A50  9689               	bcf	3977,3,c	;volatile
 10833                           
 10834                           ;Test.c: 201: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10835  000A52  0E1D               	movlw	29
 10836  000A54  0100               	movlb	0	; () banked
 10837  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10838  000A58  0E69               	movlw	105
 10839  000A5A  0100               	movlb	0	; () banked
 10840  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10841  000A5E  0EA5               	movlw	165
 10842  000A60                     u7487:
 10843  000A60  2EE8               	decfsz	wreg,f,c
 10844  000A62  D7FE               	bra	u7487
 10845  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10846  000A66  D7FC               	bra	u7487
 10847  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10848  000A6A  D7FA               	bra	u7487
 10849  000A6C  0100               	movlb	0	; () banked
 10850  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10851  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10852  000A72  0100               	movlb	0	; () banked
 10853  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10854  000A76  D7DD               	goto	l1077
 10855  000A78  0100               	movlb	0	; () banked
 10856  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10857  000A7C  E101               	bnz	u5030
 10858  000A7E  D7D4               	goto	L8
 10859  000A80                     u5030:
 10860  000A80                     l1078:
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;Test.c: 202: }
 10864                           ;Test.c: 203: LATAbits.LATA3 = ~1;
 10865  000A80  9689               	bcf	3977,3,c	;volatile
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;Test.c: 204: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10869  000A82  0E01               	movlw	1
 10870  000A84  ECF9  F021         	call	_lcdInst
 10871  000A88  0E68               	movlw	104
 10872  000A8A  0100               	movlb	0	; () banked
 10873  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10874  000A8E  0EE4               	movlw	228
 10875  000A90                     u7497:
 10876  000A90  2EE8               	decfsz	wreg,f,c
 10877  000A92  D7FE               	bra	u7497
 10878  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10879  000A96  D7FC               	bra	u7497
 10880  000A98  F000               	nop	
 10881  000A9A  0E80               	movlw	128
 10882  000A9C  ECF9  F021         	call	_lcdInst
 10883                           
 10884                           ;Test.c: 210: printf("TST: PUSH SOLN'D");
 10885  000AA0  0ECC               	movlw	low STR_89
 10886  000AA2  0100               	movlb	0	; () banked
 10887  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10888  000AA6  0EFC               	movlw	high STR_89
 10889  000AA8  0100               	movlb	0	; () banked
 10890  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10891  000AAC  EC9C  F008         	call	_printf	;wreg free
 10892                           
 10893                           ;Test.c: 211: lcdInst(0b11000000);;
 10894  000AB0  0EC0               	movlw	192
 10895  000AB2  ECF9  F021         	call	_lcdInst
 10896                           
 10897                           ;Test.c: 212: printf("PIN RA4...");
 10898  000AB6  0E7A               	movlw	low STR_90
 10899  000AB8  0100               	movlb	0	; () banked
 10900  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10901  000ABC  0EFF               	movlw	high STR_90
 10902  000ABE  0100               	movlb	0	; () banked
 10903  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10904  000AC2  EC9C  F008         	call	_printf	;wreg free
 10905                           
 10906                           ;Test.c: 213: for(i=0;i<5;i++){
 10907  000AC6  0E00               	movlw	0
 10908  000AC8  0100               	movlb	0	; () banked
 10909  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10910  000ACC  0E00               	movlw	0
 10911  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10912                           
 10913                           ; BSR set to: 0
 10914  000AD0  0100               	movlb	0	; () banked
 10915  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10916  000AD4  D008               	goto	l1079
 10917  000AD6  0100               	movlb	0	; () banked
 10918  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10919  000ADA  E12C               	bnz	l1080
 10920  000ADC  0E05               	movlw	5
 10921  000ADE  0100               	movlb	0	; () banked
 10922  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10923  000AE2  B0D8               	btfsc	status,0,c
 10924  000AE4  D027               	goto	l1080
 10925  000AE6                     l1079:
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;Test.c: 214: LATAbits.LATA4 = 1;
 10929  000AE6  8889               	bsf	3977,4,c	;volatile
 10930                           
 10931                           ; BSR set to: 0
 10932                           ;Test.c: 215: _delay((unsigned long)((300)*(32000000/4000.0)));
 10933  000AE8  0E0D               	movlw	13
 10934  000AEA  0100               	movlb	0	; () banked
 10935  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10936  000AEE  0E2D               	movlw	45
 10937  000AF0  0100               	movlb	0	; () banked
 10938  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10939  000AF4  0ED7               	movlw	215
 10940  000AF6                     u7507:
 10941  000AF6  2EE8               	decfsz	wreg,f,c
 10942  000AF8  D7FE               	bra	u7507
 10943  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10944  000AFC  D7FC               	bra	u7507
 10945  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10946  000B00  D7FA               	bra	u7507
 10947  000B02  D000               	nop2	
 10948                           
 10949                           ;Test.c: 216: LATAbits.LATA4 = ~1;
 10950  000B04  9889               	bcf	3977,4,c	;volatile
 10951                           
 10952                           ;Test.c: 217: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10953  000B06  0E1D               	movlw	29
 10954  000B08  0100               	movlb	0	; () banked
 10955  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10956  000B0C  0E69               	movlw	105
 10957  000B0E  0100               	movlb	0	; () banked
 10958  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 10959  000B12  0EA5               	movlw	165
 10960  000B14                     u7517:
 10961  000B14  2EE8               	decfsz	wreg,f,c
 10962  000B16  D7FE               	bra	u7517
 10963  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10964  000B1A  D7FC               	bra	u7517
 10965  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10966  000B1E  D7FA               	bra	u7517
 10967  000B20  0100               	movlb	0	; () banked
 10968  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10969  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10970  000B26  0100               	movlb	0	; () banked
 10971  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10972  000B2A  D7DD               	goto	l1079
 10973  000B2C  0100               	movlb	0	; () banked
 10974  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10975  000B30  E101               	bnz	u5050
 10976  000B32  D7D4               	goto	L9
 10977  000B34                     u5050:
 10978  000B34                     l1080:
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;Test.c: 218: }
 10982                           ;Test.c: 219: LATAbits.LATA4 = ~1;
 10983  000B34  9889               	bcf	3977,4,c	;volatile
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;Test.c: 220: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10987  000B36  0E01               	movlw	1
 10988  000B38  ECF9  F021         	call	_lcdInst
 10989  000B3C  0E68               	movlw	104
 10990  000B3E  0100               	movlb	0	; () banked
 10991  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10992  000B42  0EE4               	movlw	228
 10993  000B44                     u7527:
 10994  000B44  2EE8               	decfsz	wreg,f,c
 10995  000B46  D7FE               	bra	u7527
 10996  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10997  000B4A  D7FC               	bra	u7527
 10998  000B4C  F000               	nop	
 10999  000B4E  0E80               	movlw	128
 11000  000B50  ECF9  F021         	call	_lcdInst
 11001                           
 11002                           ;Test.c: 223: machine_state = Sorting_state;
 11003  000B54  0E01               	movlw	1
 11004  000B56  0100               	movlb	0	; () banked
 11005  000B58  6FFC               	movwf	_machine_state& (0+255),b
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;Test.c: 224: was_low_1 = 0;
 11009  000B5A  0E00               	movlw	0
 11010  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 11011  000B5E  0E00               	movlw	0
 11012  000B60  6E79               	movwf	_was_low_1,c	;volatile
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;Test.c: 225: was_low_1 = 0;
 11016  000B62  0E00               	movlw	0
 11017  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 11018  000B66  0E00               	movlw	0
 11019  000B68  6E79               	movwf	_was_low_1,c	;volatile
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;Test.c: 232: printf("TST: PAN SERVO");
 11023  000B6A  0EAC               	movlw	low STR_91
 11024  000B6C  0100               	movlb	0	; () banked
 11025  000B6E  6F8E               	movwf	printf@f& (0+255),b
 11026  000B70  0EFE               	movlw	high STR_91
 11027  000B72  0100               	movlb	0	; () banked
 11028  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 11029  000B76  EC9C  F008         	call	_printf	;wreg free
 11030                           
 11031                           ;Test.c: 233: lcdInst(0b11000000);;
 11032  000B7A  0EC0               	movlw	192
 11033  000B7C  ECF9  F021         	call	_lcdInst
 11034                           
 11035                           ;Test.c: 234: printf("MIDDLE -- 2s    ");
 11036  000B80  0E44               	movlw	low STR_92
 11037  000B82  0100               	movlb	0	; () banked
 11038  000B84  6F8E               	movwf	printf@f& (0+255),b
 11039  000B86  0EFC               	movlw	high STR_92
 11040  000B88  0100               	movlb	0	; () banked
 11041  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11042  000B8C  EC9C  F008         	call	_printf	;wreg free
 11043                           
 11044                           ;Test.c: 235: updateServoPosition(1250, 1);
 11045  000B90  0E04               	movlw	4
 11046  000B92  0100               	movlb	0	; () banked
 11047  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11048  000B96  0EE2               	movlw	226
 11049  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11050  000B9A  0E00               	movlw	0
 11051  000B9C  0100               	movlb	0	; () banked
 11052  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11053  000BA0  0E01               	movlw	1
 11054  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11055  000BA4  EC53  F01C         	call	_updateServoPosition	;wreg free
 11056                           
 11057                           ;Test.c: 236: TMR1ON = 1;
 11058  000BA8  80CD               	bsf	4045,0,c	;volatile
 11059                           
 11060                           ;Test.c: 237: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11061  000BAA  0E00               	movlw	0
 11062  000BAC  0100               	movlb	0	; () banked
 11063  000BAE  6FAE               	movwf	actuatorTest@i_1581& (0+255),b
 11064  000BB0                     l6570:
 11065                           
 11066                           ; BSR set to: 0
 11067  000BB0  0E63               	movlw	99
 11068  000BB2  0100               	movlb	0	; () banked
 11069  000BB4  65AE               	cpfsgt	actuatorTest@i_1581& (0+255),b
 11070  000BB6  D001               	goto	l6574
 11071  000BB8  D00C               	goto	l6578
 11072  000BBA                     l6574:
 11073                           
 11074                           ; BSR set to: 0
 11075  000BBA  0E68               	movlw	104
 11076  000BBC  0100               	movlb	0	; () banked
 11077  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11078  000BC0  0EE4               	movlw	228
 11079  000BC2                     u7537:
 11080  000BC2  2EE8               	decfsz	wreg,f,c
 11081  000BC4  D7FE               	bra	u7537
 11082  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11083  000BC8  D7FC               	bra	u7537
 11084  000BCA  F000               	nop	
 11085  000BCC  0100               	movlb	0	; () banked
 11086  000BCE  2BAE               	incf	actuatorTest@i_1581& (0+255),f,b
 11087  000BD0  D7EF               	goto	l6570
 11088  000BD2                     l6578:
 11089                           
 11090                           ; BSR set to: 0
 11091  000BD2  0E00               	movlw	0
 11092  000BD4  0100               	movlb	0	; () banked
 11093  000BD6  6FAF               	movwf	actuatorTest@i_1582& (0+255),b
 11094  000BD8                     l6580:
 11095                           
 11096                           ; BSR set to: 0
 11097  000BD8  0E63               	movlw	99
 11098  000BDA  0100               	movlb	0	; () banked
 11099  000BDC  65AF               	cpfsgt	actuatorTest@i_1582& (0+255),b
 11100  000BDE  D001               	goto	l6584
 11101  000BE0  D00C               	goto	l6588
 11102  000BE2                     l6584:
 11103                           
 11104                           ; BSR set to: 0
 11105  000BE2  0E68               	movlw	104
 11106  000BE4  0100               	movlb	0	; () banked
 11107  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11108  000BE8  0EE4               	movlw	228
 11109  000BEA                     u7547:
 11110  000BEA  2EE8               	decfsz	wreg,f,c
 11111  000BEC  D7FE               	bra	u7547
 11112  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11113  000BF0  D7FC               	bra	u7547
 11114  000BF2  F000               	nop	
 11115  000BF4  0100               	movlb	0	; () banked
 11116  000BF6  2BAF               	incf	actuatorTest@i_1582& (0+255),f,b
 11117  000BF8  D7EF               	goto	l6580
 11118  000BFA                     l6588:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;Test.c: 239: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11122  000BFA  0E80               	movlw	128
 11123  000BFC  ECF9  F021         	call	_lcdInst
 11124  000C00  0EC0               	movlw	192
 11125  000C02  ECF9  F021         	call	_lcdInst
 11126                           
 11127                           ;Test.c: 240: printf("RIGHT -- 2s     ");
 11128  000C06  0E33               	movlw	low STR_93
 11129  000C08  0100               	movlb	0	; () banked
 11130  000C0A  6F8E               	movwf	printf@f& (0+255),b
 11131  000C0C  0EFC               	movlw	high STR_93
 11132  000C0E  0100               	movlb	0	; () banked
 11133  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 11134  000C12  EC9C  F008         	call	_printf	;wreg free
 11135                           
 11136                           ;Test.c: 241: updateServoPosition(500, 1);
 11137  000C16  0E01               	movlw	1
 11138  000C18  0100               	movlb	0	; () banked
 11139  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11140  000C1C  0EF4               	movlw	244
 11141  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11142  000C20  0E00               	movlw	0
 11143  000C22  0100               	movlb	0	; () banked
 11144  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11145  000C26  0E01               	movlw	1
 11146  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11147  000C2A  EC53  F01C         	call	_updateServoPosition	;wreg free
 11148                           
 11149                           ;Test.c: 242: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11150  000C2E  0E00               	movlw	0
 11151  000C30  0100               	movlb	0	; () banked
 11152  000C32  6FB0               	movwf	actuatorTest@i_1584& (0+255),b
 11153  000C34                     l6596:
 11154                           
 11155                           ; BSR set to: 0
 11156  000C34  0E63               	movlw	99
 11157  000C36  0100               	movlb	0	; () banked
 11158  000C38  65B0               	cpfsgt	actuatorTest@i_1584& (0+255),b
 11159  000C3A  D001               	goto	l6600
 11160  000C3C  D00C               	goto	l6604
 11161  000C3E                     l6600:
 11162                           
 11163                           ; BSR set to: 0
 11164  000C3E  0E68               	movlw	104
 11165  000C40  0100               	movlb	0	; () banked
 11166  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 11167  000C44  0EE4               	movlw	228
 11168  000C46                     u7557:
 11169  000C46  2EE8               	decfsz	wreg,f,c
 11170  000C48  D7FE               	bra	u7557
 11171  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11172  000C4C  D7FC               	bra	u7557
 11173  000C4E  F000               	nop	
 11174  000C50  0100               	movlb	0	; () banked
 11175  000C52  2BB0               	incf	actuatorTest@i_1584& (0+255),f,b
 11176  000C54  D7EF               	goto	l6596
 11177  000C56                     l6604:
 11178                           
 11179                           ; BSR set to: 0
 11180  000C56  0E00               	movlw	0
 11181  000C58  0100               	movlb	0	; () banked
 11182  000C5A  6FB1               	movwf	actuatorTest@i_1585& (0+255),b
 11183  000C5C                     l6606:
 11184                           
 11185                           ; BSR set to: 0
 11186  000C5C  0E63               	movlw	99
 11187  000C5E  0100               	movlb	0	; () banked
 11188  000C60  65B1               	cpfsgt	actuatorTest@i_1585& (0+255),b
 11189  000C62  D001               	goto	l6610
 11190  000C64  D00C               	goto	l6614
 11191  000C66                     l6610:
 11192                           
 11193                           ; BSR set to: 0
 11194  000C66  0E68               	movlw	104
 11195  000C68  0100               	movlb	0	; () banked
 11196  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11197  000C6C  0EE4               	movlw	228
 11198  000C6E                     u7567:
 11199  000C6E  2EE8               	decfsz	wreg,f,c
 11200  000C70  D7FE               	bra	u7567
 11201  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11202  000C74  D7FC               	bra	u7567
 11203  000C76  F000               	nop	
 11204  000C78  0100               	movlb	0	; () banked
 11205  000C7A  2BB1               	incf	actuatorTest@i_1585& (0+255),f,b
 11206  000C7C  D7EF               	goto	l6606
 11207  000C7E                     l6614:
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;Test.c: 244: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11211  000C7E  0E80               	movlw	128
 11212  000C80  ECF9  F021         	call	_lcdInst
 11213  000C84  0EC0               	movlw	192
 11214  000C86  ECF9  F021         	call	_lcdInst
 11215                           
 11216                           ;Test.c: 245: printf("LEFT -- 2s      ");
 11217  000C8A  0E11               	movlw	low STR_94
 11218  000C8C  0100               	movlb	0	; () banked
 11219  000C8E  6F8E               	movwf	printf@f& (0+255),b
 11220  000C90  0EFC               	movlw	high STR_94
 11221  000C92  0100               	movlb	0	; () banked
 11222  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 11223  000C96  EC9C  F008         	call	_printf	;wreg free
 11224                           
 11225                           ;Test.c: 246: updateServoPosition(2000, 1);
 11226  000C9A  0E07               	movlw	7
 11227  000C9C  0100               	movlb	0	; () banked
 11228  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11229  000CA0  0ED0               	movlw	208
 11230  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11231  000CA4  0E00               	movlw	0
 11232  000CA6  0100               	movlb	0	; () banked
 11233  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11234  000CAA  0E01               	movlw	1
 11235  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11236  000CAE  EC53  F01C         	call	_updateServoPosition	;wreg free
 11237                           
 11238                           ;Test.c: 247: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11239  000CB2  0E00               	movlw	0
 11240  000CB4  0100               	movlb	0	; () banked
 11241  000CB6  6FB2               	movwf	actuatorTest@i_1587& (0+255),b
 11242  000CB8                     l6622:
 11243                           
 11244                           ; BSR set to: 0
 11245  000CB8  0E63               	movlw	99
 11246  000CBA  0100               	movlb	0	; () banked
 11247  000CBC  65B2               	cpfsgt	actuatorTest@i_1587& (0+255),b
 11248  000CBE  D001               	goto	l6626
 11249  000CC0  D00C               	goto	l6630
 11250  000CC2                     l6626:
 11251                           
 11252                           ; BSR set to: 0
 11253  000CC2  0E68               	movlw	104
 11254  000CC4  0100               	movlb	0	; () banked
 11255  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11256  000CC8  0EE4               	movlw	228
 11257  000CCA                     u7577:
 11258  000CCA  2EE8               	decfsz	wreg,f,c
 11259  000CCC  D7FE               	bra	u7577
 11260  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11261  000CD0  D7FC               	bra	u7577
 11262  000CD2  F000               	nop	
 11263  000CD4  0100               	movlb	0	; () banked
 11264  000CD6  2BB2               	incf	actuatorTest@i_1587& (0+255),f,b
 11265  000CD8  D7EF               	goto	l6622
 11266  000CDA                     l6630:
 11267                           
 11268                           ; BSR set to: 0
 11269  000CDA  0E00               	movlw	0
 11270  000CDC  0100               	movlb	0	; () banked
 11271  000CDE  6FB3               	movwf	actuatorTest@i_1588& (0+255),b
 11272  000CE0                     l6632:
 11273                           
 11274                           ; BSR set to: 0
 11275  000CE0  0E63               	movlw	99
 11276  000CE2  0100               	movlb	0	; () banked
 11277  000CE4  65B3               	cpfsgt	actuatorTest@i_1588& (0+255),b
 11278  000CE6  D001               	goto	l6636
 11279  000CE8  D00C               	goto	l6640
 11280  000CEA                     l6636:
 11281                           
 11282                           ; BSR set to: 0
 11283  000CEA  0E68               	movlw	104
 11284  000CEC  0100               	movlb	0	; () banked
 11285  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11286  000CF0  0EE4               	movlw	228
 11287  000CF2                     u7587:
 11288  000CF2  2EE8               	decfsz	wreg,f,c
 11289  000CF4  D7FE               	bra	u7587
 11290  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11291  000CF8  D7FC               	bra	u7587
 11292  000CFA  F000               	nop	
 11293  000CFC  0100               	movlb	0	; () banked
 11294  000CFE  2BB3               	incf	actuatorTest@i_1588& (0+255),f,b
 11295  000D00  D7EF               	goto	l6632
 11296  000D02                     l6640:
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;Test.c: 249: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11300  000D02  0E80               	movlw	128
 11301  000D04  ECF9  F021         	call	_lcdInst
 11302  000D08  0EC0               	movlw	192
 11303  000D0A  ECF9  F021         	call	_lcdInst
 11304                           
 11305                           ;Test.c: 250: printf("MID-LEFT -- 2s  ");
 11306  000D0E  0E66               	movlw	low STR_95
 11307  000D10  0100               	movlb	0	; () banked
 11308  000D12  6F8E               	movwf	printf@f& (0+255),b
 11309  000D14  0EFC               	movlw	high STR_95
 11310  000D16  0100               	movlb	0	; () banked
 11311  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 11312  000D1A  EC9C  F008         	call	_printf	;wreg free
 11313                           
 11314                           ;Test.c: 251: updateServoPosition(1700, 1);
 11315  000D1E  0E06               	movlw	6
 11316  000D20  0100               	movlb	0	; () banked
 11317  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11318  000D24  0EA4               	movlw	164
 11319  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11320  000D28  0E00               	movlw	0
 11321  000D2A  0100               	movlb	0	; () banked
 11322  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11323  000D2E  0E01               	movlw	1
 11324  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11325  000D32  EC53  F01C         	call	_updateServoPosition	;wreg free
 11326                           
 11327                           ;Test.c: 252: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11328  000D36  0E00               	movlw	0
 11329  000D38  0100               	movlb	0	; () banked
 11330  000D3A  6FB4               	movwf	actuatorTest@i_1590& (0+255),b
 11331  000D3C                     l6648:
 11332                           
 11333                           ; BSR set to: 0
 11334  000D3C  0E63               	movlw	99
 11335  000D3E  0100               	movlb	0	; () banked
 11336  000D40  65B4               	cpfsgt	actuatorTest@i_1590& (0+255),b
 11337  000D42  D001               	goto	l6652
 11338  000D44  D00C               	goto	l6656
 11339  000D46                     l6652:
 11340                           
 11341                           ; BSR set to: 0
 11342  000D46  0E68               	movlw	104
 11343  000D48  0100               	movlb	0	; () banked
 11344  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11345  000D4C  0EE4               	movlw	228
 11346  000D4E                     u7597:
 11347  000D4E  2EE8               	decfsz	wreg,f,c
 11348  000D50  D7FE               	bra	u7597
 11349  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11350  000D54  D7FC               	bra	u7597
 11351  000D56  F000               	nop	
 11352  000D58  0100               	movlb	0	; () banked
 11353  000D5A  2BB4               	incf	actuatorTest@i_1590& (0+255),f,b
 11354  000D5C  D7EF               	goto	l6648
 11355  000D5E                     l6656:
 11356                           
 11357                           ; BSR set to: 0
 11358  000D5E  0E00               	movlw	0
 11359  000D60  0100               	movlb	0	; () banked
 11360  000D62  6FB5               	movwf	actuatorTest@i_1591& (0+255),b
 11361  000D64                     l6658:
 11362                           
 11363                           ; BSR set to: 0
 11364  000D64  0E63               	movlw	99
 11365  000D66  0100               	movlb	0	; () banked
 11366  000D68  65B5               	cpfsgt	actuatorTest@i_1591& (0+255),b
 11367  000D6A  D001               	goto	l6662
 11368  000D6C  D00C               	goto	l6666
 11369  000D6E                     l6662:
 11370                           
 11371                           ; BSR set to: 0
 11372  000D6E  0E68               	movlw	104
 11373  000D70  0100               	movlb	0	; () banked
 11374  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 11375  000D74  0EE4               	movlw	228
 11376  000D76                     u7607:
 11377  000D76  2EE8               	decfsz	wreg,f,c
 11378  000D78  D7FE               	bra	u7607
 11379  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11380  000D7C  D7FC               	bra	u7607
 11381  000D7E  F000               	nop	
 11382  000D80  0100               	movlb	0	; () banked
 11383  000D82  2BB5               	incf	actuatorTest@i_1591& (0+255),f,b
 11384  000D84  D7EF               	goto	l6658
 11385  000D86                     l6666:
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;Test.c: 254: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11389  000D86  0E80               	movlw	128
 11390  000D88  ECF9  F021         	call	_lcdInst
 11391  000D8C  0EC0               	movlw	192
 11392  000D8E  ECF9  F021         	call	_lcdInst
 11393                           
 11394                           ;Test.c: 255: printf("MID-RIGHT -- 2s ");
 11395  000D92  0E77               	movlw	low STR_96
 11396  000D94  0100               	movlb	0	; () banked
 11397  000D96  6F8E               	movwf	printf@f& (0+255),b
 11398  000D98  0EFC               	movlw	high STR_96
 11399  000D9A  0100               	movlb	0	; () banked
 11400  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11401  000D9E  EC9C  F008         	call	_printf	;wreg free
 11402                           
 11403                           ;Test.c: 256: updateServoPosition(700, 1);
 11404  000DA2  0E02               	movlw	2
 11405  000DA4  0100               	movlb	0	; () banked
 11406  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11407  000DA8  0EBC               	movlw	188
 11408  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11409  000DAC  0E00               	movlw	0
 11410  000DAE  0100               	movlb	0	; () banked
 11411  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11412  000DB2  0E01               	movlw	1
 11413  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11414  000DB6  EC53  F01C         	call	_updateServoPosition	;wreg free
 11415                           
 11416                           ;Test.c: 257: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11417  000DBA  0E00               	movlw	0
 11418  000DBC  0100               	movlb	0	; () banked
 11419  000DBE  6FB6               	movwf	actuatorTest@i_1593& (0+255),b
 11420  000DC0                     l6674:
 11421                           
 11422                           ; BSR set to: 0
 11423  000DC0  0E63               	movlw	99
 11424  000DC2  0100               	movlb	0	; () banked
 11425  000DC4  65B6               	cpfsgt	actuatorTest@i_1593& (0+255),b
 11426  000DC6  D001               	goto	l6678
 11427  000DC8  D00C               	goto	l6682
 11428  000DCA                     l6678:
 11429                           
 11430                           ; BSR set to: 0
 11431  000DCA  0E68               	movlw	104
 11432  000DCC  0100               	movlb	0	; () banked
 11433  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11434  000DD0  0EE4               	movlw	228
 11435  000DD2                     u7617:
 11436  000DD2  2EE8               	decfsz	wreg,f,c
 11437  000DD4  D7FE               	bra	u7617
 11438  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11439  000DD8  D7FC               	bra	u7617
 11440  000DDA  F000               	nop	
 11441  000DDC  0100               	movlb	0	; () banked
 11442  000DDE  2BB6               	incf	actuatorTest@i_1593& (0+255),f,b
 11443  000DE0  D7EF               	goto	l6674
 11444  000DE2                     l6682:
 11445                           
 11446                           ; BSR set to: 0
 11447  000DE2  0E00               	movlw	0
 11448  000DE4  0100               	movlb	0	; () banked
 11449  000DE6  6FB7               	movwf	actuatorTest@i_1594& (0+255),b
 11450  000DE8                     l6684:
 11451                           
 11452                           ; BSR set to: 0
 11453  000DE8  0E63               	movlw	99
 11454  000DEA  0100               	movlb	0	; () banked
 11455  000DEC  65B7               	cpfsgt	actuatorTest@i_1594& (0+255),b
 11456  000DEE  D001               	goto	l6688
 11457  000DF0  D00C               	goto	l6692
 11458  000DF2                     l6688:
 11459                           
 11460                           ; BSR set to: 0
 11461  000DF2  0E68               	movlw	104
 11462  000DF4  0100               	movlb	0	; () banked
 11463  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11464  000DF8  0EE4               	movlw	228
 11465  000DFA                     u7627:
 11466  000DFA  2EE8               	decfsz	wreg,f,c
 11467  000DFC  D7FE               	bra	u7627
 11468  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11469  000E00  D7FC               	bra	u7627
 11470  000E02  F000               	nop	
 11471  000E04  0100               	movlb	0	; () banked
 11472  000E06  2BB7               	incf	actuatorTest@i_1594& (0+255),f,b
 11473  000E08  D7EF               	goto	l6684
 11474  000E0A                     l6692:
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;Test.c: 259: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11478  000E0A  0E80               	movlw	128
 11479  000E0C  ECF9  F021         	call	_lcdInst
 11480  000E10  0EC0               	movlw	192
 11481  000E12  ECF9  F021         	call	_lcdInst
 11482                           
 11483                           ;Test.c: 260: printf("MID -- 2s       ");
 11484  000E16  0EEF               	movlw	low STR_97
 11485  000E18  0100               	movlb	0	; () banked
 11486  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11487  000E1C  0EFB               	movlw	high STR_97
 11488  000E1E  0100               	movlb	0	; () banked
 11489  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11490  000E22  EC9C  F008         	call	_printf	;wreg free
 11491                           
 11492                           ;Test.c: 261: updateServoPosition(1250, 1);
 11493  000E26  0E04               	movlw	4
 11494  000E28  0100               	movlb	0	; () banked
 11495  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11496  000E2C  0EE2               	movlw	226
 11497  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11498  000E30  0E00               	movlw	0
 11499  000E32  0100               	movlb	0	; () banked
 11500  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11501  000E36  0E01               	movlw	1
 11502  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11503  000E3A  EC53  F01C         	call	_updateServoPosition	;wreg free
 11504                           
 11505                           ;Test.c: 262: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11506  000E3E  0E00               	movlw	0
 11507  000E40  0100               	movlb	0	; () banked
 11508  000E42  6FB8               	movwf	actuatorTest@i_1596& (0+255),b
 11509  000E44                     l6700:
 11510                           
 11511                           ; BSR set to: 0
 11512  000E44  0E63               	movlw	99
 11513  000E46  0100               	movlb	0	; () banked
 11514  000E48  65B8               	cpfsgt	actuatorTest@i_1596& (0+255),b
 11515  000E4A  D001               	goto	l6704
 11516  000E4C  D00C               	goto	l6708
 11517  000E4E                     l6704:
 11518                           
 11519                           ; BSR set to: 0
 11520  000E4E  0E68               	movlw	104
 11521  000E50  0100               	movlb	0	; () banked
 11522  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11523  000E54  0EE4               	movlw	228
 11524  000E56                     u7637:
 11525  000E56  2EE8               	decfsz	wreg,f,c
 11526  000E58  D7FE               	bra	u7637
 11527  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11528  000E5C  D7FC               	bra	u7637
 11529  000E5E  F000               	nop	
 11530  000E60  0100               	movlb	0	; () banked
 11531  000E62  2BB8               	incf	actuatorTest@i_1596& (0+255),f,b
 11532  000E64  D7EF               	goto	l6700
 11533  000E66                     l6708:
 11534                           
 11535                           ; BSR set to: 0
 11536  000E66  0E00               	movlw	0
 11537  000E68  0100               	movlb	0	; () banked
 11538  000E6A  6FB9               	movwf	actuatorTest@i_1597& (0+255),b
 11539  000E6C                     l6710:
 11540                           
 11541                           ; BSR set to: 0
 11542  000E6C  0E63               	movlw	99
 11543  000E6E  0100               	movlb	0	; () banked
 11544  000E70  65B9               	cpfsgt	actuatorTest@i_1597& (0+255),b
 11545  000E72  D001               	goto	l6714
 11546  000E74  D00C               	goto	l1104
 11547  000E76                     l6714:
 11548                           
 11549                           ; BSR set to: 0
 11550  000E76  0E68               	movlw	104
 11551  000E78  0100               	movlb	0	; () banked
 11552  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11553  000E7C  0EE4               	movlw	228
 11554  000E7E                     u7647:
 11555  000E7E  2EE8               	decfsz	wreg,f,c
 11556  000E80  D7FE               	bra	u7647
 11557  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11558  000E84  D7FC               	bra	u7647
 11559  000E86  F000               	nop	
 11560  000E88  0100               	movlb	0	; () banked
 11561  000E8A  2BB9               	incf	actuatorTest@i_1597& (0+255),f,b
 11562  000E8C  D7EF               	goto	l6710
 11563  000E8E                     l1104:
 11564                           
 11565                           ; BSR set to: 0
 11566                           ;Test.c: 263: TMR1ON = 0;
 11567  000E8E  90CD               	bcf	4045,0,c	;volatile
 11568                           
 11569                           ; BSR set to: 0
 11570                           ;Test.c: 270: printf("TST: TILT SERVO");
 11571  000E90  0E41               	movlw	low STR_98
 11572  000E92  0100               	movlb	0	; () banked
 11573  000E94  6F8E               	movwf	printf@f& (0+255),b
 11574  000E96  0EFE               	movlw	high STR_98
 11575  000E98  0100               	movlb	0	; () banked
 11576  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11577  000E9C  EC9C  F008         	call	_printf	;wreg free
 11578                           
 11579                           ;Test.c: 271: lcdInst(0b11000000);;
 11580  000EA0  0EC0               	movlw	192
 11581  000EA2  ECF9  F021         	call	_lcdInst
 11582                           
 11583                           ;Test.c: 272: printf("LEVEL -- 2s     ");
 11584  000EA6  0E22               	movlw	low STR_99
 11585  000EA8  0100               	movlb	0	; () banked
 11586  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11587  000EAC  0EFC               	movlw	high STR_99
 11588  000EAE  0100               	movlb	0	; () banked
 11589  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11590  000EB2  EC9C  F008         	call	_printf	;wreg free
 11591                           
 11592                           ;Test.c: 273: updateServoPosition(1250, 3);
 11593  000EB6  0E04               	movlw	4
 11594  000EB8  0100               	movlb	0	; () banked
 11595  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11596  000EBC  0EE2               	movlw	226
 11597  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11598  000EC0  0E00               	movlw	0
 11599  000EC2  0100               	movlb	0	; () banked
 11600  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11601  000EC6  0E03               	movlw	3
 11602  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11603  000ECA  EC53  F01C         	call	_updateServoPosition	;wreg free
 11604                           
 11605                           ;Test.c: 274: TMR3ON = 1;
 11606  000ECE  80B1               	bsf	4017,0,c	;volatile
 11607                           
 11608                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11609  000ED0  0E00               	movlw	0
 11610  000ED2  0100               	movlb	0	; () banked
 11611  000ED4  6FBA               	movwf	actuatorTest@i_1600& (0+255),b
 11612  000ED6                     l6728:
 11613                           
 11614                           ; BSR set to: 0
 11615  000ED6  0E63               	movlw	99
 11616  000ED8  0100               	movlb	0	; () banked
 11617  000EDA  65BA               	cpfsgt	actuatorTest@i_1600& (0+255),b
 11618  000EDC  D001               	goto	l6732
 11619  000EDE  D00C               	goto	l6736
 11620  000EE0                     l6732:
 11621                           
 11622                           ; BSR set to: 0
 11623  000EE0  0E68               	movlw	104
 11624  000EE2  0100               	movlb	0	; () banked
 11625  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11626  000EE6  0EE4               	movlw	228
 11627  000EE8                     u7657:
 11628  000EE8  2EE8               	decfsz	wreg,f,c
 11629  000EEA  D7FE               	bra	u7657
 11630  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11631  000EEE  D7FC               	bra	u7657
 11632  000EF0  F000               	nop	
 11633  000EF2  0100               	movlb	0	; () banked
 11634  000EF4  2BBA               	incf	actuatorTest@i_1600& (0+255),f,b
 11635  000EF6  D7EF               	goto	l6728
 11636  000EF8                     l6736:
 11637                           
 11638                           ; BSR set to: 0
 11639  000EF8  0E00               	movlw	0
 11640  000EFA  0100               	movlb	0	; () banked
 11641  000EFC  6FBB               	movwf	actuatorTest@i_1601& (0+255),b
 11642  000EFE                     l6738:
 11643                           
 11644                           ; BSR set to: 0
 11645  000EFE  0E63               	movlw	99
 11646  000F00  0100               	movlb	0	; () banked
 11647  000F02  65BB               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11648  000F04  D001               	goto	l6742
 11649  000F06  D00C               	goto	l6746
 11650  000F08                     l6742:
 11651                           
 11652                           ; BSR set to: 0
 11653  000F08  0E68               	movlw	104
 11654  000F0A  0100               	movlb	0	; () banked
 11655  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11656  000F0E  0EE4               	movlw	228
 11657  000F10                     u7667:
 11658  000F10  2EE8               	decfsz	wreg,f,c
 11659  000F12  D7FE               	bra	u7667
 11660  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11661  000F16  D7FC               	bra	u7667
 11662  000F18  F000               	nop	
 11663  000F1A  0100               	movlb	0	; () banked
 11664  000F1C  2BBB               	incf	actuatorTest@i_1601& (0+255),f,b
 11665  000F1E  D7EF               	goto	l6738
 11666  000F20                     l6746:
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11670  000F20  0E80               	movlw	128
 11671  000F22  ECF9  F021         	call	_lcdInst
 11672  000F26  0EC0               	movlw	192
 11673  000F28  ECF9  F021         	call	_lcdInst
 11674                           
 11675                           ;Test.c: 278: printf("DROP -- 2s      ");
 11676  000F2C  0E00               	movlw	low STR_100
 11677  000F2E  0100               	movlb	0	; () banked
 11678  000F30  6F8E               	movwf	printf@f& (0+255),b
 11679  000F32  0EFC               	movlw	high STR_100
 11680  000F34  0100               	movlb	0	; () banked
 11681  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11682  000F38  EC9C  F008         	call	_printf	;wreg free
 11683                           
 11684                           ;Test.c: 279: updateServoPosition(2000, 3);
 11685  000F3C  0E07               	movlw	7
 11686  000F3E  0100               	movlb	0	; () banked
 11687  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11688  000F42  0ED0               	movlw	208
 11689  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11690  000F46  0E00               	movlw	0
 11691  000F48  0100               	movlb	0	; () banked
 11692  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11693  000F4C  0E03               	movlw	3
 11694  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11695  000F50  EC53  F01C         	call	_updateServoPosition	;wreg free
 11696                           
 11697                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11698  000F54  0E00               	movlw	0
 11699  000F56  0100               	movlb	0	; () banked
 11700  000F58  6FBC               	movwf	actuatorTest@i_1603& (0+255),b
 11701  000F5A                     l6754:
 11702                           
 11703                           ; BSR set to: 0
 11704  000F5A  0E63               	movlw	99
 11705  000F5C  0100               	movlb	0	; () banked
 11706  000F5E  65BC               	cpfsgt	actuatorTest@i_1603& (0+255),b
 11707  000F60  D001               	goto	l6758
 11708  000F62  D00C               	goto	l6762
 11709  000F64                     l6758:
 11710                           
 11711                           ; BSR set to: 0
 11712  000F64  0E68               	movlw	104
 11713  000F66  0100               	movlb	0	; () banked
 11714  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11715  000F6A  0EE4               	movlw	228
 11716  000F6C                     u7677:
 11717  000F6C  2EE8               	decfsz	wreg,f,c
 11718  000F6E  D7FE               	bra	u7677
 11719  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11720  000F72  D7FC               	bra	u7677
 11721  000F74  F000               	nop	
 11722  000F76  0100               	movlb	0	; () banked
 11723  000F78  2BBC               	incf	actuatorTest@i_1603& (0+255),f,b
 11724  000F7A  D7EF               	goto	l6754
 11725  000F7C                     l6762:
 11726                           
 11727                           ; BSR set to: 0
 11728  000F7C  0E00               	movlw	0
 11729  000F7E  0100               	movlb	0	; () banked
 11730  000F80  6FBD               	movwf	actuatorTest@i_1604& (0+255),b
 11731  000F82                     l6764:
 11732                           
 11733                           ; BSR set to: 0
 11734  000F82  0E63               	movlw	99
 11735  000F84  0100               	movlb	0	; () banked
 11736  000F86  65BD               	cpfsgt	actuatorTest@i_1604& (0+255),b
 11737  000F88  D001               	goto	l6768
 11738  000F8A  D00C               	goto	l6772
 11739  000F8C                     l6768:
 11740                           
 11741                           ; BSR set to: 0
 11742  000F8C  0E68               	movlw	104
 11743  000F8E  0100               	movlb	0	; () banked
 11744  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11745  000F92  0EE4               	movlw	228
 11746  000F94                     u7687:
 11747  000F94  2EE8               	decfsz	wreg,f,c
 11748  000F96  D7FE               	bra	u7687
 11749  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11750  000F9A  D7FC               	bra	u7687
 11751  000F9C  F000               	nop	
 11752  000F9E  0100               	movlb	0	; () banked
 11753  000FA0  2BBD               	incf	actuatorTest@i_1604& (0+255),f,b
 11754  000FA2  D7EF               	goto	l6764
 11755  000FA4                     l6772:
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11759  000FA4  0E80               	movlw	128
 11760  000FA6  ECF9  F021         	call	_lcdInst
 11761  000FAA  0EC0               	movlw	192
 11762  000FAC  ECF9  F021         	call	_lcdInst
 11763                           
 11764                           ;Test.c: 283: printf("LEVEL -- 2s     ");
 11765  000FB0  0E22               	movlw	low STR_99
 11766  000FB2  0100               	movlb	0	; () banked
 11767  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11768  000FB6  0EFC               	movlw	high STR_99
 11769  000FB8  0100               	movlb	0	; () banked
 11770  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11771  000FBC  EC9C  F008         	call	_printf	;wreg free
 11772                           
 11773                           ;Test.c: 284: updateServoPosition(1250, 3);
 11774  000FC0  0E04               	movlw	4
 11775  000FC2  0100               	movlb	0	; () banked
 11776  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11777  000FC6  0EE2               	movlw	226
 11778  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11779  000FCA  0E00               	movlw	0
 11780  000FCC  0100               	movlb	0	; () banked
 11781  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11782  000FD0  0E03               	movlw	3
 11783  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11784  000FD4  EC53  F01C         	call	_updateServoPosition	;wreg free
 11785                           
 11786                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11787  000FD8  0E00               	movlw	0
 11788  000FDA  0100               	movlb	0	; () banked
 11789  000FDC  6FBE               	movwf	actuatorTest@i_1606& (0+255),b
 11790  000FDE                     l6780:
 11791                           
 11792                           ; BSR set to: 0
 11793  000FDE  0E63               	movlw	99
 11794  000FE0  0100               	movlb	0	; () banked
 11795  000FE2  65BE               	cpfsgt	actuatorTest@i_1606& (0+255),b
 11796  000FE4  D001               	goto	l6784
 11797  000FE6  D00C               	goto	l6788
 11798  000FE8                     l6784:
 11799                           
 11800                           ; BSR set to: 0
 11801  000FE8  0E68               	movlw	104
 11802  000FEA  0100               	movlb	0	; () banked
 11803  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11804  000FEE  0EE4               	movlw	228
 11805  000FF0                     u7697:
 11806  000FF0  2EE8               	decfsz	wreg,f,c
 11807  000FF2  D7FE               	bra	u7697
 11808  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11809  000FF6  D7FC               	bra	u7697
 11810  000FF8  F000               	nop	
 11811  000FFA  0100               	movlb	0	; () banked
 11812  000FFC  2BBE               	incf	actuatorTest@i_1606& (0+255),f,b
 11813  000FFE  D7EF               	goto	l6780
 11814  001000                     l6788:
 11815                           
 11816                           ; BSR set to: 0
 11817  001000  0E00               	movlw	0
 11818  001002  0100               	movlb	0	; () banked
 11819  001004  6FBF               	movwf	actuatorTest@i_1607& (0+255),b
 11820  001006                     l6790:
 11821                           
 11822                           ; BSR set to: 0
 11823  001006  0E63               	movlw	99
 11824  001008  0100               	movlb	0	; () banked
 11825  00100A  65BF               	cpfsgt	actuatorTest@i_1607& (0+255),b
 11826  00100C  D001               	goto	l6794
 11827  00100E  D00C               	goto	l1116
 11828  001010                     l6794:
 11829                           
 11830                           ; BSR set to: 0
 11831  001010  0E68               	movlw	104
 11832  001012  0100               	movlb	0	; () banked
 11833  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11834  001016  0EE4               	movlw	228
 11835  001018                     u7707:
 11836  001018  2EE8               	decfsz	wreg,f,c
 11837  00101A  D7FE               	bra	u7707
 11838  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11839  00101E  D7FC               	bra	u7707
 11840  001020  F000               	nop	
 11841  001022  0100               	movlb	0	; () banked
 11842  001024  2BBF               	incf	actuatorTest@i_1607& (0+255),f,b
 11843  001026  D7EF               	goto	l6790
 11844  001028                     l1116:
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;Test.c: 287: TMR3ON = 0;
 11848  001028  90B1               	bcf	4017,0,c	;volatile
 11849                           
 11850                           ;Test.c: 288: (INTCONbits.GIE = 0);
 11851  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;Test.c: 293: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11855  00102C  0E01               	movlw	1
 11856  00102E  ECF9  F021         	call	_lcdInst
 11857  001032  0E68               	movlw	104
 11858  001034  0100               	movlb	0	; () banked
 11859  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11860  001038  0EE4               	movlw	228
 11861  00103A                     u7717:
 11862  00103A  2EE8               	decfsz	wreg,f,c
 11863  00103C  D7FE               	bra	u7717
 11864  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11865  001040  D7FC               	bra	u7717
 11866  001042  F000               	nop	
 11867  001044  0E80               	movlw	128
 11868  001046  ECF9  F021         	call	_lcdInst
 11869                           
 11870                           ;Test.c: 294: printf("TST: CAM SERVO");
 11871  00104A  0E9D               	movlw	low STR_102
 11872  00104C  0100               	movlb	0	; () banked
 11873  00104E  6F8E               	movwf	printf@f& (0+255),b
 11874  001050  0EFE               	movlw	high STR_102
 11875  001052  0100               	movlb	0	; () banked
 11876  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11877  001056  EC9C  F008         	call	_printf	;wreg free
 11878                           
 11879                           ;Test.c: 295: lcdInst(0b11000000);;
 11880  00105A  0EC0               	movlw	192
 11881  00105C  ECF9  F021         	call	_lcdInst
 11882                           
 11883                           ;Test.c: 296: printf("CAM UP  |RC0=1");
 11884  001060  0E7F               	movlw	low STR_103
 11885  001062  0100               	movlb	0	; () banked
 11886  001064  6F8E               	movwf	printf@f& (0+255),b
 11887  001066  0EFE               	movlw	high STR_103
 11888  001068  0100               	movlb	0	; () banked
 11889  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11890  00106C  EC9C  F008         	call	_printf	;wreg free
 11891                           
 11892                           ;Test.c: 297: LATCbits.LATC0 = 0;
 11893  001070  908B               	bcf	3979,0,c	;volatile
 11894                           
 11895                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11896  001072  0E00               	movlw	0
 11897  001074  0100               	movlb	0	; () banked
 11898  001076  6FC0               	movwf	actuatorTest@i_1610& (0+255),b
 11899  001078                     l6814:
 11900                           
 11901                           ; BSR set to: 0
 11902  001078  0E63               	movlw	99
 11903  00107A  0100               	movlb	0	; () banked
 11904  00107C  65C0               	cpfsgt	actuatorTest@i_1610& (0+255),b
 11905  00107E  D001               	goto	l6818
 11906  001080  D00C               	goto	l6822
 11907  001082                     l6818:
 11908                           
 11909                           ; BSR set to: 0
 11910  001082  0E68               	movlw	104
 11911  001084  0100               	movlb	0	; () banked
 11912  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11913  001088  0EE4               	movlw	228
 11914  00108A                     u7727:
 11915  00108A  2EE8               	decfsz	wreg,f,c
 11916  00108C  D7FE               	bra	u7727
 11917  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11918  001090  D7FC               	bra	u7727
 11919  001092  F000               	nop	
 11920  001094  0100               	movlb	0	; () banked
 11921  001096  2BC0               	incf	actuatorTest@i_1610& (0+255),f,b
 11922  001098  D7EF               	goto	l6814
 11923  00109A                     l6822:
 11924                           
 11925                           ; BSR set to: 0
 11926  00109A  0E00               	movlw	0
 11927  00109C  0100               	movlb	0	; () banked
 11928  00109E  6FC1               	movwf	actuatorTest@i_1611& (0+255),b
 11929  0010A0                     l6824:
 11930                           
 11931                           ; BSR set to: 0
 11932  0010A0  0E63               	movlw	99
 11933  0010A2  0100               	movlb	0	; () banked
 11934  0010A4  65C1               	cpfsgt	actuatorTest@i_1611& (0+255),b
 11935  0010A6  D001               	goto	l6828
 11936  0010A8  D00C               	goto	l6832
 11937  0010AA                     l6828:
 11938                           
 11939                           ; BSR set to: 0
 11940  0010AA  0E68               	movlw	104
 11941  0010AC  0100               	movlb	0	; () banked
 11942  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11943  0010B0  0EE4               	movlw	228
 11944  0010B2                     u7737:
 11945  0010B2  2EE8               	decfsz	wreg,f,c
 11946  0010B4  D7FE               	bra	u7737
 11947  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11948  0010B8  D7FC               	bra	u7737
 11949  0010BA  F000               	nop	
 11950  0010BC  0100               	movlb	0	; () banked
 11951  0010BE  2BC1               	incf	actuatorTest@i_1611& (0+255),f,b
 11952  0010C0  D7EF               	goto	l6824
 11953  0010C2                     l6832:
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;Test.c: 299: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11957  0010C2  0E80               	movlw	128
 11958  0010C4  ECF9  F021         	call	_lcdInst
 11959  0010C8  0EC0               	movlw	192
 11960  0010CA  ECF9  F021         	call	_lcdInst
 11961                           
 11962                           ;Test.c: 300: LATCbits.LATC0 = 1;
 11963  0010CE  808B               	bsf	3979,0,c	;volatile
 11964                           
 11965                           ;Test.c: 301: printf("CAM DWN |RC0=0");
 11966  0010D0  0E70               	movlw	low STR_104
 11967  0010D2  0100               	movlb	0	; () banked
 11968  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11969  0010D6  0EFE               	movlw	high STR_104
 11970  0010D8  0100               	movlb	0	; () banked
 11971  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11972  0010DC  EC9C  F008         	call	_printf	;wreg free
 11973                           
 11974                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11975  0010E0  0E00               	movlw	0
 11976  0010E2  0100               	movlb	0	; () banked
 11977  0010E4  6FC2               	movwf	actuatorTest@i_1613& (0+255),b
 11978  0010E6                     l6840:
 11979                           
 11980                           ; BSR set to: 0
 11981  0010E6  0E63               	movlw	99
 11982  0010E8  0100               	movlb	0	; () banked
 11983  0010EA  65C2               	cpfsgt	actuatorTest@i_1613& (0+255),b
 11984  0010EC  D001               	goto	l6844
 11985  0010EE  D00C               	goto	l6848
 11986  0010F0                     l6844:
 11987                           
 11988                           ; BSR set to: 0
 11989  0010F0  0E68               	movlw	104
 11990  0010F2  0100               	movlb	0	; () banked
 11991  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11992  0010F6  0EE4               	movlw	228
 11993  0010F8                     u7747:
 11994  0010F8  2EE8               	decfsz	wreg,f,c
 11995  0010FA  D7FE               	bra	u7747
 11996  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11997  0010FE  D7FC               	bra	u7747
 11998  001100  F000               	nop	
 11999  001102  0100               	movlb	0	; () banked
 12000  001104  2BC2               	incf	actuatorTest@i_1613& (0+255),f,b
 12001  001106  D7EF               	goto	l6840
 12002  001108                     l6848:
 12003                           
 12004                           ; BSR set to: 0
 12005  001108  0E00               	movlw	0
 12006  00110A  0100               	movlb	0	; () banked
 12007  00110C  6FC3               	movwf	actuatorTest@i_1614& (0+255),b
 12008  00110E                     l6850:
 12009                           
 12010                           ; BSR set to: 0
 12011  00110E  0E63               	movlw	99
 12012  001110  0100               	movlb	0	; () banked
 12013  001112  65C3               	cpfsgt	actuatorTest@i_1614& (0+255),b
 12014  001114  D001               	goto	l6854
 12015  001116  D00C               	goto	l6858
 12016  001118                     l6854:
 12017                           
 12018                           ; BSR set to: 0
 12019  001118  0E68               	movlw	104
 12020  00111A  0100               	movlb	0	; () banked
 12021  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12022  00111E  0EE4               	movlw	228
 12023  001120                     u7757:
 12024  001120  2EE8               	decfsz	wreg,f,c
 12025  001122  D7FE               	bra	u7757
 12026  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12027  001126  D7FC               	bra	u7757
 12028  001128  F000               	nop	
 12029  00112A  0100               	movlb	0	; () banked
 12030  00112C  2BC3               	incf	actuatorTest@i_1614& (0+255),f,b
 12031  00112E  D7EF               	goto	l6850
 12032  001130                     l6858:
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;Test.c: 303: machine_state = Testing_state;
 12036  001130  0E03               	movlw	3
 12037  001132  0100               	movlb	0	; () banked
 12038  001134  6FFC               	movwf	_machine_state& (0+255),b
 12039                           
 12040                           ; BSR set to: 0
 12041  001136  0012               	return		;funcret
 12042  001138                     __end_of_actuatorTest:
 12043                           	opt stack 0
 12044                           tblptru	equ	0xFF8
 12045                           tblptrh	equ	0xFF7
 12046                           tblptrl	equ	0xFF6
 12047                           tablat	equ	0xFF5
 12048                           prodh	equ	0xFF4
 12049                           prodl	equ	0xFF3
 12050                           intcon	equ	0xFF2
 12051                           intcon2	equ	0xFF1
 12052                           intcon3	equ	0xFF0
 12053                           postinc0	equ	0xFEE
 12054                           wreg	equ	0xFE8
 12055                           postdec1	equ	0xFE5
 12056                           fsr1l	equ	0xFE1
 12057                           indf2	equ	0xFDF
 12058                           postinc2	equ	0xFDE
 12059                           postdec2	equ	0xFDD
 12060                           fsr2h	equ	0xFDA
 12061                           fsr2l	equ	0xFD9
 12062                           status	equ	0xFD8
 12063                           
 12064 ;; *************** function _updateServoPosition *****************
 12065 ;; Defined at:
 12066 ;;		line 318 in file "sort.c"
 12067 ;; Parameters:    Size  Location     Type
 12068 ;;  time_us         2    0[BANK0 ] int 
 12069 ;;  timer           2    2[BANK0 ] int 
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;  my_time         2    6[BANK0 ] unsigned int 
 12072 ;; Return value:  Size  Location     Type
 12073 ;;                  1    wreg      void 
 12074 ;; Registers used:
 12075 ;;		wreg, status,2, status,0
 12076 ;; Tracked objects:
 12077 ;;		On entry : 0/0
 12078 ;;		On exit  : 0/0
 12079 ;;		Unchanged: 0/0
 12080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12084 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12085 ;;Total ram usage:        8 bytes
 12086 ;; Hardware stack levels used:    1
 12087 ;; Hardware stack levels required when called:    7
 12088 ;; This function calls:
 12089 ;;		Nothing
 12090 ;; This function is called by:
 12091 ;;		_Loading
 12092 ;;		_Distribution
 12093 ;;		_initServos
 12094 ;;		_actuatorTest
 12095 ;; This function uses a non-reentrant model
 12096 ;;
 12097                           
 12098                           	psect	text42
 12099  0038A6                     __ptext42:
 12100                           	opt stack 0
 12101  0038A6                     _updateServoPosition:
 12102                           	opt stack 21
 12103                           
 12104                           ;sort.c: 319: unsigned int my_time = 65535 - time_us;
 12105                           
 12106                           ; BSR set to: 0
 12107                           ;incstack = 0
 12108  0038A6  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 12109  0038AA  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 12110  0038AE  0100               	movlb	0	; () banked
 12111  0038B0  1F84               	comf	??_updateServoPosition& (0+255),f,b
 12112  0038B2  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 12113  0038B4  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 12114  0038B6  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 12115  0038B8  0EFF               	movlw	255
 12116  0038BA  0100               	movlb	0	; () banked
 12117  0038BC  2584               	addwf	??_updateServoPosition& (0+255),w,b
 12118  0038BE  0100               	movlb	0	; () banked
 12119  0038C0  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 12120  0038C2  0EFF               	movlw	255
 12121  0038C4  0100               	movlb	0	; () banked
 12122  0038C6  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 12123  0038C8  0100               	movlb	0	; () banked
 12124  0038CA  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 12125                           
 12126                           ;sort.c: 320: switch(timer){
 12127  0038CC  D015               	goto	l5428
 12128  0038CE                     l5426:
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;sort.c: 322: servoTimes[0] = my_time >> 8;
 12132  0038CE  0100               	movlb	0	; () banked
 12133  0038D0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 12134  0038D2  0101               	movlb	1	; () banked
 12135  0038D4  6F1C               	movwf	_servoTimes& (0+255),b
 12136  0038D6  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 12137                           
 12138                           ;sort.c: 323: servoTimes[1] = my_time & 0xFF;
 12139  0038D8  0100               	movlb	0	; () banked
 12140  0038DA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 12141  0038DC  0101               	movlb	1	; () banked
 12142  0038DE  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 12143  0038E0  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 12144  0038E2                     l779:
 12145                           
 12146                           ;sort.c: 325: servoTimes[2] = my_time >> 8;
 12147  0038E2  0100               	movlb	0	; () banked
 12148  0038E4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 12149  0038E6  0101               	movlb	1	; () banked
 12150  0038E8  6F20               	movwf	(_servoTimes+4)& (0+255),b
 12151  0038EA  6B21               	clrf	(_servoTimes+5)& (0+255),b
 12152                           
 12153                           ;sort.c: 326: servoTimes[3] = my_time & 0xFF;
 12154  0038EC  0100               	movlb	0	; () banked
 12155  0038EE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 12156  0038F0  0101               	movlb	1	; () banked
 12157  0038F2  6F22               	movwf	(_servoTimes+6)& (0+255),b
 12158  0038F4  6B23               	clrf	(_servoTimes+7)& (0+255),b
 12159                           
 12160                           ;sort.c: 327: }
 12161  0038F6  0012               	return	
 12162  0038F8                     l5428:
 12163  0038F8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 12164  0038FC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 12165                           
 12166                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12167                           ; Switch size 1, requested type "space"
 12168                           ; Number of cases is 1, Range of values is 0 to 0
 12169                           ; switch strategies available:
 12170                           ; Name         Instructions Cycles
 12171                           ; simple_byte            4     3 (average)
 12172                           ;	Chosen strategy is simple_byte
 12173  003900  0100               	movlb	0	; () banked
 12174  003902  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 12175  003904  0A00               	xorlw	0	; case 0
 12176  003906  A4D8               	btfss	status,2,c
 12177  003908  0012               	return	
 12178                           
 12179                           ; BSR set to: 0
 12180                           ; Switch size 1, requested type "space"
 12181                           ; Number of cases is 2, Range of values is 1 to 3
 12182                           ; switch strategies available:
 12183                           ; Name         Instructions Cycles
 12184                           ; simple_byte            7     4 (average)
 12185                           ;	Chosen strategy is simple_byte
 12186  00390A  0100               	movlb	0	; () banked
 12187  00390C  5184               	movf	??_updateServoPosition& (0+255),w,b
 12188  00390E  0A01               	xorlw	1	; case 1
 12189  003910  B4D8               	btfsc	status,2,c
 12190  003912  D7DD               	goto	l5426
 12191  003914  0A02               	xorlw	2	; case 3
 12192  003916  A4D8               	btfss	status,2,c
 12193  003918  0012               	return	
 12194  00391A  D7E3               	goto	l779
 12195  00391C                     __end_of_updateServoPosition:
 12196                           	opt stack 0
 12197                           tblptru	equ	0xFF8
 12198                           tblptrh	equ	0xFF7
 12199                           tblptrl	equ	0xFF6
 12200                           tablat	equ	0xFF5
 12201                           prodh	equ	0xFF4
 12202                           prodl	equ	0xFF3
 12203                           intcon	equ	0xFF2
 12204                           intcon2	equ	0xFF1
 12205                           intcon3	equ	0xFF0
 12206                           postinc0	equ	0xFEE
 12207                           wreg	equ	0xFE8
 12208                           postdec1	equ	0xFE5
 12209                           fsr1l	equ	0xFE1
 12210                           indf2	equ	0xFDF
 12211                           postinc2	equ	0xFDE
 12212                           postdec2	equ	0xFDD
 12213                           fsr2h	equ	0xFDA
 12214                           fsr2l	equ	0xFD9
 12215                           status	equ	0xFD8
 12216                           
 12217 ;; *************** function _ToggleTestA5 *****************
 12218 ;; Defined at:
 12219 ;;		line 399 in file "Test.c"
 12220 ;; Parameters:    Size  Location     Type
 12221 ;;		None
 12222 ;; Auto vars:     Size  Location     Type
 12223 ;;  on              2   44[BANK0 ] int 
 12224 ;; Return value:  Size  Location     Type
 12225 ;;                  1    wreg      void 
 12226 ;; Registers used:
 12227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12228 ;; Tracked objects:
 12229 ;;		On entry : 0/0
 12230 ;;		On exit  : 0/0
 12231 ;;		Unchanged: 0/0
 12232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12237 ;;Total ram usage:        3 bytes
 12238 ;; Hardware stack levels used:    1
 12239 ;; Hardware stack levels required when called:   10
 12240 ;; This function calls:
 12241 ;;		_lcdInst
 12242 ;;		_printf
 12243 ;; This function is called by:
 12244 ;;		_Test
 12245 ;; This function uses a non-reentrant model
 12246 ;;
 12247                           
 12248                           	psect	text43
 12249  00369C                     __ptext43:
 12250                           	opt stack 0
 12251  00369C                     _ToggleTestA5:
 12252                           	opt stack 19
 12253                           
 12254                           ;Test.c: 400: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12255                           
 12256                           ;incstack = 0
 12257  00369C  0E01               	movlw	1
 12258  00369E  ECF9  F021         	call	_lcdInst
 12259  0036A2  0E68               	movlw	104
 12260  0036A4  0100               	movlb	0	; () banked
 12261  0036A6  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12262  0036A8  0EE4               	movlw	228
 12263  0036AA                     u7767:
 12264  0036AA  2EE8               	decfsz	wreg,f,c
 12265  0036AC  D7FE               	bra	u7767
 12266  0036AE  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12267  0036B0  D7FC               	bra	u7767
 12268  0036B2  F000               	nop	
 12269  0036B4  0E80               	movlw	128
 12270  0036B6  ECF9  F021         	call	_lcdInst
 12271                           
 12272                           ;Test.c: 401: printf("D WILL RETURN   ");
 12273  0036BA  0E55               	movlw	low STR_109
 12274  0036BC  0100               	movlb	0	; () banked
 12275  0036BE  6F8E               	movwf	printf@f& (0+255),b
 12276  0036C0  0EFC               	movlw	high STR_109
 12277  0036C2  0100               	movlb	0	; () banked
 12278  0036C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12279  0036C6  EC9C  F008         	call	_printf	;wreg free
 12280                           
 12281                           ;Test.c: 402: lcdInst(0b11000000);;
 12282  0036CA  0EC0               	movlw	192
 12283  0036CC  ECF9  F021         	call	_lcdInst
 12284                           
 12285                           ;Test.c: 403: printf("ELSE TOGGLES RA5");
 12286  0036D0  0E88               	movlw	low STR_110
 12287  0036D2  0100               	movlb	0	; () banked
 12288  0036D4  6F8E               	movwf	printf@f& (0+255),b
 12289  0036D6  0EFC               	movlw	high STR_110
 12290  0036D8  0100               	movlb	0	; () banked
 12291  0036DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12292  0036DC  EC9C  F008         	call	_printf	;wreg free
 12293                           
 12294                           ;Test.c: 404: int on = 0;
 12295  0036E0  0E00               	movlw	0
 12296  0036E2  0100               	movlb	0	; () banked
 12297  0036E4  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12298  0036E6  0E00               	movlw	0
 12299  0036E8  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12300  0036EA                     l1179:
 12301  0036EA  A281               	btfss	3969,1,c	;volatile
 12302  0036EC  D7FE               	goto	l1179
 12303                           
 12304                           ;Test.c: 409: }
 12305                           ;Test.c: 410: if(PORTB >> 4 == 0b1111){
 12306  0036EE  3881               	swapf	3969,w,c	;volatile
 12307  0036F0  0B0F               	andlw	15
 12308  0036F2  0A0F               	xorlw	15
 12309  0036F4  B4D8               	btfsc	status,2,c
 12310  0036F6  0012               	return	
 12311                           
 12312                           ;Test.c: 413: else{
 12313                           ;Test.c: 414: if(on == 0){
 12314                           
 12315                           ;Test.c: 412: }
 12316                           
 12317                           ;Test.c: 411: break;
 12318  0036F8  0100               	movlb	0	; () banked
 12319  0036FA  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12320  0036FC  0100               	movlb	0	; () banked
 12321  0036FE  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12322  003700  A4D8               	btfss	status,2,c
 12323  003702  D007               	goto	l6904
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;Test.c: 415: on = 1;
 12327  003704  0E00               	movlw	0
 12328  003706  0100               	movlb	0	; () banked
 12329  003708  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12330  00370A  0E01               	movlw	1
 12331  00370C  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;Test.c: 416: LATAbits.LATA5 = 1;
 12335  00370E  8A89               	bsf	3977,5,c	;volatile
 12336                           
 12337                           ;Test.c: 417: }
 12338  003710  D006               	goto	l1187
 12339  003712                     l6904:
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;Test.c: 418: else{
 12343                           ;Test.c: 419: on = 0;
 12344  003712  0E00               	movlw	0
 12345  003714  0100               	movlb	0	; () banked
 12346  003716  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12347  003718  0E00               	movlw	0
 12348  00371A  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12349                           
 12350                           ; BSR set to: 0
 12351                           ;Test.c: 420: LATAbits.LATA5 = 0;
 12352  00371C  9A89               	bcf	3977,5,c	;volatile
 12353  00371E                     l1187:
 12354  00371E  A281               	btfss	3969,1,c	;volatile
 12355  003720  D7E4               	goto	l1179
 12356  003722  D7FD               	goto	l1187
 12357  003724                     __end_of_ToggleTestA5:
 12358                           	opt stack 0
 12359                           tblptru	equ	0xFF8
 12360                           tblptrh	equ	0xFF7
 12361                           tblptrl	equ	0xFF6
 12362                           tablat	equ	0xFF5
 12363                           prodh	equ	0xFF4
 12364                           prodl	equ	0xFF3
 12365                           intcon	equ	0xFF2
 12366                           intcon2	equ	0xFF1
 12367                           intcon3	equ	0xFF0
 12368                           postinc0	equ	0xFEE
 12369                           wreg	equ	0xFE8
 12370                           postdec1	equ	0xFE5
 12371                           fsr1l	equ	0xFE1
 12372                           indf2	equ	0xFDF
 12373                           postinc2	equ	0xFDE
 12374                           postdec2	equ	0xFDD
 12375                           fsr2h	equ	0xFDA
 12376                           fsr2l	equ	0xFD9
 12377                           status	equ	0xFD8
 12378                           
 12379 ;; *************** function _SolenoidTestA5 *****************
 12380 ;; Defined at:
 12381 ;;		line 375 in file "Test.c"
 12382 ;; Parameters:    Size  Location     Type
 12383 ;;		None
 12384 ;; Auto vars:     Size  Location     Type
 12385 ;;  i               1   47[BANK0 ] unsigned char 
 12386 ;;  i               1   48[BANK0 ] unsigned char 
 12387 ;;  i               2   45[BANK0 ] int 
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  1    wreg      void 
 12390 ;; Registers used:
 12391 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12400 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12401 ;;Total ram usage:        6 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:   10
 12404 ;; This function calls:
 12405 ;;		_lcdInst
 12406 ;;		_printf
 12407 ;; This function is called by:
 12408 ;;		_Test
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           	psect	text44
 12413  002EFC                     __ptext44:
 12414                           	opt stack 0
 12415  002EFC                     _SolenoidTestA5:
 12416                           	opt stack 19
 12417  002EFC                     
 12418                           ;Test.c: 377: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12419  002EFC  0E01               	movlw	1
 12420  002EFE  ECF9  F021         	call	_lcdInst
 12421  002F02  0E68               	movlw	104
 12422  002F04  0100               	movlb	0	; () banked
 12423  002F06  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12424  002F08  0EE4               	movlw	228
 12425  002F0A                     u7777:
 12426  002F0A  2EE8               	decfsz	wreg,f,c
 12427  002F0C  D7FE               	bra	u7777
 12428  002F0E  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12429  002F10  D7FC               	bra	u7777
 12430  002F12  F000               	nop	
 12431  002F14  0E80               	movlw	128
 12432  002F16  ECF9  F021         	call	_lcdInst
 12433                           
 12434                           ;Test.c: 378: printf("SOLENOID TST");
 12435  002F1A  0E49               	movlw	low STR_107
 12436  002F1C  0100               	movlb	0	; () banked
 12437  002F1E  6F8E               	movwf	printf@f& (0+255),b
 12438  002F20  0EFF               	movlw	high STR_107
 12439  002F22  0100               	movlb	0	; () banked
 12440  002F24  6F8F               	movwf	(printf@f+1)& (0+255),b
 12441  002F26  EC9C  F008         	call	_printf	;wreg free
 12442                           
 12443                           ;Test.c: 379: lcdInst(0b11000000);;
 12444  002F2A  0EC0               	movlw	192
 12445  002F2C  ECF9  F021         	call	_lcdInst
 12446  002F30                     l1164:
 12447  002F30  A281               	btfss	3969,1,c	;volatile
 12448  002F32  D7FE               	goto	l1164
 12449                           
 12450                           ;Test.c: 384: }
 12451                           ;Test.c: 386: for(int i = 0; i < 3; i++){
 12452  002F34  0E00               	movlw	0
 12453  002F36  0100               	movlb	0	; () banked
 12454  002F38  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12455  002F3A  0E00               	movlw	0
 12456  002F3C  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12457  002F3E                     l6920:
 12458                           
 12459                           ; BSR set to: 0
 12460  002F3E  0100               	movlb	0	; () banked
 12461  002F40  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12462  002F42  D008               	goto	l6924
 12463  002F44  0100               	movlb	0	; () banked
 12464  002F46  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12465  002F48  E12D               	bnz	l6940
 12466  002F4A  0E03               	movlw	3
 12467  002F4C  0100               	movlb	0	; () banked
 12468  002F4E  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12469  002F50  B0D8               	btfsc	status,0,c
 12470  002F52  D028               	goto	l6940
 12471  002F54                     l6924:
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;Test.c: 387: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12475  002F54  0E00               	movlw	0
 12476  002F56  0100               	movlb	0	; () banked
 12477  002F58  6FAF               	movwf	SolenoidTestA5@i_1625& (0+255),b
 12478  002F5A                     l6926:
 12479                           
 12480                           ; BSR set to: 0
 12481  002F5A  0E63               	movlw	99
 12482  002F5C  0100               	movlb	0	; () banked
 12483  002F5E  65AF               	cpfsgt	SolenoidTestA5@i_1625& (0+255),b
 12484  002F60  D001               	goto	l6930
 12485  002F62  D00C               	goto	l1170
 12486  002F64                     l6930:
 12487                           
 12488                           ; BSR set to: 0
 12489  002F64  0E68               	movlw	104
 12490  002F66  0100               	movlb	0	; () banked
 12491  002F68  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12492  002F6A  0EE4               	movlw	228
 12493  002F6C                     u7787:
 12494  002F6C  2EE8               	decfsz	wreg,f,c
 12495  002F6E  D7FE               	bra	u7787
 12496  002F70  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12497  002F72  D7FC               	bra	u7787
 12498  002F74  F000               	nop	
 12499  002F76  0100               	movlb	0	; () banked
 12500  002F78  2BAF               	incf	SolenoidTestA5@i_1625& (0+255),f,b
 12501  002F7A  D7EF               	goto	l6926
 12502  002F7C                     l1170:
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;Test.c: 388: LATAbits.LATA5 = 1;
 12506  002F7C  8A89               	bsf	3977,5,c	;volatile
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;Test.c: 389: _delay((unsigned long)((150)*(32000000/4000.0)));
 12510  002F7E  0E07               	movlw	7
 12511  002F80  0100               	movlb	0	; () banked
 12512  002F82  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12513  002F84  0E17               	movlw	23
 12514  002F86  0100               	movlb	0	; () banked
 12515  002F88  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12516  002F8A  0E6A               	movlw	106
 12517  002F8C                     u7797:
 12518  002F8C  2EE8               	decfsz	wreg,f,c
 12519  002F8E  D7FE               	bra	u7797
 12520  002F90  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12521  002F92  D7FC               	bra	u7797
 12522  002F94  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12523  002F96  D7FA               	bra	u7797
 12524  002F98  F000               	nop	
 12525                           
 12526                           ;Test.c: 390: LATAbits.LATA5 = 0;
 12527  002F9A  9A89               	bcf	3977,5,c	;volatile
 12528  002F9C  0100               	movlb	0	; () banked
 12529  002F9E  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12530  002FA0  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12531  002FA2  D7CD               	goto	l6920
 12532  002FA4                     l6940:
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;Test.c: 391: }
 12536                           ;Test.c: 393: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12537  002FA4  0E01               	movlw	1
 12538  002FA6  ECF9  F021         	call	_lcdInst
 12539  002FAA  0E68               	movlw	104
 12540  002FAC  0100               	movlb	0	; () banked
 12541  002FAE  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12542  002FB0  0EE4               	movlw	228
 12543  002FB2                     u7807:
 12544  002FB2  2EE8               	decfsz	wreg,f,c
 12545  002FB4  D7FE               	bra	u7807
 12546  002FB6  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12547  002FB8  D7FC               	bra	u7807
 12548  002FBA  F000               	nop	
 12549  002FBC  0E80               	movlw	128
 12550  002FBE  ECF9  F021         	call	_lcdInst
 12551                           
 12552                           ;Test.c: 394: printf("PUSH DONE");
 12553  002FC2  0E90               	movlw	low STR_108
 12554  002FC4  0100               	movlb	0	; () banked
 12555  002FC6  6F8E               	movwf	printf@f& (0+255),b
 12556  002FC8  0EFF               	movlw	high STR_108
 12557  002FCA  0100               	movlb	0	; () banked
 12558  002FCC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12559  002FCE  EC9C  F008         	call	_printf	;wreg free
 12560                           
 12561                           ;Test.c: 395: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12562  002FD2  0E00               	movlw	0
 12563  002FD4  0100               	movlb	0	; () banked
 12564  002FD6  6FB0               	movwf	SolenoidTestA5@i_1627& (0+255),b
 12565  002FD8                     l6950:
 12566                           
 12567                           ; BSR set to: 0
 12568  002FD8  0E63               	movlw	99
 12569  002FDA  0100               	movlb	0	; () banked
 12570  002FDC  65B0               	cpfsgt	SolenoidTestA5@i_1627& (0+255),b
 12571  002FDE  D001               	goto	l6954
 12572  002FE0  D78D               	goto	l6908
 12573  002FE2                     l6954:
 12574                           
 12575                           ; BSR set to: 0
 12576  002FE2  0E68               	movlw	104
 12577  002FE4  0100               	movlb	0	; () banked
 12578  002FE6  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12579  002FE8  0EE4               	movlw	228
 12580  002FEA                     u7817:
 12581  002FEA  2EE8               	decfsz	wreg,f,c
 12582  002FEC  D7FE               	bra	u7817
 12583  002FEE  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12584  002FF0  D7FC               	bra	u7817
 12585  002FF2  F000               	nop	
 12586  002FF4  0100               	movlb	0	; () banked
 12587  002FF6  2BB0               	incf	SolenoidTestA5@i_1627& (0+255),f,b
 12588  002FF8  D7EF               	goto	l6950
 12589  002FFA                     __end_of_SolenoidTestA5:
 12590                           	opt stack 0
 12591                           tblptru	equ	0xFF8
 12592                           tblptrh	equ	0xFF7
 12593                           tblptrl	equ	0xFF6
 12594                           tablat	equ	0xFF5
 12595                           prodh	equ	0xFF4
 12596                           prodl	equ	0xFF3
 12597                           intcon	equ	0xFF2
 12598                           intcon2	equ	0xFF1
 12599                           intcon3	equ	0xFF0
 12600                           postinc0	equ	0xFEE
 12601                           wreg	equ	0xFE8
 12602                           postdec1	equ	0xFE5
 12603                           fsr1l	equ	0xFE1
 12604                           indf2	equ	0xFDF
 12605                           postinc2	equ	0xFDE
 12606                           postdec2	equ	0xFDD
 12607                           fsr2h	equ	0xFDA
 12608                           fsr2l	equ	0xFD9
 12609                           status	equ	0xFD8
 12610                           
 12611 ;; *************** function _PortTests *****************
 12612 ;; Defined at:
 12613 ;;		line 306 in file "Test.c"
 12614 ;; Parameters:    Size  Location     Type
 12615 ;;		None
 12616 ;; Auto vars:     Size  Location     Type
 12617 ;;		None
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  1    wreg      void 
 12620 ;; Registers used:
 12621 ;;		wreg, status,2, status,0
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;Total ram usage:        2 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    7
 12634 ;; This function calls:
 12635 ;;		Nothing
 12636 ;; This function is called by:
 12637 ;;		_Test
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text45
 12642  0037AA                     __ptext45:
 12643                           	opt stack 0
 12644  0037AA                     _PortTests:
 12645                           	opt stack 22
 12646  0037AA                     l1129:
 12647  0037AA  A281               	btfss	3969,1,c	;volatile
 12648  0037AC  D7FE               	goto	l1129
 12649                           
 12650                           ;Test.c: 310: var = PORTB >> 4;
 12651  0037AE  CF81 F080          	movff	3969,??_PortTests	;volatile
 12652  0037B2  0100               	movlb	0	; () banked
 12653  0037B4  3B80               	swapf	??_PortTests& (0+255),f,b
 12654  0037B6  0E0F               	movlw	15
 12655  0037B8  1780               	andwf	??_PortTests& (0+255),f,b
 12656  0037BA  0100               	movlb	0	; () banked
 12657  0037BC  5180               	movf	??_PortTests& (0+255),w,b
 12658  0037BE  0100               	movlb	0	; () banked
 12659  0037C0  6FFA               	movwf	_var& (0+255),b
 12660  0037C2  6BFB               	clrf	(_var+1)& (0+255),b
 12661                           
 12662                           ;Test.c: 311: switch(var){
 12663  0037C4  D00C               	goto	l6962
 12664  0037C6                     l1133:
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;Test.c: 313: LATEbits.LATE0 = 1;
 12668  0037C6  808D               	bsf	3981,0,c	;volatile
 12669                           
 12670                           ;Test.c: 314: break;
 12671  0037C8  D027               	goto	l1141
 12672  0037CA                     l1135:
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;Test.c: 316: LATEbits.LATE1 = 1;
 12676  0037CA  828D               	bsf	3981,1,c	;volatile
 12677                           
 12678                           ;Test.c: 317: break;
 12679  0037CC  D025               	goto	l1141
 12680  0037CE                     l1136:
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;Test.c: 319: LATDbits.LATD0 = 1;
 12684  0037CE  808C               	bsf	3980,0,c	;volatile
 12685                           
 12686                           ;Test.c: 320: break;
 12687  0037D0  D023               	goto	l1141
 12688  0037D2                     l1137:
 12689                           
 12690                           ; BSR set to: 0
 12691                           ;Test.c: 322: LATAbits.LATA3 = 1;
 12692  0037D2  8689               	bsf	3977,3,c	;volatile
 12693                           
 12694                           ;Test.c: 323: break;
 12695  0037D4  D021               	goto	l1141
 12696  0037D6                     l1138:
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;Test.c: 325: LATAbits.LATA4 = 1;
 12700  0037D6  8889               	bsf	3977,4,c	;volatile
 12701                           
 12702                           ;Test.c: 326: break;
 12703  0037D8  D01F               	goto	l1141
 12704  0037DA                     l1139:
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;Test.c: 328: LATAbits.LATA5 = 1;
 12708  0037DA  8A89               	bsf	3977,5,c	;volatile
 12709                           
 12710                           ; BSR set to: 0
 12711                           ;Test.c: 332: }
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;Test.c: 331: break;
 12715                           
 12716                           ;Test.c: 330: default:
 12717                           
 12718                           ;Test.c: 329: break;
 12719  0037DC  D01D               	goto	l1141
 12720  0037DE                     l6962:
 12721                           
 12722                           ; BSR set to: 0
 12723  0037DE  C0FA  F080         	movff	_var,??_PortTests
 12724  0037E2  C0FB  F081         	movff	_var+1,??_PortTests+1
 12725                           
 12726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12727                           ; Switch size 1, requested type "space"
 12728                           ; Number of cases is 1, Range of values is 0 to 0
 12729                           ; switch strategies available:
 12730                           ; Name         Instructions Cycles
 12731                           ; simple_byte            4     3 (average)
 12732                           ;	Chosen strategy is simple_byte
 12733  0037E6  0100               	movlb	0	; () banked
 12734  0037E8  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12735  0037EA  0A00               	xorlw	0	; case 0
 12736  0037EC  A4D8               	btfss	status,2,c
 12737  0037EE  D014               	goto	l1141
 12738                           
 12739                           ; BSR set to: 0
 12740                           ; Switch size 1, requested type "space"
 12741                           ; Number of cases is 6, Range of values is 0 to 5
 12742                           ; switch strategies available:
 12743                           ; Name         Instructions Cycles
 12744                           ; simple_byte           19    10 (average)
 12745                           ;	Chosen strategy is simple_byte
 12746  0037F0  0100               	movlb	0	; () banked
 12747  0037F2  5180               	movf	??_PortTests& (0+255),w,b
 12748  0037F4  0A00               	xorlw	0	; case 0
 12749  0037F6  B4D8               	btfsc	status,2,c
 12750  0037F8  D7E6               	goto	l1133
 12751  0037FA  0A01               	xorlw	1	; case 1
 12752  0037FC  B4D8               	btfsc	status,2,c
 12753  0037FE  D7E5               	goto	l1135
 12754  003800  0A03               	xorlw	3	; case 2
 12755  003802  B4D8               	btfsc	status,2,c
 12756  003804  D7E4               	goto	l1136
 12757  003806  0A01               	xorlw	1	; case 3
 12758  003808  B4D8               	btfsc	status,2,c
 12759  00380A  D7E3               	goto	l1137
 12760  00380C  0A07               	xorlw	7	; case 4
 12761  00380E  B4D8               	btfsc	status,2,c
 12762  003810  D7E2               	goto	l1138
 12763  003812  0A01               	xorlw	1	; case 5
 12764  003814  B4D8               	btfsc	status,2,c
 12765  003816  D7E1               	goto	l1139
 12766  003818                     l1141:
 12767  003818  B281               	btfsc	3969,1,c	;volatile
 12768  00381A  D7FE               	goto	l1141
 12769                           
 12770                           ;Test.c: 334: __nop();
 12771  00381C  F000               	nop	
 12772                           
 12773                           ;Test.c: 335: __nop();
 12774  00381E  F000               	nop	
 12775                           
 12776                           ;Test.c: 336: LATA = 0x00;
 12777  003820  0E00               	movlw	0
 12778  003822  6E89               	movwf	3977,c	;volatile
 12779                           
 12780                           ;Test.c: 337: LATE = 0x00;
 12781  003824  0E00               	movlw	0
 12782  003826  6E8D               	movwf	3981,c	;volatile
 12783                           
 12784                           ;Test.c: 338: LATD = 0x00; }
 12785  003828  0E00               	movlw	0
 12786  00382A  6E8C               	movwf	3980,c	;volatile
 12787  00382C  D7BE               	goto	l1129
 12788  00382E                     __end_of_PortTests:
 12789                           	opt stack 0
 12790                           tblptru	equ	0xFF8
 12791                           tblptrh	equ	0xFF7
 12792                           tblptrl	equ	0xFF6
 12793                           tablat	equ	0xFF5
 12794                           prodh	equ	0xFF4
 12795                           prodl	equ	0xFF3
 12796                           intcon	equ	0xFF2
 12797                           intcon2	equ	0xFF1
 12798                           intcon3	equ	0xFF0
 12799                           postinc0	equ	0xFEE
 12800                           wreg	equ	0xFE8
 12801                           postdec1	equ	0xFE5
 12802                           fsr1l	equ	0xFE1
 12803                           indf2	equ	0xFDF
 12804                           postinc2	equ	0xFDE
 12805                           postdec2	equ	0xFDD
 12806                           fsr2h	equ	0xFDA
 12807                           fsr2l	equ	0xFD9
 12808                           status	equ	0xFD8
 12809                           
 12810 ;; *************** function _PortTestA5 *****************
 12811 ;; Defined at:
 12812 ;;		line 341 in file "Test.c"
 12813 ;; Parameters:    Size  Location     Type
 12814 ;;		None
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;		None
 12817 ;; Return value:  Size  Location     Type
 12818 ;;                  1    wreg      void 
 12819 ;; Registers used:
 12820 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12821 ;; Tracked objects:
 12822 ;;		On entry : 0/0
 12823 ;;		On exit  : 0/0
 12824 ;;		Unchanged: 0/0
 12825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12829 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12830 ;;Total ram usage:        1 bytes
 12831 ;; Hardware stack levels used:    1
 12832 ;; Hardware stack levels required when called:   10
 12833 ;; This function calls:
 12834 ;;		_lcdInst
 12835 ;;		_printf
 12836 ;; This function is called by:
 12837 ;;		_Test
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           	psect	text46
 12842  003B7C                     __ptext46:
 12843                           	opt stack 0
 12844  003B7C                     _PortTestA5:
 12845                           	opt stack 19
 12846                           
 12847                           ;Test.c: 342: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12848                           
 12849                           ;incstack = 0
 12850  003B7C  0E01               	movlw	1
 12851  003B7E  ECF9  F021         	call	_lcdInst
 12852  003B82  0E68               	movlw	104
 12853  003B84  0100               	movlb	0	; () banked
 12854  003B86  6FAB               	movwf	??_PortTestA5& (0+255),b
 12855  003B88  0EE4               	movlw	228
 12856  003B8A                     u7827:
 12857  003B8A  2EE8               	decfsz	wreg,f,c
 12858  003B8C  D7FE               	bra	u7827
 12859  003B8E  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12860  003B90  D7FC               	bra	u7827
 12861  003B92  F000               	nop	
 12862  003B94  0E80               	movlw	128
 12863  003B96  ECF9  F021         	call	_lcdInst
 12864                           
 12865                           ;Test.c: 343: printf("D WILL RETURN    ");
 12866  003B9A  0EA7               	movlw	low STR_105
 12867  003B9C  0100               	movlb	0	; () banked
 12868  003B9E  6F8E               	movwf	printf@f& (0+255),b
 12869  003BA0  0EFB               	movlw	high STR_105
 12870  003BA2  0100               	movlb	0	; () banked
 12871  003BA4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12872  003BA6  EC9C  F008         	call	_printf	;wreg free
 12873                           
 12874                           ;Test.c: 344: lcdInst(0b11000000);;
 12875  003BAA  0EC0               	movlw	192
 12876  003BAC  ECF9  F021         	call	_lcdInst
 12877                           
 12878                           ;Test.c: 345: printf("OTHER SETS RA5   ");
 12879  003BB0  0EB9               	movlw	low STR_106
 12880  003BB2  0100               	movlb	0	; () banked
 12881  003BB4  6F8E               	movwf	printf@f& (0+255),b
 12882  003BB6  0EFB               	movlw	high STR_106
 12883  003BB8  0100               	movlb	0	; () banked
 12884  003BBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12885  003BBC  EC9C  F008         	call	_printf	;wreg free
 12886  003BC0                     l1150:
 12887  003BC0  A281               	btfss	3969,1,c	;volatile
 12888  003BC2  D7FE               	goto	l1150
 12889                           
 12890                           ;Test.c: 350: }
 12891                           ;Test.c: 351: if(PORTB >> 4 == 0b1111){
 12892  003BC4  3881               	swapf	3969,w,c	;volatile
 12893  003BC6  0B0F               	andlw	15
 12894  003BC8  0A0F               	xorlw	15
 12895  003BCA  B4D8               	btfsc	status,2,c
 12896  003BCC  0012               	return	
 12897                           
 12898                           ;Test.c: 354: else{
 12899                           ;Test.c: 355: LATAbits.LATA5 = 1;
 12900                           
 12901                           ;Test.c: 353: }
 12902                           
 12903                           ;Test.c: 352: break;
 12904  003BCE  8A89               	bsf	3977,5,c	;volatile
 12905  003BD0                     l1156:
 12906  003BD0  B281               	btfsc	3969,1,c	;volatile
 12907  003BD2  D7FE               	goto	l1156
 12908                           
 12909                           ;Test.c: 358: }
 12910                           ;Test.c: 370: LATAbits.LATA5 = 0;
 12911  003BD4  9A89               	bcf	3977,5,c	;volatile
 12912  003BD6  D7F4               	goto	l1150
 12913  003BD8                     __end_of_PortTestA5:
 12914                           	opt stack 0
 12915                           tblptru	equ	0xFF8
 12916                           tblptrh	equ	0xFF7
 12917                           tblptrl	equ	0xFF6
 12918                           tablat	equ	0xFF5
 12919                           prodh	equ	0xFF4
 12920                           prodl	equ	0xFF3
 12921                           intcon	equ	0xFF2
 12922                           intcon2	equ	0xFF1
 12923                           intcon3	equ	0xFF0
 12924                           postinc0	equ	0xFEE
 12925                           wreg	equ	0xFE8
 12926                           postdec1	equ	0xFE5
 12927                           fsr1l	equ	0xFE1
 12928                           indf2	equ	0xFDF
 12929                           postinc2	equ	0xFDE
 12930                           postdec2	equ	0xFDD
 12931                           fsr2h	equ	0xFDA
 12932                           fsr2l	equ	0xFD9
 12933                           status	equ	0xFD8
 12934                           
 12935 ;; *************** function _printf *****************
 12936 ;; Defined at:
 12937 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12940 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 12941 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 12942 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 12943 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 12944 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 12945 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 12946 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 12947 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 12948 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 12949 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 12950 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 12951 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 12952 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 12953 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 12954 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 12955 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 12956 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12957 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 12958 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 12959 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 12960 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 12961 ;;		 -> STR_1(18), 
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;  tmpval          4    0        struct .
 12964 ;;  width           2   41[BANK0 ] int 
 12965 ;;  val             2   37[BANK0 ] unsigned int 
 12966 ;;  len             2   35[BANK0 ] unsigned int 
 12967 ;;  ap              2   33[BANK0 ] PTR void [1]
 12968 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12969 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 12970 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 12971 ;;  c               1   40[BANK0 ] char 
 12972 ;;  flag            1   39[BANK0 ] unsigned char 
 12973 ;;  prec            1   30[BANK0 ] char 
 12974 ;; Return value:  Size  Location     Type
 12975 ;;                  2   14[BANK0 ] int 
 12976 ;; Registers used:
 12977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12978 ;; Tracked objects:
 12979 ;;		On entry : 0/0
 12980 ;;		On exit  : 0/0
 12981 ;;		Unchanged: 0/0
 12982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12983 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12985 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12987 ;;Total ram usage:       29 bytes
 12988 ;; Hardware stack levels used:    1
 12989 ;; Hardware stack levels required when called:    9
 12990 ;; This function calls:
 12991 ;;		___lwdiv
 12992 ;;		___lwmod
 12993 ;;		___wmul
 12994 ;;		_isdigit
 12995 ;;		_putch
 12996 ;; This function is called by:
 12997 ;;		_UI
 12998 ;;		_change_state_to_menu_start
 12999 ;;		_change_state_to_menu_12
 13000 ;;		_change_state_to_menu_22
 13001 ;;		_printRTC
 13002 ;;		_EEPROM_write
 13003 ;;		_Test
 13004 ;;		_algorithmTest
 13005 ;;		_sensorTest
 13006 ;;		_actuatorTest
 13007 ;;		_PortTestA5
 13008 ;;		_SolenoidTestA5
 13009 ;;		_ToggleTestA5
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013                           	psect	text47
 13014  001138                     __ptext47:
 13015                           	opt stack 0
 13016  001138                     _printf:
 13017                           	opt stack 18
 13018                           
 13019                           ;doprnt.c: 466: va_list ap;
 13020                           ;doprnt.c: 499: signed char c;
 13021                           ;doprnt.c: 501: int width;
 13022                           ;doprnt.c: 506: signed char prec;
 13023                           ;doprnt.c: 508: unsigned char flag;
 13024                           ;doprnt.c: 523: union {
 13025                           ;doprnt.c: 524: unsigned long vd;
 13026                           ;doprnt.c: 525: double integ;
 13027                           ;doprnt.c: 526: } tmpval;
 13028                           ;doprnt.c: 528: unsigned int val;
 13029                           ;doprnt.c: 529: unsigned len;
 13030                           ;doprnt.c: 530: const char * cp;
 13031                           ;doprnt.c: 533: *ap = __va_start();
 13032                           
 13033                           ;incstack = 0
 13034  001138  0E90               	movlw	low (?_printf+2)
 13035  00113A  0100               	movlb	0	; () banked
 13036  00113C  6FA1               	movwf	printf@ap& (0+255),b
 13037  00113E  0E00               	movlw	high (?_printf+2)
 13038  001140  0100               	movlb	0	; () banked
 13039  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13040                           
 13041                           ;doprnt.c: 536: while(c = *f++) {
 13042  001144  D205               	goto	l5386
 13043  001146                     l5256:
 13044                           
 13045                           ; BSR set to: 0
 13046                           ;doprnt.c: 538: if(c != '%')
 13047  001146  0E25               	movlw	37
 13048  001148  0100               	movlb	0	; () banked
 13049  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 13050  00114C  B4D8               	btfsc	status,2,c
 13051  00114E  D005               	goto	l5260
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;doprnt.c: 540: {
 13055                           ;doprnt.c: 541: (putch(c) );
 13056  001150  0100               	movlb	0	; () banked
 13057  001152  51A8               	movf	printf@c& (0+255),w,b
 13058  001154  ECF1  F021         	call	_putch
 13059                           
 13060                           ;doprnt.c: 542: continue;
 13061  001158  D1FB               	goto	l5386
 13062  00115A                     l5260:
 13063                           
 13064                           ;doprnt.c: 543: }
 13065                           ;doprnt.c: 546: width = 0;
 13066  00115A  0E00               	movlw	0
 13067  00115C  0100               	movlb	0	; () banked
 13068  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 13069  001160  0E00               	movlw	0
 13070  001162  6FA9               	movwf	printf@width& (0+255),b
 13071                           
 13072                           ;doprnt.c: 548: flag = 0;
 13073  001164  0E00               	movlw	0
 13074  001166  0100               	movlb	0	; () banked
 13075  001168  6FA7               	movwf	printf@flag& (0+255),b
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;doprnt.c: 551: switch(*f) {
 13079                           
 13080                           ;doprnt.c: 550: for(;;) {
 13081  00116A  D005               	goto	l5266
 13082  00116C                     l5262:
 13083                           
 13084                           ;doprnt.c: 580: flag |= 0x04;
 13085  00116C  0100               	movlb	0	; () banked
 13086  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 13087                           
 13088                           ;doprnt.c: 581: f++;
 13089  001170  0100               	movlb	0	; () banked
 13090  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 13091  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13092  001176                     l5266:
 13093  001176  C08E  FFF6         	movff	printf@f,tblptrl
 13094  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13095  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13096  00117E  6AF8               	clrf	tblptru,c
 13097  001180                     	endif
 13098  001180                     	if	0	;tblptru may be non-zero
 13099  001180                     	endif
 13100  001180  0008               	tblrd		*
 13101  001182  50F5               	movf	tablat,w,c
 13102                           
 13103                           ; Switch size 1, requested type "space"
 13104                           ; Number of cases is 1, Range of values is 48 to 48
 13105                           ; switch strategies available:
 13106                           ; Name         Instructions Cycles
 13107                           ; simple_byte            4     3 (average)
 13108                           ;	Chosen strategy is simple_byte
 13109  001184  0A30               	xorlw	48	; case 48
 13110  001186  B4D8               	btfsc	status,2,c
 13111  001188  D7F1               	goto	l5262
 13112                           
 13113                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13114                           
 13115                           ;doprnt.c: 586: }
 13116                           
 13117                           ;doprnt.c: 585: break;
 13118  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 13119  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 13120  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13121  001192  6AF8               	clrf	tblptru,c
 13122  001194                     	endif
 13123  001194                     	if	0	;tblptru may be non-zero
 13124  001194                     	endif
 13125  001194  0008               	tblrd		*
 13126  001196  50F5               	movf	tablat,w,c
 13127  001198  EC04  F021         	call	_isdigit
 13128  00119C  A0D8               	btfss	status,0,c
 13129  00119E  D0D2               	goto	l5314
 13130                           
 13131                           ;doprnt.c: 598: width = 0;
 13132  0011A0  0E00               	movlw	0
 13133  0011A2  0100               	movlb	0	; () banked
 13134  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13135  0011A6  0E00               	movlw	0
 13136  0011A8  6FA9               	movwf	printf@width& (0+255),b
 13137  0011AA                     l5272:
 13138                           
 13139                           ;doprnt.c: 600: width *= 10;
 13140  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13141  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13142  0011B2  0E00               	movlw	0
 13143  0011B4  0100               	movlb	0	; () banked
 13144  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13145  0011B8  0E0A               	movlw	10
 13146  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13147  0011BC  EC9E  F01F         	call	___wmul	;wreg free
 13148  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 13149  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13150                           
 13151                           ;doprnt.c: 601: width += *f++ - '0';
 13152  0011C8  0ED0               	movlw	208
 13153  0011CA  0100               	movlb	0	; () banked
 13154  0011CC  6F9A               	movwf	??_printf& (0+255),b
 13155  0011CE  0EFF               	movlw	255
 13156  0011D0  0100               	movlb	0	; () banked
 13157  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 13158  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 13159  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 13160  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13161  0011DC  6AF8               	clrf	tblptru,c
 13162  0011DE                     	endif
 13163  0011DE                     	if	0	;tblptru may be non-zero
 13164  0011DE                     	endif
 13165  0011DE  0008               	tblrd		*
 13166  0011E0  50F5               	movf	tablat,w,c
 13167  0011E2  0100               	movlb	0	; () banked
 13168  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 13169  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 13170  0011E8  0100               	movlb	0	; () banked
 13171  0011EA  519A               	movf	??_printf& (0+255),w,b
 13172  0011EC  0100               	movlb	0	; () banked
 13173  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 13174  0011F0  0100               	movlb	0	; () banked
 13175  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 13176  0011F4  0100               	movlb	0	; () banked
 13177  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13178  0011F8  0100               	movlb	0	; () banked
 13179  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 13180  0011FC  0100               	movlb	0	; () banked
 13181  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 13182  001200  0100               	movlb	0	; () banked
 13183  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 13184  001204  0100               	movlb	0	; () banked
 13185  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13186                           
 13187                           ; BSR set to: 0
 13188  001208  0100               	movlb	0	; () banked
 13189  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 13190  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13191                           
 13192                           ; BSR set to: 0
 13193                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13194  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 13195  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 13196  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13197  001216  6AF8               	clrf	tblptru,c
 13198  001218                     	endif
 13199  001218                     	if	0	;tblptru may be non-zero
 13200  001218                     	endif
 13201  001218  0008               	tblrd		*
 13202  00121A  50F5               	movf	tablat,w,c
 13203  00121C  EC04  F021         	call	_isdigit
 13204  001220  A0D8               	btfss	status,0,c
 13205  001222  D090               	goto	l5314
 13206  001224  D7C2               	goto	l5272
 13207  001226                     l5280:
 13208                           
 13209                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13210  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 13211  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13212  00122E  CFDE F09F          	movff	postinc2,printf@cp
 13213  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 13214  001236  0E02               	movlw	2
 13215  001238  0100               	movlb	0	; () banked
 13216  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 13217  00123C  0E00               	movlw	0
 13218  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;doprnt.c: 740: if(!cp)
 13222  001240  0100               	movlb	0	; () banked
 13223  001242  519F               	movf	printf@cp& (0+255),w,b
 13224  001244  0100               	movlb	0	; () banked
 13225  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13226  001248  A4D8               	btfss	status,2,c
 13227  00124A  D006               	goto	l5288
 13228                           
 13229                           ; BSR set to: 0
 13230                           ;doprnt.c: 741: cp = "(null)";
 13231  00124C  0EB6               	movlw	low STR_111
 13232  00124E  0100               	movlb	0	; () banked
 13233  001250  6F9F               	movwf	printf@cp& (0+255),b
 13234  001252  0EFF               	movlw	high STR_111
 13235  001254  0100               	movlb	0	; () banked
 13236  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13237  001258                     l5288:
 13238                           
 13239                           ; BSR set to: 0
 13240                           ;doprnt.c: 745: len = 0;
 13241  001258  0E00               	movlw	0
 13242  00125A  0100               	movlb	0	; () banked
 13243  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 13244  00125E  0E00               	movlw	0
 13245  001260  6FA3               	movwf	printf@len& (0+255),b
 13246                           
 13247                           ;doprnt.c: 746: while(cp[len])
 13248  001262  D003               	goto	l5292
 13249  001264                     l5290:
 13250                           
 13251                           ;doprnt.c: 747: len++;
 13252  001264  0100               	movlb	0	; () banked
 13253  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 13254  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13255  00126A                     l5292:
 13256                           
 13257                           ; BSR set to: 0
 13258  00126A  0100               	movlb	0	; () banked
 13259  00126C  51A3               	movf	printf@len& (0+255),w,b
 13260  00126E  0100               	movlb	0	; () banked
 13261  001270  259F               	addwf	printf@cp& (0+255),w,b
 13262  001272  0100               	movlb	0	; () banked
 13263  001274  6F9A               	movwf	??_printf& (0+255),b
 13264  001276  0100               	movlb	0	; () banked
 13265  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 13266  00127A  0100               	movlb	0	; () banked
 13267  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13268  00127E  0100               	movlb	0	; () banked
 13269  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 13270  001282  C09A  FFF6         	movff	??_printf,tblptrl
 13271  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 13272  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 13273  00128C  6EF8               	movwf	tblptru,c
 13274  00128E  0E0F               	movlw	(high __ramtop+-1)
 13275  001290  64F7               	cpfsgt	tblptrh,c
 13276  001292  D003               	bra	u3747
 13277  001294  0008               	tblrd		*
 13278  001296  50F5               	movf	tablat,w,c
 13279  001298  D005               	bra	u3740
 13280  00129A                     u3747:
 13281  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13282  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13283  0012A2  50EF               	movf	indf0,w,c
 13284  0012A4                     u3740:
 13285  0012A4  0900               	iorlw	0
 13286  0012A6  A4D8               	btfss	status,2,c
 13287  0012A8  D7DD               	goto	l5290
 13288                           
 13289                           ;doprnt.c: 757: if(width > len)
 13290  0012AA  0100               	movlb	0	; () banked
 13291  0012AC  51A9               	movf	printf@width& (0+255),w,b
 13292  0012AE  0100               	movlb	0	; () banked
 13293  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 13294  0012B2  0100               	movlb	0	; () banked
 13295  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 13296  0012B6  0100               	movlb	0	; () banked
 13297  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13298  0012BA  B0D8               	btfsc	status,0,c
 13299  0012BC  D009               	goto	l5298
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;doprnt.c: 758: width -= len;
 13303  0012BE  0100               	movlb	0	; () banked
 13304  0012C0  51A3               	movf	printf@len& (0+255),w,b
 13305  0012C2  0100               	movlb	0	; () banked
 13306  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 13307  0012C6  0100               	movlb	0	; () banked
 13308  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 13309  0012CA  0100               	movlb	0	; () banked
 13310  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13311  0012CE  D009               	goto	l5302
 13312  0012D0                     l5298:
 13313                           
 13314                           ; BSR set to: 0
 13315                           ;doprnt.c: 759: else
 13316                           ;doprnt.c: 760: width = 0;
 13317  0012D0  0E00               	movlw	0
 13318  0012D2  0100               	movlb	0	; () banked
 13319  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13320  0012D6  0E00               	movlw	0
 13321  0012D8  6FA9               	movwf	printf@width& (0+255),b
 13322                           
 13323                           ; BSR set to: 0
 13324                           ;doprnt.c: 764: while(width--)
 13325  0012DA  D003               	goto	l5302
 13326  0012DC                     l5300:
 13327                           
 13328                           ; BSR set to: 0
 13329                           ;doprnt.c: 765: (putch(' ') );
 13330  0012DC  0E20               	movlw	32
 13331  0012DE  ECF1  F021         	call	_putch
 13332  0012E2                     l5302:
 13333  0012E2  0100               	movlb	0	; () banked
 13334  0012E4  07A9               	decf	printf@width& (0+255),f,b
 13335  0012E6  A0D8               	btfss	status,0,c
 13336  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13337  0012EA  0100               	movlb	0	; () banked
 13338  0012EC  29A9               	incf	printf@width& (0+255),w,b
 13339  0012EE  E1F6               	bnz	l5300
 13340  0012F0  0100               	movlb	0	; () banked
 13341  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 13342  0012F4  B4D8               	btfsc	status,2,c
 13343  0012F6  D017               	goto	l5308
 13344  0012F8  D7F1               	goto	l5300
 13345  0012FA                     l5304:
 13346                           
 13347                           ; BSR set to: 0
 13348                           ;doprnt.c: 768: (putch(*cp++) );
 13349  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 13350  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13351  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 13352  001304  6EF8               	movwf	tblptru,c
 13353  001306  0E0F               	movlw	(high __ramtop+-1)
 13354  001308  64F7               	cpfsgt	tblptrh,c
 13355  00130A  D003               	bra	u3787
 13356  00130C  0008               	tblrd		*
 13357  00130E  50F5               	movf	tablat,w,c
 13358  001310  D005               	bra	u3780
 13359  001312                     u3787:
 13360  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 13361  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 13362  00131A  50EF               	movf	indf0,w,c
 13363  00131C                     u3780:
 13364  00131C  ECF1  F021         	call	_putch
 13365  001320  0100               	movlb	0	; () banked
 13366  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 13367  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13368  001326                     l5308:
 13369                           
 13370                           ; BSR set to: 0
 13371  001326  0100               	movlb	0	; () banked
 13372  001328  07A3               	decf	printf@len& (0+255),f,b
 13373  00132A  A0D8               	btfss	status,0,c
 13374  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 13375  00132E  0100               	movlb	0	; () banked
 13376  001330  29A3               	incf	printf@len& (0+255),w,b
 13377  001332  E1E3               	bnz	l5304
 13378  001334  0100               	movlb	0	; () banked
 13379  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 13380  001338  B4D8               	btfsc	status,2,c
 13381  00133A  D10A               	goto	l5386
 13382  00133C  D7DE               	goto	l5304
 13383  00133E                     l5310:
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;doprnt.c: 818: flag |= 0x40;
 13387  00133E  0100               	movlb	0	; () banked
 13388  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 13389                           
 13390                           ; BSR set to: 0
 13391                           ;doprnt.c: 822: }
 13392                           
 13393                           ;doprnt.c: 819: break;
 13394  001342  D01D               	goto	l1224
 13395  001344                     l5314:
 13396  001344  C08E  FFF6         	movff	printf@f,tblptrl
 13397  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 13398  00134C  0100               	movlb	0	; () banked
 13399  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 13400  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13401  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13402  001352  6AF8               	clrf	tblptru,c
 13403  001354                     	endif
 13404  001354                     	if	0	;tblptru may be non-zero
 13405  001354                     	endif
 13406  001354  0008               	tblrd		*
 13407  001356  CFF5 F0A8          	movff	tablat,printf@c
 13408  00135A  0100               	movlb	0	; () banked
 13409  00135C  51A8               	movf	printf@c& (0+255),w,b
 13410                           
 13411                           ; Switch size 1, requested type "space"
 13412                           ; Number of cases is 5, Range of values is 0 to 117
 13413                           ; switch strategies available:
 13414                           ; Name         Instructions Cycles
 13415                           ; simple_byte           16     9 (average)
 13416                           ;	Chosen strategy is simple_byte
 13417  00135E  0A00               	xorlw	0	; case 0
 13418  001360  B4D8               	btfsc	status,2,c
 13419  001362  0012               	return	
 13420  001364  0A64               	xorlw	100	; case 100
 13421  001366  B4D8               	btfsc	status,2,c
 13422  001368  D00A               	goto	l1224
 13423  00136A  0A0D               	xorlw	13	; case 105
 13424  00136C  B4D8               	btfsc	status,2,c
 13425  00136E  D007               	goto	l1224
 13426  001370  0A1A               	xorlw	26	; case 115
 13427  001372  B4D8               	btfsc	status,2,c
 13428  001374  D758               	goto	l5280
 13429  001376  0A06               	xorlw	6	; case 117
 13430  001378  B4D8               	btfsc	status,2,c
 13431  00137A  D7E1               	goto	l5310
 13432  00137C  D0E9               	goto	l5386
 13433  00137E                     l1224:
 13434                           
 13435                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13436  00137E  0100               	movlb	0	; () banked
 13437  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13438  001382  D019               	goto	l5326
 13439                           
 13440                           ; BSR set to: 0
 13441                           ;doprnt.c: 1253: {
 13442                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13443  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13444  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13445  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13446  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13447                           
 13448                           ; BSR set to: 0
 13449  001394  0E02               	movlw	2
 13450  001396  0100               	movlb	0	; () banked
 13451  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13452  00139A  0E00               	movlw	0
 13453  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;doprnt.c: 1261: if((int)val < 0) {
 13457  00139E  0100               	movlb	0	; () banked
 13458  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13459  0013A2  D016               	goto	l5330
 13460                           
 13461                           ; BSR set to: 0
 13462                           ;doprnt.c: 1262: flag |= 0x03;
 13463  0013A4  0E03               	movlw	3
 13464  0013A6  0100               	movlb	0	; () banked
 13465  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;doprnt.c: 1263: val = -val;
 13469  0013AA  0100               	movlb	0	; () banked
 13470  0013AC  6DA5               	negf	printf@val& (0+255),b
 13471  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13472  0013B0  B0D8               	btfsc	status,0,c
 13473  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;doprnt.c: 1264: }
 13477                           ;doprnt.c: 1266: }
 13478  0013B4  D00D               	goto	l5330
 13479  0013B6                     l5326:
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;doprnt.c: 1268: else
 13483                           ;doprnt.c: 1273: {
 13484                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13485  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13486  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13487  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13488  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13489                           
 13490                           ; BSR set to: 0
 13491  0013C6  0E02               	movlw	2
 13492  0013C8  0100               	movlb	0	; () banked
 13493  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13494  0013CC  0E00               	movlw	0
 13495  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13496  0013D0                     l5330:
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;doprnt.c: 1287: }
 13500                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13501  0013D0  0E01               	movlw	1
 13502  0013D2  0100               	movlb	0	; () banked
 13503  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13504  0013D6                     l5332:
 13505                           
 13506                           ; BSR set to: 0
 13507  0013D6  0E05               	movlw	5
 13508  0013D8  0100               	movlb	0	; () banked
 13509  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13510  0013DC  B4D8               	btfsc	status,2,c
 13511  0013DE  D019               	goto	l5344
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;doprnt.c: 1306: if(val < dpowers[c])
 13515                           
 13516                           ; BSR set to: 0
 13517                           
 13518                           ; BSR set to: 0
 13519  0013E0  0100               	movlb	0	; () banked
 13520  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13521  0013E4  0D02               	mullw	2
 13522  0013E6  0E4A               	movlw	low _dpowers
 13523  0013E8  24F3               	addwf	prodl,w,c
 13524  0013EA  6EF6               	movwf	tblptrl,c
 13525  0013EC  0EFB               	movlw	high _dpowers
 13526  0013EE  20F4               	addwfc	prodh,w,c
 13527  0013F0  6EF7               	movwf	tblptrh,c
 13528  0013F2                     	if	1	;There are 3 active tblptr bytes
 13529  0013F2  6AF8               	clrf	tblptru,c
 13530  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13531  0013F6  22F8               	addwfc	tblptru,f,c
 13532  0013F8                     	endif
 13533  0013F8  0009               	tblrd		*+
 13534  0013FA  50F5               	movf	tablat,w,c
 13535  0013FC  0100               	movlb	0	; () banked
 13536  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13537  001400  0009               	tblrd		*+
 13538  001402  50F5               	movf	tablat,w,c
 13539  001404  0100               	movlb	0	; () banked
 13540  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13541  001408  A0D8               	btfss	status,0,c
 13542  00140A  D003               	goto	l5344
 13543                           
 13544                           ; BSR set to: 0
 13545                           
 13546                           ; BSR set to: 0
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;doprnt.c: 1307: break;
 13550  00140C  0100               	movlb	0	; () banked
 13551  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13552  001410  D7E2               	goto	l5332
 13553  001412                     l5344:
 13554                           
 13555                           ; BSR set to: 0
 13556                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13557  001412  0100               	movlb	0	; () banked
 13558  001414  51A9               	movf	printf@width& (0+255),w,b
 13559  001416  0100               	movlb	0	; () banked
 13560  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13561  00141A  B4D8               	btfsc	status,2,c
 13562  00141C  D00B               	goto	l5350
 13563                           
 13564                           ; BSR set to: 0
 13565  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13566  001422  0E03               	movlw	3
 13567  001424  0100               	movlb	0	; () banked
 13568  001426  179A               	andwf	??_printf& (0+255),f,b
 13569  001428  B4D8               	btfsc	status,2,c
 13570  00142A  D004               	goto	l5350
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;doprnt.c: 1346: width--;
 13574  00142C  0100               	movlb	0	; () banked
 13575  00142E  07A9               	decf	printf@width& (0+255),f,b
 13576  001430  A0D8               	btfss	status,0,c
 13577  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13578  001434                     l5350:
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;doprnt.c: 1381: if(width > c)
 13582  001434  0E80               	movlw	128
 13583  001436  0100               	movlb	0	; () banked
 13584  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13585  00143A  0E7F               	movlw	127
 13586  00143C  0100               	movlb	0	; () banked
 13587  00143E  6F9A               	movwf	??_printf& (0+255),b
 13588  001440  0100               	movlb	0	; () banked
 13589  001442  51A9               	movf	printf@width& (0+255),w,b
 13590  001444  0100               	movlb	0	; () banked
 13591  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13592  001448  0100               	movlb	0	; () banked
 13593  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13594  00144C  0A80               	xorlw	128
 13595  00144E  0100               	movlb	0	; () banked
 13596  001450  599A               	subwfb	??_printf& (0+255),w,b
 13597  001452  B0D8               	btfsc	status,0,c
 13598  001454  D00B               	goto	l5354
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;doprnt.c: 1382: width -= c;
 13602  001456  0100               	movlb	0	; () banked
 13603  001458  51A8               	movf	printf@c& (0+255),w,b
 13604  00145A  0100               	movlb	0	; () banked
 13605  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13606  00145E  0E00               	movlw	0
 13607  001460  0100               	movlb	0	; () banked
 13608  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13609  001464  0EFF               	movlw	255
 13610  001466  0100               	movlb	0	; () banked
 13611  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13612  00146A  D005               	goto	l5356
 13613  00146C                     l5354:
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;doprnt.c: 1383: else
 13617                           ;doprnt.c: 1384: width = 0;
 13618  00146C  0E00               	movlw	0
 13619  00146E  0100               	movlb	0	; () banked
 13620  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13621  001472  0E00               	movlw	0
 13622  001474  6FA9               	movwf	printf@width& (0+255),b
 13623  001476                     l5356:
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;doprnt.c: 1387: if(flag & 0x04) {
 13627  001476  0100               	movlb	0	; () banked
 13628  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13629  00147A  D018               	goto	l5368
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;doprnt.c: 1392: if(flag & 0x03)
 13633  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13634  001480  0E03               	movlw	3
 13635  001482  0100               	movlb	0	; () banked
 13636  001484  179A               	andwf	??_printf& (0+255),f,b
 13637  001486  B4D8               	btfsc	status,2,c
 13638  001488  D003               	goto	l5362
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;doprnt.c: 1393: (putch('-') );
 13642  00148A  0E2D               	movlw	45
 13643  00148C  ECF1  F021         	call	_putch
 13644  001490                     l5362:
 13645                           
 13646                           ;doprnt.c: 1415: if(width)
 13647  001490  0100               	movlb	0	; () banked
 13648  001492  51A9               	movf	printf@width& (0+255),w,b
 13649  001494  0100               	movlb	0	; () banked
 13650  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13651  001498  B4D8               	btfsc	status,2,c
 13652  00149A  D025               	goto	l5378
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;doprnt.c: 1417: (putch('0') );
 13656                           
 13657                           ; BSR set to: 0
 13658                           
 13659                           ;doprnt.c: 1416: do
 13660  00149C  0E30               	movlw	48
 13661  00149E  ECF1  F021         	call	_putch
 13662                           
 13663                           ;doprnt.c: 1418: while(--width);
 13664  0014A2  0100               	movlb	0	; () banked
 13665  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13666  0014A6  A0D8               	btfss	status,0,c
 13667  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13668  0014AA  D7F2               	goto	l5362
 13669  0014AC                     l5368:
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;doprnt.c: 1422: {
 13673                           ;doprnt.c: 1424: if(width
 13674                           ;doprnt.c: 1428: )
 13675  0014AC  0100               	movlb	0	; () banked
 13676  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13677  0014B0  0100               	movlb	0	; () banked
 13678  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13679  0014B4  B4D8               	btfsc	status,2,c
 13680  0014B6  D00D               	goto	l5374
 13681  0014B8                     l5370:
 13682                           
 13683                           ; BSR set to: 0
 13684                           ;doprnt.c: 1430: (putch(' ') );
 13685  0014B8  0E20               	movlw	32
 13686  0014BA  ECF1  F021         	call	_putch
 13687                           
 13688                           ;doprnt.c: 1431: while(--width);
 13689  0014BE  0100               	movlb	0	; () banked
 13690  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13691  0014C2  A0D8               	btfss	status,0,c
 13692  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13693  0014C6  0100               	movlb	0	; () banked
 13694  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13695  0014CA  0100               	movlb	0	; () banked
 13696  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13697  0014CE  A4D8               	btfss	status,2,c
 13698  0014D0  D7F3               	goto	l5370
 13699  0014D2                     l5374:
 13700                           
 13701                           ; BSR set to: 0
 13702                           ;doprnt.c: 1438: if(flag & 0x03)
 13703  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13704  0014D6  0E03               	movlw	3
 13705  0014D8  0100               	movlb	0	; () banked
 13706  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13707  0014DC  B4D8               	btfsc	status,2,c
 13708  0014DE  D003               	goto	l5378
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;doprnt.c: 1439: (putch('-') );
 13712  0014E0  0E2D               	movlw	45
 13713  0014E2  ECF1  F021         	call	_putch
 13714  0014E6                     l5378:
 13715                           
 13716                           ;doprnt.c: 1469: }
 13717                           ;doprnt.c: 1472: prec = c;
 13718  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13719                           
 13720                           ;doprnt.c: 1474: while(prec--) {
 13721  0014EA  D02C               	goto	l5384
 13722  0014EC                     l5380:
 13723                           
 13724                           ;doprnt.c: 1478: {
 13725                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13726  0014EC  0100               	movlb	0	; () banked
 13727  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13728  0014F0  0D02               	mullw	2
 13729  0014F2  0E4A               	movlw	low _dpowers
 13730  0014F4  24F3               	addwf	prodl,w,c
 13731  0014F6  6EF6               	movwf	tblptrl,c
 13732  0014F8  0EFB               	movlw	high _dpowers
 13733  0014FA  20F4               	addwfc	prodh,w,c
 13734  0014FC  6EF7               	movwf	tblptrh,c
 13735  0014FE                     	if	1	;There are 3 active tblptr bytes
 13736  0014FE  6AF8               	clrf	tblptru,c
 13737  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13738  001502  22F8               	addwfc	tblptru,f,c
 13739  001504                     	endif
 13740  001504  0009               	tblrd		*+
 13741  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13742  00150A  000A               	tblrd		*-
 13743  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13744  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13745  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13746  001518  EC17  F01C         	call	___lwdiv	;wreg free
 13747  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13748  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13749  001524  0E00               	movlw	0
 13750  001526  0100               	movlb	0	; () banked
 13751  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13752  00152A  0E0A               	movlw	10
 13753  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13754  00152E  EC2F  F01D         	call	___lwmod	;wreg free
 13755  001532  0100               	movlb	0	; () banked
 13756  001534  5187               	movf	?___lwmod& (0+255),w,b
 13757  001536  0F30               	addlw	48
 13758  001538  0100               	movlb	0	; () banked
 13759  00153A  6FA8               	movwf	printf@c& (0+255),b
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;doprnt.c: 1523: }
 13763                           ;doprnt.c: 1524: (putch(c) );
 13764  00153C  0100               	movlb	0	; () banked
 13765  00153E  51A8               	movf	printf@c& (0+255),w,b
 13766  001540  ECF1  F021         	call	_putch
 13767  001544                     l5384:
 13768  001544  0100               	movlb	0	; () banked
 13769  001546  079E               	decf	printf@prec& (0+255),f,b
 13770  001548  0100               	movlb	0	; () banked
 13771  00154A  299E               	incf	printf@prec& (0+255),w,b
 13772  00154C  A4D8               	btfss	status,2,c
 13773  00154E  D7CE               	goto	l5380
 13774  001550                     l5386:
 13775  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13776  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13777  001558  0100               	movlb	0	; () banked
 13778  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13779  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13780  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13781  00155E  6AF8               	clrf	tblptru,c
 13782  001560                     	endif
 13783  001560                     	if	0	;tblptru may be non-zero
 13784  001560                     	endif
 13785  001560  0008               	tblrd		*
 13786  001562  CFF5 F0A8          	movff	tablat,printf@c
 13787  001566  0100               	movlb	0	; () banked
 13788  001568  51A8               	movf	printf@c& (0+255),w,b
 13789  00156A  B4D8               	btfsc	status,2,c
 13790  00156C  0012               	return	
 13791  00156E  D5EB               	goto	l5256
 13792  001570                     __end_of_printf:
 13793                           	opt stack 0
 13794                           tblptru	equ	0xFF8
 13795                           tblptrh	equ	0xFF7
 13796                           tblptrl	equ	0xFF6
 13797                           tablat	equ	0xFF5
 13798                           prodh	equ	0xFF4
 13799                           prodl	equ	0xFF3
 13800                           intcon	equ	0xFF2
 13801                           intcon2	equ	0xFF1
 13802                           intcon3	equ	0xFF0
 13803                           indf0	equ	0xFEF
 13804                           postinc0	equ	0xFEE
 13805                           fsr0h	equ	0xFEA
 13806                           fsr0l	equ	0xFE9
 13807                           wreg	equ	0xFE8
 13808                           postdec1	equ	0xFE5
 13809                           fsr1l	equ	0xFE1
 13810                           indf2	equ	0xFDF
 13811                           postinc2	equ	0xFDE
 13812                           postdec2	equ	0xFDD
 13813                           fsr2h	equ	0xFDA
 13814                           fsr2l	equ	0xFD9
 13815                           status	equ	0xFD8
 13816                           
 13817 ;; *************** function _putch *****************
 13818 ;; Defined at:
 13819 ;;		line 20 in file "lcd.c"
 13820 ;; Parameters:    Size  Location     Type
 13821 ;;  data            1    wreg     unsigned char 
 13822 ;; Auto vars:     Size  Location     Type
 13823 ;;  data            1    2[BANK0 ] unsigned char 
 13824 ;; Return value:  Size  Location     Type
 13825 ;;                  1    wreg      void 
 13826 ;; Registers used:
 13827 ;;		wreg, status,2, status,0, cstack
 13828 ;; Tracked objects:
 13829 ;;		On entry : 0/0
 13830 ;;		On exit  : 0/0
 13831 ;;		Unchanged: 0/0
 13832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13837 ;;Total ram usage:        1 bytes
 13838 ;; Hardware stack levels used:    1
 13839 ;; Hardware stack levels required when called:    8
 13840 ;; This function calls:
 13841 ;;		_lcdNibble
 13842 ;; This function is called by:
 13843 ;;		_printf
 13844 ;; This function uses a non-reentrant model
 13845 ;;
 13846                           
 13847                           	psect	text48
 13848  0043E2                     __ptext48:
 13849                           	opt stack 0
 13850  0043E2                     _putch:
 13851                           	opt stack 18
 13852                           
 13853                           ;incstack = 0
 13854                           ;putch@data stored from wreg
 13855  0043E2  0100               	movlb	0	; () banked
 13856  0043E4  6F82               	movwf	putch@data& (0+255),b
 13857                           
 13858                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13859  0043E6  848C               	bsf	3980,2,c	;volatile
 13860                           
 13861                           ;lcd.c: 22: lcdNibble(data);
 13862  0043E8  0100               	movlb	0	; () banked
 13863  0043EA  5182               	movf	putch@data& (0+255),w,b
 13864  0043EC  ECFB  F01C         	call	_lcdNibble
 13865  0043F0  0012               	return		;funcret
 13866  0043F2                     __end_of_putch:
 13867                           	opt stack 0
 13868                           tblptru	equ	0xFF8
 13869                           tblptrh	equ	0xFF7
 13870                           tblptrl	equ	0xFF6
 13871                           tablat	equ	0xFF5
 13872                           prodh	equ	0xFF4
 13873                           prodl	equ	0xFF3
 13874                           intcon	equ	0xFF2
 13875                           intcon2	equ	0xFF1
 13876                           intcon3	equ	0xFF0
 13877                           indf0	equ	0xFEF
 13878                           postinc0	equ	0xFEE
 13879                           fsr0h	equ	0xFEA
 13880                           fsr0l	equ	0xFE9
 13881                           wreg	equ	0xFE8
 13882                           postdec1	equ	0xFE5
 13883                           fsr1l	equ	0xFE1
 13884                           indf2	equ	0xFDF
 13885                           postinc2	equ	0xFDE
 13886                           postdec2	equ	0xFDD
 13887                           fsr2h	equ	0xFDA
 13888                           fsr2l	equ	0xFD9
 13889                           status	equ	0xFD8
 13890                           
 13891 ;; *************** function _isdigit *****************
 13892 ;; Defined at:
 13893 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;  c               1    wreg     unsigned char 
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  c               1    2[BANK0 ] unsigned char 
 13898 ;; Return value:  Size  Location     Type
 13899 ;;		None               void
 13900 ;; Registers used:
 13901 ;;		wreg, status,2, status,0
 13902 ;; Tracked objects:
 13903 ;;		On entry : 0/0
 13904 ;;		On exit  : 0/0
 13905 ;;		Unchanged: 0/0
 13906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13910 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13911 ;;Total ram usage:        3 bytes
 13912 ;; Hardware stack levels used:    1
 13913 ;; Hardware stack levels required when called:    7
 13914 ;; This function calls:
 13915 ;;		Nothing
 13916 ;; This function is called by:
 13917 ;;		_printf
 13918 ;; This function uses a non-reentrant model
 13919 ;;
 13920                           
 13921                           	psect	text49
 13922  004208                     __ptext49:
 13923                           	opt stack 0
 13924  004208                     _isdigit:
 13925                           	opt stack 19
 13926                           
 13927                           ;incstack = 0
 13928                           ;isdigit@c stored from wreg
 13929  004208  0100               	movlb	0	; () banked
 13930  00420A  6F82               	movwf	isdigit@c& (0+255),b
 13931  00420C  0E00               	movlw	0
 13932  00420E  0100               	movlb	0	; () banked
 13933  004210  6F81               	movwf	_isdigit$1881& (0+255),b
 13934                           
 13935                           ; BSR set to: 0
 13936  004212  0E3A               	movlw	58
 13937  004214  0100               	movlb	0	; () banked
 13938  004216  6182               	cpfslt	isdigit@c& (0+255),b
 13939  004218  D007               	goto	l5110
 13940                           
 13941                           ; BSR set to: 0
 13942  00421A  0E2F               	movlw	47
 13943  00421C  0100               	movlb	0	; () banked
 13944  00421E  6582               	cpfsgt	isdigit@c& (0+255),b
 13945  004220  D003               	goto	l5110
 13946                           
 13947                           ; BSR set to: 0
 13948  004222  0E01               	movlw	1
 13949  004224  0100               	movlb	0	; () banked
 13950  004226  6F81               	movwf	_isdigit$1881& (0+255),b
 13951  004228                     l5110:
 13952                           
 13953                           ; BSR set to: 0
 13954  004228  C081  F080         	movff	_isdigit$1881,??_isdigit
 13955  00422C  0100               	movlb	0	; () banked
 13956  00422E  3180               	rrcf	??_isdigit& (0+255),w,b
 13957  004230  0012               	return	
 13958  004232                     __end_of_isdigit:
 13959                           	opt stack 0
 13960                           tblptru	equ	0xFF8
 13961                           tblptrh	equ	0xFF7
 13962                           tblptrl	equ	0xFF6
 13963                           tablat	equ	0xFF5
 13964                           prodh	equ	0xFF4
 13965                           prodl	equ	0xFF3
 13966                           intcon	equ	0xFF2
 13967                           intcon2	equ	0xFF1
 13968                           intcon3	equ	0xFF0
 13969                           indf0	equ	0xFEF
 13970                           postinc0	equ	0xFEE
 13971                           fsr0h	equ	0xFEA
 13972                           fsr0l	equ	0xFE9
 13973                           wreg	equ	0xFE8
 13974                           postdec1	equ	0xFE5
 13975                           fsr1l	equ	0xFE1
 13976                           indf2	equ	0xFDF
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           fsr2h	equ	0xFDA
 13980                           fsr2l	equ	0xFD9
 13981                           status	equ	0xFD8
 13982                           
 13983 ;; *************** function ___wmul *****************
 13984 ;; Defined at:
 13985 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13988 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  product         2    4[BANK0 ] unsigned int 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  2    0[BANK0 ] unsigned int 
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, status,0, prodl, prodh
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14003 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14004 ;;Total ram usage:        6 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    7
 14007 ;; This function calls:
 14008 ;;		Nothing
 14009 ;; This function is called by:
 14010 ;;		_printf
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text50
 14015  003F3C                     __ptext50:
 14016                           	opt stack 0
 14017  003F3C                     ___wmul:
 14018                           	opt stack 19
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;incstack = 0
 14022  003F3C  0100               	movlb	0	; () banked
 14023  003F3E  5180               	movf	___wmul@multiplier& (0+255),w,b
 14024  003F40  0100               	movlb	0	; () banked
 14025  003F42  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14026  003F44  CFF3 F084          	movff	prodl,___wmul@product
 14027  003F48  CFF4 F085          	movff	prodh,___wmul@product+1
 14028  003F4C  0100               	movlb	0	; () banked
 14029  003F4E  5180               	movf	___wmul@multiplier& (0+255),w,b
 14030  003F50  0100               	movlb	0	; () banked
 14031  003F52  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14032  003F54  50F3               	movf	prodl,w,c
 14033  003F56  0100               	movlb	0	; () banked
 14034  003F58  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14035  003F5A  0100               	movlb	0	; () banked
 14036  003F5C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14037  003F5E  0100               	movlb	0	; () banked
 14038  003F60  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14039  003F62  50F3               	movf	prodl,w,c
 14040  003F64  0100               	movlb	0	; () banked
 14041  003F66  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14042                           
 14043                           ; BSR set to: 0
 14044  003F68  C084  F080         	movff	___wmul@product,?___wmul
 14045  003F6C  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14046  003F70  0012               	return	
 14047  003F72                     __end_of___wmul:
 14048                           	opt stack 0
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           intcon2	equ	0xFF1
 14057                           intcon3	equ	0xFF0
 14058                           indf0	equ	0xFEF
 14059                           postinc0	equ	0xFEE
 14060                           fsr0h	equ	0xFEA
 14061                           fsr0l	equ	0xFE9
 14062                           wreg	equ	0xFE8
 14063                           postdec1	equ	0xFE5
 14064                           fsr1l	equ	0xFE1
 14065                           indf2	equ	0xFDF
 14066                           postinc2	equ	0xFDE
 14067                           postdec2	equ	0xFDD
 14068                           fsr2h	equ	0xFDA
 14069                           fsr2l	equ	0xFD9
 14070                           status	equ	0xFD8
 14071                           
 14072 ;; *************** function ___lwmod *****************
 14073 ;; Defined at:
 14074 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14075 ;; Parameters:    Size  Location     Type
 14076 ;;  dividend        2    7[BANK0 ] unsigned int 
 14077 ;;  divisor         2    9[BANK0 ] unsigned int 
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;  counter         1   11[BANK0 ] unsigned char 
 14080 ;; Return value:  Size  Location     Type
 14081 ;;                  2    7[BANK0 ] unsigned int 
 14082 ;; Registers used:
 14083 ;;		wreg, status,2, status,0
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/0
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14089 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14093 ;;Total ram usage:        5 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    7
 14096 ;; This function calls:
 14097 ;;		Nothing
 14098 ;; This function is called by:
 14099 ;;		_printf
 14100 ;; This function uses a non-reentrant model
 14101 ;;
 14102                           
 14103                           	psect	text51
 14104  003A5E                     __ptext51:
 14105                           	opt stack 0
 14106  003A5E                     ___lwmod:
 14107                           	opt stack 19
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;incstack = 0
 14111  003A5E  0100               	movlb	0	; () banked
 14112  003A60  5189               	movf	___lwmod@divisor& (0+255),w,b
 14113  003A62  0100               	movlb	0	; () banked
 14114  003A64  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14115  003A66  B4D8               	btfsc	status,2,c
 14116  003A68  D026               	goto	l1681
 14117                           
 14118                           ; BSR set to: 0
 14119  003A6A  0E01               	movlw	1
 14120  003A6C  0100               	movlb	0	; () banked
 14121  003A6E  6F8B               	movwf	___lwmod@counter& (0+255),b
 14122  003A70  D006               	goto	l5148
 14123  003A72                     l5146:
 14124                           
 14125                           ; BSR set to: 0
 14126  003A72  0100               	movlb	0	; () banked
 14127  003A74  90D8               	bcf	status,0,c
 14128  003A76  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14129  003A78  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14130  003A7A  0100               	movlb	0	; () banked
 14131  003A7C  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14132  003A7E                     l5148:
 14133                           
 14134                           ; BSR set to: 0
 14135  003A7E  0100               	movlb	0	; () banked
 14136  003A80  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14137  003A82  D7F7               	goto	l5146
 14138  003A84                     l5150:
 14139                           
 14140                           ; BSR set to: 0
 14141  003A84  0100               	movlb	0	; () banked
 14142  003A86  5189               	movf	___lwmod@divisor& (0+255),w,b
 14143  003A88  0100               	movlb	0	; () banked
 14144  003A8A  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14145  003A8C  0100               	movlb	0	; () banked
 14146  003A8E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14147  003A90  0100               	movlb	0	; () banked
 14148  003A92  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14149  003A94  A0D8               	btfss	status,0,c
 14150  003A96  D008               	goto	l5154
 14151                           
 14152                           ; BSR set to: 0
 14153  003A98  0100               	movlb	0	; () banked
 14154  003A9A  5189               	movf	___lwmod@divisor& (0+255),w,b
 14155  003A9C  0100               	movlb	0	; () banked
 14156  003A9E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14157  003AA0  0100               	movlb	0	; () banked
 14158  003AA2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14159  003AA4  0100               	movlb	0	; () banked
 14160  003AA6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14161  003AA8                     l5154:
 14162                           
 14163                           ; BSR set to: 0
 14164  003AA8  0100               	movlb	0	; () banked
 14165  003AAA  90D8               	bcf	status,0,c
 14166  003AAC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14167  003AAE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14168                           
 14169                           ; BSR set to: 0
 14170  003AB0  0100               	movlb	0	; () banked
 14171  003AB2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14172  003AB4  D7E7               	goto	l5150
 14173  003AB6                     l1681:
 14174                           
 14175                           ; BSR set to: 0
 14176  003AB6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14177  003ABA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14178                           
 14179                           ; BSR set to: 0
 14180  003ABE  0012               	return		;funcret
 14181  003AC0                     __end_of___lwmod:
 14182                           	opt stack 0
 14183                           tblptru	equ	0xFF8
 14184                           tblptrh	equ	0xFF7
 14185                           tblptrl	equ	0xFF6
 14186                           tablat	equ	0xFF5
 14187                           prodh	equ	0xFF4
 14188                           prodl	equ	0xFF3
 14189                           intcon	equ	0xFF2
 14190                           intcon2	equ	0xFF1
 14191                           intcon3	equ	0xFF0
 14192                           indf0	equ	0xFEF
 14193                           postinc0	equ	0xFEE
 14194                           fsr0h	equ	0xFEA
 14195                           fsr0l	equ	0xFE9
 14196                           wreg	equ	0xFE8
 14197                           postdec1	equ	0xFE5
 14198                           fsr1l	equ	0xFE1
 14199                           indf2	equ	0xFDF
 14200                           postinc2	equ	0xFDE
 14201                           postdec2	equ	0xFDD
 14202                           fsr2h	equ	0xFDA
 14203                           fsr2l	equ	0xFD9
 14204                           status	equ	0xFD8
 14205                           
 14206 ;; *************** function ___lwdiv *****************
 14207 ;; Defined at:
 14208 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14209 ;; Parameters:    Size  Location     Type
 14210 ;;  dividend        2    0[BANK0 ] unsigned int 
 14211 ;;  divisor         2    2[BANK0 ] unsigned int 
 14212 ;; Auto vars:     Size  Location     Type
 14213 ;;  quotient        2    4[BANK0 ] unsigned int 
 14214 ;;  counter         1    6[BANK0 ] unsigned char 
 14215 ;; Return value:  Size  Location     Type
 14216 ;;                  2    0[BANK0 ] unsigned int 
 14217 ;; Registers used:
 14218 ;;		wreg, status,2, status,0
 14219 ;; Tracked objects:
 14220 ;;		On entry : 0/0
 14221 ;;		On exit  : 0/0
 14222 ;;		Unchanged: 0/0
 14223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14224 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14225 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14227 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;Total ram usage:        7 bytes
 14229 ;; Hardware stack levels used:    1
 14230 ;; Hardware stack levels required when called:    7
 14231 ;; This function calls:
 14232 ;;		Nothing
 14233 ;; This function is called by:
 14234 ;;		_printf
 14235 ;; This function uses a non-reentrant model
 14236 ;;
 14237                           
 14238                           	psect	text52
 14239  00382E                     __ptext52:
 14240                           	opt stack 0
 14241  00382E                     ___lwdiv:
 14242                           	opt stack 19
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;incstack = 0
 14246  00382E  0E00               	movlw	0
 14247  003830  0100               	movlb	0	; () banked
 14248  003832  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14249  003834  0E00               	movlw	0
 14250  003836  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14251                           
 14252                           ; BSR set to: 0
 14253  003838  0100               	movlb	0	; () banked
 14254  00383A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14255  00383C  0100               	movlb	0	; () banked
 14256  00383E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14257  003840  B4D8               	btfsc	status,2,c
 14258  003842  D02C               	goto	l1671
 14259                           
 14260                           ; BSR set to: 0
 14261  003844  0E01               	movlw	1
 14262  003846  0100               	movlb	0	; () banked
 14263  003848  6F86               	movwf	___lwdiv@counter& (0+255),b
 14264  00384A  D006               	goto	l5128
 14265  00384C                     l5126:
 14266                           
 14267                           ; BSR set to: 0
 14268  00384C  0100               	movlb	0	; () banked
 14269  00384E  90D8               	bcf	status,0,c
 14270  003850  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14271  003852  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14272  003854  0100               	movlb	0	; () banked
 14273  003856  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14274  003858                     l5128:
 14275                           
 14276                           ; BSR set to: 0
 14277  003858  0100               	movlb	0	; () banked
 14278  00385A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14279  00385C  D7F7               	goto	l5126
 14280  00385E                     l5130:
 14281                           
 14282                           ; BSR set to: 0
 14283  00385E  0100               	movlb	0	; () banked
 14284  003860  90D8               	bcf	status,0,c
 14285  003862  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14286  003864  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14287                           
 14288                           ; BSR set to: 0
 14289  003866  0100               	movlb	0	; () banked
 14290  003868  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14291  00386A  0100               	movlb	0	; () banked
 14292  00386C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14293  00386E  0100               	movlb	0	; () banked
 14294  003870  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14295  003872  0100               	movlb	0	; () banked
 14296  003874  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14297  003876  A0D8               	btfss	status,0,c
 14298  003878  D00A               	goto	l5138
 14299                           
 14300                           ; BSR set to: 0
 14301  00387A  0100               	movlb	0	; () banked
 14302  00387C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14303  00387E  0100               	movlb	0	; () banked
 14304  003880  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14305  003882  0100               	movlb	0	; () banked
 14306  003884  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14307  003886  0100               	movlb	0	; () banked
 14308  003888  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14309                           
 14310                           ; BSR set to: 0
 14311  00388A  0100               	movlb	0	; () banked
 14312  00388C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14313  00388E                     l5138:
 14314                           
 14315                           ; BSR set to: 0
 14316  00388E  0100               	movlb	0	; () banked
 14317  003890  90D8               	bcf	status,0,c
 14318  003892  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14319  003894  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14320                           
 14321                           ; BSR set to: 0
 14322  003896  0100               	movlb	0	; () banked
 14323  003898  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14324  00389A  D7E1               	goto	l5130
 14325  00389C                     l1671:
 14326                           
 14327                           ; BSR set to: 0
 14328  00389C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14329  0038A0  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14330                           
 14331                           ; BSR set to: 0
 14332  0038A4  0012               	return		;funcret
 14333  0038A6                     __end_of___lwdiv:
 14334                           	opt stack 0
 14335                           tblptru	equ	0xFF8
 14336                           tblptrh	equ	0xFF7
 14337                           tblptrl	equ	0xFF6
 14338                           tablat	equ	0xFF5
 14339                           prodh	equ	0xFF4
 14340                           prodl	equ	0xFF3
 14341                           intcon	equ	0xFF2
 14342                           intcon2	equ	0xFF1
 14343                           intcon3	equ	0xFF0
 14344                           indf0	equ	0xFEF
 14345                           postinc0	equ	0xFEE
 14346                           fsr0h	equ	0xFEA
 14347                           fsr0l	equ	0xFE9
 14348                           wreg	equ	0xFE8
 14349                           postdec1	equ	0xFE5
 14350                           fsr1l	equ	0xFE1
 14351                           indf2	equ	0xFDF
 14352                           postinc2	equ	0xFDE
 14353                           postdec2	equ	0xFDD
 14354                           fsr2h	equ	0xFDA
 14355                           fsr2l	equ	0xFD9
 14356                           status	equ	0xFD8
 14357                           
 14358 ;; *************** function _lcdInst *****************
 14359 ;; Defined at:
 14360 ;;		line 15 in file "lcd.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;  data            1    wreg     unsigned char 
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;  data            1    2[BANK0 ] unsigned char 
 14365 ;; Return value:  Size  Location     Type
 14366 ;;                  1    wreg      void 
 14367 ;; Registers used:
 14368 ;;		wreg, status,2, status,0, cstack
 14369 ;; Tracked objects:
 14370 ;;		On entry : 0/0
 14371 ;;		On exit  : 0/0
 14372 ;;		Unchanged: 0/0
 14373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;Total ram usage:        1 bytes
 14379 ;; Hardware stack levels used:    1
 14380 ;; Hardware stack levels required when called:    8
 14381 ;; This function calls:
 14382 ;;		_lcdNibble
 14383 ;; This function is called by:
 14384 ;;		_UI
 14385 ;;		_change_state_to_menu_start
 14386 ;;		_change_state_to_menu_12
 14387 ;;		_change_state_to_menu_22
 14388 ;;		_initLCD
 14389 ;;		_printRTC
 14390 ;;		_Loading
 14391 ;;		_EEPROM_write
 14392 ;;		_Test
 14393 ;;		_algorithmTest
 14394 ;;		_sensorTest
 14395 ;;		_actuatorTest
 14396 ;;		_PortTestA5
 14397 ;;		_SolenoidTestA5
 14398 ;;		_ToggleTestA5
 14399 ;; This function uses a non-reentrant model
 14400 ;;
 14401                           
 14402                           	psect	text53
 14403  0043F2                     __ptext53:
 14404                           	opt stack 0
 14405  0043F2                     _lcdInst:
 14406                           	opt stack 20
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;incstack = 0
 14410                           ;lcdInst@data stored from wreg
 14411  0043F2  0100               	movlb	0	; () banked
 14412  0043F4  6F82               	movwf	lcdInst@data& (0+255),b
 14413                           
 14414                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14415  0043F6  948C               	bcf	3980,2,c	;volatile
 14416                           
 14417                           ;lcd.c: 17: lcdNibble(data);
 14418  0043F8  0100               	movlb	0	; () banked
 14419  0043FA  5182               	movf	lcdInst@data& (0+255),w,b
 14420  0043FC  ECFB  F01C         	call	_lcdNibble
 14421  004400  0012               	return		;funcret
 14422  004402                     __end_of_lcdInst:
 14423                           	opt stack 0
 14424                           tblptru	equ	0xFF8
 14425                           tblptrh	equ	0xFF7
 14426                           tblptrl	equ	0xFF6
 14427                           tablat	equ	0xFF5
 14428                           prodh	equ	0xFF4
 14429                           prodl	equ	0xFF3
 14430                           intcon	equ	0xFF2
 14431                           intcon2	equ	0xFF1
 14432                           intcon3	equ	0xFF0
 14433                           indf0	equ	0xFEF
 14434                           postinc0	equ	0xFEE
 14435                           fsr0h	equ	0xFEA
 14436                           fsr0l	equ	0xFE9
 14437                           wreg	equ	0xFE8
 14438                           postdec1	equ	0xFE5
 14439                           fsr1l	equ	0xFE1
 14440                           indf2	equ	0xFDF
 14441                           postinc2	equ	0xFDE
 14442                           postdec2	equ	0xFDD
 14443                           fsr2h	equ	0xFDA
 14444                           fsr2l	equ	0xFD9
 14445                           status	equ	0xFD8
 14446                           
 14447 ;; *************** function _lcdNibble *****************
 14448 ;; Defined at:
 14449 ;;		line 25 in file "lcd.c"
 14450 ;; Parameters:    Size  Location     Type
 14451 ;;  data            1    wreg     unsigned char 
 14452 ;; Auto vars:     Size  Location     Type
 14453 ;;  data            1    1[BANK0 ] unsigned char 
 14454 ;;  temp            1    0[BANK0 ] unsigned char 
 14455 ;; Return value:  Size  Location     Type
 14456 ;;                  1    wreg      void 
 14457 ;; Registers used:
 14458 ;;		wreg, status,2, status,0
 14459 ;; Tracked objects:
 14460 ;;		On entry : 0/0
 14461 ;;		On exit  : 0/0
 14462 ;;		Unchanged: 0/0
 14463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14468 ;;Total ram usage:        2 bytes
 14469 ;; Hardware stack levels used:    1
 14470 ;; Hardware stack levels required when called:    7
 14471 ;; This function calls:
 14472 ;;		Nothing
 14473 ;; This function is called by:
 14474 ;;		_lcdInst
 14475 ;;		_putch
 14476 ;; This function uses a non-reentrant model
 14477 ;;
 14478                           
 14479                           	psect	text54
 14480  0039F6                     __ptext54:
 14481                           	opt stack 0
 14482  0039F6                     _lcdNibble:
 14483                           	opt stack 20
 14484                           
 14485                           ;incstack = 0
 14486                           ;lcdNibble@data stored from wreg
 14487  0039F6  0100               	movlb	0	; () banked
 14488  0039F8  6F81               	movwf	lcdNibble@data& (0+255),b
 14489                           
 14490                           ;lcd.c: 27: char temp = data & 0xF0;
 14491  0039FA  0100               	movlb	0	; () banked
 14492  0039FC  5181               	movf	lcdNibble@data& (0+255),w,b
 14493  0039FE  0BF0               	andlw	240
 14494  003A00  0100               	movlb	0	; () banked
 14495  003A02  6F80               	movwf	lcdNibble@temp& (0+255),b
 14496                           
 14497                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14498  003A04  508C               	movf	3980,w,c	;volatile
 14499  003A06  0B0F               	andlw	15
 14500  003A08  6E8C               	movwf	3980,c	;volatile
 14501                           
 14502                           ;lcd.c: 29: LATD = temp | LATD;
 14503  003A0A  0100               	movlb	0	; () banked
 14504  003A0C  5180               	movf	lcdNibble@temp& (0+255),w,b
 14505  003A0E  108C               	iorwf	3980,w,c	;volatile
 14506  003A10  6E8C               	movwf	3980,c	;volatile
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14510  003A12  868C               	bsf	3980,3,c	;volatile
 14511                           
 14512                           ; BSR set to: 0
 14513                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14514  003A14  0E42               	movlw	66
 14515  003A16                     u7837:
 14516  003A16  2EE8               	decfsz	wreg,f,c
 14517  003A18  D7FE               	bra	u7837
 14518  003A1A  D000               	nop2	
 14519                           
 14520                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14521  003A1C  968C               	bcf	3980,3,c	;volatile
 14522                           
 14523                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14524  003A1E  0E42               	movlw	66
 14525  003A20                     u7847:
 14526  003A20  2EE8               	decfsz	wreg,f,c
 14527  003A22  D7FE               	bra	u7847
 14528  003A24  D000               	nop2	
 14529                           
 14530                           ;lcd.c: 36: data = data << 4;
 14531  003A26  0100               	movlb	0	; () banked
 14532  003A28  3981               	swapf	lcdNibble@data& (0+255),w,b
 14533  003A2A  0BF0               	andlw	240
 14534  003A2C  0100               	movlb	0	; () banked
 14535  003A2E  6F81               	movwf	lcdNibble@data& (0+255),b
 14536                           
 14537                           ;lcd.c: 38: temp = data & 0xF0;
 14538  003A30  0100               	movlb	0	; () banked
 14539  003A32  5181               	movf	lcdNibble@data& (0+255),w,b
 14540  003A34  0BF0               	andlw	240
 14541  003A36  0100               	movlb	0	; () banked
 14542  003A38  6F80               	movwf	lcdNibble@temp& (0+255),b
 14543                           
 14544                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14545  003A3A  508C               	movf	3980,w,c	;volatile
 14546  003A3C  0B0F               	andlw	15
 14547  003A3E  6E8C               	movwf	3980,c	;volatile
 14548                           
 14549                           ;lcd.c: 40: LATD = temp | LATD;
 14550  003A40  0100               	movlb	0	; () banked
 14551  003A42  5180               	movf	lcdNibble@temp& (0+255),w,b
 14552  003A44  108C               	iorwf	3980,w,c	;volatile
 14553  003A46  6E8C               	movwf	3980,c	;volatile
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14557  003A48  868C               	bsf	3980,3,c	;volatile
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14561  003A4A  0E42               	movlw	66
 14562  003A4C                     u7857:
 14563  003A4C  2EE8               	decfsz	wreg,f,c
 14564  003A4E  D7FE               	bra	u7857
 14565  003A50  D000               	nop2	
 14566                           
 14567                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14568  003A52  968C               	bcf	3980,3,c	;volatile
 14569                           
 14570                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14571  003A54  0E42               	movlw	66
 14572  003A56                     u7867:
 14573  003A56  2EE8               	decfsz	wreg,f,c
 14574  003A58  D7FE               	bra	u7867
 14575  003A5A  D000               	nop2	
 14576  003A5C  0012               	return		;funcret
 14577  003A5E                     __end_of_lcdNibble:
 14578                           	opt stack 0
 14579                           tblptru	equ	0xFF8
 14580                           tblptrh	equ	0xFF7
 14581                           tblptrl	equ	0xFF6
 14582                           tablat	equ	0xFF5
 14583                           prodh	equ	0xFF4
 14584                           prodl	equ	0xFF3
 14585                           intcon	equ	0xFF2
 14586                           intcon2	equ	0xFF1
 14587                           intcon3	equ	0xFF0
 14588                           indf0	equ	0xFEF
 14589                           postinc0	equ	0xFEE
 14590                           fsr0h	equ	0xFEA
 14591                           fsr0l	equ	0xFE9
 14592                           wreg	equ	0xFE8
 14593                           postdec1	equ	0xFE5
 14594                           fsr1l	equ	0xFE1
 14595                           indf2	equ	0xFDF
 14596                           postinc2	equ	0xFDE
 14597                           postdec2	equ	0xFDD
 14598                           fsr2h	equ	0xFDA
 14599                           fsr2l	equ	0xFD9
 14600                           status	equ	0xFD8
 14601                           
 14602 ;; *************** function _EEPROMTest *****************
 14603 ;; Defined at:
 14604 ;;		line 427 in file "Test.c"
 14605 ;; Parameters:    Size  Location     Type
 14606 ;;		None
 14607 ;; Auto vars:     Size  Location     Type
 14608 ;;		None
 14609 ;; Return value:  Size  Location     Type
 14610 ;;                  1    wreg      void 
 14611 ;; Registers used:
 14612 ;;		None
 14613 ;; Tracked objects:
 14614 ;;		On entry : 0/0
 14615 ;;		On exit  : 0/0
 14616 ;;		Unchanged: 0/0
 14617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14622 ;;Total ram usage:        0 bytes
 14623 ;; Hardware stack levels used:    1
 14624 ;; Hardware stack levels required when called:    7
 14625 ;; This function calls:
 14626 ;;		Nothing
 14627 ;; This function is called by:
 14628 ;;		_Test
 14629 ;; This function uses a non-reentrant model
 14630 ;;
 14631                           
 14632                           	psect	text55
 14633  004456                     __ptext55:
 14634                           	opt stack 0
 14635  004456                     _EEPROMTest:
 14636                           	opt stack 22
 14637                           
 14638                           ;incstack = 0
 14639  004456  0012               	return		;funcret
 14640  004458                     __end_of_EEPROMTest:
 14641                           	opt stack 0
 14642                           tblptru	equ	0xFF8
 14643                           tblptrh	equ	0xFF7
 14644                           tblptrl	equ	0xFF6
 14645                           tablat	equ	0xFF5
 14646                           prodh	equ	0xFF4
 14647                           prodl	equ	0xFF3
 14648                           intcon	equ	0xFF2
 14649                           intcon2	equ	0xFF1
 14650                           intcon3	equ	0xFF0
 14651                           indf0	equ	0xFEF
 14652                           postinc0	equ	0xFEE
 14653                           fsr0h	equ	0xFEA
 14654                           fsr0l	equ	0xFE9
 14655                           wreg	equ	0xFE8
 14656                           postdec1	equ	0xFE5
 14657                           fsr1l	equ	0xFE1
 14658                           indf2	equ	0xFDF
 14659                           postinc2	equ	0xFDE
 14660                           postdec2	equ	0xFDD
 14661                           fsr2h	equ	0xFDA
 14662                           fsr2l	equ	0xFD9
 14663                           status	equ	0xFD8
 14664                           
 14665 ;; *************** function _handler *****************
 14666 ;; Defined at:
 14667 ;;		line 16 in file "interruptHandler.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;		None
 14670 ;; Auto vars:     Size  Location     Type
 14671 ;;		None
 14672 ;; Return value:  Size  Location     Type
 14673 ;;                  1    wreg      void 
 14674 ;; Registers used:
 14675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14676 ;; Tracked objects:
 14677 ;;		On entry : 0/0
 14678 ;;		On exit  : 0/0
 14679 ;;		Unchanged: 0/0
 14680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14683 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14684 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14685 ;;Total ram usage:       16 bytes
 14686 ;; Hardware stack levels used:    1
 14687 ;; Hardware stack levels required when called:    6
 14688 ;; This function calls:
 14689 ;;		_printSortTimer
 14690 ;;		_updateMenu
 14691 ;; This function is called by:
 14692 ;;		Interrupt level 2
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696                           	psect	intcode
 14697  000008                     __pintcode:
 14698                           	opt stack 0
 14699  000008                     _handler:
 14700                           	opt stack 18
 14701                           
 14702                           ;incstack = 0
 14703  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14704  00000A  ED6B  F014         	call	int_func,f	;refresh shadow registers
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           intcon3	equ	0xFF0
 14714                           indf0	equ	0xFEF
 14715                           postinc0	equ	0xFEE
 14716                           fsr0h	equ	0xFEA
 14717                           fsr0l	equ	0xFE9
 14718                           wreg	equ	0xFE8
 14719                           postdec1	equ	0xFE5
 14720                           fsr1l	equ	0xFE1
 14721                           indf2	equ	0xFDF
 14722                           postinc2	equ	0xFDE
 14723                           postdec2	equ	0xFDD
 14724                           fsr2h	equ	0xFDA
 14725                           fsr2l	equ	0xFD9
 14726                           status	equ	0xFD8
 14727                           
 14728                           	psect	intcode_body
 14729  0028D6                     __pintcode_body:
 14730                           	opt stack 18
 14731  0028D6                     int_func:
 14732                           	opt stack 18
 14733  0028D6  0006               	pop		; remove dummy address from shadow register refresh
 14734  0028D8  CFFA F04D          	movff	pclath,??_handler+2
 14735  0028DC  CFFB F04E          	movff	pclatu,??_handler+3
 14736  0028E0  CFE9 F04F          	movff	fsr0l,??_handler+4
 14737  0028E4  CFEA F050          	movff	fsr0h,??_handler+5
 14738  0028E8  CFE1 F051          	movff	fsr1l,??_handler+6
 14739  0028EC  CFE2 F052          	movff	fsr1h,??_handler+7
 14740  0028F0  CFD9 F053          	movff	fsr2l,??_handler+8
 14741  0028F4  CFDA F054          	movff	fsr2h,??_handler+9
 14742  0028F8  CFF3 F055          	movff	prodl,??_handler+10
 14743  0028FC  CFF4 F056          	movff	prodh,??_handler+11
 14744  002900  CFF6 F057          	movff	tblptrl,??_handler+12
 14745  002904  CFF7 F058          	movff	tblptrh,??_handler+13
 14746  002908  CFF8 F059          	movff	tblptru,??_handler+14
 14747  00290C  CFF5 F05A          	movff	tablat,??_handler+15
 14748                           
 14749                           ;interruptHandler.c: 18: if(INT1IF){
 14750  002910  A0F0               	btfss	intcon3,0,c	;volatile
 14751  002912  D020               	goto	i2l7836
 14752                           
 14753                           ;interruptHandler.c: 19: INT1IF = 0;
 14754  002914  90F0               	bcf	intcon3,0,c	;volatile
 14755                           
 14756                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 14757  002916  0100               	movlb	0	; () banked
 14758  002918  51FC               	movf	_machine_state& (0+255),w,b
 14759  00291A  A4D8               	btfss	status,2,c
 14760  00291C  D01B               	goto	i2l7836
 14761                           
 14762                           ; BSR set to: 0
 14763                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 14764  00291E  3881               	swapf	3969,w,c	;volatile
 14765  002920  0B0F               	andlw	15
 14766  002922  0B0F               	andlw	15
 14767  002924  6E4B               	movwf	??_handler& (0+255),c
 14768  002926  6A4C               	clrf	(??_handler+1)& (0+255),c
 14769  002928  0E39               	movlw	low _keys
 14770  00292A  244B               	addwf	??_handler,w,c
 14771  00292C  6EF6               	movwf	tblptrl,c
 14772  00292E  0EFB               	movlw	high _keys
 14773  002930  204C               	addwfc	??_handler+1,w,c
 14774  002932  6EF7               	movwf	tblptrh,c
 14775  002934                     	if	1	;There are 3 active tblptr bytes
 14776  002934  6AF8               	clrf	tblptru,c
 14777  002936  0E00               	movlw	low (__mediumconst shr (0+16))
 14778  002938  22F8               	addwfc	tblptru,f,c
 14779  00293A                     	endif
 14780  00293A  0008               	tblrd		*
 14781  00293C  CFF5 F07D          	movff	tablat,_input	;volatile
 14782                           
 14783                           ; BSR set to: 0
 14784                           ;interruptHandler.c: 23: if(input == '*'){
 14785  002940  0E2A               	movlw	42
 14786  002942  187D               	xorwf	_input,w,c	;volatile
 14787  002944  A4D8               	btfss	status,2,c
 14788  002946  D004               	goto	i2l7834
 14789                           
 14790                           ; BSR set to: 0
 14791                           ;interruptHandler.c: 24: machine_state = Testing_state;
 14792  002948  0E03               	movlw	3
 14793  00294A  0100               	movlb	0	; () banked
 14794  00294C  6FFC               	movwf	_machine_state& (0+255),b
 14795                           
 14796                           ;interruptHandler.c: 25: }
 14797  00294E  D002               	goto	i2l7836
 14798  002950                     i2l7834:
 14799                           
 14800                           ; BSR set to: 0
 14801                           ;interruptHandler.c: 26: else{
 14802                           ;interruptHandler.c: 27: updateMenu();
 14803  002950  EC3C  F00F         	call	_updateMenu	;wreg free
 14804  002954                     i2l7836:
 14805                           
 14806                           ;interruptHandler.c: 28: }
 14807                           ;interruptHandler.c: 29: }
 14808                           ;interruptHandler.c: 30: }
 14809                           ;interruptHandler.c: 33: if(TMR0IF){
 14810  002954  A4F2               	btfss	intcon,2,c	;volatile
 14811  002956  D00C               	goto	i2l7850
 14812                           
 14813                           ;interruptHandler.c: 34: TMR0IF = 0;
 14814  002958  94F2               	bcf	intcon,2,c	;volatile
 14815                           
 14816                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 14817  00295A  0100               	movlb	0	; () banked
 14818  00295C  05FC               	decf	_machine_state& (0+255),w,b
 14819  00295E  A4D8               	btfss	status,2,c
 14820  002960  D007               	goto	i2l7850
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;interruptHandler.c: 36: printSortTimer();
 14824  002962  ECB7  F011         	call	_printSortTimer	;wreg free
 14825                           
 14826                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 14827  002966  0E85               	movlw	133
 14828  002968  6ED7               	movwf	4055,c	;volatile
 14829                           
 14830                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 14831  00296A  0EEE               	movlw	238
 14832  00296C  6ED6               	movwf	4054,c	;volatile
 14833                           
 14834                           ;interruptHandler.c: 40: TMR0ON = 1;
 14835  00296E  8ED5               	bsf	4053,7,c	;volatile
 14836  002970                     i2l7850:
 14837                           
 14838                           ;interruptHandler.c: 41: }
 14839                           ;interruptHandler.c: 42: }
 14840                           ;interruptHandler.c: 45: if(TMR1IF){
 14841  002970  A09E               	btfss	3998,0,c	;volatile
 14842  002972  D024               	goto	i2l7874
 14843                           
 14844                           ;interruptHandler.c: 46: TMR1IF = 0;
 14845  002974  909E               	bcf	3998,0,c	;volatile
 14846                           
 14847                           ;interruptHandler.c: 47: TMR1ON = 0;
 14848  002976  90CD               	bcf	4045,0,c	;volatile
 14849                           
 14850                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 14851  002978  0100               	movlb	0	; () banked
 14852  00297A  05FC               	decf	_machine_state& (0+255),w,b
 14853  00297C  A4D8               	btfss	status,2,c
 14854  00297E  D01E               	goto	i2l7874
 14855                           
 14856                           ; BSR set to: 0
 14857                           ;interruptHandler.c: 49: if(was_low_1){
 14858  002980  5079               	movf	_was_low_1,w,c	;volatile
 14859  002982  107A               	iorwf	_was_low_1+1,w,c	;volatile
 14860  002984  B4D8               	btfsc	status,2,c
 14861  002986  D00A               	goto	i2l844
 14862                           
 14863                           ; BSR set to: 0
 14864                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 14865  002988  828B               	bsf	3979,1,c	;volatile
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;interruptHandler.c: 51: was_low_1 = 0;
 14869  00298A  0E00               	movlw	0
 14870  00298C  6E7A               	movwf	_was_low_1+1,c	;volatile
 14871  00298E  0E00               	movlw	0
 14872  002990  6E79               	movwf	_was_low_1,c	;volatile
 14873                           
 14874                           ; BSR set to: 0
 14875                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 14876  002992  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 14877                           
 14878                           ; BSR set to: 0
 14879                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 14880  002996  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 14881                           
 14882                           ;interruptHandler.c: 54: }
 14883  00299A  D00F               	goto	i2l7872
 14884  00299C                     i2l844:
 14885                           
 14886                           ; BSR set to: 0
 14887                           ;interruptHandler.c: 55: else{
 14888                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 14889  00299C  928B               	bcf	3979,1,c	;volatile
 14890                           
 14891                           ; BSR set to: 0
 14892                           ;interruptHandler.c: 57: was_low_1 = 1;
 14893  00299E  0E00               	movlw	0
 14894  0029A0  6E7A               	movwf	_was_low_1+1,c	;volatile
 14895  0029A2  0E01               	movlw	1
 14896  0029A4  6E79               	movwf	_was_low_1,c	;volatile
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 14900  0029A6  0101               	movlb	1	; () banked
 14901  0029A8  511C               	movf	_servoTimes& (0+255),w,b
 14902  0029AA  0800               	sublw	0
 14903  0029AC  0F20               	addlw	32
 14904  0029AE  6ECF               	movwf	4047,c	;volatile
 14905                           
 14906                           ; BSR set to: 1
 14907                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 14908  0029B0  0101               	movlb	1	; () banked
 14909  0029B2  511E               	movf	(_servoTimes+2)& (0+255),w,b
 14910  0029B4  0800               	sublw	0
 14911  0029B6  0F20               	addlw	32
 14912  0029B8  6ECE               	movwf	4046,c	;volatile
 14913  0029BA                     i2l7872:
 14914                           
 14915                           ;interruptHandler.c: 60: }
 14916                           ;interruptHandler.c: 61: TMR1ON = 1;
 14917  0029BA  80CD               	bsf	4045,0,c	;volatile
 14918  0029BC                     i2l7874:
 14919                           
 14920                           ;interruptHandler.c: 62: }
 14921                           ;interruptHandler.c: 63: }
 14922                           ;interruptHandler.c: 65: if(TMR3IF){
 14923  0029BC  A2A1               	btfss	4001,1,c	;volatile
 14924  0029BE  D024               	goto	i2l850
 14925                           
 14926                           ;interruptHandler.c: 66: TMR3IF = 0;
 14927  0029C0  92A1               	bcf	4001,1,c	;volatile
 14928                           
 14929                           ;interruptHandler.c: 67: TMR3ON = 0;
 14930  0029C2  90B1               	bcf	4017,0,c	;volatile
 14931                           
 14932                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 14933  0029C4  0100               	movlb	0	; () banked
 14934  0029C6  05FC               	decf	_machine_state& (0+255),w,b
 14935  0029C8  A4D8               	btfss	status,2,c
 14936  0029CA  D01E               	goto	i2l850
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;interruptHandler.c: 69: if(was_low_3){
 14940  0029CC  507B               	movf	_was_low_3,w,c	;volatile
 14941  0029CE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 14942  0029D0  B4D8               	btfsc	status,2,c
 14943  0029D2  D00A               	goto	i2l848
 14944                           
 14945                           ; BSR set to: 0
 14946                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 14947  0029D4  848B               	bsf	3979,2,c	;volatile
 14948                           
 14949                           ; BSR set to: 0
 14950                           ;interruptHandler.c: 71: was_low_3 = 0;
 14951  0029D6  0E00               	movlw	0
 14952  0029D8  6E7C               	movwf	_was_low_3+1,c	;volatile
 14953  0029DA  0E00               	movlw	0
 14954  0029DC  6E7B               	movwf	_was_low_3,c	;volatile
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 14958  0029DE  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 14959                           
 14960                           ; BSR set to: 0
 14961                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 14962  0029E2  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 14963                           
 14964                           ;interruptHandler.c: 74: }
 14965  0029E6  D00F               	goto	i2l7896
 14966  0029E8                     i2l848:
 14967                           
 14968                           ; BSR set to: 0
 14969                           ;interruptHandler.c: 75: else{
 14970                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 14971  0029E8  948B               	bcf	3979,2,c	;volatile
 14972                           
 14973                           ; BSR set to: 0
 14974                           ;interruptHandler.c: 77: was_low_3 = 1;
 14975  0029EA  0E00               	movlw	0
 14976  0029EC  6E7C               	movwf	_was_low_3+1,c	;volatile
 14977  0029EE  0E01               	movlw	1
 14978  0029F0  6E7B               	movwf	_was_low_3,c	;volatile
 14979                           
 14980                           ; BSR set to: 0
 14981                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 14982  0029F2  0101               	movlb	1	; () banked
 14983  0029F4  5120               	movf	(_servoTimes+4)& (0+255),w,b
 14984  0029F6  0800               	sublw	0
 14985  0029F8  0F20               	addlw	32
 14986  0029FA  6EB3               	movwf	4019,c	;volatile
 14987                           
 14988                           ; BSR set to: 1
 14989                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 14990  0029FC  0101               	movlb	1	; () banked
 14991  0029FE  5122               	movf	(_servoTimes+6)& (0+255),w,b
 14992  002A00  0800               	sublw	0
 14993  002A02  0F20               	addlw	32
 14994  002A04  6EB2               	movwf	4018,c	;volatile
 14995  002A06                     i2l7896:
 14996                           
 14997                           ;interruptHandler.c: 80: }
 14998                           ;interruptHandler.c: 81: TMR3ON = 1;
 14999  002A06  80B1               	bsf	4017,0,c	;volatile
 15000  002A08                     i2l850:
 15001  002A08  C05A  FFF5         	movff	??_handler+15,tablat
 15002  002A0C  C059  FFF8         	movff	??_handler+14,tblptru
 15003  002A10  C058  FFF7         	movff	??_handler+13,tblptrh
 15004  002A14  C057  FFF6         	movff	??_handler+12,tblptrl
 15005  002A18  C056  FFF4         	movff	??_handler+11,prodh
 15006  002A1C  C055  FFF3         	movff	??_handler+10,prodl
 15007  002A20  C054  FFDA         	movff	??_handler+9,fsr2h
 15008  002A24  C053  FFD9         	movff	??_handler+8,fsr2l
 15009  002A28  C052  FFE2         	movff	??_handler+7,fsr1h
 15010  002A2C  C051  FFE1         	movff	??_handler+6,fsr1l
 15011  002A30  C050  FFEA         	movff	??_handler+5,fsr0h
 15012  002A34  C04F  FFE9         	movff	??_handler+4,fsr0l
 15013  002A38  C04E  FFFB         	movff	??_handler+3,pclatu
 15014  002A3C  C04D  FFFA         	movff	??_handler+2,pclath
 15015  002A40  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15016  002A42  0011               	retfie		f
 15017  002A44                     __end_of_handler:
 15018                           	opt stack 0
 15019                           pclatu	equ	0xFFB
 15020                           pclath	equ	0xFFA
 15021                           tblptru	equ	0xFF8
 15022                           tblptrh	equ	0xFF7
 15023                           tblptrl	equ	0xFF6
 15024                           tablat	equ	0xFF5
 15025                           prodh	equ	0xFF4
 15026                           prodl	equ	0xFF3
 15027                           intcon	equ	0xFF2
 15028                           intcon2	equ	0xFF1
 15029                           intcon3	equ	0xFF0
 15030                           indf0	equ	0xFEF
 15031                           postinc0	equ	0xFEE
 15032                           fsr0h	equ	0xFEA
 15033                           fsr0l	equ	0xFE9
 15034                           wreg	equ	0xFE8
 15035                           postdec1	equ	0xFE5
 15036                           fsr1h	equ	0xFE2
 15037                           fsr1l	equ	0xFE1
 15038                           indf2	equ	0xFDF
 15039                           postinc2	equ	0xFDE
 15040                           postdec2	equ	0xFDD
 15041                           fsr2h	equ	0xFDA
 15042                           fsr2l	equ	0xFD9
 15043                           status	equ	0xFD8
 15044                           
 15045 ;; *************** function _updateMenu *****************
 15046 ;; Defined at:
 15047 ;;		line 211 in file "UI.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;		None
 15050 ;; Auto vars:     Size  Location     Type
 15051 ;;		None
 15052 ;; Return value:  Size  Location     Type
 15053 ;;                  1    wreg      void 
 15054 ;; Registers used:
 15055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15056 ;; Tracked objects:
 15057 ;;		On entry : 0/0
 15058 ;;		On exit  : 0/0
 15059 ;;		Unchanged: 0/0
 15060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15065 ;;Total ram usage:        2 bytes
 15066 ;; Hardware stack levels used:    1
 15067 ;; Hardware stack levels required when called:    5
 15068 ;; This function calls:
 15069 ;;		_change_state_to_logs_11
 15070 ;;		_change_state_to_logs_12
 15071 ;;		_change_state_to_logs_22
 15072 ;;		_change_state_to_logs_23
 15073 ;;		_change_state_to_logs_33
 15074 ;;		_change_state_to_logs_34
 15075 ;;		_change_state_to_menu_11
 15076 ;;		_change_state_to_menu_23
 15077 ;;		_dispLogs
 15078 ;;		_inputHandler
 15079 ;;		i2_change_state_to_menu_12
 15080 ;;		i2_change_state_to_menu_22
 15081 ;;		i2_change_state_to_menu_start
 15082 ;; This function is called by:
 15083 ;;		_handler
 15084 ;; This function uses a non-reentrant model
 15085 ;;
 15086                           
 15087                           	psect	text57
 15088  001E78                     __ptext57:
 15089                           	opt stack 0
 15090  001E78                     _updateMenu:
 15091                           	opt stack 18
 15092                           
 15093                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15094                           
 15095                           ;incstack = 0
 15096  001E78  0E00               	movlw	0
 15097  001E7A  6E78               	movwf	_up+1,c
 15098  001E7C  0E00               	movlw	0
 15099  001E7E  6E77               	movwf	_up,c
 15100  001E80  0E00               	movlw	0
 15101  001E82  6E68               	movwf	_down+1,c
 15102  001E84  0E00               	movlw	0
 15103  001E86  6E67               	movwf	_down,c
 15104  001E88  0E00               	movlw	0
 15105  001E8A  6E6A               	movwf	_enter+1,c
 15106  001E8C  0E00               	movlw	0
 15107  001E8E  6E69               	movwf	_enter,c
 15108  001E90  0E00               	movlw	0
 15109  001E92  6E5C               	movwf	_back+1,c
 15110  001E94  0E00               	movlw	0
 15111  001E96  6E5B               	movwf	_back,c
 15112                           
 15113                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15114  001E98  9EF2               	bcf	intcon,7,c	;volatile
 15115                           
 15116                           ;UI.c: 215: if (inputHandler()
 15117                           ;UI.c: 218: ){
 15118  001E9A  ECB0  F012         	call	_inputHandler	;wreg free
 15119  001E9E  502A               	movf	?_inputHandler,w,c
 15120  001EA0  102B               	iorwf	?_inputHandler+1,w,c
 15121  001EA2  A4D8               	btfss	status,2,c
 15122  001EA4  D112               	goto	i2l7578
 15123  001EA6  D146               	goto	i2l254
 15124  001EA8                     i2l7430:
 15125                           
 15126                           ;UI.c: 222: change_state_to_menu_11();
 15127  001EA8  EC1A  F020         	call	_change_state_to_menu_11	;wreg free
 15128                           
 15129                           ;UI.c: 223: break;
 15130  001EAC  D143               	goto	i2l254
 15131  001EAE                     i2l7432:
 15132                           
 15133                           ;UI.c: 226: if(up){
 15134  001EAE  5077               	movf	_up,w,c
 15135  001EB0  1078               	iorwf	_up+1,w,c
 15136  001EB2  B4D8               	btfsc	status,2,c
 15137  001EB4  D003               	goto	i2l7436
 15138                           
 15139                           ;UI.c: 227: change_state_to_menu_23();
 15140  001EB6  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15141                           
 15142                           ;UI.c: 228: }
 15143  001EBA  D13C               	goto	i2l254
 15144  001EBC                     i2l7436:
 15145                           
 15146                           ;UI.c: 229: else if(down){
 15147  001EBC  5067               	movf	_down,w,c
 15148  001EBE  1068               	iorwf	_down+1,w,c
 15149  001EC0  B4D8               	btfsc	status,2,c
 15150  001EC2  D003               	goto	i2l7440
 15151                           
 15152                           ;UI.c: 230: change_state_to_menu_12();
 15153  001EC4  ECEA  F01F         	call	i2_change_state_to_menu_12	;wreg free
 15154                           
 15155                           ;UI.c: 231: }
 15156  001EC8  D135               	goto	i2l254
 15157  001ECA                     i2l7440:
 15158                           
 15159                           ;UI.c: 232: else if(enter){
 15160  001ECA  5069               	movf	_enter,w,c
 15161  001ECC  106A               	iorwf	_enter+1,w,c
 15162  001ECE  B4D8               	btfsc	status,2,c
 15163  001ED0  D131               	goto	i2l254
 15164                           
 15165                           ;UI.c: 233: change_state_to_menu_start();
 15166  001ED2  EC2D  F021         	call	i2_change_state_to_menu_start	;wreg free
 15167                           
 15168                           ;UI.c: 234: }
 15169                           ;UI.c: 235: break;
 15170  001ED6  D12E               	goto	i2l254
 15171  001ED8                     i2l7444:
 15172                           
 15173                           ;UI.c: 238: if(up){
 15174  001ED8  5077               	movf	_up,w,c
 15175  001EDA  1078               	iorwf	_up+1,w,c
 15176  001EDC  B4D8               	btfsc	status,2,c
 15177  001EDE  D003               	goto	i2l7448
 15178                           
 15179                           ;UI.c: 239: change_state_to_menu_11();
 15180  001EE0  EC1A  F020         	call	_change_state_to_menu_11	;wreg free
 15181                           
 15182                           ;UI.c: 240: }
 15183  001EE4  D127               	goto	i2l254
 15184  001EE6                     i2l7448:
 15185                           
 15186                           ;UI.c: 241: else if(down){
 15187  001EE6  5067               	movf	_down,w,c
 15188  001EE8  1068               	iorwf	_down+1,w,c
 15189  001EEA  B4D8               	btfsc	status,2,c
 15190  001EEC  D011               	goto	i2l7464
 15191                           
 15192                           ;UI.c: 242: change_state_to_menu_23();
 15193  001EEE  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15194                           
 15195                           ;UI.c: 243: }
 15196  001EF2  D120               	goto	i2l254
 15197  001EF4                     i2l7456:
 15198                           
 15199                           ;UI.c: 250: if(up){
 15200  001EF4  5077               	movf	_up,w,c
 15201  001EF6  1078               	iorwf	_up+1,w,c
 15202  001EF8  B4D8               	btfsc	status,2,c
 15203  001EFA  D003               	goto	i2l7460
 15204                           
 15205                           ;UI.c: 251: change_state_to_menu_11();
 15206  001EFC  EC1A  F020         	call	_change_state_to_menu_11	;wreg free
 15207                           
 15208                           ;UI.c: 252: }
 15209  001F00  D119               	goto	i2l254
 15210  001F02                     i2l7460:
 15211                           
 15212                           ;UI.c: 253: else if(down){
 15213  001F02  5067               	movf	_down,w,c
 15214  001F04  1068               	iorwf	_down+1,w,c
 15215  001F06  B4D8               	btfsc	status,2,c
 15216  001F08  D003               	goto	i2l7464
 15217                           
 15218                           ;UI.c: 254: change_state_to_menu_23();
 15219  001F0A  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15220                           
 15221                           ;UI.c: 255: }
 15222  001F0E  D112               	goto	i2l254
 15223  001F10                     i2l7464:
 15224                           
 15225                           ;UI.c: 256: else if(enter){
 15226  001F10  5069               	movf	_enter,w,c
 15227  001F12  106A               	iorwf	_enter+1,w,c
 15228  001F14  B4D8               	btfsc	status,2,c
 15229  001F16  D10E               	goto	i2l254
 15230                           
 15231                           ;UI.c: 257: machine_state = Sorting_state;
 15232  001F18  0E01               	movlw	1
 15233  001F1A  0100               	movlb	0	; () banked
 15234  001F1C  6FFC               	movwf	_machine_state& (0+255),b
 15235                           
 15236                           ; BSR set to: 0
 15237                           ;UI.c: 258: }
 15238                           ;UI.c: 259: break;
 15239                           
 15240                           ; BSR set to: 0
 15241                           
 15242                           ; BSR set to: 0
 15243  001F1E  D10A               	goto	i2l254
 15244  001F20                     i2l7468:
 15245                           
 15246                           ;UI.c: 262: if(up){
 15247  001F20  5077               	movf	_up,w,c
 15248  001F22  1078               	iorwf	_up+1,w,c
 15249  001F24  B4D8               	btfsc	status,2,c
 15250  001F26  D003               	goto	i2l7472
 15251                           
 15252                           ;UI.c: 263: change_state_to_menu_22();
 15253  001F28  ECD2  F01F         	call	i2_change_state_to_menu_22	;wreg free
 15254                           
 15255                           ;UI.c: 264: }
 15256  001F2C  D103               	goto	i2l254
 15257  001F2E                     i2l7472:
 15258                           
 15259                           ;UI.c: 265: else if(down){
 15260  001F2E  5067               	movf	_down,w,c
 15261  001F30  1068               	iorwf	_down+1,w,c
 15262  001F32  B4D8               	btfsc	status,2,c
 15263  001F34  D003               	goto	i2l7476
 15264                           
 15265                           ;UI.c: 266: change_state_to_menu_11();
 15266  001F36  EC1A  F020         	call	_change_state_to_menu_11	;wreg free
 15267                           
 15268                           ;UI.c: 267: }
 15269  001F3A  D0FC               	goto	i2l254
 15270  001F3C                     i2l7476:
 15271                           
 15272                           ;UI.c: 268: else if(enter){
 15273  001F3C  5069               	movf	_enter,w,c
 15274  001F3E  106A               	iorwf	_enter+1,w,c
 15275  001F40  B4D8               	btfsc	status,2,c
 15276  001F42  D0F8               	goto	i2l254
 15277                           
 15278                           ;UI.c: 269: change_state_to_logs_11();
 15279  001F44  EC92  F020         	call	_change_state_to_logs_11	;wreg free
 15280                           
 15281                           ;UI.c: 270: }
 15282                           ;UI.c: 271: break;
 15283  001F48  D0F5               	goto	i2l254
 15284  001F4A                     i2l7480:
 15285                           
 15286                           ;UI.c: 274: if(up){
 15287  001F4A  5077               	movf	_up,w,c
 15288  001F4C  1078               	iorwf	_up+1,w,c
 15289  001F4E  B4D8               	btfsc	status,2,c
 15290  001F50  D003               	goto	i2l7484
 15291                           
 15292                           ;UI.c: 275: change_state_to_logs_34();
 15293  001F52  EC32  F020         	call	_change_state_to_logs_34	;wreg free
 15294                           
 15295                           ;UI.c: 276: }
 15296  001F56  D0EE               	goto	i2l254
 15297  001F58                     i2l7484:
 15298                           
 15299                           ;UI.c: 277: else if(down){
 15300  001F58  5067               	movf	_down,w,c
 15301  001F5A  1068               	iorwf	_down+1,w,c
 15302  001F5C  B4D8               	btfsc	status,2,c
 15303  001F5E  D003               	goto	i2l7488
 15304                           
 15305                           ;UI.c: 278: change_state_to_logs_12();
 15306  001F60  EC7A  F020         	call	_change_state_to_logs_12	;wreg free
 15307                           
 15308                           ;UI.c: 279: }
 15309  001F64  D0E7               	goto	i2l254
 15310  001F66                     i2l7488:
 15311                           
 15312                           ;UI.c: 280: else if(enter){
 15313  001F66  5069               	movf	_enter,w,c
 15314  001F68  106A               	iorwf	_enter+1,w,c
 15315  001F6A  B4D8               	btfsc	status,2,c
 15316  001F6C  D007               	goto	i2l7492
 15317                           
 15318                           ;UI.c: 281: dispLogs(1);
 15319  001F6E  0E00               	movlw	0
 15320  001F70  6E13               	movwf	dispLogs@myLog+1,c
 15321  001F72  0E01               	movlw	1
 15322  001F74  6E12               	movwf	dispLogs@myLog,c
 15323  001F76  EC79  F021         	call	_dispLogs	;wreg free
 15324                           
 15325                           ;UI.c: 282: }
 15326  001F7A  D0DC               	goto	i2l254
 15327  001F7C                     i2l7492:
 15328                           
 15329                           ;UI.c: 283: else if(back){
 15330  001F7C  505B               	movf	_back,w,c
 15331  001F7E  105C               	iorwf	_back+1,w,c
 15332  001F80  B4D8               	btfsc	status,2,c
 15333  001F82  D0D8               	goto	i2l254
 15334                           
 15335                           ;UI.c: 284: change_state_to_menu_23();
 15336  001F84  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15337                           
 15338                           ;UI.c: 285: }
 15339                           ;UI.c: 286: break;
 15340  001F88  D0D5               	goto	i2l254
 15341  001F8A                     i2l7496:
 15342                           
 15343                           ;UI.c: 289: if(up){
 15344  001F8A  5077               	movf	_up,w,c
 15345  001F8C  1078               	iorwf	_up+1,w,c
 15346  001F8E  B4D8               	btfsc	status,2,c
 15347  001F90  D003               	goto	i2l7500
 15348                           
 15349                           ;UI.c: 290: change_state_to_logs_11();
 15350  001F92  EC92  F020         	call	_change_state_to_logs_11	;wreg free
 15351                           
 15352                           ;UI.c: 291: }
 15353  001F96  D0CE               	goto	i2l254
 15354  001F98                     i2l7500:
 15355                           
 15356                           ;UI.c: 292: else if(down){
 15357  001F98  5067               	movf	_down,w,c
 15358  001F9A  1068               	iorwf	_down+1,w,c
 15359  001F9C  B4D8               	btfsc	status,2,c
 15360  001F9E  D003               	goto	i2l7504
 15361                           
 15362                           ;UI.c: 293: change_state_to_logs_23();
 15363  001FA0  ECC1  F020         	call	_change_state_to_logs_23	;wreg free
 15364                           
 15365                           ;UI.c: 294: }
 15366  001FA4  D0C7               	goto	i2l254
 15367  001FA6                     i2l7504:
 15368                           
 15369                           ;UI.c: 295: else if(enter){
 15370  001FA6  5069               	movf	_enter,w,c
 15371  001FA8  106A               	iorwf	_enter+1,w,c
 15372  001FAA  B4D8               	btfsc	status,2,c
 15373  001FAC  D007               	goto	i2l7508
 15374                           
 15375                           ;UI.c: 296: dispLogs(2);
 15376  001FAE  0E00               	movlw	0
 15377  001FB0  6E13               	movwf	dispLogs@myLog+1,c
 15378  001FB2  0E02               	movlw	2
 15379  001FB4  6E12               	movwf	dispLogs@myLog,c
 15380  001FB6  EC79  F021         	call	_dispLogs	;wreg free
 15381                           
 15382                           ;UI.c: 297: }
 15383  001FBA  D0BC               	goto	i2l254
 15384  001FBC                     i2l7508:
 15385                           
 15386                           ;UI.c: 298: else if(back){
 15387  001FBC  505B               	movf	_back,w,c
 15388  001FBE  105C               	iorwf	_back+1,w,c
 15389  001FC0  B4D8               	btfsc	status,2,c
 15390  001FC2  D0B8               	goto	i2l254
 15391                           
 15392                           ;UI.c: 299: change_state_to_menu_23();
 15393  001FC4  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15394                           
 15395                           ;UI.c: 300: }
 15396                           ;UI.c: 301: break;
 15397  001FC8  D0B5               	goto	i2l254
 15398  001FCA                     i2l7512:
 15399                           
 15400                           ;UI.c: 304: if(up){
 15401  001FCA  5077               	movf	_up,w,c
 15402  001FCC  1078               	iorwf	_up+1,w,c
 15403  001FCE  B4D8               	btfsc	status,2,c
 15404  001FD0  D003               	goto	i2l7516
 15405                           
 15406                           ;UI.c: 305: change_state_to_logs_11();
 15407  001FD2  EC92  F020         	call	_change_state_to_logs_11	;wreg free
 15408                           
 15409                           ;UI.c: 306: }
 15410  001FD6  D0AE               	goto	i2l254
 15411  001FD8                     i2l7516:
 15412                           
 15413                           ;UI.c: 307: else if(down){
 15414  001FD8  5067               	movf	_down,w,c
 15415  001FDA  1068               	iorwf	_down+1,w,c
 15416  001FDC  B4D8               	btfsc	status,2,c
 15417  001FDE  D003               	goto	i2l7520
 15418                           
 15419                           ;UI.c: 308: change_state_to_logs_23();
 15420  001FE0  ECC1  F020         	call	_change_state_to_logs_23	;wreg free
 15421                           
 15422                           ;UI.c: 309: }
 15423  001FE4  D0A7               	goto	i2l254
 15424  001FE6                     i2l7520:
 15425                           
 15426                           ;UI.c: 310: else if(enter){
 15427  001FE6  5069               	movf	_enter,w,c
 15428  001FE8  106A               	iorwf	_enter+1,w,c
 15429  001FEA  B4D8               	btfsc	status,2,c
 15430  001FEC  D007               	goto	i2l7524
 15431                           
 15432                           ;UI.c: 311: dispLogs(2);
 15433  001FEE  0E00               	movlw	0
 15434  001FF0  6E13               	movwf	dispLogs@myLog+1,c
 15435  001FF2  0E02               	movlw	2
 15436  001FF4  6E12               	movwf	dispLogs@myLog,c
 15437  001FF6  EC79  F021         	call	_dispLogs	;wreg free
 15438                           
 15439                           ;UI.c: 312: }
 15440  001FFA  D09C               	goto	i2l254
 15441  001FFC                     i2l7524:
 15442                           
 15443                           ;UI.c: 313: else if(back){
 15444  001FFC  505B               	movf	_back,w,c
 15445  001FFE  105C               	iorwf	_back+1,w,c
 15446  002000  B4D8               	btfsc	status,2,c
 15447  002002  D098               	goto	i2l254
 15448                           
 15449                           ;UI.c: 314: change_state_to_menu_23();
 15450  002004  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15451                           
 15452                           ;UI.c: 315: }
 15453                           ;UI.c: 316: break;
 15454  002008  D095               	goto	i2l254
 15455  00200A                     i2l7528:
 15456                           
 15457                           ;UI.c: 319: if(up){
 15458  00200A  5077               	movf	_up,w,c
 15459  00200C  1078               	iorwf	_up+1,w,c
 15460  00200E  B4D8               	btfsc	status,2,c
 15461  002010  D003               	goto	i2l7532
 15462                           
 15463                           ;UI.c: 320: change_state_to_logs_22();
 15464  002012  EC62  F020         	call	_change_state_to_logs_22	;wreg free
 15465                           
 15466                           ;UI.c: 321: }
 15467  002016  D08E               	goto	i2l254
 15468  002018                     i2l7532:
 15469                           
 15470                           ;UI.c: 322: else if(down){
 15471  002018  5067               	movf	_down,w,c
 15472  00201A  1068               	iorwf	_down+1,w,c
 15473  00201C  B4D8               	btfsc	status,2,c
 15474  00201E  D003               	goto	i2l7536
 15475                           
 15476                           ;UI.c: 323: change_state_to_logs_34();
 15477  002020  EC32  F020         	call	_change_state_to_logs_34	;wreg free
 15478                           
 15479                           ;UI.c: 324: }
 15480  002024  D087               	goto	i2l254
 15481  002026                     i2l7536:
 15482                           
 15483                           ;UI.c: 325: else if(enter){
 15484  002026  5069               	movf	_enter,w,c
 15485  002028  106A               	iorwf	_enter+1,w,c
 15486  00202A  B4D8               	btfsc	status,2,c
 15487  00202C  D007               	goto	i2l7540
 15488                           
 15489                           ;UI.c: 326: dispLogs(3);
 15490  00202E  0E00               	movlw	0
 15491  002030  6E13               	movwf	dispLogs@myLog+1,c
 15492  002032  0E03               	movlw	3
 15493  002034  6E12               	movwf	dispLogs@myLog,c
 15494  002036  EC79  F021         	call	_dispLogs	;wreg free
 15495                           
 15496                           ;UI.c: 327: }
 15497  00203A  D07C               	goto	i2l254
 15498  00203C                     i2l7540:
 15499                           
 15500                           ;UI.c: 328: else if(back){
 15501  00203C  505B               	movf	_back,w,c
 15502  00203E  105C               	iorwf	_back+1,w,c
 15503  002040  B4D8               	btfsc	status,2,c
 15504  002042  D078               	goto	i2l254
 15505                           
 15506                           ;UI.c: 329: change_state_to_menu_23();
 15507  002044  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15508                           
 15509                           ;UI.c: 330: }
 15510                           ;UI.c: 331: break;
 15511  002048  D075               	goto	i2l254
 15512  00204A                     i2l7544:
 15513                           
 15514                           ;UI.c: 334: if(up){
 15515  00204A  5077               	movf	_up,w,c
 15516  00204C  1078               	iorwf	_up+1,w,c
 15517  00204E  B4D8               	btfsc	status,2,c
 15518  002050  D003               	goto	i2l7548
 15519                           
 15520                           ;UI.c: 335: change_state_to_logs_22();
 15521  002052  EC62  F020         	call	_change_state_to_logs_22	;wreg free
 15522                           
 15523                           ;UI.c: 336: }
 15524  002056  D06E               	goto	i2l254
 15525  002058                     i2l7548:
 15526                           
 15527                           ;UI.c: 337: else if(down){
 15528  002058  5067               	movf	_down,w,c
 15529  00205A  1068               	iorwf	_down+1,w,c
 15530  00205C  B4D8               	btfsc	status,2,c
 15531  00205E  D003               	goto	i2l7552
 15532                           
 15533                           ;UI.c: 338: change_state_to_logs_34();
 15534  002060  EC32  F020         	call	_change_state_to_logs_34	;wreg free
 15535                           
 15536                           ;UI.c: 339: }
 15537  002064  D067               	goto	i2l254
 15538  002066                     i2l7552:
 15539                           
 15540                           ;UI.c: 340: else if(enter){
 15541  002066  5069               	movf	_enter,w,c
 15542  002068  106A               	iorwf	_enter+1,w,c
 15543  00206A  B4D8               	btfsc	status,2,c
 15544  00206C  D007               	goto	i2l7556
 15545                           
 15546                           ;UI.c: 341: dispLogs(3);
 15547  00206E  0E00               	movlw	0
 15548  002070  6E13               	movwf	dispLogs@myLog+1,c
 15549  002072  0E03               	movlw	3
 15550  002074  6E12               	movwf	dispLogs@myLog,c
 15551  002076  EC79  F021         	call	_dispLogs	;wreg free
 15552                           
 15553                           ;UI.c: 342: }
 15554  00207A  D05C               	goto	i2l254
 15555  00207C                     i2l7556:
 15556                           
 15557                           ;UI.c: 343: else if(back){
 15558  00207C  505B               	movf	_back,w,c
 15559  00207E  105C               	iorwf	_back+1,w,c
 15560  002080  B4D8               	btfsc	status,2,c
 15561  002082  D058               	goto	i2l254
 15562                           
 15563                           ;UI.c: 344: change_state_to_menu_23();
 15564  002084  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15565                           
 15566                           ;UI.c: 345: }
 15567                           ;UI.c: 346: break;
 15568  002088  D055               	goto	i2l254
 15569  00208A                     i2l7560:
 15570                           
 15571                           ;UI.c: 349: if(up){
 15572  00208A  5077               	movf	_up,w,c
 15573  00208C  1078               	iorwf	_up+1,w,c
 15574  00208E  B4D8               	btfsc	status,2,c
 15575  002090  D003               	goto	i2l7564
 15576                           
 15577                           ;UI.c: 350: change_state_to_logs_33();
 15578  002092  EC4A  F020         	call	_change_state_to_logs_33	;wreg free
 15579                           
 15580                           ;UI.c: 351: }
 15581  002096  D04E               	goto	i2l254
 15582  002098                     i2l7564:
 15583                           
 15584                           ;UI.c: 352: else if(down){
 15585  002098  5067               	movf	_down,w,c
 15586  00209A  1068               	iorwf	_down+1,w,c
 15587  00209C  B4D8               	btfsc	status,2,c
 15588  00209E  D003               	goto	i2l7568
 15589                           
 15590                           ;UI.c: 353: change_state_to_logs_11();
 15591  0020A0  EC92  F020         	call	_change_state_to_logs_11	;wreg free
 15592                           
 15593                           ;UI.c: 354: }
 15594  0020A4  D047               	goto	i2l254
 15595  0020A6                     i2l7568:
 15596                           
 15597                           ;UI.c: 355: else if(enter){
 15598  0020A6  5069               	movf	_enter,w,c
 15599  0020A8  106A               	iorwf	_enter+1,w,c
 15600  0020AA  B4D8               	btfsc	status,2,c
 15601  0020AC  D007               	goto	i2l7572
 15602                           
 15603                           ;UI.c: 356: dispLogs(4);
 15604  0020AE  0E00               	movlw	0
 15605  0020B0  6E13               	movwf	dispLogs@myLog+1,c
 15606  0020B2  0E04               	movlw	4
 15607  0020B4  6E12               	movwf	dispLogs@myLog,c
 15608  0020B6  EC79  F021         	call	_dispLogs	;wreg free
 15609                           
 15610                           ;UI.c: 357: }
 15611  0020BA  D03C               	goto	i2l254
 15612  0020BC                     i2l7572:
 15613                           
 15614                           ;UI.c: 358: else if(back){
 15615  0020BC  505B               	movf	_back,w,c
 15616  0020BE  105C               	iorwf	_back+1,w,c
 15617  0020C0  B4D8               	btfsc	status,2,c
 15618  0020C2  D038               	goto	i2l254
 15619                           
 15620                           ;UI.c: 359: change_state_to_menu_23();
 15621  0020C4  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 15622                           
 15623                           ;UI.c: 365: }
 15624                           
 15625                           ;UI.c: 364: break;
 15626                           
 15627                           ;UI.c: 363: default:
 15628                           
 15629                           ;UI.c: 360: }
 15630                           ;UI.c: 361: break;
 15631  0020C8  D035               	goto	i2l254
 15632  0020CA                     i2l7578:
 15633  0020CA  C0DE  F043         	movff	_cur_state,??_updateMenu
 15634  0020CE  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 15635                           
 15636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 15637                           ; Switch size 1, requested type "space"
 15638                           ; Number of cases is 3, Range of values is 0 to 4
 15639                           ; switch strategies available:
 15640                           ; Name         Instructions Cycles
 15641                           ; simple_byte           10     6 (average)
 15642                           ;	Chosen strategy is simple_byte
 15643  0020D2  5044               	movf	??_updateMenu+1,w,c
 15644  0020D4  0A00               	xorlw	0	; case 0
 15645  0020D6  B4D8               	btfsc	status,2,c
 15646  0020D8  D007               	goto	i2l8160
 15647  0020DA  0A03               	xorlw	3	; case 3
 15648  0020DC  B4D8               	btfsc	status,2,c
 15649  0020DE  D015               	goto	i2l8162
 15650  0020E0  0A07               	xorlw	7	; case 4
 15651  0020E2  B4D8               	btfsc	status,2,c
 15652  0020E4  D020               	goto	i2l8164
 15653  0020E6  D026               	goto	i2l254
 15654  0020E8                     i2l8160:
 15655                           
 15656                           ; Switch size 1, requested type "space"
 15657                           ; Number of cases is 5, Range of values is 0 to 23
 15658                           ; switch strategies available:
 15659                           ; Name         Instructions Cycles
 15660                           ; simple_byte           16     9 (average)
 15661                           ;	Chosen strategy is simple_byte
 15662  0020E8  5043               	movf	??_updateMenu,w,c
 15663  0020EA  0A00               	xorlw	0	; case 0
 15664  0020EC  B4D8               	btfsc	status,2,c
 15665  0020EE  D6DC               	goto	i2l7430
 15666  0020F0  0A0B               	xorlw	11	; case 11
 15667  0020F2  B4D8               	btfsc	status,2,c
 15668  0020F4  D6DC               	goto	i2l7432
 15669  0020F6  0A07               	xorlw	7	; case 12
 15670  0020F8  B4D8               	btfsc	status,2,c
 15671  0020FA  D6EE               	goto	i2l7444
 15672  0020FC  0A1A               	xorlw	26	; case 22
 15673  0020FE  B4D8               	btfsc	status,2,c
 15674  002100  D6F9               	goto	i2l7456
 15675  002102  0A01               	xorlw	1	; case 23
 15676  002104  B4D8               	btfsc	status,2,c
 15677  002106  D70C               	goto	i2l7468
 15678  002108  D015               	goto	i2l254
 15679  00210A                     i2l8162:
 15680                           
 15681                           ; Switch size 1, requested type "space"
 15682                           ; Number of cases is 4, Range of values is 243 to 255
 15683                           ; switch strategies available:
 15684                           ; Name         Instructions Cycles
 15685                           ; simple_byte           13     7 (average)
 15686                           ;	Chosen strategy is simple_byte
 15687  00210A  5043               	movf	??_updateMenu,w,c
 15688  00210C  0AF3               	xorlw	243	; case 243
 15689  00210E  B4D8               	btfsc	status,2,c
 15690  002110  D71C               	goto	i2l7480
 15691  002112  0A07               	xorlw	7	; case 244
 15692  002114  B4D8               	btfsc	status,2,c
 15693  002116  D739               	goto	i2l7496
 15694  002118  0A0A               	xorlw	10	; case 254
 15695  00211A  B4D8               	btfsc	status,2,c
 15696  00211C  D756               	goto	i2l7512
 15697  00211E  0A01               	xorlw	1	; case 255
 15698  002120  B4D8               	btfsc	status,2,c
 15699  002122  D773               	goto	i2l7528
 15700  002124  D007               	goto	i2l254
 15701  002126                     i2l8164:
 15702                           
 15703                           ; Switch size 1, requested type "space"
 15704                           ; Number of cases is 2, Range of values is 9 to 10
 15705                           ; switch strategies available:
 15706                           ; Name         Instructions Cycles
 15707                           ; simple_byte            7     4 (average)
 15708                           ;	Chosen strategy is simple_byte
 15709  002126  5043               	movf	??_updateMenu,w,c
 15710  002128  0A09               	xorlw	9	; case 9
 15711  00212A  B4D8               	btfsc	status,2,c
 15712  00212C  D78E               	goto	i2l7544
 15713  00212E  0A03               	xorlw	3	; case 10
 15714  002130  B4D8               	btfsc	status,2,c
 15715  002132  D7AB               	goto	i2l7560
 15716  002134                     i2l254:
 15717                           
 15718                           ;UI.c: 366: }
 15719                           ;UI.c: 367: (INTCONbits.GIE = 1);
 15720  002134  8EF2               	bsf	intcon,7,c	;volatile
 15721  002136  0012               	return		;funcret
 15722  002138                     __end_of_updateMenu:
 15723                           	opt stack 0
 15724                           pclatu	equ	0xFFB
 15725                           pclath	equ	0xFFA
 15726                           tblptru	equ	0xFF8
 15727                           tblptrh	equ	0xFF7
 15728                           tblptrl	equ	0xFF6
 15729                           tablat	equ	0xFF5
 15730                           prodh	equ	0xFF4
 15731                           prodl	equ	0xFF3
 15732                           intcon	equ	0xFF2
 15733                           intcon2	equ	0xFF1
 15734                           intcon3	equ	0xFF0
 15735                           indf0	equ	0xFEF
 15736                           postinc0	equ	0xFEE
 15737                           fsr0h	equ	0xFEA
 15738                           fsr0l	equ	0xFE9
 15739                           wreg	equ	0xFE8
 15740                           postdec1	equ	0xFE5
 15741                           fsr1h	equ	0xFE2
 15742                           fsr1l	equ	0xFE1
 15743                           indf2	equ	0xFDF
 15744                           postinc2	equ	0xFDE
 15745                           postdec2	equ	0xFDD
 15746                           fsr2h	equ	0xFDA
 15747                           fsr2l	equ	0xFD9
 15748                           status	equ	0xFD8
 15749                           
 15750 ;; *************** function i2_change_state_to_menu_start *****************
 15751 ;; Defined at:
 15752 ;;		line 472 in file "UI.c"
 15753 ;; Parameters:    Size  Location     Type
 15754 ;;		None
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;		None
 15757 ;; Return value:  Size  Location     Type
 15758 ;;                  1    wreg      void 
 15759 ;; Registers used:
 15760 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15770 ;;Total ram usage:        0 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; Hardware stack levels required when called:    4
 15773 ;; This function calls:
 15774 ;;		i2_lcdInst
 15775 ;;		i2_printRTC
 15776 ;;		i2_printf
 15777 ;; This function is called by:
 15778 ;;		_updateMenu
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           	psect	text58
 15783  00425A                     __ptext58:
 15784                           	opt stack 0
 15785  00425A                     i2_change_state_to_menu_start:
 15786                           	opt stack 18
 15787                           
 15788                           ;UI.c: 473: cur_state = 0;
 15789                           
 15790                           ;incstack = 0
 15791  00425A  0E00               	movlw	0
 15792  00425C  0100               	movlb	0	; () banked
 15793  00425E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15794  004260  0E00               	movlw	0
 15795  004262  6FDE               	movwf	_cur_state& (0+255),b
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;UI.c: 475: lcdInst(0b10000000);;
 15799  004264  0E80               	movlw	128
 15800  004266  EC07  F022         	call	i2_lcdInst
 15801                           
 15802                           ;UI.c: 476: printRTC();
 15803  00426A  EC9C  F010         	call	i2_printRTC	;wreg free
 15804                           
 15805                           ;UI.c: 477: lcdInst(0b11000000);;
 15806  00426E  0EC0               	movlw	192
 15807  004270  EC07  F022         	call	i2_lcdInst
 15808                           
 15809                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 15810  004274  0E20               	movlw	low STR_30
 15811  004276  6E0D               	movwf	i2printf@f,c
 15812  004278  0EFE               	movlw	high STR_30
 15813  00427A  6E0E               	movwf	i2printf@f+1,c
 15814  00427C  ECB8  F00A         	call	i2_printf	;wreg free
 15815  004280  0012               	return		;funcret
 15816  004282                     __end_ofi2_change_state_to_menu_start:
 15817                           	opt stack 0
 15818                           pclatu	equ	0xFFB
 15819                           pclath	equ	0xFFA
 15820                           tblptru	equ	0xFF8
 15821                           tblptrh	equ	0xFF7
 15822                           tblptrl	equ	0xFF6
 15823                           tablat	equ	0xFF5
 15824                           prodh	equ	0xFF4
 15825                           prodl	equ	0xFF3
 15826                           intcon	equ	0xFF2
 15827                           intcon2	equ	0xFF1
 15828                           intcon3	equ	0xFF0
 15829                           indf0	equ	0xFEF
 15830                           postinc0	equ	0xFEE
 15831                           fsr0h	equ	0xFEA
 15832                           fsr0l	equ	0xFE9
 15833                           wreg	equ	0xFE8
 15834                           postdec1	equ	0xFE5
 15835                           fsr1h	equ	0xFE2
 15836                           fsr1l	equ	0xFE1
 15837                           indf2	equ	0xFDF
 15838                           postinc2	equ	0xFDE
 15839                           postdec2	equ	0xFDD
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844 ;; *************** function i2_printRTC *****************
 15845 ;; Defined at:
 15846 ;;		line 63 in file "RTC.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;		None
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;  printRTC       14   44[COMRAM] int [7]
 15851 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 15852 ;;  printRTC        2   64[COMRAM] int 
 15853 ;;  printRTC        2   58[COMRAM] int 
 15854 ;; Return value:  Size  Location     Type
 15855 ;;                  1    wreg      void 
 15856 ;; Registers used:
 15857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15858 ;; Tracked objects:
 15859 ;;		On entry : 0/0
 15860 ;;		On exit  : 0/0
 15861 ;;		Unchanged: 0/0
 15862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15864 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15866 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15867 ;;Total ram usage:       25 bytes
 15868 ;; Hardware stack levels used:    1
 15869 ;; Hardware stack levels required when called:    3
 15870 ;; This function calls:
 15871 ;;		i2_getRTC
 15872 ;;		i2_lcdInst
 15873 ;;		i2_printf
 15874 ;;		i2_strcpy
 15875 ;; This function is called by:
 15876 ;;		i2_change_state_to_menu_start
 15877 ;; This function uses a non-reentrant model
 15878 ;;
 15879                           
 15880                           	psect	text59
 15881  002138                     __ptext59:
 15882                           	opt stack 0
 15883  002138                     i2_printRTC:
 15884                           	opt stack 18
 15885                           
 15886                           ;RTC.c: 64: getRTC();
 15887                           
 15888                           ;incstack = 0
 15889  002138  EC8E  F01C         	call	i2_getRTC	;wreg free
 15890                           
 15891                           ;RTC.c: 65: char month[] = "MMM";
 15892  00213C  C131  F03D         	movff	printRTC@F3213,i2printRTC@month
 15893  002140  C132  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 15894  002144  C133  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 15895  002148  C134  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 15896                           
 15897                           ;RTC.c: 66: int INT_time[7];
 15898                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 15899  00214C  0E00               	movlw	0
 15900  00214E  6E42               	movwf	i2printRTC@i+1,c
 15901  002150  0E00               	movlw	0
 15902  002152  6E41               	movwf	i2printRTC@i,c
 15903  002154  BE42               	btfsc	i2printRTC@i+1,7,c
 15904  002156  D006               	goto	i2l5954
 15905  002158  5042               	movf	i2printRTC@i+1,w,c
 15906  00215A  E135               	bnz	i2l593
 15907  00215C  0E07               	movlw	7
 15908  00215E  5C41               	subwf	i2printRTC@i,w,c
 15909  002160  B0D8               	btfsc	status,0,c
 15910  002162  D031               	goto	i2l593
 15911  002164                     i2l5954:
 15912                           
 15913                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 15914  002164  0E24               	movlw	low _time
 15915  002166  2441               	addwf	i2printRTC@i,w,c
 15916  002168  6ED9               	movwf	fsr2l,c
 15917  00216A  0E01               	movlw	high _time
 15918  00216C  2042               	addwfc	i2printRTC@i+1,w,c
 15919  00216E  6EDA               	movwf	fsr2h,c
 15920  002170  50DF               	movf	indf2,w,c
 15921  002172  6E2A               	movwf	??i2_printRTC& (0+255),c
 15922  002174  3A2A               	swapf	??i2_printRTC,f,c
 15923  002176  0E0F               	movlw	15
 15924  002178  162A               	andwf	??i2_printRTC,f,c
 15925  00217A  0E0F               	movlw	15
 15926  00217C  162A               	andwf	??i2_printRTC,f,c
 15927  00217E  502A               	movf	??i2_printRTC,w,c
 15928  002180  0D0A               	mullw	10
 15929  002182  0E24               	movlw	low _time
 15930  002184  2441               	addwf	i2printRTC@i,w,c
 15931  002186  6ED9               	movwf	fsr2l,c
 15932  002188  0E01               	movlw	high _time
 15933  00218A  2042               	addwfc	i2printRTC@i+1,w,c
 15934  00218C  6EDA               	movwf	fsr2h,c
 15935  00218E  50DF               	movf	indf2,w,c
 15936  002190  0B0F               	andlw	15
 15937  002192  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 15938  002194  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 15939  002196  50F3               	movf	prodl,w,c
 15940  002198  262B               	addwf	??i2_printRTC+1,f,c
 15941  00219A  50F4               	movf	prodh,w,c
 15942  00219C  222C               	addwfc	??i2_printRTC+2,f,c
 15943  00219E  90D8               	bcf	status,0,c
 15944  0021A0  3441               	rlcf	i2printRTC@i,w,c
 15945  0021A2  6ED9               	movwf	fsr2l,c
 15946  0021A4  3442               	rlcf	i2printRTC@i+1,w,c
 15947  0021A6  6EDA               	movwf	fsr2h,c
 15948  0021A8  0E2D               	movlw	low i2printRTC@INT_time
 15949  0021AA  26D9               	addwf	fsr2l,f,c
 15950  0021AC  0E00               	movlw	high i2printRTC@INT_time
 15951  0021AE  22DA               	addwfc	fsr2h,f,c
 15952  0021B0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 15953  0021B4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 15954  0021B8  4A41               	infsnz	i2printRTC@i,f,c
 15955  0021BA  2A42               	incf	i2printRTC@i+1,f,c
 15956  0021BC  BE42               	btfsc	i2printRTC@i+1,7,c
 15957  0021BE  D7D2               	goto	i2l5954
 15958  0021C0  5042               	movf	i2printRTC@i+1,w,c
 15959  0021C2  E101               	bnz	i2u455_40
 15960  0021C4  D7CB               	goto	L10
 15961  0021C6                     i2u455_40:
 15962  0021C6                     i2l593:
 15963                           
 15964                           ;RTC.c: 69: }
 15965                           ;RTC.c: 70: int RTC_month = INT_time[5];
 15966  0021C6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 15967  0021CA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 15968                           
 15969                           ;RTC.c: 71: switch(RTC_month){
 15970  0021CE  D084               	goto	i2l5986
 15971  0021D0                     i2l5960:
 15972                           
 15973                           ;RTC.c: 73: strcpy(month, "JAN");
 15974  0021D0  0E3D               	movlw	low i2printRTC@month
 15975  0021D2  6E01               	movwf	i2strcpy@to,c
 15976  0021D4  0E00               	movlw	high i2printRTC@month
 15977  0021D6  6E02               	movwf	i2strcpy@to+1,c
 15978  0021D8  0EDB               	movlw	low STR_8
 15979  0021DA  6E03               	movwf	i2strcpy@from,c
 15980  0021DC  0EFF               	movlw	high STR_8
 15981  0021DE  6E04               	movwf	i2strcpy@from+1,c
 15982  0021E0  ECB9  F01F         	call	i2_strcpy	;wreg free
 15983                           
 15984                           ;RTC.c: 74: break;
 15985  0021E4  D0A6               	goto	i2l5988
 15986  0021E6                     i2l5962:
 15987                           
 15988                           ;RTC.c: 76: strcpy(month, "FEB");
 15989  0021E6  0E3D               	movlw	low i2printRTC@month
 15990  0021E8  6E01               	movwf	i2strcpy@to,c
 15991  0021EA  0E00               	movlw	high i2printRTC@month
 15992  0021EC  6E02               	movwf	i2strcpy@to+1,c
 15993  0021EE  0ECB               	movlw	low STR_9
 15994  0021F0  6E03               	movwf	i2strcpy@from,c
 15995  0021F2  0EFF               	movlw	high STR_9
 15996  0021F4  6E04               	movwf	i2strcpy@from+1,c
 15997  0021F6  ECB9  F01F         	call	i2_strcpy	;wreg free
 15998                           
 15999                           ;RTC.c: 77: break;
 16000  0021FA  D09B               	goto	i2l5988
 16001  0021FC                     i2l5964:
 16002                           
 16003                           ;RTC.c: 79: strcpy(month, "MAR");
 16004  0021FC  0E3D               	movlw	low i2printRTC@month
 16005  0021FE  6E01               	movwf	i2strcpy@to,c
 16006  002200  0E00               	movlw	high i2printRTC@month
 16007  002202  6E02               	movwf	i2strcpy@to+1,c
 16008  002204  0EE7               	movlw	low STR_10
 16009  002206  6E03               	movwf	i2strcpy@from,c
 16010  002208  0EFF               	movlw	high STR_10
 16011  00220A  6E04               	movwf	i2strcpy@from+1,c
 16012  00220C  ECB9  F01F         	call	i2_strcpy	;wreg free
 16013                           
 16014                           ;RTC.c: 80: break;
 16015  002210  D090               	goto	i2l5988
 16016  002212                     i2l5966:
 16017                           
 16018                           ;RTC.c: 82: strcpy(month, "APR");
 16019  002212  0E3D               	movlw	low i2printRTC@month
 16020  002214  6E01               	movwf	i2strcpy@to,c
 16021  002216  0E00               	movlw	high i2printRTC@month
 16022  002218  6E02               	movwf	i2strcpy@to+1,c
 16023  00221A  0EEB               	movlw	low STR_11
 16024  00221C  6E03               	movwf	i2strcpy@from,c
 16025  00221E  0EFF               	movlw	high STR_11
 16026  002220  6E04               	movwf	i2strcpy@from+1,c
 16027  002222  ECB9  F01F         	call	i2_strcpy	;wreg free
 16028                           
 16029                           ;RTC.c: 83: break;
 16030  002226  D085               	goto	i2l5988
 16031  002228                     i2l5968:
 16032                           
 16033                           ;RTC.c: 85: strcpy(month, "MAY");
 16034  002228  0E3D               	movlw	low i2printRTC@month
 16035  00222A  6E01               	movwf	i2strcpy@to,c
 16036  00222C  0E00               	movlw	high i2printRTC@month
 16037  00222E  6E02               	movwf	i2strcpy@to+1,c
 16038  002230  0EFB               	movlw	low STR_12
 16039  002232  6E03               	movwf	i2strcpy@from,c
 16040  002234  0EFF               	movlw	high STR_12
 16041  002236  6E04               	movwf	i2strcpy@from+1,c
 16042  002238  ECB9  F01F         	call	i2_strcpy	;wreg free
 16043                           
 16044                           ;RTC.c: 86: break;
 16045  00223C  D07A               	goto	i2l5988
 16046  00223E                     i2l5970:
 16047                           
 16048                           ;RTC.c: 88: strcpy(month, "JUN");
 16049  00223E  0E3D               	movlw	low i2printRTC@month
 16050  002240  6E01               	movwf	i2strcpy@to,c
 16051  002242  0E00               	movlw	high i2printRTC@month
 16052  002244  6E02               	movwf	i2strcpy@to+1,c
 16053  002246  0EDF               	movlw	low STR_13
 16054  002248  6E03               	movwf	i2strcpy@from,c
 16055  00224A  0EFF               	movlw	high STR_13
 16056  00224C  6E04               	movwf	i2strcpy@from+1,c
 16057  00224E  ECB9  F01F         	call	i2_strcpy	;wreg free
 16058                           
 16059                           ;RTC.c: 89: break;
 16060  002252  D06F               	goto	i2l5988
 16061  002254                     i2l5972:
 16062                           
 16063                           ;RTC.c: 91: strcpy(month, "JUL");
 16064  002254  0E3D               	movlw	low i2printRTC@month
 16065  002256  6E01               	movwf	i2strcpy@to,c
 16066  002258  0E00               	movlw	high i2printRTC@month
 16067  00225A  6E02               	movwf	i2strcpy@to+1,c
 16068  00225C  0ED7               	movlw	low STR_14
 16069  00225E  6E03               	movwf	i2strcpy@from,c
 16070  002260  0EFF               	movlw	high STR_14
 16071  002262  6E04               	movwf	i2strcpy@from+1,c
 16072  002264  ECB9  F01F         	call	i2_strcpy	;wreg free
 16073                           
 16074                           ;RTC.c: 92: break;
 16075  002268  D064               	goto	i2l5988
 16076  00226A                     i2l5974:
 16077                           
 16078                           ;RTC.c: 94: strcpy(month, "AUG");
 16079  00226A  0E3D               	movlw	low i2printRTC@month
 16080  00226C  6E01               	movwf	i2strcpy@to,c
 16081  00226E  0E00               	movlw	high i2printRTC@month
 16082  002270  6E02               	movwf	i2strcpy@to+1,c
 16083  002272  0ED3               	movlw	low STR_15
 16084  002274  6E03               	movwf	i2strcpy@from,c
 16085  002276  0EFF               	movlw	high STR_15
 16086  002278  6E04               	movwf	i2strcpy@from+1,c
 16087  00227A  ECB9  F01F         	call	i2_strcpy	;wreg free
 16088                           
 16089                           ;RTC.c: 95: break;
 16090  00227E  D059               	goto	i2l5988
 16091  002280                     i2l5976:
 16092                           
 16093                           ;RTC.c: 97: strcpy(month, "SEP");
 16094  002280  0E3D               	movlw	low i2printRTC@month
 16095  002282  6E01               	movwf	i2strcpy@to,c
 16096  002284  0E00               	movlw	high i2printRTC@month
 16097  002286  6E02               	movwf	i2strcpy@to+1,c
 16098  002288  0EE3               	movlw	low STR_16
 16099  00228A  6E03               	movwf	i2strcpy@from,c
 16100  00228C  0EFF               	movlw	high STR_16
 16101  00228E  6E04               	movwf	i2strcpy@from+1,c
 16102  002290  ECB9  F01F         	call	i2_strcpy	;wreg free
 16103                           
 16104                           ;RTC.c: 98: break;
 16105  002294  D04E               	goto	i2l5988
 16106  002296                     i2l5978:
 16107                           
 16108                           ;RTC.c: 100: strcpy(month, "OCT");
 16109  002296  0E3D               	movlw	low i2printRTC@month
 16110  002298  6E01               	movwf	i2strcpy@to,c
 16111  00229A  0E00               	movlw	high i2printRTC@month
 16112  00229C  6E02               	movwf	i2strcpy@to+1,c
 16113  00229E  0EF3               	movlw	low STR_17
 16114  0022A0  6E03               	movwf	i2strcpy@from,c
 16115  0022A2  0EFF               	movlw	high STR_17
 16116  0022A4  6E04               	movwf	i2strcpy@from+1,c
 16117  0022A6  ECB9  F01F         	call	i2_strcpy	;wreg free
 16118                           
 16119                           ;RTC.c: 101: break;
 16120  0022AA  D043               	goto	i2l5988
 16121  0022AC                     i2l5980:
 16122                           
 16123                           ;RTC.c: 103: strcpy(month, "NOV");
 16124  0022AC  0E3D               	movlw	low i2printRTC@month
 16125  0022AE  6E01               	movwf	i2strcpy@to,c
 16126  0022B0  0E00               	movlw	high i2printRTC@month
 16127  0022B2  6E02               	movwf	i2strcpy@to+1,c
 16128  0022B4  0EF7               	movlw	low STR_18
 16129  0022B6  6E03               	movwf	i2strcpy@from,c
 16130  0022B8  0EFF               	movlw	high STR_18
 16131  0022BA  6E04               	movwf	i2strcpy@from+1,c
 16132  0022BC  ECB9  F01F         	call	i2_strcpy	;wreg free
 16133                           
 16134                           ;RTC.c: 104: break;
 16135  0022C0  D038               	goto	i2l5988
 16136  0022C2                     i2l5982:
 16137                           
 16138                           ;RTC.c: 106: strcpy(month, "DEC");
 16139  0022C2  0E3D               	movlw	low i2printRTC@month
 16140  0022C4  6E01               	movwf	i2strcpy@to,c
 16141  0022C6  0E00               	movlw	high i2printRTC@month
 16142  0022C8  6E02               	movwf	i2strcpy@to+1,c
 16143  0022CA  0ECF               	movlw	low STR_19
 16144  0022CC  6E03               	movwf	i2strcpy@from,c
 16145  0022CE  0EFF               	movlw	high STR_19
 16146  0022D0  6E04               	movwf	i2strcpy@from+1,c
 16147  0022D2  ECB9  F01F         	call	i2_strcpy	;wreg free
 16148                           
 16149                           ;RTC.c: 108: }
 16150                           
 16151                           ;RTC.c: 107: break;
 16152  0022D6  D02D               	goto	i2l5988
 16153  0022D8                     i2l5986:
 16154  0022D8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16155  0022DC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16156                           
 16157                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16158                           ; Switch size 1, requested type "space"
 16159                           ; Number of cases is 1, Range of values is 0 to 0
 16160                           ; switch strategies available:
 16161                           ; Name         Instructions Cycles
 16162                           ; simple_byte            4     3 (average)
 16163                           ;	Chosen strategy is simple_byte
 16164  0022E0  502B               	movf	??i2_printRTC+1,w,c
 16165  0022E2  0A00               	xorlw	0	; case 0
 16166  0022E4  A4D8               	btfss	status,2,c
 16167  0022E6  D025               	goto	i2l5988
 16168                           
 16169                           ; Switch size 1, requested type "space"
 16170                           ; Number of cases is 12, Range of values is 1 to 12
 16171                           ; switch strategies available:
 16172                           ; Name         Instructions Cycles
 16173                           ; simple_byte           37    19 (average)
 16174                           ;	Chosen strategy is simple_byte
 16175  0022E8  502A               	movf	??i2_printRTC,w,c
 16176  0022EA  0A01               	xorlw	1	; case 1
 16177  0022EC  B4D8               	btfsc	status,2,c
 16178  0022EE  D770               	goto	i2l5960
 16179  0022F0  0A03               	xorlw	3	; case 2
 16180  0022F2  B4D8               	btfsc	status,2,c
 16181  0022F4  D778               	goto	i2l5962
 16182  0022F6  0A01               	xorlw	1	; case 3
 16183  0022F8  B4D8               	btfsc	status,2,c
 16184  0022FA  D780               	goto	i2l5964
 16185  0022FC  0A07               	xorlw	7	; case 4
 16186  0022FE  B4D8               	btfsc	status,2,c
 16187  002300  D788               	goto	i2l5966
 16188  002302  0A01               	xorlw	1	; case 5
 16189  002304  B4D8               	btfsc	status,2,c
 16190  002306  D790               	goto	i2l5968
 16191  002308  0A03               	xorlw	3	; case 6
 16192  00230A  B4D8               	btfsc	status,2,c
 16193  00230C  D798               	goto	i2l5970
 16194  00230E  0A01               	xorlw	1	; case 7
 16195  002310  B4D8               	btfsc	status,2,c
 16196  002312  D7A0               	goto	i2l5972
 16197  002314  0A0F               	xorlw	15	; case 8
 16198  002316  B4D8               	btfsc	status,2,c
 16199  002318  D7A8               	goto	i2l5974
 16200  00231A  0A01               	xorlw	1	; case 9
 16201  00231C  B4D8               	btfsc	status,2,c
 16202  00231E  D7B0               	goto	i2l5976
 16203  002320  0A03               	xorlw	3	; case 10
 16204  002322  B4D8               	btfsc	status,2,c
 16205  002324  D7B8               	goto	i2l5978
 16206  002326  0A01               	xorlw	1	; case 11
 16207  002328  B4D8               	btfsc	status,2,c
 16208  00232A  D7C0               	goto	i2l5980
 16209  00232C  0A07               	xorlw	7	; case 12
 16210  00232E  B4D8               	btfsc	status,2,c
 16211  002330  D7C8               	goto	i2l5982
 16212  002332                     i2l5988:
 16213                           
 16214                           ;RTC.c: 109: lcdInst(0b10000000);;
 16215  002332  0E80               	movlw	128
 16216  002334  EC07  F022         	call	i2_lcdInst
 16217                           
 16218                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16219  002338  0E54               	movlw	low STR_21
 16220  00233A  6E0D               	movwf	i2printf@f,c
 16221  00233C  0EFB               	movlw	high STR_21
 16222  00233E  6E0E               	movwf	i2printf@f+1,c
 16223  002340  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16224  002344  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16225  002348  0E3D               	movlw	low i2printRTC@month
 16226  00234A  6E11               	movwf	?i2_printf+4,c
 16227  00234C  0E00               	movlw	high i2printRTC@month
 16228  00234E  6E12               	movwf	?i2_printf+5,c
 16229  002350  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16230  002354  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16231  002358  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16232  00235C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16233  002360  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16234  002364  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16235  002368  ECB8  F00A         	call	i2_printf	;wreg free
 16236  00236C  0012               	return		;funcret
 16237  00236E                     __end_ofi2_printRTC:
 16238                           	opt stack 0
 16239                           pclatu	equ	0xFFB
 16240                           pclath	equ	0xFFA
 16241                           tblptru	equ	0xFF8
 16242                           tblptrh	equ	0xFF7
 16243                           tblptrl	equ	0xFF6
 16244                           tablat	equ	0xFF5
 16245                           prodh	equ	0xFF4
 16246                           prodl	equ	0xFF3
 16247                           intcon	equ	0xFF2
 16248                           intcon2	equ	0xFF1
 16249                           intcon3	equ	0xFF0
 16250                           indf0	equ	0xFEF
 16251                           postinc0	equ	0xFEE
 16252                           fsr0h	equ	0xFEA
 16253                           fsr0l	equ	0xFE9
 16254                           wreg	equ	0xFE8
 16255                           postdec1	equ	0xFE5
 16256                           fsr1h	equ	0xFE2
 16257                           fsr1l	equ	0xFE1
 16258                           indf2	equ	0xFDF
 16259                           postinc2	equ	0xFDE
 16260                           postdec2	equ	0xFDD
 16261                           fsr2h	equ	0xFDA
 16262                           fsr2l	equ	0xFD9
 16263                           status	equ	0xFD8
 16264                           
 16265 ;; *************** function i2_strcpy *****************
 16266 ;; Defined at:
 16267 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16268 ;; Parameters:    Size  Location     Type
 16269 ;;  to              2    0[COMRAM] PTR unsigned char 
 16270 ;;		 -> printRTC@month(4), UI@month(4), 
 16271 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16272 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16273 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16274 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16275 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16276 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16277 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16278 ;;		 -> STR_8(4), 
 16279 ;; Auto vars:     Size  Location     Type
 16280 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16281 ;;		 -> printRTC@month(4), UI@month(4), 
 16282 ;; Return value:  Size  Location     Type
 16283 ;;                  2    0[COMRAM] PTR unsigned char 
 16284 ;; Registers used:
 16285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16286 ;; Tracked objects:
 16287 ;;		On entry : 0/0
 16288 ;;		On exit  : 0/0
 16289 ;;		Unchanged: 0/0
 16290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16294 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16295 ;;Total ram usage:        6 bytes
 16296 ;; Hardware stack levels used:    1
 16297 ;; This function calls:
 16298 ;;		Nothing
 16299 ;; This function is called by:
 16300 ;;		i2_printRTC
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           	psect	text60
 16305  003F72                     __ptext60:
 16306                           	opt stack 0
 16307  003F72                     i2_strcpy:
 16308                           	opt stack 20
 16309                           
 16310                           ;incstack = 0
 16311  003F72  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16312  003F76  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16313  003F7A  D004               	goto	i2l5628
 16314  003F7C                     i2l5626:
 16315  003F7C  4A05               	infsnz	i2strcpy@cp,f,c
 16316  003F7E  2A06               	incf	i2strcpy@cp+1,f,c
 16317  003F80  4A03               	infsnz	i2strcpy@from,f,c
 16318  003F82  2A04               	incf	i2strcpy@from+1,f,c
 16319  003F84                     i2l5628:
 16320  003F84  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16321  003F88  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16322  003F8C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16323  003F8C  6AF8               	clrf	tblptru,c
 16324  003F8E                     	endif
 16325  003F8E                     	if	0	;tblptru may be non-zero
 16326  003F8E                     	endif
 16327  003F8E  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16328  003F92  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16329  003F96  0008               	tblrd		*
 16330  003F98  CFF5 FFDF          	movff	tablat,indf2
 16331  003F9C  50DF               	movf	indf2,w,c
 16332  003F9E  B4D8               	btfsc	status,2,c
 16333  003FA0  0012               	return	
 16334  003FA2  D7EC               	goto	i2l5626
 16335  003FA4                     __end_ofi2_strcpy:
 16336                           	opt stack 0
 16337                           pclatu	equ	0xFFB
 16338                           pclath	equ	0xFFA
 16339                           tblptru	equ	0xFF8
 16340                           tblptrh	equ	0xFF7
 16341                           tblptrl	equ	0xFF6
 16342                           tablat	equ	0xFF5
 16343                           prodh	equ	0xFF4
 16344                           prodl	equ	0xFF3
 16345                           intcon	equ	0xFF2
 16346                           intcon2	equ	0xFF1
 16347                           intcon3	equ	0xFF0
 16348                           indf0	equ	0xFEF
 16349                           postinc0	equ	0xFEE
 16350                           fsr0h	equ	0xFEA
 16351                           fsr0l	equ	0xFE9
 16352                           wreg	equ	0xFE8
 16353                           postdec1	equ	0xFE5
 16354                           fsr1h	equ	0xFE2
 16355                           fsr1l	equ	0xFE1
 16356                           indf2	equ	0xFDF
 16357                           postinc2	equ	0xFDE
 16358                           postdec2	equ	0xFDD
 16359                           fsr2h	equ	0xFDA
 16360                           fsr2l	equ	0xFD9
 16361                           status	equ	0xFD8
 16362                           
 16363 ;; *************** function _inputHandler *****************
 16364 ;; Defined at:
 16365 ;;		line 370 in file "UI.c"
 16366 ;; Parameters:    Size  Location     Type
 16367 ;;		None
 16368 ;; Auto vars:     Size  Location     Type
 16369 ;;		None
 16370 ;; Return value:  Size  Location     Type
 16371 ;;                  2   41[COMRAM] int 
 16372 ;; Registers used:
 16373 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16374 ;; Tracked objects:
 16375 ;;		On entry : 0/0
 16376 ;;		On exit  : 0/0
 16377 ;;		Unchanged: 0/0
 16378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16379 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16381 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16382 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16383 ;;Total ram usage:        4 bytes
 16384 ;; Hardware stack levels used:    1
 16385 ;; Hardware stack levels required when called:    4
 16386 ;; This function calls:
 16387 ;;		_change_state_to_logs_11
 16388 ;;		_change_state_to_logs_12
 16389 ;;		_change_state_to_logs_22
 16390 ;;		_change_state_to_logs_23
 16391 ;;		_change_state_to_logs_33
 16392 ;;		_change_state_to_logs_34
 16393 ;;		_change_state_to_menu_11
 16394 ;;		_change_state_to_menu_23
 16395 ;;		i2_change_state_to_menu_12
 16396 ;;		i2_change_state_to_menu_22
 16397 ;; This function is called by:
 16398 ;;		_updateMenu
 16399 ;; This function uses a non-reentrant model
 16400 ;;
 16401                           
 16402                           	psect	text61
 16403  002560                     __ptext61:
 16404                           	opt stack 0
 16405  002560                     _inputHandler:
 16406                           	opt stack 18
 16407                           
 16408                           ;UI.c: 375: if(firstboot){
 16409                           
 16410                           ;incstack = 0
 16411  002560  5075               	movf	_firstboot,w,c
 16412  002562  1076               	iorwf	_firstboot+1,w,c
 16413  002564  B4D8               	btfsc	status,2,c
 16414  002566  D00B               	goto	i2l6056
 16415                           
 16416                           ;UI.c: 376: change_state_to_menu_11();
 16417  002568  EC1A  F020         	call	_change_state_to_menu_11	;wreg free
 16418                           
 16419                           ;UI.c: 377: firstboot = 0;
 16420  00256C  0E00               	movlw	0
 16421  00256E  6E76               	movwf	_firstboot+1,c
 16422  002570  0E00               	movlw	0
 16423  002572  6E75               	movwf	_firstboot,c
 16424                           
 16425                           ;UI.c: 378: return 0;
 16426  002574  0E00               	movlw	0
 16427  002576  6E2B               	movwf	?_inputHandler+1,c
 16428  002578  0E00               	movlw	0
 16429  00257A  6E2A               	movwf	?_inputHandler,c
 16430  00257C  0012               	return	
 16431  00257E                     i2l6056:
 16432                           
 16433                           ;UI.c: 379: }
 16434                           ;UI.c: 380: if (logstate){
 16435  00257E  0100               	movlb	0	; () banked
 16436  002580  51F6               	movf	_logstate& (0+255),w,b
 16437  002582  0100               	movlb	0	; () banked
 16438  002584  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16439  002586  B4D8               	btfsc	status,2,c
 16440  002588  D0C7               	goto	i2l6174
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16444  00258A  0E43               	movlw	67
 16445  00258C  187D               	xorwf	_input,w,c	;volatile
 16446  00258E  A4D8               	btfss	status,2,c
 16447  002590  D012               	goto	i2l6074
 16448                           
 16449                           ; BSR set to: 0
 16450  002592  B281               	btfsc	3969,1,c	;volatile
 16451  002594  D009               	goto	i2l6066
 16452  002596  D00F               	goto	i2l6074
 16453  002598                     i2l6064:
 16454                           
 16455                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16456  002598  0E68               	movlw	104
 16457  00259A  6E2C               	movwf	??_inputHandler& (0+255),c
 16458  00259C  0EE4               	movlw	228
 16459  00259E                     i2u787_47:
 16460  00259E  2EE8               	decfsz	wreg,f,c
 16461  0025A0  D7FE               	bra	i2u787_47
 16462  0025A2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16463  0025A4  D7FC               	bra	i2u787_47
 16464  0025A6  D000               	nop2	
 16465  0025A8                     i2l6066:
 16466  0025A8  B281               	btfsc	3969,1,c	;volatile
 16467  0025AA  D7F6               	goto	i2l6064
 16468  0025AC                     i2l6068:
 16469                           
 16470                           ;UI.c: 385: }
 16471                           ;UI.c: 386: return 0;
 16472  0025AC  0E00               	movlw	0
 16473  0025AE  6E2B               	movwf	?_inputHandler+1,c
 16474  0025B0  0E00               	movlw	0
 16475  0025B2  6E2A               	movwf	?_inputHandler,c
 16476  0025B4  0012               	return	
 16477  0025B6                     i2l6074:
 16478                           
 16479                           ;UI.c: 388: else if (input == 'D'){
 16480  0025B6  0E44               	movlw	68
 16481  0025B8  187D               	xorwf	_input,w,c	;volatile
 16482  0025BA  A4D8               	btfss	status,2,c
 16483  0025BC  D7F7               	goto	i2l6068
 16484                           
 16485                           ;UI.c: 390: logstate = 0;
 16486  0025BE  0E00               	movlw	0
 16487  0025C0  0100               	movlb	0	; () banked
 16488  0025C2  6FF7               	movwf	(_logstate+1)& (0+255),b
 16489  0025C4  0E00               	movlw	0
 16490  0025C6  6FF6               	movwf	_logstate& (0+255),b
 16491                           
 16492                           ;UI.c: 391: switch(cur_state){
 16493  0025C8  D012               	goto	i2l6092
 16494  0025CA                     i2l6078:
 16495                           
 16496                           ;UI.c: 393: change_state_to_logs_11();
 16497  0025CA  EC92  F020         	call	_change_state_to_logs_11	;wreg free
 16498                           
 16499                           ;UI.c: 394: break;
 16500  0025CE  D7EE               	goto	i2l6068
 16501  0025D0                     i2l6080:
 16502                           
 16503                           ;UI.c: 396: change_state_to_logs_12();
 16504  0025D0  EC7A  F020         	call	_change_state_to_logs_12	;wreg free
 16505                           
 16506                           ;UI.c: 397: break;
 16507  0025D4  D7EB               	goto	i2l6068
 16508  0025D6                     i2l6082:
 16509                           
 16510                           ;UI.c: 399: change_state_to_logs_22();
 16511  0025D6  EC62  F020         	call	_change_state_to_logs_22	;wreg free
 16512                           
 16513                           ;UI.c: 400: break;
 16514  0025DA  D7E8               	goto	i2l6068
 16515  0025DC                     i2l6084:
 16516                           
 16517                           ;UI.c: 402: change_state_to_logs_23();
 16518  0025DC  ECC1  F020         	call	_change_state_to_logs_23	;wreg free
 16519                           
 16520                           ;UI.c: 403: break;
 16521  0025E0  D7E5               	goto	i2l6068
 16522  0025E2                     i2l6086:
 16523                           
 16524                           ;UI.c: 405: change_state_to_logs_33();
 16525  0025E2  EC4A  F020         	call	_change_state_to_logs_33	;wreg free
 16526                           
 16527                           ;UI.c: 406: break;
 16528  0025E6  D7E2               	goto	i2l6068
 16529  0025E8                     i2l6088:
 16530                           
 16531                           ;UI.c: 408: change_state_to_logs_34();
 16532  0025E8  EC32  F020         	call	_change_state_to_logs_34	;wreg free
 16533                           
 16534                           ;UI.c: 410: }
 16535                           
 16536                           ;UI.c: 409: break;
 16537  0025EC  D7DF               	goto	i2l6068
 16538  0025EE                     i2l6092:
 16539  0025EE  C0DE  F02C         	movff	_cur_state,??_inputHandler
 16540  0025F2  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 16541                           
 16542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16543                           ; Switch size 1, requested type "space"
 16544                           ; Number of cases is 2, Range of values is 3 to 4
 16545                           ; switch strategies available:
 16546                           ; Name         Instructions Cycles
 16547                           ; simple_byte            7     4 (average)
 16548                           ;	Chosen strategy is simple_byte
 16549  0025F6  502D               	movf	??_inputHandler+1,w,c
 16550  0025F8  0A03               	xorlw	3	; case 3
 16551  0025FA  B4D8               	btfsc	status,2,c
 16552  0025FC  D004               	goto	i2l8168
 16553  0025FE  0A07               	xorlw	7	; case 4
 16554  002600  B4D8               	btfsc	status,2,c
 16555  002602  D00F               	goto	i2l8170
 16556  002604  D7D3               	goto	i2l6068
 16557  002606                     i2l8168:
 16558                           
 16559                           ; Switch size 1, requested type "space"
 16560                           ; Number of cases is 4, Range of values is 243 to 255
 16561                           ; switch strategies available:
 16562                           ; Name         Instructions Cycles
 16563                           ; simple_byte           13     7 (average)
 16564                           ;	Chosen strategy is simple_byte
 16565  002606  502C               	movf	??_inputHandler,w,c
 16566  002608  0AF3               	xorlw	243	; case 243
 16567  00260A  B4D8               	btfsc	status,2,c
 16568  00260C  D7DE               	goto	i2l6078
 16569  00260E  0A07               	xorlw	7	; case 244
 16570  002610  B4D8               	btfsc	status,2,c
 16571  002612  D7DE               	goto	i2l6080
 16572  002614  0A0A               	xorlw	10	; case 254
 16573  002616  B4D8               	btfsc	status,2,c
 16574  002618  D7DE               	goto	i2l6082
 16575  00261A  0A01               	xorlw	1	; case 255
 16576  00261C  B4D8               	btfsc	status,2,c
 16577  00261E  D7DE               	goto	i2l6084
 16578  002620  D7C5               	goto	i2l6068
 16579  002622                     i2l8170:
 16580                           
 16581                           ; Switch size 1, requested type "space"
 16582                           ; Number of cases is 2, Range of values is 9 to 10
 16583                           ; switch strategies available:
 16584                           ; Name         Instructions Cycles
 16585                           ; simple_byte            7     4 (average)
 16586                           ;	Chosen strategy is simple_byte
 16587  002622  502C               	movf	??_inputHandler,w,c
 16588  002624  0A09               	xorlw	9	; case 9
 16589  002626  B4D8               	btfsc	status,2,c
 16590  002628  D7DC               	goto	i2l6086
 16591  00262A  0A03               	xorlw	3	; case 10
 16592  00262C  B4D8               	btfsc	status,2,c
 16593  00262E  D7DC               	goto	i2l6088
 16594  002630  D7BD               	goto	i2l6068
 16595  002632                     i2l6104:
 16596                           
 16597                           ;UI.c: 420: if(cur_state == 11){
 16598  002632  0E0B               	movlw	11
 16599  002634  0100               	movlb	0	; () banked
 16600  002636  19DE               	xorwf	_cur_state& (0+255),w,b
 16601  002638  0100               	movlb	0	; () banked
 16602  00263A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16603  00263C  A4D8               	btfss	status,2,c
 16604  00263E  D005               	goto	i2l6112
 16605                           
 16606                           ; BSR set to: 0
 16607                           ;UI.c: 421: return 0;
 16608  002640  0E00               	movlw	0
 16609  002642  6E2B               	movwf	?_inputHandler+1,c
 16610  002644  0E00               	movlw	0
 16611  002646  6E2A               	movwf	?_inputHandler,c
 16612                           
 16613                           ; BSR set to: 0
 16614  002648  0012               	return	
 16615  00264A                     i2l6112:
 16616                           
 16617                           ; BSR set to: 0
 16618                           ;UI.c: 423: else{
 16619                           ;UI.c: 424: change_state_to_menu_11();
 16620  00264A  EC1A  F020         	call	_change_state_to_menu_11	;wreg free
 16621                           
 16622                           ;UI.c: 425: }
 16623                           ;UI.c: 426: return 0;
 16624  00264E  0E00               	movlw	0
 16625  002650  6E2B               	movwf	?_inputHandler+1,c
 16626  002652  0E00               	movlw	0
 16627  002654  6E2A               	movwf	?_inputHandler,c
 16628  002656  0012               	return	
 16629  002658                     i2l6118:
 16630                           
 16631                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 16632  002658  0E16               	movlw	22
 16633  00265A  0100               	movlb	0	; () banked
 16634  00265C  19DE               	xorwf	_cur_state& (0+255),w,b
 16635  00265E  0100               	movlb	0	; () banked
 16636  002660  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16637  002662  B4D8               	btfsc	status,2,c
 16638  002664  D007               	goto	i2l6122
 16639                           
 16640                           ; BSR set to: 0
 16641  002666  0E0C               	movlw	12
 16642  002668  0100               	movlb	0	; () banked
 16643  00266A  19DE               	xorwf	_cur_state& (0+255),w,b
 16644  00266C  0100               	movlb	0	; () banked
 16645  00266E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16646  002670  A4D8               	btfss	status,2,c
 16647  002672  D005               	goto	i2l6128
 16648  002674                     i2l6122:
 16649                           
 16650                           ; BSR set to: 0
 16651                           ;UI.c: 429: return 0;
 16652  002674  0E00               	movlw	0
 16653  002676  6E2B               	movwf	?_inputHandler+1,c
 16654  002678  0E00               	movlw	0
 16655  00267A  6E2A               	movwf	?_inputHandler,c
 16656                           
 16657                           ; BSR set to: 0
 16658  00267C  0012               	return	
 16659  00267E                     i2l6128:
 16660                           
 16661                           ; BSR set to: 0
 16662                           ;UI.c: 431: else if(cur_state == 23){
 16663  00267E  0E17               	movlw	23
 16664  002680  0100               	movlb	0	; () banked
 16665  002682  19DE               	xorwf	_cur_state& (0+255),w,b
 16666  002684  0100               	movlb	0	; () banked
 16667  002686  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16668  002688  A4D8               	btfss	status,2,c
 16669  00268A  D003               	goto	i2l6132
 16670                           
 16671                           ; BSR set to: 0
 16672                           ;UI.c: 432: change_state_to_menu_22();
 16673  00268C  ECD2  F01F         	call	i2_change_state_to_menu_22	;wreg free
 16674                           
 16675                           ;UI.c: 433: }
 16676  002690  D002               	goto	i2l6134
 16677  002692                     i2l6132:
 16678                           
 16679                           ;UI.c: 434: else{
 16680                           ;UI.c: 435: change_state_to_menu_12();
 16681  002692  ECEA  F01F         	call	i2_change_state_to_menu_12	;wreg free
 16682  002696                     i2l6134:
 16683                           
 16684                           ;UI.c: 436: }
 16685                           ;UI.c: 437: return 0;
 16686  002696  0E00               	movlw	0
 16687  002698  6E2B               	movwf	?_inputHandler+1,c
 16688  00269A  0E00               	movlw	0
 16689  00269C  6E2A               	movwf	?_inputHandler,c
 16690  00269E  0012               	return	
 16691  0026A0                     i2l6138:
 16692                           
 16693                           ;UI.c: 439: if(cur_state == 23){
 16694  0026A0  0E17               	movlw	23
 16695  0026A2  0100               	movlb	0	; () banked
 16696  0026A4  19DE               	xorwf	_cur_state& (0+255),w,b
 16697  0026A6  0100               	movlb	0	; () banked
 16698  0026A8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16699  0026AA  A4D8               	btfss	status,2,c
 16700  0026AC  D005               	goto	i2l6146
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;UI.c: 440: return 0;
 16704  0026AE  0E00               	movlw	0
 16705  0026B0  6E2B               	movwf	?_inputHandler+1,c
 16706  0026B2  0E00               	movlw	0
 16707  0026B4  6E2A               	movwf	?_inputHandler,c
 16708                           
 16709                           ; BSR set to: 0
 16710  0026B6  0012               	return	
 16711  0026B8                     i2l6146:
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;UI.c: 442: else{
 16715                           ;UI.c: 443: change_state_to_menu_23();
 16716  0026B8  EC02  F020         	call	_change_state_to_menu_23	;wreg free
 16717                           
 16718                           ;UI.c: 444: }
 16719                           ;UI.c: 445: return 0;
 16720  0026BC  0E00               	movlw	0
 16721  0026BE  6E2B               	movwf	?_inputHandler+1,c
 16722  0026C0  0E00               	movlw	0
 16723  0026C2  6E2A               	movwf	?_inputHandler,c
 16724  0026C4  0012               	return	
 16725  0026C6                     i2l6152:
 16726                           
 16727                           ;UI.c: 448: up = 1;
 16728  0026C6  0E00               	movlw	0
 16729  0026C8  6E78               	movwf	_up+1,c
 16730  0026CA  0E01               	movlw	1
 16731  0026CC  6E77               	movwf	_up,c
 16732                           
 16733                           ;UI.c: 449: return 1;
 16734  0026CE  0E00               	movlw	0
 16735  0026D0  6E2B               	movwf	?_inputHandler+1,c
 16736  0026D2  0E01               	movlw	1
 16737  0026D4  6E2A               	movwf	?_inputHandler,c
 16738  0026D6  0012               	return	
 16739  0026D8                     i2l6156:
 16740                           
 16741                           ;UI.c: 451: down = 1;
 16742  0026D8  0E00               	movlw	0
 16743  0026DA  6E68               	movwf	_down+1,c
 16744  0026DC  0E01               	movlw	1
 16745  0026DE  6E67               	movwf	_down,c
 16746                           
 16747                           ;UI.c: 452: return 1;
 16748  0026E0  0E00               	movlw	0
 16749  0026E2  6E2B               	movwf	?_inputHandler+1,c
 16750  0026E4  0E01               	movlw	1
 16751  0026E6  6E2A               	movwf	?_inputHandler,c
 16752  0026E8  0012               	return	
 16753  0026EA                     i2l6160:
 16754                           
 16755                           ;UI.c: 454: enter = 1;
 16756  0026EA  0E00               	movlw	0
 16757  0026EC  6E6A               	movwf	_enter+1,c
 16758  0026EE  0E01               	movlw	1
 16759  0026F0  6E69               	movwf	_enter,c
 16760                           
 16761                           ;UI.c: 455: return 1;
 16762  0026F2  0E00               	movlw	0
 16763  0026F4  6E2B               	movwf	?_inputHandler+1,c
 16764  0026F6  0E01               	movlw	1
 16765  0026F8  6E2A               	movwf	?_inputHandler,c
 16766  0026FA  0012               	return	
 16767  0026FC                     i2l6164:
 16768                           
 16769                           ;UI.c: 457: back = 1;
 16770  0026FC  0E00               	movlw	0
 16771  0026FE  6E5C               	movwf	_back+1,c
 16772  002700  0E01               	movlw	1
 16773  002702  6E5B               	movwf	_back,c
 16774                           
 16775                           ;UI.c: 458: return 1;
 16776  002704  0E00               	movlw	0
 16777  002706  6E2B               	movwf	?_inputHandler+1,c
 16778  002708  0E01               	movlw	1
 16779  00270A  6E2A               	movwf	?_inputHandler,c
 16780  00270C  0012               	return	
 16781  00270E                     i2l6168:
 16782                           
 16783                           ;UI.c: 461: return 1;
 16784  00270E  0E00               	movlw	0
 16785  002710  6E2B               	movwf	?_inputHandler+1,c
 16786  002712  0E01               	movlw	1
 16787  002714  6E2A               	movwf	?_inputHandler,c
 16788                           
 16789                           ;UI.c: 462: }
 16790  002716  0012               	return	
 16791  002718                     i2l6174:
 16792  002718  507D               	movf	_input,w,c	;volatile
 16793                           
 16794                           ; Switch size 1, requested type "space"
 16795                           ; Number of cases is 7, Range of values is 49 to 68
 16796                           ; switch strategies available:
 16797                           ; Name         Instructions Cycles
 16798                           ; simple_byte           22    12 (average)
 16799                           ;	Chosen strategy is simple_byte
 16800  00271A  0A31               	xorlw	49	; case 49
 16801  00271C  B4D8               	btfsc	status,2,c
 16802  00271E  D789               	goto	i2l6104
 16803  002720  0A03               	xorlw	3	; case 50
 16804  002722  B4D8               	btfsc	status,2,c
 16805  002724  D799               	goto	i2l6118
 16806  002726  0A01               	xorlw	1	; case 51
 16807  002728  B4D8               	btfsc	status,2,c
 16808  00272A  D7BA               	goto	i2l6138
 16809  00272C  0A72               	xorlw	114	; case 65
 16810  00272E  B4D8               	btfsc	status,2,c
 16811  002730  D7CA               	goto	i2l6152
 16812  002732  0A03               	xorlw	3	; case 66
 16813  002734  B4D8               	btfsc	status,2,c
 16814  002736  D7D0               	goto	i2l6156
 16815  002738  0A01               	xorlw	1	; case 67
 16816  00273A  B4D8               	btfsc	status,2,c
 16817  00273C  D7D6               	goto	i2l6160
 16818  00273E  0A07               	xorlw	7	; case 68
 16819  002740  B4D8               	btfsc	status,2,c
 16820  002742  D7DC               	goto	i2l6164
 16821  002744  D7E4               	goto	i2l6168
 16822  002746                     __end_of_inputHandler:
 16823                           	opt stack 0
 16824                           pclatu	equ	0xFFB
 16825                           pclath	equ	0xFFA
 16826                           tblptru	equ	0xFF8
 16827                           tblptrh	equ	0xFF7
 16828                           tblptrl	equ	0xFF6
 16829                           tablat	equ	0xFF5
 16830                           prodh	equ	0xFF4
 16831                           prodl	equ	0xFF3
 16832                           intcon	equ	0xFF2
 16833                           intcon2	equ	0xFF1
 16834                           intcon3	equ	0xFF0
 16835                           indf0	equ	0xFEF
 16836                           postinc0	equ	0xFEE
 16837                           fsr0h	equ	0xFEA
 16838                           fsr0l	equ	0xFE9
 16839                           wreg	equ	0xFE8
 16840                           postdec1	equ	0xFE5
 16841                           fsr1h	equ	0xFE2
 16842                           fsr1l	equ	0xFE1
 16843                           indf2	equ	0xFDF
 16844                           postinc2	equ	0xFDE
 16845                           postdec2	equ	0xFDD
 16846                           fsr2h	equ	0xFDA
 16847                           fsr2l	equ	0xFD9
 16848                           status	equ	0xFD8
 16849                           
 16850 ;; *************** function i2_change_state_to_menu_22 *****************
 16851 ;; Defined at:
 16852 ;;		line 496 in file "UI.c"
 16853 ;; Parameters:    Size  Location     Type
 16854 ;;		None
 16855 ;; Auto vars:     Size  Location     Type
 16856 ;;		None
 16857 ;; Return value:  Size  Location     Type
 16858 ;;                  1    wreg      void 
 16859 ;; Registers used:
 16860 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16861 ;; Tracked objects:
 16862 ;;		On entry : 0/0
 16863 ;;		On exit  : 0/0
 16864 ;;		Unchanged: 0/0
 16865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16870 ;;Total ram usage:        0 bytes
 16871 ;; Hardware stack levels used:    1
 16872 ;; Hardware stack levels required when called:    3
 16873 ;; This function calls:
 16874 ;;		i2_lcdInst
 16875 ;;		i2_printf
 16876 ;; This function is called by:
 16877 ;;		_updateMenu
 16878 ;;		_inputHandler
 16879 ;; This function uses a non-reentrant model
 16880 ;;
 16881                           
 16882                           	psect	text62
 16883  003FA4                     __ptext62:
 16884                           	opt stack 0
 16885  003FA4                     i2_change_state_to_menu_22:
 16886                           	opt stack 19
 16887                           
 16888                           ;UI.c: 497: cur_state = 22;
 16889                           
 16890                           ;incstack = 0
 16891  003FA4  0E00               	movlw	0
 16892  003FA6  0100               	movlb	0	; () banked
 16893  003FA8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16894  003FAA  0E16               	movlw	22
 16895  003FAC  6FDE               	movwf	_cur_state& (0+255),b
 16896                           
 16897                           ; BSR set to: 0
 16898                           ;UI.c: 499: lcdInst(0b10000000);;
 16899  003FAE  0E80               	movlw	128
 16900  003FB0  EC07  F022         	call	i2_lcdInst
 16901                           
 16902                           ;UI.c: 500: printf("2. SORT        <");
 16903  003FB4  0EED               	movlw	low STR_34
 16904  003FB6  6E0D               	movwf	i2printf@f,c
 16905  003FB8  0EFD               	movlw	high STR_34
 16906  003FBA  6E0E               	movwf	i2printf@f+1,c
 16907  003FBC  ECB8  F00A         	call	i2_printf	;wreg free
 16908                           
 16909                           ;UI.c: 501: lcdInst(0b11000000);;
 16910  003FC0  0EC0               	movlw	192
 16911  003FC2  EC07  F022         	call	i2_lcdInst
 16912                           
 16913                           ;UI.c: 502: printf("3. LOGS         ");
 16914  003FC6  0E32               	movlw	low STR_36
 16915  003FC8  6E0D               	movwf	i2printf@f,c
 16916  003FCA  0EFD               	movlw	high STR_36
 16917  003FCC  6E0E               	movwf	i2printf@f+1,c
 16918  003FCE  ECB8  F00A         	call	i2_printf	;wreg free
 16919  003FD2  0012               	return		;funcret
 16920  003FD4                     __end_ofi2_change_state_to_menu_22:
 16921                           	opt stack 0
 16922                           pclatu	equ	0xFFB
 16923                           pclath	equ	0xFFA
 16924                           tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           intcon2	equ	0xFF1
 16932                           intcon3	equ	0xFF0
 16933                           indf0	equ	0xFEF
 16934                           postinc0	equ	0xFEE
 16935                           fsr0h	equ	0xFEA
 16936                           fsr0l	equ	0xFE9
 16937                           wreg	equ	0xFE8
 16938                           postdec1	equ	0xFE5
 16939                           fsr1h	equ	0xFE2
 16940                           fsr1l	equ	0xFE1
 16941                           indf2	equ	0xFDF
 16942                           postinc2	equ	0xFDE
 16943                           postdec2	equ	0xFDD
 16944                           fsr2h	equ	0xFDA
 16945                           fsr2l	equ	0xFD9
 16946                           status	equ	0xFD8
 16947                           
 16948 ;; *************** function i2_change_state_to_menu_12 *****************
 16949 ;; Defined at:
 16950 ;;		line 488 in file "UI.c"
 16951 ;; Parameters:    Size  Location     Type
 16952 ;;		None
 16953 ;; Auto vars:     Size  Location     Type
 16954 ;;		None
 16955 ;; Return value:  Size  Location     Type
 16956 ;;                  1    wreg      void 
 16957 ;; Registers used:
 16958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16959 ;; Tracked objects:
 16960 ;;		On entry : 0/0
 16961 ;;		On exit  : 0/0
 16962 ;;		Unchanged: 0/0
 16963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16968 ;;Total ram usage:        0 bytes
 16969 ;; Hardware stack levels used:    1
 16970 ;; Hardware stack levels required when called:    3
 16971 ;; This function calls:
 16972 ;;		i2_lcdInst
 16973 ;;		i2_printf
 16974 ;; This function is called by:
 16975 ;;		_updateMenu
 16976 ;;		_inputHandler
 16977 ;; This function uses a non-reentrant model
 16978 ;;
 16979                           
 16980                           	psect	text63
 16981  003FD4                     __ptext63:
 16982                           	opt stack 0
 16983  003FD4                     i2_change_state_to_menu_12:
 16984                           	opt stack 19
 16985                           
 16986                           ;UI.c: 489: cur_state = 12;
 16987                           
 16988                           ;incstack = 0
 16989  003FD4  0E00               	movlw	0
 16990  003FD6  0100               	movlb	0	; () banked
 16991  003FD8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16992  003FDA  0E0C               	movlw	12
 16993  003FDC  6FDE               	movwf	_cur_state& (0+255),b
 16994                           
 16995                           ; BSR set to: 0
 16996                           ;UI.c: 491: lcdInst(0b10000000);;
 16997  003FDE  0E80               	movlw	128
 16998  003FE0  EC07  F022         	call	i2_lcdInst
 16999                           
 17000                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17001  003FE4  0E54               	movlw	low STR_33
 17002  003FE6  6E0D               	movwf	i2printf@f,c
 17003  003FE8  0EFD               	movlw	high STR_33
 17004  003FEA  6E0E               	movwf	i2printf@f+1,c
 17005  003FEC  ECB8  F00A         	call	i2_printf	;wreg free
 17006                           
 17007                           ;UI.c: 493: lcdInst(0b11000000);;
 17008  003FF0  0EC0               	movlw	192
 17009  003FF2  EC07  F022         	call	i2_lcdInst
 17010                           
 17011                           ;UI.c: 494: printf("2. SORT        <");
 17012  003FF6  0EED               	movlw	low STR_34
 17013  003FF8  6E0D               	movwf	i2printf@f,c
 17014  003FFA  0EFD               	movlw	high STR_34
 17015  003FFC  6E0E               	movwf	i2printf@f+1,c
 17016  003FFE  ECB8  F00A         	call	i2_printf	;wreg free
 17017  004002  0012               	return		;funcret
 17018  004004                     __end_ofi2_change_state_to_menu_12:
 17019                           	opt stack 0
 17020                           pclatu	equ	0xFFB
 17021                           pclath	equ	0xFFA
 17022                           tblptru	equ	0xFF8
 17023                           tblptrh	equ	0xFF7
 17024                           tblptrl	equ	0xFF6
 17025                           tablat	equ	0xFF5
 17026                           prodh	equ	0xFF4
 17027                           prodl	equ	0xFF3
 17028                           intcon	equ	0xFF2
 17029                           intcon2	equ	0xFF1
 17030                           intcon3	equ	0xFF0
 17031                           indf0	equ	0xFEF
 17032                           postinc0	equ	0xFEE
 17033                           fsr0h	equ	0xFEA
 17034                           fsr0l	equ	0xFE9
 17035                           wreg	equ	0xFE8
 17036                           postdec1	equ	0xFE5
 17037                           fsr1h	equ	0xFE2
 17038                           fsr1l	equ	0xFE1
 17039                           indf2	equ	0xFDF
 17040                           postinc2	equ	0xFDE
 17041                           postdec2	equ	0xFDD
 17042                           fsr2h	equ	0xFDA
 17043                           fsr2l	equ	0xFD9
 17044                           status	equ	0xFD8
 17045                           
 17046 ;; *************** function _change_state_to_menu_23 *****************
 17047 ;; Defined at:
 17048 ;;		line 504 in file "UI.c"
 17049 ;; Parameters:    Size  Location     Type
 17050 ;;		None
 17051 ;; Auto vars:     Size  Location     Type
 17052 ;;		None
 17053 ;; Return value:  Size  Location     Type
 17054 ;;                  1    wreg      void 
 17055 ;; Registers used:
 17056 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17057 ;; Tracked objects:
 17058 ;;		On entry : 0/0
 17059 ;;		On exit  : 0/0
 17060 ;;		Unchanged: 0/0
 17061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17066 ;;Total ram usage:        0 bytes
 17067 ;; Hardware stack levels used:    1
 17068 ;; Hardware stack levels required when called:    3
 17069 ;; This function calls:
 17070 ;;		i2_lcdInst
 17071 ;;		i2_printf
 17072 ;; This function is called by:
 17073 ;;		_updateMenu
 17074 ;;		_inputHandler
 17075 ;; This function uses a non-reentrant model
 17076 ;;
 17077                           
 17078                           	psect	text64
 17079  004004                     __ptext64:
 17080                           	opt stack 0
 17081  004004                     _change_state_to_menu_23:
 17082                           	opt stack 18
 17083                           
 17084                           ;UI.c: 505: cur_state = 23;
 17085                           
 17086                           ;incstack = 0
 17087  004004  0E00               	movlw	0
 17088  004006  0100               	movlb	0	; () banked
 17089  004008  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17090  00400A  0E17               	movlw	23
 17091  00400C  6FDE               	movwf	_cur_state& (0+255),b
 17092                           
 17093                           ; BSR set to: 0
 17094                           ;UI.c: 507: lcdInst(0b10000000);;
 17095  00400E  0E80               	movlw	128
 17096  004010  EC07  F022         	call	i2_lcdInst
 17097                           
 17098                           ;UI.c: 508: printf("2. SORT         ");
 17099  004014  0E43               	movlw	low STR_32
 17100  004016  6E0D               	movwf	i2printf@f,c
 17101  004018  0EFD               	movlw	high STR_32
 17102  00401A  6E0E               	movwf	i2printf@f+1,c
 17103  00401C  ECB8  F00A         	call	i2_printf	;wreg free
 17104                           
 17105                           ;UI.c: 509: lcdInst(0b11000000);;
 17106  004020  0EC0               	movlw	192
 17107  004022  EC07  F022         	call	i2_lcdInst
 17108                           
 17109                           ;UI.c: 510: printf("3. LOGS        <");
 17110  004026  0EDC               	movlw	low STR_38
 17111  004028  6E0D               	movwf	i2printf@f,c
 17112  00402A  0EFD               	movlw	high STR_38
 17113  00402C  6E0E               	movwf	i2printf@f+1,c
 17114  00402E  ECB8  F00A         	call	i2_printf	;wreg free
 17115  004032  0012               	return		;funcret
 17116  004034                     __end_of_change_state_to_menu_23:
 17117                           	opt stack 0
 17118                           pclatu	equ	0xFFB
 17119                           pclath	equ	0xFFA
 17120                           tblptru	equ	0xFF8
 17121                           tblptrh	equ	0xFF7
 17122                           tblptrl	equ	0xFF6
 17123                           tablat	equ	0xFF5
 17124                           prodh	equ	0xFF4
 17125                           prodl	equ	0xFF3
 17126                           intcon	equ	0xFF2
 17127                           intcon2	equ	0xFF1
 17128                           intcon3	equ	0xFF0
 17129                           indf0	equ	0xFEF
 17130                           postinc0	equ	0xFEE
 17131                           fsr0h	equ	0xFEA
 17132                           fsr0l	equ	0xFE9
 17133                           wreg	equ	0xFE8
 17134                           postdec1	equ	0xFE5
 17135                           fsr1h	equ	0xFE2
 17136                           fsr1l	equ	0xFE1
 17137                           indf2	equ	0xFDF
 17138                           postinc2	equ	0xFDE
 17139                           postdec2	equ	0xFDD
 17140                           fsr2h	equ	0xFDA
 17141                           fsr2l	equ	0xFD9
 17142                           status	equ	0xFD8
 17143                           
 17144 ;; *************** function _change_state_to_menu_11 *****************
 17145 ;; Defined at:
 17146 ;;		line 480 in file "UI.c"
 17147 ;; Parameters:    Size  Location     Type
 17148 ;;		None
 17149 ;; Auto vars:     Size  Location     Type
 17150 ;;		None
 17151 ;; Return value:  Size  Location     Type
 17152 ;;                  1    wreg      void 
 17153 ;; Registers used:
 17154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17155 ;; Tracked objects:
 17156 ;;		On entry : 0/0
 17157 ;;		On exit  : 0/0
 17158 ;;		Unchanged: 0/0
 17159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;Total ram usage:        0 bytes
 17165 ;; Hardware stack levels used:    1
 17166 ;; Hardware stack levels required when called:    3
 17167 ;; This function calls:
 17168 ;;		i2_lcdInst
 17169 ;;		i2_printf
 17170 ;; This function is called by:
 17171 ;;		_updateMenu
 17172 ;;		_inputHandler
 17173 ;; This function uses a non-reentrant model
 17174 ;;
 17175                           
 17176                           	psect	text65
 17177  004034                     __ptext65:
 17178                           	opt stack 0
 17179  004034                     _change_state_to_menu_11:
 17180                           	opt stack 18
 17181                           
 17182                           ;UI.c: 481: cur_state = 11;
 17183                           
 17184                           ;incstack = 0
 17185  004034  0E00               	movlw	0
 17186  004036  0100               	movlb	0	; () banked
 17187  004038  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17188  00403A  0E0B               	movlw	11
 17189  00403C  6FDE               	movwf	_cur_state& (0+255),b
 17190                           
 17191                           ; BSR set to: 0
 17192                           ;UI.c: 483: lcdInst(0b10000000);;
 17193  00403E  0E80               	movlw	128
 17194  004040  EC07  F022         	call	i2_lcdInst
 17195                           
 17196                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17197  004044  0EFE               	movlw	low STR_31
 17198  004046  6E0D               	movwf	i2printf@f,c
 17199  004048  0EFD               	movlw	high STR_31
 17200  00404A  6E0E               	movwf	i2printf@f+1,c
 17201  00404C  ECB8  F00A         	call	i2_printf	;wreg free
 17202                           
 17203                           ;UI.c: 485: lcdInst(0b11000000);;
 17204  004050  0EC0               	movlw	192
 17205  004052  EC07  F022         	call	i2_lcdInst
 17206                           
 17207                           ;UI.c: 486: printf("2. SORT         ");
 17208  004056  0E43               	movlw	low STR_32
 17209  004058  6E0D               	movwf	i2printf@f,c
 17210  00405A  0EFD               	movlw	high STR_32
 17211  00405C  6E0E               	movwf	i2printf@f+1,c
 17212  00405E  ECB8  F00A         	call	i2_printf	;wreg free
 17213  004062  0012               	return		;funcret
 17214  004064                     __end_of_change_state_to_menu_11:
 17215                           	opt stack 0
 17216                           pclatu	equ	0xFFB
 17217                           pclath	equ	0xFFA
 17218                           tblptru	equ	0xFF8
 17219                           tblptrh	equ	0xFF7
 17220                           tblptrl	equ	0xFF6
 17221                           tablat	equ	0xFF5
 17222                           prodh	equ	0xFF4
 17223                           prodl	equ	0xFF3
 17224                           intcon	equ	0xFF2
 17225                           intcon2	equ	0xFF1
 17226                           intcon3	equ	0xFF0
 17227                           indf0	equ	0xFEF
 17228                           postinc0	equ	0xFEE
 17229                           fsr0h	equ	0xFEA
 17230                           fsr0l	equ	0xFE9
 17231                           wreg	equ	0xFE8
 17232                           postdec1	equ	0xFE5
 17233                           fsr1h	equ	0xFE2
 17234                           fsr1l	equ	0xFE1
 17235                           indf2	equ	0xFDF
 17236                           postinc2	equ	0xFDE
 17237                           postdec2	equ	0xFDD
 17238                           fsr2h	equ	0xFDA
 17239                           fsr2l	equ	0xFD9
 17240                           status	equ	0xFD8
 17241                           
 17242 ;; *************** function _change_state_to_logs_34 *****************
 17243 ;; Defined at:
 17244 ;;		line 547 in file "UI.c"
 17245 ;; Parameters:    Size  Location     Type
 17246 ;;		None
 17247 ;; Auto vars:     Size  Location     Type
 17248 ;;		None
 17249 ;; Return value:  Size  Location     Type
 17250 ;;                  1    wreg      void 
 17251 ;; Registers used:
 17252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17253 ;; Tracked objects:
 17254 ;;		On entry : 0/0
 17255 ;;		On exit  : 0/0
 17256 ;;		Unchanged: 0/0
 17257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17262 ;;Total ram usage:        0 bytes
 17263 ;; Hardware stack levels used:    1
 17264 ;; Hardware stack levels required when called:    3
 17265 ;; This function calls:
 17266 ;;		i2_lcdInst
 17267 ;;		i2_printf
 17268 ;; This function is called by:
 17269 ;;		_updateMenu
 17270 ;;		_inputHandler
 17271 ;; This function uses a non-reentrant model
 17272 ;;
 17273                           
 17274                           	psect	text66
 17275  004064                     __ptext66:
 17276                           	opt stack 0
 17277  004064                     _change_state_to_logs_34:
 17278                           	opt stack 18
 17279                           
 17280                           ;UI.c: 548: cur_state = 1034;
 17281                           
 17282                           ;incstack = 0
 17283  004064  0E04               	movlw	4
 17284  004066  0100               	movlb	0	; () banked
 17285  004068  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17286  00406A  0E0A               	movlw	10
 17287  00406C  6FDE               	movwf	_cur_state& (0+255),b
 17288                           
 17289                           ; BSR set to: 0
 17290                           ;UI.c: 549: lcdInst(0b10000000);;
 17291  00406E  0E80               	movlw	128
 17292  004070  EC07  F022         	call	i2_lcdInst
 17293                           
 17294                           ;UI.c: 550: printf("LOG 3           ");
 17295  004074  0E10               	movlw	low STR_44
 17296  004076  6E0D               	movwf	i2printf@f,c
 17297  004078  0EFD               	movlw	high STR_44
 17298  00407A  6E0E               	movwf	i2printf@f+1,c
 17299  00407C  ECB8  F00A         	call	i2_printf	;wreg free
 17300                           
 17301                           ;UI.c: 551: lcdInst(0b11000000);;
 17302  004080  0EC0               	movlw	192
 17303  004082  EC07  F022         	call	i2_lcdInst
 17304                           
 17305                           ;UI.c: 552: printf("LOG 4          <");
 17306  004086  0ECB               	movlw	low STR_50
 17307  004088  6E0D               	movwf	i2printf@f,c
 17308  00408A  0EFD               	movlw	high STR_50
 17309  00408C  6E0E               	movwf	i2printf@f+1,c
 17310  00408E  ECB8  F00A         	call	i2_printf	;wreg free
 17311  004092  0012               	return		;funcret
 17312  004094                     __end_of_change_state_to_logs_34:
 17313                           	opt stack 0
 17314                           pclatu	equ	0xFFB
 17315                           pclath	equ	0xFFA
 17316                           tblptru	equ	0xFF8
 17317                           tblptrh	equ	0xFF7
 17318                           tblptrl	equ	0xFF6
 17319                           tablat	equ	0xFF5
 17320                           prodh	equ	0xFF4
 17321                           prodl	equ	0xFF3
 17322                           intcon	equ	0xFF2
 17323                           intcon2	equ	0xFF1
 17324                           intcon3	equ	0xFF0
 17325                           indf0	equ	0xFEF
 17326                           postinc0	equ	0xFEE
 17327                           fsr0h	equ	0xFEA
 17328                           fsr0l	equ	0xFE9
 17329                           wreg	equ	0xFE8
 17330                           postdec1	equ	0xFE5
 17331                           fsr1h	equ	0xFE2
 17332                           fsr1l	equ	0xFE1
 17333                           indf2	equ	0xFDF
 17334                           postinc2	equ	0xFDE
 17335                           postdec2	equ	0xFDD
 17336                           fsr2h	equ	0xFDA
 17337                           fsr2l	equ	0xFD9
 17338                           status	equ	0xFD8
 17339                           
 17340 ;; *************** function _change_state_to_logs_33 *****************
 17341 ;; Defined at:
 17342 ;;		line 540 in file "UI.c"
 17343 ;; Parameters:    Size  Location     Type
 17344 ;;		None
 17345 ;; Auto vars:     Size  Location     Type
 17346 ;;		None
 17347 ;; Return value:  Size  Location     Type
 17348 ;;                  1    wreg      void 
 17349 ;; Registers used:
 17350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17351 ;; Tracked objects:
 17352 ;;		On entry : 0/0
 17353 ;;		On exit  : 0/0
 17354 ;;		Unchanged: 0/0
 17355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17360 ;;Total ram usage:        0 bytes
 17361 ;; Hardware stack levels used:    1
 17362 ;; Hardware stack levels required when called:    3
 17363 ;; This function calls:
 17364 ;;		i2_lcdInst
 17365 ;;		i2_printf
 17366 ;; This function is called by:
 17367 ;;		_updateMenu
 17368 ;;		_inputHandler
 17369 ;; This function uses a non-reentrant model
 17370 ;;
 17371                           
 17372                           	psect	text67
 17373  004094                     __ptext67:
 17374                           	opt stack 0
 17375  004094                     _change_state_to_logs_33:
 17376                           	opt stack 18
 17377                           
 17378                           ;UI.c: 541: cur_state = 1033;
 17379                           
 17380                           ;incstack = 0
 17381  004094  0E04               	movlw	4
 17382  004096  0100               	movlb	0	; () banked
 17383  004098  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17384  00409A  0E09               	movlw	9
 17385  00409C  6FDE               	movwf	_cur_state& (0+255),b
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;UI.c: 542: lcdInst(0b10000000);;
 17389  00409E  0E80               	movlw	128
 17390  0040A0  EC07  F022         	call	i2_lcdInst
 17391                           
 17392                           ;UI.c: 543: printf("LOG 3          <");
 17393  0040A4  0EBA               	movlw	low STR_46
 17394  0040A6  6E0D               	movwf	i2printf@f,c
 17395  0040A8  0EFD               	movlw	high STR_46
 17396  0040AA  6E0E               	movwf	i2printf@f+1,c
 17397  0040AC  ECB8  F00A         	call	i2_printf	;wreg free
 17398                           
 17399                           ;UI.c: 544: lcdInst(0b11000000);;
 17400  0040B0  0EC0               	movlw	192
 17401  0040B2  EC07  F022         	call	i2_lcdInst
 17402                           
 17403                           ;UI.c: 545: printf("LOG 4           ");
 17404  0040B6  0E21               	movlw	low STR_48
 17405  0040B8  6E0D               	movwf	i2printf@f,c
 17406  0040BA  0EFD               	movlw	high STR_48
 17407  0040BC  6E0E               	movwf	i2printf@f+1,c
 17408  0040BE  ECB8  F00A         	call	i2_printf	;wreg free
 17409  0040C2  0012               	return		;funcret
 17410  0040C4                     __end_of_change_state_to_logs_33:
 17411                           	opt stack 0
 17412                           pclatu	equ	0xFFB
 17413                           pclath	equ	0xFFA
 17414                           tblptru	equ	0xFF8
 17415                           tblptrh	equ	0xFF7
 17416                           tblptrl	equ	0xFF6
 17417                           tablat	equ	0xFF5
 17418                           prodh	equ	0xFF4
 17419                           prodl	equ	0xFF3
 17420                           intcon	equ	0xFF2
 17421                           intcon2	equ	0xFF1
 17422                           intcon3	equ	0xFF0
 17423                           indf0	equ	0xFEF
 17424                           postinc0	equ	0xFEE
 17425                           fsr0h	equ	0xFEA
 17426                           fsr0l	equ	0xFE9
 17427                           wreg	equ	0xFE8
 17428                           postdec1	equ	0xFE5
 17429                           fsr1h	equ	0xFE2
 17430                           fsr1l	equ	0xFE1
 17431                           indf2	equ	0xFDF
 17432                           postinc2	equ	0xFDE
 17433                           postdec2	equ	0xFDD
 17434                           fsr2h	equ	0xFDA
 17435                           fsr2l	equ	0xFD9
 17436                           status	equ	0xFD8
 17437                           
 17438 ;; *************** function _change_state_to_logs_23 *****************
 17439 ;; Defined at:
 17440 ;;		line 533 in file "UI.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;		None
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;		None
 17445 ;; Return value:  Size  Location     Type
 17446 ;;                  1    wreg      void 
 17447 ;; Registers used:
 17448 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17449 ;; Tracked objects:
 17450 ;;		On entry : 0/0
 17451 ;;		On exit  : 0/0
 17452 ;;		Unchanged: 0/0
 17453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17458 ;;Total ram usage:        0 bytes
 17459 ;; Hardware stack levels used:    1
 17460 ;; Hardware stack levels required when called:    3
 17461 ;; This function calls:
 17462 ;;		i2_lcdInst
 17463 ;;		i2_printf
 17464 ;; This function is called by:
 17465 ;;		_updateMenu
 17466 ;;		_inputHandler
 17467 ;; This function uses a non-reentrant model
 17468 ;;
 17469                           
 17470                           	psect	text68
 17471  004182                     __ptext68:
 17472                           	opt stack 0
 17473  004182                     _change_state_to_logs_23:
 17474                           	opt stack 18
 17475                           
 17476                           ;UI.c: 534: cur_state = 1023;
 17477                           
 17478                           ;incstack = 0
 17479  004182  0E03               	movlw	3
 17480  004184  0100               	movlb	0	; () banked
 17481  004186  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17482  004188  69DE               	setf	_cur_state& (0+255),b
 17483                           
 17484                           ; BSR set to: 0
 17485                           ;UI.c: 535: lcdInst(0b10000000);;
 17486  00418A  0E80               	movlw	128
 17487  00418C  EC07  F022         	call	i2_lcdInst
 17488                           
 17489                           ;UI.c: 536: printf("LOG 2           ");
 17490  004190  0EFF               	movlw	low STR_40
 17491  004192  6E0D               	movwf	i2printf@f,c
 17492  004194  0EFC               	movlw	high STR_40
 17493  004196  6E0E               	movwf	i2printf@f+1,c
 17494  004198  ECB8  F00A         	call	i2_printf	;wreg free
 17495                           
 17496                           ;UI.c: 537: lcdInst(0b11000000);;
 17497  00419C  0EC0               	movlw	192
 17498  00419E  EC07  F022         	call	i2_lcdInst
 17499                           
 17500                           ;UI.c: 538: printf("LOG 3          <");
 17501  0041A2  0EBA               	movlw	low STR_46
 17502  0041A4  6E0D               	movwf	i2printf@f,c
 17503  0041A6  0EFD               	movlw	high STR_46
 17504  0041A8  6E0E               	movwf	i2printf@f+1,c
 17505  0041AA  ECB8  F00A         	call	i2_printf	;wreg free
 17506  0041AE  0012               	return		;funcret
 17507  0041B0                     __end_of_change_state_to_logs_23:
 17508                           	opt stack 0
 17509                           pclatu	equ	0xFFB
 17510                           pclath	equ	0xFFA
 17511                           tblptru	equ	0xFF8
 17512                           tblptrh	equ	0xFF7
 17513                           tblptrl	equ	0xFF6
 17514                           tablat	equ	0xFF5
 17515                           prodh	equ	0xFF4
 17516                           prodl	equ	0xFF3
 17517                           intcon	equ	0xFF2
 17518                           intcon2	equ	0xFF1
 17519                           intcon3	equ	0xFF0
 17520                           indf0	equ	0xFEF
 17521                           postinc0	equ	0xFEE
 17522                           fsr0h	equ	0xFEA
 17523                           fsr0l	equ	0xFE9
 17524                           wreg	equ	0xFE8
 17525                           postdec1	equ	0xFE5
 17526                           fsr1h	equ	0xFE2
 17527                           fsr1l	equ	0xFE1
 17528                           indf2	equ	0xFDF
 17529                           postinc2	equ	0xFDE
 17530                           postdec2	equ	0xFDD
 17531                           fsr2h	equ	0xFDA
 17532                           fsr2l	equ	0xFD9
 17533                           status	equ	0xFD8
 17534                           
 17535 ;; *************** function _change_state_to_logs_22 *****************
 17536 ;; Defined at:
 17537 ;;		line 526 in file "UI.c"
 17538 ;; Parameters:    Size  Location     Type
 17539 ;;		None
 17540 ;; Auto vars:     Size  Location     Type
 17541 ;;		None
 17542 ;; Return value:  Size  Location     Type
 17543 ;;                  1    wreg      void 
 17544 ;; Registers used:
 17545 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17546 ;; Tracked objects:
 17547 ;;		On entry : 0/0
 17548 ;;		On exit  : 0/0
 17549 ;;		Unchanged: 0/0
 17550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17555 ;;Total ram usage:        0 bytes
 17556 ;; Hardware stack levels used:    1
 17557 ;; Hardware stack levels required when called:    3
 17558 ;; This function calls:
 17559 ;;		i2_lcdInst
 17560 ;;		i2_printf
 17561 ;; This function is called by:
 17562 ;;		_updateMenu
 17563 ;;		_inputHandler
 17564 ;; This function uses a non-reentrant model
 17565 ;;
 17566                           
 17567                           	psect	text69
 17568  0040C4                     __ptext69:
 17569                           	opt stack 0
 17570  0040C4                     _change_state_to_logs_22:
 17571                           	opt stack 18
 17572                           
 17573                           ;UI.c: 527: cur_state = 1022;
 17574                           
 17575                           ;incstack = 0
 17576  0040C4  0E03               	movlw	3
 17577  0040C6  0100               	movlb	0	; () banked
 17578  0040C8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17579  0040CA  0EFE               	movlw	254
 17580  0040CC  6FDE               	movwf	_cur_state& (0+255),b
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;UI.c: 528: lcdInst(0b10000000);;
 17584  0040CE  0E80               	movlw	128
 17585  0040D0  EC07  F022         	call	i2_lcdInst
 17586                           
 17587                           ;UI.c: 529: printf("LOG 2          <");
 17588  0040D4  0EA9               	movlw	low STR_42
 17589  0040D6  6E0D               	movwf	i2printf@f,c
 17590  0040D8  0EFD               	movlw	high STR_42
 17591  0040DA  6E0E               	movwf	i2printf@f+1,c
 17592  0040DC  ECB8  F00A         	call	i2_printf	;wreg free
 17593                           
 17594                           ;UI.c: 530: lcdInst(0b11000000);;
 17595  0040E0  0EC0               	movlw	192
 17596  0040E2  EC07  F022         	call	i2_lcdInst
 17597                           
 17598                           ;UI.c: 531: printf("LOG 3           ");
 17599  0040E6  0E10               	movlw	low STR_44
 17600  0040E8  6E0D               	movwf	i2printf@f,c
 17601  0040EA  0EFD               	movlw	high STR_44
 17602  0040EC  6E0E               	movwf	i2printf@f+1,c
 17603  0040EE  ECB8  F00A         	call	i2_printf	;wreg free
 17604  0040F2  0012               	return		;funcret
 17605  0040F4                     __end_of_change_state_to_logs_22:
 17606                           	opt stack 0
 17607                           pclatu	equ	0xFFB
 17608                           pclath	equ	0xFFA
 17609                           tblptru	equ	0xFF8
 17610                           tblptrh	equ	0xFF7
 17611                           tblptrl	equ	0xFF6
 17612                           tablat	equ	0xFF5
 17613                           prodh	equ	0xFF4
 17614                           prodl	equ	0xFF3
 17615                           intcon	equ	0xFF2
 17616                           intcon2	equ	0xFF1
 17617                           intcon3	equ	0xFF0
 17618                           indf0	equ	0xFEF
 17619                           postinc0	equ	0xFEE
 17620                           fsr0h	equ	0xFEA
 17621                           fsr0l	equ	0xFE9
 17622                           wreg	equ	0xFE8
 17623                           postdec1	equ	0xFE5
 17624                           fsr1h	equ	0xFE2
 17625                           fsr1l	equ	0xFE1
 17626                           indf2	equ	0xFDF
 17627                           postinc2	equ	0xFDE
 17628                           postdec2	equ	0xFDD
 17629                           fsr2h	equ	0xFDA
 17630                           fsr2l	equ	0xFD9
 17631                           status	equ	0xFD8
 17632                           
 17633 ;; *************** function _change_state_to_logs_12 *****************
 17634 ;; Defined at:
 17635 ;;		line 519 in file "UI.c"
 17636 ;; Parameters:    Size  Location     Type
 17637 ;;		None
 17638 ;; Auto vars:     Size  Location     Type
 17639 ;;		None
 17640 ;; Return value:  Size  Location     Type
 17641 ;;                  1    wreg      void 
 17642 ;; Registers used:
 17643 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17644 ;; Tracked objects:
 17645 ;;		On entry : 0/0
 17646 ;;		On exit  : 0/0
 17647 ;;		Unchanged: 0/0
 17648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17653 ;;Total ram usage:        0 bytes
 17654 ;; Hardware stack levels used:    1
 17655 ;; Hardware stack levels required when called:    3
 17656 ;; This function calls:
 17657 ;;		i2_lcdInst
 17658 ;;		i2_printf
 17659 ;; This function is called by:
 17660 ;;		_updateMenu
 17661 ;;		_inputHandler
 17662 ;; This function uses a non-reentrant model
 17663 ;;
 17664                           
 17665                           	psect	text70
 17666  0040F4                     __ptext70:
 17667                           	opt stack 0
 17668  0040F4                     _change_state_to_logs_12:
 17669                           	opt stack 18
 17670                           
 17671                           ;UI.c: 520: cur_state = 1012;
 17672                           
 17673                           ;incstack = 0
 17674  0040F4  0E03               	movlw	3
 17675  0040F6  0100               	movlb	0	; () banked
 17676  0040F8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17677  0040FA  0EF4               	movlw	244
 17678  0040FC  6FDE               	movwf	_cur_state& (0+255),b
 17679                           
 17680                           ; BSR set to: 0
 17681                           ;UI.c: 521: lcdInst(0b10000000);;
 17682  0040FE  0E80               	movlw	128
 17683  004100  EC07  F022         	call	i2_lcdInst
 17684                           
 17685                           ;UI.c: 522: printf("LOG 1           ");
 17686  004104  0EEE               	movlw	low STR_41
 17687  004106  6E0D               	movwf	i2printf@f,c
 17688  004108  0EFC               	movlw	high STR_41
 17689  00410A  6E0E               	movwf	i2printf@f+1,c
 17690  00410C  ECB8  F00A         	call	i2_printf	;wreg free
 17691                           
 17692                           ;UI.c: 523: lcdInst(0b11000000);;
 17693  004110  0EC0               	movlw	192
 17694  004112  EC07  F022         	call	i2_lcdInst
 17695                           
 17696                           ;UI.c: 524: printf("LOG 2          <");
 17697  004116  0EA9               	movlw	low STR_42
 17698  004118  6E0D               	movwf	i2printf@f,c
 17699  00411A  0EFD               	movlw	high STR_42
 17700  00411C  6E0E               	movwf	i2printf@f+1,c
 17701  00411E  ECB8  F00A         	call	i2_printf	;wreg free
 17702  004122  0012               	return		;funcret
 17703  004124                     __end_of_change_state_to_logs_12:
 17704                           	opt stack 0
 17705                           pclatu	equ	0xFFB
 17706                           pclath	equ	0xFFA
 17707                           tblptru	equ	0xFF8
 17708                           tblptrh	equ	0xFF7
 17709                           tblptrl	equ	0xFF6
 17710                           tablat	equ	0xFF5
 17711                           prodh	equ	0xFF4
 17712                           prodl	equ	0xFF3
 17713                           intcon	equ	0xFF2
 17714                           intcon2	equ	0xFF1
 17715                           intcon3	equ	0xFF0
 17716                           indf0	equ	0xFEF
 17717                           postinc0	equ	0xFEE
 17718                           fsr0h	equ	0xFEA
 17719                           fsr0l	equ	0xFE9
 17720                           wreg	equ	0xFE8
 17721                           postdec1	equ	0xFE5
 17722                           fsr1h	equ	0xFE2
 17723                           fsr1l	equ	0xFE1
 17724                           indf2	equ	0xFDF
 17725                           postinc2	equ	0xFDE
 17726                           postdec2	equ	0xFDD
 17727                           fsr2h	equ	0xFDA
 17728                           fsr2l	equ	0xFD9
 17729                           status	equ	0xFD8
 17730                           
 17731 ;; *************** function _change_state_to_logs_11 *****************
 17732 ;; Defined at:
 17733 ;;		line 512 in file "UI.c"
 17734 ;; Parameters:    Size  Location     Type
 17735 ;;		None
 17736 ;; Auto vars:     Size  Location     Type
 17737 ;;		None
 17738 ;; Return value:  Size  Location     Type
 17739 ;;                  1    wreg      void 
 17740 ;; Registers used:
 17741 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17742 ;; Tracked objects:
 17743 ;;		On entry : 0/0
 17744 ;;		On exit  : 0/0
 17745 ;;		Unchanged: 0/0
 17746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17751 ;;Total ram usage:        0 bytes
 17752 ;; Hardware stack levels used:    1
 17753 ;; Hardware stack levels required when called:    3
 17754 ;; This function calls:
 17755 ;;		i2_lcdInst
 17756 ;;		i2_printf
 17757 ;; This function is called by:
 17758 ;;		_updateMenu
 17759 ;;		_inputHandler
 17760 ;; This function uses a non-reentrant model
 17761 ;;
 17762                           
 17763                           	psect	text71
 17764  004124                     __ptext71:
 17765                           	opt stack 0
 17766  004124                     _change_state_to_logs_11:
 17767                           	opt stack 18
 17768                           
 17769                           ;UI.c: 513: cur_state = 1011;
 17770                           
 17771                           ;incstack = 0
 17772  004124  0E03               	movlw	3
 17773  004126  0100               	movlb	0	; () banked
 17774  004128  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17775  00412A  0EF3               	movlw	243
 17776  00412C  6FDE               	movwf	_cur_state& (0+255),b
 17777                           
 17778                           ; BSR set to: 0
 17779                           ;UI.c: 514: lcdInst(0b10000000);;
 17780  00412E  0E80               	movlw	128
 17781  004130  EC07  F022         	call	i2_lcdInst
 17782                           
 17783                           ;UI.c: 515: printf("LOG 1          <");
 17784  004134  0E98               	movlw	low STR_39
 17785  004136  6E0D               	movwf	i2printf@f,c
 17786  004138  0EFD               	movlw	high STR_39
 17787  00413A  6E0E               	movwf	i2printf@f+1,c
 17788  00413C  ECB8  F00A         	call	i2_printf	;wreg free
 17789                           
 17790                           ;UI.c: 516: lcdInst(0b11000000);;
 17791  004140  0EC0               	movlw	192
 17792  004142  EC07  F022         	call	i2_lcdInst
 17793                           
 17794                           ;UI.c: 517: printf("LOG 2           ");
 17795  004146  0EFF               	movlw	low STR_40
 17796  004148  6E0D               	movwf	i2printf@f,c
 17797  00414A  0EFC               	movlw	high STR_40
 17798  00414C  6E0E               	movwf	i2printf@f+1,c
 17799  00414E  ECB8  F00A         	call	i2_printf	;wreg free
 17800  004152  0012               	return		;funcret
 17801  004154                     __end_of_change_state_to_logs_11:
 17802                           	opt stack 0
 17803                           pclatu	equ	0xFFB
 17804                           pclath	equ	0xFFA
 17805                           tblptru	equ	0xFF8
 17806                           tblptrh	equ	0xFF7
 17807                           tblptrl	equ	0xFF6
 17808                           tablat	equ	0xFF5
 17809                           prodh	equ	0xFF4
 17810                           prodl	equ	0xFF3
 17811                           intcon	equ	0xFF2
 17812                           intcon2	equ	0xFF1
 17813                           intcon3	equ	0xFF0
 17814                           indf0	equ	0xFEF
 17815                           postinc0	equ	0xFEE
 17816                           fsr0h	equ	0xFEA
 17817                           fsr0l	equ	0xFE9
 17818                           wreg	equ	0xFE8
 17819                           postdec1	equ	0xFE5
 17820                           fsr1h	equ	0xFE2
 17821                           fsr1l	equ	0xFE1
 17822                           indf2	equ	0xFDF
 17823                           postinc2	equ	0xFDE
 17824                           postdec2	equ	0xFDD
 17825                           fsr2h	equ	0xFDA
 17826                           fsr2l	equ	0xFD9
 17827                           status	equ	0xFD8
 17828                           
 17829 ;; *************** function _dispLogs *****************
 17830 ;; Defined at:
 17831 ;;		line 465 in file "UI.c"
 17832 ;; Parameters:    Size  Location     Type
 17833 ;;  myLog           2   17[COMRAM] int 
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;		None
 17836 ;; Return value:  Size  Location     Type
 17837 ;;                  1    wreg      void 
 17838 ;; Registers used:
 17839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/0
 17842 ;;		On exit  : 0/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17845 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17849 ;;Total ram usage:        2 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    2
 17852 ;; This function calls:
 17853 ;;		_retrieveLog
 17854 ;; This function is called by:
 17855 ;;		_updateMenu
 17856 ;; This function uses a non-reentrant model
 17857 ;;
 17858                           
 17859                           	psect	text72
 17860  0042F2                     __ptext72:
 17861                           	opt stack 0
 17862  0042F2                     _dispLogs:
 17863                           	opt stack 20
 17864                           
 17865                           ;UI.c: 466: logstate = 1;
 17866                           
 17867                           ;incstack = 0
 17868  0042F2  0E00               	movlw	0
 17869  0042F4  0100               	movlb	0	; () banked
 17870  0042F6  6FF7               	movwf	(_logstate+1)& (0+255),b
 17871  0042F8  0E01               	movlw	1
 17872  0042FA  6FF6               	movwf	_logstate& (0+255),b
 17873                           
 17874                           ; BSR set to: 0
 17875                           ;UI.c: 467: log = myLog;
 17876  0042FC  C012  F0E6         	movff	dispLogs@myLog,_log
 17877  004300  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;UI.c: 468: retrieveLog(myLog - 1);
 17881  004304  0EFF               	movlw	255
 17882  004306  2412               	addwf	dispLogs@myLog,w,c
 17883  004308  6E07               	movwf	retrieveLog@logNum,c
 17884  00430A  0EFF               	movlw	255
 17885  00430C  2013               	addwfc	dispLogs@myLog+1,w,c
 17886  00430E  6E08               	movwf	retrieveLog@logNum+1,c
 17887  004310  ECF1  F016         	call	_retrieveLog	;wreg free
 17888  004314  0012               	return		;funcret
 17889  004316                     __end_of_dispLogs:
 17890                           	opt stack 0
 17891                           pclatu	equ	0xFFB
 17892                           pclath	equ	0xFFA
 17893                           tblptru	equ	0xFF8
 17894                           tblptrh	equ	0xFF7
 17895                           tblptrl	equ	0xFF6
 17896                           tablat	equ	0xFF5
 17897                           prodh	equ	0xFF4
 17898                           prodl	equ	0xFF3
 17899                           intcon	equ	0xFF2
 17900                           intcon2	equ	0xFF1
 17901                           intcon3	equ	0xFF0
 17902                           indf0	equ	0xFEF
 17903                           postinc0	equ	0xFEE
 17904                           fsr0h	equ	0xFEA
 17905                           fsr0l	equ	0xFE9
 17906                           wreg	equ	0xFE8
 17907                           postdec1	equ	0xFE5
 17908                           fsr1h	equ	0xFE2
 17909                           fsr1l	equ	0xFE1
 17910                           indf2	equ	0xFDF
 17911                           postinc2	equ	0xFDE
 17912                           postdec2	equ	0xFDD
 17913                           fsr2h	equ	0xFDA
 17914                           fsr2l	equ	0xFD9
 17915                           status	equ	0xFD8
 17916                           
 17917 ;; *************** function _retrieveLog *****************
 17918 ;; Defined at:
 17919 ;;		line 134 in file "EEPROM.c"
 17920 ;; Parameters:    Size  Location     Type
 17921 ;;  logNum          2    6[COMRAM] int 
 17922 ;; Auto vars:     Size  Location     Type
 17923 ;;  i               2   13[COMRAM] int 
 17924 ;;  addr            2   15[COMRAM] unsigned short 
 17925 ;;  byte3           1   12[COMRAM] unsigned char 
 17926 ;;  byte2           1   11[COMRAM] unsigned char 
 17927 ;;  byte1           1   10[COMRAM] unsigned char 
 17928 ;; Return value:  Size  Location     Type
 17929 ;;                  1    wreg      void 
 17930 ;; Registers used:
 17931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17932 ;; Tracked objects:
 17933 ;;		On entry : 0/0
 17934 ;;		On exit  : 0/0
 17935 ;;		Unchanged: 0/0
 17936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17938 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17939 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17940 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17941 ;;Total ram usage:       11 bytes
 17942 ;; Hardware stack levels used:    1
 17943 ;; Hardware stack levels required when called:    1
 17944 ;; This function calls:
 17945 ;;		i2_EEPROM_read
 17946 ;;		i2___wmul
 17947 ;; This function is called by:
 17948 ;;		_dispLogs
 17949 ;; This function uses a non-reentrant model
 17950 ;;
 17951                           
 17952                           	psect	text73
 17953  002DE2                     __ptext73:
 17954                           	opt stack 0
 17955  002DE2                     _retrieveLog:
 17956                           	opt stack 20
 17957                           
 17958                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 17959                           
 17960                           ;incstack = 0
 17961  002DE2  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 17962  002DE6  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 17963  002DEA  0E00               	movlw	0
 17964  002DEC  6E04               	movwf	i2___wmul@multiplicand+1,c
 17965  002DEE  0E0B               	movlw	11
 17966  002DF0  6E03               	movwf	i2___wmul@multiplicand,c
 17967  002DF2  EC41  F021         	call	i2___wmul	;wreg free
 17968  002DF6  0E01               	movlw	1
 17969  002DF8  2401               	addwf	?i2___wmul,w,c
 17970  002DFA  6E10               	movwf	retrieveLog@addr,c
 17971  002DFC  0E00               	movlw	0
 17972  002DFE  2002               	addwfc	?i2___wmul+1,w,c
 17973  002E00  6E11               	movwf	retrieveLog@addr+1,c
 17974                           
 17975                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 17976  002E02  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17977  002E06  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17978  002E0A  ECD3  F021         	call	i2_EEPROM_read	;wreg free
 17979  002E0E  6E0B               	movwf	retrieveLog@byte1,c
 17980                           
 17981                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 17982  002E10  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17983  002E14  0E80               	movlw	128
 17984  002E16  1609               	andwf	??_retrieveLog,f,c
 17985  002E18  5009               	movf	??_retrieveLog,w,c
 17986  002E1A  0100               	movlb	0	; () banked
 17987  002E1C  6FE8               	movwf	_log_completion& (0+255),b
 17988  002E1E  6BE9               	clrf	(_log_completion+1)& (0+255),b
 17989                           
 17990                           ; BSR set to: 0
 17991                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 17992  002E20  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17993  002E24  0E0F               	movlw	15
 17994  002E26  1609               	andwf	??_retrieveLog,f,c
 17995  002E28  5009               	movf	??_retrieveLog,w,c
 17996  002E2A  0100               	movlb	0	; () banked
 17997  002E2C  6FF2               	movwf	_log_count_total& (0+255),b
 17998  002E2E  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 17999                           
 18000                           ; BSR set to: 0
 18001                           ;EEPROM.c: 146: addr++;
 18002  002E30  4A10               	infsnz	retrieveLog@addr,f,c
 18003  002E32  2A11               	incf	retrieveLog@addr+1,f,c
 18004                           
 18005                           ; BSR set to: 0
 18006                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18007  002E34  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18008  002E38  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18009  002E3C  ECD3  F021         	call	i2_EEPROM_read	;wreg free
 18010  002E40  6E0C               	movwf	retrieveLog@byte2,c
 18011                           
 18012                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18013  002E42  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18014  002E46  0EF0               	movlw	240
 18015  002E48  1609               	andwf	??_retrieveLog,f,c
 18016  002E4A  5009               	movf	??_retrieveLog,w,c
 18017  002E4C  0100               	movlb	0	; () banked
 18018  002E4E  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18019  002E50  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18020                           
 18021                           ; BSR set to: 0
 18022                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18023  002E52  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18024  002E56  0E0F               	movlw	15
 18025  002E58  1609               	andwf	??_retrieveLog,f,c
 18026  002E5A  5009               	movf	??_retrieveLog,w,c
 18027  002E5C  0100               	movlb	0	; () banked
 18028  002E5E  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18029  002E60  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;EEPROM.c: 152: addr++;
 18033  002E62  4A10               	infsnz	retrieveLog@addr,f,c
 18034  002E64  2A11               	incf	retrieveLog@addr+1,f,c
 18035                           
 18036                           ; BSR set to: 0
 18037                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18038  002E66  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18039  002E6A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18040  002E6E  ECD3  F021         	call	i2_EEPROM_read	;wreg free
 18041  002E72  6E0D               	movwf	retrieveLog@byte3,c
 18042                           
 18043                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18044  002E74  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18045  002E78  0EF0               	movlw	240
 18046  002E7A  1609               	andwf	??_retrieveLog,f,c
 18047  002E7C  5009               	movf	??_retrieveLog,w,c
 18048  002E7E  0100               	movlb	0	; () banked
 18049  002E80  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18050  002E82  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18051                           
 18052                           ; BSR set to: 0
 18053                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18054  002E84  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18055  002E88  0E0F               	movlw	15
 18056  002E8A  1609               	andwf	??_retrieveLog,f,c
 18057  002E8C  5009               	movf	??_retrieveLog,w,c
 18058  002E8E  0100               	movlb	0	; () banked
 18059  002E90  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18060  002E92  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;EEPROM.c: 156: addr++;
 18064  002E94  4A10               	infsnz	retrieveLog@addr,f,c
 18065  002E96  2A11               	incf	retrieveLog@addr+1,f,c
 18066                           
 18067                           ; BSR set to: 0
 18068                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18069  002E98  0E00               	movlw	0
 18070  002E9A  6E0F               	movwf	retrieveLog@i+1,c
 18071  002E9C  0E00               	movlw	0
 18072  002E9E  6E0E               	movwf	retrieveLog@i,c
 18073  002EA0                     i2l5804:
 18074                           
 18075                           ; BSR set to: 0
 18076  002EA0  BE0F               	btfsc	retrieveLog@i+1,7,c
 18077  002EA2  D006               	goto	i2l5808
 18078  002EA4  500F               	movf	retrieveLog@i+1,w,c
 18079  002EA6  E11E               	bnz	i2l5816
 18080  002EA8  0E07               	movlw	7
 18081  002EAA  5C0E               	subwf	retrieveLog@i,w,c
 18082  002EAC  B0D8               	btfsc	status,0,c
 18083  002EAE  D01A               	goto	i2l5816
 18084  002EB0                     i2l5808:
 18085                           
 18086                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18087  002EB0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18088  002EB4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18089  002EB8  ECD3  F021         	call	i2_EEPROM_read	;wreg free
 18090  002EBC  6E09               	movwf	??_retrieveLog& (0+255),c
 18091  002EBE  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18092  002EC0  90D8               	bcf	status,0,c
 18093  002EC2  340E               	rlcf	retrieveLog@i,w,c
 18094  002EC4  6ED9               	movwf	fsr2l,c
 18095  002EC6  340F               	rlcf	retrieveLog@i+1,w,c
 18096  002EC8  6EDA               	movwf	fsr2h,c
 18097  002ECA  0E00               	movlw	low _log_startTime
 18098  002ECC  26D9               	addwf	fsr2l,f,c
 18099  002ECE  0E01               	movlw	high _log_startTime
 18100  002ED0  22DA               	addwfc	fsr2h,f,c
 18101  002ED2  C009  FFDE         	movff	??_retrieveLog,postinc2
 18102  002ED6  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18103                           
 18104                           ;EEPROM.c: 161: addr++;
 18105  002EDA  4A10               	infsnz	retrieveLog@addr,f,c
 18106  002EDC  2A11               	incf	retrieveLog@addr+1,f,c
 18107  002EDE  4A0E               	infsnz	retrieveLog@i,f,c
 18108  002EE0  2A0F               	incf	retrieveLog@i+1,f,c
 18109  002EE2  D7DE               	goto	i2l5804
 18110  002EE4                     i2l5816:
 18111                           
 18112                           ;EEPROM.c: 162: }
 18113                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18114  002EE4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18115  002EE8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18116  002EEC  ECD3  F021         	call	i2_EEPROM_read	;wreg free
 18117  002EF0  6E09               	movwf	??_retrieveLog& (0+255),c
 18118  002EF2  5009               	movf	??_retrieveLog,w,c
 18119  002EF4  0100               	movlb	0	; () banked
 18120  002EF6  6FF4               	movwf	_log_total_time& (0+255),b
 18121  002EF8  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18122                           
 18123                           ; BSR set to: 0
 18124  002EFA  0012               	return		;funcret
 18125  002EFC                     __end_of_retrieveLog:
 18126                           	opt stack 0
 18127                           pclatu	equ	0xFFB
 18128                           pclath	equ	0xFFA
 18129                           tblptru	equ	0xFF8
 18130                           tblptrh	equ	0xFF7
 18131                           tblptrl	equ	0xFF6
 18132                           tablat	equ	0xFF5
 18133                           prodh	equ	0xFF4
 18134                           prodl	equ	0xFF3
 18135                           intcon	equ	0xFF2
 18136                           intcon2	equ	0xFF1
 18137                           intcon3	equ	0xFF0
 18138                           indf0	equ	0xFEF
 18139                           postinc0	equ	0xFEE
 18140                           fsr0h	equ	0xFEA
 18141                           fsr0l	equ	0xFE9
 18142                           wreg	equ	0xFE8
 18143                           postdec1	equ	0xFE5
 18144                           fsr1h	equ	0xFE2
 18145                           fsr1l	equ	0xFE1
 18146                           indf2	equ	0xFDF
 18147                           postinc2	equ	0xFDE
 18148                           postdec2	equ	0xFDD
 18149                           fsr2h	equ	0xFDA
 18150                           fsr2l	equ	0xFD9
 18151                           status	equ	0xFD8
 18152                           
 18153 ;; *************** function i2_EEPROM_read *****************
 18154 ;; Defined at:
 18155 ;;		line 68 in file "EEPROM.c"
 18156 ;; Parameters:    Size  Location     Type
 18157 ;;  address         2    0[COMRAM] unsigned short 
 18158 ;; Auto vars:     Size  Location     Type
 18159 ;;		None
 18160 ;; Return value:  Size  Location     Type
 18161 ;;                  1    wreg      unsigned char 
 18162 ;; Registers used:
 18163 ;;		wreg, status,2
 18164 ;; Tracked objects:
 18165 ;;		On entry : 0/0
 18166 ;;		On exit  : 0/0
 18167 ;;		Unchanged: 0/0
 18168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18173 ;;Total ram usage:        2 bytes
 18174 ;; Hardware stack levels used:    1
 18175 ;; This function calls:
 18176 ;;		Nothing
 18177 ;; This function is called by:
 18178 ;;		_retrieveLog
 18179 ;; This function uses a non-reentrant model
 18180 ;;
 18181                           
 18182                           	psect	text74
 18183  0043A6                     __ptext74:
 18184                           	opt stack 0
 18185  0043A6                     i2_EEPROM_read:
 18186                           	opt stack 20
 18187                           
 18188                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18189                           
 18190                           ; BSR set to: 0
 18191                           ;incstack = 0
 18192  0043A6  5002               	movf	i2EEPROM_read@address+1,w,c
 18193  0043A8  6EAA               	movwf	4010,c	;volatile
 18194                           
 18195                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18196  0043AA  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18197                           
 18198                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18199  0043AE  9EA6               	bcf	4006,7,c	;volatile
 18200                           
 18201                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18202  0043B0  9CA6               	bcf	4006,6,c	;volatile
 18203                           
 18204                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18205  0043B2  80A6               	bsf	4006,0,c	;volatile
 18206  0043B4                     i2l926:
 18207  0043B4  B0A6               	btfsc	4006,0,c	;volatile
 18208  0043B6  D7FE               	goto	i2l926
 18209                           
 18210                           ;EEPROM.c: 81: return EEDATA;
 18211  0043B8  50A8               	movf	4008,w,c	;volatile
 18212  0043BA  0012               	return	
 18213  0043BC                     __end_ofi2_EEPROM_read:
 18214                           	opt stack 0
 18215                           pclatu	equ	0xFFB
 18216                           pclath	equ	0xFFA
 18217                           tblptru	equ	0xFF8
 18218                           tblptrh	equ	0xFF7
 18219                           tblptrl	equ	0xFF6
 18220                           tablat	equ	0xFF5
 18221                           prodh	equ	0xFF4
 18222                           prodl	equ	0xFF3
 18223                           intcon	equ	0xFF2
 18224                           intcon2	equ	0xFF1
 18225                           intcon3	equ	0xFF0
 18226                           indf0	equ	0xFEF
 18227                           postinc0	equ	0xFEE
 18228                           fsr0h	equ	0xFEA
 18229                           fsr0l	equ	0xFE9
 18230                           wreg	equ	0xFE8
 18231                           postdec1	equ	0xFE5
 18232                           fsr1h	equ	0xFE2
 18233                           fsr1l	equ	0xFE1
 18234                           indf2	equ	0xFDF
 18235                           postinc2	equ	0xFDE
 18236                           postdec2	equ	0xFDD
 18237                           fsr2h	equ	0xFDA
 18238                           fsr2l	equ	0xFD9
 18239                           status	equ	0xFD8
 18240                           
 18241 ;; *************** function _printSortTimer *****************
 18242 ;; Defined at:
 18243 ;;		line 278 in file "sort.c"
 18244 ;; Parameters:    Size  Location     Type
 18245 ;;		None
 18246 ;; Auto vars:     Size  Location     Type
 18247 ;;  i               2   72[COMRAM] int 
 18248 ;;  curTime        14   46[COMRAM] int [7]
 18249 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18250 ;;  sec             2   66[COMRAM] int 
 18251 ;;  min             2   64[COMRAM] int 
 18252 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18253 ;;  start_sec       2   60[COMRAM] unsigned int 
 18254 ;;  hour            2   44[COMRAM] int 
 18255 ;; Return value:  Size  Location     Type
 18256 ;;                  1    wreg      void 
 18257 ;; Registers used:
 18258 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18259 ;; Tracked objects:
 18260 ;;		On entry : 0/0
 18261 ;;		On exit  : 0/0
 18262 ;;		Unchanged: 0/0
 18263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18265 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18266 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18267 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18268 ;;Total ram usage:       33 bytes
 18269 ;; Hardware stack levels used:    1
 18270 ;; Hardware stack levels required when called:    3
 18271 ;; This function calls:
 18272 ;;		i2___lwdiv
 18273 ;;		i2___lwmod
 18274 ;;		i2___wmul
 18275 ;;		i2_getRTC
 18276 ;;		i2_lcdInst
 18277 ;;		i2_printf
 18278 ;; This function is called by:
 18279 ;;		_handler
 18280 ;; This function uses a non-reentrant model
 18281 ;;
 18282                           
 18283                           	psect	text75
 18284  00236E                     __ptext75:
 18285                           	opt stack 0
 18286  00236E                     _printSortTimer:
 18287                           	opt stack 20
 18288                           
 18289                           ;sort.c: 279: getRTC();
 18290                           
 18291                           ;incstack = 0
 18292  00236E  EC8E  F01C         	call	i2_getRTC	;wreg free
 18293                           
 18294                           ;sort.c: 280: int curTime[7];
 18295                           ;sort.c: 281: for(int i = 0; i < 7; i++){
 18296  002372  0E00               	movlw	0
 18297  002374  6E4A               	movwf	printSortTimer@i+1,c
 18298  002376  0E00               	movlw	0
 18299  002378  6E49               	movwf	printSortTimer@i,c
 18300  00237A                     i2l7752:
 18301  00237A  BE4A               	btfsc	printSortTimer@i+1,7,c
 18302  00237C  D006               	goto	i2l7756
 18303  00237E  504A               	movf	printSortTimer@i+1,w,c
 18304  002380  E131               	bnz	i2l7762
 18305  002382  0E07               	movlw	7
 18306  002384  5C49               	subwf	printSortTimer@i,w,c
 18307  002386  B0D8               	btfsc	status,0,c
 18308  002388  D02D               	goto	i2l7762
 18309  00238A                     i2l7756:
 18310                           
 18311                           ;sort.c: 282: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18312  00238A  0E24               	movlw	low _time
 18313  00238C  2449               	addwf	printSortTimer@i,w,c
 18314  00238E  6ED9               	movwf	fsr2l,c
 18315  002390  0E01               	movlw	high _time
 18316  002392  204A               	addwfc	printSortTimer@i+1,w,c
 18317  002394  6EDA               	movwf	fsr2h,c
 18318  002396  50DF               	movf	indf2,w,c
 18319  002398  6E2A               	movwf	??_printSortTimer& (0+255),c
 18320  00239A  3A2A               	swapf	??_printSortTimer,f,c
 18321  00239C  0E0F               	movlw	15
 18322  00239E  162A               	andwf	??_printSortTimer,f,c
 18323  0023A0  0E0F               	movlw	15
 18324  0023A2  162A               	andwf	??_printSortTimer,f,c
 18325  0023A4  502A               	movf	??_printSortTimer,w,c
 18326  0023A6  0D0A               	mullw	10
 18327  0023A8  0E24               	movlw	low _time
 18328  0023AA  2449               	addwf	printSortTimer@i,w,c
 18329  0023AC  6ED9               	movwf	fsr2l,c
 18330  0023AE  0E01               	movlw	high _time
 18331  0023B0  204A               	addwfc	printSortTimer@i+1,w,c
 18332  0023B2  6EDA               	movwf	fsr2h,c
 18333  0023B4  50DF               	movf	indf2,w,c
 18334  0023B6  0B0F               	andlw	15
 18335  0023B8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18336  0023BA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18337  0023BC  50F3               	movf	prodl,w,c
 18338  0023BE  262B               	addwf	??_printSortTimer+1,f,c
 18339  0023C0  50F4               	movf	prodh,w,c
 18340  0023C2  222C               	addwfc	??_printSortTimer+2,f,c
 18341  0023C4  90D8               	bcf	status,0,c
 18342  0023C6  3449               	rlcf	printSortTimer@i,w,c
 18343  0023C8  6ED9               	movwf	fsr2l,c
 18344  0023CA  344A               	rlcf	printSortTimer@i+1,w,c
 18345  0023CC  6EDA               	movwf	fsr2h,c
 18346  0023CE  0E2F               	movlw	low printSortTimer@curTime
 18347  0023D0  26D9               	addwf	fsr2l,f,c
 18348  0023D2  0E00               	movlw	high printSortTimer@curTime
 18349  0023D4  22DA               	addwfc	fsr2h,f,c
 18350  0023D6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18351  0023DA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18352  0023DE  4A49               	infsnz	printSortTimer@i,f,c
 18353  0023E0  2A4A               	incf	printSortTimer@i+1,f,c
 18354  0023E2  D7CB               	goto	i2l7752
 18355  0023E4                     i2l7762:
 18356                           
 18357                           ;sort.c: 283: }
 18358                           ;sort.c: 284: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18359  0023E4  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18360  0023E8  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18361  0023EC  0E00               	movlw	0
 18362  0023EE  6E04               	movwf	i2___wmul@multiplicand+1,c
 18363  0023F0  0E3C               	movlw	60
 18364  0023F2  6E03               	movwf	i2___wmul@multiplicand,c
 18365  0023F4  EC41  F021         	call	i2___wmul	;wreg free
 18366  0023F8  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18367  0023FC  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18368  002400  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18369  002404  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18370  002408  0E0E               	movlw	14
 18371  00240A  6E04               	movwf	i2___wmul@multiplicand+1,c
 18372  00240C  0E10               	movlw	16
 18373  00240E  6E03               	movwf	i2___wmul@multiplicand,c
 18374  002410  EC41  F021         	call	i2___wmul	;wreg free
 18375  002414  5001               	movf	?i2___wmul,w,c
 18376  002416  262A               	addwf	??_printSortTimer,f,c
 18377  002418  5002               	movf	?i2___wmul+1,w,c
 18378  00241A  222B               	addwfc	??_printSortTimer+1,f,c
 18379  00241C  0101               	movlb	1	; () banked
 18380  00241E  510E               	movf	_startTime& (0+255),w,b
 18381  002420  242A               	addwf	??_printSortTimer,w,c
 18382  002422  6E3D               	movwf	printSortTimer@start_sec,c
 18383  002424  0101               	movlb	1	; () banked
 18384  002426  510F               	movf	(_startTime+1)& (0+255),w,b
 18385  002428  202B               	addwfc	??_printSortTimer+1,w,c
 18386  00242A  6E3E               	movwf	printSortTimer@start_sec+1,c
 18387                           
 18388                           ;sort.c: 285: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18389  00242C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18390  002430  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18391  002434  0E00               	movlw	0
 18392  002436  6E04               	movwf	i2___wmul@multiplicand+1,c
 18393  002438  0E3C               	movlw	60
 18394  00243A  6E03               	movwf	i2___wmul@multiplicand,c
 18395  00243C  EC41  F021         	call	i2___wmul	;wreg free
 18396  002440  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18397  002444  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18398  002448  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18399  00244C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18400  002450  0E0E               	movlw	14
 18401  002452  6E04               	movwf	i2___wmul@multiplicand+1,c
 18402  002454  0E10               	movlw	16
 18403  002456  6E03               	movwf	i2___wmul@multiplicand,c
 18404  002458  EC41  F021         	call	i2___wmul	;wreg free
 18405  00245C  5001               	movf	?i2___wmul,w,c
 18406  00245E  262A               	addwf	??_printSortTimer,f,c
 18407  002460  5002               	movf	?i2___wmul+1,w,c
 18408  002462  222B               	addwfc	??_printSortTimer+1,f,c
 18409  002464  502F               	movf	printSortTimer@curTime,w,c
 18410  002466  242A               	addwf	??_printSortTimer,w,c
 18411  002468  6E3F               	movwf	printSortTimer@cur_sec,c
 18412  00246A  5030               	movf	printSortTimer@curTime+1,w,c
 18413  00246C  202B               	addwfc	??_printSortTimer+1,w,c
 18414  00246E  6E40               	movwf	printSortTimer@cur_sec+1,c
 18415                           
 18416                           ;sort.c: 286: unsigned int timeDiff = cur_sec - start_sec;
 18417  002470  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18418  002474  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18419  002478  1E2A               	comf	??_printSortTimer,f,c
 18420  00247A  1E2B               	comf	??_printSortTimer+1,f,c
 18421  00247C  4A2A               	infsnz	??_printSortTimer,f,c
 18422  00247E  2A2B               	incf	??_printSortTimer+1,f,c
 18423  002480  503F               	movf	printSortTimer@cur_sec,w,c
 18424  002482  242A               	addwf	??_printSortTimer,w,c
 18425  002484  6E47               	movwf	printSortTimer@timeDiff,c
 18426  002486  5040               	movf	printSortTimer@cur_sec+1,w,c
 18427  002488  202B               	addwfc	??_printSortTimer+1,w,c
 18428  00248A  6E48               	movwf	printSortTimer@timeDiff+1,c
 18429                           
 18430                           ;sort.c: 288: total_time = timeDiff;
 18431  00248C  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18432  002490  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18433                           
 18434                           ;sort.c: 290: if(timeDiff >= 10){
 18435  002494  5048               	movf	printSortTimer@timeDiff+1,w,c
 18436  002496  E104               	bnz	i2u673_40
 18437  002498  0E0A               	movlw	10
 18438  00249A  5C47               	subwf	printSortTimer@timeDiff,w,c
 18439  00249C  A0D8               	btfss	status,0,c
 18440  00249E  D003               	goto	i2l7772
 18441  0024A0                     i2u673_40:
 18442                           
 18443                           ;sort.c: 291: machine_state = DoneSorting_state;
 18444  0024A0  0E02               	movlw	2
 18445  0024A2  0100               	movlb	0	; () banked
 18446  0024A4  6FFC               	movwf	_machine_state& (0+255),b
 18447  0024A6                     i2l7772:
 18448                           
 18449                           ;sort.c: 293: }
 18450                           ;sort.c: 295: int hour = timeDiff / 3600;
 18451  0024A6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18452  0024AA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18453  0024AE  0E0E               	movlw	14
 18454  0024B0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18455  0024B2  0E10               	movlw	16
 18456  0024B4  6E08               	movwf	i2___lwdiv@divisor,c
 18457  0024B6  EC44  F01E         	call	i2___lwdiv	;wreg free
 18458  0024BA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18459  0024BE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18460                           
 18461                           ;sort.c: 296: int min = (timeDiff % 3600) / 60;
 18462  0024C2  0E0E               	movlw	14
 18463  0024C4  6E04               	movwf	i2___lwmod@divisor+1,c
 18464  0024C6  0E10               	movlw	16
 18465  0024C8  6E03               	movwf	i2___lwmod@divisor,c
 18466  0024CA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18467  0024CE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18468  0024D2  EC2A  F01F         	call	i2___lwmod	;wreg free
 18469  0024D6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18470  0024DA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18471  0024DE  0E00               	movlw	0
 18472  0024E0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18473  0024E2  0E3C               	movlw	60
 18474  0024E4  6E08               	movwf	i2___lwdiv@divisor,c
 18475  0024E6  EC44  F01E         	call	i2___lwdiv	;wreg free
 18476  0024EA  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18477  0024EE  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18478                           
 18479                           ;sort.c: 297: int sec = (timeDiff % 3600) % 60;
 18480  0024F2  0E0E               	movlw	14
 18481  0024F4  6E04               	movwf	i2___lwmod@divisor+1,c
 18482  0024F6  0E10               	movlw	16
 18483  0024F8  6E03               	movwf	i2___lwmod@divisor,c
 18484  0024FA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18485  0024FE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18486  002502  EC2A  F01F         	call	i2___lwmod	;wreg free
 18487  002506  C001  F045         	movff	?i2___lwmod,_printSortTimer$2354
 18488  00250A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2354+1
 18489                           
 18490                           ;sort.c: 297: int sec = (timeDiff % 3600) % 60;
 18491  00250E  C045  F001         	movff	_printSortTimer$2354,i2___lwmod@dividend
 18492  002512  C046  F002         	movff	_printSortTimer$2354+1,i2___lwmod@dividend+1
 18493  002516  0E00               	movlw	0
 18494  002518  6E04               	movwf	i2___lwmod@divisor+1,c
 18495  00251A  0E3C               	movlw	60
 18496  00251C  6E03               	movwf	i2___lwmod@divisor,c
 18497  00251E  EC2A  F01F         	call	i2___lwmod	;wreg free
 18498  002522  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18499  002526  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18500                           
 18501                           ;sort.c: 299: lcdInst(0b10000000);;
 18502  00252A  0E80               	movlw	128
 18503  00252C  EC07  F022         	call	i2_lcdInst
 18504                           
 18505                           ;sort.c: 300: printf("SORTING...");
 18506  002530  0E85               	movlw	low STR_64
 18507  002532  6E0D               	movwf	i2printf@f,c
 18508  002534  0EFF               	movlw	high STR_64
 18509  002536  6E0E               	movwf	i2printf@f+1,c
 18510  002538  ECB8  F00A         	call	i2_printf	;wreg free
 18511                           
 18512                           ;sort.c: 301: lcdInst(0b11000000);;
 18513  00253C  0EC0               	movlw	192
 18514  00253E  EC07  F022         	call	i2_lcdInst
 18515                           
 18516                           ;sort.c: 302: printf("TIME %d:%02d", min, sec);
 18517  002542  0E56               	movlw	low STR_65
 18518  002544  6E0D               	movwf	i2printf@f,c
 18519  002546  0EFF               	movlw	high STR_65
 18520  002548  6E0E               	movwf	i2printf@f+1,c
 18521  00254A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18522  00254E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18523  002552  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18524  002556  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18525  00255A  ECB8  F00A         	call	i2_printf	;wreg free
 18526  00255E  0012               	return		;funcret
 18527  002560                     __end_of_printSortTimer:
 18528                           	opt stack 0
 18529                           pclatu	equ	0xFFB
 18530                           pclath	equ	0xFFA
 18531                           tblptru	equ	0xFF8
 18532                           tblptrh	equ	0xFF7
 18533                           tblptrl	equ	0xFF6
 18534                           tablat	equ	0xFF5
 18535                           prodh	equ	0xFF4
 18536                           prodl	equ	0xFF3
 18537                           intcon	equ	0xFF2
 18538                           intcon2	equ	0xFF1
 18539                           intcon3	equ	0xFF0
 18540                           indf0	equ	0xFEF
 18541                           postinc0	equ	0xFEE
 18542                           fsr0h	equ	0xFEA
 18543                           fsr0l	equ	0xFE9
 18544                           wreg	equ	0xFE8
 18545                           postdec1	equ	0xFE5
 18546                           fsr1h	equ	0xFE2
 18547                           fsr1l	equ	0xFE1
 18548                           indf2	equ	0xFDF
 18549                           postinc2	equ	0xFDE
 18550                           postdec2	equ	0xFDD
 18551                           fsr2h	equ	0xFDA
 18552                           fsr2l	equ	0xFD9
 18553                           status	equ	0xFD8
 18554                           
 18555 ;; *************** function i2_printf *****************
 18556 ;; Defined at:
 18557 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18558 ;; Parameters:    Size  Location     Type
 18559 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18560 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 18561 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 18562 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 18563 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 18564 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 18565 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 18566 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 18567 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 18568 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 18569 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 18570 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 18571 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 18572 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 18573 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 18574 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 18575 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 18576 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 18577 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 18578 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 18579 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 18580 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 18581 ;;		 -> STR_1(18), 
 18582 ;; Auto vars:     Size  Location     Type
 18583 ;;  printf          4    0        struct .
 18584 ;;  printf          2   39[COMRAM] int 
 18585 ;;  printf          2   35[COMRAM] unsigned int 
 18586 ;;  printf          2   33[COMRAM] unsigned int 
 18587 ;;  printf          2   31[COMRAM] PTR void [1]
 18588 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18589 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18590 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 18591 ;;  printf          1   38[COMRAM] char 
 18592 ;;  printf          1   37[COMRAM] unsigned char 
 18593 ;;  printf          1   28[COMRAM] char 
 18594 ;; Return value:  Size  Location     Type
 18595 ;;                  2   12[COMRAM] int 
 18596 ;; Registers used:
 18597 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18598 ;; Tracked objects:
 18599 ;;		On entry : 0/0
 18600 ;;		On exit  : 0/0
 18601 ;;		Unchanged: 0/0
 18602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18603 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18604 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18605 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18606 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18607 ;;Total ram usage:       29 bytes
 18608 ;; Hardware stack levels used:    1
 18609 ;; Hardware stack levels required when called:    2
 18610 ;; This function calls:
 18611 ;;		i2___lwdiv
 18612 ;;		i2___lwmod
 18613 ;;		i2___wmul
 18614 ;;		i2_isdigit
 18615 ;;		i2_putch
 18616 ;; This function is called by:
 18617 ;;		_change_state_to_menu_11
 18618 ;;		_change_state_to_menu_23
 18619 ;;		_change_state_to_logs_11
 18620 ;;		_change_state_to_logs_12
 18621 ;;		_change_state_to_logs_22
 18622 ;;		_change_state_to_logs_23
 18623 ;;		_change_state_to_logs_33
 18624 ;;		_change_state_to_logs_34
 18625 ;;		_printSortTimer
 18626 ;;		i2_change_state_to_menu_start
 18627 ;;		i2_change_state_to_menu_12
 18628 ;;		i2_change_state_to_menu_22
 18629 ;;		i2_printRTC
 18630 ;; This function uses a non-reentrant model
 18631 ;;
 18632                           
 18633                           	psect	text76
 18634  001570                     __ptext76:
 18635                           	opt stack 0
 18636  001570                     i2_printf:
 18637                           	opt stack 19
 18638                           
 18639                           ;doprnt.c: 466: va_list ap;
 18640                           ;doprnt.c: 499: signed char c;
 18641                           ;doprnt.c: 501: int width;
 18642                           ;doprnt.c: 506: signed char prec;
 18643                           ;doprnt.c: 508: unsigned char flag;
 18644                           ;doprnt.c: 523: union {
 18645                           ;doprnt.c: 524: unsigned long vd;
 18646                           ;doprnt.c: 525: double integ;
 18647                           ;doprnt.c: 526: } tmpval;
 18648                           ;doprnt.c: 528: unsigned int val;
 18649                           ;doprnt.c: 529: unsigned len;
 18650                           ;doprnt.c: 530: const char * cp;
 18651                           ;doprnt.c: 533: *ap = __va_start();
 18652                           
 18653                           ;incstack = 0
 18654  001570  0E0F               	movlw	low (?i2_printf+2)
 18655  001572  6E20               	movwf	i2printf@ap,c
 18656  001574  0E00               	movlw	high (?i2_printf+2)
 18657  001576  6E21               	movwf	i2printf@ap+1,c
 18658                           
 18659                           ;doprnt.c: 536: while(c = *f++) {
 18660  001578  D1A4               	goto	i2l5622
 18661  00157A                     i2l5492:
 18662                           
 18663                           ;doprnt.c: 538: if(c != '%')
 18664  00157A  0E25               	movlw	37
 18665  00157C  1827               	xorwf	i2printf@c,w,c
 18666  00157E  B4D8               	btfsc	status,2,c
 18667  001580  D004               	goto	i2l5496
 18668                           
 18669                           ;doprnt.c: 540: {
 18670                           ;doprnt.c: 541: (putch(c) );
 18671  001582  5027               	movf	i2printf@c,w,c
 18672  001584  EC01  F022         	call	i2_putch
 18673                           
 18674                           ;doprnt.c: 542: continue;
 18675  001588  D19C               	goto	i2l5622
 18676  00158A                     i2l5496:
 18677                           
 18678                           ;doprnt.c: 543: }
 18679                           ;doprnt.c: 546: width = 0;
 18680  00158A  0E00               	movlw	0
 18681  00158C  6E29               	movwf	i2printf@width+1,c
 18682  00158E  0E00               	movlw	0
 18683  001590  6E28               	movwf	i2printf@width,c
 18684                           
 18685                           ;doprnt.c: 548: flag = 0;
 18686  001592  0E00               	movlw	0
 18687  001594  6E26               	movwf	i2printf@flag,c
 18688                           
 18689                           ;doprnt.c: 551: switch(*f) {
 18690                           
 18691                           ;doprnt.c: 550: for(;;) {
 18692  001596  D003               	goto	i2l5502
 18693  001598                     i2l5498:
 18694                           
 18695                           ;doprnt.c: 580: flag |= 0x04;
 18696  001598  8426               	bsf	i2printf@flag,2,c
 18697                           
 18698                           ;doprnt.c: 581: f++;
 18699  00159A  4A0D               	infsnz	i2printf@f,f,c
 18700  00159C  2A0E               	incf	i2printf@f+1,f,c
 18701  00159E                     i2l5502:
 18702  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 18703  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18704  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18705  0015A6  6AF8               	clrf	tblptru,c
 18706  0015A8                     	endif
 18707  0015A8                     	if	0	;tblptru may be non-zero
 18708  0015A8                     	endif
 18709  0015A8  0008               	tblrd		*
 18710  0015AA  50F5               	movf	tablat,w,c
 18711                           
 18712                           ; Switch size 1, requested type "space"
 18713                           ; Number of cases is 1, Range of values is 48 to 48
 18714                           ; switch strategies available:
 18715                           ; Name         Instructions Cycles
 18716                           ; simple_byte            4     3 (average)
 18717                           ;	Chosen strategy is simple_byte
 18718  0015AC  0A30               	xorlw	48	; case 48
 18719  0015AE  B4D8               	btfsc	status,2,c
 18720  0015B0  D7F3               	goto	i2l5498
 18721                           
 18722                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18723                           
 18724                           ;doprnt.c: 586: }
 18725                           
 18726                           ;doprnt.c: 585: break;
 18727  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 18728  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18729  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18730  0015BA  6AF8               	clrf	tblptru,c
 18731  0015BC                     	endif
 18732  0015BC                     	if	0	;tblptru may be non-zero
 18733  0015BC                     	endif
 18734  0015BC  0008               	tblrd		*
 18735  0015BE  50F5               	movf	tablat,w,c
 18736  0015C0  ECAD  F021         	call	i2_isdigit
 18737  0015C4  A0D8               	btfss	status,0,c
 18738  0015C6  D0A6               	goto	i2l5550
 18739                           
 18740                           ;doprnt.c: 598: width = 0;
 18741  0015C8  0E00               	movlw	0
 18742  0015CA  6E29               	movwf	i2printf@width+1,c
 18743  0015CC  0E00               	movlw	0
 18744  0015CE  6E28               	movwf	i2printf@width,c
 18745  0015D0                     i2l5508:
 18746                           
 18747                           ;doprnt.c: 600: width *= 10;
 18748  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 18749  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 18750  0015D8  0E00               	movlw	0
 18751  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 18752  0015DC  0E0A               	movlw	10
 18753  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 18754  0015E0  EC41  F021         	call	i2___wmul	;wreg free
 18755  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 18756  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 18757                           
 18758                           ;doprnt.c: 601: width += *f++ - '0';
 18759  0015EC  0ED0               	movlw	208
 18760  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 18761  0015F0  0EFF               	movlw	255
 18762  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18763  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 18764  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18765  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18766  0015FC  6AF8               	clrf	tblptru,c
 18767  0015FE                     	endif
 18768  0015FE                     	if	0	;tblptru may be non-zero
 18769  0015FE                     	endif
 18770  0015FE  0008               	tblrd		*
 18771  001600  50F5               	movf	tablat,w,c
 18772  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 18773  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 18774  001606  5019               	movf	??i2_printf,w,c
 18775  001608  261B               	addwf	??i2_printf+2,f,c
 18776  00160A  501A               	movf	??i2_printf+1,w,c
 18777  00160C  221C               	addwfc	??i2_printf+3,f,c
 18778  00160E  501B               	movf	??i2_printf+2,w,c
 18779  001610  2628               	addwf	i2printf@width,f,c
 18780  001612  501C               	movf	??i2_printf+3,w,c
 18781  001614  2229               	addwfc	i2printf@width+1,f,c
 18782  001616  4A0D               	infsnz	i2printf@f,f,c
 18783  001618  2A0E               	incf	i2printf@f+1,f,c
 18784                           
 18785                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18786  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 18787  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18788  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18789  001622  6AF8               	clrf	tblptru,c
 18790  001624                     	endif
 18791  001624                     	if	0	;tblptru may be non-zero
 18792  001624                     	endif
 18793  001624  0008               	tblrd		*
 18794  001626  50F5               	movf	tablat,w,c
 18795  001628  ECAD  F021         	call	i2_isdigit
 18796  00162C  A0D8               	btfss	status,0,c
 18797  00162E  D072               	goto	i2l5550
 18798  001630  D7CF               	goto	i2l5508
 18799  001632                     i2l5516:
 18800                           
 18801                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18802  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 18803  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18804  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 18805  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 18806  001642  0E02               	movlw	2
 18807  001644  2620               	addwf	i2printf@ap,f,c
 18808  001646  0E00               	movlw	0
 18809  001648  2221               	addwfc	i2printf@ap+1,f,c
 18810                           
 18811                           ;doprnt.c: 740: if(!cp)
 18812  00164A  501E               	movf	i2printf@cp,w,c
 18813  00164C  101F               	iorwf	i2printf@cp+1,w,c
 18814  00164E  A4D8               	btfss	status,2,c
 18815  001650  D004               	goto	i2l5524
 18816                           
 18817                           ;doprnt.c: 741: cp = "(null)";
 18818  001652  0EB6               	movlw	low STR_111
 18819  001654  6E1E               	movwf	i2printf@cp,c
 18820  001656  0EFF               	movlw	high STR_111
 18821  001658  6E1F               	movwf	i2printf@cp+1,c
 18822  00165A                     i2l5524:
 18823                           
 18824                           ;doprnt.c: 745: len = 0;
 18825  00165A  0E00               	movlw	0
 18826  00165C  6E23               	movwf	i2printf@len+1,c
 18827  00165E  0E00               	movlw	0
 18828  001660  6E22               	movwf	i2printf@len,c
 18829                           
 18830                           ;doprnt.c: 746: while(cp[len])
 18831  001662  D002               	goto	i2l5528
 18832  001664                     i2l5526:
 18833                           
 18834                           ;doprnt.c: 747: len++;
 18835  001664  4A22               	infsnz	i2printf@len,f,c
 18836  001666  2A23               	incf	i2printf@len+1,f,c
 18837  001668                     i2l5528:
 18838  001668  5022               	movf	i2printf@len,w,c
 18839  00166A  241E               	addwf	i2printf@cp,w,c
 18840  00166C  6E19               	movwf	??i2_printf& (0+255),c
 18841  00166E  5023               	movf	i2printf@len+1,w,c
 18842  001670  201F               	addwfc	i2printf@cp+1,w,c
 18843  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18844  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 18845  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 18846  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 18847  00167E  6EF8               	movwf	tblptru,c
 18848  001680  0E0F               	movlw	(high __ramtop+-1)
 18849  001682  64F7               	cpfsgt	tblptrh,c
 18850  001684  D003               	bra	i2u411_47
 18851  001686  0008               	tblrd		*
 18852  001688  50F5               	movf	tablat,w,c
 18853  00168A  D005               	bra	i2u411_40
 18854  00168C                     i2u411_47:
 18855  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 18856  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 18857  001694  50EF               	movf	indf0,w,c
 18858  001696                     i2u411_40:
 18859  001696  0900               	iorlw	0
 18860  001698  A4D8               	btfss	status,2,c
 18861  00169A  D7E4               	goto	i2l5526
 18862                           
 18863                           ;doprnt.c: 757: if(width > len)
 18864  00169C  5028               	movf	i2printf@width,w,c
 18865  00169E  5C22               	subwf	i2printf@len,w,c
 18866  0016A0  5029               	movf	i2printf@width+1,w,c
 18867  0016A2  5823               	subwfb	i2printf@len+1,w,c
 18868  0016A4  B0D8               	btfsc	status,0,c
 18869  0016A6  D005               	goto	i2l5534
 18870                           
 18871                           ;doprnt.c: 758: width -= len;
 18872  0016A8  5022               	movf	i2printf@len,w,c
 18873  0016AA  5E28               	subwf	i2printf@width,f,c
 18874  0016AC  5023               	movf	i2printf@len+1,w,c
 18875  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 18876  0016B0  D008               	goto	i2l5538
 18877  0016B2                     i2l5534:
 18878                           
 18879                           ;doprnt.c: 759: else
 18880                           ;doprnt.c: 760: width = 0;
 18881  0016B2  0E00               	movlw	0
 18882  0016B4  6E29               	movwf	i2printf@width+1,c
 18883  0016B6  0E00               	movlw	0
 18884  0016B8  6E28               	movwf	i2printf@width,c
 18885                           
 18886                           ;doprnt.c: 764: while(width--)
 18887  0016BA  D003               	goto	i2l5538
 18888  0016BC                     i2l5536:
 18889                           
 18890                           ;doprnt.c: 765: (putch(' ') );
 18891  0016BC  0E20               	movlw	32
 18892  0016BE  EC01  F022         	call	i2_putch
 18893  0016C2                     i2l5538:
 18894  0016C2  0628               	decf	i2printf@width,f,c
 18895  0016C4  A0D8               	btfss	status,0,c
 18896  0016C6  0629               	decf	i2printf@width+1,f,c
 18897  0016C8  2828               	incf	i2printf@width,w,c
 18898  0016CA  E1F8               	bnz	i2l5536
 18899  0016CC  2829               	incf	i2printf@width+1,w,c
 18900  0016CE  B4D8               	btfsc	status,2,c
 18901  0016D0  D016               	goto	i2l5544
 18902  0016D2  D7F4               	goto	i2l5536
 18903  0016D4                     i2l5540:
 18904                           
 18905                           ;doprnt.c: 768: (putch(*cp++) );
 18906  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 18907  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 18908  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 18909  0016DE  6EF8               	movwf	tblptru,c
 18910  0016E0  0E0F               	movlw	(high __ramtop+-1)
 18911  0016E2  64F7               	cpfsgt	tblptrh,c
 18912  0016E4  D003               	bra	i2u415_47
 18913  0016E6  0008               	tblrd		*
 18914  0016E8  50F5               	movf	tablat,w,c
 18915  0016EA  D005               	bra	i2u415_40
 18916  0016EC                     i2u415_47:
 18917  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 18918  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 18919  0016F4  50EF               	movf	indf0,w,c
 18920  0016F6                     i2u415_40:
 18921  0016F6  EC01  F022         	call	i2_putch
 18922  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 18923  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 18924  0016FE                     i2l5544:
 18925  0016FE  0622               	decf	i2printf@len,f,c
 18926  001700  A0D8               	btfss	status,0,c
 18927  001702  0623               	decf	i2printf@len+1,f,c
 18928  001704  2822               	incf	i2printf@len,w,c
 18929  001706  E1E6               	bnz	i2l5540
 18930  001708  2823               	incf	i2printf@len+1,w,c
 18931  00170A  B4D8               	btfsc	status,2,c
 18932  00170C  D0DA               	goto	i2l5622
 18933  00170E  D7E2               	goto	i2l5540
 18934  001710                     i2l5546:
 18935                           
 18936                           ;doprnt.c: 818: flag |= 0x40;
 18937  001710  8C26               	bsf	i2printf@flag,6,c
 18938                           
 18939                           ;doprnt.c: 822: }
 18940                           
 18941                           ;doprnt.c: 819: break;
 18942  001712  D01B               	goto	i2l1224
 18943  001714                     i2l5550:
 18944  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 18945  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18946  00171C  4A0D               	infsnz	i2printf@f,f,c
 18947  00171E  2A0E               	incf	i2printf@f+1,f,c
 18948  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18949  001720  6AF8               	clrf	tblptru,c
 18950  001722                     	endif
 18951  001722                     	if	0	;tblptru may be non-zero
 18952  001722                     	endif
 18953  001722  0008               	tblrd		*
 18954  001724  CFF5 F027          	movff	tablat,i2printf@c
 18955  001728  5027               	movf	i2printf@c,w,c
 18956                           
 18957                           ; Switch size 1, requested type "space"
 18958                           ; Number of cases is 5, Range of values is 0 to 117
 18959                           ; switch strategies available:
 18960                           ; Name         Instructions Cycles
 18961                           ; simple_byte           16     9 (average)
 18962                           ;	Chosen strategy is simple_byte
 18963  00172A  0A00               	xorlw	0	; case 0
 18964  00172C  B4D8               	btfsc	status,2,c
 18965  00172E  0012               	return	
 18966  001730  0A64               	xorlw	100	; case 100
 18967  001732  B4D8               	btfsc	status,2,c
 18968  001734  D00A               	goto	i2l1224
 18969  001736  0A0D               	xorlw	13	; case 105
 18970  001738  B4D8               	btfsc	status,2,c
 18971  00173A  D007               	goto	i2l1224
 18972  00173C  0A1A               	xorlw	26	; case 115
 18973  00173E  B4D8               	btfsc	status,2,c
 18974  001740  D778               	goto	i2l5516
 18975  001742  0A06               	xorlw	6	; case 117
 18976  001744  B4D8               	btfsc	status,2,c
 18977  001746  D7E4               	goto	i2l5546
 18978  001748  D0BC               	goto	i2l5622
 18979  00174A                     i2l1224:
 18980                           
 18981                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18982  00174A  BC26               	btfsc	i2printf@flag,6,c
 18983  00174C  D015               	goto	i2l5562
 18984                           
 18985                           ;doprnt.c: 1253: {
 18986                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18987  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 18988  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18989  001756  CFDE F024          	movff	postinc2,i2printf@val
 18990  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 18991  00175E  0E02               	movlw	2
 18992  001760  2620               	addwf	i2printf@ap,f,c
 18993  001762  0E00               	movlw	0
 18994  001764  2221               	addwfc	i2printf@ap+1,f,c
 18995                           
 18996                           ;doprnt.c: 1261: if((int)val < 0) {
 18997  001766  AE25               	btfss	i2printf@val+1,7,c
 18998  001768  D013               	goto	i2l5566
 18999                           
 19000                           ;doprnt.c: 1262: flag |= 0x03;
 19001  00176A  0E03               	movlw	3
 19002  00176C  1226               	iorwf	i2printf@flag,f,c
 19003                           
 19004                           ;doprnt.c: 1263: val = -val;
 19005  00176E  6C24               	negf	i2printf@val,c
 19006  001770  1E25               	comf	i2printf@val+1,f,c
 19007  001772  B0D8               	btfsc	status,0,c
 19008  001774  2A25               	incf	i2printf@val+1,f,c
 19009                           
 19010                           ;doprnt.c: 1264: }
 19011                           ;doprnt.c: 1266: }
 19012  001776  D00C               	goto	i2l5566
 19013  001778                     i2l5562:
 19014                           
 19015                           ;doprnt.c: 1268: else
 19016                           ;doprnt.c: 1273: {
 19017                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19018  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 19019  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19020  001780  CFDE F024          	movff	postinc2,i2printf@val
 19021  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 19022  001788  0E02               	movlw	2
 19023  00178A  2620               	addwf	i2printf@ap,f,c
 19024  00178C  0E00               	movlw	0
 19025  00178E  2221               	addwfc	i2printf@ap+1,f,c
 19026  001790                     i2l5566:
 19027                           
 19028                           ;doprnt.c: 1287: }
 19029                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19030  001790  0E01               	movlw	1
 19031  001792  6E27               	movwf	i2printf@c,c
 19032  001794                     i2l5568:
 19033  001794  0E05               	movlw	5
 19034  001796  1827               	xorwf	i2printf@c,w,c
 19035  001798  B4D8               	btfsc	status,2,c
 19036  00179A  D015               	goto	i2l5580
 19037                           
 19038                           ;doprnt.c: 1306: if(val < dpowers[c])
 19039  00179C  5027               	movf	i2printf@c,w,c
 19040  00179E  0D02               	mullw	2
 19041  0017A0  0E4A               	movlw	low _dpowers
 19042  0017A2  24F3               	addwf	prodl,w,c
 19043  0017A4  6EF6               	movwf	tblptrl,c
 19044  0017A6  0EFB               	movlw	high _dpowers
 19045  0017A8  20F4               	addwfc	prodh,w,c
 19046  0017AA  6EF7               	movwf	tblptrh,c
 19047  0017AC                     	if	1	;There are 3 active tblptr bytes
 19048  0017AC  6AF8               	clrf	tblptru,c
 19049  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 19050  0017B0  22F8               	addwfc	tblptru,f,c
 19051  0017B2                     	endif
 19052  0017B2  0009               	tblrd		*+
 19053  0017B4  50F5               	movf	tablat,w,c
 19054  0017B6  5C24               	subwf	i2printf@val,w,c
 19055  0017B8  0009               	tblrd		*+
 19056  0017BA  50F5               	movf	tablat,w,c
 19057  0017BC  5825               	subwfb	i2printf@val+1,w,c
 19058  0017BE  A0D8               	btfss	status,0,c
 19059  0017C0  D002               	goto	i2l5580
 19060                           
 19061                           ;doprnt.c: 1307: break;
 19062  0017C2  2A27               	incf	i2printf@c,f,c
 19063  0017C4  D7E7               	goto	i2l5568
 19064  0017C6                     i2l5580:
 19065                           
 19066                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19067  0017C6  5028               	movf	i2printf@width,w,c
 19068  0017C8  1029               	iorwf	i2printf@width+1,w,c
 19069  0017CA  B4D8               	btfsc	status,2,c
 19070  0017CC  D009               	goto	i2l5586
 19071  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 19072  0017D2  0E03               	movlw	3
 19073  0017D4  1619               	andwf	??i2_printf,f,c
 19074  0017D6  B4D8               	btfsc	status,2,c
 19075  0017D8  D003               	goto	i2l5586
 19076                           
 19077                           ;doprnt.c: 1346: width--;
 19078  0017DA  0628               	decf	i2printf@width,f,c
 19079  0017DC  A0D8               	btfss	status,0,c
 19080  0017DE  0629               	decf	i2printf@width+1,f,c
 19081  0017E0                     i2l5586:
 19082                           
 19083                           ;doprnt.c: 1381: if(width > c)
 19084  0017E0  0E80               	movlw	128
 19085  0017E2  BE27               	btfsc	i2printf@c,7,c
 19086  0017E4  0E7F               	movlw	127
 19087  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 19088  0017E8  5028               	movf	i2printf@width,w,c
 19089  0017EA  5C27               	subwf	i2printf@c,w,c
 19090  0017EC  5029               	movf	i2printf@width+1,w,c
 19091  0017EE  0A80               	xorlw	128
 19092  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 19093  0017F2  B0D8               	btfsc	status,0,c
 19094  0017F4  D007               	goto	i2l5590
 19095                           
 19096                           ;doprnt.c: 1382: width -= c;
 19097  0017F6  5027               	movf	i2printf@c,w,c
 19098  0017F8  5E28               	subwf	i2printf@width,f,c
 19099  0017FA  0E00               	movlw	0
 19100  0017FC  BE27               	btfsc	i2printf@c,7,c
 19101  0017FE  0EFF               	movlw	255
 19102  001800  5A29               	subwfb	i2printf@width+1,f,c
 19103  001802  D004               	goto	i2l5592
 19104  001804                     i2l5590:
 19105                           
 19106                           ;doprnt.c: 1383: else
 19107                           ;doprnt.c: 1384: width = 0;
 19108  001804  0E00               	movlw	0
 19109  001806  6E29               	movwf	i2printf@width+1,c
 19110  001808  0E00               	movlw	0
 19111  00180A  6E28               	movwf	i2printf@width,c
 19112  00180C                     i2l5592:
 19113                           
 19114                           ;doprnt.c: 1387: if(flag & 0x04) {
 19115  00180C  A426               	btfss	i2printf@flag,2,c
 19116  00180E  D014               	goto	i2l5604
 19117                           
 19118                           ;doprnt.c: 1392: if(flag & 0x03)
 19119  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 19120  001814  0E03               	movlw	3
 19121  001816  1619               	andwf	??i2_printf,f,c
 19122  001818  B4D8               	btfsc	status,2,c
 19123  00181A  D003               	goto	i2l5598
 19124                           
 19125                           ;doprnt.c: 1393: (putch('-') );
 19126  00181C  0E2D               	movlw	45
 19127  00181E  EC01  F022         	call	i2_putch
 19128  001822                     i2l5598:
 19129                           
 19130                           ;doprnt.c: 1415: if(width)
 19131  001822  5028               	movf	i2printf@width,w,c
 19132  001824  1029               	iorwf	i2printf@width+1,w,c
 19133  001826  B4D8               	btfsc	status,2,c
 19134  001828  D01E               	goto	i2l5614
 19135                           
 19136                           ;doprnt.c: 1417: (putch('0') );
 19137                           
 19138                           ;doprnt.c: 1416: do
 19139  00182A  0E30               	movlw	48
 19140  00182C  EC01  F022         	call	i2_putch
 19141                           
 19142                           ;doprnt.c: 1418: while(--width);
 19143  001830  0628               	decf	i2printf@width,f,c
 19144  001832  A0D8               	btfss	status,0,c
 19145  001834  0629               	decf	i2printf@width+1,f,c
 19146  001836  D7F5               	goto	i2l5598
 19147  001838                     i2l5604:
 19148                           
 19149                           ;doprnt.c: 1422: {
 19150                           ;doprnt.c: 1424: if(width
 19151                           ;doprnt.c: 1428: )
 19152  001838  5028               	movf	i2printf@width,w,c
 19153  00183A  1029               	iorwf	i2printf@width+1,w,c
 19154  00183C  B4D8               	btfsc	status,2,c
 19155  00183E  D00A               	goto	i2l5610
 19156  001840                     i2l5606:
 19157                           
 19158                           ;doprnt.c: 1430: (putch(' ') );
 19159  001840  0E20               	movlw	32
 19160  001842  EC01  F022         	call	i2_putch
 19161                           
 19162                           ;doprnt.c: 1431: while(--width);
 19163  001846  0628               	decf	i2printf@width,f,c
 19164  001848  A0D8               	btfss	status,0,c
 19165  00184A  0629               	decf	i2printf@width+1,f,c
 19166  00184C  5028               	movf	i2printf@width,w,c
 19167  00184E  1029               	iorwf	i2printf@width+1,w,c
 19168  001850  A4D8               	btfss	status,2,c
 19169  001852  D7F6               	goto	i2l5606
 19170  001854                     i2l5610:
 19171                           
 19172                           ;doprnt.c: 1438: if(flag & 0x03)
 19173  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 19174  001858  0E03               	movlw	3
 19175  00185A  1619               	andwf	??i2_printf,f,c
 19176  00185C  B4D8               	btfsc	status,2,c
 19177  00185E  D003               	goto	i2l5614
 19178                           
 19179                           ;doprnt.c: 1439: (putch('-') );
 19180  001860  0E2D               	movlw	45
 19181  001862  EC01  F022         	call	i2_putch
 19182  001866                     i2l5614:
 19183                           
 19184                           ;doprnt.c: 1469: }
 19185                           ;doprnt.c: 1472: prec = c;
 19186  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 19187                           
 19188                           ;doprnt.c: 1474: while(prec--) {
 19189  00186A  D027               	goto	i2l5620
 19190  00186C                     i2l5616:
 19191                           
 19192                           ;doprnt.c: 1478: {
 19193                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19194  00186C  501D               	movf	i2printf@prec,w,c
 19195  00186E  0D02               	mullw	2
 19196  001870  0E4A               	movlw	low _dpowers
 19197  001872  24F3               	addwf	prodl,w,c
 19198  001874  6EF6               	movwf	tblptrl,c
 19199  001876  0EFB               	movlw	high _dpowers
 19200  001878  20F4               	addwfc	prodh,w,c
 19201  00187A  6EF7               	movwf	tblptrh,c
 19202  00187C                     	if	1	;There are 3 active tblptr bytes
 19203  00187C  6AF8               	clrf	tblptru,c
 19204  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 19205  001880  22F8               	addwfc	tblptru,f,c
 19206  001882                     	endif
 19207  001882  0009               	tblrd		*+
 19208  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19209  001888  000A               	tblrd		*-
 19210  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19211  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19212  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19213  001896  EC44  F01E         	call	i2___lwdiv	;wreg free
 19214  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19215  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19216  0018A2  0E00               	movlw	0
 19217  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 19218  0018A6  0E0A               	movlw	10
 19219  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 19220  0018AA  EC2A  F01F         	call	i2___lwmod	;wreg free
 19221  0018AE  5001               	movf	?i2___lwmod,w,c
 19222  0018B0  0F30               	addlw	48
 19223  0018B2  6E27               	movwf	i2printf@c,c
 19224                           
 19225                           ;doprnt.c: 1523: }
 19226                           ;doprnt.c: 1524: (putch(c) );
 19227  0018B4  5027               	movf	i2printf@c,w,c
 19228  0018B6  EC01  F022         	call	i2_putch
 19229  0018BA                     i2l5620:
 19230  0018BA  061D               	decf	i2printf@prec,f,c
 19231  0018BC  281D               	incf	i2printf@prec,w,c
 19232  0018BE  A4D8               	btfss	status,2,c
 19233  0018C0  D7D5               	goto	i2l5616
 19234  0018C2                     i2l5622:
 19235  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19236  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19237  0018CA  4A0D               	infsnz	i2printf@f,f,c
 19238  0018CC  2A0E               	incf	i2printf@f+1,f,c
 19239  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19240  0018CE  6AF8               	clrf	tblptru,c
 19241  0018D0                     	endif
 19242  0018D0                     	if	0	;tblptru may be non-zero
 19243  0018D0                     	endif
 19244  0018D0  0008               	tblrd		*
 19245  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 19246  0018D6  5027               	movf	i2printf@c,w,c
 19247  0018D8  B4D8               	btfsc	status,2,c
 19248  0018DA  0012               	return	
 19249  0018DC  D64E               	goto	i2l5492
 19250  0018DE                     __end_ofi2_printf:
 19251                           	opt stack 0
 19252                           pclatu	equ	0xFFB
 19253                           pclath	equ	0xFFA
 19254                           tblptru	equ	0xFF8
 19255                           tblptrh	equ	0xFF7
 19256                           tblptrl	equ	0xFF6
 19257                           tablat	equ	0xFF5
 19258                           prodh	equ	0xFF4
 19259                           prodl	equ	0xFF3
 19260                           intcon	equ	0xFF2
 19261                           intcon2	equ	0xFF1
 19262                           intcon3	equ	0xFF0
 19263                           indf0	equ	0xFEF
 19264                           postinc0	equ	0xFEE
 19265                           fsr0h	equ	0xFEA
 19266                           fsr0l	equ	0xFE9
 19267                           wreg	equ	0xFE8
 19268                           postdec1	equ	0xFE5
 19269                           fsr1h	equ	0xFE2
 19270                           fsr1l	equ	0xFE1
 19271                           indf2	equ	0xFDF
 19272                           postinc2	equ	0xFDE
 19273                           postdec2	equ	0xFDD
 19274                           fsr2h	equ	0xFDA
 19275                           fsr2l	equ	0xFD9
 19276                           status	equ	0xFD8
 19277                           
 19278 ;; *************** function i2_putch *****************
 19279 ;; Defined at:
 19280 ;;		line 20 in file "lcd.c"
 19281 ;; Parameters:    Size  Location     Type
 19282 ;;  data            1    wreg     unsigned char 
 19283 ;; Auto vars:     Size  Location     Type
 19284 ;;  data            1    2[COMRAM] unsigned char 
 19285 ;; Return value:  Size  Location     Type
 19286 ;;                  1    wreg      void 
 19287 ;; Registers used:
 19288 ;;		wreg, status,2, status,0, cstack
 19289 ;; Tracked objects:
 19290 ;;		On entry : 0/0
 19291 ;;		On exit  : 0/0
 19292 ;;		Unchanged: 0/0
 19293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19295 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19297 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19298 ;;Total ram usage:        1 bytes
 19299 ;; Hardware stack levels used:    1
 19300 ;; Hardware stack levels required when called:    1
 19301 ;; This function calls:
 19302 ;;		i2_lcdNibble
 19303 ;; This function is called by:
 19304 ;;		i2_printf
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           	psect	text77
 19309  004402                     __ptext77:
 19310                           	opt stack 0
 19311  004402                     i2_putch:
 19312                           	opt stack 19
 19313                           
 19314                           ;incstack = 0
 19315                           ;i2putch@data stored from wreg
 19316  004402  6E03               	movwf	i2putch@data,c
 19317                           
 19318                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19319  004404  848C               	bsf	3980,2,c	;volatile
 19320                           
 19321                           ;lcd.c: 22: lcdNibble(data);
 19322  004406  5003               	movf	i2putch@data,w,c
 19323  004408  EC19  F01E         	call	i2_lcdNibble
 19324  00440C  0012               	return		;funcret
 19325  00440E                     __end_ofi2_putch:
 19326                           	opt stack 0
 19327                           pclatu	equ	0xFFB
 19328                           pclath	equ	0xFFA
 19329                           tblptru	equ	0xFF8
 19330                           tblptrh	equ	0xFF7
 19331                           tblptrl	equ	0xFF6
 19332                           tablat	equ	0xFF5
 19333                           prodh	equ	0xFF4
 19334                           prodl	equ	0xFF3
 19335                           intcon	equ	0xFF2
 19336                           intcon2	equ	0xFF1
 19337                           intcon3	equ	0xFF0
 19338                           indf0	equ	0xFEF
 19339                           postinc0	equ	0xFEE
 19340                           fsr0h	equ	0xFEA
 19341                           fsr0l	equ	0xFE9
 19342                           wreg	equ	0xFE8
 19343                           postdec1	equ	0xFE5
 19344                           fsr1h	equ	0xFE2
 19345                           fsr1l	equ	0xFE1
 19346                           indf2	equ	0xFDF
 19347                           postinc2	equ	0xFDE
 19348                           postdec2	equ	0xFDD
 19349                           fsr2h	equ	0xFDA
 19350                           fsr2l	equ	0xFD9
 19351                           status	equ	0xFD8
 19352                           
 19353 ;; *************** function i2_isdigit *****************
 19354 ;; Defined at:
 19355 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19356 ;; Parameters:    Size  Location     Type
 19357 ;;  c               1    wreg     unsigned char 
 19358 ;; Auto vars:     Size  Location     Type
 19359 ;;  c               1    2[COMRAM] unsigned char 
 19360 ;; Return value:  Size  Location     Type
 19361 ;;		None               void
 19362 ;; Registers used:
 19363 ;;		wreg, status,2, status,0
 19364 ;; Tracked objects:
 19365 ;;		On entry : 0/0
 19366 ;;		On exit  : 0/0
 19367 ;;		Unchanged: 0/0
 19368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19373 ;;Total ram usage:        3 bytes
 19374 ;; Hardware stack levels used:    1
 19375 ;; This function calls:
 19376 ;;		Nothing
 19377 ;; This function is called by:
 19378 ;;		i2_printf
 19379 ;; This function uses a non-reentrant model
 19380 ;;
 19381                           
 19382                           	psect	text78
 19383  00435A                     __ptext78:
 19384                           	opt stack 0
 19385  00435A                     i2_isdigit:
 19386                           	opt stack 20
 19387                           
 19388                           ;incstack = 0
 19389                           ;i2isdigit@c stored from wreg
 19390  00435A  6E03               	movwf	i2isdigit@c,c
 19391  00435C  0E00               	movlw	0
 19392  00435E  6E02               	movwf	i2_isdigit$1881,c
 19393  004360  0E3A               	movlw	58
 19394  004362  6003               	cpfslt	i2isdigit@c,c
 19395  004364  D005               	goto	i2l5202
 19396  004366  0E2F               	movlw	47
 19397  004368  6403               	cpfsgt	i2isdigit@c,c
 19398  00436A  D002               	goto	i2l5202
 19399  00436C  0E01               	movlw	1
 19400  00436E  6E02               	movwf	i2_isdigit$1881,c
 19401  004370                     i2l5202:
 19402  004370  C002  F001         	movff	i2_isdigit$1881,??i2_isdigit
 19403  004374  3001               	rrcf	??i2_isdigit,w,c
 19404  004376  0012               	return	
 19405  004378                     __end_ofi2_isdigit:
 19406                           	opt stack 0
 19407                           pclatu	equ	0xFFB
 19408                           pclath	equ	0xFFA
 19409                           tblptru	equ	0xFF8
 19410                           tblptrh	equ	0xFF7
 19411                           tblptrl	equ	0xFF6
 19412                           tablat	equ	0xFF5
 19413                           prodh	equ	0xFF4
 19414                           prodl	equ	0xFF3
 19415                           intcon	equ	0xFF2
 19416                           intcon2	equ	0xFF1
 19417                           intcon3	equ	0xFF0
 19418                           indf0	equ	0xFEF
 19419                           postinc0	equ	0xFEE
 19420                           fsr0h	equ	0xFEA
 19421                           fsr0l	equ	0xFE9
 19422                           wreg	equ	0xFE8
 19423                           postdec1	equ	0xFE5
 19424                           fsr1h	equ	0xFE2
 19425                           fsr1l	equ	0xFE1
 19426                           indf2	equ	0xFDF
 19427                           postinc2	equ	0xFDE
 19428                           postdec2	equ	0xFDD
 19429                           fsr2h	equ	0xFDA
 19430                           fsr2l	equ	0xFD9
 19431                           status	equ	0xFD8
 19432                           
 19433 ;; *************** function i2___wmul *****************
 19434 ;; Defined at:
 19435 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19436 ;; Parameters:    Size  Location     Type
 19437 ;;  multiplier      2    0[COMRAM] unsigned int 
 19438 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19439 ;; Auto vars:     Size  Location     Type
 19440 ;;  __wmul          2    4[COMRAM] unsigned int 
 19441 ;; Return value:  Size  Location     Type
 19442 ;;                  2    0[COMRAM] unsigned int 
 19443 ;; Registers used:
 19444 ;;		wreg, status,2, status,0, prodl, prodh
 19445 ;; Tracked objects:
 19446 ;;		On entry : 0/0
 19447 ;;		On exit  : 0/0
 19448 ;;		Unchanged: 0/0
 19449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19450 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19451 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19453 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19454 ;;Total ram usage:        6 bytes
 19455 ;; Hardware stack levels used:    1
 19456 ;; This function calls:
 19457 ;;		Nothing
 19458 ;; This function is called by:
 19459 ;;		_printSortTimer
 19460 ;;		_retrieveLog
 19461 ;;		i2_printf
 19462 ;; This function uses a non-reentrant model
 19463 ;;
 19464                           
 19465                           	psect	text79
 19466  004282                     __ptext79:
 19467                           	opt stack 0
 19468  004282                     i2___wmul:
 19469                           	opt stack 20
 19470                           
 19471                           ;incstack = 0
 19472  004282  5001               	movf	i2___wmul@multiplier,w,c
 19473  004284  0203               	mulwf	i2___wmul@multiplicand,c
 19474  004286  CFF3 F005          	movff	prodl,i2___wmul@product
 19475  00428A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19476  00428E  5001               	movf	i2___wmul@multiplier,w,c
 19477  004290  0204               	mulwf	i2___wmul@multiplicand+1,c
 19478  004292  50F3               	movf	prodl,w,c
 19479  004294  2606               	addwf	i2___wmul@product+1,f,c
 19480  004296  5002               	movf	i2___wmul@multiplier+1,w,c
 19481  004298  0203               	mulwf	i2___wmul@multiplicand,c
 19482  00429A  50F3               	movf	prodl,w,c
 19483  00429C  2606               	addwf	i2___wmul@product+1,f,c
 19484  00429E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19485  0042A2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19486  0042A6  0012               	return	
 19487  0042A8                     __end_ofi2___wmul:
 19488                           	opt stack 0
 19489                           pclatu	equ	0xFFB
 19490                           pclath	equ	0xFFA
 19491                           tblptru	equ	0xFF8
 19492                           tblptrh	equ	0xFF7
 19493                           tblptrl	equ	0xFF6
 19494                           tablat	equ	0xFF5
 19495                           prodh	equ	0xFF4
 19496                           prodl	equ	0xFF3
 19497                           intcon	equ	0xFF2
 19498                           intcon2	equ	0xFF1
 19499                           intcon3	equ	0xFF0
 19500                           indf0	equ	0xFEF
 19501                           postinc0	equ	0xFEE
 19502                           fsr0h	equ	0xFEA
 19503                           fsr0l	equ	0xFE9
 19504                           wreg	equ	0xFE8
 19505                           postdec1	equ	0xFE5
 19506                           fsr1h	equ	0xFE2
 19507                           fsr1l	equ	0xFE1
 19508                           indf2	equ	0xFDF
 19509                           postinc2	equ	0xFDE
 19510                           postdec2	equ	0xFDD
 19511                           fsr2h	equ	0xFDA
 19512                           fsr2l	equ	0xFD9
 19513                           status	equ	0xFD8
 19514                           
 19515 ;; *************** function i2___lwmod *****************
 19516 ;; Defined at:
 19517 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19518 ;; Parameters:    Size  Location     Type
 19519 ;;  dividend        2    0[COMRAM] unsigned int 
 19520 ;;  divisor         2    2[COMRAM] unsigned int 
 19521 ;; Auto vars:     Size  Location     Type
 19522 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19523 ;; Return value:  Size  Location     Type
 19524 ;;                  2    0[COMRAM] unsigned int 
 19525 ;; Registers used:
 19526 ;;		wreg, status,2, status,0
 19527 ;; Tracked objects:
 19528 ;;		On entry : 0/0
 19529 ;;		On exit  : 0/0
 19530 ;;		Unchanged: 0/0
 19531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19535 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19536 ;;Total ram usage:        5 bytes
 19537 ;; Hardware stack levels used:    1
 19538 ;; This function calls:
 19539 ;;		Nothing
 19540 ;; This function is called by:
 19541 ;;		_printSortTimer
 19542 ;;		i2_printf
 19543 ;; This function uses a non-reentrant model
 19544 ;;
 19545                           
 19546                           	psect	text80
 19547  003E54                     __ptext80:
 19548                           	opt stack 0
 19549  003E54                     i2___lwmod:
 19550                           	opt stack 20
 19551                           
 19552                           ;incstack = 0
 19553  003E54  5003               	movf	i2___lwmod@divisor,w,c
 19554  003E56  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19555  003E58  B4D8               	btfsc	status,2,c
 19556  003E5A  D018               	goto	i2l1681
 19557  003E5C  0E01               	movlw	1
 19558  003E5E  6E05               	movwf	i2___lwmod@counter,c
 19559  003E60  D004               	goto	i2l5234
 19560  003E62                     i2l5232:
 19561  003E62  90D8               	bcf	status,0,c
 19562  003E64  3603               	rlcf	i2___lwmod@divisor,f,c
 19563  003E66  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19564  003E68  2A05               	incf	i2___lwmod@counter,f,c
 19565  003E6A                     i2l5234:
 19566  003E6A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19567  003E6C  D7FA               	goto	i2l5232
 19568  003E6E                     i2l5236:
 19569  003E6E  5003               	movf	i2___lwmod@divisor,w,c
 19570  003E70  5C01               	subwf	i2___lwmod@dividend,w,c
 19571  003E72  5004               	movf	i2___lwmod@divisor+1,w,c
 19572  003E74  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19573  003E76  A0D8               	btfss	status,0,c
 19574  003E78  D004               	goto	i2l5240
 19575  003E7A  5003               	movf	i2___lwmod@divisor,w,c
 19576  003E7C  5E01               	subwf	i2___lwmod@dividend,f,c
 19577  003E7E  5004               	movf	i2___lwmod@divisor+1,w,c
 19578  003E80  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19579  003E82                     i2l5240:
 19580  003E82  90D8               	bcf	status,0,c
 19581  003E84  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19582  003E86  3203               	rrcf	i2___lwmod@divisor,f,c
 19583  003E88  2E05               	decfsz	i2___lwmod@counter,f,c
 19584  003E8A  D7F1               	goto	i2l5236
 19585  003E8C                     i2l1681:
 19586  003E8C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19587  003E90  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19588  003E94  0012               	return		;funcret
 19589  003E96                     __end_ofi2___lwmod:
 19590                           	opt stack 0
 19591                           pclatu	equ	0xFFB
 19592                           pclath	equ	0xFFA
 19593                           tblptru	equ	0xFF8
 19594                           tblptrh	equ	0xFF7
 19595                           tblptrl	equ	0xFF6
 19596                           tablat	equ	0xFF5
 19597                           prodh	equ	0xFF4
 19598                           prodl	equ	0xFF3
 19599                           intcon	equ	0xFF2
 19600                           intcon2	equ	0xFF1
 19601                           intcon3	equ	0xFF0
 19602                           indf0	equ	0xFEF
 19603                           postinc0	equ	0xFEE
 19604                           fsr0h	equ	0xFEA
 19605                           fsr0l	equ	0xFE9
 19606                           wreg	equ	0xFE8
 19607                           postdec1	equ	0xFE5
 19608                           fsr1h	equ	0xFE2
 19609                           fsr1l	equ	0xFE1
 19610                           indf2	equ	0xFDF
 19611                           postinc2	equ	0xFDE
 19612                           postdec2	equ	0xFDD
 19613                           fsr2h	equ	0xFDA
 19614                           fsr2l	equ	0xFD9
 19615                           status	equ	0xFD8
 19616                           
 19617 ;; *************** function i2___lwdiv *****************
 19618 ;; Defined at:
 19619 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19620 ;; Parameters:    Size  Location     Type
 19621 ;;  dividend        2    5[COMRAM] unsigned int 
 19622 ;;  divisor         2    7[COMRAM] unsigned int 
 19623 ;; Auto vars:     Size  Location     Type
 19624 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 19625 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 19626 ;; Return value:  Size  Location     Type
 19627 ;;                  2    5[COMRAM] unsigned int 
 19628 ;; Registers used:
 19629 ;;		wreg, status,2, status,0
 19630 ;; Tracked objects:
 19631 ;;		On entry : 0/0
 19632 ;;		On exit  : 0/0
 19633 ;;		Unchanged: 0/0
 19634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19636 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19638 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19639 ;;Total ram usage:        7 bytes
 19640 ;; Hardware stack levels used:    1
 19641 ;; This function calls:
 19642 ;;		Nothing
 19643 ;; This function is called by:
 19644 ;;		_printSortTimer
 19645 ;;		i2_printf
 19646 ;; This function uses a non-reentrant model
 19647 ;;
 19648                           
 19649                           	psect	text81
 19650  003C88                     __ptext81:
 19651                           	opt stack 0
 19652  003C88                     i2___lwdiv:
 19653                           	opt stack 20
 19654                           
 19655                           ;incstack = 0
 19656  003C88  0E00               	movlw	0
 19657  003C8A  6E0B               	movwf	i2___lwdiv@quotient+1,c
 19658  003C8C  0E00               	movlw	0
 19659  003C8E  6E0A               	movwf	i2___lwdiv@quotient,c
 19660  003C90  5008               	movf	i2___lwdiv@divisor,w,c
 19661  003C92  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 19662  003C94  B4D8               	btfsc	status,2,c
 19663  003C96  D01C               	goto	i2l1671
 19664  003C98  0E01               	movlw	1
 19665  003C9A  6E0C               	movwf	i2___lwdiv@counter,c
 19666  003C9C  D004               	goto	i2l5214
 19667  003C9E                     i2l5212:
 19668  003C9E  90D8               	bcf	status,0,c
 19669  003CA0  3608               	rlcf	i2___lwdiv@divisor,f,c
 19670  003CA2  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 19671  003CA4  2A0C               	incf	i2___lwdiv@counter,f,c
 19672  003CA6                     i2l5214:
 19673  003CA6  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 19674  003CA8  D7FA               	goto	i2l5212
 19675  003CAA                     i2l5216:
 19676  003CAA  90D8               	bcf	status,0,c
 19677  003CAC  360A               	rlcf	i2___lwdiv@quotient,f,c
 19678  003CAE  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 19679  003CB0  5008               	movf	i2___lwdiv@divisor,w,c
 19680  003CB2  5C06               	subwf	i2___lwdiv@dividend,w,c
 19681  003CB4  5009               	movf	i2___lwdiv@divisor+1,w,c
 19682  003CB6  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 19683  003CB8  A0D8               	btfss	status,0,c
 19684  003CBA  D005               	goto	i2l5224
 19685  003CBC  5008               	movf	i2___lwdiv@divisor,w,c
 19686  003CBE  5E06               	subwf	i2___lwdiv@dividend,f,c
 19687  003CC0  5009               	movf	i2___lwdiv@divisor+1,w,c
 19688  003CC2  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 19689  003CC4  800A               	bsf	i2___lwdiv@quotient,0,c
 19690  003CC6                     i2l5224:
 19691  003CC6  90D8               	bcf	status,0,c
 19692  003CC8  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 19693  003CCA  3208               	rrcf	i2___lwdiv@divisor,f,c
 19694  003CCC  2E0C               	decfsz	i2___lwdiv@counter,f,c
 19695  003CCE  D7ED               	goto	i2l5216
 19696  003CD0                     i2l1671:
 19697  003CD0  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 19698  003CD4  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 19699  003CD8  0012               	return		;funcret
 19700  003CDA                     __end_ofi2___lwdiv:
 19701                           	opt stack 0
 19702                           pclatu	equ	0xFFB
 19703                           pclath	equ	0xFFA
 19704                           tblptru	equ	0xFF8
 19705                           tblptrh	equ	0xFF7
 19706                           tblptrl	equ	0xFF6
 19707                           tablat	equ	0xFF5
 19708                           prodh	equ	0xFF4
 19709                           prodl	equ	0xFF3
 19710                           intcon	equ	0xFF2
 19711                           intcon2	equ	0xFF1
 19712                           intcon3	equ	0xFF0
 19713                           indf0	equ	0xFEF
 19714                           postinc0	equ	0xFEE
 19715                           fsr0h	equ	0xFEA
 19716                           fsr0l	equ	0xFE9
 19717                           wreg	equ	0xFE8
 19718                           postdec1	equ	0xFE5
 19719                           fsr1h	equ	0xFE2
 19720                           fsr1l	equ	0xFE1
 19721                           indf2	equ	0xFDF
 19722                           postinc2	equ	0xFDE
 19723                           postdec2	equ	0xFDD
 19724                           fsr2h	equ	0xFDA
 19725                           fsr2l	equ	0xFD9
 19726                           status	equ	0xFD8
 19727                           
 19728 ;; *************** function i2_lcdInst *****************
 19729 ;; Defined at:
 19730 ;;		line 15 in file "lcd.c"
 19731 ;; Parameters:    Size  Location     Type
 19732 ;;  data            1    wreg     unsigned char 
 19733 ;; Auto vars:     Size  Location     Type
 19734 ;;  data            1    2[COMRAM] unsigned char 
 19735 ;; Return value:  Size  Location     Type
 19736 ;;                  1    wreg      void 
 19737 ;; Registers used:
 19738 ;;		wreg, status,2, status,0, cstack
 19739 ;; Tracked objects:
 19740 ;;		On entry : 0/0
 19741 ;;		On exit  : 0/0
 19742 ;;		Unchanged: 0/0
 19743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19748 ;;Total ram usage:        1 bytes
 19749 ;; Hardware stack levels used:    1
 19750 ;; Hardware stack levels required when called:    1
 19751 ;; This function calls:
 19752 ;;		i2_lcdNibble
 19753 ;; This function is called by:
 19754 ;;		_change_state_to_menu_11
 19755 ;;		_change_state_to_menu_23
 19756 ;;		_change_state_to_logs_11
 19757 ;;		_change_state_to_logs_12
 19758 ;;		_change_state_to_logs_22
 19759 ;;		_change_state_to_logs_23
 19760 ;;		_change_state_to_logs_33
 19761 ;;		_change_state_to_logs_34
 19762 ;;		_printSortTimer
 19763 ;;		i2_change_state_to_menu_start
 19764 ;;		i2_change_state_to_menu_12
 19765 ;;		i2_change_state_to_menu_22
 19766 ;;		i2_printRTC
 19767 ;; This function uses a non-reentrant model
 19768 ;;
 19769                           
 19770                           	psect	text82
 19771  00440E                     __ptext82:
 19772                           	opt stack 0
 19773  00440E                     i2_lcdInst:
 19774                           	opt stack 19
 19775                           
 19776                           ;incstack = 0
 19777                           ;i2lcdInst@data stored from wreg
 19778  00440E  6E03               	movwf	i2lcdInst@data,c
 19779                           
 19780                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19781  004410  948C               	bcf	3980,2,c	;volatile
 19782                           
 19783                           ;lcd.c: 17: lcdNibble(data);
 19784  004412  5003               	movf	i2lcdInst@data,w,c
 19785  004414  EC19  F01E         	call	i2_lcdNibble
 19786  004418  0012               	return		;funcret
 19787  00441A                     __end_ofi2_lcdInst:
 19788                           	opt stack 0
 19789                           pclatu	equ	0xFFB
 19790                           pclath	equ	0xFFA
 19791                           tblptru	equ	0xFF8
 19792                           tblptrh	equ	0xFF7
 19793                           tblptrl	equ	0xFF6
 19794                           tablat	equ	0xFF5
 19795                           prodh	equ	0xFF4
 19796                           prodl	equ	0xFF3
 19797                           intcon	equ	0xFF2
 19798                           intcon2	equ	0xFF1
 19799                           intcon3	equ	0xFF0
 19800                           indf0	equ	0xFEF
 19801                           postinc0	equ	0xFEE
 19802                           fsr0h	equ	0xFEA
 19803                           fsr0l	equ	0xFE9
 19804                           wreg	equ	0xFE8
 19805                           postdec1	equ	0xFE5
 19806                           fsr1h	equ	0xFE2
 19807                           fsr1l	equ	0xFE1
 19808                           indf2	equ	0xFDF
 19809                           postinc2	equ	0xFDE
 19810                           postdec2	equ	0xFDD
 19811                           fsr2h	equ	0xFDA
 19812                           fsr2l	equ	0xFD9
 19813                           status	equ	0xFD8
 19814                           
 19815 ;; *************** function i2_lcdNibble *****************
 19816 ;; Defined at:
 19817 ;;		line 25 in file "lcd.c"
 19818 ;; Parameters:    Size  Location     Type
 19819 ;;  data            1    wreg     unsigned char 
 19820 ;; Auto vars:     Size  Location     Type
 19821 ;;  data            1    1[COMRAM] unsigned char 
 19822 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19823 ;; Return value:  Size  Location     Type
 19824 ;;                  1    wreg      void 
 19825 ;; Registers used:
 19826 ;;		wreg, status,2, status,0
 19827 ;; Tracked objects:
 19828 ;;		On entry : 0/0
 19829 ;;		On exit  : 0/0
 19830 ;;		Unchanged: 0/0
 19831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19836 ;;Total ram usage:        2 bytes
 19837 ;; Hardware stack levels used:    1
 19838 ;; This function calls:
 19839 ;;		Nothing
 19840 ;; This function is called by:
 19841 ;;		i2_lcdInst
 19842 ;;		i2_putch
 19843 ;; This function uses a non-reentrant model
 19844 ;;
 19845                           
 19846                           	psect	text83
 19847  003C32                     __ptext83:
 19848                           	opt stack 0
 19849  003C32                     i2_lcdNibble:
 19850                           	opt stack 19
 19851                           
 19852                           ;incstack = 0
 19853                           ;i2lcdNibble@data stored from wreg
 19854  003C32  6E02               	movwf	i2lcdNibble@data,c
 19855                           
 19856                           ;lcd.c: 27: char temp = data & 0xF0;
 19857  003C34  5002               	movf	i2lcdNibble@data,w,c
 19858  003C36  0BF0               	andlw	240
 19859  003C38  6E01               	movwf	i2lcdNibble@temp,c
 19860                           
 19861                           ;lcd.c: 28: LATD = LATD & 0x0F;
 19862  003C3A  508C               	movf	3980,w,c	;volatile
 19863  003C3C  0B0F               	andlw	15
 19864  003C3E  6E8C               	movwf	3980,c	;volatile
 19865                           
 19866                           ;lcd.c: 29: LATD = temp | LATD;
 19867  003C40  5001               	movf	i2lcdNibble@temp,w,c
 19868  003C42  108C               	iorwf	3980,w,c	;volatile
 19869  003C44  6E8C               	movwf	3980,c	;volatile
 19870                           
 19871                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 19872  003C46  868C               	bsf	3980,3,c	;volatile
 19873                           
 19874                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19875  003C48  0E42               	movlw	66
 19876  003C4A                     i2u788_47:
 19877  003C4A  2EE8               	decfsz	wreg,f,c
 19878  003C4C  D7FE               	bra	i2u788_47
 19879  003C4E  D000               	nop2	
 19880                           
 19881                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 19882  003C50  968C               	bcf	3980,3,c	;volatile
 19883                           
 19884                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19885  003C52  0E42               	movlw	66
 19886  003C54                     i2u789_47:
 19887  003C54  2EE8               	decfsz	wreg,f,c
 19888  003C56  D7FE               	bra	i2u789_47
 19889  003C58  D000               	nop2	
 19890                           
 19891                           ;lcd.c: 36: data = data << 4;
 19892  003C5A  3802               	swapf	i2lcdNibble@data,w,c
 19893  003C5C  0BF0               	andlw	240
 19894  003C5E  6E02               	movwf	i2lcdNibble@data,c
 19895                           
 19896                           ;lcd.c: 38: temp = data & 0xF0;
 19897  003C60  5002               	movf	i2lcdNibble@data,w,c
 19898  003C62  0BF0               	andlw	240
 19899  003C64  6E01               	movwf	i2lcdNibble@temp,c
 19900                           
 19901                           ;lcd.c: 39: LATD = LATD & 0x0F;
 19902  003C66  508C               	movf	3980,w,c	;volatile
 19903  003C68  0B0F               	andlw	15
 19904  003C6A  6E8C               	movwf	3980,c	;volatile
 19905                           
 19906                           ;lcd.c: 40: LATD = temp | LATD;
 19907  003C6C  5001               	movf	i2lcdNibble@temp,w,c
 19908  003C6E  108C               	iorwf	3980,w,c	;volatile
 19909  003C70  6E8C               	movwf	3980,c	;volatile
 19910                           
 19911                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 19912  003C72  868C               	bsf	3980,3,c	;volatile
 19913                           
 19914                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19915  003C74  0E42               	movlw	66
 19916  003C76                     i2u790_47:
 19917  003C76  2EE8               	decfsz	wreg,f,c
 19918  003C78  D7FE               	bra	i2u790_47
 19919  003C7A  D000               	nop2	
 19920                           
 19921                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 19922  003C7C  968C               	bcf	3980,3,c	;volatile
 19923                           
 19924                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19925  003C7E  0E42               	movlw	66
 19926  003C80                     i2u791_47:
 19927  003C80  2EE8               	decfsz	wreg,f,c
 19928  003C82  D7FE               	bra	i2u791_47
 19929  003C84  D000               	nop2	
 19930  003C86  0012               	return		;funcret
 19931  003C88                     __end_ofi2_lcdNibble:
 19932                           	opt stack 0
 19933                           pclatu	equ	0xFFB
 19934                           pclath	equ	0xFFA
 19935                           tblptru	equ	0xFF8
 19936                           tblptrh	equ	0xFF7
 19937                           tblptrl	equ	0xFF6
 19938                           tablat	equ	0xFF5
 19939                           prodh	equ	0xFF4
 19940                           prodl	equ	0xFF3
 19941                           intcon	equ	0xFF2
 19942                           intcon2	equ	0xFF1
 19943                           intcon3	equ	0xFF0
 19944                           indf0	equ	0xFEF
 19945                           postinc0	equ	0xFEE
 19946                           fsr0h	equ	0xFEA
 19947                           fsr0l	equ	0xFE9
 19948                           wreg	equ	0xFE8
 19949                           postdec1	equ	0xFE5
 19950                           fsr1h	equ	0xFE2
 19951                           fsr1l	equ	0xFE1
 19952                           indf2	equ	0xFDF
 19953                           postinc2	equ	0xFDE
 19954                           postdec2	equ	0xFDD
 19955                           fsr2h	equ	0xFDA
 19956                           fsr2l	equ	0xFD9
 19957                           status	equ	0xFD8
 19958                           
 19959 ;; *************** function i2_getRTC *****************
 19960 ;; Defined at:
 19961 ;;		line 44 in file "RTC.c"
 19962 ;; Parameters:    Size  Location     Type
 19963 ;;		None
 19964 ;; Auto vars:     Size  Location     Type
 19965 ;;  getRTC          2    3[COMRAM] int 
 19966 ;; Return value:  Size  Location     Type
 19967 ;;                  1    wreg      void 
 19968 ;; Registers used:
 19969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19970 ;; Tracked objects:
 19971 ;;		On entry : 0/0
 19972 ;;		On exit  : 0/0
 19973 ;;		Unchanged: 0/0
 19974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19979 ;;Total ram usage:        2 bytes
 19980 ;; Hardware stack levels used:    1
 19981 ;; Hardware stack levels required when called:    2
 19982 ;; This function calls:
 19983 ;;		i2_I2C_Master_Read
 19984 ;;		i2_I2C_Master_Start
 19985 ;;		i2_I2C_Master_Stop
 19986 ;;		i2_I2C_Master_Write
 19987 ;; This function is called by:
 19988 ;;		_printSortTimer
 19989 ;;		i2_printRTC
 19990 ;; This function uses a non-reentrant model
 19991 ;;
 19992                           
 19993                           	psect	text84
 19994  00391C                     __ptext84:
 19995                           	opt stack 0
 19996  00391C                     i2_getRTC:
 19997                           	opt stack 18
 19998                           
 19999                           ;RTC.c: 48: I2C_Master_Start();
 20000                           
 20001                           ;incstack = 0
 20002  00391C  EC27  F022         	call	i2_I2C_Master_Start	;wreg free
 20003                           
 20004                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20005  003920  0E00               	movlw	0
 20006  003922  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20007  003924  0ED0               	movlw	208
 20008  003926  6E02               	movwf	i2I2C_Master_Write@d,c
 20009  003928  EC12  F022         	call	i2_I2C_Master_Write	;wreg free
 20010                           
 20011                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20012  00392C  0E00               	movlw	0
 20013  00392E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20014  003930  0E00               	movlw	0
 20015  003932  6E02               	movwf	i2I2C_Master_Write@d,c
 20016  003934  EC12  F022         	call	i2_I2C_Master_Write	;wreg free
 20017                           
 20018                           ;RTC.c: 51: I2C_Master_Stop();
 20019  003938  EC23  F022         	call	i2_I2C_Master_Stop	;wreg free
 20020                           
 20021                           ;RTC.c: 54: I2C_Master_Start();
 20022  00393C  EC27  F022         	call	i2_I2C_Master_Start	;wreg free
 20023                           
 20024                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20025  003940  0E00               	movlw	0
 20026  003942  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20027  003944  0ED1               	movlw	209
 20028  003946  6E02               	movwf	i2I2C_Master_Write@d,c
 20029  003948  EC12  F022         	call	i2_I2C_Master_Write	;wreg free
 20030                           
 20031                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20032  00394C  0E00               	movlw	0
 20033  00394E  6E05               	movwf	i2getRTC@i+1,c
 20034  003950  0E00               	movlw	0
 20035  003952  6E04               	movwf	i2getRTC@i,c
 20036  003954                     i2l5464:
 20037  003954  BE05               	btfsc	i2getRTC@i+1,7,c
 20038  003956  D006               	goto	i2l5468
 20039  003958  5005               	movf	i2getRTC@i+1,w,c
 20040  00395A  E111               	bnz	i2l5474
 20041  00395C  0E06               	movlw	6
 20042  00395E  5C04               	subwf	i2getRTC@i,w,c
 20043  003960  B0D8               	btfsc	status,0,c
 20044  003962  D00D               	goto	i2l5474
 20045  003964                     i2l5468:
 20046                           
 20047                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20048  003964  0E24               	movlw	low _time
 20049  003966  2404               	addwf	i2getRTC@i,w,c
 20050  003968  6ED9               	movwf	fsr2l,c
 20051  00396A  0E01               	movlw	high _time
 20052  00396C  2005               	addwfc	i2getRTC@i+1,w,c
 20053  00396E  6EDA               	movwf	fsr2h,c
 20054  003970  0E01               	movlw	1
 20055  003972  EC54  F021         	call	i2_I2C_Master_Read
 20056  003976  6EDF               	movwf	indf2,c
 20057  003978  4A04               	infsnz	i2getRTC@i,f,c
 20058  00397A  2A05               	incf	i2getRTC@i+1,f,c
 20059  00397C  D7EB               	goto	i2l5464
 20060  00397E                     i2l5474:
 20061                           
 20062                           ;RTC.c: 58: }
 20063                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20064  00397E  0E00               	movlw	0
 20065  003980  EC54  F021         	call	i2_I2C_Master_Read
 20066  003984  0101               	movlb	1	; () banked
 20067  003986  6F2A               	movwf	(_time+6)& (0+255),b
 20068                           
 20069                           ;RTC.c: 60: I2C_Master_Stop();
 20070  003988  EC23  F022         	call	i2_I2C_Master_Stop	;wreg free
 20071  00398C  0012               	return		;funcret
 20072  00398E                     __end_ofi2_getRTC:
 20073                           	opt stack 0
 20074                           pclatu	equ	0xFFB
 20075                           pclath	equ	0xFFA
 20076                           tblptru	equ	0xFF8
 20077                           tblptrh	equ	0xFF7
 20078                           tblptrl	equ	0xFF6
 20079                           tablat	equ	0xFF5
 20080                           prodh	equ	0xFF4
 20081                           prodl	equ	0xFF3
 20082                           intcon	equ	0xFF2
 20083                           intcon2	equ	0xFF1
 20084                           intcon3	equ	0xFF0
 20085                           indf0	equ	0xFEF
 20086                           postinc0	equ	0xFEE
 20087                           fsr0h	equ	0xFEA
 20088                           fsr0l	equ	0xFE9
 20089                           wreg	equ	0xFE8
 20090                           postdec1	equ	0xFE5
 20091                           fsr1h	equ	0xFE2
 20092                           fsr1l	equ	0xFE1
 20093                           indf2	equ	0xFDF
 20094                           postinc2	equ	0xFDE
 20095                           postdec2	equ	0xFDD
 20096                           fsr2h	equ	0xFDA
 20097                           fsr2l	equ	0xFD9
 20098                           status	equ	0xFD8
 20099                           
 20100 ;; *************** function i2_I2C_Master_Write *****************
 20101 ;; Defined at:
 20102 ;;		line 49 in file "I2C.c"
 20103 ;; Parameters:    Size  Location     Type
 20104 ;;  d               2    1[COMRAM] unsigned int 
 20105 ;; Auto vars:     Size  Location     Type
 20106 ;;		None
 20107 ;; Return value:  Size  Location     Type
 20108 ;;                  1    wreg      void 
 20109 ;; Registers used:
 20110 ;;		wreg, status,2, status,0, cstack
 20111 ;; Tracked objects:
 20112 ;;		On entry : 0/0
 20113 ;;		On exit  : 0/0
 20114 ;;		Unchanged: 0/0
 20115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20119 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20120 ;;Total ram usage:        2 bytes
 20121 ;; Hardware stack levels used:    1
 20122 ;; Hardware stack levels required when called:    1
 20123 ;; This function calls:
 20124 ;;		i2_I2C_Master_Wait
 20125 ;; This function is called by:
 20126 ;;		i2_getRTC
 20127 ;; This function uses a non-reentrant model
 20128 ;;
 20129                           
 20130                           	psect	text85
 20131  004424                     __ptext85:
 20132                           	opt stack 0
 20133  004424                     i2_I2C_Master_Write:
 20134                           	opt stack 18
 20135                           
 20136                           ;I2C.c: 51: I2C_Master_Wait();
 20137                           
 20138                           ;incstack = 0
 20139  004424  ECE8  F021         	call	i2_I2C_Master_Wait	;wreg free
 20140                           
 20141                           ;I2C.c: 52: SSPBUF = d;
 20142  004428  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20143  00442C  0012               	return		;funcret
 20144  00442E                     __end_ofi2_I2C_Master_Write:
 20145                           	opt stack 0
 20146                           pclatu	equ	0xFFB
 20147                           pclath	equ	0xFFA
 20148                           tblptru	equ	0xFF8
 20149                           tblptrh	equ	0xFF7
 20150                           tblptrl	equ	0xFF6
 20151                           tablat	equ	0xFF5
 20152                           prodh	equ	0xFF4
 20153                           prodl	equ	0xFF3
 20154                           intcon	equ	0xFF2
 20155                           intcon2	equ	0xFF1
 20156                           intcon3	equ	0xFF0
 20157                           indf0	equ	0xFEF
 20158                           postinc0	equ	0xFEE
 20159                           fsr0h	equ	0xFEA
 20160                           fsr0l	equ	0xFE9
 20161                           wreg	equ	0xFE8
 20162                           postdec1	equ	0xFE5
 20163                           fsr1h	equ	0xFE2
 20164                           fsr1l	equ	0xFE1
 20165                           indf2	equ	0xFDF
 20166                           postinc2	equ	0xFDE
 20167                           postdec2	equ	0xFDD
 20168                           fsr2h	equ	0xFDA
 20169                           fsr2l	equ	0xFD9
 20170                           status	equ	0xFD8
 20171                           
 20172 ;; *************** function i2_I2C_Master_Stop *****************
 20173 ;; Defined at:
 20174 ;;		line 43 in file "I2C.c"
 20175 ;; Parameters:    Size  Location     Type
 20176 ;;		None
 20177 ;; Auto vars:     Size  Location     Type
 20178 ;;		None
 20179 ;; Return value:  Size  Location     Type
 20180 ;;                  1    wreg      void 
 20181 ;; Registers used:
 20182 ;;		wreg, status,2, status,0, cstack
 20183 ;; Tracked objects:
 20184 ;;		On entry : 0/0
 20185 ;;		On exit  : 0/0
 20186 ;;		Unchanged: 0/0
 20187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20192 ;;Total ram usage:        0 bytes
 20193 ;; Hardware stack levels used:    1
 20194 ;; Hardware stack levels required when called:    1
 20195 ;; This function calls:
 20196 ;;		i2_I2C_Master_Wait
 20197 ;; This function is called by:
 20198 ;;		i2_getRTC
 20199 ;; This function uses a non-reentrant model
 20200 ;;
 20201                           
 20202                           	psect	text86
 20203  004446                     __ptext86:
 20204                           	opt stack 0
 20205  004446                     i2_I2C_Master_Stop:
 20206                           	opt stack 18
 20207                           
 20208                           ;I2C.c: 45: I2C_Master_Wait();
 20209                           
 20210                           ;incstack = 0
 20211  004446  ECE8  F021         	call	i2_I2C_Master_Wait	;wreg free
 20212                           
 20213                           ;I2C.c: 46: PEN = 1;
 20214  00444A  84C5               	bsf	4037,2,c	;volatile
 20215  00444C  0012               	return		;funcret
 20216  00444E                     __end_ofi2_I2C_Master_Stop:
 20217                           	opt stack 0
 20218                           pclatu	equ	0xFFB
 20219                           pclath	equ	0xFFA
 20220                           tblptru	equ	0xFF8
 20221                           tblptrh	equ	0xFF7
 20222                           tblptrl	equ	0xFF6
 20223                           tablat	equ	0xFF5
 20224                           prodh	equ	0xFF4
 20225                           prodl	equ	0xFF3
 20226                           intcon	equ	0xFF2
 20227                           intcon2	equ	0xFF1
 20228                           intcon3	equ	0xFF0
 20229                           indf0	equ	0xFEF
 20230                           postinc0	equ	0xFEE
 20231                           fsr0h	equ	0xFEA
 20232                           fsr0l	equ	0xFE9
 20233                           wreg	equ	0xFE8
 20234                           postdec1	equ	0xFE5
 20235                           fsr1h	equ	0xFE2
 20236                           fsr1l	equ	0xFE1
 20237                           indf2	equ	0xFDF
 20238                           postinc2	equ	0xFDE
 20239                           postdec2	equ	0xFDD
 20240                           fsr2h	equ	0xFDA
 20241                           fsr2l	equ	0xFD9
 20242                           status	equ	0xFD8
 20243                           
 20244 ;; *************** function i2_I2C_Master_Start *****************
 20245 ;; Defined at:
 20246 ;;		line 31 in file "I2C.c"
 20247 ;; Parameters:    Size  Location     Type
 20248 ;;		None
 20249 ;; Auto vars:     Size  Location     Type
 20250 ;;		None
 20251 ;; Return value:  Size  Location     Type
 20252 ;;                  1    wreg      void 
 20253 ;; Registers used:
 20254 ;;		wreg, status,2, status,0, cstack
 20255 ;; Tracked objects:
 20256 ;;		On entry : 0/0
 20257 ;;		On exit  : 0/0
 20258 ;;		Unchanged: 0/0
 20259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20264 ;;Total ram usage:        0 bytes
 20265 ;; Hardware stack levels used:    1
 20266 ;; Hardware stack levels required when called:    1
 20267 ;; This function calls:
 20268 ;;		i2_I2C_Master_Wait
 20269 ;; This function is called by:
 20270 ;;		i2_getRTC
 20271 ;; This function uses a non-reentrant model
 20272 ;;
 20273                           
 20274                           	psect	text87
 20275  00444E                     __ptext87:
 20276                           	opt stack 0
 20277  00444E                     i2_I2C_Master_Start:
 20278                           	opt stack 18
 20279                           
 20280                           ;I2C.c: 33: I2C_Master_Wait();
 20281                           
 20282                           ;incstack = 0
 20283  00444E  ECE8  F021         	call	i2_I2C_Master_Wait	;wreg free
 20284                           
 20285                           ;I2C.c: 34: SEN = 1;
 20286  004452  80C5               	bsf	4037,0,c	;volatile
 20287  004454  0012               	return		;funcret
 20288  004456                     __end_ofi2_I2C_Master_Start:
 20289                           	opt stack 0
 20290                           pclatu	equ	0xFFB
 20291                           pclath	equ	0xFFA
 20292                           tblptru	equ	0xFF8
 20293                           tblptrh	equ	0xFF7
 20294                           tblptrl	equ	0xFF6
 20295                           tablat	equ	0xFF5
 20296                           prodh	equ	0xFF4
 20297                           prodl	equ	0xFF3
 20298                           intcon	equ	0xFF2
 20299                           intcon2	equ	0xFF1
 20300                           intcon3	equ	0xFF0
 20301                           indf0	equ	0xFEF
 20302                           postinc0	equ	0xFEE
 20303                           fsr0h	equ	0xFEA
 20304                           fsr0l	equ	0xFE9
 20305                           wreg	equ	0xFE8
 20306                           postdec1	equ	0xFE5
 20307                           fsr1h	equ	0xFE2
 20308                           fsr1l	equ	0xFE1
 20309                           indf2	equ	0xFDF
 20310                           postinc2	equ	0xFDE
 20311                           postdec2	equ	0xFDD
 20312                           fsr2h	equ	0xFDA
 20313                           fsr2l	equ	0xFD9
 20314                           status	equ	0xFD8
 20315                           
 20316 ;; *************** function i2_I2C_Master_Read *****************
 20317 ;; Defined at:
 20318 ;;		line 55 in file "I2C.c"
 20319 ;; Parameters:    Size  Location     Type
 20320 ;;  a               1    wreg     unsigned char 
 20321 ;; Auto vars:     Size  Location     Type
 20322 ;;  a               1    1[COMRAM] unsigned char 
 20323 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20324 ;; Return value:  Size  Location     Type
 20325 ;;                  1    wreg      unsigned char 
 20326 ;; Registers used:
 20327 ;;		wreg, status,2, status,0, cstack
 20328 ;; Tracked objects:
 20329 ;;		On entry : 0/0
 20330 ;;		On exit  : 0/0
 20331 ;;		Unchanged: 0/0
 20332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;Total ram usage:        2 bytes
 20338 ;; Hardware stack levels used:    1
 20339 ;; Hardware stack levels required when called:    1
 20340 ;; This function calls:
 20341 ;;		i2_I2C_Master_Wait
 20342 ;; This function is called by:
 20343 ;;		i2_getRTC
 20344 ;; This function uses a non-reentrant model
 20345 ;;
 20346                           
 20347                           	psect	text88
 20348  0042A8                     __ptext88:
 20349                           	opt stack 0
 20350  0042A8                     i2_I2C_Master_Read:
 20351                           	opt stack 18
 20352                           
 20353                           ;incstack = 0
 20354                           ;i2I2C_Master_Read@a stored from wreg
 20355  0042A8  6E02               	movwf	i2I2C_Master_Read@a,c
 20356                           
 20357                           ;I2C.c: 57: unsigned char temp;
 20358                           ;I2C.c: 58: I2C_Master_Wait();
 20359  0042AA  ECE8  F021         	call	i2_I2C_Master_Wait	;wreg free
 20360                           
 20361                           ;I2C.c: 59: RCEN = 1;
 20362  0042AE  86C5               	bsf	4037,3,c	;volatile
 20363                           
 20364                           ;I2C.c: 60: I2C_Master_Wait();
 20365  0042B0  ECE8  F021         	call	i2_I2C_Master_Wait	;wreg free
 20366                           
 20367                           ;I2C.c: 61: temp = SSPBUF;
 20368  0042B4  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20369                           
 20370                           ;I2C.c: 62: I2C_Master_Wait();
 20371  0042B8  ECE8  F021         	call	i2_I2C_Master_Wait	;wreg free
 20372                           
 20373                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20374  0042BC  5002               	movf	i2I2C_Master_Read@a,w,c
 20375  0042BE  A4D8               	btfss	status,2,c
 20376  0042C0  D002               	goto	i2u358_40
 20377  0042C2  8AC5               	bsf	4037,5,c	;volatile
 20378  0042C4  D001               	goto	i2l5178
 20379  0042C6                     i2u358_40:
 20380  0042C6  9AC5               	bcf	4037,5,c	;volatile
 20381  0042C8                     i2l5178:
 20382                           
 20383                           ;I2C.c: 64: ACKEN = 1;
 20384  0042C8  88C5               	bsf	4037,4,c	;volatile
 20385                           
 20386                           ;I2C.c: 65: return temp;
 20387  0042CA  5003               	movf	i2I2C_Master_Read@temp,w,c
 20388  0042CC  0012               	return	
 20389  0042CE                     __end_ofi2_I2C_Master_Read:
 20390                           	opt stack 0
 20391                           pclatu	equ	0xFFB
 20392                           pclath	equ	0xFFA
 20393                           tblptru	equ	0xFF8
 20394                           tblptrh	equ	0xFF7
 20395                           tblptrl	equ	0xFF6
 20396                           tablat	equ	0xFF5
 20397                           prodh	equ	0xFF4
 20398                           prodl	equ	0xFF3
 20399                           intcon	equ	0xFF2
 20400                           intcon2	equ	0xFF1
 20401                           intcon3	equ	0xFF0
 20402                           indf0	equ	0xFEF
 20403                           postinc0	equ	0xFEE
 20404                           fsr0h	equ	0xFEA
 20405                           fsr0l	equ	0xFE9
 20406                           wreg	equ	0xFE8
 20407                           postdec1	equ	0xFE5
 20408                           fsr1h	equ	0xFE2
 20409                           fsr1l	equ	0xFE1
 20410                           indf2	equ	0xFDF
 20411                           postinc2	equ	0xFDE
 20412                           postdec2	equ	0xFDD
 20413                           fsr2h	equ	0xFDA
 20414                           fsr2l	equ	0xFD9
 20415                           status	equ	0xFD8
 20416                           
 20417 ;; *************** function i2_I2C_Master_Wait *****************
 20418 ;; Defined at:
 20419 ;;		line 26 in file "I2C.c"
 20420 ;; Parameters:    Size  Location     Type
 20421 ;;		None
 20422 ;; Auto vars:     Size  Location     Type
 20423 ;;		None
 20424 ;; Return value:  Size  Location     Type
 20425 ;;                  1    wreg      void 
 20426 ;; Registers used:
 20427 ;;		wreg, status,2, status,0
 20428 ;; Tracked objects:
 20429 ;;		On entry : 0/0
 20430 ;;		On exit  : 0/0
 20431 ;;		Unchanged: 0/0
 20432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20435 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20436 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20437 ;;Total ram usage:        1 bytes
 20438 ;; Hardware stack levels used:    1
 20439 ;; This function calls:
 20440 ;;		Nothing
 20441 ;; This function is called by:
 20442 ;;		i2_I2C_Master_Start
 20443 ;;		i2_I2C_Master_Stop
 20444 ;;		i2_I2C_Master_Write
 20445 ;;		i2_I2C_Master_Read
 20446 ;; This function uses a non-reentrant model
 20447 ;;
 20448                           
 20449                           	psect	text89
 20450  0043D0                     __ptext89:
 20451                           	opt stack 0
 20452  0043D0                     i2_I2C_Master_Wait:
 20453                           	opt stack 18
 20454  0043D0                     i2l66:
 20455  0043D0  B4C7               	btfsc	4039,2,c	;volatile
 20456  0043D2  D7FE               	goto	i2l66
 20457  0043D4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20458  0043D8  0E1F               	movlw	31
 20459  0043DA  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20460  0043DC  B4D8               	btfsc	status,2,c
 20461  0043DE  0012               	return	
 20462  0043E0  D7F7               	goto	i2l66
 20463  0043E2                     __end_ofi2_I2C_Master_Wait:
 20464                           	opt stack 0
 20465                           pclatu	equ	0xFFB
 20466                           pclath	equ	0xFFA
 20467                           tblptru	equ	0xFF8
 20468                           tblptrh	equ	0xFF7
 20469                           tblptrl	equ	0xFF6
 20470                           tablat	equ	0xFF5
 20471                           prodh	equ	0xFF4
 20472                           prodl	equ	0xFF3
 20473                           intcon	equ	0xFF2
 20474                           intcon2	equ	0xFF1
 20475                           intcon3	equ	0xFF0
 20476                           indf0	equ	0xFEF
 20477                           postinc0	equ	0xFEE
 20478                           fsr0h	equ	0xFEA
 20479                           fsr0l	equ	0xFE9
 20480                           wreg	equ	0xFE8
 20481                           postdec1	equ	0xFE5
 20482                           fsr1h	equ	0xFE2
 20483                           fsr1l	equ	0xFE1
 20484                           indf2	equ	0xFDF
 20485                           postinc2	equ	0xFDE
 20486                           postdec2	equ	0xFDD
 20487                           fsr2h	equ	0xFDA
 20488                           fsr2l	equ	0xFD9
 20489                           status	equ	0xFD8
 20490                           pclatu	equ	0xFFB
 20491                           pclath	equ	0xFFA
 20492                           tblptru	equ	0xFF8
 20493                           tblptrh	equ	0xFF7
 20494                           tblptrl	equ	0xFF6
 20495                           tablat	equ	0xFF5
 20496                           prodh	equ	0xFF4
 20497                           prodl	equ	0xFF3
 20498                           intcon	equ	0xFF2
 20499                           intcon2	equ	0xFF1
 20500                           intcon3	equ	0xFF0
 20501                           indf0	equ	0xFEF
 20502                           postinc0	equ	0xFEE
 20503                           fsr0h	equ	0xFEA
 20504                           fsr0l	equ	0xFE9
 20505                           wreg	equ	0xFE8
 20506                           postdec1	equ	0xFE5
 20507                           fsr1h	equ	0xFE2
 20508                           fsr1l	equ	0xFE1
 20509                           indf2	equ	0xFDF
 20510                           postinc2	equ	0xFDE
 20511                           postdec2	equ	0xFDD
 20512                           fsr2h	equ	0xFDA
 20513                           fsr2l	equ	0xFD9
 20514                           status	equ	0xFD8
 20515                           
 20516                           	psect	rparam
 20517  0000                     pclatu	equ	0xFFB
 20518                           pclath	equ	0xFFA
 20519                           tblptru	equ	0xFF8
 20520                           tblptrh	equ	0xFF7
 20521                           tblptrl	equ	0xFF6
 20522                           tablat	equ	0xFF5
 20523                           prodh	equ	0xFF4
 20524                           prodl	equ	0xFF3
 20525                           intcon	equ	0xFF2
 20526                           intcon2	equ	0xFF1
 20527                           intcon3	equ	0xFF0
 20528                           indf0	equ	0xFEF
 20529                           postinc0	equ	0xFEE
 20530                           fsr0h	equ	0xFEA
 20531                           fsr0l	equ	0xFE9
 20532                           wreg	equ	0xFE8
 20533                           postdec1	equ	0xFE5
 20534                           fsr1h	equ	0xFE2
 20535                           fsr1l	equ	0xFE1
 20536                           indf2	equ	0xFDF
 20537                           postinc2	equ	0xFDE
 20538                           postdec2	equ	0xFDD
 20539                           fsr2h	equ	0xFDA
 20540                           fsr2l	equ	0xFD9
 20541                           status	equ	0xFD8
 20542                           
 20543                           	psect	temp
 20544  00007E                     btemp:
 20545                           	opt stack 0
 20546  00007E                     	ds	1
 20547  0000                     int$flags	set	btemp
 20548                           pclatu	equ	0xFFB
 20549                           pclath	equ	0xFFA
 20550                           tblptru	equ	0xFF8
 20551                           tblptrh	equ	0xFF7
 20552                           tblptrl	equ	0xFF6
 20553                           tablat	equ	0xFF5
 20554                           prodh	equ	0xFF4
 20555                           prodl	equ	0xFF3
 20556                           intcon	equ	0xFF2
 20557                           intcon2	equ	0xFF1
 20558                           intcon3	equ	0xFF0
 20559                           indf0	equ	0xFEF
 20560                           postinc0	equ	0xFEE
 20561                           fsr0h	equ	0xFEA
 20562                           fsr0l	equ	0xFE9
 20563                           wreg	equ	0xFE8
 20564                           postdec1	equ	0xFE5
 20565                           fsr1h	equ	0xFE2
 20566                           fsr1l	equ	0xFE1
 20567                           indf2	equ	0xFDF
 20568                           postinc2	equ	0xFDE
 20569                           postdec2	equ	0xFDD
 20570                           fsr2h	equ	0xFDA
 20571                           fsr2l	equ	0xFD9
 20572                           status	equ	0xFD8


Data Sizes:
    Strings     1195
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_111(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_110(CODE[17]), STR_109(CODE[17]), STR_108(CODE[10]), STR_107(CODE[13]), 
		 -> STR_106(CODE[18]), STR_105(CODE[18]), STR_104(CODE[15]), STR_103(CODE[15]), 
		 -> STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), STR_95(CODE[17]), 
		 -> STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), STR_91(CODE[15]), 
		 -> STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), STR_87(CODE[17]), 
		 -> STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), STR_83(CODE[10]), 
		 -> STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), STR_79(CODE[13]), 
		 -> STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), 
		 -> STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), 
		 -> STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[19]), 
		 -> STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  156631
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   21619
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   17951
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    3461
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    3461
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10402
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9655
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21136
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20286
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42152
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12327
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   60649
                                             70 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8074
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7959
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   12617
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _updateServoPosition                                  8     4      4    3461
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    7984
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8097
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7959
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7824
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _updateServoPosition
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 21:25:58 2017

                                    _i 012B                     i2_I2C_Master_Start 444E  
                   i2_I2C_Master_Write 4424                                     l66 43BC  
                                   _ID 2CC0                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l478 35EA                                    l719 19AC  
                                  l593 1C64                                    l913 3118  
                                  l926 4388                                    l935 2CAA  
                                  l779 38E2                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 4064  
      __end_of_change_state_to_menu_12 3F06        __end_of_change_state_to_menu_22 3ECE  
      __end_of_change_state_to_menu_23 4034           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4154  
      __end_of_change_state_to_logs_12 4124        __end_of_change_state_to_logs_22 40F4  
      __end_of_change_state_to_logs_23 41B0        __end_of_change_state_to_logs_33 40C4  
      __end_of_change_state_to_logs_34 4094                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1013 3058  
                                 l1104 0E8E                                   l1016 3078  
                                 l1035 323C                                   l1116 1028  
                                 l1044 27A4                                   l1141 3818  
                                 l1133 37C6                                   l1150 3BC0  
                                 l1070 0926                                   l1038 3240  
                                 l1135 37CA                                   l1047 27A8  
                                 l1224 137E                                   l1136 37CE  
                                 l1080 0B34                                   l1056 286C  
                                 l1137 37D2                                   l1129 37AA  
                                 l1138 37D6                                   l1170 2F7C  
                                 l1074 09CC                                   l1139 37DA  
                                 l1067 0922                                   l1156 3BD0  
                                 l1164 2F30                                   l1077 0A32  
                                 l1078 0A80                                   l1079 0AE6  
                                 l1187 371E                                   l1179 36EA  
                                 l1618 341C                                   l5110 4228  
                                 l1671 389C                                   l1681 3AB6  
                                 l5130 385E                                   l6002 3652  
                                 l5300 12DC                                   l6012 3694  
                                 l5126 384C                                   l5150 3A84  
                                 l5310 133E                                   l5302 12E2  
                                 l5070 4202                                   l6006 3668  
                                 l5128 3858                                   l5304 12FA  
                                 l5138 388E                                   l5154 3AA8  
                                 l5146 3A72                                   l5330 13D0  
                                 l5314 1344                                   l5402 377A  
                                 l5148 3A7E                                   l5332 13D6  
                                 l5308 1326                                   l5260 115A  
                                 l5068 41F0                                   l7012 3368  
                                 l7004 3346                                   l5092 417A  
                                 l7100 0118                                   l5350 1434  
                                 l5326 13B6                                   l5262 116C  
                                 l5344 1412                                   l5280 1226  
                                 l5272 11AA                                   l5256 1146  
                                 l7008 3354                                   l7040 354E  
                                 l7032 3518                                   l7024 34F4  
                                 l5408 379A                                   l7200 032E  
                                 l7112 014C                                   l7104 0122  
                                 l5440 33A0                                   l6304 2D8C  
                                 l6312 2DA4                                   l6216 196A  
                                 l5370 14B8                                   l5362 1490  
                                 l5354 146C                                   l5290 1264  
                                 l5266 1176                                   l5426 38CE  
                                 l7034 3524                                   l7210 03C4  
                                 l7202 034C                                   l5442 33B0  
                                 l6330 2A4E                                   l5380 14EC  
                                 l5356 1476                                   l5292 126A  
                                 l5428 38F8                                   l7036 352A  
                                 l7044 355C                                   l7028 3504  
                                 l7212 03E2                                   l7204 036A  
                                 l7132 01B4                                   l7108 013A  
                                 l5452 340A                                   l5444 33B6  
                                 l6332 2A68                                   l6340 2AB6  
                                 l6308 2D98                                   l5374 14D2  
                                 l6430 2860                                   l6422 2842  
                                 l5390 3F10                                   l7310 06D8  
                                 l7214 0400                                   l7206 0388  
                                 l7222 045A                                   l7126 01A4  
                                 l7142 01DA                                   l6334 2A82  
                                 l6342 2AE4                                   l6262 1B72  
                                 l6246 1B38                                   l5384 1544  
                                 l5368 14AC                                   l5288 1258  
                                 l6600 0C3E                                   l6416 2800  
                                 l7048 3570                                   l5392 3F1C  
                                 l7232 050A                                   l7216 041E  
                                 l7208 03A6                                   l7224 04BE  
                                 l7160 0236                                   l7136 01CC  
                                 l7128 01AA                                   l6336 2A9C  
                                 l5378 14E6                                   l5298 12D0  
                                 l5386 1550                                   l6610 0C66  
                                 l7314 06E2                                   l7250 0556  
                                 l7242 0534                                   l7218 043C  
                                 l7170 0260                                   l6700 0E44  
                                 l6604 0C56                                   l6444 28D0  
                                 l5660 1C6E                                   l7412 089E  
                                 l7404 087C                                   l7332 072E  
                                 l7324 070C                                   l7236 0522  
                                 l7228 0500                                   l7164 024E  
                                 l7156 022C                                   l6710 0E6C  
                                 l6630 0CDA                                   l6622 0CB8  
                                 l6614 0C7E                                   l6606 0C5C  
                                 l6438 288E                                   l5398 3764  
                                 l5670 1D04                                   l5662 1C8C  
                                 l5654 1BE2                                   l7350 0794  
                                 l7318 06FA                                   l7270 061C  
                                 l7246 053E                                   l7174 026A  
                                 l7094 0100                                   l6294 2D5C  
                                 _ADIE 007CEE                                   l6704 0E4E  
                                 l6640 0D02                                   l6632 0CE0  
                                 l5680 1D9A                                   l5672 1D22  
                                 l5664 1CAA                                   l7408 0886  
                                 l7328 0716                                   l7416 08AA  
                                 l7096 0106                                   l5824 343C  
                                 l6714 0E76                                   l6626 0CC2  
                                 l6570 0BB0                                   l6490 09A0  
                                 l5682 1DB8                                   l5674 1D40  
                                 l5666 1CC8                                   l7354 079E  
                                 l7274 0626                                   l7194 02D4  
                                 l7178 0282                                   l5922 3D6A  
                                 l5834 34C8                                   l6732 0EE0  
                                 l6708 0E66                                   l6652 0D46  
                                 l6636 0CEA                                   l6580 0BD8  
                                 l6484 0990                                   l5676 1D5E  
                                 l5668 1CE6                                   l7372 07EA  
                                 l7364 07C8                                   l7292 0672  
                                 l7284 0650                                   l7196 02F2  
                                 l5828 3452                                   l6822 109A  
                                 l6814 1078                                   l6742 0F08  
                                 l6662 0D6E                                   l6574 0BBA  
                                 l6494 09B8                                   l6486 0996  
                                 l5678 1D7C                                   l5686 1DD6  
                                 l7390 0848                                   l7358 07B6  
                                 l7278 063E                                   l7198 0310  
                                 l5870 3184                                   l6920 2F3E  
                                 l6904 3712                                   l6840 10E6  
                                 l6832 10C2                                   l6824 10A0  
                                 l6736 0EF8                                   l6728 0ED6  
                                 l6656 0D5E                                   l6648 0D3C  
                                 l6584 0BE2                                   l5688 1E34  
                                 l7368 07D2                                   l7288 065A  
                                 l6930 2F64                                   l6850 110E  
                                 l6818 1082                                   l6762 0F7C  
                                 l6754 0F5A                                   l6746 0F20  
                                 l6738 0EFE                                   l6682 0DE2  
                                 l6674 0DC0                                   l6666 0D86  
                                 l6658 0D64                                   l6578 0BD2  
                                 l7730 3090                                   l7706 2FFA  
                                 l7394 0852                                   l5882 31BC  
                                 l5874 318E                                   l7802 35BC  
                                 l6940 2FA4                                   l6924 2F54  
                                 l6908 2EFC                                   l6844 10F0  
                                 l6828 10AA                                   l6780 0FDE  
                                 l6772 0FA4                                   l6764 0F82  
                                 l6692 0E0A                                   l6684 0DE8  
                                 l6596 0C34                                   l6588 0BFA  
                                 l7732 3096                                   l7724 307E  
                                 l5892 4238                                   l7804 35C2  
                                 l7820 35EC                                   l6950 2FD8  
                                 l6926 2F5A                                   l6854 1118  
                                 l6790 1006                                   l6758 0F64  
                                 l6678 0DCA                                   l7734 309C  
                                 l7726 3084                                   l7742 30AE  
                                 l7398 086A                                   l5886 31C6  
                                 l5878 31A6                                   l7670 2BE4  
                                 l7814 35E0                                   l7806 35C8  
                                 l6848 1108                                   l6784 0FE8  
                                 l6768 0F8C                                   l6688 0DF2  
                                 l7736 30A2                                   l7728 308A  
                                 l5896 424E                                   l7816 35E6  
                                 l6962 37DE                                   l6954 2FE2  
                                 l6858 1130                                   l6794 1010  
                                 l7738 30A8                                   l6788 1000  
                                 l6980 32D0                                   l7668 2BD0  
                                 l7694 2C64                                   l6992 3304  
                                 l6994 3310                                   l6986 32E6  
                                 l6996 3316                                   STR_1 FBDD  
                                 STR_2 FF2E                                   STR_3 FBCB  
                                 STR_4 FE51                                   STR_5 FBCB  
                                 STR_6 FE0F                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5010 09CC  
                                 u5030 0A80                                   u5050 0B34  
                                 u4350 3DB8                                   u4351 3DB4  
                                 u4360 3DBA                                   u3480 4178  
                                 _PEIE 007F96                                   u3740 12A4  
                                 u4390 1C64                                   u4710 1976  
                                 u4375 3AF0                                   u7007 2AF2  
                                 u3680 3E04                                   u7017 2B26  
                                 u3690 3E06                                   u4730 19AC  
                                 u3747 129A                                   u7107 01BC  
                                 u7027 313A                                   u3780 131C  
                                 u4820 2D4C                                   _RCEN 007E2B  
                                 u7117 01E8                                   u7037 3196  
                                 u7207 068C                                   u7127 023E  
                                 u7047 31CE                                   u4728 197A  
                                 u7217 06EA                                   u7137 0272  
                                 u7057 3E16                                   u3787 1312  
                                 u7307 304C                                   u7227 071E  
                                 u7147 029C                                   u7067 3E4A  
                                 u4828 2D50                                   u7317 2754  
                                 u7237 0748                                   u7157 0512  
                                 u7077 002A                                   u4790 2CF0  
                                 u7407 3230                                   u7327 2798  
                                 u7247 07A6                                   u7167 0546  
                                 u7087 012A                                   u7417 3252  
                                 u7337 27BA                                   u7257 07DA  
                                 u7177 0570                                   u7097 0166  
                                 i2l66 43D0                                   u7507 0AF6  
                                 u7427 08D2                                   u7347 27E8  
                                 u7267 0804                                   u7187 062E  
                                 u7517 0B14                                   u7437 0916  
                                 u7357 2836                                   u7277 085A  
                                 u7197 0662                                   u4798 2CF4  
                                 u7607 0D76                                   u7527 0B44  
                                 u7447 0938                                   u7367 2880  
                                 u7287 088E                                   u6680 2CAA  
                                 u7617 0DD2                                   u7537 0BC2  
                                 u7457 09A8                                   u7377 28C4  
                                 u7297 3008                                   u7707 1018  
                                 u7627 0DFA                                   u7547 0BEA  
                                 u7467 09DC                                   u7387 41F8  
                                 u6907 1AA8                                   u7717 103A  
                                 u7637 0E56                                   u7557 0C46  
                                 u7477 0A42                                   u7397 31EC  
                                 u6917 1AF4                                   u7807 2FB2  
                                 u7727 108A                                   u7647 0E7E  
                                 u7567 0C6E                                   u7487 0A60  
                                 u6927 1B28                                   u7817 2FEA  
                                 u7737 10B2                                   u7657 0EE8  
                                 u7577 0CCA                                   u7497 0A90  
                                 u6937 1B9C                                   u6857 18FC  
                                 u7827 3B8A                                   u7747 10F8  
                                 u7667 0F10                                   u7587 0CF2  
                                 u6947 3C1A                                   u6867 19C0  
                                 u7837 3A16                                   u7757 1120  
                                 u7677 0F6C                                   u7597 0D4E  
                                 u6957 3D46                                   u6877 1A0C  
                                 u7847 3A20                                   u7767 36AA  
                                 u7687 0F94                                   u6967 4244  
                                 u6887 1A40                                   u7857 3A4C  
                                 u7777 2F0A                                   u7697 0FF0  
                                 u6977 2CD6                                   u6897 1A74  
                                 u7867 3A56                                   u7787 2F6C  
                                 u6987 2D32                                   u7797 2F8C  
                                 u6997 2DC8                                   _RSEN 007E29  
                          _stopSignals 4390                                   _Test 2FFA  
                                 _back 005B                                   _main 357A  
                                 _down 0067                                   _keys FB39  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 4316                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 440E                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2138                            i2_lcdNibble 3C32  
                      __end_of_Loading 1BAE                   __end_of_actuatorTest 1138  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 31DE  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 3372  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB54                                  STR_14 FFD7  
                                STR_22 FFA4                                  STR_30 FE20  
                                STR_15 FFD3                                  STR_23 FF20  
                                STR_31 FDFE                                  STR_16 FFE3  
                                STR_24 FD65                                  STR_32 FD43  
                                STR_40 FCFF                                  STR_17 FFF3  
                                STR_33 FD54                                  STR_41 FCEE  
                                STR_25 FB94                                  STR_18 FFF7  
                                STR_34 FDED                                  STR_50 FDCB  
                                STR_42 FDA9                                  STR_26 FD76  
                                STR_43 FDA9                                  STR_35 FDED  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FB81                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD87  
                                STR_36 FD32                                  STR_44 FD10  
                      __end_of___awmod 357A                                  STR_45 FCFF  
                                STR_37 FD43                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FB91  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED9                                  STR_38 FDDC  
                                STR_46 FDBA                                  STR_47 FDBA  
                                STR_55 FFFB                                  STR_63 FB54  
                                STR_71 FF12                                  STR_39 FD98  
                                STR_56 FFDF                                  STR_64 FF85  
                                STR_80 FE61                                  STR_48 FD21  
                                STR_72 FC99                                  STR_49 FD10  
                                STR_57 FFD7                                  STR_65 FF56  
                                STR_73 FEF6                                  STR_81 FE8E  
                                STR_58 FFD3                                  STR_90 FF7A  
                                STR_74 FF63                                  STR_82 FE31  
                                STR_66 FB6C                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_83 FF9A  
                                STR_75 FEBB                                  STR_91 FEAC  
                                STR_84 FF12                                  STR_76 FF04  
                                STR_68 FCAA                                  STR_92 FC44  
                                STR_77 FFAE                                  STR_85 FECA  
                                STR_69 FCDD                                  STR_93 FC33  
                                STR_78 FF12                                  STR_86 FEE8  
                                STR_94 FC11                                  STR_79 FF3C  
                                STR_87 FCBB                                  STR_95 FC66  
                                STR_88 FF6F                                  STR_96 FC77  
                                STR_89 FCCC                                  STR_97 FBEF  
                                STR_98 FE41                                  STR_99 FC22  
                                ?_sort 0001                        __end_of___lldiv 342E  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 38A6                        __end_of___lwmod 3AC0  
                                i2l254 2134                                  i2l593 21C6  
                                i2l850 2A08                                  i2l844 299C  
                                i2l926 43B4                                  i2l848 29E8  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4402                        __end_of_handler 2A44  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4208  
                      __end_of_initLCD 3E54                         __CFG_EBTRB$OFF 000000  
                                _debug 00E0                             i2isdigit@c 0003  
                                _getIR 3D28                        __end_of_loadRTC 369C  
                      __end_of_readMAG 3DC2                        __end_of_dpowers FB54  
                                _first 00E4                                  _enter 0069  
                      __end_of_isdigit 4232                                  _input 007D  
                                _putch 43E2                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 42A8  
                     __end_ofi2_getRTC 398E                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 18DE  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 3FA4                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 3CDA                           __end_of_Test 30F6  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3610  
                         __end_of_keys FB4A                           __end_of_sort 4338  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B8  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC00  
                               STR_101 FC22                                 STR_102 FE9D  
                               STR_110 FC88                                 STR_111 FFB6  
                               STR_103 FE7F                                 STR_104 FE70  
                               STR_105 FBA7                                 STR_106 FBB9  
                               _ADRESH 000FC4                                 STR_107 FF49  
                               STR_108 FF90                                 _EEADRH 000FAA  
                               STR_109 FC55                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3FD4  
            i2_change_state_to_menu_22 3FA4                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1224 174A                                 i2l1671 3CD0  
                               i2l1681 3E8C                                 i2l5202 4370  
                               i2l5212 3C9E                                 i2l5214 3CA6  
                               i2l5224 3CC6                                 i2l5216 3CAA  
                               i2l5240 3E82                                 i2l5232 3E62  
                               i2l6112 264A                                 i2l6104 2632  
                               i2l5234 3E6A                                 i2l6122 2674  
                               i2l5236 3E6E                                 i2l6132 2692  
                               i2l5502 159E                                 i2l6134 2696  
                               i2l6118 2658                                 i2l6160 26EA  
                               i2l6152 26C6                                 i2l6128 267E  
                               i2l6080 25D0                                 i2l6064 2598  
                               i2l6056 257E                                 i2l5178 42C8  
                               i2l5610 1854                                 i2l6146 26B8  
                               i2l6138 26A0                                 i2l6082 25D6  
                               i2l6066 25A8                                 i2l6074 25B6  
                               i2l5620 18BA                                 i2l5604 1838  
                               i2l5540 16D4                                 i2l5524 165A  
                               i2l5516 1632                                 i2l5508 15D0  
                               i2l6164 26FC                                 i2l6156 26D8  
                               i2l6084 25DC                                 i2l6092 25EE  
                               i2l6068 25AC                                 i2l5606 1840  
                               i2l5614 1866                                 i2l5534 16B2  
                               i2l5526 1664                                 i2l5550 1714  
                               i2l5622 18C2                                 i2l6086 25E2  
                               i2l6078 25CA                                 i2l6174 2718  
                               i2l5464 3954                                 i2l5616 186C  
                               i2l5544 16FE                                 i2l5536 16BC  
                               i2l5528 1668                                 i2l6168 270E  
                               i2l6088 25E8                                 i2l5474 397E  
                               i2l5562 1778                                 i2l5546 1710  
                               i2l5538 16C2                                 i2l5626 3F7C  
                               i2l5468 3964                                 i2l5580 17C6  
                               i2l5492 157A                                 i2l5804 2EA0  
                               i2l5628 3F84                                 i2l7500 1F98  
                               i2l5590 1804                                 i2l5566 1790  
                               i2l7430 1EA8                                 i2l5592 180C  
                               i2l5568 1794                                 i2l5496 158A  
                               i2l5816 2EE4                                 i2l5808 2EB0  
                               i2l8160 20E8                                 i2l7520 1FE6  
                               i2l7512 1FCA                                 i2l7504 1FA6  
                               i2l7440 1ECA                                 i2l7432 1EAE  
                               i2l5586 17E0                                 i2l5498 1598  
                               i2l8170 2622                                 i2l8162 210A  
                               i2l8164 2126                                 i2l7540 203C  
                               i2l7532 2018                                 i2l7524 1FFC  
                               i2l7516 1FD8                                 i2l7508 1FBC  
                               i2l7460 1F02                                 i2l7444 1ED8  
                               i2l7436 1EBC                                 i2l5598 1822  
                               i2l8168 2606                                 i2l5960 21D0  
                               i2l7560 208A                                 i2l7552 2066  
                               i2l7544 204A                                 i2l7536 2026  
                               i2l7528 200A                                 i2l7480 1F4A  
                               i2l7472 1F2E                                 i2l7464 1F10  
                               i2l7456 1EF4                                 i2l7448 1EE6  
                               i2l5970 223E                                 i2l5962 21E6  
                               i2l5954 2164                                 i2l5980 22AC  
                               i2l5972 2254                                 i2l5964 21FC  
                               i2l7572 20BC                                 i2l7564 2098  
                               i2l7556 207C                                 i2l7548 2058  
                               i2l7492 1F7C                                 i2l7484 1F58  
                               i2l7476 1F3C                                 i2l7468 1F20  
                               i2l5982 22C2                                 i2l5974 226A  
                               i2l5966 2212                                 i2l7752 237A  
                               i2l5976 2280                                 i2l5968 2228  
                               i2l7568 20A6                                 i2l7496 1F8A  
                               i2l7488 1F66                                 i2l7762 23E4  
                               i2l5978 2296                                 i2l5986 22D8  
                               i2l7578 20CA                                 i2l7850 2970  
                               i2l7834 2950                                 i2l7772 24A6  
                               i2l7756 238A                                 i2l5988 2332  
                               i2l7836 2954                                 i2l7872 29BA  
                               i2l7874 29BC                                 i2l7896 2A06  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 425A  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 4316  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2B84                                 ___wmul 3F3C  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3724                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 435A  
                               _initUI 42CE                                 _readIR 3DC2  
                               _logRun 2B84                                 clear_0 3D00  
                               clear_1 3D0C                                 clear_2 3D18  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3B7C                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1138  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 3F06  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4282  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 425A                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 3CDA                       __end_of_printRTC 1E78  
                         __mediumconst FB38                      __end_ofi2___lwmod 3E96  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 32B4                      __end_ofi2_lcdInst 441A  
                    __end_ofi2_isdigit 4378                             __accesstop 0080  
              __end_of__initialization 3D1E                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0880                          i2_EEPROM_read 43A6  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 4458                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 442E  
                        __end_of_getIR 3D76                            i2printRTC@i 0041  
                        _initSortTimer 342E            __end_of_updateServoPosition 391C  
                        __end_of_putch 43F2                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2DE2  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 41DC  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 41B0  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 30F6                                UI@F3222 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      __end_of_PortTests 382E  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2234 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 4402                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0140            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3A5E                                _Loading 18DE  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 32B4  
                              ___awmod 34D8                             _initServos 3BD8  
                              ___lldiv 3372                        __size_of___wmul 0036  
                              ___lwdiv 382E                                ___lwmod 3A5E  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 3CDA  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 398E                                _lcdInst 43F2  
                              _handler 0008                                __ptext0 357A  
                              __ptext1 4390                                __ptext2 4316  
                              __ptext3 18DE                                __ptext4 342E  
                              __ptext5 3BD8                                __ptext6 398E  
                              __ptext7 3D28                                __ptext8 4232  
                              __ptext9 2CC0                        __size_of_printf 0438  
                              _readADC 41DC                        __size_of_strcpy 0036  
                              _initLCD 3E0E                                _cur_can 0065  
                              _loadRTC 3610                                _readMAG 3D76  
                              _dpowers FB4A                     actuatorTest@i_1600 00BA  
                   actuatorTest@i_1601 00BB                     actuatorTest@i_1610 00C0  
                   actuatorTest@i_1611 00C1                     actuatorTest@i_1603 00BC  
                   actuatorTest@i_1604 00BD                     actuatorTest@i_1613 00C2  
                   actuatorTest@i_1614 00C3                     actuatorTest@i_1606 00BE  
                   actuatorTest@i_1607 00BF                     actuatorTest@i_1581 00AE  
                   actuatorTest@i_1590 00B4                     actuatorTest@i_1582 00AF  
                   actuatorTest@i_1574 00AD                     actuatorTest@i_1591 00B5  
                   actuatorTest@i_1584 00B0                     actuatorTest@i_1593 00B6  
                   actuatorTest@i_1585 00B1                     actuatorTest@i_1594 00B7  
                   actuatorTest@i_1587 00B2                     actuatorTest@i_1596 00B8  
                   actuatorTest@i_1588 00B3                     actuatorTest@i_1597 00B9  
                              _isdigit 4208                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2A44                         __pintcode_body 28D6  
                 end_of_initialization 3D1E                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1625 00AF                   SolenoidTestA5@i_1627 00B0  
                              int_func 28D6                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 39F6  
                           _sensorTest 2746                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2746  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3B7C  
                           _updateMenu 1E78                      i2_I2C_Master_Read 42A8  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 43D0  
                    i2_I2C_Master_Stop 4446                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3C88  
                            i2___lwmod 3E54                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 236E                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 440E                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 435A  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 4390  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 3F72                         __end_of_getRTC 37AA  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 42F2  
                       __end_of_readIR 3E0E                         __end_of_logRun 2CC0  
                     i2___wmul@product 0005                         __end_of_printf 1570  
                         i2printf@flag 0026                         __end_of_strcpy 3F3C  
            __end_ofi2_I2C_Master_Read 42CE              __end_ofi2_I2C_Master_Wait 43E2  
                         i2printf@prec 001D                    start_initialization 3CDA  
            __end_ofi2_I2C_Master_Stop 444E                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1319 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 37AA  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2354 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1881 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4378  
                   __end_of_PortTestA5 3BD8                       _I2C_Master_Start 443E  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 441A  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 3724  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB38  
                            _lcdNibble 39F6                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 2EFC                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 31DE                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0122                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 0190  
           __end_ofi2_I2C_Master_Start 4456             __end_ofi2_I2C_Master_Write 442E  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2560                            ??i2_isdigit 0001  
                             i2u411_40 1696                               i2u411_47 168C  
                             i2u415_40 16F6                               i2u415_47 16EC  
                             _PIR2bits 000FA1                               i2u358_40 42C6  
                             i2u455_40 21C6                               i2u673_40 24A0  
                             i2u790_47 3C76                               i2u791_47 3C80  
                             i2u787_47 259E                               i2u788_47 3C4A  
                             i2u789_47 3C54                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
               __end_of_SolenoidTestA5 2FFA                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4282                          lcdNibble@data 0081  
                             i2_getRTC 391C                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B6                               i2_printf 1570  
                             i2_strcpy 3F72                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 3CEE  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 43BC  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 02D0                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 34D8  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4034             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 3ECE             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 3E96                _change_state_to_menu_23 4004  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4124  
              _change_state_to_logs_12 40F4                _change_state_to_logs_22 40C4  
              _change_state_to_logs_23 4182                _change_state_to_logs_33 4094  
              _change_state_to_logs_34 4064                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2A3C  
                           _EEPROMTest 4456                        _I2C_Master_Init 3AC0  
                     __size_of_readADC 002C                        _I2C_Master_Read 4154  
                     __size_of_initLCD 0046                           _f_ID_receive 006B  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 43BC                        _I2C_Master_Stop 4436  
                     __size_of_isdigit 002A                               _delay_ms 4232  
                       _printSortTimer 236E                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 2EFC  
                             __ptext10 2A44                               __ptext11 3B20  
                             __ptext20 4338                               __ptext12 2B84  
                             __ptext21 3E0E                               __ptext13 30F6  
                             __ptext30 43BC                               __ptext22 0012  
                             __ptext14 4378                               __ptext31 3E96  
                             __ptext23 1BAE                               __ptext15 42CE  
                             __ptext40 31DE                               __ptext32 3ECE  
                             __ptext24 3F06                               __ptext16 3610  
                             __ptext41 08B8                               __ptext33 34D8  
                             __ptext25 3724                               __ptext17 3AC0  
                             __ptext50 3F3C                               __ptext42 38A6  
                             __ptext34 32B4                               __ptext26 441A  
                             __ptext18 3372                               __ptext51 3A5E  
                             __ptext43 369C                               __ptext35 2FFA  
                             __ptext27 4436                               __ptext19 41B0  
                             __ptext60 3F72                               __ptext52 382E  
                             __ptext44 2EFC                               __ptext36 2746  
                             __ptext28 443E                               __ptext61 2560  
                             __ptext53 43F2                               __ptext45 37AA  
                             __ptext37 3D76                               __ptext29 4154  
                             __ptext70 40F4                               __ptext62 3FA4  
                             __ptext54 39F6                               __ptext46 3B7C  
                             __ptext38 3DC2                               __ptext71 4124  
                             __ptext63 3FD4                               __ptext55 4456  
                             __ptext47 1138                               __ptext39 41DC  
                             __ptext80 3E54                               __ptext72 42F2  
                             __ptext64 4004                               __ptext48 43E2  
                             __ptext81 3C88                               __ptext73 2DE2  
                             __ptext65 4034                               __ptext57 1E78  
                             __ptext49 4208                               __ptext82 440E  
                             __ptext74 43A6                               __ptext66 4064  
                             __ptext58 425A                               __ptext83 3C32  
                             __ptext75 236E                               __ptext67 4094  
                             __ptext59 2138                               __ptext84 391C  
                             __ptext76 1570                               __ptext68 4182  
                             __ptext85 4424                               __ptext77 4402  
                             __ptext69 40C4                               __ptext86 4446  
                             __ptext78 435A                               __ptext87 444E  
                             __ptext79 4282                               __ptext88 42A8  
                             __ptext89 43D0                               _dispLogs 42F2  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1881 0002                     __end_of_initServos 3C32  
                        __size_of_Test 00FC                          ?_EEPROM_write 00AB  
                             _initTime 4338                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 38A6  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 1BAE                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4004  
    __end_ofi2_change_state_to_menu_22 3FD4                               loadRTC@i 0096  
               __end_of_printSortTimer 2560                              putch@data 0082  
             __end_of_I2C_Master_Start 4446                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 4424                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 369C  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 28D6  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 43A6  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2138                __end_of_I2C_Master_Init 3B20  
              __end_of_I2C_Master_Read 4182                __end_of_I2C_Master_Wait 43D0  
              __end_of_I2C_Master_Stop 443E                          printRTC@F3213 0131  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                         sensorTest@on 00AD                            _retrieveLog 2DE2  
                  __end_ofi2_lcdNibble 3C88                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3B20                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
