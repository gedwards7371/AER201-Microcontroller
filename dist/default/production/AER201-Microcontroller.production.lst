

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 11:29:57 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  005C1A                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3246
   161  005C1A  4D                 	db	77
   162  005C1B  4D                 	db	77
   163  005C1C  4D                 	db	77
   164  005C1D  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3236
   167  005C1E  4D                 	db	77
   168  005C1F  4D                 	db	77
   169  005C20  4D                 	db	77
   170  005C21  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FA8A                     __pmediumconst:
   174                           	opt stack 0
   175  00FA8A  00                 	db	0
   176  00FA8B                     _keys:
   177                           	opt stack 0
   178  00FA8B  31                 	db	49
   179  00FA8C  32                 	db	50
   180  00FA8D  33                 	db	51
   181  00FA8E  41                 	db	65
   182  00FA8F  34                 	db	52
   183  00FA90  35                 	db	53
   184  00FA91  36                 	db	54
   185  00FA92  42                 	db	66
   186  00FA93  37                 	db	55
   187  00FA94  38                 	db	56
   188  00FA95  39                 	db	57
   189  00FA96  43                 	db	67
   190  00FA97  2A                 	db	42
   191  00FA98  30                 	db	48
   192  00FA99  23                 	db	35
   193  00FA9A  44                 	db	68
   194  00FA9B  00                 	db	0
   195  00FA9C                     __end_of_keys:
   196                           	opt stack 0
   197  00FA9C                     _dpowers:
   198                           	opt stack 0
   199  00FA9C  0001               	dw	1
   200  00FA9E  000A               	dw	10
   201  00FAA0  0064               	dw	100
   202  00FAA2  03E8               	dw	1000
   203  00FAA4  2710               	dw	10000
   204  00FAA6                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAA6                     STR_21:
   282  00FAA6  25                 	db	37
   283  00FAA7  30                 	db	48	;'0'
   284  00FAA8  32                 	db	50	;'2'
   285  00FAA9  64                 	db	100	;'d'
   286  00FAAA  25                 	db	37
   287  00FAAB  73                 	db	115	;'s'
   288  00FAAC  20                 	db	32
   289  00FAAD  7C                 	db	124
   290  00FAAE  20                 	db	32
   291  00FAAF  25                 	db	37
   292  00FAB0  30                 	db	48	;'0'
   293  00FAB1  32                 	db	50	;'2'
   294  00FAB2  64                 	db	100	;'d'
   295  00FAB3  3A                 	db	58	;':'
   296  00FAB4  25                 	db	37
   297  00FAB5  30                 	db	48	;'0'
   298  00FAB6  32                 	db	50	;'2'
   299  00FAB7  64                 	db	100	;'d'
   300  00FAB8  3A                 	db	58	;':'
   301  00FAB9  25                 	db	37
   302  00FABA  30                 	db	48	;'0'
   303  00FABB  32                 	db	50	;'2'
   304  00FABC  64                 	db	100	;'d'
   305  00FABD  00                 	db	0
   306  00FABE                     STR_67:
   307  00FABE  28                 	db	40
   308  00FABF  64                 	db	100	;'d'
   309  00FAC0  61                 	db	97	;'a'
   310  00FAC1  74                 	db	116	;'t'
   311  00FAC2  61                 	db	97	;'a'
   312  00FAC3  3A                 	db	58	;':'
   313  00FAC4  20                 	db	32
   314  00FAC5  25                 	db	37
   315  00FAC6  75                 	db	117	;'u'
   316  00FAC7  2C                 	db	44
   317  00FAC8  20                 	db	32
   318  00FAC9  61                 	db	97	;'a'
   319  00FACA  64                 	db	100	;'d'
   320  00FACB  64                 	db	100	;'d'
   321  00FACC  72                 	db	114	;'r'
   322  00FACD  3A                 	db	58	;':'
   323  00FACE  20                 	db	32
   324  00FACF  25                 	db	37
   325  00FAD0  75                 	db	117	;'u'
   326  00FAD1  29                 	db	41
   327  00FAD2  00                 	db	0
   328  00FAD3                     STR_64:
   329  00FAD3  20                 	db	32
   330  00FAD4  20                 	db	32
   331  00FAD5  20                 	db	32
   332  00FAD6  20                 	db	32
   333  00FAD7  20                 	db	32
   334  00FAD8  20                 	db	32
   335  00FAD9  20                 	db	32
   336  00FADA  20                 	db	32
   337  00FADB  20                 	db	32
   338  00FADC  20                 	db	32
   339  00FADD  20                 	db	32
   340  00FADE  20                 	db	32
   341  00FADF  46                 	db	70	;'F'
   342  00FAE0  25                 	db	37
   343  00FAE1  64                 	db	100	;'d'
   344  00FAE2  4C                 	db	76	;'L'
   345  00FAE3  25                 	db	37
   346  00FAE4  64                 	db	100	;'d'
   347  00FAE5  00                 	db	0
   348  00FAE6                     STR_112:
   349  00FAE6  44                 	db	68	;'D'
   350  00FAE7  20                 	db	32
   351  00FAE8  57                 	db	87	;'W'
   352  00FAE9  49                 	db	73	;'I'
   353  00FAEA  4C                 	db	76	;'L'
   354  00FAEB  4C                 	db	76	;'L'
   355  00FAEC  20                 	db	32
   356  00FAED  52                 	db	82	;'R'
   357  00FAEE  45                 	db	69	;'E'
   358  00FAEF  54                 	db	84	;'T'
   359  00FAF0  55                 	db	85	;'U'
   360  00FAF1  52                 	db	82	;'R'
   361  00FAF2  4E                 	db	78	;'N'
   362  00FAF3  20                 	db	32
   363  00FAF4  20                 	db	32
   364  00FAF5  20                 	db	32
   365  00FAF6  20                 	db	32
   366  00FAF7  00                 	db	0
   367  00FAF8                     STR_122:
   368  00FAF8  4F                 	db	79	;'O'
   369  00FAF9  54                 	db	84	;'T'
   370  00FAFA  48                 	db	72	;'H'
   371  00FAFB  45                 	db	69	;'E'
   372  00FAFC  52                 	db	82	;'R'
   373  00FAFD  20                 	db	32
   374  00FAFE  53                 	db	83	;'S'
   375  00FAFF  45                 	db	69	;'E'
   376  00FB00  54                 	db	84	;'T'
   377  00FB01  53                 	db	83	;'S'
   378  00FB02  20                 	db	32
   379  00FB03  52                 	db	82	;'R'
   380  00FB04  41                 	db	65	;'A'
   381  00FB05  35                 	db	53	;'5'
   382  00FB06  20                 	db	32
   383  00FB07  20                 	db	32
   384  00FB08  20                 	db	32
   385  00FB09  00                 	db	0
   386  00FB0A                     STR_121:
   387  00FB0A  53                 	db	83	;'S'
   388  00FB0B  3A                 	db	58	;':'
   389  00FB0C  20                 	db	32
   390  00FB0D  44                 	db	68	;'D'
   391  00FB0E  20                 	db	32
   392  00FB0F  57                 	db	87	;'W'
   393  00FB10  49                 	db	73	;'I'
   394  00FB11  4C                 	db	76	;'L'
   395  00FB12  4C                 	db	76	;'L'
   396  00FB13  20                 	db	32
   397  00FB14  52                 	db	82	;'R'
   398  00FB15  45                 	db	69	;'E'
   399  00FB16  54                 	db	84	;'T'
   400  00FB17  55                 	db	85	;'U'
   401  00FB18  52                 	db	82	;'R'
   402  00FB19  4E                 	db	78	;'N'
   403  00FB1A  20                 	db	32
   404  00FB1B  00                 	db	0
   405  00FB1C                     STR_124:
   406  00FB1C  4F                 	db	79	;'O'
   407  00FB1D  54                 	db	84	;'T'
   408  00FB1E  48                 	db	72	;'H'
   409  00FB1F  45                 	db	69	;'E'
   410  00FB20  52                 	db	82	;'R'
   411  00FB21  3A                 	db	58	;':'
   412  00FB22  20                 	db	32
   413  00FB23  43                 	db	67	;'C'
   414  00FB24  41                 	db	65	;'A'
   415  00FB25  4D                 	db	77	;'M'
   416  00FB26  20                 	db	32
   417  00FB27  54                 	db	84	;'T'
   418  00FB28  4F                 	db	79	;'O'
   419  00FB29  47                 	db	71	;'G'
   420  00FB2A  47                 	db	71	;'G'
   421  00FB2B  4C                 	db	76	;'L'
   422  00FB2C  45                 	db	69	;'E'
   423  00FB2D  00                 	db	0
   424  00FB2E                     STR_130:
   425  00FB2E  4F                 	db	79	;'O'
   426  00FB2F  54                 	db	84	;'T'
   427  00FB30  48                 	db	72	;'H'
   428  00FB31  45                 	db	69	;'E'
   429  00FB32  52                 	db	82	;'R'
   430  00FB33  20                 	db	32
   431  00FB34  53                 	db	83	;'S'
   432  00FB35  45                 	db	69	;'E'
   433  00FB36  54                 	db	84	;'T'
   434  00FB37  53                 	db	83	;'S'
   435  00FB38  20                 	db	32
   436  00FB39  50                 	db	80	;'P'
   437  00FB3A  55                 	db	85	;'U'
   438  00FB3B  53                 	db	83	;'S'
   439  00FB3C  48                 	db	72	;'H'
   440  00FB3D  45                 	db	69	;'E'
   441  00FB3E  52                 	db	82	;'R'
   442  00FB3F  00                 	db	0
   443  00FB40                     STR_3:
   444  00FB40  2D                 	db	45
   445  00FB41  2D                 	db	45
   446  00FB42  20                 	db	32
   447  00FB43  4C                 	db	76	;'L'
   448  00FB44  4F                 	db	79	;'O'
   449  00FB45  47                 	db	71	;'G'
   450  00FB46  20                 	db	32
   451  00FB47  25                 	db	37
   452  00FB48  32                 	db	50	;'2'
   453  00FB49  64                 	db	100	;'d'
   454  00FB4A  20                 	db	32
   455  00FB4B  48                 	db	72	;'H'
   456  00FB4C  45                 	db	69	;'E'
   457  00FB4D  52                 	db	82	;'R'
   458  00FB4E  45                 	db	69	;'E'
   459  00FB4F  2D                 	db	45
   460  00FB50  2D                 	db	45
   461  00FB51  00                 	db	0
   462  00FB52                     STR_1:
   463  00FB52  52                 	db	82	;'R'
   464  00FB53  45                 	db	69	;'E'
   465  00FB54  53                 	db	83	;'S'
   466  00FB55  55                 	db	85	;'U'
   467  00FB56  4C                 	db	76	;'L'
   468  00FB57  54                 	db	84	;'T'
   469  00FB58  53                 	db	83	;'S'
   470  00FB59  20                 	db	32
   471  00FB5A  49                 	db	73	;'I'
   472  00FB5B  4E                 	db	78	;'N'
   473  00FB5C  20                 	db	32
   474  00FB5D  4C                 	db	76	;'L'
   475  00FB5E  4F                 	db	79	;'O'
   476  00FB5F  47                 	db	71	;'G'
   477  00FB60  20                 	db	32
   478  00FB61  25                 	db	37
   479  00FB62  64                 	db	100	;'d'
   480  00FB63  00                 	db	0
   481  00FB64                     STR_103:
   482  00FB64  4D                 	db	77	;'M'
   483  00FB65  49                 	db	73	;'I'
   484  00FB66  44                 	db	68	;'D'
   485  00FB67  20                 	db	32
   486  00FB68  2D                 	db	45
   487  00FB69  2D                 	db	45
   488  00FB6A  20                 	db	32
   489  00FB6B  32                 	db	50	;'2'
   490  00FB6C  73                 	db	115	;'s'
   491  00FB6D  20                 	db	32
   492  00FB6E  20                 	db	32
   493  00FB6F  20                 	db	32
   494  00FB70  20                 	db	32
   495  00FB71  20                 	db	32
   496  00FB72  20                 	db	32
   497  00FB73  20                 	db	32
   498  00FB74  00                 	db	0
   499  00FB75                     STR_106:
   500  00FB75  44                 	db	68	;'D'
   501  00FB76  52                 	db	82	;'R'
   502  00FB77  4F                 	db	79	;'O'
   503  00FB78  50                 	db	80	;'P'
   504  00FB79  20                 	db	32
   505  00FB7A  2D                 	db	45
   506  00FB7B  2D                 	db	45
   507  00FB7C  20                 	db	32
   508  00FB7D  32                 	db	50	;'2'
   509  00FB7E  73                 	db	115	;'s'
   510  00FB7F  20                 	db	32
   511  00FB80  20                 	db	32
   512  00FB81  20                 	db	32
   513  00FB82  20                 	db	32
   514  00FB83  20                 	db	32
   515  00FB84  20                 	db	32
   516  00FB85  00                 	db	0
   517  00FB86                     STR_100:
   518  00FB86  4C                 	db	76	;'L'
   519  00FB87  45                 	db	69	;'E'
   520  00FB88  46                 	db	70	;'F'
   521  00FB89  54                 	db	84	;'T'
   522  00FB8A  20                 	db	32
   523  00FB8B  2D                 	db	45
   524  00FB8C  2D                 	db	45
   525  00FB8D  20                 	db	32
   526  00FB8E  32                 	db	50	;'2'
   527  00FB8F  73                 	db	115	;'s'
   528  00FB90  20                 	db	32
   529  00FB91  20                 	db	32
   530  00FB92  20                 	db	32
   531  00FB93  20                 	db	32
   532  00FB94  20                 	db	32
   533  00FB95  20                 	db	32
   534  00FB96  00                 	db	0
   535  00FB97                     STR_105:
   536  00FB97  4C                 	db	76	;'L'
   537  00FB98  45                 	db	69	;'E'
   538  00FB99  56                 	db	86	;'V'
   539  00FB9A  45                 	db	69	;'E'
   540  00FB9B  4C                 	db	76	;'L'
   541  00FB9C  20                 	db	32
   542  00FB9D  2D                 	db	45
   543  00FB9E  2D                 	db	45
   544  00FB9F  20                 	db	32
   545  00FBA0  32                 	db	50	;'2'
   546  00FBA1  73                 	db	115	;'s'
   547  00FBA2  20                 	db	32
   548  00FBA3  20                 	db	32
   549  00FBA4  20                 	db	32
   550  00FBA5  20                 	db	32
   551  00FBA6  20                 	db	32
   552  00FBA7  00                 	db	0
   553  00FBA8                     STR_99:
   554  00FBA8  52                 	db	82	;'R'
   555  00FBA9  49                 	db	73	;'I'
   556  00FBAA  47                 	db	71	;'G'
   557  00FBAB  48                 	db	72	;'H'
   558  00FBAC  54                 	db	84	;'T'
   559  00FBAD  20                 	db	32
   560  00FBAE  2D                 	db	45
   561  00FBAF  2D                 	db	45
   562  00FBB0  20                 	db	32
   563  00FBB1  32                 	db	50	;'2'
   564  00FBB2  73                 	db	115	;'s'
   565  00FBB3  20                 	db	32
   566  00FBB4  20                 	db	32
   567  00FBB5  20                 	db	32
   568  00FBB6  20                 	db	32
   569  00FBB7  20                 	db	32
   570  00FBB8  00                 	db	0
   571  00FBB9                     STR_98:
   572  00FBB9  4D                 	db	77	;'M'
   573  00FBBA  49                 	db	73	;'I'
   574  00FBBB  44                 	db	68	;'D'
   575  00FBBC  44                 	db	68	;'D'
   576  00FBBD  4C                 	db	76	;'L'
   577  00FBBE  45                 	db	69	;'E'
   578  00FBBF  20                 	db	32
   579  00FBC0  2D                 	db	45
   580  00FBC1  2D                 	db	45
   581  00FBC2  20                 	db	32
   582  00FBC3  32                 	db	50	;'2'
   583  00FBC4  73                 	db	115	;'s'
   584  00FBC5  20                 	db	32
   585  00FBC6  20                 	db	32
   586  00FBC7  20                 	db	32
   587  00FBC8  20                 	db	32
   588  00FBC9  00                 	db	0
   589  00FBCA                     STR_113:
   590  00FBCA  4F                 	db	79	;'O'
   591  00FBCB  54                 	db	84	;'T'
   592  00FBCC  48                 	db	72	;'H'
   593  00FBCD  45                 	db	69	;'E'
   594  00FBCE  52                 	db	82	;'R'
   595  00FBCF  20                 	db	32
   596  00FBD0  53                 	db	83	;'S'
   597  00FBD1  45                 	db	69	;'E'
   598  00FBD2  54                 	db	84	;'T'
   599  00FBD3  53                 	db	83	;'S'
   600  00FBD4  20                 	db	32
   601  00FBD5  44                 	db	68	;'D'
   602  00FBD6  43                 	db	67	;'C'
   603  00FBD7  20                 	db	32
   604  00FBD8  20                 	db	32
   605  00FBD9  20                 	db	32
   606  00FBDA  00                 	db	0
   607  00FBDB                     STR_119:
   608  00FBDB  44                 	db	68	;'D'
   609  00FBDC  20                 	db	32
   610  00FBDD  57                 	db	87	;'W'
   611  00FBDE  49                 	db	73	;'I'
   612  00FBDF  4C                 	db	76	;'L'
   613  00FBE0  4C                 	db	76	;'L'
   614  00FBE1  20                 	db	32
   615  00FBE2  52                 	db	82	;'R'
   616  00FBE3  45                 	db	69	;'E'
   617  00FBE4  54                 	db	84	;'T'
   618  00FBE5  55                 	db	85	;'U'
   619  00FBE6  52                 	db	82	;'R'
   620  00FBE7  4E                 	db	78	;'N'
   621  00FBE8  20                 	db	32
   622  00FBE9  20                 	db	32
   623  00FBEA  20                 	db	32
   624  00FBEB  00                 	db	0
   625  00FBEC                     STR_116:
   626  00FBEC  35                 	db	53	;'5'
   627  00FBED  3A                 	db	58	;':'
   628  00FBEE  48                 	db	72	;'H'
   629  00FBEF  7C                 	db	124
   630  00FBF0  36                 	db	54	;'6'
   631  00FBF1  3A                 	db	58	;':'
   632  00FBF2  4C                 	db	76	;'L'
   633  00FBF3  7C                 	db	124
   634  00FBF4  49                 	db	73	;'I'
   635  00FBF5  52                 	db	82	;'R'
   636  00FBF6  3A                 	db	58	;':'
   637  00FBF7  25                 	db	37
   638  00FBF8  64                 	db	100	;'d'
   639  00FBF9  20                 	db	32
   640  00FBFA  20                 	db	32
   641  00FBFB  20                 	db	32
   642  00FBFC  00                 	db	0
   643  00FBFD                     STR_114:
   644  00FBFD  31                 	db	49	;'1'
   645  00FBFE  3A                 	db	58	;':'
   646  00FBFF  20                 	db	32
   647  00FC00  44                 	db	68	;'D'
   648  00FC01  43                 	db	67	;'C'
   649  00FC02  20                 	db	32
   650  00FC03  7C                 	db	124
   651  00FC04  20                 	db	32
   652  00FC05  41                 	db	65	;'A'
   653  00FC06  3A                 	db	58	;':'
   654  00FC07  20                 	db	32
   655  00FC08  41                 	db	65	;'A'
   656  00FC09  52                 	db	82	;'R'
   657  00FC0A  4D                 	db	77	;'M'
   658  00FC0B  20                 	db	32
   659  00FC0C  20                 	db	32
   660  00FC0D  00                 	db	0
   661  00FC0E                     STR_101:
   662  00FC0E  4D                 	db	77	;'M'
   663  00FC0F  49                 	db	73	;'I'
   664  00FC10  44                 	db	68	;'D'
   665  00FC11  2D                 	db	45
   666  00FC12  4C                 	db	76	;'L'
   667  00FC13  45                 	db	69	;'E'
   668  00FC14  46                 	db	70	;'F'
   669  00FC15  54                 	db	84	;'T'
   670  00FC16  20                 	db	32
   671  00FC17  2D                 	db	45
   672  00FC18  2D                 	db	45
   673  00FC19  20                 	db	32
   674  00FC1A  32                 	db	50	;'2'
   675  00FC1B  73                 	db	115	;'s'
   676  00FC1C  20                 	db	32
   677  00FC1D  20                 	db	32
   678  00FC1E  00                 	db	0
   679  00FC1F                     STR_102:
   680  00FC1F  4D                 	db	77	;'M'
   681  00FC20  49                 	db	73	;'I'
   682  00FC21  44                 	db	68	;'D'
   683  00FC22  2D                 	db	45
   684  00FC23  52                 	db	82	;'R'
   685  00FC24  49                 	db	73	;'I'
   686  00FC25  47                 	db	71	;'G'
   687  00FC26  48                 	db	72	;'H'
   688  00FC27  54                 	db	84	;'T'
   689  00FC28  20                 	db	32
   690  00FC29  2D                 	db	45
   691  00FC2A  2D                 	db	45
   692  00FC2B  20                 	db	32
   693  00FC2C  32                 	db	50	;'2'
   694  00FC2D  73                 	db	115	;'s'
   695  00FC2E  20                 	db	32
   696  00FC2F  00                 	db	0
   697  00FC30  45                 	db	69	;'E'
   698  00FC31  4C                 	db	76	;'L'
   699  00FC32  53                 	db	83	;'S'
   700  00FC33  45                 	db	69	;'E'
   701  00FC34  20                 	db	32
   702  00FC35  54                 	db	84	;'T'
   703  00FC36  4F                 	db	79	;'O'
   704  00FC37  47                 	db	71	;'G'
   705  00FC38  47                 	db	71	;'G'
   706  00FC39  4C                 	db	76	;'L'
   707  00FC3A  45                 	db	69	;'E'
   708  00FC3B  53                 	db	83	;'S'
   709  00FC3C  20                 	db	32
   710  00FC3D  52                 	db	82	;'R'
   711  00FC3E  41                 	db	65	;'A'
   712  00FC3F  35                 	db	53	;'5'
   713  00FC40  00                 	db	0
   714  00FC41                     STR_73:
   715  00FC41  41                 	db	65	;'A'
   716  00FC42  4C                 	db	76	;'L'
   717  00FC43  47                 	db	71	;'G'
   718  00FC44  31                 	db	49	;'1'
   719  00FC45  3A                 	db	58	;':'
   720  00FC46  20                 	db	32
   721  00FC47  39                 	db	57	;'9'
   722  00FC48  20                 	db	32
   723  00FC49  50                 	db	80	;'P'
   724  00FC4A  4F                 	db	79	;'O'
   725  00FC4B  50                 	db	80	;'P'
   726  00FC4C  4E                 	db	78	;'N'
   727  00FC4D  4F                 	db	79	;'O'
   728  00FC4E  54                 	db	84	;'T'
   729  00FC4F  41                 	db	65	;'A'
   730  00FC50  42                 	db	66	;'B'
   731  00FC51  00                 	db	0
   732  00FC52                     STR_93:
   733  00FC52  54                 	db	84	;'T'
   734  00FC53  53                 	db	83	;'S'
   735  00FC54  54                 	db	84	;'T'
   736  00FC55  3A                 	db	58	;':'
   737  00FC56  20                 	db	32
   738  00FC57  43                 	db	67	;'C'
   739  00FC58  4F                 	db	79	;'O'
   740  00FC59  4E                 	db	78	;'N'
   741  00FC5A  44                 	db	68	;'D'
   742  00FC5B  20                 	db	32
   743  00FC5C  53                 	db	83	;'S'
   744  00FC5D  4F                 	db	79	;'O'
   745  00FC5E  4C                 	db	76	;'L'
   746  00FC5F  4E                 	db	78	;'N'
   747  00FC60  27                 	db	39
   748  00FC61  44                 	db	68	;'D'
   749  00FC62  00                 	db	0
   750  00FC63                     STR_95:
   751  00FC63  54                 	db	84	;'T'
   752  00FC64  53                 	db	83	;'S'
   753  00FC65  54                 	db	84	;'T'
   754  00FC66  3A                 	db	58	;':'
   755  00FC67  20                 	db	32
   756  00FC68  50                 	db	80	;'P'
   757  00FC69  55                 	db	85	;'U'
   758  00FC6A  53                 	db	83	;'S'
   759  00FC6B  48                 	db	72	;'H'
   760  00FC6C  20                 	db	32
   761  00FC6D  53                 	db	83	;'S'
   762  00FC6E  4F                 	db	79	;'O'
   763  00FC6F  4C                 	db	76	;'L'
   764  00FC70  4E                 	db	78	;'N'
   765  00FC71  27                 	db	39
   766  00FC72  44                 	db	68	;'D'
   767  00FC73  00                 	db	0
   768  00FC74                     STR_69:
   769  00FC74  32                 	db	50	;'2'
   770  00FC75  2E                 	db	46
   771  00FC76  53                 	db	83	;'S'
   772  00FC77  4E                 	db	78	;'N'
   773  00FC78  52                 	db	82	;'R'
   774  00FC79  7C                 	db	124
   775  00FC7A  34                 	db	52	;'4'
   776  00FC7B  2E                 	db	46
   777  00FC7C  48                 	db	72	;'H'
   778  00FC7D  49                 	db	73	;'I'
   779  00FC7E  7C                 	db	124
   780  00FC7F  35                 	db	53	;'5'
   781  00FC80  2E                 	db	46
   782  00FC81  4D                 	db	77	;'M'
   783  00FC82  45                 	db	69	;'E'
   784  00FC83  44                 	db	68	;'D'
   785  00FC84  00                 	db	0
   786  00FC85                     STR_70:
   787  00FC85  42                 	db	66	;'B'
   788  00FC86  2E                 	db	46
   789  00FC87  50                 	db	80	;'P'
   790  00FC88  4C                 	db	76	;'L'
   791  00FC89  41                 	db	65	;'A'
   792  00FC8A  7C                 	db	124
   793  00FC8B  38                 	db	56	;'8'
   794  00FC8C  2E                 	db	46
   795  00FC8D  53                 	db	83	;'S'
   796  00FC8E  56                 	db	86	;'V'
   797  00FC8F  7C                 	db	124
   798  00FC90  39                 	db	57	;'9'
   799  00FC91  2E                 	db	46
   800  00FC92  42                 	db	66	;'B'
   801  00FC93  4C                 	db	76	;'L'
   802  00FC94  4B                 	db	75	;'K'
   803  00FC95  00                 	db	0
   804  00FC96                     STR_128:
   805  00FC96  45                 	db	69	;'E'
   806  00FC97  4C                 	db	76	;'L'
   807  00FC98  53                 	db	83	;'S'
   808  00FC99  45                 	db	69	;'E'
   809  00FC9A  20                 	db	32
   810  00FC9B  54                 	db	84	;'T'
   811  00FC9C  4F                 	db	79	;'O'
   812  00FC9D  47                 	db	71	;'G'
   813  00FC9E  47                 	db	71	;'G'
   814  00FC9F  4C                 	db	76	;'L'
   815  00FCA0  45                 	db	69	;'E'
   816  00FCA1  53                 	db	83	;'S'
   817  00FCA2  20                 	db	32
   818  00FCA3  41                 	db	65	;'A'
   819  00FCA4  52                 	db	82	;'R'
   820  00FCA5  4D                 	db	77	;'M'
   821  00FCA6  00                 	db	0
   822  00FCA7                     STR_111:
   823  00FCA7  54                 	db	84	;'T'
   824  00FCA8  53                 	db	83	;'S'
   825  00FCA9  54                 	db	84	;'T'
   826  00FCAA  3A                 	db	58	;':'
   827  00FCAB  20                 	db	32
   828  00FCAC  42                 	db	66	;'B'
   829  00FCAD  4F                 	db	79	;'O'
   830  00FCAE  54                 	db	84	;'T'
   831  00FCAF  48                 	db	72	;'H'
   832  00FCB0  20                 	db	32
   833  00FCB1  53                 	db	83	;'S'
   834  00FCB2  45                 	db	69	;'E'
   835  00FCB3  52                 	db	82	;'R'
   836  00FCB4  56                 	db	86	;'V'
   837  00FCB5  4F                 	db	79	;'O'
   838  00FCB6  53                 	db	83	;'S'
   839  00FCB7  00                 	db	0
   840  00FCB8                     STR_41:
   841  00FCB8  4C                 	db	76	;'L'
   842  00FCB9  4F                 	db	79	;'O'
   843  00FCBA  47                 	db	71	;'G'
   844  00FCBB  20                 	db	32
   845  00FCBC  31                 	db	49	;'1'
   846  00FCBD  20                 	db	32
   847  00FCBE  20                 	db	32
   848  00FCBF  20                 	db	32
   849  00FCC0  20                 	db	32
   850  00FCC1  20                 	db	32
   851  00FCC2  20                 	db	32
   852  00FCC3  20                 	db	32
   853  00FCC4  20                 	db	32
   854  00FCC5  20                 	db	32
   855  00FCC6  20                 	db	32
   856  00FCC7  20                 	db	32
   857  00FCC8  00                 	db	0
   858  00FCC9                     STR_40:
   859  00FCC9  4C                 	db	76	;'L'
   860  00FCCA  4F                 	db	79	;'O'
   861  00FCCB  47                 	db	71	;'G'
   862  00FCCC  20                 	db	32
   863  00FCCD  32                 	db	50	;'2'
   864  00FCCE  20                 	db	32
   865  00FCCF  20                 	db	32
   866  00FCD0  20                 	db	32
   867  00FCD1  20                 	db	32
   868  00FCD2  20                 	db	32
   869  00FCD3  20                 	db	32
   870  00FCD4  20                 	db	32
   871  00FCD5  20                 	db	32
   872  00FCD6  20                 	db	32
   873  00FCD7  20                 	db	32
   874  00FCD8  20                 	db	32
   875  00FCD9  00                 	db	0
   876  00FCDA                     STR_44:
   877  00FCDA  4C                 	db	76	;'L'
   878  00FCDB  4F                 	db	79	;'O'
   879  00FCDC  47                 	db	71	;'G'
   880  00FCDD  20                 	db	32
   881  00FCDE  33                 	db	51	;'3'
   882  00FCDF  20                 	db	32
   883  00FCE0  20                 	db	32
   884  00FCE1  20                 	db	32
   885  00FCE2  20                 	db	32
   886  00FCE3  20                 	db	32
   887  00FCE4  20                 	db	32
   888  00FCE5  20                 	db	32
   889  00FCE6  20                 	db	32
   890  00FCE7  20                 	db	32
   891  00FCE8  20                 	db	32
   892  00FCE9  20                 	db	32
   893  00FCEA  00                 	db	0
   894  00FCEB                     STR_48:
   895  00FCEB  4C                 	db	76	;'L'
   896  00FCEC  4F                 	db	79	;'O'
   897  00FCED  47                 	db	71	;'G'
   898  00FCEE  20                 	db	32
   899  00FCEF  34                 	db	52	;'4'
   900  00FCF0  20                 	db	32
   901  00FCF1  20                 	db	32
   902  00FCF2  20                 	db	32
   903  00FCF3  20                 	db	32
   904  00FCF4  20                 	db	32
   905  00FCF5  20                 	db	32
   906  00FCF6  20                 	db	32
   907  00FCF7  20                 	db	32
   908  00FCF8  20                 	db	32
   909  00FCF9  20                 	db	32
   910  00FCFA  20                 	db	32
   911  00FCFB  00                 	db	0
   912  00FCFC                     STR_36:
   913  00FCFC  33                 	db	51	;'3'
   914  00FCFD  2E                 	db	46
   915  00FCFE  20                 	db	32
   916  00FCFF  4C                 	db	76	;'L'
   917  00FD00  4F                 	db	79	;'O'
   918  00FD01  47                 	db	71	;'G'
   919  00FD02  53                 	db	83	;'S'
   920  00FD03  20                 	db	32
   921  00FD04  20                 	db	32
   922  00FD05  20                 	db	32
   923  00FD06  20                 	db	32
   924  00FD07  20                 	db	32
   925  00FD08  20                 	db	32
   926  00FD09  20                 	db	32
   927  00FD0A  20                 	db	32
   928  00FD0B  20                 	db	32
   929  00FD0C  00                 	db	0
   930  00FD0D                     STR_32:
   931  00FD0D  32                 	db	50	;'2'
   932  00FD0E  2E                 	db	46
   933  00FD0F  20                 	db	32
   934  00FD10  53                 	db	83	;'S'
   935  00FD11  4F                 	db	79	;'O'
   936  00FD12  52                 	db	82	;'R'
   937  00FD13  54                 	db	84	;'T'
   938  00FD14  20                 	db	32
   939  00FD15  20                 	db	32
   940  00FD16  20                 	db	32
   941  00FD17  20                 	db	32
   942  00FD18  20                 	db	32
   943  00FD19  20                 	db	32
   944  00FD1A  20                 	db	32
   945  00FD1B  20                 	db	32
   946  00FD1C  20                 	db	32
   947  00FD1D  00                 	db	0
   948  00FD1E                     STR_33:
   949  00FD1E  31                 	db	49	;'1'
   950  00FD1F  2E                 	db	46
   951  00FD20  20                 	db	32
   952  00FD21  44                 	db	68	;'D'
   953  00FD22  41                 	db	65	;'A'
   954  00FD23  54                 	db	84	;'T'
   955  00FD24  45                 	db	69	;'E'
   956  00FD25  2F                 	db	47
   957  00FD26  54                 	db	84	;'T'
   958  00FD27  49                 	db	73	;'I'
   959  00FD28  4D                 	db	77	;'M'
   960  00FD29  45                 	db	69	;'E'
   961  00FD2A  20                 	db	32
   962  00FD2B  20                 	db	32
   963  00FD2C  20                 	db	32
   964  00FD2D  20                 	db	32
   965  00FD2E  00                 	db	0
   966  00FD2F                     STR_24:
   967  00FD2F  20                 	db	32
   968  00FD30  2D                 	db	45
   969  00FD31  2D                 	db	45
   970  00FD32  20                 	db	32
   971  00FD33  50                 	db	80	;'P'
   972  00FD34  4F                 	db	79	;'O'
   973  00FD35  50                 	db	80	;'P'
   974  00FD36  20                 	db	32
   975  00FD37  20                 	db	32
   976  00FD38  43                 	db	67	;'C'
   977  00FD39  41                 	db	65	;'A'
   978  00FD3A  4E                 	db	78	;'N'
   979  00FD3B  20                 	db	32
   980  00FD3C  2D                 	db	45
   981  00FD3D  2D                 	db	45
   982  00FD3E  20                 	db	32
   983  00FD3F  00                 	db	0
   984  00FD40                     STR_26:
   985  00FD40  20                 	db	32
   986  00FD41  2D                 	db	45
   987  00FD42  2D                 	db	45
   988  00FD43  20                 	db	32
   989  00FD44  53                 	db	83	;'S'
   990  00FD45  4F                 	db	79	;'O'
   991  00FD46  55                 	db	85	;'U'
   992  00FD47  50                 	db	80	;'P'
   993  00FD48  20                 	db	32
   994  00FD49  43                 	db	67	;'C'
   995  00FD4A  41                 	db	65	;'A'
   996  00FD4B  4E                 	db	78	;'N'
   997  00FD4C  20                 	db	32
   998  00FD4D  2D                 	db	45
   999  00FD4E  2D                 	db	45
  1000  00FD4F  20                 	db	32
  1001  00FD50  00                 	db	0
  1002  00FD51                     STR_28:
  1003  00FD51  2D                 	db	45
  1004  00FD52  2D                 	db	45
  1005  00FD53  20                 	db	32
  1006  00FD54  54                 	db	84	;'T'
  1007  00FD55  4F                 	db	79	;'O'
  1008  00FD56  54                 	db	84	;'T'
  1009  00FD57  41                 	db	65	;'A'
  1010  00FD58  4C                 	db	76	;'L'
  1011  00FD59  20                 	db	32
  1012  00FD5A  43                 	db	67	;'C'
  1013  00FD5B  41                 	db	65	;'A'
  1014  00FD5C  4E                 	db	78	;'N'
  1015  00FD5D  53                 	db	83	;'S'
  1016  00FD5E  20                 	db	32
  1017  00FD5F  2D                 	db	45
  1018  00FD60  2D                 	db	45
  1019  00FD61  00                 	db	0
  1020  00FD62                     STR_39:
  1021  00FD62  4C                 	db	76	;'L'
  1022  00FD63  4F                 	db	79	;'O'
  1023  00FD64  47                 	db	71	;'G'
  1024  00FD65  20                 	db	32
  1025  00FD66  31                 	db	49	;'1'
  1026  00FD67  20                 	db	32
  1027  00FD68  20                 	db	32
  1028  00FD69  20                 	db	32
  1029  00FD6A  20                 	db	32
  1030  00FD6B  20                 	db	32
  1031  00FD6C  20                 	db	32
  1032  00FD6D  20                 	db	32
  1033  00FD6E  20                 	db	32
  1034  00FD6F  20                 	db	32
  1035  00FD70  20                 	db	32
  1036  00FD71  3C                 	db	60	;'<'
  1037  00FD72  00                 	db	0
  1038  00FD73                     STR_42:
  1039  00FD73  4C                 	db	76	;'L'
  1040  00FD74  4F                 	db	79	;'O'
  1041  00FD75  47                 	db	71	;'G'
  1042  00FD76  20                 	db	32
  1043  00FD77  32                 	db	50	;'2'
  1044  00FD78  20                 	db	32
  1045  00FD79  20                 	db	32
  1046  00FD7A  20                 	db	32
  1047  00FD7B  20                 	db	32
  1048  00FD7C  20                 	db	32
  1049  00FD7D  20                 	db	32
  1050  00FD7E  20                 	db	32
  1051  00FD7F  20                 	db	32
  1052  00FD80  20                 	db	32
  1053  00FD81  20                 	db	32
  1054  00FD82  3C                 	db	60	;'<'
  1055  00FD83  00                 	db	0
  1056  00FD84                     STR_46:
  1057  00FD84  4C                 	db	76	;'L'
  1058  00FD85  4F                 	db	79	;'O'
  1059  00FD86  47                 	db	71	;'G'
  1060  00FD87  20                 	db	32
  1061  00FD88  33                 	db	51	;'3'
  1062  00FD89  20                 	db	32
  1063  00FD8A  20                 	db	32
  1064  00FD8B  20                 	db	32
  1065  00FD8C  20                 	db	32
  1066  00FD8D  20                 	db	32
  1067  00FD8E  20                 	db	32
  1068  00FD8F  20                 	db	32
  1069  00FD90  20                 	db	32
  1070  00FD91  20                 	db	32
  1071  00FD92  20                 	db	32
  1072  00FD93  3C                 	db	60	;'<'
  1073  00FD94  00                 	db	0
  1074  00FD95                     STR_50:
  1075  00FD95  4C                 	db	76	;'L'
  1076  00FD96  4F                 	db	79	;'O'
  1077  00FD97  47                 	db	71	;'G'
  1078  00FD98  20                 	db	32
  1079  00FD99  34                 	db	52	;'4'
  1080  00FD9A  20                 	db	32
  1081  00FD9B  20                 	db	32
  1082  00FD9C  20                 	db	32
  1083  00FD9D  20                 	db	32
  1084  00FD9E  20                 	db	32
  1085  00FD9F  20                 	db	32
  1086  00FDA0  20                 	db	32
  1087  00FDA1  20                 	db	32
  1088  00FDA2  20                 	db	32
  1089  00FDA3  20                 	db	32
  1090  00FDA4  3C                 	db	60	;'<'
  1091  00FDA5  00                 	db	0
  1092  00FDA6                     STR_38:
  1093  00FDA6  33                 	db	51	;'3'
  1094  00FDA7  2E                 	db	46
  1095  00FDA8  20                 	db	32
  1096  00FDA9  4C                 	db	76	;'L'
  1097  00FDAA  4F                 	db	79	;'O'
  1098  00FDAB  47                 	db	71	;'G'
  1099  00FDAC  53                 	db	83	;'S'
  1100  00FDAD  20                 	db	32
  1101  00FDAE  20                 	db	32
  1102  00FDAF  20                 	db	32
  1103  00FDB0  20                 	db	32
  1104  00FDB1  20                 	db	32
  1105  00FDB2  20                 	db	32
  1106  00FDB3  20                 	db	32
  1107  00FDB4  20                 	db	32
  1108  00FDB5  3C                 	db	60	;'<'
  1109  00FDB6  00                 	db	0
  1110  00FDB7                     STR_34:
  1111  00FDB7  32                 	db	50	;'2'
  1112  00FDB8  2E                 	db	46
  1113  00FDB9  20                 	db	32
  1114  00FDBA  53                 	db	83	;'S'
  1115  00FDBB  4F                 	db	79	;'O'
  1116  00FDBC  52                 	db	82	;'R'
  1117  00FDBD  54                 	db	84	;'T'
  1118  00FDBE  20                 	db	32
  1119  00FDBF  20                 	db	32
  1120  00FDC0  20                 	db	32
  1121  00FDC1  20                 	db	32
  1122  00FDC2  20                 	db	32
  1123  00FDC3  20                 	db	32
  1124  00FDC4  20                 	db	32
  1125  00FDC5  20                 	db	32
  1126  00FDC6  3C                 	db	60	;'<'
  1127  00FDC7  00                 	db	0
  1128  00FDC8                     STR_31:
  1129  00FDC8  31                 	db	49	;'1'
  1130  00FDC9  2E                 	db	46
  1131  00FDCA  20                 	db	32
  1132  00FDCB  44                 	db	68	;'D'
  1133  00FDCC  41                 	db	65	;'A'
  1134  00FDCD  54                 	db	84	;'T'
  1135  00FDCE  45                 	db	69	;'E'
  1136  00FDCF  2F                 	db	47
  1137  00FDD0  54                 	db	84	;'T'
  1138  00FDD1  49                 	db	73	;'I'
  1139  00FDD2  4D                 	db	77	;'M'
  1140  00FDD3  45                 	db	69	;'E'
  1141  00FDD4  20                 	db	32
  1142  00FDD5  20                 	db	32
  1143  00FDD6  20                 	db	32
  1144  00FDD7  3C                 	db	60	;'<'
  1145  00FDD8  00                 	db	0
  1146  00FDD9                     STR_6:
  1147  00FDD9  50                 	db	80	;'P'
  1148  00FDDA  41                 	db	65	;'A'
  1149  00FDDB  55                 	db	85	;'U'
  1150  00FDDC  53                 	db	83	;'S'
  1151  00FDDD  45                 	db	69	;'E'
  1152  00FDDE  20                 	db	32
  1153  00FDDF  3C                 	db	60	;'<'
  1154  00FDE0  20                 	db	32
  1155  00FDE1  7C                 	db	124
  1156  00FDE2  20                 	db	32
  1157  00FDE3  42                 	db	66	;'B'
  1158  00FDE4  41                 	db	65	;'A'
  1159  00FDE5  43                 	db	67	;'C'
  1160  00FDE6  4B                 	db	75	;'K'
  1161  00FDE7  20                 	db	32
  1162  00FDE8  3E                 	db	62	;'>'
  1163  00FDE9  00                 	db	0
  1164  00FDEA                     STR_30:
  1165  00FDEA  50                 	db	80	;'P'
  1166  00FDEB  55                 	db	85	;'U'
  1167  00FDEC  53                 	db	83	;'S'
  1168  00FDED  48                 	db	72	;'H'
  1169  00FDEE  20                 	db	32
  1170  00FDEF  54                 	db	84	;'T'
  1171  00FDF0  4F                 	db	79	;'O'
  1172  00FDF1  20                 	db	32
  1173  00FDF2  43                 	db	67	;'C'
  1174  00FDF3  4F                 	db	79	;'O'
  1175  00FDF4  4E                 	db	78	;'N'
  1176  00FDF5  54                 	db	84	;'T'
  1177  00FDF6  49                 	db	73	;'I'
  1178  00FDF7  4E                 	db	78	;'N'
  1179  00FDF8  55                 	db	85	;'U'
  1180  00FDF9  45                 	db	69	;'E'
  1181  00FDFA  00                 	db	0
  1182  00FDFB                     STR_27:
  1183  00FDFB  4E                 	db	78	;'N'
  1184  00FDFC  4C                 	db	76	;'L'
  1185  00FDFD  41                 	db	65	;'A'
  1186  00FDFE  42                 	db	66	;'B'
  1187  00FDFF  3A                 	db	58	;':'
  1188  00FE00  20                 	db	32
  1189  00FE01  25                 	db	37
  1190  00FE02  64                 	db	100	;'d'
  1191  00FE03  7C                 	db	124
  1192  00FE04  4C                 	db	76	;'L'
  1193  00FE05  41                 	db	65	;'A'
  1194  00FE06  42                 	db	66	;'B'
  1195  00FE07  3A                 	db	58	;':'
  1196  00FE08  20                 	db	32
  1197  00FE09  25                 	db	37
  1198  00FE0A  64                 	db	100	;'d'
  1199  00FE0B  00                 	db	0
  1200  00FE0C                     STR_25:
  1201  00FE0C  4E                 	db	78	;'N'
  1202  00FE0D  54                 	db	84	;'T'
  1203  00FE0E  41                 	db	65	;'A'
  1204  00FE0F  42                 	db	66	;'B'
  1205  00FE10  3A                 	db	58	;':'
  1206  00FE11  20                 	db	32
  1207  00FE12  25                 	db	37
  1208  00FE13  64                 	db	100	;'d'
  1209  00FE14  7C                 	db	124
  1210  00FE15  54                 	db	84	;'T'
  1211  00FE16  41                 	db	65	;'A'
  1212  00FE17  42                 	db	66	;'B'
  1213  00FE18  3A                 	db	58	;':'
  1214  00FE19  20                 	db	32
  1215  00FE1A  25                 	db	37
  1216  00FE1B  64                 	db	100	;'d'
  1217  00FE1C  00                 	db	0
  1218  00FE1D                     STR_84:
  1219  00FE1D  4D                 	db	77	;'M'
  1220  00FE1E  41                 	db	65	;'A'
  1221  00FE1F  47                 	db	71	;'G'
  1222  00FE20  5F                 	db	95	;'_'
  1223  00FE21  73                 	db	115	;'s'
  1224  00FE22  69                 	db	105	;'i'
  1225  00FE23  67                 	db	103	;'g'
  1226  00FE24  6E                 	db	110	;'n'
  1227  00FE25  61                 	db	97	;'a'
  1228  00FE26  6C                 	db	108	;'l'
  1229  00FE27  3A                 	db	58	;':'
  1230  00FE28  20                 	db	32
  1231  00FE29  25                 	db	37
  1232  00FE2A  64                 	db	100	;'d'
  1233  00FE2B  20                 	db	32
  1234  00FE2C  00                 	db	0
  1235  00FE2D                     STR_104:
  1236  00FE2D  54                 	db	84	;'T'
  1237  00FE2E  53                 	db	83	;'S'
  1238  00FE2F  54                 	db	84	;'T'
  1239  00FE30  3A                 	db	58	;':'
  1240  00FE31  20                 	db	32
  1241  00FE32  54                 	db	84	;'T'
  1242  00FE33  49                 	db	73	;'I'
  1243  00FE34  4C                 	db	76	;'L'
  1244  00FE35  54                 	db	84	;'T'
  1245  00FE36  20                 	db	32
  1246  00FE37  53                 	db	83	;'S'
  1247  00FE38  45                 	db	69	;'E'
  1248  00FE39  52                 	db	82	;'R'
  1249  00FE3A  56                 	db	86	;'V'
  1250  00FE3B  4F                 	db	79	;'O'
  1251  00FE3C  00                 	db	0
  1252  00FE3D                     STR_65:
  1253  00FE3D  53                 	db	83	;'S'
  1254  00FE3E  4F                 	db	79	;'O'
  1255  00FE3F  52                 	db	82	;'R'
  1256  00FE40  54                 	db	84	;'T'
  1257  00FE41  49                 	db	73	;'I'
  1258  00FE42  4E                 	db	78	;'N'
  1259  00FE43  47                 	db	71	;'G'
  1260  00FE44  2E                 	db	46
  1261  00FE45  2E                 	db	46
  1262  00FE46  2E                 	db	46
  1263  00FE47  20                 	db	32
  1264  00FE48  20                 	db	32
  1265  00FE49  20                 	db	32
  1266  00FE4A  20                 	db	32
  1267  00FE4B  20                 	db	32
  1268  00FE4C  00                 	db	0
  1269  00FE4D                     STR_66:
  1270  00FE4D  54                 	db	84	;'T'
  1271  00FE4E  49                 	db	73	;'I'
  1272  00FE4F  4D                 	db	77	;'M'
  1273  00FE50  45                 	db	69	;'E'
  1274  00FE51  20                 	db	32
  1275  00FE52  25                 	db	37
  1276  00FE53  64                 	db	100	;'d'
  1277  00FE54  3A                 	db	58	;':'
  1278  00FE55  25                 	db	37
  1279  00FE56  30                 	db	48	;'0'
  1280  00FE57  32                 	db	50	;'2'
  1281  00FE58  64                 	db	100	;'d'
  1282  00FE59  20                 	db	32
  1283  00FE5A  20                 	db	32
  1284  00FE5B  20                 	db	32
  1285  00FE5C  00                 	db	0
  1286  00FE5D                     STR_4:
  1287  00FE5D  44                 	db	68	;'D'
  1288  00FE5E  49                 	db	73	;'I'
  1289  00FE5F  44                 	db	68	;'D'
  1290  00FE60  4E                 	db	78	;'N'
  1291  00FE61  27                 	db	39
  1292  00FE62  54                 	db	84	;'T'
  1293  00FE63  20                 	db	32
  1294  00FE64  43                 	db	67	;'C'
  1295  00FE65  4F                 	db	79	;'O'
  1296  00FE66  4D                 	db	77	;'M'
  1297  00FE67  50                 	db	80	;'P'
  1298  00FE68  4C                 	db	76	;'L'
  1299  00FE69  45                 	db	69	;'E'
  1300  00FE6A  54                 	db	84	;'T'
  1301  00FE6B  45                 	db	69	;'E'
  1302  00FE6C  00                 	db	0
  1303  00FE6D                     STR_123:
  1304  00FE6D  44                 	db	68	;'D'
  1305  00FE6E  3A                 	db	58	;':'
  1306  00FE6F  52                 	db	82	;'R'
  1307  00FE70  45                 	db	69	;'E'
  1308  00FE71  54                 	db	84	;'T'
  1309  00FE72  7C                 	db	124
  1310  00FE73  32                 	db	50	;'2'
  1311  00FE74  3A                 	db	58	;':'
  1312  00FE75  43                 	db	67	;'C'
  1313  00FE76  20                 	db	32
  1314  00FE77  25                 	db	37
  1315  00FE78  64                 	db	100	;'d'
  1316  00FE79  20                 	db	32
  1317  00FE7A  20                 	db	32
  1318  00FE7B  00                 	db	0
  1319  00FE7C                     STR_81:
  1320  00FE7C  49                 	db	73	;'I'
  1321  00FE7D  52                 	db	82	;'R'
  1322  00FE7E  5F                 	db	95	;'_'
  1323  00FE7F  73                 	db	115	;'s'
  1324  00FE80  69                 	db	105	;'i'
  1325  00FE81  67                 	db	103	;'g'
  1326  00FE82  6E                 	db	110	;'n'
  1327  00FE83  61                 	db	97	;'a'
  1328  00FE84  6C                 	db	108	;'l'
  1329  00FE85  3A                 	db	58	;':'
  1330  00FE86  20                 	db	32
  1331  00FE87  25                 	db	37
  1332  00FE88  64                 	db	100	;'d'
  1333  00FE89  20                 	db	32
  1334  00FE8A  00                 	db	0
  1335  00FE8B                     STR_110:
  1336  00FE8B  43                 	db	67	;'C'
  1337  00FE8C  41                 	db	65	;'A'
  1338  00FE8D  4D                 	db	77	;'M'
  1339  00FE8E  20                 	db	32
  1340  00FE8F  44                 	db	68	;'D'
  1341  00FE90  57                 	db	87	;'W'
  1342  00FE91  4E                 	db	78	;'N'
  1343  00FE92  20                 	db	32
  1344  00FE93  7C                 	db	124
  1345  00FE94  52                 	db	82	;'R'
  1346  00FE95  43                 	db	67	;'C'
  1347  00FE96  30                 	db	48	;'0'
  1348  00FE97  3D                 	db	61	;'='
  1349  00FE98  30                 	db	48	;'0'
  1350  00FE99  00                 	db	0
  1351  00FE9A                     STR_109:
  1352  00FE9A  43                 	db	67	;'C'
  1353  00FE9B  41                 	db	65	;'A'
  1354  00FE9C  4D                 	db	77	;'M'
  1355  00FE9D  20                 	db	32
  1356  00FE9E  55                 	db	85	;'U'
  1357  00FE9F  50                 	db	80	;'P'
  1358  00FEA0  20                 	db	32
  1359  00FEA1  20                 	db	32
  1360  00FEA2  7C                 	db	124
  1361  00FEA3  52                 	db	82	;'R'
  1362  00FEA4  43                 	db	67	;'C'
  1363  00FEA5  30                 	db	48	;'0'
  1364  00FEA6  3D                 	db	61	;'='
  1365  00FEA7  31                 	db	49	;'1'
  1366  00FEA8  00                 	db	0
  1367  00FEA9                     STR_83:
  1368  00FEA9  54                 	db	84	;'T'
  1369  00FEAA  53                 	db	83	;'S'
  1370  00FEAB  54                 	db	84	;'T'
  1371  00FEAC  3A                 	db	58	;':'
  1372  00FEAD  20                 	db	32
  1373  00FEAE  4D                 	db	77	;'M'
  1374  00FEAF  41                 	db	65	;'A'
  1375  00FEB0  47                 	db	71	;'G'
  1376  00FEB1  4E                 	db	78	;'N'
  1377  00FEB2  45                 	db	69	;'E'
  1378  00FEB3  54                 	db	84	;'T'
  1379  00FEB4  49                 	db	73	;'I'
  1380  00FEB5  53                 	db	83	;'S'
  1381  00FEB6  4D                 	db	77	;'M'
  1382  00FEB7  00                 	db	0
  1383  00FEB8                     STR_108:
  1384  00FEB8  54                 	db	84	;'T'
  1385  00FEB9  53                 	db	83	;'S'
  1386  00FEBA  54                 	db	84	;'T'
  1387  00FEBB  3A                 	db	58	;':'
  1388  00FEBC  20                 	db	32
  1389  00FEBD  43                 	db	67	;'C'
  1390  00FEBE  41                 	db	65	;'A'
  1391  00FEBF  4D                 	db	77	;'M'
  1392  00FEC0  20                 	db	32
  1393  00FEC1  53                 	db	83	;'S'
  1394  00FEC2  45                 	db	69	;'E'
  1395  00FEC3  52                 	db	82	;'R'
  1396  00FEC4  56                 	db	86	;'V'
  1397  00FEC5  4F                 	db	79	;'O'
  1398  00FEC6  00                 	db	0
  1399  00FEC7                     STR_97:
  1400  00FEC7  54                 	db	84	;'T'
  1401  00FEC8  53                 	db	83	;'S'
  1402  00FEC9  54                 	db	84	;'T'
  1403  00FECA  3A                 	db	58	;':'
  1404  00FECB  20                 	db	32
  1405  00FECC  50                 	db	80	;'P'
  1406  00FECD  41                 	db	65	;'A'
  1407  00FECE  4E                 	db	78	;'N'
  1408  00FECF  20                 	db	32
  1409  00FED0  53                 	db	83	;'S'
  1410  00FED1  45                 	db	69	;'E'
  1411  00FED2  52                 	db	82	;'R'
  1412  00FED3  56                 	db	86	;'V'
  1413  00FED4  4F                 	db	79	;'O'
  1414  00FED5  00                 	db	0
  1415  00FED6                     STR_76:
  1416  00FED6  41                 	db	65	;'A'
  1417  00FED7  4C                 	db	76	;'L'
  1418  00FED8  47                 	db	71	;'G'
  1419  00FED9  34                 	db	52	;'4'
  1420  00FEDA  3A                 	db	58	;':'
  1421  00FEDB  20                 	db	32
  1422  00FEDC  41                 	db	65	;'A'
  1423  00FEDD  4C                 	db	76	;'L'
  1424  00FEDE  4C                 	db	76	;'L'
  1425  00FEDF  20                 	db	32
  1426  00FEE0  43                 	db	67	;'C'
  1427  00FEE1  41                 	db	65	;'A'
  1428  00FEE2  4E                 	db	78	;'N'
  1429  00FEE3  53                 	db	83	;'S'
  1430  00FEE4  00                 	db	0
  1431  00FEE5                     STR_91:
  1432  00FEE5  54                 	db	84	;'T'
  1433  00FEE6  53                 	db	83	;'S'
  1434  00FEE7  54                 	db	84	;'T'
  1435  00FEE8  3A                 	db	58	;':'
  1436  00FEE9  20                 	db	32
  1437  00FEEA  44                 	db	68	;'D'
  1438  00FEEB  43                 	db	67	;'C'
  1439  00FEEC  20                 	db	32
  1440  00FEED  4D                 	db	77	;'M'
  1441  00FEEE  4F                 	db	79	;'O'
  1442  00FEEF  54                 	db	84	;'T'
  1443  00FEF0  4F                 	db	79	;'O'
  1444  00FEF1  52                 	db	82	;'R'
  1445  00FEF2  53                 	db	83	;'S'
  1446  00FEF3  00                 	db	0
  1447  00FEF4                     STR_71:
  1448  00FEF4  41                 	db	65	;'A'
  1449  00FEF5  4C                 	db	76	;'L'
  1450  00FEF6  47                 	db	71	;'G'
  1451  00FEF7  4F                 	db	79	;'O'
  1452  00FEF8  52                 	db	82	;'R'
  1453  00FEF9  49                 	db	73	;'I'
  1454  00FEFA  54                 	db	84	;'T'
  1455  00FEFB  48                 	db	72	;'H'
  1456  00FEFC  4D                 	db	77	;'M'
  1457  00FEFD  20                 	db	32
  1458  00FEFE  54                 	db	84	;'T'
  1459  00FEFF  45                 	db	69	;'E'
  1460  00FF00  53                 	db	83	;'S'
  1461  00FF01  54                 	db	84	;'T'
  1462  00FF02  00                 	db	0
  1463  00FF03                     STR_92:
  1464  00FF03  50                 	db	80	;'P'
  1465  00FF04  49                 	db	73	;'I'
  1466  00FF05  4E                 	db	78	;'N'
  1467  00FF06  20                 	db	32
  1468  00FF07  52                 	db	82	;'R'
  1469  00FF08  41                 	db	65	;'A'
  1470  00FF09  35                 	db	53	;'5'
  1471  00FF0A  20                 	db	32
  1472  00FF0B  48                 	db	72	;'H'
  1473  00FF0C  49                 	db	73	;'I'
  1474  00FF0D  47                 	db	71	;'G'
  1475  00FF0E  48                 	db	72	;'H'
  1476  00FF0F  2E                 	db	46
  1477  00FF10  00                 	db	0
  1478  00FF11                     STR_74:
  1479  00FF11  41                 	db	65	;'A'
  1480  00FF12  4C                 	db	76	;'L'
  1481  00FF13  47                 	db	71	;'G'
  1482  00FF14  32                 	db	50	;'2'
  1483  00FF15  3A                 	db	58	;':'
  1484  00FF16  20                 	db	32
  1485  00FF17  31                 	db	49	;'1'
  1486  00FF18  32                 	db	50	;'2'
  1487  00FF19  20                 	db	32
  1488  00FF1A  43                 	db	67	;'C'
  1489  00FF1B  41                 	db	65	;'A'
  1490  00FF1C  4E                 	db	78	;'N'
  1491  00FF1D  53                 	db	83	;'S'
  1492  00FF1E  00                 	db	0
  1493  00FF1F                     STR_77:
  1494  00FF1F  41                 	db	65	;'A'
  1495  00FF20  4C                 	db	76	;'L'
  1496  00FF21  47                 	db	71	;'G'
  1497  00FF22  35                 	db	53	;'5'
  1498  00FF23  3A                 	db	58	;':'
  1499  00FF24  20                 	db	32
  1500  00FF25  4E                 	db	78	;'N'
  1501  00FF26  4F                 	db	79	;'O'
  1502  00FF27  20                 	db	32
  1503  00FF28  43                 	db	67	;'C'
  1504  00FF29  41                 	db	65	;'A'
  1505  00FF2A  4E                 	db	78	;'N'
  1506  00FF2B  53                 	db	83	;'S'
  1507  00FF2C  00                 	db	0
  1508  00FF2D                     STR_72:
  1509  00FF2D  50                 	db	80	;'P'
  1510  00FF2E  55                 	db	85	;'U'
  1511  00FF2F  53                 	db	83	;'S'
  1512  00FF30  48                 	db	72	;'H'
  1513  00FF31  20                 	db	32
  1514  00FF32  54                 	db	84	;'T'
  1515  00FF33  4F                 	db	79	;'O'
  1516  00FF34  20                 	db	32
  1517  00FF35  53                 	db	83	;'S'
  1518  00FF36  54                 	db	84	;'T'
  1519  00FF37  41                 	db	65	;'A'
  1520  00FF38  52                 	db	82	;'R'
  1521  00FF39  54                 	db	84	;'T'
  1522  00FF3A  00                 	db	0
  1523  00FF3B                     STR_23:
  1524  00FF3B  25                 	db	37
  1525  00FF3C  64                 	db	100	;'d'
  1526  00FF3D  20                 	db	32
  1527  00FF3E  4D                 	db	77	;'M'
  1528  00FF3F  49                 	db	73	;'I'
  1529  00FF40  4E                 	db	78	;'N'
  1530  00FF41  20                 	db	32
  1531  00FF42  25                 	db	37
  1532  00FF43  64                 	db	100	;'d'
  1533  00FF44  20                 	db	32
  1534  00FF45  53                 	db	83	;'S'
  1535  00FF46  45                 	db	69	;'E'
  1536  00FF47  43                 	db	67	;'C'
  1537  00FF48  00                 	db	0
  1538  00FF49                     STR_2:
  1539  00FF49  54                 	db	84	;'T'
  1540  00FF4A  49                 	db	73	;'I'
  1541  00FF4B  4D                 	db	77	;'M'
  1542  00FF4C  45                 	db	69	;'E'
  1543  00FF4D  3A                 	db	58	;':'
  1544  00FF4E  20                 	db	32
  1545  00FF4F  25                 	db	37
  1546  00FF50  64                 	db	100	;'d'
  1547  00FF51  3A                 	db	58	;':'
  1548  00FF52  25                 	db	37
  1549  00FF53  30                 	db	48	;'0'
  1550  00FF54  32                 	db	50	;'2'
  1551  00FF55  64                 	db	100	;'d'
  1552  00FF56  00                 	db	0
  1553  00FF57                     STR_80:
  1554  00FF57  54                 	db	84	;'T'
  1555  00FF58  53                 	db	83	;'S'
  1556  00FF59  54                 	db	84	;'T'
  1557  00FF5A  3A                 	db	58	;':'
  1558  00FF5B  20                 	db	32
  1559  00FF5C  49                 	db	73	;'I'
  1560  00FF5D  52                 	db	82	;'R'
  1561  00FF5E  20                 	db	32
  1562  00FF5F  53                 	db	83	;'S'
  1563  00FF60  4E                 	db	78	;'N'
  1564  00FF61  53                 	db	83	;'S'
  1565  00FF62  52                 	db	82	;'R'
  1566  00FF63  00                 	db	0
  1567  00FF64                     STR_75:
  1568  00FF64  41                 	db	65	;'A'
  1569  00FF65  4C                 	db	76	;'L'
  1570  00FF66  47                 	db	71	;'G'
  1571  00FF67  33                 	db	51	;'3'
  1572  00FF68  3A                 	db	58	;':'
  1573  00FF69  20                 	db	32
  1574  00FF6A  31                 	db	49	;'1'
  1575  00FF6B  20                 	db	32
  1576  00FF6C  43                 	db	67	;'C'
  1577  00FF6D  41                 	db	65	;'A'
  1578  00FF6E  4E                 	db	78	;'N'
  1579  00FF6F  00                 	db	0
  1580  00FF70                     STR_94:
  1581  00FF70  50                 	db	80	;'P'
  1582  00FF71  49                 	db	73	;'I'
  1583  00FF72  4E                 	db	78	;'N'
  1584  00FF73  20                 	db	32
  1585  00FF74  52                 	db	82	;'R'
  1586  00FF75  41                 	db	65	;'A'
  1587  00FF76  33                 	db	51	;'3'
  1588  00FF77  2E                 	db	46
  1589  00FF78  2E                 	db	46
  1590  00FF79  2E                 	db	46
  1591  00FF7A  00                 	db	0
  1592  00FF7B                     STR_96:
  1593  00FF7B  50                 	db	80	;'P'
  1594  00FF7C  49                 	db	73	;'I'
  1595  00FF7D  4E                 	db	78	;'N'
  1596  00FF7E  20                 	db	32
  1597  00FF7F  52                 	db	82	;'R'
  1598  00FF80  41                 	db	65	;'A'
  1599  00FF81  34                 	db	52	;'4'
  1600  00FF82  2E                 	db	46
  1601  00FF83  2E                 	db	46
  1602  00FF84  2E                 	db	46
  1603  00FF85  00                 	db	0
  1604  00FF86                     STR_85:
  1605  00FF86  54                 	db	84	;'T'
  1606  00FF87  53                 	db	83	;'S'
  1607  00FF88  54                 	db	84	;'T'
  1608  00FF89  3A                 	db	58	;':'
  1609  00FF8A  20                 	db	32
  1610  00FF8B  43                 	db	67	;'C'
  1611  00FF8C  4F                 	db	79	;'O'
  1612  00FF8D  4E                 	db	78	;'N'
  1613  00FF8E  44                 	db	68	;'D'
  1614  00FF8F  00                 	db	0
  1615  00FF90                     STR_89:
  1616  00FF90  41                 	db	65	;'A'
  1617  00FF91  43                 	db	67	;'C'
  1618  00FF92  54                 	db	84	;'T'
  1619  00FF93  55                 	db	85	;'U'
  1620  00FF94  41                 	db	65	;'A'
  1621  00FF95  54                 	db	84	;'T'
  1622  00FF96  4F                 	db	79	;'O'
  1623  00FF97  52                 	db	82	;'R'
  1624  00FF98  53                 	db	83	;'S'
  1625  00FF99  00                 	db	0
  1626  00FF9A                     STR_22:
  1627  00FF9A  44                 	db	68	;'D'
  1628  00FF9B  55                 	db	85	;'U'
  1629  00FF9C  52                 	db	82	;'R'
  1630  00FF9D  41                 	db	65	;'A'
  1631  00FF9E  54                 	db	84	;'T'
  1632  00FF9F  49                 	db	73	;'I'
  1633  00FFA0  4F                 	db	79	;'O'
  1634  00FFA1  4E                 	db	78	;'N'
  1635  00FFA2  3A                 	db	58	;':'
  1636  00FFA3  00                 	db	0
  1637  00FFA4                     STR_87:
  1638  00FFA4  43                 	db	67	;'C'
  1639  00FFA5  4F                 	db	79	;'O'
  1640  00FFA6  4E                 	db	78	;'N'
  1641  00FFA7  44                 	db	68	;'D'
  1642  00FFA8  3A                 	db	58	;':'
  1643  00FFA9  20                 	db	32
  1644  00FFAA  25                 	db	37
  1645  00FFAB  64                 	db	100	;'d'
  1646  00FFAC  00                 	db	0
  1647  00FFAD                     STR_78:
  1648  00FFAD  53                 	db	83	;'S'
  1649  00FFAE  45                 	db	69	;'E'
  1650  00FFAF  4E                 	db	78	;'N'
  1651  00FFB0  53                 	db	83	;'S'
  1652  00FFB1  4F                 	db	79	;'O'
  1653  00FFB2  52                 	db	82	;'R'
  1654  00FFB3  53                 	db	83	;'S'
  1655  00FFB4  00                 	db	0
  1656  00FFB5                     STR_131:
  1657  00FFB5  28                 	db	40
  1658  00FFB6  6E                 	db	110	;'n'
  1659  00FFB7  75                 	db	117	;'u'
  1660  00FFB8  6C                 	db	108	;'l'
  1661  00FFB9  6C                 	db	108	;'l'
  1662  00FFBA  29                 	db	41
  1663  00FFBB  00                 	db	0
  1664  00FFBC                     STR_68:
  1665  00FFBC  46                 	db	70	;'F'
  1666  00FFBD  41                 	db	65	;'A'
  1667  00FFBE  49                 	db	73	;'I'
  1668  00FFBF  4C                 	db	76	;'L'
  1669  00FFC0  45                 	db	69	;'E'
  1670  00FFC1  44                 	db	68	;'D'
  1671  00FFC2  00                 	db	0
  1672  00FFC3                     STR_7:
  1673  00FFC3  53                 	db	83	;'S'
  1674  00FFC4  54                 	db	84	;'T'
  1675  00FFC5  41                 	db	65	;'A'
  1676  00FFC6  52                 	db	82	;'R'
  1677  00FFC7  54                 	db	84	;'T'
  1678  00FFC8  3A                 	db	58	;':'
  1679  00FFC9  00                 	db	0
  1680  00FFCA                     STR_9:
  1681  00FFCA  46                 	db	70	;'F'
  1682  00FFCB  45                 	db	69	;'E'
  1683  00FFCC  42                 	db	66	;'B'
  1684  00FFCD  00                 	db	0
  1685  00FFCE                     STR_19:
  1686  00FFCE  44                 	db	68	;'D'
  1687  00FFCF  45                 	db	69	;'E'
  1688  00FFD0  43                 	db	67	;'C'
  1689  00FFD1  00                 	db	0
  1690  00FFD2                     STR_15:
  1691  00FFD2  41                 	db	65	;'A'
  1692  00FFD3  55                 	db	85	;'U'
  1693  00FFD4  47                 	db	71	;'G'
  1694  00FFD5  00                 	db	0
  1695  00FFD6                     STR_14:
  1696  00FFD6  4A                 	db	74	;'J'
  1697  00FFD7  55                 	db	85	;'U'
  1698  00FFD8  4C                 	db	76	;'L'
  1699  00FFD9  00                 	db	0
  1700  00FFDA                     STR_8:
  1701  00FFDA  4A                 	db	74	;'J'
  1702  00FFDB  41                 	db	65	;'A'
  1703  00FFDC  4E                 	db	78	;'N'
  1704  00FFDD  00                 	db	0
  1705  00FFDE                     STR_13:
  1706  00FFDE  4A                 	db	74	;'J'
  1707  00FFDF  55                 	db	85	;'U'
  1708  00FFE0  4E                 	db	78	;'N'
  1709  00FFE1  00                 	db	0
  1710  00FFE2                     STR_16:
  1711  00FFE2  53                 	db	83	;'S'
  1712  00FFE3  45                 	db	69	;'E'
  1713  00FFE4  50                 	db	80	;'P'
  1714  00FFE5  00                 	db	0
  1715  00FFE6                     STR_10:
  1716  00FFE6  4D                 	db	77	;'M'
  1717  00FFE7  41                 	db	65	;'A'
  1718  00FFE8  52                 	db	82	;'R'
  1719  00FFE9  00                 	db	0
  1720  00FFEA                     STR_11:
  1721  00FFEA  41                 	db	65	;'A'
  1722  00FFEB  50                 	db	80	;'P'
  1723  00FFEC  52                 	db	82	;'R'
  1724  00FFED  00                 	db	0
  1725  00FFEE                     STR_20:
  1726  00FFEE  45                 	db	69	;'E'
  1727  00FFEF  52                 	db	82	;'R'
  1728  00FFF0  52                 	db	82	;'R'
  1729  00FFF1  00                 	db	0
  1730  00FFF2                     STR_17:
  1731  00FFF2  4F                 	db	79	;'O'
  1732  00FFF3  43                 	db	67	;'C'
  1733  00FFF4  54                 	db	84	;'T'
  1734  00FFF5  00                 	db	0
  1735  00FFF6                     STR_18:
  1736  00FFF6  4E                 	db	78	;'N'
  1737  00FFF7  4F                 	db	79	;'O'
  1738  00FFF8  56                 	db	86	;'V'
  1739  00FFF9  00                 	db	0
  1740  00FFFA                     STR_12:
  1741  00FFFA  4D                 	db	77	;'M'
  1742  00FFFB  41                 	db	65	;'A'
  1743  00FFFC  59                 	db	89	;'Y'
  1744  00FFFD  00                 	db	0
  1745  0000                     
  1746                           ; #config settings
  1747  00FFFE  00                 	db	0	; dummy byte at the end
  1748  0000                     
  1749                           	psect	cinit
  1750  0053D4                     __pcinit:
  1751                           	opt stack 0
  1752  0053D4                     start_initialization:
  1753                           	opt stack 0
  1754  0053D4                     __initialization:
  1755                           	opt stack 0
  1756                           
  1757                           ; Initialize objects allocated to BANK1 (8 bytes)
  1758                           ; load TBLPTR registers with __pidataBANK1
  1759  0053D4  0E1A               	movlw	low __pidataBANK1
  1760  0053D6  6EF6               	movwf	tblptrl,c
  1761  0053D8  0E5C               	movlw	high __pidataBANK1
  1762  0053DA  6EF7               	movwf	tblptrh,c
  1763  0053DC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1764  0053DE  6EF8               	movwf	tblptru,c
  1765  0053E0  EE01  F049         	lfsr	0,__pdataBANK1
  1766  0053E4  EE10 F008          	lfsr	1,8
  1767  0053E8                     copy_data0:
  1768  0053E8  0009               	tblrd		*+
  1769  0053EA  CFF5 FFEE          	movff	tablat,postinc0
  1770  0053EE  50E5               	movf	postdec1,w,c
  1771  0053F0  50E1               	movf	fsr1l,w,c
  1772  0053F2  E1FA               	bnz	copy_data0
  1773                           
  1774                           ; Clear objects allocated to BANK1 (73 bytes)
  1775  0053F4  EE01  F000         	lfsr	0,__pbssBANK1
  1776  0053F8  0E49               	movlw	73
  1777  0053FA                     clear_0:
  1778  0053FA  6AEE               	clrf	postinc0,c
  1779  0053FC  06E8               	decf	wreg,f,c
  1780  0053FE  E1FD               	bnz	clear_0
  1781                           
  1782                           ; Clear objects allocated to BANK0 (38 bytes)
  1783  005400  EE00  F0DA         	lfsr	0,__pbssBANK0
  1784  005404  0E26               	movlw	38
  1785  005406                     clear_1:
  1786  005406  6AEE               	clrf	postinc0,c
  1787  005408  06E8               	decf	wreg,f,c
  1788  00540A  E1FD               	bnz	clear_1
  1789                           
  1790                           ; Clear objects allocated to COMRAM (35 bytes)
  1791  00540C  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1792  005410  0E23               	movlw	35
  1793  005412                     clear_2:
  1794  005412  6AEE               	clrf	postinc0,c
  1795  005414  06E8               	decf	wreg,f,c
  1796  005416  E1FD               	bnz	clear_2
  1797  005418                     end_of_initialization:
  1798                           	opt stack 0
  1799  005418                     __end_of__initialization:
  1800                           	opt stack 0
  1801  005418  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1802  00541A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1803  00541C  0100               	movlb	0
  1804  00541E  EFB5  F023         	goto	_main	;jump to C main() function
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postdec1	equ	0xFE5
  1812                           fsr1l	equ	0xFE1
  1813                           
  1814                           	psect	bssCOMRAM
  1815  00005B                     __pbssCOMRAM:
  1816                           	opt stack 0
  1817  00005B                     _back:
  1818                           	opt stack 0
  1819  00005B                     	ds	2
  1820  00005D                     _down:
  1821                           	opt stack 0
  1822  00005D                     	ds	2
  1823  00005F                     _enter:
  1824                           	opt stack 0
  1825  00005F                     	ds	2
  1826  000061                     _f_panning_to_bin:
  1827                           	opt stack 0
  1828  000061                     	ds	2
  1829  000063                     _log_count_can_no_lab:
  1830                           	opt stack 0
  1831  000063                     	ds	2
  1832  000065                     _log_count_can_w_lab:
  1833                           	opt stack 0
  1834  000065                     	ds	2
  1835  000067                     _log_count_pop_w_tab:
  1836                           	opt stack 0
  1837  000067                     	ds	2
  1838  000069                     _most_recent_sort_time:
  1839                           	opt stack 0
  1840  000069                     	ds	2
  1841  00006B                     _pan_servo_state:
  1842                           	opt stack 0
  1843  00006B                     	ds	2
  1844  00006D                     _servo_timer_counter:
  1845                           	opt stack 0
  1846  00006D                     	ds	2
  1847  00006F                     _servo_timer_target:
  1848                           	opt stack 0
  1849  00006F                     	ds	2
  1850  000071                     _tilt_servo_state:
  1851                           	opt stack 0
  1852  000071                     	ds	2
  1853  000073                     _timer2_counter:
  1854                           	opt stack 0
  1855  000073                     	ds	2
  1856  000075                     _up:
  1857                           	opt stack 0
  1858  000075                     	ds	2
  1859  000077                     _was_low_1:
  1860                           	opt stack 0
  1861  000077                     	ds	2
  1862  000079                     _was_low_2:
  1863                           	opt stack 0
  1864  000079                     	ds	2
  1865  00007B                     _was_low_3:
  1866                           	opt stack 0
  1867  00007B                     	ds	2
  1868  00007D                     _input:
  1869                           	opt stack 0
  1870  00007D                     	ds	1
  1871                           tblptru	equ	0xFF8
  1872                           tblptrh	equ	0xFF7
  1873                           tblptrl	equ	0xFF6
  1874                           tablat	equ	0xFF5
  1875                           postinc0	equ	0xFEE
  1876                           wreg	equ	0xFE8
  1877                           postdec1	equ	0xFE5
  1878                           fsr1l	equ	0xFE1
  1879                           
  1880                           	psect	bssBANK0
  1881  0000DA                     __pbssBANK0:
  1882                           	opt stack 0
  1883  0000DA                     _sensor_outputs:
  1884                           	opt stack 0
  1885  0000DA                     	ds	4
  1886  0000DE                     _COND_signal:
  1887                           	opt stack 0
  1888  0000DE                     	ds	2
  1889  0000E0                     _IR_signal:
  1890                           	opt stack 0
  1891  0000E0                     	ds	2
  1892  0000E2                     _MAG_signal:
  1893                           	opt stack 0
  1894  0000E2                     	ds	2
  1895  0000E4                     _RTCflag:
  1896                           	opt stack 0
  1897  0000E4                     	ds	2
  1898  0000E6                     _cur_state:
  1899                           	opt stack 0
  1900  0000E6                     	ds	2
  1901  0000E8                     _debug:
  1902                           	opt stack 0
  1903  0000E8                     	ds	2
  1904  0000EA                     _f_arm_position:
  1905                           	opt stack 0
  1906  0000EA                     	ds	2
  1907  0000EC                     _f_lastCan:
  1908                           	opt stack 0
  1909  0000EC                     	ds	2
  1910  0000EE                     _f_loadingNewCan:
  1911                           	opt stack 0
  1912  0000EE                     	ds	2
  1913  0000F0                     _log:
  1914                           	opt stack 0
  1915  0000F0                     	ds	2
  1916  0000F2                     _log_completion:
  1917                           	opt stack 0
  1918  0000F2                     	ds	2
  1919  0000F4                     _log_count_pop_no_tab:
  1920                           	opt stack 0
  1921  0000F4                     	ds	2
  1922  0000F6                     _log_total_time:
  1923                           	opt stack 0
  1924  0000F6                     	ds	2
  1925  0000F8                     _logstate:
  1926                           	opt stack 0
  1927  0000F8                     	ds	2
  1928  0000FA                     _total_time:
  1929                           	opt stack 0
  1930  0000FA                     	ds	2
  1931  0000FC                     _machine_state:
  1932                           	opt stack 0
  1933  0000FC                     	ds	1
  1934  0000FD                     _sel:
  1935                           	opt stack 0
  1936  0000FD                     	ds	1
  1937  0000FE                     _count_total:
  1938                           	opt stack 0
  1939  0000FE                     	ds	2
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           postinc0	equ	0xFEE
  1945                           wreg	equ	0xFE8
  1946                           postdec1	equ	0xFE5
  1947                           fsr1l	equ	0xFE1
  1948                           
  1949                           	psect	bssBANK1
  1950  000100                     __pbssBANK1:
  1951                           	opt stack 0
  1952  000100                     _log_startTime:
  1953                           	opt stack 0
  1954  000100                     	ds	14
  1955  00010E                     _startTime:
  1956                           	opt stack 0
  1957  00010E                     	ds	14
  1958  00011C                     _servoTimes:
  1959                           	opt stack 0
  1960  00011C                     	ds	8
  1961  000124                     _time:
  1962                           	opt stack 0
  1963  000124                     	ds	7
  1964  00012B                     _count_can_no_lab:
  1965                           	opt stack 0
  1966  00012B                     	ds	2
  1967  00012D                     _count_can_w_lab:
  1968                           	opt stack 0
  1969  00012D                     	ds	2
  1970  00012F                     _count_pop_no_tab:
  1971                           	opt stack 0
  1972  00012F                     	ds	2
  1973  000131                     _count_pop_w_tab:
  1974                           	opt stack 0
  1975  000131                     	ds	2
  1976  000133                     _cur_can:
  1977                           	opt stack 0
  1978  000133                     	ds	2
  1979  000135                     _f_ID_receive:
  1980                           	opt stack 0
  1981  000135                     	ds	2
  1982  000137                     _f_can_coming_to_ID:
  1983                           	opt stack 0
  1984  000137                     	ds	2
  1985  000139                     _f_can_coming_to_distribution:
  1986                           	opt stack 0
  1987  000139                     	ds	2
  1988  00013B                     _f_can_distributed:
  1989                           	opt stack 0
  1990  00013B                     	ds	2
  1991  00013D                     _f_most_recent_sort_time:
  1992                           	opt stack 0
  1993  00013D                     	ds	2
  1994  00013F                     _first:
  1995                           	opt stack 0
  1996  00013F                     	ds	2
  1997  000141                     _firstboot:
  1998                           	opt stack 0
  1999  000141                     	ds	2
  2000  000143                     _i:
  2001                           	opt stack 0
  2002  000143                     	ds	2
  2003  000145                     _log_count_total:
  2004                           	opt stack 0
  2005  000145                     	ds	2
  2006  000147                     _var:
  2007                           	opt stack 0
  2008  000147                     	ds	2
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           
  2018                           	psect	dataBANK1
  2019  000149                     __pdataBANK1:
  2020                           	opt stack 0
  2021  000149                     UI@F3246:
  2022                           	opt stack 0
  2023  000149                     	ds	4
  2024  00014D                     printRTC@F3236:
  2025                           	opt stack 0
  2026  00014D                     	ds	4
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           postdec1	equ	0xFE5
  2034                           fsr1l	equ	0xFE1
  2035                           
  2036                           	psect	cstackBANK0
  2037  000080                     __pcstackBANK0:
  2038                           	opt stack 0
  2039  000080                     ??_delay_ms:
  2040  000080                     ??_isdigit:
  2041  000080                     ??_readADC:
  2042  000080                     ??_I2C_Master_Wait:
  2043  000080                     ?___wmul:
  2044                           	opt stack 0
  2045  000080                     ?___awmod:
  2046                           	opt stack 0
  2047  000080                     ?___lwdiv:
  2048                           	opt stack 0
  2049  000080                     ?___ftpack:
  2050                           	opt stack 0
  2051  000080                     ?___lldiv:
  2052                           	opt stack 0
  2053  000080                     lcdNibble@temp:
  2054                           	opt stack 0
  2055  000080                     initTime@m:
  2056                           	opt stack 0
  2057  000080                     updateServoPosition@time_us:
  2058                           	opt stack 0
  2059  000080                     EEPROM_read@address:
  2060                           	opt stack 0
  2061  000080                     ___wmul@multiplier:
  2062                           	opt stack 0
  2063  000080                     ___awmod@dividend:
  2064                           	opt stack 0
  2065  000080                     ___lwdiv@dividend:
  2066                           	opt stack 0
  2067  000080                     strcpy@to:
  2068                           	opt stack 0
  2069  000080                     ___ftpack@arg:
  2070                           	opt stack 0
  2071  000080                     ___lldiv@dividend:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0x0
  2075  000080                     	ds	1
  2076  000081                     readADC@channel:
  2077                           	opt stack 0
  2078  000081                     I2C_Master_Read@a:
  2079                           	opt stack 0
  2080  000081                     lcdNibble@data:
  2081                           	opt stack 0
  2082  000081                     initTime@h:
  2083                           	opt stack 0
  2084  000081                     delay_ms@milliseconds:
  2085                           	opt stack 0
  2086  000081                     _isdigit$2065:
  2087                           	opt stack 0
  2088  000081                     I2C_Master_Write@d:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x1
  2092  000081                     	ds	1
  2093  000082                     ??_readIR:
  2094  000082                     ??_readMAG:
  2095  000082                     ??_readCOND:
  2096  000082                     I2C_Master_Read@temp:
  2097                           	opt stack 0
  2098  000082                     lcdInst@data:
  2099                           	opt stack 0
  2100  000082                     putch@data:
  2101                           	opt stack 0
  2102  000082                     initTime@w:
  2103                           	opt stack 0
  2104  000082                     isdigit@c:
  2105                           	opt stack 0
  2106  000082                     updateServoPosition@timer:
  2107                           	opt stack 0
  2108  000082                     ___wmul@multiplicand:
  2109                           	opt stack 0
  2110  000082                     ___awmod@divisor:
  2111                           	opt stack 0
  2112  000082                     ___lwdiv@divisor:
  2113                           	opt stack 0
  2114  000082                     strcpy@from:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x2
  2118  000082                     	ds	1
  2119  000083                     ??_initLCD:
  2120  000083                     initTime@DD:
  2121                           	opt stack 0
  2122  000083                     ___ftpack@exp:
  2123                           	opt stack 0
  2124  000083                     getRTC@i:
  2125                           	opt stack 0
  2126                           
  2127                           ; 2 bytes @ 0x3
  2128  000083                     	ds	1
  2129  000084                     ??_updateServoPosition:
  2130  000084                     initTime@MM:
  2131                           	opt stack 0
  2132  000084                     ___awmod@counter:
  2133                           	opt stack 0
  2134  000084                     ___ftpack@sign:
  2135                           	opt stack 0
  2136  000084                     readIR@res:
  2137                           	opt stack 0
  2138  000084                     readMAG@res:
  2139                           	opt stack 0
  2140  000084                     readCOND@res:
  2141                           	opt stack 0
  2142  000084                     ___wmul@product:
  2143                           	opt stack 0
  2144  000084                     ___lwdiv@quotient:
  2145                           	opt stack 0
  2146  000084                     strcpy@cp:
  2147                           	opt stack 0
  2148  000084                     ___lldiv@divisor:
  2149                           	opt stack 0
  2150                           
  2151                           ; 4 bytes @ 0x4
  2152  000084                     	ds	1
  2153  000085                     ??_initSortTimer:
  2154  000085                     ??___ftpack:
  2155  000085                     initTime@YY:
  2156                           	opt stack 0
  2157  000085                     ___awmod@sign:
  2158                           	opt stack 0
  2159                           
  2160                           ; 1 bytes @ 0x5
  2161  000085                     	ds	1
  2162  000086                     ??_getIR:
  2163  000086                     ??_getMAG:
  2164  000086                     ?___awdiv:
  2165                           	opt stack 0
  2166  000086                     initTime@s:
  2167                           	opt stack 0
  2168  000086                     ___lwdiv@counter:
  2169                           	opt stack 0
  2170  000086                     updateServoPosition@my_time:
  2171                           	opt stack 0
  2172  000086                     ___awdiv@dividend:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x6
  2176  000086                     	ds	1
  2177  000087                     ?___lwmod:
  2178                           	opt stack 0
  2179  000087                     getIR@i:
  2180                           	opt stack 0
  2181  000087                     ___lwmod@dividend:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x7
  2185  000087                     	ds	1
  2186  000088                     ??_Distribution:
  2187  000088                     ??_initServos:
  2188  000088                     initSortTimer@i:
  2189                           	opt stack 0
  2190  000088                     ___awdiv@divisor:
  2191                           	opt stack 0
  2192  000088                     ___lldiv@quotient:
  2193                           	opt stack 0
  2194                           
  2195                           ; 4 bytes @ 0x8
  2196  000088                     	ds	1
  2197  000089                     ___lwmod@divisor:
  2198                           	opt stack 0
  2199                           
  2200                           ; 2 bytes @ 0x9
  2201  000089                     	ds	1
  2202  00008A                     ___awdiv@counter:
  2203                           	opt stack 0
  2204                           
  2205                           ; 1 bytes @ 0xA
  2206  00008A                     	ds	1
  2207  00008B                     ___awdiv@sign:
  2208                           	opt stack 0
  2209  00008B                     ___lwmod@counter:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0xB
  2213  00008B                     	ds	1
  2214  00008C                     ___lldiv@counter:
  2215                           	opt stack 0
  2216  00008C                     ___awdiv@quotient:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0xC
  2220  00008C                     	ds	1
  2221  00008D                     I2C_Master_Init@c:
  2222                           	opt stack 0
  2223                           
  2224                           ; 4 bytes @ 0xD
  2225  00008D                     	ds	1
  2226  00008E                     ?_printf:
  2227                           	opt stack 0
  2228  00008E                     ?___awtoft:
  2229                           	opt stack 0
  2230  00008E                     printf@f:
  2231                           	opt stack 0
  2232  00008E                     ___awtoft@c:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0xE
  2236  00008E                     	ds	3
  2237  000091                     ??_I2C_Master_Init:
  2238  000091                     ___awtoft@sign:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x11
  2242  000091                     	ds	1
  2243  000092                     ___ftge@ff1:
  2244                           	opt stack 0
  2245                           
  2246                           ; 3 bytes @ 0x12
  2247  000092                     	ds	3
  2248  000095                     ??_loadRTC:
  2249  000095                     ___ftge@ff2:
  2250                           	opt stack 0
  2251                           
  2252                           ; 3 bytes @ 0x15
  2253  000095                     	ds	1
  2254  000096                     loadRTC@i:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x16
  2258  000096                     	ds	2
  2259  000098                     ??___ftge:
  2260                           
  2261                           ; 1 bytes @ 0x18
  2262  000098                     	ds	2
  2263  00009A                     ??_printf:
  2264                           
  2265                           ; 1 bytes @ 0x1A
  2266  00009A                     	ds	4
  2267  00009E                     printf@prec:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x1E
  2271  00009E                     	ds	1
  2272  00009F                     printf@cp:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x1F
  2276  00009F                     	ds	2
  2277  0000A1                     printf@ap:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x21
  2281  0000A1                     	ds	2
  2282  0000A3                     printf@len:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x23
  2286  0000A3                     	ds	2
  2287  0000A5                     printf@val:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x25
  2291  0000A5                     	ds	2
  2292  0000A7                     printf@flag:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x27
  2296  0000A7                     	ds	1
  2297  0000A8                     printf@c:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x28
  2301  0000A8                     	ds	1
  2302  0000A9                     printf@width:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x29
  2306  0000A9                     	ds	2
  2307  0000AB                     ??_printRTC:
  2308  0000AB                     ??_ID:
  2309  0000AB                     ??_algorithmTest:
  2310  0000AB                     ??_sensorTest:
  2311  0000AB                     ??_actuatorTest:
  2312  0000AB                     ??_arm:
  2313  0000AB                     ??_PortTestDC:
  2314  0000AB                     ??_SpeedTest:
  2315  0000AB                     ??_PortTestPusher:
  2316  0000AB                     ??_PlatformTest:
  2317  0000AB                     ??_BothServos:
  2318  0000AB                     ??_BlockerTest:
  2319  0000AB                     EEPROM_write@address:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x2B
  2323  0000AB                     	ds	1
  2324  0000AC                     arm@on:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x2C
  2328  0000AC                     	ds	1
  2329  0000AD                     EEPROM_write@data:
  2330                           	opt stack 0
  2331  0000AD                     actuatorTest@i_1736:
  2332                           	opt stack 0
  2333  0000AD                     ID@res3:
  2334                           	opt stack 0
  2335  0000AD                     sensorTest@res:
  2336                           	opt stack 0
  2337  0000AD                     PlatformTest@res:
  2338                           	opt stack 0
  2339  0000AD                     BlockerTest@i:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x2D
  2343  0000AD                     	ds	1
  2344  0000AE                     ??_EEPROM_write:
  2345  0000AE                     actuatorTest@i_1743:
  2346                           	opt stack 0
  2347  0000AE                     printRTC@INT_time:
  2348                           	opt stack 0
  2349                           
  2350                           ; 14 bytes @ 0x2E
  2351  0000AE                     	ds	1
  2352  0000AF                     _ID$1142:
  2353                           	opt stack 0
  2354  0000AF                     EEPROM_write@i:
  2355                           	opt stack 0
  2356  0000AF                     actuatorTest@i_1744:
  2357                           	opt stack 0
  2358  0000AF                     PlatformTest@res_1788:
  2359                           	opt stack 0
  2360  0000AF                     BlockerTest@res:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x2F
  2364  0000AF                     	ds	1
  2365  0000B0                     _ID$1145:
  2366                           	opt stack 0
  2367  0000B0                     EEPROM_write@i_1404:
  2368                           	opt stack 0
  2369  0000B0                     actuatorTest@i_1746:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x30
  2373  0000B0                     	ds	1
  2374  0000B1                     ??_Loading:
  2375  0000B1                     logRun@num:
  2376                           	opt stack 0
  2377  0000B1                     actuatorTest@i_1747:
  2378                           	opt stack 0
  2379  0000B1                     ID@i:
  2380                           	opt stack 0
  2381  0000B1                     PlatformTest@i:
  2382                           	opt stack 0
  2383  0000B1                     BlockerTest@cam_flag:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x31
  2387  0000B1                     	ds	1
  2388  0000B2                     logRun@byte1:
  2389                           	opt stack 0
  2390  0000B2                     actuatorTest@i_1749:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x32
  2394  0000B2                     	ds	1
  2395  0000B3                     logRun@byte2:
  2396                           	opt stack 0
  2397  0000B3                     actuatorTest@i_1750:
  2398                           	opt stack 0
  2399  0000B3                     Loading@addr:
  2400                           	opt stack 0
  2401  0000B3                     ID@i_1141:
  2402                           	opt stack 0
  2403  0000B3                     PlatformTest@i_1792:
  2404                           	opt stack 0
  2405  0000B3                     BlockerTest@cond_flag:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x33
  2409  0000B3                     	ds	1
  2410  0000B4                     logRun@byte3:
  2411                           	opt stack 0
  2412  0000B4                     actuatorTest@i_1752:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x34
  2416  0000B4                     	ds	1
  2417  0000B5                     Loading@byte1:
  2418                           	opt stack 0
  2419  0000B5                     logRun@byte_i:
  2420                           	opt stack 0
  2421  0000B5                     actuatorTest@i_1753:
  2422                           	opt stack 0
  2423  0000B5                     ID@i_1144:
  2424                           	opt stack 0
  2425  0000B5                     PlatformTest@on:
  2426                           	opt stack 0
  2427                           
  2428                           ; 2 bytes @ 0x35
  2429  0000B5                     	ds	1
  2430  0000B6                     logRun@byte11:
  2431                           	opt stack 0
  2432  0000B6                     actuatorTest@i_1755:
  2433                           	opt stack 0
  2434  0000B6                     Loading@i_1119:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x36
  2438  0000B6                     	ds	1
  2439  0000B7                     actuatorTest@i_1756:
  2440                           	opt stack 0
  2441  0000B7                     ID@i_1147:
  2442                           	opt stack 0
  2443  0000B7                     logRun@i:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x37
  2447  0000B7                     	ds	1
  2448  0000B8                     actuatorTest@i_1758:
  2449                           	opt stack 0
  2450  0000B8                     Loading@i_1128:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x38
  2454  0000B8                     	ds	1
  2455  0000B9                     actuatorTest@i_1759:
  2456                           	opt stack 0
  2457  0000B9                     ID@i_1148:
  2458                           	opt stack 0
  2459  0000B9                     logRun@addr:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x39
  2463  0000B9                     	ds	1
  2464  0000BA                     actuatorTest@i_1762:
  2465                           	opt stack 0
  2466  0000BA                     Loading@i_1130:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x3A
  2470  0000BA                     	ds	1
  2471  0000BB                     ID@time:
  2472                           	opt stack 0
  2473  0000BB                     actuatorTest@i_1763:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x3B
  2477  0000BB                     	ds	1
  2478  0000BC                     actuatorTest@i_1765:
  2479                           	opt stack 0
  2480  0000BC                     printRTC@RTC_month:
  2481                           	opt stack 0
  2482  0000BC                     Loading@i_1131:
  2483                           	opt stack 0
  2484  0000BC                     ID@res1:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x3C
  2488  0000BC                     	ds	1
  2489  0000BD                     actuatorTest@i_1766:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x3D
  2493  0000BD                     	ds	1
  2494  0000BE                     actuatorTest@i_1768:
  2495                           	opt stack 0
  2496  0000BE                     Loading@i_1133:
  2497                           	opt stack 0
  2498  0000BE                     ID@res2:
  2499                           	opt stack 0
  2500  0000BE                     printRTC@month:
  2501                           	opt stack 0
  2502                           
  2503                           ; 4 bytes @ 0x3E
  2504  0000BE                     	ds	1
  2505  0000BF                     actuatorTest@i_1769:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x3F
  2509  0000BF                     	ds	1
  2510  0000C0                     actuatorTest@i_1772:
  2511                           	opt stack 0
  2512  0000C0                     Loading@i:
  2513                           	opt stack 0
  2514  0000C0                     ID@n:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x40
  2518  0000C0                     	ds	1
  2519  0000C1                     actuatorTest@i_1773:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0x41
  2523  0000C1                     	ds	1
  2524  0000C2                     actuatorTest@i_1775:
  2525                           	opt stack 0
  2526  0000C2                     printRTC@i:
  2527                           	opt stack 0
  2528  0000C2                     Loading@j:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x42
  2532  0000C2                     	ds	1
  2533  0000C3                     actuatorTest@i_1776:
  2534                           	opt stack 0
  2535                           
  2536                           ; 1 bytes @ 0x43
  2537  0000C3                     	ds	1
  2538  0000C4                     ??_UI:
  2539  0000C4                     actuatorTest@i:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x44
  2543  0000C4                     	ds	2
  2544  0000C6                     ??_Test:
  2545  0000C6                     _UI$2430:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x46
  2549  0000C6                     	ds	2
  2550  0000C8                     UI@i:
  2551                           	opt stack 0
  2552                           
  2553                           ; 1 bytes @ 0x48
  2554  0000C8                     	ds	1
  2555  0000C9                     UI@i_412:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x49
  2559  0000C9                     	ds	1
  2560  0000CA                     UI@i_415:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x4A
  2564  0000CA                     	ds	1
  2565  0000CB                     UI@i_416:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x4B
  2569  0000CB                     	ds	1
  2570  0000CC                     UI@i_434:
  2571                           	opt stack 0
  2572                           
  2573                           ; 1 bytes @ 0x4C
  2574  0000CC                     	ds	1
  2575  0000CD                     UI@i_435:
  2576                           	opt stack 0
  2577                           
  2578                           ; 1 bytes @ 0x4D
  2579  0000CD                     	ds	1
  2580  0000CE                     UI@i_438:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x4E
  2584  0000CE                     	ds	1
  2585  0000CF                     UI@i_439:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x4F
  2589  0000CF                     	ds	1
  2590  0000D0                     UI@i_442:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x50
  2594  0000D0                     	ds	1
  2595  0000D1                     UI@i_443:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x51
  2599  0000D1                     	ds	1
  2600  0000D2                     UI@i_446:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x52
  2604  0000D2                     	ds	1
  2605  0000D3                     UI@i_447:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x53
  2609  0000D3                     	ds	1
  2610  0000D4                     UI@i_450:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x54
  2614  0000D4                     	ds	1
  2615  0000D5                     UI@i_451:
  2616                           	opt stack 0
  2617                           
  2618                           ; 1 bytes @ 0x55
  2619  0000D5                     	ds	1
  2620  0000D6                     UI@month:
  2621                           	opt stack 0
  2622                           
  2623                           ; 4 bytes @ 0x56
  2624  0000D6                     	ds	4
  2625  0000DA                     tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           
  2634                           ; 1 bytes @ 0x5A
  2635                           
  2636                           	psect	cstackCOMRAM
  2637  000001                     __pcstackCOMRAM:
  2638                           	opt stack 0
  2639  000001                     ??_updateArmState:
  2640  000001                     ??i2_I2C_Master_Wait:
  2641  000001                     ??i2_delay_ms:
  2642  000001                     ??i2_isdigit:
  2643  000001                     ?i2___wmul:
  2644                           	opt stack 0
  2645  000001                     ?i2___lwmod:
  2646                           	opt stack 0
  2647  000001                     i2lcdNibble@temp:
  2648                           	opt stack 0
  2649  000001                     i2updateServoPosition@time_us:
  2650                           	opt stack 0
  2651  000001                     i2EEPROM_read@address:
  2652                           	opt stack 0
  2653  000001                     i2___wmul@multiplier:
  2654                           	opt stack 0
  2655  000001                     i2___lwmod@dividend:
  2656                           	opt stack 0
  2657  000001                     i2strcpy@to:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x0
  2661  000001                     	ds	1
  2662  000002                     i2I2C_Master_Read@a:
  2663                           	opt stack 0
  2664  000002                     i2lcdNibble@data:
  2665                           	opt stack 0
  2666  000002                     i2delay_ms@milliseconds:
  2667                           	opt stack 0
  2668  000002                     i2_isdigit$2065:
  2669                           	opt stack 0
  2670  000002                     i2I2C_Master_Write@d:
  2671                           	opt stack 0
  2672                           
  2673                           ; 2 bytes @ 0x1
  2674  000002                     	ds	1
  2675  000003                     i2I2C_Master_Read@temp:
  2676                           	opt stack 0
  2677  000003                     i2lcdInst@data:
  2678                           	opt stack 0
  2679  000003                     i2putch@data:
  2680                           	opt stack 0
  2681  000003                     i2isdigit@c:
  2682                           	opt stack 0
  2683  000003                     i2updateServoPosition@timer:
  2684                           	opt stack 0
  2685  000003                     i2___wmul@multiplicand:
  2686                           	opt stack 0
  2687  000003                     i2___lwmod@divisor:
  2688                           	opt stack 0
  2689  000003                     i2strcpy@from:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x2
  2693  000003                     	ds	1
  2694  000004                     i2getRTC@i:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x3
  2698  000004                     	ds	1
  2699  000005                     ??i2_updateServoPosition:
  2700  000005                     i2___lwmod@counter:
  2701                           	opt stack 0
  2702  000005                     i2___wmul@product:
  2703                           	opt stack 0
  2704  000005                     i2strcpy@cp:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x4
  2708  000005                     	ds	1
  2709  000006                     ?i2___lwdiv:
  2710                           	opt stack 0
  2711  000006                     i2___lwdiv@dividend:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x5
  2715  000006                     	ds	1
  2716  000007                     retrieveLog@logNum:
  2717                           	opt stack 0
  2718  000007                     i2updateServoPosition@my_time:
  2719                           	opt stack 0
  2720                           
  2721                           ; 2 bytes @ 0x6
  2722  000007                     	ds	1
  2723  000008                     i2___lwdiv@divisor:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x7
  2727  000008                     	ds	1
  2728  000009                     ??_retrieveLog:
  2729  000009                     ??_updateServoStates:
  2730                           
  2731                           ; 1 bytes @ 0x8
  2732  000009                     	ds	1
  2733  00000A                     i2___lwdiv@quotient:
  2734                           	opt stack 0
  2735                           
  2736                           ; 2 bytes @ 0x9
  2737  00000A                     	ds	1
  2738  00000B                     retrieveLog@byte1:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0xA
  2742  00000B                     	ds	1
  2743  00000C                     retrieveLog@byte2:
  2744                           	opt stack 0
  2745  00000C                     i2___lwdiv@counter:
  2746                           	opt stack 0
  2747                           
  2748                           ; 1 bytes @ 0xB
  2749  00000C                     	ds	1
  2750  00000D                     ?i2_printf:
  2751                           	opt stack 0
  2752  00000D                     retrieveLog@byte3:
  2753                           	opt stack 0
  2754  00000D                     i2printf@f:
  2755                           	opt stack 0
  2756                           
  2757                           ; 2 bytes @ 0xC
  2758  00000D                     	ds	1
  2759  00000E                     retrieveLog@i:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0xD
  2763  00000E                     	ds	2
  2764  000010                     retrieveLog@addr:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0xF
  2768  000010                     	ds	2
  2769  000012                     dispLogs@myLog:
  2770                           	opt stack 0
  2771                           
  2772                           ; 2 bytes @ 0x11
  2773  000012                     	ds	2
  2774  000014                     
  2775                           ; 1 bytes @ 0x13
  2776  000014                     	ds	5
  2777  000019                     ??i2_printf:
  2778                           
  2779                           ; 1 bytes @ 0x18
  2780  000019                     	ds	4
  2781  00001D                     i2printf@prec:
  2782                           	opt stack 0
  2783                           
  2784                           ; 1 bytes @ 0x1C
  2785  00001D                     	ds	1
  2786  00001E                     i2printf@cp:
  2787                           	opt stack 0
  2788                           
  2789                           ; 2 bytes @ 0x1D
  2790  00001E                     	ds	2
  2791  000020                     i2printf@ap:
  2792                           	opt stack 0
  2793                           
  2794                           ; 2 bytes @ 0x1F
  2795  000020                     	ds	2
  2796  000022                     i2printf@len:
  2797                           	opt stack 0
  2798                           
  2799                           ; 2 bytes @ 0x21
  2800  000022                     	ds	2
  2801  000024                     i2printf@val:
  2802                           	opt stack 0
  2803                           
  2804                           ; 2 bytes @ 0x23
  2805  000024                     	ds	2
  2806  000026                     i2printf@flag:
  2807                           	opt stack 0
  2808                           
  2809                           ; 1 bytes @ 0x25
  2810  000026                     	ds	1
  2811  000027                     i2printf@c:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x26
  2815  000027                     	ds	1
  2816  000028                     i2printf@width:
  2817                           	opt stack 0
  2818                           
  2819                           ; 2 bytes @ 0x27
  2820  000028                     	ds	2
  2821  00002A                     ??_printSortTimer:
  2822  00002A                     ??i2_printRTC:
  2823  00002A                     ?_inputHandler:
  2824                           	opt stack 0
  2825                           
  2826                           ; 2 bytes @ 0x29
  2827  00002A                     	ds	2
  2828  00002C                     ??_inputHandler:
  2829                           
  2830                           ; 1 bytes @ 0x2B
  2831  00002C                     	ds	1
  2832  00002D                     printSortTimer@curTime:
  2833                           	opt stack 0
  2834  00002D                     i2printRTC@INT_time:
  2835                           	opt stack 0
  2836                           
  2837                           ; 14 bytes @ 0x2C
  2838  00002D                     	ds	14
  2839  00003B                     printSortTimer@start_sec:
  2840                           	opt stack 0
  2841  00003B                     i2printRTC@RTC_month:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x3A
  2845  00003B                     	ds	2
  2846  00003D                     printSortTimer@cur_sec:
  2847                           	opt stack 0
  2848  00003D                     i2printRTC@month:
  2849                           	opt stack 0
  2850                           
  2851                           ; 4 bytes @ 0x3C
  2852  00003D                     	ds	2
  2853  00003F                     printSortTimer@min:
  2854                           	opt stack 0
  2855                           
  2856                           ; 2 bytes @ 0x3E
  2857  00003F                     	ds	2
  2858  000041                     printSortTimer@sec:
  2859                           	opt stack 0
  2860  000041                     i2printRTC@i:
  2861                           	opt stack 0
  2862                           
  2863                           ; 2 bytes @ 0x40
  2864  000041                     	ds	2
  2865  000043                     ??_updateMenu:
  2866  000043                     _printSortTimer$2562:
  2867                           	opt stack 0
  2868                           
  2869                           ; 2 bytes @ 0x42
  2870  000043                     	ds	2
  2871  000045                     printSortTimer@timeDiff:
  2872                           	opt stack 0
  2873                           
  2874                           ; 2 bytes @ 0x44
  2875  000045                     	ds	2
  2876  000047                     printSortTimer@i_1160:
  2877                           	opt stack 0
  2878                           
  2879                           ; 2 bytes @ 0x46
  2880  000047                     	ds	2
  2881  000049                     printSortTimer@i:
  2882                           	opt stack 0
  2883                           
  2884                           ; 2 bytes @ 0x48
  2885  000049                     	ds	2
  2886  00004B                     ??_handler:
  2887                           
  2888                           ; 1 bytes @ 0x4A
  2889  00004B                     	ds	16
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           postinc0	equ	0xFEE
  2895                           wreg	equ	0xFE8
  2896                           postdec1	equ	0xFE5
  2897                           fsr1l	equ	0xFE1
  2898                           
  2899 ;;
  2900 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2901 ;;
  2902 ;; *************** function _main *****************
  2903 ;; Defined at:
  2904 ;;		line 19 in file "main.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;		None
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;		None
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;Total ram usage:        0 bytes
  2923 ;; Hardware stack levels required when called:   13
  2924 ;; This function calls:
  2925 ;;		_I2C_Master_Init
  2926 ;;		_Test
  2927 ;;		_UI
  2928 ;;		_initEEPROM
  2929 ;;		_initLCD
  2930 ;;		_initTime
  2931 ;;		_initUI
  2932 ;;		_logRun
  2933 ;;		_machineConfig
  2934 ;;		_sort
  2935 ;;		_stopSignals
  2936 ;; This function is called by:
  2937 ;;		Startup code after reset
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text0
  2942  00476A                     __ptext0:
  2943                           	opt stack 0
  2944  00476A                     _main:
  2945                           	opt stack 18
  2946                           
  2947                           ;main.c: 20: machineConfig();
  2948                           
  2949                           ;incstack = 0
  2950  00476A  ECA5  F028         	call	_machineConfig	;wreg free
  2951                           
  2952                           ;main.c: 21: initLCD();
  2953  00476E  EC83  F02A         	call	_initLCD	;wreg free
  2954                           
  2955                           ;main.c: 24: RTCflag = 0;
  2956  004772  0E00               	movlw	0
  2957  004774  0100               	movlb	0	; () banked
  2958  004776  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2959  004778  0E00               	movlw	0
  2960  00477A  6FE4               	movwf	_RTCflag& (0+255),b
  2961                           
  2962                           ;main.c: 25: if(RTCflag){
  2963  00477C  0100               	movlb	0	; () banked
  2964  00477E  51E4               	movf	_RTCflag& (0+255),w,b
  2965  004780  0100               	movlb	0	; () banked
  2966  004782  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2967  004784  B4D8               	btfsc	status,2,c
  2968  004786  D016               	goto	l10116
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2972  004788  0E47               	movlw	71
  2973  00478A  0100               	movlb	0	; () banked
  2974  00478C  6F80               	movwf	initTime@m& (0+255),b
  2975  00478E  0E17               	movlw	23
  2976  004790  0100               	movlb	0	; () banked
  2977  004792  6F81               	movwf	initTime@h& (0+255),b
  2978  004794  0E07               	movlw	7
  2979  004796  0100               	movlb	0	; () banked
  2980  004798  6F82               	movwf	initTime@w& (0+255),b
  2981  00479A  0E08               	movlw	8
  2982  00479C  0100               	movlb	0	; () banked
  2983  00479E  6F83               	movwf	initTime@DD& (0+255),b
  2984  0047A0  0E04               	movlw	4
  2985  0047A2  0100               	movlb	0	; () banked
  2986  0047A4  6F84               	movwf	initTime@MM& (0+255),b
  2987  0047A6  0E17               	movlw	23
  2988  0047A8  0100               	movlb	0	; () banked
  2989  0047AA  6F85               	movwf	initTime@YY& (0+255),b
  2990  0047AC  0E42               	movlw	66
  2991  0047AE  EC76  F02D         	call	_initTime
  2992                           
  2993                           ;main.c: 27: }
  2994  0047B2  D00B               	goto	l10118
  2995  0047B4                     l10116:
  2996                           
  2997                           ;main.c: 28: else{
  2998                           ;main.c: 29: I2C_Master_Init(10000);
  2999  0047B4  0E10               	movlw	16
  3000  0047B6  0100               	movlb	0	; () banked
  3001  0047B8  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3002  0047BA  0E27               	movlw	39
  3003  0047BC  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3004  0047BE  0E00               	movlw	0
  3005  0047C0  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3006  0047C2  0E00               	movlw	0
  3007  0047C4  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3008  0047C6  EC08  F029         	call	_I2C_Master_Init	;wreg free
  3009  0047CA                     l10118:
  3010                           
  3011                           ;main.c: 30: }
  3012                           ;main.c: 32: initUI();
  3013  0047CA  ECA6  F02B         	call	_initUI	;wreg free
  3014                           
  3015                           ;main.c: 33: first = 1;
  3016  0047CE  0E00               	movlw	0
  3017  0047D0  0101               	movlb	1	; () banked
  3018  0047D2  6F40               	movwf	(_first+1)& (0+255),b
  3019  0047D4  0E01               	movlw	1
  3020  0047D6  6F3F               	movwf	_first& (0+255),b
  3021                           
  3022                           ; BSR set to: 1
  3023                           ;main.c: 34: initEEPROM();
  3024  0047D8  ECBE  F02D         	call	_initEEPROM	;wreg free
  3025                           
  3026                           ;main.c: 45: switch(machine_state){
  3027                           
  3028                           ;main.c: 44: while(1){
  3029  0047DC  D018               	goto	l10142
  3030  0047DE                     l10124:
  3031                           
  3032                           ;main.c: 47: UI();
  3033  0047DE  EC09  F000         	call	_UI	;wreg free
  3034                           
  3035                           ;main.c: 48: break;
  3036  0047E2  D015               	goto	l10142
  3037  0047E4                     l10126:
  3038                           
  3039                           ;main.c: 50: sort();
  3040  0047E4  EC65  F02D         	call	_sort	;wreg free
  3041                           
  3042                           ;main.c: 51: break;
  3043  0047E8  D012               	goto	l10142
  3044  0047EA                     l10128:
  3045                           
  3046                           ;main.c: 53: stopSignals();
  3047  0047EA  EC96  F02D         	call	_stopSignals	;wreg free
  3048                           
  3049                           ;main.c: 54: logRun();
  3050  0047EE  ECAB  F01F         	call	_logRun	;wreg free
  3051                           
  3052                           ;main.c: 55: first = 1;
  3053  0047F2  0E00               	movlw	0
  3054  0047F4  0101               	movlb	1	; () banked
  3055  0047F6  6F40               	movwf	(_first+1)& (0+255),b
  3056  0047F8  0E01               	movlw	1
  3057  0047FA  6F3F               	movwf	_first& (0+255),b
  3058                           
  3059                           ; BSR set to: 1
  3060                           ;main.c: 56: UI();
  3061  0047FC  EC09  F000         	call	_UI	;wreg free
  3062                           
  3063                           ;main.c: 57: break;
  3064  004800  D006               	goto	l10142
  3065  004802                     l10136:
  3066                           
  3067                           ;main.c: 59: Test();
  3068  004802  EC63  F021         	call	_Test	;wreg free
  3069                           
  3070                           ;main.c: 60: break;
  3071  004806  D003               	goto	l10142
  3072  004808                     l10138:
  3073                           
  3074                           ;main.c: 62: stopSignals();
  3075  004808  EC96  F02D         	call	_stopSignals	;wreg free
  3076  00480C                     l508:
  3077  00480C  D7FF               	goto	l508
  3078  00480E                     l10142:
  3079  00480E  0100               	movlb	0	; () banked
  3080  004810  51FC               	movf	_machine_state& (0+255),w,b
  3081                           
  3082                           ; Switch size 1, requested type "space"
  3083                           ; Number of cases is 5, Range of values is 0 to 4
  3084                           ; switch strategies available:
  3085                           ; Name         Instructions Cycles
  3086                           ; simple_byte           16     9 (average)
  3087                           ;	Chosen strategy is simple_byte
  3088  004812  0A00               	xorlw	0	; case 0
  3089  004814  B4D8               	btfsc	status,2,c
  3090  004816  D7E3               	goto	l10124
  3091  004818  0A01               	xorlw	1	; case 1
  3092  00481A  B4D8               	btfsc	status,2,c
  3093  00481C  D7E3               	goto	l10126
  3094  00481E  0A03               	xorlw	3	; case 2
  3095  004820  B4D8               	btfsc	status,2,c
  3096  004822  D7E3               	goto	l10128
  3097  004824  0A01               	xorlw	1	; case 3
  3098  004826  B4D8               	btfsc	status,2,c
  3099  004828  D7EC               	goto	l10136
  3100  00482A  0A07               	xorlw	7	; case 4
  3101  00482C  B4D8               	btfsc	status,2,c
  3102  00482E  D7EC               	goto	l10138
  3103                           
  3104                           ; BSR set to: 0
  3105                           
  3106                           ; BSR set to: 0
  3107  004830  D7EE               	goto	l10142
  3108  004832                     __end_of_main:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postdec1	equ	0xFE5
  3117                           fsr1l	equ	0xFE1
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _sort *****************
  3121 ;; Defined at:
  3122 ;;		line 67 in file "sort.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:   12
  3143 ;; This function calls:
  3144 ;;		_Distribution
  3145 ;;		_ID
  3146 ;;		_Loading
  3147 ;; This function is called by:
  3148 ;;		_main
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text1
  3153  005ACA                     __ptext1:
  3154                           	opt stack 0
  3155  005ACA                     _sort:
  3156                           	opt stack 18
  3157                           
  3158                           ;sort.c: 68: if(machine_state == Sorting_state){
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;incstack = 0
  3162  005ACA  0100               	movlb	0	; () banked
  3163  005ACC  05FC               	decf	_machine_state& (0+255),w,b
  3164  005ACE  B4D8               	btfsc	status,2,c
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;sort.c: 69: Loading();
  3168  005AD0  ECC9  F008         	call	_Loading	;wreg free
  3169                           
  3170                           ;sort.c: 70: }
  3171                           ;sort.c: 71: if(machine_state == Sorting_state){
  3172  005AD4  0100               	movlb	0	; () banked
  3173  005AD6  05FC               	decf	_machine_state& (0+255),w,b
  3174  005AD8  B4D8               	btfsc	status,2,c
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 72: ID();
  3178  005ADA  ECC2  F00B         	call	_ID	;wreg free
  3179                           
  3180                           ;sort.c: 73: }
  3181                           ;sort.c: 74: if(machine_state == Sorting_state){
  3182  005ADE  0100               	movlb	0	; () banked
  3183  005AE0  05FC               	decf	_machine_state& (0+255),w,b
  3184  005AE2  A4D8               	btfss	status,2,c
  3185  005AE4  0012               	return	
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;sort.c: 75: Distribution();
  3189  005AE6  ECD9  F022         	call	_Distribution	;wreg free
  3190  005AEA  0012               	return	
  3191  005AEC                     __end_of_sort:
  3192                           	opt stack 0
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           postdec1	equ	0xFE5
  3200                           fsr1l	equ	0xFE1
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function _Loading *****************
  3204 ;; Defined at:
  3205 ;;		line 79 in file "sort.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  i               2   62[BANK0 ] int 
  3210 ;;  i               2   60[BANK0 ] int 
  3211 ;;  i               2   58[BANK0 ] int 
  3212 ;;  i               2   56[BANK0 ] int 
  3213 ;;  i               2   54[BANK0 ] int 
  3214 ;;  j               2   66[BANK0 ] int 
  3215 ;;  i               2   64[BANK0 ] int 
  3216 ;;  addr            2   51[BANK0 ] unsigned short 
  3217 ;;  byte1           1   53[BANK0 ] unsigned char 
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:       19 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:   11
  3234 ;; This function calls:
  3235 ;;		_EEPROM_read
  3236 ;;		_EEPROM_write
  3237 ;;		_delay_ms
  3238 ;;		_getIR
  3239 ;;		_getMAG
  3240 ;;		_initGlobalVars
  3241 ;;		_initServos
  3242 ;;		_initSortTimer
  3243 ;;		_lcdInst
  3244 ;;		_readIR
  3245 ;; This function is called by:
  3246 ;;		_sort
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text2
  3251  001192                     __ptext2:
  3252                           	opt stack 0
  3253  001192                     _Loading:
  3254                           	opt stack 18
  3255                           
  3256                           ;sort.c: 80: if(first){
  3257                           
  3258                           ;incstack = 0
  3259  001192  0101               	movlb	1	; () banked
  3260  001194  513F               	movf	_first& (0+255),w,b
  3261  001196  0101               	movlb	1	; () banked
  3262  001198  1140               	iorwf	(_first+1)& (0+255),w,b
  3263  00119A  B4D8               	btfsc	status,2,c
  3264  00119C  D066               	goto	l7828
  3265                           
  3266                           ; BSR set to: 1
  3267                           ;sort.c: 81: initGlobalVars();
  3268  00119E  EC7D  F024         	call	_initGlobalVars	;wreg free
  3269                           
  3270                           ;sort.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3271  0011A2  0E01               	movlw	1
  3272  0011A4  ECEF  F02D         	call	_lcdInst
  3273  0011A8  0E68               	movlw	104
  3274  0011AA  0100               	movlb	0	; () banked
  3275  0011AC  6FB1               	movwf	??_Loading& (0+255),b
  3276  0011AE  0EE4               	movlw	228
  3277  0011B0                     u9717:
  3278  0011B0  2EE8               	decfsz	wreg,f,c
  3279  0011B2  D7FE               	bra	u9717
  3280  0011B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3281  0011B6  D7FC               	bra	u9717
  3282  0011B8  F000               	nop	
  3283                           
  3284                           ;sort.c: 83: initSortTimer();
  3285  0011BA  EC99  F025         	call	_initSortTimer	;wreg free
  3286                           
  3287                           ;sort.c: 84: LATCbits.LATC5 = 1;
  3288  0011BE  8A8B               	bsf	3979,5,c	;volatile
  3289                           
  3290                           ;sort.c: 89: sel = EEPROM_read(0);
  3291  0011C0  0E00               	movlw	0
  3292  0011C2  0100               	movlb	0	; () banked
  3293  0011C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3294  0011C6  0E00               	movlw	0
  3295  0011C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  3296  0011CA  ECB2  F02D         	call	_EEPROM_read	;wreg free
  3297  0011CE  0100               	movlb	0	; () banked
  3298  0011D0  6FFD               	movwf	_sel& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;sort.c: 90: unsigned short addr = 1 + 11 * sel;
  3302  0011D2  0100               	movlb	0	; () banked
  3303  0011D4  51FD               	movf	_sel& (0+255),w,b
  3304  0011D6  0D0B               	mullw	11
  3305  0011D8  0E01               	movlw	1
  3306  0011DA  24F3               	addwf	prodl,w,c
  3307  0011DC  0100               	movlb	0	; () banked
  3308  0011DE  6FB3               	movwf	Loading@addr& (0+255),b
  3309  0011E0  0E00               	movlw	0
  3310  0011E2  20F4               	addwfc	prodh,w,c
  3311  0011E4  0100               	movlb	0	; () banked
  3312  0011E6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;sort.c: 91: unsigned char byte1 = 0b01111111;
  3316  0011E8  0E7F               	movlw	127
  3317  0011EA  0100               	movlb	0	; () banked
  3318  0011EC  6FB5               	movwf	Loading@byte1& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;sort.c: 92: EEPROM_write(addr, byte1);
  3322  0011EE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3323  0011F2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3324  0011F6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3325  0011FA  EC65  F022         	call	_EEPROM_write	;wreg free
  3326                           
  3327                           ;sort.c: 95: LATBbits.LATB2 = 0;
  3328  0011FE  948A               	bcf	3978,2,c	;volatile
  3329                           
  3330                           ;sort.c: 97: for(int i=0; i<46; i++){
  3331  001200  0E00               	movlw	0
  3332  001202  0100               	movlb	0	; () banked
  3333  001204  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3334  001206  0E00               	movlw	0
  3335  001208  6FC0               	movwf	Loading@i& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338  00120A  0100               	movlb	0	; () banked
  3339  00120C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3340  00120E  D008               	goto	l7818
  3341  001210  0100               	movlb	0	; () banked
  3342  001212  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3343  001214  E126               	bnz	l787
  3344  001216  0E2E               	movlw	46
  3345  001218  0100               	movlb	0	; () banked
  3346  00121A  5DC0               	subwf	Loading@i& (0+255),w,b
  3347  00121C  B0D8               	btfsc	status,0,c
  3348  00121E  D021               	goto	l787
  3349  001220                     l7818:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;sort.c: 98: LATBbits.LATB2 = !LATBbits.LATB2;
  3353  001220  B48A               	btfsc	3978,2,c	;volatile
  3354  001222  D004               	goto	u6370
  3355  001224  0100               	movlb	0	; () banked
  3356  001226  6BB1               	clrf	??_Loading& (0+255),b
  3357  001228  2BB1               	incf	??_Loading& (0+255),f,b
  3358  00122A  D002               	goto	u6388
  3359  00122C                     u6370:
  3360  00122C  0100               	movlb	0	; () banked
  3361  00122E  6BB1               	clrf	??_Loading& (0+255),b
  3362  001230                     u6388:
  3363  001230  0100               	movlb	0	; () banked
  3364  001232  47B1               	rlncf	??_Loading& (0+255),f,b
  3365  001234  47B1               	rlncf	??_Loading& (0+255),f,b
  3366  001236  508A               	movf	3978,w,c	;volatile
  3367  001238  0100               	movlb	0	; () banked
  3368  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3369  00123C  0BFB               	andlw	-5
  3370  00123E  19B1               	xorwf	??_Loading& (0+255),w,b
  3371  001240  6E8A               	movwf	3978,c	;volatile
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;sort.c: 99: delay_ms(45-i);
  3375  001242  0100               	movlb	0	; () banked
  3376  001244  51C0               	movf	Loading@i& (0+255),w,b
  3377  001246  0800               	sublw	0
  3378  001248  0F2D               	addlw	45
  3379  00124A  EC05  F02D         	call	_delay_ms
  3380  00124E  0100               	movlb	0	; () banked
  3381  001250  4BC0               	infsnz	Loading@i& (0+255),f,b
  3382  001252  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3383                           
  3384                           ; BSR set to: 0
  3385  001254  0100               	movlb	0	; () banked
  3386  001256  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3387  001258  D7E3               	goto	l7818
  3388  00125A  0100               	movlb	0	; () banked
  3389  00125C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3390  00125E  E101               	bnz	u6390
  3391  001260  D7DA               	goto	L1
  3392  001262                     u6390:
  3393  001262                     l787:
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;sort.c: 100: }
  3397                           ;sort.c: 101: LATBbits.LATB2 = 1;
  3398  001262  848A               	bsf	3978,2,c	;volatile
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;sort.c: 104: initServos();
  3402  001264  EC4D  F027         	call	_initServos	;wreg free
  3403                           
  3404                           ;sort.c: 105: }
  3405  001268  0012               	return	
  3406  00126A                     l7828:
  3407                           
  3408                           ;sort.c: 106: else{
  3409                           ;sort.c: 109: if(!f_loadingNewCan){
  3410  00126A  0100               	movlb	0	; () banked
  3411  00126C  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3412  00126E  0100               	movlb	0	; () banked
  3413  001270  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3414  001272  A4D8               	btfss	status,2,c
  3415  001274  D018               	goto	l7844
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;sort.c: 111: getIR();
  3419  001276  ECC5  F027         	call	_getIR	;wreg free
  3420                           
  3421                           ;sort.c: 113: if(!f_loadingNewCan){
  3422  00127A  0100               	movlb	0	; () banked
  3423  00127C  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3424  00127E  0100               	movlb	0	; () banked
  3425  001280  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3426  001282  B4D8               	btfsc	status,2,c
  3427  001284  0012               	return	
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;sort.c: 117: else{
  3431                           ;sort.c: 118: count_total++;
  3432                           
  3433                           ; BSR set to: 0
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;sort.c: 115: }
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;sort.c: 114: return;
  3440  001286  0100               	movlb	0	; () banked
  3441  001288  4BFE               	infsnz	_count_total& (0+255),f,b
  3442  00128A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;sort.c: 119: if(count_total == 12){
  3446  00128C  0E0C               	movlw	12
  3447  00128E  0100               	movlb	0	; () banked
  3448  001290  19FE               	xorwf	_count_total& (0+255),w,b
  3449  001292  0100               	movlb	0	; () banked
  3450  001294  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3451  001296  A4D8               	btfss	status,2,c
  3452  001298  0012               	return	
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;sort.c: 120: f_lastCan = 1;
  3456  00129A  0E00               	movlw	0
  3457  00129C  0100               	movlb	0	; () banked
  3458  00129E  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3459  0012A0  0E01               	movlw	1
  3460  0012A2  6FEC               	movwf	_f_lastCan& (0+255),b
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;sort.c: 121: }
  3464                           ;sort.c: 122: }
  3465                           ;sort.c: 123: }
  3466                           
  3467                           ; BSR set to: 0
  3468  0012A4  0012               	return	
  3469  0012A6                     l7844:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;sort.c: 126: else if(f_ID_receive){
  3473  0012A6  0101               	movlb	1	; () banked
  3474  0012A8  5135               	movf	_f_ID_receive& (0+255),w,b
  3475  0012AA  0101               	movlb	1	; () banked
  3476  0012AC  1136               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3477  0012AE  B4D8               	btfsc	status,2,c
  3478  0012B0  0012               	return	
  3479                           
  3480                           ; BSR set to: 1
  3481                           ;sort.c: 127: f_most_recent_sort_time = 1;
  3482  0012B2  0E00               	movlw	0
  3483  0012B4  0101               	movlb	1	; () banked
  3484  0012B6  6F3E               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3485  0012B8  0E01               	movlw	1
  3486  0012BA  6F3D               	movwf	_f_most_recent_sort_time& (0+255),b
  3487                           
  3488                           ;sort.c: 128: f_loadingNewCan = 0;
  3489  0012BC  0E00               	movlw	0
  3490  0012BE  0100               	movlb	0	; () banked
  3491  0012C0  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3492  0012C2  0E00               	movlw	0
  3493  0012C4  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 129: _delay((unsigned long)((400)*(32000000/4000.0)));
  3497  0012C6  0E11               	movlw	17
  3498  0012C8  0100               	movlb	0	; () banked
  3499  0012CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3500  0012CC  0E3C               	movlw	60
  3501  0012CE  0100               	movlb	0	; () banked
  3502  0012D0  6FB1               	movwf	??_Loading& (0+255),b
  3503  0012D2  0ECB               	movlw	203
  3504  0012D4                     u9727:
  3505  0012D4  2EE8               	decfsz	wreg,f,c
  3506  0012D6  D7FE               	bra	u9727
  3507  0012D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3508  0012DA  D7FC               	bra	u9727
  3509  0012DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3510  0012DE  D7FA               	bra	u9727
  3511                           
  3512                           ;sort.c: 130: LATBbits.LATB2 = 0;
  3513  0012E0  948A               	bcf	3978,2,c	;volatile
  3514                           
  3515                           ;sort.c: 134: f_arm_position = 1;
  3516  0012E2  0E00               	movlw	0
  3517  0012E4  0100               	movlb	0	; () banked
  3518  0012E6  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3519  0012E8  0E01               	movlw	1
  3520  0012EA  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;sort.c: 136: delay_ms(750);
  3524  0012EC  0EEE               	movlw	238
  3525  0012EE  EC05  F02D         	call	_delay_ms
  3526                           
  3527                           ;sort.c: 137: getMAG();
  3528  0012F2  EC74  F02B         	call	_getMAG	;wreg free
  3529                           
  3530                           ;sort.c: 138: sensor_outputs[0] = MAG_signal;
  3531  0012F6  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3532  0012FA  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3533                           
  3534                           ;sort.c: 140: if(sensor_outputs[0]){
  3535  0012FE  0100               	movlb	0	; () banked
  3536  001300  51DA               	movf	_sensor_outputs& (0+255),w,b
  3537  001302  0100               	movlb	0	; () banked
  3538  001304  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3539  001306  B4D8               	btfsc	status,2,c
  3540  001308  D027               	goto	l7874
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;sort.c: 141: for(int i = 0; i<25; i++){
  3544  00130A  0E00               	movlw	0
  3545  00130C  0100               	movlb	0	; () banked
  3546  00130E  6FB7               	movwf	(Loading@i_1119+1)& (0+255),b
  3547  001310  0E00               	movlw	0
  3548  001312  6FB6               	movwf	Loading@i_1119& (0+255),b
  3549  001314                     l7864:
  3550                           
  3551                           ; BSR set to: 0
  3552  001314  0100               	movlb	0	; () banked
  3553  001316  BFB7               	btfsc	(Loading@i_1119+1)& (0+255),7,b
  3554  001318  D008               	goto	l797
  3555  00131A  0100               	movlb	0	; () banked
  3556  00131C  51B7               	movf	(Loading@i_1119+1)& (0+255),w,b
  3557  00131E  E143               	bnz	l7886
  3558  001320  0E19               	movlw	25
  3559  001322  0100               	movlb	0	; () banked
  3560  001324  5DB6               	subwf	Loading@i_1119& (0+255),w,b
  3561  001326  B0D8               	btfsc	status,0,c
  3562  001328  D03E               	goto	l7886
  3563  00132A                     l797:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3567  00132A  8889               	bsf	3977,4,c	;volatile
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;sort.c: 143: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3571  00132C  0E4E               	movlw	78
  3572  00132E  0100               	movlb	0	; () banked
  3573  001330  6FB1               	movwf	??_Loading& (0+255),b
  3574  001332  0EEB               	movlw	235
  3575  001334                     u9737:
  3576  001334  2EE8               	decfsz	wreg,f,c
  3577  001336  D7FE               	bra	u9737
  3578  001338  2FB1               	decfsz	??_Loading& (0+255),f,b
  3579  00133A  D7FC               	bra	u9737
  3580                           
  3581                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3582  00133C  9889               	bcf	3977,4,c	;volatile
  3583                           
  3584                           ;sort.c: 145: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3585  00133E  0E1A               	movlw	26
  3586  001340  0100               	movlb	0	; () banked
  3587  001342  6FB1               	movwf	??_Loading& (0+255),b
  3588  001344  0EF8               	movlw	248
  3589  001346                     u9747:
  3590  001346  2EE8               	decfsz	wreg,f,c
  3591  001348  D7FE               	bra	u9747
  3592  00134A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3593  00134C  D7FC               	bra	u9747
  3594  00134E  F000               	nop	
  3595  001350  0100               	movlb	0	; () banked
  3596  001352  4BB6               	infsnz	Loading@i_1119& (0+255),f,b
  3597  001354  2BB7               	incf	(Loading@i_1119+1)& (0+255),f,b
  3598  001356  D7DE               	goto	l7864
  3599  001358                     l7874:
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;sort.c: 148: else{
  3603                           ;sort.c: 149: for(int i = 0; i<25; i++){
  3604  001358  0E00               	movlw	0
  3605  00135A  0100               	movlb	0	; () banked
  3606  00135C  6FB9               	movwf	(Loading@i_1128+1)& (0+255),b
  3607  00135E  0E00               	movlw	0
  3608  001360  6FB8               	movwf	Loading@i_1128& (0+255),b
  3609  001362                     l7876:
  3610                           
  3611                           ; BSR set to: 0
  3612  001362  0100               	movlb	0	; () banked
  3613  001364  BFB9               	btfsc	(Loading@i_1128+1)& (0+255),7,b
  3614  001366  D008               	goto	l800
  3615  001368  0100               	movlb	0	; () banked
  3616  00136A  51B9               	movf	(Loading@i_1128+1)& (0+255),w,b
  3617  00136C  E11C               	bnz	l7886
  3618  00136E  0E19               	movlw	25
  3619  001370  0100               	movlb	0	; () banked
  3620  001372  5DB8               	subwf	Loading@i_1128& (0+255),w,b
  3621  001374  B0D8               	btfsc	status,0,c
  3622  001376  D017               	goto	l7886
  3623  001378                     l800:
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;sort.c: 150: LATAbits.LATA4 = 1;
  3627  001378  8889               	bsf	3977,4,c	;volatile
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;sort.c: 151: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3631  00137A  0E3D               	movlw	61
  3632  00137C  0100               	movlb	0	; () banked
  3633  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3634  001380  0E41               	movlw	65
  3635  001382                     u9757:
  3636  001382  2EE8               	decfsz	wreg,f,c
  3637  001384  D7FE               	bra	u9757
  3638  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3639  001388  D7FC               	bra	u9757
  3640                           
  3641                           ;sort.c: 152: LATAbits.LATA4 = 0;
  3642  00138A  9889               	bcf	3977,4,c	;volatile
  3643                           
  3644                           ;sort.c: 153: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3645  00138C  0E2C               	movlw	44
  3646  00138E  0100               	movlb	0	; () banked
  3647  001390  6FB1               	movwf	??_Loading& (0+255),b
  3648  001392  0EA1               	movlw	161
  3649  001394                     u9767:
  3650  001394  2EE8               	decfsz	wreg,f,c
  3651  001396  D7FE               	bra	u9767
  3652  001398  2FB1               	decfsz	??_Loading& (0+255),f,b
  3653  00139A  D7FC               	bra	u9767
  3654  00139C  D000               	nop2	
  3655  00139E  0100               	movlb	0	; () banked
  3656  0013A0  4BB8               	infsnz	Loading@i_1128& (0+255),f,b
  3657  0013A2  2BB9               	incf	(Loading@i_1128+1)& (0+255),f,b
  3658  0013A4  D7DE               	goto	l7876
  3659  0013A6                     l7886:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 154: }
  3663                           ;sort.c: 155: }
  3664                           ;sort.c: 157: _delay((unsigned long)((350)*(32000000/4000.0)));
  3665  0013A6  0E0F               	movlw	15
  3666  0013A8  0100               	movlb	0	; () banked
  3667  0013AA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3668  0013AC  0E35               	movlw	53
  3669  0013AE  0100               	movlb	0	; () banked
  3670  0013B0  6FB1               	movwf	??_Loading& (0+255),b
  3671  0013B2  0E51               	movlw	81
  3672  0013B4                     u9777:
  3673  0013B4  2EE8               	decfsz	wreg,f,c
  3674  0013B6  D7FE               	bra	u9777
  3675  0013B8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3676  0013BA  D7FC               	bra	u9777
  3677  0013BC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3678  0013BE  D7FA               	bra	u9777
  3679                           
  3680                           ;sort.c: 159: readIR();
  3681  0013C0  EC11  F02A         	call	_readIR	;wreg free
  3682                           
  3683                           ;sort.c: 160: if(IR_signal==1){
  3684  0013C4  0100               	movlb	0	; () banked
  3685  0013C6  05E0               	decf	_IR_signal& (0+255),w,b
  3686  0013C8  0100               	movlb	0	; () banked
  3687  0013CA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3688  0013CC  A4D8               	btfss	status,2,c
  3689  0013CE  D1D4               	goto	l8014
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;sort.c: 161: _delay((unsigned long)((30)*(32000000/4000.0)));
  3693  0013D0  0E02               	movlw	2
  3694  0013D2  0100               	movlb	0	; () banked
  3695  0013D4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3696  0013D6  0E38               	movlw	56
  3697  0013D8  0100               	movlb	0	; () banked
  3698  0013DA  6FB1               	movwf	??_Loading& (0+255),b
  3699  0013DC  0EAD               	movlw	173
  3700  0013DE                     u9787:
  3701  0013DE  2EE8               	decfsz	wreg,f,c
  3702  0013E0  D7FE               	bra	u9787
  3703  0013E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3704  0013E4  D7FC               	bra	u9787
  3705  0013E6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3706  0013E8  D7FA               	bra	u9787
  3707                           
  3708                           ;sort.c: 162: readIR();
  3709  0013EA  EC11  F02A         	call	_readIR	;wreg free
  3710                           
  3711                           ;sort.c: 163: if(IR_signal==1){
  3712  0013EE  0100               	movlb	0	; () banked
  3713  0013F0  05E0               	decf	_IR_signal& (0+255),w,b
  3714  0013F2  0100               	movlb	0	; () banked
  3715  0013F4  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3716  0013F6  A4D8               	btfss	status,2,c
  3717  0013F8  D054               	goto	l7924
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;sort.c: 164: if(sensor_outputs[0]){
  3721  0013FA  0100               	movlb	0	; () banked
  3722  0013FC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3723  0013FE  0100               	movlb	0	; () banked
  3724  001400  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3725  001402  B4D8               	btfsc	status,2,c
  3726  001404  D027               	goto	l7912
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;sort.c: 165: for(int i = 0; i<25; i++){
  3730  001406  0E00               	movlw	0
  3731  001408  0100               	movlb	0	; () banked
  3732  00140A  6FBB               	movwf	(Loading@i_1130+1)& (0+255),b
  3733  00140C  0E00               	movlw	0
  3734  00140E  6FBA               	movwf	Loading@i_1130& (0+255),b
  3735  001410                     l7902:
  3736                           
  3737                           ; BSR set to: 0
  3738  001410  0100               	movlb	0	; () banked
  3739  001412  BFBB               	btfsc	(Loading@i_1130+1)& (0+255),7,b
  3740  001414  D008               	goto	l805
  3741  001416  0100               	movlb	0	; () banked
  3742  001418  51BB               	movf	(Loading@i_1130+1)& (0+255),w,b
  3743  00141A  E143               	bnz	l7924
  3744  00141C  0E19               	movlw	25
  3745  00141E  0100               	movlb	0	; () banked
  3746  001420  5DBA               	subwf	Loading@i_1130& (0+255),w,b
  3747  001422  B0D8               	btfsc	status,0,c
  3748  001424  D03E               	goto	l7924
  3749  001426                     l805:
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3753  001426  8889               	bsf	3977,4,c	;volatile
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;sort.c: 167: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3757  001428  0E4E               	movlw	78
  3758  00142A  0100               	movlb	0	; () banked
  3759  00142C  6FB1               	movwf	??_Loading& (0+255),b
  3760  00142E  0EEB               	movlw	235
  3761  001430                     u9797:
  3762  001430  2EE8               	decfsz	wreg,f,c
  3763  001432  D7FE               	bra	u9797
  3764  001434  2FB1               	decfsz	??_Loading& (0+255),f,b
  3765  001436  D7FC               	bra	u9797
  3766                           
  3767                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3768  001438  9889               	bcf	3977,4,c	;volatile
  3769                           
  3770                           ;sort.c: 169: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3771  00143A  0E1A               	movlw	26
  3772  00143C  0100               	movlb	0	; () banked
  3773  00143E  6FB1               	movwf	??_Loading& (0+255),b
  3774  001440  0EF8               	movlw	248
  3775  001442                     u9807:
  3776  001442  2EE8               	decfsz	wreg,f,c
  3777  001444  D7FE               	bra	u9807
  3778  001446  2FB1               	decfsz	??_Loading& (0+255),f,b
  3779  001448  D7FC               	bra	u9807
  3780  00144A  F000               	nop	
  3781  00144C  0100               	movlb	0	; () banked
  3782  00144E  4BBA               	infsnz	Loading@i_1130& (0+255),f,b
  3783  001450  2BBB               	incf	(Loading@i_1130+1)& (0+255),f,b
  3784  001452  D7DE               	goto	l7902
  3785  001454                     l7912:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;sort.c: 172: else{
  3789                           ;sort.c: 173: for(int i = 0; i<25; i++){
  3790  001454  0E00               	movlw	0
  3791  001456  0100               	movlb	0	; () banked
  3792  001458  6FBD               	movwf	(Loading@i_1131+1)& (0+255),b
  3793  00145A  0E00               	movlw	0
  3794  00145C  6FBC               	movwf	Loading@i_1131& (0+255),b
  3795  00145E                     l7914:
  3796                           
  3797                           ; BSR set to: 0
  3798  00145E  0100               	movlb	0	; () banked
  3799  001460  BFBD               	btfsc	(Loading@i_1131+1)& (0+255),7,b
  3800  001462  D008               	goto	l808
  3801  001464  0100               	movlb	0	; () banked
  3802  001466  51BD               	movf	(Loading@i_1131+1)& (0+255),w,b
  3803  001468  E11C               	bnz	l7924
  3804  00146A  0E19               	movlw	25
  3805  00146C  0100               	movlb	0	; () banked
  3806  00146E  5DBC               	subwf	Loading@i_1131& (0+255),w,b
  3807  001470  B0D8               	btfsc	status,0,c
  3808  001472  D017               	goto	l7924
  3809  001474                     l808:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;sort.c: 174: LATAbits.LATA4 = 1;
  3813  001474  8889               	bsf	3977,4,c	;volatile
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;sort.c: 175: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3817  001476  0E3D               	movlw	61
  3818  001478  0100               	movlb	0	; () banked
  3819  00147A  6FB1               	movwf	??_Loading& (0+255),b
  3820  00147C  0E41               	movlw	65
  3821  00147E                     u9817:
  3822  00147E  2EE8               	decfsz	wreg,f,c
  3823  001480  D7FE               	bra	u9817
  3824  001482  2FB1               	decfsz	??_Loading& (0+255),f,b
  3825  001484  D7FC               	bra	u9817
  3826                           
  3827                           ;sort.c: 176: LATAbits.LATA4 = 0;
  3828  001486  9889               	bcf	3977,4,c	;volatile
  3829                           
  3830                           ;sort.c: 177: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3831  001488  0E2C               	movlw	44
  3832  00148A  0100               	movlb	0	; () banked
  3833  00148C  6FB1               	movwf	??_Loading& (0+255),b
  3834  00148E  0EA1               	movlw	161
  3835  001490                     u9827:
  3836  001490  2EE8               	decfsz	wreg,f,c
  3837  001492  D7FE               	bra	u9827
  3838  001494  2FB1               	decfsz	??_Loading& (0+255),f,b
  3839  001496  D7FC               	bra	u9827
  3840  001498  D000               	nop2	
  3841  00149A  0100               	movlb	0	; () banked
  3842  00149C  4BBC               	infsnz	Loading@i_1131& (0+255),f,b
  3843  00149E  2BBD               	incf	(Loading@i_1131+1)& (0+255),f,b
  3844  0014A0  D7DE               	goto	l7914
  3845  0014A2                     l7924:
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;sort.c: 178: }
  3849                           ;sort.c: 179: }
  3850                           ;sort.c: 180: }
  3851                           ;sort.c: 182: _delay((unsigned long)((350)*(32000000/4000.0)));
  3852  0014A2  0E0F               	movlw	15
  3853  0014A4  0100               	movlb	0	; () banked
  3854  0014A6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3855  0014A8  0E35               	movlw	53
  3856  0014AA  0100               	movlb	0	; () banked
  3857  0014AC  6FB1               	movwf	??_Loading& (0+255),b
  3858  0014AE  0E51               	movlw	81
  3859  0014B0                     u9837:
  3860  0014B0  2EE8               	decfsz	wreg,f,c
  3861  0014B2  D7FE               	bra	u9837
  3862  0014B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3863  0014B6  D7FC               	bra	u9837
  3864  0014B8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3865  0014BA  D7FA               	bra	u9837
  3866                           
  3867                           ;sort.c: 184: int j = 0;
  3868  0014BC  0E00               	movlw	0
  3869  0014BE  0100               	movlb	0	; () banked
  3870  0014C0  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3871  0014C2  0E00               	movlw	0
  3872  0014C4  6FC2               	movwf	Loading@j& (0+255),b
  3873                           
  3874                           ;sort.c: 185: while(IR_signal == 1){
  3875  0014C6  D151               	goto	l8012
  3876  0014C8                     l7928:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;sort.c: 186: readIR();
  3880  0014C8  EC11  F02A         	call	_readIR	;wreg free
  3881                           
  3882                           ;sort.c: 187: if(j == 3 || j == 4){
  3883  0014CC  0E03               	movlw	3
  3884  0014CE  0100               	movlb	0	; () banked
  3885  0014D0  19C2               	xorwf	Loading@j& (0+255),w,b
  3886  0014D2  0100               	movlb	0	; () banked
  3887  0014D4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3888  0014D6  B4D8               	btfsc	status,2,c
  3889  0014D8  D007               	goto	l7934
  3890                           
  3891                           ; BSR set to: 0
  3892  0014DA  0E04               	movlw	4
  3893  0014DC  0100               	movlb	0	; () banked
  3894  0014DE  19C2               	xorwf	Loading@j& (0+255),w,b
  3895  0014E0  0100               	movlb	0	; () banked
  3896  0014E2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3897  0014E4  A4D8               	btfss	status,2,c
  3898  0014E6  D005               	goto	l7936
  3899  0014E8                     l7934:
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;sort.c: 188: f_arm_position = 0;
  3903  0014E8  0E00               	movlw	0
  3904  0014EA  0100               	movlb	0	; () banked
  3905  0014EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3906  0014EE  0E00               	movlw	0
  3907  0014F0  D022               	goto	L2
  3908  0014F2                     l7936:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 190: else if(j == 5 || j == 6){
  3912  0014F2  0E05               	movlw	5
  3913  0014F4  0100               	movlb	0	; () banked
  3914  0014F6  19C2               	xorwf	Loading@j& (0+255),w,b
  3915  0014F8  0100               	movlb	0	; () banked
  3916  0014FA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3917  0014FC  B4D8               	btfsc	status,2,c
  3918  0014FE  D007               	goto	l818
  3919                           
  3920                           ; BSR set to: 0
  3921  001500  0E06               	movlw	6
  3922  001502  0100               	movlb	0	; () banked
  3923  001504  19C2               	xorwf	Loading@j& (0+255),w,b
  3924  001506  0100               	movlb	0	; () banked
  3925  001508  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3926  00150A  A4D8               	btfss	status,2,c
  3927  00150C  D002               	goto	l7940
  3928  00150E                     l818:
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;sort.c: 191: LATBbits.LATB2 = 1;
  3932  00150E  848A               	bsf	3978,2,c	;volatile
  3933                           
  3934                           ;sort.c: 192: }
  3935  001510  D034               	goto	l815
  3936  001512                     l7940:
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;sort.c: 193: else if(j == 7 || j == 8){
  3940  001512  0E07               	movlw	7
  3941  001514  0100               	movlb	0	; () banked
  3942  001516  19C2               	xorwf	Loading@j& (0+255),w,b
  3943  001518  0100               	movlb	0	; () banked
  3944  00151A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3945  00151C  B4D8               	btfsc	status,2,c
  3946  00151E  D007               	goto	l7944
  3947                           
  3948                           ; BSR set to: 0
  3949  001520  0E08               	movlw	8
  3950  001522  0100               	movlb	0	; () banked
  3951  001524  19C2               	xorwf	Loading@j& (0+255),w,b
  3952  001526  0100               	movlb	0	; () banked
  3953  001528  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3954  00152A  A4D8               	btfss	status,2,c
  3955  00152C  D006               	goto	l820
  3956  00152E                     l7944:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 194: f_arm_position = 1;
  3960  00152E  0E00               	movlw	0
  3961  001530  0100               	movlb	0	; () banked
  3962  001532  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3963  001534  0E01               	movlw	1
  3964  001536                     L2:
  3965  001536  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3966                           
  3967                           ;sort.c: 195: }
  3968  001538  D020               	goto	l815
  3969  00153A                     l820:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;sort.c: 196: else if(j % 2 == 0){
  3973  00153A  0100               	movlb	0	; () banked
  3974  00153C  B1C2               	btfsc	Loading@j& (0+255),0,b
  3975  00153E  D01D               	goto	l815
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;sort.c: 197: LATBbits.LATB2 = !LATBbits.LATB2;
  3979  001540  B48A               	btfsc	3978,2,c	;volatile
  3980  001542  D004               	goto	u6630
  3981  001544  0100               	movlb	0	; () banked
  3982  001546  6BB1               	clrf	??_Loading& (0+255),b
  3983  001548  2BB1               	incf	??_Loading& (0+255),f,b
  3984  00154A  D002               	goto	u6648
  3985  00154C                     u6630:
  3986  00154C  0100               	movlb	0	; () banked
  3987  00154E  6BB1               	clrf	??_Loading& (0+255),b
  3988  001550                     u6648:
  3989  001550  0100               	movlb	0	; () banked
  3990  001552  47B1               	rlncf	??_Loading& (0+255),f,b
  3991  001554  47B1               	rlncf	??_Loading& (0+255),f,b
  3992  001556  508A               	movf	3978,w,c	;volatile
  3993  001558  0100               	movlb	0	; () banked
  3994  00155A  19B1               	xorwf	??_Loading& (0+255),w,b
  3995  00155C  0BFB               	andlw	-5
  3996  00155E  19B1               	xorwf	??_Loading& (0+255),w,b
  3997  001560  6E8A               	movwf	3978,c	;volatile
  3998                           
  3999                           ;sort.c: 198: f_arm_position = !f_arm_position;
  4000  001562  0100               	movlb	0	; () banked
  4001  001564  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  4002  001566  0100               	movlb	0	; () banked
  4003  001568  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4004  00156A  A4D8               	btfss	status,2,c
  4005  00156C  D002               	goto	u6650
  4006  00156E  0E01               	movlw	1
  4007  001570  D001               	goto	u6660
  4008  001572                     u6650:
  4009  001572  0E00               	movlw	0
  4010  001574                     u6660:
  4011  001574  0100               	movlb	0	; () banked
  4012  001576  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4013  001578  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4014  00157A                     l815:
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;sort.c: 199: }
  4018                           ;sort.c: 202: if(IR_signal==1){
  4019  00157A  0100               	movlb	0	; () banked
  4020  00157C  05E0               	decf	_IR_signal& (0+255),w,b
  4021  00157E  0100               	movlb	0	; () banked
  4022  001580  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4023  001582  A4D8               	btfss	status,2,c
  4024  001584  D0D6               	goto	l8000
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;sort.c: 203: _delay((unsigned long)((350)*(32000000/4000.0)));
  4028  001586  0E0F               	movlw	15
  4029  001588  0100               	movlb	0	; () banked
  4030  00158A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4031  00158C  0E35               	movlw	53
  4032  00158E  0100               	movlb	0	; () banked
  4033  001590  6FB1               	movwf	??_Loading& (0+255),b
  4034  001592  0E51               	movlw	81
  4035  001594                     u9847:
  4036  001594  2EE8               	decfsz	wreg,f,c
  4037  001596  D7FE               	bra	u9847
  4038  001598  2FB1               	decfsz	??_Loading& (0+255),f,b
  4039  00159A  D7FC               	bra	u9847
  4040  00159C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4041  00159E  D7FA               	bra	u9847
  4042                           
  4043                           ;sort.c: 204: readIR();
  4044  0015A0  EC11  F02A         	call	_readIR	;wreg free
  4045                           
  4046                           ;sort.c: 205: if(IR_signal==1){
  4047  0015A4  0100               	movlb	0	; () banked
  4048  0015A6  05E0               	decf	_IR_signal& (0+255),w,b
  4049  0015A8  0100               	movlb	0	; () banked
  4050  0015AA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4051  0015AC  A4D8               	btfss	status,2,c
  4052  0015AE  D0BD               	goto	l826
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;sort.c: 206: if(sensor_outputs[0]){
  4056  0015B0  0100               	movlb	0	; () banked
  4057  0015B2  51DA               	movf	_sensor_outputs& (0+255),w,b
  4058  0015B4  0100               	movlb	0	; () banked
  4059  0015B6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4060  0015B8  B4D8               	btfsc	status,2,c
  4061  0015BA  D011               	goto	l7962
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;sort.c: 207: LATAbits.LATA4 = 1;
  4065  0015BC  8889               	bsf	3977,4,c	;volatile
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;sort.c: 208: _delay((unsigned long)((250)*(32000000/4000.0)));
  4069  0015BE  0E0B               	movlw	11
  4070  0015C0  0100               	movlb	0	; () banked
  4071  0015C2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4072  0015C4  0E26               	movlw	38
  4073  0015C6  0100               	movlb	0	; () banked
  4074  0015C8  6FB1               	movwf	??_Loading& (0+255),b
  4075  0015CA  0E5D               	movlw	93
  4076  0015CC                     u9857:
  4077  0015CC  2EE8               	decfsz	wreg,f,c
  4078  0015CE  D7FE               	bra	u9857
  4079  0015D0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4080  0015D2  D7FC               	bra	u9857
  4081  0015D4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4082  0015D6  D7FA               	bra	u9857
  4083  0015D8  D000               	nop2	
  4084                           
  4085                           ;sort.c: 209: LATAbits.LATA4 = 0;
  4086  0015DA  9889               	bcf	3977,4,c	;volatile
  4087                           
  4088                           ;sort.c: 210: }
  4089  0015DC  D0A6               	goto	l826
  4090  0015DE                     l7962:
  4091                           
  4092                           ;sort.c: 211: else{
  4093                           ;sort.c: 212: for(int i = 0; i<25; i++){
  4094  0015DE  0E00               	movlw	0
  4095  0015E0  0100               	movlb	0	; () banked
  4096  0015E2  6FBF               	movwf	(Loading@i_1133+1)& (0+255),b
  4097  0015E4  0E00               	movlw	0
  4098  0015E6  6FBE               	movwf	Loading@i_1133& (0+255),b
  4099                           
  4100                           ; BSR set to: 0
  4101  0015E8  0100               	movlb	0	; () banked
  4102  0015EA  BFBF               	btfsc	(Loading@i_1133+1)& (0+255),7,b
  4103  0015EC  D079               	goto	l7992
  4104  0015EE  0100               	movlb	0	; () banked
  4105  0015F0  51BF               	movf	(Loading@i_1133+1)& (0+255),w,b
  4106  0015F2  E106               	bnz	u6700
  4107  0015F4  0E19               	movlw	25
  4108  0015F6  0100               	movlb	0	; () banked
  4109  0015F8  5DBE               	subwf	Loading@i_1133& (0+255),w,b
  4110  0015FA  B0D8               	btfsc	status,0,c
  4111  0015FC  D096               	goto	l826
  4112  0015FE  D070               	goto	l7992
  4113  001600                     u6700:
  4114                           
  4115                           ; BSR set to: 0
  4116  001600  D094               	goto	l826
  4117  001602                     l832:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4121  001602  8889               	bsf	3977,4,c	;volatile
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;sort.c: 216: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4125  001604  0E4E               	movlw	78
  4126  001606  0100               	movlb	0	; () banked
  4127  001608  6FB1               	movwf	??_Loading& (0+255),b
  4128  00160A  0EEB               	movlw	235
  4129  00160C                     u9867:
  4130  00160C  2EE8               	decfsz	wreg,f,c
  4131  00160E  D7FE               	bra	u9867
  4132  001610  2FB1               	decfsz	??_Loading& (0+255),f,b
  4133  001612  D7FC               	bra	u9867
  4134                           
  4135                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4136  001614  9889               	bcf	3977,4,c	;volatile
  4137                           
  4138                           ;sort.c: 218: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4139  001616  0E1A               	movlw	26
  4140  001618  0100               	movlb	0	; () banked
  4141  00161A  6FB1               	movwf	??_Loading& (0+255),b
  4142  00161C  0EF8               	movlw	248
  4143  00161E                     u9877:
  4144  00161E  2EE8               	decfsz	wreg,f,c
  4145  001620  D7FE               	bra	u9877
  4146  001622  2FB1               	decfsz	??_Loading& (0+255),f,b
  4147  001624  D7FC               	bra	u9877
  4148  001626  D05A               	goto	L6
  4149  001628                     l834:
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;sort.c: 221: LATAbits.LATA4 = 1;
  4153  001628  8889               	bsf	3977,4,c	;volatile
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;sort.c: 222: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4157  00162A  0E54               	movlw	84
  4158  00162C  0100               	movlb	0	; () banked
  4159  00162E  6FB1               	movwf	??_Loading& (0+255),b
  4160  001630  0E1C               	movlw	28
  4161  001632                     u9887:
  4162  001632  2EE8               	decfsz	wreg,f,c
  4163  001634  D7FE               	bra	u9887
  4164  001636  2FB1               	decfsz	??_Loading& (0+255),f,b
  4165  001638  D7FC               	bra	u9887
  4166  00163A  F000               	nop	
  4167                           
  4168                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4169  00163C  9889               	bcf	3977,4,c	;volatile
  4170                           
  4171                           ;sort.c: 224: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4172  00163E  0E15               	movlw	21
  4173  001640  0100               	movlb	0	; () banked
  4174  001642  6FB1               	movwf	??_Loading& (0+255),b
  4175  001644  0EC6               	movlw	198
  4176  001646                     u9897:
  4177  001646  2EE8               	decfsz	wreg,f,c
  4178  001648  D7FE               	bra	u9897
  4179  00164A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4180  00164C  D7FC               	bra	u9897
  4181  00164E  D046               	goto	L6
  4182  001650                     l835:
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4186  001650  8889               	bsf	3977,4,c	;volatile
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;sort.c: 228: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4190  001652  0E59               	movlw	89
  4191  001654  0100               	movlb	0	; () banked
  4192  001656  6FB1               	movwf	??_Loading& (0+255),b
  4193  001658  0E4E               	movlw	78
  4194  00165A                     u9907:
  4195  00165A  2EE8               	decfsz	wreg,f,c
  4196  00165C  D7FE               	bra	u9907
  4197  00165E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4198  001660  D7FC               	bra	u9907
  4199  001662  F000               	nop	
  4200                           
  4201                           ;sort.c: 229: LATAbits.LATA4 = 0;
  4202  001664  9889               	bcf	3977,4,c	;volatile
  4203                           
  4204                           ;sort.c: 230: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4205  001666  0E10               	movlw	16
  4206  001668  0100               	movlb	0	; () banked
  4207  00166A  6FB1               	movwf	??_Loading& (0+255),b
  4208  00166C  0E94               	movlw	148
  4209  00166E                     u9917:
  4210  00166E  2EE8               	decfsz	wreg,f,c
  4211  001670  D7FE               	bra	u9917
  4212  001672  2FB1               	decfsz	??_Loading& (0+255),f,b
  4213  001674  D7FC               	bra	u9917
  4214  001676  D032               	goto	L6
  4215  001678                     l836:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4219  001678  8889               	bsf	3977,4,c	;volatile
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;sort.c: 234: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4223  00167A  0E5E               	movlw	94
  4224  00167C  0100               	movlb	0	; () banked
  4225  00167E  6FB1               	movwf	??_Loading& (0+255),b
  4226  001680  0E80               	movlw	128
  4227  001682                     u9927:
  4228  001682  2EE8               	decfsz	wreg,f,c
  4229  001684  D7FE               	bra	u9927
  4230  001686  2FB1               	decfsz	??_Loading& (0+255),f,b
  4231  001688  D7FC               	bra	u9927
  4232  00168A  F000               	nop	
  4233                           
  4234                           ;sort.c: 235: LATAbits.LATA4 = 0;
  4235  00168C  9889               	bcf	3977,4,c	;volatile
  4236                           
  4237                           ;sort.c: 236: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4238  00168E  0E0B               	movlw	11
  4239  001690  0100               	movlb	0	; () banked
  4240  001692  6FB1               	movwf	??_Loading& (0+255),b
  4241  001694  0E62               	movlw	98
  4242  001696                     u9937:
  4243  001696  2EE8               	decfsz	wreg,f,c
  4244  001698  D7FE               	bra	u9937
  4245  00169A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4246  00169C  D7FC               	bra	u9937
  4247  00169E  D01E               	goto	L6
  4248  0016A0                     l837:
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;sort.c: 239: LATAbits.LATA4 = 1;
  4252  0016A0  8889               	bsf	3977,4,c	;volatile
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;sort.c: 240: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4256  0016A2  0E63               	movlw	99
  4257  0016A4  0100               	movlb	0	; () banked
  4258  0016A6  6FB1               	movwf	??_Loading& (0+255),b
  4259  0016A8  0EB2               	movlw	178
  4260  0016AA                     u9947:
  4261  0016AA  2EE8               	decfsz	wreg,f,c
  4262  0016AC  D7FE               	bra	u9947
  4263  0016AE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4264  0016B0  D7FC               	bra	u9947
  4265  0016B2  F000               	nop	
  4266                           
  4267                           ;sort.c: 241: LATAbits.LATA4 = 0;
  4268  0016B4  9889               	bcf	3977,4,c	;volatile
  4269                           
  4270                           ;sort.c: 242: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4271  0016B6  0E34               	movlw	52
  4272  0016B8  0100               	movlb	0	; () banked
  4273  0016BA  6FB1               	movwf	??_Loading& (0+255),b
  4274  0016BC  0EF1               	movlw	241
  4275  0016BE                     u9957:
  4276  0016BE  2EE8               	decfsz	wreg,f,c
  4277  0016C0  D7FE               	bra	u9957
  4278  0016C2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4279  0016C4  D7FC               	bra	u9957
  4280  0016C6  D000               	nop2	
  4281                           
  4282                           ;sort.c: 243: break;
  4283  0016C8  D026               	goto	l7994
  4284  0016CA                     l838:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 245: LATAbits.LATA4 = 1;
  4288  0016CA  8889               	bsf	3977,4,c	;volatile
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000.0)));
  4292  0016CC  0E68               	movlw	104
  4293  0016CE  0100               	movlb	0	; () banked
  4294  0016D0  6FB1               	movwf	??_Loading& (0+255),b
  4295  0016D2  0EE4               	movlw	228
  4296  0016D4                     u9967:
  4297  0016D4  2EE8               	decfsz	wreg,f,c
  4298  0016D6  D7FE               	bra	u9967
  4299  0016D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  4300  0016DA  D7FC               	bra	u9967
  4301  0016DC                     L6:
  4302  0016DC  F000               	nop	
  4303                           
  4304                           ;sort.c: 248: }
  4305                           
  4306                           ;sort.c: 247: break;
  4307  0016DE  D01B               	goto	l7994
  4308  0016E0                     l7992:
  4309  0016E0  C0C2  F0B1         	movff	Loading@j,??_Loading
  4310  0016E4  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4311                           
  4312                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4313                           ; Switch size 1, requested type "space"
  4314                           ; Number of cases is 1, Range of values is 0 to 0
  4315                           ; switch strategies available:
  4316                           ; Name         Instructions Cycles
  4317                           ; simple_byte            4     3 (average)
  4318                           ;	Chosen strategy is simple_byte
  4319  0016E8  0100               	movlb	0	; () banked
  4320  0016EA  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4321  0016EC  0A00               	xorlw	0	; case 0
  4322  0016EE  A4D8               	btfss	status,2,c
  4323  0016F0  D7EC               	goto	l838
  4324                           
  4325                           ; BSR set to: 0
  4326                           ; Switch size 1, requested type "space"
  4327                           ; Number of cases is 5, Range of values is 0 to 4
  4328                           ; switch strategies available:
  4329                           ; Name         Instructions Cycles
  4330                           ; simple_byte           16     9 (average)
  4331                           ;	Chosen strategy is simple_byte
  4332  0016F2  0100               	movlb	0	; () banked
  4333  0016F4  51B1               	movf	??_Loading& (0+255),w,b
  4334  0016F6  0A00               	xorlw	0	; case 0
  4335  0016F8  B4D8               	btfsc	status,2,c
  4336  0016FA  D783               	goto	l832
  4337  0016FC  0A01               	xorlw	1	; case 1
  4338  0016FE  B4D8               	btfsc	status,2,c
  4339  001700  D793               	goto	l834
  4340  001702  0A03               	xorlw	3	; case 2
  4341  001704  B4D8               	btfsc	status,2,c
  4342  001706  D7A4               	goto	l835
  4343  001708  0A01               	xorlw	1	; case 3
  4344  00170A  B4D8               	btfsc	status,2,c
  4345  00170C  D7B5               	goto	l836
  4346  00170E  0A07               	xorlw	7	; case 4
  4347  001710  B4D8               	btfsc	status,2,c
  4348  001712  D7C6               	goto	l837
  4349  001714  D7DA               	goto	l838
  4350  001716                     l7994:
  4351  001716  0100               	movlb	0	; () banked
  4352  001718  4BBE               	infsnz	Loading@i_1133& (0+255),f,b
  4353  00171A  2BBF               	incf	(Loading@i_1133+1)& (0+255),f,b
  4354                           
  4355                           ; BSR set to: 0
  4356  00171C  0100               	movlb	0	; () banked
  4357  00171E  BFBF               	btfsc	(Loading@i_1133+1)& (0+255),7,b
  4358  001720  D7DF               	goto	l7992
  4359  001722  0100               	movlb	0	; () banked
  4360  001724  51BF               	movf	(Loading@i_1133+1)& (0+255),w,b
  4361  001726  E101               	bnz	l826
  4362  001728  D765               	goto	L7
  4363  00172A                     l826:
  4364                           
  4365                           ;sort.c: 249: }
  4366                           ;sort.c: 250: }
  4367                           ;sort.c: 251: }
  4368                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4369  00172A  9889               	bcf	3977,4,c	;volatile
  4370                           
  4371                           ;sort.c: 253: j++;
  4372  00172C  0100               	movlb	0	; () banked
  4373  00172E  4BC2               	infsnz	Loading@j& (0+255),f,b
  4374  001730  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4375  001732                     l8000:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;sort.c: 254: }
  4379                           ;sort.c: 256: if(!IR_signal){
  4380  001732  0100               	movlb	0	; () banked
  4381  001734  51E0               	movf	_IR_signal& (0+255),w,b
  4382  001736  0100               	movlb	0	; () banked
  4383  001738  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4384  00173A  A4D8               	btfss	status,2,c
  4385  00173C  D016               	goto	l8012
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;sort.c: 257: _delay((unsigned long)((500)*(32000000/4000.0)));
  4389  00173E  0E15               	movlw	21
  4390  001740  0100               	movlb	0	; () banked
  4391  001742  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4392  001744  0E4B               	movlw	75
  4393  001746  0100               	movlb	0	; () banked
  4394  001748  6FB1               	movwf	??_Loading& (0+255),b
  4395  00174A  0EBE               	movlw	190
  4396  00174C                     u9977:
  4397  00174C  2EE8               	decfsz	wreg,f,c
  4398  00174E  D7FE               	bra	u9977
  4399  001750  2FB1               	decfsz	??_Loading& (0+255),f,b
  4400  001752  D7FC               	bra	u9977
  4401  001754  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4402  001756  D7FA               	bra	u9977
  4403  001758  F000               	nop	
  4404                           
  4405                           ;sort.c: 258: readIR();
  4406  00175A  EC11  F02A         	call	_readIR	;wreg free
  4407                           
  4408                           ;sort.c: 259: if(IR_signal==1){
  4409  00175E  0100               	movlb	0	; () banked
  4410  001760  05E0               	decf	_IR_signal& (0+255),w,b
  4411  001762  0100               	movlb	0	; () banked
  4412  001764  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4413  001766  A4D8               	btfss	status,2,c
  4414  001768  D006               	goto	l842
  4415  00176A                     l8012:
  4416                           
  4417                           ; BSR set to: 0
  4418  00176A  0100               	movlb	0	; () banked
  4419  00176C  05E0               	decf	_IR_signal& (0+255),w,b
  4420  00176E  0100               	movlb	0	; () banked
  4421  001770  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4422  001772  B4D8               	btfsc	status,2,c
  4423  001774  D6A9               	goto	l7928
  4424  001776                     l842:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;sort.c: 264: }
  4428                           ;sort.c: 265: }
  4429                           ;sort.c: 266: }
  4430                           ;sort.c: 267: LATBbits.LATB2 = 0;
  4431  001776  948A               	bcf	3978,2,c	;volatile
  4432  001778                     l8014:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;sort.c: 268: }
  4436                           ;sort.c: 269: f_can_coming_to_ID = 1;
  4437  001778  0E00               	movlw	0
  4438  00177A  0101               	movlb	1	; () banked
  4439  00177C  6F38               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4440  00177E  0E01               	movlw	1
  4441  001780  6F37               	movwf	_f_can_coming_to_ID& (0+255),b
  4442                           
  4443                           ; BSR set to: 1
  4444                           
  4445                           ; BSR set to: 1
  4446  001782  0012               	return	
  4447  001784                     __end_of_Loading:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           postdec1	equ	0xFE5
  4458                           fsr1l	equ	0xFE1
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _initSortTimer *****************
  4462 ;; Defined at:
  4463 ;;		line 444 in file "sort.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  i               2    8[BANK0 ] int 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;Total ram usage:        5 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:   10
  4484 ;; This function calls:
  4485 ;;		_getRTC
  4486 ;; This function is called by:
  4487 ;;		_Loading
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text3
  4492  004B32                     __ptext3:
  4493                           	opt stack 0
  4494  004B32                     _initSortTimer:
  4495                           	opt stack 18
  4496                           
  4497                           ;sort.c: 446: getRTC();
  4498                           
  4499                           ;incstack = 0
  4500  004B32  EC85  F026         	call	_getRTC	;wreg free
  4501                           
  4502                           ;sort.c: 447: for(int i = 0; i < 7; i++){
  4503  004B36  0E00               	movlw	0
  4504  004B38  0100               	movlb	0	; () banked
  4505  004B3A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4506  004B3C  0E00               	movlw	0
  4507  004B3E  6F88               	movwf	initSortTimer@i& (0+255),b
  4508  004B40                     l7320:
  4509                           
  4510                           ; BSR set to: 0
  4511  004B40  0100               	movlb	0	; () banked
  4512  004B42  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4513  004B44  D008               	goto	l7324
  4514  004B46  0100               	movlb	0	; () banked
  4515  004B48  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4516  004B4A  E140               	bnz	l7330
  4517  004B4C  0E07               	movlw	7
  4518  004B4E  0100               	movlb	0	; () banked
  4519  004B50  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4520  004B52  B0D8               	btfsc	status,0,c
  4521  004B54  D03B               	goto	l7330
  4522  004B56                     l7324:
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;sort.c: 448: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4526  004B56  0E24               	movlw	low _time
  4527  004B58  0100               	movlb	0	; () banked
  4528  004B5A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4529  004B5C  6ED9               	movwf	fsr2l,c
  4530  004B5E  0E01               	movlw	high _time
  4531  004B60  0100               	movlb	0	; () banked
  4532  004B62  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4533  004B64  6EDA               	movwf	fsr2h,c
  4534  004B66  50DF               	movf	indf2,w,c
  4535  004B68  0100               	movlb	0	; () banked
  4536  004B6A  6F85               	movwf	??_initSortTimer& (0+255),b
  4537  004B6C  0100               	movlb	0	; () banked
  4538  004B6E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4539  004B70  0E0F               	movlw	15
  4540  004B72  1785               	andwf	??_initSortTimer& (0+255),f,b
  4541  004B74  0E0F               	movlw	15
  4542  004B76  0100               	movlb	0	; () banked
  4543  004B78  1785               	andwf	??_initSortTimer& (0+255),f,b
  4544  004B7A  0100               	movlb	0	; () banked
  4545  004B7C  5185               	movf	??_initSortTimer& (0+255),w,b
  4546  004B7E  0D0A               	mullw	10
  4547  004B80  0E24               	movlw	low _time
  4548  004B82  0100               	movlb	0	; () banked
  4549  004B84  2588               	addwf	initSortTimer@i& (0+255),w,b
  4550  004B86  6ED9               	movwf	fsr2l,c
  4551  004B88  0E01               	movlw	high _time
  4552  004B8A  0100               	movlb	0	; () banked
  4553  004B8C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4554  004B8E  6EDA               	movwf	fsr2h,c
  4555  004B90  50DF               	movf	indf2,w,c
  4556  004B92  0B0F               	andlw	15
  4557  004B94  0100               	movlb	0	; () banked
  4558  004B96  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4559  004B98  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4560  004B9A  50F3               	movf	prodl,w,c
  4561  004B9C  0100               	movlb	0	; () banked
  4562  004B9E  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4563  004BA0  50F4               	movf	prodh,w,c
  4564  004BA2  0100               	movlb	0	; () banked
  4565  004BA4  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4566  004BA6  90D8               	bcf	status,0,c
  4567  004BA8  0100               	movlb	0	; () banked
  4568  004BAA  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4569  004BAC  6ED9               	movwf	fsr2l,c
  4570  004BAE  0100               	movlb	0	; () banked
  4571  004BB0  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4572  004BB2  6EDA               	movwf	fsr2h,c
  4573  004BB4  0E0E               	movlw	low _startTime
  4574  004BB6  26D9               	addwf	fsr2l,f,c
  4575  004BB8  0E01               	movlw	high _startTime
  4576  004BBA  22DA               	addwfc	fsr2h,f,c
  4577  004BBC  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4578  004BC0  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4579                           
  4580                           ; BSR set to: 0
  4581  004BC4  0100               	movlb	0	; () banked
  4582  004BC6  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4583  004BC8  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4584  004BCA  D7BA               	goto	l7320
  4585  004BCC                     l7330:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;sort.c: 449: }
  4589                           ;sort.c: 451: T0CON = 0b00010111;
  4590  004BCC  0E17               	movlw	23
  4591  004BCE  6ED5               	movwf	4053,c	;volatile
  4592                           
  4593                           ;sort.c: 460: TMR0H = 0b10000101;
  4594  004BD0  0E85               	movlw	133
  4595  004BD2  6ED7               	movwf	4055,c	;volatile
  4596                           
  4597                           ;sort.c: 461: TMR0L = 0b11101110;
  4598  004BD4  0EEE               	movlw	238
  4599  004BD6  6ED6               	movwf	4054,c	;volatile
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;sort.c: 462: TMR0ON = 1;
  4603  004BD8  8ED5               	bsf	4053,7,c	;volatile
  4604                           
  4605                           ; BSR set to: 0
  4606  004BDA  0012               	return		;funcret
  4607  004BDC                     __end_of_initSortTimer:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           postdec1	equ	0xFE5
  4618                           fsr1l	equ	0xFE1
  4619                           indf2	equ	0xFDF
  4620                           postinc2	equ	0xFDE
  4621                           postdec2	equ	0xFDD
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _initGlobalVars *****************
  4627 ;; Defined at:
  4628 ;;		line 412 in file "sort.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:        0 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    7
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_Loading
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text4
  4657  0048FA                     __ptext4:
  4658                           	opt stack 0
  4659  0048FA                     _initGlobalVars:
  4660                           	opt stack 21
  4661                           
  4662                           ;sort.c: 414: first = 0;
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;incstack = 0
  4666  0048FA  0E00               	movlw	0
  4667  0048FC  0101               	movlb	1	; () banked
  4668  0048FE  6F40               	movwf	(_first+1)& (0+255),b
  4669  004900  0E00               	movlw	0
  4670  004902  6F3F               	movwf	_first& (0+255),b
  4671                           
  4672                           ;sort.c: 417: f_loadingNewCan = 0;
  4673  004904  0E00               	movlw	0
  4674  004906  0100               	movlb	0	; () banked
  4675  004908  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4676  00490A  0E00               	movlw	0
  4677  00490C  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4678                           
  4679                           ;sort.c: 418: f_lastCan = 0;
  4680  00490E  0E00               	movlw	0
  4681  004910  0100               	movlb	0	; () banked
  4682  004912  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4683  004914  0E00               	movlw	0
  4684  004916  6FEC               	movwf	_f_lastCan& (0+255),b
  4685                           
  4686                           ;sort.c: 419: f_ID_receive = 1;
  4687  004918  0E00               	movlw	0
  4688  00491A  0101               	movlb	1	; () banked
  4689  00491C  6F36               	movwf	(_f_ID_receive+1)& (0+255),b
  4690  00491E  0E01               	movlw	1
  4691  004920  6F35               	movwf	_f_ID_receive& (0+255),b
  4692                           
  4693                           ;sort.c: 420: f_can_coming_to_ID = 0;
  4694  004922  0E00               	movlw	0
  4695  004924  0101               	movlb	1	; () banked
  4696  004926  6F38               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4697  004928  0E00               	movlw	0
  4698  00492A  6F37               	movwf	_f_can_coming_to_ID& (0+255),b
  4699                           
  4700                           ;sort.c: 421: f_can_coming_to_distribution = 0;
  4701  00492C  0E00               	movlw	0
  4702  00492E  0101               	movlb	1	; () banked
  4703  004930  6F3A               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4704  004932  0E00               	movlw	0
  4705  004934  6F39               	movwf	_f_can_coming_to_distribution& (0+255),b
  4706                           
  4707                           ;sort.c: 422: f_can_distributed = 1;
  4708  004936  0E00               	movlw	0
  4709  004938  0101               	movlb	1	; () banked
  4710  00493A  6F3C               	movwf	(_f_can_distributed+1)& (0+255),b
  4711  00493C  0E01               	movlw	1
  4712  00493E  6F3B               	movwf	_f_can_distributed& (0+255),b
  4713                           
  4714                           ;sort.c: 423: f_most_recent_sort_time = 0;
  4715  004940  0E00               	movlw	0
  4716  004942  0101               	movlb	1	; () banked
  4717  004944  6F3E               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4718  004946  0E00               	movlw	0
  4719  004948  6F3D               	movwf	_f_most_recent_sort_time& (0+255),b
  4720                           
  4721                           ;sort.c: 426: count_total = 0;
  4722  00494A  0E00               	movlw	0
  4723  00494C  0100               	movlb	0	; () banked
  4724  00494E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4725  004950  0E00               	movlw	0
  4726  004952  6FFE               	movwf	_count_total& (0+255),b
  4727                           
  4728                           ;sort.c: 427: count_pop_no_tab = 0;
  4729  004954  0E00               	movlw	0
  4730  004956  0101               	movlb	1	; () banked
  4731  004958  6F30               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4732  00495A  0E00               	movlw	0
  4733  00495C  6F2F               	movwf	_count_pop_no_tab& (0+255),b
  4734                           
  4735                           ;sort.c: 428: count_pop_w_tab = 0;
  4736  00495E  0E00               	movlw	0
  4737  004960  0101               	movlb	1	; () banked
  4738  004962  6F32               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4739  004964  0E00               	movlw	0
  4740  004966  6F31               	movwf	_count_pop_w_tab& (0+255),b
  4741                           
  4742                           ;sort.c: 429: count_can_w_lab = 0;
  4743  004968  0E00               	movlw	0
  4744  00496A  0101               	movlb	1	; () banked
  4745  00496C  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4746  00496E  0E00               	movlw	0
  4747  004970  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4748                           
  4749                           ;sort.c: 430: count_can_no_lab = 0;
  4750  004972  0E00               	movlw	0
  4751  004974  0101               	movlb	1	; () banked
  4752  004976  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4753  004978  0E00               	movlw	0
  4754  00497A  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4755                           
  4756                           ;sort.c: 433: most_recent_sort_time = 999;
  4757  00497C  0E03               	movlw	3
  4758  00497E  6E6A               	movwf	_most_recent_sort_time+1,c
  4759  004980  0EE7               	movlw	231
  4760  004982  6E69               	movwf	_most_recent_sort_time,c
  4761                           
  4762                           ;sort.c: 436: servo_timer_counter = 0;
  4763  004984  0E00               	movlw	0
  4764  004986  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4765  004988  0E00               	movlw	0
  4766  00498A  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4767                           
  4768                           ;sort.c: 437: servo_timer_target = 9999;
  4769  00498C  0E27               	movlw	39
  4770  00498E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4771  004990  0E0F               	movlw	15
  4772  004992  6E6F               	movwf	_servo_timer_target,c	;volatile
  4773                           
  4774                           ;sort.c: 438: timer2_counter = 0;
  4775  004994  0E00               	movlw	0
  4776  004996  6E74               	movwf	_timer2_counter+1,c	;volatile
  4777  004998  0E00               	movlw	0
  4778  00499A  6E73               	movwf	_timer2_counter,c	;volatile
  4779                           
  4780                           ;sort.c: 439: f_arm_position = 0;
  4781  00499C  0E00               	movlw	0
  4782  00499E  0100               	movlb	0	; () banked
  4783  0049A0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4784  0049A2  0E00               	movlw	0
  4785  0049A4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;sort.c: 440: pan_servo_state = -1;
  4789  0049A6  686B               	setf	_pan_servo_state,c	;volatile
  4790  0049A8  686C               	setf	_pan_servo_state+1,c	;volatile
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;sort.c: 441: tilt_servo_state = -1;
  4794  0049AA  6871               	setf	_tilt_servo_state,c	;volatile
  4795  0049AC  6872               	setf	_tilt_servo_state+1,c	;volatile
  4796                           
  4797                           ;sort.c: 442: f_panning_to_bin = 0;
  4798  0049AE  0E00               	movlw	0
  4799  0049B0  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4800  0049B2  0E00               	movlw	0
  4801  0049B4  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4802                           
  4803                           ; BSR set to: 0
  4804  0049B6  0012               	return		;funcret
  4805  0049B8                     __end_of_initGlobalVars:
  4806                           	opt stack 0
  4807                           tblptru	equ	0xFF8
  4808                           tblptrh	equ	0xFF7
  4809                           tblptrl	equ	0xFF6
  4810                           tablat	equ	0xFF5
  4811                           prodh	equ	0xFF4
  4812                           prodl	equ	0xFF3
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           postdec1	equ	0xFE5
  4816                           fsr1l	equ	0xFE1
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _getMAG *****************
  4825 ;; Defined at:
  4826 ;;		line 541 in file "sort.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;		None
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;Total ram usage:        2 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    9
  4847 ;; This function calls:
  4848 ;;		_readMAG
  4849 ;; This function is called by:
  4850 ;;		_Loading
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text5
  4855  0056E8                     __ptext5:
  4856                           	opt stack 0
  4857  0056E8                     _getMAG:
  4858                           	opt stack 19
  4859                           
  4860                           ;sort.c: 542: readMAG();
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;incstack = 0
  4864  0056E8  EC5D  F02A         	call	_readMAG	;wreg free
  4865                           
  4866                           ;sort.c: 544: if(MAG_signal==1){
  4867  0056EC  0100               	movlb	0	; () banked
  4868  0056EE  05E2               	decf	_MAG_signal& (0+255),w,b
  4869  0056F0  0100               	movlb	0	; () banked
  4870  0056F2  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4871  0056F4  A4D8               	btfss	status,2,c
  4872  0056F6  0012               	return	
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;sort.c: 545: _delay((unsigned long)((500)*(32000000/4000.0)));
  4876  0056F8  0E15               	movlw	21
  4877  0056FA  0100               	movlb	0	; () banked
  4878  0056FC  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4879  0056FE  0E4B               	movlw	75
  4880  005700  0100               	movlb	0	; () banked
  4881  005702  6F86               	movwf	??_getMAG& (0+255),b
  4882  005704  0EBE               	movlw	190
  4883  005706                     u9987:
  4884  005706  2EE8               	decfsz	wreg,f,c
  4885  005708  D7FE               	bra	u9987
  4886  00570A  2F86               	decfsz	??_getMAG& (0+255),f,b
  4887  00570C  D7FC               	bra	u9987
  4888  00570E  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4889  005710  D7FA               	bra	u9987
  4890  005712  F000               	nop	
  4891                           
  4892                           ;sort.c: 546: readMAG();
  4893  005714  EC5D  F02A         	call	_readMAG	;wreg free
  4894  005718  0012               	return	
  4895  00571A                     __end_of_getMAG:
  4896                           	opt stack 0
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           postinc0	equ	0xFEE
  4904                           wreg	equ	0xFE8
  4905                           postdec1	equ	0xFE5
  4906                           fsr1l	equ	0xFE1
  4907                           indf2	equ	0xFDF
  4908                           postinc2	equ	0xFDE
  4909                           postdec2	equ	0xFDD
  4910                           fsr2h	equ	0xFDA
  4911                           fsr2l	equ	0xFD9
  4912                           status	equ	0xFD8
  4913                           
  4914 ;; *************** function _getIR *****************
  4915 ;; Defined at:
  4916 ;;		line 525 in file "sort.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  i               2    7[BANK0 ] int 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  1    wreg      void 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;Total ram usage:        3 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    9
  4937 ;; This function calls:
  4938 ;;		_readIR
  4939 ;; This function is called by:
  4940 ;;		_Loading
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text6
  4945  004F8A                     __ptext6:
  4946                           	opt stack 0
  4947  004F8A                     _getIR:
  4948                           	opt stack 19
  4949                           
  4950                           ;sort.c: 526: readIR();
  4951                           
  4952                           ;incstack = 0
  4953  004F8A  EC11  F02A         	call	_readIR	;wreg free
  4954                           
  4955                           ;sort.c: 527: for(int i = 0; i < 150; i++){
  4956  004F8E  0E00               	movlw	0
  4957  004F90  0100               	movlb	0	; () banked
  4958  004F92  6F88               	movwf	(getIR@i+1)& (0+255),b
  4959  004F94  0E00               	movlw	0
  4960  004F96  6F87               	movwf	getIR@i& (0+255),b
  4961  004F98                     l7420:
  4962                           
  4963                           ; BSR set to: 0
  4964  004F98  0100               	movlb	0	; () banked
  4965  004F9A  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4966  004F9C  D008               	goto	l7424
  4967  004F9E  0100               	movlb	0	; () banked
  4968  004FA0  5188               	movf	(getIR@i+1)& (0+255),w,b
  4969  004FA2  E11A               	bnz	l7436
  4970  004FA4  0E96               	movlw	150
  4971  004FA6  0100               	movlb	0	; () banked
  4972  004FA8  5D87               	subwf	getIR@i& (0+255),w,b
  4973  004FAA  B0D8               	btfsc	status,0,c
  4974  004FAC  D015               	goto	l7436
  4975  004FAE                     l7424:
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;sort.c: 528: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4979  004FAE  0E06               	movlw	6
  4980  004FB0  0100               	movlb	0	; () banked
  4981  004FB2  6F86               	movwf	??_getIR& (0+255),b
  4982  004FB4  0E30               	movlw	48
  4983  004FB6                     u9997:
  4984  004FB6  2EE8               	decfsz	wreg,f,c
  4985  004FB8  D7FE               	bra	u9997
  4986  004FBA  2F86               	decfsz	??_getIR& (0+255),f,b
  4987  004FBC  D7FC               	bra	u9997
  4988  004FBE  F000               	nop	
  4989                           
  4990                           ;sort.c: 529: readIR();
  4991  004FC0  EC11  F02A         	call	_readIR	;wreg free
  4992                           
  4993                           ;sort.c: 530: if(!IR_signal){
  4994  004FC4  0100               	movlb	0	; () banked
  4995  004FC6  51E0               	movf	_IR_signal& (0+255),w,b
  4996  004FC8  0100               	movlb	0	; () banked
  4997  004FCA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4998  004FCC  B4D8               	btfsc	status,2,c
  4999  004FCE  D004               	goto	l7436
  5000                           
  5001                           ; BSR set to: 0
  5002                           
  5003                           ; BSR set to: 0
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;sort.c: 531: break;
  5007  004FD0  0100               	movlb	0	; () banked
  5008  004FD2  4B87               	infsnz	getIR@i& (0+255),f,b
  5009  004FD4  2B88               	incf	(getIR@i+1)& (0+255),f,b
  5010  004FD6  D7E0               	goto	l7420
  5011  004FD8                     l7436:
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;sort.c: 532: }
  5015                           ;sort.c: 533: }
  5016                           ;sort.c: 534: if(IR_signal==1){
  5017  004FD8  0100               	movlb	0	; () banked
  5018  004FDA  05E0               	decf	_IR_signal& (0+255),w,b
  5019  004FDC  0100               	movlb	0	; () banked
  5020  004FDE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5021  004FE0  A4D8               	btfss	status,2,c
  5022  004FE2  D006               	goto	l7440
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;sort.c: 535: f_loadingNewCan = 1;
  5026  004FE4  0E00               	movlw	0
  5027  004FE6  0100               	movlb	0	; () banked
  5028  004FE8  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5029  004FEA  0E01               	movlw	1
  5030  004FEC  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5031                           
  5032                           ;sort.c: 536: }
  5033  004FEE  0012               	return	
  5034  004FF0                     l7440:
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;sort.c: 537: else{
  5038                           ;sort.c: 538: f_loadingNewCan = 0;
  5039  004FF0  0E00               	movlw	0
  5040  004FF2  0100               	movlb	0	; () banked
  5041  004FF4  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5042  004FF6  0E00               	movlw	0
  5043  004FF8  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5044  004FFA  0012               	return	
  5045  004FFC                     __end_of_getIR:
  5046                           	opt stack 0
  5047                           tblptru	equ	0xFF8
  5048                           tblptrh	equ	0xFF7
  5049                           tblptrl	equ	0xFF6
  5050                           tablat	equ	0xFF5
  5051                           prodh	equ	0xFF4
  5052                           prodl	equ	0xFF3
  5053                           postinc0	equ	0xFEE
  5054                           wreg	equ	0xFE8
  5055                           postdec1	equ	0xFE5
  5056                           fsr1l	equ	0xFE1
  5057                           indf2	equ	0xFDF
  5058                           postinc2	equ	0xFDE
  5059                           postdec2	equ	0xFDD
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _readIR *****************
  5065 ;; Defined at:
  5066 ;;		line 23 in file "ADCFunctionality.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  res             2    4[BANK0 ] int 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;Total ram usage:        4 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    8
  5087 ;; This function calls:
  5088 ;;		_readADC
  5089 ;; This function is called by:
  5090 ;;		_Loading
  5091 ;;		_getIR
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text7
  5096  005422                     __ptext7:
  5097                           	opt stack 0
  5098  005422                     _readIR:
  5099                           	opt stack 20
  5100                           
  5101                           ;ADCFunctionality.c: 24: readADC(0);
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;incstack = 0
  5105  005422  0E00               	movlw	0
  5106  005424  ECDA  F02C         	call	_readADC
  5107                           
  5108                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5109  005428  50C3               	movf	4035,w,c	;volatile
  5110  00542A  CFC4 F082          	movff	4036,??_readIR	;volatile
  5111  00542E  0100               	movlb	0	; () banked
  5112  005430  6B83               	clrf	(??_readIR+1)& (0+255),b
  5113  005432  C082  F083         	movff	??_readIR,??_readIR+1
  5114  005436  0100               	movlb	0	; () banked
  5115  005438  6B82               	clrf	??_readIR& (0+255),b
  5116  00543A  0100               	movlb	0	; () banked
  5117  00543C  1182               	iorwf	??_readIR& (0+255),w,b
  5118  00543E  0100               	movlb	0	; () banked
  5119  005440  6F84               	movwf	readIR@res& (0+255),b
  5120  005442  0100               	movlb	0	; () banked
  5121  005444  5183               	movf	(??_readIR+1)& (0+255),w,b
  5122  005446  0100               	movlb	0	; () banked
  5123  005448  6F85               	movwf	(readIR@res+1)& (0+255),b
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5127  00544A  0100               	movlb	0	; () banked
  5128  00544C  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5129  00544E  D00A               	goto	u5110
  5130  005450  0E21               	movlw	33
  5131  005452  0100               	movlb	0	; () banked
  5132  005454  5D84               	subwf	readIR@res& (0+255),w,b
  5133  005456  0E03               	movlw	3
  5134  005458  0100               	movlb	0	; () banked
  5135  00545A  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5136  00545C  A0D8               	btfss	status,0,c
  5137  00545E  D002               	goto	u5110
  5138  005460  0E01               	movlw	1
  5139  005462  D001               	goto	u5120
  5140  005464                     u5110:
  5141  005464  0E00               	movlw	0
  5142  005466                     u5120:
  5143  005466  0100               	movlb	0	; () banked
  5144  005468  6FE0               	movwf	_IR_signal& (0+255),b
  5145  00546A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5146                           
  5147                           ; BSR set to: 0
  5148  00546C  0012               	return		;funcret
  5149  00546E                     __end_of_readIR:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           postinc0	equ	0xFEE
  5158                           wreg	equ	0xFE8
  5159                           postdec1	equ	0xFE5
  5160                           fsr1l	equ	0xFE1
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function _ID *****************
  5169 ;; Defined at:
  5170 ;;		line 273 in file "sort.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  i               2   57[BANK0 ] int 
  5175 ;;  i               2   53[BANK0 ] int 
  5176 ;;  i               2   55[BANK0 ] int 
  5177 ;;  res3            2   45[BANK0 ] int 
  5178 ;;  i               2   51[BANK0 ] int 
  5179 ;;  i               2   49[BANK0 ] int 
  5180 ;;  n               2   64[BANK0 ] const int 
  5181 ;;  res2            2   62[BANK0 ] int 
  5182 ;;  res1            2   60[BANK0 ] int 
  5183 ;;  time            1   59[BANK0 ] const unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;Total ram usage:       23 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:   10
  5200 ;; This function calls:
  5201 ;;		___awdiv
  5202 ;;		___awtoft
  5203 ;;		___ftge
  5204 ;;		_delay_ms
  5205 ;;		_lcdInst
  5206 ;;		_printf
  5207 ;;		_readCOND
  5208 ;; This function is called by:
  5209 ;;		_sort
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           	psect	text8
  5214  001784                     __ptext8:
  5215                           	opt stack 0
  5216  001784                     _ID:
  5217                           	opt stack 19
  5218                           
  5219                           ;sort.c: 274: if(f_can_coming_to_ID){
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;incstack = 0
  5223  001784  0101               	movlb	1	; () banked
  5224  001786  5137               	movf	_f_can_coming_to_ID& (0+255),w,b
  5225  001788  0101               	movlb	1	; () banked
  5226  00178A  1138               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5227  00178C  B4D8               	btfsc	status,2,c
  5228  00178E  0012               	return	
  5229                           
  5230                           ; BSR set to: 1
  5231                           ;sort.c: 276: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5232  001790  0E29               	movlw	41
  5233  001792  0100               	movlb	0	; () banked
  5234  001794  6FAC               	movwf	(??_ID+1)& (0+255),b
  5235  001796  0E96               	movlw	150
  5236  001798  0100               	movlb	0	; () banked
  5237  00179A  6FAB               	movwf	??_ID& (0+255),b
  5238  00179C  0E7F               	movlw	127
  5239  00179E                     u10007:
  5240  00179E  2EE8               	decfsz	wreg,f,c
  5241  0017A0  D7FE               	bra	u10007
  5242  0017A2  2FAB               	decfsz	??_ID& (0+255),f,b
  5243  0017A4  D7FC               	bra	u10007
  5244  0017A6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5245  0017A8  D7FA               	bra	u10007
  5246                           
  5247                           ;sort.c: 278: f_arm_position = 0;
  5248  0017AA  0E00               	movlw	0
  5249  0017AC  0100               	movlb	0	; () banked
  5250  0017AE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5251  0017B0  0E00               	movlw	0
  5252  0017B2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;sort.c: 280: LATAbits.LATA3 = 1;
  5256  0017B4  8689               	bsf	3977,3,c	;volatile
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;sort.c: 283: const int n = 10;
  5260  0017B6  0E00               	movlw	0
  5261  0017B8  0100               	movlb	0	; () banked
  5262  0017BA  6FC1               	movwf	(ID@n+1)& (0+255),b
  5263  0017BC  0E0A               	movlw	10
  5264  0017BE  6FC0               	movwf	ID@n& (0+255),b
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;sort.c: 284: const unsigned char time = (600 / n);
  5268  0017C0  0E02               	movlw	2
  5269  0017C2  0100               	movlb	0	; () banked
  5270  0017C4  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5271  0017C6  0E58               	movlw	88
  5272  0017C8  6F86               	movwf	___awdiv@dividend& (0+255),b
  5273  0017CA  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5274  0017CE  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5275  0017D2  ECDC  F024         	call	___awdiv	;wreg free
  5276  0017D6  0100               	movlb	0	; () banked
  5277  0017D8  5186               	movf	?___awdiv& (0+255),w,b
  5278  0017DA  0100               	movlb	0	; () banked
  5279  0017DC  6FBB               	movwf	ID@time& (0+255),b
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;sort.c: 285: int res1 = 0;
  5283  0017DE  0E00               	movlw	0
  5284  0017E0  0100               	movlb	0	; () banked
  5285  0017E2  6FBD               	movwf	(ID@res1+1)& (0+255),b
  5286  0017E4  0E00               	movlw	0
  5287  0017E6  6FBC               	movwf	ID@res1& (0+255),b
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;sort.c: 286: int res2 = 0;
  5291  0017E8  0E00               	movlw	0
  5292  0017EA  0100               	movlb	0	; () banked
  5293  0017EC  6FBF               	movwf	(ID@res2+1)& (0+255),b
  5294  0017EE  0E00               	movlw	0
  5295  0017F0  6FBE               	movwf	ID@res2& (0+255),b
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;sort.c: 287: for(int i = 0; i<n; i++){
  5299  0017F2  0E00               	movlw	0
  5300  0017F4  0100               	movlb	0	; () banked
  5301  0017F6  6FB2               	movwf	(ID@i+1)& (0+255),b
  5302  0017F8  0E00               	movlw	0
  5303  0017FA  6FB1               	movwf	ID@i& (0+255),b
  5304  0017FC                     l8040:
  5305                           
  5306                           ; BSR set to: 0
  5307  0017FC  0100               	movlb	0	; () banked
  5308  0017FE  51C0               	movf	ID@n& (0+255),w,b
  5309  001800  0100               	movlb	0	; () banked
  5310  001802  5DB1               	subwf	ID@i& (0+255),w,b
  5311  001804  0100               	movlb	0	; () banked
  5312  001806  51B2               	movf	(ID@i+1)& (0+255),w,b
  5313  001808  0A80               	xorlw	128
  5314  00180A  0100               	movlb	0	; () banked
  5315  00180C  6FAB               	movwf	??_ID& (0+255),b
  5316  00180E  0100               	movlb	0	; () banked
  5317  001810  51C1               	movf	(ID@n+1)& (0+255),w,b
  5318  001812  0A80               	xorlw	128
  5319  001814  0100               	movlb	0	; () banked
  5320  001816  59AB               	subwfb	??_ID& (0+255),w,b
  5321  001818  B0D8               	btfsc	status,0,c
  5322  00181A  D012               	goto	l847
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;sort.c: 288: delay_ms(time);
  5326                           
  5327                           ; BSR set to: 0
  5328                           
  5329                           ; BSR set to: 0
  5330  00181C  0100               	movlb	0	; () banked
  5331  00181E  51BB               	movf	ID@time& (0+255),w,b
  5332  001820  EC05  F02D         	call	_delay_ms
  5333                           
  5334                           ;sort.c: 289: readCOND();
  5335  001824  EC37  F02A         	call	_readCOND	;wreg free
  5336                           
  5337                           ;sort.c: 290: res1 += COND_signal;
  5338  001828  0100               	movlb	0	; () banked
  5339  00182A  51DE               	movf	_COND_signal& (0+255),w,b
  5340  00182C  0100               	movlb	0	; () banked
  5341  00182E  27BC               	addwf	ID@res1& (0+255),f,b
  5342  001830  0100               	movlb	0	; () banked
  5343  001832  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5344  001834  0100               	movlb	0	; () banked
  5345  001836  23BD               	addwfc	(ID@res1+1)& (0+255),f,b
  5346                           
  5347                           ; BSR set to: 0
  5348  001838  0100               	movlb	0	; () banked
  5349  00183A  4BB1               	infsnz	ID@i& (0+255),f,b
  5350  00183C  2BB2               	incf	(ID@i+1)& (0+255),f,b
  5351  00183E  D7DE               	goto	l8040
  5352  001840                     l847:
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;sort.c: 291: }
  5356                           ;sort.c: 292: LATAbits.LATA3 = 0;
  5357  001840  9689               	bcf	3977,3,c	;volatile
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;sort.c: 293: _delay((unsigned long)((200)*(32000000/4000.0)));
  5361  001842  0E09               	movlw	9
  5362  001844  0100               	movlb	0	; () banked
  5363  001846  6FAC               	movwf	(??_ID+1)& (0+255),b
  5364  001848  0E1E               	movlw	30
  5365  00184A  0100               	movlb	0	; () banked
  5366  00184C  6FAB               	movwf	??_ID& (0+255),b
  5367  00184E  0EE4               	movlw	228
  5368  001850                     u10017:
  5369  001850  2EE8               	decfsz	wreg,f,c
  5370  001852  D7FE               	bra	u10017
  5371  001854  2FAB               	decfsz	??_ID& (0+255),f,b
  5372  001856  D7FC               	bra	u10017
  5373  001858  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5374  00185A  D7FA               	bra	u10017
  5375  00185C  F000               	nop	
  5376                           
  5377                           ;sort.c: 294: LATAbits.LATA3 = 1;
  5378  00185E  8689               	bsf	3977,3,c	;volatile
  5379                           
  5380                           ;sort.c: 295: for(int i = 0; i<n; i++){
  5381  001860  0E00               	movlw	0
  5382  001862  0100               	movlb	0	; () banked
  5383  001864  6FB4               	movwf	(ID@i_1141+1)& (0+255),b
  5384  001866  0E00               	movlw	0
  5385  001868  6FB3               	movwf	ID@i_1141& (0+255),b
  5386  00186A                     l8058:
  5387                           
  5388                           ; BSR set to: 0
  5389  00186A  0100               	movlb	0	; () banked
  5390  00186C  51C0               	movf	ID@n& (0+255),w,b
  5391  00186E  0100               	movlb	0	; () banked
  5392  001870  5DB3               	subwf	ID@i_1141& (0+255),w,b
  5393  001872  0100               	movlb	0	; () banked
  5394  001874  51B4               	movf	(ID@i_1141+1)& (0+255),w,b
  5395  001876  0A80               	xorlw	128
  5396  001878  0100               	movlb	0	; () banked
  5397  00187A  6FAB               	movwf	??_ID& (0+255),b
  5398  00187C  0100               	movlb	0	; () banked
  5399  00187E  51C1               	movf	(ID@n+1)& (0+255),w,b
  5400  001880  0A80               	xorlw	128
  5401  001882  0100               	movlb	0	; () banked
  5402  001884  59AB               	subwfb	??_ID& (0+255),w,b
  5403  001886  B0D8               	btfsc	status,0,c
  5404  001888  D012               	goto	l8070
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;sort.c: 296: delay_ms(time);
  5408                           
  5409                           ; BSR set to: 0
  5410                           
  5411                           ; BSR set to: 0
  5412  00188A  0100               	movlb	0	; () banked
  5413  00188C  51BB               	movf	ID@time& (0+255),w,b
  5414  00188E  EC05  F02D         	call	_delay_ms
  5415                           
  5416                           ;sort.c: 297: readCOND();
  5417  001892  EC37  F02A         	call	_readCOND	;wreg free
  5418                           
  5419                           ;sort.c: 298: res2 += COND_signal;
  5420  001896  0100               	movlb	0	; () banked
  5421  001898  51DE               	movf	_COND_signal& (0+255),w,b
  5422  00189A  0100               	movlb	0	; () banked
  5423  00189C  27BE               	addwf	ID@res2& (0+255),f,b
  5424  00189E  0100               	movlb	0	; () banked
  5425  0018A0  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5426  0018A2  0100               	movlb	0	; () banked
  5427  0018A4  23BF               	addwfc	(ID@res2+1)& (0+255),f,b
  5428                           
  5429                           ; BSR set to: 0
  5430  0018A6  0100               	movlb	0	; () banked
  5431  0018A8  4BB3               	infsnz	ID@i_1141& (0+255),f,b
  5432  0018AA  2BB4               	incf	(ID@i_1141+1)& (0+255),f,b
  5433  0018AC  D7DE               	goto	l8058
  5434  0018AE                     l8070:
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;sort.c: 299: }
  5438                           ;sort.c: 300: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5439  0018AE  0E9A               	movlw	154
  5440  0018B0  0100               	movlb	0	; () banked
  5441  0018B2  6F92               	movwf	___ftge@ff1& (0+255),b
  5442  0018B4  0E99               	movlw	153
  5443  0018B6  0100               	movlb	0	; () banked
  5444  0018B8  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5445  0018BA  0E3E               	movlw	62
  5446  0018BC  0100               	movlb	0	; () banked
  5447  0018BE  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5448  0018C0  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5449  0018C4  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5450  0018C8  C0BC  F086         	movff	ID@res1,___awdiv@dividend
  5451  0018CC  C0BD  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5452  0018D0  ECDC  F024         	call	___awdiv	;wreg free
  5453  0018D4  C086  F08E         	movff	?___awdiv,___awtoft@c
  5454  0018D8  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5455  0018DC  ECA6  F02A         	call	___awtoft	;wreg free
  5456  0018E0  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5457  0018E4  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5458  0018E8  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5459  0018EC  EC19  F024         	call	___ftge	;wreg free
  5460  0018F0  0100               	movlb	0	; () banked
  5461  0018F2  B0D8               	btfsc	status,0,c
  5462  0018F4  D002               	goto	u6800
  5463  0018F6  0E01               	movlw	1
  5464  0018F8  D001               	goto	u6810
  5465  0018FA                     u6800:
  5466  0018FA  0E00               	movlw	0
  5467  0018FC                     u6810:
  5468  0018FC  0100               	movlb	0	; () banked
  5469  0018FE  6FBC               	movwf	ID@res1& (0+255),b
  5470  001900  6BBD               	clrf	(ID@res1+1)& (0+255),b
  5471                           
  5472                           ;sort.c: 301: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5473  001902  0E9A               	movlw	154
  5474  001904  0100               	movlb	0	; () banked
  5475  001906  6F92               	movwf	___ftge@ff1& (0+255),b
  5476  001908  0E99               	movlw	153
  5477  00190A  0100               	movlb	0	; () banked
  5478  00190C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5479  00190E  0E3E               	movlw	62
  5480  001910  0100               	movlb	0	; () banked
  5481  001912  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5482  001914  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5483  001918  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5484  00191C  C0BE  F086         	movff	ID@res2,___awdiv@dividend
  5485  001920  C0BF  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5486  001924  ECDC  F024         	call	___awdiv	;wreg free
  5487  001928  C086  F08E         	movff	?___awdiv,___awtoft@c
  5488  00192C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5489  001930  ECA6  F02A         	call	___awtoft	;wreg free
  5490  001934  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5491  001938  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5492  00193C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5493  001940  EC19  F024         	call	___ftge	;wreg free
  5494  001944  0100               	movlb	0	; () banked
  5495  001946  B0D8               	btfsc	status,0,c
  5496  001948  D002               	goto	u6820
  5497  00194A  0E01               	movlw	1
  5498  00194C  D001               	goto	u6830
  5499  00194E                     u6820:
  5500  00194E  0E00               	movlw	0
  5501  001950                     u6830:
  5502  001950  0100               	movlb	0	; () banked
  5503  001952  6FBE               	movwf	ID@res2& (0+255),b
  5504  001954  6BBF               	clrf	(ID@res2+1)& (0+255),b
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;sort.c: 304: sensor_outputs[1] = (res1 || res2);
  5508  001956  0E01               	movlw	1
  5509  001958  0100               	movlb	0	; () banked
  5510  00195A  6FAF               	movwf	_ID$1142& (0+255),b
  5511                           
  5512                           ; BSR set to: 0
  5513  00195C  0100               	movlb	0	; () banked
  5514  00195E  51BC               	movf	ID@res1& (0+255),w,b
  5515  001960  0100               	movlb	0	; () banked
  5516  001962  11BD               	iorwf	(ID@res1+1)& (0+255),w,b
  5517  001964  A4D8               	btfss	status,2,c
  5518  001966  D009               	goto	l8080
  5519                           
  5520                           ; BSR set to: 0
  5521  001968  0100               	movlb	0	; () banked
  5522  00196A  51BE               	movf	ID@res2& (0+255),w,b
  5523  00196C  0100               	movlb	0	; () banked
  5524  00196E  11BF               	iorwf	(ID@res2+1)& (0+255),w,b
  5525  001970  A4D8               	btfss	status,2,c
  5526  001972  D003               	goto	l8080
  5527                           
  5528                           ; BSR set to: 0
  5529  001974  0E00               	movlw	0
  5530  001976  0100               	movlb	0	; () banked
  5531  001978  6FAF               	movwf	_ID$1142& (0+255),b
  5532  00197A                     l8080:
  5533                           
  5534                           ; BSR set to: 0
  5535  00197A  C0AF  F0DC         	movff	_ID$1142,_sensor_outputs+2
  5536  00197E  0100               	movlb	0	; () banked
  5537  001980  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;sort.c: 305: LATAbits.LATA3 = 0;
  5541  001982  9689               	bcf	3977,3,c	;volatile
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;sort.c: 307: if(sensor_outputs[0]){
  5545  001984  0100               	movlb	0	; () banked
  5546  001986  51DA               	movf	_sensor_outputs& (0+255),w,b
  5547  001988  0100               	movlb	0	; () banked
  5548  00198A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5549  00198C  B4D8               	btfsc	status,2,c
  5550  00198E  D052               	goto	l8116
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;sort.c: 308: _delay((unsigned long)((200)*(32000000/4000.0)));
  5554  001990  0E09               	movlw	9
  5555  001992  0100               	movlb	0	; () banked
  5556  001994  6FAC               	movwf	(??_ID+1)& (0+255),b
  5557  001996  0E1E               	movlw	30
  5558  001998  0100               	movlb	0	; () banked
  5559  00199A  6FAB               	movwf	??_ID& (0+255),b
  5560  00199C  0EE4               	movlw	228
  5561  00199E                     u10027:
  5562  00199E  2EE8               	decfsz	wreg,f,c
  5563  0019A0  D7FE               	bra	u10027
  5564  0019A2  2FAB               	decfsz	??_ID& (0+255),f,b
  5565  0019A4  D7FC               	bra	u10027
  5566  0019A6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5567  0019A8  D7FA               	bra	u10027
  5568  0019AA  F000               	nop	
  5569                           
  5570                           ;sort.c: 309: LATAbits.LATA3 = 1;
  5571  0019AC  8689               	bsf	3977,3,c	;volatile
  5572                           
  5573                           ;sort.c: 310: int res3 = 0;
  5574  0019AE  0E00               	movlw	0
  5575  0019B0  0100               	movlb	0	; () banked
  5576  0019B2  6FAE               	movwf	(ID@res3+1)& (0+255),b
  5577  0019B4  0E00               	movlw	0
  5578  0019B6  6FAD               	movwf	ID@res3& (0+255),b
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;sort.c: 311: for(int i = 0; i<n; i++){
  5582  0019B8  0E00               	movlw	0
  5583  0019BA  0100               	movlb	0	; () banked
  5584  0019BC  6FB6               	movwf	(ID@i_1144+1)& (0+255),b
  5585  0019BE  0E00               	movlw	0
  5586  0019C0  6FB5               	movwf	ID@i_1144& (0+255),b
  5587  0019C2                     l8094:
  5588                           
  5589                           ; BSR set to: 0
  5590  0019C2  0100               	movlb	0	; () banked
  5591  0019C4  51C0               	movf	ID@n& (0+255),w,b
  5592  0019C6  0100               	movlb	0	; () banked
  5593  0019C8  5DB5               	subwf	ID@i_1144& (0+255),w,b
  5594  0019CA  0100               	movlb	0	; () banked
  5595  0019CC  51B6               	movf	(ID@i_1144+1)& (0+255),w,b
  5596  0019CE  0A80               	xorlw	128
  5597  0019D0  0100               	movlb	0	; () banked
  5598  0019D2  6FAB               	movwf	??_ID& (0+255),b
  5599  0019D4  0100               	movlb	0	; () banked
  5600  0019D6  51C1               	movf	(ID@n+1)& (0+255),w,b
  5601  0019D8  0A80               	xorlw	128
  5602  0019DA  0100               	movlb	0	; () banked
  5603  0019DC  59AB               	subwfb	??_ID& (0+255),w,b
  5604  0019DE  B0D8               	btfsc	status,0,c
  5605  0019E0  D012               	goto	l854
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;sort.c: 312: delay_ms(time);
  5609                           
  5610                           ; BSR set to: 0
  5611                           
  5612                           ; BSR set to: 0
  5613  0019E2  0100               	movlb	0	; () banked
  5614  0019E4  51BB               	movf	ID@time& (0+255),w,b
  5615  0019E6  EC05  F02D         	call	_delay_ms
  5616                           
  5617                           ;sort.c: 313: readCOND();
  5618  0019EA  EC37  F02A         	call	_readCOND	;wreg free
  5619                           
  5620                           ;sort.c: 314: res3 += COND_signal;
  5621  0019EE  0100               	movlb	0	; () banked
  5622  0019F0  51DE               	movf	_COND_signal& (0+255),w,b
  5623  0019F2  0100               	movlb	0	; () banked
  5624  0019F4  27AD               	addwf	ID@res3& (0+255),f,b
  5625  0019F6  0100               	movlb	0	; () banked
  5626  0019F8  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5627  0019FA  0100               	movlb	0	; () banked
  5628  0019FC  23AE               	addwfc	(ID@res3+1)& (0+255),f,b
  5629                           
  5630                           ; BSR set to: 0
  5631  0019FE  0100               	movlb	0	; () banked
  5632  001A00  4BB5               	infsnz	ID@i_1144& (0+255),f,b
  5633  001A02  2BB6               	incf	(ID@i_1144+1)& (0+255),f,b
  5634  001A04  D7DE               	goto	l8094
  5635  001A06                     l854:
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;sort.c: 315: }
  5639                           ;sort.c: 316: LATAbits.LATA3 = 0;
  5640  001A06  9689               	bcf	3977,3,c	;volatile
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;sort.c: 317: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5644  001A08  0E01               	movlw	1
  5645  001A0A  0100               	movlb	0	; () banked
  5646  001A0C  6FB0               	movwf	_ID$1145& (0+255),b
  5647                           
  5648                           ; BSR set to: 0
  5649  001A0E  0100               	movlb	0	; () banked
  5650  001A10  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5651  001A12  0100               	movlb	0	; () banked
  5652  001A14  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5653  001A16  A4D8               	btfss	status,2,c
  5654  001A18  D009               	goto	l8114
  5655                           
  5656                           ; BSR set to: 0
  5657  001A1A  0100               	movlb	0	; () banked
  5658  001A1C  51AD               	movf	ID@res3& (0+255),w,b
  5659  001A1E  0100               	movlb	0	; () banked
  5660  001A20  11AE               	iorwf	(ID@res3+1)& (0+255),w,b
  5661  001A22  A4D8               	btfss	status,2,c
  5662  001A24  D003               	goto	l8114
  5663                           
  5664                           ; BSR set to: 0
  5665  001A26  0E00               	movlw	0
  5666  001A28  0100               	movlb	0	; () banked
  5667  001A2A  6FB0               	movwf	_ID$1145& (0+255),b
  5668  001A2C                     l8114:
  5669                           
  5670                           ; BSR set to: 0
  5671  001A2C  C0B0  F0DC         	movff	_ID$1145,_sensor_outputs+2
  5672  001A30  0100               	movlb	0	; () banked
  5673  001A32  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5674  001A34                     l8116:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;sort.c: 318: }
  5678                           ;sort.c: 326: if(!sensor_outputs[0]){
  5679  001A34  0100               	movlb	0	; () banked
  5680  001A36  51DA               	movf	_sensor_outputs& (0+255),w,b
  5681  001A38  0100               	movlb	0	; () banked
  5682  001A3A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5683  001A3C  A4D8               	btfss	status,2,c
  5684  001A3E  D016               	goto	l8128
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;sort.c: 327: if(!sensor_outputs[1]){
  5688  001A40  0100               	movlb	0	; () banked
  5689  001A42  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5690  001A44  0100               	movlb	0	; () banked
  5691  001A46  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5692  001A48  A4D8               	btfss	status,2,c
  5693  001A4A  D008               	goto	l8124
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;sort.c: 328: count_pop_no_tab++;
  5697  001A4C  0101               	movlb	1	; () banked
  5698  001A4E  4B2F               	infsnz	_count_pop_no_tab& (0+255),f,b
  5699  001A50  2B30               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5700                           
  5701                           ; BSR set to: 1
  5702                           ;sort.c: 329: cur_can = 0;
  5703  001A52  0E00               	movlw	0
  5704  001A54  0101               	movlb	1	; () banked
  5705  001A56  6F34               	movwf	(_cur_can+1)& (0+255),b
  5706  001A58  0E00               	movlw	0
  5707  001A5A  D007               	goto	L8
  5708  001A5C                     l8124:
  5709                           
  5710                           ;sort.c: 331: else{
  5711                           ;sort.c: 332: count_pop_w_tab++;
  5712  001A5C  0101               	movlb	1	; () banked
  5713  001A5E  4B31               	infsnz	_count_pop_w_tab& (0+255),f,b
  5714  001A60  2B32               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5715                           
  5716                           ; BSR set to: 1
  5717                           ;sort.c: 333: cur_can = 1;
  5718  001A62  0E00               	movlw	0
  5719  001A64  0101               	movlb	1	; () banked
  5720  001A66  6F34               	movwf	(_cur_can+1)& (0+255),b
  5721  001A68  0E01               	movlw	1
  5722  001A6A                     L8:
  5723  001A6A  6F33               	movwf	_cur_can& (0+255),b
  5724  001A6C                     l8128:
  5725                           
  5726                           ;sort.c: 334: }
  5727                           ;sort.c: 335: }
  5728                           ;sort.c: 336: if(sensor_outputs[0]){
  5729  001A6C  0100               	movlb	0	; () banked
  5730  001A6E  51DA               	movf	_sensor_outputs& (0+255),w,b
  5731  001A70  0100               	movlb	0	; () banked
  5732  001A72  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5733  001A74  B4D8               	btfsc	status,2,c
  5734  001A76  D016               	goto	l8140
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;sort.c: 337: if(!sensor_outputs[1]){
  5738  001A78  0100               	movlb	0	; () banked
  5739  001A7A  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5740  001A7C  0100               	movlb	0	; () banked
  5741  001A7E  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5742  001A80  A4D8               	btfss	status,2,c
  5743  001A82  D008               	goto	l8136
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;sort.c: 338: count_can_w_lab++;
  5747  001A84  0101               	movlb	1	; () banked
  5748  001A86  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  5749  001A88  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5750                           
  5751                           ; BSR set to: 1
  5752                           ;sort.c: 339: cur_can = 2;
  5753  001A8A  0E00               	movlw	0
  5754  001A8C  0101               	movlb	1	; () banked
  5755  001A8E  6F34               	movwf	(_cur_can+1)& (0+255),b
  5756  001A90  0E02               	movlw	2
  5757  001A92  D007               	goto	L9
  5758  001A94                     l8136:
  5759                           
  5760                           ;sort.c: 341: else{
  5761                           ;sort.c: 342: count_can_no_lab++;
  5762  001A94  0101               	movlb	1	; () banked
  5763  001A96  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  5764  001A98  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5765                           
  5766                           ; BSR set to: 1
  5767                           ;sort.c: 343: cur_can = 3;
  5768  001A9A  0E00               	movlw	0
  5769  001A9C  0101               	movlb	1	; () banked
  5770  001A9E  6F34               	movwf	(_cur_can+1)& (0+255),b
  5771  001AA0  0E03               	movlw	3
  5772  001AA2                     L9:
  5773  001AA2  6F33               	movwf	_cur_can& (0+255),b
  5774  001AA4                     l8140:
  5775                           
  5776                           ;sort.c: 344: }
  5777                           ;sort.c: 345: }
  5778                           ;sort.c: 347: if(debug){
  5779  001AA4  0100               	movlb	0	; () banked
  5780  001AA6  51E8               	movf	_debug& (0+255),w,b
  5781  001AA8  0100               	movlb	0	; () banked
  5782  001AAA  11E9               	iorwf	(_debug+1)& (0+255),w,b
  5783  001AAC  B4D8               	btfsc	status,2,c
  5784  001AAE  D01F               	goto	l8150
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;sort.c: 348: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5788  001AB0  0E01               	movlw	1
  5789  001AB2  ECEF  F02D         	call	_lcdInst
  5790  001AB6  0E68               	movlw	104
  5791  001AB8  0100               	movlb	0	; () banked
  5792  001ABA  6FAB               	movwf	??_ID& (0+255),b
  5793  001ABC  0EE4               	movlw	228
  5794  001ABE                     u10037:
  5795  001ABE  2EE8               	decfsz	wreg,f,c
  5796  001AC0  D7FE               	bra	u10037
  5797  001AC2  2FAB               	decfsz	??_ID& (0+255),f,b
  5798  001AC4  D7FC               	bra	u10037
  5799  001AC6  F000               	nop	
  5800  001AC8  0E80               	movlw	128
  5801  001ACA  ECEF  F02D         	call	_lcdInst
  5802                           
  5803                           ;sort.c: 349: printf("            F%dL%d", res1, res2);
  5804  001ACE  0ED3               	movlw	low STR_64
  5805  001AD0  0100               	movlb	0	; () banked
  5806  001AD2  6F8E               	movwf	printf@f& (0+255),b
  5807  001AD4  0EFA               	movlw	high STR_64
  5808  001AD6  0100               	movlb	0	; () banked
  5809  001AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5810  001ADA  C0BC  F090         	movff	ID@res1,?_printf+2
  5811  001ADE  C0BD  F091         	movff	ID@res1+1,?_printf+3
  5812  001AE2  C0BE  F092         	movff	ID@res2,?_printf+4
  5813  001AE6  C0BF  F093         	movff	ID@res2+1,?_printf+5
  5814  001AEA  ECED  F00D         	call	_printf	;wreg free
  5815  001AEE                     l8150:
  5816  001AEE  0101               	movlb	1	; () banked
  5817  001AF0  513B               	movf	_f_can_distributed& (0+255),w,b
  5818  001AF2  0101               	movlb	1	; () banked
  5819  001AF4  113C               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5820  001AF6  B4D8               	btfsc	status,2,c
  5821  001AF8  D7FA               	goto	l8150
  5822                           
  5823                           ; BSR set to: 1
  5824                           ;sort.c: 354: for(int i=0;i<10000;i++)
  5825                           
  5826                           ; BSR set to: 1
  5827  001AFA  0E00               	movlw	0
  5828  001AFC  0100               	movlb	0	; () banked
  5829  001AFE  6FB8               	movwf	(ID@i_1147+1)& (0+255),b
  5830  001B00  0E00               	movlw	0
  5831  001B02  6FB7               	movwf	ID@i_1147& (0+255),b
  5832  001B04                     l8154:
  5833                           
  5834                           ; BSR set to: 0
  5835  001B04  0100               	movlb	0	; () banked
  5836  001B06  BFB8               	btfsc	(ID@i_1147+1)& (0+255),7,b
  5837  001B08  D008               	goto	l867
  5838  001B0A  0E10               	movlw	16
  5839  001B0C  0100               	movlb	0	; () banked
  5840  001B0E  5DB7               	subwf	ID@i_1147& (0+255),w,b
  5841  001B10  0E27               	movlw	39
  5842  001B12  0100               	movlb	0	; () banked
  5843  001B14  59B8               	subwfb	(ID@i_1147+1)& (0+255),w,b
  5844  001B16  B0D8               	btfsc	status,0,c
  5845  001B18  D00D               	goto	l868
  5846  001B1A                     l867:
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;sort.c: 355: {
  5850                           ;sort.c: 356: LATCbits.LATC0 = 1;
  5851  001B1A  808B               	bsf	3979,0,c	;volatile
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;sort.c: 357: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5855  001B1C  0E1A               	movlw	26
  5856  001B1E                     u10047:
  5857  001B1E  2EE8               	decfsz	wreg,f,c
  5858  001B20  D7FE               	bra	u10047
  5859  001B22  D000               	nop2	
  5860                           
  5861                           ;sort.c: 358: LATCbits.LATC0 = 0;
  5862  001B24  908B               	bcf	3979,0,c	;volatile
  5863                           
  5864                           ;sort.c: 359: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5865  001B26  0EF0               	movlw	240
  5866  001B28                     u10057:
  5867  001B28  2EE8               	decfsz	wreg,f,c
  5868  001B2A  D7FE               	bra	u10057
  5869  001B2C  0100               	movlb	0	; () banked
  5870  001B2E  4BB7               	infsnz	ID@i_1147& (0+255),f,b
  5871  001B30  2BB8               	incf	(ID@i_1147+1)& (0+255),f,b
  5872  001B32  D7E8               	goto	l8154
  5873  001B34                     l868:
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;sort.c: 360: }
  5877                           ;sort.c: 362: LATCbits.LATC0 = 0;
  5878  001B34  908B               	bcf	3979,0,c	;volatile
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;sort.c: 364: f_can_coming_to_distribution = 1;
  5882  001B36  0E00               	movlw	0
  5883  001B38  0101               	movlb	1	; () banked
  5884  001B3A  6F3A               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5885  001B3C  0E01               	movlw	1
  5886  001B3E  6F39               	movwf	_f_can_coming_to_distribution& (0+255),b
  5887                           
  5888                           ; BSR set to: 1
  5889                           ;sort.c: 365: _delay((unsigned long)((750)*(32000000/4000.0)));
  5890  001B40  0E1F               	movlw	31
  5891  001B42  0100               	movlb	0	; () banked
  5892  001B44  6FAC               	movwf	(??_ID+1)& (0+255),b
  5893  001B46  0E71               	movlw	113
  5894  001B48  0100               	movlb	0	; () banked
  5895  001B4A  6FAB               	movwf	??_ID& (0+255),b
  5896  001B4C  0E1E               	movlw	30
  5897  001B4E                     u10067:
  5898  001B4E  2EE8               	decfsz	wreg,f,c
  5899  001B50  D7FE               	bra	u10067
  5900  001B52  2FAB               	decfsz	??_ID& (0+255),f,b
  5901  001B54  D7FC               	bra	u10067
  5902  001B56  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5903  001B58  D7FA               	bra	u10067
  5904  001B5A  F000               	nop	
  5905                           
  5906                           ;sort.c: 366: LATCbits.LATC0 = 1;
  5907  001B5C  808B               	bsf	3979,0,c	;volatile
  5908                           
  5909                           ;sort.c: 369: if(!f_lastCan){
  5910  001B5E  0100               	movlb	0	; () banked
  5911  001B60  51EC               	movf	_f_lastCan& (0+255),w,b
  5912  001B62  0100               	movlb	0	; () banked
  5913  001B64  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5914  001B66  A4D8               	btfss	status,2,c
  5915  001B68  D032               	goto	l8186
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;sort.c: 370: for(int i=0; i<46; i++){
  5919  001B6A  0E00               	movlw	0
  5920  001B6C  0100               	movlb	0	; () banked
  5921  001B6E  6FBA               	movwf	(ID@i_1148+1)& (0+255),b
  5922  001B70  0E00               	movlw	0
  5923  001B72  6FB9               	movwf	ID@i_1148& (0+255),b
  5924                           
  5925                           ; BSR set to: 0
  5926  001B74  0100               	movlb	0	; () banked
  5927  001B76  BFBA               	btfsc	(ID@i_1148+1)& (0+255),7,b
  5928  001B78  D008               	goto	l8178
  5929  001B7A  0100               	movlb	0	; () banked
  5930  001B7C  51BA               	movf	(ID@i_1148+1)& (0+255),w,b
  5931  001B7E  E126               	bnz	l871
  5932  001B80  0E2E               	movlw	46
  5933  001B82  0100               	movlb	0	; () banked
  5934  001B84  5DB9               	subwf	ID@i_1148& (0+255),w,b
  5935  001B86  B0D8               	btfsc	status,0,c
  5936  001B88  D021               	goto	l871
  5937  001B8A                     l8178:
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;sort.c: 371: LATBbits.LATB2 = !LATBbits.LATB2;
  5941  001B8A  B48A               	btfsc	3978,2,c	;volatile
  5942  001B8C  D004               	goto	u7010
  5943  001B8E  0100               	movlb	0	; () banked
  5944  001B90  6BAB               	clrf	??_ID& (0+255),b
  5945  001B92  2BAB               	incf	??_ID& (0+255),f,b
  5946  001B94  D002               	goto	u7028
  5947  001B96                     u7010:
  5948  001B96  0100               	movlb	0	; () banked
  5949  001B98  6BAB               	clrf	??_ID& (0+255),b
  5950  001B9A                     u7028:
  5951  001B9A  0100               	movlb	0	; () banked
  5952  001B9C  47AB               	rlncf	??_ID& (0+255),f,b
  5953  001B9E  47AB               	rlncf	??_ID& (0+255),f,b
  5954  001BA0  508A               	movf	3978,w,c	;volatile
  5955  001BA2  0100               	movlb	0	; () banked
  5956  001BA4  19AB               	xorwf	??_ID& (0+255),w,b
  5957  001BA6  0BFB               	andlw	-5
  5958  001BA8  19AB               	xorwf	??_ID& (0+255),w,b
  5959  001BAA  6E8A               	movwf	3978,c	;volatile
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;sort.c: 372: delay_ms(45-i);
  5963  001BAC  0100               	movlb	0	; () banked
  5964  001BAE  51B9               	movf	ID@i_1148& (0+255),w,b
  5965  001BB0  0800               	sublw	0
  5966  001BB2  0F2D               	addlw	45
  5967  001BB4  EC05  F02D         	call	_delay_ms
  5968  001BB8  0100               	movlb	0	; () banked
  5969  001BBA  4BB9               	infsnz	ID@i_1148& (0+255),f,b
  5970  001BBC  2BBA               	incf	(ID@i_1148+1)& (0+255),f,b
  5971                           
  5972                           ; BSR set to: 0
  5973  001BBE  0100               	movlb	0	; () banked
  5974  001BC0  BFBA               	btfsc	(ID@i_1148+1)& (0+255),7,b
  5975  001BC2  D7E3               	goto	l8178
  5976  001BC4  0100               	movlb	0	; () banked
  5977  001BC6  51BA               	movf	(ID@i_1148+1)& (0+255),w,b
  5978  001BC8  E101               	bnz	u7030
  5979  001BCA  D7DA               	goto	L10
  5980  001BCC                     u7030:
  5981  001BCC                     l871:
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;sort.c: 373: }
  5985                           ;sort.c: 374: LATBbits.LATB2 = 1;
  5986  001BCC  848A               	bsf	3978,2,c	;volatile
  5987  001BCE                     l8186:
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;sort.c: 375: }
  5991                           ;sort.c: 377: f_can_coming_to_ID = 0;
  5992  001BCE  0E00               	movlw	0
  5993  001BD0  0101               	movlb	1	; () banked
  5994  001BD2  6F38               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5995  001BD4  0E00               	movlw	0
  5996  001BD6  6F37               	movwf	_f_can_coming_to_ID& (0+255),b
  5997  001BD8  0012               	return	
  5998  001BDA                     __end_of_ID:
  5999                           	opt stack 0
  6000                           tblptru	equ	0xFF8
  6001                           tblptrh	equ	0xFF7
  6002                           tblptrl	equ	0xFF6
  6003                           tablat	equ	0xFF5
  6004                           prodh	equ	0xFF4
  6005                           prodl	equ	0xFF3
  6006                           postinc0	equ	0xFEE
  6007                           wreg	equ	0xFE8
  6008                           postdec1	equ	0xFE5
  6009                           fsr1l	equ	0xFE1
  6010                           indf2	equ	0xFDF
  6011                           postinc2	equ	0xFDE
  6012                           postdec2	equ	0xFDD
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8
  6016                           
  6017 ;; *************** function _readCOND *****************
  6018 ;; Defined at:
  6019 ;;		line 35 in file "ADCFunctionality.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;		None
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;  res             2    4[BANK0 ] int 
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      void 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;Total ram usage:        4 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    8
  6040 ;; This function calls:
  6041 ;;		_readADC
  6042 ;; This function is called by:
  6043 ;;		_ID
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text9
  6048  00546E                     __ptext9:
  6049                           	opt stack 0
  6050  00546E                     _readCOND:
  6051                           	opt stack 20
  6052                           
  6053                           ;ADCFunctionality.c: 36: readADC(2);
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;incstack = 0
  6057  00546E  0E02               	movlw	2
  6058  005470  ECDA  F02C         	call	_readADC
  6059                           
  6060                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  6061  005474  50C3               	movf	4035,w,c	;volatile
  6062  005476  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6063  00547A  0100               	movlb	0	; () banked
  6064  00547C  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6065  00547E  C082  F083         	movff	??_readCOND,??_readCOND+1
  6066  005482  0100               	movlb	0	; () banked
  6067  005484  6B82               	clrf	??_readCOND& (0+255),b
  6068  005486  0100               	movlb	0	; () banked
  6069  005488  1182               	iorwf	??_readCOND& (0+255),w,b
  6070  00548A  0100               	movlb	0	; () banked
  6071  00548C  6F84               	movwf	readCOND@res& (0+255),b
  6072  00548E  0100               	movlb	0	; () banked
  6073  005490  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6074  005492  0100               	movlb	0	; () banked
  6075  005494  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6079  005496  0100               	movlb	0	; () banked
  6080  005498  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6081  00549A  D00A               	goto	u5880
  6082  00549C  0E2D               	movlw	45
  6083  00549E  0100               	movlb	0	; () banked
  6084  0054A0  5D84               	subwf	readCOND@res& (0+255),w,b
  6085  0054A2  0E01               	movlw	1
  6086  0054A4  0100               	movlb	0	; () banked
  6087  0054A6  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6088  0054A8  A0D8               	btfss	status,0,c
  6089  0054AA  D002               	goto	u5880
  6090  0054AC  0E01               	movlw	1
  6091  0054AE  D001               	goto	u5890
  6092  0054B0                     u5880:
  6093  0054B0  0E00               	movlw	0
  6094  0054B2                     u5890:
  6095  0054B2  0100               	movlb	0	; () banked
  6096  0054B4  6FDE               	movwf	_COND_signal& (0+255),b
  6097  0054B6  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6098                           
  6099                           ; BSR set to: 0
  6100  0054B8  0012               	return		;funcret
  6101  0054BA                     __end_of_readCOND:
  6102                           	opt stack 0
  6103                           tblptru	equ	0xFF8
  6104                           tblptrh	equ	0xFF7
  6105                           tblptrl	equ	0xFF6
  6106                           tablat	equ	0xFF5
  6107                           prodh	equ	0xFF4
  6108                           prodl	equ	0xFF3
  6109                           postinc0	equ	0xFEE
  6110                           wreg	equ	0xFE8
  6111                           postdec1	equ	0xFE5
  6112                           fsr1l	equ	0xFE1
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8
  6119                           
  6120 ;; *************** function _delay_ms *****************
  6121 ;; Defined at:
  6122 ;;		line 660 in file "sort.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  milliseconds    1    wreg     unsigned char 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  1    wreg      void 
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;Total ram usage:        2 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    7
  6143 ;; This function calls:
  6144 ;;		Nothing
  6145 ;; This function is called by:
  6146 ;;		_Loading
  6147 ;;		_ID
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           	psect	text10
  6152  005A0A                     __ptext10:
  6153                           	opt stack 0
  6154  005A0A                     _delay_ms:
  6155                           	opt stack 21
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;incstack = 0
  6159                           ;delay_ms@milliseconds stored from wreg
  6160  005A0A  0100               	movlb	0	; () banked
  6161  005A0C  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6162                           
  6163                           ;sort.c: 661: while(milliseconds > 0)
  6164  005A0E  D00B               	goto	l7392
  6165  005A10                     l7388:
  6166                           
  6167                           ;sort.c: 662: {
  6168                           ;sort.c: 663: milliseconds--;
  6169  005A10  0100               	movlb	0	; () banked
  6170  005A12  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;sort.c: 664: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6174  005A14  0E0B               	movlw	11
  6175  005A16  0100               	movlb	0	; () banked
  6176  005A18  6F80               	movwf	??_delay_ms& (0+255),b
  6177  005A1A  0E47               	movlw	71
  6178  005A1C                     u10077:
  6179  005A1C  2EE8               	decfsz	wreg,f,c
  6180  005A1E  D7FE               	bra	u10077
  6181  005A20  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6182  005A22  D7FC               	bra	u10077
  6183  005A24  D000               	nop2	
  6184  005A26                     l7392:
  6185  005A26  0100               	movlb	0	; () banked
  6186  005A28  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6187  005A2A  0100               	movlb	0	; () banked
  6188  005A2C  B4D8               	btfsc	status,2,c
  6189  005A2E  0012               	return	
  6190  005A30  D7EF               	goto	l7388
  6191  005A32                     __end_of_delay_ms:
  6192                           	opt stack 0
  6193                           tblptru	equ	0xFF8
  6194                           tblptrh	equ	0xFF7
  6195                           tblptrl	equ	0xFF6
  6196                           tablat	equ	0xFF5
  6197                           prodh	equ	0xFF4
  6198                           prodl	equ	0xFF3
  6199                           postinc0	equ	0xFEE
  6200                           wreg	equ	0xFE8
  6201                           postdec1	equ	0xFE5
  6202                           fsr1l	equ	0xFE1
  6203                           indf2	equ	0xFDF
  6204                           postinc2	equ	0xFDE
  6205                           postdec2	equ	0xFDD
  6206                           fsr2h	equ	0xFDA
  6207                           fsr2l	equ	0xFD9
  6208                           status	equ	0xFD8
  6209                           
  6210 ;; *************** function ___ftge *****************
  6211 ;; Defined at:
  6212 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  ff1             3   18[BANK0 ] float 
  6215 ;;  ff2             3   21[BANK0 ] float 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;		None               void
  6220 ;; Registers used:
  6221 ;;		wreg, status,2, status,0
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6227 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;Total ram usage:        9 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    7
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_ID
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           	psect	text11
  6242  004832                     __ptext11:
  6243                           	opt stack 0
  6244  004832                     ___ftge:
  6245                           	opt stack 21
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;incstack = 0
  6249  004832  0100               	movlb	0	; () banked
  6250  004834  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6251  004836  D01D               	goto	l7510
  6252                           
  6253                           ; BSR set to: 0
  6254  004838  C092  F098         	movff	___ftge@ff1,??___ftge
  6255  00483C  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6256  004840  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6257  004844  0100               	movlb	0	; () banked
  6258  004846  1F98               	comf	??___ftge& (0+255),f,b
  6259  004848  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6260  00484A  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6261  00484C  2B98               	incf	??___ftge& (0+255),f,b
  6262  00484E  0E00               	movlw	0
  6263  004850  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6264  004852  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6265  004854  0E00               	movlw	0
  6266  004856  0100               	movlb	0	; () banked
  6267  004858  2598               	addwf	??___ftge& (0+255),w,b
  6268  00485A  0100               	movlb	0	; () banked
  6269  00485C  6F92               	movwf	___ftge@ff1& (0+255),b
  6270  00485E  0E00               	movlw	0
  6271  004860  0100               	movlb	0	; () banked
  6272  004862  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6273  004864  0100               	movlb	0	; () banked
  6274  004866  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6275  004868  0E80               	movlw	128
  6276  00486A  0100               	movlb	0	; () banked
  6277  00486C  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6278  00486E  0100               	movlb	0	; () banked
  6279  004870  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6280  004872                     l7510:
  6281                           
  6282                           ; BSR set to: 0
  6283  004872  0100               	movlb	0	; () banked
  6284  004874  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6285  004876  D01D               	goto	l7514
  6286                           
  6287                           ; BSR set to: 0
  6288  004878  C095  F098         	movff	___ftge@ff2,??___ftge
  6289  00487C  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6290  004880  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6291  004884  0100               	movlb	0	; () banked
  6292  004886  1F98               	comf	??___ftge& (0+255),f,b
  6293  004888  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6294  00488A  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6295  00488C  2B98               	incf	??___ftge& (0+255),f,b
  6296  00488E  0E00               	movlw	0
  6297  004890  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6298  004892  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6299  004894  0E00               	movlw	0
  6300  004896  0100               	movlb	0	; () banked
  6301  004898  2598               	addwf	??___ftge& (0+255),w,b
  6302  00489A  0100               	movlb	0	; () banked
  6303  00489C  6F95               	movwf	___ftge@ff2& (0+255),b
  6304  00489E  0E00               	movlw	0
  6305  0048A0  0100               	movlb	0	; () banked
  6306  0048A2  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6307  0048A4  0100               	movlb	0	; () banked
  6308  0048A6  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6309  0048A8  0E80               	movlw	128
  6310  0048AA  0100               	movlb	0	; () banked
  6311  0048AC  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6312  0048AE  0100               	movlb	0	; () banked
  6313  0048B0  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6314  0048B2                     l7514:
  6315                           
  6316                           ; BSR set to: 0
  6317  0048B2  0E00               	movlw	0
  6318  0048B4  0100               	movlb	0	; () banked
  6319  0048B6  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6320  0048B8  0E00               	movlw	0
  6321  0048BA  0100               	movlb	0	; () banked
  6322  0048BC  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6323  0048BE  0E80               	movlw	128
  6324  0048C0  0100               	movlb	0	; () banked
  6325  0048C2  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6326                           
  6327                           ; BSR set to: 0
  6328  0048C4  0E00               	movlw	0
  6329  0048C6  0100               	movlb	0	; () banked
  6330  0048C8  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6331  0048CA  0E00               	movlw	0
  6332  0048CC  0100               	movlb	0	; () banked
  6333  0048CE  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6334  0048D0  0E80               	movlw	128
  6335  0048D2  0100               	movlb	0	; () banked
  6336  0048D4  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6337  0048D6  0100               	movlb	0	; () banked
  6338  0048D8  5195               	movf	___ftge@ff2& (0+255),w,b
  6339  0048DA  0100               	movlb	0	; () banked
  6340  0048DC  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6341  0048DE  0100               	movlb	0	; () banked
  6342  0048E0  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6343  0048E2  0100               	movlb	0	; () banked
  6344  0048E4  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6345  0048E6  0100               	movlb	0	; () banked
  6346  0048E8  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6347  0048EA  0100               	movlb	0	; () banked
  6348  0048EC  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6349  0048EE  B0D8               	btfsc	status,0,c
  6350  0048F0  D002               	goto	l7520
  6351                           
  6352                           ; BSR set to: 0
  6353  0048F2  90D8               	bcf	status,0,c
  6354  0048F4  0012               	return	
  6355  0048F6                     l7520:
  6356                           
  6357                           ; BSR set to: 0
  6358  0048F6  80D8               	bsf	status,0,c
  6359                           
  6360                           ; BSR set to: 0
  6361  0048F8  0012               	return	
  6362  0048FA                     __end_of___ftge:
  6363                           	opt stack 0
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           postinc0	equ	0xFEE
  6371                           wreg	equ	0xFE8
  6372                           postdec1	equ	0xFE5
  6373                           fsr1l	equ	0xFE1
  6374                           indf2	equ	0xFDF
  6375                           postinc2	equ	0xFDE
  6376                           postdec2	equ	0xFDD
  6377                           fsr2h	equ	0xFDA
  6378                           fsr2l	equ	0xFD9
  6379                           status	equ	0xFD8
  6380                           
  6381 ;; *************** function ___awtoft *****************
  6382 ;; Defined at:
  6383 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  c               2   14[BANK0 ] int 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  sign            1   17[BANK0 ] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  3   14[BANK0 ] float 
  6390 ;; Registers used:
  6391 ;;		wreg, status,2, status,0, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6397 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;Total ram usage:        4 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    8
  6404 ;; This function calls:
  6405 ;;		___ftpack
  6406 ;; This function is called by:
  6407 ;;		_ID
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text12
  6412  00554C                     __ptext12:
  6413                           	opt stack 0
  6414  00554C                     ___awtoft:
  6415                           	opt stack 20
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;incstack = 0
  6419  00554C  0E00               	movlw	0
  6420  00554E  0100               	movlb	0	; () banked
  6421  005550  6F91               	movwf	___awtoft@sign& (0+255),b
  6422                           
  6423                           ; BSR set to: 0
  6424  005552  0100               	movlb	0	; () banked
  6425  005554  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6426  005556  D008               	goto	l7502
  6427                           
  6428                           ; BSR set to: 0
  6429  005558  0100               	movlb	0	; () banked
  6430  00555A  6D8E               	negf	___awtoft@c& (0+255),b
  6431  00555C  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6432  00555E  B0D8               	btfsc	status,0,c
  6433  005560  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6434                           
  6435                           ; BSR set to: 0
  6436  005562  0E01               	movlw	1
  6437  005564  0100               	movlb	0	; () banked
  6438  005566  6F91               	movwf	___awtoft@sign& (0+255),b
  6439  005568                     l7502:
  6440                           
  6441                           ; BSR set to: 0
  6442  005568  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6443  00556C  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6444  005570  0100               	movlb	0	; () banked
  6445  005572  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6446  005574  0E8E               	movlw	142
  6447  005576  0100               	movlb	0	; () banked
  6448  005578  6F83               	movwf	___ftpack@exp& (0+255),b
  6449  00557A  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6450  00557E  ECDD  F020         	call	___ftpack	;wreg free
  6451  005582  C080  F08E         	movff	?___ftpack,?___awtoft
  6452  005586  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6453  00558A  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6454  00558E  0012               	return	
  6455  005590                     __end_of___awtoft:
  6456                           	opt stack 0
  6457                           tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           postinc0	equ	0xFEE
  6464                           wreg	equ	0xFE8
  6465                           postdec1	equ	0xFE5
  6466                           fsr1l	equ	0xFE1
  6467                           indf2	equ	0xFDF
  6468                           postinc2	equ	0xFDE
  6469                           postdec2	equ	0xFDD
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function ___ftpack *****************
  6475 ;; Defined at:
  6476 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  arg             3    0[BANK0 ] unsigned um
  6479 ;;  exp             1    3[BANK0 ] unsigned char 
  6480 ;;  sign            1    4[BANK0 ] unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;		None
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  3    0[BANK0 ] float 
  6485 ;; Registers used:
  6486 ;;		wreg, status,2, status,0
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6492 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;Total ram usage:        8 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    7
  6499 ;; This function calls:
  6500 ;;		Nothing
  6501 ;; This function is called by:
  6502 ;;		___awtoft
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           	psect	text13
  6507  0041BA                     __ptext13:
  6508                           	opt stack 0
  6509  0041BA                     ___ftpack:
  6510                           	opt stack 20
  6511                           
  6512                           ;incstack = 0
  6513  0041BA  0100               	movlb	0	; () banked
  6514  0041BC  5183               	movf	___ftpack@exp& (0+255),w,b
  6515  0041BE  0100               	movlb	0	; () banked
  6516  0041C0  B4D8               	btfsc	status,2,c
  6517  0041C2  D008               	goto	l6886
  6518                           
  6519                           ; BSR set to: 0
  6520  0041C4  0100               	movlb	0	; () banked
  6521  0041C6  5180               	movf	___ftpack@arg& (0+255),w,b
  6522  0041C8  0100               	movlb	0	; () banked
  6523  0041CA  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6524  0041CC  0100               	movlb	0	; () banked
  6525  0041CE  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6526  0041D0  A4D8               	btfss	status,2,c
  6527  0041D2  D011               	goto	l6892
  6528  0041D4                     l6886:
  6529                           
  6530                           ; BSR set to: 0
  6531  0041D4  0E00               	movlw	0
  6532  0041D6  0100               	movlb	0	; () banked
  6533  0041D8  6F80               	movwf	?___ftpack& (0+255),b
  6534  0041DA  0E00               	movlw	0
  6535  0041DC  0100               	movlb	0	; () banked
  6536  0041DE  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6537  0041E0  0E00               	movlw	0
  6538  0041E2  0100               	movlb	0	; () banked
  6539  0041E4  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6540                           
  6541                           ; BSR set to: 0
  6542  0041E6  0012               	return	
  6543  0041E8                     l6890:
  6544                           
  6545                           ; BSR set to: 0
  6546  0041E8  0100               	movlb	0	; () banked
  6547  0041EA  2B83               	incf	___ftpack@exp& (0+255),f,b
  6548  0041EC  0100               	movlb	0	; () banked
  6549  0041EE  90D8               	bcf	status,0,c
  6550  0041F0  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6551  0041F2  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6552  0041F4  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6553  0041F6                     l6892:
  6554                           
  6555                           ; BSR set to: 0
  6556  0041F6  0E00               	movlw	0
  6557  0041F8  0100               	movlb	0	; () banked
  6558  0041FA  1580               	andwf	___ftpack@arg& (0+255),w,b
  6559  0041FC  0100               	movlb	0	; () banked
  6560  0041FE  6F85               	movwf	??___ftpack& (0+255),b
  6561  004200  0E00               	movlw	0
  6562  004202  0100               	movlb	0	; () banked
  6563  004204  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6564  004206  0100               	movlb	0	; () banked
  6565  004208  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6566  00420A  0EFE               	movlw	254
  6567  00420C  0100               	movlb	0	; () banked
  6568  00420E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6569  004210  0100               	movlb	0	; () banked
  6570  004212  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6571  004214  0100               	movlb	0	; () banked
  6572  004216  5185               	movf	??___ftpack& (0+255),w,b
  6573  004218  0100               	movlb	0	; () banked
  6574  00421A  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6575  00421C  0100               	movlb	0	; () banked
  6576  00421E  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6577  004220  B4D8               	btfsc	status,2,c
  6578  004222  D011               	goto	l6898
  6579  004224  D7E1               	goto	l6890
  6580  004226                     l6894:
  6581                           
  6582                           ; BSR set to: 0
  6583  004226  0100               	movlb	0	; () banked
  6584  004228  2B83               	incf	___ftpack@exp& (0+255),f,b
  6585                           
  6586                           ; BSR set to: 0
  6587  00422A  0E01               	movlw	1
  6588  00422C  0100               	movlb	0	; () banked
  6589  00422E  2780               	addwf	___ftpack@arg& (0+255),f,b
  6590  004230  0E00               	movlw	0
  6591  004232  0100               	movlb	0	; () banked
  6592  004234  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6593  004236  0E00               	movlw	0
  6594  004238  0100               	movlb	0	; () banked
  6595  00423A  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6596  00423C  0100               	movlb	0	; () banked
  6597  00423E  90D8               	bcf	status,0,c
  6598  004240  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6599  004242  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6600  004244  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6601  004246                     l6898:
  6602                           
  6603                           ; BSR set to: 0
  6604  004246  0E00               	movlw	0
  6605  004248  0100               	movlb	0	; () banked
  6606  00424A  1580               	andwf	___ftpack@arg& (0+255),w,b
  6607  00424C  0100               	movlb	0	; () banked
  6608  00424E  6F85               	movwf	??___ftpack& (0+255),b
  6609  004250  0E00               	movlw	0
  6610  004252  0100               	movlb	0	; () banked
  6611  004254  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6612  004256  0100               	movlb	0	; () banked
  6613  004258  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6614  00425A  0EFF               	movlw	255
  6615  00425C  0100               	movlb	0	; () banked
  6616  00425E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6617  004260  0100               	movlb	0	; () banked
  6618  004262  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6619  004264  0100               	movlb	0	; () banked
  6620  004266  5185               	movf	??___ftpack& (0+255),w,b
  6621  004268  0100               	movlb	0	; () banked
  6622  00426A  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6623  00426C  0100               	movlb	0	; () banked
  6624  00426E  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6625  004270  B4D8               	btfsc	status,2,c
  6626  004272  D008               	goto	l6902
  6627  004274  D7D8               	goto	l6894
  6628  004276                     l6900:
  6629                           
  6630                           ; BSR set to: 0
  6631  004276  0100               	movlb	0	; () banked
  6632  004278  0783               	decf	___ftpack@exp& (0+255),f,b
  6633  00427A  0100               	movlb	0	; () banked
  6634  00427C  90D8               	bcf	status,0,c
  6635  00427E  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6636  004280  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6637  004282  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6638  004284                     l6902:
  6639                           
  6640                           ; BSR set to: 0
  6641  004284  0100               	movlb	0	; () banked
  6642  004286  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6643  004288  D004               	goto	l1784
  6644                           
  6645                           ; BSR set to: 0
  6646  00428A  0E02               	movlw	2
  6647  00428C  0100               	movlb	0	; () banked
  6648  00428E  6183               	cpfslt	___ftpack@exp& (0+255),b
  6649  004290  D7F2               	goto	l6900
  6650  004292                     l1784:
  6651                           
  6652                           ; BSR set to: 0
  6653  004292  0100               	movlb	0	; () banked
  6654  004294  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6655  004296  D002               	goto	l6908
  6656                           
  6657                           ; BSR set to: 0
  6658  004298  0100               	movlb	0	; () banked
  6659  00429A  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6660  00429C                     l6908:
  6661                           
  6662                           ; BSR set to: 0
  6663  00429C  0100               	movlb	0	; () banked
  6664  00429E  90D8               	bcf	status,0,c
  6665  0042A0  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6666  0042A2  0100               	movlb	0	; () banked
  6667  0042A4  5183               	movf	___ftpack@exp& (0+255),w,b
  6668  0042A6  0100               	movlb	0	; () banked
  6669  0042A8  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 0
  6672  0042AA  0100               	movlb	0	; () banked
  6673  0042AC  5184               	movf	___ftpack@sign& (0+255),w,b
  6674  0042AE  0100               	movlb	0	; () banked
  6675  0042B0  B4D8               	btfsc	status,2,c
  6676  0042B2  D002               	goto	l6914
  6677                           
  6678                           ; BSR set to: 0
  6679  0042B4  0100               	movlb	0	; () banked
  6680  0042B6  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6681  0042B8                     l6914:
  6682                           
  6683                           ; BSR set to: 0
  6684  0042B8  C080  F080         	movff	___ftpack@arg,?___ftpack
  6685  0042BC  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6686  0042C0  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6687  0042C4  0012               	return	
  6688  0042C6                     __end_of___ftpack:
  6689                           	opt stack 0
  6690                           tblptru	equ	0xFF8
  6691                           tblptrh	equ	0xFF7
  6692                           tblptrl	equ	0xFF6
  6693                           tablat	equ	0xFF5
  6694                           prodh	equ	0xFF4
  6695                           prodl	equ	0xFF3
  6696                           postinc0	equ	0xFEE
  6697                           wreg	equ	0xFE8
  6698                           postdec1	equ	0xFE5
  6699                           fsr1l	equ	0xFE1
  6700                           indf2	equ	0xFDF
  6701                           postinc2	equ	0xFDE
  6702                           postdec2	equ	0xFDD
  6703                           fsr2h	equ	0xFDA
  6704                           fsr2l	equ	0xFD9
  6705                           status	equ	0xFD8
  6706                           
  6707 ;; *************** function _Distribution *****************
  6708 ;; Defined at:
  6709 ;;		line 380 in file "sort.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;Total ram usage:        2 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    8
  6730 ;; This function calls:
  6731 ;;		_updateServoPosition
  6732 ;; This function is called by:
  6733 ;;		_sort
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           	psect	text14
  6738  0045B2                     __ptext14:
  6739                           	opt stack 0
  6740  0045B2                     _Distribution:
  6741                           	opt stack 21
  6742                           
  6743                           ;sort.c: 381: if(f_can_coming_to_distribution){
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;incstack = 0
  6747  0045B2  0101               	movlb	1	; () banked
  6748  0045B4  5139               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6749  0045B6  0101               	movlb	1	; () banked
  6750  0045B8  113A               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6751  0045BA  B4D8               	btfsc	status,2,c
  6752  0045BC  0012               	return	
  6753                           
  6754                           ; BSR set to: 1
  6755                           ;sort.c: 382: f_can_distributed = 0;
  6756  0045BE  0E00               	movlw	0
  6757  0045C0  0101               	movlb	1	; () banked
  6758  0045C2  6F3C               	movwf	(_f_can_distributed+1)& (0+255),b
  6759  0045C4  0E00               	movlw	0
  6760  0045C6  6F3B               	movwf	_f_can_distributed& (0+255),b
  6761                           
  6762                           ;sort.c: 389: switch(cur_can){
  6763  0045C8  D034               	goto	l8202
  6764  0045CA                     l8192:
  6765                           
  6766                           ;sort.c: 391: updateServoPosition(500, 1);
  6767  0045CA  0E01               	movlw	1
  6768  0045CC  0100               	movlb	0	; () banked
  6769  0045CE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6770  0045D0  0EF4               	movlw	244
  6771  0045D2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6772  0045D4  0E00               	movlw	0
  6773  0045D6  0100               	movlb	0	; () banked
  6774  0045D8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6775  0045DA  0E01               	movlw	1
  6776  0045DC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6777  0045DE  ECC8  F026         	call	_updateServoPosition	;wreg free
  6778                           
  6779                           ;sort.c: 392: break;
  6780  0045E2  D03E               	goto	l8204
  6781  0045E4                     l8194:
  6782                           
  6783                           ;sort.c: 394: updateServoPosition(850, 1);
  6784  0045E4  0E03               	movlw	3
  6785  0045E6  0100               	movlb	0	; () banked
  6786  0045E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6787  0045EA  0E52               	movlw	82
  6788  0045EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6789  0045EE  0E00               	movlw	0
  6790  0045F0  0100               	movlb	0	; () banked
  6791  0045F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6792  0045F4  0E01               	movlw	1
  6793  0045F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6794  0045F8  ECC8  F026         	call	_updateServoPosition	;wreg free
  6795                           
  6796                           ;sort.c: 395: break;
  6797  0045FC  D031               	goto	l8204
  6798  0045FE                     l8196:
  6799                           
  6800                           ;sort.c: 397: updateServoPosition(1670, 1);
  6801  0045FE  0E06               	movlw	6
  6802  004600  0100               	movlb	0	; () banked
  6803  004602  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6804  004604  0E86               	movlw	134
  6805  004606  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6806  004608  0E00               	movlw	0
  6807  00460A  0100               	movlb	0	; () banked
  6808  00460C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6809  00460E  0E01               	movlw	1
  6810  004610  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6811  004612  ECC8  F026         	call	_updateServoPosition	;wreg free
  6812                           
  6813                           ;sort.c: 398: break;
  6814  004616  D024               	goto	l8204
  6815  004618                     l8198:
  6816                           
  6817                           ;sort.c: 400: updateServoPosition(2400, 1);
  6818  004618  0E09               	movlw	9
  6819  00461A  0100               	movlb	0	; () banked
  6820  00461C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6821  00461E  0E60               	movlw	96
  6822  004620  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6823  004622  0E00               	movlw	0
  6824  004624  0100               	movlb	0	; () banked
  6825  004626  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6826  004628  0E01               	movlw	1
  6827  00462A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6828  00462C  ECC8  F026         	call	_updateServoPosition	;wreg free
  6829                           
  6830                           ;sort.c: 404: }
  6831                           
  6832                           ;sort.c: 403: break;
  6833                           
  6834                           ;sort.c: 402: default:
  6835                           
  6836                           ;sort.c: 401: break;
  6837  004630  D017               	goto	l8204
  6838  004632                     l8202:
  6839  004632  C133  F088         	movff	_cur_can,??_Distribution
  6840  004636  C134  F089         	movff	_cur_can+1,??_Distribution+1
  6841                           
  6842                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6843                           ; Switch size 1, requested type "space"
  6844                           ; Number of cases is 1, Range of values is 0 to 0
  6845                           ; switch strategies available:
  6846                           ; Name         Instructions Cycles
  6847                           ; simple_byte            4     3 (average)
  6848                           ;	Chosen strategy is simple_byte
  6849  00463A  0100               	movlb	0	; () banked
  6850  00463C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6851  00463E  0A00               	xorlw	0	; case 0
  6852  004640  A4D8               	btfss	status,2,c
  6853  004642  D00E               	goto	l8204
  6854                           
  6855                           ; BSR set to: 0
  6856                           ; Switch size 1, requested type "space"
  6857                           ; Number of cases is 4, Range of values is 0 to 3
  6858                           ; switch strategies available:
  6859                           ; Name         Instructions Cycles
  6860                           ; simple_byte           13     7 (average)
  6861                           ;	Chosen strategy is simple_byte
  6862  004644  0100               	movlb	0	; () banked
  6863  004646  5188               	movf	??_Distribution& (0+255),w,b
  6864  004648  0A00               	xorlw	0	; case 0
  6865  00464A  B4D8               	btfsc	status,2,c
  6866  00464C  D7BE               	goto	l8192
  6867  00464E  0A01               	xorlw	1	; case 1
  6868  004650  B4D8               	btfsc	status,2,c
  6869  004652  D7C8               	goto	l8194
  6870  004654  0A03               	xorlw	3	; case 2
  6871  004656  B4D8               	btfsc	status,2,c
  6872  004658  D7D2               	goto	l8196
  6873  00465A  0A01               	xorlw	1	; case 3
  6874  00465C  B4D8               	btfsc	status,2,c
  6875  00465E  D7DC               	goto	l8198
  6876  004660                     l8204:
  6877                           
  6878                           ;sort.c: 405: updateServoPosition(1050, 3);
  6879  004660  0E04               	movlw	4
  6880  004662  0100               	movlb	0	; () banked
  6881  004664  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6882  004666  0E1A               	movlw	26
  6883  004668  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6884  00466A  0E00               	movlw	0
  6885  00466C  0100               	movlb	0	; () banked
  6886  00466E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6887  004670  0E03               	movlw	3
  6888  004672  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6889  004674  ECC8  F026         	call	_updateServoPosition	;wreg free
  6890                           
  6891                           ;sort.c: 406: servo_timer_target = 750;
  6892  004678  0E02               	movlw	2
  6893  00467A  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6894  00467C  0EEE               	movlw	238
  6895  00467E  6E6F               	movwf	_servo_timer_target,c	;volatile
  6896                           
  6897                           ;sort.c: 407: f_panning_to_bin = 1;
  6898  004680  0E00               	movlw	0
  6899  004682  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  6900  004684  0E01               	movlw	1
  6901  004686  6E61               	movwf	_f_panning_to_bin,c	;volatile
  6902                           
  6903                           ;sort.c: 408: f_can_coming_to_distribution = 0;
  6904  004688  0E00               	movlw	0
  6905  00468A  0101               	movlb	1	; () banked
  6906  00468C  6F3A               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6907  00468E  0E00               	movlw	0
  6908  004690  6F39               	movwf	_f_can_coming_to_distribution& (0+255),b
  6909  004692  0012               	return	
  6910  004694                     __end_of_Distribution:
  6911                           	opt stack 0
  6912                           tblptru	equ	0xFF8
  6913                           tblptrh	equ	0xFF7
  6914                           tblptrl	equ	0xFF6
  6915                           tablat	equ	0xFF5
  6916                           prodh	equ	0xFF4
  6917                           prodl	equ	0xFF3
  6918                           postinc0	equ	0xFEE
  6919                           wreg	equ	0xFE8
  6920                           postdec1	equ	0xFE5
  6921                           fsr1l	equ	0xFE1
  6922                           indf2	equ	0xFDF
  6923                           postinc2	equ	0xFDE
  6924                           postdec2	equ	0xFDD
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _machineConfig *****************
  6930 ;; Defined at:
  6931 ;;		line 15 in file "MachineConfig.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		wreg, status,2
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;Total ram usage:        0 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    7
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_main
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text15
  6960  00514A                     __ptext15:
  6961                           	opt stack 0
  6962  00514A                     _machineConfig:
  6963                           	opt stack 23
  6964                           
  6965                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6966                           
  6967                           ; BSR set to: 1
  6968                           ;incstack = 0
  6969  00514A  0EF0               	movlw	240
  6970  00514C  6ED3               	movwf	4051,c	;volatile
  6971                           
  6972                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6973  00514E  8C9B               	bsf	3995,6,c	;volatile
  6974                           
  6975                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6976  005150  0E07               	movlw	7
  6977  005152  6E92               	movwf	3986,c	;volatile
  6978                           
  6979                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6980  005154  0EF2               	movlw	242
  6981  005156  6E93               	movwf	3987,c	;volatile
  6982                           
  6983                           ;MachineConfig.c: 27: TRISC = 0x00;
  6984  005158  0E00               	movlw	0
  6985  00515A  6E94               	movwf	3988,c	;volatile
  6986                           
  6987                           ;MachineConfig.c: 31: TRISD = 0x00;
  6988  00515C  0E00               	movlw	0
  6989  00515E  6E95               	movwf	3989,c	;volatile
  6990                           
  6991                           ;MachineConfig.c: 34: TRISE = 0x00;
  6992  005160  0E00               	movlw	0
  6993  005162  6E96               	movwf	3990,c	;volatile
  6994                           
  6995                           ;MachineConfig.c: 37: LATA = 0x00;
  6996  005164  0E00               	movlw	0
  6997  005166  6E89               	movwf	3977,c	;volatile
  6998                           
  6999                           ;MachineConfig.c: 38: LATB = 0x00;
  7000  005168  0E00               	movlw	0
  7001  00516A  6E8A               	movwf	3978,c	;volatile
  7002                           
  7003                           ;MachineConfig.c: 39: LATC = 0x00;
  7004  00516C  0E00               	movlw	0
  7005  00516E  6E8B               	movwf	3979,c	;volatile
  7006                           
  7007                           ;MachineConfig.c: 40: LATD = 0x00;
  7008  005170  0E00               	movlw	0
  7009  005172  6E8C               	movwf	3980,c	;volatile
  7010                           
  7011                           ;MachineConfig.c: 41: LATE = 0x00;
  7012  005174  0E00               	movlw	0
  7013  005176  6E8D               	movwf	3981,c	;volatile
  7014                           
  7015                           ;MachineConfig.c: 43: nRBPU = 0;
  7016  005178  9EF1               	bcf	intcon2,7,c	;volatile
  7017                           
  7018                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7019  00517A  0E00               	movlw	0
  7020  00517C  6EC2               	movwf	4034,c	;volatile
  7021                           
  7022                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  7023  00517E  0E0C               	movlw	12
  7024  005180  6EC1               	movwf	4033,c	;volatile
  7025                           
  7026                           ;MachineConfig.c: 51: CVRCON = 0x00;
  7027  005182  0E00               	movlw	0
  7028  005184  6EB5               	movwf	4021,c	;volatile
  7029                           
  7030                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  7031  005186  96B4               	bcf	4020,3,c	;volatile
  7032                           
  7033                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  7034  005188  0EB1               	movlw	177
  7035  00518A  6EC0               	movwf	4032,c	;volatile
  7036                           
  7037                           ;MachineConfig.c: 56: INT1IE = 1;
  7038  00518C  86F0               	bsf	intcon3,3,c	;volatile
  7039                           
  7040                           ;MachineConfig.c: 58: TMR0IE = 1;
  7041  00518E  8AF2               	bsf	intcon,5,c	;volatile
  7042                           
  7043                           ;MachineConfig.c: 59: TMR1IE = 1;
  7044  005190  809D               	bsf	3997,0,c	;volatile
  7045                           
  7046                           ;MachineConfig.c: 60: TMR2IE = 1;
  7047  005192  829D               	bsf	3997,1,c	;volatile
  7048                           
  7049                           ;MachineConfig.c: 61: TMR3IE = 1;
  7050  005194  82A0               	bsf	4000,1,c	;volatile
  7051                           
  7052                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  7053  005196  0EB0               	movlw	176
  7054  005198  6ECD               	movwf	4045,c	;volatile
  7055                           
  7056                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  7057  00519A  0E7B               	movlw	123
  7058  00519C  6ECA               	movwf	4042,c	;volatile
  7059                           
  7060                           ;MachineConfig.c: 65: PR2 = 0x22;
  7061  00519E  0E22               	movlw	34
  7062  0051A0  6ECB               	movwf	4043,c	;volatile
  7063                           
  7064                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  7065  0051A2  0EB0               	movlw	176
  7066  0051A4  6EB1               	movwf	4017,c	;volatile
  7067                           
  7068                           ;MachineConfig.c: 67: PEIE = 1;
  7069  0051A6  8CF2               	bsf	intcon,6,c	;volatile
  7070                           
  7071                           ;MachineConfig.c: 68: ADIE = 0;
  7072  0051A8  9C9D               	bcf	3997,6,c	;volatile
  7073                           
  7074                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7075  0051AA  9EF2               	bcf	intcon,7,c	;volatile
  7076  0051AC  0012               	return		;funcret
  7077  0051AE                     __end_of_machineConfig:
  7078                           	opt stack 0
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           intcon2	equ	0xFF1
  7087                           intcon3	equ	0xFF0
  7088                           postinc0	equ	0xFEE
  7089                           wreg	equ	0xFE8
  7090                           postdec1	equ	0xFE5
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _logRun *****************
  7100 ;; Defined at:
  7101 ;;		line 88 in file "EEPROM.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7106 ;;  i               2   55[BANK0 ] int 
  7107 ;;  num             1   49[BANK0 ] unsigned char 
  7108 ;;  addr            2   57[BANK0 ] unsigned short 
  7109 ;;  byte11          1   54[BANK0 ] unsigned char 
  7110 ;;  byte3           1   52[BANK0 ] unsigned char 
  7111 ;;  byte2           1   51[BANK0 ] unsigned char 
  7112 ;;  byte1           1   50[BANK0 ] unsigned char 
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  1    wreg      void 
  7115 ;; Registers used:
  7116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;Total ram usage:       10 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:   11
  7129 ;; This function calls:
  7130 ;;		_EEPROM_read
  7131 ;;		_EEPROM_write
  7132 ;; This function is called by:
  7133 ;;		_main
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           	psect	text16
  7138  003F56                     __ptext16:
  7139                           	opt stack 0
  7140  003F56                     _logRun:
  7141                           	opt stack 19
  7142                           
  7143                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7144                           
  7145                           ;incstack = 0
  7146  003F56  0E00               	movlw	0
  7147  003F58  0100               	movlb	0	; () banked
  7148  003F5A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7149  003F5C  0E00               	movlw	0
  7150  003F5E  6F80               	movwf	EEPROM_read@address& (0+255),b
  7151  003F60  ECB2  F02D         	call	_EEPROM_read	;wreg free
  7152  003F64  0100               	movlb	0	; () banked
  7153  003F66  6FFD               	movwf	_sel& (0+255),b
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7157  003F68  0100               	movlb	0	; () banked
  7158  003F6A  51FD               	movf	_sel& (0+255),w,b
  7159  003F6C  0D0B               	mullw	11
  7160  003F6E  0E01               	movlw	1
  7161  003F70  24F3               	addwf	prodl,w,c
  7162  003F72  0100               	movlb	0	; () banked
  7163  003F74  6FB9               	movwf	logRun@addr& (0+255),b
  7164  003F76  0E00               	movlw	0
  7165  003F78  20F4               	addwfc	prodh,w,c
  7166  003F7A  0100               	movlb	0	; () banked
  7167  003F7C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;EEPROM.c: 105: if (sel < 3){
  7171  003F7E  0E03               	movlw	3
  7172  003F80  0100               	movlb	0	; () banked
  7173  003F82  61FD               	cpfslt	_sel& (0+255),b
  7174  003F84  D00E               	goto	l9844
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7178  003F86  0100               	movlb	0	; () banked
  7179  003F88  29FD               	incf	_sel& (0+255),w,b
  7180  003F8A  0100               	movlb	0	; () banked
  7181  003F8C  6FB1               	movwf	logRun@num& (0+255),b
  7182                           
  7183                           ; BSR set to: 0
  7184                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7185  003F8E  0E00               	movlw	0
  7186  003F90  0100               	movlb	0	; () banked
  7187  003F92  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7188  003F94  0E00               	movlw	0
  7189  003F96  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7190  003F98  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7191  003F9C  EC65  F022         	call	_EEPROM_write	;wreg free
  7192                           
  7193                           ;EEPROM.c: 108: }
  7194  003FA0  D00A               	goto	l9846
  7195  003FA2                     l9844:
  7196                           
  7197                           ;EEPROM.c: 109: else{
  7198                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7199  003FA2  0E00               	movlw	0
  7200  003FA4  0100               	movlb	0	; () banked
  7201  003FA6  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7202  003FA8  0E00               	movlw	0
  7203  003FAA  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7204  003FAC  0E00               	movlw	0
  7205  003FAE  0100               	movlb	0	; () banked
  7206  003FB0  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7207  003FB2  EC65  F022         	call	_EEPROM_write	;wreg free
  7208  003FB6                     l9846:
  7209                           
  7210                           ;EEPROM.c: 111: }
  7211                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7212  003FB6  0100               	movlb	0	; () banked
  7213  003FB8  51FE               	movf	_count_total& (0+255),w,b
  7214  003FBA  0980               	iorlw	128
  7215  003FBC  0100               	movlb	0	; () banked
  7216  003FBE  6FB2               	movwf	logRun@byte1& (0+255),b
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7220  003FC0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7221  003FC4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7222  003FC8  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7223  003FCC  EC65  F022         	call	_EEPROM_write	;wreg free
  7224                           
  7225                           ;EEPROM.c: 116: addr++;
  7226  003FD0  0100               	movlb	0	; () banked
  7227  003FD2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7228  003FD4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7232  003FD6  0101               	movlb	1	; () banked
  7233  003FD8  392F               	swapf	_count_pop_no_tab& (0+255),w,b
  7234  003FDA  0BF0               	andlw	240
  7235  003FDC  0101               	movlb	1	; () banked
  7236  003FDE  1131               	iorwf	_count_pop_w_tab& (0+255),w,b
  7237  003FE0  0100               	movlb	0	; () banked
  7238  003FE2  6FB3               	movwf	logRun@byte2& (0+255),b
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7242  003FE4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7243  003FE8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7244  003FEC  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7245  003FF0  EC65  F022         	call	_EEPROM_write	;wreg free
  7246                           
  7247                           ;EEPROM.c: 121: addr++;
  7248  003FF4  0100               	movlb	0	; () banked
  7249  003FF6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7250  003FF8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7254  003FFA  0101               	movlb	1	; () banked
  7255  003FFC  392D               	swapf	_count_can_w_lab& (0+255),w,b
  7256  003FFE  0BF0               	andlw	240
  7257  004000  0101               	movlb	1	; () banked
  7258  004002  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  7259  004004  0100               	movlb	0	; () banked
  7260  004006  6FB4               	movwf	logRun@byte3& (0+255),b
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7264  004008  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7265  00400C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7266  004010  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7267  004014  EC65  F022         	call	_EEPROM_write	;wreg free
  7268                           
  7269                           ;EEPROM.c: 124: addr++;
  7270  004018  0100               	movlb	0	; () banked
  7271  00401A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7272  00401C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7276  00401E  0E00               	movlw	0
  7277  004020  0100               	movlb	0	; () banked
  7278  004022  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7279  004024  0E00               	movlw	0
  7280  004026  6FB7               	movwf	logRun@i& (0+255),b
  7281                           
  7282                           ; BSR set to: 0
  7283  004028  0100               	movlb	0	; () banked
  7284  00402A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7285  00402C  D008               	goto	l9870
  7286  00402E  0100               	movlb	0	; () banked
  7287  004030  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7288  004032  E128               	bnz	l1143
  7289  004034  0E07               	movlw	7
  7290  004036  0100               	movlb	0	; () banked
  7291  004038  5DB7               	subwf	logRun@i& (0+255),w,b
  7292  00403A  B0D8               	btfsc	status,0,c
  7293  00403C  D023               	goto	l1143
  7294  00403E                     l9870:
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7298  00403E  90D8               	bcf	status,0,c
  7299  004040  0100               	movlb	0	; () banked
  7300  004042  35B7               	rlcf	logRun@i& (0+255),w,b
  7301  004044  6ED9               	movwf	fsr2l,c
  7302  004046  0100               	movlb	0	; () banked
  7303  004048  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7304  00404A  6EDA               	movwf	fsr2h,c
  7305  00404C  0E0E               	movlw	low _startTime
  7306  00404E  26D9               	addwf	fsr2l,f,c
  7307  004050  0E01               	movlw	high _startTime
  7308  004052  22DA               	addwfc	fsr2h,f,c
  7309  004054  50DF               	movf	indf2,w,c
  7310  004056  0100               	movlb	0	; () banked
  7311  004058  6FB5               	movwf	logRun@byte_i& (0+255),b
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7315  00405A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7316  00405E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7317  004062  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7318  004066  EC65  F022         	call	_EEPROM_write	;wreg free
  7319                           
  7320                           ;EEPROM.c: 130: addr++;
  7321  00406A  0100               	movlb	0	; () banked
  7322  00406C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7323  00406E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7324                           
  7325                           ; BSR set to: 0
  7326  004070  0100               	movlb	0	; () banked
  7327  004072  4BB7               	infsnz	logRun@i& (0+255),f,b
  7328  004074  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7329                           
  7330                           ; BSR set to: 0
  7331  004076  0100               	movlb	0	; () banked
  7332  004078  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7333  00407A  D7E1               	goto	l9870
  7334  00407C  0100               	movlb	0	; () banked
  7335  00407E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7336  004080  E101               	bnz	u9330
  7337  004082  D7D8               	goto	L11
  7338  004084                     u9330:
  7339  004084                     l1143:
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;EEPROM.c: 131: }
  7343                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7344  004084  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7348  004088  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7349  00408C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7350  004090  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7351  004094  EC65  F022         	call	_EEPROM_write	;wreg free
  7352  004098  0012               	return		;funcret
  7353  00409A                     __end_of_logRun:
  7354                           	opt stack 0
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           intcon2	equ	0xFF1
  7363                           intcon3	equ	0xFF0
  7364                           postinc0	equ	0xFEE
  7365                           wreg	equ	0xFE8
  7366                           postdec1	equ	0xFE5
  7367                           fsr1l	equ	0xFE1
  7368                           indf2	equ	0xFDF
  7369                           postinc2	equ	0xFDE
  7370                           postdec2	equ	0xFDD
  7371                           fsr2h	equ	0xFDA
  7372                           fsr2l	equ	0xFD9
  7373                           status	equ	0xFD8
  7374                           
  7375 ;; *************** function _initUI *****************
  7376 ;; Defined at:
  7377 ;;		line 62 in file "UI.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;		None
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;		None
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      void 
  7384 ;; Registers used:
  7385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;Total ram usage:        0 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:   12
  7398 ;; This function calls:
  7399 ;;		_change_state_to_menu_start
  7400 ;;		_loadRTC
  7401 ;; This function is called by:
  7402 ;;		_main
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           	psect	text17
  7407  00574C                     __ptext17:
  7408                           	opt stack 0
  7409  00574C                     _initUI:
  7410                           	opt stack 18
  7411                           
  7412                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7413                           
  7414                           ;incstack = 0
  7415  00574C  8EF2               	bsf	intcon,7,c	;volatile
  7416                           
  7417                           ;UI.c: 64: machine_state = UI_state;
  7418  00574E  0E00               	movlw	0
  7419  005750  0100               	movlb	0	; () banked
  7420  005752  6FFC               	movwf	_machine_state& (0+255),b
  7421                           
  7422                           ;UI.c: 65: logstate = 0;
  7423  005754  0E00               	movlw	0
  7424  005756  0100               	movlb	0	; () banked
  7425  005758  6FF9               	movwf	(_logstate+1)& (0+255),b
  7426  00575A  0E00               	movlw	0
  7427  00575C  6FF8               	movwf	_logstate& (0+255),b
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;UI.c: 67: if(RTCflag){
  7431  00575E  0100               	movlb	0	; () banked
  7432  005760  51E4               	movf	_RTCflag& (0+255),w,b
  7433  005762  0100               	movlb	0	; () banked
  7434  005764  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7435  005766  A4D8               	btfss	status,2,c
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;UI.c: 68: loadRTC();
  7439  005768  EC3F  F026         	call	_loadRTC	;wreg free
  7440                           
  7441                           ;UI.c: 69: }
  7442                           ;UI.c: 71: change_state_to_menu_start();
  7443  00576C  ECC4  F02C         	call	_change_state_to_menu_start	;wreg free
  7444                           
  7445                           ;UI.c: 72: firstboot = 1;
  7446  005770  0E00               	movlw	0
  7447  005772  0101               	movlb	1	; () banked
  7448  005774  6F42               	movwf	(_firstboot+1)& (0+255),b
  7449  005776  0E01               	movlw	1
  7450  005778  6F41               	movwf	_firstboot& (0+255),b
  7451                           
  7452                           ; BSR set to: 1
  7453  00577A  0012               	return		;funcret
  7454  00577C                     __end_of_initUI:
  7455                           	opt stack 0
  7456                           tblptru	equ	0xFF8
  7457                           tblptrh	equ	0xFF7
  7458                           tblptrl	equ	0xFF6
  7459                           tablat	equ	0xFF5
  7460                           prodh	equ	0xFF4
  7461                           prodl	equ	0xFF3
  7462                           intcon	equ	0xFF2
  7463                           intcon2	equ	0xFF1
  7464                           intcon3	equ	0xFF0
  7465                           postinc0	equ	0xFEE
  7466                           wreg	equ	0xFE8
  7467                           postdec1	equ	0xFE5
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           fsr2h	equ	0xFDA
  7473                           fsr2l	equ	0xFD9
  7474                           status	equ	0xFD8
  7475                           
  7476 ;; *************** function _loadRTC *****************
  7477 ;; Defined at:
  7478 ;;		line 28 in file "RTC.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;		None
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;  i               2   22[BANK0 ] int 
  7483 ;; Return value:  Size  Location     Type
  7484 ;;                  1    wreg      void 
  7485 ;; Registers used:
  7486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;Total ram usage:        3 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    9
  7499 ;; This function calls:
  7500 ;;		_I2C_Master_Init
  7501 ;;		_I2C_Master_Start
  7502 ;;		_I2C_Master_Stop
  7503 ;;		_I2C_Master_Write
  7504 ;; This function is called by:
  7505 ;;		_initUI
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text18
  7510  004C7E                     __ptext18:
  7511                           	opt stack 0
  7512  004C7E                     _loadRTC:
  7513                           	opt stack 20
  7514                           
  7515                           ;RTC.c: 30: I2C_Master_Init(10000);
  7516                           
  7517                           ; BSR set to: 1
  7518                           ;incstack = 0
  7519  004C7E  0E10               	movlw	16
  7520  004C80  0100               	movlb	0	; () banked
  7521  004C82  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7522  004C84  0E27               	movlw	39
  7523  004C86  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7524  004C88  0E00               	movlw	0
  7525  004C8A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7526  004C8C  0E00               	movlw	0
  7527  004C8E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7528  004C90  EC08  F029         	call	_I2C_Master_Init	;wreg free
  7529                           
  7530                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7531  004C94  9EF2               	bcf	intcon,7,c	;volatile
  7532                           
  7533                           ;RTC.c: 34: I2C_Master_Start();
  7534  004C96  EC15  F02E         	call	_I2C_Master_Start	;wreg free
  7535                           
  7536                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7537  004C9A  0E00               	movlw	0
  7538  004C9C  0100               	movlb	0	; () banked
  7539  004C9E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7540  004CA0  0ED0               	movlw	208
  7541  004CA2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7542  004CA4  EC03  F02E         	call	_I2C_Master_Write	;wreg free
  7543                           
  7544                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7545  004CA8  0E00               	movlw	0
  7546  004CAA  0100               	movlb	0	; () banked
  7547  004CAC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7548  004CAE  0E00               	movlw	0
  7549  004CB0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7550  004CB2  EC03  F02E         	call	_I2C_Master_Write	;wreg free
  7551                           
  7552                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7553  004CB6  0E00               	movlw	0
  7554  004CB8  0100               	movlb	0	; () banked
  7555  004CBA  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7556  004CBC  0E00               	movlw	0
  7557  004CBE  6F96               	movwf	loadRTC@i& (0+255),b
  7558  004CC0                     l7602:
  7559                           
  7560                           ; BSR set to: 0
  7561  004CC0  0100               	movlb	0	; () banked
  7562  004CC2  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7563  004CC4  D008               	goto	l7606
  7564  004CC6  0100               	movlb	0	; () banked
  7565  004CC8  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7566  004CCA  E11B               	bnz	l7612
  7567  004CCC  0E07               	movlw	7
  7568  004CCE  0100               	movlb	0	; () banked
  7569  004CD0  5D96               	subwf	loadRTC@i& (0+255),w,b
  7570  004CD2  B0D8               	btfsc	status,0,c
  7571  004CD4  D016               	goto	l7612
  7572  004CD6                     l7606:
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7576  004CD6  0E24               	movlw	low _time
  7577  004CD8  0100               	movlb	0	; () banked
  7578  004CDA  2596               	addwf	loadRTC@i& (0+255),w,b
  7579  004CDC  6ED9               	movwf	fsr2l,c
  7580  004CDE  0E01               	movlw	high _time
  7581  004CE0  0100               	movlb	0	; () banked
  7582  004CE2  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7583  004CE4  6EDA               	movwf	fsr2h,c
  7584  004CE6  50DF               	movf	indf2,w,c
  7585  004CE8  0100               	movlb	0	; () banked
  7586  004CEA  6F95               	movwf	??_loadRTC& (0+255),b
  7587  004CEC  0100               	movlb	0	; () banked
  7588  004CEE  5195               	movf	??_loadRTC& (0+255),w,b
  7589  004CF0  0100               	movlb	0	; () banked
  7590  004CF2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7591  004CF4  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7592  004CF6  EC03  F02E         	call	_I2C_Master_Write	;wreg free
  7593  004CFA  0100               	movlb	0	; () banked
  7594  004CFC  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7595  004CFE  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7596  004D00  D7DF               	goto	l7602
  7597  004D02                     l7612:
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;RTC.c: 39: }
  7601                           ;RTC.c: 40: I2C_Master_Stop();
  7602  004D02  EC11  F02E         	call	_I2C_Master_Stop	;wreg free
  7603                           
  7604                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7605  004D06  8EF2               	bsf	intcon,7,c	;volatile
  7606  004D08  0012               	return		;funcret
  7607  004D0A                     __end_of_loadRTC:
  7608                           	opt stack 0
  7609                           tblptru	equ	0xFF8
  7610                           tblptrh	equ	0xFF7
  7611                           tblptrl	equ	0xFF6
  7612                           tablat	equ	0xFF5
  7613                           prodh	equ	0xFF4
  7614                           prodl	equ	0xFF3
  7615                           intcon	equ	0xFF2
  7616                           intcon2	equ	0xFF1
  7617                           intcon3	equ	0xFF0
  7618                           postinc0	equ	0xFEE
  7619                           wreg	equ	0xFE8
  7620                           postdec1	equ	0xFE5
  7621                           fsr1l	equ	0xFE1
  7622                           indf2	equ	0xFDF
  7623                           postinc2	equ	0xFDE
  7624                           postdec2	equ	0xFDD
  7625                           fsr2h	equ	0xFDA
  7626                           fsr2l	equ	0xFD9
  7627                           status	equ	0xFD8
  7628                           
  7629 ;; *************** function _I2C_Master_Init *****************
  7630 ;; Defined at:
  7631 ;;		line 15 in file "I2C.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;  c               4   13[BANK0 ] const unsigned long 
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;		None
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  1    wreg      void 
  7638 ;; Registers used:
  7639 ;;		wreg, status,2, status,0, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7645 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7647 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;Total ram usage:        8 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    8
  7652 ;; This function calls:
  7653 ;;		___lldiv
  7654 ;; This function is called by:
  7655 ;;		_main
  7656 ;;		_loadRTC
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           	psect	text19
  7661  005210                     __ptext19:
  7662                           	opt stack 0
  7663  005210                     _I2C_Master_Init:
  7664                           	opt stack 20
  7665                           
  7666                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7667                           
  7668                           ;incstack = 0
  7669  005210  0E00               	movlw	0
  7670  005212  6EC7               	movwf	4039,c	;volatile
  7671                           
  7672                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7673  005214  0E28               	movlw	40
  7674  005216  6EC6               	movwf	4038,c	;volatile
  7675                           
  7676                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7677  005218  0E00               	movlw	0
  7678  00521A  6EC5               	movwf	4037,c	;volatile
  7679                           
  7680                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7681  00521C  0E00               	movlw	0
  7682  00521E  0100               	movlb	0	; () banked
  7683  005220  6F80               	movwf	___lldiv@dividend& (0+255),b
  7684  005222  0E48               	movlw	72
  7685  005224  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7686  005226  0EE8               	movlw	232
  7687  005228  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7688  00522A  0E01               	movlw	1
  7689  00522C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7690  00522E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7691  005232  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7692  005236  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7693  00523A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7694  00523E  0E02               	movlw	2
  7695  005240                     u5905:
  7696  005240  90D8               	bcf	status,0,c
  7697  005242  0100               	movlb	0	; () banked
  7698  005244  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7699  005246  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7700  005248  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7701  00524A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7702  00524C  2EE8               	decfsz	wreg,f,c
  7703  00524E  D7F8               	goto	u5905
  7704  005250  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7705  005254  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7706  005258  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7707  00525C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7708  005260  EC3B  F025         	call	___lldiv	;wreg free
  7709  005264  0100               	movlb	0	; () banked
  7710  005266  0580               	decf	?___lldiv& (0+255),w,b
  7711  005268  6EC8               	movwf	4040,c	;volatile
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;I2C.c: 22: TRISC3 = 1;
  7715  00526A  8694               	bsf	3988,3,c	;volatile
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;I2C.c: 23: TRISC4 = 1;
  7719  00526C  8894               	bsf	3988,4,c	;volatile
  7720                           
  7721                           ; BSR set to: 0
  7722  00526E  0012               	return		;funcret
  7723  005270                     __end_of_I2C_Master_Init:
  7724                           	opt stack 0
  7725                           tblptru	equ	0xFF8
  7726                           tblptrh	equ	0xFF7
  7727                           tblptrl	equ	0xFF6
  7728                           tablat	equ	0xFF5
  7729                           prodh	equ	0xFF4
  7730                           prodl	equ	0xFF3
  7731                           intcon	equ	0xFF2
  7732                           intcon2	equ	0xFF1
  7733                           intcon3	equ	0xFF0
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           postdec1	equ	0xFE5
  7737                           fsr1l	equ	0xFE1
  7738                           indf2	equ	0xFDF
  7739                           postinc2	equ	0xFDE
  7740                           postdec2	equ	0xFDD
  7741                           fsr2h	equ	0xFDA
  7742                           fsr2l	equ	0xFD9
  7743                           status	equ	0xFD8
  7744                           
  7745 ;; *************** function ___lldiv *****************
  7746 ;; Defined at:
  7747 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  dividend        4    0[BANK0 ] unsigned long 
  7750 ;;  divisor         4    4[BANK0 ] unsigned long 
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  quotient        4    8[BANK0 ] unsigned long 
  7753 ;;  counter         1   12[BANK0 ] unsigned char 
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  4    0[BANK0 ] unsigned long 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7763 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;Total ram usage:       13 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    7
  7770 ;; This function calls:
  7771 ;;		Nothing
  7772 ;; This function is called by:
  7773 ;;		_I2C_Master_Init
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           	psect	text20
  7778  004A76                     __ptext20:
  7779                           	opt stack 0
  7780  004A76                     ___lldiv:
  7781                           	opt stack 20
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;incstack = 0
  7785  004A76  0E00               	movlw	0
  7786  004A78  0100               	movlb	0	; () banked
  7787  004A7A  6F88               	movwf	___lldiv@quotient& (0+255),b
  7788  004A7C  0E00               	movlw	0
  7789  004A7E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7790  004A80  0E00               	movlw	0
  7791  004A82  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7792  004A84  0E00               	movlw	0
  7793  004A86  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7794                           
  7795                           ; BSR set to: 0
  7796  004A88  0100               	movlb	0	; () banked
  7797  004A8A  5184               	movf	___lldiv@divisor& (0+255),w,b
  7798  004A8C  0100               	movlb	0	; () banked
  7799  004A8E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7800  004A90  0100               	movlb	0	; () banked
  7801  004A92  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7802  004A94  0100               	movlb	0	; () banked
  7803  004A96  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7804  004A98  B4D8               	btfsc	status,2,c
  7805  004A9A  D042               	goto	l1914
  7806                           
  7807                           ; BSR set to: 0
  7808  004A9C  0E01               	movlw	1
  7809  004A9E  0100               	movlb	0	; () banked
  7810  004AA0  6F8C               	movwf	___lldiv@counter& (0+255),b
  7811  004AA2  D008               	goto	l6926
  7812  004AA4                     l6924:
  7813                           
  7814                           ; BSR set to: 0
  7815  004AA4  0100               	movlb	0	; () banked
  7816  004AA6  90D8               	bcf	status,0,c
  7817  004AA8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7818  004AAA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7819  004AAC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7820  004AAE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7821  004AB0  0100               	movlb	0	; () banked
  7822  004AB2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7823  004AB4                     l6926:
  7824                           
  7825                           ; BSR set to: 0
  7826  004AB4  0100               	movlb	0	; () banked
  7827  004AB6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7828  004AB8  D7F5               	goto	l6924
  7829  004ABA                     l6928:
  7830                           
  7831                           ; BSR set to: 0
  7832  004ABA  0100               	movlb	0	; () banked
  7833  004ABC  90D8               	bcf	status,0,c
  7834  004ABE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7835  004AC0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7836  004AC2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7837  004AC4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7838                           
  7839                           ; BSR set to: 0
  7840  004AC6  0100               	movlb	0	; () banked
  7841  004AC8  5184               	movf	___lldiv@divisor& (0+255),w,b
  7842  004ACA  0100               	movlb	0	; () banked
  7843  004ACC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7844  004ACE  0100               	movlb	0	; () banked
  7845  004AD0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7846  004AD2  0100               	movlb	0	; () banked
  7847  004AD4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7848  004AD6  0100               	movlb	0	; () banked
  7849  004AD8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7850  004ADA  0100               	movlb	0	; () banked
  7851  004ADC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7852  004ADE  0100               	movlb	0	; () banked
  7853  004AE0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7854  004AE2  0100               	movlb	0	; () banked
  7855  004AE4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7856  004AE6  A0D8               	btfss	status,0,c
  7857  004AE8  D012               	goto	l6936
  7858                           
  7859                           ; BSR set to: 0
  7860  004AEA  0100               	movlb	0	; () banked
  7861  004AEC  5184               	movf	___lldiv@divisor& (0+255),w,b
  7862  004AEE  0100               	movlb	0	; () banked
  7863  004AF0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7864  004AF2  0100               	movlb	0	; () banked
  7865  004AF4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7866  004AF6  0100               	movlb	0	; () banked
  7867  004AF8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7868  004AFA  0100               	movlb	0	; () banked
  7869  004AFC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7870  004AFE  0100               	movlb	0	; () banked
  7871  004B00  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7872  004B02  0100               	movlb	0	; () banked
  7873  004B04  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7874  004B06  0100               	movlb	0	; () banked
  7875  004B08  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7876                           
  7877                           ; BSR set to: 0
  7878  004B0A  0100               	movlb	0	; () banked
  7879  004B0C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7880  004B0E                     l6936:
  7881                           
  7882                           ; BSR set to: 0
  7883  004B0E  0100               	movlb	0	; () banked
  7884  004B10  90D8               	bcf	status,0,c
  7885  004B12  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7886  004B14  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7887  004B16  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7888  004B18  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7889                           
  7890                           ; BSR set to: 0
  7891  004B1A  0100               	movlb	0	; () banked
  7892  004B1C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7893  004B1E  D7CD               	goto	l6928
  7894  004B20                     l1914:
  7895                           
  7896                           ; BSR set to: 0
  7897  004B20  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7898  004B24  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7899  004B28  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7900  004B2C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7901                           
  7902                           ; BSR set to: 0
  7903  004B30  0012               	return		;funcret
  7904  004B32                     __end_of___lldiv:
  7905                           	opt stack 0
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           prodh	equ	0xFF4
  7911                           prodl	equ	0xFF3
  7912                           intcon	equ	0xFF2
  7913                           intcon2	equ	0xFF1
  7914                           intcon3	equ	0xFF0
  7915                           postinc0	equ	0xFEE
  7916                           wreg	equ	0xFE8
  7917                           postdec1	equ	0xFE5
  7918                           fsr1l	equ	0xFE1
  7919                           indf2	equ	0xFDF
  7920                           postinc2	equ	0xFDE
  7921                           postdec2	equ	0xFDD
  7922                           fsr2h	equ	0xFDA
  7923                           fsr2l	equ	0xFD9
  7924                           status	equ	0xFD8
  7925                           
  7926 ;; *************** function _change_state_to_menu_start *****************
  7927 ;; Defined at:
  7928 ;;		line 477 in file "UI.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;		None
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;		None
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  1    wreg      void 
  7935 ;; Registers used:
  7936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;Total ram usage:        0 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:   11
  7949 ;; This function calls:
  7950 ;;		_lcdInst
  7951 ;;		_printRTC
  7952 ;;		_printf
  7953 ;; This function is called by:
  7954 ;;		_initUI
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           	psect	text21
  7959  005988                     __ptext21:
  7960                           	opt stack 0
  7961  005988                     _change_state_to_menu_start:
  7962                           	opt stack 18
  7963                           
  7964                           ;UI.c: 478: cur_state = 0;
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;incstack = 0
  7968  005988  0E00               	movlw	0
  7969  00598A  0100               	movlb	0	; () banked
  7970  00598C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7971  00598E  0E00               	movlw	0
  7972  005990  6FE6               	movwf	_cur_state& (0+255),b
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;UI.c: 480: lcdInst(0b10000000);;
  7976  005992  0E80               	movlw	128
  7977  005994  ECEF  F02D         	call	_lcdInst
  7978                           
  7979                           ;UI.c: 481: printRTC();
  7980  005998  ECC1  F016         	call	_printRTC	;wreg free
  7981                           
  7982                           ;UI.c: 482: lcdInst(0b11000000);;
  7983  00599C  0EC0               	movlw	192
  7984  00599E  ECEF  F02D         	call	_lcdInst
  7985                           
  7986                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7987  0059A2  0EEA               	movlw	low STR_30
  7988  0059A4  0100               	movlb	0	; () banked
  7989  0059A6  6F8E               	movwf	printf@f& (0+255),b
  7990  0059A8  0EFD               	movlw	high STR_30
  7991  0059AA  0100               	movlb	0	; () banked
  7992  0059AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7993  0059AE  ECED  F00D         	call	_printf	;wreg free
  7994  0059B2  0012               	return		;funcret
  7995  0059B4                     __end_of_change_state_to_menu_start:
  7996                           	opt stack 0
  7997                           tblptru	equ	0xFF8
  7998                           tblptrh	equ	0xFF7
  7999                           tblptrl	equ	0xFF6
  8000                           tablat	equ	0xFF5
  8001                           prodh	equ	0xFF4
  8002                           prodl	equ	0xFF3
  8003                           intcon	equ	0xFF2
  8004                           intcon2	equ	0xFF1
  8005                           intcon3	equ	0xFF0
  8006                           postinc0	equ	0xFEE
  8007                           wreg	equ	0xFE8
  8008                           postdec1	equ	0xFE5
  8009                           fsr1l	equ	0xFE1
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           postdec2	equ	0xFDD
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8
  8016                           
  8017 ;; *************** function _initTime *****************
  8018 ;; Defined at:
  8019 ;;		line 17 in file "RTC.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  s               1    wreg     unsigned char 
  8022 ;;  m               1    0[BANK0 ] unsigned char 
  8023 ;;  h               1    1[BANK0 ] unsigned char 
  8024 ;;  w               1    2[BANK0 ] unsigned char 
  8025 ;;  DD              1    3[BANK0 ] unsigned char 
  8026 ;;  MM              1    4[BANK0 ] unsigned char 
  8027 ;;  YY              1    5[BANK0 ] unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  s               1    6[BANK0 ] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  1    wreg      void 
  8032 ;; Registers used:
  8033 ;;		wreg
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8039 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;Total ram usage:        7 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    7
  8046 ;; This function calls:
  8047 ;;		Nothing
  8048 ;; This function is called by:
  8049 ;;		_main
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text22
  8054  005AEC                     __ptext22:
  8055                           	opt stack 0
  8056  005AEC                     _initTime:
  8057                           	opt stack 23
  8058                           
  8059                           ;incstack = 0
  8060                           ;initTime@s stored from wreg
  8061  005AEC  0100               	movlb	0	; () banked
  8062  005AEE  6F86               	movwf	initTime@s& (0+255),b
  8063                           
  8064                           ;RTC.c: 19: time[0] = s;
  8065  005AF0  C086  F124         	movff	initTime@s,_time
  8066                           
  8067                           ;RTC.c: 20: time[1] = m;
  8068  005AF4  C080  F125         	movff	initTime@m,_time+1
  8069                           
  8070                           ;RTC.c: 21: time[2] = h;
  8071  005AF8  C081  F126         	movff	initTime@h,_time+2
  8072                           
  8073                           ;RTC.c: 22: time[3] = w;
  8074  005AFC  C082  F127         	movff	initTime@w,_time+3
  8075                           
  8076                           ;RTC.c: 23: time[4] = DD;
  8077  005B00  C083  F128         	movff	initTime@DD,_time+4
  8078                           
  8079                           ;RTC.c: 24: time[5] = MM;
  8080  005B04  C084  F129         	movff	initTime@MM,_time+5
  8081                           
  8082                           ;RTC.c: 25: time[6] = YY;
  8083  005B08  C085  F12A         	movff	initTime@YY,_time+6
  8084  005B0C  0012               	return		;funcret
  8085  005B0E                     __end_of_initTime:
  8086                           	opt stack 0
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           intcon	equ	0xFF2
  8094                           intcon2	equ	0xFF1
  8095                           intcon3	equ	0xFF0
  8096                           postinc0	equ	0xFEE
  8097                           wreg	equ	0xFE8
  8098                           postdec1	equ	0xFE5
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           fsr2h	equ	0xFDA
  8104                           fsr2l	equ	0xFD9
  8105                           status	equ	0xFD8
  8106                           
  8107 ;; *************** function _initLCD *****************
  8108 ;; Defined at:
  8109 ;;		line 50 in file "lcd.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;		None
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;		None
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  1    wreg      void 
  8116 ;; Registers used:
  8117 ;;		wreg, status,2, status,0, cstack
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;Total ram usage:        1 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    9
  8130 ;; This function calls:
  8131 ;;		_lcdInst
  8132 ;; This function is called by:
  8133 ;;		_main
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           	psect	text23
  8138  005506                     __ptext23:
  8139                           	opt stack 0
  8140  005506                     _initLCD:
  8141                           	opt stack 21
  8142                           
  8143                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8144                           
  8145                           ;incstack = 0
  8146  005506  0E9C               	movlw	156
  8147  005508  0100               	movlb	0	; () banked
  8148  00550A  6F83               	movwf	??_initLCD& (0+255),b
  8149  00550C  0ED7               	movlw	215
  8150  00550E                     u10087:
  8151  00550E  2EE8               	decfsz	wreg,f,c
  8152  005510  D7FE               	bra	u10087
  8153  005512  2F83               	decfsz	??_initLCD& (0+255),f,b
  8154  005514  D7FC               	bra	u10087
  8155                           
  8156                           ;lcd.c: 52: lcdInst(0b00110011);
  8157  005516  0E33               	movlw	51
  8158  005518  ECEF  F02D         	call	_lcdInst
  8159                           
  8160                           ;lcd.c: 53: lcdInst(0b00110010);
  8161  00551C  0E32               	movlw	50
  8162  00551E  ECEF  F02D         	call	_lcdInst
  8163                           
  8164                           ;lcd.c: 55: lcdInst(0b00101000);
  8165  005522  0E28               	movlw	40
  8166  005524  ECEF  F02D         	call	_lcdInst
  8167                           
  8168                           ;lcd.c: 56: lcdInst(0b00001100);
  8169  005528  0E0C               	movlw	12
  8170  00552A  ECEF  F02D         	call	_lcdInst
  8171                           
  8172                           ;lcd.c: 57: lcdInst(0b00000110);
  8173  00552E  0E06               	movlw	6
  8174  005530  ECEF  F02D         	call	_lcdInst
  8175                           
  8176                           ;lcd.c: 58: lcdInst(0b00000001);
  8177  005534  0E01               	movlw	1
  8178  005536  ECEF  F02D         	call	_lcdInst
  8179                           
  8180                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8181  00553A  0E9C               	movlw	156
  8182  00553C  0100               	movlb	0	; () banked
  8183  00553E  6F83               	movwf	??_initLCD& (0+255),b
  8184  005540  0ED7               	movlw	215
  8185  005542                     u10097:
  8186  005542  2EE8               	decfsz	wreg,f,c
  8187  005544  D7FE               	bra	u10097
  8188  005546  2F83               	decfsz	??_initLCD& (0+255),f,b
  8189  005548  D7FC               	bra	u10097
  8190  00554A  0012               	return		;funcret
  8191  00554C                     __end_of_initLCD:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           intcon2	equ	0xFF1
  8201                           intcon3	equ	0xFF0
  8202                           postinc0	equ	0xFEE
  8203                           wreg	equ	0xFE8
  8204                           postdec1	equ	0xFE5
  8205                           fsr1l	equ	0xFE1
  8206                           indf2	equ	0xFDF
  8207                           postinc2	equ	0xFDE
  8208                           postdec2	equ	0xFDD
  8209                           fsr2h	equ	0xFDA
  8210                           fsr2l	equ	0xFD9
  8211                           status	equ	0xFD8
  8212                           
  8213 ;; *************** function _initEEPROM *****************
  8214 ;; Defined at:
  8215 ;;		line 32 in file "EEPROM.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;		None
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;		None
  8220 ;; Return value:  Size  Location     Type
  8221 ;;                  1    wreg      void 
  8222 ;; Registers used:
  8223 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;Total ram usage:        0 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:   11
  8236 ;; This function calls:
  8237 ;;		_EEPROM_write
  8238 ;; This function is called by:
  8239 ;;		_main
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	text24
  8244  005B7C                     __ptext24:
  8245                           	opt stack 0
  8246  005B7C                     _initEEPROM:
  8247                           	opt stack 19
  8248                           
  8249                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8250                           
  8251                           ;incstack = 0
  8252  005B7C  0E00               	movlw	0
  8253  005B7E  0100               	movlb	0	; () banked
  8254  005B80  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8255  005B82  0E00               	movlw	0
  8256  005B84  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8257  005B86  0E01               	movlw	1
  8258  005B88  0100               	movlb	0	; () banked
  8259  005B8A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8260  005B8C  EC65  F022         	call	_EEPROM_write	;wreg free
  8261  005B90  0012               	return		;funcret
  8262  005B92                     __end_of_initEEPROM:
  8263                           	opt stack 0
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           intcon	equ	0xFF2
  8271                           intcon2	equ	0xFF1
  8272                           intcon3	equ	0xFF0
  8273                           postinc0	equ	0xFEE
  8274                           wreg	equ	0xFE8
  8275                           postdec1	equ	0xFE5
  8276                           fsr1l	equ	0xFE1
  8277                           indf2	equ	0xFDF
  8278                           postinc2	equ	0xFDE
  8279                           postdec2	equ	0xFDD
  8280                           fsr2h	equ	0xFDA
  8281                           fsr2l	equ	0xFD9
  8282                           status	equ	0xFD8
  8283                           
  8284 ;; *************** function _EEPROM_write *****************
  8285 ;; Defined at:
  8286 ;;		line 36 in file "EEPROM.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;  address         2   43[BANK0 ] unsigned short 
  8289 ;;  data            1   45[BANK0 ] unsigned char 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  i               1   48[BANK0 ] unsigned char 
  8292 ;;  i               1   47[BANK0 ] unsigned char 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      void 
  8295 ;; Registers used:
  8296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8302 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;Total ram usage:        6 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:   10
  8309 ;; This function calls:
  8310 ;;		_EEPROM_read
  8311 ;;		_lcdInst
  8312 ;;		_printf
  8313 ;; This function is called by:
  8314 ;;		_Loading
  8315 ;;		_initEEPROM
  8316 ;;		_logRun
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           	psect	text25
  8321  0044CA                     __ptext25:
  8322                           	opt stack 0
  8323  0044CA                     _EEPROM_write:
  8324                           	opt stack 18
  8325                           
  8326                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8327                           
  8328                           ;incstack = 0
  8329  0044CA  84A6               	bsf	4006,2,c	;volatile
  8330                           
  8331                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8332  0044CC  0100               	movlb	0	; () banked
  8333  0044CE  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8334  0044D0  6EAA               	movwf	4010,c	;volatile
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8338  0044D2  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8339                           
  8340                           ; BSR set to: 0
  8341                           ;EEPROM.c: 43: EEDATA = data;
  8342  0044D6  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8346  0044DA  9EA6               	bcf	4006,7,c	;volatile
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8350  0044DC  9CA6               	bcf	4006,6,c	;volatile
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8354  0044DE  9EF2               	bcf	intcon,7,c	;volatile
  8355                           
  8356                           ;EEPROM.c: 49: EECON2 = 0x55;
  8357  0044E0  0E55               	movlw	85
  8358  0044E2  6EA7               	movwf	4007,c	;volatile
  8359                           
  8360                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8361  0044E4  0EAA               	movlw	170
  8362  0044E6  6EA7               	movwf	4007,c	;volatile
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8366  0044E8  82A6               	bsf	4006,1,c	;volatile
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8370  0044EA  8EF2               	bsf	intcon,7,c	;volatile
  8371  0044EC                     l1121:
  8372  0044EC  A8A1               	btfss	4001,4,c	;volatile
  8373  0044EE  D7FE               	goto	l1121
  8374                           
  8375                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8376  0044F0  98A1               	bcf	4001,4,c	;volatile
  8377                           
  8378                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8379  0044F2  94A6               	bcf	4006,2,c	;volatile
  8380                           
  8381                           ;EEPROM.c: 61: if(debug){
  8382  0044F4  0100               	movlb	0	; () banked
  8383  0044F6  51E8               	movf	_debug& (0+255),w,b
  8384  0044F8  0100               	movlb	0	; () banked
  8385  0044FA  11E9               	iorwf	(_debug+1)& (0+255),w,b
  8386  0044FC  B4D8               	btfsc	status,2,c
  8387  0044FE  0012               	return	
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8391  004500  0E01               	movlw	1
  8392  004502  ECEF  F02D         	call	_lcdInst
  8393  004506  0E68               	movlw	104
  8394  004508  0100               	movlb	0	; () banked
  8395  00450A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8396  00450C  0EE4               	movlw	228
  8397  00450E                     u10107:
  8398  00450E  2EE8               	decfsz	wreg,f,c
  8399  004510  D7FE               	bra	u10107
  8400  004512  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8401  004514  D7FC               	bra	u10107
  8402  004516  F000               	nop	
  8403                           
  8404                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8405  004518  0E80               	movlw	128
  8406  00451A  ECEF  F02D         	call	_lcdInst
  8407                           
  8408                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8409  00451E  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8410  004522  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8411  004526  ECB2  F02D         	call	_EEPROM_read	;wreg free
  8412  00452A  0100               	movlb	0	; () banked
  8413  00452C  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8414  00452E  A4D8               	btfss	status,2,c
  8415  004530  D024               	goto	l7374
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8419  004532  0EBE               	movlw	low STR_67
  8420  004534  0100               	movlb	0	; () banked
  8421  004536  6F8E               	movwf	printf@f& (0+255),b
  8422  004538  0EFA               	movlw	high STR_67
  8423  00453A  0100               	movlb	0	; () banked
  8424  00453C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8425  00453E  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8426  004542  0100               	movlb	0	; () banked
  8427  004544  6B91               	clrf	(?_printf+3)& (0+255),b
  8428  004546  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8429  00454A  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8430  00454E  ECED  F00D         	call	_printf	;wreg free
  8431                           
  8432                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8433  004552  0E00               	movlw	0
  8434  004554  0100               	movlb	0	; () banked
  8435  004556  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8436  004558                     l7366:
  8437                           
  8438                           ; BSR set to: 0
  8439  004558  0E63               	movlw	99
  8440  00455A  0100               	movlb	0	; () banked
  8441  00455C  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8442  00455E  D001               	goto	l7370
  8443  004560  0012               	return	
  8444  004562                     l7370:
  8445                           
  8446                           ; BSR set to: 0
  8447  004562  0E68               	movlw	104
  8448  004564  0100               	movlb	0	; () banked
  8449  004566  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8450  004568  0EE4               	movlw	228
  8451  00456A                     u10117:
  8452  00456A  2EE8               	decfsz	wreg,f,c
  8453  00456C  D7FE               	bra	u10117
  8454  00456E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8455  004570  D7FC               	bra	u10117
  8456  004572  F000               	nop	
  8457  004574  0100               	movlb	0	; () banked
  8458  004576  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8459  004578  D7EF               	goto	l7366
  8460  00457A                     l7374:
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8464  00457A  0EBC               	movlw	low STR_68
  8465  00457C  0100               	movlb	0	; () banked
  8466  00457E  6F8E               	movwf	printf@f& (0+255),b
  8467  004580  0EFF               	movlw	high STR_68
  8468  004582  0100               	movlb	0	; () banked
  8469  004584  6F8F               	movwf	(printf@f+1)& (0+255),b
  8470  004586  ECED  F00D         	call	_printf	;wreg free
  8471  00458A  0E00               	movlw	0
  8472  00458C  0100               	movlb	0	; () banked
  8473  00458E  6FB0               	movwf	EEPROM_write@i_1404& (0+255),b
  8474  004590                     l7378:
  8475                           
  8476                           ; BSR set to: 0
  8477  004590  0E63               	movlw	99
  8478  004592  0100               	movlb	0	; () banked
  8479  004594  65B0               	cpfsgt	EEPROM_write@i_1404& (0+255),b
  8480  004596  D001               	goto	l7382
  8481  004598  0012               	return	
  8482  00459A                     l7382:
  8483                           
  8484                           ; BSR set to: 0
  8485  00459A  0E68               	movlw	104
  8486  00459C  0100               	movlb	0	; () banked
  8487  00459E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8488  0045A0  0EE4               	movlw	228
  8489  0045A2                     u10127:
  8490  0045A2  2EE8               	decfsz	wreg,f,c
  8491  0045A4  D7FE               	bra	u10127
  8492  0045A6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8493  0045A8  D7FC               	bra	u10127
  8494  0045AA  F000               	nop	
  8495  0045AC  0100               	movlb	0	; () banked
  8496  0045AE  2BB0               	incf	EEPROM_write@i_1404& (0+255),f,b
  8497  0045B0  D7EF               	goto	l7378
  8498  0045B2                     __end_of_EEPROM_write:
  8499                           	opt stack 0
  8500                           tblptru	equ	0xFF8
  8501                           tblptrh	equ	0xFF7
  8502                           tblptrl	equ	0xFF6
  8503                           tablat	equ	0xFF5
  8504                           prodh	equ	0xFF4
  8505                           prodl	equ	0xFF3
  8506                           intcon	equ	0xFF2
  8507                           intcon2	equ	0xFF1
  8508                           intcon3	equ	0xFF0
  8509                           postinc0	equ	0xFEE
  8510                           wreg	equ	0xFE8
  8511                           postdec1	equ	0xFE5
  8512                           fsr1l	equ	0xFE1
  8513                           indf2	equ	0xFDF
  8514                           postinc2	equ	0xFDE
  8515                           postdec2	equ	0xFDD
  8516                           fsr2h	equ	0xFDA
  8517                           fsr2l	equ	0xFD9
  8518                           status	equ	0xFD8
  8519                           
  8520 ;; *************** function _EEPROM_read *****************
  8521 ;; Defined at:
  8522 ;;		line 72 in file "EEPROM.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;  address         2    0[BANK0 ] unsigned short 
  8525 ;; Auto vars:     Size  Location     Type
  8526 ;;		None
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  1    wreg      unsigned char 
  8529 ;; Registers used:
  8530 ;;		wreg, status,2
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8536 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;Total ram usage:        2 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    7
  8543 ;; This function calls:
  8544 ;;		Nothing
  8545 ;; This function is called by:
  8546 ;;		_Loading
  8547 ;;		_EEPROM_write
  8548 ;;		_logRun
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text26
  8553  005B64                     __ptext26:
  8554                           	opt stack 0
  8555  005B64                     _EEPROM_read:
  8556                           	opt stack 20
  8557                           
  8558                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8559                           
  8560                           ; BSR set to: 0
  8561                           ;incstack = 0
  8562  005B64  0100               	movlb	0	; () banked
  8563  005B66  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8564  005B68  6EAA               	movwf	4010,c	;volatile
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8568  005B6A  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8572  005B6E  9EA6               	bcf	4006,7,c	;volatile
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8576  005B70  9CA6               	bcf	4006,6,c	;volatile
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8580  005B72  80A6               	bsf	4006,0,c	;volatile
  8581  005B74                     l1134:
  8582  005B74  B0A6               	btfsc	4006,0,c	;volatile
  8583  005B76  D7FE               	goto	l1134
  8584                           
  8585                           ;EEPROM.c: 85: return EEDATA;
  8586  005B78  50A8               	movf	4008,w,c	;volatile
  8587  005B7A  0012               	return	
  8588  005B7C                     __end_of_EEPROM_read:
  8589                           	opt stack 0
  8590                           tblptru	equ	0xFF8
  8591                           tblptrh	equ	0xFF7
  8592                           tblptrl	equ	0xFF6
  8593                           tablat	equ	0xFF5
  8594                           prodh	equ	0xFF4
  8595                           prodl	equ	0xFF3
  8596                           intcon	equ	0xFF2
  8597                           intcon2	equ	0xFF1
  8598                           intcon3	equ	0xFF0
  8599                           postinc0	equ	0xFEE
  8600                           wreg	equ	0xFE8
  8601                           postdec1	equ	0xFE5
  8602                           fsr1l	equ	0xFE1
  8603                           indf2	equ	0xFDF
  8604                           postinc2	equ	0xFDE
  8605                           postdec2	equ	0xFDD
  8606                           fsr2h	equ	0xFDA
  8607                           fsr2l	equ	0xFD9
  8608                           status	equ	0xFD8
  8609                           
  8610 ;; *************** function _UI *****************
  8611 ;; Defined at:
  8612 ;;		line 76 in file "UI.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;		None
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  i               1   73[BANK0 ] unsigned char 
  8617 ;;  i               1   85[BANK0 ] unsigned char 
  8618 ;;  i               1   84[BANK0 ] unsigned char 
  8619 ;;  i               1   83[BANK0 ] unsigned char 
  8620 ;;  i               1   82[BANK0 ] unsigned char 
  8621 ;;  i               1   81[BANK0 ] unsigned char 
  8622 ;;  i               1   80[BANK0 ] unsigned char 
  8623 ;;  i               1   79[BANK0 ] unsigned char 
  8624 ;;  i               1   78[BANK0 ] unsigned char 
  8625 ;;  i               1   77[BANK0 ] unsigned char 
  8626 ;;  i               1   76[BANK0 ] unsigned char 
  8627 ;;  i               1   75[BANK0 ] unsigned char 
  8628 ;;  i               1   74[BANK0 ] unsigned char 
  8629 ;;  month           4   86[BANK0 ] unsigned char [4]
  8630 ;;  i               1   72[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      void 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;Total ram usage:       22 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:   11
  8647 ;; This function calls:
  8648 ;;		___awdiv
  8649 ;;		___awmod
  8650 ;;		_change_state_to_menu_12
  8651 ;;		_change_state_to_menu_22
  8652 ;;		_lcdInst
  8653 ;;		_printRTC
  8654 ;;		_printf
  8655 ;;		_strcpy
  8656 ;; This function is called by:
  8657 ;;		_main
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           	psect	text27
  8662  000012                     __ptext27:
  8663                           	opt stack 0
  8664  000012                     _UI:
  8665                           	opt stack 19
  8666                           
  8667                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8668                           
  8669                           ;incstack = 0
  8670  000012  0E02               	movlw	2
  8671  000014  0100               	movlb	0	; () banked
  8672  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8673  000018  A4D8               	btfss	status,2,c
  8674  00001A  D086               	goto	l9272
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8678  00001C  0E01               	movlw	1
  8679  00001E  ECEF  F02D         	call	_lcdInst
  8680  000022  0E68               	movlw	104
  8681  000024  0100               	movlb	0	; () banked
  8682  000026  6FC4               	movwf	??_UI& (0+255),b
  8683  000028  0EE4               	movlw	228
  8684  00002A                     u10137:
  8685  00002A  2EE8               	decfsz	wreg,f,c
  8686  00002C  D7FE               	bra	u10137
  8687  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8688  000030  D7FC               	bra	u10137
  8689  000032  F000               	nop	
  8690                           
  8691                           ;UI.c: 79: lcdInst(0b10000000);;
  8692  000034  0E80               	movlw	128
  8693  000036  ECEF  F02D         	call	_lcdInst
  8694                           
  8695                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8696  00003A  0E52               	movlw	low STR_1
  8697  00003C  0100               	movlb	0	; () banked
  8698  00003E  6F8E               	movwf	printf@f& (0+255),b
  8699  000040  0EFB               	movlw	high STR_1
  8700  000042  0100               	movlb	0	; () banked
  8701  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8702  000046  0E01               	movlw	1
  8703  000048  0100               	movlb	0	; () banked
  8704  00004A  25FD               	addwf	_sel& (0+255),w,b
  8705  00004C  0100               	movlb	0	; () banked
  8706  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8707  000050  0100               	movlb	0	; () banked
  8708  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8709  000054  0E00               	movlw	0
  8710  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8711  000058  ECED  F00D         	call	_printf	;wreg free
  8712                           
  8713                           ;UI.c: 81: lcdInst(0b11000000);;
  8714  00005C  0EC0               	movlw	192
  8715  00005E  ECEF  F02D         	call	_lcdInst
  8716                           
  8717                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8718  000062  0E0E               	movlw	14
  8719  000064  0100               	movlb	0	; () banked
  8720  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8721  000068  0E10               	movlw	16
  8722  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8723  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8724  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8725  000074  ECEE  F025         	call	___awmod	;wreg free
  8726  000078  C080  F0C6         	movff	?___awmod,_UI$2430
  8727  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2430+1
  8728                           
  8729                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8730  000080  0E49               	movlw	low STR_2
  8731  000082  0100               	movlb	0	; () banked
  8732  000084  6F8E               	movwf	printf@f& (0+255),b
  8733  000086  0EFF               	movlw	high STR_2
  8734  000088  0100               	movlb	0	; () banked
  8735  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8736  00008C  0E0E               	movlw	14
  8737  00008E  0100               	movlb	0	; () banked
  8738  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8739  000092  0E10               	movlw	16
  8740  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8741  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8742  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8743  00009E  ECEE  F025         	call	___awmod	;wreg free
  8744  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8745  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8746  0000AA  0E00               	movlw	0
  8747  0000AC  0100               	movlb	0	; () banked
  8748  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8749  0000B0  0E3C               	movlw	60
  8750  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8751  0000B4  ECDC  F024         	call	___awdiv	;wreg free
  8752  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8753  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8754  0000C0  C0C6  F080         	movff	_UI$2430,___awmod@dividend
  8755  0000C4  C0C7  F081         	movff	_UI$2430+1,___awmod@dividend+1
  8756  0000C8  0E00               	movlw	0
  8757  0000CA  0100               	movlb	0	; () banked
  8758  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8759  0000CE  0E3C               	movlw	60
  8760  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8761  0000D2  ECEE  F025         	call	___awmod	;wreg free
  8762  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8763  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8764  0000DE  ECED  F00D         	call	_printf	;wreg free
  8765  0000E2                     l185:
  8766  0000E2  B281               	btfsc	3969,1,c	;volatile
  8767  0000E4  D7FE               	goto	l185
  8768  0000E6                     l188:
  8769  0000E6  A281               	btfss	3969,1,c	;volatile
  8770  0000E8  D7FE               	goto	l188
  8771                           
  8772                           ;UI.c: 86: }
  8773                           ;UI.c: 87: if(cur_state == 12){
  8774  0000EA  0E0C               	movlw	12
  8775  0000EC  0100               	movlb	0	; () banked
  8776  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8777  0000F0  0100               	movlb	0	; () banked
  8778  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8779  0000F4  A4D8               	btfss	status,2,c
  8780  0000F6  D003               	goto	l9266
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;UI.c: 88: change_state_to_menu_12();
  8784  0000F8  EC22  F02B         	call	_change_state_to_menu_12	;wreg free
  8785                           
  8786                           ;UI.c: 89: }
  8787  0000FC  D002               	goto	l193
  8788  0000FE                     l9266:
  8789                           
  8790                           ;UI.c: 90: else{
  8791                           ;UI.c: 91: change_state_to_menu_22();
  8792  0000FE  EC06  F02B         	call	_change_state_to_menu_22	;wreg free
  8793  000102                     l193:
  8794  000102  B281               	btfsc	3969,1,c	;volatile
  8795  000104  D7FE               	goto	l193
  8796                           
  8797                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8798  000106  0E05               	movlw	5
  8799  000108  0100               	movlb	0	; () banked
  8800  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8801  00010C  0E0F               	movlw	15
  8802  00010E  0100               	movlb	0	; () banked
  8803  000110  6FC4               	movwf	??_UI& (0+255),b
  8804  000112  0EF1               	movlw	241
  8805  000114                     u10147:
  8806  000114  2EE8               	decfsz	wreg,f,c
  8807  000116  D7FE               	bra	u10147
  8808  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8809  00011A  D7FC               	bra	u10147
  8810  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8811  00011E  D7FA               	bra	u10147
  8812                           
  8813                           ;UI.c: 95: machine_state = UI_state;
  8814  000120  0E00               	movlw	0
  8815  000122  0100               	movlb	0	; () banked
  8816  000124  6FFC               	movwf	_machine_state& (0+255),b
  8817                           
  8818                           ;UI.c: 96: }
  8819  000126  D3D2               	goto	l9592
  8820  000128                     l9272:
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;UI.c: 97: else if(cur_state == 0){
  8824  000128  0100               	movlb	0	; () banked
  8825  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8826  00012C  0100               	movlb	0	; () banked
  8827  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8828  000130  A4D8               	btfss	status,2,c
  8829  000132  D3CC               	goto	l9592
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8833  000134  0E00               	movlw	0
  8834  000136  0100               	movlb	0	; () banked
  8835  000138  6FC8               	movwf	UI@i& (0+255),b
  8836  00013A                     l9276:
  8837                           
  8838                           ; BSR set to: 0
  8839  00013A  0E63               	movlw	99
  8840  00013C  0100               	movlb	0	; () banked
  8841  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8842  000140  D001               	goto	l9280
  8843  000142  D00C               	goto	l9284
  8844  000144                     l9280:
  8845                           
  8846                           ; BSR set to: 0
  8847  000144  0E68               	movlw	104
  8848  000146  0100               	movlb	0	; () banked
  8849  000148  6FC4               	movwf	??_UI& (0+255),b
  8850  00014A  0EE4               	movlw	228
  8851  00014C                     u10157:
  8852  00014C  2EE8               	decfsz	wreg,f,c
  8853  00014E  D7FE               	bra	u10157
  8854  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8855  000152  D7FC               	bra	u10157
  8856  000154  F000               	nop	
  8857  000156  0100               	movlb	0	; () banked
  8858  000158  2BC8               	incf	UI@i& (0+255),f,b
  8859  00015A  D7EF               	goto	l9276
  8860  00015C                     l9284:
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;UI.c: 99: if(cur_state == 0){
  8864  00015C  0100               	movlb	0	; () banked
  8865  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8866  000160  0100               	movlb	0	; () banked
  8867  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8868  000164  A4D8               	btfss	status,2,c
  8869  000166  D3B2               	goto	l9592
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;UI.c: 100: printRTC();
  8873  000168  ECC1  F016         	call	_printRTC	;wreg free
  8874                           
  8875                           ;UI.c: 101: }
  8876                           ;UI.c: 102: }
  8877                           ;UI.c: 103: while(logstate){
  8878  00016C  D3AF               	goto	l9592
  8879  00016E                     l9288:
  8880                           
  8881                           ;UI.c: 105: if(!log_completion){
  8882  00016E  0100               	movlb	0	; () banked
  8883  000170  51F2               	movf	_log_completion& (0+255),w,b
  8884  000172  0100               	movlb	0	; () banked
  8885  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  8886  000176  A4D8               	btfss	status,2,c
  8887  000178  D041               	goto	l9318
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8891  00017A  0E01               	movlw	1
  8892  00017C  ECEF  F02D         	call	_lcdInst
  8893  000180  0E68               	movlw	104
  8894  000182  0100               	movlb	0	; () banked
  8895  000184  6FC4               	movwf	??_UI& (0+255),b
  8896  000186  0EE4               	movlw	228
  8897  000188                     u10167:
  8898  000188  2EE8               	decfsz	wreg,f,c
  8899  00018A  D7FE               	bra	u10167
  8900  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8901  00018E  D7FC               	bra	u10167
  8902  000190  F000               	nop	
  8903                           
  8904                           ;UI.c: 107: lcdInst(0b10000000);;
  8905  000192  0E80               	movlw	128
  8906  000194  ECEF  F02D         	call	_lcdInst
  8907                           
  8908                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8909  000198  0E40               	movlw	low STR_3
  8910  00019A  0100               	movlb	0	; () banked
  8911  00019C  6F8E               	movwf	printf@f& (0+255),b
  8912  00019E  0EFB               	movlw	high STR_3
  8913  0001A0  0100               	movlb	0	; () banked
  8914  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8915  0001A4  C0F0  F090         	movff	_log,?_printf+2
  8916  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  8917  0001AC  ECED  F00D         	call	_printf	;wreg free
  8918                           
  8919                           ;UI.c: 109: lcdInst(0b11000000);;
  8920  0001B0  0EC0               	movlw	192
  8921  0001B2  ECEF  F02D         	call	_lcdInst
  8922                           
  8923                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8924  0001B6  0E5D               	movlw	low STR_4
  8925  0001B8  0100               	movlb	0	; () banked
  8926  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8927  0001BC  0EFE               	movlw	high STR_4
  8928  0001BE  0100               	movlb	0	; () banked
  8929  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8930  0001C2  ECED  F00D         	call	_printf	;wreg free
  8931  0001C6                     l9302:
  8932  0001C6  0E00               	movlw	0
  8933  0001C8  0100               	movlb	0	; () banked
  8934  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8935  0001CC                     l9304:
  8936                           
  8937                           ; BSR set to: 0
  8938  0001CC  0E63               	movlw	99
  8939  0001CE  0100               	movlb	0	; () banked
  8940  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8941  0001D2  D001               	goto	l9308
  8942  0001D4  D00C               	goto	l9312
  8943  0001D6                     l9308:
  8944                           
  8945                           ; BSR set to: 0
  8946  0001D6  0E68               	movlw	104
  8947  0001D8  0100               	movlb	0	; () banked
  8948  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8949  0001DC  0EE4               	movlw	228
  8950  0001DE                     u10177:
  8951  0001DE  2EE8               	decfsz	wreg,f,c
  8952  0001E0  D7FE               	bra	u10177
  8953  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8954  0001E4  D7FC               	bra	u10177
  8955  0001E6  F000               	nop	
  8956  0001E8  0100               	movlb	0	; () banked
  8957  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8958  0001EC  D7EF               	goto	l9304
  8959  0001EE                     l9312:
  8960                           
  8961                           ; BSR set to: 0
  8962  0001EE  0100               	movlb	0	; () banked
  8963  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8964  0001F2  0100               	movlb	0	; () banked
  8965  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8966  0001F6  B4D8               	btfsc	status,2,c
  8967  0001F8  0012               	return	
  8968  0001FA  D7E5               	goto	l9302
  8969  0001FC                     l9318:
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;UI.c: 114: else{
  8973                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8974  0001FC  0E01               	movlw	1
  8975  0001FE  ECEF  F02D         	call	_lcdInst
  8976  000202  0E68               	movlw	104
  8977  000204  0100               	movlb	0	; () banked
  8978  000206  6FC4               	movwf	??_UI& (0+255),b
  8979  000208  0EE4               	movlw	228
  8980  00020A                     u10187:
  8981  00020A  2EE8               	decfsz	wreg,f,c
  8982  00020C  D7FE               	bra	u10187
  8983  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  8984  000210  D7FC               	bra	u10187
  8985  000212  F000               	nop	
  8986                           
  8987                           ;UI.c: 116: lcdInst(0b10000000);;
  8988  000214  0E80               	movlw	128
  8989  000216  ECEF  F02D         	call	_lcdInst
  8990                           
  8991                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8992  00021A  0E40               	movlw	low STR_3
  8993  00021C  0100               	movlb	0	; () banked
  8994  00021E  6F8E               	movwf	printf@f& (0+255),b
  8995  000220  0EFB               	movlw	high STR_3
  8996  000222  0100               	movlb	0	; () banked
  8997  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  8998  000226  C0F0  F090         	movff	_log,?_printf+2
  8999  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  9000  00022E  ECED  F00D         	call	_printf	;wreg free
  9001                           
  9002                           ;UI.c: 118: lcdInst(0b11000000);;
  9003  000232  0EC0               	movlw	192
  9004  000234  ECEF  F02D         	call	_lcdInst
  9005                           
  9006                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9007  000238  0ED9               	movlw	low STR_6
  9008  00023A  0100               	movlb	0	; () banked
  9009  00023C  6F8E               	movwf	printf@f& (0+255),b
  9010  00023E  0EFD               	movlw	high STR_6
  9011  000240  0100               	movlb	0	; () banked
  9012  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9013  000244  ECED  F00D         	call	_printf	;wreg free
  9014                           
  9015                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9016  000248  0E00               	movlw	0
  9017  00024A  0100               	movlb	0	; () banked
  9018  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  9019  00024E                     l9332:
  9020                           
  9021                           ; BSR set to: 0
  9022  00024E  0E63               	movlw	99
  9023  000250  0100               	movlb	0	; () banked
  9024  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  9025  000254  D001               	goto	l9336
  9026  000256  D00C               	goto	l9340
  9027  000258                     l9336:
  9028                           
  9029                           ; BSR set to: 0
  9030  000258  0E68               	movlw	104
  9031  00025A  0100               	movlb	0	; () banked
  9032  00025C  6FC4               	movwf	??_UI& (0+255),b
  9033  00025E  0EE4               	movlw	228
  9034  000260                     u10197:
  9035  000260  2EE8               	decfsz	wreg,f,c
  9036  000262  D7FE               	bra	u10197
  9037  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9038  000266  D7FC               	bra	u10197
  9039  000268  F000               	nop	
  9040  00026A  0100               	movlb	0	; () banked
  9041  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  9042  00026E  D7EF               	goto	l9332
  9043  000270                     l9340:
  9044                           
  9045                           ; BSR set to: 0
  9046  000270  0100               	movlb	0	; () banked
  9047  000272  51F8               	movf	_logstate& (0+255),w,b
  9048  000274  0100               	movlb	0	; () banked
  9049  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9050  000278  B4D8               	btfsc	status,2,c
  9051  00027A  0012               	return	
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9055                           
  9056                           ; BSR set to: 0
  9057                           
  9058                           ; BSR set to: 0
  9059  00027C  0E00               	movlw	0
  9060  00027E  0100               	movlb	0	; () banked
  9061  000280  6FCB               	movwf	UI@i_416& (0+255),b
  9062  000282                     l9346:
  9063                           
  9064                           ; BSR set to: 0
  9065  000282  0E63               	movlw	99
  9066  000284  0100               	movlb	0	; () banked
  9067  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  9068  000288  D001               	goto	l9350
  9069  00028A  D00C               	goto	l9354
  9070  00028C                     l9350:
  9071                           
  9072                           ; BSR set to: 0
  9073  00028C  0E68               	movlw	104
  9074  00028E  0100               	movlb	0	; () banked
  9075  000290  6FC4               	movwf	??_UI& (0+255),b
  9076  000292  0EE4               	movlw	228
  9077  000294                     u10207:
  9078  000294  2EE8               	decfsz	wreg,f,c
  9079  000296  D7FE               	bra	u10207
  9080  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9081  00029A  D7FC               	bra	u10207
  9082  00029C  F000               	nop	
  9083  00029E  0100               	movlb	0	; () banked
  9084  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9085  0002A2  D7EF               	goto	l9346
  9086  0002A4                     l9354:
  9087                           
  9088                           ; BSR set to: 0
  9089  0002A4  0100               	movlb	0	; () banked
  9090  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9091  0002A8  0100               	movlb	0	; () banked
  9092  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9093  0002AC  B4D8               	btfsc	status,2,c
  9094  0002AE  0012               	return	
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9098                           
  9099                           ; BSR set to: 0
  9100                           
  9101                           ; BSR set to: 0
  9102  0002B0  0E01               	movlw	1
  9103  0002B2  ECEF  F02D         	call	_lcdInst
  9104  0002B6  0E68               	movlw	104
  9105  0002B8  0100               	movlb	0	; () banked
  9106  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9107  0002BC  0EE4               	movlw	228
  9108  0002BE                     u10217:
  9109  0002BE  2EE8               	decfsz	wreg,f,c
  9110  0002C0  D7FE               	bra	u10217
  9111  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9112  0002C4  D7FC               	bra	u10217
  9113  0002C6  F000               	nop	
  9114                           
  9115                           ;UI.c: 125: lcdInst(0b10000000);;
  9116  0002C8  0E80               	movlw	128
  9117  0002CA  ECEF  F02D         	call	_lcdInst
  9118                           
  9119                           ;UI.c: 126: printf("START:");
  9120  0002CE  0EC3               	movlw	low STR_7
  9121  0002D0  0100               	movlb	0	; () banked
  9122  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9123  0002D4  0EFF               	movlw	high STR_7
  9124  0002D6  0100               	movlb	0	; () banked
  9125  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9126  0002DA  ECED  F00D         	call	_printf	;wreg free
  9127                           
  9128                           ;UI.c: 127: lcdInst(0b11000000);;
  9129  0002DE  0EC0               	movlw	192
  9130  0002E0  ECEF  F02D         	call	_lcdInst
  9131                           
  9132                           ;UI.c: 128: char month[] = "MMM";
  9133  0002E4  C149  F0D6         	movff	UI@F3246,UI@month
  9134  0002E8  C14A  F0D7         	movff	UI@F3246+1,UI@month+1
  9135  0002EC  C14B  F0D8         	movff	UI@F3246+2,UI@month+2
  9136  0002F0  C14C  F0D9         	movff	UI@F3246+3,UI@month+3
  9137                           
  9138                           ;UI.c: 129: switch(log_startTime[5]){
  9139  0002F4  D0C3               	goto	l9398
  9140  0002F6                     l9370:
  9141                           
  9142                           ;UI.c: 131: strcpy(month, "JAN");
  9143  0002F6  0ED6               	movlw	low UI@month
  9144  0002F8  0100               	movlb	0	; () banked
  9145  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9146  0002FC  0E00               	movlw	high UI@month
  9147  0002FE  0100               	movlb	0	; () banked
  9148  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9149  000302  0EDA               	movlw	low STR_8
  9150  000304  0100               	movlb	0	; () banked
  9151  000306  6F82               	movwf	strcpy@from& (0+255),b
  9152  000308  0EFF               	movlw	high STR_8
  9153  00030A  0100               	movlb	0	; () banked
  9154  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9155  00030E  EC3E  F02B         	call	_strcpy	;wreg free
  9156                           
  9157                           ;UI.c: 132: break;
  9158  000312  D0E6               	goto	l9400
  9159  000314                     l9372:
  9160                           
  9161                           ;UI.c: 134: strcpy(month, "FEB");
  9162  000314  0ED6               	movlw	low UI@month
  9163  000316  0100               	movlb	0	; () banked
  9164  000318  6F80               	movwf	strcpy@to& (0+255),b
  9165  00031A  0E00               	movlw	high UI@month
  9166  00031C  0100               	movlb	0	; () banked
  9167  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9168  000320  0ECA               	movlw	low STR_9
  9169  000322  0100               	movlb	0	; () banked
  9170  000324  6F82               	movwf	strcpy@from& (0+255),b
  9171  000326  0EFF               	movlw	high STR_9
  9172  000328  0100               	movlb	0	; () banked
  9173  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9174  00032C  EC3E  F02B         	call	_strcpy	;wreg free
  9175                           
  9176                           ;UI.c: 135: break;
  9177  000330  D0D7               	goto	l9400
  9178  000332                     l9374:
  9179                           
  9180                           ;UI.c: 137: strcpy(month, "MAR");
  9181  000332  0ED6               	movlw	low UI@month
  9182  000334  0100               	movlb	0	; () banked
  9183  000336  6F80               	movwf	strcpy@to& (0+255),b
  9184  000338  0E00               	movlw	high UI@month
  9185  00033A  0100               	movlb	0	; () banked
  9186  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9187  00033E  0EE6               	movlw	low STR_10
  9188  000340  0100               	movlb	0	; () banked
  9189  000342  6F82               	movwf	strcpy@from& (0+255),b
  9190  000344  0EFF               	movlw	high STR_10
  9191  000346  0100               	movlb	0	; () banked
  9192  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9193  00034A  EC3E  F02B         	call	_strcpy	;wreg free
  9194                           
  9195                           ;UI.c: 138: break;
  9196  00034E  D0C8               	goto	l9400
  9197  000350                     l9376:
  9198                           
  9199                           ;UI.c: 140: strcpy(month, "APR");
  9200  000350  0ED6               	movlw	low UI@month
  9201  000352  0100               	movlb	0	; () banked
  9202  000354  6F80               	movwf	strcpy@to& (0+255),b
  9203  000356  0E00               	movlw	high UI@month
  9204  000358  0100               	movlb	0	; () banked
  9205  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9206  00035C  0EEA               	movlw	low STR_11
  9207  00035E  0100               	movlb	0	; () banked
  9208  000360  6F82               	movwf	strcpy@from& (0+255),b
  9209  000362  0EFF               	movlw	high STR_11
  9210  000364  0100               	movlb	0	; () banked
  9211  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9212  000368  EC3E  F02B         	call	_strcpy	;wreg free
  9213                           
  9214                           ;UI.c: 141: break;
  9215  00036C  D0B9               	goto	l9400
  9216  00036E                     l9378:
  9217                           
  9218                           ;UI.c: 143: strcpy(month, "MAY");
  9219  00036E  0ED6               	movlw	low UI@month
  9220  000370  0100               	movlb	0	; () banked
  9221  000372  6F80               	movwf	strcpy@to& (0+255),b
  9222  000374  0E00               	movlw	high UI@month
  9223  000376  0100               	movlb	0	; () banked
  9224  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9225  00037A  0EFA               	movlw	low STR_12
  9226  00037C  0100               	movlb	0	; () banked
  9227  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9228  000380  0EFF               	movlw	high STR_12
  9229  000382  0100               	movlb	0	; () banked
  9230  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9231  000386  EC3E  F02B         	call	_strcpy	;wreg free
  9232                           
  9233                           ;UI.c: 144: break;
  9234  00038A  D0AA               	goto	l9400
  9235  00038C                     l9380:
  9236                           
  9237                           ;UI.c: 146: strcpy(month, "JUN");
  9238  00038C  0ED6               	movlw	low UI@month
  9239  00038E  0100               	movlb	0	; () banked
  9240  000390  6F80               	movwf	strcpy@to& (0+255),b
  9241  000392  0E00               	movlw	high UI@month
  9242  000394  0100               	movlb	0	; () banked
  9243  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9244  000398  0EDE               	movlw	low STR_13
  9245  00039A  0100               	movlb	0	; () banked
  9246  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9247  00039E  0EFF               	movlw	high STR_13
  9248  0003A0  0100               	movlb	0	; () banked
  9249  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9250  0003A4  EC3E  F02B         	call	_strcpy	;wreg free
  9251                           
  9252                           ;UI.c: 147: break;
  9253  0003A8  D09B               	goto	l9400
  9254  0003AA                     l9382:
  9255                           
  9256                           ;UI.c: 149: strcpy(month, "JUL");
  9257  0003AA  0ED6               	movlw	low UI@month
  9258  0003AC  0100               	movlb	0	; () banked
  9259  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9260  0003B0  0E00               	movlw	high UI@month
  9261  0003B2  0100               	movlb	0	; () banked
  9262  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9263  0003B6  0ED6               	movlw	low STR_14
  9264  0003B8  0100               	movlb	0	; () banked
  9265  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9266  0003BC  0EFF               	movlw	high STR_14
  9267  0003BE  0100               	movlb	0	; () banked
  9268  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9269  0003C2  EC3E  F02B         	call	_strcpy	;wreg free
  9270                           
  9271                           ;UI.c: 150: break;
  9272  0003C6  D08C               	goto	l9400
  9273  0003C8                     l9384:
  9274                           
  9275                           ;UI.c: 152: strcpy(month, "AUG");
  9276  0003C8  0ED6               	movlw	low UI@month
  9277  0003CA  0100               	movlb	0	; () banked
  9278  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9279  0003CE  0E00               	movlw	high UI@month
  9280  0003D0  0100               	movlb	0	; () banked
  9281  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9282  0003D4  0ED2               	movlw	low STR_15
  9283  0003D6  0100               	movlb	0	; () banked
  9284  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9285  0003DA  0EFF               	movlw	high STR_15
  9286  0003DC  0100               	movlb	0	; () banked
  9287  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9288  0003E0  EC3E  F02B         	call	_strcpy	;wreg free
  9289                           
  9290                           ;UI.c: 153: break;
  9291  0003E4  D07D               	goto	l9400
  9292  0003E6                     l9386:
  9293                           
  9294                           ;UI.c: 155: strcpy(month, "SEP");
  9295  0003E6  0ED6               	movlw	low UI@month
  9296  0003E8  0100               	movlb	0	; () banked
  9297  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9298  0003EC  0E00               	movlw	high UI@month
  9299  0003EE  0100               	movlb	0	; () banked
  9300  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9301  0003F2  0EE2               	movlw	low STR_16
  9302  0003F4  0100               	movlb	0	; () banked
  9303  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9304  0003F8  0EFF               	movlw	high STR_16
  9305  0003FA  0100               	movlb	0	; () banked
  9306  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9307  0003FE  EC3E  F02B         	call	_strcpy	;wreg free
  9308                           
  9309                           ;UI.c: 156: break;
  9310  000402  D06E               	goto	l9400
  9311  000404                     l9388:
  9312                           
  9313                           ;UI.c: 158: strcpy(month, "OCT");
  9314  000404  0ED6               	movlw	low UI@month
  9315  000406  0100               	movlb	0	; () banked
  9316  000408  6F80               	movwf	strcpy@to& (0+255),b
  9317  00040A  0E00               	movlw	high UI@month
  9318  00040C  0100               	movlb	0	; () banked
  9319  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9320  000410  0EF2               	movlw	low STR_17
  9321  000412  0100               	movlb	0	; () banked
  9322  000414  6F82               	movwf	strcpy@from& (0+255),b
  9323  000416  0EFF               	movlw	high STR_17
  9324  000418  0100               	movlb	0	; () banked
  9325  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9326  00041C  EC3E  F02B         	call	_strcpy	;wreg free
  9327                           
  9328                           ;UI.c: 159: break;
  9329  000420  D05F               	goto	l9400
  9330  000422                     l9390:
  9331                           
  9332                           ;UI.c: 161: strcpy(month, "NOV");
  9333  000422  0ED6               	movlw	low UI@month
  9334  000424  0100               	movlb	0	; () banked
  9335  000426  6F80               	movwf	strcpy@to& (0+255),b
  9336  000428  0E00               	movlw	high UI@month
  9337  00042A  0100               	movlb	0	; () banked
  9338  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9339  00042E  0EF6               	movlw	low STR_18
  9340  000430  0100               	movlb	0	; () banked
  9341  000432  6F82               	movwf	strcpy@from& (0+255),b
  9342  000434  0EFF               	movlw	high STR_18
  9343  000436  0100               	movlb	0	; () banked
  9344  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9345  00043A  EC3E  F02B         	call	_strcpy	;wreg free
  9346                           
  9347                           ;UI.c: 162: break;
  9348  00043E  D050               	goto	l9400
  9349  000440                     l9392:
  9350                           
  9351                           ;UI.c: 164: strcpy(month, "DEC");
  9352  000440  0ED6               	movlw	low UI@month
  9353  000442  0100               	movlb	0	; () banked
  9354  000444  6F80               	movwf	strcpy@to& (0+255),b
  9355  000446  0E00               	movlw	high UI@month
  9356  000448  0100               	movlb	0	; () banked
  9357  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9358  00044C  0ECE               	movlw	low STR_19
  9359  00044E  0100               	movlb	0	; () banked
  9360  000450  6F82               	movwf	strcpy@from& (0+255),b
  9361  000452  0EFF               	movlw	high STR_19
  9362  000454  0100               	movlb	0	; () banked
  9363  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9364  000458  EC3E  F02B         	call	_strcpy	;wreg free
  9365                           
  9366                           ;UI.c: 165: break;
  9367  00045C  D041               	goto	l9400
  9368  00045E                     l9394:
  9369                           
  9370                           ;UI.c: 167: strcpy(month, "ERR");
  9371  00045E  0ED6               	movlw	low UI@month
  9372  000460  0100               	movlb	0	; () banked
  9373  000462  6F80               	movwf	strcpy@to& (0+255),b
  9374  000464  0E00               	movlw	high UI@month
  9375  000466  0100               	movlb	0	; () banked
  9376  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9377  00046A  0EEE               	movlw	low STR_20
  9378  00046C  0100               	movlb	0	; () banked
  9379  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9380  000470  0EFF               	movlw	high STR_20
  9381  000472  0100               	movlb	0	; () banked
  9382  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9383  000476  EC3E  F02B         	call	_strcpy	;wreg free
  9384                           
  9385                           ;UI.c: 169: }
  9386                           
  9387                           ;UI.c: 168: break;
  9388  00047A  D032               	goto	l9400
  9389  00047C                     l9398:
  9390  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9391  000480  CFDE F0C4          	movff	postinc2,??_UI
  9392  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9393                           
  9394                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9395                           ; Switch size 1, requested type "space"
  9396                           ; Number of cases is 1, Range of values is 0 to 0
  9397                           ; switch strategies available:
  9398                           ; Name         Instructions Cycles
  9399                           ; simple_byte            4     3 (average)
  9400                           ;	Chosen strategy is simple_byte
  9401  000488  0100               	movlb	0	; () banked
  9402  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9403  00048C  0A00               	xorlw	0	; case 0
  9404  00048E  A4D8               	btfss	status,2,c
  9405  000490  D7E6               	goto	l9394
  9406                           
  9407                           ; BSR set to: 0
  9408                           ; Switch size 1, requested type "space"
  9409                           ; Number of cases is 12, Range of values is 1 to 12
  9410                           ; switch strategies available:
  9411                           ; Name         Instructions Cycles
  9412                           ; simple_byte           37    19 (average)
  9413                           ;	Chosen strategy is simple_byte
  9414  000492  0100               	movlb	0	; () banked
  9415  000494  51C4               	movf	??_UI& (0+255),w,b
  9416  000496  0A01               	xorlw	1	; case 1
  9417  000498  B4D8               	btfsc	status,2,c
  9418  00049A  D72D               	goto	l9370
  9419  00049C  0A03               	xorlw	3	; case 2
  9420  00049E  B4D8               	btfsc	status,2,c
  9421  0004A0  D739               	goto	l9372
  9422  0004A2  0A01               	xorlw	1	; case 3
  9423  0004A4  B4D8               	btfsc	status,2,c
  9424  0004A6  D745               	goto	l9374
  9425  0004A8  0A07               	xorlw	7	; case 4
  9426  0004AA  B4D8               	btfsc	status,2,c
  9427  0004AC  D751               	goto	l9376
  9428  0004AE  0A01               	xorlw	1	; case 5
  9429  0004B0  B4D8               	btfsc	status,2,c
  9430  0004B2  D75D               	goto	l9378
  9431  0004B4  0A03               	xorlw	3	; case 6
  9432  0004B6  B4D8               	btfsc	status,2,c
  9433  0004B8  D769               	goto	l9380
  9434  0004BA  0A01               	xorlw	1	; case 7
  9435  0004BC  B4D8               	btfsc	status,2,c
  9436  0004BE  D775               	goto	l9382
  9437  0004C0  0A0F               	xorlw	15	; case 8
  9438  0004C2  B4D8               	btfsc	status,2,c
  9439  0004C4  D781               	goto	l9384
  9440  0004C6  0A01               	xorlw	1	; case 9
  9441  0004C8  B4D8               	btfsc	status,2,c
  9442  0004CA  D78D               	goto	l9386
  9443  0004CC  0A03               	xorlw	3	; case 10
  9444  0004CE  B4D8               	btfsc	status,2,c
  9445  0004D0  D799               	goto	l9388
  9446  0004D2  0A01               	xorlw	1	; case 11
  9447  0004D4  B4D8               	btfsc	status,2,c
  9448  0004D6  D7A5               	goto	l9390
  9449  0004D8  0A07               	xorlw	7	; case 12
  9450  0004DA  B4D8               	btfsc	status,2,c
  9451  0004DC  D7B1               	goto	l9392
  9452  0004DE  D7BF               	goto	l9394
  9453  0004E0                     l9400:
  9454                           
  9455                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9456  0004E0  0EA6               	movlw	low STR_21
  9457  0004E2  0100               	movlb	0	; () banked
  9458  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9459  0004E6  0EFA               	movlw	high STR_21
  9460  0004E8  0100               	movlb	0	; () banked
  9461  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9462  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9463  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9464  0004F4  0ED6               	movlw	low UI@month
  9465  0004F6  0100               	movlb	0	; () banked
  9466  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9467  0004FA  0E00               	movlw	high UI@month
  9468  0004FC  0100               	movlb	0	; () banked
  9469  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9470  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9471  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9472  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9473  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9474  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9475  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9476  000518  ECED  F00D         	call	_printf	;wreg free
  9477                           
  9478                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9479  00051C  0E00               	movlw	0
  9480  00051E  0100               	movlb	0	; () banked
  9481  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9482  000522                     l9404:
  9483                           
  9484                           ; BSR set to: 0
  9485  000522  0E63               	movlw	99
  9486  000524  0100               	movlb	0	; () banked
  9487  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9488  000528  D001               	goto	l9408
  9489  00052A  D00C               	goto	l9412
  9490  00052C                     l9408:
  9491                           
  9492                           ; BSR set to: 0
  9493  00052C  0E68               	movlw	104
  9494  00052E  0100               	movlb	0	; () banked
  9495  000530  6FC4               	movwf	??_UI& (0+255),b
  9496  000532  0EE4               	movlw	228
  9497  000534                     u10227:
  9498  000534  2EE8               	decfsz	wreg,f,c
  9499  000536  D7FE               	bra	u10227
  9500  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9501  00053A  D7FC               	bra	u10227
  9502  00053C  F000               	nop	
  9503  00053E  0100               	movlb	0	; () banked
  9504  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9505  000542  D7EF               	goto	l9404
  9506  000544                     l9412:
  9507                           
  9508                           ; BSR set to: 0
  9509  000544  0100               	movlb	0	; () banked
  9510  000546  51F8               	movf	_logstate& (0+255),w,b
  9511  000548  0100               	movlb	0	; () banked
  9512  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9513  00054C  B4D8               	btfsc	status,2,c
  9514  00054E  0012               	return	
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9518                           
  9519                           ; BSR set to: 0
  9520                           
  9521                           ; BSR set to: 0
  9522  000550  0E00               	movlw	0
  9523  000552  0100               	movlb	0	; () banked
  9524  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9525  000556                     l9418:
  9526                           
  9527                           ; BSR set to: 0
  9528  000556  0E63               	movlw	99
  9529  000558  0100               	movlb	0	; () banked
  9530  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9531  00055C  D001               	goto	l9422
  9532  00055E  D00C               	goto	l9426
  9533  000560                     l9422:
  9534                           
  9535                           ; BSR set to: 0
  9536  000560  0E68               	movlw	104
  9537  000562  0100               	movlb	0	; () banked
  9538  000564  6FC4               	movwf	??_UI& (0+255),b
  9539  000566  0EE4               	movlw	228
  9540  000568                     u10237:
  9541  000568  2EE8               	decfsz	wreg,f,c
  9542  00056A  D7FE               	bra	u10237
  9543  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9544  00056E  D7FC               	bra	u10237
  9545  000570  F000               	nop	
  9546  000572  0100               	movlb	0	; () banked
  9547  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9548  000576  D7EF               	goto	l9418
  9549  000578                     l9426:
  9550                           
  9551                           ; BSR set to: 0
  9552  000578  0100               	movlb	0	; () banked
  9553  00057A  51F8               	movf	_logstate& (0+255),w,b
  9554  00057C  0100               	movlb	0	; () banked
  9555  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9556  000580  B4D8               	btfsc	status,2,c
  9557  000582  0012               	return	
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9561                           
  9562                           ; BSR set to: 0
  9563                           
  9564                           ; BSR set to: 0
  9565  000584  0E01               	movlw	1
  9566  000586  ECEF  F02D         	call	_lcdInst
  9567  00058A  0E68               	movlw	104
  9568  00058C  0100               	movlb	0	; () banked
  9569  00058E  6FC4               	movwf	??_UI& (0+255),b
  9570  000590  0EE4               	movlw	228
  9571  000592                     u10247:
  9572  000592  2EE8               	decfsz	wreg,f,c
  9573  000594  D7FE               	bra	u10247
  9574  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9575  000598  D7FC               	bra	u10247
  9576  00059A  F000               	nop	
  9577                           
  9578                           ;UI.c: 176: lcdInst(0b10000000);;
  9579  00059C  0E80               	movlw	128
  9580  00059E  ECEF  F02D         	call	_lcdInst
  9581                           
  9582                           ;UI.c: 177: printf("DURATION:");
  9583  0005A2  0E9A               	movlw	low STR_22
  9584  0005A4  0100               	movlb	0	; () banked
  9585  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9586  0005A8  0EFF               	movlw	high STR_22
  9587  0005AA  0100               	movlb	0	; () banked
  9588  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9589  0005AE  ECED  F00D         	call	_printf	;wreg free
  9590                           
  9591                           ;UI.c: 178: lcdInst(0b11000000);;
  9592  0005B2  0EC0               	movlw	192
  9593  0005B4  ECEF  F02D         	call	_lcdInst
  9594                           
  9595                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9596  0005B8  0E0E               	movlw	14
  9597  0005BA  0100               	movlb	0	; () banked
  9598  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9599  0005BE  0E10               	movlw	16
  9600  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9601  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9602  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9603  0005CA  ECEE  F025         	call	___awmod	;wreg free
  9604  0005CE  C080  F0C6         	movff	?___awmod,_UI$2430
  9605  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2430+1
  9606                           
  9607                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9608  0005D6  0E3B               	movlw	low STR_23
  9609  0005D8  0100               	movlb	0	; () banked
  9610  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9611  0005DC  0EFF               	movlw	high STR_23
  9612  0005DE  0100               	movlb	0	; () banked
  9613  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9614  0005E2  0E0E               	movlw	14
  9615  0005E4  0100               	movlb	0	; () banked
  9616  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9617  0005E8  0E10               	movlw	16
  9618  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9619  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9620  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9621  0005F4  ECEE  F025         	call	___awmod	;wreg free
  9622  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9623  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9624  000600  0E00               	movlw	0
  9625  000602  0100               	movlb	0	; () banked
  9626  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9627  000606  0E3C               	movlw	60
  9628  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9629  00060A  ECDC  F024         	call	___awdiv	;wreg free
  9630  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9631  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9632  000616  C0C6  F080         	movff	_UI$2430,___awmod@dividend
  9633  00061A  C0C7  F081         	movff	_UI$2430+1,___awmod@dividend+1
  9634  00061E  0E00               	movlw	0
  9635  000620  0100               	movlb	0	; () banked
  9636  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9637  000624  0E3C               	movlw	60
  9638  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9639  000628  ECEE  F025         	call	___awmod	;wreg free
  9640  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9641  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9642  000634  ECED  F00D         	call	_printf	;wreg free
  9643                           
  9644                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9645  000638  0E00               	movlw	0
  9646  00063A  0100               	movlb	0	; () banked
  9647  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9648  00063E                     l9446:
  9649                           
  9650                           ; BSR set to: 0
  9651  00063E  0E63               	movlw	99
  9652  000640  0100               	movlb	0	; () banked
  9653  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9654  000644  D001               	goto	l9450
  9655  000646  D00C               	goto	l9454
  9656  000648                     l9450:
  9657                           
  9658                           ; BSR set to: 0
  9659  000648  0E68               	movlw	104
  9660  00064A  0100               	movlb	0	; () banked
  9661  00064C  6FC4               	movwf	??_UI& (0+255),b
  9662  00064E  0EE4               	movlw	228
  9663  000650                     u10257:
  9664  000650  2EE8               	decfsz	wreg,f,c
  9665  000652  D7FE               	bra	u10257
  9666  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9667  000656  D7FC               	bra	u10257
  9668  000658  F000               	nop	
  9669  00065A  0100               	movlb	0	; () banked
  9670  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9671  00065E  D7EF               	goto	l9446
  9672  000660                     l9454:
  9673                           
  9674                           ; BSR set to: 0
  9675  000660  0100               	movlb	0	; () banked
  9676  000662  51F8               	movf	_logstate& (0+255),w,b
  9677  000664  0100               	movlb	0	; () banked
  9678  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9679  000668  B4D8               	btfsc	status,2,c
  9680  00066A  0012               	return	
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9684                           
  9685                           ; BSR set to: 0
  9686                           
  9687                           ; BSR set to: 0
  9688  00066C  0E00               	movlw	0
  9689  00066E  0100               	movlb	0	; () banked
  9690  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9691  000672                     l9460:
  9692                           
  9693                           ; BSR set to: 0
  9694  000672  0E63               	movlw	99
  9695  000674  0100               	movlb	0	; () banked
  9696  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9697  000678  D001               	goto	l9464
  9698  00067A  D00C               	goto	l9468
  9699  00067C                     l9464:
  9700                           
  9701                           ; BSR set to: 0
  9702  00067C  0E68               	movlw	104
  9703  00067E  0100               	movlb	0	; () banked
  9704  000680  6FC4               	movwf	??_UI& (0+255),b
  9705  000682  0EE4               	movlw	228
  9706  000684                     u10267:
  9707  000684  2EE8               	decfsz	wreg,f,c
  9708  000686  D7FE               	bra	u10267
  9709  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9710  00068A  D7FC               	bra	u10267
  9711  00068C  F000               	nop	
  9712  00068E  0100               	movlb	0	; () banked
  9713  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9714  000692  D7EF               	goto	l9460
  9715  000694                     l9468:
  9716                           
  9717                           ; BSR set to: 0
  9718  000694  0100               	movlb	0	; () banked
  9719  000696  51F8               	movf	_logstate& (0+255),w,b
  9720  000698  0100               	movlb	0	; () banked
  9721  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9722  00069C  B4D8               	btfsc	status,2,c
  9723  00069E  0012               	return	
  9724                           
  9725                           ; BSR set to: 0
  9726                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9727                           
  9728                           ; BSR set to: 0
  9729                           
  9730                           ; BSR set to: 0
  9731  0006A0  0E01               	movlw	1
  9732  0006A2  ECEF  F02D         	call	_lcdInst
  9733  0006A6  0E68               	movlw	104
  9734  0006A8  0100               	movlb	0	; () banked
  9735  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9736  0006AC  0EE4               	movlw	228
  9737  0006AE                     u10277:
  9738  0006AE  2EE8               	decfsz	wreg,f,c
  9739  0006B0  D7FE               	bra	u10277
  9740  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9741  0006B4  D7FC               	bra	u10277
  9742  0006B6  F000               	nop	
  9743                           
  9744                           ;UI.c: 185: lcdInst(0b10000000);;
  9745  0006B8  0E80               	movlw	128
  9746  0006BA  ECEF  F02D         	call	_lcdInst
  9747                           
  9748                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9749  0006BE  0E2F               	movlw	low STR_24
  9750  0006C0  0100               	movlb	0	; () banked
  9751  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9752  0006C4  0EFD               	movlw	high STR_24
  9753  0006C6  0100               	movlb	0	; () banked
  9754  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9755  0006CA  ECED  F00D         	call	_printf	;wreg free
  9756                           
  9757                           ;UI.c: 187: lcdInst(0b11000000);;
  9758  0006CE  0EC0               	movlw	192
  9759  0006D0  ECEF  F02D         	call	_lcdInst
  9760                           
  9761                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9762  0006D4  0E0C               	movlw	low STR_25
  9763  0006D6  0100               	movlb	0	; () banked
  9764  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9765  0006DA  0EFE               	movlw	high STR_25
  9766  0006DC  0100               	movlb	0	; () banked
  9767  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9768  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9769  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9770  0006E8  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9771  0006EC  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9772  0006F0  ECED  F00D         	call	_printf	;wreg free
  9773                           
  9774                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9775  0006F4  0E00               	movlw	0
  9776  0006F6  0100               	movlb	0	; () banked
  9777  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9778  0006FA                     l9486:
  9779                           
  9780                           ; BSR set to: 0
  9781  0006FA  0E63               	movlw	99
  9782  0006FC  0100               	movlb	0	; () banked
  9783  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9784  000700  D001               	goto	l9490
  9785  000702  D00C               	goto	l9494
  9786  000704                     l9490:
  9787                           
  9788                           ; BSR set to: 0
  9789  000704  0E68               	movlw	104
  9790  000706  0100               	movlb	0	; () banked
  9791  000708  6FC4               	movwf	??_UI& (0+255),b
  9792  00070A  0EE4               	movlw	228
  9793  00070C                     u10287:
  9794  00070C  2EE8               	decfsz	wreg,f,c
  9795  00070E  D7FE               	bra	u10287
  9796  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9797  000712  D7FC               	bra	u10287
  9798  000714  F000               	nop	
  9799  000716  0100               	movlb	0	; () banked
  9800  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9801  00071A  D7EF               	goto	l9486
  9802  00071C                     l9494:
  9803                           
  9804                           ; BSR set to: 0
  9805  00071C  0100               	movlb	0	; () banked
  9806  00071E  51F8               	movf	_logstate& (0+255),w,b
  9807  000720  0100               	movlb	0	; () banked
  9808  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9809  000724  B4D8               	btfsc	status,2,c
  9810  000726  0012               	return	
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9814                           
  9815                           ; BSR set to: 0
  9816                           
  9817                           ; BSR set to: 0
  9818  000728  0E00               	movlw	0
  9819  00072A  0100               	movlb	0	; () banked
  9820  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9821  00072E                     l9500:
  9822                           
  9823                           ; BSR set to: 0
  9824  00072E  0E63               	movlw	99
  9825  000730  0100               	movlb	0	; () banked
  9826  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9827  000734  D001               	goto	l9504
  9828  000736  D00C               	goto	l9508
  9829  000738                     l9504:
  9830                           
  9831                           ; BSR set to: 0
  9832  000738  0E68               	movlw	104
  9833  00073A  0100               	movlb	0	; () banked
  9834  00073C  6FC4               	movwf	??_UI& (0+255),b
  9835  00073E  0EE4               	movlw	228
  9836  000740                     u10297:
  9837  000740  2EE8               	decfsz	wreg,f,c
  9838  000742  D7FE               	bra	u10297
  9839  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9840  000746  D7FC               	bra	u10297
  9841  000748  F000               	nop	
  9842  00074A  0100               	movlb	0	; () banked
  9843  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9844  00074E  D7EF               	goto	l9500
  9845  000750                     l9508:
  9846                           
  9847                           ; BSR set to: 0
  9848  000750  0100               	movlb	0	; () banked
  9849  000752  51F8               	movf	_logstate& (0+255),w,b
  9850  000754  0100               	movlb	0	; () banked
  9851  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9852  000758  B4D8               	btfsc	status,2,c
  9853  00075A  0012               	return	
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9857                           
  9858                           ; BSR set to: 0
  9859                           
  9860                           ; BSR set to: 0
  9861  00075C  0E01               	movlw	1
  9862  00075E  ECEF  F02D         	call	_lcdInst
  9863  000762  0E68               	movlw	104
  9864  000764  0100               	movlb	0	; () banked
  9865  000766  6FC4               	movwf	??_UI& (0+255),b
  9866  000768  0EE4               	movlw	228
  9867  00076A                     u10307:
  9868  00076A  2EE8               	decfsz	wreg,f,c
  9869  00076C  D7FE               	bra	u10307
  9870  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9871  000770  D7FC               	bra	u10307
  9872  000772  F000               	nop	
  9873                           
  9874                           ;UI.c: 194: lcdInst(0b10000000);;
  9875  000774  0E80               	movlw	128
  9876  000776  ECEF  F02D         	call	_lcdInst
  9877                           
  9878                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9879  00077A  0E40               	movlw	low STR_26
  9880  00077C  0100               	movlb	0	; () banked
  9881  00077E  6F8E               	movwf	printf@f& (0+255),b
  9882  000780  0EFD               	movlw	high STR_26
  9883  000782  0100               	movlb	0	; () banked
  9884  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9885  000786  ECED  F00D         	call	_printf	;wreg free
  9886                           
  9887                           ;UI.c: 196: lcdInst(0b11000000);;
  9888  00078A  0EC0               	movlw	192
  9889  00078C  ECEF  F02D         	call	_lcdInst
  9890                           
  9891                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9892  000790  0EFB               	movlw	low STR_27
  9893  000792  0100               	movlb	0	; () banked
  9894  000794  6F8E               	movwf	printf@f& (0+255),b
  9895  000796  0EFD               	movlw	high STR_27
  9896  000798  0100               	movlb	0	; () banked
  9897  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9898  00079C  C063  F090         	movff	_log_count_can_no_lab,?_printf+2
  9899  0007A0  C064  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9900  0007A4  C065  F092         	movff	_log_count_can_w_lab,?_printf+4
  9901  0007A8  C066  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9902  0007AC  ECED  F00D         	call	_printf	;wreg free
  9903                           
  9904                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9905  0007B0  0E00               	movlw	0
  9906  0007B2  0100               	movlb	0	; () banked
  9907  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9908  0007B6                     l9526:
  9909                           
  9910                           ; BSR set to: 0
  9911  0007B6  0E63               	movlw	99
  9912  0007B8  0100               	movlb	0	; () banked
  9913  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9914  0007BC  D001               	goto	l9530
  9915  0007BE  D00C               	goto	l9534
  9916  0007C0                     l9530:
  9917                           
  9918                           ; BSR set to: 0
  9919  0007C0  0E68               	movlw	104
  9920  0007C2  0100               	movlb	0	; () banked
  9921  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9922  0007C6  0EE4               	movlw	228
  9923  0007C8                     u10317:
  9924  0007C8  2EE8               	decfsz	wreg,f,c
  9925  0007CA  D7FE               	bra	u10317
  9926  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9927  0007CE  D7FC               	bra	u10317
  9928  0007D0  F000               	nop	
  9929  0007D2  0100               	movlb	0	; () banked
  9930  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9931  0007D6  D7EF               	goto	l9526
  9932  0007D8                     l9534:
  9933                           
  9934                           ; BSR set to: 0
  9935  0007D8  0100               	movlb	0	; () banked
  9936  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9937  0007DC  0100               	movlb	0	; () banked
  9938  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9939  0007E0  B4D8               	btfsc	status,2,c
  9940  0007E2  0012               	return	
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9944                           
  9945                           ; BSR set to: 0
  9946                           
  9947                           ; BSR set to: 0
  9948  0007E4  0E00               	movlw	0
  9949  0007E6  0100               	movlb	0	; () banked
  9950  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9951  0007EA                     l9540:
  9952                           
  9953                           ; BSR set to: 0
  9954  0007EA  0E63               	movlw	99
  9955  0007EC  0100               	movlb	0	; () banked
  9956  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9957  0007F0  D001               	goto	l9544
  9958  0007F2  D00C               	goto	l9548
  9959  0007F4                     l9544:
  9960                           
  9961                           ; BSR set to: 0
  9962  0007F4  0E68               	movlw	104
  9963  0007F6  0100               	movlb	0	; () banked
  9964  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9965  0007FA  0EE4               	movlw	228
  9966  0007FC                     u10327:
  9967  0007FC  2EE8               	decfsz	wreg,f,c
  9968  0007FE  D7FE               	bra	u10327
  9969  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  9970  000802  D7FC               	bra	u10327
  9971  000804  F000               	nop	
  9972  000806  0100               	movlb	0	; () banked
  9973  000808  2BD3               	incf	UI@i_447& (0+255),f,b
  9974  00080A  D7EF               	goto	l9540
  9975  00080C                     l9548:
  9976                           
  9977                           ; BSR set to: 0
  9978  00080C  0100               	movlb	0	; () banked
  9979  00080E  51F8               	movf	_logstate& (0+255),w,b
  9980  000810  0100               	movlb	0	; () banked
  9981  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9982  000814  B4D8               	btfsc	status,2,c
  9983  000816  0012               	return	
  9984                           
  9985                           ; BSR set to: 0
  9986                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9987                           
  9988                           ; BSR set to: 0
  9989                           
  9990                           ; BSR set to: 0
  9991  000818  0E01               	movlw	1
  9992  00081A  ECEF  F02D         	call	_lcdInst
  9993  00081E  0E68               	movlw	104
  9994  000820  0100               	movlb	0	; () banked
  9995  000822  6FC4               	movwf	??_UI& (0+255),b
  9996  000824  0EE4               	movlw	228
  9997  000826                     u10337:
  9998  000826  2EE8               	decfsz	wreg,f,c
  9999  000828  D7FE               	bra	u10337
 10000  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10001  00082C  D7FC               	bra	u10337
 10002  00082E  F000               	nop	
 10003                           
 10004                           ;UI.c: 203: lcdInst(0b10000000);;
 10005  000830  0E80               	movlw	128
 10006  000832  ECEF  F02D         	call	_lcdInst
 10007                           
 10008                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10009  000836  0E51               	movlw	low STR_28
 10010  000838  0100               	movlb	0	; () banked
 10011  00083A  6F8E               	movwf	printf@f& (0+255),b
 10012  00083C  0EFD               	movlw	high STR_28
 10013  00083E  0100               	movlb	0	; () banked
 10014  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10015  000842  ECED  F00D         	call	_printf	;wreg free
 10016                           
 10017                           ;UI.c: 205: lcdInst(0b11000000);;
 10018  000846  0EC0               	movlw	192
 10019  000848  ECEF  F02D         	call	_lcdInst
 10020                           
 10021                           ;UI.c: 206: printf("%d", log_count_total);
 10022  00084C  0E09               	movlw	low (STR_27+14)
 10023  00084E  0100               	movlb	0	; () banked
 10024  000850  6F8E               	movwf	printf@f& (0+255),b
 10025  000852  0EFE               	movlw	high (STR_27+14)
 10026  000854  0100               	movlb	0	; () banked
 10027  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10028  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10029  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10030  000860  ECED  F00D         	call	_printf	;wreg free
 10031                           
 10032                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10033  000864  0E00               	movlw	0
 10034  000866  0100               	movlb	0	; () banked
 10035  000868  6FD4               	movwf	UI@i_450& (0+255),b
 10036  00086A                     l9566:
 10037                           
 10038                           ; BSR set to: 0
 10039  00086A  0E63               	movlw	99
 10040  00086C  0100               	movlb	0	; () banked
 10041  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
 10042  000870  D001               	goto	l9570
 10043  000872  D00C               	goto	l9574
 10044  000874                     l9570:
 10045                           
 10046                           ; BSR set to: 0
 10047  000874  0E68               	movlw	104
 10048  000876  0100               	movlb	0	; () banked
 10049  000878  6FC4               	movwf	??_UI& (0+255),b
 10050  00087A  0EE4               	movlw	228
 10051  00087C                     u10347:
 10052  00087C  2EE8               	decfsz	wreg,f,c
 10053  00087E  D7FE               	bra	u10347
 10054  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10055  000882  D7FC               	bra	u10347
 10056  000884  F000               	nop	
 10057  000886  0100               	movlb	0	; () banked
 10058  000888  2BD4               	incf	UI@i_450& (0+255),f,b
 10059  00088A  D7EF               	goto	l9566
 10060  00088C                     l9574:
 10061                           
 10062                           ; BSR set to: 0
 10063  00088C  0100               	movlb	0	; () banked
 10064  00088E  51F8               	movf	_logstate& (0+255),w,b
 10065  000890  0100               	movlb	0	; () banked
 10066  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10067  000894  B4D8               	btfsc	status,2,c
 10068  000896  0012               	return	
 10069                           
 10070                           ; BSR set to: 0
 10071                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10072                           
 10073                           ; BSR set to: 0
 10074                           
 10075                           ; BSR set to: 0
 10076  000898  0E00               	movlw	0
 10077  00089A  0100               	movlb	0	; () banked
 10078  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10079  00089E                     l9580:
 10080                           
 10081                           ; BSR set to: 0
 10082  00089E  0E63               	movlw	99
 10083  0008A0  0100               	movlb	0	; () banked
 10084  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10085  0008A4  D001               	goto	l9584
 10086  0008A6  D00C               	goto	l9588
 10087  0008A8                     l9584:
 10088                           
 10089                           ; BSR set to: 0
 10090  0008A8  0E68               	movlw	104
 10091  0008AA  0100               	movlb	0	; () banked
 10092  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10093  0008AE  0EE4               	movlw	228
 10094  0008B0                     u10357:
 10095  0008B0  2EE8               	decfsz	wreg,f,c
 10096  0008B2  D7FE               	bra	u10357
 10097  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10098  0008B6  D7FC               	bra	u10357
 10099  0008B8  F000               	nop	
 10100  0008BA  0100               	movlb	0	; () banked
 10101  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10102  0008BE  D7EF               	goto	l9580
 10103  0008C0                     l9588:
 10104                           
 10105                           ; BSR set to: 0
 10106  0008C0  0100               	movlb	0	; () banked
 10107  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10108  0008C4  0100               	movlb	0	; () banked
 10109  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10110  0008C8  B4D8               	btfsc	status,2,c
 10111  0008CA  0012               	return	
 10112  0008CC                     l9592:
 10113  0008CC  0100               	movlb	0	; () banked
 10114  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10115  0008D0  0100               	movlb	0	; () banked
 10116  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10117  0008D4  B4D8               	btfsc	status,2,c
 10118  0008D6  0012               	return	
 10119  0008D8  D44A               	goto	l9288
 10120  0008DA                     __end_of_UI:
 10121                           	opt stack 0
 10122                           tblptru	equ	0xFF8
 10123                           tblptrh	equ	0xFF7
 10124                           tblptrl	equ	0xFF6
 10125                           tablat	equ	0xFF5
 10126                           prodh	equ	0xFF4
 10127                           prodl	equ	0xFF3
 10128                           intcon	equ	0xFF2
 10129                           intcon2	equ	0xFF1
 10130                           intcon3	equ	0xFF0
 10131                           postinc0	equ	0xFEE
 10132                           wreg	equ	0xFE8
 10133                           postdec1	equ	0xFE5
 10134                           fsr1l	equ	0xFE1
 10135                           indf2	equ	0xFDF
 10136                           postinc2	equ	0xFDE
 10137                           postdec2	equ	0xFDD
 10138                           fsr2h	equ	0xFDA
 10139                           fsr2l	equ	0xFD9
 10140                           status	equ	0xFD8
 10141                           
 10142 ;; *************** function _printRTC *****************
 10143 ;; Defined at:
 10144 ;;		line 63 in file "RTC.c"
 10145 ;; Parameters:    Size  Location     Type
 10146 ;;		None
 10147 ;; Auto vars:     Size  Location     Type
 10148 ;;  i               2   66[BANK0 ] int 
 10149 ;;  INT_time       14   46[BANK0 ] int [7]
 10150 ;;  month           4   62[BANK0 ] unsigned char [4]
 10151 ;;  RTC_month       2   60[BANK0 ] int 
 10152 ;; Return value:  Size  Location     Type
 10153 ;;                  1    wreg      void 
 10154 ;; Registers used:
 10155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10156 ;; Tracked objects:
 10157 ;;		On entry : 0/0
 10158 ;;		On exit  : 0/0
 10159 ;;		Unchanged: 0/0
 10160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;Total ram usage:       25 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:   10
 10168 ;; This function calls:
 10169 ;;		_getRTC
 10170 ;;		_lcdInst
 10171 ;;		_printf
 10172 ;;		_strcpy
 10173 ;; This function is called by:
 10174 ;;		_UI
 10175 ;;		_change_state_to_menu_start
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           	psect	text28
 10180  002D82                     __ptext28:
 10181                           	opt stack 0
 10182  002D82                     _printRTC:
 10183                           	opt stack 18
 10184                           
 10185                           ;RTC.c: 64: getRTC();
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;incstack = 0
 10189  002D82  EC85  F026         	call	_getRTC	;wreg free
 10190                           
 10191                           ;RTC.c: 65: char month[] = "MMM";
 10192  002D86  C14D  F0BE         	movff	printRTC@F3236,printRTC@month
 10193  002D8A  C14E  F0BF         	movff	printRTC@F3236+1,printRTC@month+1
 10194  002D8E  C14F  F0C0         	movff	printRTC@F3236+2,printRTC@month+2
 10195  002D92  C150  F0C1         	movff	printRTC@F3236+3,printRTC@month+3
 10196                           
 10197                           ;RTC.c: 66: int INT_time[7];
 10198                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10199  002D96  0E00               	movlw	0
 10200  002D98  0100               	movlb	0	; () banked
 10201  002D9A  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10202  002D9C  0E00               	movlw	0
 10203  002D9E  6FC2               	movwf	printRTC@i& (0+255),b
 10204                           
 10205                           ; BSR set to: 0
 10206  002DA0  0100               	movlb	0	; () banked
 10207  002DA2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10208  002DA4  D008               	goto	l7138
 10209  002DA6  0100               	movlb	0	; () banked
 10210  002DA8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10211  002DAA  E146               	bnz	l627
 10212  002DAC  0E07               	movlw	7
 10213  002DAE  0100               	movlb	0	; () banked
 10214  002DB0  5DC2               	subwf	printRTC@i& (0+255),w,b
 10215  002DB2  B0D8               	btfsc	status,0,c
 10216  002DB4  D041               	goto	l627
 10217  002DB6                     l7138:
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10221  002DB6  0E24               	movlw	low _time
 10222  002DB8  0100               	movlb	0	; () banked
 10223  002DBA  25C2               	addwf	printRTC@i& (0+255),w,b
 10224  002DBC  6ED9               	movwf	fsr2l,c
 10225  002DBE  0E01               	movlw	high _time
 10226  002DC0  0100               	movlb	0	; () banked
 10227  002DC2  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10228  002DC4  6EDA               	movwf	fsr2h,c
 10229  002DC6  50DF               	movf	indf2,w,c
 10230  002DC8  0100               	movlb	0	; () banked
 10231  002DCA  6FAB               	movwf	??_printRTC& (0+255),b
 10232  002DCC  0100               	movlb	0	; () banked
 10233  002DCE  3BAB               	swapf	??_printRTC& (0+255),f,b
 10234  002DD0  0E0F               	movlw	15
 10235  002DD2  17AB               	andwf	??_printRTC& (0+255),f,b
 10236  002DD4  0E0F               	movlw	15
 10237  002DD6  0100               	movlb	0	; () banked
 10238  002DD8  17AB               	andwf	??_printRTC& (0+255),f,b
 10239  002DDA  0100               	movlb	0	; () banked
 10240  002DDC  51AB               	movf	??_printRTC& (0+255),w,b
 10241  002DDE  0D0A               	mullw	10
 10242  002DE0  0E24               	movlw	low _time
 10243  002DE2  0100               	movlb	0	; () banked
 10244  002DE4  25C2               	addwf	printRTC@i& (0+255),w,b
 10245  002DE6  6ED9               	movwf	fsr2l,c
 10246  002DE8  0E01               	movlw	high _time
 10247  002DEA  0100               	movlb	0	; () banked
 10248  002DEC  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10249  002DEE  6EDA               	movwf	fsr2h,c
 10250  002DF0  50DF               	movf	indf2,w,c
 10251  002DF2  0B0F               	andlw	15
 10252  002DF4  0100               	movlb	0	; () banked
 10253  002DF6  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10254  002DF8  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10255  002DFA  50F3               	movf	prodl,w,c
 10256  002DFC  0100               	movlb	0	; () banked
 10257  002DFE  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10258  002E00  50F4               	movf	prodh,w,c
 10259  002E02  0100               	movlb	0	; () banked
 10260  002E04  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10261  002E06  90D8               	bcf	status,0,c
 10262  002E08  0100               	movlb	0	; () banked
 10263  002E0A  35C2               	rlcf	printRTC@i& (0+255),w,b
 10264  002E0C  6ED9               	movwf	fsr2l,c
 10265  002E0E  0100               	movlb	0	; () banked
 10266  002E10  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10267  002E12  6EDA               	movwf	fsr2h,c
 10268  002E14  0EAE               	movlw	low printRTC@INT_time
 10269  002E16  26D9               	addwf	fsr2l,f,c
 10270  002E18  0E00               	movlw	high printRTC@INT_time
 10271  002E1A  22DA               	addwfc	fsr2h,f,c
 10272  002E1C  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10273  002E20  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10274                           
 10275                           ; BSR set to: 0
 10276  002E24  0100               	movlb	0	; () banked
 10277  002E26  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10278  002E28  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10279                           
 10280                           ; BSR set to: 0
 10281  002E2A  0100               	movlb	0	; () banked
 10282  002E2C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10283  002E2E  D7C3               	goto	l7138
 10284  002E30  0100               	movlb	0	; () banked
 10285  002E32  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10286  002E34  E101               	bnz	u5920
 10287  002E36  D7BA               	goto	L12
 10288  002E38                     u5920:
 10289  002E38                     l627:
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;RTC.c: 69: }
 10293                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10294  002E38  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10295  002E3C  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10296                           
 10297                           ;RTC.c: 72: switch(RTC_month){
 10298  002E40  D0B4               	goto	l7170
 10299  002E42                     l7144:
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;RTC.c: 74: strcpy(month, "JAN");
 10303  002E42  0EBE               	movlw	low printRTC@month
 10304  002E44  0100               	movlb	0	; () banked
 10305  002E46  6F80               	movwf	strcpy@to& (0+255),b
 10306  002E48  0E00               	movlw	high printRTC@month
 10307  002E4A  0100               	movlb	0	; () banked
 10308  002E4C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10309  002E4E  0EDA               	movlw	low STR_8
 10310  002E50  0100               	movlb	0	; () banked
 10311  002E52  6F82               	movwf	strcpy@from& (0+255),b
 10312  002E54  0EFF               	movlw	high STR_8
 10313  002E56  0100               	movlb	0	; () banked
 10314  002E58  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10315  002E5A  EC3E  F02B         	call	_strcpy	;wreg free
 10316                           
 10317                           ;RTC.c: 75: break;
 10318  002E5E  D0D4               	goto	l7172
 10319  002E60                     l7146:
 10320                           
 10321                           ;RTC.c: 77: strcpy(month, "FEB");
 10322  002E60  0EBE               	movlw	low printRTC@month
 10323  002E62  0100               	movlb	0	; () banked
 10324  002E64  6F80               	movwf	strcpy@to& (0+255),b
 10325  002E66  0E00               	movlw	high printRTC@month
 10326  002E68  0100               	movlb	0	; () banked
 10327  002E6A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10328  002E6C  0ECA               	movlw	low STR_9
 10329  002E6E  0100               	movlb	0	; () banked
 10330  002E70  6F82               	movwf	strcpy@from& (0+255),b
 10331  002E72  0EFF               	movlw	high STR_9
 10332  002E74  0100               	movlb	0	; () banked
 10333  002E76  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10334  002E78  EC3E  F02B         	call	_strcpy	;wreg free
 10335                           
 10336                           ;RTC.c: 78: break;
 10337  002E7C  D0C5               	goto	l7172
 10338  002E7E                     l7148:
 10339                           
 10340                           ;RTC.c: 80: strcpy(month, "MAR");
 10341  002E7E  0EBE               	movlw	low printRTC@month
 10342  002E80  0100               	movlb	0	; () banked
 10343  002E82  6F80               	movwf	strcpy@to& (0+255),b
 10344  002E84  0E00               	movlw	high printRTC@month
 10345  002E86  0100               	movlb	0	; () banked
 10346  002E88  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10347  002E8A  0EE6               	movlw	low STR_10
 10348  002E8C  0100               	movlb	0	; () banked
 10349  002E8E  6F82               	movwf	strcpy@from& (0+255),b
 10350  002E90  0EFF               	movlw	high STR_10
 10351  002E92  0100               	movlb	0	; () banked
 10352  002E94  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10353  002E96  EC3E  F02B         	call	_strcpy	;wreg free
 10354                           
 10355                           ;RTC.c: 81: break;
 10356  002E9A  D0B6               	goto	l7172
 10357  002E9C                     l7150:
 10358                           
 10359                           ;RTC.c: 83: strcpy(month, "APR");
 10360  002E9C  0EBE               	movlw	low printRTC@month
 10361  002E9E  0100               	movlb	0	; () banked
 10362  002EA0  6F80               	movwf	strcpy@to& (0+255),b
 10363  002EA2  0E00               	movlw	high printRTC@month
 10364  002EA4  0100               	movlb	0	; () banked
 10365  002EA6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10366  002EA8  0EEA               	movlw	low STR_11
 10367  002EAA  0100               	movlb	0	; () banked
 10368  002EAC  6F82               	movwf	strcpy@from& (0+255),b
 10369  002EAE  0EFF               	movlw	high STR_11
 10370  002EB0  0100               	movlb	0	; () banked
 10371  002EB2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10372  002EB4  EC3E  F02B         	call	_strcpy	;wreg free
 10373                           
 10374                           ;RTC.c: 84: break;
 10375  002EB8  D0A7               	goto	l7172
 10376  002EBA                     l7152:
 10377                           
 10378                           ;RTC.c: 86: strcpy(month, "MAY");
 10379  002EBA  0EBE               	movlw	low printRTC@month
 10380  002EBC  0100               	movlb	0	; () banked
 10381  002EBE  6F80               	movwf	strcpy@to& (0+255),b
 10382  002EC0  0E00               	movlw	high printRTC@month
 10383  002EC2  0100               	movlb	0	; () banked
 10384  002EC4  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10385  002EC6  0EFA               	movlw	low STR_12
 10386  002EC8  0100               	movlb	0	; () banked
 10387  002ECA  6F82               	movwf	strcpy@from& (0+255),b
 10388  002ECC  0EFF               	movlw	high STR_12
 10389  002ECE  0100               	movlb	0	; () banked
 10390  002ED0  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10391  002ED2  EC3E  F02B         	call	_strcpy	;wreg free
 10392                           
 10393                           ;RTC.c: 87: break;
 10394  002ED6  D098               	goto	l7172
 10395  002ED8                     l7154:
 10396                           
 10397                           ;RTC.c: 89: strcpy(month, "JUN");
 10398  002ED8  0EBE               	movlw	low printRTC@month
 10399  002EDA  0100               	movlb	0	; () banked
 10400  002EDC  6F80               	movwf	strcpy@to& (0+255),b
 10401  002EDE  0E00               	movlw	high printRTC@month
 10402  002EE0  0100               	movlb	0	; () banked
 10403  002EE2  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10404  002EE4  0EDE               	movlw	low STR_13
 10405  002EE6  0100               	movlb	0	; () banked
 10406  002EE8  6F82               	movwf	strcpy@from& (0+255),b
 10407  002EEA  0EFF               	movlw	high STR_13
 10408  002EEC  0100               	movlb	0	; () banked
 10409  002EEE  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10410  002EF0  EC3E  F02B         	call	_strcpy	;wreg free
 10411                           
 10412                           ;RTC.c: 90: break;
 10413  002EF4  D089               	goto	l7172
 10414  002EF6                     l7156:
 10415                           
 10416                           ;RTC.c: 92: strcpy(month, "JUL");
 10417  002EF6  0EBE               	movlw	low printRTC@month
 10418  002EF8  0100               	movlb	0	; () banked
 10419  002EFA  6F80               	movwf	strcpy@to& (0+255),b
 10420  002EFC  0E00               	movlw	high printRTC@month
 10421  002EFE  0100               	movlb	0	; () banked
 10422  002F00  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10423  002F02  0ED6               	movlw	low STR_14
 10424  002F04  0100               	movlb	0	; () banked
 10425  002F06  6F82               	movwf	strcpy@from& (0+255),b
 10426  002F08  0EFF               	movlw	high STR_14
 10427  002F0A  0100               	movlb	0	; () banked
 10428  002F0C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10429  002F0E  EC3E  F02B         	call	_strcpy	;wreg free
 10430                           
 10431                           ;RTC.c: 93: break;
 10432  002F12  D07A               	goto	l7172
 10433  002F14                     l7158:
 10434                           
 10435                           ;RTC.c: 95: strcpy(month, "AUG");
 10436  002F14  0EBE               	movlw	low printRTC@month
 10437  002F16  0100               	movlb	0	; () banked
 10438  002F18  6F80               	movwf	strcpy@to& (0+255),b
 10439  002F1A  0E00               	movlw	high printRTC@month
 10440  002F1C  0100               	movlb	0	; () banked
 10441  002F1E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10442  002F20  0ED2               	movlw	low STR_15
 10443  002F22  0100               	movlb	0	; () banked
 10444  002F24  6F82               	movwf	strcpy@from& (0+255),b
 10445  002F26  0EFF               	movlw	high STR_15
 10446  002F28  0100               	movlb	0	; () banked
 10447  002F2A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10448  002F2C  EC3E  F02B         	call	_strcpy	;wreg free
 10449                           
 10450                           ;RTC.c: 96: break;
 10451  002F30  D06B               	goto	l7172
 10452  002F32                     l7160:
 10453                           
 10454                           ;RTC.c: 98: strcpy(month, "SEP");
 10455  002F32  0EBE               	movlw	low printRTC@month
 10456  002F34  0100               	movlb	0	; () banked
 10457  002F36  6F80               	movwf	strcpy@to& (0+255),b
 10458  002F38  0E00               	movlw	high printRTC@month
 10459  002F3A  0100               	movlb	0	; () banked
 10460  002F3C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10461  002F3E  0EE2               	movlw	low STR_16
 10462  002F40  0100               	movlb	0	; () banked
 10463  002F42  6F82               	movwf	strcpy@from& (0+255),b
 10464  002F44  0EFF               	movlw	high STR_16
 10465  002F46  0100               	movlb	0	; () banked
 10466  002F48  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10467  002F4A  EC3E  F02B         	call	_strcpy	;wreg free
 10468                           
 10469                           ;RTC.c: 99: break;
 10470  002F4E  D05C               	goto	l7172
 10471  002F50                     l7162:
 10472                           
 10473                           ;RTC.c: 101: strcpy(month, "OCT");
 10474  002F50  0EBE               	movlw	low printRTC@month
 10475  002F52  0100               	movlb	0	; () banked
 10476  002F54  6F80               	movwf	strcpy@to& (0+255),b
 10477  002F56  0E00               	movlw	high printRTC@month
 10478  002F58  0100               	movlb	0	; () banked
 10479  002F5A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10480  002F5C  0EF2               	movlw	low STR_17
 10481  002F5E  0100               	movlb	0	; () banked
 10482  002F60  6F82               	movwf	strcpy@from& (0+255),b
 10483  002F62  0EFF               	movlw	high STR_17
 10484  002F64  0100               	movlb	0	; () banked
 10485  002F66  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10486  002F68  EC3E  F02B         	call	_strcpy	;wreg free
 10487                           
 10488                           ;RTC.c: 102: break;
 10489  002F6C  D04D               	goto	l7172
 10490  002F6E                     l7164:
 10491                           
 10492                           ;RTC.c: 104: strcpy(month, "NOV");
 10493  002F6E  0EBE               	movlw	low printRTC@month
 10494  002F70  0100               	movlb	0	; () banked
 10495  002F72  6F80               	movwf	strcpy@to& (0+255),b
 10496  002F74  0E00               	movlw	high printRTC@month
 10497  002F76  0100               	movlb	0	; () banked
 10498  002F78  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10499  002F7A  0EF6               	movlw	low STR_18
 10500  002F7C  0100               	movlb	0	; () banked
 10501  002F7E  6F82               	movwf	strcpy@from& (0+255),b
 10502  002F80  0EFF               	movlw	high STR_18
 10503  002F82  0100               	movlb	0	; () banked
 10504  002F84  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10505  002F86  EC3E  F02B         	call	_strcpy	;wreg free
 10506                           
 10507                           ;RTC.c: 105: break;
 10508  002F8A  D03E               	goto	l7172
 10509  002F8C                     l7166:
 10510                           
 10511                           ;RTC.c: 107: strcpy(month, "DEC");
 10512  002F8C  0EBE               	movlw	low printRTC@month
 10513  002F8E  0100               	movlb	0	; () banked
 10514  002F90  6F80               	movwf	strcpy@to& (0+255),b
 10515  002F92  0E00               	movlw	high printRTC@month
 10516  002F94  0100               	movlb	0	; () banked
 10517  002F96  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10518  002F98  0ECE               	movlw	low STR_19
 10519  002F9A  0100               	movlb	0	; () banked
 10520  002F9C  6F82               	movwf	strcpy@from& (0+255),b
 10521  002F9E  0EFF               	movlw	high STR_19
 10522  002FA0  0100               	movlb	0	; () banked
 10523  002FA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10524  002FA4  EC3E  F02B         	call	_strcpy	;wreg free
 10525                           
 10526                           ;RTC.c: 109: }
 10527                           
 10528                           ;RTC.c: 108: break;
 10529  002FA8  D02F               	goto	l7172
 10530  002FAA                     l7170:
 10531  002FAA  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10532  002FAE  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10533                           
 10534                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10535                           ; Switch size 1, requested type "space"
 10536                           ; Number of cases is 1, Range of values is 0 to 0
 10537                           ; switch strategies available:
 10538                           ; Name         Instructions Cycles
 10539                           ; simple_byte            4     3 (average)
 10540                           ;	Chosen strategy is simple_byte
 10541  002FB2  0100               	movlb	0	; () banked
 10542  002FB4  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10543  002FB6  0A00               	xorlw	0	; case 0
 10544  002FB8  A4D8               	btfss	status,2,c
 10545  002FBA  D026               	goto	l7172
 10546                           
 10547                           ; BSR set to: 0
 10548                           ; Switch size 1, requested type "space"
 10549                           ; Number of cases is 12, Range of values is 1 to 12
 10550                           ; switch strategies available:
 10551                           ; Name         Instructions Cycles
 10552                           ; simple_byte           37    19 (average)
 10553                           ;	Chosen strategy is simple_byte
 10554  002FBC  0100               	movlb	0	; () banked
 10555  002FBE  51AB               	movf	??_printRTC& (0+255),w,b
 10556  002FC0  0A01               	xorlw	1	; case 1
 10557  002FC2  B4D8               	btfsc	status,2,c
 10558  002FC4  D73E               	goto	l7144
 10559  002FC6  0A03               	xorlw	3	; case 2
 10560  002FC8  B4D8               	btfsc	status,2,c
 10561  002FCA  D74A               	goto	l7146
 10562  002FCC  0A01               	xorlw	1	; case 3
 10563  002FCE  B4D8               	btfsc	status,2,c
 10564  002FD0  D756               	goto	l7148
 10565  002FD2  0A07               	xorlw	7	; case 4
 10566  002FD4  B4D8               	btfsc	status,2,c
 10567  002FD6  D762               	goto	l7150
 10568  002FD8  0A01               	xorlw	1	; case 5
 10569  002FDA  B4D8               	btfsc	status,2,c
 10570  002FDC  D76E               	goto	l7152
 10571  002FDE  0A03               	xorlw	3	; case 6
 10572  002FE0  B4D8               	btfsc	status,2,c
 10573  002FE2  D77A               	goto	l7154
 10574  002FE4  0A01               	xorlw	1	; case 7
 10575  002FE6  B4D8               	btfsc	status,2,c
 10576  002FE8  D786               	goto	l7156
 10577  002FEA  0A0F               	xorlw	15	; case 8
 10578  002FEC  B4D8               	btfsc	status,2,c
 10579  002FEE  D792               	goto	l7158
 10580  002FF0  0A01               	xorlw	1	; case 9
 10581  002FF2  B4D8               	btfsc	status,2,c
 10582  002FF4  D79E               	goto	l7160
 10583  002FF6  0A03               	xorlw	3	; case 10
 10584  002FF8  B4D8               	btfsc	status,2,c
 10585  002FFA  D7AA               	goto	l7162
 10586  002FFC  0A01               	xorlw	1	; case 11
 10587  002FFE  B4D8               	btfsc	status,2,c
 10588  003000  D7B6               	goto	l7164
 10589  003002  0A07               	xorlw	7	; case 12
 10590  003004  B4D8               	btfsc	status,2,c
 10591  003006  D7C2               	goto	l7166
 10592  003008                     l7172:
 10593                           
 10594                           ;RTC.c: 110: lcdInst(0b10000000);;
 10595  003008  0E80               	movlw	128
 10596  00300A  ECEF  F02D         	call	_lcdInst
 10597                           
 10598                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10599  00300E  0EA6               	movlw	low STR_21
 10600  003010  0100               	movlb	0	; () banked
 10601  003012  6F8E               	movwf	printf@f& (0+255),b
 10602  003014  0EFA               	movlw	high STR_21
 10603  003016  0100               	movlb	0	; () banked
 10604  003018  6F8F               	movwf	(printf@f+1)& (0+255),b
 10605  00301A  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10606  00301E  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10607  003022  0EBE               	movlw	low printRTC@month
 10608  003024  0100               	movlb	0	; () banked
 10609  003026  6F92               	movwf	(?_printf+4)& (0+255),b
 10610  003028  0E00               	movlw	high printRTC@month
 10611  00302A  0100               	movlb	0	; () banked
 10612  00302C  6F93               	movwf	(?_printf+5)& (0+255),b
 10613  00302E  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10614  003032  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10615  003036  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10616  00303A  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10617  00303E  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10618  003042  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10619  003046  ECED  F00D         	call	_printf	;wreg free
 10620  00304A  0012               	return		;funcret
 10621  00304C                     __end_of_printRTC:
 10622                           	opt stack 0
 10623                           tblptru	equ	0xFF8
 10624                           tblptrh	equ	0xFF7
 10625                           tblptrl	equ	0xFF6
 10626                           tablat	equ	0xFF5
 10627                           prodh	equ	0xFF4
 10628                           prodl	equ	0xFF3
 10629                           intcon	equ	0xFF2
 10630                           intcon2	equ	0xFF1
 10631                           intcon3	equ	0xFF0
 10632                           postinc0	equ	0xFEE
 10633                           wreg	equ	0xFE8
 10634                           postdec1	equ	0xFE5
 10635                           fsr1l	equ	0xFE1
 10636                           indf2	equ	0xFDF
 10637                           postinc2	equ	0xFDE
 10638                           postdec2	equ	0xFDD
 10639                           fsr2h	equ	0xFDA
 10640                           fsr2l	equ	0xFD9
 10641                           status	equ	0xFD8
 10642                           
 10643 ;; *************** function _strcpy *****************
 10644 ;; Defined at:
 10645 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10648 ;;		 -> printRTC@month(4), UI@month(4), 
 10649 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10650 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10651 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10652 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10653 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10654 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10655 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10656 ;;		 -> STR_8(4), 
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10659 ;;		 -> printRTC@month(4), UI@month(4), 
 10660 ;; Return value:  Size  Location     Type
 10661 ;;                  2    0[BANK0 ] PTR unsigned char 
 10662 ;; Registers used:
 10663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10669 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;Total ram usage:        6 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    7
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_UI
 10680 ;;		_printRTC
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text29
 10685  00567C                     __ptext29:
 10686                           	opt stack 0
 10687  00567C                     _strcpy:
 10688                           	opt stack 20
 10689                           
 10690                           ;incstack = 0
 10691  00567C  C080  F084         	movff	strcpy@to,strcpy@cp
 10692  005680  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10693  005684  D006               	goto	l6836
 10694  005686                     l6834:
 10695  005686  0100               	movlb	0	; () banked
 10696  005688  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10697  00568A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10698  00568C  0100               	movlb	0	; () banked
 10699  00568E  4B82               	infsnz	strcpy@from& (0+255),f,b
 10700  005690  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10701  005692                     l6836:
 10702  005692  C082  FFF6         	movff	strcpy@from,tblptrl
 10703  005696  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10704  00569A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10705  00569A  6AF8               	clrf	tblptru,c
 10706  00569C                     	endif
 10707  00569C                     	if	0	;tblptru may be non-zero
 10708  00569C                     	endif
 10709  00569C  C084  FFD9         	movff	strcpy@cp,fsr2l
 10710  0056A0  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10711  0056A4  0008               	tblrd		*
 10712  0056A6  CFF5 FFDF          	movff	tablat,indf2
 10713  0056AA  50DF               	movf	indf2,w,c
 10714  0056AC  B4D8               	btfsc	status,2,c
 10715  0056AE  0012               	return	
 10716  0056B0  D7EA               	goto	l6834
 10717  0056B2                     __end_of_strcpy:
 10718                           	opt stack 0
 10719                           tblptru	equ	0xFF8
 10720                           tblptrh	equ	0xFF7
 10721                           tblptrl	equ	0xFF6
 10722                           tablat	equ	0xFF5
 10723                           prodh	equ	0xFF4
 10724                           prodl	equ	0xFF3
 10725                           intcon	equ	0xFF2
 10726                           intcon2	equ	0xFF1
 10727                           intcon3	equ	0xFF0
 10728                           postinc0	equ	0xFEE
 10729                           wreg	equ	0xFE8
 10730                           postdec1	equ	0xFE5
 10731                           fsr1l	equ	0xFE1
 10732                           indf2	equ	0xFDF
 10733                           postinc2	equ	0xFDE
 10734                           postdec2	equ	0xFDD
 10735                           fsr2h	equ	0xFDA
 10736                           fsr2l	equ	0xFD9
 10737                           status	equ	0xFD8
 10738                           
 10739 ;; *************** function _getRTC *****************
 10740 ;; Defined at:
 10741 ;;		line 44 in file "RTC.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;		None
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;  i               2    3[BANK0 ] int 
 10746 ;; Return value:  Size  Location     Type
 10747 ;;                  1    wreg      void 
 10748 ;; Registers used:
 10749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10750 ;; Tracked objects:
 10751 ;;		On entry : 0/0
 10752 ;;		On exit  : 0/0
 10753 ;;		Unchanged: 0/0
 10754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;Total ram usage:        2 bytes
 10760 ;; Hardware stack levels used:    1
 10761 ;; Hardware stack levels required when called:    9
 10762 ;; This function calls:
 10763 ;;		_I2C_Master_Read
 10764 ;;		_I2C_Master_Start
 10765 ;;		_I2C_Master_Stop
 10766 ;;		_I2C_Master_Write
 10767 ;; This function is called by:
 10768 ;;		_printRTC
 10769 ;;		_initSortTimer
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           	psect	text30
 10774  004D0A                     __ptext30:
 10775                           	opt stack 0
 10776  004D0A                     _getRTC:
 10777                           	opt stack 18
 10778                           
 10779                           ;RTC.c: 48: I2C_Master_Start();
 10780                           
 10781                           ;incstack = 0
 10782  004D0A  EC15  F02E         	call	_I2C_Master_Start	;wreg free
 10783                           
 10784                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10785  004D0E  0E00               	movlw	0
 10786  004D10  0100               	movlb	0	; () banked
 10787  004D12  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10788  004D14  0ED0               	movlw	208
 10789  004D16  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10790  004D18  EC03  F02E         	call	_I2C_Master_Write	;wreg free
 10791                           
 10792                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10793  004D1C  0E00               	movlw	0
 10794  004D1E  0100               	movlb	0	; () banked
 10795  004D20  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10796  004D22  0E00               	movlw	0
 10797  004D24  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10798  004D26  EC03  F02E         	call	_I2C_Master_Write	;wreg free
 10799                           
 10800                           ;RTC.c: 51: I2C_Master_Stop();
 10801  004D2A  EC11  F02E         	call	_I2C_Master_Stop	;wreg free
 10802                           
 10803                           ;RTC.c: 54: I2C_Master_Start();
 10804  004D2E  EC15  F02E         	call	_I2C_Master_Start	;wreg free
 10805                           
 10806                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10807  004D32  0E00               	movlw	0
 10808  004D34  0100               	movlb	0	; () banked
 10809  004D36  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10810  004D38  0ED1               	movlw	209
 10811  004D3A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10812  004D3C  EC03  F02E         	call	_I2C_Master_Write	;wreg free
 10813                           
 10814                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10815  004D40  0E00               	movlw	0
 10816  004D42  0100               	movlb	0	; () banked
 10817  004D44  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10818  004D46  0E00               	movlw	0
 10819  004D48  6F83               	movwf	getRTC@i& (0+255),b
 10820  004D4A                     l6842:
 10821                           
 10822                           ; BSR set to: 0
 10823  004D4A  0100               	movlb	0	; () banked
 10824  004D4C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10825  004D4E  D008               	goto	l6846
 10826  004D50  0100               	movlb	0	; () banked
 10827  004D52  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10828  004D54  E115               	bnz	l6852
 10829  004D56  0E06               	movlw	6
 10830  004D58  0100               	movlb	0	; () banked
 10831  004D5A  5D83               	subwf	getRTC@i& (0+255),w,b
 10832  004D5C  B0D8               	btfsc	status,0,c
 10833  004D5E  D010               	goto	l6852
 10834  004D60                     l6846:
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10838  004D60  0E24               	movlw	low _time
 10839  004D62  0100               	movlb	0	; () banked
 10840  004D64  2583               	addwf	getRTC@i& (0+255),w,b
 10841  004D66  6ED9               	movwf	fsr2l,c
 10842  004D68  0E01               	movlw	high _time
 10843  004D6A  0100               	movlb	0	; () banked
 10844  004D6C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10845  004D6E  6EDA               	movwf	fsr2h,c
 10846  004D70  0E01               	movlw	1
 10847  004D72  EC96  F02C         	call	_I2C_Master_Read
 10848  004D76  6EDF               	movwf	indf2,c
 10849  004D78  0100               	movlb	0	; () banked
 10850  004D7A  4B83               	infsnz	getRTC@i& (0+255),f,b
 10851  004D7C  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10852  004D7E  D7E5               	goto	l6842
 10853  004D80                     l6852:
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;RTC.c: 58: }
 10857                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10858  004D80  0E00               	movlw	0
 10859  004D82  EC96  F02C         	call	_I2C_Master_Read
 10860  004D86  0101               	movlb	1	; () banked
 10861  004D88  6F2A               	movwf	(_time+6)& (0+255),b
 10862                           
 10863                           ;RTC.c: 60: I2C_Master_Stop();
 10864  004D8A  EC11  F02E         	call	_I2C_Master_Stop	;wreg free
 10865  004D8E  0012               	return		;funcret
 10866  004D90                     __end_of_getRTC:
 10867                           	opt stack 0
 10868                           tblptru	equ	0xFF8
 10869                           tblptrh	equ	0xFF7
 10870                           tblptrl	equ	0xFF6
 10871                           tablat	equ	0xFF5
 10872                           prodh	equ	0xFF4
 10873                           prodl	equ	0xFF3
 10874                           intcon	equ	0xFF2
 10875                           intcon2	equ	0xFF1
 10876                           intcon3	equ	0xFF0
 10877                           postinc0	equ	0xFEE
 10878                           wreg	equ	0xFE8
 10879                           postdec1	equ	0xFE5
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8
 10887                           
 10888 ;; *************** function _I2C_Master_Write *****************
 10889 ;; Defined at:
 10890 ;;		line 49 in file "I2C.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;  d               2    1[BANK0 ] unsigned int 
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;		None
 10895 ;; Return value:  Size  Location     Type
 10896 ;;                  1    wreg      void 
 10897 ;; Registers used:
 10898 ;;		wreg, status,2, status,0, cstack
 10899 ;; Tracked objects:
 10900 ;;		On entry : 0/0
 10901 ;;		On exit  : 0/0
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10904 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;Total ram usage:        2 bytes
 10909 ;; Hardware stack levels used:    1
 10910 ;; Hardware stack levels required when called:    8
 10911 ;; This function calls:
 10912 ;;		_I2C_Master_Wait
 10913 ;; This function is called by:
 10914 ;;		_loadRTC
 10915 ;;		_getRTC
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           	psect	text31
 10920  005C06                     __ptext31:
 10921                           	opt stack 0
 10922  005C06                     _I2C_Master_Write:
 10923                           	opt stack 18
 10924                           
 10925                           ;I2C.c: 51: I2C_Master_Wait();
 10926                           
 10927                           ;incstack = 0
 10928  005C06  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 10929                           
 10930                           ;I2C.c: 52: SSPBUF = d;
 10931  005C0A  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10932  005C0E  0012               	return		;funcret
 10933  005C10                     __end_of_I2C_Master_Write:
 10934                           	opt stack 0
 10935                           tblptru	equ	0xFF8
 10936                           tblptrh	equ	0xFF7
 10937                           tblptrl	equ	0xFF6
 10938                           tablat	equ	0xFF5
 10939                           prodh	equ	0xFF4
 10940                           prodl	equ	0xFF3
 10941                           intcon	equ	0xFF2
 10942                           intcon2	equ	0xFF1
 10943                           intcon3	equ	0xFF0
 10944                           postinc0	equ	0xFEE
 10945                           wreg	equ	0xFE8
 10946                           postdec1	equ	0xFE5
 10947                           fsr1l	equ	0xFE1
 10948                           indf2	equ	0xFDF
 10949                           postinc2	equ	0xFDE
 10950                           postdec2	equ	0xFDD
 10951                           fsr2h	equ	0xFDA
 10952                           fsr2l	equ	0xFD9
 10953                           status	equ	0xFD8
 10954                           
 10955 ;; *************** function _I2C_Master_Stop *****************
 10956 ;; Defined at:
 10957 ;;		line 43 in file "I2C.c"
 10958 ;; Parameters:    Size  Location     Type
 10959 ;;		None
 10960 ;; Auto vars:     Size  Location     Type
 10961 ;;		None
 10962 ;; Return value:  Size  Location     Type
 10963 ;;                  1    wreg      void 
 10964 ;; Registers used:
 10965 ;;		wreg, status,2, status,0, cstack
 10966 ;; Tracked objects:
 10967 ;;		On entry : 0/0
 10968 ;;		On exit  : 0/0
 10969 ;;		Unchanged: 0/0
 10970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;Total ram usage:        0 bytes
 10976 ;; Hardware stack levels used:    1
 10977 ;; Hardware stack levels required when called:    8
 10978 ;; This function calls:
 10979 ;;		_I2C_Master_Wait
 10980 ;; This function is called by:
 10981 ;;		_loadRTC
 10982 ;;		_getRTC
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           	psect	text32
 10987  005C22                     __ptext32:
 10988                           	opt stack 0
 10989  005C22                     _I2C_Master_Stop:
 10990                           	opt stack 18
 10991                           
 10992                           ;I2C.c: 45: I2C_Master_Wait();
 10993                           
 10994                           ;incstack = 0
 10995  005C22  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 10996                           
 10997                           ;I2C.c: 46: PEN = 1;
 10998  005C26  84C5               	bsf	4037,2,c	;volatile
 10999  005C28  0012               	return		;funcret
 11000  005C2A                     __end_of_I2C_Master_Stop:
 11001                           	opt stack 0
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           intcon2	equ	0xFF1
 11010                           intcon3	equ	0xFF0
 11011                           postinc0	equ	0xFEE
 11012                           wreg	equ	0xFE8
 11013                           postdec1	equ	0xFE5
 11014                           fsr1l	equ	0xFE1
 11015                           indf2	equ	0xFDF
 11016                           postinc2	equ	0xFDE
 11017                           postdec2	equ	0xFDD
 11018                           fsr2h	equ	0xFDA
 11019                           fsr2l	equ	0xFD9
 11020                           status	equ	0xFD8
 11021                           
 11022 ;; *************** function _I2C_Master_Start *****************
 11023 ;; Defined at:
 11024 ;;		line 31 in file "I2C.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;		None
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;		None
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      void 
 11031 ;; Registers used:
 11032 ;;		wreg, status,2, status,0, cstack
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;Total ram usage:        0 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    8
 11045 ;; This function calls:
 11046 ;;		_I2C_Master_Wait
 11047 ;; This function is called by:
 11048 ;;		_loadRTC
 11049 ;;		_getRTC
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           	psect	text33
 11054  005C2A                     __ptext33:
 11055                           	opt stack 0
 11056  005C2A                     _I2C_Master_Start:
 11057                           	opt stack 18
 11058                           
 11059                           ;I2C.c: 33: I2C_Master_Wait();
 11060                           
 11061                           ;incstack = 0
 11062  005C2A  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11063                           
 11064                           ;I2C.c: 34: SEN = 1;
 11065  005C2E  80C5               	bsf	4037,0,c	;volatile
 11066  005C30  0012               	return		;funcret
 11067  005C32                     __end_of_I2C_Master_Start:
 11068                           	opt stack 0
 11069                           tblptru	equ	0xFF8
 11070                           tblptrh	equ	0xFF7
 11071                           tblptrl	equ	0xFF6
 11072                           tablat	equ	0xFF5
 11073                           prodh	equ	0xFF4
 11074                           prodl	equ	0xFF3
 11075                           intcon	equ	0xFF2
 11076                           intcon2	equ	0xFF1
 11077                           intcon3	equ	0xFF0
 11078                           postinc0	equ	0xFEE
 11079                           wreg	equ	0xFE8
 11080                           postdec1	equ	0xFE5
 11081                           fsr1l	equ	0xFE1
 11082                           indf2	equ	0xFDF
 11083                           postinc2	equ	0xFDE
 11084                           postdec2	equ	0xFDD
 11085                           fsr2h	equ	0xFDA
 11086                           fsr2l	equ	0xFD9
 11087                           status	equ	0xFD8
 11088                           
 11089 ;; *************** function _I2C_Master_Read *****************
 11090 ;; Defined at:
 11091 ;;		line 55 in file "I2C.c"
 11092 ;; Parameters:    Size  Location     Type
 11093 ;;  a               1    wreg     unsigned char 
 11094 ;; Auto vars:     Size  Location     Type
 11095 ;;  a               1    1[BANK0 ] unsigned char 
 11096 ;;  temp            1    2[BANK0 ] unsigned char 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;                  1    wreg      unsigned char 
 11099 ;; Registers used:
 11100 ;;		wreg, status,2, status,0, cstack
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11107 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;Total ram usage:        2 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:    8
 11113 ;; This function calls:
 11114 ;;		_I2C_Master_Wait
 11115 ;; This function is called by:
 11116 ;;		_getRTC
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           	psect	text34
 11121  00592C                     __ptext34:
 11122                           	opt stack 0
 11123  00592C                     _I2C_Master_Read:
 11124                           	opt stack 18
 11125                           
 11126                           ;incstack = 0
 11127                           ;I2C_Master_Read@a stored from wreg
 11128  00592C  0100               	movlb	0	; () banked
 11129  00592E  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11130                           
 11131                           ;I2C.c: 57: unsigned char temp;
 11132                           ;I2C.c: 58: I2C_Master_Wait();
 11133  005930  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11134                           
 11135                           ;I2C.c: 59: RCEN = 1;
 11136  005934  86C5               	bsf	4037,3,c	;volatile
 11137                           
 11138                           ;I2C.c: 60: I2C_Master_Wait();
 11139  005936  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11140                           
 11141                           ;I2C.c: 61: temp = SSPBUF;
 11142  00593A  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11143                           
 11144                           ;I2C.c: 62: I2C_Master_Wait();
 11145  00593E  ECD4  F02D         	call	_I2C_Master_Wait	;wreg free
 11146                           
 11147                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11148  005942  0100               	movlb	0	; () banked
 11149  005944  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11150  005946  0100               	movlb	0	; () banked
 11151  005948  A4D8               	btfss	status,2,c
 11152  00594A  D002               	goto	u4910
 11153  00594C  8AC5               	bsf	4037,5,c	;volatile
 11154  00594E  D001               	goto	l6530
 11155  005950                     u4910:
 11156  005950  9AC5               	bcf	4037,5,c	;volatile
 11157  005952                     l6530:
 11158                           
 11159                           ;I2C.c: 64: ACKEN = 1;
 11160  005952  88C5               	bsf	4037,4,c	;volatile
 11161                           
 11162                           ;I2C.c: 65: return temp;
 11163  005954  0100               	movlb	0	; () banked
 11164  005956  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11165  005958  0012               	return	
 11166  00595A                     __end_of_I2C_Master_Read:
 11167                           	opt stack 0
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           intcon2	equ	0xFF1
 11176                           intcon3	equ	0xFF0
 11177                           postinc0	equ	0xFEE
 11178                           wreg	equ	0xFE8
 11179                           postdec1	equ	0xFE5
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           fsr2h	equ	0xFDA
 11185                           fsr2l	equ	0xFD9
 11186                           status	equ	0xFD8
 11187                           
 11188 ;; *************** function _I2C_Master_Wait *****************
 11189 ;; Defined at:
 11190 ;;		line 26 in file "I2C.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;		None
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;		None
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  1    wreg      void 
 11197 ;; Registers used:
 11198 ;;		wreg, status,2, status,0
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;Total ram usage:        1 bytes
 11209 ;; Hardware stack levels used:    1
 11210 ;; Hardware stack levels required when called:    7
 11211 ;; This function calls:
 11212 ;;		Nothing
 11213 ;; This function is called by:
 11214 ;;		_I2C_Master_Start
 11215 ;;		_I2C_Master_Stop
 11216 ;;		_I2C_Master_Write
 11217 ;;		_I2C_Master_Read
 11218 ;;		_I2C_Master_RepeatedStart
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           	psect	text35
 11223  005BA8                     __ptext35:
 11224                           	opt stack 0
 11225  005BA8                     _I2C_Master_Wait:
 11226                           	opt stack 18
 11227  005BA8                     l71:
 11228  005BA8  B4C7               	btfsc	4039,2,c	;volatile
 11229  005BAA  D7FE               	goto	l71
 11230  005BAC  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11231  005BB0  0E1F               	movlw	31
 11232  005BB2  0100               	movlb	0	; () banked
 11233  005BB4  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11234  005BB6  B4D8               	btfsc	status,2,c
 11235  005BB8  0012               	return	
 11236  005BBA  D7F6               	goto	l71
 11237  005BBC                     __end_of_I2C_Master_Wait:
 11238                           	opt stack 0
 11239                           tblptru	equ	0xFF8
 11240                           tblptrh	equ	0xFF7
 11241                           tblptrl	equ	0xFF6
 11242                           tablat	equ	0xFF5
 11243                           prodh	equ	0xFF4
 11244                           prodl	equ	0xFF3
 11245                           intcon	equ	0xFF2
 11246                           intcon2	equ	0xFF1
 11247                           intcon3	equ	0xFF0
 11248                           postinc0	equ	0xFEE
 11249                           wreg	equ	0xFE8
 11250                           postdec1	equ	0xFE5
 11251                           fsr1l	equ	0xFE1
 11252                           indf2	equ	0xFDF
 11253                           postinc2	equ	0xFDE
 11254                           postdec2	equ	0xFDD
 11255                           fsr2h	equ	0xFDA
 11256                           fsr2l	equ	0xFD9
 11257                           status	equ	0xFD8
 11258                           
 11259 ;; *************** function _change_state_to_menu_22 *****************
 11260 ;; Defined at:
 11261 ;;		line 501 in file "UI.c"
 11262 ;; Parameters:    Size  Location     Type
 11263 ;;		None
 11264 ;; Auto vars:     Size  Location     Type
 11265 ;;		None
 11266 ;; Return value:  Size  Location     Type
 11267 ;;                  1    wreg      void 
 11268 ;; Registers used:
 11269 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11270 ;; Tracked objects:
 11271 ;;		On entry : 0/0
 11272 ;;		On exit  : 0/0
 11273 ;;		Unchanged: 0/0
 11274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;Total ram usage:        0 bytes
 11280 ;; Hardware stack levels used:    1
 11281 ;; Hardware stack levels required when called:   10
 11282 ;; This function calls:
 11283 ;;		_lcdInst
 11284 ;;		_printf
 11285 ;; This function is called by:
 11286 ;;		_UI
 11287 ;; This function uses a non-reentrant model
 11288 ;;
 11289                           
 11290                           	psect	text36
 11291  00560C                     __ptext36:
 11292                           	opt stack 0
 11293  00560C                     _change_state_to_menu_22:
 11294                           	opt stack 19
 11295                           
 11296                           ;UI.c: 502: cur_state = 22;
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;incstack = 0
 11300  00560C  0E00               	movlw	0
 11301  00560E  0100               	movlb	0	; () banked
 11302  005610  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11303  005612  0E16               	movlw	22
 11304  005614  6FE6               	movwf	_cur_state& (0+255),b
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;UI.c: 504: lcdInst(0b10000000);;
 11308  005616  0E80               	movlw	128
 11309  005618  ECEF  F02D         	call	_lcdInst
 11310                           
 11311                           ;UI.c: 505: printf("2. SORT        <");
 11312  00561C  0EB7               	movlw	low STR_34
 11313  00561E  0100               	movlb	0	; () banked
 11314  005620  6F8E               	movwf	printf@f& (0+255),b
 11315  005622  0EFD               	movlw	high STR_34
 11316  005624  0100               	movlb	0	; () banked
 11317  005626  6F8F               	movwf	(printf@f+1)& (0+255),b
 11318  005628  ECED  F00D         	call	_printf	;wreg free
 11319                           
 11320                           ;UI.c: 506: lcdInst(0b11000000);;
 11321  00562C  0EC0               	movlw	192
 11322  00562E  ECEF  F02D         	call	_lcdInst
 11323                           
 11324                           ;UI.c: 507: printf("3. LOGS         ");
 11325  005632  0EFC               	movlw	low STR_36
 11326  005634  0100               	movlb	0	; () banked
 11327  005636  6F8E               	movwf	printf@f& (0+255),b
 11328  005638  0EFC               	movlw	high STR_36
 11329  00563A  0100               	movlb	0	; () banked
 11330  00563C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11331  00563E  ECED  F00D         	call	_printf	;wreg free
 11332  005642  0012               	return		;funcret
 11333  005644                     __end_of_change_state_to_menu_22:
 11334                           	opt stack 0
 11335                           tblptru	equ	0xFF8
 11336                           tblptrh	equ	0xFF7
 11337                           tblptrl	equ	0xFF6
 11338                           tablat	equ	0xFF5
 11339                           prodh	equ	0xFF4
 11340                           prodl	equ	0xFF3
 11341                           intcon	equ	0xFF2
 11342                           intcon2	equ	0xFF1
 11343                           intcon3	equ	0xFF0
 11344                           postinc0	equ	0xFEE
 11345                           wreg	equ	0xFE8
 11346                           postdec1	equ	0xFE5
 11347                           fsr1l	equ	0xFE1
 11348                           indf2	equ	0xFDF
 11349                           postinc2	equ	0xFDE
 11350                           postdec2	equ	0xFDD
 11351                           fsr2h	equ	0xFDA
 11352                           fsr2l	equ	0xFD9
 11353                           status	equ	0xFD8
 11354                           
 11355 ;; *************** function _change_state_to_menu_12 *****************
 11356 ;; Defined at:
 11357 ;;		line 493 in file "UI.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;		None
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;		None
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      void 
 11364 ;; Registers used:
 11365 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11375 ;;Total ram usage:        0 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:   10
 11378 ;; This function calls:
 11379 ;;		_lcdInst
 11380 ;;		_printf
 11381 ;; This function is called by:
 11382 ;;		_UI
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           	psect	text37
 11387  005644                     __ptext37:
 11388                           	opt stack 0
 11389  005644                     _change_state_to_menu_12:
 11390                           	opt stack 19
 11391                           
 11392                           ;UI.c: 494: cur_state = 12;
 11393                           
 11394                           ;incstack = 0
 11395  005644  0E00               	movlw	0
 11396  005646  0100               	movlb	0	; () banked
 11397  005648  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11398  00564A  0E0C               	movlw	12
 11399  00564C  6FE6               	movwf	_cur_state& (0+255),b
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;UI.c: 496: lcdInst(0b10000000);;
 11403  00564E  0E80               	movlw	128
 11404  005650  ECEF  F02D         	call	_lcdInst
 11405                           
 11406                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11407  005654  0E1E               	movlw	low STR_33
 11408  005656  0100               	movlb	0	; () banked
 11409  005658  6F8E               	movwf	printf@f& (0+255),b
 11410  00565A  0EFD               	movlw	high STR_33
 11411  00565C  0100               	movlb	0	; () banked
 11412  00565E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11413  005660  ECED  F00D         	call	_printf	;wreg free
 11414                           
 11415                           ;UI.c: 498: lcdInst(0b11000000);;
 11416  005664  0EC0               	movlw	192
 11417  005666  ECEF  F02D         	call	_lcdInst
 11418                           
 11419                           ;UI.c: 499: printf("2. SORT        <");
 11420  00566A  0EB7               	movlw	low STR_34
 11421  00566C  0100               	movlb	0	; () banked
 11422  00566E  6F8E               	movwf	printf@f& (0+255),b
 11423  005670  0EFD               	movlw	high STR_34
 11424  005672  0100               	movlb	0	; () banked
 11425  005674  6F8F               	movwf	(printf@f+1)& (0+255),b
 11426  005676  ECED  F00D         	call	_printf	;wreg free
 11427  00567A  0012               	return		;funcret
 11428  00567C                     __end_of_change_state_to_menu_12:
 11429                           	opt stack 0
 11430                           tblptru	equ	0xFF8
 11431                           tblptrh	equ	0xFF7
 11432                           tblptrl	equ	0xFF6
 11433                           tablat	equ	0xFF5
 11434                           prodh	equ	0xFF4
 11435                           prodl	equ	0xFF3
 11436                           intcon	equ	0xFF2
 11437                           intcon2	equ	0xFF1
 11438                           intcon3	equ	0xFF0
 11439                           postinc0	equ	0xFEE
 11440                           wreg	equ	0xFE8
 11441                           postdec1	equ	0xFE5
 11442                           fsr1l	equ	0xFE1
 11443                           indf2	equ	0xFDF
 11444                           postinc2	equ	0xFDE
 11445                           postdec2	equ	0xFDD
 11446                           fsr2h	equ	0xFDA
 11447                           fsr2l	equ	0xFD9
 11448                           status	equ	0xFD8
 11449                           
 11450 ;; *************** function ___awmod *****************
 11451 ;; Defined at:
 11452 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;  dividend        2    0[BANK0 ] int 
 11455 ;;  divisor         2    2[BANK0 ] int 
 11456 ;; Auto vars:     Size  Location     Type
 11457 ;;  sign            1    5[BANK0 ] unsigned char 
 11458 ;;  counter         1    4[BANK0 ] unsigned char 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  2    0[BANK0 ] int 
 11461 ;; Registers used:
 11462 ;;		wreg, status,2, status,0
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11469 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;Total ram usage:        6 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    7
 11475 ;; This function calls:
 11476 ;;		Nothing
 11477 ;; This function is called by:
 11478 ;;		_UI
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           	psect	text38
 11483  004BDC                     __ptext38:
 11484                           	opt stack 0
 11485  004BDC                     ___awmod:
 11486                           	opt stack 22
 11487                           
 11488                           ;incstack = 0
 11489  004BDC  0E00               	movlw	0
 11490  004BDE  0100               	movlb	0	; () banked
 11491  004BE0  6F85               	movwf	___awmod@sign& (0+255),b
 11492                           
 11493                           ; BSR set to: 0
 11494  004BE2  0100               	movlb	0	; () banked
 11495  004BE4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11496  004BE6  D008               	goto	l9174
 11497                           
 11498                           ; BSR set to: 0
 11499  004BE8  0100               	movlb	0	; () banked
 11500  004BEA  6D80               	negf	___awmod@dividend& (0+255),b
 11501  004BEC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11502  004BEE  B0D8               	btfsc	status,0,c
 11503  004BF0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11504                           
 11505                           ; BSR set to: 0
 11506  004BF2  0E01               	movlw	1
 11507  004BF4  0100               	movlb	0	; () banked
 11508  004BF6  6F85               	movwf	___awmod@sign& (0+255),b
 11509  004BF8                     l9174:
 11510                           
 11511                           ; BSR set to: 0
 11512  004BF8  0100               	movlb	0	; () banked
 11513  004BFA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11514  004BFC  D005               	goto	l9178
 11515                           
 11516                           ; BSR set to: 0
 11517  004BFE  0100               	movlb	0	; () banked
 11518  004C00  6D82               	negf	___awmod@divisor& (0+255),b
 11519  004C02  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11520  004C04  B0D8               	btfsc	status,0,c
 11521  004C06  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11522  004C08                     l9178:
 11523                           
 11524                           ; BSR set to: 0
 11525  004C08  0100               	movlb	0	; () banked
 11526  004C0A  5182               	movf	___awmod@divisor& (0+255),w,b
 11527  004C0C  0100               	movlb	0	; () banked
 11528  004C0E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11529  004C10  B4D8               	btfsc	status,2,c
 11530  004C12  D026               	goto	l9194
 11531                           
 11532                           ; BSR set to: 0
 11533  004C14  0E01               	movlw	1
 11534  004C16  0100               	movlb	0	; () banked
 11535  004C18  6F84               	movwf	___awmod@counter& (0+255),b
 11536  004C1A  D006               	goto	l9184
 11537  004C1C                     l9182:
 11538                           
 11539                           ; BSR set to: 0
 11540  004C1C  0100               	movlb	0	; () banked
 11541  004C1E  90D8               	bcf	status,0,c
 11542  004C20  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11543  004C22  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11544  004C24  0100               	movlb	0	; () banked
 11545  004C26  2B84               	incf	___awmod@counter& (0+255),f,b
 11546  004C28                     l9184:
 11547                           
 11548                           ; BSR set to: 0
 11549  004C28  0100               	movlb	0	; () banked
 11550  004C2A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11551  004C2C  D7F7               	goto	l9182
 11552  004C2E                     l9186:
 11553                           
 11554                           ; BSR set to: 0
 11555  004C2E  0100               	movlb	0	; () banked
 11556  004C30  5182               	movf	___awmod@divisor& (0+255),w,b
 11557  004C32  0100               	movlb	0	; () banked
 11558  004C34  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11559  004C36  0100               	movlb	0	; () banked
 11560  004C38  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11561  004C3A  0100               	movlb	0	; () banked
 11562  004C3C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11563  004C3E  A0D8               	btfss	status,0,c
 11564  004C40  D008               	goto	l9190
 11565                           
 11566                           ; BSR set to: 0
 11567  004C42  0100               	movlb	0	; () banked
 11568  004C44  5182               	movf	___awmod@divisor& (0+255),w,b
 11569  004C46  0100               	movlb	0	; () banked
 11570  004C48  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11571  004C4A  0100               	movlb	0	; () banked
 11572  004C4C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11573  004C4E  0100               	movlb	0	; () banked
 11574  004C50  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11575  004C52                     l9190:
 11576                           
 11577                           ; BSR set to: 0
 11578  004C52  0100               	movlb	0	; () banked
 11579  004C54  90D8               	bcf	status,0,c
 11580  004C56  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11581  004C58  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11582                           
 11583                           ; BSR set to: 0
 11584  004C5A  0100               	movlb	0	; () banked
 11585  004C5C  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11586  004C5E  D7E7               	goto	l9186
 11587  004C60                     l9194:
 11588                           
 11589                           ; BSR set to: 0
 11590  004C60  0100               	movlb	0	; () banked
 11591  004C62  5185               	movf	___awmod@sign& (0+255),w,b
 11592  004C64  0100               	movlb	0	; () banked
 11593  004C66  B4D8               	btfsc	status,2,c
 11594  004C68  D005               	goto	l9198
 11595                           
 11596                           ; BSR set to: 0
 11597  004C6A  0100               	movlb	0	; () banked
 11598  004C6C  6D80               	negf	___awmod@dividend& (0+255),b
 11599  004C6E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11600  004C70  B0D8               	btfsc	status,0,c
 11601  004C72  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11602  004C74                     l9198:
 11603                           
 11604                           ; BSR set to: 0
 11605  004C74  C080  F080         	movff	___awmod@dividend,?___awmod
 11606  004C78  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11607  004C7C  0012               	return	
 11608  004C7E                     __end_of___awmod:
 11609                           	opt stack 0
 11610                           tblptru	equ	0xFF8
 11611                           tblptrh	equ	0xFF7
 11612                           tblptrl	equ	0xFF6
 11613                           tablat	equ	0xFF5
 11614                           prodh	equ	0xFF4
 11615                           prodl	equ	0xFF3
 11616                           intcon	equ	0xFF2
 11617                           intcon2	equ	0xFF1
 11618                           intcon3	equ	0xFF0
 11619                           postinc0	equ	0xFEE
 11620                           wreg	equ	0xFE8
 11621                           postdec1	equ	0xFE5
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function ___awdiv *****************
 11631 ;; Defined at:
 11632 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  dividend        2    6[BANK0 ] int 
 11635 ;;  divisor         2    8[BANK0 ] int 
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;  quotient        2   12[BANK0 ] int 
 11638 ;;  sign            1   11[BANK0 ] unsigned char 
 11639 ;;  counter         1   10[BANK0 ] unsigned char 
 11640 ;; Return value:  Size  Location     Type
 11641 ;;                  2    6[BANK0 ] int 
 11642 ;; Registers used:
 11643 ;;		wreg, status,2, status,0
 11644 ;; Tracked objects:
 11645 ;;		On entry : 0/0
 11646 ;;		On exit  : 0/0
 11647 ;;		Unchanged: 0/0
 11648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;Total ram usage:        8 bytes
 11654 ;; Hardware stack levels used:    1
 11655 ;; Hardware stack levels required when called:    7
 11656 ;; This function calls:
 11657 ;;		Nothing
 11658 ;; This function is called by:
 11659 ;;		_UI
 11660 ;;		_ID
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           	psect	text39
 11665  0049B8                     __ptext39:
 11666                           	opt stack 0
 11667  0049B8                     ___awdiv:
 11668                           	opt stack 21
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;incstack = 0
 11672  0049B8  0E00               	movlw	0
 11673  0049BA  0100               	movlb	0	; () banked
 11674  0049BC  6F8B               	movwf	___awdiv@sign& (0+255),b
 11675                           
 11676                           ; BSR set to: 0
 11677  0049BE  0100               	movlb	0	; () banked
 11678  0049C0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11679  0049C2  D008               	goto	l7458
 11680                           
 11681                           ; BSR set to: 0
 11682  0049C4  0100               	movlb	0	; () banked
 11683  0049C6  6D88               	negf	___awdiv@divisor& (0+255),b
 11684  0049C8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11685  0049CA  B0D8               	btfsc	status,0,c
 11686  0049CC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11687                           
 11688                           ; BSR set to: 0
 11689  0049CE  0E01               	movlw	1
 11690  0049D0  0100               	movlb	0	; () banked
 11691  0049D2  6F8B               	movwf	___awdiv@sign& (0+255),b
 11692  0049D4                     l7458:
 11693                           
 11694                           ; BSR set to: 0
 11695  0049D4  0100               	movlb	0	; () banked
 11696  0049D6  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11697  0049D8  D008               	goto	l7464
 11698                           
 11699                           ; BSR set to: 0
 11700  0049DA  0100               	movlb	0	; () banked
 11701  0049DC  6D86               	negf	___awdiv@dividend& (0+255),b
 11702  0049DE  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11703  0049E0  B0D8               	btfsc	status,0,c
 11704  0049E2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11705                           
 11706                           ; BSR set to: 0
 11707  0049E4  0E01               	movlw	1
 11708  0049E6  0100               	movlb	0	; () banked
 11709  0049E8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11710  0049EA                     l7464:
 11711                           
 11712                           ; BSR set to: 0
 11713  0049EA  0E00               	movlw	0
 11714  0049EC  0100               	movlb	0	; () banked
 11715  0049EE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11716  0049F0  0E00               	movlw	0
 11717  0049F2  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11718                           
 11719                           ; BSR set to: 0
 11720  0049F4  0100               	movlb	0	; () banked
 11721  0049F6  5188               	movf	___awdiv@divisor& (0+255),w,b
 11722  0049F8  0100               	movlb	0	; () banked
 11723  0049FA  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11724  0049FC  B4D8               	btfsc	status,2,c
 11725  0049FE  D02C               	goto	l7486
 11726                           
 11727                           ; BSR set to: 0
 11728  004A00  0E01               	movlw	1
 11729  004A02  0100               	movlb	0	; () banked
 11730  004A04  6F8A               	movwf	___awdiv@counter& (0+255),b
 11731  004A06  D006               	goto	l7472
 11732  004A08                     l7470:
 11733                           
 11734                           ; BSR set to: 0
 11735  004A08  0100               	movlb	0	; () banked
 11736  004A0A  90D8               	bcf	status,0,c
 11737  004A0C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11738  004A0E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11739  004A10  0100               	movlb	0	; () banked
 11740  004A12  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11741  004A14                     l7472:
 11742                           
 11743                           ; BSR set to: 0
 11744  004A14  0100               	movlb	0	; () banked
 11745  004A16  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11746  004A18  D7F7               	goto	l7470
 11747  004A1A                     l7474:
 11748                           
 11749                           ; BSR set to: 0
 11750  004A1A  0100               	movlb	0	; () banked
 11751  004A1C  90D8               	bcf	status,0,c
 11752  004A1E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11753  004A20  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11754                           
 11755                           ; BSR set to: 0
 11756  004A22  0100               	movlb	0	; () banked
 11757  004A24  5188               	movf	___awdiv@divisor& (0+255),w,b
 11758  004A26  0100               	movlb	0	; () banked
 11759  004A28  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11760  004A2A  0100               	movlb	0	; () banked
 11761  004A2C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11762  004A2E  0100               	movlb	0	; () banked
 11763  004A30  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11764  004A32  A0D8               	btfss	status,0,c
 11765  004A34  D00A               	goto	l7482
 11766                           
 11767                           ; BSR set to: 0
 11768  004A36  0100               	movlb	0	; () banked
 11769  004A38  5188               	movf	___awdiv@divisor& (0+255),w,b
 11770  004A3A  0100               	movlb	0	; () banked
 11771  004A3C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11772  004A3E  0100               	movlb	0	; () banked
 11773  004A40  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11774  004A42  0100               	movlb	0	; () banked
 11775  004A44  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11776                           
 11777                           ; BSR set to: 0
 11778  004A46  0100               	movlb	0	; () banked
 11779  004A48  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11780  004A4A                     l7482:
 11781                           
 11782                           ; BSR set to: 0
 11783  004A4A  0100               	movlb	0	; () banked
 11784  004A4C  90D8               	bcf	status,0,c
 11785  004A4E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11786  004A50  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11787                           
 11788                           ; BSR set to: 0
 11789  004A52  0100               	movlb	0	; () banked
 11790  004A54  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11791  004A56  D7E1               	goto	l7474
 11792  004A58                     l7486:
 11793                           
 11794                           ; BSR set to: 0
 11795  004A58  0100               	movlb	0	; () banked
 11796  004A5A  518B               	movf	___awdiv@sign& (0+255),w,b
 11797  004A5C  0100               	movlb	0	; () banked
 11798  004A5E  B4D8               	btfsc	status,2,c
 11799  004A60  D005               	goto	l7490
 11800                           
 11801                           ; BSR set to: 0
 11802  004A62  0100               	movlb	0	; () banked
 11803  004A64  6D8C               	negf	___awdiv@quotient& (0+255),b
 11804  004A66  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11805  004A68  B0D8               	btfsc	status,0,c
 11806  004A6A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11807  004A6C                     l7490:
 11808                           
 11809                           ; BSR set to: 0
 11810  004A6C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11811  004A70  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11812  004A74  0012               	return	
 11813  004A76                     __end_of___awdiv:
 11814                           	opt stack 0
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodh	equ	0xFF4
 11820                           prodl	equ	0xFF3
 11821                           intcon	equ	0xFF2
 11822                           intcon2	equ	0xFF1
 11823                           intcon3	equ	0xFF0
 11824                           postinc0	equ	0xFEE
 11825                           wreg	equ	0xFE8
 11826                           postdec1	equ	0xFE5
 11827                           fsr1l	equ	0xFE1
 11828                           indf2	equ	0xFDF
 11829                           postinc2	equ	0xFDE
 11830                           postdec2	equ	0xFDD
 11831                           fsr2h	equ	0xFDA
 11832                           fsr2l	equ	0xFD9
 11833                           status	equ	0xFD8
 11834                           
 11835 ;; *************** function _Test *****************
 11836 ;; Defined at:
 11837 ;;		line 31 in file "Test.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;		None
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;		None
 11842 ;; Return value:  Size  Location     Type
 11843 ;;                  1    wreg      void 
 11844 ;; Registers used:
 11845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;Total ram usage:        2 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:   11
 11858 ;; This function calls:
 11859 ;;		_BlockerTest
 11860 ;;		_BothServos
 11861 ;;		_PlatformTest
 11862 ;;		_PortTestDC
 11863 ;;		_PortTestPusher
 11864 ;;		_SpeedTest
 11865 ;;		_actuatorTest
 11866 ;;		_algorithmTest
 11867 ;;		_arm
 11868 ;;		_lcdInst
 11869 ;;		_printf
 11870 ;;		_sensorTest
 11871 ;; This function is called by:
 11872 ;;		_main
 11873 ;; This function uses a non-reentrant model
 11874 ;;
 11875                           
 11876                           	psect	text40
 11877  0042C6                     __ptext40:
 11878                           	opt stack 0
 11879  0042C6                     _Test:
 11880                           	opt stack 19
 11881                           
 11882                           ;Test.c: 33: while(machine_state == Testing_state){
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;incstack = 0
 11886  0042C6  D07C               	goto	l9924
 11887  0042C8                     l9884:
 11888                           
 11889                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11890  0042C8  0E01               	movlw	1
 11891  0042CA  ECEF  F02D         	call	_lcdInst
 11892  0042CE  0E68               	movlw	104
 11893  0042D0  0100               	movlb	0	; () banked
 11894  0042D2  6FC6               	movwf	??_Test& (0+255),b
 11895  0042D4  0EE4               	movlw	228
 11896  0042D6                     u10367:
 11897  0042D6  2EE8               	decfsz	wreg,f,c
 11898  0042D8  D7FE               	bra	u10367
 11899  0042DA  2FC6               	decfsz	??_Test& (0+255),f,b
 11900  0042DC  D7FC               	bra	u10367
 11901  0042DE  F000               	nop	
 11902  0042E0  0E80               	movlw	128
 11903  0042E2  ECEF  F02D         	call	_lcdInst
 11904                           
 11905                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11906  0042E6  0E74               	movlw	low STR_69
 11907  0042E8  0100               	movlb	0	; () banked
 11908  0042EA  6F8E               	movwf	printf@f& (0+255),b
 11909  0042EC  0EFC               	movlw	high STR_69
 11910  0042EE  0100               	movlb	0	; () banked
 11911  0042F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11912  0042F2  ECED  F00D         	call	_printf	;wreg free
 11913                           
 11914                           ;Test.c: 36: lcdInst(0b11000000);;
 11915  0042F6  0EC0               	movlw	192
 11916  0042F8  ECEF  F02D         	call	_lcdInst
 11917                           
 11918                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11919  0042FC  0E85               	movlw	low STR_70
 11920  0042FE  0100               	movlb	0	; () banked
 11921  004300  6F8E               	movwf	printf@f& (0+255),b
 11922  004302  0EFC               	movlw	high STR_70
 11923  004304  0100               	movlb	0	; () banked
 11924  004306  6F8F               	movwf	(printf@f+1)& (0+255),b
 11925  004308  ECED  F00D         	call	_printf	;wreg free
 11926  00430C                     l1236:
 11927  00430C  A281               	btfss	3969,1,c	;volatile
 11928  00430E  D7FE               	goto	l1236
 11929                           
 11930                           ;Test.c: 39: var = PORTB >> 4;
 11931  004310  CF81 F0C6          	movff	3969,??_Test	;volatile
 11932  004314  0100               	movlb	0	; () banked
 11933  004316  3BC6               	swapf	??_Test& (0+255),f,b
 11934  004318  0E0F               	movlw	15
 11935  00431A  17C6               	andwf	??_Test& (0+255),f,b
 11936  00431C  0100               	movlb	0	; () banked
 11937  00431E  51C6               	movf	??_Test& (0+255),w,b
 11938  004320  0101               	movlb	1	; () banked
 11939  004322  6F47               	movwf	_var& (0+255),b
 11940  004324  6B48               	clrf	(_var+1)& (0+255),b
 11941                           
 11942                           ; BSR set to: 1
 11943                           ;Test.c: 40: var++;
 11944  004326  0101               	movlb	1	; () banked
 11945  004328  4B47               	infsnz	_var& (0+255),f,b
 11946  00432A  2B48               	incf	(_var+1)& (0+255),f,b
 11947  00432C                     l1239:
 11948  00432C  A281               	btfss	3969,1,c	;volatile
 11949  00432E  D01F               	goto	l9922
 11950  004330  D7FD               	goto	l1239
 11951  004332                     l9900:
 11952                           
 11953                           ;Test.c: 44: algorithmTest();
 11954  004332  EC4A  F023         	call	_algorithmTest	;wreg free
 11955                           
 11956                           ;Test.c: 45: break;
 11957  004336  D044               	goto	l9924
 11958  004338                     l9902:
 11959                           
 11960                           ;Test.c: 47: sensorTest();
 11961  004338  EC42  F015         	call	_sensorTest	;wreg free
 11962                           
 11963                           ;Test.c: 48: break;
 11964  00433C  D041               	goto	l9924
 11965  00433E                     l9904:
 11966                           
 11967                           ;Test.c: 50: actuatorTest();
 11968  00433E  EC6D  F004         	call	_actuatorTest	;wreg free
 11969                           
 11970                           ;Test.c: 51: break;
 11971  004342  D03E               	goto	l9924
 11972  004344                     l9906:
 11973                           
 11974                           ;Test.c: 53: arm();
 11975  004344  ECE6  F021         	call	_arm	;wreg free
 11976                           
 11977                           ;Test.c: 54: break;
 11978  004348  D03B               	goto	l9924
 11979  00434A                     l9908:
 11980                           
 11981                           ;Test.c: 56: PortTestDC();
 11982  00434A  EC66  F029         	call	_PortTestDC	;wreg free
 11983                           
 11984                           ;Test.c: 57: break;
 11985  00434E  D038               	goto	l9924
 11986  004350                     l9910:
 11987                           
 11988                           ;Test.c: 59: SpeedTest();
 11989  004350  EC0B  F027         	call	_SpeedTest	;wreg free
 11990                           
 11991                           ;Test.c: 60: break;
 11992  004354  D035               	goto	l9924
 11993  004356                     l9912:
 11994                           
 11995                           ;Test.c: 62: PortTestPusher();
 11996  004356  EC38  F029         	call	_PortTestPusher	;wreg free
 11997                           
 11998                           ;Test.c: 63: break;
 11999  00435A  D032               	goto	l9924
 12000  00435C                     l9914:
 12001                           
 12002                           ;Test.c: 65: PlatformTest();
 12003  00435C  ECB7  F013         	call	_PlatformTest	;wreg free
 12004                           
 12005                           ;Test.c: 66: break;
 12006  004360  D02F               	goto	l9924
 12007  004362                     l9916:
 12008                           
 12009                           ;Test.c: 68: BothServos();
 12010  004362  EC09  F010         	call	_BothServos	;wreg free
 12011                           
 12012                           ;Test.c: 69: break;
 12013  004366  D02C               	goto	l9924
 12014  004368                     l9918:
 12015                           
 12016                           ;Test.c: 71: BlockerTest();
 12017  004368  ECC8  F01E         	call	_BlockerTest	;wreg free
 12018                           
 12019                           ;Test.c: 75: }
 12020                           
 12021                           ;Test.c: 74: break;
 12022                           
 12023                           ;Test.c: 73: default:
 12024                           
 12025                           ;Test.c: 72: break;
 12026  00436C  D029               	goto	l9924
 12027  00436E                     l9922:
 12028  00436E  C147  F0C6         	movff	_var,??_Test
 12029  004372  C148  F0C7         	movff	_var+1,??_Test+1
 12030                           
 12031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12032                           ; Switch size 1, requested type "space"
 12033                           ; Number of cases is 1, Range of values is 0 to 0
 12034                           ; switch strategies available:
 12035                           ; Name         Instructions Cycles
 12036                           ; simple_byte            4     3 (average)
 12037                           ;	Chosen strategy is simple_byte
 12038  004376  0100               	movlb	0	; () banked
 12039  004378  51C7               	movf	(??_Test+1)& (0+255),w,b
 12040  00437A  0A00               	xorlw	0	; case 0
 12041  00437C  A4D8               	btfss	status,2,c
 12042  00437E  D020               	goto	l9924
 12043                           
 12044                           ; BSR set to: 0
 12045                           ; Switch size 1, requested type "space"
 12046                           ; Number of cases is 10, Range of values is 1 to 11
 12047                           ; switch strategies available:
 12048                           ; Name         Instructions Cycles
 12049                           ; simple_byte           31    16 (average)
 12050                           ;	Chosen strategy is simple_byte
 12051  004380  0100               	movlb	0	; () banked
 12052  004382  51C6               	movf	??_Test& (0+255),w,b
 12053  004384  0A01               	xorlw	1	; case 1
 12054  004386  B4D8               	btfsc	status,2,c
 12055  004388  D7D4               	goto	l9900
 12056  00438A  0A03               	xorlw	3	; case 2
 12057  00438C  B4D8               	btfsc	status,2,c
 12058  00438E  D7D4               	goto	l9902
 12059  004390  0A01               	xorlw	1	; case 3
 12060  004392  B4D8               	btfsc	status,2,c
 12061  004394  D7D4               	goto	l9904
 12062  004396  0A07               	xorlw	7	; case 4
 12063  004398  B4D8               	btfsc	status,2,c
 12064  00439A  D7D4               	goto	l9906
 12065  00439C  0A01               	xorlw	1	; case 5
 12066  00439E  B4D8               	btfsc	status,2,c
 12067  0043A0  D7D4               	goto	l9908
 12068  0043A2  0A03               	xorlw	3	; case 6
 12069  0043A4  B4D8               	btfsc	status,2,c
 12070  0043A6  D7D4               	goto	l9910
 12071  0043A8  0A01               	xorlw	1	; case 7
 12072  0043AA  B4D8               	btfsc	status,2,c
 12073  0043AC  D7D4               	goto	l9912
 12074  0043AE  0A0F               	xorlw	15	; case 8
 12075  0043B0  B4D8               	btfsc	status,2,c
 12076  0043B2  D7D4               	goto	l9914
 12077  0043B4  0A02               	xorlw	2	; case 10
 12078  0043B6  B4D8               	btfsc	status,2,c
 12079  0043B8  D7D4               	goto	l9916
 12080  0043BA  0A01               	xorlw	1	; case 11
 12081  0043BC  B4D8               	btfsc	status,2,c
 12082  0043BE  D7D4               	goto	l9918
 12083  0043C0                     l9924:
 12084  0043C0  0E03               	movlw	3
 12085  0043C2  0100               	movlb	0	; () banked
 12086  0043C4  19FC               	xorwf	_machine_state& (0+255),w,b
 12087  0043C6  A4D8               	btfss	status,2,c
 12088  0043C8  0012               	return	
 12089  0043CA  D77E               	goto	l9884
 12090  0043CC                     __end_of_Test:
 12091                           	opt stack 0
 12092                           tblptru	equ	0xFF8
 12093                           tblptrh	equ	0xFF7
 12094                           tblptrl	equ	0xFF6
 12095                           tablat	equ	0xFF5
 12096                           prodh	equ	0xFF4
 12097                           prodl	equ	0xFF3
 12098                           intcon	equ	0xFF2
 12099                           intcon2	equ	0xFF1
 12100                           intcon3	equ	0xFF0
 12101                           postinc0	equ	0xFEE
 12102                           wreg	equ	0xFE8
 12103                           postdec1	equ	0xFE5
 12104                           fsr1l	equ	0xFE1
 12105                           indf2	equ	0xFDF
 12106                           postinc2	equ	0xFDE
 12107                           postdec2	equ	0xFDD
 12108                           fsr2h	equ	0xFDA
 12109                           fsr2l	equ	0xFD9
 12110                           status	equ	0xFD8
 12111                           
 12112 ;; *************** function _sensorTest *****************
 12113 ;; Defined at:
 12114 ;;		line 123 in file "Test.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;  res             2   45[BANK0 ] int 
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      void 
 12121 ;; Registers used:
 12122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;Total ram usage:        4 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:   10
 12135 ;; This function calls:
 12136 ;;		_lcdInst
 12137 ;;		_printf
 12138 ;;		_readADC
 12139 ;;		_readMAG
 12140 ;; This function is called by:
 12141 ;;		_Test
 12142 ;; This function uses a non-reentrant model
 12143 ;;
 12144                           
 12145                           	psect	text41
 12146  002A84                     __ptext41:
 12147                           	opt stack 0
 12148  002A84                     _sensorTest:
 12149                           	opt stack 19
 12150                           
 12151                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;incstack = 0
 12155  002A84  0E01               	movlw	1
 12156  002A86  ECEF  F02D         	call	_lcdInst
 12157  002A8A  0E68               	movlw	104
 12158  002A8C  0100               	movlb	0	; () banked
 12159  002A8E  6FAB               	movwf	??_sensorTest& (0+255),b
 12160  002A90  0EE4               	movlw	228
 12161  002A92                     u10377:
 12162  002A92  2EE8               	decfsz	wreg,f,c
 12163  002A94  D7FE               	bra	u10377
 12164  002A96  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12165  002A98  D7FC               	bra	u10377
 12166  002A9A  F000               	nop	
 12167  002A9C  0E80               	movlw	128
 12168  002A9E  ECEF  F02D         	call	_lcdInst
 12169                           
 12170                           ;Test.c: 126: printf("SENSORS");
 12171  002AA2  0EAD               	movlw	low STR_78
 12172  002AA4  0100               	movlb	0	; () banked
 12173  002AA6  6F8E               	movwf	printf@f& (0+255),b
 12174  002AA8  0EFF               	movlw	high STR_78
 12175  002AAA  0100               	movlb	0	; () banked
 12176  002AAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12177  002AAE  ECED  F00D         	call	_printf	;wreg free
 12178                           
 12179                           ;Test.c: 127: lcdInst(0b11000000);;
 12180  002AB2  0EC0               	movlw	192
 12181  002AB4  ECEF  F02D         	call	_lcdInst
 12182                           
 12183                           ;Test.c: 128: printf("PUSH TO START");
 12184  002AB8  0E2D               	movlw	low STR_72
 12185  002ABA  0100               	movlb	0	; () banked
 12186  002ABC  6F8E               	movwf	printf@f& (0+255),b
 12187  002ABE  0EFF               	movlw	high STR_72
 12188  002AC0  0100               	movlb	0	; () banked
 12189  002AC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12190  002AC4  ECED  F00D         	call	_printf	;wreg free
 12191                           
 12192                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12193  002AC8  0E05               	movlw	5
 12194  002ACA  0100               	movlb	0	; () banked
 12195  002ACC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12196  002ACE  0E0F               	movlw	15
 12197  002AD0  0100               	movlb	0	; () banked
 12198  002AD2  6FAB               	movwf	??_sensorTest& (0+255),b
 12199  002AD4  0EF1               	movlw	241
 12200  002AD6                     u10387:
 12201  002AD6  2EE8               	decfsz	wreg,f,c
 12202  002AD8  D7FE               	bra	u10387
 12203  002ADA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12204  002ADC  D7FC               	bra	u10387
 12205  002ADE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12206  002AE0  D7FA               	bra	u10387
 12207  002AE2                     l1268:
 12208  002AE2  A281               	btfss	3969,1,c	;volatile
 12209  002AE4  D7FE               	goto	l1268
 12210  002AE6                     l1271:
 12211  002AE6  B281               	btfsc	3969,1,c	;volatile
 12212  002AE8  D7FE               	goto	l1271
 12213                           
 12214                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12215  002AEA  0E01               	movlw	1
 12216  002AEC  ECEF  F02D         	call	_lcdInst
 12217  002AF0  0E68               	movlw	104
 12218  002AF2  0100               	movlb	0	; () banked
 12219  002AF4  6FAB               	movwf	??_sensorTest& (0+255),b
 12220  002AF6  0EE4               	movlw	228
 12221  002AF8                     u10397:
 12222  002AF8  2EE8               	decfsz	wreg,f,c
 12223  002AFA  D7FE               	bra	u10397
 12224  002AFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12225  002AFE  D7FC               	bra	u10397
 12226  002B00  F000               	nop	
 12227  002B02  0E80               	movlw	128
 12228  002B04  ECEF  F02D         	call	_lcdInst
 12229                           
 12230                           ;Test.c: 137: printf("TST: IR SNSR");
 12231  002B08  0E57               	movlw	low STR_80
 12232  002B0A  0100               	movlb	0	; () banked
 12233  002B0C  6F8E               	movwf	printf@f& (0+255),b
 12234  002B0E  0EFF               	movlw	high STR_80
 12235  002B10  0100               	movlb	0	; () banked
 12236  002B12  6F8F               	movwf	(printf@f+1)& (0+255),b
 12237  002B14  ECED  F00D         	call	_printf	;wreg free
 12238                           
 12239                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12240  002B18  0E05               	movlw	5
 12241  002B1A  0100               	movlb	0	; () banked
 12242  002B1C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12243  002B1E  0E0F               	movlw	15
 12244  002B20  0100               	movlb	0	; () banked
 12245  002B22  6FAB               	movwf	??_sensorTest& (0+255),b
 12246  002B24  0EF1               	movlw	241
 12247  002B26                     u10407:
 12248  002B26  2EE8               	decfsz	wreg,f,c
 12249  002B28  D7FE               	bra	u10407
 12250  002B2A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12251  002B2C  D7FC               	bra	u10407
 12252  002B2E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12253  002B30  D7FA               	bra	u10407
 12254                           
 12255                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12256  002B32  8A8B               	bsf	3979,5,c	;volatile
 12257                           
 12258                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12259  002B34  D05C               	goto	l8290
 12260  002B36                     l8272:
 12261                           
 12262                           ;Test.c: 142: readADC(0);
 12263  002B36  0E00               	movlw	0
 12264  002B38  ECDA  F02C         	call	_readADC
 12265                           
 12266                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12267  002B3C  50C3               	movf	4035,w,c	;volatile
 12268  002B3E  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12269  002B42  0100               	movlb	0	; () banked
 12270  002B44  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12271  002B46  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12272  002B4A  0100               	movlb	0	; () banked
 12273  002B4C  6BAB               	clrf	??_sensorTest& (0+255),b
 12274  002B4E  0100               	movlb	0	; () banked
 12275  002B50  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12276  002B52  0100               	movlb	0	; () banked
 12277  002B54  6FAD               	movwf	sensorTest@res& (0+255),b
 12278  002B56  0100               	movlb	0	; () banked
 12279  002B58  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12280  002B5A  0100               	movlb	0	; () banked
 12281  002B5C  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12285  002B5E  0100               	movlb	0	; () banked
 12286  002B60  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12287  002B62  D00A               	goto	u7090
 12288  002B64  0E21               	movlw	33
 12289  002B66  0100               	movlb	0	; () banked
 12290  002B68  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12291  002B6A  0E03               	movlw	3
 12292  002B6C  0100               	movlb	0	; () banked
 12293  002B6E  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12294  002B70  A0D8               	btfss	status,0,c
 12295  002B72  D002               	goto	u7090
 12296  002B74  0E01               	movlw	1
 12297  002B76  D001               	goto	u7100
 12298  002B78                     u7090:
 12299  002B78  0E00               	movlw	0
 12300  002B7A                     u7100:
 12301  002B7A  0100               	movlb	0	; () banked
 12302  002B7C  6FE0               	movwf	_IR_signal& (0+255),b
 12303  002B7E  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12304                           
 12305                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12306  002B80  0E01               	movlw	1
 12307  002B82  ECEF  F02D         	call	_lcdInst
 12308  002B86  0E68               	movlw	104
 12309  002B88  0100               	movlb	0	; () banked
 12310  002B8A  6FAB               	movwf	??_sensorTest& (0+255),b
 12311  002B8C  0EE4               	movlw	228
 12312  002B8E                     u10417:
 12313  002B8E  2EE8               	decfsz	wreg,f,c
 12314  002B90  D7FE               	bra	u10417
 12315  002B92  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12316  002B94  D7FC               	bra	u10417
 12317  002B96  F000               	nop	
 12318  002B98  0E80               	movlw	128
 12319  002B9A  ECEF  F02D         	call	_lcdInst
 12320                           
 12321                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12322  002B9E  0E7C               	movlw	low STR_81
 12323  002BA0  0100               	movlb	0	; () banked
 12324  002BA2  6F8E               	movwf	printf@f& (0+255),b
 12325  002BA4  0EFE               	movlw	high STR_81
 12326  002BA6  0100               	movlb	0	; () banked
 12327  002BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12328  002BAA  C0E0  F090         	movff	_IR_signal,?_printf+2
 12329  002BAE  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12330  002BB2  ECED  F00D         	call	_printf	;wreg free
 12331                           
 12332                           ;Test.c: 148: lcdInst(0b11000000);;
 12333  002BB6  0EC0               	movlw	192
 12334  002BB8  ECEF  F02D         	call	_lcdInst
 12335                           
 12336                           ;Test.c: 149: printf("%d", res);
 12337  002BBC  0E09               	movlw	low (STR_27+14)
 12338  002BBE  0100               	movlb	0	; () banked
 12339  002BC0  6F8E               	movwf	printf@f& (0+255),b
 12340  002BC2  0EFE               	movlw	high (STR_27+14)
 12341  002BC4  0100               	movlb	0	; () banked
 12342  002BC6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12343  002BC8  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12344  002BCC  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12345  002BD0  ECED  F00D         	call	_printf	;wreg free
 12346                           
 12347                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12348  002BD4  0E05               	movlw	5
 12349  002BD6  0100               	movlb	0	; () banked
 12350  002BD8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12351  002BDA  0E0F               	movlw	15
 12352  002BDC  0100               	movlb	0	; () banked
 12353  002BDE  6FAB               	movwf	??_sensorTest& (0+255),b
 12354  002BE0  0EF1               	movlw	241
 12355  002BE2                     u10427:
 12356  002BE2  2EE8               	decfsz	wreg,f,c
 12357  002BE4  D7FE               	bra	u10427
 12358  002BE6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12359  002BE8  D7FC               	bra	u10427
 12360  002BEA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12361  002BEC  D7FA               	bra	u10427
 12362  002BEE                     l8290:
 12363  002BEE  A281               	btfss	3969,1,c	;volatile
 12364  002BF0  D7A2               	goto	l8272
 12365                           
 12366                           ;Test.c: 151: }
 12367                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12368  002BF2  9A8B               	bcf	3979,5,c	;volatile
 12369                           
 12370                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12371  002BF4  0E01               	movlw	1
 12372  002BF6  ECEF  F02D         	call	_lcdInst
 12373  002BFA  0E68               	movlw	104
 12374  002BFC  0100               	movlb	0	; () banked
 12375  002BFE  6FAB               	movwf	??_sensorTest& (0+255),b
 12376  002C00  0EE4               	movlw	228
 12377  002C02                     u10437:
 12378  002C02  2EE8               	decfsz	wreg,f,c
 12379  002C04  D7FE               	bra	u10437
 12380  002C06  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12381  002C08  D7FC               	bra	u10437
 12382  002C0A  F000               	nop	
 12383  002C0C  0E80               	movlw	128
 12384  002C0E  ECEF  F02D         	call	_lcdInst
 12385                           
 12386                           ;Test.c: 161: printf("TST: MAGNETISM");
 12387  002C12  0EA9               	movlw	low STR_83
 12388  002C14  0100               	movlb	0	; () banked
 12389  002C16  6F8E               	movwf	printf@f& (0+255),b
 12390  002C18  0EFE               	movlw	high STR_83
 12391  002C1A  0100               	movlb	0	; () banked
 12392  002C1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12393  002C1E  ECED  F00D         	call	_printf	;wreg free
 12394                           
 12395                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12396  002C22  0E05               	movlw	5
 12397  002C24  0100               	movlb	0	; () banked
 12398  002C26  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12399  002C28  0E0F               	movlw	15
 12400  002C2A  0100               	movlb	0	; () banked
 12401  002C2C  6FAB               	movwf	??_sensorTest& (0+255),b
 12402  002C2E  0EF1               	movlw	241
 12403  002C30                     u10447:
 12404  002C30  2EE8               	decfsz	wreg,f,c
 12405  002C32  D7FE               	bra	u10447
 12406  002C34  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12407  002C36  D7FC               	bra	u10447
 12408  002C38  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12409  002C3A  D7FA               	bra	u10447
 12410                           
 12411                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12412  002C3C  D021               	goto	l8308
 12413  002C3E                     l8302:
 12414                           
 12415                           ;Test.c: 164: readMAG();
 12416  002C3E  EC5D  F02A         	call	_readMAG	;wreg free
 12417                           
 12418                           ;Test.c: 165: lcdInst(0b10000000);;
 12419  002C42  0E80               	movlw	128
 12420  002C44  ECEF  F02D         	call	_lcdInst
 12421                           
 12422                           ;Test.c: 166: lcdInst(0b11000000);;
 12423  002C48  0EC0               	movlw	192
 12424  002C4A  ECEF  F02D         	call	_lcdInst
 12425                           
 12426                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12427  002C4E  0E1D               	movlw	low STR_84
 12428  002C50  0100               	movlb	0	; () banked
 12429  002C52  6F8E               	movwf	printf@f& (0+255),b
 12430  002C54  0EFE               	movlw	high STR_84
 12431  002C56  0100               	movlb	0	; () banked
 12432  002C58  6F8F               	movwf	(printf@f+1)& (0+255),b
 12433  002C5A  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12434  002C5E  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12435  002C62  ECED  F00D         	call	_printf	;wreg free
 12436                           
 12437                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12438  002C66  0E05               	movlw	5
 12439  002C68  0100               	movlb	0	; () banked
 12440  002C6A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12441  002C6C  0E0F               	movlw	15
 12442  002C6E  0100               	movlb	0	; () banked
 12443  002C70  6FAB               	movwf	??_sensorTest& (0+255),b
 12444  002C72  0EF1               	movlw	241
 12445  002C74                     u10457:
 12446  002C74  2EE8               	decfsz	wreg,f,c
 12447  002C76  D7FE               	bra	u10457
 12448  002C78  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12449  002C7A  D7FC               	bra	u10457
 12450  002C7C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12451  002C7E  D7FA               	bra	u10457
 12452  002C80                     l8308:
 12453  002C80  A281               	btfss	3969,1,c	;volatile
 12454  002C82  D7DD               	goto	l8302
 12455                           
 12456                           ;Test.c: 169: }
 12457                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12458  002C84  0E01               	movlw	1
 12459  002C86  ECEF  F02D         	call	_lcdInst
 12460  002C8A  0E68               	movlw	104
 12461  002C8C  0100               	movlb	0	; () banked
 12462  002C8E  6FAB               	movwf	??_sensorTest& (0+255),b
 12463  002C90  0EE4               	movlw	228
 12464  002C92                     u10467:
 12465  002C92  2EE8               	decfsz	wreg,f,c
 12466  002C94  D7FE               	bra	u10467
 12467  002C96  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12468  002C98  D7FC               	bra	u10467
 12469  002C9A  F000               	nop	
 12470  002C9C  0E80               	movlw	128
 12471  002C9E  ECEF  F02D         	call	_lcdInst
 12472                           
 12473                           ;Test.c: 175: printf("TST: COND");
 12474  002CA2  0E86               	movlw	low STR_85
 12475  002CA4  0100               	movlb	0	; () banked
 12476  002CA6  6F8E               	movwf	printf@f& (0+255),b
 12477  002CA8  0EFF               	movlw	high STR_85
 12478  002CAA  0100               	movlb	0	; () banked
 12479  002CAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12480  002CAE  ECED  F00D         	call	_printf	;wreg free
 12481                           
 12482                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12483  002CB2  0E05               	movlw	5
 12484  002CB4  0100               	movlb	0	; () banked
 12485  002CB6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12486  002CB8  0E0F               	movlw	15
 12487  002CBA  0100               	movlb	0	; () banked
 12488  002CBC  6FAB               	movwf	??_sensorTest& (0+255),b
 12489  002CBE  0EF1               	movlw	241
 12490  002CC0                     u10477:
 12491  002CC0  2EE8               	decfsz	wreg,f,c
 12492  002CC2  D7FE               	bra	u10477
 12493  002CC4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12494  002CC6  D7FC               	bra	u10477
 12495  002CC8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12496  002CCA  D7FA               	bra	u10477
 12497  002CCC                     l8320:
 12498                           
 12499                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12500  002CCC  0E01               	movlw	1
 12501  002CCE  ECEF  F02D         	call	_lcdInst
 12502  002CD2  0E68               	movlw	104
 12503  002CD4  0100               	movlb	0	; () banked
 12504  002CD6  6FAB               	movwf	??_sensorTest& (0+255),b
 12505  002CD8  0EE4               	movlw	228
 12506  002CDA                     u10487:
 12507  002CDA  2EE8               	decfsz	wreg,f,c
 12508  002CDC  D7FE               	bra	u10487
 12509  002CDE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12510  002CE0  D7FC               	bra	u10487
 12511  002CE2  F000               	nop	
 12512  002CE4  0E80               	movlw	128
 12513  002CE6  ECEF  F02D         	call	_lcdInst
 12514                           
 12515                           ;Test.c: 179: printf("TST: COND");
 12516  002CEA  0E86               	movlw	low STR_85
 12517  002CEC  0100               	movlb	0	; () banked
 12518  002CEE  6F8E               	movwf	printf@f& (0+255),b
 12519  002CF0  0EFF               	movlw	high STR_85
 12520  002CF2  0100               	movlb	0	; () banked
 12521  002CF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12522  002CF6  ECED  F00D         	call	_printf	;wreg free
 12523                           
 12524                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12525  002CFA  D01B               	goto	l8332
 12526  002CFC                     l8328:
 12527                           
 12528                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12529  002CFC  0E80               	movlw	128
 12530  002CFE  ECEF  F02D         	call	_lcdInst
 12531  002D02  0EC0               	movlw	192
 12532  002D04  ECEF  F02D         	call	_lcdInst
 12533                           
 12534                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12535  002D08  0EA4               	movlw	low STR_87
 12536  002D0A  0100               	movlb	0	; () banked
 12537  002D0C  6F8E               	movwf	printf@f& (0+255),b
 12538  002D0E  0EFF               	movlw	high STR_87
 12539  002D10  0100               	movlb	0	; () banked
 12540  002D12  6F8F               	movwf	(printf@f+1)& (0+255),b
 12541  002D14  A480               	btfss	3968,2,c	;volatile
 12542  002D16  D004               	goto	u7130
 12543  002D18  0100               	movlb	0	; () banked
 12544  002D1A  6BAB               	clrf	??_sensorTest& (0+255),b
 12545  002D1C  2BAB               	incf	??_sensorTest& (0+255),f,b
 12546  002D1E  D002               	goto	u7138
 12547  002D20                     u7130:
 12548  002D20  0100               	movlb	0	; () banked
 12549  002D22  6BAB               	clrf	??_sensorTest& (0+255),b
 12550  002D24                     u7138:
 12551  002D24  0100               	movlb	0	; () banked
 12552  002D26  51AB               	movf	??_sensorTest& (0+255),w,b
 12553  002D28  0100               	movlb	0	; () banked
 12554  002D2A  6F90               	movwf	(?_printf+2)& (0+255),b
 12555  002D2C  6B91               	clrf	(?_printf+3)& (0+255),b
 12556  002D2E  ECED  F00D         	call	_printf	;wreg free
 12557  002D32                     l8332:
 12558  002D32  A281               	btfss	3969,1,c	;volatile
 12559  002D34  D7E3               	goto	l8328
 12560                           
 12561                           ;Test.c: 186: }
 12562                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12563  002D36  3881               	swapf	3969,w,c	;volatile
 12564  002D38  0B0F               	andlw	15
 12565  002D3A  0A0F               	xorlw	15
 12566  002D3C  B4D8               	btfsc	status,2,c
 12567  002D3E  0012               	return	
 12568                           
 12569                           ;Test.c: 190: else{
 12570                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12571                           
 12572                           ;Test.c: 189: }
 12573                           
 12574                           ;Test.c: 188: break;
 12575  002D40  8689               	bsf	3977,3,c	;volatile
 12576                           
 12577                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12578  002D42  D01B               	goto	l8344
 12579  002D44                     l8340:
 12580                           
 12581                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12582  002D44  0E80               	movlw	128
 12583  002D46  ECEF  F02D         	call	_lcdInst
 12584  002D4A  0EC0               	movlw	192
 12585  002D4C  ECEF  F02D         	call	_lcdInst
 12586                           
 12587                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12588  002D50  0EA4               	movlw	low STR_87
 12589  002D52  0100               	movlb	0	; () banked
 12590  002D54  6F8E               	movwf	printf@f& (0+255),b
 12591  002D56  0EFF               	movlw	high STR_87
 12592  002D58  0100               	movlb	0	; () banked
 12593  002D5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12594  002D5C  A480               	btfss	3968,2,c	;volatile
 12595  002D5E  D004               	goto	u7160
 12596  002D60  0100               	movlb	0	; () banked
 12597  002D62  6BAB               	clrf	??_sensorTest& (0+255),b
 12598  002D64  2BAB               	incf	??_sensorTest& (0+255),f,b
 12599  002D66  D002               	goto	u7168
 12600  002D68                     u7160:
 12601  002D68  0100               	movlb	0	; () banked
 12602  002D6A  6BAB               	clrf	??_sensorTest& (0+255),b
 12603  002D6C                     u7168:
 12604  002D6C  0100               	movlb	0	; () banked
 12605  002D6E  51AB               	movf	??_sensorTest& (0+255),w,b
 12606  002D70  0100               	movlb	0	; () banked
 12607  002D72  6F90               	movwf	(?_printf+2)& (0+255),b
 12608  002D74  6B91               	clrf	(?_printf+3)& (0+255),b
 12609  002D76  ECED  F00D         	call	_printf	;wreg free
 12610  002D7A                     l8344:
 12611  002D7A  B281               	btfsc	3969,1,c	;volatile
 12612  002D7C  D7E3               	goto	l8340
 12613                           
 12614                           ;Test.c: 196: }
 12615                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12616  002D7E  9689               	bcf	3977,3,c	;volatile
 12617  002D80  D7A5               	goto	l8320
 12618  002D82                     __end_of_sensorTest:
 12619                           	opt stack 0
 12620                           tblptru	equ	0xFF8
 12621                           tblptrh	equ	0xFF7
 12622                           tblptrl	equ	0xFF6
 12623                           tablat	equ	0xFF5
 12624                           prodh	equ	0xFF4
 12625                           prodl	equ	0xFF3
 12626                           intcon	equ	0xFF2
 12627                           intcon2	equ	0xFF1
 12628                           intcon3	equ	0xFF0
 12629                           postinc0	equ	0xFEE
 12630                           wreg	equ	0xFE8
 12631                           postdec1	equ	0xFE5
 12632                           fsr1l	equ	0xFE1
 12633                           indf2	equ	0xFDF
 12634                           postinc2	equ	0xFDE
 12635                           postdec2	equ	0xFDD
 12636                           fsr2h	equ	0xFDA
 12637                           fsr2l	equ	0xFD9
 12638                           status	equ	0xFD8
 12639                           
 12640 ;; *************** function _readMAG *****************
 12641 ;; Defined at:
 12642 ;;		line 29 in file "ADCFunctionality.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;		None
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;  res             2    4[BANK0 ] int 
 12647 ;; Return value:  Size  Location     Type
 12648 ;;                  1    wreg      void 
 12649 ;; Registers used:
 12650 ;;		wreg, status,2, status,0, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12659 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;Total ram usage:        4 bytes
 12661 ;; Hardware stack levels used:    1
 12662 ;; Hardware stack levels required when called:    8
 12663 ;; This function calls:
 12664 ;;		_readADC
 12665 ;; This function is called by:
 12666 ;;		_getMAG
 12667 ;;		_sensorTest
 12668 ;; This function uses a non-reentrant model
 12669 ;;
 12670                           
 12671                           	psect	text42
 12672  0054BA                     __ptext42:
 12673                           	opt stack 0
 12674  0054BA                     _readMAG:
 12675                           	opt stack 19
 12676                           
 12677                           ;ADCFunctionality.c: 30: readADC(1);
 12678                           
 12679                           ;incstack = 0
 12680  0054BA  0E01               	movlw	1
 12681  0054BC  ECDA  F02C         	call	_readADC
 12682                           
 12683                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12684  0054C0  50C3               	movf	4035,w,c	;volatile
 12685  0054C2  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12686  0054C6  0100               	movlb	0	; () banked
 12687  0054C8  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12688  0054CA  C082  F083         	movff	??_readMAG,??_readMAG+1
 12689  0054CE  0100               	movlb	0	; () banked
 12690  0054D0  6B82               	clrf	??_readMAG& (0+255),b
 12691  0054D2  0100               	movlb	0	; () banked
 12692  0054D4  1182               	iorwf	??_readMAG& (0+255),w,b
 12693  0054D6  0100               	movlb	0	; () banked
 12694  0054D8  6F84               	movwf	readMAG@res& (0+255),b
 12695  0054DA  0100               	movlb	0	; () banked
 12696  0054DC  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12697  0054DE  0100               	movlb	0	; () banked
 12698  0054E0  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12699                           
 12700                           ; BSR set to: 0
 12701                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12702  0054E2  0100               	movlb	0	; () banked
 12703  0054E4  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12704  0054E6  D008               	goto	u5131
 12705  0054E8  0100               	movlb	0	; () banked
 12706  0054EA  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12707  0054EC  E107               	bnz	u5130
 12708  0054EE  0E96               	movlw	150
 12709  0054F0  0100               	movlb	0	; () banked
 12710  0054F2  5D84               	subwf	readMAG@res& (0+255),w,b
 12711  0054F4  B0D8               	btfsc	status,0,c
 12712  0054F6  D002               	goto	u5130
 12713  0054F8                     u5131:
 12714  0054F8  0E01               	movlw	1
 12715  0054FA  D001               	goto	u5140
 12716  0054FC                     u5130:
 12717  0054FC  0E00               	movlw	0
 12718  0054FE                     u5140:
 12719  0054FE  0100               	movlb	0	; () banked
 12720  005500  6FE2               	movwf	_MAG_signal& (0+255),b
 12721  005502  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12722                           
 12723                           ; BSR set to: 0
 12724  005504  0012               	return		;funcret
 12725  005506                     __end_of_readMAG:
 12726                           	opt stack 0
 12727                           tblptru	equ	0xFF8
 12728                           tblptrh	equ	0xFF7
 12729                           tblptrl	equ	0xFF6
 12730                           tablat	equ	0xFF5
 12731                           prodh	equ	0xFF4
 12732                           prodl	equ	0xFF3
 12733                           intcon	equ	0xFF2
 12734                           intcon2	equ	0xFF1
 12735                           intcon3	equ	0xFF0
 12736                           postinc0	equ	0xFEE
 12737                           wreg	equ	0xFE8
 12738                           postdec1	equ	0xFE5
 12739                           fsr1l	equ	0xFE1
 12740                           indf2	equ	0xFDF
 12741                           postinc2	equ	0xFDE
 12742                           postdec2	equ	0xFDD
 12743                           fsr2h	equ	0xFDA
 12744                           fsr2l	equ	0xFD9
 12745                           status	equ	0xFD8
 12746                           
 12747 ;; *************** function _arm *****************
 12748 ;; Defined at:
 12749 ;;		line 639 in file "Test.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;		None
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;  on              2   44[BANK0 ] int 
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      void 
 12756 ;; Registers used:
 12757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 0/0
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12767 ;;Total ram usage:        3 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; Hardware stack levels required when called:   10
 12770 ;; This function calls:
 12771 ;;		_lcdInst
 12772 ;;		_printf
 12773 ;;		_stopSignals
 12774 ;; This function is called by:
 12775 ;;		_Test
 12776 ;; This function uses a non-reentrant model
 12777 ;;
 12778                           
 12779                           	psect	text43
 12780  0043CC                     __ptext43:
 12781                           	opt stack 0
 12782  0043CC                     _arm:
 12783                           	opt stack 19
 12784                           
 12785                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;incstack = 0
 12789  0043CC  0E01               	movlw	1
 12790  0043CE  ECEF  F02D         	call	_lcdInst
 12791  0043D2  0E68               	movlw	104
 12792  0043D4  0100               	movlb	0	; () banked
 12793  0043D6  6FAB               	movwf	??_arm& (0+255),b
 12794  0043D8  0EE4               	movlw	228
 12795  0043DA                     u10497:
 12796  0043DA  2EE8               	decfsz	wreg,f,c
 12797  0043DC  D7FE               	bra	u10497
 12798  0043DE  2FAB               	decfsz	??_arm& (0+255),f,b
 12799  0043E0  D7FC               	bra	u10497
 12800  0043E2  F000               	nop	
 12801  0043E4  0E80               	movlw	128
 12802  0043E6  ECEF  F02D         	call	_lcdInst
 12803                           
 12804                           ;Test.c: 641: printf("D WILL RETURN   ");
 12805  0043EA  0EDB               	movlw	low STR_119
 12806  0043EC  0100               	movlb	0	; () banked
 12807  0043EE  6F8E               	movwf	printf@f& (0+255),b
 12808  0043F0  0EFB               	movlw	high STR_119
 12809  0043F2  0100               	movlb	0	; () banked
 12810  0043F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12811  0043F6  ECED  F00D         	call	_printf	;wreg free
 12812                           
 12813                           ;Test.c: 642: lcdInst(0b11000000);;
 12814  0043FA  0EC0               	movlw	192
 12815  0043FC  ECEF  F02D         	call	_lcdInst
 12816                           
 12817                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12818  004400  0E96               	movlw	low STR_128
 12819  004402  0100               	movlb	0	; () banked
 12820  004404  6F8E               	movwf	printf@f& (0+255),b
 12821  004406  0EFC               	movlw	high STR_128
 12822  004408  0100               	movlb	0	; () banked
 12823  00440A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12824  00440C  ECED  F00D         	call	_printf	;wreg free
 12825                           
 12826                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12827  004410  8EF2               	bsf	intcon,7,c	;volatile
 12828                           
 12829                           ;Test.c: 646: machine_state = Sorting_state;
 12830  004412  0E01               	movlw	1
 12831  004414  0100               	movlb	0	; () banked
 12832  004416  6FFC               	movwf	_machine_state& (0+255),b
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;Test.c: 647: f_arm_position = 2;
 12836  004418  0E00               	movlw	0
 12837  00441A  0100               	movlb	0	; () banked
 12838  00441C  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12839  00441E  0E02               	movlw	2
 12840  004420  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12841                           
 12842                           ; BSR set to: 0
 12843                           ;Test.c: 648: timer2_counter = 0;
 12844  004422  0E00               	movlw	0
 12845  004424  6E74               	movwf	_timer2_counter+1,c	;volatile
 12846  004426  0E00               	movlw	0
 12847  004428  6E73               	movwf	_timer2_counter,c	;volatile
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12851  00442A  868A               	bsf	3978,3,c	;volatile
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;Test.c: 650: TMR2ON = 1;
 12855  00442C  84CA               	bsf	4042,2,c	;volatile
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;Test.c: 651: was_low_2 = 0;
 12859  00442E  0E00               	movlw	0
 12860  004430  6E7A               	movwf	_was_low_2+1,c	;volatile
 12861  004432  0E00               	movlw	0
 12862  004434  6E79               	movwf	_was_low_2,c	;volatile
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;Test.c: 653: int on = 0;
 12866  004436  0E00               	movlw	0
 12867  004438  0100               	movlb	0	; () banked
 12868  00443A  6FAD               	movwf	(arm@on+1)& (0+255),b
 12869  00443C  0E00               	movlw	0
 12870  00443E  6FAC               	movwf	arm@on& (0+255),b
 12871  004440                     l8798:
 12872                           
 12873                           ;Test.c: 655: if(on){
 12874  004440  0100               	movlb	0	; () banked
 12875  004442  51AC               	movf	arm@on& (0+255),w,b
 12876  004444  0100               	movlb	0	; () banked
 12877  004446  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12878  004448  B4D8               	btfsc	status,2,c
 12879  00444A  D01C               	goto	l8810
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;Test.c: 656: on = !on;
 12883  00444C  0100               	movlb	0	; () banked
 12884  00444E  51AC               	movf	arm@on& (0+255),w,b
 12885  004450  0100               	movlb	0	; () banked
 12886  004452  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12887  004454  A4D8               	btfss	status,2,c
 12888  004456  D002               	goto	u7750
 12889  004458  0E01               	movlw	1
 12890  00445A  D001               	goto	u7760
 12891  00445C                     u7750:
 12892  00445C  0E00               	movlw	0
 12893  00445E                     u7760:
 12894  00445E  0100               	movlb	0	; () banked
 12895  004460  6FAC               	movwf	arm@on& (0+255),b
 12896  004462  6BAD               	clrf	(arm@on+1)& (0+255),b
 12897                           
 12898                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12899  004464  D005               	goto	l8804
 12900  004466                     l8802:
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;Test.c: 658: f_arm_position = 0;
 12904  004466  0E00               	movlw	0
 12905  004468  0100               	movlb	0	; () banked
 12906  00446A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12907  00446C  0E00               	movlw	0
 12908  00446E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12909  004470                     l8804:
 12910                           
 12911                           ; BSR set to: 0
 12912  004470  A281               	btfss	3969,1,c	;volatile
 12913  004472  D7F9               	goto	l8802
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;Test.c: 659: }
 12917                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12918                           
 12919                           ; BSR set to: 0
 12920  004474  3881               	swapf	3969,w,c	;volatile
 12921  004476  0B0F               	andlw	15
 12922  004478  0A0F               	xorlw	15
 12923  00447A  B4D8               	btfsc	status,2,c
 12924  00447C  D01F               	goto	l1463
 12925  00447E                     l1464:
 12926  00447E  A281               	btfss	3969,1,c	;volatile
 12927  004480  D7DF               	goto	l8798
 12928  004482  D7FD               	goto	l1464
 12929  004484                     l8810:
 12930                           
 12931                           ;Test.c: 665: else{
 12932                           ;Test.c: 666: on = !on;
 12933  004484  0100               	movlb	0	; () banked
 12934  004486  51AC               	movf	arm@on& (0+255),w,b
 12935  004488  0100               	movlb	0	; () banked
 12936  00448A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12937  00448C  A4D8               	btfss	status,2,c
 12938  00448E  D002               	goto	u7800
 12939  004490  0E01               	movlw	1
 12940  004492  D001               	goto	u7810
 12941  004494                     u7800:
 12942  004494  0E00               	movlw	0
 12943  004496                     u7810:
 12944  004496  0100               	movlb	0	; () banked
 12945  004498  6FAC               	movwf	arm@on& (0+255),b
 12946  00449A  6BAD               	clrf	(arm@on+1)& (0+255),b
 12947                           
 12948                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12949  00449C  D005               	goto	l8814
 12950  00449E                     l8812:
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;Test.c: 668: f_arm_position = 1;
 12954  00449E  0E00               	movlw	0
 12955  0044A0  0100               	movlb	0	; () banked
 12956  0044A2  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12957  0044A4  0E01               	movlw	1
 12958  0044A6  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12959  0044A8                     l8814:
 12960                           
 12961                           ; BSR set to: 0
 12962  0044A8  A281               	btfss	3969,1,c	;volatile
 12963  0044AA  D7F9               	goto	l8812
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;Test.c: 669: }
 12967                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12968                           
 12969                           ; BSR set to: 0
 12970  0044AC  3881               	swapf	3969,w,c	;volatile
 12971  0044AE  0B0F               	andlw	15
 12972  0044B0  0A0F               	xorlw	15
 12973  0044B2  B4D8               	btfsc	status,2,c
 12974  0044B4  D003               	goto	l1463
 12975  0044B6                     l1472:
 12976  0044B6  A281               	btfss	3969,1,c	;volatile
 12977  0044B8  D7C3               	goto	l8798
 12978  0044BA  D7FD               	goto	l1472
 12979  0044BC                     l1463:
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;Test.c: 674: }
 12983                           ;Test.c: 675: }
 12984                           ;Test.c: 677: (INTCONbits.GIE = 0);
 12985  0044BC  9EF2               	bcf	intcon,7,c	;volatile
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;Test.c: 678: stopSignals();
 12989  0044BE  EC96  F02D         	call	_stopSignals	;wreg free
 12990                           
 12991                           ;Test.c: 679: machine_state = Testing_state;
 12992  0044C2  0E03               	movlw	3
 12993  0044C4  0100               	movlb	0	; () banked
 12994  0044C6  6FFC               	movwf	_machine_state& (0+255),b
 12995                           
 12996                           ; BSR set to: 0
 12997  0044C8  0012               	return		;funcret
 12998  0044CA                     __end_of_arm:
 12999                           	opt stack 0
 13000                           tblptru	equ	0xFF8
 13001                           tblptrh	equ	0xFF7
 13002                           tblptrl	equ	0xFF6
 13003                           tablat	equ	0xFF5
 13004                           prodh	equ	0xFF4
 13005                           prodl	equ	0xFF3
 13006                           intcon	equ	0xFF2
 13007                           intcon2	equ	0xFF1
 13008                           intcon3	equ	0xFF0
 13009                           postinc0	equ	0xFEE
 13010                           wreg	equ	0xFE8
 13011                           postdec1	equ	0xFE5
 13012                           fsr1l	equ	0xFE1
 13013                           indf2	equ	0xFDF
 13014                           postinc2	equ	0xFDE
 13015                           postdec2	equ	0xFDD
 13016                           fsr2h	equ	0xFDA
 13017                           fsr2l	equ	0xFD9
 13018                           status	equ	0xFD8
 13019                           
 13020 ;; *************** function _algorithmTest *****************
 13021 ;; Defined at:
 13022 ;;		line 79 in file "Test.c"
 13023 ;; Parameters:    Size  Location     Type
 13024 ;;		None
 13025 ;; Auto vars:     Size  Location     Type
 13026 ;;		None
 13027 ;; Return value:  Size  Location     Type
 13028 ;;                  1    wreg      void 
 13029 ;; Registers used:
 13030 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13031 ;; Tracked objects:
 13032 ;;		On entry : 0/0
 13033 ;;		On exit  : 0/0
 13034 ;;		Unchanged: 0/0
 13035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13038 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13040 ;;Total ram usage:        2 bytes
 13041 ;; Hardware stack levels used:    1
 13042 ;; Hardware stack levels required when called:   10
 13043 ;; This function calls:
 13044 ;;		_lcdInst
 13045 ;;		_printf
 13046 ;; This function is called by:
 13047 ;;		_Test
 13048 ;; This function uses a non-reentrant model
 13049 ;;
 13050                           
 13051                           	psect	text44
 13052  004694                     __ptext44:
 13053                           	opt stack 0
 13054  004694                     _algorithmTest:
 13055                           	opt stack 19
 13056                           
 13057                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13058                           
 13059                           ; BSR set to: 0
 13060                           ;incstack = 0
 13061  004694  0E01               	movlw	1
 13062  004696  ECEF  F02D         	call	_lcdInst
 13063  00469A  0E68               	movlw	104
 13064  00469C  0100               	movlb	0	; () banked
 13065  00469E  6FAB               	movwf	??_algorithmTest& (0+255),b
 13066  0046A0  0EE4               	movlw	228
 13067  0046A2                     u10507:
 13068  0046A2  2EE8               	decfsz	wreg,f,c
 13069  0046A4  D7FE               	bra	u10507
 13070  0046A6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13071  0046A8  D7FC               	bra	u10507
 13072  0046AA  F000               	nop	
 13073  0046AC  0E80               	movlw	128
 13074  0046AE  ECEF  F02D         	call	_lcdInst
 13075                           
 13076                           ;Test.c: 82: printf("ALGORITHM TEST");
 13077  0046B2  0EF4               	movlw	low STR_71
 13078  0046B4  0100               	movlb	0	; () banked
 13079  0046B6  6F8E               	movwf	printf@f& (0+255),b
 13080  0046B8  0EFE               	movlw	high STR_71
 13081  0046BA  0100               	movlb	0	; () banked
 13082  0046BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13083  0046BE  ECED  F00D         	call	_printf	;wreg free
 13084                           
 13085                           ;Test.c: 83: lcdInst(0b11000000);;
 13086  0046C2  0EC0               	movlw	192
 13087  0046C4  ECEF  F02D         	call	_lcdInst
 13088                           
 13089                           ;Test.c: 84: printf("PUSH TO START");
 13090  0046C8  0E2D               	movlw	low STR_72
 13091  0046CA  0100               	movlb	0	; () banked
 13092  0046CC  6F8E               	movwf	printf@f& (0+255),b
 13093  0046CE  0EFF               	movlw	high STR_72
 13094  0046D0  0100               	movlb	0	; () banked
 13095  0046D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13096  0046D4  ECED  F00D         	call	_printf	;wreg free
 13097                           
 13098                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13099  0046D8  0E05               	movlw	5
 13100  0046DA  0100               	movlb	0	; () banked
 13101  0046DC  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13102  0046DE  0E0F               	movlw	15
 13103  0046E0  0100               	movlb	0	; () banked
 13104  0046E2  6FAB               	movwf	??_algorithmTest& (0+255),b
 13105  0046E4  0EF1               	movlw	241
 13106  0046E6                     u10517:
 13107  0046E6  2EE8               	decfsz	wreg,f,c
 13108  0046E8  D7FE               	bra	u10517
 13109  0046EA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13110  0046EC  D7FC               	bra	u10517
 13111  0046EE  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13112  0046F0  D7FA               	bra	u10517
 13113  0046F2                     l1259:
 13114  0046F2  A281               	btfss	3969,1,c	;volatile
 13115  0046F4  D7FE               	goto	l1259
 13116  0046F6                     l1262:
 13117  0046F6  B281               	btfsc	3969,1,c	;volatile
 13118  0046F8  D7FE               	goto	l1262
 13119                           
 13120                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13121  0046FA  0E01               	movlw	1
 13122  0046FC  ECEF  F02D         	call	_lcdInst
 13123  004700  0E68               	movlw	104
 13124  004702  0100               	movlb	0	; () banked
 13125  004704  6FAB               	movwf	??_algorithmTest& (0+255),b
 13126  004706  0EE4               	movlw	228
 13127  004708                     u10527:
 13128  004708  2EE8               	decfsz	wreg,f,c
 13129  00470A  D7FE               	bra	u10527
 13130  00470C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13131  00470E  D7FC               	bra	u10527
 13132  004710  F000               	nop	
 13133  004712  0E80               	movlw	128
 13134  004714  ECEF  F02D         	call	_lcdInst
 13135                           
 13136                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13137  004718  0E41               	movlw	low STR_73
 13138  00471A  0100               	movlb	0	; () banked
 13139  00471C  6F8E               	movwf	printf@f& (0+255),b
 13140  00471E  0EFC               	movlw	high STR_73
 13141  004720  0100               	movlb	0	; () banked
 13142  004722  6F8F               	movwf	(printf@f+1)& (0+255),b
 13143  004724  ECED  F00D         	call	_printf	;wreg free
 13144                           
 13145                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13146  004728  0E11               	movlw	low STR_74
 13147  00472A  0100               	movlb	0	; () banked
 13148  00472C  6F8E               	movwf	printf@f& (0+255),b
 13149  00472E  0EFF               	movlw	high STR_74
 13150  004730  0100               	movlb	0	; () banked
 13151  004732  6F8F               	movwf	(printf@f+1)& (0+255),b
 13152  004734  ECED  F00D         	call	_printf	;wreg free
 13153                           
 13154                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13155  004738  0E64               	movlw	low STR_75
 13156  00473A  0100               	movlb	0	; () banked
 13157  00473C  6F8E               	movwf	printf@f& (0+255),b
 13158  00473E  0EFF               	movlw	high STR_75
 13159  004740  0100               	movlb	0	; () banked
 13160  004742  6F8F               	movwf	(printf@f+1)& (0+255),b
 13161  004744  ECED  F00D         	call	_printf	;wreg free
 13162                           
 13163                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13164  004748  0ED6               	movlw	low STR_76
 13165  00474A  0100               	movlb	0	; () banked
 13166  00474C  6F8E               	movwf	printf@f& (0+255),b
 13167  00474E  0EFE               	movlw	high STR_76
 13168  004750  0100               	movlb	0	; () banked
 13169  004752  6F8F               	movwf	(printf@f+1)& (0+255),b
 13170  004754  ECED  F00D         	call	_printf	;wreg free
 13171                           
 13172                           ;Test.c: 120: printf("ALG5: NO CANS");
 13173  004758  0E1F               	movlw	low STR_77
 13174  00475A  0100               	movlb	0	; () banked
 13175  00475C  6F8E               	movwf	printf@f& (0+255),b
 13176  00475E  0EFF               	movlw	high STR_77
 13177  004760  0100               	movlb	0	; () banked
 13178  004762  6F8F               	movwf	(printf@f+1)& (0+255),b
 13179  004764  ECED  F00D         	call	_printf	;wreg free
 13180  004768  0012               	return		;funcret
 13181  00476A                     __end_of_algorithmTest:
 13182                           	opt stack 0
 13183                           tblptru	equ	0xFF8
 13184                           tblptrh	equ	0xFF7
 13185                           tblptrl	equ	0xFF6
 13186                           tablat	equ	0xFF5
 13187                           prodh	equ	0xFF4
 13188                           prodl	equ	0xFF3
 13189                           intcon	equ	0xFF2
 13190                           intcon2	equ	0xFF1
 13191                           intcon3	equ	0xFF0
 13192                           postinc0	equ	0xFEE
 13193                           wreg	equ	0xFE8
 13194                           postdec1	equ	0xFE5
 13195                           fsr1l	equ	0xFE1
 13196                           indf2	equ	0xFDF
 13197                           postinc2	equ	0xFDE
 13198                           postdec2	equ	0xFDD
 13199                           fsr2h	equ	0xFDA
 13200                           fsr2l	equ	0xFD9
 13201                           status	equ	0xFD8
 13202                           
 13203 ;; *************** function _actuatorTest *****************
 13204 ;; Defined at:
 13205 ;;		line 202 in file "Test.c"
 13206 ;; Parameters:    Size  Location     Type
 13207 ;;		None
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;  i               1   45[BANK0 ] unsigned char 
 13210 ;;  i               1   67[BANK0 ] unsigned char 
 13211 ;;  i               1   66[BANK0 ] unsigned char 
 13212 ;;  i               1   65[BANK0 ] unsigned char 
 13213 ;;  i               1   64[BANK0 ] unsigned char 
 13214 ;;  i               1   63[BANK0 ] unsigned char 
 13215 ;;  i               1   62[BANK0 ] unsigned char 
 13216 ;;  i               1   61[BANK0 ] unsigned char 
 13217 ;;  i               1   60[BANK0 ] unsigned char 
 13218 ;;  i               1   59[BANK0 ] unsigned char 
 13219 ;;  i               1   58[BANK0 ] unsigned char 
 13220 ;;  i               1   57[BANK0 ] unsigned char 
 13221 ;;  i               1   56[BANK0 ] unsigned char 
 13222 ;;  i               1   55[BANK0 ] unsigned char 
 13223 ;;  i               1   54[BANK0 ] unsigned char 
 13224 ;;  i               1   53[BANK0 ] unsigned char 
 13225 ;;  i               1   52[BANK0 ] unsigned char 
 13226 ;;  i               1   51[BANK0 ] unsigned char 
 13227 ;;  i               1   50[BANK0 ] unsigned char 
 13228 ;;  i               1   49[BANK0 ] unsigned char 
 13229 ;;  i               1   48[BANK0 ] unsigned char 
 13230 ;;  i               1   47[BANK0 ] unsigned char 
 13231 ;;  i               1   46[BANK0 ] unsigned char 
 13232 ;;  i               2   68[BANK0 ] int 
 13233 ;; Return value:  Size  Location     Type
 13234 ;;                  1    wreg      void 
 13235 ;; Registers used:
 13236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13237 ;; Tracked objects:
 13238 ;;		On entry : 0/0
 13239 ;;		On exit  : 0/0
 13240 ;;		Unchanged: 0/0
 13241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13245 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13246 ;;Total ram usage:       27 bytes
 13247 ;; Hardware stack levels used:    1
 13248 ;; Hardware stack levels required when called:   10
 13249 ;; This function calls:
 13250 ;;		_lcdInst
 13251 ;;		_printf
 13252 ;;		_updateServoPosition
 13253 ;; This function is called by:
 13254 ;;		_Test
 13255 ;; This function uses a non-reentrant model
 13256 ;;
 13257                           
 13258                           	psect	text45
 13259  0008DA                     __ptext45:
 13260                           	opt stack 0
 13261  0008DA                     _actuatorTest:
 13262                           	opt stack 19
 13263                           
 13264                           ;Test.c: 204: int i = 0;
 13265                           
 13266                           ;incstack = 0
 13267  0008DA  0E00               	movlw	0
 13268  0008DC  0100               	movlb	0	; () banked
 13269  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13270  0008E0  0E00               	movlw	0
 13271  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13275  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13279  0008E6  0E01               	movlw	1
 13280  0008E8  ECEF  F02D         	call	_lcdInst
 13281  0008EC  0E68               	movlw	104
 13282  0008EE  0100               	movlb	0	; () banked
 13283  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13284  0008F2  0EE4               	movlw	228
 13285  0008F4                     u10537:
 13286  0008F4  2EE8               	decfsz	wreg,f,c
 13287  0008F6  D7FE               	bra	u10537
 13288  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13289  0008FA  D7FC               	bra	u10537
 13290  0008FC  F000               	nop	
 13291  0008FE  0E80               	movlw	128
 13292  000900  ECEF  F02D         	call	_lcdInst
 13293                           
 13294                           ;Test.c: 208: printf("ACTUATORS");
 13295  000904  0E90               	movlw	low STR_89
 13296  000906  0100               	movlb	0	; () banked
 13297  000908  6F8E               	movwf	printf@f& (0+255),b
 13298  00090A  0EFF               	movlw	high STR_89
 13299  00090C  0100               	movlb	0	; () banked
 13300  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13301  000910  ECED  F00D         	call	_printf	;wreg free
 13302                           
 13303                           ;Test.c: 209: lcdInst(0b11000000);;
 13304  000914  0EC0               	movlw	192
 13305  000916  ECEF  F02D         	call	_lcdInst
 13306                           
 13307                           ;Test.c: 210: printf("PUSH TO START");
 13308  00091A  0E2D               	movlw	low STR_72
 13309  00091C  0100               	movlb	0	; () banked
 13310  00091E  6F8E               	movwf	printf@f& (0+255),b
 13311  000920  0EFF               	movlw	high STR_72
 13312  000922  0100               	movlb	0	; () banked
 13313  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13314  000926  ECED  F00D         	call	_printf	;wreg free
 13315                           
 13316                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13317  00092A  0E05               	movlw	5
 13318  00092C  0100               	movlb	0	; () banked
 13319  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13320  000930  0E0F               	movlw	15
 13321  000932  0100               	movlb	0	; () banked
 13322  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13323  000936  0EF1               	movlw	241
 13324  000938                     u10547:
 13325  000938  2EE8               	decfsz	wreg,f,c
 13326  00093A  D7FE               	bra	u10547
 13327  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13328  00093E  D7FC               	bra	u10547
 13329  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13330  000942  D7FA               	bra	u10547
 13331  000944                     l1294:
 13332  000944  A281               	btfss	3969,1,c	;volatile
 13333  000946  D7FE               	goto	l1294
 13334  000948                     l1297:
 13335  000948  B281               	btfsc	3969,1,c	;volatile
 13336  00094A  D7FE               	goto	l1297
 13337                           
 13338                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13339  00094C  0E01               	movlw	1
 13340  00094E  ECEF  F02D         	call	_lcdInst
 13341  000952  0E68               	movlw	104
 13342  000954  0100               	movlb	0	; () banked
 13343  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13344  000958  0EE4               	movlw	228
 13345  00095A                     u10557:
 13346  00095A  2EE8               	decfsz	wreg,f,c
 13347  00095C  D7FE               	bra	u10557
 13348  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13349  000960  D7FC               	bra	u10557
 13350  000962  F000               	nop	
 13351  000964  0E80               	movlw	128
 13352  000966  ECEF  F02D         	call	_lcdInst
 13353                           
 13354                           ;Test.c: 219: printf("TST: DC MOTORS");
 13355  00096A  0EE5               	movlw	low STR_91
 13356  00096C  0100               	movlb	0	; () banked
 13357  00096E  6F8E               	movwf	printf@f& (0+255),b
 13358  000970  0EFE               	movlw	high STR_91
 13359  000972  0100               	movlb	0	; () banked
 13360  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13361  000976  ECED  F00D         	call	_printf	;wreg free
 13362                           
 13363                           ;Test.c: 220: lcdInst(0b11000000);;
 13364  00097A  0EC0               	movlw	192
 13365  00097C  ECEF  F02D         	call	_lcdInst
 13366                           
 13367                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13368  000980  0E03               	movlw	low STR_92
 13369  000982  0100               	movlb	0	; () banked
 13370  000984  6F8E               	movwf	printf@f& (0+255),b
 13371  000986  0EFF               	movlw	high STR_92
 13372  000988  0100               	movlb	0	; () banked
 13373  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13374  00098C  ECED  F00D         	call	_printf	;wreg free
 13375                           
 13376                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13377  000990  848A               	bsf	3978,2,c	;volatile
 13378                           
 13379                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13380  000992  0E00               	movlw	0
 13381  000994  0100               	movlb	0	; () banked
 13382  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13383  000998  0E00               	movlw	0
 13384  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13385                           
 13386                           ; BSR set to: 0
 13387  00099C  0100               	movlb	0	; () banked
 13388  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13389  0009A0  D008               	goto	l8384
 13390  0009A2  0100               	movlb	0	; () banked
 13391  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13392  0009A6  E123               	bnz	l1301
 13393  0009A8  0E05               	movlw	5
 13394  0009AA  0100               	movlb	0	; () banked
 13395  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13396  0009AE  B0D8               	btfsc	status,0,c
 13397  0009B0  D01E               	goto	l1301
 13398  0009B2                     l8384:
 13399                           
 13400                           ; BSR set to: 0
 13401  0009B2  0E00               	movlw	0
 13402  0009B4  0100               	movlb	0	; () banked
 13403  0009B6  6FAD               	movwf	actuatorTest@i_1736& (0+255),b
 13404  0009B8                     l8386:
 13405                           
 13406                           ; BSR set to: 0
 13407  0009B8  0E63               	movlw	99
 13408  0009BA  0100               	movlb	0	; () banked
 13409  0009BC  65AD               	cpfsgt	actuatorTest@i_1736& (0+255),b
 13410  0009BE  D001               	goto	l8390
 13411  0009C0  D00C               	goto	l8394
 13412  0009C2                     l8390:
 13413                           
 13414                           ; BSR set to: 0
 13415  0009C2  0E68               	movlw	104
 13416  0009C4  0100               	movlb	0	; () banked
 13417  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13418  0009C8  0EE4               	movlw	228
 13419  0009CA                     u10567:
 13420  0009CA  2EE8               	decfsz	wreg,f,c
 13421  0009CC  D7FE               	bra	u10567
 13422  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13423  0009D0  D7FC               	bra	u10567
 13424  0009D2  F000               	nop	
 13425  0009D4  0100               	movlb	0	; () banked
 13426  0009D6  2BAD               	incf	actuatorTest@i_1736& (0+255),f,b
 13427  0009D8  D7EF               	goto	l8386
 13428  0009DA                     l8394:
 13429                           
 13430                           ; BSR set to: 0
 13431  0009DA  0100               	movlb	0	; () banked
 13432  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13433  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13434                           
 13435                           ; BSR set to: 0
 13436  0009E0  0100               	movlb	0	; () banked
 13437  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13438  0009E4  D7E6               	goto	l8384
 13439  0009E6  0100               	movlb	0	; () banked
 13440  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13441  0009EA  E101               	bnz	u7230
 13442  0009EC  D7DD               	goto	L13
 13443  0009EE                     u7230:
 13444  0009EE                     l1301:
 13445                           
 13446                           ; BSR set to: 0
 13447                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13448  0009EE  948A               	bcf	3978,2,c	;volatile
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13452  0009F0  0E01               	movlw	1
 13453  0009F2  ECEF  F02D         	call	_lcdInst
 13454  0009F6  0E68               	movlw	104
 13455  0009F8  0100               	movlb	0	; () banked
 13456  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13457  0009FC  0EE4               	movlw	228
 13458  0009FE                     u10577:
 13459  0009FE  2EE8               	decfsz	wreg,f,c
 13460  000A00  D7FE               	bra	u10577
 13461  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13462  000A04  D7FC               	bra	u10577
 13463  000A06  F000               	nop	
 13464  000A08  0E80               	movlw	128
 13465  000A0A  ECEF  F02D         	call	_lcdInst
 13466                           
 13467                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13468  000A0E  0E52               	movlw	low STR_93
 13469  000A10  0100               	movlb	0	; () banked
 13470  000A12  6F8E               	movwf	printf@f& (0+255),b
 13471  000A14  0EFC               	movlw	high STR_93
 13472  000A16  0100               	movlb	0	; () banked
 13473  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13474  000A1A  ECED  F00D         	call	_printf	;wreg free
 13475                           
 13476                           ;Test.c: 232: lcdInst(0b11000000);;
 13477  000A1E  0EC0               	movlw	192
 13478  000A20  ECEF  F02D         	call	_lcdInst
 13479                           
 13480                           ;Test.c: 233: printf("PIN RA3...");
 13481  000A24  0E70               	movlw	low STR_94
 13482  000A26  0100               	movlb	0	; () banked
 13483  000A28  6F8E               	movwf	printf@f& (0+255),b
 13484  000A2A  0EFF               	movlw	high STR_94
 13485  000A2C  0100               	movlb	0	; () banked
 13486  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13487  000A30  ECED  F00D         	call	_printf	;wreg free
 13488                           
 13489                           ;Test.c: 234: for(i=0;i<5;i++){
 13490  000A34  0E00               	movlw	0
 13491  000A36  0100               	movlb	0	; () banked
 13492  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13493  000A3A  0E00               	movlw	0
 13494  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13495                           
 13496                           ; BSR set to: 0
 13497  000A3E  0100               	movlb	0	; () banked
 13498  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13499  000A42  D008               	goto	l1304
 13500  000A44  0100               	movlb	0	; () banked
 13501  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13502  000A48  E12C               	bnz	l1305
 13503  000A4A  0E05               	movlw	5
 13504  000A4C  0100               	movlb	0	; () banked
 13505  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13506  000A50  B0D8               	btfsc	status,0,c
 13507  000A52  D027               	goto	l1305
 13508  000A54                     l1304:
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13512  000A54  8689               	bsf	3977,3,c	;volatile
 13513                           
 13514                           ; BSR set to: 0
 13515                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13516  000A56  0E0D               	movlw	13
 13517  000A58  0100               	movlb	0	; () banked
 13518  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13519  000A5C  0E2D               	movlw	45
 13520  000A5E  0100               	movlb	0	; () banked
 13521  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13522  000A62  0ED7               	movlw	215
 13523  000A64                     u10587:
 13524  000A64  2EE8               	decfsz	wreg,f,c
 13525  000A66  D7FE               	bra	u10587
 13526  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13527  000A6A  D7FC               	bra	u10587
 13528  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13529  000A6E  D7FA               	bra	u10587
 13530  000A70  D000               	nop2	
 13531                           
 13532                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13533  000A72  9689               	bcf	3977,3,c	;volatile
 13534                           
 13535                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13536  000A74  0E1D               	movlw	29
 13537  000A76  0100               	movlb	0	; () banked
 13538  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13539  000A7A  0E69               	movlw	105
 13540  000A7C  0100               	movlb	0	; () banked
 13541  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13542  000A80  0EA5               	movlw	165
 13543  000A82                     u10597:
 13544  000A82  2EE8               	decfsz	wreg,f,c
 13545  000A84  D7FE               	bra	u10597
 13546  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13547  000A88  D7FC               	bra	u10597
 13548  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13549  000A8C  D7FA               	bra	u10597
 13550  000A8E  0100               	movlb	0	; () banked
 13551  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13552  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13553  000A94  0100               	movlb	0	; () banked
 13554  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13555  000A98  D7DD               	goto	l1304
 13556  000A9A  0100               	movlb	0	; () banked
 13557  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13558  000A9E  E101               	bnz	u7250
 13559  000AA0  D7D4               	goto	L14
 13560  000AA2                     u7250:
 13561  000AA2                     l1305:
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;Test.c: 239: }
 13565                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13566  000AA2  9689               	bcf	3977,3,c	;volatile
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13570  000AA4  0E01               	movlw	1
 13571  000AA6  ECEF  F02D         	call	_lcdInst
 13572  000AAA  0E68               	movlw	104
 13573  000AAC  0100               	movlb	0	; () banked
 13574  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13575  000AB0  0EE4               	movlw	228
 13576  000AB2                     u10607:
 13577  000AB2  2EE8               	decfsz	wreg,f,c
 13578  000AB4  D7FE               	bra	u10607
 13579  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13580  000AB8  D7FC               	bra	u10607
 13581  000ABA  F000               	nop	
 13582  000ABC  0E80               	movlw	128
 13583  000ABE  ECEF  F02D         	call	_lcdInst
 13584                           
 13585                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13586  000AC2  0E63               	movlw	low STR_95
 13587  000AC4  0100               	movlb	0	; () banked
 13588  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13589  000AC8  0EFC               	movlw	high STR_95
 13590  000ACA  0100               	movlb	0	; () banked
 13591  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13592  000ACE  ECED  F00D         	call	_printf	;wreg free
 13593                           
 13594                           ;Test.c: 248: lcdInst(0b11000000);;
 13595  000AD2  0EC0               	movlw	192
 13596  000AD4  ECEF  F02D         	call	_lcdInst
 13597                           
 13598                           ;Test.c: 249: printf("PIN RA4...");
 13599  000AD8  0E7B               	movlw	low STR_96
 13600  000ADA  0100               	movlb	0	; () banked
 13601  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13602  000ADE  0EFF               	movlw	high STR_96
 13603  000AE0  0100               	movlb	0	; () banked
 13604  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13605  000AE4  ECED  F00D         	call	_printf	;wreg free
 13606                           
 13607                           ;Test.c: 250: for(i=0;i<5;i++){
 13608  000AE8  0E00               	movlw	0
 13609  000AEA  0100               	movlb	0	; () banked
 13610  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13611  000AEE  0E00               	movlw	0
 13612  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13613                           
 13614                           ; BSR set to: 0
 13615  000AF2  0100               	movlb	0	; () banked
 13616  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13617  000AF6  D008               	goto	l1306
 13618  000AF8  0100               	movlb	0	; () banked
 13619  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13620  000AFC  E12C               	bnz	l1307
 13621  000AFE  0E05               	movlw	5
 13622  000B00  0100               	movlb	0	; () banked
 13623  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13624  000B04  B0D8               	btfsc	status,0,c
 13625  000B06  D027               	goto	l1307
 13626  000B08                     l1306:
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13630  000B08  8889               	bsf	3977,4,c	;volatile
 13631                           
 13632                           ; BSR set to: 0
 13633                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13634  000B0A  0E0D               	movlw	13
 13635  000B0C  0100               	movlb	0	; () banked
 13636  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13637  000B10  0E2D               	movlw	45
 13638  000B12  0100               	movlb	0	; () banked
 13639  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13640  000B16  0ED7               	movlw	215
 13641  000B18                     u10617:
 13642  000B18  2EE8               	decfsz	wreg,f,c
 13643  000B1A  D7FE               	bra	u10617
 13644  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13645  000B1E  D7FC               	bra	u10617
 13646  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13647  000B22  D7FA               	bra	u10617
 13648  000B24  D000               	nop2	
 13649                           
 13650                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13651  000B26  9889               	bcf	3977,4,c	;volatile
 13652                           
 13653                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13654  000B28  0E1D               	movlw	29
 13655  000B2A  0100               	movlb	0	; () banked
 13656  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13657  000B2E  0E69               	movlw	105
 13658  000B30  0100               	movlb	0	; () banked
 13659  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13660  000B34  0EA5               	movlw	165
 13661  000B36                     u10627:
 13662  000B36  2EE8               	decfsz	wreg,f,c
 13663  000B38  D7FE               	bra	u10627
 13664  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13665  000B3C  D7FC               	bra	u10627
 13666  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13667  000B40  D7FA               	bra	u10627
 13668  000B42  0100               	movlb	0	; () banked
 13669  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13670  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13671  000B48  0100               	movlb	0	; () banked
 13672  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13673  000B4C  D7DD               	goto	l1306
 13674  000B4E  0100               	movlb	0	; () banked
 13675  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13676  000B52  E101               	bnz	u7270
 13677  000B54  D7D4               	goto	L15
 13678  000B56                     u7270:
 13679  000B56                     l1307:
 13680                           
 13681                           ; BSR set to: 0
 13682                           ;Test.c: 255: }
 13683                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13684  000B56  9889               	bcf	3977,4,c	;volatile
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13688  000B58  0E01               	movlw	1
 13689  000B5A  ECEF  F02D         	call	_lcdInst
 13690  000B5E  0E68               	movlw	104
 13691  000B60  0100               	movlb	0	; () banked
 13692  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13693  000B64  0EE4               	movlw	228
 13694  000B66                     u10637:
 13695  000B66  2EE8               	decfsz	wreg,f,c
 13696  000B68  D7FE               	bra	u10637
 13697  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13698  000B6C  D7FC               	bra	u10637
 13699  000B6E  F000               	nop	
 13700  000B70  0E80               	movlw	128
 13701  000B72  ECEF  F02D         	call	_lcdInst
 13702                           
 13703                           ;Test.c: 260: machine_state = Sorting_state;
 13704  000B76  0E01               	movlw	1
 13705  000B78  0100               	movlb	0	; () banked
 13706  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13707                           
 13708                           ; BSR set to: 0
 13709                           ;Test.c: 261: was_low_1 = 0;
 13710  000B7C  0E00               	movlw	0
 13711  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13712  000B80  0E00               	movlw	0
 13713  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13714                           
 13715                           ; BSR set to: 0
 13716                           ;Test.c: 262: was_low_1 = 0;
 13717  000B84  0E00               	movlw	0
 13718  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13719  000B88  0E00               	movlw	0
 13720  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13721                           
 13722                           ; BSR set to: 0
 13723                           ;Test.c: 269: printf("TST: PAN SERVO");
 13724  000B8C  0EC7               	movlw	low STR_97
 13725  000B8E  0100               	movlb	0	; () banked
 13726  000B90  6F8E               	movwf	printf@f& (0+255),b
 13727  000B92  0EFE               	movlw	high STR_97
 13728  000B94  0100               	movlb	0	; () banked
 13729  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13730  000B98  ECED  F00D         	call	_printf	;wreg free
 13731                           
 13732                           ;Test.c: 270: lcdInst(0b11000000);;
 13733  000B9C  0EC0               	movlw	192
 13734  000B9E  ECEF  F02D         	call	_lcdInst
 13735                           
 13736                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13737  000BA2  0EB9               	movlw	low STR_98
 13738  000BA4  0100               	movlb	0	; () banked
 13739  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13740  000BA8  0EFB               	movlw	high STR_98
 13741  000BAA  0100               	movlb	0	; () banked
 13742  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13743  000BAE  ECED  F00D         	call	_printf	;wreg free
 13744                           
 13745                           ;Test.c: 272: updateServoPosition(1200, 1);
 13746  000BB2  0E04               	movlw	4
 13747  000BB4  0100               	movlb	0	; () banked
 13748  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13749  000BB8  0EB0               	movlw	176
 13750  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13751  000BBC  0E00               	movlw	0
 13752  000BBE  0100               	movlb	0	; () banked
 13753  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13754  000BC2  0E01               	movlw	1
 13755  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13756  000BC6  ECC8  F026         	call	_updateServoPosition	;wreg free
 13757                           
 13758                           ;Test.c: 273: TMR1ON = 1;
 13759  000BCA  80CD               	bsf	4045,0,c	;volatile
 13760                           
 13761                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13762  000BCC  0E00               	movlw	0
 13763  000BCE  0100               	movlb	0	; () banked
 13764  000BD0  6FAE               	movwf	actuatorTest@i_1743& (0+255),b
 13765  000BD2                     l8470:
 13766                           
 13767                           ; BSR set to: 0
 13768  000BD2  0E63               	movlw	99
 13769  000BD4  0100               	movlb	0	; () banked
 13770  000BD6  65AE               	cpfsgt	actuatorTest@i_1743& (0+255),b
 13771  000BD8  D001               	goto	l8474
 13772  000BDA  D00C               	goto	l8478
 13773  000BDC                     l8474:
 13774                           
 13775                           ; BSR set to: 0
 13776  000BDC  0E68               	movlw	104
 13777  000BDE  0100               	movlb	0	; () banked
 13778  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13779  000BE2  0EE4               	movlw	228
 13780  000BE4                     u10647:
 13781  000BE4  2EE8               	decfsz	wreg,f,c
 13782  000BE6  D7FE               	bra	u10647
 13783  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13784  000BEA  D7FC               	bra	u10647
 13785  000BEC  F000               	nop	
 13786  000BEE  0100               	movlb	0	; () banked
 13787  000BF0  2BAE               	incf	actuatorTest@i_1743& (0+255),f,b
 13788  000BF2  D7EF               	goto	l8470
 13789  000BF4                     l8478:
 13790                           
 13791                           ; BSR set to: 0
 13792  000BF4  0E00               	movlw	0
 13793  000BF6  0100               	movlb	0	; () banked
 13794  000BF8  6FAF               	movwf	actuatorTest@i_1744& (0+255),b
 13795  000BFA                     l8480:
 13796                           
 13797                           ; BSR set to: 0
 13798  000BFA  0E63               	movlw	99
 13799  000BFC  0100               	movlb	0	; () banked
 13800  000BFE  65AF               	cpfsgt	actuatorTest@i_1744& (0+255),b
 13801  000C00  D001               	goto	l8484
 13802  000C02  D00C               	goto	l8488
 13803  000C04                     l8484:
 13804                           
 13805                           ; BSR set to: 0
 13806  000C04  0E68               	movlw	104
 13807  000C06  0100               	movlb	0	; () banked
 13808  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13809  000C0A  0EE4               	movlw	228
 13810  000C0C                     u10657:
 13811  000C0C  2EE8               	decfsz	wreg,f,c
 13812  000C0E  D7FE               	bra	u10657
 13813  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13814  000C12  D7FC               	bra	u10657
 13815  000C14  F000               	nop	
 13816  000C16  0100               	movlb	0	; () banked
 13817  000C18  2BAF               	incf	actuatorTest@i_1744& (0+255),f,b
 13818  000C1A  D7EF               	goto	l8480
 13819  000C1C                     l8488:
 13820                           
 13821                           ; BSR set to: 0
 13822                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13823  000C1C  0E80               	movlw	128
 13824  000C1E  ECEF  F02D         	call	_lcdInst
 13825  000C22  0EC0               	movlw	192
 13826  000C24  ECEF  F02D         	call	_lcdInst
 13827                           
 13828                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13829  000C28  0EA8               	movlw	low STR_99
 13830  000C2A  0100               	movlb	0	; () banked
 13831  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13832  000C2E  0EFB               	movlw	high STR_99
 13833  000C30  0100               	movlb	0	; () banked
 13834  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13835  000C34  ECED  F00D         	call	_printf	;wreg free
 13836                           
 13837                           ;Test.c: 278: updateServoPosition(500, 1);
 13838  000C38  0E01               	movlw	1
 13839  000C3A  0100               	movlb	0	; () banked
 13840  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13841  000C3E  0EF4               	movlw	244
 13842  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13843  000C42  0E00               	movlw	0
 13844  000C44  0100               	movlb	0	; () banked
 13845  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13846  000C48  0E01               	movlw	1
 13847  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13848  000C4C  ECC8  F026         	call	_updateServoPosition	;wreg free
 13849                           
 13850                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13851  000C50  0E00               	movlw	0
 13852  000C52  0100               	movlb	0	; () banked
 13853  000C54  6FB0               	movwf	actuatorTest@i_1746& (0+255),b
 13854  000C56                     l8496:
 13855                           
 13856                           ; BSR set to: 0
 13857  000C56  0E63               	movlw	99
 13858  000C58  0100               	movlb	0	; () banked
 13859  000C5A  65B0               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13860  000C5C  D001               	goto	l8500
 13861  000C5E  D00C               	goto	l8504
 13862  000C60                     l8500:
 13863                           
 13864                           ; BSR set to: 0
 13865  000C60  0E68               	movlw	104
 13866  000C62  0100               	movlb	0	; () banked
 13867  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13868  000C66  0EE4               	movlw	228
 13869  000C68                     u10667:
 13870  000C68  2EE8               	decfsz	wreg,f,c
 13871  000C6A  D7FE               	bra	u10667
 13872  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13873  000C6E  D7FC               	bra	u10667
 13874  000C70  F000               	nop	
 13875  000C72  0100               	movlb	0	; () banked
 13876  000C74  2BB0               	incf	actuatorTest@i_1746& (0+255),f,b
 13877  000C76  D7EF               	goto	l8496
 13878  000C78                     l8504:
 13879                           
 13880                           ; BSR set to: 0
 13881  000C78  0E00               	movlw	0
 13882  000C7A  0100               	movlb	0	; () banked
 13883  000C7C  6FB1               	movwf	actuatorTest@i_1747& (0+255),b
 13884  000C7E                     l8506:
 13885                           
 13886                           ; BSR set to: 0
 13887  000C7E  0E63               	movlw	99
 13888  000C80  0100               	movlb	0	; () banked
 13889  000C82  65B1               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13890  000C84  D001               	goto	l8510
 13891  000C86  D00C               	goto	l8514
 13892  000C88                     l8510:
 13893                           
 13894                           ; BSR set to: 0
 13895  000C88  0E68               	movlw	104
 13896  000C8A  0100               	movlb	0	; () banked
 13897  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13898  000C8E  0EE4               	movlw	228
 13899  000C90                     u10677:
 13900  000C90  2EE8               	decfsz	wreg,f,c
 13901  000C92  D7FE               	bra	u10677
 13902  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13903  000C96  D7FC               	bra	u10677
 13904  000C98  F000               	nop	
 13905  000C9A  0100               	movlb	0	; () banked
 13906  000C9C  2BB1               	incf	actuatorTest@i_1747& (0+255),f,b
 13907  000C9E  D7EF               	goto	l8506
 13908  000CA0                     l8514:
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13912  000CA0  0E80               	movlw	128
 13913  000CA2  ECEF  F02D         	call	_lcdInst
 13914  000CA6  0EC0               	movlw	192
 13915  000CA8  ECEF  F02D         	call	_lcdInst
 13916                           
 13917                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13918  000CAC  0E86               	movlw	low STR_100
 13919  000CAE  0100               	movlb	0	; () banked
 13920  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13921  000CB2  0EFB               	movlw	high STR_100
 13922  000CB4  0100               	movlb	0	; () banked
 13923  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13924  000CB8  ECED  F00D         	call	_printf	;wreg free
 13925                           
 13926                           ;Test.c: 283: updateServoPosition(2400, 1);
 13927  000CBC  0E09               	movlw	9
 13928  000CBE  0100               	movlb	0	; () banked
 13929  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13930  000CC2  0E60               	movlw	96
 13931  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13932  000CC6  0E00               	movlw	0
 13933  000CC8  0100               	movlb	0	; () banked
 13934  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13935  000CCC  0E01               	movlw	1
 13936  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13937  000CD0  ECC8  F026         	call	_updateServoPosition	;wreg free
 13938                           
 13939                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13940  000CD4  0E00               	movlw	0
 13941  000CD6  0100               	movlb	0	; () banked
 13942  000CD8  6FB2               	movwf	actuatorTest@i_1749& (0+255),b
 13943  000CDA                     l8522:
 13944                           
 13945                           ; BSR set to: 0
 13946  000CDA  0E63               	movlw	99
 13947  000CDC  0100               	movlb	0	; () banked
 13948  000CDE  65B2               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13949  000CE0  D001               	goto	l8526
 13950  000CE2  D00C               	goto	l8530
 13951  000CE4                     l8526:
 13952                           
 13953                           ; BSR set to: 0
 13954  000CE4  0E68               	movlw	104
 13955  000CE6  0100               	movlb	0	; () banked
 13956  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13957  000CEA  0EE4               	movlw	228
 13958  000CEC                     u10687:
 13959  000CEC  2EE8               	decfsz	wreg,f,c
 13960  000CEE  D7FE               	bra	u10687
 13961  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13962  000CF2  D7FC               	bra	u10687
 13963  000CF4  F000               	nop	
 13964  000CF6  0100               	movlb	0	; () banked
 13965  000CF8  2BB2               	incf	actuatorTest@i_1749& (0+255),f,b
 13966  000CFA  D7EF               	goto	l8522
 13967  000CFC                     l8530:
 13968                           
 13969                           ; BSR set to: 0
 13970  000CFC  0E00               	movlw	0
 13971  000CFE  0100               	movlb	0	; () banked
 13972  000D00  6FB3               	movwf	actuatorTest@i_1750& (0+255),b
 13973  000D02                     l8532:
 13974                           
 13975                           ; BSR set to: 0
 13976  000D02  0E63               	movlw	99
 13977  000D04  0100               	movlb	0	; () banked
 13978  000D06  65B3               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13979  000D08  D001               	goto	l8536
 13980  000D0A  D00C               	goto	l8540
 13981  000D0C                     l8536:
 13982                           
 13983                           ; BSR set to: 0
 13984  000D0C  0E68               	movlw	104
 13985  000D0E  0100               	movlb	0	; () banked
 13986  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13987  000D12  0EE4               	movlw	228
 13988  000D14                     u10697:
 13989  000D14  2EE8               	decfsz	wreg,f,c
 13990  000D16  D7FE               	bra	u10697
 13991  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13992  000D1A  D7FC               	bra	u10697
 13993  000D1C  F000               	nop	
 13994  000D1E  0100               	movlb	0	; () banked
 13995  000D20  2BB3               	incf	actuatorTest@i_1750& (0+255),f,b
 13996  000D22  D7EF               	goto	l8532
 13997  000D24                     l8540:
 13998                           
 13999                           ; BSR set to: 0
 14000                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14001  000D24  0E80               	movlw	128
 14002  000D26  ECEF  F02D         	call	_lcdInst
 14003  000D2A  0EC0               	movlw	192
 14004  000D2C  ECEF  F02D         	call	_lcdInst
 14005                           
 14006                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 14007  000D30  0E0E               	movlw	low STR_101
 14008  000D32  0100               	movlb	0	; () banked
 14009  000D34  6F8E               	movwf	printf@f& (0+255),b
 14010  000D36  0EFC               	movlw	high STR_101
 14011  000D38  0100               	movlb	0	; () banked
 14012  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14013  000D3C  ECED  F00D         	call	_printf	;wreg free
 14014                           
 14015                           ;Test.c: 288: updateServoPosition(1670, 1);
 14016  000D40  0E06               	movlw	6
 14017  000D42  0100               	movlb	0	; () banked
 14018  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14019  000D46  0E86               	movlw	134
 14020  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14021  000D4A  0E00               	movlw	0
 14022  000D4C  0100               	movlb	0	; () banked
 14023  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14024  000D50  0E01               	movlw	1
 14025  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14026  000D54  ECC8  F026         	call	_updateServoPosition	;wreg free
 14027                           
 14028                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14029  000D58  0E00               	movlw	0
 14030  000D5A  0100               	movlb	0	; () banked
 14031  000D5C  6FB4               	movwf	actuatorTest@i_1752& (0+255),b
 14032  000D5E                     l8548:
 14033                           
 14034                           ; BSR set to: 0
 14035  000D5E  0E63               	movlw	99
 14036  000D60  0100               	movlb	0	; () banked
 14037  000D62  65B4               	cpfsgt	actuatorTest@i_1752& (0+255),b
 14038  000D64  D001               	goto	l8552
 14039  000D66  D00C               	goto	l8556
 14040  000D68                     l8552:
 14041                           
 14042                           ; BSR set to: 0
 14043  000D68  0E68               	movlw	104
 14044  000D6A  0100               	movlb	0	; () banked
 14045  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14046  000D6E  0EE4               	movlw	228
 14047  000D70                     u10707:
 14048  000D70  2EE8               	decfsz	wreg,f,c
 14049  000D72  D7FE               	bra	u10707
 14050  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14051  000D76  D7FC               	bra	u10707
 14052  000D78  F000               	nop	
 14053  000D7A  0100               	movlb	0	; () banked
 14054  000D7C  2BB4               	incf	actuatorTest@i_1752& (0+255),f,b
 14055  000D7E  D7EF               	goto	l8548
 14056  000D80                     l8556:
 14057                           
 14058                           ; BSR set to: 0
 14059  000D80  0E00               	movlw	0
 14060  000D82  0100               	movlb	0	; () banked
 14061  000D84  6FB5               	movwf	actuatorTest@i_1753& (0+255),b
 14062  000D86                     l8558:
 14063                           
 14064                           ; BSR set to: 0
 14065  000D86  0E63               	movlw	99
 14066  000D88  0100               	movlb	0	; () banked
 14067  000D8A  65B5               	cpfsgt	actuatorTest@i_1753& (0+255),b
 14068  000D8C  D001               	goto	l8562
 14069  000D8E  D00C               	goto	l8566
 14070  000D90                     l8562:
 14071                           
 14072                           ; BSR set to: 0
 14073  000D90  0E68               	movlw	104
 14074  000D92  0100               	movlb	0	; () banked
 14075  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14076  000D96  0EE4               	movlw	228
 14077  000D98                     u10717:
 14078  000D98  2EE8               	decfsz	wreg,f,c
 14079  000D9A  D7FE               	bra	u10717
 14080  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14081  000D9E  D7FC               	bra	u10717
 14082  000DA0  F000               	nop	
 14083  000DA2  0100               	movlb	0	; () banked
 14084  000DA4  2BB5               	incf	actuatorTest@i_1753& (0+255),f,b
 14085  000DA6  D7EF               	goto	l8558
 14086  000DA8                     l8566:
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14090  000DA8  0E80               	movlw	128
 14091  000DAA  ECEF  F02D         	call	_lcdInst
 14092  000DAE  0EC0               	movlw	192
 14093  000DB0  ECEF  F02D         	call	_lcdInst
 14094                           
 14095                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14096  000DB4  0E1F               	movlw	low STR_102
 14097  000DB6  0100               	movlb	0	; () banked
 14098  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14099  000DBA  0EFC               	movlw	high STR_102
 14100  000DBC  0100               	movlb	0	; () banked
 14101  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14102  000DC0  ECED  F00D         	call	_printf	;wreg free
 14103                           
 14104                           ;Test.c: 293: updateServoPosition(850, 1);
 14105  000DC4  0E03               	movlw	3
 14106  000DC6  0100               	movlb	0	; () banked
 14107  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14108  000DCA  0E52               	movlw	82
 14109  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14110  000DCE  0E00               	movlw	0
 14111  000DD0  0100               	movlb	0	; () banked
 14112  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14113  000DD4  0E01               	movlw	1
 14114  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14115  000DD8  ECC8  F026         	call	_updateServoPosition	;wreg free
 14116                           
 14117                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14118  000DDC  0E00               	movlw	0
 14119  000DDE  0100               	movlb	0	; () banked
 14120  000DE0  6FB6               	movwf	actuatorTest@i_1755& (0+255),b
 14121  000DE2                     l8574:
 14122                           
 14123                           ; BSR set to: 0
 14124  000DE2  0E63               	movlw	99
 14125  000DE4  0100               	movlb	0	; () banked
 14126  000DE6  65B6               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14127  000DE8  D001               	goto	l8578
 14128  000DEA  D00C               	goto	l8582
 14129  000DEC                     l8578:
 14130                           
 14131                           ; BSR set to: 0
 14132  000DEC  0E68               	movlw	104
 14133  000DEE  0100               	movlb	0	; () banked
 14134  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14135  000DF2  0EE4               	movlw	228
 14136  000DF4                     u10727:
 14137  000DF4  2EE8               	decfsz	wreg,f,c
 14138  000DF6  D7FE               	bra	u10727
 14139  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14140  000DFA  D7FC               	bra	u10727
 14141  000DFC  F000               	nop	
 14142  000DFE  0100               	movlb	0	; () banked
 14143  000E00  2BB6               	incf	actuatorTest@i_1755& (0+255),f,b
 14144  000E02  D7EF               	goto	l8574
 14145  000E04                     l8582:
 14146                           
 14147                           ; BSR set to: 0
 14148  000E04  0E00               	movlw	0
 14149  000E06  0100               	movlb	0	; () banked
 14150  000E08  6FB7               	movwf	actuatorTest@i_1756& (0+255),b
 14151  000E0A                     l8584:
 14152                           
 14153                           ; BSR set to: 0
 14154  000E0A  0E63               	movlw	99
 14155  000E0C  0100               	movlb	0	; () banked
 14156  000E0E  65B7               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14157  000E10  D001               	goto	l8588
 14158  000E12  D00C               	goto	l8592
 14159  000E14                     l8588:
 14160                           
 14161                           ; BSR set to: 0
 14162  000E14  0E68               	movlw	104
 14163  000E16  0100               	movlb	0	; () banked
 14164  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14165  000E1A  0EE4               	movlw	228
 14166  000E1C                     u10737:
 14167  000E1C  2EE8               	decfsz	wreg,f,c
 14168  000E1E  D7FE               	bra	u10737
 14169  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14170  000E22  D7FC               	bra	u10737
 14171  000E24  F000               	nop	
 14172  000E26  0100               	movlb	0	; () banked
 14173  000E28  2BB7               	incf	actuatorTest@i_1756& (0+255),f,b
 14174  000E2A  D7EF               	goto	l8584
 14175  000E2C                     l8592:
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14179  000E2C  0E80               	movlw	128
 14180  000E2E  ECEF  F02D         	call	_lcdInst
 14181  000E32  0EC0               	movlw	192
 14182  000E34  ECEF  F02D         	call	_lcdInst
 14183                           
 14184                           ;Test.c: 297: printf("MID -- 2s       ");
 14185  000E38  0E64               	movlw	low STR_103
 14186  000E3A  0100               	movlb	0	; () banked
 14187  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14188  000E3E  0EFB               	movlw	high STR_103
 14189  000E40  0100               	movlb	0	; () banked
 14190  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14191  000E44  ECED  F00D         	call	_printf	;wreg free
 14192                           
 14193                           ;Test.c: 298: updateServoPosition(1200, 1);
 14194  000E48  0E04               	movlw	4
 14195  000E4A  0100               	movlb	0	; () banked
 14196  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14197  000E4E  0EB0               	movlw	176
 14198  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14199  000E52  0E00               	movlw	0
 14200  000E54  0100               	movlb	0	; () banked
 14201  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14202  000E58  0E01               	movlw	1
 14203  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14204  000E5C  ECC8  F026         	call	_updateServoPosition	;wreg free
 14205                           
 14206                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14207  000E60  0E00               	movlw	0
 14208  000E62  0100               	movlb	0	; () banked
 14209  000E64  6FB8               	movwf	actuatorTest@i_1758& (0+255),b
 14210  000E66                     l8600:
 14211                           
 14212                           ; BSR set to: 0
 14213  000E66  0E63               	movlw	99
 14214  000E68  0100               	movlb	0	; () banked
 14215  000E6A  65B8               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14216  000E6C  D001               	goto	l8604
 14217  000E6E  D00C               	goto	l8608
 14218  000E70                     l8604:
 14219                           
 14220                           ; BSR set to: 0
 14221  000E70  0E68               	movlw	104
 14222  000E72  0100               	movlb	0	; () banked
 14223  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14224  000E76  0EE4               	movlw	228
 14225  000E78                     u10747:
 14226  000E78  2EE8               	decfsz	wreg,f,c
 14227  000E7A  D7FE               	bra	u10747
 14228  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14229  000E7E  D7FC               	bra	u10747
 14230  000E80  F000               	nop	
 14231  000E82  0100               	movlb	0	; () banked
 14232  000E84  2BB8               	incf	actuatorTest@i_1758& (0+255),f,b
 14233  000E86  D7EF               	goto	l8600
 14234  000E88                     l8608:
 14235                           
 14236                           ; BSR set to: 0
 14237  000E88  0E00               	movlw	0
 14238  000E8A  0100               	movlb	0	; () banked
 14239  000E8C  6FB9               	movwf	actuatorTest@i_1759& (0+255),b
 14240  000E8E                     l8610:
 14241                           
 14242                           ; BSR set to: 0
 14243  000E8E  0E63               	movlw	99
 14244  000E90  0100               	movlb	0	; () banked
 14245  000E92  65B9               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14246  000E94  D001               	goto	l8614
 14247  000E96  D00C               	goto	l1331
 14248  000E98                     l8614:
 14249                           
 14250                           ; BSR set to: 0
 14251  000E98  0E68               	movlw	104
 14252  000E9A  0100               	movlb	0	; () banked
 14253  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14254  000E9E  0EE4               	movlw	228
 14255  000EA0                     u10757:
 14256  000EA0  2EE8               	decfsz	wreg,f,c
 14257  000EA2  D7FE               	bra	u10757
 14258  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14259  000EA6  D7FC               	bra	u10757
 14260  000EA8  F000               	nop	
 14261  000EAA  0100               	movlb	0	; () banked
 14262  000EAC  2BB9               	incf	actuatorTest@i_1759& (0+255),f,b
 14263  000EAE  D7EF               	goto	l8610
 14264  000EB0                     l1331:
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;Test.c: 300: TMR1ON = 0;
 14268  000EB0  90CD               	bcf	4045,0,c	;volatile
 14269                           
 14270                           ; BSR set to: 0
 14271                           ;Test.c: 307: printf("TST: TILT SERVO");
 14272  000EB2  0E2D               	movlw	low STR_104
 14273  000EB4  0100               	movlb	0	; () banked
 14274  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14275  000EB8  0EFE               	movlw	high STR_104
 14276  000EBA  0100               	movlb	0	; () banked
 14277  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14278  000EBE  ECED  F00D         	call	_printf	;wreg free
 14279                           
 14280                           ;Test.c: 308: lcdInst(0b11000000);;
 14281  000EC2  0EC0               	movlw	192
 14282  000EC4  ECEF  F02D         	call	_lcdInst
 14283                           
 14284                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14285  000EC8  0E97               	movlw	low STR_105
 14286  000ECA  0100               	movlb	0	; () banked
 14287  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14288  000ECE  0EFB               	movlw	high STR_105
 14289  000ED0  0100               	movlb	0	; () banked
 14290  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14291  000ED4  ECED  F00D         	call	_printf	;wreg free
 14292                           
 14293                           ;Test.c: 310: updateServoPosition(1050, 3);
 14294  000ED8  0E04               	movlw	4
 14295  000EDA  0100               	movlb	0	; () banked
 14296  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14297  000EDE  0E1A               	movlw	26
 14298  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14299  000EE2  0E00               	movlw	0
 14300  000EE4  0100               	movlb	0	; () banked
 14301  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14302  000EE8  0E03               	movlw	3
 14303  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14304  000EEC  ECC8  F026         	call	_updateServoPosition	;wreg free
 14305                           
 14306                           ;Test.c: 311: TMR3ON = 1;
 14307  000EF0  80B1               	bsf	4017,0,c	;volatile
 14308                           
 14309                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14310  000EF2  0E00               	movlw	0
 14311  000EF4  0100               	movlb	0	; () banked
 14312  000EF6  6FBA               	movwf	actuatorTest@i_1762& (0+255),b
 14313  000EF8                     l8628:
 14314                           
 14315                           ; BSR set to: 0
 14316  000EF8  0E63               	movlw	99
 14317  000EFA  0100               	movlb	0	; () banked
 14318  000EFC  65BA               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14319  000EFE  D001               	goto	l8632
 14320  000F00  D00C               	goto	l8636
 14321  000F02                     l8632:
 14322                           
 14323                           ; BSR set to: 0
 14324  000F02  0E68               	movlw	104
 14325  000F04  0100               	movlb	0	; () banked
 14326  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14327  000F08  0EE4               	movlw	228
 14328  000F0A                     u10767:
 14329  000F0A  2EE8               	decfsz	wreg,f,c
 14330  000F0C  D7FE               	bra	u10767
 14331  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14332  000F10  D7FC               	bra	u10767
 14333  000F12  F000               	nop	
 14334  000F14  0100               	movlb	0	; () banked
 14335  000F16  2BBA               	incf	actuatorTest@i_1762& (0+255),f,b
 14336  000F18  D7EF               	goto	l8628
 14337  000F1A                     l8636:
 14338                           
 14339                           ; BSR set to: 0
 14340  000F1A  0E00               	movlw	0
 14341  000F1C  0100               	movlb	0	; () banked
 14342  000F1E  6FBB               	movwf	actuatorTest@i_1763& (0+255),b
 14343  000F20                     l8638:
 14344                           
 14345                           ; BSR set to: 0
 14346  000F20  0E63               	movlw	99
 14347  000F22  0100               	movlb	0	; () banked
 14348  000F24  65BB               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14349  000F26  D001               	goto	l8642
 14350  000F28  D00C               	goto	l8646
 14351  000F2A                     l8642:
 14352                           
 14353                           ; BSR set to: 0
 14354  000F2A  0E68               	movlw	104
 14355  000F2C  0100               	movlb	0	; () banked
 14356  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14357  000F30  0EE4               	movlw	228
 14358  000F32                     u10777:
 14359  000F32  2EE8               	decfsz	wreg,f,c
 14360  000F34  D7FE               	bra	u10777
 14361  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14362  000F38  D7FC               	bra	u10777
 14363  000F3A  F000               	nop	
 14364  000F3C  0100               	movlb	0	; () banked
 14365  000F3E  2BBB               	incf	actuatorTest@i_1763& (0+255),f,b
 14366  000F40  D7EF               	goto	l8638
 14367  000F42                     l8646:
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14371  000F42  0E80               	movlw	128
 14372  000F44  ECEF  F02D         	call	_lcdInst
 14373  000F48  0EC0               	movlw	192
 14374  000F4A  ECEF  F02D         	call	_lcdInst
 14375                           
 14376                           ;Test.c: 315: printf("DROP -- 2s      ");
 14377  000F4E  0E75               	movlw	low STR_106
 14378  000F50  0100               	movlb	0	; () banked
 14379  000F52  6F8E               	movwf	printf@f& (0+255),b
 14380  000F54  0EFB               	movlw	high STR_106
 14381  000F56  0100               	movlb	0	; () banked
 14382  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14383  000F5A  ECED  F00D         	call	_printf	;wreg free
 14384                           
 14385                           ;Test.c: 316: updateServoPosition(1260, 3);
 14386  000F5E  0E04               	movlw	4
 14387  000F60  0100               	movlb	0	; () banked
 14388  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14389  000F64  0EEC               	movlw	236
 14390  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14391  000F68  0E00               	movlw	0
 14392  000F6A  0100               	movlb	0	; () banked
 14393  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14394  000F6E  0E03               	movlw	3
 14395  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14396  000F72  ECC8  F026         	call	_updateServoPosition	;wreg free
 14397                           
 14398                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14399  000F76  0E00               	movlw	0
 14400  000F78  0100               	movlb	0	; () banked
 14401  000F7A  6FBC               	movwf	actuatorTest@i_1765& (0+255),b
 14402  000F7C                     l8654:
 14403                           
 14404                           ; BSR set to: 0
 14405  000F7C  0E63               	movlw	99
 14406  000F7E  0100               	movlb	0	; () banked
 14407  000F80  65BC               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14408  000F82  D001               	goto	l8658
 14409  000F84  D00C               	goto	l8662
 14410  000F86                     l8658:
 14411                           
 14412                           ; BSR set to: 0
 14413  000F86  0E68               	movlw	104
 14414  000F88  0100               	movlb	0	; () banked
 14415  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14416  000F8C  0EE4               	movlw	228
 14417  000F8E                     u10787:
 14418  000F8E  2EE8               	decfsz	wreg,f,c
 14419  000F90  D7FE               	bra	u10787
 14420  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14421  000F94  D7FC               	bra	u10787
 14422  000F96  F000               	nop	
 14423  000F98  0100               	movlb	0	; () banked
 14424  000F9A  2BBC               	incf	actuatorTest@i_1765& (0+255),f,b
 14425  000F9C  D7EF               	goto	l8654
 14426  000F9E                     l8662:
 14427                           
 14428                           ; BSR set to: 0
 14429  000F9E  0E00               	movlw	0
 14430  000FA0  0100               	movlb	0	; () banked
 14431  000FA2  6FBD               	movwf	actuatorTest@i_1766& (0+255),b
 14432  000FA4                     l8664:
 14433                           
 14434                           ; BSR set to: 0
 14435  000FA4  0E63               	movlw	99
 14436  000FA6  0100               	movlb	0	; () banked
 14437  000FA8  65BD               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14438  000FAA  D001               	goto	l8668
 14439  000FAC  D00C               	goto	l8672
 14440  000FAE                     l8668:
 14441                           
 14442                           ; BSR set to: 0
 14443  000FAE  0E68               	movlw	104
 14444  000FB0  0100               	movlb	0	; () banked
 14445  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14446  000FB4  0EE4               	movlw	228
 14447  000FB6                     u10797:
 14448  000FB6  2EE8               	decfsz	wreg,f,c
 14449  000FB8  D7FE               	bra	u10797
 14450  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14451  000FBC  D7FC               	bra	u10797
 14452  000FBE  F000               	nop	
 14453  000FC0  0100               	movlb	0	; () banked
 14454  000FC2  2BBD               	incf	actuatorTest@i_1766& (0+255),f,b
 14455  000FC4  D7EF               	goto	l8664
 14456  000FC6                     l8672:
 14457                           
 14458                           ; BSR set to: 0
 14459                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14460  000FC6  0E80               	movlw	128
 14461  000FC8  ECEF  F02D         	call	_lcdInst
 14462  000FCC  0EC0               	movlw	192
 14463  000FCE  ECEF  F02D         	call	_lcdInst
 14464                           
 14465                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14466  000FD2  0E97               	movlw	low STR_105
 14467  000FD4  0100               	movlb	0	; () banked
 14468  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14469  000FD8  0EFB               	movlw	high STR_105
 14470  000FDA  0100               	movlb	0	; () banked
 14471  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14472  000FDE  ECED  F00D         	call	_printf	;wreg free
 14473                           
 14474                           ;Test.c: 321: updateServoPosition(1050, 3);
 14475  000FE2  0E04               	movlw	4
 14476  000FE4  0100               	movlb	0	; () banked
 14477  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14478  000FE8  0E1A               	movlw	26
 14479  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14480  000FEC  0E00               	movlw	0
 14481  000FEE  0100               	movlb	0	; () banked
 14482  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14483  000FF2  0E03               	movlw	3
 14484  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14485  000FF6  ECC8  F026         	call	_updateServoPosition	;wreg free
 14486                           
 14487                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14488  000FFA  0E00               	movlw	0
 14489  000FFC  0100               	movlb	0	; () banked
 14490  000FFE  6FBE               	movwf	actuatorTest@i_1768& (0+255),b
 14491  001000                     l8680:
 14492                           
 14493                           ; BSR set to: 0
 14494  001000  0E63               	movlw	99
 14495  001002  0100               	movlb	0	; () banked
 14496  001004  65BE               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14497  001006  D001               	goto	l8684
 14498  001008  D00C               	goto	l8688
 14499  00100A                     l8684:
 14500                           
 14501                           ; BSR set to: 0
 14502  00100A  0E68               	movlw	104
 14503  00100C  0100               	movlb	0	; () banked
 14504  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14505  001010  0EE4               	movlw	228
 14506  001012                     u10807:
 14507  001012  2EE8               	decfsz	wreg,f,c
 14508  001014  D7FE               	bra	u10807
 14509  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14510  001018  D7FC               	bra	u10807
 14511  00101A  F000               	nop	
 14512  00101C  0100               	movlb	0	; () banked
 14513  00101E  2BBE               	incf	actuatorTest@i_1768& (0+255),f,b
 14514  001020  D7EF               	goto	l8680
 14515  001022                     l8688:
 14516                           
 14517                           ; BSR set to: 0
 14518  001022  0E00               	movlw	0
 14519  001024  0100               	movlb	0	; () banked
 14520  001026  6FBF               	movwf	actuatorTest@i_1769& (0+255),b
 14521  001028                     l8690:
 14522                           
 14523                           ; BSR set to: 0
 14524  001028  0E63               	movlw	99
 14525  00102A  0100               	movlb	0	; () banked
 14526  00102C  65BF               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14527  00102E  D001               	goto	l8694
 14528  001030  D00C               	goto	l1343
 14529  001032                     l8694:
 14530                           
 14531                           ; BSR set to: 0
 14532  001032  0E68               	movlw	104
 14533  001034  0100               	movlb	0	; () banked
 14534  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14535  001038  0EE4               	movlw	228
 14536  00103A                     u10817:
 14537  00103A  2EE8               	decfsz	wreg,f,c
 14538  00103C  D7FE               	bra	u10817
 14539  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14540  001040  D7FC               	bra	u10817
 14541  001042  F000               	nop	
 14542  001044  0100               	movlb	0	; () banked
 14543  001046  2BBF               	incf	actuatorTest@i_1769& (0+255),f,b
 14544  001048  D7EF               	goto	l8690
 14545  00104A                     l1343:
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;Test.c: 323: TMR3ON = 0;
 14549  00104A  90B1               	bcf	4017,0,c	;volatile
 14550                           
 14551                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14552  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14553                           
 14554                           ; BSR set to: 0
 14555                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14556  00104E  0E01               	movlw	1
 14557  001050  ECEF  F02D         	call	_lcdInst
 14558  001054  0E68               	movlw	104
 14559  001056  0100               	movlb	0	; () banked
 14560  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14561  00105A  0EE4               	movlw	228
 14562  00105C                     u10827:
 14563  00105C  2EE8               	decfsz	wreg,f,c
 14564  00105E  D7FE               	bra	u10827
 14565  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14566  001062  D7FC               	bra	u10827
 14567  001064  F000               	nop	
 14568  001066  0E80               	movlw	128
 14569  001068  ECEF  F02D         	call	_lcdInst
 14570                           
 14571                           ;Test.c: 330: printf("TST: CAM SERVO");
 14572  00106C  0EB8               	movlw	low STR_108
 14573  00106E  0100               	movlb	0	; () banked
 14574  001070  6F8E               	movwf	printf@f& (0+255),b
 14575  001072  0EFE               	movlw	high STR_108
 14576  001074  0100               	movlb	0	; () banked
 14577  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14578  001078  ECED  F00D         	call	_printf	;wreg free
 14579                           
 14580                           ;Test.c: 331: lcdInst(0b11000000);;
 14581  00107C  0EC0               	movlw	192
 14582  00107E  ECEF  F02D         	call	_lcdInst
 14583                           
 14584                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14585  001082  0E9A               	movlw	low STR_109
 14586  001084  0100               	movlb	0	; () banked
 14587  001086  6F8E               	movwf	printf@f& (0+255),b
 14588  001088  0EFE               	movlw	high STR_109
 14589  00108A  0100               	movlb	0	; () banked
 14590  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14591  00108E  ECED  F00D         	call	_printf	;wreg free
 14592                           
 14593                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14594  001092  808B               	bsf	3979,0,c	;volatile
 14595                           
 14596                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14597  001094  0E00               	movlw	0
 14598  001096  0100               	movlb	0	; () banked
 14599  001098  6FC0               	movwf	actuatorTest@i_1772& (0+255),b
 14600  00109A                     l8714:
 14601                           
 14602                           ; BSR set to: 0
 14603  00109A  0E63               	movlw	99
 14604  00109C  0100               	movlb	0	; () banked
 14605  00109E  65C0               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14606  0010A0  D001               	goto	l8718
 14607  0010A2  D00C               	goto	l8722
 14608  0010A4                     l8718:
 14609                           
 14610                           ; BSR set to: 0
 14611  0010A4  0E68               	movlw	104
 14612  0010A6  0100               	movlb	0	; () banked
 14613  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14614  0010AA  0EE4               	movlw	228
 14615  0010AC                     u10837:
 14616  0010AC  2EE8               	decfsz	wreg,f,c
 14617  0010AE  D7FE               	bra	u10837
 14618  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14619  0010B2  D7FC               	bra	u10837
 14620  0010B4  F000               	nop	
 14621  0010B6  0100               	movlb	0	; () banked
 14622  0010B8  2BC0               	incf	actuatorTest@i_1772& (0+255),f,b
 14623  0010BA  D7EF               	goto	l8714
 14624  0010BC                     l8722:
 14625                           
 14626                           ; BSR set to: 0
 14627  0010BC  0E00               	movlw	0
 14628  0010BE  0100               	movlb	0	; () banked
 14629  0010C0  6FC1               	movwf	actuatorTest@i_1773& (0+255),b
 14630  0010C2                     l8724:
 14631                           
 14632                           ; BSR set to: 0
 14633  0010C2  0E63               	movlw	99
 14634  0010C4  0100               	movlb	0	; () banked
 14635  0010C6  65C1               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14636  0010C8  D001               	goto	l8728
 14637  0010CA  D00C               	goto	l8732
 14638  0010CC                     l8728:
 14639                           
 14640                           ; BSR set to: 0
 14641  0010CC  0E68               	movlw	104
 14642  0010CE  0100               	movlb	0	; () banked
 14643  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14644  0010D2  0EE4               	movlw	228
 14645  0010D4                     u10847:
 14646  0010D4  2EE8               	decfsz	wreg,f,c
 14647  0010D6  D7FE               	bra	u10847
 14648  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14649  0010DA  D7FC               	bra	u10847
 14650  0010DC  F000               	nop	
 14651  0010DE  0100               	movlb	0	; () banked
 14652  0010E0  2BC1               	incf	actuatorTest@i_1773& (0+255),f,b
 14653  0010E2  D7EF               	goto	l8724
 14654  0010E4                     l8732:
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14658  0010E4  0E80               	movlw	128
 14659  0010E6  ECEF  F02D         	call	_lcdInst
 14660  0010EA  0EC0               	movlw	192
 14661  0010EC  ECEF  F02D         	call	_lcdInst
 14662                           
 14663                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14664  0010F0  0E8B               	movlw	low STR_110
 14665  0010F2  0100               	movlb	0	; () banked
 14666  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14667  0010F6  0EFE               	movlw	high STR_110
 14668  0010F8  0100               	movlb	0	; () banked
 14669  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14670  0010FC  ECED  F00D         	call	_printf	;wreg free
 14671                           
 14672                           ;Test.c: 339: for(i=0;i<10000;i++)
 14673  001100  0E00               	movlw	0
 14674  001102  0100               	movlb	0	; () banked
 14675  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14676  001106  0E00               	movlw	0
 14677  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14678  00110A                     l8738:
 14679                           
 14680                           ; BSR set to: 0
 14681  00110A  0100               	movlb	0	; () banked
 14682  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14683  00110E  D008               	goto	l1348
 14684  001110  0E10               	movlw	16
 14685  001112  0100               	movlb	0	; () banked
 14686  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14687  001116  0E27               	movlw	39
 14688  001118  0100               	movlb	0	; () banked
 14689  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14690  00111C  B0D8               	btfsc	status,0,c
 14691  00111E  D00D               	goto	l8748
 14692  001120                     l1348:
 14693                           
 14694                           ; BSR set to: 0
 14695                           ;Test.c: 340: {
 14696                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14697  001120  808B               	bsf	3979,0,c	;volatile
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14701  001122  0E1A               	movlw	26
 14702  001124                     u10857:
 14703  001124  2EE8               	decfsz	wreg,f,c
 14704  001126  D7FE               	bra	u10857
 14705  001128  D000               	nop2	
 14706                           
 14707                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14708  00112A  908B               	bcf	3979,0,c	;volatile
 14709                           
 14710                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14711  00112C  0EF0               	movlw	240
 14712  00112E                     u10867:
 14713  00112E  2EE8               	decfsz	wreg,f,c
 14714  001130  D7FE               	bra	u10867
 14715  001132  0100               	movlb	0	; () banked
 14716  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14717  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14718  001138  D7E8               	goto	l8738
 14719  00113A                     l8748:
 14720                           
 14721                           ; BSR set to: 0
 14722                           ;Test.c: 345: }
 14723                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14724  00113A  0E00               	movlw	0
 14725  00113C  0100               	movlb	0	; () banked
 14726  00113E  6FC2               	movwf	actuatorTest@i_1775& (0+255),b
 14727  001140                     l8750:
 14728                           
 14729                           ; BSR set to: 0
 14730  001140  0E63               	movlw	99
 14731  001142  0100               	movlb	0	; () banked
 14732  001144  65C2               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14733  001146  D001               	goto	l8754
 14734  001148  D00C               	goto	l8758
 14735  00114A                     l8754:
 14736                           
 14737                           ; BSR set to: 0
 14738  00114A  0E68               	movlw	104
 14739  00114C  0100               	movlb	0	; () banked
 14740  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14741  001150  0EE4               	movlw	228
 14742  001152                     u10877:
 14743  001152  2EE8               	decfsz	wreg,f,c
 14744  001154  D7FE               	bra	u10877
 14745  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14746  001158  D7FC               	bra	u10877
 14747  00115A  F000               	nop	
 14748  00115C  0100               	movlb	0	; () banked
 14749  00115E  2BC2               	incf	actuatorTest@i_1775& (0+255),f,b
 14750  001160  D7EF               	goto	l8750
 14751  001162                     l8758:
 14752                           
 14753                           ; BSR set to: 0
 14754  001162  0E00               	movlw	0
 14755  001164  0100               	movlb	0	; () banked
 14756  001166  6FC3               	movwf	actuatorTest@i_1776& (0+255),b
 14757  001168                     l8760:
 14758                           
 14759                           ; BSR set to: 0
 14760  001168  0E63               	movlw	99
 14761  00116A  0100               	movlb	0	; () banked
 14762  00116C  65C3               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14763  00116E  D001               	goto	l8764
 14764  001170  D00C               	goto	l8768
 14765  001172                     l8764:
 14766                           
 14767                           ; BSR set to: 0
 14768  001172  0E68               	movlw	104
 14769  001174  0100               	movlb	0	; () banked
 14770  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14771  001178  0EE4               	movlw	228
 14772  00117A                     u10887:
 14773  00117A  2EE8               	decfsz	wreg,f,c
 14774  00117C  D7FE               	bra	u10887
 14775  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14776  001180  D7FC               	bra	u10887
 14777  001182  F000               	nop	
 14778  001184  0100               	movlb	0	; () banked
 14779  001186  2BC3               	incf	actuatorTest@i_1776& (0+255),f,b
 14780  001188  D7EF               	goto	l8760
 14781  00118A                     l8768:
 14782                           
 14783                           ; BSR set to: 0
 14784                           ;Test.c: 348: machine_state = Testing_state;
 14785  00118A  0E03               	movlw	3
 14786  00118C  0100               	movlb	0	; () banked
 14787  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14788                           
 14789                           ; BSR set to: 0
 14790  001190  0012               	return		;funcret
 14791  001192                     __end_of_actuatorTest:
 14792                           	opt stack 0
 14793                           tblptru	equ	0xFF8
 14794                           tblptrh	equ	0xFF7
 14795                           tblptrl	equ	0xFF6
 14796                           tablat	equ	0xFF5
 14797                           prodh	equ	0xFF4
 14798                           prodl	equ	0xFF3
 14799                           intcon	equ	0xFF2
 14800                           intcon2	equ	0xFF1
 14801                           intcon3	equ	0xFF0
 14802                           postinc0	equ	0xFEE
 14803                           wreg	equ	0xFE8
 14804                           postdec1	equ	0xFE5
 14805                           fsr1l	equ	0xFE1
 14806                           indf2	equ	0xFDF
 14807                           postinc2	equ	0xFDE
 14808                           postdec2	equ	0xFDD
 14809                           fsr2h	equ	0xFDA
 14810                           fsr2l	equ	0xFD9
 14811                           status	equ	0xFD8
 14812                           
 14813 ;; *************** function _SpeedTest *****************
 14814 ;; Defined at:
 14815 ;;		line 541 in file "Test.c"
 14816 ;; Parameters:    Size  Location     Type
 14817 ;;		None
 14818 ;; Auto vars:     Size  Location     Type
 14819 ;;		None
 14820 ;; Return value:  Size  Location     Type
 14821 ;;                  1    wreg      void 
 14822 ;; Registers used:
 14823 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14824 ;; Tracked objects:
 14825 ;;		On entry : 0/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14833 ;;Total ram usage:        1 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; Hardware stack levels required when called:   10
 14836 ;; This function calls:
 14837 ;;		_lcdInst
 14838 ;;		_printf
 14839 ;; This function is called by:
 14840 ;;		_Test
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           	psect	text46
 14845  004E16                     __ptext46:
 14846                           	opt stack 0
 14847  004E16                     _SpeedTest:
 14848                           	opt stack 19
 14849                           
 14850                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14851                           
 14852                           ; BSR set to: 0
 14853                           ;incstack = 0
 14854  004E16  0E01               	movlw	1
 14855  004E18  ECEF  F02D         	call	_lcdInst
 14856  004E1C  0E68               	movlw	104
 14857  004E1E  0100               	movlb	0	; () banked
 14858  004E20  6FAB               	movwf	??_SpeedTest& (0+255),b
 14859  004E22  0EE4               	movlw	228
 14860  004E24                     u10897:
 14861  004E24  2EE8               	decfsz	wreg,f,c
 14862  004E26  D7FE               	bra	u10897
 14863  004E28  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14864  004E2A  D7FC               	bra	u10897
 14865  004E2C  F000               	nop	
 14866  004E2E  0E80               	movlw	128
 14867  004E30  ECEF  F02D         	call	_lcdInst
 14868                           
 14869                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14870  004E34  0E0A               	movlw	low STR_121
 14871  004E36  0100               	movlb	0	; () banked
 14872  004E38  6F8E               	movwf	printf@f& (0+255),b
 14873  004E3A  0EFB               	movlw	high STR_121
 14874  004E3C  0100               	movlb	0	; () banked
 14875  004E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14876  004E40  ECED  F00D         	call	_printf	;wreg free
 14877                           
 14878                           ;Test.c: 545: lcdInst(0b11000000);;
 14879  004E44  0EC0               	movlw	192
 14880  004E46  ECEF  F02D         	call	_lcdInst
 14881                           
 14882                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14883  004E4A  0EF8               	movlw	low STR_122
 14884  004E4C  0100               	movlb	0	; () banked
 14885  004E4E  6F8E               	movwf	printf@f& (0+255),b
 14886  004E50  0EFA               	movlw	high STR_122
 14887  004E52  0100               	movlb	0	; () banked
 14888  004E54  6F8F               	movwf	(printf@f+1)& (0+255),b
 14889  004E56  ECED  F00D         	call	_printf	;wreg free
 14890  004E5A                     l1419:
 14891  004E5A  A281               	btfss	3969,1,c	;volatile
 14892  004E5C  D7FE               	goto	l1419
 14893                           
 14894                           ;Test.c: 551: }
 14895                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14896  004E5E  3881               	swapf	3969,w,c	;volatile
 14897  004E60  0B0F               	andlw	15
 14898  004E62  0A0F               	xorlw	15
 14899  004E64  B4D8               	btfsc	status,2,c
 14900  004E66  0012               	return	
 14901  004E68  D014               	goto	l8864
 14902  004E6A                     l1426:
 14903                           
 14904                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14905  004E6A  848A               	bsf	3978,2,c	;volatile
 14906                           
 14907                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14908  004E6C  0E34               	movlw	52
 14909  004E6E  0100               	movlb	0	; () banked
 14910  004E70  6FAB               	movwf	??_SpeedTest& (0+255),b
 14911  004E72  0EF1               	movlw	241
 14912  004E74                     u10907:
 14913  004E74  2EE8               	decfsz	wreg,f,c
 14914  004E76  D7FE               	bra	u10907
 14915  004E78  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14916  004E7A  D7FC               	bra	u10907
 14917  004E7C  D000               	nop2	
 14918                           
 14919                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14920  004E7E  948A               	bcf	3978,2,c	;volatile
 14921                           
 14922                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14923  004E80  0E34               	movlw	52
 14924  004E82  0100               	movlb	0	; () banked
 14925  004E84  6FAB               	movwf	??_SpeedTest& (0+255),b
 14926  004E86  0EF1               	movlw	241
 14927  004E88                     u10917:
 14928  004E88  2EE8               	decfsz	wreg,f,c
 14929  004E8A  D7FE               	bra	u10917
 14930  004E8C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14931  004E8E  D7FC               	bra	u10917
 14932  004E90  D000               	nop2	
 14933  004E92                     l8864:
 14934  004E92  B281               	btfsc	3969,1,c	;volatile
 14935  004E94  D7EA               	goto	l1426
 14936                           
 14937                           ;Test.c: 563: }
 14938                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14939  004E96  948A               	bcf	3978,2,c	;volatile
 14940  004E98  D7E0               	goto	l1419
 14941  004E9A                     __end_of_SpeedTest:
 14942                           	opt stack 0
 14943                           tblptru	equ	0xFF8
 14944                           tblptrh	equ	0xFF7
 14945                           tblptrl	equ	0xFF6
 14946                           tablat	equ	0xFF5
 14947                           prodh	equ	0xFF4
 14948                           prodl	equ	0xFF3
 14949                           intcon	equ	0xFF2
 14950                           intcon2	equ	0xFF1
 14951                           intcon3	equ	0xFF0
 14952                           postinc0	equ	0xFEE
 14953                           wreg	equ	0xFE8
 14954                           postdec1	equ	0xFE5
 14955                           fsr1l	equ	0xFE1
 14956                           indf2	equ	0xFDF
 14957                           postinc2	equ	0xFDE
 14958                           postdec2	equ	0xFDD
 14959                           fsr2h	equ	0xFDA
 14960                           fsr2l	equ	0xFD9
 14961                           status	equ	0xFD8
 14962                           
 14963 ;; *************** function _PortTestPusher *****************
 14964 ;; Defined at:
 14965 ;;		line 682 in file "Test.c"
 14966 ;; Parameters:    Size  Location     Type
 14967 ;;		None
 14968 ;; Auto vars:     Size  Location     Type
 14969 ;;		None
 14970 ;; Return value:  Size  Location     Type
 14971 ;;                  1    wreg      void 
 14972 ;; Registers used:
 14973 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14974 ;; Tracked objects:
 14975 ;;		On entry : 0/0
 14976 ;;		On exit  : 0/0
 14977 ;;		Unchanged: 0/0
 14978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14982 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14983 ;;Total ram usage:        1 bytes
 14984 ;; Hardware stack levels used:    1
 14985 ;; Hardware stack levels required when called:   10
 14986 ;; This function calls:
 14987 ;;		_lcdInst
 14988 ;;		_printf
 14989 ;; This function is called by:
 14990 ;;		_Test
 14991 ;; This function uses a non-reentrant model
 14992 ;;
 14993                           
 14994                           	psect	text47
 14995  005270                     __ptext47:
 14996                           	opt stack 0
 14997  005270                     _PortTestPusher:
 14998                           	opt stack 19
 14999                           
 15000                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15001                           
 15002                           ;incstack = 0
 15003  005270  0E01               	movlw	1
 15004  005272  ECEF  F02D         	call	_lcdInst
 15005  005276  0E68               	movlw	104
 15006  005278  0100               	movlb	0	; () banked
 15007  00527A  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15008  00527C  0EE4               	movlw	228
 15009  00527E                     u10927:
 15010  00527E  2EE8               	decfsz	wreg,f,c
 15011  005280  D7FE               	bra	u10927
 15012  005282  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15013  005284  D7FC               	bra	u10927
 15014  005286  F000               	nop	
 15015  005288  0E80               	movlw	128
 15016  00528A  ECEF  F02D         	call	_lcdInst
 15017                           
 15018                           ;Test.c: 684: printf("D WILL RETURN    ");
 15019  00528E  0EE6               	movlw	low STR_112
 15020  005290  0100               	movlb	0	; () banked
 15021  005292  6F8E               	movwf	printf@f& (0+255),b
 15022  005294  0EFA               	movlw	high STR_112
 15023  005296  0100               	movlb	0	; () banked
 15024  005298  6F8F               	movwf	(printf@f+1)& (0+255),b
 15025  00529A  ECED  F00D         	call	_printf	;wreg free
 15026                           
 15027                           ;Test.c: 685: lcdInst(0b11000000);;
 15028  00529E  0EC0               	movlw	192
 15029  0052A0  ECEF  F02D         	call	_lcdInst
 15030                           
 15031                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 15032  0052A4  0E2E               	movlw	low STR_130
 15033  0052A6  0100               	movlb	0	; () banked
 15034  0052A8  6F8E               	movwf	printf@f& (0+255),b
 15035  0052AA  0EFB               	movlw	high STR_130
 15036  0052AC  0100               	movlb	0	; () banked
 15037  0052AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15038  0052B0  ECED  F00D         	call	_printf	;wreg free
 15039  0052B4                     l1480:
 15040  0052B4  A281               	btfss	3969,1,c	;volatile
 15041  0052B6  D7FE               	goto	l1480
 15042                           
 15043                           ;Test.c: 691: }
 15044                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 15045  0052B8  3881               	swapf	3969,w,c	;volatile
 15046  0052BA  0B0F               	andlw	15
 15047  0052BC  0A0F               	xorlw	15
 15048  0052BE  B4D8               	btfsc	status,2,c
 15049  0052C0  0012               	return	
 15050                           
 15051                           ;Test.c: 695: else{
 15052                           ;Test.c: 696: LATAbits.LATA4 = 1;
 15053                           
 15054                           ;Test.c: 694: }
 15055                           
 15056                           ;Test.c: 693: break;
 15057  0052C2  8889               	bsf	3977,4,c	;volatile
 15058  0052C4                     l1486:
 15059  0052C4  B281               	btfsc	3969,1,c	;volatile
 15060  0052C6  D7FE               	goto	l1486
 15061                           
 15062                           ;Test.c: 699: }
 15063                           ;Test.c: 700: LATAbits.LATA4 = 0;
 15064  0052C8  9889               	bcf	3977,4,c	;volatile
 15065  0052CA  D7F4               	goto	l1480
 15066  0052CC                     __end_of_PortTestPusher:
 15067                           	opt stack 0
 15068                           tblptru	equ	0xFF8
 15069                           tblptrh	equ	0xFF7
 15070                           tblptrl	equ	0xFF6
 15071                           tablat	equ	0xFF5
 15072                           prodh	equ	0xFF4
 15073                           prodl	equ	0xFF3
 15074                           intcon	equ	0xFF2
 15075                           intcon2	equ	0xFF1
 15076                           intcon3	equ	0xFF0
 15077                           postinc0	equ	0xFEE
 15078                           wreg	equ	0xFE8
 15079                           postdec1	equ	0xFE5
 15080                           fsr1l	equ	0xFE1
 15081                           indf2	equ	0xFDF
 15082                           postinc2	equ	0xFDE
 15083                           postdec2	equ	0xFDD
 15084                           fsr2h	equ	0xFDA
 15085                           fsr2l	equ	0xFD9
 15086                           status	equ	0xFD8
 15087                           
 15088 ;; *************** function _PortTestDC *****************
 15089 ;; Defined at:
 15090 ;;		line 411 in file "Test.c"
 15091 ;; Parameters:    Size  Location     Type
 15092 ;;		None
 15093 ;; Auto vars:     Size  Location     Type
 15094 ;;		None
 15095 ;; Return value:  Size  Location     Type
 15096 ;;                  1    wreg      void 
 15097 ;; Registers used:
 15098 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15099 ;; Tracked objects:
 15100 ;;		On entry : 0/0
 15101 ;;		On exit  : 0/0
 15102 ;;		Unchanged: 0/0
 15103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15107 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15108 ;;Total ram usage:        1 bytes
 15109 ;; Hardware stack levels used:    1
 15110 ;; Hardware stack levels required when called:   10
 15111 ;; This function calls:
 15112 ;;		_lcdInst
 15113 ;;		_printf
 15114 ;; This function is called by:
 15115 ;;		_Test
 15116 ;; This function uses a non-reentrant model
 15117 ;;
 15118                           
 15119                           	psect	text48
 15120  0052CC                     __ptext48:
 15121                           	opt stack 0
 15122  0052CC                     _PortTestDC:
 15123                           	opt stack 19
 15124                           
 15125                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15126                           
 15127                           ;incstack = 0
 15128  0052CC  0E01               	movlw	1
 15129  0052CE  ECEF  F02D         	call	_lcdInst
 15130  0052D2  0E68               	movlw	104
 15131  0052D4  0100               	movlb	0	; () banked
 15132  0052D6  6FAB               	movwf	??_PortTestDC& (0+255),b
 15133  0052D8  0EE4               	movlw	228
 15134  0052DA                     u10937:
 15135  0052DA  2EE8               	decfsz	wreg,f,c
 15136  0052DC  D7FE               	bra	u10937
 15137  0052DE  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15138  0052E0  D7FC               	bra	u10937
 15139  0052E2  F000               	nop	
 15140  0052E4  0E80               	movlw	128
 15141  0052E6  ECEF  F02D         	call	_lcdInst
 15142                           
 15143                           ;Test.c: 413: printf("D WILL RETURN    ");
 15144  0052EA  0EE6               	movlw	low STR_112
 15145  0052EC  0100               	movlb	0	; () banked
 15146  0052EE  6F8E               	movwf	printf@f& (0+255),b
 15147  0052F0  0EFA               	movlw	high STR_112
 15148  0052F2  0100               	movlb	0	; () banked
 15149  0052F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15150  0052F6  ECED  F00D         	call	_printf	;wreg free
 15151                           
 15152                           ;Test.c: 414: lcdInst(0b11000000);;
 15153  0052FA  0EC0               	movlw	192
 15154  0052FC  ECEF  F02D         	call	_lcdInst
 15155                           
 15156                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15157  005300  0ECA               	movlw	low STR_113
 15158  005302  0100               	movlb	0	; () banked
 15159  005304  6F8E               	movwf	printf@f& (0+255),b
 15160  005306  0EFB               	movlw	high STR_113
 15161  005308  0100               	movlb	0	; () banked
 15162  00530A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15163  00530C  ECED  F00D         	call	_printf	;wreg free
 15164  005310                     l1361:
 15165  005310  A281               	btfss	3969,1,c	;volatile
 15166  005312  D7FE               	goto	l1361
 15167                           
 15168                           ;Test.c: 420: }
 15169                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15170  005314  3881               	swapf	3969,w,c	;volatile
 15171  005316  0B0F               	andlw	15
 15172  005318  0A0F               	xorlw	15
 15173  00531A  B4D8               	btfsc	status,2,c
 15174  00531C  0012               	return	
 15175                           
 15176                           ;Test.c: 424: else{
 15177                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15178                           
 15179                           ;Test.c: 423: }
 15180                           
 15181                           ;Test.c: 422: break;
 15182  00531E  848A               	bsf	3978,2,c	;volatile
 15183  005320                     l1367:
 15184  005320  B281               	btfsc	3969,1,c	;volatile
 15185  005322  D7FE               	goto	l1367
 15186                           
 15187                           ;Test.c: 428: }
 15188                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15189  005324  948A               	bcf	3978,2,c	;volatile
 15190  005326  D7F4               	goto	l1361
 15191  005328                     __end_of_PortTestDC:
 15192                           	opt stack 0
 15193                           tblptru	equ	0xFF8
 15194                           tblptrh	equ	0xFF7
 15195                           tblptrl	equ	0xFF6
 15196                           tablat	equ	0xFF5
 15197                           prodh	equ	0xFF4
 15198                           prodl	equ	0xFF3
 15199                           intcon	equ	0xFF2
 15200                           intcon2	equ	0xFF1
 15201                           intcon3	equ	0xFF0
 15202                           postinc0	equ	0xFEE
 15203                           wreg	equ	0xFE8
 15204                           postdec1	equ	0xFE5
 15205                           fsr1l	equ	0xFE1
 15206                           indf2	equ	0xFDF
 15207                           postinc2	equ	0xFDE
 15208                           postdec2	equ	0xFDD
 15209                           fsr2h	equ	0xFDA
 15210                           fsr2l	equ	0xFD9
 15211                           status	equ	0xFD8
 15212                           
 15213 ;; *************** function _PlatformTest *****************
 15214 ;; Defined at:
 15215 ;;		line 434 in file "Test.c"
 15216 ;; Parameters:    Size  Location     Type
 15217 ;;		None
 15218 ;; Auto vars:     Size  Location     Type
 15219 ;;  i               2   51[BANK0 ] int 
 15220 ;;  i               2   49[BANK0 ] int 
 15221 ;;  res             2   47[BANK0 ] int 
 15222 ;;  res             2   45[BANK0 ] int 
 15223 ;;  on              2   53[BANK0 ] int 
 15224 ;; Return value:  Size  Location     Type
 15225 ;;                  1    wreg      void 
 15226 ;; Registers used:
 15227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15228 ;; Tracked objects:
 15229 ;;		On entry : 0/0
 15230 ;;		On exit  : 0/0
 15231 ;;		Unchanged: 0/0
 15232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15234 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15236 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15237 ;;Total ram usage:       12 bytes
 15238 ;; Hardware stack levels used:    1
 15239 ;; Hardware stack levels required when called:   10
 15240 ;; This function calls:
 15241 ;;		_lcdInst
 15242 ;;		_printf
 15243 ;;		_readADC
 15244 ;;		_stopSignals
 15245 ;; This function is called by:
 15246 ;;		_Test
 15247 ;; This function uses a non-reentrant model
 15248 ;;
 15249                           
 15250                           	psect	text49
 15251  00276E                     __ptext49:
 15252                           	opt stack 0
 15253  00276E                     _PlatformTest:
 15254                           	opt stack 19
 15255                           
 15256                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15257                           
 15258                           ;incstack = 0
 15259  00276E  8A8B               	bsf	3979,5,c	;volatile
 15260                           
 15261                           ;Test.c: 437: machine_state = Sorting_state;
 15262  002770  0E01               	movlw	1
 15263  002772  0100               	movlb	0	; () banked
 15264  002774  6FFC               	movwf	_machine_state& (0+255),b
 15265                           
 15266                           ;Test.c: 438: f_arm_position = 0;
 15267  002776  0E00               	movlw	0
 15268  002778  0100               	movlb	0	; () banked
 15269  00277A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15270  00277C  0E00               	movlw	0
 15271  00277E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15272                           
 15273                           ;Test.c: 439: timer2_counter = 0;
 15274  002780  0E00               	movlw	0
 15275  002782  6E74               	movwf	_timer2_counter+1,c	;volatile
 15276  002784  0E00               	movlw	0
 15277  002786  6E73               	movwf	_timer2_counter,c	;volatile
 15278                           
 15279                           ; BSR set to: 0
 15280                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15281  002788  968A               	bcf	3978,3,c	;volatile
 15282                           
 15283                           ; BSR set to: 0
 15284                           ;Test.c: 441: TMR2ON = 1;
 15285  00278A  84CA               	bsf	4042,2,c	;volatile
 15286                           
 15287                           ;Test.c: 442: was_low_2 = 0;
 15288  00278C  0E00               	movlw	0
 15289  00278E  6E7A               	movwf	_was_low_2+1,c	;volatile
 15290  002790  0E00               	movlw	0
 15291  002792  6E79               	movwf	_was_low_2,c	;volatile
 15292                           
 15293                           ;Test.c: 444: int on = 1;
 15294  002794  0E00               	movlw	0
 15295  002796  0100               	movlb	0	; () banked
 15296  002798  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15297  00279A  0E01               	movlw	1
 15298  00279C  6FB5               	movwf	PlatformTest@on& (0+255),b
 15299                           
 15300                           ; BSR set to: 0
 15301                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15302  00279E  0E01               	movlw	1
 15303  0027A0  ECEF  F02D         	call	_lcdInst
 15304  0027A4  0E68               	movlw	104
 15305  0027A6  0100               	movlb	0	; () banked
 15306  0027A8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15307  0027AA  0EE4               	movlw	228
 15308  0027AC                     u10947:
 15309  0027AC  2EE8               	decfsz	wreg,f,c
 15310  0027AE  D7FE               	bra	u10947
 15311  0027B0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15312  0027B2  D7FC               	bra	u10947
 15313  0027B4  F000               	nop	
 15314  0027B6  0E80               	movlw	128
 15315  0027B8  ECEF  F02D         	call	_lcdInst
 15316                           
 15317                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15318  0027BC  0EFD               	movlw	low STR_114
 15319  0027BE  0100               	movlb	0	; () banked
 15320  0027C0  6F8E               	movwf	printf@f& (0+255),b
 15321  0027C2  0EFB               	movlw	high STR_114
 15322  0027C4  0100               	movlb	0	; () banked
 15323  0027C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15324  0027C8  ECED  F00D         	call	_printf	;wreg free
 15325                           
 15326                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15327  0027CC  D058               	goto	l8918
 15328  0027CE                     l8900:
 15329                           
 15330                           ;Test.c: 449: readADC(0);
 15331  0027CE  0E00               	movlw	0
 15332  0027D0  ECDA  F02C         	call	_readADC
 15333                           
 15334                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15335  0027D4  50C3               	movf	4035,w,c	;volatile
 15336  0027D6  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15337  0027DA  0100               	movlb	0	; () banked
 15338  0027DC  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15339  0027DE  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15340  0027E2  0100               	movlb	0	; () banked
 15341  0027E4  6BAB               	clrf	??_PlatformTest& (0+255),b
 15342  0027E6  0100               	movlb	0	; () banked
 15343  0027E8  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15344  0027EA  0100               	movlb	0	; () banked
 15345  0027EC  6FAD               	movwf	PlatformTest@res& (0+255),b
 15346  0027EE  0100               	movlb	0	; () banked
 15347  0027F0  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15348  0027F2  0100               	movlb	0	; () banked
 15349  0027F4  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15353  0027F6  0100               	movlb	0	; () banked
 15354  0027F8  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15355  0027FA  D00A               	goto	u7940
 15356  0027FC  0E21               	movlw	33
 15357  0027FE  0100               	movlb	0	; () banked
 15358  002800  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15359  002802  0E03               	movlw	3
 15360  002804  0100               	movlb	0	; () banked
 15361  002806  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15362  002808  A0D8               	btfss	status,0,c
 15363  00280A  D002               	goto	u7940
 15364  00280C  0E01               	movlw	1
 15365  00280E  D001               	goto	u7950
 15366  002810                     u7940:
 15367  002810  0E00               	movlw	0
 15368  002812                     u7950:
 15369  002812  0100               	movlb	0	; () banked
 15370  002814  6FE0               	movwf	_IR_signal& (0+255),b
 15371  002816  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15372                           
 15373                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15374  002818  0E01               	movlw	1
 15375  00281A  ECEF  F02D         	call	_lcdInst
 15376  00281E  0E68               	movlw	104
 15377  002820  0100               	movlb	0	; () banked
 15378  002822  6FAB               	movwf	??_PlatformTest& (0+255),b
 15379  002824  0EE4               	movlw	228
 15380  002826                     u10957:
 15381  002826  2EE8               	decfsz	wreg,f,c
 15382  002828  D7FE               	bra	u10957
 15383  00282A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15384  00282C  D7FC               	bra	u10957
 15385  00282E  F000               	nop	
 15386  002830  0E80               	movlw	128
 15387  002832  ECEF  F02D         	call	_lcdInst
 15388                           
 15389                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15390  002836  0EFD               	movlw	low STR_114
 15391  002838  0100               	movlb	0	; () banked
 15392  00283A  6F8E               	movwf	printf@f& (0+255),b
 15393  00283C  0EFB               	movlw	high STR_114
 15394  00283E  0100               	movlb	0	; () banked
 15395  002840  6F8F               	movwf	(printf@f+1)& (0+255),b
 15396  002842  ECED  F00D         	call	_printf	;wreg free
 15397                           
 15398                           ;Test.c: 455: lcdInst(0b11000000);;
 15399  002846  0EC0               	movlw	192
 15400  002848  ECEF  F02D         	call	_lcdInst
 15401                           
 15402                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15403  00284C  0EEC               	movlw	low STR_116
 15404  00284E  0100               	movlb	0	; () banked
 15405  002850  6F8E               	movwf	printf@f& (0+255),b
 15406  002852  0EFB               	movlw	high STR_116
 15407  002854  0100               	movlb	0	; () banked
 15408  002856  6F8F               	movwf	(printf@f+1)& (0+255),b
 15409  002858  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15410  00285C  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15411  002860  ECED  F00D         	call	_printf	;wreg free
 15412                           
 15413                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15414  002864  0E05               	movlw	5
 15415  002866  0100               	movlb	0	; () banked
 15416  002868  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15417  00286A  0E0F               	movlw	15
 15418  00286C  0100               	movlb	0	; () banked
 15419  00286E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15420  002870  0EF1               	movlw	241
 15421  002872                     u10967:
 15422  002872  2EE8               	decfsz	wreg,f,c
 15423  002874  D7FE               	bra	u10967
 15424  002876  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15425  002878  D7FC               	bra	u10967
 15426  00287A  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15427  00287C  D7FA               	bra	u10967
 15428  00287E                     l8918:
 15429  00287E  B281               	btfsc	3969,1,c	;volatile
 15430  002880  D059               	goto	l8938
 15431  002882  D7A5               	goto	l8900
 15432  002884                     l8920:
 15433                           
 15434                           ;Test.c: 462: readADC(0);
 15435  002884  0E00               	movlw	0
 15436  002886  ECDA  F02C         	call	_readADC
 15437                           
 15438                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15439  00288A  50C3               	movf	4035,w,c	;volatile
 15440  00288C  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15441  002890  0100               	movlb	0	; () banked
 15442  002892  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15443  002894  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15444  002898  0100               	movlb	0	; () banked
 15445  00289A  6BAB               	clrf	??_PlatformTest& (0+255),b
 15446  00289C  0100               	movlb	0	; () banked
 15447  00289E  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15448  0028A0  0100               	movlb	0	; () banked
 15449  0028A2  6FAF               	movwf	PlatformTest@res_1788& (0+255),b
 15450  0028A4  0100               	movlb	0	; () banked
 15451  0028A6  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15452  0028A8  0100               	movlb	0	; () banked
 15453  0028AA  6FB0               	movwf	(PlatformTest@res_1788+1)& (0+255),b
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15457  0028AC  0100               	movlb	0	; () banked
 15458  0028AE  BFB0               	btfsc	(PlatformTest@res_1788+1)& (0+255),7,b
 15459  0028B0  D00A               	goto	u7970
 15460  0028B2  0E21               	movlw	33
 15461  0028B4  0100               	movlb	0	; () banked
 15462  0028B6  5DAF               	subwf	PlatformTest@res_1788& (0+255),w,b
 15463  0028B8  0E03               	movlw	3
 15464  0028BA  0100               	movlb	0	; () banked
 15465  0028BC  59B0               	subwfb	(PlatformTest@res_1788+1)& (0+255),w,b
 15466  0028BE  A0D8               	btfss	status,0,c
 15467  0028C0  D002               	goto	u7970
 15468  0028C2  0E01               	movlw	1
 15469  0028C4  D001               	goto	u7980
 15470  0028C6                     u7970:
 15471  0028C6  0E00               	movlw	0
 15472  0028C8                     u7980:
 15473  0028C8  0100               	movlb	0	; () banked
 15474  0028CA  6FE0               	movwf	_IR_signal& (0+255),b
 15475  0028CC  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15476                           
 15477                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15478  0028CE  0E01               	movlw	1
 15479  0028D0  ECEF  F02D         	call	_lcdInst
 15480  0028D4  0E68               	movlw	104
 15481  0028D6  0100               	movlb	0	; () banked
 15482  0028D8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15483  0028DA  0EE4               	movlw	228
 15484  0028DC                     u10977:
 15485  0028DC  2EE8               	decfsz	wreg,f,c
 15486  0028DE  D7FE               	bra	u10977
 15487  0028E0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15488  0028E2  D7FC               	bra	u10977
 15489  0028E4  F000               	nop	
 15490  0028E6  0E80               	movlw	128
 15491  0028E8  ECEF  F02D         	call	_lcdInst
 15492                           
 15493                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15494  0028EC  0EFD               	movlw	low STR_114
 15495  0028EE  0100               	movlb	0	; () banked
 15496  0028F0  6F8E               	movwf	printf@f& (0+255),b
 15497  0028F2  0EFB               	movlw	high STR_114
 15498  0028F4  0100               	movlb	0	; () banked
 15499  0028F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15500  0028F8  ECED  F00D         	call	_printf	;wreg free
 15501                           
 15502                           ;Test.c: 468: lcdInst(0b11000000);;
 15503  0028FC  0EC0               	movlw	192
 15504  0028FE  ECEF  F02D         	call	_lcdInst
 15505                           
 15506                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15507  002902  0EEC               	movlw	low STR_116
 15508  002904  0100               	movlb	0	; () banked
 15509  002906  6F8E               	movwf	printf@f& (0+255),b
 15510  002908  0EFB               	movlw	high STR_116
 15511  00290A  0100               	movlb	0	; () banked
 15512  00290C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15513  00290E  C0AF  F090         	movff	PlatformTest@res_1788,?_printf+2
 15514  002912  C0B0  F091         	movff	PlatformTest@res_1788+1,?_printf+3
 15515  002916  ECED  F00D         	call	_printf	;wreg free
 15516                           
 15517                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15518  00291A  0E05               	movlw	5
 15519  00291C  0100               	movlb	0	; () banked
 15520  00291E  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15521  002920  0E0F               	movlw	15
 15522  002922  0100               	movlb	0	; () banked
 15523  002924  6FAB               	movwf	??_PlatformTest& (0+255),b
 15524  002926  0EF1               	movlw	241
 15525  002928                     u10987:
 15526  002928  2EE8               	decfsz	wreg,f,c
 15527  00292A  D7FE               	bra	u10987
 15528  00292C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15529  00292E  D7FC               	bra	u10987
 15530  002930  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15531  002932  D7FA               	bra	u10987
 15532  002934                     l8938:
 15533  002934  A281               	btfss	3969,1,c	;volatile
 15534  002936  D7A6               	goto	l8920
 15535                           
 15536                           ;Test.c: 471: }
 15537                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15538  002938  3881               	swapf	3969,w,c	;volatile
 15539  00293A  0B0F               	andlw	15
 15540  00293C  0A0F               	xorlw	15
 15541  00293E  B4D8               	btfsc	status,2,c
 15542  002940  D09A               	goto	l1382
 15543                           
 15544                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15545                           
 15546                           ;Test.c: 474: }
 15547                           
 15548                           ;Test.c: 473: break;
 15549  002942  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15550  002946  0100               	movlb	0	; () banked
 15551  002948  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15552  00294A  0E0F               	movlw	15
 15553  00294C  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15554  00294E  A4D8               	btfss	status,2,c
 15555  002950  D012               	goto	l8950
 15556                           
 15557                           ; BSR set to: 0
 15558                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15559  002952  B48A               	btfsc	3978,2,c	;volatile
 15560  002954  D004               	goto	u8020
 15561  002956  0100               	movlb	0	; () banked
 15562  002958  6BAB               	clrf	??_PlatformTest& (0+255),b
 15563  00295A  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15564  00295C  D002               	goto	u8038
 15565  00295E                     u8020:
 15566  00295E  0100               	movlb	0	; () banked
 15567  002960  6BAB               	clrf	??_PlatformTest& (0+255),b
 15568  002962                     u8038:
 15569  002962  0100               	movlb	0	; () banked
 15570  002964  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15571  002966  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15572  002968  508A               	movf	3978,w,c	;volatile
 15573  00296A  0100               	movlb	0	; () banked
 15574  00296C  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15575  00296E  0BFB               	andlw	-5
 15576  002970  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15577  002972  6E8A               	movwf	3978,c	;volatile
 15578                           
 15579                           ;Test.c: 477: }
 15580  002974  D07D               	goto	l1397
 15581  002976                     l8950:
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15585  002976  3881               	swapf	3969,w,c	;volatile
 15586  002978  0B0F               	andlw	15
 15587  00297A  0A03               	xorlw	3
 15588  00297C  A4D8               	btfss	status,2,c
 15589  00297E  D020               	goto	l8962
 15590                           
 15591                           ; BSR set to: 0
 15592                           ;Test.c: 479: if(on){
 15593  002980  0100               	movlb	0	; () banked
 15594  002982  51B5               	movf	PlatformTest@on& (0+255),w,b
 15595  002984  0100               	movlb	0	; () banked
 15596  002986  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15597  002988  B4D8               	btfsc	status,2,c
 15598  00298A  D010               	goto	l8958
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;Test.c: 480: f_arm_position = 1;
 15602  00298C  0E00               	movlw	0
 15603  00298E  0100               	movlb	0	; () banked
 15604  002990  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15605  002992  0E01               	movlw	1
 15606  002994  D00F               	goto	L16
 15607  002996                     l8956:
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;Test.c: 481: on = !on;
 15611  002996  0100               	movlb	0	; () banked
 15612  002998  51B5               	movf	PlatformTest@on& (0+255),w,b
 15613  00299A  0100               	movlb	0	; () banked
 15614  00299C  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15615  00299E  A4D8               	btfss	status,2,c
 15616  0029A0  D00D               	goto	u8080
 15617  0029A2  D00A               	goto	u8081
 15618  0029A4                     u8070:
 15619  0029A4  0100               	movlb	0	; () banked
 15620  0029A6  6FB5               	movwf	PlatformTest@on& (0+255),b
 15621  0029A8  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15622                           
 15623                           ;Test.c: 482: }
 15624  0029AA  D062               	goto	l1397
 15625  0029AC                     l8958:
 15626                           
 15627                           ; BSR set to: 0
 15628                           ;Test.c: 483: else{
 15629                           ;Test.c: 484: f_arm_position = 0;
 15630  0029AC  0E00               	movlw	0
 15631  0029AE  0100               	movlb	0	; () banked
 15632  0029B0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15633  0029B2  0E00               	movlw	0
 15634  0029B4                     L16:
 15635  0029B4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15636  0029B6  D7EF               	goto	l8956
 15637  0029B8                     u8081:
 15638  0029B8  0E01               	movlw	1
 15639  0029BA  D7F4               	goto	u8070
 15640  0029BC                     u8080:
 15641  0029BC  0E00               	movlw	0
 15642  0029BE  D7F2               	goto	u8070
 15643  0029C0                     l8962:
 15644                           
 15645                           ; BSR set to: 0
 15646                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15647  0029C0  3881               	swapf	3969,w,c	;volatile
 15648  0029C2  0B0F               	andlw	15
 15649  0029C4  0A05               	xorlw	5
 15650  0029C6  A4D8               	btfss	status,2,c
 15651  0029C8  D027               	goto	l8976
 15652                           
 15653                           ; BSR set to: 0
 15654                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15655  0029CA  0E00               	movlw	0
 15656  0029CC  0100               	movlb	0	; () banked
 15657  0029CE  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15658  0029D0  0E00               	movlw	0
 15659  0029D2  6FB1               	movwf	PlatformTest@i& (0+255),b
 15660  0029D4                     l8966:
 15661                           
 15662                           ; BSR set to: 0
 15663  0029D4  0100               	movlb	0	; () banked
 15664  0029D6  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15665  0029D8  D008               	goto	l1391
 15666  0029DA  0100               	movlb	0	; () banked
 15667  0029DC  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15668  0029DE  E148               	bnz	l1397
 15669  0029E0  0E1E               	movlw	30
 15670  0029E2  0100               	movlb	0	; () banked
 15671  0029E4  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15672  0029E6  B0D8               	btfsc	status,0,c
 15673  0029E8  D043               	goto	l1397
 15674  0029EA                     l1391:
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15678  0029EA  8889               	bsf	3977,4,c	;volatile
 15679                           
 15680                           ; BSR set to: 0
 15681                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15682  0029EC  0E4E               	movlw	78
 15683  0029EE  0100               	movlb	0	; () banked
 15684  0029F0  6FAB               	movwf	??_PlatformTest& (0+255),b
 15685  0029F2  0EEB               	movlw	235
 15686  0029F4                     u10997:
 15687  0029F4  2EE8               	decfsz	wreg,f,c
 15688  0029F6  D7FE               	bra	u10997
 15689  0029F8  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15690  0029FA  D7FC               	bra	u10997
 15691                           
 15692                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15693  0029FC  9889               	bcf	3977,4,c	;volatile
 15694                           
 15695                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15696  0029FE  0E1A               	movlw	26
 15697  002A00  0100               	movlb	0	; () banked
 15698  002A02  6FAB               	movwf	??_PlatformTest& (0+255),b
 15699  002A04  0EF8               	movlw	248
 15700  002A06                     u11007:
 15701  002A06  2EE8               	decfsz	wreg,f,c
 15702  002A08  D7FE               	bra	u11007
 15703  002A0A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15704  002A0C  D7FC               	bra	u11007
 15705  002A0E  F000               	nop	
 15706  002A10  0100               	movlb	0	; () banked
 15707  002A12  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15708  002A14  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15709  002A16  D7DE               	goto	l8966
 15710  002A18                     l8976:
 15711                           
 15712                           ; BSR set to: 0
 15713                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15714  002A18  3881               	swapf	3969,w,c	;volatile
 15715  002A1A  0B0F               	andlw	15
 15716  002A1C  0A06               	xorlw	6
 15717  002A1E  A4D8               	btfss	status,2,c
 15718  002A20  D027               	goto	l1397
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15722  002A22  0E00               	movlw	0
 15723  002A24  0100               	movlb	0	; () banked
 15724  002A26  6FB4               	movwf	(PlatformTest@i_1792+1)& (0+255),b
 15725  002A28  0E00               	movlw	0
 15726  002A2A  6FB3               	movwf	PlatformTest@i_1792& (0+255),b
 15727  002A2C                     l8980:
 15728                           
 15729                           ; BSR set to: 0
 15730  002A2C  0100               	movlb	0	; () banked
 15731  002A2E  BFB4               	btfsc	(PlatformTest@i_1792+1)& (0+255),7,b
 15732  002A30  D008               	goto	l1395
 15733  002A32  0100               	movlb	0	; () banked
 15734  002A34  51B4               	movf	(PlatformTest@i_1792+1)& (0+255),w,b
 15735  002A36  E11C               	bnz	l1397
 15736  002A38  0E1E               	movlw	30
 15737  002A3A  0100               	movlb	0	; () banked
 15738  002A3C  5DB3               	subwf	PlatformTest@i_1792& (0+255),w,b
 15739  002A3E  B0D8               	btfsc	status,0,c
 15740  002A40  D017               	goto	l1397
 15741  002A42                     l1395:
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15745  002A42  8889               	bsf	3977,4,c	;volatile
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15749  002A44  0E3D               	movlw	61
 15750  002A46  0100               	movlb	0	; () banked
 15751  002A48  6FAB               	movwf	??_PlatformTest& (0+255),b
 15752  002A4A  0E41               	movlw	65
 15753  002A4C                     u11017:
 15754  002A4C  2EE8               	decfsz	wreg,f,c
 15755  002A4E  D7FE               	bra	u11017
 15756  002A50  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15757  002A52  D7FC               	bra	u11017
 15758                           
 15759                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15760  002A54  9889               	bcf	3977,4,c	;volatile
 15761                           
 15762                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15763  002A56  0E2C               	movlw	44
 15764  002A58  0100               	movlb	0	; () banked
 15765  002A5A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15766  002A5C  0EA1               	movlw	161
 15767  002A5E                     u11027:
 15768  002A5E  2EE8               	decfsz	wreg,f,c
 15769  002A60  D7FE               	bra	u11027
 15770  002A62  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15771  002A64  D7FC               	bra	u11027
 15772  002A66  D000               	nop2	
 15773  002A68  0100               	movlb	0	; () banked
 15774  002A6A  4BB3               	infsnz	PlatformTest@i_1792& (0+255),f,b
 15775  002A6C  2BB4               	incf	(PlatformTest@i_1792+1)& (0+255),f,b
 15776  002A6E  D7DE               	goto	l8980
 15777  002A70                     l1397:
 15778  002A70  A281               	btfss	3969,1,c	;volatile
 15779  002A72  D760               	goto	l8938
 15780  002A74  D7FD               	goto	l1397
 15781  002A76                     l1382:
 15782                           
 15783                           ;Test.c: 508: }
 15784                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15785  002A76  9A8B               	bcf	3979,5,c	;volatile
 15786                           
 15787                           ;Test.c: 511: stopSignals();
 15788  002A78  EC96  F02D         	call	_stopSignals	;wreg free
 15789                           
 15790                           ;Test.c: 512: machine_state = Testing_state;
 15791  002A7C  0E03               	movlw	3
 15792  002A7E  0100               	movlb	0	; () banked
 15793  002A80  6FFC               	movwf	_machine_state& (0+255),b
 15794                           
 15795                           ; BSR set to: 0
 15796  002A82  0012               	return		;funcret
 15797  002A84                     __end_of_PlatformTest:
 15798                           	opt stack 0
 15799                           tblptru	equ	0xFF8
 15800                           tblptrh	equ	0xFF7
 15801                           tblptrl	equ	0xFF6
 15802                           tablat	equ	0xFF5
 15803                           prodh	equ	0xFF4
 15804                           prodl	equ	0xFF3
 15805                           intcon	equ	0xFF2
 15806                           intcon2	equ	0xFF1
 15807                           intcon3	equ	0xFF0
 15808                           postinc0	equ	0xFEE
 15809                           wreg	equ	0xFE8
 15810                           postdec1	equ	0xFE5
 15811                           fsr1l	equ	0xFE1
 15812                           indf2	equ	0xFDF
 15813                           postinc2	equ	0xFDE
 15814                           postdec2	equ	0xFDD
 15815                           fsr2h	equ	0xFDA
 15816                           fsr2l	equ	0xFD9
 15817                           status	equ	0xFD8
 15818                           
 15819 ;; *************** function _BothServos *****************
 15820 ;; Defined at:
 15821 ;;		line 351 in file "Test.c"
 15822 ;; Parameters:    Size  Location     Type
 15823 ;;		None
 15824 ;; Auto vars:     Size  Location     Type
 15825 ;;		None
 15826 ;; Return value:  Size  Location     Type
 15827 ;;                  1    wreg      void 
 15828 ;; Registers used:
 15829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15830 ;; Tracked objects:
 15831 ;;		On entry : 0/0
 15832 ;;		On exit  : 0/0
 15833 ;;		Unchanged: 0/0
 15834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;Total ram usage:        2 bytes
 15840 ;; Hardware stack levels used:    1
 15841 ;; Hardware stack levels required when called:   10
 15842 ;; This function calls:
 15843 ;;		_initServos
 15844 ;;		_lcdInst
 15845 ;;		_printf
 15846 ;;		_stopSignals
 15847 ;;		_updateServoPosition
 15848 ;; This function is called by:
 15849 ;;		_Test
 15850 ;; This function uses a non-reentrant model
 15851 ;;
 15852                           
 15853                           	psect	text50
 15854  002012                     __ptext50:
 15855                           	opt stack 0
 15856  002012                     _BothServos:
 15857                           	opt stack 19
 15858                           
 15859                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15860                           
 15861                           ; BSR set to: 0
 15862                           ;incstack = 0
 15863  002012  0E01               	movlw	1
 15864  002014  ECEF  F02D         	call	_lcdInst
 15865  002018  0E68               	movlw	104
 15866  00201A  0100               	movlb	0	; () banked
 15867  00201C  6FAB               	movwf	??_BothServos& (0+255),b
 15868  00201E  0EE4               	movlw	228
 15869  002020                     u11037:
 15870  002020  2EE8               	decfsz	wreg,f,c
 15871  002022  D7FE               	bra	u11037
 15872  002024  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15873  002026  D7FC               	bra	u11037
 15874  002028  F000               	nop	
 15875  00202A  0E80               	movlw	128
 15876  00202C  ECEF  F02D         	call	_lcdInst
 15877                           
 15878                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15879  002030  0EA7               	movlw	low STR_111
 15880  002032  0100               	movlb	0	; () banked
 15881  002034  6F8E               	movwf	printf@f& (0+255),b
 15882  002036  0EFC               	movlw	high STR_111
 15883  002038  0100               	movlb	0	; () banked
 15884  00203A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15885  00203C  ECED  F00D         	call	_printf	;wreg free
 15886                           
 15887                           ;Test.c: 354: TMR1ON = 1;
 15888  002040  80CD               	bsf	4045,0,c	;volatile
 15889                           
 15890                           ;Test.c: 355: TMR3ON = 1;
 15891  002042  80B1               	bsf	4017,0,c	;volatile
 15892                           
 15893                           ;Test.c: 356: machine_state = Sorting_state;
 15894  002044  0E01               	movlw	1
 15895  002046  0100               	movlb	0	; () banked
 15896  002048  6FFC               	movwf	_machine_state& (0+255),b
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;Test.c: 357: was_low_1 = 0;
 15900  00204A  0E00               	movlw	0
 15901  00204C  6E78               	movwf	_was_low_1+1,c	;volatile
 15902  00204E  0E00               	movlw	0
 15903  002050  6E77               	movwf	_was_low_1,c	;volatile
 15904                           
 15905                           ; BSR set to: 0
 15906                           ;Test.c: 358: was_low_3 = 0;
 15907  002052  0E00               	movlw	0
 15908  002054  6E7C               	movwf	_was_low_3+1,c	;volatile
 15909  002056  0E00               	movlw	0
 15910  002058  6E7B               	movwf	_was_low_3,c	;volatile
 15911                           
 15912                           ; BSR set to: 0
 15913                           ;Test.c: 364: initServos();
 15914  00205A  EC4D  F027         	call	_initServos	;wreg free
 15915                           
 15916                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15917  00205E  0E3D               	movlw	61
 15918  002060  0100               	movlb	0	; () banked
 15919  002062  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15920  002064  0EE1               	movlw	225
 15921  002066  0100               	movlb	0	; () banked
 15922  002068  6FAB               	movwf	??_BothServos& (0+255),b
 15923  00206A  0E3F               	movlw	63
 15924  00206C                     u11047:
 15925  00206C  2EE8               	decfsz	wreg,f,c
 15926  00206E  D7FE               	bra	u11047
 15927  002070  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15928  002072  D7FC               	bra	u11047
 15929  002074  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15930  002076  D7FA               	bra	u11047
 15931  002078  D000               	nop2	
 15932                           
 15933                           ;Test.c: 367: updateServoPosition(500, 1);
 15934  00207A  0E01               	movlw	1
 15935  00207C  0100               	movlb	0	; () banked
 15936  00207E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15937  002080  0EF4               	movlw	244
 15938  002082  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15939  002084  0E00               	movlw	0
 15940  002086  0100               	movlb	0	; () banked
 15941  002088  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15942  00208A  0E01               	movlw	1
 15943  00208C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15944  00208E  ECC8  F026         	call	_updateServoPosition	;wreg free
 15945                           
 15946                           ;Test.c: 368: updateServoPosition(1050, 3);
 15947  002092  0E04               	movlw	4
 15948  002094  0100               	movlb	0	; () banked
 15949  002096  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15950  002098  0E1A               	movlw	26
 15951  00209A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15952  00209C  0E00               	movlw	0
 15953  00209E  0100               	movlb	0	; () banked
 15954  0020A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15955  0020A2  0E03               	movlw	3
 15956  0020A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15957  0020A6  ECC8  F026         	call	_updateServoPosition	;wreg free
 15958                           
 15959                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15960  0020AA  0E1F               	movlw	31
 15961  0020AC  0100               	movlb	0	; () banked
 15962  0020AE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15963  0020B0  0E71               	movlw	113
 15964  0020B2  0100               	movlb	0	; () banked
 15965  0020B4  6FAB               	movwf	??_BothServos& (0+255),b
 15966  0020B6  0E1E               	movlw	30
 15967  0020B8                     u11057:
 15968  0020B8  2EE8               	decfsz	wreg,f,c
 15969  0020BA  D7FE               	bra	u11057
 15970  0020BC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15971  0020BE  D7FC               	bra	u11057
 15972  0020C0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15973  0020C2  D7FA               	bra	u11057
 15974  0020C4  F000               	nop	
 15975                           
 15976                           ;Test.c: 370: updateServoPosition(1260, 3);
 15977  0020C6  0E04               	movlw	4
 15978  0020C8  0100               	movlb	0	; () banked
 15979  0020CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15980  0020CC  0EEC               	movlw	236
 15981  0020CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15982  0020D0  0E00               	movlw	0
 15983  0020D2  0100               	movlb	0	; () banked
 15984  0020D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15985  0020D6  0E03               	movlw	3
 15986  0020D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15987  0020DA  ECC8  F026         	call	_updateServoPosition	;wreg free
 15988                           
 15989                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15990  0020DE  0E1D               	movlw	29
 15991  0020E0  0100               	movlb	0	; () banked
 15992  0020E2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15993  0020E4  0E69               	movlw	105
 15994  0020E6  0100               	movlb	0	; () banked
 15995  0020E8  6FAB               	movwf	??_BothServos& (0+255),b
 15996  0020EA  0EA5               	movlw	165
 15997  0020EC                     u11067:
 15998  0020EC  2EE8               	decfsz	wreg,f,c
 15999  0020EE  D7FE               	bra	u11067
 16000  0020F0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16001  0020F2  D7FC               	bra	u11067
 16002  0020F4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16003  0020F6  D7FA               	bra	u11067
 16004                           
 16005                           ;Test.c: 372: updateServoPosition(1050, 3);
 16006  0020F8  0E04               	movlw	4
 16007  0020FA  0100               	movlb	0	; () banked
 16008  0020FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16009  0020FE  0E1A               	movlw	26
 16010  002100  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16011  002102  0E00               	movlw	0
 16012  002104  0100               	movlb	0	; () banked
 16013  002106  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16014  002108  0E03               	movlw	3
 16015  00210A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16016  00210C  ECC8  F026         	call	_updateServoPosition	;wreg free
 16017                           
 16018                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 16019  002110  0E1F               	movlw	31
 16020  002112  0100               	movlb	0	; () banked
 16021  002114  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16022  002116  0E71               	movlw	113
 16023  002118  0100               	movlb	0	; () banked
 16024  00211A  6FAB               	movwf	??_BothServos& (0+255),b
 16025  00211C  0E1E               	movlw	30
 16026  00211E                     u11077:
 16027  00211E  2EE8               	decfsz	wreg,f,c
 16028  002120  D7FE               	bra	u11077
 16029  002122  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16030  002124  D7FC               	bra	u11077
 16031  002126  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16032  002128  D7FA               	bra	u11077
 16033  00212A  F000               	nop	
 16034                           
 16035                           ;Test.c: 375: updateServoPosition(850, 1);
 16036  00212C  0E03               	movlw	3
 16037  00212E  0100               	movlb	0	; () banked
 16038  002130  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16039  002132  0E52               	movlw	82
 16040  002134  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16041  002136  0E00               	movlw	0
 16042  002138  0100               	movlb	0	; () banked
 16043  00213A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16044  00213C  0E01               	movlw	1
 16045  00213E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16046  002140  ECC8  F026         	call	_updateServoPosition	;wreg free
 16047                           
 16048                           ;Test.c: 376: updateServoPosition(1050, 3);
 16049  002144  0E04               	movlw	4
 16050  002146  0100               	movlb	0	; () banked
 16051  002148  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16052  00214A  0E1A               	movlw	26
 16053  00214C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16054  00214E  0E00               	movlw	0
 16055  002150  0100               	movlb	0	; () banked
 16056  002152  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16057  002154  0E03               	movlw	3
 16058  002156  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16059  002158  ECC8  F026         	call	_updateServoPosition	;wreg free
 16060                           
 16061                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 16062  00215C  0E1F               	movlw	31
 16063  00215E  0100               	movlb	0	; () banked
 16064  002160  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16065  002162  0E71               	movlw	113
 16066  002164  0100               	movlb	0	; () banked
 16067  002166  6FAB               	movwf	??_BothServos& (0+255),b
 16068  002168  0E1E               	movlw	30
 16069  00216A                     u11087:
 16070  00216A  2EE8               	decfsz	wreg,f,c
 16071  00216C  D7FE               	bra	u11087
 16072  00216E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16073  002170  D7FC               	bra	u11087
 16074  002172  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16075  002174  D7FA               	bra	u11087
 16076  002176  F000               	nop	
 16077                           
 16078                           ;Test.c: 378: updateServoPosition(1260, 3);
 16079  002178  0E04               	movlw	4
 16080  00217A  0100               	movlb	0	; () banked
 16081  00217C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16082  00217E  0EEC               	movlw	236
 16083  002180  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16084  002182  0E00               	movlw	0
 16085  002184  0100               	movlb	0	; () banked
 16086  002186  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16087  002188  0E03               	movlw	3
 16088  00218A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16089  00218C  ECC8  F026         	call	_updateServoPosition	;wreg free
 16090                           
 16091                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16092  002190  0E1D               	movlw	29
 16093  002192  0100               	movlb	0	; () banked
 16094  002194  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16095  002196  0E69               	movlw	105
 16096  002198  0100               	movlb	0	; () banked
 16097  00219A  6FAB               	movwf	??_BothServos& (0+255),b
 16098  00219C  0EA5               	movlw	165
 16099  00219E                     u11097:
 16100  00219E  2EE8               	decfsz	wreg,f,c
 16101  0021A0  D7FE               	bra	u11097
 16102  0021A2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16103  0021A4  D7FC               	bra	u11097
 16104  0021A6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16105  0021A8  D7FA               	bra	u11097
 16106                           
 16107                           ;Test.c: 380: updateServoPosition(1050, 3);
 16108  0021AA  0E04               	movlw	4
 16109  0021AC  0100               	movlb	0	; () banked
 16110  0021AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16111  0021B0  0E1A               	movlw	26
 16112  0021B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16113  0021B4  0E00               	movlw	0
 16114  0021B6  0100               	movlb	0	; () banked
 16115  0021B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16116  0021BA  0E03               	movlw	3
 16117  0021BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16118  0021BE  ECC8  F026         	call	_updateServoPosition	;wreg free
 16119                           
 16120                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16121  0021C2  0E1F               	movlw	31
 16122  0021C4  0100               	movlb	0	; () banked
 16123  0021C6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16124  0021C8  0E71               	movlw	113
 16125  0021CA  0100               	movlb	0	; () banked
 16126  0021CC  6FAB               	movwf	??_BothServos& (0+255),b
 16127  0021CE  0E1E               	movlw	30
 16128  0021D0                     u11107:
 16129  0021D0  2EE8               	decfsz	wreg,f,c
 16130  0021D2  D7FE               	bra	u11107
 16131  0021D4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16132  0021D6  D7FC               	bra	u11107
 16133  0021D8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16134  0021DA  D7FA               	bra	u11107
 16135  0021DC  F000               	nop	
 16136                           
 16137                           ;Test.c: 383: updateServoPosition(500, 1);
 16138  0021DE  0E01               	movlw	1
 16139  0021E0  0100               	movlb	0	; () banked
 16140  0021E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16141  0021E4  0EF4               	movlw	244
 16142  0021E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16143  0021E8  0E00               	movlw	0
 16144  0021EA  0100               	movlb	0	; () banked
 16145  0021EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16146  0021EE  0E01               	movlw	1
 16147  0021F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16148  0021F2  ECC8  F026         	call	_updateServoPosition	;wreg free
 16149                           
 16150                           ;Test.c: 384: updateServoPosition(1050, 3);
 16151  0021F6  0E04               	movlw	4
 16152  0021F8  0100               	movlb	0	; () banked
 16153  0021FA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16154  0021FC  0E1A               	movlw	26
 16155  0021FE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16156  002200  0E00               	movlw	0
 16157  002202  0100               	movlb	0	; () banked
 16158  002204  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16159  002206  0E03               	movlw	3
 16160  002208  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16161  00220A  ECC8  F026         	call	_updateServoPosition	;wreg free
 16162                           
 16163                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16164  00220E  0E1F               	movlw	31
 16165  002210  0100               	movlb	0	; () banked
 16166  002212  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16167  002214  0E71               	movlw	113
 16168  002216  0100               	movlb	0	; () banked
 16169  002218  6FAB               	movwf	??_BothServos& (0+255),b
 16170  00221A  0E1E               	movlw	30
 16171  00221C                     u11117:
 16172  00221C  2EE8               	decfsz	wreg,f,c
 16173  00221E  D7FE               	bra	u11117
 16174  002220  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16175  002222  D7FC               	bra	u11117
 16176  002224  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16177  002226  D7FA               	bra	u11117
 16178  002228  F000               	nop	
 16179                           
 16180                           ;Test.c: 386: updateServoPosition(1260, 3);
 16181  00222A  0E04               	movlw	4
 16182  00222C  0100               	movlb	0	; () banked
 16183  00222E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16184  002230  0EEC               	movlw	236
 16185  002232  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16186  002234  0E00               	movlw	0
 16187  002236  0100               	movlb	0	; () banked
 16188  002238  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16189  00223A  0E03               	movlw	3
 16190  00223C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16191  00223E  ECC8  F026         	call	_updateServoPosition	;wreg free
 16192                           
 16193                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16194  002242  0E1D               	movlw	29
 16195  002244  0100               	movlb	0	; () banked
 16196  002246  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16197  002248  0E69               	movlw	105
 16198  00224A  0100               	movlb	0	; () banked
 16199  00224C  6FAB               	movwf	??_BothServos& (0+255),b
 16200  00224E  0EA5               	movlw	165
 16201  002250                     u11127:
 16202  002250  2EE8               	decfsz	wreg,f,c
 16203  002252  D7FE               	bra	u11127
 16204  002254  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16205  002256  D7FC               	bra	u11127
 16206  002258  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16207  00225A  D7FA               	bra	u11127
 16208                           
 16209                           ;Test.c: 388: updateServoPosition(1050, 3);
 16210  00225C  0E04               	movlw	4
 16211  00225E  0100               	movlb	0	; () banked
 16212  002260  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16213  002262  0E1A               	movlw	26
 16214  002264  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16215  002266  0E00               	movlw	0
 16216  002268  0100               	movlb	0	; () banked
 16217  00226A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16218  00226C  0E03               	movlw	3
 16219  00226E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16220  002270  ECC8  F026         	call	_updateServoPosition	;wreg free
 16221                           
 16222                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16223  002274  0E3D               	movlw	61
 16224  002276  0100               	movlb	0	; () banked
 16225  002278  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16226  00227A  0EE1               	movlw	225
 16227  00227C  0100               	movlb	0	; () banked
 16228  00227E  6FAB               	movwf	??_BothServos& (0+255),b
 16229  002280  0E3F               	movlw	63
 16230  002282                     u11137:
 16231  002282  2EE8               	decfsz	wreg,f,c
 16232  002284  D7FE               	bra	u11137
 16233  002286  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16234  002288  D7FC               	bra	u11137
 16235  00228A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16236  00228C  D7FA               	bra	u11137
 16237  00228E  D000               	nop2	
 16238                           
 16239                           ;Test.c: 391: updateServoPosition(1670, 1);
 16240  002290  0E06               	movlw	6
 16241  002292  0100               	movlb	0	; () banked
 16242  002294  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16243  002296  0E86               	movlw	134
 16244  002298  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16245  00229A  0E00               	movlw	0
 16246  00229C  0100               	movlb	0	; () banked
 16247  00229E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16248  0022A0  0E01               	movlw	1
 16249  0022A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16250  0022A4  ECC8  F026         	call	_updateServoPosition	;wreg free
 16251                           
 16252                           ;Test.c: 392: updateServoPosition(1050, 3);
 16253  0022A8  0E04               	movlw	4
 16254  0022AA  0100               	movlb	0	; () banked
 16255  0022AC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16256  0022AE  0E1A               	movlw	26
 16257  0022B0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16258  0022B2  0E00               	movlw	0
 16259  0022B4  0100               	movlb	0	; () banked
 16260  0022B6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16261  0022B8  0E03               	movlw	3
 16262  0022BA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16263  0022BC  ECC8  F026         	call	_updateServoPosition	;wreg free
 16264                           
 16265                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16266  0022C0  0E1F               	movlw	31
 16267  0022C2  0100               	movlb	0	; () banked
 16268  0022C4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16269  0022C6  0E71               	movlw	113
 16270  0022C8  0100               	movlb	0	; () banked
 16271  0022CA  6FAB               	movwf	??_BothServos& (0+255),b
 16272  0022CC  0E1E               	movlw	30
 16273  0022CE                     u11147:
 16274  0022CE  2EE8               	decfsz	wreg,f,c
 16275  0022D0  D7FE               	bra	u11147
 16276  0022D2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16277  0022D4  D7FC               	bra	u11147
 16278  0022D6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16279  0022D8  D7FA               	bra	u11147
 16280  0022DA  F000               	nop	
 16281                           
 16282                           ;Test.c: 394: updateServoPosition(1390, 3);
 16283  0022DC  0E05               	movlw	5
 16284  0022DE  0100               	movlb	0	; () banked
 16285  0022E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16286  0022E2  0E6E               	movlw	110
 16287  0022E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16288  0022E6  0E00               	movlw	0
 16289  0022E8  0100               	movlb	0	; () banked
 16290  0022EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16291  0022EC  0E03               	movlw	3
 16292  0022EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16293  0022F0  ECC8  F026         	call	_updateServoPosition	;wreg free
 16294                           
 16295                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16296  0022F4  0E1D               	movlw	29
 16297  0022F6  0100               	movlb	0	; () banked
 16298  0022F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16299  0022FA  0E69               	movlw	105
 16300  0022FC  0100               	movlb	0	; () banked
 16301  0022FE  6FAB               	movwf	??_BothServos& (0+255),b
 16302  002300  0EA5               	movlw	165
 16303  002302                     u11157:
 16304  002302  2EE8               	decfsz	wreg,f,c
 16305  002304  D7FE               	bra	u11157
 16306  002306  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16307  002308  D7FC               	bra	u11157
 16308  00230A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16309  00230C  D7FA               	bra	u11157
 16310                           
 16311                           ;Test.c: 396: updateServoPosition(1050, 3);
 16312  00230E  0E04               	movlw	4
 16313  002310  0100               	movlb	0	; () banked
 16314  002312  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16315  002314  0E1A               	movlw	26
 16316  002316  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16317  002318  0E00               	movlw	0
 16318  00231A  0100               	movlb	0	; () banked
 16319  00231C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16320  00231E  0E03               	movlw	3
 16321  002320  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16322  002322  ECC8  F026         	call	_updateServoPosition	;wreg free
 16323                           
 16324                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16325  002326  0E1F               	movlw	31
 16326  002328  0100               	movlb	0	; () banked
 16327  00232A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16328  00232C  0E71               	movlw	113
 16329  00232E  0100               	movlb	0	; () banked
 16330  002330  6FAB               	movwf	??_BothServos& (0+255),b
 16331  002332  0E1E               	movlw	30
 16332  002334                     u11167:
 16333  002334  2EE8               	decfsz	wreg,f,c
 16334  002336  D7FE               	bra	u11167
 16335  002338  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16336  00233A  D7FC               	bra	u11167
 16337  00233C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16338  00233E  D7FA               	bra	u11167
 16339  002340  F000               	nop	
 16340                           
 16341                           ;Test.c: 399: updateServoPosition(2400, 1);
 16342  002342  0E09               	movlw	9
 16343  002344  0100               	movlb	0	; () banked
 16344  002346  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16345  002348  0E60               	movlw	96
 16346  00234A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16347  00234C  0E00               	movlw	0
 16348  00234E  0100               	movlb	0	; () banked
 16349  002350  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16350  002352  0E01               	movlw	1
 16351  002354  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16352  002356  ECC8  F026         	call	_updateServoPosition	;wreg free
 16353                           
 16354                           ;Test.c: 400: updateServoPosition(1050, 3);
 16355  00235A  0E04               	movlw	4
 16356  00235C  0100               	movlb	0	; () banked
 16357  00235E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16358  002360  0E1A               	movlw	26
 16359  002362  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16360  002364  0E00               	movlw	0
 16361  002366  0100               	movlb	0	; () banked
 16362  002368  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16363  00236A  0E03               	movlw	3
 16364  00236C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16365  00236E  ECC8  F026         	call	_updateServoPosition	;wreg free
 16366                           
 16367                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16368  002372  0E1F               	movlw	31
 16369  002374  0100               	movlb	0	; () banked
 16370  002376  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16371  002378  0E71               	movlw	113
 16372  00237A  0100               	movlb	0	; () banked
 16373  00237C  6FAB               	movwf	??_BothServos& (0+255),b
 16374  00237E  0E1E               	movlw	30
 16375  002380                     u11177:
 16376  002380  2EE8               	decfsz	wreg,f,c
 16377  002382  D7FE               	bra	u11177
 16378  002384  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16379  002386  D7FC               	bra	u11177
 16380  002388  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16381  00238A  D7FA               	bra	u11177
 16382  00238C  F000               	nop	
 16383                           
 16384                           ;Test.c: 402: updateServoPosition(1390, 3);
 16385  00238E  0E05               	movlw	5
 16386  002390  0100               	movlb	0	; () banked
 16387  002392  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16388  002394  0E6E               	movlw	110
 16389  002396  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16390  002398  0E00               	movlw	0
 16391  00239A  0100               	movlb	0	; () banked
 16392  00239C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16393  00239E  0E03               	movlw	3
 16394  0023A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16395  0023A2  ECC8  F026         	call	_updateServoPosition	;wreg free
 16396                           
 16397                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16398  0023A6  0E1D               	movlw	29
 16399  0023A8  0100               	movlb	0	; () banked
 16400  0023AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16401  0023AC  0E69               	movlw	105
 16402  0023AE  0100               	movlb	0	; () banked
 16403  0023B0  6FAB               	movwf	??_BothServos& (0+255),b
 16404  0023B2  0EA5               	movlw	165
 16405  0023B4                     u11187:
 16406  0023B4  2EE8               	decfsz	wreg,f,c
 16407  0023B6  D7FE               	bra	u11187
 16408  0023B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16409  0023BA  D7FC               	bra	u11187
 16410  0023BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16411  0023BE  D7FA               	bra	u11187
 16412                           
 16413                           ;Test.c: 404: updateServoPosition(1050, 3);
 16414  0023C0  0E04               	movlw	4
 16415  0023C2  0100               	movlb	0	; () banked
 16416  0023C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16417  0023C6  0E1A               	movlw	26
 16418  0023C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16419  0023CA  0E00               	movlw	0
 16420  0023CC  0100               	movlb	0	; () banked
 16421  0023CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16422  0023D0  0E03               	movlw	3
 16423  0023D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16424  0023D4  ECC8  F026         	call	_updateServoPosition	;wreg free
 16425                           
 16426                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16427  0023D8  0E1F               	movlw	31
 16428  0023DA  0100               	movlb	0	; () banked
 16429  0023DC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16430  0023DE  0E71               	movlw	113
 16431  0023E0  0100               	movlb	0	; () banked
 16432  0023E2  6FAB               	movwf	??_BothServos& (0+255),b
 16433  0023E4  0E1E               	movlw	30
 16434  0023E6                     u11197:
 16435  0023E6  2EE8               	decfsz	wreg,f,c
 16436  0023E8  D7FE               	bra	u11197
 16437  0023EA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16438  0023EC  D7FC               	bra	u11197
 16439  0023EE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16440  0023F0  D7FA               	bra	u11197
 16441  0023F2  F000               	nop	
 16442                           
 16443                           ;Test.c: 407: stopSignals();
 16444  0023F4  EC96  F02D         	call	_stopSignals	;wreg free
 16445                           
 16446                           ;Test.c: 408: machine_state = Testing_state;
 16447  0023F8  0E03               	movlw	3
 16448  0023FA  0100               	movlb	0	; () banked
 16449  0023FC  6FFC               	movwf	_machine_state& (0+255),b
 16450                           
 16451                           ; BSR set to: 0
 16452  0023FE  0012               	return		;funcret
 16453  002400                     __end_of_BothServos:
 16454                           	opt stack 0
 16455                           tblptru	equ	0xFF8
 16456                           tblptrh	equ	0xFF7
 16457                           tblptrl	equ	0xFF6
 16458                           tablat	equ	0xFF5
 16459                           prodh	equ	0xFF4
 16460                           prodl	equ	0xFF3
 16461                           intcon	equ	0xFF2
 16462                           intcon2	equ	0xFF1
 16463                           intcon3	equ	0xFF0
 16464                           postinc0	equ	0xFEE
 16465                           wreg	equ	0xFE8
 16466                           postdec1	equ	0xFE5
 16467                           fsr1l	equ	0xFE1
 16468                           indf2	equ	0xFDF
 16469                           postinc2	equ	0xFDE
 16470                           postdec2	equ	0xFDD
 16471                           fsr2h	equ	0xFDA
 16472                           fsr2l	equ	0xFD9
 16473                           status	equ	0xFD8
 16474                           
 16475 ;; *************** function _stopSignals *****************
 16476 ;; Defined at:
 16477 ;;		line 71 in file "main.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;		None
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;		None
 16482 ;; Return value:  Size  Location     Type
 16483 ;;                  1    wreg      void 
 16484 ;; Registers used:
 16485 ;;		wreg, status,2
 16486 ;; Tracked objects:
 16487 ;;		On entry : 0/0
 16488 ;;		On exit  : 0/0
 16489 ;;		Unchanged: 0/0
 16490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16495 ;;Total ram usage:        0 bytes
 16496 ;; Hardware stack levels used:    1
 16497 ;; Hardware stack levels required when called:    7
 16498 ;; This function calls:
 16499 ;;		Nothing
 16500 ;; This function is called by:
 16501 ;;		_main
 16502 ;;		_BothServos
 16503 ;;		_PlatformTest
 16504 ;;		_arm
 16505 ;; This function uses a non-reentrant model
 16506 ;;
 16507                           
 16508                           	psect	text51
 16509  005B2C                     __ptext51:
 16510                           	opt stack 0
 16511  005B2C                     _stopSignals:
 16512                           	opt stack 23
 16513                           
 16514                           ;main.c: 72: LATA = 0x00;
 16515                           
 16516                           ; BSR set to: 0
 16517                           ;incstack = 0
 16518  005B2C  0E00               	movlw	0
 16519  005B2E  6E89               	movwf	3977,c	;volatile
 16520                           
 16521                           ;main.c: 73: LATB = 0x00;
 16522  005B30  0E00               	movlw	0
 16523  005B32  6E8A               	movwf	3978,c	;volatile
 16524                           
 16525                           ;main.c: 74: LATC = 0x00;
 16526  005B34  0E00               	movlw	0
 16527  005B36  6E8B               	movwf	3979,c	;volatile
 16528                           
 16529                           ;main.c: 75: LATD = 0x00;
 16530  005B38  0E00               	movlw	0
 16531  005B3A  6E8C               	movwf	3980,c	;volatile
 16532                           
 16533                           ;main.c: 76: LATE = 0x00;
 16534  005B3C  0E00               	movlw	0
 16535  005B3E  6E8D               	movwf	3981,c	;volatile
 16536                           
 16537                           ;main.c: 77: TMR1ON = 0;
 16538  005B40  90CD               	bcf	4045,0,c	;volatile
 16539                           
 16540                           ;main.c: 78: TMR2ON = 0;
 16541  005B42  94CA               	bcf	4042,2,c	;volatile
 16542                           
 16543                           ;main.c: 79: TMR3ON = 0;
 16544  005B44  90B1               	bcf	4017,0,c	;volatile
 16545  005B46  0012               	return		;funcret
 16546  005B48                     __end_of_stopSignals:
 16547                           	opt stack 0
 16548                           tblptru	equ	0xFF8
 16549                           tblptrh	equ	0xFF7
 16550                           tblptrl	equ	0xFF6
 16551                           tablat	equ	0xFF5
 16552                           prodh	equ	0xFF4
 16553                           prodl	equ	0xFF3
 16554                           intcon	equ	0xFF2
 16555                           intcon2	equ	0xFF1
 16556                           intcon3	equ	0xFF0
 16557                           postinc0	equ	0xFEE
 16558                           wreg	equ	0xFE8
 16559                           postdec1	equ	0xFE5
 16560                           fsr1l	equ	0xFE1
 16561                           indf2	equ	0xFDF
 16562                           postinc2	equ	0xFDE
 16563                           postdec2	equ	0xFDD
 16564                           fsr2h	equ	0xFDA
 16565                           fsr2l	equ	0xFD9
 16566                           status	equ	0xFD8
 16567                           
 16568 ;; *************** function _initServos *****************
 16569 ;; Defined at:
 16570 ;;		line 464 in file "sort.c"
 16571 ;; Parameters:    Size  Location     Type
 16572 ;;		None
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;		None
 16575 ;; Return value:  Size  Location     Type
 16576 ;;                  1    wreg      void 
 16577 ;; Registers used:
 16578 ;;		wreg, status,2, status,0, cstack
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/0
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16588 ;;Total ram usage:        1 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:    8
 16591 ;; This function calls:
 16592 ;;		_updateServoPosition
 16593 ;; This function is called by:
 16594 ;;		_Loading
 16595 ;;		_BothServos
 16596 ;; This function uses a non-reentrant model
 16597 ;;
 16598                           
 16599                           	psect	text52
 16600  004E9A                     __ptext52:
 16601                           	opt stack 0
 16602  004E9A                     _initServos:
 16603                           	opt stack 20
 16604                           
 16605                           ;sort.c: 466: updateServoPosition(1200, 1);
 16606                           
 16607                           ;incstack = 0
 16608  004E9A  0E04               	movlw	4
 16609  004E9C  0100               	movlb	0	; () banked
 16610  004E9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16611  004EA0  0EB0               	movlw	176
 16612  004EA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16613  004EA4  0E00               	movlw	0
 16614  004EA6  0100               	movlb	0	; () banked
 16615  004EA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16616  004EAA  0E01               	movlw	1
 16617  004EAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16618  004EAE  ECC8  F026         	call	_updateServoPosition	;wreg free
 16619                           
 16620                           ;sort.c: 467: updateServoPosition(1050, 3);
 16621  004EB2  0E04               	movlw	4
 16622  004EB4  0100               	movlb	0	; () banked
 16623  004EB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16624  004EB8  0E1A               	movlw	26
 16625  004EBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16626  004EBC  0E00               	movlw	0
 16627  004EBE  0100               	movlb	0	; () banked
 16628  004EC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16629  004EC2  0E03               	movlw	3
 16630  004EC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16631  004EC6  ECC8  F026         	call	_updateServoPosition	;wreg free
 16632                           
 16633                           ;sort.c: 468: TMR1ON = 1;
 16634  004ECA  80CD               	bsf	4045,0,c	;volatile
 16635                           
 16636                           ;sort.c: 469: was_low_1 = 0;
 16637  004ECC  0E00               	movlw	0
 16638  004ECE  6E78               	movwf	_was_low_1+1,c	;volatile
 16639  004ED0  0E00               	movlw	0
 16640  004ED2  6E77               	movwf	_was_low_1,c	;volatile
 16641                           
 16642                           ;sort.c: 471: _delay((unsigned long)((5)*(32000000/4000.0)));
 16643  004ED4  0E34               	movlw	52
 16644  004ED6  0100               	movlb	0	; () banked
 16645  004ED8  6F88               	movwf	??_initServos& (0+255),b
 16646  004EDA  0EF1               	movlw	241
 16647  004EDC                     u11207:
 16648  004EDC  2EE8               	decfsz	wreg,f,c
 16649  004EDE  D7FE               	bra	u11207
 16650  004EE0  2F88               	decfsz	??_initServos& (0+255),f,b
 16651  004EE2  D7FC               	bra	u11207
 16652  004EE4  D000               	nop2	
 16653                           
 16654                           ;sort.c: 473: TMR3ON = 1;
 16655  004EE6  80B1               	bsf	4017,0,c	;volatile
 16656                           
 16657                           ;sort.c: 474: was_low_3 = 0;
 16658  004EE8  0E00               	movlw	0
 16659  004EEA  6E7C               	movwf	_was_low_3+1,c	;volatile
 16660  004EEC  0E00               	movlw	0
 16661  004EEE  6E7B               	movwf	_was_low_3,c	;volatile
 16662                           
 16663                           ;sort.c: 477: _delay((unsigned long)((1)*(32000000/4000.0)));
 16664  004EF0  0E0B               	movlw	11
 16665  004EF2  0100               	movlb	0	; () banked
 16666  004EF4  6F88               	movwf	??_initServos& (0+255),b
 16667  004EF6  0E62               	movlw	98
 16668  004EF8                     u11217:
 16669  004EF8  2EE8               	decfsz	wreg,f,c
 16670  004EFA  D7FE               	bra	u11217
 16671  004EFC  2F88               	decfsz	??_initServos& (0+255),f,b
 16672  004EFE  D7FC               	bra	u11217
 16673  004F00  F000               	nop	
 16674                           
 16675                           ;sort.c: 478: LATBbits.LATB3 = 0;
 16676  004F02  968A               	bcf	3978,3,c	;volatile
 16677                           
 16678                           ;sort.c: 479: TMR2ON = 1;
 16679  004F04  84CA               	bsf	4042,2,c	;volatile
 16680                           
 16681                           ;sort.c: 480: was_low_2 = 0;
 16682  004F06  0E00               	movlw	0
 16683  004F08  6E7A               	movwf	_was_low_2+1,c	;volatile
 16684  004F0A  0E00               	movlw	0
 16685  004F0C  6E79               	movwf	_was_low_2,c	;volatile
 16686                           
 16687                           ;sort.c: 482: LATCbits.LATC0 = 1;
 16688  004F0E  808B               	bsf	3979,0,c	;volatile
 16689  004F10  0012               	return		;funcret
 16690  004F12                     __end_of_initServos:
 16691                           	opt stack 0
 16692                           tblptru	equ	0xFF8
 16693                           tblptrh	equ	0xFF7
 16694                           tblptrl	equ	0xFF6
 16695                           tablat	equ	0xFF5
 16696                           prodh	equ	0xFF4
 16697                           prodl	equ	0xFF3
 16698                           intcon	equ	0xFF2
 16699                           intcon2	equ	0xFF1
 16700                           intcon3	equ	0xFF0
 16701                           postinc0	equ	0xFEE
 16702                           wreg	equ	0xFE8
 16703                           postdec1	equ	0xFE5
 16704                           fsr1l	equ	0xFE1
 16705                           indf2	equ	0xFDF
 16706                           postinc2	equ	0xFDE
 16707                           postdec2	equ	0xFDD
 16708                           fsr2h	equ	0xFDA
 16709                           fsr2l	equ	0xFD9
 16710                           status	equ	0xFD8
 16711                           
 16712 ;; *************** function _updateServoPosition *****************
 16713 ;; Defined at:
 16714 ;;		line 550 in file "sort.c"
 16715 ;; Parameters:    Size  Location     Type
 16716 ;;  time_us         2    0[BANK0 ] int 
 16717 ;;  timer           2    2[BANK0 ] int 
 16718 ;; Auto vars:     Size  Location     Type
 16719 ;;  my_time         2    6[BANK0 ] unsigned int 
 16720 ;; Return value:  Size  Location     Type
 16721 ;;                  1    wreg      void 
 16722 ;; Registers used:
 16723 ;;		wreg, status,2, status,0
 16724 ;; Tracked objects:
 16725 ;;		On entry : 0/0
 16726 ;;		On exit  : 0/0
 16727 ;;		Unchanged: 0/0
 16728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16730 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16731 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16732 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16733 ;;Total ram usage:        8 bytes
 16734 ;; Hardware stack levels used:    1
 16735 ;; Hardware stack levels required when called:    7
 16736 ;; This function calls:
 16737 ;;		Nothing
 16738 ;; This function is called by:
 16739 ;;		_Distribution
 16740 ;;		_initServos
 16741 ;;		_actuatorTest
 16742 ;;		_BothServos
 16743 ;; This function uses a non-reentrant model
 16744 ;;
 16745                           
 16746                           	psect	text53
 16747  004D90                     __ptext53:
 16748                           	opt stack 0
 16749  004D90                     _updateServoPosition:
 16750                           	opt stack 20
 16751                           
 16752                           ;sort.c: 551: unsigned int my_time = 65535 - time_us;
 16753                           
 16754                           ;incstack = 0
 16755  004D90  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16756  004D94  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16757  004D98  0100               	movlb	0	; () banked
 16758  004D9A  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16759  004D9C  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16760  004D9E  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16761  004DA0  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16762  004DA2  0EFF               	movlw	255
 16763  004DA4  0100               	movlb	0	; () banked
 16764  004DA6  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16765  004DA8  0100               	movlb	0	; () banked
 16766  004DAA  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16767  004DAC  0EFF               	movlw	255
 16768  004DAE  0100               	movlb	0	; () banked
 16769  004DB0  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16770  004DB2  0100               	movlb	0	; () banked
 16771  004DB4  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16772                           
 16773                           ;sort.c: 552: switch(timer){
 16774  004DB6  D01D               	goto	l6876
 16775  004DB8                     l6870:
 16776                           
 16777                           ; BSR set to: 0
 16778                           ;sort.c: 554: servoTimes[0] = my_time >> 8;
 16779  004DB8  0100               	movlb	0	; () banked
 16780  004DBA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16781  004DBC  0101               	movlb	1	; () banked
 16782  004DBE  6F1C               	movwf	_servoTimes& (0+255),b
 16783  004DC0  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 16784                           
 16785                           ;sort.c: 555: servoTimes[1] = my_time & 0xFF;
 16786  004DC2  0100               	movlb	0	; () banked
 16787  004DC4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16788  004DC6  0101               	movlb	1	; () banked
 16789  004DC8  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 16790  004DCA  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 16791                           
 16792                           ; BSR set to: 1
 16793                           ;sort.c: 557: pan_servo_state = time_us;
 16794  004DCC  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16795  004DD0  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16796  004DD4                     l923:
 16797                           
 16798                           ;sort.c: 559: servoTimes[2] = my_time >> 8;
 16799  004DD4  0100               	movlb	0	; () banked
 16800  004DD6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16801  004DD8  0101               	movlb	1	; () banked
 16802  004DDA  6F20               	movwf	(_servoTimes+4)& (0+255),b
 16803  004DDC  6B21               	clrf	(_servoTimes+5)& (0+255),b
 16804                           
 16805                           ;sort.c: 560: servoTimes[3] = my_time & 0xFF;
 16806  004DDE  0100               	movlb	0	; () banked
 16807  004DE0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16808  004DE2  0101               	movlb	1	; () banked
 16809  004DE4  6F22               	movwf	(_servoTimes+6)& (0+255),b
 16810  004DE6  6B23               	clrf	(_servoTimes+7)& (0+255),b
 16811                           
 16812                           ; BSR set to: 1
 16813                           ;sort.c: 562: tilt_servo_state = time_us;
 16814  004DE8  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16815  004DEC  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16816                           
 16817                           ;sort.c: 563: }
 16818  004DF0  0012               	return	
 16819  004DF2                     l6876:
 16820  004DF2  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16821  004DF6  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16822                           
 16823                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16824                           ; Switch size 1, requested type "space"
 16825                           ; Number of cases is 1, Range of values is 0 to 0
 16826                           ; switch strategies available:
 16827                           ; Name         Instructions Cycles
 16828                           ; simple_byte            4     3 (average)
 16829                           ;	Chosen strategy is simple_byte
 16830  004DFA  0100               	movlb	0	; () banked
 16831  004DFC  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16832  004DFE  0A00               	xorlw	0	; case 0
 16833  004E00  A4D8               	btfss	status,2,c
 16834  004E02  0012               	return	
 16835                           
 16836                           ; BSR set to: 0
 16837                           ; Switch size 1, requested type "space"
 16838                           ; Number of cases is 2, Range of values is 1 to 3
 16839                           ; switch strategies available:
 16840                           ; Name         Instructions Cycles
 16841                           ; simple_byte            7     4 (average)
 16842                           ;	Chosen strategy is simple_byte
 16843  004E04  0100               	movlb	0	; () banked
 16844  004E06  5184               	movf	??_updateServoPosition& (0+255),w,b
 16845  004E08  0A01               	xorlw	1	; case 1
 16846  004E0A  B4D8               	btfsc	status,2,c
 16847  004E0C  D7D5               	goto	l6870
 16848  004E0E  0A02               	xorlw	2	; case 3
 16849  004E10  A4D8               	btfss	status,2,c
 16850  004E12  0012               	return	
 16851  004E14  D7DF               	goto	l923
 16852  004E16                     __end_of_updateServoPosition:
 16853                           	opt stack 0
 16854                           tblptru	equ	0xFF8
 16855                           tblptrh	equ	0xFF7
 16856                           tblptrl	equ	0xFF6
 16857                           tablat	equ	0xFF5
 16858                           prodh	equ	0xFF4
 16859                           prodl	equ	0xFF3
 16860                           intcon	equ	0xFF2
 16861                           intcon2	equ	0xFF1
 16862                           intcon3	equ	0xFF0
 16863                           postinc0	equ	0xFEE
 16864                           wreg	equ	0xFE8
 16865                           postdec1	equ	0xFE5
 16866                           fsr1l	equ	0xFE1
 16867                           indf2	equ	0xFDF
 16868                           postinc2	equ	0xFDE
 16869                           postdec2	equ	0xFDD
 16870                           fsr2h	equ	0xFDA
 16871                           fsr2l	equ	0xFD9
 16872                           status	equ	0xFD8
 16873                           
 16874 ;; *************** function _BlockerTest *****************
 16875 ;; Defined at:
 16876 ;;		line 581 in file "Test.c"
 16877 ;; Parameters:    Size  Location     Type
 16878 ;;		None
 16879 ;; Auto vars:     Size  Location     Type
 16880 ;;  i               2   45[BANK0 ] int 
 16881 ;;  cond_flag       2   51[BANK0 ] int 
 16882 ;;  cam_flag        2   49[BANK0 ] int 
 16883 ;;  res             2   47[BANK0 ] int 
 16884 ;; Return value:  Size  Location     Type
 16885 ;;                  1    wreg      void 
 16886 ;; Registers used:
 16887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16888 ;; Tracked objects:
 16889 ;;		On entry : 0/0
 16890 ;;		On exit  : 0/0
 16891 ;;		Unchanged: 0/0
 16892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16894 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16896 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16897 ;;Total ram usage:       10 bytes
 16898 ;; Hardware stack levels used:    1
 16899 ;; Hardware stack levels required when called:   10
 16900 ;; This function calls:
 16901 ;;		_lcdInst
 16902 ;;		_printf
 16903 ;;		_readADC
 16904 ;; This function is called by:
 16905 ;;		_Test
 16906 ;; This function uses a non-reentrant model
 16907 ;;
 16908                           
 16909                           	psect	text54
 16910  003D90                     __ptext54:
 16911                           	opt stack 0
 16912  003D90                     _BlockerTest:
 16913                           	opt stack 19
 16914                           
 16915                           ;Test.c: 582: readADC(2);
 16916                           
 16917                           ;incstack = 0
 16918  003D90  0E02               	movlw	2
 16919  003D92  ECDA  F02C         	call	_readADC
 16920                           
 16921                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16922  003D96  50C3               	movf	4035,w,c	;volatile
 16923  003D98  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16924  003D9C  0100               	movlb	0	; () banked
 16925  003D9E  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16926  003DA0  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16927  003DA4  0100               	movlb	0	; () banked
 16928  003DA6  6BAB               	clrf	??_BlockerTest& (0+255),b
 16929  003DA8  0100               	movlb	0	; () banked
 16930  003DAA  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16931  003DAC  0100               	movlb	0	; () banked
 16932  003DAE  6FAF               	movwf	BlockerTest@res& (0+255),b
 16933  003DB0  0100               	movlb	0	; () banked
 16934  003DB2  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16935  003DB4  0100               	movlb	0	; () banked
 16936  003DB6  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16937                           
 16938                           ; BSR set to: 0
 16939                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16940  003DB8  0E01               	movlw	1
 16941  003DBA  ECEF  F02D         	call	_lcdInst
 16942  003DBE  0E68               	movlw	104
 16943  003DC0  0100               	movlb	0	; () banked
 16944  003DC2  6FAB               	movwf	??_BlockerTest& (0+255),b
 16945  003DC4  0EE4               	movlw	228
 16946  003DC6                     u11227:
 16947  003DC6  2EE8               	decfsz	wreg,f,c
 16948  003DC8  D7FE               	bra	u11227
 16949  003DCA  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16950  003DCC  D7FC               	bra	u11227
 16951  003DCE  F000               	nop	
 16952  003DD0  0E80               	movlw	128
 16953  003DD2  ECEF  F02D         	call	_lcdInst
 16954                           
 16955                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16956  003DD6  0E6D               	movlw	low STR_123
 16957  003DD8  0100               	movlb	0	; () banked
 16958  003DDA  6F8E               	movwf	printf@f& (0+255),b
 16959  003DDC  0EFE               	movlw	high STR_123
 16960  003DDE  0100               	movlb	0	; () banked
 16961  003DE0  6F8F               	movwf	(printf@f+1)& (0+255),b
 16962  003DE2  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16963  003DE6  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16964  003DEA  ECED  F00D         	call	_printf	;wreg free
 16965                           
 16966                           ;Test.c: 587: lcdInst(0b11000000);;
 16967  003DEE  0EC0               	movlw	192
 16968  003DF0  ECEF  F02D         	call	_lcdInst
 16969                           
 16970                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 16971  003DF4  0E1C               	movlw	low STR_124
 16972  003DF6  0100               	movlb	0	; () banked
 16973  003DF8  6F8E               	movwf	printf@f& (0+255),b
 16974  003DFA  0EFB               	movlw	high STR_124
 16975  003DFC  0100               	movlb	0	; () banked
 16976  003DFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 16977  003E00  ECED  F00D         	call	_printf	;wreg free
 16978                           
 16979                           ;Test.c: 589: int cam_flag = 1;
 16980  003E04  0E00               	movlw	0
 16981  003E06  0100               	movlb	0	; () banked
 16982  003E08  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16983  003E0A  0E01               	movlw	1
 16984  003E0C  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16985                           
 16986                           ; BSR set to: 0
 16987                           ;Test.c: 590: int cond_flag = 0;
 16988  003E0E  0E00               	movlw	0
 16989  003E10  0100               	movlb	0	; () banked
 16990  003E12  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16991  003E14  0E00               	movlw	0
 16992  003E16  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 16996                           
 16997                           ;Test.c: 592: while(1){
 16998  003E18  D023               	goto	l9118
 16999  003E1A                     l9110:
 17000                           
 17001                           ;Test.c: 594: readADC(2);
 17002  003E1A  0E02               	movlw	2
 17003  003E1C  ECDA  F02C         	call	_readADC
 17004                           
 17005                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 17006  003E20  50C3               	movf	4035,w,c	;volatile
 17007  003E22  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17008  003E26  0100               	movlb	0	; () banked
 17009  003E28  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17010  003E2A  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17011  003E2E  0100               	movlb	0	; () banked
 17012  003E30  6BAB               	clrf	??_BlockerTest& (0+255),b
 17013  003E32  0100               	movlb	0	; () banked
 17014  003E34  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17015  003E36  0100               	movlb	0	; () banked
 17016  003E38  6FAF               	movwf	BlockerTest@res& (0+255),b
 17017  003E3A  0100               	movlb	0	; () banked
 17018  003E3C  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17019  003E3E  0100               	movlb	0	; () banked
 17020  003E40  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17021                           
 17022                           ; BSR set to: 0
 17023                           ;Test.c: 596: lcdInst(0b10000000);;
 17024  003E42  0E80               	movlw	128
 17025  003E44  ECEF  F02D         	call	_lcdInst
 17026                           
 17027                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 17028  003E48  0E6D               	movlw	low STR_123
 17029  003E4A  0100               	movlb	0	; () banked
 17030  003E4C  6F8E               	movwf	printf@f& (0+255),b
 17031  003E4E  0EFE               	movlw	high STR_123
 17032  003E50  0100               	movlb	0	; () banked
 17033  003E52  6F8F               	movwf	(printf@f+1)& (0+255),b
 17034  003E54  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17035  003E58  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17036  003E5C  ECED  F00D         	call	_printf	;wreg free
 17037  003E60                     l9118:
 17038  003E60  A281               	btfss	3969,1,c	;volatile
 17039  003E62  D7DB               	goto	l9110
 17040                           
 17041                           ;Test.c: 598: }
 17042                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 17043  003E64  3881               	swapf	3969,w,c	;volatile
 17044  003E66  0B0F               	andlw	15
 17045  003E68  0A0F               	xorlw	15
 17046  003E6A  B4D8               	btfsc	status,2,c
 17047  003E6C  0012               	return	
 17048                           
 17049                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 17050                           
 17051                           ;Test.c: 601: }
 17052                           
 17053                           ;Test.c: 600: break;
 17054  003E6E  3881               	swapf	3969,w,c	;volatile
 17055  003E70  0B0F               	andlw	15
 17056  003E72  06E8               	decf	wreg,f,c
 17057  003E74  A4D8               	btfss	status,2,c
 17058  003E76  D016               	goto	l9136
 17059                           
 17060                           ;Test.c: 603: if(cond_flag){
 17061  003E78  0100               	movlb	0	; () banked
 17062  003E7A  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17063  003E7C  0100               	movlb	0	; () banked
 17064  003E7E  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17065  003E80  B4D8               	btfsc	status,2,c
 17066  003E82  D007               	goto	l1443
 17067                           
 17068                           ; BSR set to: 0
 17069                           ;Test.c: 604: LATAbits.LATA3 = 1;
 17070  003E84  8689               	bsf	3977,3,c	;volatile
 17071  003E86  D006               	goto	l9134
 17072  003E88                     u8211:
 17073  003E88  0E01               	movlw	1
 17074  003E8A                     u8220:
 17075  003E8A  0100               	movlb	0	; () banked
 17076  003E8C  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17077  003E8E  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17078                           
 17079                           ;Test.c: 606: }
 17080  003E90  D05F               	goto	l9164
 17081  003E92                     l1443:
 17082                           
 17083                           ; BSR set to: 0
 17084                           ;Test.c: 607: else{
 17085                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17086  003E92  9689               	bcf	3977,3,c	;volatile
 17087  003E94                     l9134:
 17088                           
 17089                           ; BSR set to: 0
 17090                           ;Test.c: 609: cond_flag = !cond_flag;
 17091  003E94  0100               	movlb	0	; () banked
 17092  003E96  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17093  003E98  0100               	movlb	0	; () banked
 17094  003E9A  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17095  003E9C  B4D8               	btfsc	status,2,c
 17096  003E9E  D7F4               	goto	u8211
 17097  003EA0  0E00               	movlw	0
 17098  003EA2  D7F3               	goto	u8220
 17099  003EA4                     l9136:
 17100                           
 17101                           ;Test.c: 612: else{
 17102                           ;Test.c: 613: if(cam_flag){
 17103  003EA4  0100               	movlb	0	; () banked
 17104  003EA6  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17105  003EA8  0100               	movlb	0	; () banked
 17106  003EAA  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17107  003EAC  B4D8               	btfsc	status,2,c
 17108  003EAE  D007               	goto	l9142
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17112  003EB0  808B               	bsf	3979,0,c	;volatile
 17113  003EB2  D023               	goto	l9154
 17114  003EB4                     u8261:
 17115  003EB4  0E01               	movlw	1
 17116  003EB6                     u8270:
 17117  003EB6  0100               	movlb	0	; () banked
 17118  003EB8  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17119  003EBA  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17120                           
 17121                           ;Test.c: 616: }
 17122  003EBC  D049               	goto	l9164
 17123  003EBE                     l9142:
 17124                           
 17125                           ; BSR set to: 0
 17126                           ;Test.c: 617: else{
 17127                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17128  003EBE  0E00               	movlw	0
 17129  003EC0  0100               	movlb	0	; () banked
 17130  003EC2  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17131  003EC4  0E00               	movlw	0
 17132  003EC6  6FAD               	movwf	BlockerTest@i& (0+255),b
 17133  003EC8                     l9144:
 17134                           
 17135                           ; BSR set to: 0
 17136  003EC8  0100               	movlb	0	; () banked
 17137  003ECA  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17138  003ECC  D008               	goto	l1448
 17139  003ECE  0E88               	movlw	136
 17140  003ED0  0100               	movlb	0	; () banked
 17141  003ED2  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17142  003ED4  0E13               	movlw	19
 17143  003ED6  0100               	movlb	0	; () banked
 17144  003ED8  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17145  003EDA  B0D8               	btfsc	status,0,c
 17146  003EDC  D00D               	goto	l1449
 17147  003EDE                     l1448:
 17148                           
 17149                           ; BSR set to: 0
 17150                           ;Test.c: 619: {
 17151                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17152  003EDE  808B               	bsf	3979,0,c	;volatile
 17153                           
 17154                           ; BSR set to: 0
 17155                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17156  003EE0  0E1A               	movlw	26
 17157  003EE2                     u11237:
 17158  003EE2  2EE8               	decfsz	wreg,f,c
 17159  003EE4  D7FE               	bra	u11237
 17160  003EE6  D000               	nop2	
 17161                           
 17162                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17163  003EE8  908B               	bcf	3979,0,c	;volatile
 17164                           
 17165                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17166  003EEA  0EF0               	movlw	240
 17167  003EEC                     u11247:
 17168  003EEC  2EE8               	decfsz	wreg,f,c
 17169  003EEE  D7FE               	bra	u11247
 17170  003EF0  0100               	movlb	0	; () banked
 17171  003EF2  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17172  003EF4  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17173  003EF6  D7E8               	goto	l9144
 17174  003EF8                     l1449:
 17175                           
 17176                           ; BSR set to: 0
 17177                           ;Test.c: 624: }
 17178                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17179  003EF8  908B               	bcf	3979,0,c	;volatile
 17180  003EFA                     l9154:
 17181                           
 17182                           ; BSR set to: 0
 17183                           ;Test.c: 626: cam_flag = !cam_flag;
 17184  003EFA  0100               	movlb	0	; () banked
 17185  003EFC  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17186  003EFE  0100               	movlb	0	; () banked
 17187  003F00  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17188  003F02  B4D8               	btfsc	status,2,c
 17189  003F04  D7D7               	goto	u8261
 17190  003F06  0E00               	movlw	0
 17191  003F08  D7D6               	goto	u8270
 17192  003F0A                     l9156:
 17193                           
 17194                           ;Test.c: 631: readADC(2);
 17195  003F0A  0E02               	movlw	2
 17196  003F0C  ECDA  F02C         	call	_readADC
 17197                           
 17198                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17199  003F10  50C3               	movf	4035,w,c	;volatile
 17200  003F12  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17201  003F16  0100               	movlb	0	; () banked
 17202  003F18  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17203  003F1A  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17204  003F1E  0100               	movlb	0	; () banked
 17205  003F20  6BAB               	clrf	??_BlockerTest& (0+255),b
 17206  003F22  0100               	movlb	0	; () banked
 17207  003F24  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17208  003F26  0100               	movlb	0	; () banked
 17209  003F28  6FAF               	movwf	BlockerTest@res& (0+255),b
 17210  003F2A  0100               	movlb	0	; () banked
 17211  003F2C  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17212  003F2E  0100               	movlb	0	; () banked
 17213  003F30  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17214                           
 17215                           ; BSR set to: 0
 17216                           ;Test.c: 633: lcdInst(0b10000000);;
 17217  003F32  0E80               	movlw	128
 17218  003F34  ECEF  F02D         	call	_lcdInst
 17219                           
 17220                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17221  003F38  0E6D               	movlw	low STR_123
 17222  003F3A  0100               	movlb	0	; () banked
 17223  003F3C  6F8E               	movwf	printf@f& (0+255),b
 17224  003F3E  0EFE               	movlw	high STR_123
 17225  003F40  0100               	movlb	0	; () banked
 17226  003F42  6F8F               	movwf	(printf@f+1)& (0+255),b
 17227  003F44  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17228  003F48  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17229  003F4C  ECED  F00D         	call	_printf	;wreg free
 17230  003F50                     l9164:
 17231  003F50  A281               	btfss	3969,1,c	;volatile
 17232  003F52  D786               	goto	l9118
 17233  003F54  D7DA               	goto	l9156
 17234  003F56                     __end_of_BlockerTest:
 17235                           	opt stack 0
 17236                           tblptru	equ	0xFF8
 17237                           tblptrh	equ	0xFF7
 17238                           tblptrl	equ	0xFF6
 17239                           tablat	equ	0xFF5
 17240                           prodh	equ	0xFF4
 17241                           prodl	equ	0xFF3
 17242                           intcon	equ	0xFF2
 17243                           intcon2	equ	0xFF1
 17244                           intcon3	equ	0xFF0
 17245                           postinc0	equ	0xFEE
 17246                           wreg	equ	0xFE8
 17247                           postdec1	equ	0xFE5
 17248                           fsr1l	equ	0xFE1
 17249                           indf2	equ	0xFDF
 17250                           postinc2	equ	0xFDE
 17251                           postdec2	equ	0xFDD
 17252                           fsr2h	equ	0xFDA
 17253                           fsr2l	equ	0xFD9
 17254                           status	equ	0xFD8
 17255                           
 17256 ;; *************** function _readADC *****************
 17257 ;; Defined at:
 17258 ;;		line 15 in file "ADCFunctionality.c"
 17259 ;; Parameters:    Size  Location     Type
 17260 ;;  channel         1    wreg     unsigned char 
 17261 ;; Auto vars:     Size  Location     Type
 17262 ;;  channel         1    1[BANK0 ] unsigned char 
 17263 ;; Return value:  Size  Location     Type
 17264 ;;                  1    wreg      void 
 17265 ;; Registers used:
 17266 ;;		wreg, status,2, status,0, cstack
 17267 ;; Tracked objects:
 17268 ;;		On entry : 0/0
 17269 ;;		On exit  : 0/0
 17270 ;;		Unchanged: 0/0
 17271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17276 ;;Total ram usage:        2 bytes
 17277 ;; Hardware stack levels used:    1
 17278 ;; Hardware stack levels required when called:    7
 17279 ;; This function calls:
 17280 ;;		Nothing
 17281 ;; This function is called by:
 17282 ;;		_readIR
 17283 ;;		_readMAG
 17284 ;;		_readCOND
 17285 ;;		_sensorTest
 17286 ;;		_PlatformTest
 17287 ;;		_BlockerTest
 17288 ;; This function uses a non-reentrant model
 17289 ;;
 17290                           
 17291                           	psect	text55
 17292  0059B4                     __ptext55:
 17293                           	opt stack 0
 17294  0059B4                     _readADC:
 17295                           	opt stack 20
 17296                           
 17297                           ;incstack = 0
 17298                           ;readADC@channel stored from wreg
 17299  0059B4  0100               	movlb	0	; () banked
 17300  0059B6  6F81               	movwf	readADC@channel& (0+255),b
 17301                           
 17302                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17303  0059B8  0100               	movlb	0	; () banked
 17304  0059BA  4581               	rlncf	readADC@channel& (0+255),w,b
 17305  0059BC  46E8               	rlncf	wreg,f,c
 17306  0059BE  0BFC               	andlw	252
 17307  0059C0  6EC2               	movwf	4034,c	;volatile
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17311  0059C2  80C2               	bsf	4034,0,c	;volatile
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17315  0059C4  82C2               	bsf	4034,1,c	;volatile
 17316                           
 17317                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17318  0059C6  D009               	goto	l6508
 17319  0059C8                     l6506:
 17320  0059C8  0E34               	movlw	52
 17321  0059CA  0100               	movlb	0	; () banked
 17322  0059CC  6F80               	movwf	??_readADC& (0+255),b
 17323  0059CE  0EF1               	movlw	241
 17324  0059D0                     u11257:
 17325  0059D0  2EE8               	decfsz	wreg,f,c
 17326  0059D2  D7FE               	bra	u11257
 17327  0059D4  2F80               	decfsz	??_readADC& (0+255),f,b
 17328  0059D6  D7FC               	bra	u11257
 17329  0059D8  D000               	nop2	
 17330  0059DA                     l6508:
 17331  0059DA  A2C2               	btfss	4034,1,c	;volatile
 17332  0059DC  0012               	return	
 17333  0059DE  D7F4               	goto	l6506
 17334  0059E0                     __end_of_readADC:
 17335                           	opt stack 0
 17336                           tblptru	equ	0xFF8
 17337                           tblptrh	equ	0xFF7
 17338                           tblptrl	equ	0xFF6
 17339                           tablat	equ	0xFF5
 17340                           prodh	equ	0xFF4
 17341                           prodl	equ	0xFF3
 17342                           intcon	equ	0xFF2
 17343                           intcon2	equ	0xFF1
 17344                           intcon3	equ	0xFF0
 17345                           postinc0	equ	0xFEE
 17346                           wreg	equ	0xFE8
 17347                           postdec1	equ	0xFE5
 17348                           fsr1l	equ	0xFE1
 17349                           indf2	equ	0xFDF
 17350                           postinc2	equ	0xFDE
 17351                           postdec2	equ	0xFDD
 17352                           fsr2h	equ	0xFDA
 17353                           fsr2l	equ	0xFD9
 17354                           status	equ	0xFD8
 17355                           
 17356 ;; *************** function _printf *****************
 17357 ;; Defined at:
 17358 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17359 ;; Parameters:    Size  Location     Type
 17360 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17361 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 17362 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 17363 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 17364 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 17365 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 17366 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 17367 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 17368 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 17369 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 17370 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 17371 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 17372 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 17373 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 17374 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 17375 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 17376 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 17377 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 17378 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17379 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17380 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17381 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17382 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17383 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17384 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17385 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17386 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17387 ;;		 -> STR_1(18), 
 17388 ;; Auto vars:     Size  Location     Type
 17389 ;;  tmpval          4    0        struct .
 17390 ;;  width           2   41[BANK0 ] int 
 17391 ;;  val             2   37[BANK0 ] unsigned int 
 17392 ;;  len             2   35[BANK0 ] unsigned int 
 17393 ;;  ap              2   33[BANK0 ] PTR void [1]
 17394 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17395 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17396 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 17397 ;;		 -> printRTC@month(4), UI@month(4), 
 17398 ;;  c               1   40[BANK0 ] char 
 17399 ;;  flag            1   39[BANK0 ] unsigned char 
 17400 ;;  prec            1   30[BANK0 ] char 
 17401 ;; Return value:  Size  Location     Type
 17402 ;;                  2   14[BANK0 ] int 
 17403 ;; Registers used:
 17404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17405 ;; Tracked objects:
 17406 ;;		On entry : 0/0
 17407 ;;		On exit  : 0/0
 17408 ;;		Unchanged: 0/0
 17409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17410 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17411 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17412 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17413 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17414 ;;Total ram usage:       29 bytes
 17415 ;; Hardware stack levels used:    1
 17416 ;; Hardware stack levels required when called:    9
 17417 ;; This function calls:
 17418 ;;		___lwdiv
 17419 ;;		___lwmod
 17420 ;;		___wmul
 17421 ;;		_isdigit
 17422 ;;		_putch
 17423 ;; This function is called by:
 17424 ;;		_UI
 17425 ;;		_change_state_to_menu_start
 17426 ;;		_change_state_to_menu_12
 17427 ;;		_change_state_to_menu_22
 17428 ;;		_printRTC
 17429 ;;		_ID
 17430 ;;		_EEPROM_write
 17431 ;;		_Test
 17432 ;;		_algorithmTest
 17433 ;;		_sensorTest
 17434 ;;		_actuatorTest
 17435 ;;		_BothServos
 17436 ;;		_PortTestDC
 17437 ;;		_PlatformTest
 17438 ;;		_SpeedTest
 17439 ;;		_BlockerTest
 17440 ;;		_arm
 17441 ;;		_PortTestPusher
 17442 ;;		_ToggleTestA5
 17443 ;; This function uses a non-reentrant model
 17444 ;;
 17445                           
 17446                           	psect	text56
 17447  001BDA                     __ptext56:
 17448                           	opt stack 0
 17449  001BDA                     _printf:
 17450                           	opt stack 18
 17451                           
 17452                           ;doprnt.c: 466: va_list ap;
 17453                           ;doprnt.c: 499: signed char c;
 17454                           ;doprnt.c: 501: int width;
 17455                           ;doprnt.c: 506: signed char prec;
 17456                           ;doprnt.c: 508: unsigned char flag;
 17457                           ;doprnt.c: 523: union {
 17458                           ;doprnt.c: 524: unsigned long vd;
 17459                           ;doprnt.c: 525: double integ;
 17460                           ;doprnt.c: 526: } tmpval;
 17461                           ;doprnt.c: 528: unsigned int val;
 17462                           ;doprnt.c: 529: unsigned len;
 17463                           ;doprnt.c: 530: const char * cp;
 17464                           ;doprnt.c: 533: *ap = __va_start();
 17465                           
 17466                           ;incstack = 0
 17467  001BDA  0E90               	movlw	low (?_printf+2)
 17468  001BDC  0100               	movlb	0	; () banked
 17469  001BDE  6FA1               	movwf	printf@ap& (0+255),b
 17470  001BE0  0E00               	movlw	high (?_printf+2)
 17471  001BE2  0100               	movlb	0	; () banked
 17472  001BE4  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17473                           
 17474                           ;doprnt.c: 536: while(c = *f++) {
 17475  001BE6  D205               	goto	l6830
 17476  001BE8                     l6700:
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;doprnt.c: 538: if(c != '%')
 17480  001BE8  0E25               	movlw	37
 17481  001BEA  0100               	movlb	0	; () banked
 17482  001BEC  19A8               	xorwf	printf@c& (0+255),w,b
 17483  001BEE  B4D8               	btfsc	status,2,c
 17484  001BF0  D005               	goto	l6704
 17485                           
 17486                           ; BSR set to: 0
 17487                           ;doprnt.c: 540: {
 17488                           ;doprnt.c: 541: (putch(c) );
 17489  001BF2  0100               	movlb	0	; () banked
 17490  001BF4  51A8               	movf	printf@c& (0+255),w,b
 17491  001BF6  ECE7  F02D         	call	_putch
 17492                           
 17493                           ;doprnt.c: 542: continue;
 17494  001BFA  D1FB               	goto	l6830
 17495  001BFC                     l6704:
 17496                           
 17497                           ;doprnt.c: 543: }
 17498                           ;doprnt.c: 546: width = 0;
 17499  001BFC  0E00               	movlw	0
 17500  001BFE  0100               	movlb	0	; () banked
 17501  001C00  6FAA               	movwf	(printf@width+1)& (0+255),b
 17502  001C02  0E00               	movlw	0
 17503  001C04  6FA9               	movwf	printf@width& (0+255),b
 17504                           
 17505                           ;doprnt.c: 548: flag = 0;
 17506  001C06  0E00               	movlw	0
 17507  001C08  0100               	movlb	0	; () banked
 17508  001C0A  6FA7               	movwf	printf@flag& (0+255),b
 17509                           
 17510                           ; BSR set to: 0
 17511                           ;doprnt.c: 551: switch(*f) {
 17512                           
 17513                           ;doprnt.c: 550: for(;;) {
 17514  001C0C  D005               	goto	l6710
 17515  001C0E                     l6706:
 17516                           
 17517                           ;doprnt.c: 580: flag |= 0x04;
 17518  001C0E  0100               	movlb	0	; () banked
 17519  001C10  85A7               	bsf	printf@flag& (0+255),2,b
 17520                           
 17521                           ;doprnt.c: 581: f++;
 17522  001C12  0100               	movlb	0	; () banked
 17523  001C14  4B8E               	infsnz	printf@f& (0+255),f,b
 17524  001C16  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17525  001C18                     l6710:
 17526  001C18  C08E  FFF6         	movff	printf@f,tblptrl
 17527  001C1C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17528  001C20                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17529  001C20  6AF8               	clrf	tblptru,c
 17530  001C22                     	endif
 17531  001C22                     	if	0	;tblptru may be non-zero
 17532  001C22                     	endif
 17533  001C22  0008               	tblrd		*
 17534  001C24  50F5               	movf	tablat,w,c
 17535                           
 17536                           ; Switch size 1, requested type "space"
 17537                           ; Number of cases is 1, Range of values is 48 to 48
 17538                           ; switch strategies available:
 17539                           ; Name         Instructions Cycles
 17540                           ; simple_byte            4     3 (average)
 17541                           ;	Chosen strategy is simple_byte
 17542  001C26  0A30               	xorlw	48	; case 48
 17543  001C28  B4D8               	btfsc	status,2,c
 17544  001C2A  D7F1               	goto	l6706
 17545                           
 17546                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17547                           
 17548                           ;doprnt.c: 586: }
 17549                           
 17550                           ;doprnt.c: 585: break;
 17551  001C2C  C08E  FFF6         	movff	printf@f,tblptrl
 17552  001C30  C08F  FFF7         	movff	printf@f+1,tblptrh
 17553  001C34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17554  001C34  6AF8               	clrf	tblptru,c
 17555  001C36                     	endif
 17556  001C36                     	if	0	;tblptru may be non-zero
 17557  001C36                     	endif
 17558  001C36  0008               	tblrd		*
 17559  001C38  50F5               	movf	tablat,w,c
 17560  001C3A  ECF0  F02C         	call	_isdigit
 17561  001C3E  A0D8               	btfss	status,0,c
 17562  001C40  D0D2               	goto	l6758
 17563                           
 17564                           ;doprnt.c: 598: width = 0;
 17565  001C42  0E00               	movlw	0
 17566  001C44  0100               	movlb	0	; () banked
 17567  001C46  6FAA               	movwf	(printf@width+1)& (0+255),b
 17568  001C48  0E00               	movlw	0
 17569  001C4A  6FA9               	movwf	printf@width& (0+255),b
 17570  001C4C                     l6716:
 17571                           
 17572                           ;doprnt.c: 600: width *= 10;
 17573  001C4C  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17574  001C50  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17575  001C54  0E00               	movlw	0
 17576  001C56  0100               	movlb	0	; () banked
 17577  001C58  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17578  001C5A  0E0A               	movlw	10
 17579  001C5C  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17580  001C5E  EC59  F02B         	call	___wmul	;wreg free
 17581  001C62  C080  F0A9         	movff	?___wmul,printf@width
 17582  001C66  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17583                           
 17584                           ;doprnt.c: 601: width += *f++ - '0';
 17585  001C6A  0ED0               	movlw	208
 17586  001C6C  0100               	movlb	0	; () banked
 17587  001C6E  6F9A               	movwf	??_printf& (0+255),b
 17588  001C70  0EFF               	movlw	255
 17589  001C72  0100               	movlb	0	; () banked
 17590  001C74  6F9B               	movwf	(??_printf+1)& (0+255),b
 17591  001C76  C08E  FFF6         	movff	printf@f,tblptrl
 17592  001C7A  C08F  FFF7         	movff	printf@f+1,tblptrh
 17593  001C7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17594  001C7E  6AF8               	clrf	tblptru,c
 17595  001C80                     	endif
 17596  001C80                     	if	0	;tblptru may be non-zero
 17597  001C80                     	endif
 17598  001C80  0008               	tblrd		*
 17599  001C82  50F5               	movf	tablat,w,c
 17600  001C84  0100               	movlb	0	; () banked
 17601  001C86  6F9C               	movwf	(??_printf+2)& (0+255),b
 17602  001C88  6B9D               	clrf	(??_printf+3)& (0+255),b
 17603  001C8A  0100               	movlb	0	; () banked
 17604  001C8C  519A               	movf	??_printf& (0+255),w,b
 17605  001C8E  0100               	movlb	0	; () banked
 17606  001C90  279C               	addwf	(??_printf+2)& (0+255),f,b
 17607  001C92  0100               	movlb	0	; () banked
 17608  001C94  519B               	movf	(??_printf+1)& (0+255),w,b
 17609  001C96  0100               	movlb	0	; () banked
 17610  001C98  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17611  001C9A  0100               	movlb	0	; () banked
 17612  001C9C  519C               	movf	(??_printf+2)& (0+255),w,b
 17613  001C9E  0100               	movlb	0	; () banked
 17614  001CA0  27A9               	addwf	printf@width& (0+255),f,b
 17615  001CA2  0100               	movlb	0	; () banked
 17616  001CA4  519D               	movf	(??_printf+3)& (0+255),w,b
 17617  001CA6  0100               	movlb	0	; () banked
 17618  001CA8  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17619                           
 17620                           ; BSR set to: 0
 17621  001CAA  0100               	movlb	0	; () banked
 17622  001CAC  4B8E               	infsnz	printf@f& (0+255),f,b
 17623  001CAE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17624                           
 17625                           ; BSR set to: 0
 17626                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17627  001CB0  C08E  FFF6         	movff	printf@f,tblptrl
 17628  001CB4  C08F  FFF7         	movff	printf@f+1,tblptrh
 17629  001CB8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17630  001CB8  6AF8               	clrf	tblptru,c
 17631  001CBA                     	endif
 17632  001CBA                     	if	0	;tblptru may be non-zero
 17633  001CBA                     	endif
 17634  001CBA  0008               	tblrd		*
 17635  001CBC  50F5               	movf	tablat,w,c
 17636  001CBE  ECF0  F02C         	call	_isdigit
 17637  001CC2  A0D8               	btfss	status,0,c
 17638  001CC4  D090               	goto	l6758
 17639  001CC6  D7C2               	goto	l6716
 17640  001CC8                     l6724:
 17641                           
 17642                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17643  001CC8  C0A1  FFD9         	movff	printf@ap,fsr2l
 17644  001CCC  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17645  001CD0  CFDE F09F          	movff	postinc2,printf@cp
 17646  001CD4  CFDD F0A0          	movff	postdec2,printf@cp+1
 17647  001CD8  0E02               	movlw	2
 17648  001CDA  0100               	movlb	0	; () banked
 17649  001CDC  27A1               	addwf	printf@ap& (0+255),f,b
 17650  001CDE  0E00               	movlw	0
 17651  001CE0  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;doprnt.c: 740: if(!cp)
 17655  001CE2  0100               	movlb	0	; () banked
 17656  001CE4  519F               	movf	printf@cp& (0+255),w,b
 17657  001CE6  0100               	movlb	0	; () banked
 17658  001CE8  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17659  001CEA  A4D8               	btfss	status,2,c
 17660  001CEC  D006               	goto	l6732
 17661                           
 17662                           ; BSR set to: 0
 17663                           ;doprnt.c: 741: cp = "(null)";
 17664  001CEE  0EB5               	movlw	low STR_131
 17665  001CF0  0100               	movlb	0	; () banked
 17666  001CF2  6F9F               	movwf	printf@cp& (0+255),b
 17667  001CF4  0EFF               	movlw	high STR_131
 17668  001CF6  0100               	movlb	0	; () banked
 17669  001CF8  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17670  001CFA                     l6732:
 17671                           
 17672                           ; BSR set to: 0
 17673                           ;doprnt.c: 745: len = 0;
 17674  001CFA  0E00               	movlw	0
 17675  001CFC  0100               	movlb	0	; () banked
 17676  001CFE  6FA4               	movwf	(printf@len+1)& (0+255),b
 17677  001D00  0E00               	movlw	0
 17678  001D02  6FA3               	movwf	printf@len& (0+255),b
 17679                           
 17680                           ;doprnt.c: 746: while(cp[len])
 17681  001D04  D003               	goto	l6736
 17682  001D06                     l6734:
 17683                           
 17684                           ;doprnt.c: 747: len++;
 17685  001D06  0100               	movlb	0	; () banked
 17686  001D08  4BA3               	infsnz	printf@len& (0+255),f,b
 17687  001D0A  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17688  001D0C                     l6736:
 17689                           
 17690                           ; BSR set to: 0
 17691  001D0C  0100               	movlb	0	; () banked
 17692  001D0E  51A3               	movf	printf@len& (0+255),w,b
 17693  001D10  0100               	movlb	0	; () banked
 17694  001D12  259F               	addwf	printf@cp& (0+255),w,b
 17695  001D14  0100               	movlb	0	; () banked
 17696  001D16  6F9A               	movwf	??_printf& (0+255),b
 17697  001D18  0100               	movlb	0	; () banked
 17698  001D1A  51A4               	movf	(printf@len+1)& (0+255),w,b
 17699  001D1C  0100               	movlb	0	; () banked
 17700  001D1E  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17701  001D20  0100               	movlb	0	; () banked
 17702  001D22  6F9B               	movwf	(??_printf+1)& (0+255),b
 17703  001D24  C09A  FFF6         	movff	??_printf,tblptrl
 17704  001D28  C09B  FFF7         	movff	??_printf+1,tblptrh
 17705  001D2C  0E00               	movlw	low (__mediumconst shr (0+16))
 17706  001D2E  6EF8               	movwf	tblptru,c
 17707  001D30  0E0F               	movlw	(high __ramtop+-1)
 17708  001D32  64F7               	cpfsgt	tblptrh,c
 17709  001D34  D003               	bra	u5197
 17710  001D36  0008               	tblrd		*
 17711  001D38  50F5               	movf	tablat,w,c
 17712  001D3A  D005               	bra	u5190
 17713  001D3C                     u5197:
 17714  001D3C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17715  001D40  CFF7 FFEA          	movff	tblptrh,fsr0h
 17716  001D44  50EF               	movf	indf0,w,c
 17717  001D46                     u5190:
 17718  001D46  0900               	iorlw	0
 17719  001D48  A4D8               	btfss	status,2,c
 17720  001D4A  D7DD               	goto	l6734
 17721                           
 17722                           ;doprnt.c: 757: if(width > len)
 17723  001D4C  0100               	movlb	0	; () banked
 17724  001D4E  51A9               	movf	printf@width& (0+255),w,b
 17725  001D50  0100               	movlb	0	; () banked
 17726  001D52  5DA3               	subwf	printf@len& (0+255),w,b
 17727  001D54  0100               	movlb	0	; () banked
 17728  001D56  51AA               	movf	(printf@width+1)& (0+255),w,b
 17729  001D58  0100               	movlb	0	; () banked
 17730  001D5A  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17731  001D5C  B0D8               	btfsc	status,0,c
 17732  001D5E  D009               	goto	l6742
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;doprnt.c: 758: width -= len;
 17736  001D60  0100               	movlb	0	; () banked
 17737  001D62  51A3               	movf	printf@len& (0+255),w,b
 17738  001D64  0100               	movlb	0	; () banked
 17739  001D66  5FA9               	subwf	printf@width& (0+255),f,b
 17740  001D68  0100               	movlb	0	; () banked
 17741  001D6A  51A4               	movf	(printf@len+1)& (0+255),w,b
 17742  001D6C  0100               	movlb	0	; () banked
 17743  001D6E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17744  001D70  D009               	goto	l6746
 17745  001D72                     l6742:
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;doprnt.c: 759: else
 17749                           ;doprnt.c: 760: width = 0;
 17750  001D72  0E00               	movlw	0
 17751  001D74  0100               	movlb	0	; () banked
 17752  001D76  6FAA               	movwf	(printf@width+1)& (0+255),b
 17753  001D78  0E00               	movlw	0
 17754  001D7A  6FA9               	movwf	printf@width& (0+255),b
 17755                           
 17756                           ; BSR set to: 0
 17757                           ;doprnt.c: 764: while(width--)
 17758  001D7C  D003               	goto	l6746
 17759  001D7E                     l6744:
 17760                           
 17761                           ; BSR set to: 0
 17762                           ;doprnt.c: 765: (putch(' ') );
 17763  001D7E  0E20               	movlw	32
 17764  001D80  ECE7  F02D         	call	_putch
 17765  001D84                     l6746:
 17766  001D84  0100               	movlb	0	; () banked
 17767  001D86  07A9               	decf	printf@width& (0+255),f,b
 17768  001D88  A0D8               	btfss	status,0,c
 17769  001D8A  07AA               	decf	(printf@width+1)& (0+255),f,b
 17770  001D8C  0100               	movlb	0	; () banked
 17771  001D8E  29A9               	incf	printf@width& (0+255),w,b
 17772  001D90  E1F6               	bnz	l6744
 17773  001D92  0100               	movlb	0	; () banked
 17774  001D94  29AA               	incf	(printf@width+1)& (0+255),w,b
 17775  001D96  B4D8               	btfsc	status,2,c
 17776  001D98  D017               	goto	l6752
 17777  001D9A  D7F1               	goto	l6744
 17778  001D9C                     l6748:
 17779                           
 17780                           ; BSR set to: 0
 17781                           ;doprnt.c: 768: (putch(*cp++) );
 17782  001D9C  C09F  FFF6         	movff	printf@cp,tblptrl
 17783  001DA0  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17784  001DA4  0E00               	movlw	low (__mediumconst shr (0+16))
 17785  001DA6  6EF8               	movwf	tblptru,c
 17786  001DA8  0E0F               	movlw	(high __ramtop+-1)
 17787  001DAA  64F7               	cpfsgt	tblptrh,c
 17788  001DAC  D003               	bra	u5237
 17789  001DAE  0008               	tblrd		*
 17790  001DB0  50F5               	movf	tablat,w,c
 17791  001DB2  D005               	bra	u5230
 17792  001DB4                     u5237:
 17793  001DB4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17794  001DB8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17795  001DBC  50EF               	movf	indf0,w,c
 17796  001DBE                     u5230:
 17797  001DBE  ECE7  F02D         	call	_putch
 17798  001DC2  0100               	movlb	0	; () banked
 17799  001DC4  4B9F               	infsnz	printf@cp& (0+255),f,b
 17800  001DC6  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17801  001DC8                     l6752:
 17802                           
 17803                           ; BSR set to: 0
 17804  001DC8  0100               	movlb	0	; () banked
 17805  001DCA  07A3               	decf	printf@len& (0+255),f,b
 17806  001DCC  A0D8               	btfss	status,0,c
 17807  001DCE  07A4               	decf	(printf@len+1)& (0+255),f,b
 17808  001DD0  0100               	movlb	0	; () banked
 17809  001DD2  29A3               	incf	printf@len& (0+255),w,b
 17810  001DD4  E1E3               	bnz	l6748
 17811  001DD6  0100               	movlb	0	; () banked
 17812  001DD8  29A4               	incf	(printf@len+1)& (0+255),w,b
 17813  001DDA  B4D8               	btfsc	status,2,c
 17814  001DDC  D10A               	goto	l6830
 17815  001DDE  D7DE               	goto	l6748
 17816  001DE0                     l6754:
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;doprnt.c: 818: flag |= 0x40;
 17820  001DE0  0100               	movlb	0	; () banked
 17821  001DE2  8DA7               	bsf	printf@flag& (0+255),6,b
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;doprnt.c: 822: }
 17825                           
 17826                           ;doprnt.c: 819: break;
 17827  001DE4  D01D               	goto	l1520
 17828  001DE6                     l6758:
 17829  001DE6  C08E  FFF6         	movff	printf@f,tblptrl
 17830  001DEA  C08F  FFF7         	movff	printf@f+1,tblptrh
 17831  001DEE  0100               	movlb	0	; () banked
 17832  001DF0  4B8E               	infsnz	printf@f& (0+255),f,b
 17833  001DF2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17834  001DF4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17835  001DF4  6AF8               	clrf	tblptru,c
 17836  001DF6                     	endif
 17837  001DF6                     	if	0	;tblptru may be non-zero
 17838  001DF6                     	endif
 17839  001DF6  0008               	tblrd		*
 17840  001DF8  CFF5 F0A8          	movff	tablat,printf@c
 17841  001DFC  0100               	movlb	0	; () banked
 17842  001DFE  51A8               	movf	printf@c& (0+255),w,b
 17843                           
 17844                           ; Switch size 1, requested type "space"
 17845                           ; Number of cases is 5, Range of values is 0 to 117
 17846                           ; switch strategies available:
 17847                           ; Name         Instructions Cycles
 17848                           ; simple_byte           16     9 (average)
 17849                           ;	Chosen strategy is simple_byte
 17850  001E00  0A00               	xorlw	0	; case 0
 17851  001E02  B4D8               	btfsc	status,2,c
 17852  001E04  0012               	return	
 17853  001E06  0A64               	xorlw	100	; case 100
 17854  001E08  B4D8               	btfsc	status,2,c
 17855  001E0A  D00A               	goto	l1520
 17856  001E0C  0A0D               	xorlw	13	; case 105
 17857  001E0E  B4D8               	btfsc	status,2,c
 17858  001E10  D007               	goto	l1520
 17859  001E12  0A1A               	xorlw	26	; case 115
 17860  001E14  B4D8               	btfsc	status,2,c
 17861  001E16  D758               	goto	l6724
 17862  001E18  0A06               	xorlw	6	; case 117
 17863  001E1A  B4D8               	btfsc	status,2,c
 17864  001E1C  D7E1               	goto	l6754
 17865  001E1E  D0E9               	goto	l6830
 17866  001E20                     l1520:
 17867                           
 17868                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17869  001E20  0100               	movlb	0	; () banked
 17870  001E22  BDA7               	btfsc	printf@flag& (0+255),6,b
 17871  001E24  D019               	goto	l6770
 17872                           
 17873                           ; BSR set to: 0
 17874                           ;doprnt.c: 1253: {
 17875                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17876  001E26  C0A1  FFD9         	movff	printf@ap,fsr2l
 17877  001E2A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17878  001E2E  CFDE F0A5          	movff	postinc2,printf@val
 17879  001E32  CFDD F0A6          	movff	postdec2,printf@val+1
 17880                           
 17881                           ; BSR set to: 0
 17882  001E36  0E02               	movlw	2
 17883  001E38  0100               	movlb	0	; () banked
 17884  001E3A  27A1               	addwf	printf@ap& (0+255),f,b
 17885  001E3C  0E00               	movlw	0
 17886  001E3E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17887                           
 17888                           ; BSR set to: 0
 17889                           ;doprnt.c: 1261: if((int)val < 0) {
 17890  001E40  0100               	movlb	0	; () banked
 17891  001E42  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17892  001E44  D016               	goto	l6774
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;doprnt.c: 1262: flag |= 0x03;
 17896  001E46  0E03               	movlw	3
 17897  001E48  0100               	movlb	0	; () banked
 17898  001E4A  13A7               	iorwf	printf@flag& (0+255),f,b
 17899                           
 17900                           ; BSR set to: 0
 17901                           ;doprnt.c: 1263: val = -val;
 17902  001E4C  0100               	movlb	0	; () banked
 17903  001E4E  6DA5               	negf	printf@val& (0+255),b
 17904  001E50  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17905  001E52  B0D8               	btfsc	status,0,c
 17906  001E54  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17907                           
 17908                           ; BSR set to: 0
 17909                           ;doprnt.c: 1264: }
 17910                           ;doprnt.c: 1266: }
 17911  001E56  D00D               	goto	l6774
 17912  001E58                     l6770:
 17913                           
 17914                           ; BSR set to: 0
 17915                           ;doprnt.c: 1268: else
 17916                           ;doprnt.c: 1273: {
 17917                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17918  001E58  C0A1  FFD9         	movff	printf@ap,fsr2l
 17919  001E5C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17920  001E60  CFDE F0A5          	movff	postinc2,printf@val
 17921  001E64  CFDD F0A6          	movff	postdec2,printf@val+1
 17922                           
 17923                           ; BSR set to: 0
 17924  001E68  0E02               	movlw	2
 17925  001E6A  0100               	movlb	0	; () banked
 17926  001E6C  27A1               	addwf	printf@ap& (0+255),f,b
 17927  001E6E  0E00               	movlw	0
 17928  001E70  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17929  001E72                     l6774:
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;doprnt.c: 1287: }
 17933                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17934  001E72  0E01               	movlw	1
 17935  001E74  0100               	movlb	0	; () banked
 17936  001E76  6FA8               	movwf	printf@c& (0+255),b
 17937  001E78                     l6776:
 17938                           
 17939                           ; BSR set to: 0
 17940  001E78  0E05               	movlw	5
 17941  001E7A  0100               	movlb	0	; () banked
 17942  001E7C  19A8               	xorwf	printf@c& (0+255),w,b
 17943  001E7E  B4D8               	btfsc	status,2,c
 17944  001E80  D019               	goto	l6788
 17945                           
 17946                           ; BSR set to: 0
 17947                           ;doprnt.c: 1306: if(val < dpowers[c])
 17948                           
 17949                           ; BSR set to: 0
 17950                           
 17951                           ; BSR set to: 0
 17952  001E82  0100               	movlb	0	; () banked
 17953  001E84  51A8               	movf	printf@c& (0+255),w,b
 17954  001E86  0D02               	mullw	2
 17955  001E88  0E9C               	movlw	low _dpowers
 17956  001E8A  24F3               	addwf	prodl,w,c
 17957  001E8C  6EF6               	movwf	tblptrl,c
 17958  001E8E  0EFA               	movlw	high _dpowers
 17959  001E90  20F4               	addwfc	prodh,w,c
 17960  001E92  6EF7               	movwf	tblptrh,c
 17961  001E94                     	if	1	;There are 3 active tblptr bytes
 17962  001E94  6AF8               	clrf	tblptru,c
 17963  001E96  0E00               	movlw	low (__mediumconst shr (0+16))
 17964  001E98  22F8               	addwfc	tblptru,f,c
 17965  001E9A                     	endif
 17966  001E9A  0009               	tblrd		*+
 17967  001E9C  50F5               	movf	tablat,w,c
 17968  001E9E  0100               	movlb	0	; () banked
 17969  001EA0  5DA5               	subwf	printf@val& (0+255),w,b
 17970  001EA2  0009               	tblrd		*+
 17971  001EA4  50F5               	movf	tablat,w,c
 17972  001EA6  0100               	movlb	0	; () banked
 17973  001EA8  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17974  001EAA  A0D8               	btfss	status,0,c
 17975  001EAC  D003               	goto	l6788
 17976                           
 17977                           ; BSR set to: 0
 17978                           
 17979                           ; BSR set to: 0
 17980                           
 17981                           ; BSR set to: 0
 17982                           ;doprnt.c: 1307: break;
 17983  001EAE  0100               	movlb	0	; () banked
 17984  001EB0  2BA8               	incf	printf@c& (0+255),f,b
 17985  001EB2  D7E2               	goto	l6776
 17986  001EB4                     l6788:
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17990  001EB4  0100               	movlb	0	; () banked
 17991  001EB6  51A9               	movf	printf@width& (0+255),w,b
 17992  001EB8  0100               	movlb	0	; () banked
 17993  001EBA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17994  001EBC  B4D8               	btfsc	status,2,c
 17995  001EBE  D00B               	goto	l6794
 17996                           
 17997                           ; BSR set to: 0
 17998  001EC0  C0A7  F09A         	movff	printf@flag,??_printf
 17999  001EC4  0E03               	movlw	3
 18000  001EC6  0100               	movlb	0	; () banked
 18001  001EC8  179A               	andwf	??_printf& (0+255),f,b
 18002  001ECA  B4D8               	btfsc	status,2,c
 18003  001ECC  D004               	goto	l6794
 18004                           
 18005                           ; BSR set to: 0
 18006                           ;doprnt.c: 1346: width--;
 18007  001ECE  0100               	movlb	0	; () banked
 18008  001ED0  07A9               	decf	printf@width& (0+255),f,b
 18009  001ED2  A0D8               	btfss	status,0,c
 18010  001ED4  07AA               	decf	(printf@width+1)& (0+255),f,b
 18011  001ED6                     l6794:
 18012                           
 18013                           ; BSR set to: 0
 18014                           ;doprnt.c: 1381: if(width > c)
 18015  001ED6  0E80               	movlw	128
 18016  001ED8  0100               	movlb	0	; () banked
 18017  001EDA  BFA8               	btfsc	printf@c& (0+255),7,b
 18018  001EDC  0E7F               	movlw	127
 18019  001EDE  0100               	movlb	0	; () banked
 18020  001EE0  6F9A               	movwf	??_printf& (0+255),b
 18021  001EE2  0100               	movlb	0	; () banked
 18022  001EE4  51A9               	movf	printf@width& (0+255),w,b
 18023  001EE6  0100               	movlb	0	; () banked
 18024  001EE8  5DA8               	subwf	printf@c& (0+255),w,b
 18025  001EEA  0100               	movlb	0	; () banked
 18026  001EEC  51AA               	movf	(printf@width+1)& (0+255),w,b
 18027  001EEE  0A80               	xorlw	128
 18028  001EF0  0100               	movlb	0	; () banked
 18029  001EF2  599A               	subwfb	??_printf& (0+255),w,b
 18030  001EF4  B0D8               	btfsc	status,0,c
 18031  001EF6  D00B               	goto	l6798
 18032                           
 18033                           ; BSR set to: 0
 18034                           ;doprnt.c: 1382: width -= c;
 18035  001EF8  0100               	movlb	0	; () banked
 18036  001EFA  51A8               	movf	printf@c& (0+255),w,b
 18037  001EFC  0100               	movlb	0	; () banked
 18038  001EFE  5FA9               	subwf	printf@width& (0+255),f,b
 18039  001F00  0E00               	movlw	0
 18040  001F02  0100               	movlb	0	; () banked
 18041  001F04  BFA8               	btfsc	printf@c& (0+255),7,b
 18042  001F06  0EFF               	movlw	255
 18043  001F08  0100               	movlb	0	; () banked
 18044  001F0A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18045  001F0C  D005               	goto	l6800
 18046  001F0E                     l6798:
 18047                           
 18048                           ; BSR set to: 0
 18049                           ;doprnt.c: 1383: else
 18050                           ;doprnt.c: 1384: width = 0;
 18051  001F0E  0E00               	movlw	0
 18052  001F10  0100               	movlb	0	; () banked
 18053  001F12  6FAA               	movwf	(printf@width+1)& (0+255),b
 18054  001F14  0E00               	movlw	0
 18055  001F16  6FA9               	movwf	printf@width& (0+255),b
 18056  001F18                     l6800:
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;doprnt.c: 1387: if(flag & 0x04) {
 18060  001F18  0100               	movlb	0	; () banked
 18061  001F1A  A5A7               	btfss	printf@flag& (0+255),2,b
 18062  001F1C  D018               	goto	l6812
 18063                           
 18064                           ; BSR set to: 0
 18065                           ;doprnt.c: 1392: if(flag & 0x03)
 18066  001F1E  C0A7  F09A         	movff	printf@flag,??_printf
 18067  001F22  0E03               	movlw	3
 18068  001F24  0100               	movlb	0	; () banked
 18069  001F26  179A               	andwf	??_printf& (0+255),f,b
 18070  001F28  B4D8               	btfsc	status,2,c
 18071  001F2A  D003               	goto	l6806
 18072                           
 18073                           ; BSR set to: 0
 18074                           ;doprnt.c: 1393: (putch('-') );
 18075  001F2C  0E2D               	movlw	45
 18076  001F2E  ECE7  F02D         	call	_putch
 18077  001F32                     l6806:
 18078                           
 18079                           ;doprnt.c: 1415: if(width)
 18080  001F32  0100               	movlb	0	; () banked
 18081  001F34  51A9               	movf	printf@width& (0+255),w,b
 18082  001F36  0100               	movlb	0	; () banked
 18083  001F38  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18084  001F3A  B4D8               	btfsc	status,2,c
 18085  001F3C  D025               	goto	l6822
 18086                           
 18087                           ; BSR set to: 0
 18088                           ;doprnt.c: 1417: (putch('0') );
 18089                           
 18090                           ; BSR set to: 0
 18091                           
 18092                           ;doprnt.c: 1416: do
 18093  001F3E  0E30               	movlw	48
 18094  001F40  ECE7  F02D         	call	_putch
 18095                           
 18096                           ;doprnt.c: 1418: while(--width);
 18097  001F44  0100               	movlb	0	; () banked
 18098  001F46  07A9               	decf	printf@width& (0+255),f,b
 18099  001F48  A0D8               	btfss	status,0,c
 18100  001F4A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18101  001F4C  D7F2               	goto	l6806
 18102  001F4E                     l6812:
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;doprnt.c: 1422: {
 18106                           ;doprnt.c: 1424: if(width
 18107                           ;doprnt.c: 1428: )
 18108  001F4E  0100               	movlb	0	; () banked
 18109  001F50  51A9               	movf	printf@width& (0+255),w,b
 18110  001F52  0100               	movlb	0	; () banked
 18111  001F54  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18112  001F56  B4D8               	btfsc	status,2,c
 18113  001F58  D00D               	goto	l6818
 18114  001F5A                     l6814:
 18115                           
 18116                           ; BSR set to: 0
 18117                           ;doprnt.c: 1430: (putch(' ') );
 18118  001F5A  0E20               	movlw	32
 18119  001F5C  ECE7  F02D         	call	_putch
 18120                           
 18121                           ;doprnt.c: 1431: while(--width);
 18122  001F60  0100               	movlb	0	; () banked
 18123  001F62  07A9               	decf	printf@width& (0+255),f,b
 18124  001F64  A0D8               	btfss	status,0,c
 18125  001F66  07AA               	decf	(printf@width+1)& (0+255),f,b
 18126  001F68  0100               	movlb	0	; () banked
 18127  001F6A  51A9               	movf	printf@width& (0+255),w,b
 18128  001F6C  0100               	movlb	0	; () banked
 18129  001F6E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18130  001F70  A4D8               	btfss	status,2,c
 18131  001F72  D7F3               	goto	l6814
 18132  001F74                     l6818:
 18133                           
 18134                           ; BSR set to: 0
 18135                           ;doprnt.c: 1438: if(flag & 0x03)
 18136  001F74  C0A7  F09A         	movff	printf@flag,??_printf
 18137  001F78  0E03               	movlw	3
 18138  001F7A  0100               	movlb	0	; () banked
 18139  001F7C  179A               	andwf	??_printf& (0+255),f,b
 18140  001F7E  B4D8               	btfsc	status,2,c
 18141  001F80  D003               	goto	l6822
 18142                           
 18143                           ; BSR set to: 0
 18144                           ;doprnt.c: 1439: (putch('-') );
 18145  001F82  0E2D               	movlw	45
 18146  001F84  ECE7  F02D         	call	_putch
 18147  001F88                     l6822:
 18148                           
 18149                           ;doprnt.c: 1469: }
 18150                           ;doprnt.c: 1472: prec = c;
 18151  001F88  C0A8  F09E         	movff	printf@c,printf@prec
 18152                           
 18153                           ;doprnt.c: 1474: while(prec--) {
 18154  001F8C  D02C               	goto	l6828
 18155  001F8E                     l6824:
 18156                           
 18157                           ;doprnt.c: 1478: {
 18158                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18159  001F8E  0100               	movlb	0	; () banked
 18160  001F90  519E               	movf	printf@prec& (0+255),w,b
 18161  001F92  0D02               	mullw	2
 18162  001F94  0E9C               	movlw	low _dpowers
 18163  001F96  24F3               	addwf	prodl,w,c
 18164  001F98  6EF6               	movwf	tblptrl,c
 18165  001F9A  0EFA               	movlw	high _dpowers
 18166  001F9C  20F4               	addwfc	prodh,w,c
 18167  001F9E  6EF7               	movwf	tblptrh,c
 18168  001FA0                     	if	1	;There are 3 active tblptr bytes
 18169  001FA0  6AF8               	clrf	tblptru,c
 18170  001FA2  0E00               	movlw	low (__mediumconst shr (0+16))
 18171  001FA4  22F8               	addwfc	tblptru,f,c
 18172  001FA6                     	endif
 18173  001FA6  0009               	tblrd		*+
 18174  001FA8  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18175  001FAC  000A               	tblrd		*-
 18176  001FAE  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18177  001FB2  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18178  001FB6  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18179  001FBA  EC89  F027         	call	___lwdiv	;wreg free
 18180  001FBE  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18181  001FC2  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18182  001FC6  0E00               	movlw	0
 18183  001FC8  0100               	movlb	0	; () banked
 18184  001FCA  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18185  001FCC  0E0A               	movlw	10
 18186  001FCE  6F89               	movwf	___lwmod@divisor& (0+255),b
 18187  001FD0  ECD7  F028         	call	___lwmod	;wreg free
 18188  001FD4  0100               	movlb	0	; () banked
 18189  001FD6  5187               	movf	?___lwmod& (0+255),w,b
 18190  001FD8  0F30               	addlw	48
 18191  001FDA  0100               	movlb	0	; () banked
 18192  001FDC  6FA8               	movwf	printf@c& (0+255),b
 18193                           
 18194                           ; BSR set to: 0
 18195                           ;doprnt.c: 1523: }
 18196                           ;doprnt.c: 1524: (putch(c) );
 18197  001FDE  0100               	movlb	0	; () banked
 18198  001FE0  51A8               	movf	printf@c& (0+255),w,b
 18199  001FE2  ECE7  F02D         	call	_putch
 18200  001FE6                     l6828:
 18201  001FE6  0100               	movlb	0	; () banked
 18202  001FE8  079E               	decf	printf@prec& (0+255),f,b
 18203  001FEA  0100               	movlb	0	; () banked
 18204  001FEC  299E               	incf	printf@prec& (0+255),w,b
 18205  001FEE  A4D8               	btfss	status,2,c
 18206  001FF0  D7CE               	goto	l6824
 18207  001FF2                     l6830:
 18208  001FF2  C08E  FFF6         	movff	printf@f,tblptrl
 18209  001FF6  C08F  FFF7         	movff	printf@f+1,tblptrh
 18210  001FFA  0100               	movlb	0	; () banked
 18211  001FFC  4B8E               	infsnz	printf@f& (0+255),f,b
 18212  001FFE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18213  002000                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18214  002000  6AF8               	clrf	tblptru,c
 18215  002002                     	endif
 18216  002002                     	if	0	;tblptru may be non-zero
 18217  002002                     	endif
 18218  002002  0008               	tblrd		*
 18219  002004  CFF5 F0A8          	movff	tablat,printf@c
 18220  002008  0100               	movlb	0	; () banked
 18221  00200A  51A8               	movf	printf@c& (0+255),w,b
 18222  00200C  B4D8               	btfsc	status,2,c
 18223  00200E  0012               	return	
 18224  002010  D5EB               	goto	l6700
 18225  002012                     __end_of_printf:
 18226                           	opt stack 0
 18227                           tblptru	equ	0xFF8
 18228                           tblptrh	equ	0xFF7
 18229                           tblptrl	equ	0xFF6
 18230                           tablat	equ	0xFF5
 18231                           prodh	equ	0xFF4
 18232                           prodl	equ	0xFF3
 18233                           intcon	equ	0xFF2
 18234                           intcon2	equ	0xFF1
 18235                           intcon3	equ	0xFF0
 18236                           indf0	equ	0xFEF
 18237                           postinc0	equ	0xFEE
 18238                           fsr0h	equ	0xFEA
 18239                           fsr0l	equ	0xFE9
 18240                           wreg	equ	0xFE8
 18241                           postdec1	equ	0xFE5
 18242                           fsr1l	equ	0xFE1
 18243                           indf2	equ	0xFDF
 18244                           postinc2	equ	0xFDE
 18245                           postdec2	equ	0xFDD
 18246                           fsr2h	equ	0xFDA
 18247                           fsr2l	equ	0xFD9
 18248                           status	equ	0xFD8
 18249                           
 18250 ;; *************** function _putch *****************
 18251 ;; Defined at:
 18252 ;;		line 20 in file "lcd.c"
 18253 ;; Parameters:    Size  Location     Type
 18254 ;;  data            1    wreg     unsigned char 
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;  data            1    2[BANK0 ] unsigned char 
 18257 ;; Return value:  Size  Location     Type
 18258 ;;                  1    wreg      void 
 18259 ;; Registers used:
 18260 ;;		wreg, status,2, status,0, cstack
 18261 ;; Tracked objects:
 18262 ;;		On entry : 0/0
 18263 ;;		On exit  : 0/0
 18264 ;;		Unchanged: 0/0
 18265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18269 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18270 ;;Total ram usage:        1 bytes
 18271 ;; Hardware stack levels used:    1
 18272 ;; Hardware stack levels required when called:    8
 18273 ;; This function calls:
 18274 ;;		_lcdNibble
 18275 ;; This function is called by:
 18276 ;;		_printf
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           	psect	text57
 18281  005BCE                     __ptext57:
 18282                           	opt stack 0
 18283  005BCE                     _putch:
 18284                           	opt stack 18
 18285                           
 18286                           ;incstack = 0
 18287                           ;putch@data stored from wreg
 18288  005BCE  0100               	movlb	0	; () banked
 18289  005BD0  6F82               	movwf	putch@data& (0+255),b
 18290                           
 18291                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18292  005BD2  848C               	bsf	3980,2,c	;volatile
 18293                           
 18294                           ;lcd.c: 22: lcdNibble(data);
 18295  005BD4  0100               	movlb	0	; () banked
 18296  005BD6  5182               	movf	putch@data& (0+255),w,b
 18297  005BD8  EC6F  F028         	call	_lcdNibble
 18298  005BDC  0012               	return		;funcret
 18299  005BDE                     __end_of_putch:
 18300                           	opt stack 0
 18301                           tblptru	equ	0xFF8
 18302                           tblptrh	equ	0xFF7
 18303                           tblptrl	equ	0xFF6
 18304                           tablat	equ	0xFF5
 18305                           prodh	equ	0xFF4
 18306                           prodl	equ	0xFF3
 18307                           intcon	equ	0xFF2
 18308                           intcon2	equ	0xFF1
 18309                           intcon3	equ	0xFF0
 18310                           indf0	equ	0xFEF
 18311                           postinc0	equ	0xFEE
 18312                           fsr0h	equ	0xFEA
 18313                           fsr0l	equ	0xFE9
 18314                           wreg	equ	0xFE8
 18315                           postdec1	equ	0xFE5
 18316                           fsr1l	equ	0xFE1
 18317                           indf2	equ	0xFDF
 18318                           postinc2	equ	0xFDE
 18319                           postdec2	equ	0xFDD
 18320                           fsr2h	equ	0xFDA
 18321                           fsr2l	equ	0xFD9
 18322                           status	equ	0xFD8
 18323                           
 18324 ;; *************** function _isdigit *****************
 18325 ;; Defined at:
 18326 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18327 ;; Parameters:    Size  Location     Type
 18328 ;;  c               1    wreg     unsigned char 
 18329 ;; Auto vars:     Size  Location     Type
 18330 ;;  c               1    2[BANK0 ] unsigned char 
 18331 ;; Return value:  Size  Location     Type
 18332 ;;		None               void
 18333 ;; Registers used:
 18334 ;;		wreg, status,2, status,0
 18335 ;; Tracked objects:
 18336 ;;		On entry : 0/0
 18337 ;;		On exit  : 0/0
 18338 ;;		Unchanged: 0/0
 18339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18341 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18343 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18344 ;;Total ram usage:        3 bytes
 18345 ;; Hardware stack levels used:    1
 18346 ;; Hardware stack levels required when called:    7
 18347 ;; This function calls:
 18348 ;;		Nothing
 18349 ;; This function is called by:
 18350 ;;		_printf
 18351 ;; This function uses a non-reentrant model
 18352 ;;
 18353                           
 18354                           	psect	text58
 18355  0059E0                     __ptext58:
 18356                           	opt stack 0
 18357  0059E0                     _isdigit:
 18358                           	opt stack 19
 18359                           
 18360                           ;incstack = 0
 18361                           ;isdigit@c stored from wreg
 18362  0059E0  0100               	movlb	0	; () banked
 18363  0059E2  6F82               	movwf	isdigit@c& (0+255),b
 18364  0059E4  0E00               	movlw	0
 18365  0059E6  0100               	movlb	0	; () banked
 18366  0059E8  6F81               	movwf	_isdigit$2065& (0+255),b
 18367                           
 18368                           ; BSR set to: 0
 18369  0059EA  0E3A               	movlw	58
 18370  0059EC  0100               	movlb	0	; () banked
 18371  0059EE  6182               	cpfslt	isdigit@c& (0+255),b
 18372  0059F0  D007               	goto	l6548
 18373                           
 18374                           ; BSR set to: 0
 18375  0059F2  0E2F               	movlw	47
 18376  0059F4  0100               	movlb	0	; () banked
 18377  0059F6  6582               	cpfsgt	isdigit@c& (0+255),b
 18378  0059F8  D003               	goto	l6548
 18379                           
 18380                           ; BSR set to: 0
 18381  0059FA  0E01               	movlw	1
 18382  0059FC  0100               	movlb	0	; () banked
 18383  0059FE  6F81               	movwf	_isdigit$2065& (0+255),b
 18384  005A00                     l6548:
 18385                           
 18386                           ; BSR set to: 0
 18387  005A00  C081  F080         	movff	_isdigit$2065,??_isdigit
 18388  005A04  0100               	movlb	0	; () banked
 18389  005A06  3180               	rrcf	??_isdigit& (0+255),w,b
 18390  005A08  0012               	return	
 18391  005A0A                     __end_of_isdigit:
 18392                           	opt stack 0
 18393                           tblptru	equ	0xFF8
 18394                           tblptrh	equ	0xFF7
 18395                           tblptrl	equ	0xFF6
 18396                           tablat	equ	0xFF5
 18397                           prodh	equ	0xFF4
 18398                           prodl	equ	0xFF3
 18399                           intcon	equ	0xFF2
 18400                           intcon2	equ	0xFF1
 18401                           intcon3	equ	0xFF0
 18402                           indf0	equ	0xFEF
 18403                           postinc0	equ	0xFEE
 18404                           fsr0h	equ	0xFEA
 18405                           fsr0l	equ	0xFE9
 18406                           wreg	equ	0xFE8
 18407                           postdec1	equ	0xFE5
 18408                           fsr1l	equ	0xFE1
 18409                           indf2	equ	0xFDF
 18410                           postinc2	equ	0xFDE
 18411                           postdec2	equ	0xFDD
 18412                           fsr2h	equ	0xFDA
 18413                           fsr2l	equ	0xFD9
 18414                           status	equ	0xFD8
 18415                           
 18416 ;; *************** function ___wmul *****************
 18417 ;; Defined at:
 18418 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18419 ;; Parameters:    Size  Location     Type
 18420 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18421 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18422 ;; Auto vars:     Size  Location     Type
 18423 ;;  product         2    4[BANK0 ] unsigned int 
 18424 ;; Return value:  Size  Location     Type
 18425 ;;                  2    0[BANK0 ] unsigned int 
 18426 ;; Registers used:
 18427 ;;		wreg, status,2, status,0, prodl, prodh
 18428 ;; Tracked objects:
 18429 ;;		On entry : 0/0
 18430 ;;		On exit  : 0/0
 18431 ;;		Unchanged: 0/0
 18432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18434 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18436 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18437 ;;Total ram usage:        6 bytes
 18438 ;; Hardware stack levels used:    1
 18439 ;; Hardware stack levels required when called:    7
 18440 ;; This function calls:
 18441 ;;		Nothing
 18442 ;; This function is called by:
 18443 ;;		_printf
 18444 ;; This function uses a non-reentrant model
 18445 ;;
 18446                           
 18447                           	psect	text59
 18448  0056B2                     __ptext59:
 18449                           	opt stack 0
 18450  0056B2                     ___wmul:
 18451                           	opt stack 19
 18452                           
 18453                           ; BSR set to: 0
 18454                           ;incstack = 0
 18455  0056B2  0100               	movlb	0	; () banked
 18456  0056B4  5180               	movf	___wmul@multiplier& (0+255),w,b
 18457  0056B6  0100               	movlb	0	; () banked
 18458  0056B8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18459  0056BA  CFF3 F084          	movff	prodl,___wmul@product
 18460  0056BE  CFF4 F085          	movff	prodh,___wmul@product+1
 18461  0056C2  0100               	movlb	0	; () banked
 18462  0056C4  5180               	movf	___wmul@multiplier& (0+255),w,b
 18463  0056C6  0100               	movlb	0	; () banked
 18464  0056C8  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18465  0056CA  50F3               	movf	prodl,w,c
 18466  0056CC  0100               	movlb	0	; () banked
 18467  0056CE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18468  0056D0  0100               	movlb	0	; () banked
 18469  0056D2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18470  0056D4  0100               	movlb	0	; () banked
 18471  0056D6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18472  0056D8  50F3               	movf	prodl,w,c
 18473  0056DA  0100               	movlb	0	; () banked
 18474  0056DC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18475                           
 18476                           ; BSR set to: 0
 18477  0056DE  C084  F080         	movff	___wmul@product,?___wmul
 18478  0056E2  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18479  0056E6  0012               	return	
 18480  0056E8                     __end_of___wmul:
 18481                           	opt stack 0
 18482                           tblptru	equ	0xFF8
 18483                           tblptrh	equ	0xFF7
 18484                           tblptrl	equ	0xFF6
 18485                           tablat	equ	0xFF5
 18486                           prodh	equ	0xFF4
 18487                           prodl	equ	0xFF3
 18488                           intcon	equ	0xFF2
 18489                           intcon2	equ	0xFF1
 18490                           intcon3	equ	0xFF0
 18491                           indf0	equ	0xFEF
 18492                           postinc0	equ	0xFEE
 18493                           fsr0h	equ	0xFEA
 18494                           fsr0l	equ	0xFE9
 18495                           wreg	equ	0xFE8
 18496                           postdec1	equ	0xFE5
 18497                           fsr1l	equ	0xFE1
 18498                           indf2	equ	0xFDF
 18499                           postinc2	equ	0xFDE
 18500                           postdec2	equ	0xFDD
 18501                           fsr2h	equ	0xFDA
 18502                           fsr2l	equ	0xFD9
 18503                           status	equ	0xFD8
 18504                           
 18505 ;; *************** function ___lwmod *****************
 18506 ;; Defined at:
 18507 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18508 ;; Parameters:    Size  Location     Type
 18509 ;;  dividend        2    7[BANK0 ] unsigned int 
 18510 ;;  divisor         2    9[BANK0 ] unsigned int 
 18511 ;; Auto vars:     Size  Location     Type
 18512 ;;  counter         1   11[BANK0 ] unsigned char 
 18513 ;; Return value:  Size  Location     Type
 18514 ;;                  2    7[BANK0 ] unsigned int 
 18515 ;; Registers used:
 18516 ;;		wreg, status,2, status,0
 18517 ;; Tracked objects:
 18518 ;;		On entry : 0/0
 18519 ;;		On exit  : 0/0
 18520 ;;		Unchanged: 0/0
 18521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18522 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;Total ram usage:        5 bytes
 18527 ;; Hardware stack levels used:    1
 18528 ;; Hardware stack levels required when called:    7
 18529 ;; This function calls:
 18530 ;;		Nothing
 18531 ;; This function is called by:
 18532 ;;		_printf
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           	psect	text60
 18537  0051AE                     __ptext60:
 18538                           	opt stack 0
 18539  0051AE                     ___lwmod:
 18540                           	opt stack 19
 18541                           
 18542                           ; BSR set to: 0
 18543                           ;incstack = 0
 18544  0051AE  0100               	movlb	0	; () banked
 18545  0051B0  5189               	movf	___lwmod@divisor& (0+255),w,b
 18546  0051B2  0100               	movlb	0	; () banked
 18547  0051B4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18548  0051B6  B4D8               	btfsc	status,2,c
 18549  0051B8  D026               	goto	l1977
 18550                           
 18551                           ; BSR set to: 0
 18552  0051BA  0E01               	movlw	1
 18553  0051BC  0100               	movlb	0	; () banked
 18554  0051BE  6F8B               	movwf	___lwmod@counter& (0+255),b
 18555  0051C0  D006               	goto	l6586
 18556  0051C2                     l6584:
 18557                           
 18558                           ; BSR set to: 0
 18559  0051C2  0100               	movlb	0	; () banked
 18560  0051C4  90D8               	bcf	status,0,c
 18561  0051C6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18562  0051C8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18563  0051CA  0100               	movlb	0	; () banked
 18564  0051CC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18565  0051CE                     l6586:
 18566                           
 18567                           ; BSR set to: 0
 18568  0051CE  0100               	movlb	0	; () banked
 18569  0051D0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18570  0051D2  D7F7               	goto	l6584
 18571  0051D4                     l6588:
 18572                           
 18573                           ; BSR set to: 0
 18574  0051D4  0100               	movlb	0	; () banked
 18575  0051D6  5189               	movf	___lwmod@divisor& (0+255),w,b
 18576  0051D8  0100               	movlb	0	; () banked
 18577  0051DA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18578  0051DC  0100               	movlb	0	; () banked
 18579  0051DE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18580  0051E0  0100               	movlb	0	; () banked
 18581  0051E2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18582  0051E4  A0D8               	btfss	status,0,c
 18583  0051E6  D008               	goto	l6592
 18584                           
 18585                           ; BSR set to: 0
 18586  0051E8  0100               	movlb	0	; () banked
 18587  0051EA  5189               	movf	___lwmod@divisor& (0+255),w,b
 18588  0051EC  0100               	movlb	0	; () banked
 18589  0051EE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18590  0051F0  0100               	movlb	0	; () banked
 18591  0051F2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18592  0051F4  0100               	movlb	0	; () banked
 18593  0051F6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18594  0051F8                     l6592:
 18595                           
 18596                           ; BSR set to: 0
 18597  0051F8  0100               	movlb	0	; () banked
 18598  0051FA  90D8               	bcf	status,0,c
 18599  0051FC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18600  0051FE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18601                           
 18602                           ; BSR set to: 0
 18603  005200  0100               	movlb	0	; () banked
 18604  005202  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18605  005204  D7E7               	goto	l6588
 18606  005206                     l1977:
 18607                           
 18608                           ; BSR set to: 0
 18609  005206  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18610  00520A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18611                           
 18612                           ; BSR set to: 0
 18613  00520E  0012               	return		;funcret
 18614  005210                     __end_of___lwmod:
 18615                           	opt stack 0
 18616                           tblptru	equ	0xFF8
 18617                           tblptrh	equ	0xFF7
 18618                           tblptrl	equ	0xFF6
 18619                           tablat	equ	0xFF5
 18620                           prodh	equ	0xFF4
 18621                           prodl	equ	0xFF3
 18622                           intcon	equ	0xFF2
 18623                           intcon2	equ	0xFF1
 18624                           intcon3	equ	0xFF0
 18625                           indf0	equ	0xFEF
 18626                           postinc0	equ	0xFEE
 18627                           fsr0h	equ	0xFEA
 18628                           fsr0l	equ	0xFE9
 18629                           wreg	equ	0xFE8
 18630                           postdec1	equ	0xFE5
 18631                           fsr1l	equ	0xFE1
 18632                           indf2	equ	0xFDF
 18633                           postinc2	equ	0xFDE
 18634                           postdec2	equ	0xFDD
 18635                           fsr2h	equ	0xFDA
 18636                           fsr2l	equ	0xFD9
 18637                           status	equ	0xFD8
 18638                           
 18639 ;; *************** function ___lwdiv *****************
 18640 ;; Defined at:
 18641 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;  dividend        2    0[BANK0 ] unsigned int 
 18644 ;;  divisor         2    2[BANK0 ] unsigned int 
 18645 ;; Auto vars:     Size  Location     Type
 18646 ;;  quotient        2    4[BANK0 ] unsigned int 
 18647 ;;  counter         1    6[BANK0 ] unsigned char 
 18648 ;; Return value:  Size  Location     Type
 18649 ;;                  2    0[BANK0 ] unsigned int 
 18650 ;; Registers used:
 18651 ;;		wreg, status,2, status,0
 18652 ;; Tracked objects:
 18653 ;;		On entry : 0/0
 18654 ;;		On exit  : 0/0
 18655 ;;		Unchanged: 0/0
 18656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18660 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18661 ;;Total ram usage:        7 bytes
 18662 ;; Hardware stack levels used:    1
 18663 ;; Hardware stack levels required when called:    7
 18664 ;; This function calls:
 18665 ;;		Nothing
 18666 ;; This function is called by:
 18667 ;;		_printf
 18668 ;; This function uses a non-reentrant model
 18669 ;;
 18670                           
 18671                           	psect	text61
 18672  004F12                     __ptext61:
 18673                           	opt stack 0
 18674  004F12                     ___lwdiv:
 18675                           	opt stack 19
 18676                           
 18677                           ; BSR set to: 0
 18678                           ;incstack = 0
 18679  004F12  0E00               	movlw	0
 18680  004F14  0100               	movlb	0	; () banked
 18681  004F16  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18682  004F18  0E00               	movlw	0
 18683  004F1A  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18684                           
 18685                           ; BSR set to: 0
 18686  004F1C  0100               	movlb	0	; () banked
 18687  004F1E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18688  004F20  0100               	movlb	0	; () banked
 18689  004F22  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18690  004F24  B4D8               	btfsc	status,2,c
 18691  004F26  D02C               	goto	l1967
 18692                           
 18693                           ; BSR set to: 0
 18694  004F28  0E01               	movlw	1
 18695  004F2A  0100               	movlb	0	; () banked
 18696  004F2C  6F86               	movwf	___lwdiv@counter& (0+255),b
 18697  004F2E  D006               	goto	l6566
 18698  004F30                     l6564:
 18699                           
 18700                           ; BSR set to: 0
 18701  004F30  0100               	movlb	0	; () banked
 18702  004F32  90D8               	bcf	status,0,c
 18703  004F34  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18704  004F36  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18705  004F38  0100               	movlb	0	; () banked
 18706  004F3A  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18707  004F3C                     l6566:
 18708                           
 18709                           ; BSR set to: 0
 18710  004F3C  0100               	movlb	0	; () banked
 18711  004F3E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18712  004F40  D7F7               	goto	l6564
 18713  004F42                     l6568:
 18714                           
 18715                           ; BSR set to: 0
 18716  004F42  0100               	movlb	0	; () banked
 18717  004F44  90D8               	bcf	status,0,c
 18718  004F46  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18719  004F48  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18720                           
 18721                           ; BSR set to: 0
 18722  004F4A  0100               	movlb	0	; () banked
 18723  004F4C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18724  004F4E  0100               	movlb	0	; () banked
 18725  004F50  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18726  004F52  0100               	movlb	0	; () banked
 18727  004F54  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18728  004F56  0100               	movlb	0	; () banked
 18729  004F58  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18730  004F5A  A0D8               	btfss	status,0,c
 18731  004F5C  D00A               	goto	l6576
 18732                           
 18733                           ; BSR set to: 0
 18734  004F5E  0100               	movlb	0	; () banked
 18735  004F60  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18736  004F62  0100               	movlb	0	; () banked
 18737  004F64  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18738  004F66  0100               	movlb	0	; () banked
 18739  004F68  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18740  004F6A  0100               	movlb	0	; () banked
 18741  004F6C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18742                           
 18743                           ; BSR set to: 0
 18744  004F6E  0100               	movlb	0	; () banked
 18745  004F70  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18746  004F72                     l6576:
 18747                           
 18748                           ; BSR set to: 0
 18749  004F72  0100               	movlb	0	; () banked
 18750  004F74  90D8               	bcf	status,0,c
 18751  004F76  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18752  004F78  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18753                           
 18754                           ; BSR set to: 0
 18755  004F7A  0100               	movlb	0	; () banked
 18756  004F7C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18757  004F7E  D7E1               	goto	l6568
 18758  004F80                     l1967:
 18759                           
 18760                           ; BSR set to: 0
 18761  004F80  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18762  004F84  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18763                           
 18764                           ; BSR set to: 0
 18765  004F88  0012               	return		;funcret
 18766  004F8A                     __end_of___lwdiv:
 18767                           	opt stack 0
 18768                           tblptru	equ	0xFF8
 18769                           tblptrh	equ	0xFF7
 18770                           tblptrl	equ	0xFF6
 18771                           tablat	equ	0xFF5
 18772                           prodh	equ	0xFF4
 18773                           prodl	equ	0xFF3
 18774                           intcon	equ	0xFF2
 18775                           intcon2	equ	0xFF1
 18776                           intcon3	equ	0xFF0
 18777                           indf0	equ	0xFEF
 18778                           postinc0	equ	0xFEE
 18779                           fsr0h	equ	0xFEA
 18780                           fsr0l	equ	0xFE9
 18781                           wreg	equ	0xFE8
 18782                           postdec1	equ	0xFE5
 18783                           fsr1l	equ	0xFE1
 18784                           indf2	equ	0xFDF
 18785                           postinc2	equ	0xFDE
 18786                           postdec2	equ	0xFDD
 18787                           fsr2h	equ	0xFDA
 18788                           fsr2l	equ	0xFD9
 18789                           status	equ	0xFD8
 18790                           
 18791 ;; *************** function _lcdInst *****************
 18792 ;; Defined at:
 18793 ;;		line 15 in file "lcd.c"
 18794 ;; Parameters:    Size  Location     Type
 18795 ;;  data            1    wreg     unsigned char 
 18796 ;; Auto vars:     Size  Location     Type
 18797 ;;  data            1    2[BANK0 ] unsigned char 
 18798 ;; Return value:  Size  Location     Type
 18799 ;;                  1    wreg      void 
 18800 ;; Registers used:
 18801 ;;		wreg, status,2, status,0, cstack
 18802 ;; Tracked objects:
 18803 ;;		On entry : 0/0
 18804 ;;		On exit  : 0/0
 18805 ;;		Unchanged: 0/0
 18806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18810 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18811 ;;Total ram usage:        1 bytes
 18812 ;; Hardware stack levels used:    1
 18813 ;; Hardware stack levels required when called:    8
 18814 ;; This function calls:
 18815 ;;		_lcdNibble
 18816 ;; This function is called by:
 18817 ;;		_UI
 18818 ;;		_change_state_to_menu_start
 18819 ;;		_change_state_to_menu_12
 18820 ;;		_change_state_to_menu_22
 18821 ;;		_initLCD
 18822 ;;		_printRTC
 18823 ;;		_Loading
 18824 ;;		_ID
 18825 ;;		_EEPROM_write
 18826 ;;		_Test
 18827 ;;		_algorithmTest
 18828 ;;		_sensorTest
 18829 ;;		_actuatorTest
 18830 ;;		_BothServos
 18831 ;;		_PortTestDC
 18832 ;;		_PlatformTest
 18833 ;;		_SpeedTest
 18834 ;;		_BlockerTest
 18835 ;;		_arm
 18836 ;;		_PortTestPusher
 18837 ;;		_ToggleTestA5
 18838 ;; This function uses a non-reentrant model
 18839 ;;
 18840                           
 18841                           	psect	text62
 18842  005BDE                     __ptext62:
 18843                           	opt stack 0
 18844  005BDE                     _lcdInst:
 18845                           	opt stack 20
 18846                           
 18847                           ; BSR set to: 0
 18848                           ;incstack = 0
 18849                           ;lcdInst@data stored from wreg
 18850  005BDE  0100               	movlb	0	; () banked
 18851  005BE0  6F82               	movwf	lcdInst@data& (0+255),b
 18852                           
 18853                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18854  005BE2  948C               	bcf	3980,2,c	;volatile
 18855                           
 18856                           ;lcd.c: 17: lcdNibble(data);
 18857  005BE4  0100               	movlb	0	; () banked
 18858  005BE6  5182               	movf	lcdInst@data& (0+255),w,b
 18859  005BE8  EC6F  F028         	call	_lcdNibble
 18860  005BEC  0012               	return		;funcret
 18861  005BEE                     __end_of_lcdInst:
 18862                           	opt stack 0
 18863                           tblptru	equ	0xFF8
 18864                           tblptrh	equ	0xFF7
 18865                           tblptrl	equ	0xFF6
 18866                           tablat	equ	0xFF5
 18867                           prodh	equ	0xFF4
 18868                           prodl	equ	0xFF3
 18869                           intcon	equ	0xFF2
 18870                           intcon2	equ	0xFF1
 18871                           intcon3	equ	0xFF0
 18872                           indf0	equ	0xFEF
 18873                           postinc0	equ	0xFEE
 18874                           fsr0h	equ	0xFEA
 18875                           fsr0l	equ	0xFE9
 18876                           wreg	equ	0xFE8
 18877                           postdec1	equ	0xFE5
 18878                           fsr1l	equ	0xFE1
 18879                           indf2	equ	0xFDF
 18880                           postinc2	equ	0xFDE
 18881                           postdec2	equ	0xFDD
 18882                           fsr2h	equ	0xFDA
 18883                           fsr2l	equ	0xFD9
 18884                           status	equ	0xFD8
 18885                           
 18886 ;; *************** function _lcdNibble *****************
 18887 ;; Defined at:
 18888 ;;		line 25 in file "lcd.c"
 18889 ;; Parameters:    Size  Location     Type
 18890 ;;  data            1    wreg     unsigned char 
 18891 ;; Auto vars:     Size  Location     Type
 18892 ;;  data            1    1[BANK0 ] unsigned char 
 18893 ;;  temp            1    0[BANK0 ] unsigned char 
 18894 ;; Return value:  Size  Location     Type
 18895 ;;                  1    wreg      void 
 18896 ;; Registers used:
 18897 ;;		wreg, status,2, status,0
 18898 ;; Tracked objects:
 18899 ;;		On entry : 0/0
 18900 ;;		On exit  : 0/0
 18901 ;;		Unchanged: 0/0
 18902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18907 ;;Total ram usage:        2 bytes
 18908 ;; Hardware stack levels used:    1
 18909 ;; Hardware stack levels required when called:    7
 18910 ;; This function calls:
 18911 ;;		Nothing
 18912 ;; This function is called by:
 18913 ;;		_lcdInst
 18914 ;;		_putch
 18915 ;; This function uses a non-reentrant model
 18916 ;;
 18917                           
 18918                           	psect	text63
 18919  0050DE                     __ptext63:
 18920                           	opt stack 0
 18921  0050DE                     _lcdNibble:
 18922                           	opt stack 20
 18923                           
 18924                           ;incstack = 0
 18925                           ;lcdNibble@data stored from wreg
 18926  0050DE  0100               	movlb	0	; () banked
 18927  0050E0  6F81               	movwf	lcdNibble@data& (0+255),b
 18928                           
 18929                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18930  0050E2  9EF2               	bcf	intcon,7,c	;volatile
 18931                           
 18932                           ;lcd.c: 28: char temp = data & 0xF0;
 18933  0050E4  0100               	movlb	0	; () banked
 18934  0050E6  5181               	movf	lcdNibble@data& (0+255),w,b
 18935  0050E8  0BF0               	andlw	240
 18936  0050EA  0100               	movlb	0	; () banked
 18937  0050EC  6F80               	movwf	lcdNibble@temp& (0+255),b
 18938                           
 18939                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18940  0050EE  508C               	movf	3980,w,c	;volatile
 18941  0050F0  0B0F               	andlw	15
 18942  0050F2  6E8C               	movwf	3980,c	;volatile
 18943                           
 18944                           ;lcd.c: 30: LATD = temp | LATD;
 18945  0050F4  0100               	movlb	0	; () banked
 18946  0050F6  5180               	movf	lcdNibble@temp& (0+255),w,b
 18947  0050F8  108C               	iorwf	3980,w,c	;volatile
 18948  0050FA  6E8C               	movwf	3980,c	;volatile
 18949                           
 18950                           ; BSR set to: 0
 18951                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18952  0050FC  868C               	bsf	3980,3,c	;volatile
 18953                           
 18954                           ; BSR set to: 0
 18955                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18956  0050FE  0E42               	movlw	66
 18957  005100                     u11267:
 18958  005100  2EE8               	decfsz	wreg,f,c
 18959  005102  D7FE               	bra	u11267
 18960  005104  D000               	nop2	
 18961                           
 18962                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18963  005106  968C               	bcf	3980,3,c	;volatile
 18964                           
 18965                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18966  005108  0E42               	movlw	66
 18967  00510A                     u11277:
 18968  00510A  2EE8               	decfsz	wreg,f,c
 18969  00510C  D7FE               	bra	u11277
 18970  00510E  D000               	nop2	
 18971                           
 18972                           ;lcd.c: 37: data = data << 4;
 18973  005110  0100               	movlb	0	; () banked
 18974  005112  3981               	swapf	lcdNibble@data& (0+255),w,b
 18975  005114  0BF0               	andlw	240
 18976  005116  0100               	movlb	0	; () banked
 18977  005118  6F81               	movwf	lcdNibble@data& (0+255),b
 18978                           
 18979                           ;lcd.c: 39: temp = data & 0xF0;
 18980  00511A  0100               	movlb	0	; () banked
 18981  00511C  5181               	movf	lcdNibble@data& (0+255),w,b
 18982  00511E  0BF0               	andlw	240
 18983  005120  0100               	movlb	0	; () banked
 18984  005122  6F80               	movwf	lcdNibble@temp& (0+255),b
 18985                           
 18986                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18987  005124  508C               	movf	3980,w,c	;volatile
 18988  005126  0B0F               	andlw	15
 18989  005128  6E8C               	movwf	3980,c	;volatile
 18990                           
 18991                           ;lcd.c: 41: LATD = temp | LATD;
 18992  00512A  0100               	movlb	0	; () banked
 18993  00512C  5180               	movf	lcdNibble@temp& (0+255),w,b
 18994  00512E  108C               	iorwf	3980,w,c	;volatile
 18995  005130  6E8C               	movwf	3980,c	;volatile
 18996                           
 18997                           ; BSR set to: 0
 18998                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18999  005132  868C               	bsf	3980,3,c	;volatile
 19000                           
 19001                           ; BSR set to: 0
 19002                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19003  005134  0E42               	movlw	66
 19004  005136                     u11287:
 19005  005136  2EE8               	decfsz	wreg,f,c
 19006  005138  D7FE               	bra	u11287
 19007  00513A  D000               	nop2	
 19008                           
 19009                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19010  00513C  968C               	bcf	3980,3,c	;volatile
 19011                           
 19012                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19013  00513E  0E42               	movlw	66
 19014  005140                     u11297:
 19015  005140  2EE8               	decfsz	wreg,f,c
 19016  005142  D7FE               	bra	u11297
 19017  005144  D000               	nop2	
 19018                           
 19019                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19020  005146  8EF2               	bsf	intcon,7,c	;volatile
 19021  005148  0012               	return		;funcret
 19022  00514A                     __end_of_lcdNibble:
 19023                           	opt stack 0
 19024                           tblptru	equ	0xFF8
 19025                           tblptrh	equ	0xFF7
 19026                           tblptrl	equ	0xFF6
 19027                           tablat	equ	0xFF5
 19028                           prodh	equ	0xFF4
 19029                           prodl	equ	0xFF3
 19030                           intcon	equ	0xFF2
 19031                           intcon2	equ	0xFF1
 19032                           intcon3	equ	0xFF0
 19033                           indf0	equ	0xFEF
 19034                           postinc0	equ	0xFEE
 19035                           fsr0h	equ	0xFEA
 19036                           fsr0l	equ	0xFE9
 19037                           wreg	equ	0xFE8
 19038                           postdec1	equ	0xFE5
 19039                           fsr1l	equ	0xFE1
 19040                           indf2	equ	0xFDF
 19041                           postinc2	equ	0xFDE
 19042                           postdec2	equ	0xFDD
 19043                           fsr2h	equ	0xFDA
 19044                           fsr2l	equ	0xFD9
 19045                           status	equ	0xFD8
 19046                           
 19047 ;; *************** function _handler *****************
 19048 ;; Defined at:
 19049 ;;		line 16 in file "interruptHandler.c"
 19050 ;; Parameters:    Size  Location     Type
 19051 ;;		None
 19052 ;; Auto vars:     Size  Location     Type
 19053 ;;		None
 19054 ;; Return value:  Size  Location     Type
 19055 ;;                  1    wreg      void 
 19056 ;; Registers used:
 19057 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19058 ;; Tracked objects:
 19059 ;;		On entry : 0/0
 19060 ;;		On exit  : 0/0
 19061 ;;		Unchanged: 0/0
 19062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19065 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19066 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19067 ;;Total ram usage:       16 bytes
 19068 ;; Hardware stack levels used:    1
 19069 ;; Hardware stack levels required when called:    6
 19070 ;; This function calls:
 19071 ;;		_printSortTimer
 19072 ;;		_updateArmState
 19073 ;;		_updateMenu
 19074 ;;		_updateServoStates
 19075 ;;		i2_change_state_to_menu_start
 19076 ;; This function is called by:
 19077 ;;		Interrupt level 2
 19078 ;; This function uses a non-reentrant model
 19079 ;;
 19080                           
 19081                           	psect	intcode
 19082  000008                     __pintcode:
 19083                           	opt stack 0
 19084  000008                     _handler:
 19085                           	opt stack 18
 19086                           
 19087                           ;incstack = 0
 19088  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19089  00000A  EDF5  F01B         	call	int_func,f	;refresh shadow registers
 19090                           tblptru	equ	0xFF8
 19091                           tblptrh	equ	0xFF7
 19092                           tblptrl	equ	0xFF6
 19093                           tablat	equ	0xFF5
 19094                           prodh	equ	0xFF4
 19095                           prodl	equ	0xFF3
 19096                           intcon	equ	0xFF2
 19097                           intcon2	equ	0xFF1
 19098                           intcon3	equ	0xFF0
 19099                           indf0	equ	0xFEF
 19100                           postinc0	equ	0xFEE
 19101                           fsr0h	equ	0xFEA
 19102                           fsr0l	equ	0xFE9
 19103                           wreg	equ	0xFE8
 19104                           postdec1	equ	0xFE5
 19105                           fsr1l	equ	0xFE1
 19106                           indf2	equ	0xFDF
 19107                           postinc2	equ	0xFDE
 19108                           postdec2	equ	0xFDD
 19109                           fsr2h	equ	0xFDA
 19110                           fsr2l	equ	0xFD9
 19111                           status	equ	0xFD8
 19112                           
 19113                           	psect	intcode_body
 19114  0037EA                     __pintcode_body:
 19115                           	opt stack 18
 19116  0037EA                     int_func:
 19117                           	opt stack 18
 19118  0037EA  0006               	pop		; remove dummy address from shadow register refresh
 19119  0037EC  CFFA F04D          	movff	pclath,??_handler+2
 19120  0037F0  CFFB F04E          	movff	pclatu,??_handler+3
 19121  0037F4  CFE9 F04F          	movff	fsr0l,??_handler+4
 19122  0037F8  CFEA F050          	movff	fsr0h,??_handler+5
 19123  0037FC  CFE1 F051          	movff	fsr1l,??_handler+6
 19124  003800  CFE2 F052          	movff	fsr1h,??_handler+7
 19125  003804  CFD9 F053          	movff	fsr2l,??_handler+8
 19126  003808  CFDA F054          	movff	fsr2h,??_handler+9
 19127  00380C  CFF3 F055          	movff	prodl,??_handler+10
 19128  003810  CFF4 F056          	movff	prodh,??_handler+11
 19129  003814  CFF6 F057          	movff	tblptrl,??_handler+12
 19130  003818  CFF7 F058          	movff	tblptrh,??_handler+13
 19131  00381C  CFF8 F059          	movff	tblptru,??_handler+14
 19132  003820  CFF5 F05A          	movff	tablat,??_handler+15
 19133                           
 19134                           ;interruptHandler.c: 18: if(INT1IF){
 19135  003824  A0F0               	btfss	intcon3,0,c	;volatile
 19136  003826  D034               	goto	i2l10170
 19137                           
 19138                           ;interruptHandler.c: 19: INT1IF = 0;
 19139  003828  90F0               	bcf	intcon3,0,c	;volatile
 19140                           
 19141                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19142  00382A  3881               	swapf	3969,w,c	;volatile
 19143  00382C  0B0F               	andlw	15
 19144  00382E  0B0F               	andlw	15
 19145  003830  6E4B               	movwf	??_handler& (0+255),c
 19146  003832  6A4C               	clrf	(??_handler+1)& (0+255),c
 19147  003834  0E8B               	movlw	low _keys
 19148  003836  244B               	addwf	??_handler,w,c
 19149  003838  6EF6               	movwf	tblptrl,c
 19150  00383A  0EFA               	movlw	high _keys
 19151  00383C  204C               	addwfc	??_handler+1,w,c
 19152  00383E  6EF7               	movwf	tblptrh,c
 19153  003840                     	if	1	;There are 3 active tblptr bytes
 19154  003840  6AF8               	clrf	tblptru,c
 19155  003842  0E00               	movlw	low (__mediumconst shr (0+16))
 19156  003844  22F8               	addwfc	tblptru,f,c
 19157  003846                     	endif
 19158  003846  0008               	tblrd		*
 19159  003848  CFF5 F07D          	movff	tablat,_input	;volatile
 19160                           
 19161                           ;interruptHandler.c: 21: if(input == '*'){
 19162  00384C  0E2A               	movlw	42
 19163  00384E  187D               	xorwf	_input,w,c	;volatile
 19164  003850  B4D8               	btfsc	status,2,c
 19165  003852  D00D               	goto	i2l10164
 19166  003854  D018               	goto	i2l10166
 19167  003856                     i2l10154:
 19168                           
 19169                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19170  003856  0E03               	movlw	3
 19171  003858  D007               	goto	L17
 19172  00385A                     i2l10156:
 19173                           
 19174                           ; BSR set to: 0
 19175                           ;interruptHandler.c: 27: machine_state = UI_state;
 19176  00385A  0E00               	movlw	0
 19177  00385C  0100               	movlb	0	; () banked
 19178  00385E  6FFC               	movwf	_machine_state& (0+255),b
 19179                           
 19180                           ; BSR set to: 0
 19181                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19182  003860  EC19  F02D         	call	i2_change_state_to_menu_start	;wreg free
 19183                           
 19184                           ;interruptHandler.c: 29: break;
 19185  003864  D015               	goto	i2l10170
 19186  003866                     i2l10160:
 19187                           
 19188                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19189  003866  0E02               	movlw	2
 19190  003868                     L17:
 19191  003868  0100               	movlb	0	; () banked
 19192  00386A  6FFC               	movwf	_machine_state& (0+255),b
 19193                           
 19194                           ; BSR set to: 0
 19195                           ;interruptHandler.c: 33: }
 19196                           
 19197                           ;interruptHandler.c: 32: break;
 19198  00386C  D011               	goto	i2l10170
 19199  00386E                     i2l10164:
 19200  00386E  0100               	movlb	0	; () banked
 19201  003870  51FC               	movf	_machine_state& (0+255),w,b
 19202                           
 19203                           ; Switch size 1, requested type "space"
 19204                           ; Number of cases is 3, Range of values is 0 to 3
 19205                           ; switch strategies available:
 19206                           ; Name         Instructions Cycles
 19207                           ; simple_byte           10     6 (average)
 19208                           ;	Chosen strategy is simple_byte
 19209  003872  0A00               	xorlw	0	; case 0
 19210  003874  B4D8               	btfsc	status,2,c
 19211  003876  D7EF               	goto	i2l10154
 19212  003878  0A01               	xorlw	1	; case 1
 19213  00387A  B4D8               	btfsc	status,2,c
 19214  00387C  D7F4               	goto	i2l10160
 19215  00387E  0A02               	xorlw	2	; case 3
 19216  003880  B4D8               	btfsc	status,2,c
 19217  003882  D7EB               	goto	i2l10156
 19218                           
 19219                           ; BSR set to: 0
 19220                           ;interruptHandler.c: 34: }
 19221  003884  D005               	goto	i2l10170
 19222  003886                     i2l10166:
 19223                           
 19224                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19225  003886  0100               	movlb	0	; () banked
 19226  003888  51FC               	movf	_machine_state& (0+255),w,b
 19227  00388A  B4D8               	btfsc	status,2,c
 19228                           
 19229                           ; BSR set to: 0
 19230                           ;interruptHandler.c: 36: updateMenu();
 19231  00388C  EC26  F018         	call	_updateMenu	;wreg free
 19232  003890                     i2l10170:
 19233                           
 19234                           ;interruptHandler.c: 37: }
 19235                           ;interruptHandler.c: 38: }
 19236                           ;interruptHandler.c: 41: if(TMR0IF){
 19237  003890  A4F2               	btfss	intcon,2,c	;volatile
 19238  003892  D00C               	goto	i2l10184
 19239                           
 19240                           ;interruptHandler.c: 42: TMR0IF = 0;
 19241  003894  94F2               	bcf	intcon,2,c	;volatile
 19242                           
 19243                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19244  003896  0100               	movlb	0	; () banked
 19245  003898  05FC               	decf	_machine_state& (0+255),w,b
 19246  00389A  A4D8               	btfss	status,2,c
 19247  00389C  D007               	goto	i2l10184
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;interruptHandler.c: 44: printSortTimer();
 19251  00389E  EC86  F019         	call	_printSortTimer	;wreg free
 19252                           
 19253                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19254  0038A2  0E85               	movlw	133
 19255  0038A4  6ED7               	movwf	4055,c	;volatile
 19256                           
 19257                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19258  0038A6  0EEE               	movlw	238
 19259  0038A8  6ED6               	movwf	4054,c	;volatile
 19260                           
 19261                           ;interruptHandler.c: 48: TMR0ON = 1;
 19262  0038AA  8ED5               	bsf	4053,7,c	;volatile
 19263  0038AC                     i2l10184:
 19264                           
 19265                           ;interruptHandler.c: 49: }
 19266                           ;interruptHandler.c: 50: }
 19267                           ;interruptHandler.c: 53: if(TMR1IF){
 19268  0038AC  A09E               	btfss	3998,0,c	;volatile
 19269  0038AE  D02A               	goto	i2l10212
 19270                           
 19271                           ;interruptHandler.c: 54: TMR1IF = 0;
 19272  0038B0  909E               	bcf	3998,0,c	;volatile
 19273                           
 19274                           ;interruptHandler.c: 55: TMR1ON = 0;
 19275  0038B2  90CD               	bcf	4045,0,c	;volatile
 19276                           
 19277                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19278  0038B4  0100               	movlb	0	; () banked
 19279  0038B6  05FC               	decf	_machine_state& (0+255),w,b
 19280  0038B8  A4D8               	btfss	status,2,c
 19281  0038BA  D024               	goto	i2l10212
 19282                           
 19283                           ; BSR set to: 0
 19284                           ;interruptHandler.c: 57: if(was_low_1){
 19285  0038BC  5077               	movf	_was_low_1,w,c	;volatile
 19286  0038BE  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19287  0038C0  B4D8               	btfsc	status,2,c
 19288  0038C2  D00A               	goto	i2l1042
 19289                           
 19290                           ; BSR set to: 0
 19291                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19292  0038C4  828B               	bsf	3979,1,c	;volatile
 19293                           
 19294                           ; BSR set to: 0
 19295                           ;interruptHandler.c: 59: was_low_1 = 0;
 19296  0038C6  0E00               	movlw	0
 19297  0038C8  6E78               	movwf	_was_low_1+1,c	;volatile
 19298  0038CA  0E00               	movlw	0
 19299  0038CC  6E77               	movwf	_was_low_1,c	;volatile
 19300                           
 19301                           ; BSR set to: 0
 19302                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19303  0038CE  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19307  0038D2  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 19308                           
 19309                           ;interruptHandler.c: 62: }
 19310  0038D6  D00F               	goto	i2l10206
 19311  0038D8                     i2l1042:
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;interruptHandler.c: 63: else{
 19315                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19316  0038D8  928B               	bcf	3979,1,c	;volatile
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;interruptHandler.c: 65: was_low_1 = 1;
 19320  0038DA  0E00               	movlw	0
 19321  0038DC  6E78               	movwf	_was_low_1+1,c	;volatile
 19322  0038DE  0E01               	movlw	1
 19323  0038E0  6E77               	movwf	_was_low_1,c	;volatile
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19327  0038E2  0101               	movlb	1	; () banked
 19328  0038E4  511C               	movf	_servoTimes& (0+255),w,b
 19329  0038E6  0800               	sublw	0
 19330  0038E8  0F20               	addlw	32
 19331  0038EA  6ECF               	movwf	4047,c	;volatile
 19332                           
 19333                           ; BSR set to: 1
 19334                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19335  0038EC  0101               	movlb	1	; () banked
 19336  0038EE  511E               	movf	(_servoTimes+2)& (0+255),w,b
 19337  0038F0  0800               	sublw	0
 19338  0038F2  0F20               	addlw	32
 19339  0038F4  6ECE               	movwf	4046,c	;volatile
 19340  0038F6                     i2l10206:
 19341                           
 19342                           ;interruptHandler.c: 68: }
 19343                           ;interruptHandler.c: 69: TMR1ON = 1;
 19344  0038F6  80CD               	bsf	4045,0,c	;volatile
 19345                           
 19346                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19347  0038F8  0E0A               	movlw	10
 19348  0038FA  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19349  0038FC  0E00               	movlw	0
 19350  0038FE  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19351                           
 19352                           ;interruptHandler.c: 72: updateServoStates();
 19353  003900  ECE4  F01D         	call	_updateServoStates	;wreg free
 19354  003904                     i2l10212:
 19355                           
 19356                           ;interruptHandler.c: 73: }
 19357                           ;interruptHandler.c: 74: }
 19358                           ;interruptHandler.c: 77: if(TMR2IF){
 19359  003904  A29E               	btfss	3998,1,c	;volatile
 19360  003906  D026               	goto	i2l10238
 19361                           
 19362                           ;interruptHandler.c: 80: TMR2IF = 0;
 19363  003908  929E               	bcf	3998,1,c	;volatile
 19364                           
 19365                           ;interruptHandler.c: 81: TMR2ON = 0;
 19366  00390A  94CA               	bcf	4042,2,c	;volatile
 19367                           
 19368                           ;interruptHandler.c: 82: timer2_counter++;
 19369  00390C  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19370  00390E  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19371                           
 19372                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19373  003910  0100               	movlb	0	; () banked
 19374  003912  05FC               	decf	_machine_state& (0+255),w,b
 19375  003914  A4D8               	btfss	status,2,c
 19376  003916  D01E               	goto	i2l10238
 19377                           
 19378                           ; BSR set to: 0
 19379                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19380  003918  5079               	movf	_was_low_2,w,c	;volatile
 19381  00391A  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19382  00391C  B4D8               	btfsc	status,2,c
 19383  00391E  D00A               	goto	i2l10228
 19384                           
 19385                           ; BSR set to: 0
 19386  003920  0E02               	movlw	2
 19387  003922  1873               	xorwf	_timer2_counter,w,c	;volatile
 19388  003924  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19389  003926  A4D8               	btfss	status,2,c
 19390  003928  D005               	goto	i2l10228
 19391                           
 19392                           ; BSR set to: 0
 19393                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19394  00392A  868A               	bsf	3978,3,c	;volatile
 19395                           
 19396                           ; BSR set to: 0
 19397                           ;interruptHandler.c: 87: was_low_2 = 0;
 19398  00392C  0E00               	movlw	0
 19399  00392E  6E7A               	movwf	_was_low_2+1,c	;volatile
 19400  003930  0E00               	movlw	0
 19401  003932  D008               	goto	L18
 19402  003934                     i2l10228:
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;interruptHandler.c: 90: else if(!was_low_2){
 19406  003934  5079               	movf	_was_low_2,w,c	;volatile
 19407  003936  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19408  003938  A4D8               	btfss	status,2,c
 19409  00393A  D009               	goto	i2l10234
 19410                           
 19411                           ; BSR set to: 0
 19412                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19413  00393C  968A               	bcf	3978,3,c	;volatile
 19414                           
 19415                           ; BSR set to: 0
 19416                           ;interruptHandler.c: 92: was_low_2 = 1;
 19417  00393E  0E00               	movlw	0
 19418  003940  6E7A               	movwf	_was_low_2+1,c	;volatile
 19419  003942  0E01               	movlw	1
 19420  003944                     L18:
 19421  003944  6E79               	movwf	_was_low_2,c	;volatile
 19422                           
 19423                           ;interruptHandler.c: 93: timer2_counter = 0;
 19424  003946  0E00               	movlw	0
 19425  003948  6E74               	movwf	_timer2_counter+1,c	;volatile
 19426  00394A  0E00               	movlw	0
 19427  00394C  6E73               	movwf	_timer2_counter,c	;volatile
 19428  00394E                     i2l10234:
 19429                           
 19430                           ; BSR set to: 0
 19431                           ;interruptHandler.c: 94: }
 19432                           ;interruptHandler.c: 95: updateArmState();
 19433  00394E  ECE9  F02A         	call	_updateArmState	;wreg free
 19434                           
 19435                           ;interruptHandler.c: 96: TMR2ON = 1;
 19436  003952  84CA               	bsf	4042,2,c	;volatile
 19437  003954                     i2l10238:
 19438                           
 19439                           ;interruptHandler.c: 97: }
 19440                           ;interruptHandler.c: 98: }
 19441                           ;interruptHandler.c: 101: if(TMR3IF){
 19442  003954  A2A1               	btfss	4001,1,c	;volatile
 19443  003956  D024               	goto	i2l1053
 19444                           
 19445                           ;interruptHandler.c: 102: TMR3IF = 0;
 19446  003958  92A1               	bcf	4001,1,c	;volatile
 19447                           
 19448                           ;interruptHandler.c: 103: TMR3ON = 0;
 19449  00395A  90B1               	bcf	4017,0,c	;volatile
 19450                           
 19451                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19452  00395C  0100               	movlb	0	; () banked
 19453  00395E  05FC               	decf	_machine_state& (0+255),w,b
 19454  003960  A4D8               	btfss	status,2,c
 19455  003962  D01E               	goto	i2l1053
 19456                           
 19457                           ; BSR set to: 0
 19458                           ;interruptHandler.c: 105: if(was_low_3){
 19459  003964  507B               	movf	_was_low_3,w,c	;volatile
 19460  003966  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19461  003968  B4D8               	btfsc	status,2,c
 19462  00396A  D00A               	goto	i2l1051
 19463                           
 19464                           ; BSR set to: 0
 19465                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19466  00396C  848B               	bsf	3979,2,c	;volatile
 19467                           
 19468                           ; BSR set to: 0
 19469                           ;interruptHandler.c: 107: was_low_3 = 0;
 19470  00396E  0E00               	movlw	0
 19471  003970  6E7C               	movwf	_was_low_3+1,c	;volatile
 19472  003972  0E00               	movlw	0
 19473  003974  6E7B               	movwf	_was_low_3,c	;volatile
 19474                           
 19475                           ; BSR set to: 0
 19476                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19477  003976  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 19478                           
 19479                           ; BSR set to: 0
 19480                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19481  00397A  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 19482                           
 19483                           ;interruptHandler.c: 110: }
 19484  00397E  D00F               	goto	i2l10260
 19485  003980                     i2l1051:
 19486                           
 19487                           ; BSR set to: 0
 19488                           ;interruptHandler.c: 111: else{
 19489                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19490  003980  948B               	bcf	3979,2,c	;volatile
 19491                           
 19492                           ; BSR set to: 0
 19493                           ;interruptHandler.c: 113: was_low_3 = 1;
 19494  003982  0E00               	movlw	0
 19495  003984  6E7C               	movwf	_was_low_3+1,c	;volatile
 19496  003986  0E01               	movlw	1
 19497  003988  6E7B               	movwf	_was_low_3,c	;volatile
 19498                           
 19499                           ; BSR set to: 0
 19500                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19501  00398A  0101               	movlb	1	; () banked
 19502  00398C  5120               	movf	(_servoTimes+4)& (0+255),w,b
 19503  00398E  0800               	sublw	0
 19504  003990  0F20               	addlw	32
 19505  003992  6EB3               	movwf	4019,c	;volatile
 19506                           
 19507                           ; BSR set to: 1
 19508                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19509  003994  0101               	movlb	1	; () banked
 19510  003996  5122               	movf	(_servoTimes+6)& (0+255),w,b
 19511  003998  0800               	sublw	0
 19512  00399A  0F20               	addlw	32
 19513  00399C  6EB2               	movwf	4018,c	;volatile
 19514  00399E                     i2l10260:
 19515                           
 19516                           ;interruptHandler.c: 116: }
 19517                           ;interruptHandler.c: 117: TMR3ON = 1;
 19518  00399E  80B1               	bsf	4017,0,c	;volatile
 19519  0039A0                     i2l1053:
 19520  0039A0  C05A  FFF5         	movff	??_handler+15,tablat
 19521  0039A4  C059  FFF8         	movff	??_handler+14,tblptru
 19522  0039A8  C058  FFF7         	movff	??_handler+13,tblptrh
 19523  0039AC  C057  FFF6         	movff	??_handler+12,tblptrl
 19524  0039B0  C056  FFF4         	movff	??_handler+11,prodh
 19525  0039B4  C055  FFF3         	movff	??_handler+10,prodl
 19526  0039B8  C054  FFDA         	movff	??_handler+9,fsr2h
 19527  0039BC  C053  FFD9         	movff	??_handler+8,fsr2l
 19528  0039C0  C052  FFE2         	movff	??_handler+7,fsr1h
 19529  0039C4  C051  FFE1         	movff	??_handler+6,fsr1l
 19530  0039C8  C050  FFEA         	movff	??_handler+5,fsr0h
 19531  0039CC  C04F  FFE9         	movff	??_handler+4,fsr0l
 19532  0039D0  C04E  FFFB         	movff	??_handler+3,pclatu
 19533  0039D4  C04D  FFFA         	movff	??_handler+2,pclath
 19534  0039D8  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19535  0039DA  0011               	retfie		f
 19536  0039DC                     __end_of_handler:
 19537                           	opt stack 0
 19538                           pclatu	equ	0xFFB
 19539                           pclath	equ	0xFFA
 19540                           tblptru	equ	0xFF8
 19541                           tblptrh	equ	0xFF7
 19542                           tblptrl	equ	0xFF6
 19543                           tablat	equ	0xFF5
 19544                           prodh	equ	0xFF4
 19545                           prodl	equ	0xFF3
 19546                           intcon	equ	0xFF2
 19547                           intcon2	equ	0xFF1
 19548                           intcon3	equ	0xFF0
 19549                           indf0	equ	0xFEF
 19550                           postinc0	equ	0xFEE
 19551                           fsr0h	equ	0xFEA
 19552                           fsr0l	equ	0xFE9
 19553                           wreg	equ	0xFE8
 19554                           postdec1	equ	0xFE5
 19555                           fsr1h	equ	0xFE2
 19556                           fsr1l	equ	0xFE1
 19557                           indf2	equ	0xFDF
 19558                           postinc2	equ	0xFDE
 19559                           postdec2	equ	0xFDD
 19560                           fsr2h	equ	0xFDA
 19561                           fsr2l	equ	0xFD9
 19562                           status	equ	0xFD8
 19563                           
 19564 ;; *************** function _updateServoStates *****************
 19565 ;; Defined at:
 19566 ;;		line 565 in file "sort.c"
 19567 ;; Parameters:    Size  Location     Type
 19568 ;;		None
 19569 ;; Auto vars:     Size  Location     Type
 19570 ;;		None
 19571 ;; Return value:  Size  Location     Type
 19572 ;;                  1    wreg      void 
 19573 ;; Registers used:
 19574 ;;		wreg, status,2, status,0, cstack
 19575 ;; Tracked objects:
 19576 ;;		On entry : 0/0
 19577 ;;		On exit  : 0/0
 19578 ;;		Unchanged: 0/0
 19579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19584 ;;Total ram usage:        2 bytes
 19585 ;; Hardware stack levels used:    1
 19586 ;; Hardware stack levels required when called:    1
 19587 ;; This function calls:
 19588 ;;		i2_updateServoPosition
 19589 ;; This function is called by:
 19590 ;;		_handler
 19591 ;; This function uses a non-reentrant model
 19592 ;;
 19593                           
 19594                           	psect	text65
 19595  003BC8                     __ptext65:
 19596                           	opt stack 0
 19597  003BC8                     _updateServoStates:
 19598                           	opt stack 22
 19599                           
 19600                           ;sort.c: 567: if(servo_timer_counter >= servo_timer_target){
 19601                           
 19602                           ;incstack = 0
 19603  003BC8  506F               	movf	_servo_timer_target,w,c	;volatile
 19604  003BCA  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19605  003BCC  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19606  003BCE  0A80               	xorlw	128
 19607  003BD0  6E09               	movwf	??_updateServoStates& (0+255),c
 19608  003BD2  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19609  003BD4  0A80               	xorlw	128
 19610  003BD6  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19611  003BD8  A0D8               	btfss	status,0,c
 19612  003BDA  0012               	return	
 19613                           
 19614                           ;sort.c: 569: if(f_panning_to_bin){
 19615  003BDC  5061               	movf	_f_panning_to_bin,w,c	;volatile
 19616  003BDE  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19617  003BE0  A4D8               	btfss	status,2,c
 19618  003BE2  D036               	goto	i2l10028
 19619  003BE4  D05F               	goto	i2l10032
 19620  003BE6                     i2l10002:
 19621                           
 19622                           ;sort.c: 573: updateServoPosition(1260, 3);
 19623  003BE6  0E04               	movlw	4
 19624  003BE8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19625  003BEA  0EEC               	movlw	236
 19626  003BEC  6E01               	movwf	i2updateServoPosition@time_us,c
 19627  003BEE  0E00               	movlw	0
 19628  003BF0  6E04               	movwf	i2updateServoPosition@timer+1,c
 19629  003BF2  0E03               	movlw	3
 19630  003BF4  6E03               	movwf	i2updateServoPosition@timer,c
 19631  003BF6  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19632  003BFA  D025               	goto	i2l10022
 19633  003BFC                     i2l10006:
 19634                           
 19635                           ;sort.c: 575: servo_timer_target = 700;
 19636  003BFC  0E02               	movlw	2
 19637  003BFE  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19638  003C00  0EBC               	movlw	188
 19639  003C02  6E6F               	movwf	_servo_timer_target,c	;volatile
 19640                           
 19641                           ;sort.c: 576: break;
 19642  003C04  D04A               	goto	i2l10030
 19643  003C06                     i2l10008:
 19644                           
 19645                           ;sort.c: 578: updateServoPosition(1260, 3);
 19646  003C06  0E04               	movlw	4
 19647  003C08  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19648  003C0A  0EEC               	movlw	236
 19649  003C0C  6E01               	movwf	i2updateServoPosition@time_us,c
 19650  003C0E  0E00               	movlw	0
 19651  003C10  6E04               	movwf	i2updateServoPosition@timer+1,c
 19652  003C12  0E03               	movlw	3
 19653  003C14  6E03               	movwf	i2updateServoPosition@timer,c
 19654  003C16  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19655  003C1A  D015               	goto	i2l10022
 19656  003C1C                     i2l10014:
 19657                           
 19658                           ;sort.c: 584: updateServoPosition(1390, 3);
 19659  003C1C  0E05               	movlw	5
 19660  003C1E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19661  003C20  0E6E               	movlw	110
 19662  003C22  6E01               	movwf	i2updateServoPosition@time_us,c
 19663  003C24  0E00               	movlw	0
 19664  003C26  6E04               	movwf	i2updateServoPosition@timer+1,c
 19665  003C28  0E03               	movlw	3
 19666  003C2A  6E03               	movwf	i2updateServoPosition@timer,c
 19667  003C2C  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19668  003C30  D00A               	goto	i2l10022
 19669  003C32                     i2l10020:
 19670                           
 19671                           ;sort.c: 589: updateServoPosition(1390, 3);
 19672  003C32  0E05               	movlw	5
 19673  003C34  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19674  003C36  0E6E               	movlw	110
 19675  003C38  6E01               	movwf	i2updateServoPosition@time_us,c
 19676  003C3A  0E00               	movlw	0
 19677  003C3C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19678  003C3E  0E03               	movlw	3
 19679  003C40  6E03               	movwf	i2updateServoPosition@timer,c
 19680  003C42  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19681  003C46                     i2l10022:
 19682                           
 19683                           ;sort.c: 590: servo_timer_counter = 0;
 19684  003C46  0E00               	movlw	0
 19685  003C48  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19686  003C4A  0E00               	movlw	0
 19687  003C4C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19688  003C4E  D7D6               	goto	i2l10006
 19689  003C50                     i2l10028:
 19690  003C50  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19691  003C54  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19692                           
 19693                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19694                           ; Switch size 1, requested type "space"
 19695                           ; Number of cases is 4, Range of values is 1 to 9
 19696                           ; switch strategies available:
 19697                           ; Name         Instructions Cycles
 19698                           ; simple_byte           13     7 (average)
 19699                           ;	Chosen strategy is simple_byte
 19700  003C58  500A               	movf	??_updateServoStates+1,w,c
 19701  003C5A  0A01               	xorlw	1	; case 1
 19702  003C5C  B4D8               	btfsc	status,2,c
 19703  003C5E  D00A               	goto	i2l10708
 19704  003C60  0A02               	xorlw	2	; case 3
 19705  003C62  B4D8               	btfsc	status,2,c
 19706  003C64  D00C               	goto	i2l10710
 19707  003C66  0A05               	xorlw	5	; case 6
 19708  003C68  B4D8               	btfsc	status,2,c
 19709  003C6A  D00E               	goto	i2l10712
 19710  003C6C  0A0F               	xorlw	15	; case 9
 19711  003C6E  B4D8               	btfsc	status,2,c
 19712  003C70  D010               	goto	i2l10714
 19713  003C72  D013               	goto	i2l10030
 19714  003C74                     i2l10708:
 19715                           
 19716                           ; Switch size 1, requested type "space"
 19717                           ; Number of cases is 1, Range of values is 244 to 244
 19718                           ; switch strategies available:
 19719                           ; Name         Instructions Cycles
 19720                           ; simple_byte            4     3 (average)
 19721                           ;	Chosen strategy is simple_byte
 19722  003C74  5009               	movf	??_updateServoStates,w,c
 19723  003C76  0AF4               	xorlw	244	; case 244
 19724  003C78  B4D8               	btfsc	status,2,c
 19725  003C7A  D7B5               	goto	i2l10002
 19726  003C7C  D00E               	goto	i2l10030
 19727  003C7E                     i2l10710:
 19728                           
 19729                           ; Switch size 1, requested type "space"
 19730                           ; Number of cases is 1, Range of values is 82 to 82
 19731                           ; switch strategies available:
 19732                           ; Name         Instructions Cycles
 19733                           ; simple_byte            4     3 (average)
 19734                           ;	Chosen strategy is simple_byte
 19735  003C7E  5009               	movf	??_updateServoStates,w,c
 19736  003C80  0A52               	xorlw	82	; case 82
 19737  003C82  B4D8               	btfsc	status,2,c
 19738  003C84  D7C0               	goto	i2l10008
 19739  003C86  D009               	goto	i2l10030
 19740  003C88                     i2l10712:
 19741                           
 19742                           ; Switch size 1, requested type "space"
 19743                           ; Number of cases is 1, Range of values is 134 to 134
 19744                           ; switch strategies available:
 19745                           ; Name         Instructions Cycles
 19746                           ; simple_byte            4     3 (average)
 19747                           ;	Chosen strategy is simple_byte
 19748  003C88  5009               	movf	??_updateServoStates,w,c
 19749  003C8A  0A86               	xorlw	134	; case 134
 19750  003C8C  B4D8               	btfsc	status,2,c
 19751  003C8E  D7C6               	goto	i2l10014
 19752  003C90  D004               	goto	i2l10030
 19753  003C92                     i2l10714:
 19754                           
 19755                           ; Switch size 1, requested type "space"
 19756                           ; Number of cases is 1, Range of values is 96 to 96
 19757                           ; switch strategies available:
 19758                           ; Name         Instructions Cycles
 19759                           ; simple_byte            4     3 (average)
 19760                           ;	Chosen strategy is simple_byte
 19761  003C92  5009               	movf	??_updateServoStates,w,c
 19762  003C94  0A60               	xorlw	96	; case 96
 19763  003C96  B4D8               	btfsc	status,2,c
 19764  003C98  D7CC               	goto	i2l10020
 19765  003C9A                     i2l10030:
 19766                           
 19767                           ;sort.c: 596: f_panning_to_bin = 0;
 19768  003C9A  0E00               	movlw	0
 19769  003C9C  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 19770  003C9E  0E00               	movlw	0
 19771  003CA0  6E61               	movwf	_f_panning_to_bin,c	;volatile
 19772                           
 19773                           ;sort.c: 597: }
 19774  003CA2  0012               	return	
 19775  003CA4                     i2l10032:
 19776                           
 19777                           ;sort.c: 598: else if(pan_servo_state == 1200){
 19778  003CA4  0EB0               	movlw	176
 19779  003CA6  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19780  003CA8  E15A               	bnz	i2l10062
 19781  003CAA  0E04               	movlw	4
 19782  003CAC  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19783  003CAE  A4D8               	btfss	status,2,c
 19784  003CB0  D056               	goto	i2l10062
 19785                           
 19786                           ;sort.c: 600: servo_timer_counter = 0;
 19787  003CB2  0E00               	movlw	0
 19788  003CB4  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19789  003CB6  0E00               	movlw	0
 19790  003CB8  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19791                           
 19792                           ;sort.c: 601: }
 19793  003CBA  0012               	return	
 19794  003CBC                     i2l10036:
 19795                           
 19796                           ;sort.c: 606: updateServoPosition(1050, 3);
 19797  003CBC  0E04               	movlw	4
 19798  003CBE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19799  003CC0  0E1A               	movlw	26
 19800  003CC2  6E01               	movwf	i2updateServoPosition@time_us,c
 19801  003CC4  0E00               	movlw	0
 19802  003CC6  6E04               	movwf	i2updateServoPosition@timer+1,c
 19803  003CC8  0E03               	movlw	3
 19804  003CCA  6E03               	movwf	i2updateServoPosition@timer,c
 19805  003CCC  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19806                           
 19807                           ;sort.c: 607: servo_timer_counter = 0;
 19808  003CD0  0E00               	movlw	0
 19809  003CD2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19810  003CD4  0E00               	movlw	0
 19811  003CD6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19812                           
 19813                           ;sort.c: 608: servo_timer_target = 750;
 19814  003CD8  0E02               	movlw	2
 19815  003CDA  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19816  003CDC  0EEE               	movlw	238
 19817  003CDE  6E6F               	movwf	_servo_timer_target,c	;volatile
 19818                           
 19819                           ;sort.c: 609: break;
 19820  003CE0  0012               	return	
 19821  003CE2                     i2l10042:
 19822                           
 19823                           ;sort.c: 611: updateServoPosition(1050, 3);
 19824  003CE2  0E04               	movlw	4
 19825  003CE4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19826  003CE6  0E1A               	movlw	26
 19827  003CE8  6E01               	movwf	i2updateServoPosition@time_us,c
 19828  003CEA  0E00               	movlw	0
 19829  003CEC  6E04               	movwf	i2updateServoPosition@timer+1,c
 19830  003CEE  0E03               	movlw	3
 19831  003CF0  6E03               	movwf	i2updateServoPosition@timer,c
 19832  003CF2  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19833                           
 19834                           ;sort.c: 612: servo_timer_counter = 0;
 19835  003CF6  0E00               	movlw	0
 19836  003CF8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19837  003CFA  0E00               	movlw	0
 19838  003CFC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19839                           
 19840                           ;sort.c: 613: servo_timer_target = 750;
 19841  003CFE  0E02               	movlw	2
 19842  003D00  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19843  003D02  0EEE               	movlw	238
 19844  003D04  6E6F               	movwf	_servo_timer_target,c	;volatile
 19845                           
 19846                           ;sort.c: 614: break;
 19847  003D06  0012               	return	
 19848  003D08                     i2l10048:
 19849                           
 19850                           ;sort.c: 617: updateServoPosition(1200, 1);
 19851  003D08  0E04               	movlw	4
 19852  003D0A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19853  003D0C  0EB0               	movlw	176
 19854  003D0E  6E01               	movwf	i2updateServoPosition@time_us,c
 19855  003D10  0E00               	movlw	0
 19856  003D12  6E04               	movwf	i2updateServoPosition@timer+1,c
 19857  003D14  0E01               	movlw	1
 19858  003D16  6E03               	movwf	i2updateServoPosition@timer,c
 19859  003D18  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19860                           
 19861                           ;sort.c: 618: updateServoPosition(1050, 3);
 19862  003D1C  0E04               	movlw	4
 19863  003D1E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19864  003D20  0E1A               	movlw	26
 19865  003D22  6E01               	movwf	i2updateServoPosition@time_us,c
 19866  003D24  0E00               	movlw	0
 19867  003D26  6E04               	movwf	i2updateServoPosition@timer+1,c
 19868  003D28  0E03               	movlw	3
 19869  003D2A  6E03               	movwf	i2updateServoPosition@timer,c
 19870  003D2C  EC37  F028         	call	i2_updateServoPosition	;wreg free
 19871                           
 19872                           ;sort.c: 619: servo_timer_counter = 0;
 19873  003D30  0E00               	movlw	0
 19874  003D32  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19875  003D34  0E00               	movlw	0
 19876  003D36  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19877                           
 19878                           ;sort.c: 620: servo_timer_target = 9999;
 19879  003D38  0E27               	movlw	39
 19880  003D3A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19881  003D3C  0E0F               	movlw	15
 19882  003D3E  6E6F               	movwf	_servo_timer_target,c	;volatile
 19883                           
 19884                           ;sort.c: 622: f_can_distributed = 1;
 19885  003D40  0E00               	movlw	0
 19886  003D42  0101               	movlb	1	; () banked
 19887  003D44  6F3C               	movwf	(_f_can_distributed+1)& (0+255),b
 19888  003D46  0E01               	movlw	1
 19889  003D48  6F3B               	movwf	_f_can_distributed& (0+255),b
 19890                           
 19891                           ; BSR set to: 1
 19892                           ;sort.c: 623: if(f_lastCan == 1){
 19893  003D4A  0100               	movlb	0	; () banked
 19894  003D4C  05EC               	decf	_f_lastCan& (0+255),w,b
 19895  003D4E  0100               	movlb	0	; () banked
 19896  003D50  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19897  003D52  A4D8               	btfss	status,2,c
 19898  003D54  0012               	return	
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;sort.c: 624: machine_state = DoneSorting_state;
 19902  003D56  0E02               	movlw	2
 19903  003D58  0100               	movlb	0	; () banked
 19904  003D5A  6FFC               	movwf	_machine_state& (0+255),b
 19905                           
 19906                           ; BSR set to: 0
 19907                           ;sort.c: 630: }
 19908                           
 19909                           ; BSR set to: 0
 19910                           ;sort.c: 629: break;
 19911                           
 19912                           ;sort.c: 628: default:
 19913                           
 19914                           ; BSR set to: 0
 19915                           ;sort.c: 625: }
 19916                           ;sort.c: 626: break;
 19917  003D5C  0012               	return	
 19918  003D5E                     i2l10062:
 19919  003D5E  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19920  003D62  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19921                           
 19922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19923                           ; Switch size 1, requested type "space"
 19924                           ; Number of cases is 2, Range of values is 4 to 5
 19925                           ; switch strategies available:
 19926                           ; Name         Instructions Cycles
 19927                           ; simple_byte            7     4 (average)
 19928                           ;	Chosen strategy is simple_byte
 19929  003D66  500A               	movf	??_updateServoStates+1,w,c
 19930  003D68  0A04               	xorlw	4	; case 4
 19931  003D6A  B4D8               	btfsc	status,2,c
 19932  003D6C  D004               	goto	i2l10716
 19933  003D6E  0A01               	xorlw	1	; case 5
 19934  003D70  A4D8               	btfss	status,2,c
 19935  003D72  0012               	return	
 19936  003D74  D008               	goto	i2l10718
 19937  003D76                     i2l10716:
 19938                           
 19939                           ; Switch size 1, requested type "space"
 19940                           ; Number of cases is 2, Range of values is 26 to 236
 19941                           ; switch strategies available:
 19942                           ; Name         Instructions Cycles
 19943                           ; simple_byte            7     4 (average)
 19944                           ;	Chosen strategy is simple_byte
 19945  003D76  5009               	movf	??_updateServoStates,w,c
 19946  003D78  0A1A               	xorlw	26	; case 26
 19947  003D7A  B4D8               	btfsc	status,2,c
 19948  003D7C  D7C5               	goto	i2l10048
 19949  003D7E  0AF6               	xorlw	246	; case 236
 19950  003D80  A4D8               	btfss	status,2,c
 19951  003D82  0012               	return	
 19952  003D84  D79B               	goto	i2l10036
 19953  003D86                     i2l10718:
 19954                           
 19955                           ; Switch size 1, requested type "space"
 19956                           ; Number of cases is 1, Range of values is 110 to 110
 19957                           ; switch strategies available:
 19958                           ; Name         Instructions Cycles
 19959                           ; simple_byte            4     3 (average)
 19960                           ;	Chosen strategy is simple_byte
 19961  003D86  5009               	movf	??_updateServoStates,w,c
 19962  003D88  0A6E               	xorlw	110	; case 110
 19963  003D8A  A4D8               	btfss	status,2,c
 19964  003D8C  0012               	return	
 19965  003D8E  D7A9               	goto	i2l10042
 19966  003D90                     __end_of_updateServoStates:
 19967                           	opt stack 0
 19968                           pclatu	equ	0xFFB
 19969                           pclath	equ	0xFFA
 19970                           tblptru	equ	0xFF8
 19971                           tblptrh	equ	0xFF7
 19972                           tblptrl	equ	0xFF6
 19973                           tablat	equ	0xFF5
 19974                           prodh	equ	0xFF4
 19975                           prodl	equ	0xFF3
 19976                           intcon	equ	0xFF2
 19977                           intcon2	equ	0xFF1
 19978                           intcon3	equ	0xFF0
 19979                           indf0	equ	0xFEF
 19980                           postinc0	equ	0xFEE
 19981                           fsr0h	equ	0xFEA
 19982                           fsr0l	equ	0xFE9
 19983                           wreg	equ	0xFE8
 19984                           postdec1	equ	0xFE5
 19985                           fsr1h	equ	0xFE2
 19986                           fsr1l	equ	0xFE1
 19987                           indf2	equ	0xFDF
 19988                           postinc2	equ	0xFDE
 19989                           postdec2	equ	0xFDD
 19990                           fsr2h	equ	0xFDA
 19991                           fsr2l	equ	0xFD9
 19992                           status	equ	0xFD8
 19993                           
 19994 ;; *************** function i2_updateServoPosition *****************
 19995 ;; Defined at:
 19996 ;;		line 550 in file "sort.c"
 19997 ;; Parameters:    Size  Location     Type
 19998 ;;  time_us         2    0[COMRAM] int 
 19999 ;;  timer           2    2[COMRAM] int 
 20000 ;; Auto vars:     Size  Location     Type
 20001 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20002 ;; Return value:  Size  Location     Type
 20003 ;;                  1    wreg      void 
 20004 ;; Registers used:
 20005 ;;		wreg, status,2, status,0
 20006 ;; Tracked objects:
 20007 ;;		On entry : 0/0
 20008 ;;		On exit  : 0/0
 20009 ;;		Unchanged: 0/0
 20010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20011 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20014 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20015 ;;Total ram usage:        8 bytes
 20016 ;; Hardware stack levels used:    1
 20017 ;; This function calls:
 20018 ;;		Nothing
 20019 ;; This function is called by:
 20020 ;;		_updateServoStates
 20021 ;; This function uses a non-reentrant model
 20022 ;;
 20023                           
 20024                           	psect	text66
 20025  00506E                     __ptext66:
 20026                           	opt stack 0
 20027  00506E                     i2_updateServoPosition:
 20028                           	opt stack 22
 20029                           
 20030                           ;sort.c: 551: unsigned int my_time = 65535 - time_us;
 20031                           
 20032                           ;incstack = 0
 20033  00506E  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20034  005072  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20035  005076  1E05               	comf	??i2_updateServoPosition,f,c
 20036  005078  1E06               	comf	??i2_updateServoPosition+1,f,c
 20037  00507A  4A05               	infsnz	??i2_updateServoPosition,f,c
 20038  00507C  2A06               	incf	??i2_updateServoPosition+1,f,c
 20039  00507E  0EFF               	movlw	255
 20040  005080  2405               	addwf	??i2_updateServoPosition,w,c
 20041  005082  6E07               	movwf	i2updateServoPosition@my_time,c
 20042  005084  0EFF               	movlw	255
 20043  005086  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20044  005088  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20045                           
 20046                           ;sort.c: 552: switch(timer){
 20047  00508A  D019               	goto	i2l9220
 20048  00508C                     i2l9214:
 20049                           
 20050                           ;sort.c: 554: servoTimes[0] = my_time >> 8;
 20051  00508C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20052  00508E  0101               	movlb	1	; () banked
 20053  005090  6F1C               	movwf	_servoTimes& (0+255),b
 20054  005092  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 20055                           
 20056                           ;sort.c: 555: servoTimes[1] = my_time & 0xFF;
 20057  005094  5007               	movf	i2updateServoPosition@my_time,w,c
 20058  005096  0101               	movlb	1	; () banked
 20059  005098  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 20060  00509A  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 20061                           
 20062                           ; BSR set to: 1
 20063                           ;sort.c: 557: pan_servo_state = time_us;
 20064  00509C  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20065  0050A0  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20066  0050A4                     i2l923:
 20067                           
 20068                           ;sort.c: 559: servoTimes[2] = my_time >> 8;
 20069  0050A4  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20070  0050A6  0101               	movlb	1	; () banked
 20071  0050A8  6F20               	movwf	(_servoTimes+4)& (0+255),b
 20072  0050AA  6B21               	clrf	(_servoTimes+5)& (0+255),b
 20073                           
 20074                           ;sort.c: 560: servoTimes[3] = my_time & 0xFF;
 20075  0050AC  5007               	movf	i2updateServoPosition@my_time,w,c
 20076  0050AE  0101               	movlb	1	; () banked
 20077  0050B0  6F22               	movwf	(_servoTimes+6)& (0+255),b
 20078  0050B2  6B23               	clrf	(_servoTimes+7)& (0+255),b
 20079                           
 20080                           ; BSR set to: 1
 20081                           ;sort.c: 562: tilt_servo_state = time_us;
 20082  0050B4  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20083  0050B8  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20084                           
 20085                           ;sort.c: 563: }
 20086  0050BC  0012               	return	
 20087  0050BE                     i2l9220:
 20088  0050BE  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20089  0050C2  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20090                           
 20091                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20092                           ; Switch size 1, requested type "space"
 20093                           ; Number of cases is 1, Range of values is 0 to 0
 20094                           ; switch strategies available:
 20095                           ; Name         Instructions Cycles
 20096                           ; simple_byte            4     3 (average)
 20097                           ;	Chosen strategy is simple_byte
 20098  0050C6  5006               	movf	??i2_updateServoPosition+1,w,c
 20099  0050C8  0A00               	xorlw	0	; case 0
 20100  0050CA  A4D8               	btfss	status,2,c
 20101  0050CC  0012               	return	
 20102                           
 20103                           ; Switch size 1, requested type "space"
 20104                           ; Number of cases is 2, Range of values is 1 to 3
 20105                           ; switch strategies available:
 20106                           ; Name         Instructions Cycles
 20107                           ; simple_byte            7     4 (average)
 20108                           ;	Chosen strategy is simple_byte
 20109  0050CE  5005               	movf	??i2_updateServoPosition,w,c
 20110  0050D0  0A01               	xorlw	1	; case 1
 20111  0050D2  B4D8               	btfsc	status,2,c
 20112  0050D4  D7DB               	goto	i2l9214
 20113  0050D6  0A02               	xorlw	2	; case 3
 20114  0050D8  A4D8               	btfss	status,2,c
 20115  0050DA  0012               	return	
 20116  0050DC  D7E3               	goto	i2l923
 20117  0050DE                     __end_ofi2_updateServoPosition:
 20118                           	opt stack 0
 20119                           pclatu	equ	0xFFB
 20120                           pclath	equ	0xFFA
 20121                           tblptru	equ	0xFF8
 20122                           tblptrh	equ	0xFF7
 20123                           tblptrl	equ	0xFF6
 20124                           tablat	equ	0xFF5
 20125                           prodh	equ	0xFF4
 20126                           prodl	equ	0xFF3
 20127                           intcon	equ	0xFF2
 20128                           intcon2	equ	0xFF1
 20129                           intcon3	equ	0xFF0
 20130                           indf0	equ	0xFEF
 20131                           postinc0	equ	0xFEE
 20132                           fsr0h	equ	0xFEA
 20133                           fsr0l	equ	0xFE9
 20134                           wreg	equ	0xFE8
 20135                           postdec1	equ	0xFE5
 20136                           fsr1h	equ	0xFE2
 20137                           fsr1l	equ	0xFE1
 20138                           indf2	equ	0xFDF
 20139                           postinc2	equ	0xFDE
 20140                           postdec2	equ	0xFDD
 20141                           fsr2h	equ	0xFDA
 20142                           fsr2l	equ	0xFD9
 20143                           status	equ	0xFD8
 20144                           
 20145 ;; *************** function _updateMenu *****************
 20146 ;; Defined at:
 20147 ;;		line 216 in file "UI.c"
 20148 ;; Parameters:    Size  Location     Type
 20149 ;;		None
 20150 ;; Auto vars:     Size  Location     Type
 20151 ;;		None
 20152 ;; Return value:  Size  Location     Type
 20153 ;;                  1    wreg      void 
 20154 ;; Registers used:
 20155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20156 ;; Tracked objects:
 20157 ;;		On entry : 0/0
 20158 ;;		On exit  : 0/0
 20159 ;;		Unchanged: 0/0
 20160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20165 ;;Total ram usage:        2 bytes
 20166 ;; Hardware stack levels used:    1
 20167 ;; Hardware stack levels required when called:    5
 20168 ;; This function calls:
 20169 ;;		_change_state_to_logs_11
 20170 ;;		_change_state_to_logs_12
 20171 ;;		_change_state_to_logs_22
 20172 ;;		_change_state_to_logs_23
 20173 ;;		_change_state_to_logs_33
 20174 ;;		_change_state_to_logs_34
 20175 ;;		_change_state_to_menu_11
 20176 ;;		_change_state_to_menu_23
 20177 ;;		_dispLogs
 20178 ;;		_inputHandler
 20179 ;;		i2_change_state_to_menu_12
 20180 ;;		i2_change_state_to_menu_22
 20181 ;;		i2_change_state_to_menu_start
 20182 ;; This function is called by:
 20183 ;;		_handler
 20184 ;; This function uses a non-reentrant model
 20185 ;;
 20186                           
 20187                           	psect	text67
 20188  00304C                     __ptext67:
 20189                           	opt stack 0
 20190  00304C                     _updateMenu:
 20191                           	opt stack 18
 20192                           
 20193                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20194                           
 20195                           ;incstack = 0
 20196  00304C  0E00               	movlw	0
 20197  00304E  6E76               	movwf	_up+1,c
 20198  003050  0E00               	movlw	0
 20199  003052  6E75               	movwf	_up,c
 20200  003054  0E00               	movlw	0
 20201  003056  6E5E               	movwf	_down+1,c
 20202  003058  0E00               	movlw	0
 20203  00305A  6E5D               	movwf	_down,c
 20204  00305C  0E00               	movlw	0
 20205  00305E  6E60               	movwf	_enter+1,c
 20206  003060  0E00               	movlw	0
 20207  003062  6E5F               	movwf	_enter,c
 20208  003064  0E00               	movlw	0
 20209  003066  6E5C               	movwf	_back+1,c
 20210  003068  0E00               	movlw	0
 20211  00306A  6E5B               	movwf	_back,c
 20212                           
 20213                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20214  00306C  9EF2               	bcf	intcon,7,c	;volatile
 20215                           
 20216                           ;UI.c: 220: if (inputHandler()
 20217                           ;UI.c: 223: ){
 20218  00306E  ECEE  F01C         	call	_inputHandler	;wreg free
 20219  003072  502A               	movf	?_inputHandler,w,c
 20220  003074  102B               	iorwf	?_inputHandler+1,w,c
 20221  003076  A4D8               	btfss	status,2,c
 20222  003078  D112               	goto	i2l9754
 20223  00307A  D146               	goto	i2l268
 20224  00307C                     i2l9606:
 20225                           
 20226                           ;UI.c: 227: change_state_to_menu_11();
 20227  00307C  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20228                           
 20229                           ;UI.c: 228: break;
 20230  003080  D143               	goto	i2l268
 20231  003082                     i2l9608:
 20232                           
 20233                           ;UI.c: 231: if(up){
 20234  003082  5075               	movf	_up,w,c
 20235  003084  1076               	iorwf	_up+1,w,c
 20236  003086  B4D8               	btfsc	status,2,c
 20237  003088  D003               	goto	i2l9612
 20238                           
 20239                           ;UI.c: 232: change_state_to_menu_23();
 20240  00308A  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20241                           
 20242                           ;UI.c: 233: }
 20243  00308E  D13C               	goto	i2l268
 20244  003090                     i2l9612:
 20245                           
 20246                           ;UI.c: 234: else if(down){
 20247  003090  505D               	movf	_down,w,c
 20248  003092  105E               	iorwf	_down+1,w,c
 20249  003094  B4D8               	btfsc	status,2,c
 20250  003096  D003               	goto	i2l9616
 20251                           
 20252                           ;UI.c: 235: change_state_to_menu_12();
 20253  003098  ECD6  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20254                           
 20255                           ;UI.c: 236: }
 20256  00309C  D135               	goto	i2l268
 20257  00309E                     i2l9616:
 20258                           
 20259                           ;UI.c: 237: else if(enter){
 20260  00309E  505F               	movf	_enter,w,c
 20261  0030A0  1060               	iorwf	_enter+1,w,c
 20262  0030A2  B4D8               	btfsc	status,2,c
 20263  0030A4  D131               	goto	i2l268
 20264                           
 20265                           ;UI.c: 238: change_state_to_menu_start();
 20266  0030A6  EC19  F02D         	call	i2_change_state_to_menu_start	;wreg free
 20267                           
 20268                           ;UI.c: 239: }
 20269                           ;UI.c: 240: break;
 20270  0030AA  D12E               	goto	i2l268
 20271  0030AC                     i2l9620:
 20272                           
 20273                           ;UI.c: 243: if(up){
 20274  0030AC  5075               	movf	_up,w,c
 20275  0030AE  1076               	iorwf	_up+1,w,c
 20276  0030B0  B4D8               	btfsc	status,2,c
 20277  0030B2  D003               	goto	i2l9624
 20278                           
 20279                           ;UI.c: 244: change_state_to_menu_11();
 20280  0030B4  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20281                           
 20282                           ;UI.c: 245: }
 20283  0030B8  D127               	goto	i2l268
 20284  0030BA                     i2l9624:
 20285                           
 20286                           ;UI.c: 246: else if(down){
 20287  0030BA  505D               	movf	_down,w,c
 20288  0030BC  105E               	iorwf	_down+1,w,c
 20289  0030BE  B4D8               	btfsc	status,2,c
 20290  0030C0  D011               	goto	i2l9640
 20291                           
 20292                           ;UI.c: 247: change_state_to_menu_23();
 20293  0030C2  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20294                           
 20295                           ;UI.c: 248: }
 20296  0030C6  D120               	goto	i2l268
 20297  0030C8                     i2l9632:
 20298                           
 20299                           ;UI.c: 255: if(up){
 20300  0030C8  5075               	movf	_up,w,c
 20301  0030CA  1076               	iorwf	_up+1,w,c
 20302  0030CC  B4D8               	btfsc	status,2,c
 20303  0030CE  D003               	goto	i2l9636
 20304                           
 20305                           ;UI.c: 256: change_state_to_menu_11();
 20306  0030D0  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20307                           
 20308                           ;UI.c: 257: }
 20309  0030D4  D119               	goto	i2l268
 20310  0030D6                     i2l9636:
 20311                           
 20312                           ;UI.c: 258: else if(down){
 20313  0030D6  505D               	movf	_down,w,c
 20314  0030D8  105E               	iorwf	_down+1,w,c
 20315  0030DA  B4D8               	btfsc	status,2,c
 20316  0030DC  D003               	goto	i2l9640
 20317                           
 20318                           ;UI.c: 259: change_state_to_menu_23();
 20319  0030DE  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20320                           
 20321                           ;UI.c: 260: }
 20322  0030E2  D112               	goto	i2l268
 20323  0030E4                     i2l9640:
 20324                           
 20325                           ;UI.c: 261: else if(enter){
 20326  0030E4  505F               	movf	_enter,w,c
 20327  0030E6  1060               	iorwf	_enter+1,w,c
 20328  0030E8  B4D8               	btfsc	status,2,c
 20329  0030EA  D10E               	goto	i2l268
 20330                           
 20331                           ;UI.c: 262: machine_state = Sorting_state;
 20332  0030EC  0E01               	movlw	1
 20333  0030EE  0100               	movlb	0	; () banked
 20334  0030F0  6FFC               	movwf	_machine_state& (0+255),b
 20335                           
 20336                           ; BSR set to: 0
 20337                           ;UI.c: 263: }
 20338                           ;UI.c: 264: break;
 20339                           
 20340                           ; BSR set to: 0
 20341                           
 20342                           ; BSR set to: 0
 20343  0030F2  D10A               	goto	i2l268
 20344  0030F4                     i2l9644:
 20345                           
 20346                           ;UI.c: 267: if(up){
 20347  0030F4  5075               	movf	_up,w,c
 20348  0030F6  1076               	iorwf	_up+1,w,c
 20349  0030F8  B4D8               	btfsc	status,2,c
 20350  0030FA  D003               	goto	i2l9648
 20351                           
 20352                           ;UI.c: 268: change_state_to_menu_22();
 20353  0030FC  ECBE  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20354                           
 20355                           ;UI.c: 269: }
 20356  003100  D103               	goto	i2l268
 20357  003102                     i2l9648:
 20358                           
 20359                           ;UI.c: 270: else if(down){
 20360  003102  505D               	movf	_down,w,c
 20361  003104  105E               	iorwf	_down+1,w,c
 20362  003106  B4D8               	btfsc	status,2,c
 20363  003108  D003               	goto	i2l9652
 20364                           
 20365                           ;UI.c: 271: change_state_to_menu_11();
 20366  00310A  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 20367                           
 20368                           ;UI.c: 272: }
 20369  00310E  D0FC               	goto	i2l268
 20370  003110                     i2l9652:
 20371                           
 20372                           ;UI.c: 273: else if(enter){
 20373  003110  505F               	movf	_enter,w,c
 20374  003112  1060               	iorwf	_enter+1,w,c
 20375  003114  B4D8               	btfsc	status,2,c
 20376  003116  D0F8               	goto	i2l268
 20377                           
 20378                           ;UI.c: 274: change_state_to_logs_11();
 20379  003118  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20380                           
 20381                           ;UI.c: 275: }
 20382                           ;UI.c: 276: break;
 20383  00311C  D0F5               	goto	i2l268
 20384  00311E                     i2l9656:
 20385                           
 20386                           ;UI.c: 279: if(up){
 20387  00311E  5075               	movf	_up,w,c
 20388  003120  1076               	iorwf	_up+1,w,c
 20389  003122  B4D8               	btfsc	status,2,c
 20390  003124  D003               	goto	i2l9660
 20391                           
 20392                           ;UI.c: 280: change_state_to_logs_34();
 20393  003126  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 20394                           
 20395                           ;UI.c: 281: }
 20396  00312A  D0EE               	goto	i2l268
 20397  00312C                     i2l9660:
 20398                           
 20399                           ;UI.c: 282: else if(down){
 20400  00312C  505D               	movf	_down,w,c
 20401  00312E  105E               	iorwf	_down+1,w,c
 20402  003130  B4D8               	btfsc	status,2,c
 20403  003132  D003               	goto	i2l9664
 20404                           
 20405                           ;UI.c: 283: change_state_to_logs_12();
 20406  003134  EC66  F02C         	call	_change_state_to_logs_12	;wreg free
 20407                           
 20408                           ;UI.c: 284: }
 20409  003138  D0E7               	goto	i2l268
 20410  00313A                     i2l9664:
 20411                           
 20412                           ;UI.c: 285: else if(enter){
 20413  00313A  505F               	movf	_enter,w,c
 20414  00313C  1060               	iorwf	_enter+1,w,c
 20415  00313E  B4D8               	btfsc	status,2,c
 20416  003140  D007               	goto	i2l9668
 20417                           
 20418                           ;UI.c: 286: dispLogs(1);
 20419  003142  0E00               	movlw	0
 20420  003144  6E13               	movwf	dispLogs@myLog+1,c
 20421  003146  0E01               	movlw	1
 20422  003148  6E12               	movwf	dispLogs@myLog,c
 20423  00314A  EC53  F02D         	call	_dispLogs	;wreg free
 20424                           
 20425                           ;UI.c: 287: }
 20426  00314E  D0DC               	goto	i2l268
 20427  003150                     i2l9668:
 20428                           
 20429                           ;UI.c: 288: else if(back){
 20430  003150  505B               	movf	_back,w,c
 20431  003152  105C               	iorwf	_back+1,w,c
 20432  003154  B4D8               	btfsc	status,2,c
 20433  003156  D0D8               	goto	i2l268
 20434                           
 20435                           ;UI.c: 289: change_state_to_menu_23();
 20436  003158  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20437                           
 20438                           ;UI.c: 290: }
 20439                           ;UI.c: 291: break;
 20440  00315C  D0D5               	goto	i2l268
 20441  00315E                     i2l9672:
 20442                           
 20443                           ;UI.c: 294: if(up){
 20444  00315E  5075               	movf	_up,w,c
 20445  003160  1076               	iorwf	_up+1,w,c
 20446  003162  B4D8               	btfsc	status,2,c
 20447  003164  D003               	goto	i2l9676
 20448                           
 20449                           ;UI.c: 295: change_state_to_logs_11();
 20450  003166  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20451                           
 20452                           ;UI.c: 296: }
 20453  00316A  D0CE               	goto	i2l268
 20454  00316C                     i2l9676:
 20455                           
 20456                           ;UI.c: 297: else if(down){
 20457  00316C  505D               	movf	_down,w,c
 20458  00316E  105E               	iorwf	_down+1,w,c
 20459  003170  B4D8               	btfsc	status,2,c
 20460  003172  D003               	goto	i2l9680
 20461                           
 20462                           ;UI.c: 298: change_state_to_logs_23();
 20463  003174  ECAD  F02C         	call	_change_state_to_logs_23	;wreg free
 20464                           
 20465                           ;UI.c: 299: }
 20466  003178  D0C7               	goto	i2l268
 20467  00317A                     i2l9680:
 20468                           
 20469                           ;UI.c: 300: else if(enter){
 20470  00317A  505F               	movf	_enter,w,c
 20471  00317C  1060               	iorwf	_enter+1,w,c
 20472  00317E  B4D8               	btfsc	status,2,c
 20473  003180  D007               	goto	i2l9684
 20474                           
 20475                           ;UI.c: 301: dispLogs(2);
 20476  003182  0E00               	movlw	0
 20477  003184  6E13               	movwf	dispLogs@myLog+1,c
 20478  003186  0E02               	movlw	2
 20479  003188  6E12               	movwf	dispLogs@myLog,c
 20480  00318A  EC53  F02D         	call	_dispLogs	;wreg free
 20481                           
 20482                           ;UI.c: 302: }
 20483  00318E  D0BC               	goto	i2l268
 20484  003190                     i2l9684:
 20485                           
 20486                           ;UI.c: 303: else if(back){
 20487  003190  505B               	movf	_back,w,c
 20488  003192  105C               	iorwf	_back+1,w,c
 20489  003194  B4D8               	btfsc	status,2,c
 20490  003196  D0B8               	goto	i2l268
 20491                           
 20492                           ;UI.c: 304: change_state_to_menu_23();
 20493  003198  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20494                           
 20495                           ;UI.c: 305: }
 20496                           ;UI.c: 306: break;
 20497  00319C  D0B5               	goto	i2l268
 20498  00319E                     i2l9688:
 20499                           
 20500                           ;UI.c: 309: if(up){
 20501  00319E  5075               	movf	_up,w,c
 20502  0031A0  1076               	iorwf	_up+1,w,c
 20503  0031A2  B4D8               	btfsc	status,2,c
 20504  0031A4  D003               	goto	i2l9692
 20505                           
 20506                           ;UI.c: 310: change_state_to_logs_11();
 20507  0031A6  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20508                           
 20509                           ;UI.c: 311: }
 20510  0031AA  D0AE               	goto	i2l268
 20511  0031AC                     i2l9692:
 20512                           
 20513                           ;UI.c: 312: else if(down){
 20514  0031AC  505D               	movf	_down,w,c
 20515  0031AE  105E               	iorwf	_down+1,w,c
 20516  0031B0  B4D8               	btfsc	status,2,c
 20517  0031B2  D003               	goto	i2l9696
 20518                           
 20519                           ;UI.c: 313: change_state_to_logs_23();
 20520  0031B4  ECAD  F02C         	call	_change_state_to_logs_23	;wreg free
 20521                           
 20522                           ;UI.c: 314: }
 20523  0031B8  D0A7               	goto	i2l268
 20524  0031BA                     i2l9696:
 20525                           
 20526                           ;UI.c: 315: else if(enter){
 20527  0031BA  505F               	movf	_enter,w,c
 20528  0031BC  1060               	iorwf	_enter+1,w,c
 20529  0031BE  B4D8               	btfsc	status,2,c
 20530  0031C0  D007               	goto	i2l9700
 20531                           
 20532                           ;UI.c: 316: dispLogs(2);
 20533  0031C2  0E00               	movlw	0
 20534  0031C4  6E13               	movwf	dispLogs@myLog+1,c
 20535  0031C6  0E02               	movlw	2
 20536  0031C8  6E12               	movwf	dispLogs@myLog,c
 20537  0031CA  EC53  F02D         	call	_dispLogs	;wreg free
 20538                           
 20539                           ;UI.c: 317: }
 20540  0031CE  D09C               	goto	i2l268
 20541  0031D0                     i2l9700:
 20542                           
 20543                           ;UI.c: 318: else if(back){
 20544  0031D0  505B               	movf	_back,w,c
 20545  0031D2  105C               	iorwf	_back+1,w,c
 20546  0031D4  B4D8               	btfsc	status,2,c
 20547  0031D6  D098               	goto	i2l268
 20548                           
 20549                           ;UI.c: 319: change_state_to_menu_23();
 20550  0031D8  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20551                           
 20552                           ;UI.c: 320: }
 20553                           ;UI.c: 321: break;
 20554  0031DC  D095               	goto	i2l268
 20555  0031DE                     i2l9704:
 20556                           
 20557                           ;UI.c: 324: if(up){
 20558  0031DE  5075               	movf	_up,w,c
 20559  0031E0  1076               	iorwf	_up+1,w,c
 20560  0031E2  B4D8               	btfsc	status,2,c
 20561  0031E4  D003               	goto	i2l9708
 20562                           
 20563                           ;UI.c: 325: change_state_to_logs_22();
 20564  0031E6  EC4E  F02C         	call	_change_state_to_logs_22	;wreg free
 20565                           
 20566                           ;UI.c: 326: }
 20567  0031EA  D08E               	goto	i2l268
 20568  0031EC                     i2l9708:
 20569                           
 20570                           ;UI.c: 327: else if(down){
 20571  0031EC  505D               	movf	_down,w,c
 20572  0031EE  105E               	iorwf	_down+1,w,c
 20573  0031F0  B4D8               	btfsc	status,2,c
 20574  0031F2  D003               	goto	i2l9712
 20575                           
 20576                           ;UI.c: 328: change_state_to_logs_34();
 20577  0031F4  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 20578                           
 20579                           ;UI.c: 329: }
 20580  0031F8  D087               	goto	i2l268
 20581  0031FA                     i2l9712:
 20582                           
 20583                           ;UI.c: 330: else if(enter){
 20584  0031FA  505F               	movf	_enter,w,c
 20585  0031FC  1060               	iorwf	_enter+1,w,c
 20586  0031FE  B4D8               	btfsc	status,2,c
 20587  003200  D007               	goto	i2l9716
 20588                           
 20589                           ;UI.c: 331: dispLogs(3);
 20590  003202  0E00               	movlw	0
 20591  003204  6E13               	movwf	dispLogs@myLog+1,c
 20592  003206  0E03               	movlw	3
 20593  003208  6E12               	movwf	dispLogs@myLog,c
 20594  00320A  EC53  F02D         	call	_dispLogs	;wreg free
 20595                           
 20596                           ;UI.c: 332: }
 20597  00320E  D07C               	goto	i2l268
 20598  003210                     i2l9716:
 20599                           
 20600                           ;UI.c: 333: else if(back){
 20601  003210  505B               	movf	_back,w,c
 20602  003212  105C               	iorwf	_back+1,w,c
 20603  003214  B4D8               	btfsc	status,2,c
 20604  003216  D078               	goto	i2l268
 20605                           
 20606                           ;UI.c: 334: change_state_to_menu_23();
 20607  003218  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20608                           
 20609                           ;UI.c: 335: }
 20610                           ;UI.c: 336: break;
 20611  00321C  D075               	goto	i2l268
 20612  00321E                     i2l9720:
 20613                           
 20614                           ;UI.c: 339: if(up){
 20615  00321E  5075               	movf	_up,w,c
 20616  003220  1076               	iorwf	_up+1,w,c
 20617  003222  B4D8               	btfsc	status,2,c
 20618  003224  D003               	goto	i2l9724
 20619                           
 20620                           ;UI.c: 340: change_state_to_logs_22();
 20621  003226  EC4E  F02C         	call	_change_state_to_logs_22	;wreg free
 20622                           
 20623                           ;UI.c: 341: }
 20624  00322A  D06E               	goto	i2l268
 20625  00322C                     i2l9724:
 20626                           
 20627                           ;UI.c: 342: else if(down){
 20628  00322C  505D               	movf	_down,w,c
 20629  00322E  105E               	iorwf	_down+1,w,c
 20630  003230  B4D8               	btfsc	status,2,c
 20631  003232  D003               	goto	i2l9728
 20632                           
 20633                           ;UI.c: 343: change_state_to_logs_34();
 20634  003234  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 20635                           
 20636                           ;UI.c: 344: }
 20637  003238  D067               	goto	i2l268
 20638  00323A                     i2l9728:
 20639                           
 20640                           ;UI.c: 345: else if(enter){
 20641  00323A  505F               	movf	_enter,w,c
 20642  00323C  1060               	iorwf	_enter+1,w,c
 20643  00323E  B4D8               	btfsc	status,2,c
 20644  003240  D007               	goto	i2l9732
 20645                           
 20646                           ;UI.c: 346: dispLogs(3);
 20647  003242  0E00               	movlw	0
 20648  003244  6E13               	movwf	dispLogs@myLog+1,c
 20649  003246  0E03               	movlw	3
 20650  003248  6E12               	movwf	dispLogs@myLog,c
 20651  00324A  EC53  F02D         	call	_dispLogs	;wreg free
 20652                           
 20653                           ;UI.c: 347: }
 20654  00324E  D05C               	goto	i2l268
 20655  003250                     i2l9732:
 20656                           
 20657                           ;UI.c: 348: else if(back){
 20658  003250  505B               	movf	_back,w,c
 20659  003252  105C               	iorwf	_back+1,w,c
 20660  003254  B4D8               	btfsc	status,2,c
 20661  003256  D058               	goto	i2l268
 20662                           
 20663                           ;UI.c: 349: change_state_to_menu_23();
 20664  003258  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20665                           
 20666                           ;UI.c: 350: }
 20667                           ;UI.c: 351: break;
 20668  00325C  D055               	goto	i2l268
 20669  00325E                     i2l9736:
 20670                           
 20671                           ;UI.c: 354: if(up){
 20672  00325E  5075               	movf	_up,w,c
 20673  003260  1076               	iorwf	_up+1,w,c
 20674  003262  B4D8               	btfsc	status,2,c
 20675  003264  D003               	goto	i2l9740
 20676                           
 20677                           ;UI.c: 355: change_state_to_logs_33();
 20678  003266  EC36  F02C         	call	_change_state_to_logs_33	;wreg free
 20679                           
 20680                           ;UI.c: 356: }
 20681  00326A  D04E               	goto	i2l268
 20682  00326C                     i2l9740:
 20683                           
 20684                           ;UI.c: 357: else if(down){
 20685  00326C  505D               	movf	_down,w,c
 20686  00326E  105E               	iorwf	_down+1,w,c
 20687  003270  B4D8               	btfsc	status,2,c
 20688  003272  D003               	goto	i2l9744
 20689                           
 20690                           ;UI.c: 358: change_state_to_logs_11();
 20691  003274  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 20692                           
 20693                           ;UI.c: 359: }
 20694  003278  D047               	goto	i2l268
 20695  00327A                     i2l9744:
 20696                           
 20697                           ;UI.c: 360: else if(enter){
 20698  00327A  505F               	movf	_enter,w,c
 20699  00327C  1060               	iorwf	_enter+1,w,c
 20700  00327E  B4D8               	btfsc	status,2,c
 20701  003280  D007               	goto	i2l9748
 20702                           
 20703                           ;UI.c: 361: dispLogs(4);
 20704  003282  0E00               	movlw	0
 20705  003284  6E13               	movwf	dispLogs@myLog+1,c
 20706  003286  0E04               	movlw	4
 20707  003288  6E12               	movwf	dispLogs@myLog,c
 20708  00328A  EC53  F02D         	call	_dispLogs	;wreg free
 20709                           
 20710                           ;UI.c: 362: }
 20711  00328E  D03C               	goto	i2l268
 20712  003290                     i2l9748:
 20713                           
 20714                           ;UI.c: 363: else if(back){
 20715  003290  505B               	movf	_back,w,c
 20716  003292  105C               	iorwf	_back+1,w,c
 20717  003294  B4D8               	btfsc	status,2,c
 20718  003296  D038               	goto	i2l268
 20719                           
 20720                           ;UI.c: 364: change_state_to_menu_23();
 20721  003298  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 20722                           
 20723                           ;UI.c: 370: }
 20724                           
 20725                           ;UI.c: 369: break;
 20726                           
 20727                           ;UI.c: 368: default:
 20728                           
 20729                           ;UI.c: 365: }
 20730                           ;UI.c: 366: break;
 20731  00329C  D035               	goto	i2l268
 20732  00329E                     i2l9754:
 20733  00329E  C0E6  F043         	movff	_cur_state,??_updateMenu
 20734  0032A2  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20735                           
 20736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20737                           ; Switch size 1, requested type "space"
 20738                           ; Number of cases is 3, Range of values is 0 to 4
 20739                           ; switch strategies available:
 20740                           ; Name         Instructions Cycles
 20741                           ; simple_byte           10     6 (average)
 20742                           ;	Chosen strategy is simple_byte
 20743  0032A6  5044               	movf	??_updateMenu+1,w,c
 20744  0032A8  0A00               	xorlw	0	; case 0
 20745  0032AA  B4D8               	btfsc	status,2,c
 20746  0032AC  D007               	goto	i2l10722
 20747  0032AE  0A03               	xorlw	3	; case 3
 20748  0032B0  B4D8               	btfsc	status,2,c
 20749  0032B2  D015               	goto	i2l10724
 20750  0032B4  0A07               	xorlw	7	; case 4
 20751  0032B6  B4D8               	btfsc	status,2,c
 20752  0032B8  D020               	goto	i2l10726
 20753  0032BA  D026               	goto	i2l268
 20754  0032BC                     i2l10722:
 20755                           
 20756                           ; Switch size 1, requested type "space"
 20757                           ; Number of cases is 5, Range of values is 0 to 23
 20758                           ; switch strategies available:
 20759                           ; Name         Instructions Cycles
 20760                           ; simple_byte           16     9 (average)
 20761                           ;	Chosen strategy is simple_byte
 20762  0032BC  5043               	movf	??_updateMenu,w,c
 20763  0032BE  0A00               	xorlw	0	; case 0
 20764  0032C0  B4D8               	btfsc	status,2,c
 20765  0032C2  D6DC               	goto	i2l9606
 20766  0032C4  0A0B               	xorlw	11	; case 11
 20767  0032C6  B4D8               	btfsc	status,2,c
 20768  0032C8  D6DC               	goto	i2l9608
 20769  0032CA  0A07               	xorlw	7	; case 12
 20770  0032CC  B4D8               	btfsc	status,2,c
 20771  0032CE  D6EE               	goto	i2l9620
 20772  0032D0  0A1A               	xorlw	26	; case 22
 20773  0032D2  B4D8               	btfsc	status,2,c
 20774  0032D4  D6F9               	goto	i2l9632
 20775  0032D6  0A01               	xorlw	1	; case 23
 20776  0032D8  B4D8               	btfsc	status,2,c
 20777  0032DA  D70C               	goto	i2l9644
 20778  0032DC  D015               	goto	i2l268
 20779  0032DE                     i2l10724:
 20780                           
 20781                           ; Switch size 1, requested type "space"
 20782                           ; Number of cases is 4, Range of values is 243 to 255
 20783                           ; switch strategies available:
 20784                           ; Name         Instructions Cycles
 20785                           ; simple_byte           13     7 (average)
 20786                           ;	Chosen strategy is simple_byte
 20787  0032DE  5043               	movf	??_updateMenu,w,c
 20788  0032E0  0AF3               	xorlw	243	; case 243
 20789  0032E2  B4D8               	btfsc	status,2,c
 20790  0032E4  D71C               	goto	i2l9656
 20791  0032E6  0A07               	xorlw	7	; case 244
 20792  0032E8  B4D8               	btfsc	status,2,c
 20793  0032EA  D739               	goto	i2l9672
 20794  0032EC  0A0A               	xorlw	10	; case 254
 20795  0032EE  B4D8               	btfsc	status,2,c
 20796  0032F0  D756               	goto	i2l9688
 20797  0032F2  0A01               	xorlw	1	; case 255
 20798  0032F4  B4D8               	btfsc	status,2,c
 20799  0032F6  D773               	goto	i2l9704
 20800  0032F8  D007               	goto	i2l268
 20801  0032FA                     i2l10726:
 20802                           
 20803                           ; Switch size 1, requested type "space"
 20804                           ; Number of cases is 2, Range of values is 9 to 10
 20805                           ; switch strategies available:
 20806                           ; Name         Instructions Cycles
 20807                           ; simple_byte            7     4 (average)
 20808                           ;	Chosen strategy is simple_byte
 20809  0032FA  5043               	movf	??_updateMenu,w,c
 20810  0032FC  0A09               	xorlw	9	; case 9
 20811  0032FE  B4D8               	btfsc	status,2,c
 20812  003300  D78E               	goto	i2l9720
 20813  003302  0A03               	xorlw	3	; case 10
 20814  003304  B4D8               	btfsc	status,2,c
 20815  003306  D7AB               	goto	i2l9736
 20816  003308                     i2l268:
 20817                           
 20818                           ;UI.c: 371: }
 20819                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20820  003308  8EF2               	bsf	intcon,7,c	;volatile
 20821  00330A  0012               	return		;funcret
 20822  00330C                     __end_of_updateMenu:
 20823                           	opt stack 0
 20824                           pclatu	equ	0xFFB
 20825                           pclath	equ	0xFFA
 20826                           tblptru	equ	0xFF8
 20827                           tblptrh	equ	0xFF7
 20828                           tblptrl	equ	0xFF6
 20829                           tablat	equ	0xFF5
 20830                           prodh	equ	0xFF4
 20831                           prodl	equ	0xFF3
 20832                           intcon	equ	0xFF2
 20833                           intcon2	equ	0xFF1
 20834                           intcon3	equ	0xFF0
 20835                           indf0	equ	0xFEF
 20836                           postinc0	equ	0xFEE
 20837                           fsr0h	equ	0xFEA
 20838                           fsr0l	equ	0xFE9
 20839                           wreg	equ	0xFE8
 20840                           postdec1	equ	0xFE5
 20841                           fsr1h	equ	0xFE2
 20842                           fsr1l	equ	0xFE1
 20843                           indf2	equ	0xFDF
 20844                           postinc2	equ	0xFDE
 20845                           postdec2	equ	0xFDD
 20846                           fsr2h	equ	0xFDA
 20847                           fsr2l	equ	0xFD9
 20848                           status	equ	0xFD8
 20849                           
 20850 ;; *************** function i2_change_state_to_menu_start *****************
 20851 ;; Defined at:
 20852 ;;		line 477 in file "UI.c"
 20853 ;; Parameters:    Size  Location     Type
 20854 ;;		None
 20855 ;; Auto vars:     Size  Location     Type
 20856 ;;		None
 20857 ;; Return value:  Size  Location     Type
 20858 ;;                  1    wreg      void 
 20859 ;; Registers used:
 20860 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20861 ;; Tracked objects:
 20862 ;;		On entry : 0/0
 20863 ;;		On exit  : 0/0
 20864 ;;		Unchanged: 0/0
 20865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20870 ;;Total ram usage:        0 bytes
 20871 ;; Hardware stack levels used:    1
 20872 ;; Hardware stack levels required when called:    4
 20873 ;; This function calls:
 20874 ;;		i2_lcdInst
 20875 ;;		i2_printRTC
 20876 ;;		i2_printf
 20877 ;; This function is called by:
 20878 ;;		_updateMenu
 20879 ;;		_handler
 20880 ;; This function uses a non-reentrant model
 20881 ;;
 20882                           
 20883                           	psect	text68
 20884  005A32                     __ptext68:
 20885                           	opt stack 0
 20886  005A32                     i2_change_state_to_menu_start:
 20887                           	opt stack 19
 20888                           
 20889                           ;UI.c: 478: cur_state = 0;
 20890                           
 20891                           ;incstack = 0
 20892  005A32  0E00               	movlw	0
 20893  005A34  0100               	movlb	0	; () banked
 20894  005A36  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20895  005A38  0E00               	movlw	0
 20896  005A3A  6FE6               	movwf	_cur_state& (0+255),b
 20897                           
 20898                           ; BSR set to: 0
 20899                           ;UI.c: 480: lcdInst(0b10000000);;
 20900  005A3C  0E80               	movlw	128
 20901  005A3E  ECFD  F02D         	call	i2_lcdInst
 20902                           
 20903                           ;UI.c: 481: printRTC();
 20904  005A42  ECDA  F01A         	call	i2_printRTC	;wreg free
 20905                           
 20906                           ;UI.c: 482: lcdInst(0b11000000);;
 20907  005A46  0EC0               	movlw	192
 20908  005A48  ECFD  F02D         	call	i2_lcdInst
 20909                           
 20910                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20911  005A4C  0EEA               	movlw	low STR_30
 20912  005A4E  6E0D               	movwf	i2printf@f,c
 20913  005A50  0EFD               	movlw	high STR_30
 20914  005A52  6E0E               	movwf	i2printf@f+1,c
 20915  005A54  EC00  F012         	call	i2_printf	;wreg free
 20916  005A58  0012               	return		;funcret
 20917  005A5A                     __end_ofi2_change_state_to_menu_start:
 20918                           	opt stack 0
 20919                           pclatu	equ	0xFFB
 20920                           pclath	equ	0xFFA
 20921                           tblptru	equ	0xFF8
 20922                           tblptrh	equ	0xFF7
 20923                           tblptrl	equ	0xFF6
 20924                           tablat	equ	0xFF5
 20925                           prodh	equ	0xFF4
 20926                           prodl	equ	0xFF3
 20927                           intcon	equ	0xFF2
 20928                           intcon2	equ	0xFF1
 20929                           intcon3	equ	0xFF0
 20930                           indf0	equ	0xFEF
 20931                           postinc0	equ	0xFEE
 20932                           fsr0h	equ	0xFEA
 20933                           fsr0l	equ	0xFE9
 20934                           wreg	equ	0xFE8
 20935                           postdec1	equ	0xFE5
 20936                           fsr1h	equ	0xFE2
 20937                           fsr1l	equ	0xFE1
 20938                           indf2	equ	0xFDF
 20939                           postinc2	equ	0xFDE
 20940                           postdec2	equ	0xFDD
 20941                           fsr2h	equ	0xFDA
 20942                           fsr2l	equ	0xFD9
 20943                           status	equ	0xFD8
 20944                           
 20945 ;; *************** function i2_printRTC *****************
 20946 ;; Defined at:
 20947 ;;		line 63 in file "RTC.c"
 20948 ;; Parameters:    Size  Location     Type
 20949 ;;		None
 20950 ;; Auto vars:     Size  Location     Type
 20951 ;;  printRTC       14   44[COMRAM] int [7]
 20952 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20953 ;;  printRTC        2   64[COMRAM] int 
 20954 ;;  printRTC        2   58[COMRAM] int 
 20955 ;; Return value:  Size  Location     Type
 20956 ;;                  1    wreg      void 
 20957 ;; Registers used:
 20958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20959 ;; Tracked objects:
 20960 ;;		On entry : 0/0
 20961 ;;		On exit  : 0/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20967 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20968 ;;Total ram usage:       25 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; Hardware stack levels required when called:    3
 20971 ;; This function calls:
 20972 ;;		i2_getRTC
 20973 ;;		i2_lcdInst
 20974 ;;		i2_printf
 20975 ;;		i2_strcpy
 20976 ;; This function is called by:
 20977 ;;		i2_change_state_to_menu_start
 20978 ;; This function uses a non-reentrant model
 20979 ;;
 20980                           
 20981                           	psect	text69
 20982  0035B4                     __ptext69:
 20983                           	opt stack 0
 20984  0035B4                     i2_printRTC:
 20985                           	opt stack 19
 20986                           
 20987                           ;RTC.c: 64: getRTC();
 20988                           
 20989                           ;incstack = 0
 20990  0035B4  ECFE  F027         	call	i2_getRTC	;wreg free
 20991                           
 20992                           ;RTC.c: 65: char month[] = "MMM";
 20993  0035B8  C14D  F03D         	movff	printRTC@F3236,i2printRTC@month
 20994  0035BC  C14E  F03E         	movff	printRTC@F3236+1,i2printRTC@month+1
 20995  0035C0  C14F  F03F         	movff	printRTC@F3236+2,i2printRTC@month+2
 20996  0035C4  C150  F040         	movff	printRTC@F3236+3,i2printRTC@month+3
 20997                           
 20998                           ;RTC.c: 66: int INT_time[7];
 20999                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21000  0035C8  0E00               	movlw	0
 21001  0035CA  6E42               	movwf	i2printRTC@i+1,c
 21002  0035CC  0E00               	movlw	0
 21003  0035CE  6E41               	movwf	i2printRTC@i,c
 21004  0035D0  BE42               	btfsc	i2printRTC@i+1,7,c
 21005  0035D2  D006               	goto	i2l7554
 21006  0035D4  5042               	movf	i2printRTC@i+1,w,c
 21007  0035D6  E135               	bnz	i2l627
 21008  0035D8  0E07               	movlw	7
 21009  0035DA  5C41               	subwf	i2printRTC@i,w,c
 21010  0035DC  B0D8               	btfsc	status,0,c
 21011  0035DE  D031               	goto	i2l627
 21012  0035E0                     i2l7554:
 21013                           
 21014                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21015  0035E0  0E24               	movlw	low _time
 21016  0035E2  2441               	addwf	i2printRTC@i,w,c
 21017  0035E4  6ED9               	movwf	fsr2l,c
 21018  0035E6  0E01               	movlw	high _time
 21019  0035E8  2042               	addwfc	i2printRTC@i+1,w,c
 21020  0035EA  6EDA               	movwf	fsr2h,c
 21021  0035EC  50DF               	movf	indf2,w,c
 21022  0035EE  6E2A               	movwf	??i2_printRTC& (0+255),c
 21023  0035F0  3A2A               	swapf	??i2_printRTC,f,c
 21024  0035F2  0E0F               	movlw	15
 21025  0035F4  162A               	andwf	??i2_printRTC,f,c
 21026  0035F6  0E0F               	movlw	15
 21027  0035F8  162A               	andwf	??i2_printRTC,f,c
 21028  0035FA  502A               	movf	??i2_printRTC,w,c
 21029  0035FC  0D0A               	mullw	10
 21030  0035FE  0E24               	movlw	low _time
 21031  003600  2441               	addwf	i2printRTC@i,w,c
 21032  003602  6ED9               	movwf	fsr2l,c
 21033  003604  0E01               	movlw	high _time
 21034  003606  2042               	addwfc	i2printRTC@i+1,w,c
 21035  003608  6EDA               	movwf	fsr2h,c
 21036  00360A  50DF               	movf	indf2,w,c
 21037  00360C  0B0F               	andlw	15
 21038  00360E  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21039  003610  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21040  003612  50F3               	movf	prodl,w,c
 21041  003614  262B               	addwf	??i2_printRTC+1,f,c
 21042  003616  50F4               	movf	prodh,w,c
 21043  003618  222C               	addwfc	??i2_printRTC+2,f,c
 21044  00361A  90D8               	bcf	status,0,c
 21045  00361C  3441               	rlcf	i2printRTC@i,w,c
 21046  00361E  6ED9               	movwf	fsr2l,c
 21047  003620  3442               	rlcf	i2printRTC@i+1,w,c
 21048  003622  6EDA               	movwf	fsr2h,c
 21049  003624  0E2D               	movlw	low i2printRTC@INT_time
 21050  003626  26D9               	addwf	fsr2l,f,c
 21051  003628  0E00               	movlw	high i2printRTC@INT_time
 21052  00362A  22DA               	addwfc	fsr2h,f,c
 21053  00362C  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21054  003630  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21055  003634  4A41               	infsnz	i2printRTC@i,f,c
 21056  003636  2A42               	incf	i2printRTC@i+1,f,c
 21057  003638  BE42               	btfsc	i2printRTC@i+1,7,c
 21058  00363A  D7D2               	goto	i2l7554
 21059  00363C  5042               	movf	i2printRTC@i+1,w,c
 21060  00363E  E101               	bnz	i2u621_40
 21061  003640  D7CB               	goto	L19
 21062  003642                     i2u621_40:
 21063  003642                     i2l627:
 21064                           
 21065                           ;RTC.c: 69: }
 21066                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21067  003642  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21068  003646  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21069                           
 21070                           ;RTC.c: 72: switch(RTC_month){
 21071  00364A  D084               	goto	i2l7586
 21072  00364C                     i2l7560:
 21073                           
 21074                           ;RTC.c: 74: strcpy(month, "JAN");
 21075  00364C  0E3D               	movlw	low i2printRTC@month
 21076  00364E  6E01               	movwf	i2strcpy@to,c
 21077  003650  0E00               	movlw	high i2printRTC@month
 21078  003652  6E02               	movwf	i2strcpy@to+1,c
 21079  003654  0EDA               	movlw	low STR_8
 21080  003656  6E03               	movwf	i2strcpy@from,c
 21081  003658  0EFF               	movlw	high STR_8
 21082  00365A  6E04               	movwf	i2strcpy@from+1,c
 21083  00365C  EC8D  F02B         	call	i2_strcpy	;wreg free
 21084                           
 21085                           ;RTC.c: 75: break;
 21086  003660  D0A6               	goto	i2l7588
 21087  003662                     i2l7562:
 21088                           
 21089                           ;RTC.c: 77: strcpy(month, "FEB");
 21090  003662  0E3D               	movlw	low i2printRTC@month
 21091  003664  6E01               	movwf	i2strcpy@to,c
 21092  003666  0E00               	movlw	high i2printRTC@month
 21093  003668  6E02               	movwf	i2strcpy@to+1,c
 21094  00366A  0ECA               	movlw	low STR_9
 21095  00366C  6E03               	movwf	i2strcpy@from,c
 21096  00366E  0EFF               	movlw	high STR_9
 21097  003670  6E04               	movwf	i2strcpy@from+1,c
 21098  003672  EC8D  F02B         	call	i2_strcpy	;wreg free
 21099                           
 21100                           ;RTC.c: 78: break;
 21101  003676  D09B               	goto	i2l7588
 21102  003678                     i2l7564:
 21103                           
 21104                           ;RTC.c: 80: strcpy(month, "MAR");
 21105  003678  0E3D               	movlw	low i2printRTC@month
 21106  00367A  6E01               	movwf	i2strcpy@to,c
 21107  00367C  0E00               	movlw	high i2printRTC@month
 21108  00367E  6E02               	movwf	i2strcpy@to+1,c
 21109  003680  0EE6               	movlw	low STR_10
 21110  003682  6E03               	movwf	i2strcpy@from,c
 21111  003684  0EFF               	movlw	high STR_10
 21112  003686  6E04               	movwf	i2strcpy@from+1,c
 21113  003688  EC8D  F02B         	call	i2_strcpy	;wreg free
 21114                           
 21115                           ;RTC.c: 81: break;
 21116  00368C  D090               	goto	i2l7588
 21117  00368E                     i2l7566:
 21118                           
 21119                           ;RTC.c: 83: strcpy(month, "APR");
 21120  00368E  0E3D               	movlw	low i2printRTC@month
 21121  003690  6E01               	movwf	i2strcpy@to,c
 21122  003692  0E00               	movlw	high i2printRTC@month
 21123  003694  6E02               	movwf	i2strcpy@to+1,c
 21124  003696  0EEA               	movlw	low STR_11
 21125  003698  6E03               	movwf	i2strcpy@from,c
 21126  00369A  0EFF               	movlw	high STR_11
 21127  00369C  6E04               	movwf	i2strcpy@from+1,c
 21128  00369E  EC8D  F02B         	call	i2_strcpy	;wreg free
 21129                           
 21130                           ;RTC.c: 84: break;
 21131  0036A2  D085               	goto	i2l7588
 21132  0036A4                     i2l7568:
 21133                           
 21134                           ;RTC.c: 86: strcpy(month, "MAY");
 21135  0036A4  0E3D               	movlw	low i2printRTC@month
 21136  0036A6  6E01               	movwf	i2strcpy@to,c
 21137  0036A8  0E00               	movlw	high i2printRTC@month
 21138  0036AA  6E02               	movwf	i2strcpy@to+1,c
 21139  0036AC  0EFA               	movlw	low STR_12
 21140  0036AE  6E03               	movwf	i2strcpy@from,c
 21141  0036B0  0EFF               	movlw	high STR_12
 21142  0036B2  6E04               	movwf	i2strcpy@from+1,c
 21143  0036B4  EC8D  F02B         	call	i2_strcpy	;wreg free
 21144                           
 21145                           ;RTC.c: 87: break;
 21146  0036B8  D07A               	goto	i2l7588
 21147  0036BA                     i2l7570:
 21148                           
 21149                           ;RTC.c: 89: strcpy(month, "JUN");
 21150  0036BA  0E3D               	movlw	low i2printRTC@month
 21151  0036BC  6E01               	movwf	i2strcpy@to,c
 21152  0036BE  0E00               	movlw	high i2printRTC@month
 21153  0036C0  6E02               	movwf	i2strcpy@to+1,c
 21154  0036C2  0EDE               	movlw	low STR_13
 21155  0036C4  6E03               	movwf	i2strcpy@from,c
 21156  0036C6  0EFF               	movlw	high STR_13
 21157  0036C8  6E04               	movwf	i2strcpy@from+1,c
 21158  0036CA  EC8D  F02B         	call	i2_strcpy	;wreg free
 21159                           
 21160                           ;RTC.c: 90: break;
 21161  0036CE  D06F               	goto	i2l7588
 21162  0036D0                     i2l7572:
 21163                           
 21164                           ;RTC.c: 92: strcpy(month, "JUL");
 21165  0036D0  0E3D               	movlw	low i2printRTC@month
 21166  0036D2  6E01               	movwf	i2strcpy@to,c
 21167  0036D4  0E00               	movlw	high i2printRTC@month
 21168  0036D6  6E02               	movwf	i2strcpy@to+1,c
 21169  0036D8  0ED6               	movlw	low STR_14
 21170  0036DA  6E03               	movwf	i2strcpy@from,c
 21171  0036DC  0EFF               	movlw	high STR_14
 21172  0036DE  6E04               	movwf	i2strcpy@from+1,c
 21173  0036E0  EC8D  F02B         	call	i2_strcpy	;wreg free
 21174                           
 21175                           ;RTC.c: 93: break;
 21176  0036E4  D064               	goto	i2l7588
 21177  0036E6                     i2l7574:
 21178                           
 21179                           ;RTC.c: 95: strcpy(month, "AUG");
 21180  0036E6  0E3D               	movlw	low i2printRTC@month
 21181  0036E8  6E01               	movwf	i2strcpy@to,c
 21182  0036EA  0E00               	movlw	high i2printRTC@month
 21183  0036EC  6E02               	movwf	i2strcpy@to+1,c
 21184  0036EE  0ED2               	movlw	low STR_15
 21185  0036F0  6E03               	movwf	i2strcpy@from,c
 21186  0036F2  0EFF               	movlw	high STR_15
 21187  0036F4  6E04               	movwf	i2strcpy@from+1,c
 21188  0036F6  EC8D  F02B         	call	i2_strcpy	;wreg free
 21189                           
 21190                           ;RTC.c: 96: break;
 21191  0036FA  D059               	goto	i2l7588
 21192  0036FC                     i2l7576:
 21193                           
 21194                           ;RTC.c: 98: strcpy(month, "SEP");
 21195  0036FC  0E3D               	movlw	low i2printRTC@month
 21196  0036FE  6E01               	movwf	i2strcpy@to,c
 21197  003700  0E00               	movlw	high i2printRTC@month
 21198  003702  6E02               	movwf	i2strcpy@to+1,c
 21199  003704  0EE2               	movlw	low STR_16
 21200  003706  6E03               	movwf	i2strcpy@from,c
 21201  003708  0EFF               	movlw	high STR_16
 21202  00370A  6E04               	movwf	i2strcpy@from+1,c
 21203  00370C  EC8D  F02B         	call	i2_strcpy	;wreg free
 21204                           
 21205                           ;RTC.c: 99: break;
 21206  003710  D04E               	goto	i2l7588
 21207  003712                     i2l7578:
 21208                           
 21209                           ;RTC.c: 101: strcpy(month, "OCT");
 21210  003712  0E3D               	movlw	low i2printRTC@month
 21211  003714  6E01               	movwf	i2strcpy@to,c
 21212  003716  0E00               	movlw	high i2printRTC@month
 21213  003718  6E02               	movwf	i2strcpy@to+1,c
 21214  00371A  0EF2               	movlw	low STR_17
 21215  00371C  6E03               	movwf	i2strcpy@from,c
 21216  00371E  0EFF               	movlw	high STR_17
 21217  003720  6E04               	movwf	i2strcpy@from+1,c
 21218  003722  EC8D  F02B         	call	i2_strcpy	;wreg free
 21219                           
 21220                           ;RTC.c: 102: break;
 21221  003726  D043               	goto	i2l7588
 21222  003728                     i2l7580:
 21223                           
 21224                           ;RTC.c: 104: strcpy(month, "NOV");
 21225  003728  0E3D               	movlw	low i2printRTC@month
 21226  00372A  6E01               	movwf	i2strcpy@to,c
 21227  00372C  0E00               	movlw	high i2printRTC@month
 21228  00372E  6E02               	movwf	i2strcpy@to+1,c
 21229  003730  0EF6               	movlw	low STR_18
 21230  003732  6E03               	movwf	i2strcpy@from,c
 21231  003734  0EFF               	movlw	high STR_18
 21232  003736  6E04               	movwf	i2strcpy@from+1,c
 21233  003738  EC8D  F02B         	call	i2_strcpy	;wreg free
 21234                           
 21235                           ;RTC.c: 105: break;
 21236  00373C  D038               	goto	i2l7588
 21237  00373E                     i2l7582:
 21238                           
 21239                           ;RTC.c: 107: strcpy(month, "DEC");
 21240  00373E  0E3D               	movlw	low i2printRTC@month
 21241  003740  6E01               	movwf	i2strcpy@to,c
 21242  003742  0E00               	movlw	high i2printRTC@month
 21243  003744  6E02               	movwf	i2strcpy@to+1,c
 21244  003746  0ECE               	movlw	low STR_19
 21245  003748  6E03               	movwf	i2strcpy@from,c
 21246  00374A  0EFF               	movlw	high STR_19
 21247  00374C  6E04               	movwf	i2strcpy@from+1,c
 21248  00374E  EC8D  F02B         	call	i2_strcpy	;wreg free
 21249                           
 21250                           ;RTC.c: 109: }
 21251                           
 21252                           ;RTC.c: 108: break;
 21253  003752  D02D               	goto	i2l7588
 21254  003754                     i2l7586:
 21255  003754  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21256  003758  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21257                           
 21258                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21259                           ; Switch size 1, requested type "space"
 21260                           ; Number of cases is 1, Range of values is 0 to 0
 21261                           ; switch strategies available:
 21262                           ; Name         Instructions Cycles
 21263                           ; simple_byte            4     3 (average)
 21264                           ;	Chosen strategy is simple_byte
 21265  00375C  502B               	movf	??i2_printRTC+1,w,c
 21266  00375E  0A00               	xorlw	0	; case 0
 21267  003760  A4D8               	btfss	status,2,c
 21268  003762  D025               	goto	i2l7588
 21269                           
 21270                           ; Switch size 1, requested type "space"
 21271                           ; Number of cases is 12, Range of values is 1 to 12
 21272                           ; switch strategies available:
 21273                           ; Name         Instructions Cycles
 21274                           ; simple_byte           37    19 (average)
 21275                           ;	Chosen strategy is simple_byte
 21276  003764  502A               	movf	??i2_printRTC,w,c
 21277  003766  0A01               	xorlw	1	; case 1
 21278  003768  B4D8               	btfsc	status,2,c
 21279  00376A  D770               	goto	i2l7560
 21280  00376C  0A03               	xorlw	3	; case 2
 21281  00376E  B4D8               	btfsc	status,2,c
 21282  003770  D778               	goto	i2l7562
 21283  003772  0A01               	xorlw	1	; case 3
 21284  003774  B4D8               	btfsc	status,2,c
 21285  003776  D780               	goto	i2l7564
 21286  003778  0A07               	xorlw	7	; case 4
 21287  00377A  B4D8               	btfsc	status,2,c
 21288  00377C  D788               	goto	i2l7566
 21289  00377E  0A01               	xorlw	1	; case 5
 21290  003780  B4D8               	btfsc	status,2,c
 21291  003782  D790               	goto	i2l7568
 21292  003784  0A03               	xorlw	3	; case 6
 21293  003786  B4D8               	btfsc	status,2,c
 21294  003788  D798               	goto	i2l7570
 21295  00378A  0A01               	xorlw	1	; case 7
 21296  00378C  B4D8               	btfsc	status,2,c
 21297  00378E  D7A0               	goto	i2l7572
 21298  003790  0A0F               	xorlw	15	; case 8
 21299  003792  B4D8               	btfsc	status,2,c
 21300  003794  D7A8               	goto	i2l7574
 21301  003796  0A01               	xorlw	1	; case 9
 21302  003798  B4D8               	btfsc	status,2,c
 21303  00379A  D7B0               	goto	i2l7576
 21304  00379C  0A03               	xorlw	3	; case 10
 21305  00379E  B4D8               	btfsc	status,2,c
 21306  0037A0  D7B8               	goto	i2l7578
 21307  0037A2  0A01               	xorlw	1	; case 11
 21308  0037A4  B4D8               	btfsc	status,2,c
 21309  0037A6  D7C0               	goto	i2l7580
 21310  0037A8  0A07               	xorlw	7	; case 12
 21311  0037AA  B4D8               	btfsc	status,2,c
 21312  0037AC  D7C8               	goto	i2l7582
 21313  0037AE                     i2l7588:
 21314                           
 21315                           ;RTC.c: 110: lcdInst(0b10000000);;
 21316  0037AE  0E80               	movlw	128
 21317  0037B0  ECFD  F02D         	call	i2_lcdInst
 21318                           
 21319                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21320  0037B4  0EA6               	movlw	low STR_21
 21321  0037B6  6E0D               	movwf	i2printf@f,c
 21322  0037B8  0EFA               	movlw	high STR_21
 21323  0037BA  6E0E               	movwf	i2printf@f+1,c
 21324  0037BC  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21325  0037C0  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21326  0037C4  0E3D               	movlw	low i2printRTC@month
 21327  0037C6  6E11               	movwf	?i2_printf+4,c
 21328  0037C8  0E00               	movlw	high i2printRTC@month
 21329  0037CA  6E12               	movwf	?i2_printf+5,c
 21330  0037CC  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21331  0037D0  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21332  0037D4  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21333  0037D8  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21334  0037DC  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21335  0037E0  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21336  0037E4  EC00  F012         	call	i2_printf	;wreg free
 21337  0037E8  0012               	return		;funcret
 21338  0037EA                     __end_ofi2_printRTC:
 21339                           	opt stack 0
 21340                           pclatu	equ	0xFFB
 21341                           pclath	equ	0xFFA
 21342                           tblptru	equ	0xFF8
 21343                           tblptrh	equ	0xFF7
 21344                           tblptrl	equ	0xFF6
 21345                           tablat	equ	0xFF5
 21346                           prodh	equ	0xFF4
 21347                           prodl	equ	0xFF3
 21348                           intcon	equ	0xFF2
 21349                           intcon2	equ	0xFF1
 21350                           intcon3	equ	0xFF0
 21351                           indf0	equ	0xFEF
 21352                           postinc0	equ	0xFEE
 21353                           fsr0h	equ	0xFEA
 21354                           fsr0l	equ	0xFE9
 21355                           wreg	equ	0xFE8
 21356                           postdec1	equ	0xFE5
 21357                           fsr1h	equ	0xFE2
 21358                           fsr1l	equ	0xFE1
 21359                           indf2	equ	0xFDF
 21360                           postinc2	equ	0xFDE
 21361                           postdec2	equ	0xFDD
 21362                           fsr2h	equ	0xFDA
 21363                           fsr2l	equ	0xFD9
 21364                           status	equ	0xFD8
 21365                           
 21366 ;; *************** function i2_strcpy *****************
 21367 ;; Defined at:
 21368 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21369 ;; Parameters:    Size  Location     Type
 21370 ;;  to              2    0[COMRAM] PTR unsigned char 
 21371 ;;		 -> printRTC@month(4), UI@month(4), 
 21372 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21373 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21374 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21375 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21376 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21377 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21378 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21379 ;;		 -> STR_8(4), 
 21380 ;; Auto vars:     Size  Location     Type
 21381 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21382 ;;		 -> printRTC@month(4), UI@month(4), 
 21383 ;; Return value:  Size  Location     Type
 21384 ;;                  2    0[COMRAM] PTR unsigned char 
 21385 ;; Registers used:
 21386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21387 ;; Tracked objects:
 21388 ;;		On entry : 0/0
 21389 ;;		On exit  : 0/0
 21390 ;;		Unchanged: 0/0
 21391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21396 ;;Total ram usage:        6 bytes
 21397 ;; Hardware stack levels used:    1
 21398 ;; This function calls:
 21399 ;;		Nothing
 21400 ;; This function is called by:
 21401 ;;		i2_printRTC
 21402 ;; This function uses a non-reentrant model
 21403 ;;
 21404                           
 21405                           	psect	text70
 21406  00571A                     __ptext70:
 21407                           	opt stack 0
 21408  00571A                     i2_strcpy:
 21409                           	opt stack 21
 21410                           
 21411                           ;incstack = 0
 21412  00571A  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21413  00571E  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21414  005722  D004               	goto	i2l7112
 21415  005724                     i2l7110:
 21416  005724  4A05               	infsnz	i2strcpy@cp,f,c
 21417  005726  2A06               	incf	i2strcpy@cp+1,f,c
 21418  005728  4A03               	infsnz	i2strcpy@from,f,c
 21419  00572A  2A04               	incf	i2strcpy@from+1,f,c
 21420  00572C                     i2l7112:
 21421  00572C  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21422  005730  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21423  005734                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21424  005734  6AF8               	clrf	tblptru,c
 21425  005736                     	endif
 21426  005736                     	if	0	;tblptru may be non-zero
 21427  005736                     	endif
 21428  005736  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21429  00573A  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21430  00573E  0008               	tblrd		*
 21431  005740  CFF5 FFDF          	movff	tablat,indf2
 21432  005744  50DF               	movf	indf2,w,c
 21433  005746  B4D8               	btfsc	status,2,c
 21434  005748  0012               	return	
 21435  00574A  D7EC               	goto	i2l7110
 21436  00574C                     __end_ofi2_strcpy:
 21437                           	opt stack 0
 21438                           pclatu	equ	0xFFB
 21439                           pclath	equ	0xFFA
 21440                           tblptru	equ	0xFF8
 21441                           tblptrh	equ	0xFF7
 21442                           tblptrl	equ	0xFF6
 21443                           tablat	equ	0xFF5
 21444                           prodh	equ	0xFF4
 21445                           prodl	equ	0xFF3
 21446                           intcon	equ	0xFF2
 21447                           intcon2	equ	0xFF1
 21448                           intcon3	equ	0xFF0
 21449                           indf0	equ	0xFEF
 21450                           postinc0	equ	0xFEE
 21451                           fsr0h	equ	0xFEA
 21452                           fsr0l	equ	0xFE9
 21453                           wreg	equ	0xFE8
 21454                           postdec1	equ	0xFE5
 21455                           fsr1h	equ	0xFE2
 21456                           fsr1l	equ	0xFE1
 21457                           indf2	equ	0xFDF
 21458                           postinc2	equ	0xFDE
 21459                           postdec2	equ	0xFDD
 21460                           fsr2h	equ	0xFDA
 21461                           fsr2l	equ	0xFD9
 21462                           status	equ	0xFD8
 21463                           
 21464 ;; *************** function _inputHandler *****************
 21465 ;; Defined at:
 21466 ;;		line 375 in file "UI.c"
 21467 ;; Parameters:    Size  Location     Type
 21468 ;;		None
 21469 ;; Auto vars:     Size  Location     Type
 21470 ;;		None
 21471 ;; Return value:  Size  Location     Type
 21472 ;;                  2   41[COMRAM] int 
 21473 ;; Registers used:
 21474 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21475 ;; Tracked objects:
 21476 ;;		On entry : 0/0
 21477 ;;		On exit  : 0/0
 21478 ;;		Unchanged: 0/0
 21479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21480 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21483 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21484 ;;Total ram usage:        4 bytes
 21485 ;; Hardware stack levels used:    1
 21486 ;; Hardware stack levels required when called:    4
 21487 ;; This function calls:
 21488 ;;		_change_state_to_logs_11
 21489 ;;		_change_state_to_logs_12
 21490 ;;		_change_state_to_logs_22
 21491 ;;		_change_state_to_logs_23
 21492 ;;		_change_state_to_logs_33
 21493 ;;		_change_state_to_logs_34
 21494 ;;		_change_state_to_menu_11
 21495 ;;		_change_state_to_menu_23
 21496 ;;		i2_change_state_to_menu_12
 21497 ;;		i2_change_state_to_menu_22
 21498 ;; This function is called by:
 21499 ;;		_updateMenu
 21500 ;; This function uses a non-reentrant model
 21501 ;;
 21502                           
 21503                           	psect	text71
 21504  0039DC                     __ptext71:
 21505                           	opt stack 0
 21506  0039DC                     _inputHandler:
 21507                           	opt stack 18
 21508                           
 21509                           ;UI.c: 380: if(firstboot){
 21510                           
 21511                           ;incstack = 0
 21512  0039DC  0101               	movlb	1	; () banked
 21513  0039DE  5141               	movf	_firstboot& (0+255),w,b
 21514  0039E0  0101               	movlb	1	; () banked
 21515  0039E2  1142               	iorwf	(_firstboot+1)& (0+255),w,b
 21516  0039E4  B4D8               	btfsc	status,2,c
 21517  0039E6  D00C               	goto	i2l7656
 21518                           
 21519                           ; BSR set to: 1
 21520                           ;UI.c: 381: change_state_to_menu_11();
 21521  0039E8  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 21522                           
 21523                           ;UI.c: 382: firstboot = 0;
 21524  0039EC  0E00               	movlw	0
 21525  0039EE  0101               	movlb	1	; () banked
 21526  0039F0  6F42               	movwf	(_firstboot+1)& (0+255),b
 21527  0039F2  0E00               	movlw	0
 21528  0039F4  6F41               	movwf	_firstboot& (0+255),b
 21529                           
 21530                           ; BSR set to: 1
 21531                           ;UI.c: 383: return 0;
 21532  0039F6  0E00               	movlw	0
 21533  0039F8  6E2B               	movwf	?_inputHandler+1,c
 21534  0039FA  0E00               	movlw	0
 21535  0039FC  6E2A               	movwf	?_inputHandler,c
 21536                           
 21537                           ; BSR set to: 1
 21538  0039FE  0012               	return	
 21539  003A00                     i2l7656:
 21540                           
 21541                           ; BSR set to: 1
 21542                           ;UI.c: 384: }
 21543                           ;UI.c: 385: if (logstate){
 21544  003A00  0100               	movlb	0	; () banked
 21545  003A02  51F8               	movf	_logstate& (0+255),w,b
 21546  003A04  0100               	movlb	0	; () banked
 21547  003A06  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21548  003A08  B4D8               	btfsc	status,2,c
 21549  003A0A  D0C7               	goto	i2l7774
 21550                           
 21551                           ; BSR set to: 0
 21552                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21553  003A0C  0E43               	movlw	67
 21554  003A0E  187D               	xorwf	_input,w,c	;volatile
 21555  003A10  A4D8               	btfss	status,2,c
 21556  003A12  D012               	goto	i2l7674
 21557                           
 21558                           ; BSR set to: 0
 21559  003A14  B281               	btfsc	3969,1,c	;volatile
 21560  003A16  D009               	goto	i2l7666
 21561  003A18  D00F               	goto	i2l7674
 21562  003A1A                     i2l7664:
 21563                           
 21564                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21565  003A1A  0E68               	movlw	104
 21566  003A1C  6E2C               	movwf	??_inputHandler& (0+255),c
 21567  003A1E  0EE4               	movlw	228
 21568  003A20                     i2u1130_47:
 21569  003A20  2EE8               	decfsz	wreg,f,c
 21570  003A22  D7FE               	bra	i2u1130_47
 21571  003A24  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21572  003A26  D7FC               	bra	i2u1130_47
 21573  003A28  D000               	nop2	
 21574  003A2A                     i2l7666:
 21575  003A2A  B281               	btfsc	3969,1,c	;volatile
 21576  003A2C  D7F6               	goto	i2l7664
 21577  003A2E                     i2l7668:
 21578                           
 21579                           ;UI.c: 390: }
 21580                           ;UI.c: 391: return 0;
 21581  003A2E  0E00               	movlw	0
 21582  003A30  6E2B               	movwf	?_inputHandler+1,c
 21583  003A32  0E00               	movlw	0
 21584  003A34  6E2A               	movwf	?_inputHandler,c
 21585  003A36  0012               	return	
 21586  003A38                     i2l7674:
 21587                           
 21588                           ;UI.c: 393: else if (input == 'D'){
 21589  003A38  0E44               	movlw	68
 21590  003A3A  187D               	xorwf	_input,w,c	;volatile
 21591  003A3C  A4D8               	btfss	status,2,c
 21592  003A3E  D7F7               	goto	i2l7668
 21593                           
 21594                           ;UI.c: 395: logstate = 0;
 21595  003A40  0E00               	movlw	0
 21596  003A42  0100               	movlb	0	; () banked
 21597  003A44  6FF9               	movwf	(_logstate+1)& (0+255),b
 21598  003A46  0E00               	movlw	0
 21599  003A48  6FF8               	movwf	_logstate& (0+255),b
 21600                           
 21601                           ;UI.c: 396: switch(cur_state){
 21602  003A4A  D012               	goto	i2l7692
 21603  003A4C                     i2l7678:
 21604                           
 21605                           ;UI.c: 398: change_state_to_logs_11();
 21606  003A4C  EC7E  F02C         	call	_change_state_to_logs_11	;wreg free
 21607                           
 21608                           ;UI.c: 399: break;
 21609  003A50  D7EE               	goto	i2l7668
 21610  003A52                     i2l7680:
 21611                           
 21612                           ;UI.c: 401: change_state_to_logs_12();
 21613  003A52  EC66  F02C         	call	_change_state_to_logs_12	;wreg free
 21614                           
 21615                           ;UI.c: 402: break;
 21616  003A56  D7EB               	goto	i2l7668
 21617  003A58                     i2l7682:
 21618                           
 21619                           ;UI.c: 404: change_state_to_logs_22();
 21620  003A58  EC4E  F02C         	call	_change_state_to_logs_22	;wreg free
 21621                           
 21622                           ;UI.c: 405: break;
 21623  003A5C  D7E8               	goto	i2l7668
 21624  003A5E                     i2l7684:
 21625                           
 21626                           ;UI.c: 407: change_state_to_logs_23();
 21627  003A5E  ECAD  F02C         	call	_change_state_to_logs_23	;wreg free
 21628                           
 21629                           ;UI.c: 408: break;
 21630  003A62  D7E5               	goto	i2l7668
 21631  003A64                     i2l7686:
 21632                           
 21633                           ;UI.c: 410: change_state_to_logs_33();
 21634  003A64  EC36  F02C         	call	_change_state_to_logs_33	;wreg free
 21635                           
 21636                           ;UI.c: 411: break;
 21637  003A68  D7E2               	goto	i2l7668
 21638  003A6A                     i2l7688:
 21639                           
 21640                           ;UI.c: 413: change_state_to_logs_34();
 21641  003A6A  EC1E  F02C         	call	_change_state_to_logs_34	;wreg free
 21642                           
 21643                           ;UI.c: 415: }
 21644                           
 21645                           ;UI.c: 414: break;
 21646  003A6E  D7DF               	goto	i2l7668
 21647  003A70                     i2l7692:
 21648  003A70  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21649  003A74  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21650                           
 21651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21652                           ; Switch size 1, requested type "space"
 21653                           ; Number of cases is 2, Range of values is 3 to 4
 21654                           ; switch strategies available:
 21655                           ; Name         Instructions Cycles
 21656                           ; simple_byte            7     4 (average)
 21657                           ;	Chosen strategy is simple_byte
 21658  003A78  502D               	movf	??_inputHandler+1,w,c
 21659  003A7A  0A03               	xorlw	3	; case 3
 21660  003A7C  B4D8               	btfsc	status,2,c
 21661  003A7E  D004               	goto	i2l10730
 21662  003A80  0A07               	xorlw	7	; case 4
 21663  003A82  B4D8               	btfsc	status,2,c
 21664  003A84  D00F               	goto	i2l10732
 21665  003A86  D7D3               	goto	i2l7668
 21666  003A88                     i2l10730:
 21667                           
 21668                           ; Switch size 1, requested type "space"
 21669                           ; Number of cases is 4, Range of values is 243 to 255
 21670                           ; switch strategies available:
 21671                           ; Name         Instructions Cycles
 21672                           ; simple_byte           13     7 (average)
 21673                           ;	Chosen strategy is simple_byte
 21674  003A88  502C               	movf	??_inputHandler,w,c
 21675  003A8A  0AF3               	xorlw	243	; case 243
 21676  003A8C  B4D8               	btfsc	status,2,c
 21677  003A8E  D7DE               	goto	i2l7678
 21678  003A90  0A07               	xorlw	7	; case 244
 21679  003A92  B4D8               	btfsc	status,2,c
 21680  003A94  D7DE               	goto	i2l7680
 21681  003A96  0A0A               	xorlw	10	; case 254
 21682  003A98  B4D8               	btfsc	status,2,c
 21683  003A9A  D7DE               	goto	i2l7682
 21684  003A9C  0A01               	xorlw	1	; case 255
 21685  003A9E  B4D8               	btfsc	status,2,c
 21686  003AA0  D7DE               	goto	i2l7684
 21687  003AA2  D7C5               	goto	i2l7668
 21688  003AA4                     i2l10732:
 21689                           
 21690                           ; Switch size 1, requested type "space"
 21691                           ; Number of cases is 2, Range of values is 9 to 10
 21692                           ; switch strategies available:
 21693                           ; Name         Instructions Cycles
 21694                           ; simple_byte            7     4 (average)
 21695                           ;	Chosen strategy is simple_byte
 21696  003AA4  502C               	movf	??_inputHandler,w,c
 21697  003AA6  0A09               	xorlw	9	; case 9
 21698  003AA8  B4D8               	btfsc	status,2,c
 21699  003AAA  D7DC               	goto	i2l7686
 21700  003AAC  0A03               	xorlw	3	; case 10
 21701  003AAE  B4D8               	btfsc	status,2,c
 21702  003AB0  D7DC               	goto	i2l7688
 21703  003AB2  D7BD               	goto	i2l7668
 21704  003AB4                     i2l7704:
 21705                           
 21706                           ;UI.c: 425: if(cur_state == 11){
 21707  003AB4  0E0B               	movlw	11
 21708  003AB6  0100               	movlb	0	; () banked
 21709  003AB8  19E6               	xorwf	_cur_state& (0+255),w,b
 21710  003ABA  0100               	movlb	0	; () banked
 21711  003ABC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21712  003ABE  A4D8               	btfss	status,2,c
 21713  003AC0  D005               	goto	i2l7712
 21714                           
 21715                           ; BSR set to: 0
 21716                           ;UI.c: 426: return 0;
 21717  003AC2  0E00               	movlw	0
 21718  003AC4  6E2B               	movwf	?_inputHandler+1,c
 21719  003AC6  0E00               	movlw	0
 21720  003AC8  6E2A               	movwf	?_inputHandler,c
 21721                           
 21722                           ; BSR set to: 0
 21723  003ACA  0012               	return	
 21724  003ACC                     i2l7712:
 21725                           
 21726                           ; BSR set to: 0
 21727                           ;UI.c: 428: else{
 21728                           ;UI.c: 429: change_state_to_menu_11();
 21729  003ACC  EC06  F02C         	call	_change_state_to_menu_11	;wreg free
 21730                           
 21731                           ;UI.c: 430: }
 21732                           ;UI.c: 431: return 0;
 21733  003AD0  0E00               	movlw	0
 21734  003AD2  6E2B               	movwf	?_inputHandler+1,c
 21735  003AD4  0E00               	movlw	0
 21736  003AD6  6E2A               	movwf	?_inputHandler,c
 21737  003AD8  0012               	return	
 21738  003ADA                     i2l7718:
 21739                           
 21740                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21741  003ADA  0E16               	movlw	22
 21742  003ADC  0100               	movlb	0	; () banked
 21743  003ADE  19E6               	xorwf	_cur_state& (0+255),w,b
 21744  003AE0  0100               	movlb	0	; () banked
 21745  003AE2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21746  003AE4  B4D8               	btfsc	status,2,c
 21747  003AE6  D007               	goto	i2l7722
 21748                           
 21749                           ; BSR set to: 0
 21750  003AE8  0E0C               	movlw	12
 21751  003AEA  0100               	movlb	0	; () banked
 21752  003AEC  19E6               	xorwf	_cur_state& (0+255),w,b
 21753  003AEE  0100               	movlb	0	; () banked
 21754  003AF0  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21755  003AF2  A4D8               	btfss	status,2,c
 21756  003AF4  D005               	goto	i2l7728
 21757  003AF6                     i2l7722:
 21758                           
 21759                           ; BSR set to: 0
 21760                           ;UI.c: 434: return 0;
 21761  003AF6  0E00               	movlw	0
 21762  003AF8  6E2B               	movwf	?_inputHandler+1,c
 21763  003AFA  0E00               	movlw	0
 21764  003AFC  6E2A               	movwf	?_inputHandler,c
 21765                           
 21766                           ; BSR set to: 0
 21767  003AFE  0012               	return	
 21768  003B00                     i2l7728:
 21769                           
 21770                           ; BSR set to: 0
 21771                           ;UI.c: 436: else if(cur_state == 23){
 21772  003B00  0E17               	movlw	23
 21773  003B02  0100               	movlb	0	; () banked
 21774  003B04  19E6               	xorwf	_cur_state& (0+255),w,b
 21775  003B06  0100               	movlb	0	; () banked
 21776  003B08  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21777  003B0A  A4D8               	btfss	status,2,c
 21778  003B0C  D003               	goto	i2l7732
 21779                           
 21780                           ; BSR set to: 0
 21781                           ;UI.c: 437: change_state_to_menu_22();
 21782  003B0E  ECBE  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21783                           
 21784                           ;UI.c: 438: }
 21785  003B12  D002               	goto	i2l7734
 21786  003B14                     i2l7732:
 21787                           
 21788                           ;UI.c: 439: else{
 21789                           ;UI.c: 440: change_state_to_menu_12();
 21790  003B14  ECD6  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21791  003B18                     i2l7734:
 21792                           
 21793                           ;UI.c: 441: }
 21794                           ;UI.c: 442: return 0;
 21795  003B18  0E00               	movlw	0
 21796  003B1A  6E2B               	movwf	?_inputHandler+1,c
 21797  003B1C  0E00               	movlw	0
 21798  003B1E  6E2A               	movwf	?_inputHandler,c
 21799  003B20  0012               	return	
 21800  003B22                     i2l7738:
 21801                           
 21802                           ;UI.c: 444: if(cur_state == 23){
 21803  003B22  0E17               	movlw	23
 21804  003B24  0100               	movlb	0	; () banked
 21805  003B26  19E6               	xorwf	_cur_state& (0+255),w,b
 21806  003B28  0100               	movlb	0	; () banked
 21807  003B2A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21808  003B2C  A4D8               	btfss	status,2,c
 21809  003B2E  D005               	goto	i2l7746
 21810                           
 21811                           ; BSR set to: 0
 21812                           ;UI.c: 445: return 0;
 21813  003B30  0E00               	movlw	0
 21814  003B32  6E2B               	movwf	?_inputHandler+1,c
 21815  003B34  0E00               	movlw	0
 21816  003B36  6E2A               	movwf	?_inputHandler,c
 21817                           
 21818                           ; BSR set to: 0
 21819  003B38  0012               	return	
 21820  003B3A                     i2l7746:
 21821                           
 21822                           ; BSR set to: 0
 21823                           ;UI.c: 447: else{
 21824                           ;UI.c: 448: change_state_to_menu_23();
 21825  003B3A  ECEE  F02B         	call	_change_state_to_menu_23	;wreg free
 21826                           
 21827                           ;UI.c: 449: }
 21828                           ;UI.c: 450: return 0;
 21829  003B3E  0E00               	movlw	0
 21830  003B40  6E2B               	movwf	?_inputHandler+1,c
 21831  003B42  0E00               	movlw	0
 21832  003B44  6E2A               	movwf	?_inputHandler,c
 21833  003B46  0012               	return	
 21834  003B48                     i2l7752:
 21835                           
 21836                           ;UI.c: 453: up = 1;
 21837  003B48  0E00               	movlw	0
 21838  003B4A  6E76               	movwf	_up+1,c
 21839  003B4C  0E01               	movlw	1
 21840  003B4E  6E75               	movwf	_up,c
 21841                           
 21842                           ;UI.c: 454: return 1;
 21843  003B50  0E00               	movlw	0
 21844  003B52  6E2B               	movwf	?_inputHandler+1,c
 21845  003B54  0E01               	movlw	1
 21846  003B56  6E2A               	movwf	?_inputHandler,c
 21847  003B58  0012               	return	
 21848  003B5A                     i2l7756:
 21849                           
 21850                           ;UI.c: 456: down = 1;
 21851  003B5A  0E00               	movlw	0
 21852  003B5C  6E5E               	movwf	_down+1,c
 21853  003B5E  0E01               	movlw	1
 21854  003B60  6E5D               	movwf	_down,c
 21855                           
 21856                           ;UI.c: 457: return 1;
 21857  003B62  0E00               	movlw	0
 21858  003B64  6E2B               	movwf	?_inputHandler+1,c
 21859  003B66  0E01               	movlw	1
 21860  003B68  6E2A               	movwf	?_inputHandler,c
 21861  003B6A  0012               	return	
 21862  003B6C                     i2l7760:
 21863                           
 21864                           ;UI.c: 459: enter = 1;
 21865  003B6C  0E00               	movlw	0
 21866  003B6E  6E60               	movwf	_enter+1,c
 21867  003B70  0E01               	movlw	1
 21868  003B72  6E5F               	movwf	_enter,c
 21869                           
 21870                           ;UI.c: 460: return 1;
 21871  003B74  0E00               	movlw	0
 21872  003B76  6E2B               	movwf	?_inputHandler+1,c
 21873  003B78  0E01               	movlw	1
 21874  003B7A  6E2A               	movwf	?_inputHandler,c
 21875  003B7C  0012               	return	
 21876  003B7E                     i2l7764:
 21877                           
 21878                           ;UI.c: 462: back = 1;
 21879  003B7E  0E00               	movlw	0
 21880  003B80  6E5C               	movwf	_back+1,c
 21881  003B82  0E01               	movlw	1
 21882  003B84  6E5B               	movwf	_back,c
 21883                           
 21884                           ;UI.c: 463: return 1;
 21885  003B86  0E00               	movlw	0
 21886  003B88  6E2B               	movwf	?_inputHandler+1,c
 21887  003B8A  0E01               	movlw	1
 21888  003B8C  6E2A               	movwf	?_inputHandler,c
 21889  003B8E  0012               	return	
 21890  003B90                     i2l7768:
 21891                           
 21892                           ;UI.c: 466: return 1;
 21893  003B90  0E00               	movlw	0
 21894  003B92  6E2B               	movwf	?_inputHandler+1,c
 21895  003B94  0E01               	movlw	1
 21896  003B96  6E2A               	movwf	?_inputHandler,c
 21897                           
 21898                           ;UI.c: 467: }
 21899  003B98  0012               	return	
 21900  003B9A                     i2l7774:
 21901  003B9A  507D               	movf	_input,w,c	;volatile
 21902                           
 21903                           ; Switch size 1, requested type "space"
 21904                           ; Number of cases is 7, Range of values is 49 to 68
 21905                           ; switch strategies available:
 21906                           ; Name         Instructions Cycles
 21907                           ; simple_byte           22    12 (average)
 21908                           ;	Chosen strategy is simple_byte
 21909  003B9C  0A31               	xorlw	49	; case 49
 21910  003B9E  B4D8               	btfsc	status,2,c
 21911  003BA0  D789               	goto	i2l7704
 21912  003BA2  0A03               	xorlw	3	; case 50
 21913  003BA4  B4D8               	btfsc	status,2,c
 21914  003BA6  D799               	goto	i2l7718
 21915  003BA8  0A01               	xorlw	1	; case 51
 21916  003BAA  B4D8               	btfsc	status,2,c
 21917  003BAC  D7BA               	goto	i2l7738
 21918  003BAE  0A72               	xorlw	114	; case 65
 21919  003BB0  B4D8               	btfsc	status,2,c
 21920  003BB2  D7CA               	goto	i2l7752
 21921  003BB4  0A03               	xorlw	3	; case 66
 21922  003BB6  B4D8               	btfsc	status,2,c
 21923  003BB8  D7D0               	goto	i2l7756
 21924  003BBA  0A01               	xorlw	1	; case 67
 21925  003BBC  B4D8               	btfsc	status,2,c
 21926  003BBE  D7D6               	goto	i2l7760
 21927  003BC0  0A07               	xorlw	7	; case 68
 21928  003BC2  B4D8               	btfsc	status,2,c
 21929  003BC4  D7DC               	goto	i2l7764
 21930  003BC6  D7E4               	goto	i2l7768
 21931  003BC8                     __end_of_inputHandler:
 21932                           	opt stack 0
 21933                           pclatu	equ	0xFFB
 21934                           pclath	equ	0xFFA
 21935                           tblptru	equ	0xFF8
 21936                           tblptrh	equ	0xFF7
 21937                           tblptrl	equ	0xFF6
 21938                           tablat	equ	0xFF5
 21939                           prodh	equ	0xFF4
 21940                           prodl	equ	0xFF3
 21941                           intcon	equ	0xFF2
 21942                           intcon2	equ	0xFF1
 21943                           intcon3	equ	0xFF0
 21944                           indf0	equ	0xFEF
 21945                           postinc0	equ	0xFEE
 21946                           fsr0h	equ	0xFEA
 21947                           fsr0l	equ	0xFE9
 21948                           wreg	equ	0xFE8
 21949                           postdec1	equ	0xFE5
 21950                           fsr1h	equ	0xFE2
 21951                           fsr1l	equ	0xFE1
 21952                           indf2	equ	0xFDF
 21953                           postinc2	equ	0xFDE
 21954                           postdec2	equ	0xFDD
 21955                           fsr2h	equ	0xFDA
 21956                           fsr2l	equ	0xFD9
 21957                           status	equ	0xFD8
 21958                           
 21959 ;; *************** function i2_change_state_to_menu_22 *****************
 21960 ;; Defined at:
 21961 ;;		line 501 in file "UI.c"
 21962 ;; Parameters:    Size  Location     Type
 21963 ;;		None
 21964 ;; Auto vars:     Size  Location     Type
 21965 ;;		None
 21966 ;; Return value:  Size  Location     Type
 21967 ;;                  1    wreg      void 
 21968 ;; Registers used:
 21969 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21970 ;; Tracked objects:
 21971 ;;		On entry : 0/0
 21972 ;;		On exit  : 0/0
 21973 ;;		Unchanged: 0/0
 21974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21979 ;;Total ram usage:        0 bytes
 21980 ;; Hardware stack levels used:    1
 21981 ;; Hardware stack levels required when called:    3
 21982 ;; This function calls:
 21983 ;;		i2_lcdInst
 21984 ;;		i2_printf
 21985 ;; This function is called by:
 21986 ;;		_updateMenu
 21987 ;;		_inputHandler
 21988 ;; This function uses a non-reentrant model
 21989 ;;
 21990                           
 21991                           	psect	text72
 21992  00577C                     __ptext72:
 21993                           	opt stack 0
 21994  00577C                     i2_change_state_to_menu_22:
 21995                           	opt stack 19
 21996                           
 21997                           ;UI.c: 502: cur_state = 22;
 21998                           
 21999                           ;incstack = 0
 22000  00577C  0E00               	movlw	0
 22001  00577E  0100               	movlb	0	; () banked
 22002  005780  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22003  005782  0E16               	movlw	22
 22004  005784  6FE6               	movwf	_cur_state& (0+255),b
 22005                           
 22006                           ; BSR set to: 0
 22007                           ;UI.c: 504: lcdInst(0b10000000);;
 22008  005786  0E80               	movlw	128
 22009  005788  ECFD  F02D         	call	i2_lcdInst
 22010                           
 22011                           ;UI.c: 505: printf("2. SORT        <");
 22012  00578C  0EB7               	movlw	low STR_34
 22013  00578E  6E0D               	movwf	i2printf@f,c
 22014  005790  0EFD               	movlw	high STR_34
 22015  005792  6E0E               	movwf	i2printf@f+1,c
 22016  005794  EC00  F012         	call	i2_printf	;wreg free
 22017                           
 22018                           ;UI.c: 506: lcdInst(0b11000000);;
 22019  005798  0EC0               	movlw	192
 22020  00579A  ECFD  F02D         	call	i2_lcdInst
 22021                           
 22022                           ;UI.c: 507: printf("3. LOGS         ");
 22023  00579E  0EFC               	movlw	low STR_36
 22024  0057A0  6E0D               	movwf	i2printf@f,c
 22025  0057A2  0EFC               	movlw	high STR_36
 22026  0057A4  6E0E               	movwf	i2printf@f+1,c
 22027  0057A6  EC00  F012         	call	i2_printf	;wreg free
 22028  0057AA  0012               	return		;funcret
 22029  0057AC                     __end_ofi2_change_state_to_menu_22:
 22030                           	opt stack 0
 22031                           pclatu	equ	0xFFB
 22032                           pclath	equ	0xFFA
 22033                           tblptru	equ	0xFF8
 22034                           tblptrh	equ	0xFF7
 22035                           tblptrl	equ	0xFF6
 22036                           tablat	equ	0xFF5
 22037                           prodh	equ	0xFF4
 22038                           prodl	equ	0xFF3
 22039                           intcon	equ	0xFF2
 22040                           intcon2	equ	0xFF1
 22041                           intcon3	equ	0xFF0
 22042                           indf0	equ	0xFEF
 22043                           postinc0	equ	0xFEE
 22044                           fsr0h	equ	0xFEA
 22045                           fsr0l	equ	0xFE9
 22046                           wreg	equ	0xFE8
 22047                           postdec1	equ	0xFE5
 22048                           fsr1h	equ	0xFE2
 22049                           fsr1l	equ	0xFE1
 22050                           indf2	equ	0xFDF
 22051                           postinc2	equ	0xFDE
 22052                           postdec2	equ	0xFDD
 22053                           fsr2h	equ	0xFDA
 22054                           fsr2l	equ	0xFD9
 22055                           status	equ	0xFD8
 22056                           
 22057 ;; *************** function i2_change_state_to_menu_12 *****************
 22058 ;; Defined at:
 22059 ;;		line 493 in file "UI.c"
 22060 ;; Parameters:    Size  Location     Type
 22061 ;;		None
 22062 ;; Auto vars:     Size  Location     Type
 22063 ;;		None
 22064 ;; Return value:  Size  Location     Type
 22065 ;;                  1    wreg      void 
 22066 ;; Registers used:
 22067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22068 ;; Tracked objects:
 22069 ;;		On entry : 0/0
 22070 ;;		On exit  : 0/0
 22071 ;;		Unchanged: 0/0
 22072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22077 ;;Total ram usage:        0 bytes
 22078 ;; Hardware stack levels used:    1
 22079 ;; Hardware stack levels required when called:    3
 22080 ;; This function calls:
 22081 ;;		i2_lcdInst
 22082 ;;		i2_printf
 22083 ;; This function is called by:
 22084 ;;		_updateMenu
 22085 ;;		_inputHandler
 22086 ;; This function uses a non-reentrant model
 22087 ;;
 22088                           
 22089                           	psect	text73
 22090  0057AC                     __ptext73:
 22091                           	opt stack 0
 22092  0057AC                     i2_change_state_to_menu_12:
 22093                           	opt stack 19
 22094                           
 22095                           ;UI.c: 494: cur_state = 12;
 22096                           
 22097                           ;incstack = 0
 22098  0057AC  0E00               	movlw	0
 22099  0057AE  0100               	movlb	0	; () banked
 22100  0057B0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22101  0057B2  0E0C               	movlw	12
 22102  0057B4  6FE6               	movwf	_cur_state& (0+255),b
 22103                           
 22104                           ; BSR set to: 0
 22105                           ;UI.c: 496: lcdInst(0b10000000);;
 22106  0057B6  0E80               	movlw	128
 22107  0057B8  ECFD  F02D         	call	i2_lcdInst
 22108                           
 22109                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22110  0057BC  0E1E               	movlw	low STR_33
 22111  0057BE  6E0D               	movwf	i2printf@f,c
 22112  0057C0  0EFD               	movlw	high STR_33
 22113  0057C2  6E0E               	movwf	i2printf@f+1,c
 22114  0057C4  EC00  F012         	call	i2_printf	;wreg free
 22115                           
 22116                           ;UI.c: 498: lcdInst(0b11000000);;
 22117  0057C8  0EC0               	movlw	192
 22118  0057CA  ECFD  F02D         	call	i2_lcdInst
 22119                           
 22120                           ;UI.c: 499: printf("2. SORT        <");
 22121  0057CE  0EB7               	movlw	low STR_34
 22122  0057D0  6E0D               	movwf	i2printf@f,c
 22123  0057D2  0EFD               	movlw	high STR_34
 22124  0057D4  6E0E               	movwf	i2printf@f+1,c
 22125  0057D6  EC00  F012         	call	i2_printf	;wreg free
 22126  0057DA  0012               	return		;funcret
 22127  0057DC                     __end_ofi2_change_state_to_menu_12:
 22128                           	opt stack 0
 22129                           pclatu	equ	0xFFB
 22130                           pclath	equ	0xFFA
 22131                           tblptru	equ	0xFF8
 22132                           tblptrh	equ	0xFF7
 22133                           tblptrl	equ	0xFF6
 22134                           tablat	equ	0xFF5
 22135                           prodh	equ	0xFF4
 22136                           prodl	equ	0xFF3
 22137                           intcon	equ	0xFF2
 22138                           intcon2	equ	0xFF1
 22139                           intcon3	equ	0xFF0
 22140                           indf0	equ	0xFEF
 22141                           postinc0	equ	0xFEE
 22142                           fsr0h	equ	0xFEA
 22143                           fsr0l	equ	0xFE9
 22144                           wreg	equ	0xFE8
 22145                           postdec1	equ	0xFE5
 22146                           fsr1h	equ	0xFE2
 22147                           fsr1l	equ	0xFE1
 22148                           indf2	equ	0xFDF
 22149                           postinc2	equ	0xFDE
 22150                           postdec2	equ	0xFDD
 22151                           fsr2h	equ	0xFDA
 22152                           fsr2l	equ	0xFD9
 22153                           status	equ	0xFD8
 22154                           
 22155 ;; *************** function _change_state_to_menu_23 *****************
 22156 ;; Defined at:
 22157 ;;		line 509 in file "UI.c"
 22158 ;; Parameters:    Size  Location     Type
 22159 ;;		None
 22160 ;; Auto vars:     Size  Location     Type
 22161 ;;		None
 22162 ;; Return value:  Size  Location     Type
 22163 ;;                  1    wreg      void 
 22164 ;; Registers used:
 22165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22166 ;; Tracked objects:
 22167 ;;		On entry : 0/0
 22168 ;;		On exit  : 0/0
 22169 ;;		Unchanged: 0/0
 22170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22175 ;;Total ram usage:        0 bytes
 22176 ;; Hardware stack levels used:    1
 22177 ;; Hardware stack levels required when called:    3
 22178 ;; This function calls:
 22179 ;;		i2_lcdInst
 22180 ;;		i2_printf
 22181 ;; This function is called by:
 22182 ;;		_updateMenu
 22183 ;;		_inputHandler
 22184 ;; This function uses a non-reentrant model
 22185 ;;
 22186                           
 22187                           	psect	text74
 22188  0057DC                     __ptext74:
 22189                           	opt stack 0
 22190  0057DC                     _change_state_to_menu_23:
 22191                           	opt stack 18
 22192                           
 22193                           ;UI.c: 510: cur_state = 23;
 22194                           
 22195                           ;incstack = 0
 22196  0057DC  0E00               	movlw	0
 22197  0057DE  0100               	movlb	0	; () banked
 22198  0057E0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22199  0057E2  0E17               	movlw	23
 22200  0057E4  6FE6               	movwf	_cur_state& (0+255),b
 22201                           
 22202                           ; BSR set to: 0
 22203                           ;UI.c: 512: lcdInst(0b10000000);;
 22204  0057E6  0E80               	movlw	128
 22205  0057E8  ECFD  F02D         	call	i2_lcdInst
 22206                           
 22207                           ;UI.c: 513: printf("2. SORT         ");
 22208  0057EC  0E0D               	movlw	low STR_32
 22209  0057EE  6E0D               	movwf	i2printf@f,c
 22210  0057F0  0EFD               	movlw	high STR_32
 22211  0057F2  6E0E               	movwf	i2printf@f+1,c
 22212  0057F4  EC00  F012         	call	i2_printf	;wreg free
 22213                           
 22214                           ;UI.c: 514: lcdInst(0b11000000);;
 22215  0057F8  0EC0               	movlw	192
 22216  0057FA  ECFD  F02D         	call	i2_lcdInst
 22217                           
 22218                           ;UI.c: 515: printf("3. LOGS        <");
 22219  0057FE  0EA6               	movlw	low STR_38
 22220  005800  6E0D               	movwf	i2printf@f,c
 22221  005802  0EFD               	movlw	high STR_38
 22222  005804  6E0E               	movwf	i2printf@f+1,c
 22223  005806  EC00  F012         	call	i2_printf	;wreg free
 22224  00580A  0012               	return		;funcret
 22225  00580C                     __end_of_change_state_to_menu_23:
 22226                           	opt stack 0
 22227                           pclatu	equ	0xFFB
 22228                           pclath	equ	0xFFA
 22229                           tblptru	equ	0xFF8
 22230                           tblptrh	equ	0xFF7
 22231                           tblptrl	equ	0xFF6
 22232                           tablat	equ	0xFF5
 22233                           prodh	equ	0xFF4
 22234                           prodl	equ	0xFF3
 22235                           intcon	equ	0xFF2
 22236                           intcon2	equ	0xFF1
 22237                           intcon3	equ	0xFF0
 22238                           indf0	equ	0xFEF
 22239                           postinc0	equ	0xFEE
 22240                           fsr0h	equ	0xFEA
 22241                           fsr0l	equ	0xFE9
 22242                           wreg	equ	0xFE8
 22243                           postdec1	equ	0xFE5
 22244                           fsr1h	equ	0xFE2
 22245                           fsr1l	equ	0xFE1
 22246                           indf2	equ	0xFDF
 22247                           postinc2	equ	0xFDE
 22248                           postdec2	equ	0xFDD
 22249                           fsr2h	equ	0xFDA
 22250                           fsr2l	equ	0xFD9
 22251                           status	equ	0xFD8
 22252                           
 22253 ;; *************** function _change_state_to_menu_11 *****************
 22254 ;; Defined at:
 22255 ;;		line 485 in file "UI.c"
 22256 ;; Parameters:    Size  Location     Type
 22257 ;;		None
 22258 ;; Auto vars:     Size  Location     Type
 22259 ;;		None
 22260 ;; Return value:  Size  Location     Type
 22261 ;;                  1    wreg      void 
 22262 ;; Registers used:
 22263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22264 ;; Tracked objects:
 22265 ;;		On entry : 0/0
 22266 ;;		On exit  : 0/0
 22267 ;;		Unchanged: 0/0
 22268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22273 ;;Total ram usage:        0 bytes
 22274 ;; Hardware stack levels used:    1
 22275 ;; Hardware stack levels required when called:    3
 22276 ;; This function calls:
 22277 ;;		i2_lcdInst
 22278 ;;		i2_printf
 22279 ;; This function is called by:
 22280 ;;		_updateMenu
 22281 ;;		_inputHandler
 22282 ;; This function uses a non-reentrant model
 22283 ;;
 22284                           
 22285                           	psect	text75
 22286  00580C                     __ptext75:
 22287                           	opt stack 0
 22288  00580C                     _change_state_to_menu_11:
 22289                           	opt stack 18
 22290                           
 22291                           ;UI.c: 486: cur_state = 11;
 22292                           
 22293                           ;incstack = 0
 22294  00580C  0E00               	movlw	0
 22295  00580E  0100               	movlb	0	; () banked
 22296  005810  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22297  005812  0E0B               	movlw	11
 22298  005814  6FE6               	movwf	_cur_state& (0+255),b
 22299                           
 22300                           ; BSR set to: 0
 22301                           ;UI.c: 488: lcdInst(0b10000000);;
 22302  005816  0E80               	movlw	128
 22303  005818  ECFD  F02D         	call	i2_lcdInst
 22304                           
 22305                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22306  00581C  0EC8               	movlw	low STR_31
 22307  00581E  6E0D               	movwf	i2printf@f,c
 22308  005820  0EFD               	movlw	high STR_31
 22309  005822  6E0E               	movwf	i2printf@f+1,c
 22310  005824  EC00  F012         	call	i2_printf	;wreg free
 22311                           
 22312                           ;UI.c: 490: lcdInst(0b11000000);;
 22313  005828  0EC0               	movlw	192
 22314  00582A  ECFD  F02D         	call	i2_lcdInst
 22315                           
 22316                           ;UI.c: 491: printf("2. SORT         ");
 22317  00582E  0E0D               	movlw	low STR_32
 22318  005830  6E0D               	movwf	i2printf@f,c
 22319  005832  0EFD               	movlw	high STR_32
 22320  005834  6E0E               	movwf	i2printf@f+1,c
 22321  005836  EC00  F012         	call	i2_printf	;wreg free
 22322  00583A  0012               	return		;funcret
 22323  00583C                     __end_of_change_state_to_menu_11:
 22324                           	opt stack 0
 22325                           pclatu	equ	0xFFB
 22326                           pclath	equ	0xFFA
 22327                           tblptru	equ	0xFF8
 22328                           tblptrh	equ	0xFF7
 22329                           tblptrl	equ	0xFF6
 22330                           tablat	equ	0xFF5
 22331                           prodh	equ	0xFF4
 22332                           prodl	equ	0xFF3
 22333                           intcon	equ	0xFF2
 22334                           intcon2	equ	0xFF1
 22335                           intcon3	equ	0xFF0
 22336                           indf0	equ	0xFEF
 22337                           postinc0	equ	0xFEE
 22338                           fsr0h	equ	0xFEA
 22339                           fsr0l	equ	0xFE9
 22340                           wreg	equ	0xFE8
 22341                           postdec1	equ	0xFE5
 22342                           fsr1h	equ	0xFE2
 22343                           fsr1l	equ	0xFE1
 22344                           indf2	equ	0xFDF
 22345                           postinc2	equ	0xFDE
 22346                           postdec2	equ	0xFDD
 22347                           fsr2h	equ	0xFDA
 22348                           fsr2l	equ	0xFD9
 22349                           status	equ	0xFD8
 22350                           
 22351 ;; *************** function _change_state_to_logs_34 *****************
 22352 ;; Defined at:
 22353 ;;		line 552 in file "UI.c"
 22354 ;; Parameters:    Size  Location     Type
 22355 ;;		None
 22356 ;; Auto vars:     Size  Location     Type
 22357 ;;		None
 22358 ;; Return value:  Size  Location     Type
 22359 ;;                  1    wreg      void 
 22360 ;; Registers used:
 22361 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22362 ;; Tracked objects:
 22363 ;;		On entry : 0/0
 22364 ;;		On exit  : 0/0
 22365 ;;		Unchanged: 0/0
 22366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22371 ;;Total ram usage:        0 bytes
 22372 ;; Hardware stack levels used:    1
 22373 ;; Hardware stack levels required when called:    3
 22374 ;; This function calls:
 22375 ;;		i2_lcdInst
 22376 ;;		i2_printf
 22377 ;; This function is called by:
 22378 ;;		_updateMenu
 22379 ;;		_inputHandler
 22380 ;; This function uses a non-reentrant model
 22381 ;;
 22382                           
 22383                           	psect	text76
 22384  00583C                     __ptext76:
 22385                           	opt stack 0
 22386  00583C                     _change_state_to_logs_34:
 22387                           	opt stack 18
 22388                           
 22389                           ;UI.c: 553: cur_state = 1034;
 22390                           
 22391                           ;incstack = 0
 22392  00583C  0E04               	movlw	4
 22393  00583E  0100               	movlb	0	; () banked
 22394  005840  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22395  005842  0E0A               	movlw	10
 22396  005844  6FE6               	movwf	_cur_state& (0+255),b
 22397                           
 22398                           ; BSR set to: 0
 22399                           ;UI.c: 554: lcdInst(0b10000000);;
 22400  005846  0E80               	movlw	128
 22401  005848  ECFD  F02D         	call	i2_lcdInst
 22402                           
 22403                           ;UI.c: 555: printf("LOG 3           ");
 22404  00584C  0EDA               	movlw	low STR_44
 22405  00584E  6E0D               	movwf	i2printf@f,c
 22406  005850  0EFC               	movlw	high STR_44
 22407  005852  6E0E               	movwf	i2printf@f+1,c
 22408  005854  EC00  F012         	call	i2_printf	;wreg free
 22409                           
 22410                           ;UI.c: 556: lcdInst(0b11000000);;
 22411  005858  0EC0               	movlw	192
 22412  00585A  ECFD  F02D         	call	i2_lcdInst
 22413                           
 22414                           ;UI.c: 557: printf("LOG 4          <");
 22415  00585E  0E95               	movlw	low STR_50
 22416  005860  6E0D               	movwf	i2printf@f,c
 22417  005862  0EFD               	movlw	high STR_50
 22418  005864  6E0E               	movwf	i2printf@f+1,c
 22419  005866  EC00  F012         	call	i2_printf	;wreg free
 22420  00586A  0012               	return		;funcret
 22421  00586C                     __end_of_change_state_to_logs_34:
 22422                           	opt stack 0
 22423                           pclatu	equ	0xFFB
 22424                           pclath	equ	0xFFA
 22425                           tblptru	equ	0xFF8
 22426                           tblptrh	equ	0xFF7
 22427                           tblptrl	equ	0xFF6
 22428                           tablat	equ	0xFF5
 22429                           prodh	equ	0xFF4
 22430                           prodl	equ	0xFF3
 22431                           intcon	equ	0xFF2
 22432                           intcon2	equ	0xFF1
 22433                           intcon3	equ	0xFF0
 22434                           indf0	equ	0xFEF
 22435                           postinc0	equ	0xFEE
 22436                           fsr0h	equ	0xFEA
 22437                           fsr0l	equ	0xFE9
 22438                           wreg	equ	0xFE8
 22439                           postdec1	equ	0xFE5
 22440                           fsr1h	equ	0xFE2
 22441                           fsr1l	equ	0xFE1
 22442                           indf2	equ	0xFDF
 22443                           postinc2	equ	0xFDE
 22444                           postdec2	equ	0xFDD
 22445                           fsr2h	equ	0xFDA
 22446                           fsr2l	equ	0xFD9
 22447                           status	equ	0xFD8
 22448                           
 22449 ;; *************** function _change_state_to_logs_33 *****************
 22450 ;; Defined at:
 22451 ;;		line 545 in file "UI.c"
 22452 ;; Parameters:    Size  Location     Type
 22453 ;;		None
 22454 ;; Auto vars:     Size  Location     Type
 22455 ;;		None
 22456 ;; Return value:  Size  Location     Type
 22457 ;;                  1    wreg      void 
 22458 ;; Registers used:
 22459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22460 ;; Tracked objects:
 22461 ;;		On entry : 0/0
 22462 ;;		On exit  : 0/0
 22463 ;;		Unchanged: 0/0
 22464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22469 ;;Total ram usage:        0 bytes
 22470 ;; Hardware stack levels used:    1
 22471 ;; Hardware stack levels required when called:    3
 22472 ;; This function calls:
 22473 ;;		i2_lcdInst
 22474 ;;		i2_printf
 22475 ;; This function is called by:
 22476 ;;		_updateMenu
 22477 ;;		_inputHandler
 22478 ;; This function uses a non-reentrant model
 22479 ;;
 22480                           
 22481                           	psect	text77
 22482  00586C                     __ptext77:
 22483                           	opt stack 0
 22484  00586C                     _change_state_to_logs_33:
 22485                           	opt stack 18
 22486                           
 22487                           ;UI.c: 546: cur_state = 1033;
 22488                           
 22489                           ;incstack = 0
 22490  00586C  0E04               	movlw	4
 22491  00586E  0100               	movlb	0	; () banked
 22492  005870  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22493  005872  0E09               	movlw	9
 22494  005874  6FE6               	movwf	_cur_state& (0+255),b
 22495                           
 22496                           ; BSR set to: 0
 22497                           ;UI.c: 547: lcdInst(0b10000000);;
 22498  005876  0E80               	movlw	128
 22499  005878  ECFD  F02D         	call	i2_lcdInst
 22500                           
 22501                           ;UI.c: 548: printf("LOG 3          <");
 22502  00587C  0E84               	movlw	low STR_46
 22503  00587E  6E0D               	movwf	i2printf@f,c
 22504  005880  0EFD               	movlw	high STR_46
 22505  005882  6E0E               	movwf	i2printf@f+1,c
 22506  005884  EC00  F012         	call	i2_printf	;wreg free
 22507                           
 22508                           ;UI.c: 549: lcdInst(0b11000000);;
 22509  005888  0EC0               	movlw	192
 22510  00588A  ECFD  F02D         	call	i2_lcdInst
 22511                           
 22512                           ;UI.c: 550: printf("LOG 4           ");
 22513  00588E  0EEB               	movlw	low STR_48
 22514  005890  6E0D               	movwf	i2printf@f,c
 22515  005892  0EFC               	movlw	high STR_48
 22516  005894  6E0E               	movwf	i2printf@f+1,c
 22517  005896  EC00  F012         	call	i2_printf	;wreg free
 22518  00589A  0012               	return		;funcret
 22519  00589C                     __end_of_change_state_to_logs_33:
 22520                           	opt stack 0
 22521                           pclatu	equ	0xFFB
 22522                           pclath	equ	0xFFA
 22523                           tblptru	equ	0xFF8
 22524                           tblptrh	equ	0xFF7
 22525                           tblptrl	equ	0xFF6
 22526                           tablat	equ	0xFF5
 22527                           prodh	equ	0xFF4
 22528                           prodl	equ	0xFF3
 22529                           intcon	equ	0xFF2
 22530                           intcon2	equ	0xFF1
 22531                           intcon3	equ	0xFF0
 22532                           indf0	equ	0xFEF
 22533                           postinc0	equ	0xFEE
 22534                           fsr0h	equ	0xFEA
 22535                           fsr0l	equ	0xFE9
 22536                           wreg	equ	0xFE8
 22537                           postdec1	equ	0xFE5
 22538                           fsr1h	equ	0xFE2
 22539                           fsr1l	equ	0xFE1
 22540                           indf2	equ	0xFDF
 22541                           postinc2	equ	0xFDE
 22542                           postdec2	equ	0xFDD
 22543                           fsr2h	equ	0xFDA
 22544                           fsr2l	equ	0xFD9
 22545                           status	equ	0xFD8
 22546                           
 22547 ;; *************** function _change_state_to_logs_23 *****************
 22548 ;; Defined at:
 22549 ;;		line 538 in file "UI.c"
 22550 ;; Parameters:    Size  Location     Type
 22551 ;;		None
 22552 ;; Auto vars:     Size  Location     Type
 22553 ;;		None
 22554 ;; Return value:  Size  Location     Type
 22555 ;;                  1    wreg      void 
 22556 ;; Registers used:
 22557 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22558 ;; Tracked objects:
 22559 ;;		On entry : 0/0
 22560 ;;		On exit  : 0/0
 22561 ;;		Unchanged: 0/0
 22562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22567 ;;Total ram usage:        0 bytes
 22568 ;; Hardware stack levels used:    1
 22569 ;; Hardware stack levels required when called:    3
 22570 ;; This function calls:
 22571 ;;		i2_lcdInst
 22572 ;;		i2_printf
 22573 ;; This function is called by:
 22574 ;;		_updateMenu
 22575 ;;		_inputHandler
 22576 ;; This function uses a non-reentrant model
 22577 ;;
 22578                           
 22579                           	psect	text78
 22580  00595A                     __ptext78:
 22581                           	opt stack 0
 22582  00595A                     _change_state_to_logs_23:
 22583                           	opt stack 18
 22584                           
 22585                           ;UI.c: 539: cur_state = 1023;
 22586                           
 22587                           ;incstack = 0
 22588  00595A  0E03               	movlw	3
 22589  00595C  0100               	movlb	0	; () banked
 22590  00595E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22591  005960  69E6               	setf	_cur_state& (0+255),b
 22592                           
 22593                           ; BSR set to: 0
 22594                           ;UI.c: 540: lcdInst(0b10000000);;
 22595  005962  0E80               	movlw	128
 22596  005964  ECFD  F02D         	call	i2_lcdInst
 22597                           
 22598                           ;UI.c: 541: printf("LOG 2           ");
 22599  005968  0EC9               	movlw	low STR_40
 22600  00596A  6E0D               	movwf	i2printf@f,c
 22601  00596C  0EFC               	movlw	high STR_40
 22602  00596E  6E0E               	movwf	i2printf@f+1,c
 22603  005970  EC00  F012         	call	i2_printf	;wreg free
 22604                           
 22605                           ;UI.c: 542: lcdInst(0b11000000);;
 22606  005974  0EC0               	movlw	192
 22607  005976  ECFD  F02D         	call	i2_lcdInst
 22608                           
 22609                           ;UI.c: 543: printf("LOG 3          <");
 22610  00597A  0E84               	movlw	low STR_46
 22611  00597C  6E0D               	movwf	i2printf@f,c
 22612  00597E  0EFD               	movlw	high STR_46
 22613  005980  6E0E               	movwf	i2printf@f+1,c
 22614  005982  EC00  F012         	call	i2_printf	;wreg free
 22615  005986  0012               	return		;funcret
 22616  005988                     __end_of_change_state_to_logs_23:
 22617                           	opt stack 0
 22618                           pclatu	equ	0xFFB
 22619                           pclath	equ	0xFFA
 22620                           tblptru	equ	0xFF8
 22621                           tblptrh	equ	0xFF7
 22622                           tblptrl	equ	0xFF6
 22623                           tablat	equ	0xFF5
 22624                           prodh	equ	0xFF4
 22625                           prodl	equ	0xFF3
 22626                           intcon	equ	0xFF2
 22627                           intcon2	equ	0xFF1
 22628                           intcon3	equ	0xFF0
 22629                           indf0	equ	0xFEF
 22630                           postinc0	equ	0xFEE
 22631                           fsr0h	equ	0xFEA
 22632                           fsr0l	equ	0xFE9
 22633                           wreg	equ	0xFE8
 22634                           postdec1	equ	0xFE5
 22635                           fsr1h	equ	0xFE2
 22636                           fsr1l	equ	0xFE1
 22637                           indf2	equ	0xFDF
 22638                           postinc2	equ	0xFDE
 22639                           postdec2	equ	0xFDD
 22640                           fsr2h	equ	0xFDA
 22641                           fsr2l	equ	0xFD9
 22642                           status	equ	0xFD8
 22643                           
 22644 ;; *************** function _change_state_to_logs_22 *****************
 22645 ;; Defined at:
 22646 ;;		line 531 in file "UI.c"
 22647 ;; Parameters:    Size  Location     Type
 22648 ;;		None
 22649 ;; Auto vars:     Size  Location     Type
 22650 ;;		None
 22651 ;; Return value:  Size  Location     Type
 22652 ;;                  1    wreg      void 
 22653 ;; Registers used:
 22654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22655 ;; Tracked objects:
 22656 ;;		On entry : 0/0
 22657 ;;		On exit  : 0/0
 22658 ;;		Unchanged: 0/0
 22659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22664 ;;Total ram usage:        0 bytes
 22665 ;; Hardware stack levels used:    1
 22666 ;; Hardware stack levels required when called:    3
 22667 ;; This function calls:
 22668 ;;		i2_lcdInst
 22669 ;;		i2_printf
 22670 ;; This function is called by:
 22671 ;;		_updateMenu
 22672 ;;		_inputHandler
 22673 ;; This function uses a non-reentrant model
 22674 ;;
 22675                           
 22676                           	psect	text79
 22677  00589C                     __ptext79:
 22678                           	opt stack 0
 22679  00589C                     _change_state_to_logs_22:
 22680                           	opt stack 18
 22681                           
 22682                           ;UI.c: 532: cur_state = 1022;
 22683                           
 22684                           ;incstack = 0
 22685  00589C  0E03               	movlw	3
 22686  00589E  0100               	movlb	0	; () banked
 22687  0058A0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22688  0058A2  0EFE               	movlw	254
 22689  0058A4  6FE6               	movwf	_cur_state& (0+255),b
 22690                           
 22691                           ; BSR set to: 0
 22692                           ;UI.c: 533: lcdInst(0b10000000);;
 22693  0058A6  0E80               	movlw	128
 22694  0058A8  ECFD  F02D         	call	i2_lcdInst
 22695                           
 22696                           ;UI.c: 534: printf("LOG 2          <");
 22697  0058AC  0E73               	movlw	low STR_42
 22698  0058AE  6E0D               	movwf	i2printf@f,c
 22699  0058B0  0EFD               	movlw	high STR_42
 22700  0058B2  6E0E               	movwf	i2printf@f+1,c
 22701  0058B4  EC00  F012         	call	i2_printf	;wreg free
 22702                           
 22703                           ;UI.c: 535: lcdInst(0b11000000);;
 22704  0058B8  0EC0               	movlw	192
 22705  0058BA  ECFD  F02D         	call	i2_lcdInst
 22706                           
 22707                           ;UI.c: 536: printf("LOG 3           ");
 22708  0058BE  0EDA               	movlw	low STR_44
 22709  0058C0  6E0D               	movwf	i2printf@f,c
 22710  0058C2  0EFC               	movlw	high STR_44
 22711  0058C4  6E0E               	movwf	i2printf@f+1,c
 22712  0058C6  EC00  F012         	call	i2_printf	;wreg free
 22713  0058CA  0012               	return		;funcret
 22714  0058CC                     __end_of_change_state_to_logs_22:
 22715                           	opt stack 0
 22716                           pclatu	equ	0xFFB
 22717                           pclath	equ	0xFFA
 22718                           tblptru	equ	0xFF8
 22719                           tblptrh	equ	0xFF7
 22720                           tblptrl	equ	0xFF6
 22721                           tablat	equ	0xFF5
 22722                           prodh	equ	0xFF4
 22723                           prodl	equ	0xFF3
 22724                           intcon	equ	0xFF2
 22725                           intcon2	equ	0xFF1
 22726                           intcon3	equ	0xFF0
 22727                           indf0	equ	0xFEF
 22728                           postinc0	equ	0xFEE
 22729                           fsr0h	equ	0xFEA
 22730                           fsr0l	equ	0xFE9
 22731                           wreg	equ	0xFE8
 22732                           postdec1	equ	0xFE5
 22733                           fsr1h	equ	0xFE2
 22734                           fsr1l	equ	0xFE1
 22735                           indf2	equ	0xFDF
 22736                           postinc2	equ	0xFDE
 22737                           postdec2	equ	0xFDD
 22738                           fsr2h	equ	0xFDA
 22739                           fsr2l	equ	0xFD9
 22740                           status	equ	0xFD8
 22741                           
 22742 ;; *************** function _change_state_to_logs_12 *****************
 22743 ;; Defined at:
 22744 ;;		line 524 in file "UI.c"
 22745 ;; Parameters:    Size  Location     Type
 22746 ;;		None
 22747 ;; Auto vars:     Size  Location     Type
 22748 ;;		None
 22749 ;; Return value:  Size  Location     Type
 22750 ;;                  1    wreg      void 
 22751 ;; Registers used:
 22752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22753 ;; Tracked objects:
 22754 ;;		On entry : 0/0
 22755 ;;		On exit  : 0/0
 22756 ;;		Unchanged: 0/0
 22757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22762 ;;Total ram usage:        0 bytes
 22763 ;; Hardware stack levels used:    1
 22764 ;; Hardware stack levels required when called:    3
 22765 ;; This function calls:
 22766 ;;		i2_lcdInst
 22767 ;;		i2_printf
 22768 ;; This function is called by:
 22769 ;;		_updateMenu
 22770 ;;		_inputHandler
 22771 ;; This function uses a non-reentrant model
 22772 ;;
 22773                           
 22774                           	psect	text80
 22775  0058CC                     __ptext80:
 22776                           	opt stack 0
 22777  0058CC                     _change_state_to_logs_12:
 22778                           	opt stack 18
 22779                           
 22780                           ;UI.c: 525: cur_state = 1012;
 22781                           
 22782                           ;incstack = 0
 22783  0058CC  0E03               	movlw	3
 22784  0058CE  0100               	movlb	0	; () banked
 22785  0058D0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22786  0058D2  0EF4               	movlw	244
 22787  0058D4  6FE6               	movwf	_cur_state& (0+255),b
 22788                           
 22789                           ; BSR set to: 0
 22790                           ;UI.c: 526: lcdInst(0b10000000);;
 22791  0058D6  0E80               	movlw	128
 22792  0058D8  ECFD  F02D         	call	i2_lcdInst
 22793                           
 22794                           ;UI.c: 527: printf("LOG 1           ");
 22795  0058DC  0EB8               	movlw	low STR_41
 22796  0058DE  6E0D               	movwf	i2printf@f,c
 22797  0058E0  0EFC               	movlw	high STR_41
 22798  0058E2  6E0E               	movwf	i2printf@f+1,c
 22799  0058E4  EC00  F012         	call	i2_printf	;wreg free
 22800                           
 22801                           ;UI.c: 528: lcdInst(0b11000000);;
 22802  0058E8  0EC0               	movlw	192
 22803  0058EA  ECFD  F02D         	call	i2_lcdInst
 22804                           
 22805                           ;UI.c: 529: printf("LOG 2          <");
 22806  0058EE  0E73               	movlw	low STR_42
 22807  0058F0  6E0D               	movwf	i2printf@f,c
 22808  0058F2  0EFD               	movlw	high STR_42
 22809  0058F4  6E0E               	movwf	i2printf@f+1,c
 22810  0058F6  EC00  F012         	call	i2_printf	;wreg free
 22811  0058FA  0012               	return		;funcret
 22812  0058FC                     __end_of_change_state_to_logs_12:
 22813                           	opt stack 0
 22814                           pclatu	equ	0xFFB
 22815                           pclath	equ	0xFFA
 22816                           tblptru	equ	0xFF8
 22817                           tblptrh	equ	0xFF7
 22818                           tblptrl	equ	0xFF6
 22819                           tablat	equ	0xFF5
 22820                           prodh	equ	0xFF4
 22821                           prodl	equ	0xFF3
 22822                           intcon	equ	0xFF2
 22823                           intcon2	equ	0xFF1
 22824                           intcon3	equ	0xFF0
 22825                           indf0	equ	0xFEF
 22826                           postinc0	equ	0xFEE
 22827                           fsr0h	equ	0xFEA
 22828                           fsr0l	equ	0xFE9
 22829                           wreg	equ	0xFE8
 22830                           postdec1	equ	0xFE5
 22831                           fsr1h	equ	0xFE2
 22832                           fsr1l	equ	0xFE1
 22833                           indf2	equ	0xFDF
 22834                           postinc2	equ	0xFDE
 22835                           postdec2	equ	0xFDD
 22836                           fsr2h	equ	0xFDA
 22837                           fsr2l	equ	0xFD9
 22838                           status	equ	0xFD8
 22839                           
 22840 ;; *************** function _change_state_to_logs_11 *****************
 22841 ;; Defined at:
 22842 ;;		line 517 in file "UI.c"
 22843 ;; Parameters:    Size  Location     Type
 22844 ;;		None
 22845 ;; Auto vars:     Size  Location     Type
 22846 ;;		None
 22847 ;; Return value:  Size  Location     Type
 22848 ;;                  1    wreg      void 
 22849 ;; Registers used:
 22850 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22851 ;; Tracked objects:
 22852 ;;		On entry : 0/0
 22853 ;;		On exit  : 0/0
 22854 ;;		Unchanged: 0/0
 22855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22860 ;;Total ram usage:        0 bytes
 22861 ;; Hardware stack levels used:    1
 22862 ;; Hardware stack levels required when called:    3
 22863 ;; This function calls:
 22864 ;;		i2_lcdInst
 22865 ;;		i2_printf
 22866 ;; This function is called by:
 22867 ;;		_updateMenu
 22868 ;;		_inputHandler
 22869 ;; This function uses a non-reentrant model
 22870 ;;
 22871                           
 22872                           	psect	text81
 22873  0058FC                     __ptext81:
 22874                           	opt stack 0
 22875  0058FC                     _change_state_to_logs_11:
 22876                           	opt stack 18
 22877                           
 22878                           ;UI.c: 518: cur_state = 1011;
 22879                           
 22880                           ;incstack = 0
 22881  0058FC  0E03               	movlw	3
 22882  0058FE  0100               	movlb	0	; () banked
 22883  005900  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22884  005902  0EF3               	movlw	243
 22885  005904  6FE6               	movwf	_cur_state& (0+255),b
 22886                           
 22887                           ; BSR set to: 0
 22888                           ;UI.c: 519: lcdInst(0b10000000);;
 22889  005906  0E80               	movlw	128
 22890  005908  ECFD  F02D         	call	i2_lcdInst
 22891                           
 22892                           ;UI.c: 520: printf("LOG 1          <");
 22893  00590C  0E62               	movlw	low STR_39
 22894  00590E  6E0D               	movwf	i2printf@f,c
 22895  005910  0EFD               	movlw	high STR_39
 22896  005912  6E0E               	movwf	i2printf@f+1,c
 22897  005914  EC00  F012         	call	i2_printf	;wreg free
 22898                           
 22899                           ;UI.c: 521: lcdInst(0b11000000);;
 22900  005918  0EC0               	movlw	192
 22901  00591A  ECFD  F02D         	call	i2_lcdInst
 22902                           
 22903                           ;UI.c: 522: printf("LOG 2           ");
 22904  00591E  0EC9               	movlw	low STR_40
 22905  005920  6E0D               	movwf	i2printf@f,c
 22906  005922  0EFC               	movlw	high STR_40
 22907  005924  6E0E               	movwf	i2printf@f+1,c
 22908  005926  EC00  F012         	call	i2_printf	;wreg free
 22909  00592A  0012               	return		;funcret
 22910  00592C                     __end_of_change_state_to_logs_11:
 22911                           	opt stack 0
 22912                           pclatu	equ	0xFFB
 22913                           pclath	equ	0xFFA
 22914                           tblptru	equ	0xFF8
 22915                           tblptrh	equ	0xFF7
 22916                           tblptrl	equ	0xFF6
 22917                           tablat	equ	0xFF5
 22918                           prodh	equ	0xFF4
 22919                           prodl	equ	0xFF3
 22920                           intcon	equ	0xFF2
 22921                           intcon2	equ	0xFF1
 22922                           intcon3	equ	0xFF0
 22923                           indf0	equ	0xFEF
 22924                           postinc0	equ	0xFEE
 22925                           fsr0h	equ	0xFEA
 22926                           fsr0l	equ	0xFE9
 22927                           wreg	equ	0xFE8
 22928                           postdec1	equ	0xFE5
 22929                           fsr1h	equ	0xFE2
 22930                           fsr1l	equ	0xFE1
 22931                           indf2	equ	0xFDF
 22932                           postinc2	equ	0xFDE
 22933                           postdec2	equ	0xFDD
 22934                           fsr2h	equ	0xFDA
 22935                           fsr2l	equ	0xFD9
 22936                           status	equ	0xFD8
 22937                           
 22938 ;; *************** function _dispLogs *****************
 22939 ;; Defined at:
 22940 ;;		line 470 in file "UI.c"
 22941 ;; Parameters:    Size  Location     Type
 22942 ;;  myLog           2   17[COMRAM] int 
 22943 ;; Auto vars:     Size  Location     Type
 22944 ;;		None
 22945 ;; Return value:  Size  Location     Type
 22946 ;;                  1    wreg      void 
 22947 ;; Registers used:
 22948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22949 ;; Tracked objects:
 22950 ;;		On entry : 0/0
 22951 ;;		On exit  : 0/0
 22952 ;;		Unchanged: 0/0
 22953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22954 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22957 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22958 ;;Total ram usage:        2 bytes
 22959 ;; Hardware stack levels used:    1
 22960 ;; Hardware stack levels required when called:    2
 22961 ;; This function calls:
 22962 ;;		_retrieveLog
 22963 ;; This function is called by:
 22964 ;;		_updateMenu
 22965 ;; This function uses a non-reentrant model
 22966 ;;
 22967                           
 22968                           	psect	text82
 22969  005AA6                     __ptext82:
 22970                           	opt stack 0
 22971  005AA6                     _dispLogs:
 22972                           	opt stack 20
 22973                           
 22974                           ;UI.c: 471: logstate = 1;
 22975                           
 22976                           ;incstack = 0
 22977  005AA6  0E00               	movlw	0
 22978  005AA8  0100               	movlb	0	; () banked
 22979  005AAA  6FF9               	movwf	(_logstate+1)& (0+255),b
 22980  005AAC  0E01               	movlw	1
 22981  005AAE  6FF8               	movwf	_logstate& (0+255),b
 22982                           
 22983                           ; BSR set to: 0
 22984                           ;UI.c: 472: log = myLog;
 22985  005AB0  C012  F0F0         	movff	dispLogs@myLog,_log
 22986  005AB4  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 22987                           
 22988                           ; BSR set to: 0
 22989                           ;UI.c: 473: retrieveLog(myLog - 1);
 22990  005AB8  0EFF               	movlw	255
 22991  005ABA  2412               	addwf	dispLogs@myLog,w,c
 22992  005ABC  6E07               	movwf	retrieveLog@logNum,c
 22993  005ABE  0EFF               	movlw	255
 22994  005AC0  2013               	addwfc	dispLogs@myLog+1,w,c
 22995  005AC2  6E08               	movwf	retrieveLog@logNum+1,c
 22996  005AC4  EC4D  F020         	call	_retrieveLog	;wreg free
 22997  005AC8  0012               	return		;funcret
 22998  005ACA                     __end_of_dispLogs:
 22999                           	opt stack 0
 23000                           pclatu	equ	0xFFB
 23001                           pclath	equ	0xFFA
 23002                           tblptru	equ	0xFF8
 23003                           tblptrh	equ	0xFF7
 23004                           tblptrl	equ	0xFF6
 23005                           tablat	equ	0xFF5
 23006                           prodh	equ	0xFF4
 23007                           prodl	equ	0xFF3
 23008                           intcon	equ	0xFF2
 23009                           intcon2	equ	0xFF1
 23010                           intcon3	equ	0xFF0
 23011                           indf0	equ	0xFEF
 23012                           postinc0	equ	0xFEE
 23013                           fsr0h	equ	0xFEA
 23014                           fsr0l	equ	0xFE9
 23015                           wreg	equ	0xFE8
 23016                           postdec1	equ	0xFE5
 23017                           fsr1h	equ	0xFE2
 23018                           fsr1l	equ	0xFE1
 23019                           indf2	equ	0xFDF
 23020                           postinc2	equ	0xFDE
 23021                           postdec2	equ	0xFDD
 23022                           fsr2h	equ	0xFDA
 23023                           fsr2l	equ	0xFD9
 23024                           status	equ	0xFD8
 23025                           
 23026 ;; *************** function _retrieveLog *****************
 23027 ;; Defined at:
 23028 ;;		line 138 in file "EEPROM.c"
 23029 ;; Parameters:    Size  Location     Type
 23030 ;;  logNum          2    6[COMRAM] int 
 23031 ;; Auto vars:     Size  Location     Type
 23032 ;;  i               2   13[COMRAM] int 
 23033 ;;  addr            2   15[COMRAM] unsigned short 
 23034 ;;  byte3           1   12[COMRAM] unsigned char 
 23035 ;;  byte2           1   11[COMRAM] unsigned char 
 23036 ;;  byte1           1   10[COMRAM] unsigned char 
 23037 ;; Return value:  Size  Location     Type
 23038 ;;                  1    wreg      void 
 23039 ;; Registers used:
 23040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23041 ;; Tracked objects:
 23042 ;;		On entry : 0/0
 23043 ;;		On exit  : 0/0
 23044 ;;		Unchanged: 0/0
 23045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23046 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23047 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23048 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23049 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23050 ;;Total ram usage:       11 bytes
 23051 ;; Hardware stack levels used:    1
 23052 ;; Hardware stack levels required when called:    1
 23053 ;; This function calls:
 23054 ;;		i2_EEPROM_read
 23055 ;;		i2___wmul
 23056 ;; This function is called by:
 23057 ;;		_dispLogs
 23058 ;; This function uses a non-reentrant model
 23059 ;;
 23060                           
 23061                           	psect	text83
 23062  00409A                     __ptext83:
 23063                           	opt stack 0
 23064  00409A                     _retrieveLog:
 23065                           	opt stack 20
 23066                           
 23067                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23068                           
 23069                           ;incstack = 0
 23070  00409A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23071  00409E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23072  0040A2  0E00               	movlw	0
 23073  0040A4  6E04               	movwf	i2___wmul@multiplicand+1,c
 23074  0040A6  0E0B               	movlw	11
 23075  0040A8  6E03               	movwf	i2___wmul@multiplicand,c
 23076  0040AA  EC2D  F02D         	call	i2___wmul	;wreg free
 23077  0040AE  0E01               	movlw	1
 23078  0040B0  2401               	addwf	?i2___wmul,w,c
 23079  0040B2  6E10               	movwf	retrieveLog@addr,c
 23080  0040B4  0E00               	movlw	0
 23081  0040B6  2002               	addwfc	?i2___wmul+1,w,c
 23082  0040B8  6E11               	movwf	retrieveLog@addr+1,c
 23083                           
 23084                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23085  0040BA  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23086  0040BE  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23087  0040C2  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23088  0040C6  6E0B               	movwf	retrieveLog@byte1,c
 23089                           
 23090                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23091  0040C8  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23092  0040CC  0E80               	movlw	128
 23093  0040CE  1609               	andwf	??_retrieveLog,f,c
 23094  0040D0  5009               	movf	??_retrieveLog,w,c
 23095  0040D2  0100               	movlb	0	; () banked
 23096  0040D4  6FF2               	movwf	_log_completion& (0+255),b
 23097  0040D6  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23098                           
 23099                           ; BSR set to: 0
 23100                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23101  0040D8  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23102  0040DC  0E0F               	movlw	15
 23103  0040DE  1609               	andwf	??_retrieveLog,f,c
 23104  0040E0  5009               	movf	??_retrieveLog,w,c
 23105  0040E2  0101               	movlb	1	; () banked
 23106  0040E4  6F45               	movwf	_log_count_total& (0+255),b
 23107  0040E6  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23108                           
 23109                           ; BSR set to: 1
 23110                           ;EEPROM.c: 150: addr++;
 23111  0040E8  4A10               	infsnz	retrieveLog@addr,f,c
 23112  0040EA  2A11               	incf	retrieveLog@addr+1,f,c
 23113                           
 23114                           ; BSR set to: 1
 23115                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23116  0040EC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23117  0040F0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23118  0040F4  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23119  0040F8  6E0C               	movwf	retrieveLog@byte2,c
 23120                           
 23121                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23122  0040FA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23123  0040FE  3A09               	swapf	??_retrieveLog,f,c
 23124  004100  0E0F               	movlw	15
 23125  004102  1609               	andwf	??_retrieveLog,f,c
 23126  004104  0E0F               	movlw	15
 23127  004106  1609               	andwf	??_retrieveLog,f,c
 23128  004108  5009               	movf	??_retrieveLog,w,c
 23129  00410A  0100               	movlb	0	; () banked
 23130  00410C  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23131  00410E  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23132                           
 23133                           ; BSR set to: 0
 23134                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23135  004110  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23136  004114  0E0F               	movlw	15
 23137  004116  1609               	andwf	??_retrieveLog,f,c
 23138  004118  5009               	movf	??_retrieveLog,w,c
 23139  00411A  6E67               	movwf	_log_count_pop_w_tab,c
 23140  00411C  6A68               	clrf	_log_count_pop_w_tab+1,c
 23141                           
 23142                           ; BSR set to: 0
 23143                           ;EEPROM.c: 156: addr++;
 23144  00411E  4A10               	infsnz	retrieveLog@addr,f,c
 23145  004120  2A11               	incf	retrieveLog@addr+1,f,c
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23149  004122  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23150  004126  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23151  00412A  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23152  00412E  6E0D               	movwf	retrieveLog@byte3,c
 23153                           
 23154                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23155  004130  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23156  004134  3A09               	swapf	??_retrieveLog,f,c
 23157  004136  0E0F               	movlw	15
 23158  004138  1609               	andwf	??_retrieveLog,f,c
 23159  00413A  0E0F               	movlw	15
 23160  00413C  1609               	andwf	??_retrieveLog,f,c
 23161  00413E  5009               	movf	??_retrieveLog,w,c
 23162  004140  6E65               	movwf	_log_count_can_w_lab,c
 23163  004142  6A66               	clrf	_log_count_can_w_lab+1,c
 23164                           
 23165                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23166  004144  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23167  004148  0E0F               	movlw	15
 23168  00414A  1609               	andwf	??_retrieveLog,f,c
 23169  00414C  5009               	movf	??_retrieveLog,w,c
 23170  00414E  6E63               	movwf	_log_count_can_no_lab,c
 23171  004150  6A64               	clrf	_log_count_can_no_lab+1,c
 23172                           
 23173                           ;EEPROM.c: 160: addr++;
 23174  004152  4A10               	infsnz	retrieveLog@addr,f,c
 23175  004154  2A11               	incf	retrieveLog@addr+1,f,c
 23176                           
 23177                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23178  004156  0E00               	movlw	0
 23179  004158  6E0F               	movwf	retrieveLog@i+1,c
 23180  00415A  0E00               	movlw	0
 23181  00415C  6E0E               	movwf	retrieveLog@i,c
 23182  00415E                     i2l7288:
 23183  00415E  BE0F               	btfsc	retrieveLog@i+1,7,c
 23184  004160  D006               	goto	i2l7292
 23185  004162  500F               	movf	retrieveLog@i+1,w,c
 23186  004164  E11E               	bnz	i2l7300
 23187  004166  0E07               	movlw	7
 23188  004168  5C0E               	subwf	retrieveLog@i,w,c
 23189  00416A  B0D8               	btfsc	status,0,c
 23190  00416C  D01A               	goto	i2l7300
 23191  00416E                     i2l7292:
 23192                           
 23193                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23194  00416E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23195  004172  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23196  004176  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23197  00417A  6E09               	movwf	??_retrieveLog& (0+255),c
 23198  00417C  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23199  00417E  90D8               	bcf	status,0,c
 23200  004180  340E               	rlcf	retrieveLog@i,w,c
 23201  004182  6ED9               	movwf	fsr2l,c
 23202  004184  340F               	rlcf	retrieveLog@i+1,w,c
 23203  004186  6EDA               	movwf	fsr2h,c
 23204  004188  0E00               	movlw	low _log_startTime
 23205  00418A  26D9               	addwf	fsr2l,f,c
 23206  00418C  0E01               	movlw	high _log_startTime
 23207  00418E  22DA               	addwfc	fsr2h,f,c
 23208  004190  C009  FFDE         	movff	??_retrieveLog,postinc2
 23209  004194  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23210                           
 23211                           ;EEPROM.c: 165: addr++;
 23212  004198  4A10               	infsnz	retrieveLog@addr,f,c
 23213  00419A  2A11               	incf	retrieveLog@addr+1,f,c
 23214  00419C  4A0E               	infsnz	retrieveLog@i,f,c
 23215  00419E  2A0F               	incf	retrieveLog@i+1,f,c
 23216  0041A0  D7DE               	goto	i2l7288
 23217  0041A2                     i2l7300:
 23218                           
 23219                           ;EEPROM.c: 166: }
 23220                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23221  0041A2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23222  0041A6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23223  0041AA  ECC9  F02D         	call	i2_EEPROM_read	;wreg free
 23224  0041AE  6E09               	movwf	??_retrieveLog& (0+255),c
 23225  0041B0  5009               	movf	??_retrieveLog,w,c
 23226  0041B2  0100               	movlb	0	; () banked
 23227  0041B4  6FF6               	movwf	_log_total_time& (0+255),b
 23228  0041B6  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23229                           
 23230                           ; BSR set to: 0
 23231  0041B8  0012               	return		;funcret
 23232  0041BA                     __end_of_retrieveLog:
 23233                           	opt stack 0
 23234                           pclatu	equ	0xFFB
 23235                           pclath	equ	0xFFA
 23236                           tblptru	equ	0xFF8
 23237                           tblptrh	equ	0xFF7
 23238                           tblptrl	equ	0xFF6
 23239                           tablat	equ	0xFF5
 23240                           prodh	equ	0xFF4
 23241                           prodl	equ	0xFF3
 23242                           intcon	equ	0xFF2
 23243                           intcon2	equ	0xFF1
 23244                           intcon3	equ	0xFF0
 23245                           indf0	equ	0xFEF
 23246                           postinc0	equ	0xFEE
 23247                           fsr0h	equ	0xFEA
 23248                           fsr0l	equ	0xFE9
 23249                           wreg	equ	0xFE8
 23250                           postdec1	equ	0xFE5
 23251                           fsr1h	equ	0xFE2
 23252                           fsr1l	equ	0xFE1
 23253                           indf2	equ	0xFDF
 23254                           postinc2	equ	0xFDE
 23255                           postdec2	equ	0xFDD
 23256                           fsr2h	equ	0xFDA
 23257                           fsr2l	equ	0xFD9
 23258                           status	equ	0xFD8
 23259                           
 23260 ;; *************** function i2_EEPROM_read *****************
 23261 ;; Defined at:
 23262 ;;		line 72 in file "EEPROM.c"
 23263 ;; Parameters:    Size  Location     Type
 23264 ;;  address         2    0[COMRAM] unsigned short 
 23265 ;; Auto vars:     Size  Location     Type
 23266 ;;		None
 23267 ;; Return value:  Size  Location     Type
 23268 ;;                  1    wreg      unsigned char 
 23269 ;; Registers used:
 23270 ;;		wreg, status,2
 23271 ;; Tracked objects:
 23272 ;;		On entry : 0/0
 23273 ;;		On exit  : 0/0
 23274 ;;		Unchanged: 0/0
 23275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23276 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23279 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23280 ;;Total ram usage:        2 bytes
 23281 ;; Hardware stack levels used:    1
 23282 ;; This function calls:
 23283 ;;		Nothing
 23284 ;; This function is called by:
 23285 ;;		_retrieveLog
 23286 ;; This function uses a non-reentrant model
 23287 ;;
 23288                           
 23289                           	psect	text84
 23290  005B92                     __ptext84:
 23291                           	opt stack 0
 23292  005B92                     i2_EEPROM_read:
 23293                           	opt stack 20
 23294                           
 23295                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23296                           
 23297                           ; BSR set to: 0
 23298                           ;incstack = 0
 23299  005B92  5002               	movf	i2EEPROM_read@address+1,w,c
 23300  005B94  6EAA               	movwf	4010,c	;volatile
 23301                           
 23302                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23303  005B96  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23304                           
 23305                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23306  005B9A  9EA6               	bcf	4006,7,c	;volatile
 23307                           
 23308                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23309  005B9C  9CA6               	bcf	4006,6,c	;volatile
 23310                           
 23311                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23312  005B9E  80A6               	bsf	4006,0,c	;volatile
 23313  005BA0                     i2l1134:
 23314  005BA0  B0A6               	btfsc	4006,0,c	;volatile
 23315  005BA2  D7FE               	goto	i2l1134
 23316                           
 23317                           ;EEPROM.c: 85: return EEDATA;
 23318  005BA4  50A8               	movf	4008,w,c	;volatile
 23319  005BA6  0012               	return	
 23320  005BA8                     __end_ofi2_EEPROM_read:
 23321                           	opt stack 0
 23322                           pclatu	equ	0xFFB
 23323                           pclath	equ	0xFFA
 23324                           tblptru	equ	0xFF8
 23325                           tblptrh	equ	0xFF7
 23326                           tblptrl	equ	0xFF6
 23327                           tablat	equ	0xFF5
 23328                           prodh	equ	0xFF4
 23329                           prodl	equ	0xFF3
 23330                           intcon	equ	0xFF2
 23331                           intcon2	equ	0xFF1
 23332                           intcon3	equ	0xFF0
 23333                           indf0	equ	0xFEF
 23334                           postinc0	equ	0xFEE
 23335                           fsr0h	equ	0xFEA
 23336                           fsr0l	equ	0xFE9
 23337                           wreg	equ	0xFE8
 23338                           postdec1	equ	0xFE5
 23339                           fsr1h	equ	0xFE2
 23340                           fsr1l	equ	0xFE1
 23341                           indf2	equ	0xFDF
 23342                           postinc2	equ	0xFDE
 23343                           postdec2	equ	0xFDD
 23344                           fsr2h	equ	0xFDA
 23345                           fsr2l	equ	0xFD9
 23346                           status	equ	0xFD8
 23347                           
 23348 ;; *************** function _updateArmState *****************
 23349 ;; Defined at:
 23350 ;;		line 634 in file "sort.c"
 23351 ;; Parameters:    Size  Location     Type
 23352 ;;		None
 23353 ;; Auto vars:     Size  Location     Type
 23354 ;;		None
 23355 ;; Return value:  Size  Location     Type
 23356 ;;                  1    wreg      void 
 23357 ;; Registers used:
 23358 ;;		wreg, status,2, status,0
 23359 ;; Tracked objects:
 23360 ;;		On entry : 0/0
 23361 ;;		On exit  : 0/0
 23362 ;;		Unchanged: 0/0
 23363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23367 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23368 ;;Total ram usage:        2 bytes
 23369 ;; Hardware stack levels used:    1
 23370 ;; This function calls:
 23371 ;;		Nothing
 23372 ;; This function is called by:
 23373 ;;		_handler
 23374 ;; This function uses a non-reentrant model
 23375 ;;
 23376                           
 23377                           	psect	text85
 23378  0055D2                     __ptext85:
 23379                           	opt stack 0
 23380  0055D2                     _updateArmState:
 23381                           	opt stack 23
 23382                           
 23383                           ;sort.c: 641: if(!was_low_2){
 23384                           
 23385                           ;incstack = 0
 23386  0055D2  5079               	movf	_was_low_2,w,c	;volatile
 23387  0055D4  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23388  0055D6  B4D8               	btfsc	status,2,c
 23389  0055D8  D007               	goto	i2l10098
 23390  0055DA  D016               	goto	i2l950
 23391  0055DC                     i2l10092:
 23392                           
 23393                           ;sort.c: 646: PR2 = 0x20;
 23394  0055DC  0E20               	movlw	32
 23395  0055DE  6ECB               	movwf	4043,c	;volatile
 23396                           
 23397                           ;sort.c: 647: break;
 23398  0055E0  0012               	return	
 23399  0055E2                     i2l10094:
 23400                           
 23401                           ;sort.c: 650: PR2 = 0x40;
 23402  0055E2  0E40               	movlw	64
 23403  0055E4  6ECB               	movwf	4043,c	;volatile
 23404                           
 23405                           ;sort.c: 652: }
 23406                           
 23407                           ;sort.c: 651: break;
 23408  0055E6  0012               	return	
 23409  0055E8                     i2l10098:
 23410  0055E8  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23411  0055EC  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23412                           
 23413                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23414                           ; Switch size 1, requested type "space"
 23415                           ; Number of cases is 1, Range of values is 0 to 0
 23416                           ; switch strategies available:
 23417                           ; Name         Instructions Cycles
 23418                           ; simple_byte            4     3 (average)
 23419                           ;	Chosen strategy is simple_byte
 23420  0055F0  5002               	movf	??_updateArmState+1,w,c
 23421  0055F2  0A00               	xorlw	0	; case 0
 23422  0055F4  A4D8               	btfss	status,2,c
 23423  0055F6  0012               	return	
 23424                           
 23425                           ; Switch size 1, requested type "space"
 23426                           ; Number of cases is 2, Range of values is 0 to 1
 23427                           ; switch strategies available:
 23428                           ; Name         Instructions Cycles
 23429                           ; simple_byte            7     4 (average)
 23430                           ;	Chosen strategy is simple_byte
 23431  0055F8  5001               	movf	??_updateArmState,w,c
 23432  0055FA  0A00               	xorlw	0	; case 0
 23433  0055FC  B4D8               	btfsc	status,2,c
 23434  0055FE  D7EE               	goto	i2l10092
 23435  005600  0A01               	xorlw	1	; case 1
 23436  005602  A4D8               	btfss	status,2,c
 23437                           
 23438                           ;sort.c: 653: }
 23439  005604  0012               	return	
 23440  005606  D7ED               	goto	i2l10094
 23441  005608                     i2l950:
 23442                           
 23443                           ;sort.c: 654: else{
 23444                           ;sort.c: 656: PR2 = 0xFF;
 23445  005608  68CB               	setf	4043,c	;volatile
 23446  00560A  0012               	return	
 23447  00560C                     __end_of_updateArmState:
 23448                           	opt stack 0
 23449                           pclatu	equ	0xFFB
 23450                           pclath	equ	0xFFA
 23451                           tblptru	equ	0xFF8
 23452                           tblptrh	equ	0xFF7
 23453                           tblptrl	equ	0xFF6
 23454                           tablat	equ	0xFF5
 23455                           prodh	equ	0xFF4
 23456                           prodl	equ	0xFF3
 23457                           intcon	equ	0xFF2
 23458                           intcon2	equ	0xFF1
 23459                           intcon3	equ	0xFF0
 23460                           indf0	equ	0xFEF
 23461                           postinc0	equ	0xFEE
 23462                           fsr0h	equ	0xFEA
 23463                           fsr0l	equ	0xFE9
 23464                           wreg	equ	0xFE8
 23465                           postdec1	equ	0xFE5
 23466                           fsr1h	equ	0xFE2
 23467                           fsr1l	equ	0xFE1
 23468                           indf2	equ	0xFDF
 23469                           postinc2	equ	0xFDE
 23470                           postdec2	equ	0xFDD
 23471                           fsr2h	equ	0xFDA
 23472                           fsr2l	equ	0xFD9
 23473                           status	equ	0xFD8
 23474                           
 23475 ;; *************** function _printSortTimer *****************
 23476 ;; Defined at:
 23477 ;;		line 484 in file "sort.c"
 23478 ;; Parameters:    Size  Location     Type
 23479 ;;		None
 23480 ;; Auto vars:     Size  Location     Type
 23481 ;;  i               2   70[COMRAM] int 
 23482 ;;  i               2   72[COMRAM] int 
 23483 ;;  curTime        14   44[COMRAM] int [7]
 23484 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23485 ;;  sec             2   64[COMRAM] int 
 23486 ;;  min             2   62[COMRAM] int 
 23487 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23488 ;;  start_sec       2   58[COMRAM] unsigned int 
 23489 ;; Return value:  Size  Location     Type
 23490 ;;                  1    wreg      void 
 23491 ;; Registers used:
 23492 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23493 ;; Tracked objects:
 23494 ;;		On entry : 0/0
 23495 ;;		On exit  : 0/0
 23496 ;;		Unchanged: 0/0
 23497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23499 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23500 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23501 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23502 ;;Total ram usage:       33 bytes
 23503 ;; Hardware stack levels used:    1
 23504 ;; Hardware stack levels required when called:    3
 23505 ;; This function calls:
 23506 ;;		i2___lwdiv
 23507 ;;		i2___lwmod
 23508 ;;		i2___wmul
 23509 ;;		i2_delay_ms
 23510 ;;		i2_getRTC
 23511 ;;		i2_lcdInst
 23512 ;;		i2_printf
 23513 ;; This function is called by:
 23514 ;;		_handler
 23515 ;; This function uses a non-reentrant model
 23516 ;;
 23517                           
 23518                           	psect	text86
 23519  00330C                     __ptext86:
 23520                           	opt stack 0
 23521  00330C                     _printSortTimer:
 23522                           	opt stack 20
 23523                           
 23524                           ;sort.c: 485: getRTC();
 23525                           
 23526                           ;incstack = 0
 23527  00330C  ECFE  F027         	call	i2_getRTC	;wreg free
 23528                           
 23529                           ;sort.c: 486: int curTime[7];
 23530                           ;sort.c: 487: for(int i = 0; i < 7; i++){
 23531  003310  0E00               	movlw	0
 23532  003312  6E4A               	movwf	printSortTimer@i+1,c
 23533  003314  0E00               	movlw	0
 23534  003316  6E49               	movwf	printSortTimer@i,c
 23535  003318                     i2l9934:
 23536  003318  BE4A               	btfsc	printSortTimer@i+1,7,c
 23537  00331A  D006               	goto	i2l9938
 23538  00331C  504A               	movf	printSortTimer@i+1,w,c
 23539  00331E  E131               	bnz	i2l9944
 23540  003320  0E07               	movlw	7
 23541  003322  5C49               	subwf	printSortTimer@i,w,c
 23542  003324  B0D8               	btfsc	status,0,c
 23543  003326  D02D               	goto	i2l9944
 23544  003328                     i2l9938:
 23545                           
 23546                           ;sort.c: 488: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23547  003328  0E24               	movlw	low _time
 23548  00332A  2449               	addwf	printSortTimer@i,w,c
 23549  00332C  6ED9               	movwf	fsr2l,c
 23550  00332E  0E01               	movlw	high _time
 23551  003330  204A               	addwfc	printSortTimer@i+1,w,c
 23552  003332  6EDA               	movwf	fsr2h,c
 23553  003334  50DF               	movf	indf2,w,c
 23554  003336  6E2A               	movwf	??_printSortTimer& (0+255),c
 23555  003338  3A2A               	swapf	??_printSortTimer,f,c
 23556  00333A  0E0F               	movlw	15
 23557  00333C  162A               	andwf	??_printSortTimer,f,c
 23558  00333E  0E0F               	movlw	15
 23559  003340  162A               	andwf	??_printSortTimer,f,c
 23560  003342  502A               	movf	??_printSortTimer,w,c
 23561  003344  0D0A               	mullw	10
 23562  003346  0E24               	movlw	low _time
 23563  003348  2449               	addwf	printSortTimer@i,w,c
 23564  00334A  6ED9               	movwf	fsr2l,c
 23565  00334C  0E01               	movlw	high _time
 23566  00334E  204A               	addwfc	printSortTimer@i+1,w,c
 23567  003350  6EDA               	movwf	fsr2h,c
 23568  003352  50DF               	movf	indf2,w,c
 23569  003354  0B0F               	andlw	15
 23570  003356  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23571  003358  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23572  00335A  50F3               	movf	prodl,w,c
 23573  00335C  262B               	addwf	??_printSortTimer+1,f,c
 23574  00335E  50F4               	movf	prodh,w,c
 23575  003360  222C               	addwfc	??_printSortTimer+2,f,c
 23576  003362  90D8               	bcf	status,0,c
 23577  003364  3449               	rlcf	printSortTimer@i,w,c
 23578  003366  6ED9               	movwf	fsr2l,c
 23579  003368  344A               	rlcf	printSortTimer@i+1,w,c
 23580  00336A  6EDA               	movwf	fsr2h,c
 23581  00336C  0E2D               	movlw	low printSortTimer@curTime
 23582  00336E  26D9               	addwf	fsr2l,f,c
 23583  003370  0E00               	movlw	high printSortTimer@curTime
 23584  003372  22DA               	addwfc	fsr2h,f,c
 23585  003374  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23586  003378  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23587  00337C  4A49               	infsnz	printSortTimer@i,f,c
 23588  00337E  2A4A               	incf	printSortTimer@i+1,f,c
 23589  003380  D7CB               	goto	i2l9934
 23590  003382                     i2l9944:
 23591                           
 23592                           ;sort.c: 489: }
 23593                           ;sort.c: 490: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23594  003382  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23595  003386  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23596  00338A  0E00               	movlw	0
 23597  00338C  6E04               	movwf	i2___wmul@multiplicand+1,c
 23598  00338E  0E3C               	movlw	60
 23599  003390  6E03               	movwf	i2___wmul@multiplicand,c
 23600  003392  EC2D  F02D         	call	i2___wmul	;wreg free
 23601  003396  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23602  00339A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23603  00339E  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23604  0033A2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23605  0033A6  0E0E               	movlw	14
 23606  0033A8  6E04               	movwf	i2___wmul@multiplicand+1,c
 23607  0033AA  0E10               	movlw	16
 23608  0033AC  6E03               	movwf	i2___wmul@multiplicand,c
 23609  0033AE  EC2D  F02D         	call	i2___wmul	;wreg free
 23610  0033B2  5001               	movf	?i2___wmul,w,c
 23611  0033B4  262A               	addwf	??_printSortTimer,f,c
 23612  0033B6  5002               	movf	?i2___wmul+1,w,c
 23613  0033B8  222B               	addwfc	??_printSortTimer+1,f,c
 23614  0033BA  0101               	movlb	1	; () banked
 23615  0033BC  510E               	movf	_startTime& (0+255),w,b
 23616  0033BE  242A               	addwf	??_printSortTimer,w,c
 23617  0033C0  6E3B               	movwf	printSortTimer@start_sec,c
 23618  0033C2  0101               	movlb	1	; () banked
 23619  0033C4  510F               	movf	(_startTime+1)& (0+255),w,b
 23620  0033C6  202B               	addwfc	??_printSortTimer+1,w,c
 23621  0033C8  6E3C               	movwf	printSortTimer@start_sec+1,c
 23622                           
 23623                           ;sort.c: 491: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23624  0033CA  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23625  0033CE  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23626  0033D2  0E00               	movlw	0
 23627  0033D4  6E04               	movwf	i2___wmul@multiplicand+1,c
 23628  0033D6  0E3C               	movlw	60
 23629  0033D8  6E03               	movwf	i2___wmul@multiplicand,c
 23630  0033DA  EC2D  F02D         	call	i2___wmul	;wreg free
 23631  0033DE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23632  0033E2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23633  0033E6  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23634  0033EA  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23635  0033EE  0E0E               	movlw	14
 23636  0033F0  6E04               	movwf	i2___wmul@multiplicand+1,c
 23637  0033F2  0E10               	movlw	16
 23638  0033F4  6E03               	movwf	i2___wmul@multiplicand,c
 23639  0033F6  EC2D  F02D         	call	i2___wmul	;wreg free
 23640  0033FA  5001               	movf	?i2___wmul,w,c
 23641  0033FC  262A               	addwf	??_printSortTimer,f,c
 23642  0033FE  5002               	movf	?i2___wmul+1,w,c
 23643  003400  222B               	addwfc	??_printSortTimer+1,f,c
 23644  003402  502D               	movf	printSortTimer@curTime,w,c
 23645  003404  242A               	addwf	??_printSortTimer,w,c
 23646  003406  6E3D               	movwf	printSortTimer@cur_sec,c
 23647  003408  502E               	movf	printSortTimer@curTime+1,w,c
 23648  00340A  202B               	addwfc	??_printSortTimer+1,w,c
 23649  00340C  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23650                           
 23651                           ;sort.c: 492: unsigned int timeDiff = cur_sec - start_sec;
 23652  00340E  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23653  003412  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23654  003416  1E2A               	comf	??_printSortTimer,f,c
 23655  003418  1E2B               	comf	??_printSortTimer+1,f,c
 23656  00341A  4A2A               	infsnz	??_printSortTimer,f,c
 23657  00341C  2A2B               	incf	??_printSortTimer+1,f,c
 23658  00341E  503D               	movf	printSortTimer@cur_sec,w,c
 23659  003420  242A               	addwf	??_printSortTimer,w,c
 23660  003422  6E45               	movwf	printSortTimer@timeDiff,c
 23661  003424  503E               	movf	printSortTimer@cur_sec+1,w,c
 23662  003426  202B               	addwfc	??_printSortTimer+1,w,c
 23663  003428  6E46               	movwf	printSortTimer@timeDiff+1,c
 23664                           
 23665                           ;sort.c: 494: total_time = timeDiff;
 23666  00342A  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23667  00342E  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23668                           
 23669                           ;sort.c: 496: if(f_most_recent_sort_time){
 23670  003432  0101               	movlb	1	; () banked
 23671  003434  513D               	movf	_f_most_recent_sort_time& (0+255),w,b
 23672  003436  0101               	movlb	1	; () banked
 23673  003438  113E               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23674  00343A  B4D8               	btfsc	status,2,c
 23675  00343C  D009               	goto	i2l9956
 23676                           
 23677                           ; BSR set to: 1
 23678                           ;sort.c: 497: most_recent_sort_time = total_time;
 23679  00343E  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 23680  003442  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 23681                           
 23682                           ; BSR set to: 1
 23683                           ;sort.c: 498: f_most_recent_sort_time = 0;
 23684  003446  0E00               	movlw	0
 23685  003448  0101               	movlb	1	; () banked
 23686  00344A  6F3E               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23687  00344C  0E00               	movlw	0
 23688  00344E  6F3D               	movwf	_f_most_recent_sort_time& (0+255),b
 23689  003450                     i2l9956:
 23690                           
 23691                           ; BSR set to: 1
 23692                           ;sort.c: 499: }
 23693                           ;sort.c: 501: if(total_time - most_recent_sort_time == 20){
 23694  003450  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23695  003454  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23696  003458  1E2A               	comf	??_printSortTimer,f,c
 23697  00345A  1E2B               	comf	??_printSortTimer+1,f,c
 23698  00345C  4A2A               	infsnz	??_printSortTimer,f,c
 23699  00345E  2A2B               	incf	??_printSortTimer+1,f,c
 23700  003460  0100               	movlb	0	; () banked
 23701  003462  51FA               	movf	_total_time& (0+255),w,b
 23702  003464  262A               	addwf	??_printSortTimer,f,c
 23703  003466  0100               	movlb	0	; () banked
 23704  003468  51FB               	movf	(_total_time+1)& (0+255),w,b
 23705  00346A  222B               	addwfc	??_printSortTimer+1,f,c
 23706  00346C  0E14               	movlw	20
 23707  00346E  182A               	xorwf	??_printSortTimer,w,c
 23708  003470  102B               	iorwf	??_printSortTimer+1,w,c
 23709  003472  A4D8               	btfss	status,2,c
 23710  003474  D033               	goto	i2l9976
 23711                           
 23712                           ; BSR set to: 0
 23713                           ;sort.c: 502: LATBbits.LATB2 = 0;
 23714  003476  948A               	bcf	3978,2,c	;volatile
 23715                           
 23716                           ; BSR set to: 0
 23717                           ;sort.c: 503: _delay((unsigned long)((2000)*(32000000/4000.0)));
 23718  003478  0E52               	movlw	82
 23719  00347A  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23720  00347C  0E2B               	movlw	43
 23721  00347E  6E2A               	movwf	??_printSortTimer& (0+255),c
 23722  003480  0E00               	movlw	0
 23723  003482                     i2u1131_47:
 23724  003482  2EE8               	decfsz	wreg,f,c
 23725  003484  D7FE               	bra	i2u1131_47
 23726  003486  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 23727  003488  D7FC               	bra	i2u1131_47
 23728  00348A  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 23729  00348C  D7FA               	bra	i2u1131_47
 23730  00348E  D000               	nop2	
 23731                           
 23732                           ;sort.c: 504: for(int i=0; i<46; i++){
 23733  003490  0E00               	movlw	0
 23734  003492  6E48               	movwf	printSortTimer@i_1160+1,c
 23735  003494  0E00               	movlw	0
 23736  003496  6E47               	movwf	printSortTimer@i_1160,c
 23737  003498  BE48               	btfsc	printSortTimer@i_1160+1,7,c
 23738  00349A  D006               	goto	i2l9968
 23739  00349C  5048               	movf	printSortTimer@i_1160+1,w,c
 23740  00349E  E11D               	bnz	i2l902
 23741  0034A0  0E2E               	movlw	46
 23742  0034A2  5C47               	subwf	printSortTimer@i_1160,w,c
 23743  0034A4  B0D8               	btfsc	status,0,c
 23744  0034A6  D019               	goto	i2l902
 23745  0034A8                     i2l9968:
 23746                           
 23747                           ;sort.c: 505: LATBbits.LATB2 = !LATBbits.LATB2;
 23748  0034A8  B48A               	btfsc	3978,2,c	;volatile
 23749  0034AA  D003               	goto	i2u942_40
 23750  0034AC  6A2A               	clrf	??_printSortTimer& (0+255),c
 23751  0034AE  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23752  0034B0  D001               	goto	i2u943_48
 23753  0034B2                     i2u942_40:
 23754  0034B2  6A2A               	clrf	??_printSortTimer& (0+255),c
 23755  0034B4                     i2u943_48:
 23756  0034B4  462A               	rlncf	??_printSortTimer,f,c
 23757  0034B6  462A               	rlncf	??_printSortTimer,f,c
 23758  0034B8  508A               	movf	3978,w,c	;volatile
 23759  0034BA  182A               	xorwf	??_printSortTimer,w,c
 23760  0034BC  0BFB               	andlw	-5
 23761  0034BE  182A               	xorwf	??_printSortTimer,w,c
 23762  0034C0  6E8A               	movwf	3978,c	;volatile
 23763                           
 23764                           ;sort.c: 506: delay_ms(45-i);
 23765  0034C2  5047               	movf	printSortTimer@i_1160,w,c
 23766  0034C4  0800               	sublw	0
 23767  0034C6  0F2D               	addlw	45
 23768  0034C8  ECA4  F02D         	call	i2_delay_ms
 23769  0034CC  4A47               	infsnz	printSortTimer@i_1160,f,c
 23770  0034CE  2A48               	incf	printSortTimer@i_1160+1,f,c
 23771  0034D0  BE48               	btfsc	printSortTimer@i_1160+1,7,c
 23772  0034D2  D7EA               	goto	i2l9968
 23773  0034D4  5048               	movf	printSortTimer@i_1160+1,w,c
 23774  0034D6  E101               	bnz	i2u944_40
 23775  0034D8  D7E3               	goto	L20
 23776  0034DA                     i2u944_40:
 23777  0034DA                     i2l902:
 23778                           
 23779                           ;sort.c: 507: }
 23780                           ;sort.c: 508: LATBbits.LATB2 = 1;
 23781  0034DA  848A               	bsf	3978,2,c	;volatile
 23782  0034DC                     i2l9976:
 23783                           
 23784                           ;sort.c: 509: }
 23785                           ;sort.c: 511: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23786  0034DC  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23787  0034E0  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23788  0034E4  1E2A               	comf	??_printSortTimer,f,c
 23789  0034E6  1E2B               	comf	??_printSortTimer+1,f,c
 23790  0034E8  4A2A               	infsnz	??_printSortTimer,f,c
 23791  0034EA  2A2B               	incf	??_printSortTimer+1,f,c
 23792  0034EC  0100               	movlb	0	; () banked
 23793  0034EE  51FA               	movf	_total_time& (0+255),w,b
 23794  0034F0  262A               	addwf	??_printSortTimer,f,c
 23795  0034F2  0100               	movlb	0	; () banked
 23796  0034F4  51FB               	movf	(_total_time+1)& (0+255),w,b
 23797  0034F6  222B               	addwfc	??_printSortTimer+1,f,c
 23798  0034F8  0E2A               	movlw	42
 23799  0034FA  182A               	xorwf	??_printSortTimer,w,c
 23800  0034FC  102B               	iorwf	??_printSortTimer+1,w,c
 23801  0034FE  B4D8               	btfsc	status,2,c
 23802  003500  D007               	goto	i2l9980
 23803                           
 23804                           ; BSR set to: 0
 23805  003502  0EB3               	movlw	179
 23806  003504  0100               	movlb	0	; () banked
 23807  003506  19FA               	xorwf	_total_time& (0+255),w,b
 23808  003508  0100               	movlb	0	; () banked
 23809  00350A  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23810  00350C  A4D8               	btfss	status,2,c
 23811  00350E  D003               	goto	i2l9982
 23812  003510                     i2l9980:
 23813                           
 23814                           ; BSR set to: 0
 23815                           ;sort.c: 512: machine_state = DoneSorting_state;
 23816  003510  0E02               	movlw	2
 23817  003512  0100               	movlb	0	; () banked
 23818  003514  6FFC               	movwf	_machine_state& (0+255),b
 23819  003516                     i2l9982:
 23820                           
 23821                           ; BSR set to: 0
 23822                           ;sort.c: 514: }
 23823                           ;sort.c: 516: int min = (timeDiff % 3600) / 60;
 23824  003516  0E0E               	movlw	14
 23825  003518  6E04               	movwf	i2___lwmod@divisor+1,c
 23826  00351A  0E10               	movlw	16
 23827  00351C  6E03               	movwf	i2___lwmod@divisor,c
 23828  00351E  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23829  003522  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23830  003526  ECC8  F02A         	call	i2___lwmod	;wreg free
 23831  00352A  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23832  00352E  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23833  003532  0E00               	movlw	0
 23834  003534  6E09               	movwf	i2___lwdiv@divisor+1,c
 23835  003536  0E3C               	movlw	60
 23836  003538  6E08               	movwf	i2___lwdiv@divisor,c
 23837  00353A  ECC1  F029         	call	i2___lwdiv	;wreg free
 23838  00353E  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23839  003542  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23840                           
 23841                           ;sort.c: 517: int sec = (timeDiff % 3600) % 60;
 23842  003546  0E0E               	movlw	14
 23843  003548  6E04               	movwf	i2___lwmod@divisor+1,c
 23844  00354A  0E10               	movlw	16
 23845  00354C  6E03               	movwf	i2___lwmod@divisor,c
 23846  00354E  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23847  003552  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23848  003556  ECC8  F02A         	call	i2___lwmod	;wreg free
 23849  00355A  C001  F043         	movff	?i2___lwmod,_printSortTimer$2562
 23850  00355E  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2562+1
 23851                           
 23852                           ;sort.c: 517: int sec = (timeDiff % 3600) % 60;
 23853  003562  C043  F001         	movff	_printSortTimer$2562,i2___lwmod@dividend
 23854  003566  C044  F002         	movff	_printSortTimer$2562+1,i2___lwmod@dividend+1
 23855  00356A  0E00               	movlw	0
 23856  00356C  6E04               	movwf	i2___lwmod@divisor+1,c
 23857  00356E  0E3C               	movlw	60
 23858  003570  6E03               	movwf	i2___lwmod@divisor,c
 23859  003572  ECC8  F02A         	call	i2___lwmod	;wreg free
 23860  003576  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23861  00357A  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23862                           
 23863                           ;sort.c: 519: lcdInst(0b10000000);;
 23864  00357E  0E80               	movlw	128
 23865  003580  ECFD  F02D         	call	i2_lcdInst
 23866                           
 23867                           ;sort.c: 520: printf("SORTING...     ");
 23868  003584  0E3D               	movlw	low STR_65
 23869  003586  6E0D               	movwf	i2printf@f,c
 23870  003588  0EFE               	movlw	high STR_65
 23871  00358A  6E0E               	movwf	i2printf@f+1,c
 23872  00358C  EC00  F012         	call	i2_printf	;wreg free
 23873                           
 23874                           ;sort.c: 521: lcdInst(0b11000000);;
 23875  003590  0EC0               	movlw	192
 23876  003592  ECFD  F02D         	call	i2_lcdInst
 23877                           
 23878                           ;sort.c: 522: printf("TIME %d:%02d   ", min, sec);
 23879  003596  0E4D               	movlw	low STR_66
 23880  003598  6E0D               	movwf	i2printf@f,c
 23881  00359A  0EFE               	movlw	high STR_66
 23882  00359C  6E0E               	movwf	i2printf@f+1,c
 23883  00359E  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23884  0035A2  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23885  0035A6  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23886  0035AA  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23887  0035AE  EC00  F012         	call	i2_printf	;wreg free
 23888  0035B2  0012               	return		;funcret
 23889  0035B4                     __end_of_printSortTimer:
 23890                           	opt stack 0
 23891                           pclatu	equ	0xFFB
 23892                           pclath	equ	0xFFA
 23893                           tblptru	equ	0xFF8
 23894                           tblptrh	equ	0xFF7
 23895                           tblptrl	equ	0xFF6
 23896                           tablat	equ	0xFF5
 23897                           prodh	equ	0xFF4
 23898                           prodl	equ	0xFF3
 23899                           intcon	equ	0xFF2
 23900                           intcon2	equ	0xFF1
 23901                           intcon3	equ	0xFF0
 23902                           indf0	equ	0xFEF
 23903                           postinc0	equ	0xFEE
 23904                           fsr0h	equ	0xFEA
 23905                           fsr0l	equ	0xFE9
 23906                           wreg	equ	0xFE8
 23907                           postdec1	equ	0xFE5
 23908                           fsr1h	equ	0xFE2
 23909                           fsr1l	equ	0xFE1
 23910                           indf2	equ	0xFDF
 23911                           postinc2	equ	0xFDE
 23912                           postdec2	equ	0xFDD
 23913                           fsr2h	equ	0xFDA
 23914                           fsr2l	equ	0xFD9
 23915                           status	equ	0xFD8
 23916                           
 23917 ;; *************** function i2_printf *****************
 23918 ;; Defined at:
 23919 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23920 ;; Parameters:    Size  Location     Type
 23921 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23922 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 23923 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 23924 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 23925 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 23926 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 23927 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 23928 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 23929 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 23930 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 23931 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 23932 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 23933 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 23934 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 23935 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 23936 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 23937 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 23938 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 23939 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 23940 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23941 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 23942 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 23943 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 23944 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 23945 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 23946 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 23947 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 23948 ;;		 -> STR_1(18), 
 23949 ;; Auto vars:     Size  Location     Type
 23950 ;;  printf          4    0        struct .
 23951 ;;  printf          2   39[COMRAM] int 
 23952 ;;  printf          2   35[COMRAM] unsigned int 
 23953 ;;  printf          2   33[COMRAM] unsigned int 
 23954 ;;  printf          2   31[COMRAM] PTR void [1]
 23955 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23956 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23957 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 23958 ;;		 -> printRTC@month(4), UI@month(4), 
 23959 ;;  printf          1   38[COMRAM] char 
 23960 ;;  printf          1   37[COMRAM] unsigned char 
 23961 ;;  printf          1   28[COMRAM] char 
 23962 ;; Return value:  Size  Location     Type
 23963 ;;                  2   12[COMRAM] int 
 23964 ;; Registers used:
 23965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23966 ;; Tracked objects:
 23967 ;;		On entry : 0/0
 23968 ;;		On exit  : 0/0
 23969 ;;		Unchanged: 0/0
 23970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23971 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23972 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23973 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23974 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23975 ;;Total ram usage:       29 bytes
 23976 ;; Hardware stack levels used:    1
 23977 ;; Hardware stack levels required when called:    2
 23978 ;; This function calls:
 23979 ;;		i2___lwdiv
 23980 ;;		i2___lwmod
 23981 ;;		i2___wmul
 23982 ;;		i2_isdigit
 23983 ;;		i2_putch
 23984 ;; This function is called by:
 23985 ;;		_change_state_to_menu_11
 23986 ;;		_change_state_to_menu_23
 23987 ;;		_change_state_to_logs_11
 23988 ;;		_change_state_to_logs_12
 23989 ;;		_change_state_to_logs_22
 23990 ;;		_change_state_to_logs_23
 23991 ;;		_change_state_to_logs_33
 23992 ;;		_change_state_to_logs_34
 23993 ;;		_printSortTimer
 23994 ;;		i2_change_state_to_menu_start
 23995 ;;		i2_change_state_to_menu_12
 23996 ;;		i2_change_state_to_menu_22
 23997 ;;		i2_printRTC
 23998 ;; This function uses a non-reentrant model
 23999 ;;
 24000                           
 24001                           	psect	text87
 24002  002400                     __ptext87:
 24003                           	opt stack 0
 24004  002400                     i2_printf:
 24005                           	opt stack 20
 24006                           
 24007                           ;doprnt.c: 466: va_list ap;
 24008                           ;doprnt.c: 499: signed char c;
 24009                           ;doprnt.c: 501: int width;
 24010                           ;doprnt.c: 506: signed char prec;
 24011                           ;doprnt.c: 508: unsigned char flag;
 24012                           ;doprnt.c: 523: union {
 24013                           ;doprnt.c: 524: unsigned long vd;
 24014                           ;doprnt.c: 525: double integ;
 24015                           ;doprnt.c: 526: } tmpval;
 24016                           ;doprnt.c: 528: unsigned int val;
 24017                           ;doprnt.c: 529: unsigned len;
 24018                           ;doprnt.c: 530: const char * cp;
 24019                           ;doprnt.c: 533: *ap = __va_start();
 24020                           
 24021                           ;incstack = 0
 24022  002400  0E0F               	movlw	low (?i2_printf+2)
 24023  002402  6E20               	movwf	i2printf@ap,c
 24024  002404  0E00               	movlw	high (?i2_printf+2)
 24025  002406  6E21               	movwf	i2printf@ap+1,c
 24026                           
 24027                           ;doprnt.c: 536: while(c = *f++) {
 24028  002408  D1A4               	goto	i2l7106
 24029  00240A                     i2l6976:
 24030                           
 24031                           ;doprnt.c: 538: if(c != '%')
 24032  00240A  0E25               	movlw	37
 24033  00240C  1827               	xorwf	i2printf@c,w,c
 24034  00240E  B4D8               	btfsc	status,2,c
 24035  002410  D004               	goto	i2l6980
 24036                           
 24037                           ;doprnt.c: 540: {
 24038                           ;doprnt.c: 541: (putch(c) );
 24039  002412  5027               	movf	i2printf@c,w,c
 24040  002414  ECF7  F02D         	call	i2_putch
 24041                           
 24042                           ;doprnt.c: 542: continue;
 24043  002418  D19C               	goto	i2l7106
 24044  00241A                     i2l6980:
 24045                           
 24046                           ;doprnt.c: 543: }
 24047                           ;doprnt.c: 546: width = 0;
 24048  00241A  0E00               	movlw	0
 24049  00241C  6E29               	movwf	i2printf@width+1,c
 24050  00241E  0E00               	movlw	0
 24051  002420  6E28               	movwf	i2printf@width,c
 24052                           
 24053                           ;doprnt.c: 548: flag = 0;
 24054  002422  0E00               	movlw	0
 24055  002424  6E26               	movwf	i2printf@flag,c
 24056                           
 24057                           ;doprnt.c: 551: switch(*f) {
 24058                           
 24059                           ;doprnt.c: 550: for(;;) {
 24060  002426  D003               	goto	i2l6986
 24061  002428                     i2l6982:
 24062                           
 24063                           ;doprnt.c: 580: flag |= 0x04;
 24064  002428  8426               	bsf	i2printf@flag,2,c
 24065                           
 24066                           ;doprnt.c: 581: f++;
 24067  00242A  4A0D               	infsnz	i2printf@f,f,c
 24068  00242C  2A0E               	incf	i2printf@f+1,f,c
 24069  00242E                     i2l6986:
 24070  00242E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24071  002432  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24072  002436                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24073  002436  6AF8               	clrf	tblptru,c
 24074  002438                     	endif
 24075  002438                     	if	0	;tblptru may be non-zero
 24076  002438                     	endif
 24077  002438  0008               	tblrd		*
 24078  00243A  50F5               	movf	tablat,w,c
 24079                           
 24080                           ; Switch size 1, requested type "space"
 24081                           ; Number of cases is 1, Range of values is 48 to 48
 24082                           ; switch strategies available:
 24083                           ; Name         Instructions Cycles
 24084                           ; simple_byte            4     3 (average)
 24085                           ;	Chosen strategy is simple_byte
 24086  00243C  0A30               	xorlw	48	; case 48
 24087  00243E  B4D8               	btfsc	status,2,c
 24088  002440  D7F3               	goto	i2l6982
 24089                           
 24090                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24091                           
 24092                           ;doprnt.c: 586: }
 24093                           
 24094                           ;doprnt.c: 585: break;
 24095  002442  C00D  FFF6         	movff	i2printf@f,tblptrl
 24096  002446  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24097  00244A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24098  00244A  6AF8               	clrf	tblptru,c
 24099  00244C                     	endif
 24100  00244C                     	if	0	;tblptru may be non-zero
 24101  00244C                     	endif
 24102  00244C  0008               	tblrd		*
 24103  00244E  50F5               	movf	tablat,w,c
 24104  002450  EC87  F02D         	call	i2_isdigit
 24105  002454  A0D8               	btfss	status,0,c
 24106  002456  D0A6               	goto	i2l7034
 24107                           
 24108                           ;doprnt.c: 598: width = 0;
 24109  002458  0E00               	movlw	0
 24110  00245A  6E29               	movwf	i2printf@width+1,c
 24111  00245C  0E00               	movlw	0
 24112  00245E  6E28               	movwf	i2printf@width,c
 24113  002460                     i2l6992:
 24114                           
 24115                           ;doprnt.c: 600: width *= 10;
 24116  002460  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24117  002464  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24118  002468  0E00               	movlw	0
 24119  00246A  6E04               	movwf	i2___wmul@multiplicand+1,c
 24120  00246C  0E0A               	movlw	10
 24121  00246E  6E03               	movwf	i2___wmul@multiplicand,c
 24122  002470  EC2D  F02D         	call	i2___wmul	;wreg free
 24123  002474  C001  F028         	movff	?i2___wmul,i2printf@width
 24124  002478  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24125                           
 24126                           ;doprnt.c: 601: width += *f++ - '0';
 24127  00247C  0ED0               	movlw	208
 24128  00247E  6E19               	movwf	??i2_printf& (0+255),c
 24129  002480  0EFF               	movlw	255
 24130  002482  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24131  002484  C00D  FFF6         	movff	i2printf@f,tblptrl
 24132  002488  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24133  00248C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24134  00248C  6AF8               	clrf	tblptru,c
 24135  00248E                     	endif
 24136  00248E                     	if	0	;tblptru may be non-zero
 24137  00248E                     	endif
 24138  00248E  0008               	tblrd		*
 24139  002490  50F5               	movf	tablat,w,c
 24140  002492  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24141  002494  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24142  002496  5019               	movf	??i2_printf,w,c
 24143  002498  261B               	addwf	??i2_printf+2,f,c
 24144  00249A  501A               	movf	??i2_printf+1,w,c
 24145  00249C  221C               	addwfc	??i2_printf+3,f,c
 24146  00249E  501B               	movf	??i2_printf+2,w,c
 24147  0024A0  2628               	addwf	i2printf@width,f,c
 24148  0024A2  501C               	movf	??i2_printf+3,w,c
 24149  0024A4  2229               	addwfc	i2printf@width+1,f,c
 24150  0024A6  4A0D               	infsnz	i2printf@f,f,c
 24151  0024A8  2A0E               	incf	i2printf@f+1,f,c
 24152                           
 24153                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24154  0024AA  C00D  FFF6         	movff	i2printf@f,tblptrl
 24155  0024AE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24156  0024B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24157  0024B2  6AF8               	clrf	tblptru,c
 24158  0024B4                     	endif
 24159  0024B4                     	if	0	;tblptru may be non-zero
 24160  0024B4                     	endif
 24161  0024B4  0008               	tblrd		*
 24162  0024B6  50F5               	movf	tablat,w,c
 24163  0024B8  EC87  F02D         	call	i2_isdigit
 24164  0024BC  A0D8               	btfss	status,0,c
 24165  0024BE  D072               	goto	i2l7034
 24166  0024C0  D7CF               	goto	i2l6992
 24167  0024C2                     i2l7000:
 24168                           
 24169                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24170  0024C2  C020  FFD9         	movff	i2printf@ap,fsr2l
 24171  0024C6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24172  0024CA  CFDE F01E          	movff	postinc2,i2printf@cp
 24173  0024CE  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24174  0024D2  0E02               	movlw	2
 24175  0024D4  2620               	addwf	i2printf@ap,f,c
 24176  0024D6  0E00               	movlw	0
 24177  0024D8  2221               	addwfc	i2printf@ap+1,f,c
 24178                           
 24179                           ;doprnt.c: 740: if(!cp)
 24180  0024DA  501E               	movf	i2printf@cp,w,c
 24181  0024DC  101F               	iorwf	i2printf@cp+1,w,c
 24182  0024DE  A4D8               	btfss	status,2,c
 24183  0024E0  D004               	goto	i2l7008
 24184                           
 24185                           ;doprnt.c: 741: cp = "(null)";
 24186  0024E2  0EB5               	movlw	low STR_131
 24187  0024E4  6E1E               	movwf	i2printf@cp,c
 24188  0024E6  0EFF               	movlw	high STR_131
 24189  0024E8  6E1F               	movwf	i2printf@cp+1,c
 24190  0024EA                     i2l7008:
 24191                           
 24192                           ;doprnt.c: 745: len = 0;
 24193  0024EA  0E00               	movlw	0
 24194  0024EC  6E23               	movwf	i2printf@len+1,c
 24195  0024EE  0E00               	movlw	0
 24196  0024F0  6E22               	movwf	i2printf@len,c
 24197                           
 24198                           ;doprnt.c: 746: while(cp[len])
 24199  0024F2  D002               	goto	i2l7012
 24200  0024F4                     i2l7010:
 24201                           
 24202                           ;doprnt.c: 747: len++;
 24203  0024F4  4A22               	infsnz	i2printf@len,f,c
 24204  0024F6  2A23               	incf	i2printf@len+1,f,c
 24205  0024F8                     i2l7012:
 24206  0024F8  5022               	movf	i2printf@len,w,c
 24207  0024FA  241E               	addwf	i2printf@cp,w,c
 24208  0024FC  6E19               	movwf	??i2_printf& (0+255),c
 24209  0024FE  5023               	movf	i2printf@len+1,w,c
 24210  002500  201F               	addwfc	i2printf@cp+1,w,c
 24211  002502  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24212  002504  C019  FFF6         	movff	??i2_printf,tblptrl
 24213  002508  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24214  00250C  0E00               	movlw	low (__mediumconst shr (0+16))
 24215  00250E  6EF8               	movwf	tblptru,c
 24216  002510  0E0F               	movlw	(high __ramtop+-1)
 24217  002512  64F7               	cpfsgt	tblptrh,c
 24218  002514  D003               	bra	i2u564_47
 24219  002516  0008               	tblrd		*
 24220  002518  50F5               	movf	tablat,w,c
 24221  00251A  D005               	bra	i2u564_40
 24222  00251C                     i2u564_47:
 24223  00251C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24224  002520  CFF7 FFEA          	movff	tblptrh,fsr0h
 24225  002524  50EF               	movf	indf0,w,c
 24226  002526                     i2u564_40:
 24227  002526  0900               	iorlw	0
 24228  002528  A4D8               	btfss	status,2,c
 24229  00252A  D7E4               	goto	i2l7010
 24230                           
 24231                           ;doprnt.c: 757: if(width > len)
 24232  00252C  5028               	movf	i2printf@width,w,c
 24233  00252E  5C22               	subwf	i2printf@len,w,c
 24234  002530  5029               	movf	i2printf@width+1,w,c
 24235  002532  5823               	subwfb	i2printf@len+1,w,c
 24236  002534  B0D8               	btfsc	status,0,c
 24237  002536  D005               	goto	i2l7018
 24238                           
 24239                           ;doprnt.c: 758: width -= len;
 24240  002538  5022               	movf	i2printf@len,w,c
 24241  00253A  5E28               	subwf	i2printf@width,f,c
 24242  00253C  5023               	movf	i2printf@len+1,w,c
 24243  00253E  5A29               	subwfb	i2printf@width+1,f,c
 24244  002540  D008               	goto	i2l7022
 24245  002542                     i2l7018:
 24246                           
 24247                           ;doprnt.c: 759: else
 24248                           ;doprnt.c: 760: width = 0;
 24249  002542  0E00               	movlw	0
 24250  002544  6E29               	movwf	i2printf@width+1,c
 24251  002546  0E00               	movlw	0
 24252  002548  6E28               	movwf	i2printf@width,c
 24253                           
 24254                           ;doprnt.c: 764: while(width--)
 24255  00254A  D003               	goto	i2l7022
 24256  00254C                     i2l7020:
 24257                           
 24258                           ;doprnt.c: 765: (putch(' ') );
 24259  00254C  0E20               	movlw	32
 24260  00254E  ECF7  F02D         	call	i2_putch
 24261  002552                     i2l7022:
 24262  002552  0628               	decf	i2printf@width,f,c
 24263  002554  A0D8               	btfss	status,0,c
 24264  002556  0629               	decf	i2printf@width+1,f,c
 24265  002558  2828               	incf	i2printf@width,w,c
 24266  00255A  E1F8               	bnz	i2l7020
 24267  00255C  2829               	incf	i2printf@width+1,w,c
 24268  00255E  B4D8               	btfsc	status,2,c
 24269  002560  D016               	goto	i2l7028
 24270  002562  D7F4               	goto	i2l7020
 24271  002564                     i2l7024:
 24272                           
 24273                           ;doprnt.c: 768: (putch(*cp++) );
 24274  002564  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24275  002568  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24276  00256C  0E00               	movlw	low (__mediumconst shr (0+16))
 24277  00256E  6EF8               	movwf	tblptru,c
 24278  002570  0E0F               	movlw	(high __ramtop+-1)
 24279  002572  64F7               	cpfsgt	tblptrh,c
 24280  002574  D003               	bra	i2u568_47
 24281  002576  0008               	tblrd		*
 24282  002578  50F5               	movf	tablat,w,c
 24283  00257A  D005               	bra	i2u568_40
 24284  00257C                     i2u568_47:
 24285  00257C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24286  002580  CFF7 FFEA          	movff	tblptrh,fsr0h
 24287  002584  50EF               	movf	indf0,w,c
 24288  002586                     i2u568_40:
 24289  002586  ECF7  F02D         	call	i2_putch
 24290  00258A  4A1E               	infsnz	i2printf@cp,f,c
 24291  00258C  2A1F               	incf	i2printf@cp+1,f,c
 24292  00258E                     i2l7028:
 24293  00258E  0622               	decf	i2printf@len,f,c
 24294  002590  A0D8               	btfss	status,0,c
 24295  002592  0623               	decf	i2printf@len+1,f,c
 24296  002594  2822               	incf	i2printf@len,w,c
 24297  002596  E1E6               	bnz	i2l7024
 24298  002598  2823               	incf	i2printf@len+1,w,c
 24299  00259A  B4D8               	btfsc	status,2,c
 24300  00259C  D0DA               	goto	i2l7106
 24301  00259E  D7E2               	goto	i2l7024
 24302  0025A0                     i2l7030:
 24303                           
 24304                           ;doprnt.c: 818: flag |= 0x40;
 24305  0025A0  8C26               	bsf	i2printf@flag,6,c
 24306                           
 24307                           ;doprnt.c: 822: }
 24308                           
 24309                           ;doprnt.c: 819: break;
 24310  0025A2  D01B               	goto	i2l1520
 24311  0025A4                     i2l7034:
 24312  0025A4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24313  0025A8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24314  0025AC  4A0D               	infsnz	i2printf@f,f,c
 24315  0025AE  2A0E               	incf	i2printf@f+1,f,c
 24316  0025B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24317  0025B0  6AF8               	clrf	tblptru,c
 24318  0025B2                     	endif
 24319  0025B2                     	if	0	;tblptru may be non-zero
 24320  0025B2                     	endif
 24321  0025B2  0008               	tblrd		*
 24322  0025B4  CFF5 F027          	movff	tablat,i2printf@c
 24323  0025B8  5027               	movf	i2printf@c,w,c
 24324                           
 24325                           ; Switch size 1, requested type "space"
 24326                           ; Number of cases is 5, Range of values is 0 to 117
 24327                           ; switch strategies available:
 24328                           ; Name         Instructions Cycles
 24329                           ; simple_byte           16     9 (average)
 24330                           ;	Chosen strategy is simple_byte
 24331  0025BA  0A00               	xorlw	0	; case 0
 24332  0025BC  B4D8               	btfsc	status,2,c
 24333  0025BE  0012               	return	
 24334  0025C0  0A64               	xorlw	100	; case 100
 24335  0025C2  B4D8               	btfsc	status,2,c
 24336  0025C4  D00A               	goto	i2l1520
 24337  0025C6  0A0D               	xorlw	13	; case 105
 24338  0025C8  B4D8               	btfsc	status,2,c
 24339  0025CA  D007               	goto	i2l1520
 24340  0025CC  0A1A               	xorlw	26	; case 115
 24341  0025CE  B4D8               	btfsc	status,2,c
 24342  0025D0  D778               	goto	i2l7000
 24343  0025D2  0A06               	xorlw	6	; case 117
 24344  0025D4  B4D8               	btfsc	status,2,c
 24345  0025D6  D7E4               	goto	i2l7030
 24346  0025D8  D0BC               	goto	i2l7106
 24347  0025DA                     i2l1520:
 24348                           
 24349                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24350  0025DA  BC26               	btfsc	i2printf@flag,6,c
 24351  0025DC  D015               	goto	i2l7046
 24352                           
 24353                           ;doprnt.c: 1253: {
 24354                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24355  0025DE  C020  FFD9         	movff	i2printf@ap,fsr2l
 24356  0025E2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24357  0025E6  CFDE F024          	movff	postinc2,i2printf@val
 24358  0025EA  CFDD F025          	movff	postdec2,i2printf@val+1
 24359  0025EE  0E02               	movlw	2
 24360  0025F0  2620               	addwf	i2printf@ap,f,c
 24361  0025F2  0E00               	movlw	0
 24362  0025F4  2221               	addwfc	i2printf@ap+1,f,c
 24363                           
 24364                           ;doprnt.c: 1261: if((int)val < 0) {
 24365  0025F6  AE25               	btfss	i2printf@val+1,7,c
 24366  0025F8  D013               	goto	i2l7050
 24367                           
 24368                           ;doprnt.c: 1262: flag |= 0x03;
 24369  0025FA  0E03               	movlw	3
 24370  0025FC  1226               	iorwf	i2printf@flag,f,c
 24371                           
 24372                           ;doprnt.c: 1263: val = -val;
 24373  0025FE  6C24               	negf	i2printf@val,c
 24374  002600  1E25               	comf	i2printf@val+1,f,c
 24375  002602  B0D8               	btfsc	status,0,c
 24376  002604  2A25               	incf	i2printf@val+1,f,c
 24377                           
 24378                           ;doprnt.c: 1264: }
 24379                           ;doprnt.c: 1266: }
 24380  002606  D00C               	goto	i2l7050
 24381  002608                     i2l7046:
 24382                           
 24383                           ;doprnt.c: 1268: else
 24384                           ;doprnt.c: 1273: {
 24385                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24386  002608  C020  FFD9         	movff	i2printf@ap,fsr2l
 24387  00260C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24388  002610  CFDE F024          	movff	postinc2,i2printf@val
 24389  002614  CFDD F025          	movff	postdec2,i2printf@val+1
 24390  002618  0E02               	movlw	2
 24391  00261A  2620               	addwf	i2printf@ap,f,c
 24392  00261C  0E00               	movlw	0
 24393  00261E  2221               	addwfc	i2printf@ap+1,f,c
 24394  002620                     i2l7050:
 24395                           
 24396                           ;doprnt.c: 1287: }
 24397                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24398  002620  0E01               	movlw	1
 24399  002622  6E27               	movwf	i2printf@c,c
 24400  002624                     i2l7052:
 24401  002624  0E05               	movlw	5
 24402  002626  1827               	xorwf	i2printf@c,w,c
 24403  002628  B4D8               	btfsc	status,2,c
 24404  00262A  D015               	goto	i2l7064
 24405                           
 24406                           ;doprnt.c: 1306: if(val < dpowers[c])
 24407  00262C  5027               	movf	i2printf@c,w,c
 24408  00262E  0D02               	mullw	2
 24409  002630  0E9C               	movlw	low _dpowers
 24410  002632  24F3               	addwf	prodl,w,c
 24411  002634  6EF6               	movwf	tblptrl,c
 24412  002636  0EFA               	movlw	high _dpowers
 24413  002638  20F4               	addwfc	prodh,w,c
 24414  00263A  6EF7               	movwf	tblptrh,c
 24415  00263C                     	if	1	;There are 3 active tblptr bytes
 24416  00263C  6AF8               	clrf	tblptru,c
 24417  00263E  0E00               	movlw	low (__mediumconst shr (0+16))
 24418  002640  22F8               	addwfc	tblptru,f,c
 24419  002642                     	endif
 24420  002642  0009               	tblrd		*+
 24421  002644  50F5               	movf	tablat,w,c
 24422  002646  5C24               	subwf	i2printf@val,w,c
 24423  002648  0009               	tblrd		*+
 24424  00264A  50F5               	movf	tablat,w,c
 24425  00264C  5825               	subwfb	i2printf@val+1,w,c
 24426  00264E  A0D8               	btfss	status,0,c
 24427  002650  D002               	goto	i2l7064
 24428                           
 24429                           ;doprnt.c: 1307: break;
 24430  002652  2A27               	incf	i2printf@c,f,c
 24431  002654  D7E7               	goto	i2l7052
 24432  002656                     i2l7064:
 24433                           
 24434                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24435  002656  5028               	movf	i2printf@width,w,c
 24436  002658  1029               	iorwf	i2printf@width+1,w,c
 24437  00265A  B4D8               	btfsc	status,2,c
 24438  00265C  D009               	goto	i2l7070
 24439  00265E  C026  F019         	movff	i2printf@flag,??i2_printf
 24440  002662  0E03               	movlw	3
 24441  002664  1619               	andwf	??i2_printf,f,c
 24442  002666  B4D8               	btfsc	status,2,c
 24443  002668  D003               	goto	i2l7070
 24444                           
 24445                           ;doprnt.c: 1346: width--;
 24446  00266A  0628               	decf	i2printf@width,f,c
 24447  00266C  A0D8               	btfss	status,0,c
 24448  00266E  0629               	decf	i2printf@width+1,f,c
 24449  002670                     i2l7070:
 24450                           
 24451                           ;doprnt.c: 1381: if(width > c)
 24452  002670  0E80               	movlw	128
 24453  002672  BE27               	btfsc	i2printf@c,7,c
 24454  002674  0E7F               	movlw	127
 24455  002676  6E19               	movwf	??i2_printf& (0+255),c
 24456  002678  5028               	movf	i2printf@width,w,c
 24457  00267A  5C27               	subwf	i2printf@c,w,c
 24458  00267C  5029               	movf	i2printf@width+1,w,c
 24459  00267E  0A80               	xorlw	128
 24460  002680  5819               	subwfb	??i2_printf& (0+255),w,c
 24461  002682  B0D8               	btfsc	status,0,c
 24462  002684  D007               	goto	i2l7074
 24463                           
 24464                           ;doprnt.c: 1382: width -= c;
 24465  002686  5027               	movf	i2printf@c,w,c
 24466  002688  5E28               	subwf	i2printf@width,f,c
 24467  00268A  0E00               	movlw	0
 24468  00268C  BE27               	btfsc	i2printf@c,7,c
 24469  00268E  0EFF               	movlw	255
 24470  002690  5A29               	subwfb	i2printf@width+1,f,c
 24471  002692  D004               	goto	i2l7076
 24472  002694                     i2l7074:
 24473                           
 24474                           ;doprnt.c: 1383: else
 24475                           ;doprnt.c: 1384: width = 0;
 24476  002694  0E00               	movlw	0
 24477  002696  6E29               	movwf	i2printf@width+1,c
 24478  002698  0E00               	movlw	0
 24479  00269A  6E28               	movwf	i2printf@width,c
 24480  00269C                     i2l7076:
 24481                           
 24482                           ;doprnt.c: 1387: if(flag & 0x04) {
 24483  00269C  A426               	btfss	i2printf@flag,2,c
 24484  00269E  D014               	goto	i2l7088
 24485                           
 24486                           ;doprnt.c: 1392: if(flag & 0x03)
 24487  0026A0  C026  F019         	movff	i2printf@flag,??i2_printf
 24488  0026A4  0E03               	movlw	3
 24489  0026A6  1619               	andwf	??i2_printf,f,c
 24490  0026A8  B4D8               	btfsc	status,2,c
 24491  0026AA  D003               	goto	i2l7082
 24492                           
 24493                           ;doprnt.c: 1393: (putch('-') );
 24494  0026AC  0E2D               	movlw	45
 24495  0026AE  ECF7  F02D         	call	i2_putch
 24496  0026B2                     i2l7082:
 24497                           
 24498                           ;doprnt.c: 1415: if(width)
 24499  0026B2  5028               	movf	i2printf@width,w,c
 24500  0026B4  1029               	iorwf	i2printf@width+1,w,c
 24501  0026B6  B4D8               	btfsc	status,2,c
 24502  0026B8  D01E               	goto	i2l7098
 24503                           
 24504                           ;doprnt.c: 1417: (putch('0') );
 24505                           
 24506                           ;doprnt.c: 1416: do
 24507  0026BA  0E30               	movlw	48
 24508  0026BC  ECF7  F02D         	call	i2_putch
 24509                           
 24510                           ;doprnt.c: 1418: while(--width);
 24511  0026C0  0628               	decf	i2printf@width,f,c
 24512  0026C2  A0D8               	btfss	status,0,c
 24513  0026C4  0629               	decf	i2printf@width+1,f,c
 24514  0026C6  D7F5               	goto	i2l7082
 24515  0026C8                     i2l7088:
 24516                           
 24517                           ;doprnt.c: 1422: {
 24518                           ;doprnt.c: 1424: if(width
 24519                           ;doprnt.c: 1428: )
 24520  0026C8  5028               	movf	i2printf@width,w,c
 24521  0026CA  1029               	iorwf	i2printf@width+1,w,c
 24522  0026CC  B4D8               	btfsc	status,2,c
 24523  0026CE  D00A               	goto	i2l7094
 24524  0026D0                     i2l7090:
 24525                           
 24526                           ;doprnt.c: 1430: (putch(' ') );
 24527  0026D0  0E20               	movlw	32
 24528  0026D2  ECF7  F02D         	call	i2_putch
 24529                           
 24530                           ;doprnt.c: 1431: while(--width);
 24531  0026D6  0628               	decf	i2printf@width,f,c
 24532  0026D8  A0D8               	btfss	status,0,c
 24533  0026DA  0629               	decf	i2printf@width+1,f,c
 24534  0026DC  5028               	movf	i2printf@width,w,c
 24535  0026DE  1029               	iorwf	i2printf@width+1,w,c
 24536  0026E0  A4D8               	btfss	status,2,c
 24537  0026E2  D7F6               	goto	i2l7090
 24538  0026E4                     i2l7094:
 24539                           
 24540                           ;doprnt.c: 1438: if(flag & 0x03)
 24541  0026E4  C026  F019         	movff	i2printf@flag,??i2_printf
 24542  0026E8  0E03               	movlw	3
 24543  0026EA  1619               	andwf	??i2_printf,f,c
 24544  0026EC  B4D8               	btfsc	status,2,c
 24545  0026EE  D003               	goto	i2l7098
 24546                           
 24547                           ;doprnt.c: 1439: (putch('-') );
 24548  0026F0  0E2D               	movlw	45
 24549  0026F2  ECF7  F02D         	call	i2_putch
 24550  0026F6                     i2l7098:
 24551                           
 24552                           ;doprnt.c: 1469: }
 24553                           ;doprnt.c: 1472: prec = c;
 24554  0026F6  C027  F01D         	movff	i2printf@c,i2printf@prec
 24555                           
 24556                           ;doprnt.c: 1474: while(prec--) {
 24557  0026FA  D027               	goto	i2l7104
 24558  0026FC                     i2l7100:
 24559                           
 24560                           ;doprnt.c: 1478: {
 24561                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24562  0026FC  501D               	movf	i2printf@prec,w,c
 24563  0026FE  0D02               	mullw	2
 24564  002700  0E9C               	movlw	low _dpowers
 24565  002702  24F3               	addwf	prodl,w,c
 24566  002704  6EF6               	movwf	tblptrl,c
 24567  002706  0EFA               	movlw	high _dpowers
 24568  002708  20F4               	addwfc	prodh,w,c
 24569  00270A  6EF7               	movwf	tblptrh,c
 24570  00270C                     	if	1	;There are 3 active tblptr bytes
 24571  00270C  6AF8               	clrf	tblptru,c
 24572  00270E  0E00               	movlw	low (__mediumconst shr (0+16))
 24573  002710  22F8               	addwfc	tblptru,f,c
 24574  002712                     	endif
 24575  002712  0009               	tblrd		*+
 24576  002714  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24577  002718  000A               	tblrd		*-
 24578  00271A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24579  00271E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24580  002722  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24581  002726  ECC1  F029         	call	i2___lwdiv	;wreg free
 24582  00272A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24583  00272E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24584  002732  0E00               	movlw	0
 24585  002734  6E04               	movwf	i2___lwmod@divisor+1,c
 24586  002736  0E0A               	movlw	10
 24587  002738  6E03               	movwf	i2___lwmod@divisor,c
 24588  00273A  ECC8  F02A         	call	i2___lwmod	;wreg free
 24589  00273E  5001               	movf	?i2___lwmod,w,c
 24590  002740  0F30               	addlw	48
 24591  002742  6E27               	movwf	i2printf@c,c
 24592                           
 24593                           ;doprnt.c: 1523: }
 24594                           ;doprnt.c: 1524: (putch(c) );
 24595  002744  5027               	movf	i2printf@c,w,c
 24596  002746  ECF7  F02D         	call	i2_putch
 24597  00274A                     i2l7104:
 24598  00274A  061D               	decf	i2printf@prec,f,c
 24599  00274C  281D               	incf	i2printf@prec,w,c
 24600  00274E  A4D8               	btfss	status,2,c
 24601  002750  D7D5               	goto	i2l7100
 24602  002752                     i2l7106:
 24603  002752  C00D  FFF6         	movff	i2printf@f,tblptrl
 24604  002756  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24605  00275A  4A0D               	infsnz	i2printf@f,f,c
 24606  00275C  2A0E               	incf	i2printf@f+1,f,c
 24607  00275E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24608  00275E  6AF8               	clrf	tblptru,c
 24609  002760                     	endif
 24610  002760                     	if	0	;tblptru may be non-zero
 24611  002760                     	endif
 24612  002760  0008               	tblrd		*
 24613  002762  CFF5 F027          	movff	tablat,i2printf@c
 24614  002766  5027               	movf	i2printf@c,w,c
 24615  002768  B4D8               	btfsc	status,2,c
 24616  00276A  0012               	return	
 24617  00276C  D64E               	goto	i2l6976
 24618  00276E                     __end_ofi2_printf:
 24619                           	opt stack 0
 24620                           pclatu	equ	0xFFB
 24621                           pclath	equ	0xFFA
 24622                           tblptru	equ	0xFF8
 24623                           tblptrh	equ	0xFF7
 24624                           tblptrl	equ	0xFF6
 24625                           tablat	equ	0xFF5
 24626                           prodh	equ	0xFF4
 24627                           prodl	equ	0xFF3
 24628                           intcon	equ	0xFF2
 24629                           intcon2	equ	0xFF1
 24630                           intcon3	equ	0xFF0
 24631                           indf0	equ	0xFEF
 24632                           postinc0	equ	0xFEE
 24633                           fsr0h	equ	0xFEA
 24634                           fsr0l	equ	0xFE9
 24635                           wreg	equ	0xFE8
 24636                           postdec1	equ	0xFE5
 24637                           fsr1h	equ	0xFE2
 24638                           fsr1l	equ	0xFE1
 24639                           indf2	equ	0xFDF
 24640                           postinc2	equ	0xFDE
 24641                           postdec2	equ	0xFDD
 24642                           fsr2h	equ	0xFDA
 24643                           fsr2l	equ	0xFD9
 24644                           status	equ	0xFD8
 24645                           
 24646 ;; *************** function i2_putch *****************
 24647 ;; Defined at:
 24648 ;;		line 20 in file "lcd.c"
 24649 ;; Parameters:    Size  Location     Type
 24650 ;;  data            1    wreg     unsigned char 
 24651 ;; Auto vars:     Size  Location     Type
 24652 ;;  data            1    2[COMRAM] unsigned char 
 24653 ;; Return value:  Size  Location     Type
 24654 ;;                  1    wreg      void 
 24655 ;; Registers used:
 24656 ;;		wreg, status,2, status,0, cstack
 24657 ;; Tracked objects:
 24658 ;;		On entry : 0/0
 24659 ;;		On exit  : 0/0
 24660 ;;		Unchanged: 0/0
 24661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24665 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24666 ;;Total ram usage:        1 bytes
 24667 ;; Hardware stack levels used:    1
 24668 ;; Hardware stack levels required when called:    1
 24669 ;; This function calls:
 24670 ;;		i2_lcdNibble
 24671 ;; This function is called by:
 24672 ;;		i2_printf
 24673 ;; This function uses a non-reentrant model
 24674 ;;
 24675                           
 24676                           	psect	text88
 24677  005BEE                     __ptext88:
 24678                           	opt stack 0
 24679  005BEE                     i2_putch:
 24680                           	opt stack 20
 24681                           
 24682                           ;incstack = 0
 24683                           ;i2putch@data stored from wreg
 24684  005BEE  6E03               	movwf	i2putch@data,c
 24685                           
 24686                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24687  005BF0  848C               	bsf	3980,2,c	;volatile
 24688                           
 24689                           ;lcd.c: 22: lcdNibble(data);
 24690  005BF2  5003               	movf	i2putch@data,w,c
 24691  005BF4  EC94  F029         	call	i2_lcdNibble
 24692  005BF8  0012               	return		;funcret
 24693  005BFA                     __end_ofi2_putch:
 24694                           	opt stack 0
 24695                           pclatu	equ	0xFFB
 24696                           pclath	equ	0xFFA
 24697                           tblptru	equ	0xFF8
 24698                           tblptrh	equ	0xFF7
 24699                           tblptrl	equ	0xFF6
 24700                           tablat	equ	0xFF5
 24701                           prodh	equ	0xFF4
 24702                           prodl	equ	0xFF3
 24703                           intcon	equ	0xFF2
 24704                           intcon2	equ	0xFF1
 24705                           intcon3	equ	0xFF0
 24706                           indf0	equ	0xFEF
 24707                           postinc0	equ	0xFEE
 24708                           fsr0h	equ	0xFEA
 24709                           fsr0l	equ	0xFE9
 24710                           wreg	equ	0xFE8
 24711                           postdec1	equ	0xFE5
 24712                           fsr1h	equ	0xFE2
 24713                           fsr1l	equ	0xFE1
 24714                           indf2	equ	0xFDF
 24715                           postinc2	equ	0xFDE
 24716                           postdec2	equ	0xFDD
 24717                           fsr2h	equ	0xFDA
 24718                           fsr2l	equ	0xFD9
 24719                           status	equ	0xFD8
 24720                           
 24721 ;; *************** function i2_isdigit *****************
 24722 ;; Defined at:
 24723 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24724 ;; Parameters:    Size  Location     Type
 24725 ;;  c               1    wreg     unsigned char 
 24726 ;; Auto vars:     Size  Location     Type
 24727 ;;  c               1    2[COMRAM] unsigned char 
 24728 ;; Return value:  Size  Location     Type
 24729 ;;		None               void
 24730 ;; Registers used:
 24731 ;;		wreg, status,2, status,0
 24732 ;; Tracked objects:
 24733 ;;		On entry : 0/0
 24734 ;;		On exit  : 0/0
 24735 ;;		Unchanged: 0/0
 24736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24740 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24741 ;;Total ram usage:        3 bytes
 24742 ;; Hardware stack levels used:    1
 24743 ;; This function calls:
 24744 ;;		Nothing
 24745 ;; This function is called by:
 24746 ;;		i2_printf
 24747 ;; This function uses a non-reentrant model
 24748 ;;
 24749                           
 24750                           	psect	text89
 24751  005B0E                     __ptext89:
 24752                           	opt stack 0
 24753  005B0E                     i2_isdigit:
 24754                           	opt stack 21
 24755                           
 24756                           ;incstack = 0
 24757                           ;i2isdigit@c stored from wreg
 24758  005B0E  6E03               	movwf	i2isdigit@c,c
 24759  005B10  0E00               	movlw	0
 24760  005B12  6E02               	movwf	i2_isdigit$2065,c
 24761  005B14  0E3A               	movlw	58
 24762  005B16  6003               	cpfslt	i2isdigit@c,c
 24763  005B18  D005               	goto	i2l6640
 24764  005B1A  0E2F               	movlw	47
 24765  005B1C  6403               	cpfsgt	i2isdigit@c,c
 24766  005B1E  D002               	goto	i2l6640
 24767  005B20  0E01               	movlw	1
 24768  005B22  6E02               	movwf	i2_isdigit$2065,c
 24769  005B24                     i2l6640:
 24770  005B24  C002  F001         	movff	i2_isdigit$2065,??i2_isdigit
 24771  005B28  3001               	rrcf	??i2_isdigit,w,c
 24772  005B2A  0012               	return	
 24773  005B2C                     __end_ofi2_isdigit:
 24774                           	opt stack 0
 24775                           pclatu	equ	0xFFB
 24776                           pclath	equ	0xFFA
 24777                           tblptru	equ	0xFF8
 24778                           tblptrh	equ	0xFF7
 24779                           tblptrl	equ	0xFF6
 24780                           tablat	equ	0xFF5
 24781                           prodh	equ	0xFF4
 24782                           prodl	equ	0xFF3
 24783                           intcon	equ	0xFF2
 24784                           intcon2	equ	0xFF1
 24785                           intcon3	equ	0xFF0
 24786                           indf0	equ	0xFEF
 24787                           postinc0	equ	0xFEE
 24788                           fsr0h	equ	0xFEA
 24789                           fsr0l	equ	0xFE9
 24790                           wreg	equ	0xFE8
 24791                           postdec1	equ	0xFE5
 24792                           fsr1h	equ	0xFE2
 24793                           fsr1l	equ	0xFE1
 24794                           indf2	equ	0xFDF
 24795                           postinc2	equ	0xFDE
 24796                           postdec2	equ	0xFDD
 24797                           fsr2h	equ	0xFDA
 24798                           fsr2l	equ	0xFD9
 24799                           status	equ	0xFD8
 24800                           
 24801 ;; *************** function i2___wmul *****************
 24802 ;; Defined at:
 24803 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24804 ;; Parameters:    Size  Location     Type
 24805 ;;  multiplier      2    0[COMRAM] unsigned int 
 24806 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24807 ;; Auto vars:     Size  Location     Type
 24808 ;;  __wmul          2    4[COMRAM] unsigned int 
 24809 ;; Return value:  Size  Location     Type
 24810 ;;                  2    0[COMRAM] unsigned int 
 24811 ;; Registers used:
 24812 ;;		wreg, status,2, status,0, prodl, prodh
 24813 ;; Tracked objects:
 24814 ;;		On entry : 0/0
 24815 ;;		On exit  : 0/0
 24816 ;;		Unchanged: 0/0
 24817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24818 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24821 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24822 ;;Total ram usage:        6 bytes
 24823 ;; Hardware stack levels used:    1
 24824 ;; This function calls:
 24825 ;;		Nothing
 24826 ;; This function is called by:
 24827 ;;		_printSortTimer
 24828 ;;		_retrieveLog
 24829 ;;		i2_printf
 24830 ;; This function uses a non-reentrant model
 24831 ;;
 24832                           
 24833                           	psect	text90
 24834  005A5A                     __ptext90:
 24835                           	opt stack 0
 24836  005A5A                     i2___wmul:
 24837                           	opt stack 21
 24838                           
 24839                           ;incstack = 0
 24840  005A5A  5001               	movf	i2___wmul@multiplier,w,c
 24841  005A5C  0203               	mulwf	i2___wmul@multiplicand,c
 24842  005A5E  CFF3 F005          	movff	prodl,i2___wmul@product
 24843  005A62  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24844  005A66  5001               	movf	i2___wmul@multiplier,w,c
 24845  005A68  0204               	mulwf	i2___wmul@multiplicand+1,c
 24846  005A6A  50F3               	movf	prodl,w,c
 24847  005A6C  2606               	addwf	i2___wmul@product+1,f,c
 24848  005A6E  5002               	movf	i2___wmul@multiplier+1,w,c
 24849  005A70  0203               	mulwf	i2___wmul@multiplicand,c
 24850  005A72  50F3               	movf	prodl,w,c
 24851  005A74  2606               	addwf	i2___wmul@product+1,f,c
 24852  005A76  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24853  005A7A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24854  005A7E  0012               	return	
 24855  005A80                     __end_ofi2___wmul:
 24856                           	opt stack 0
 24857                           pclatu	equ	0xFFB
 24858                           pclath	equ	0xFFA
 24859                           tblptru	equ	0xFF8
 24860                           tblptrh	equ	0xFF7
 24861                           tblptrl	equ	0xFF6
 24862                           tablat	equ	0xFF5
 24863                           prodh	equ	0xFF4
 24864                           prodl	equ	0xFF3
 24865                           intcon	equ	0xFF2
 24866                           intcon2	equ	0xFF1
 24867                           intcon3	equ	0xFF0
 24868                           indf0	equ	0xFEF
 24869                           postinc0	equ	0xFEE
 24870                           fsr0h	equ	0xFEA
 24871                           fsr0l	equ	0xFE9
 24872                           wreg	equ	0xFE8
 24873                           postdec1	equ	0xFE5
 24874                           fsr1h	equ	0xFE2
 24875                           fsr1l	equ	0xFE1
 24876                           indf2	equ	0xFDF
 24877                           postinc2	equ	0xFDE
 24878                           postdec2	equ	0xFDD
 24879                           fsr2h	equ	0xFDA
 24880                           fsr2l	equ	0xFD9
 24881                           status	equ	0xFD8
 24882                           
 24883 ;; *************** function i2___lwmod *****************
 24884 ;; Defined at:
 24885 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24886 ;; Parameters:    Size  Location     Type
 24887 ;;  dividend        2    0[COMRAM] unsigned int 
 24888 ;;  divisor         2    2[COMRAM] unsigned int 
 24889 ;; Auto vars:     Size  Location     Type
 24890 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24891 ;; Return value:  Size  Location     Type
 24892 ;;                  2    0[COMRAM] unsigned int 
 24893 ;; Registers used:
 24894 ;;		wreg, status,2, status,0
 24895 ;; Tracked objects:
 24896 ;;		On entry : 0/0
 24897 ;;		On exit  : 0/0
 24898 ;;		Unchanged: 0/0
 24899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24903 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24904 ;;Total ram usage:        5 bytes
 24905 ;; Hardware stack levels used:    1
 24906 ;; This function calls:
 24907 ;;		Nothing
 24908 ;; This function is called by:
 24909 ;;		_printSortTimer
 24910 ;;		i2_printf
 24911 ;; This function uses a non-reentrant model
 24912 ;;
 24913                           
 24914                           	psect	text91
 24915  005590                     __ptext91:
 24916                           	opt stack 0
 24917  005590                     i2___lwmod:
 24918                           	opt stack 21
 24919                           
 24920                           ;incstack = 0
 24921  005590  5003               	movf	i2___lwmod@divisor,w,c
 24922  005592  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24923  005594  B4D8               	btfsc	status,2,c
 24924  005596  D018               	goto	i2l1977
 24925  005598  0E01               	movlw	1
 24926  00559A  6E05               	movwf	i2___lwmod@counter,c
 24927  00559C  D004               	goto	i2l6672
 24928  00559E                     i2l6670:
 24929  00559E  90D8               	bcf	status,0,c
 24930  0055A0  3603               	rlcf	i2___lwmod@divisor,f,c
 24931  0055A2  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24932  0055A4  2A05               	incf	i2___lwmod@counter,f,c
 24933  0055A6                     i2l6672:
 24934  0055A6  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24935  0055A8  D7FA               	goto	i2l6670
 24936  0055AA                     i2l6674:
 24937  0055AA  5003               	movf	i2___lwmod@divisor,w,c
 24938  0055AC  5C01               	subwf	i2___lwmod@dividend,w,c
 24939  0055AE  5004               	movf	i2___lwmod@divisor+1,w,c
 24940  0055B0  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24941  0055B2  A0D8               	btfss	status,0,c
 24942  0055B4  D004               	goto	i2l6678
 24943  0055B6  5003               	movf	i2___lwmod@divisor,w,c
 24944  0055B8  5E01               	subwf	i2___lwmod@dividend,f,c
 24945  0055BA  5004               	movf	i2___lwmod@divisor+1,w,c
 24946  0055BC  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24947  0055BE                     i2l6678:
 24948  0055BE  90D8               	bcf	status,0,c
 24949  0055C0  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24950  0055C2  3203               	rrcf	i2___lwmod@divisor,f,c
 24951  0055C4  2E05               	decfsz	i2___lwmod@counter,f,c
 24952  0055C6  D7F1               	goto	i2l6674
 24953  0055C8                     i2l1977:
 24954  0055C8  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24955  0055CC  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24956  0055D0  0012               	return		;funcret
 24957  0055D2                     __end_ofi2___lwmod:
 24958                           	opt stack 0
 24959                           pclatu	equ	0xFFB
 24960                           pclath	equ	0xFFA
 24961                           tblptru	equ	0xFF8
 24962                           tblptrh	equ	0xFF7
 24963                           tblptrl	equ	0xFF6
 24964                           tablat	equ	0xFF5
 24965                           prodh	equ	0xFF4
 24966                           prodl	equ	0xFF3
 24967                           intcon	equ	0xFF2
 24968                           intcon2	equ	0xFF1
 24969                           intcon3	equ	0xFF0
 24970                           indf0	equ	0xFEF
 24971                           postinc0	equ	0xFEE
 24972                           fsr0h	equ	0xFEA
 24973                           fsr0l	equ	0xFE9
 24974                           wreg	equ	0xFE8
 24975                           postdec1	equ	0xFE5
 24976                           fsr1h	equ	0xFE2
 24977                           fsr1l	equ	0xFE1
 24978                           indf2	equ	0xFDF
 24979                           postinc2	equ	0xFDE
 24980                           postdec2	equ	0xFDD
 24981                           fsr2h	equ	0xFDA
 24982                           fsr2l	equ	0xFD9
 24983                           status	equ	0xFD8
 24984                           
 24985 ;; *************** function i2___lwdiv *****************
 24986 ;; Defined at:
 24987 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24988 ;; Parameters:    Size  Location     Type
 24989 ;;  dividend        2    5[COMRAM] unsigned int 
 24990 ;;  divisor         2    7[COMRAM] unsigned int 
 24991 ;; Auto vars:     Size  Location     Type
 24992 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24993 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24994 ;; Return value:  Size  Location     Type
 24995 ;;                  2    5[COMRAM] unsigned int 
 24996 ;; Registers used:
 24997 ;;		wreg, status,2, status,0
 24998 ;; Tracked objects:
 24999 ;;		On entry : 0/0
 25000 ;;		On exit  : 0/0
 25001 ;;		Unchanged: 0/0
 25002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25004 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25006 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25007 ;;Total ram usage:        7 bytes
 25008 ;; Hardware stack levels used:    1
 25009 ;; This function calls:
 25010 ;;		Nothing
 25011 ;; This function is called by:
 25012 ;;		_printSortTimer
 25013 ;;		i2_printf
 25014 ;; This function uses a non-reentrant model
 25015 ;;
 25016                           
 25017                           	psect	text92
 25018  005382                     __ptext92:
 25019                           	opt stack 0
 25020  005382                     i2___lwdiv:
 25021                           	opt stack 21
 25022                           
 25023                           ;incstack = 0
 25024  005382  0E00               	movlw	0
 25025  005384  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25026  005386  0E00               	movlw	0
 25027  005388  6E0A               	movwf	i2___lwdiv@quotient,c
 25028  00538A  5008               	movf	i2___lwdiv@divisor,w,c
 25029  00538C  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25030  00538E  B4D8               	btfsc	status,2,c
 25031  005390  D01C               	goto	i2l1967
 25032  005392  0E01               	movlw	1
 25033  005394  6E0C               	movwf	i2___lwdiv@counter,c
 25034  005396  D004               	goto	i2l6652
 25035  005398                     i2l6650:
 25036  005398  90D8               	bcf	status,0,c
 25037  00539A  3608               	rlcf	i2___lwdiv@divisor,f,c
 25038  00539C  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25039  00539E  2A0C               	incf	i2___lwdiv@counter,f,c
 25040  0053A0                     i2l6652:
 25041  0053A0  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25042  0053A2  D7FA               	goto	i2l6650
 25043  0053A4                     i2l6654:
 25044  0053A4  90D8               	bcf	status,0,c
 25045  0053A6  360A               	rlcf	i2___lwdiv@quotient,f,c
 25046  0053A8  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25047  0053AA  5008               	movf	i2___lwdiv@divisor,w,c
 25048  0053AC  5C06               	subwf	i2___lwdiv@dividend,w,c
 25049  0053AE  5009               	movf	i2___lwdiv@divisor+1,w,c
 25050  0053B0  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25051  0053B2  A0D8               	btfss	status,0,c
 25052  0053B4  D005               	goto	i2l6662
 25053  0053B6  5008               	movf	i2___lwdiv@divisor,w,c
 25054  0053B8  5E06               	subwf	i2___lwdiv@dividend,f,c
 25055  0053BA  5009               	movf	i2___lwdiv@divisor+1,w,c
 25056  0053BC  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25057  0053BE  800A               	bsf	i2___lwdiv@quotient,0,c
 25058  0053C0                     i2l6662:
 25059  0053C0  90D8               	bcf	status,0,c
 25060  0053C2  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25061  0053C4  3208               	rrcf	i2___lwdiv@divisor,f,c
 25062  0053C6  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25063  0053C8  D7ED               	goto	i2l6654
 25064  0053CA                     i2l1967:
 25065  0053CA  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25066  0053CE  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25067  0053D2  0012               	return		;funcret
 25068  0053D4                     __end_ofi2___lwdiv:
 25069                           	opt stack 0
 25070                           pclatu	equ	0xFFB
 25071                           pclath	equ	0xFFA
 25072                           tblptru	equ	0xFF8
 25073                           tblptrh	equ	0xFF7
 25074                           tblptrl	equ	0xFF6
 25075                           tablat	equ	0xFF5
 25076                           prodh	equ	0xFF4
 25077                           prodl	equ	0xFF3
 25078                           intcon	equ	0xFF2
 25079                           intcon2	equ	0xFF1
 25080                           intcon3	equ	0xFF0
 25081                           indf0	equ	0xFEF
 25082                           postinc0	equ	0xFEE
 25083                           fsr0h	equ	0xFEA
 25084                           fsr0l	equ	0xFE9
 25085                           wreg	equ	0xFE8
 25086                           postdec1	equ	0xFE5
 25087                           fsr1h	equ	0xFE2
 25088                           fsr1l	equ	0xFE1
 25089                           indf2	equ	0xFDF
 25090                           postinc2	equ	0xFDE
 25091                           postdec2	equ	0xFDD
 25092                           fsr2h	equ	0xFDA
 25093                           fsr2l	equ	0xFD9
 25094                           status	equ	0xFD8
 25095                           
 25096 ;; *************** function i2_lcdInst *****************
 25097 ;; Defined at:
 25098 ;;		line 15 in file "lcd.c"
 25099 ;; Parameters:    Size  Location     Type
 25100 ;;  data            1    wreg     unsigned char 
 25101 ;; Auto vars:     Size  Location     Type
 25102 ;;  data            1    2[COMRAM] unsigned char 
 25103 ;; Return value:  Size  Location     Type
 25104 ;;                  1    wreg      void 
 25105 ;; Registers used:
 25106 ;;		wreg, status,2, status,0, cstack
 25107 ;; Tracked objects:
 25108 ;;		On entry : 0/0
 25109 ;;		On exit  : 0/0
 25110 ;;		Unchanged: 0/0
 25111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25113 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25115 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25116 ;;Total ram usage:        1 bytes
 25117 ;; Hardware stack levels used:    1
 25118 ;; Hardware stack levels required when called:    1
 25119 ;; This function calls:
 25120 ;;		i2_lcdNibble
 25121 ;; This function is called by:
 25122 ;;		_change_state_to_menu_11
 25123 ;;		_change_state_to_menu_23
 25124 ;;		_change_state_to_logs_11
 25125 ;;		_change_state_to_logs_12
 25126 ;;		_change_state_to_logs_22
 25127 ;;		_change_state_to_logs_23
 25128 ;;		_change_state_to_logs_33
 25129 ;;		_change_state_to_logs_34
 25130 ;;		_printSortTimer
 25131 ;;		i2_change_state_to_menu_start
 25132 ;;		i2_change_state_to_menu_12
 25133 ;;		i2_change_state_to_menu_22
 25134 ;;		i2_printRTC
 25135 ;; This function uses a non-reentrant model
 25136 ;;
 25137                           
 25138                           	psect	text93
 25139  005BFA                     __ptext93:
 25140                           	opt stack 0
 25141  005BFA                     i2_lcdInst:
 25142                           	opt stack 20
 25143                           
 25144                           ;incstack = 0
 25145                           ;i2lcdInst@data stored from wreg
 25146  005BFA  6E03               	movwf	i2lcdInst@data,c
 25147                           
 25148                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25149  005BFC  948C               	bcf	3980,2,c	;volatile
 25150                           
 25151                           ;lcd.c: 17: lcdNibble(data);
 25152  005BFE  5003               	movf	i2lcdInst@data,w,c
 25153  005C00  EC94  F029         	call	i2_lcdNibble
 25154  005C04  0012               	return		;funcret
 25155  005C06                     __end_ofi2_lcdInst:
 25156                           	opt stack 0
 25157                           pclatu	equ	0xFFB
 25158                           pclath	equ	0xFFA
 25159                           tblptru	equ	0xFF8
 25160                           tblptrh	equ	0xFF7
 25161                           tblptrl	equ	0xFF6
 25162                           tablat	equ	0xFF5
 25163                           prodh	equ	0xFF4
 25164                           prodl	equ	0xFF3
 25165                           intcon	equ	0xFF2
 25166                           intcon2	equ	0xFF1
 25167                           intcon3	equ	0xFF0
 25168                           indf0	equ	0xFEF
 25169                           postinc0	equ	0xFEE
 25170                           fsr0h	equ	0xFEA
 25171                           fsr0l	equ	0xFE9
 25172                           wreg	equ	0xFE8
 25173                           postdec1	equ	0xFE5
 25174                           fsr1h	equ	0xFE2
 25175                           fsr1l	equ	0xFE1
 25176                           indf2	equ	0xFDF
 25177                           postinc2	equ	0xFDE
 25178                           postdec2	equ	0xFDD
 25179                           fsr2h	equ	0xFDA
 25180                           fsr2l	equ	0xFD9
 25181                           status	equ	0xFD8
 25182                           
 25183 ;; *************** function i2_lcdNibble *****************
 25184 ;; Defined at:
 25185 ;;		line 25 in file "lcd.c"
 25186 ;; Parameters:    Size  Location     Type
 25187 ;;  data            1    wreg     unsigned char 
 25188 ;; Auto vars:     Size  Location     Type
 25189 ;;  data            1    1[COMRAM] unsigned char 
 25190 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25191 ;; Return value:  Size  Location     Type
 25192 ;;                  1    wreg      void 
 25193 ;; Registers used:
 25194 ;;		wreg, status,2, status,0
 25195 ;; Tracked objects:
 25196 ;;		On entry : 0/0
 25197 ;;		On exit  : 0/0
 25198 ;;		Unchanged: 0/0
 25199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25201 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25203 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25204 ;;Total ram usage:        2 bytes
 25205 ;; Hardware stack levels used:    1
 25206 ;; This function calls:
 25207 ;;		Nothing
 25208 ;; This function is called by:
 25209 ;;		i2_lcdInst
 25210 ;;		i2_putch
 25211 ;; This function uses a non-reentrant model
 25212 ;;
 25213                           
 25214                           	psect	text94
 25215  005328                     __ptext94:
 25216                           	opt stack 0
 25217  005328                     i2_lcdNibble:
 25218                           	opt stack 20
 25219                           
 25220                           ;incstack = 0
 25221                           ;i2lcdNibble@data stored from wreg
 25222  005328  6E02               	movwf	i2lcdNibble@data,c
 25223                           
 25224                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25225  00532A  9EF2               	bcf	intcon,7,c	;volatile
 25226                           
 25227                           ;lcd.c: 28: char temp = data & 0xF0;
 25228  00532C  5002               	movf	i2lcdNibble@data,w,c
 25229  00532E  0BF0               	andlw	240
 25230  005330  6E01               	movwf	i2lcdNibble@temp,c
 25231                           
 25232                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25233  005332  508C               	movf	3980,w,c	;volatile
 25234  005334  0B0F               	andlw	15
 25235  005336  6E8C               	movwf	3980,c	;volatile
 25236                           
 25237                           ;lcd.c: 30: LATD = temp | LATD;
 25238  005338  5001               	movf	i2lcdNibble@temp,w,c
 25239  00533A  108C               	iorwf	3980,w,c	;volatile
 25240  00533C  6E8C               	movwf	3980,c	;volatile
 25241                           
 25242                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25243  00533E  868C               	bsf	3980,3,c	;volatile
 25244                           
 25245                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25246  005340  0E42               	movlw	66
 25247  005342                     i2u1132_47:
 25248  005342  2EE8               	decfsz	wreg,f,c
 25249  005344  D7FE               	bra	i2u1132_47
 25250  005346  D000               	nop2	
 25251                           
 25252                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25253  005348  968C               	bcf	3980,3,c	;volatile
 25254                           
 25255                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25256  00534A  0E42               	movlw	66
 25257  00534C                     i2u1133_47:
 25258  00534C  2EE8               	decfsz	wreg,f,c
 25259  00534E  D7FE               	bra	i2u1133_47
 25260  005350  D000               	nop2	
 25261                           
 25262                           ;lcd.c: 37: data = data << 4;
 25263  005352  3802               	swapf	i2lcdNibble@data,w,c
 25264  005354  0BF0               	andlw	240
 25265  005356  6E02               	movwf	i2lcdNibble@data,c
 25266                           
 25267                           ;lcd.c: 39: temp = data & 0xF0;
 25268  005358  5002               	movf	i2lcdNibble@data,w,c
 25269  00535A  0BF0               	andlw	240
 25270  00535C  6E01               	movwf	i2lcdNibble@temp,c
 25271                           
 25272                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25273  00535E  508C               	movf	3980,w,c	;volatile
 25274  005360  0B0F               	andlw	15
 25275  005362  6E8C               	movwf	3980,c	;volatile
 25276                           
 25277                           ;lcd.c: 41: LATD = temp | LATD;
 25278  005364  5001               	movf	i2lcdNibble@temp,w,c
 25279  005366  108C               	iorwf	3980,w,c	;volatile
 25280  005368  6E8C               	movwf	3980,c	;volatile
 25281                           
 25282                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25283  00536A  868C               	bsf	3980,3,c	;volatile
 25284                           
 25285                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25286  00536C  0E42               	movlw	66
 25287  00536E                     i2u1134_47:
 25288  00536E  2EE8               	decfsz	wreg,f,c
 25289  005370  D7FE               	bra	i2u1134_47
 25290  005372  D000               	nop2	
 25291                           
 25292                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25293  005374  968C               	bcf	3980,3,c	;volatile
 25294                           
 25295                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25296  005376  0E42               	movlw	66
 25297  005378                     i2u1135_47:
 25298  005378  2EE8               	decfsz	wreg,f,c
 25299  00537A  D7FE               	bra	i2u1135_47
 25300  00537C  D000               	nop2	
 25301                           
 25302                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25303  00537E  8EF2               	bsf	intcon,7,c	;volatile
 25304  005380  0012               	return		;funcret
 25305  005382                     __end_ofi2_lcdNibble:
 25306                           	opt stack 0
 25307                           pclatu	equ	0xFFB
 25308                           pclath	equ	0xFFA
 25309                           tblptru	equ	0xFF8
 25310                           tblptrh	equ	0xFF7
 25311                           tblptrl	equ	0xFF6
 25312                           tablat	equ	0xFF5
 25313                           prodh	equ	0xFF4
 25314                           prodl	equ	0xFF3
 25315                           intcon	equ	0xFF2
 25316                           intcon2	equ	0xFF1
 25317                           intcon3	equ	0xFF0
 25318                           indf0	equ	0xFEF
 25319                           postinc0	equ	0xFEE
 25320                           fsr0h	equ	0xFEA
 25321                           fsr0l	equ	0xFE9
 25322                           wreg	equ	0xFE8
 25323                           postdec1	equ	0xFE5
 25324                           fsr1h	equ	0xFE2
 25325                           fsr1l	equ	0xFE1
 25326                           indf2	equ	0xFDF
 25327                           postinc2	equ	0xFDE
 25328                           postdec2	equ	0xFDD
 25329                           fsr2h	equ	0xFDA
 25330                           fsr2l	equ	0xFD9
 25331                           status	equ	0xFD8
 25332                           
 25333 ;; *************** function i2_getRTC *****************
 25334 ;; Defined at:
 25335 ;;		line 44 in file "RTC.c"
 25336 ;; Parameters:    Size  Location     Type
 25337 ;;		None
 25338 ;; Auto vars:     Size  Location     Type
 25339 ;;  getRTC          2    3[COMRAM] int 
 25340 ;; Return value:  Size  Location     Type
 25341 ;;                  1    wreg      void 
 25342 ;; Registers used:
 25343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25344 ;; Tracked objects:
 25345 ;;		On entry : 0/0
 25346 ;;		On exit  : 0/0
 25347 ;;		Unchanged: 0/0
 25348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25352 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25353 ;;Total ram usage:        2 bytes
 25354 ;; Hardware stack levels used:    1
 25355 ;; Hardware stack levels required when called:    2
 25356 ;; This function calls:
 25357 ;;		i2_I2C_Master_Read
 25358 ;;		i2_I2C_Master_Start
 25359 ;;		i2_I2C_Master_Stop
 25360 ;;		i2_I2C_Master_Write
 25361 ;; This function is called by:
 25362 ;;		_printSortTimer
 25363 ;;		i2_printRTC
 25364 ;; This function uses a non-reentrant model
 25365 ;;
 25366                           
 25367                           	psect	text95
 25368  004FFC                     __ptext95:
 25369                           	opt stack 0
 25370  004FFC                     i2_getRTC:
 25371                           	opt stack 19
 25372                           
 25373                           ;RTC.c: 48: I2C_Master_Start();
 25374                           
 25375                           ;incstack = 0
 25376  004FFC  EC1D  F02E         	call	i2_I2C_Master_Start	;wreg free
 25377                           
 25378                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25379  005000  0E00               	movlw	0
 25380  005002  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25381  005004  0ED0               	movlw	208
 25382  005006  6E02               	movwf	i2I2C_Master_Write@d,c
 25383  005008  EC08  F02E         	call	i2_I2C_Master_Write	;wreg free
 25384                           
 25385                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25386  00500C  0E00               	movlw	0
 25387  00500E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25388  005010  0E00               	movlw	0
 25389  005012  6E02               	movwf	i2I2C_Master_Write@d,c
 25390  005014  EC08  F02E         	call	i2_I2C_Master_Write	;wreg free
 25391                           
 25392                           ;RTC.c: 51: I2C_Master_Stop();
 25393  005018  EC19  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25394                           
 25395                           ;RTC.c: 54: I2C_Master_Start();
 25396  00501C  EC1D  F02E         	call	i2_I2C_Master_Start	;wreg free
 25397                           
 25398                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25399  005020  0E00               	movlw	0
 25400  005022  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25401  005024  0ED1               	movlw	209
 25402  005026  6E02               	movwf	i2I2C_Master_Write@d,c
 25403  005028  EC08  F02E         	call	i2_I2C_Master_Write	;wreg free
 25404                           
 25405                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25406  00502C  0E00               	movlw	0
 25407  00502E  6E05               	movwf	i2getRTC@i+1,c
 25408  005030  0E00               	movlw	0
 25409  005032  6E04               	movwf	i2getRTC@i,c
 25410  005034                     i2l6948:
 25411  005034  BE05               	btfsc	i2getRTC@i+1,7,c
 25412  005036  D006               	goto	i2l6952
 25413  005038  5005               	movf	i2getRTC@i+1,w,c
 25414  00503A  E111               	bnz	i2l6958
 25415  00503C  0E06               	movlw	6
 25416  00503E  5C04               	subwf	i2getRTC@i,w,c
 25417  005040  B0D8               	btfsc	status,0,c
 25418  005042  D00D               	goto	i2l6958
 25419  005044                     i2l6952:
 25420                           
 25421                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25422  005044  0E24               	movlw	low _time
 25423  005046  2404               	addwf	i2getRTC@i,w,c
 25424  005048  6ED9               	movwf	fsr2l,c
 25425  00504A  0E01               	movlw	high _time
 25426  00504C  2005               	addwfc	i2getRTC@i+1,w,c
 25427  00504E  6EDA               	movwf	fsr2h,c
 25428  005050  0E01               	movlw	1
 25429  005052  EC40  F02D         	call	i2_I2C_Master_Read
 25430  005056  6EDF               	movwf	indf2,c
 25431  005058  4A04               	infsnz	i2getRTC@i,f,c
 25432  00505A  2A05               	incf	i2getRTC@i+1,f,c
 25433  00505C  D7EB               	goto	i2l6948
 25434  00505E                     i2l6958:
 25435                           
 25436                           ;RTC.c: 58: }
 25437                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25438  00505E  0E00               	movlw	0
 25439  005060  EC40  F02D         	call	i2_I2C_Master_Read
 25440  005064  0101               	movlb	1	; () banked
 25441  005066  6F2A               	movwf	(_time+6)& (0+255),b
 25442                           
 25443                           ;RTC.c: 60: I2C_Master_Stop();
 25444  005068  EC19  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25445  00506C  0012               	return		;funcret
 25446  00506E                     __end_ofi2_getRTC:
 25447                           	opt stack 0
 25448                           pclatu	equ	0xFFB
 25449                           pclath	equ	0xFFA
 25450                           tblptru	equ	0xFF8
 25451                           tblptrh	equ	0xFF7
 25452                           tblptrl	equ	0xFF6
 25453                           tablat	equ	0xFF5
 25454                           prodh	equ	0xFF4
 25455                           prodl	equ	0xFF3
 25456                           intcon	equ	0xFF2
 25457                           intcon2	equ	0xFF1
 25458                           intcon3	equ	0xFF0
 25459                           indf0	equ	0xFEF
 25460                           postinc0	equ	0xFEE
 25461                           fsr0h	equ	0xFEA
 25462                           fsr0l	equ	0xFE9
 25463                           wreg	equ	0xFE8
 25464                           postdec1	equ	0xFE5
 25465                           fsr1h	equ	0xFE2
 25466                           fsr1l	equ	0xFE1
 25467                           indf2	equ	0xFDF
 25468                           postinc2	equ	0xFDE
 25469                           postdec2	equ	0xFDD
 25470                           fsr2h	equ	0xFDA
 25471                           fsr2l	equ	0xFD9
 25472                           status	equ	0xFD8
 25473                           
 25474 ;; *************** function i2_I2C_Master_Write *****************
 25475 ;; Defined at:
 25476 ;;		line 49 in file "I2C.c"
 25477 ;; Parameters:    Size  Location     Type
 25478 ;;  d               2    1[COMRAM] unsigned int 
 25479 ;; Auto vars:     Size  Location     Type
 25480 ;;		None
 25481 ;; Return value:  Size  Location     Type
 25482 ;;                  1    wreg      void 
 25483 ;; Registers used:
 25484 ;;		wreg, status,2, status,0, cstack
 25485 ;; Tracked objects:
 25486 ;;		On entry : 0/0
 25487 ;;		On exit  : 0/0
 25488 ;;		Unchanged: 0/0
 25489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25490 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25493 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25494 ;;Total ram usage:        2 bytes
 25495 ;; Hardware stack levels used:    1
 25496 ;; Hardware stack levels required when called:    1
 25497 ;; This function calls:
 25498 ;;		i2_I2C_Master_Wait
 25499 ;; This function is called by:
 25500 ;;		i2_getRTC
 25501 ;; This function uses a non-reentrant model
 25502 ;;
 25503                           
 25504                           	psect	text96
 25505  005C10                     __ptext96:
 25506                           	opt stack 0
 25507  005C10                     i2_I2C_Master_Write:
 25508                           	opt stack 19
 25509                           
 25510                           ;I2C.c: 51: I2C_Master_Wait();
 25511                           
 25512                           ;incstack = 0
 25513  005C10  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25514                           
 25515                           ;I2C.c: 52: SSPBUF = d;
 25516  005C14  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25517  005C18  0012               	return		;funcret
 25518  005C1A                     __end_ofi2_I2C_Master_Write:
 25519                           	opt stack 0
 25520                           pclatu	equ	0xFFB
 25521                           pclath	equ	0xFFA
 25522                           tblptru	equ	0xFF8
 25523                           tblptrh	equ	0xFF7
 25524                           tblptrl	equ	0xFF6
 25525                           tablat	equ	0xFF5
 25526                           prodh	equ	0xFF4
 25527                           prodl	equ	0xFF3
 25528                           intcon	equ	0xFF2
 25529                           intcon2	equ	0xFF1
 25530                           intcon3	equ	0xFF0
 25531                           indf0	equ	0xFEF
 25532                           postinc0	equ	0xFEE
 25533                           fsr0h	equ	0xFEA
 25534                           fsr0l	equ	0xFE9
 25535                           wreg	equ	0xFE8
 25536                           postdec1	equ	0xFE5
 25537                           fsr1h	equ	0xFE2
 25538                           fsr1l	equ	0xFE1
 25539                           indf2	equ	0xFDF
 25540                           postinc2	equ	0xFDE
 25541                           postdec2	equ	0xFDD
 25542                           fsr2h	equ	0xFDA
 25543                           fsr2l	equ	0xFD9
 25544                           status	equ	0xFD8
 25545                           
 25546 ;; *************** function i2_I2C_Master_Stop *****************
 25547 ;; Defined at:
 25548 ;;		line 43 in file "I2C.c"
 25549 ;; Parameters:    Size  Location     Type
 25550 ;;		None
 25551 ;; Auto vars:     Size  Location     Type
 25552 ;;		None
 25553 ;; Return value:  Size  Location     Type
 25554 ;;                  1    wreg      void 
 25555 ;; Registers used:
 25556 ;;		wreg, status,2, status,0, cstack
 25557 ;; Tracked objects:
 25558 ;;		On entry : 0/0
 25559 ;;		On exit  : 0/0
 25560 ;;		Unchanged: 0/0
 25561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25566 ;;Total ram usage:        0 bytes
 25567 ;; Hardware stack levels used:    1
 25568 ;; Hardware stack levels required when called:    1
 25569 ;; This function calls:
 25570 ;;		i2_I2C_Master_Wait
 25571 ;; This function is called by:
 25572 ;;		i2_getRTC
 25573 ;; This function uses a non-reentrant model
 25574 ;;
 25575                           
 25576                           	psect	text97
 25577  005C32                     __ptext97:
 25578                           	opt stack 0
 25579  005C32                     i2_I2C_Master_Stop:
 25580                           	opt stack 19
 25581                           
 25582                           ;I2C.c: 45: I2C_Master_Wait();
 25583                           
 25584                           ;incstack = 0
 25585  005C32  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25586                           
 25587                           ;I2C.c: 46: PEN = 1;
 25588  005C36  84C5               	bsf	4037,2,c	;volatile
 25589  005C38  0012               	return		;funcret
 25590  005C3A                     __end_ofi2_I2C_Master_Stop:
 25591                           	opt stack 0
 25592                           pclatu	equ	0xFFB
 25593                           pclath	equ	0xFFA
 25594                           tblptru	equ	0xFF8
 25595                           tblptrh	equ	0xFF7
 25596                           tblptrl	equ	0xFF6
 25597                           tablat	equ	0xFF5
 25598                           prodh	equ	0xFF4
 25599                           prodl	equ	0xFF3
 25600                           intcon	equ	0xFF2
 25601                           intcon2	equ	0xFF1
 25602                           intcon3	equ	0xFF0
 25603                           indf0	equ	0xFEF
 25604                           postinc0	equ	0xFEE
 25605                           fsr0h	equ	0xFEA
 25606                           fsr0l	equ	0xFE9
 25607                           wreg	equ	0xFE8
 25608                           postdec1	equ	0xFE5
 25609                           fsr1h	equ	0xFE2
 25610                           fsr1l	equ	0xFE1
 25611                           indf2	equ	0xFDF
 25612                           postinc2	equ	0xFDE
 25613                           postdec2	equ	0xFDD
 25614                           fsr2h	equ	0xFDA
 25615                           fsr2l	equ	0xFD9
 25616                           status	equ	0xFD8
 25617                           
 25618 ;; *************** function i2_I2C_Master_Start *****************
 25619 ;; Defined at:
 25620 ;;		line 31 in file "I2C.c"
 25621 ;; Parameters:    Size  Location     Type
 25622 ;;		None
 25623 ;; Auto vars:     Size  Location     Type
 25624 ;;		None
 25625 ;; Return value:  Size  Location     Type
 25626 ;;                  1    wreg      void 
 25627 ;; Registers used:
 25628 ;;		wreg, status,2, status,0, cstack
 25629 ;; Tracked objects:
 25630 ;;		On entry : 0/0
 25631 ;;		On exit  : 0/0
 25632 ;;		Unchanged: 0/0
 25633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25638 ;;Total ram usage:        0 bytes
 25639 ;; Hardware stack levels used:    1
 25640 ;; Hardware stack levels required when called:    1
 25641 ;; This function calls:
 25642 ;;		i2_I2C_Master_Wait
 25643 ;; This function is called by:
 25644 ;;		i2_getRTC
 25645 ;; This function uses a non-reentrant model
 25646 ;;
 25647                           
 25648                           	psect	text98
 25649  005C3A                     __ptext98:
 25650                           	opt stack 0
 25651  005C3A                     i2_I2C_Master_Start:
 25652                           	opt stack 19
 25653                           
 25654                           ;I2C.c: 33: I2C_Master_Wait();
 25655                           
 25656                           ;incstack = 0
 25657  005C3A  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25658                           
 25659                           ;I2C.c: 34: SEN = 1;
 25660  005C3E  80C5               	bsf	4037,0,c	;volatile
 25661  005C40  0012               	return		;funcret
 25662  005C42                     __end_ofi2_I2C_Master_Start:
 25663                           	opt stack 0
 25664                           pclatu	equ	0xFFB
 25665                           pclath	equ	0xFFA
 25666                           tblptru	equ	0xFF8
 25667                           tblptrh	equ	0xFF7
 25668                           tblptrl	equ	0xFF6
 25669                           tablat	equ	0xFF5
 25670                           prodh	equ	0xFF4
 25671                           prodl	equ	0xFF3
 25672                           intcon	equ	0xFF2
 25673                           intcon2	equ	0xFF1
 25674                           intcon3	equ	0xFF0
 25675                           indf0	equ	0xFEF
 25676                           postinc0	equ	0xFEE
 25677                           fsr0h	equ	0xFEA
 25678                           fsr0l	equ	0xFE9
 25679                           wreg	equ	0xFE8
 25680                           postdec1	equ	0xFE5
 25681                           fsr1h	equ	0xFE2
 25682                           fsr1l	equ	0xFE1
 25683                           indf2	equ	0xFDF
 25684                           postinc2	equ	0xFDE
 25685                           postdec2	equ	0xFDD
 25686                           fsr2h	equ	0xFDA
 25687                           fsr2l	equ	0xFD9
 25688                           status	equ	0xFD8
 25689                           
 25690 ;; *************** function i2_I2C_Master_Read *****************
 25691 ;; Defined at:
 25692 ;;		line 55 in file "I2C.c"
 25693 ;; Parameters:    Size  Location     Type
 25694 ;;  a               1    wreg     unsigned char 
 25695 ;; Auto vars:     Size  Location     Type
 25696 ;;  a               1    1[COMRAM] unsigned char 
 25697 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25698 ;; Return value:  Size  Location     Type
 25699 ;;                  1    wreg      unsigned char 
 25700 ;; Registers used:
 25701 ;;		wreg, status,2, status,0, cstack
 25702 ;; Tracked objects:
 25703 ;;		On entry : 0/0
 25704 ;;		On exit  : 0/0
 25705 ;;		Unchanged: 0/0
 25706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25710 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25711 ;;Total ram usage:        2 bytes
 25712 ;; Hardware stack levels used:    1
 25713 ;; Hardware stack levels required when called:    1
 25714 ;; This function calls:
 25715 ;;		i2_I2C_Master_Wait
 25716 ;; This function is called by:
 25717 ;;		i2_getRTC
 25718 ;; This function uses a non-reentrant model
 25719 ;;
 25720                           
 25721                           	psect	text99
 25722  005A80                     __ptext99:
 25723                           	opt stack 0
 25724  005A80                     i2_I2C_Master_Read:
 25725                           	opt stack 19
 25726                           
 25727                           ;incstack = 0
 25728                           ;i2I2C_Master_Read@a stored from wreg
 25729  005A80  6E02               	movwf	i2I2C_Master_Read@a,c
 25730                           
 25731                           ;I2C.c: 57: unsigned char temp;
 25732                           ;I2C.c: 58: I2C_Master_Wait();
 25733  005A82  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25734                           
 25735                           ;I2C.c: 59: RCEN = 1;
 25736  005A86  86C5               	bsf	4037,3,c	;volatile
 25737                           
 25738                           ;I2C.c: 60: I2C_Master_Wait();
 25739  005A88  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25740                           
 25741                           ;I2C.c: 61: temp = SSPBUF;
 25742  005A8C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25743                           
 25744                           ;I2C.c: 62: I2C_Master_Wait();
 25745  005A90  ECDE  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25746                           
 25747                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25748  005A94  5002               	movf	i2I2C_Master_Read@a,w,c
 25749  005A96  A4D8               	btfss	status,2,c
 25750  005A98  D002               	goto	i2u501_40
 25751  005A9A  8AC5               	bsf	4037,5,c	;volatile
 25752  005A9C  D001               	goto	i2l6616
 25753  005A9E                     i2u501_40:
 25754  005A9E  9AC5               	bcf	4037,5,c	;volatile
 25755  005AA0                     i2l6616:
 25756                           
 25757                           ;I2C.c: 64: ACKEN = 1;
 25758  005AA0  88C5               	bsf	4037,4,c	;volatile
 25759                           
 25760                           ;I2C.c: 65: return temp;
 25761  005AA2  5003               	movf	i2I2C_Master_Read@temp,w,c
 25762  005AA4  0012               	return	
 25763  005AA6                     __end_ofi2_I2C_Master_Read:
 25764                           	opt stack 0
 25765                           pclatu	equ	0xFFB
 25766                           pclath	equ	0xFFA
 25767                           tblptru	equ	0xFF8
 25768                           tblptrh	equ	0xFF7
 25769                           tblptrl	equ	0xFF6
 25770                           tablat	equ	0xFF5
 25771                           prodh	equ	0xFF4
 25772                           prodl	equ	0xFF3
 25773                           intcon	equ	0xFF2
 25774                           intcon2	equ	0xFF1
 25775                           intcon3	equ	0xFF0
 25776                           indf0	equ	0xFEF
 25777                           postinc0	equ	0xFEE
 25778                           fsr0h	equ	0xFEA
 25779                           fsr0l	equ	0xFE9
 25780                           wreg	equ	0xFE8
 25781                           postdec1	equ	0xFE5
 25782                           fsr1h	equ	0xFE2
 25783                           fsr1l	equ	0xFE1
 25784                           indf2	equ	0xFDF
 25785                           postinc2	equ	0xFDE
 25786                           postdec2	equ	0xFDD
 25787                           fsr2h	equ	0xFDA
 25788                           fsr2l	equ	0xFD9
 25789                           status	equ	0xFD8
 25790                           
 25791 ;; *************** function i2_I2C_Master_Wait *****************
 25792 ;; Defined at:
 25793 ;;		line 26 in file "I2C.c"
 25794 ;; Parameters:    Size  Location     Type
 25795 ;;		None
 25796 ;; Auto vars:     Size  Location     Type
 25797 ;;		None
 25798 ;; Return value:  Size  Location     Type
 25799 ;;                  1    wreg      void 
 25800 ;; Registers used:
 25801 ;;		wreg, status,2, status,0
 25802 ;; Tracked objects:
 25803 ;;		On entry : 0/0
 25804 ;;		On exit  : 0/0
 25805 ;;		Unchanged: 0/0
 25806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25811 ;;Total ram usage:        1 bytes
 25812 ;; Hardware stack levels used:    1
 25813 ;; This function calls:
 25814 ;;		Nothing
 25815 ;; This function is called by:
 25816 ;;		i2_I2C_Master_Start
 25817 ;;		i2_I2C_Master_Stop
 25818 ;;		i2_I2C_Master_Write
 25819 ;;		i2_I2C_Master_Read
 25820 ;; This function uses a non-reentrant model
 25821 ;;
 25822                           
 25823                           	psect	text100
 25824  005BBC                     __ptext100:
 25825                           	opt stack 0
 25826  005BBC                     i2_I2C_Master_Wait:
 25827                           	opt stack 19
 25828  005BBC                     i2l71:
 25829  005BBC  B4C7               	btfsc	4039,2,c	;volatile
 25830  005BBE  D7FE               	goto	i2l71
 25831  005BC0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25832  005BC4  0E1F               	movlw	31
 25833  005BC6  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25834  005BC8  B4D8               	btfsc	status,2,c
 25835  005BCA  0012               	return	
 25836  005BCC  D7F7               	goto	i2l71
 25837  005BCE                     __end_ofi2_I2C_Master_Wait:
 25838                           	opt stack 0
 25839                           pclatu	equ	0xFFB
 25840                           pclath	equ	0xFFA
 25841                           tblptru	equ	0xFF8
 25842                           tblptrh	equ	0xFF7
 25843                           tblptrl	equ	0xFF6
 25844                           tablat	equ	0xFF5
 25845                           prodh	equ	0xFF4
 25846                           prodl	equ	0xFF3
 25847                           intcon	equ	0xFF2
 25848                           intcon2	equ	0xFF1
 25849                           intcon3	equ	0xFF0
 25850                           indf0	equ	0xFEF
 25851                           postinc0	equ	0xFEE
 25852                           fsr0h	equ	0xFEA
 25853                           fsr0l	equ	0xFE9
 25854                           wreg	equ	0xFE8
 25855                           postdec1	equ	0xFE5
 25856                           fsr1h	equ	0xFE2
 25857                           fsr1l	equ	0xFE1
 25858                           indf2	equ	0xFDF
 25859                           postinc2	equ	0xFDE
 25860                           postdec2	equ	0xFDD
 25861                           fsr2h	equ	0xFDA
 25862                           fsr2l	equ	0xFD9
 25863                           status	equ	0xFD8
 25864                           
 25865 ;; *************** function i2_delay_ms *****************
 25866 ;; Defined at:
 25867 ;;		line 660 in file "sort.c"
 25868 ;; Parameters:    Size  Location     Type
 25869 ;;  milliseconds    1    wreg     unsigned char 
 25870 ;; Auto vars:     Size  Location     Type
 25871 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25872 ;; Return value:  Size  Location     Type
 25873 ;;                  1    wreg      void 
 25874 ;; Registers used:
 25875 ;;		wreg, status,2, status,0, cstack
 25876 ;; Tracked objects:
 25877 ;;		On entry : 0/0
 25878 ;;		On exit  : 0/0
 25879 ;;		Unchanged: 0/0
 25880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25884 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25885 ;;Total ram usage:        2 bytes
 25886 ;; Hardware stack levels used:    1
 25887 ;; This function calls:
 25888 ;;		Nothing
 25889 ;; This function is called by:
 25890 ;;		_printSortTimer
 25891 ;; This function uses a non-reentrant model
 25892 ;;
 25893                           
 25894                           	psect	text101
 25895  005B48                     __ptext101:
 25896                           	opt stack 0
 25897  005B48                     i2_delay_ms:
 25898                           	opt stack 22
 25899                           
 25900                           ;incstack = 0
 25901                           ;i2delay_ms@milliseconds stored from wreg
 25902  005B48  6E02               	movwf	i2delay_ms@milliseconds,c
 25903                           
 25904                           ;sort.c: 661: while(milliseconds > 0)
 25905  005B4A  D008               	goto	i2l9232
 25906  005B4C                     i2l9228:
 25907                           
 25908                           ;sort.c: 662: {
 25909                           ;sort.c: 663: milliseconds--;
 25910  005B4C  0602               	decf	i2delay_ms@milliseconds,f,c
 25911                           
 25912                           ;sort.c: 664: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25913  005B4E  0E0B               	movlw	11
 25914  005B50  6E01               	movwf	??i2_delay_ms& (0+255),c
 25915  005B52  0E48               	movlw	72
 25916  005B54                     i2u1136_47:
 25917  005B54  2EE8               	decfsz	wreg,f,c
 25918  005B56  D7FE               	bra	i2u1136_47
 25919  005B58  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25920  005B5A  D7FC               	bra	i2u1136_47
 25921  005B5C                     i2l9232:
 25922  005B5C  5002               	movf	i2delay_ms@milliseconds,w,c
 25923  005B5E  B4D8               	btfsc	status,2,c
 25924  005B60  0012               	return	
 25925  005B62  D7F4               	goto	i2l9228
 25926  005B64                     __end_ofi2_delay_ms:
 25927                           	opt stack 0
 25928                           pclatu	equ	0xFFB
 25929                           pclath	equ	0xFFA
 25930                           tblptru	equ	0xFF8
 25931                           tblptrh	equ	0xFF7
 25932                           tblptrl	equ	0xFF6
 25933                           tablat	equ	0xFF5
 25934                           prodh	equ	0xFF4
 25935                           prodl	equ	0xFF3
 25936                           intcon	equ	0xFF2
 25937                           intcon2	equ	0xFF1
 25938                           intcon3	equ	0xFF0
 25939                           indf0	equ	0xFEF
 25940                           postinc0	equ	0xFEE
 25941                           fsr0h	equ	0xFEA
 25942                           fsr0l	equ	0xFE9
 25943                           wreg	equ	0xFE8
 25944                           postdec1	equ	0xFE5
 25945                           fsr1h	equ	0xFE2
 25946                           fsr1l	equ	0xFE1
 25947                           indf2	equ	0xFDF
 25948                           postinc2	equ	0xFDE
 25949                           postdec2	equ	0xFDD
 25950                           fsr2h	equ	0xFDA
 25951                           fsr2l	equ	0xFD9
 25952                           status	equ	0xFD8
 25953                           pclatu	equ	0xFFB
 25954                           pclath	equ	0xFFA
 25955                           tblptru	equ	0xFF8
 25956                           tblptrh	equ	0xFF7
 25957                           tblptrl	equ	0xFF6
 25958                           tablat	equ	0xFF5
 25959                           prodh	equ	0xFF4
 25960                           prodl	equ	0xFF3
 25961                           intcon	equ	0xFF2
 25962                           intcon2	equ	0xFF1
 25963                           intcon3	equ	0xFF0
 25964                           indf0	equ	0xFEF
 25965                           postinc0	equ	0xFEE
 25966                           fsr0h	equ	0xFEA
 25967                           fsr0l	equ	0xFE9
 25968                           wreg	equ	0xFE8
 25969                           postdec1	equ	0xFE5
 25970                           fsr1h	equ	0xFE2
 25971                           fsr1l	equ	0xFE1
 25972                           indf2	equ	0xFDF
 25973                           postinc2	equ	0xFDE
 25974                           postdec2	equ	0xFDD
 25975                           fsr2h	equ	0xFDA
 25976                           fsr2l	equ	0xFD9
 25977                           status	equ	0xFD8
 25978                           
 25979                           	psect	rparam
 25980  0000                     pclatu	equ	0xFFB
 25981                           pclath	equ	0xFFA
 25982                           tblptru	equ	0xFF8
 25983                           tblptrh	equ	0xFF7
 25984                           tblptrl	equ	0xFF6
 25985                           tablat	equ	0xFF5
 25986                           prodh	equ	0xFF4
 25987                           prodl	equ	0xFF3
 25988                           intcon	equ	0xFF2
 25989                           intcon2	equ	0xFF1
 25990                           intcon3	equ	0xFF0
 25991                           indf0	equ	0xFEF
 25992                           postinc0	equ	0xFEE
 25993                           fsr0h	equ	0xFEA
 25994                           fsr0l	equ	0xFE9
 25995                           wreg	equ	0xFE8
 25996                           postdec1	equ	0xFE5
 25997                           fsr1h	equ	0xFE2
 25998                           fsr1l	equ	0xFE1
 25999                           indf2	equ	0xFDF
 26000                           postinc2	equ	0xFDE
 26001                           postdec2	equ	0xFDD
 26002                           fsr2h	equ	0xFDA
 26003                           fsr2l	equ	0xFD9
 26004                           status	equ	0xFD8
 26005                           
 26006                           	psect	temp
 26007  00007E                     btemp:
 26008                           	opt stack 0
 26009  00007E                     	ds	1
 26010  0000                     int$flags	set	btemp
 26011                           pclatu	equ	0xFFB
 26012                           pclath	equ	0xFFA
 26013                           tblptru	equ	0xFF8
 26014                           tblptrh	equ	0xFF7
 26015                           tblptrl	equ	0xFF6
 26016                           tablat	equ	0xFF5
 26017                           prodh	equ	0xFF4
 26018                           prodl	equ	0xFF3
 26019                           intcon	equ	0xFF2
 26020                           intcon2	equ	0xFF1
 26021                           intcon3	equ	0xFF0
 26022                           indf0	equ	0xFEF
 26023                           postinc0	equ	0xFEE
 26024                           fsr0h	equ	0xFEA
 26025                           fsr0l	equ	0xFE9
 26026                           wreg	equ	0xFE8
 26027                           postdec1	equ	0xFE5
 26028                           fsr1h	equ	0xFE2
 26029                           fsr1l	equ	0xFE1
 26030                           indf2	equ	0xFDF
 26031                           postinc2	equ	0xFDE
 26032                           postdec2	equ	0xFDD
 26033                           fsr2h	equ	0xFDA
 26034                           fsr2l	equ	0xFD9
 26035                           status	equ	0xFD8


Data Sizes:
    Strings     1368
    Constant    27
    Data        8
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_131(CODE[7]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_130(CODE[18]), STR_129(CODE[18]), STR_128(CODE[17]), STR_127(CODE[17]), 
		 -> STR_126(CODE[15]), STR_125(CODE[15]), STR_124(CODE[18]), STR_123(CODE[15]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[16]), STR_65(CODE[16]), STR_64(CODE[19]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  250900
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37162
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18298
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  23    23      0   13471
                                             43 BANK0     23    23      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     392
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2172
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11734
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23608
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22694
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10987
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10987
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47352
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13531
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     940
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118944
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9275
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9232
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9163
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15799
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9436
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19949
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9438
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9028
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 11:29:57 2017

                                    _i 0143                     i2_I2C_Master_Start 5C3A  
                   i2_I2C_Master_Write 5C10                                     l71 5BA8  
                                   _ID 1784                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 560C                                    ID@i 00B1  
                                  ID@n 00C0                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 480C  
                                  l800 1378                                    l627 2E38  
                                  l820 153A                                    l805 1426  
                                  l815 157A                                    l832 1602  
                                  l808 1474                                    l842 1776  
                                  l834 1628                                    l826 172A  
                                  l818 150E                                    l923 4DD4  
                                  l835 1650                                    l836 1678  
                                  l837 16A0                                    l854 1A06  
                                  l838 16CA                                    l871 1BCC  
                                  l847 1840                                    l867 1B1A  
                                  l787 1262                                    l868 1B34  
                                  l797 132A                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3D90                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 43CC  
                                  _log 00F0                                    _sel 00FD  
                                  _var 0147                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3F56                    _log_count_can_w_lab 0065  
                           i2_delay_ms 5B48        __end_of_change_state_to_menu_11 583C  
      __end_of_change_state_to_menu_12 567C        __end_of_change_state_to_menu_22 5644  
      __end_of_change_state_to_menu_23 580C           _f_can_coming_to_distribution 0139  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 592C  
      __end_of_change_state_to_logs_12 58FC        __end_of_change_state_to_logs_22 58CC  
      __end_of_change_state_to_logs_23 5988        __end_of_change_state_to_logs_33 589C  
      __end_of_change_state_to_logs_34 586C                                   ??_ID 00AB  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1121 44EC  
                                 l1301 09EE                                   l1134 5B74  
                                 l1143 4084                                   l1304 0A54  
                                 l1305 0AA2                                   l1306 0B08  
                                 l1331 0EB0                                   l1307 0B56  
                                 l1236 430C                                   l1262 46F6  
                                 l1343 104A                                   l1271 2AE6  
                                 l1239 432C                                   l1520 1E20  
                                 l1361 5310                                   l1426 4E6A  
                                 l1443 3E92                                   l1419 4E5A  
                                 l1259 46F2                                   l1348 1120  
                                 l1268 2AE2                                   l1382 2A76  
                                 l1294 0944                                   l1391 29EA  
                                 l1367 5320                                   l1463 44BC  
                                 l1448 3EDE                                   l1480 52B4  
                                 l1472 44B6                                   l1464 447E  
                                 l1449 3EF8                                   l1297 0948  
                                 l1395 2A42                                   l1397 2A70  
                                 ?_arm 0001                                   l1486 52C4  
                                 l1914 4B20                                   l1784 4292  
                                 l1967 4F80                                   l8000 1732  
                                 l1977 5206                                   l8012 176A  
                                 l7150 2E9C                                   l8014 1778  
                                 l7160 2F32                                   l7152 2EBA  
                                 l7144 2E42                                   l8040 17FC  
                                 l7320 4B40                                   l6506 59C8  
                                 l6530 5952                                   l7162 2F50  
                                 l7154 2ED8                                   l7146 2E60  
                                 l7170 2FAA                                   l7138 2DB6  
                                 l8202 4632                                   l8114 1A2C  
                                 l7330 4BCC                                   l6700 1BE8  
                                 l6508 59DA                                   l7164 2F6E  
                                 l7156 2EF6                                   l7148 2E7E  
                                 l7172 3008                                   l8204 4660  
                                 l8140 1AA4                                   l8124 1A5C  
                                 l8116 1A34                                   l7420 4F98  
                                 l7324 4B56                                   l6710 1C18  
                                 l9110 3E1A                                   l8302 2C3E  
                                 l7166 2F8C                                   l7158 2F14  
                                 l7502 5568                                   l7510 4872  
                                 l8150 1AEE                                   l8070 18AE  
                                 _ADIE 007CEE                                   l6800 1F18  
                                 l6704 1BFC                                   l8320 2CCC  
                                 l7520 48F6                                   l8136 1A94  
                                 l8128 1A6C                                   l8080 197A  
                                 l7440 4FF0                                   l7424 4FAE  
                                 l6706 1C0E                                   l7370 4562  
                                 l7602 4CC0                                   l7514 48B2  
                                 l8154 1B04                                   l8058 186A  
                                 l6564 4F30                                   l6548 5A00  
                                 l6812 1F4E                                   l6732 1CFA  
                                 l6724 1CC8                                   l6716 1C4C  
                                 l8500 0C60                                   l8340 2D44  
                                 l8332 2D32                                   l8308 2C80  
                                 l7612 4D02                                   l6900 4276  
                                 l7436 4FD8                                   l6566 4F3C  
                                 l6814 1F5A                                   l6822 1F88  
                                 l6806 1F32                                   l6742 1D72  
                                 l6734 1D06                                   l6830 1FF2  
                                 l9142 3EBE                                   l9134 3E94  
                                 l9118 3E60                                   l8510 0C88  
                                 l7470 4A08                                   l9302 01C6  
                                 l7382 459A                                   l7366 4558  
                                 l7374 457A                                   l7606 4CD6  
                                 l6902 4284                                   l8094 19C2  
                                 l6576 4F72                                   l6568 4F42  
                                 l6592 51F8                                   l6584 51C2  
                                 l6824 1F8E                                   l6752 1DC8  
                                 l6744 1D7E                                   l6736 1D0C  
                                 l9144 3EC8                                   l9136 3EA4  
                                 l8600 0E66                                   l8504 0C78  
                                 l8344 2D7A                                   l8328 2CFC  
                                 l8272 2B36                                   l7472 4A14  
                                 l7464 49EA                                   l9400 04E0  
                                 l9312 01EE                                   l9304 01CC  
                                 l8192 45CA                                   l7392 5A26  
                                 l6586 51CE                                   l6818 1F74  
                                 l6770 1E58                                   l6754 1DE0  
                                 l6746 1D84                                   l9154 3EFA  
                                 l8610 0E8E                                   l8530 0CFC  
                                 l8522 0CDA                                   l8514 0CA0  
                                 l8506 0C7E                                   l8290 2BEE  
                                 l7490 4A6C                                   l7482 4A4A  
                                 l7474 4A1A                                   l7458 49D4  
                                 l6842 4D4A                                   l6834 5686  
                                 l7378 4590                                   l8194 45E4  
                                 l6914 42B8                                   l8178 1B8A  
                                 l8186 1BCE                                   l6588 51D4  
                                 l6828 1FE6                                   l6748 1D9C  
                                 l9156 3F0A                                   l9164 3F50  
                                 l8604 0E70                                   l8540 0D24  
                                 l8532 0D02                                   l6852 4D80  
                                 l6836 5692                                   l9500 072E  
                                 l9412 0544                                   l9404 0522  
                                 l9340 0270                                   l9332 024E  
                                 l9308 01D6                                   l6924 4AA4  
                                 l8196 45FE                                   l6908 429C  
                                 l7388 5A10                                   l6774 1E72  
                                 l6758 1DE6                                   l6870 4DB8  
                                 l8614 0E98                                   l8526 0CE4  
                                 l8470 0BD2                                   l8390 09C2  
                                 l7486 4A58                                   l9190 4C52  
                                 l9182 4C1C                                   l9174 4BF8  
                                 l6846 4D60                                   l9422 0560  
                                 l9350 028C                                   l9318 01FC  
                                 l6926 4AB4                                   l8198 4618  
                                 l7902 1410                                   l6776 1E78  
                                 l8632 0F02                                   l8608 0E88  
                                 l8552 0D68                                   l8536 0D0C  
                                 l8480 0BFA                                   l8384 09B2  
                                 l9184 4C28                                   l9504 0738  
                                 l9408 052C                                   l9336 0258  
                                 l9280 0144                                   l9272 0128  
                                 l6936 4B0E                                   l6928 4ABA  
                                 l7912 1454                                   l6794 1ED6  
                                 l8722 10BC                                   l8714 109A  
                                 l8642 0F2A                                   l8562 0D90  
                                 l8474 0BDC                                   l8394 09DA  
                                 l8386 09B8                                   l8802 4466  
                                 l8810 4484                                   l9186 4C2E  
                                 l9194 4C60                                   l9178 4C08  
                                 l9530 07C0                                   l9450 0648  
                                 l9426 0578                                   l9418 0556  
                                 l9370 02F6                                   l9354 02A4  
                                 l9346 0282                                   l9266 00FE  
                                 l6890 41E8                                   l7914 145E  
                                 l7818 1220                                   l6788 1EB4  
                                 l6876 4DF2                                   l8900 27CE  
                                 l8732 10E4                                   l8724 10C2  
                                 l8636 0F1A                                   l8628 0EF8  
                                 l8556 0D80                                   l8548 0D5E  
                                 l8484 0C04                                   l8812 449E  
                                 l8804 4470                                   l9540 07EA  
                                 l9508 0750                                   l9460 0672  
                                 l9380 038C                                   l9372 0314  
                                 l9284 015C                                   l9276 013A  
                                 l6892 41F6                                   l7940 1512  
                                 l7924 14A2                                   l7844 12A6  
                                 l7828 126A                                   l6798 1F0E  
                                 l8750 1140                                   l8718 10A4  
                                 l8662 0F9E                                   l8654 0F7C  
                                 l8646 0F42                                   l8638 0F20  
                                 l8582 0E04                                   l8574 0DE2  
                                 l8566 0DA8                                   l8558 0D86  
                                 l8478 0BF4                                   l8814 44A8  
                                 l9198 4C74                                   l9534 07D8  
                                 l9526 07B6                                   l9454 0660  
                                 l9446 063E                                   l9390 0422  
                                 l9382 03AA                                   l9374 0332  
                                 l6894 4226                                   l6886 41D4  
                                 l7934 14E8                                   l8920 2884  
                                 l8760 1168                                   l8728 10CC  
                                 l8680 1000                                   l8672 0FC6  
                                 l8664 0FA4                                   l8592 0E2C  
                                 l8584 0E0A                                   l8496 0C56  
                                 l8488 0C1C                                   l9544 07F4  
                                 l9464 067C                                   l9392 0440  
                                 l9384 03C8                                   l9376 0350  
                                 l9288 016E                                   l7944 152E  
                                 l7936 14F2                                   l7928 14C8  
                                 l7864 1314                                   l8754 114A  
                                 l8738 110A                                   l8690 1028  
                                 l8658 0F86                                   l8578 0DEC  
                                 l9570 0874                                   l9490 0704  
                                 l9394 045E                                   l9386 03E6  
                                 l9378 036E                                   l6898 4246  
                                 l7962 15DE                                   l7874 1358  
                                 l8764 1172                                   l8748 113A  
                                 l8684 100A                                   l8668 0FAE  
                                 l8588 0E14                                   l9900 4332  
                                 l9580 089E                                   l9548 080C  
                                 l9468 0694                                   l9388 0404  
                                 l7876 1362                                   l8950 2976  
                                 l8918 287E                                   l8758 1162  
                                 l8694 1032                                   l9910 4350  
                                 l9902 4338                                   l9574 088C  
                                 l9566 086A                                   l9494 071C  
                                 l9486 06FA                                   l9398 047C  
                                 l7886 13A6                                   l8864 4E92  
                                 l8768 118A                                   l8688 1022  
                                 l9912 4356                                   l9904 433E  
                                 l9584 08A8                                   l9592 08CC  
                                 l7992 16E0                                   l8962 29C0  
                                 l8938 2934                                   l9914 435C  
                                 l9906 4344                                   l9922 436E  
                                 l7994 1716                                   l8980 2A2C  
                                 l8956 2996                                   l9916 4362  
                                 l9908 434A                                   l9924 43C0  
                                 l9588 08C0                                   l9844 3FA2  
                                 l8966 29D4                                   l8958 29AC  
                                 l8798 4440                                   l9918 4368  
                                 l9870 403E                                   l9846 3FB6  
                                 STR_1 FB52                                   l8976 2A18  
                                 STR_2 FF49                                   STR_3 FB40  
                                 STR_4 FE5D                                   STR_5 FB40  
                                 l9884 42C8                                   STR_6 FDD9  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5110 5464  
                                 u5120 5466                                   u5130 54FC  
                                 u5131 54F8                                   u5140 54FE  
                                 u5230 1DBE                                   u7010 1B96  
                                 _PEIE 007F96                                   u7100 2B7A  
                                 u5237 1DB4                                   u5190 1D46  
                                 u7030 1BCC                                   u7130 2D20  
                                 u8020 295E                                   u7028 1B9A  
                                 _RCEN 007E2B                                   u5197 1D3C  
                                 u7230 09EE                                   u4910 5950  
                                 u7160 2D68                                   u7250 0AA2  
                                 u7138 2D24                                   u7090 2B78  
                                 u6370 122C                                   u8211 3E88  
                                 u8220 3E8A                                   u6700 1600  
                                 u8070 29A4                                   u8038 2962  
                                 u7270 0B56                                   u6630 154C  
                                 u6390 1262                                   i2l71 5BBC  
                                 u8080 29BC                                   u7168 2D6C  
                                 u5920 2E38                                   u6800 18FA  
                                 u8081 29B8                                   u5905 5240  
                                 u6810 18FC                                   u6650 1572  
                                 u6820 194E                                   u6660 1574  
                                 u6388 1230                                   u8261 3EB4  
                                 u8270 3EB6                                   u6830 1950  
                                 u7800 4494                                   u5880 54B0  
                                 u6648 1550                                   u7810 4496  
                                 u9330 4084                                   u5890 54B2  
                                 u7750 445C                                   u7760 445E  
                                 u7940 2810                                   u7950 2812  
                                 u7970 28C6                                   u7980 28C8  
                                 u9717 11B0                                   u9807 1442  
                                 u9727 12D4                                   u9817 147E  
                                 u9737 1334                                   u9907 165A  
                                 u9827 1490                                   u9747 1346  
                                 u9917 166E                                   u9837 14B0  
                                 u9757 1382                                   u9927 1682  
                                 u9847 1594                                   u9767 1394  
                                 u9937 1696                                   u9857 15CC  
                                 u9777 13B4                                   u9947 16AA  
                                 u9867 160C                                   u9787 13DE  
                                 u9957 16BE                                   u9877 161E  
                                 u9797 1430                                   u9967 16D4  
                                 u9887 1632                                   u9977 174C  
                                 u9897 1646                                   u9987 5706  
                                 _RSEN 007E29                                   u9997 4FB6  
                          _stopSignals 5B2C                                   _Test 42C6  
                                 _back 005B                                   _main 476A  
                                 _down 005D                           ___ftpack@arg 0080  
                                 _keys FA8B                           ___ftpack@exp 0083  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5ACA                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0063                        __end_ofi2_putch 5BFA  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 35B4                            i2_lcdNibble 5328  
                      __end_of_Loading 1784                   __end_of_actuatorTest 1192  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10124 47DE  
                                l10116 47B4                                  l10126 47E4  
                                l10142 480E                                  l10118 47CA  
                                l10136 4802                                  l10128 47EA  
                                l10138 4808                   __end_of_EEPROM_write 45B2  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4A76  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAA6  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FDEA                                  STR_15 FFD2  
                                STR_23 FF3B                                  STR_31 FDC8  
                                STR_16 FFE2                                  STR_24 FD2F  
                                STR_32 FD0D                                  STR_40 FCC9  
                                STR_17 FFF2                                  STR_25 FE0C  
                                STR_33 FD1E                                  STR_41 FCB8  
                                STR_18 FFF6                                  STR_34 FDB7  
                                STR_50 FD95                                  STR_42 FD73  
                                STR_26 FD40                                  STR_43 FD73  
                                STR_35 FDB7                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FDFB  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD51                                  STR_36 FCFC  
                                STR_44 FCDA                        __end_of___awmod 4C7E  
                                STR_45 FCC9                                  STR_37 FD0D  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE09                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_38 FDA6  
                                STR_46 FD84                                  STR_70 FC85  
                                STR_47 FD84                                  STR_55 FFFA  
                                STR_63 FAA6                                  STR_71 FEF4  
                                STR_39 FD62                                  STR_56 FFDE  
                                STR_80 FF57                                  STR_72 FF2D  
                                STR_48 FCEB                                  STR_64 FAD3  
                                STR_49 FCDA                                  STR_57 FFD6  
                                STR_81 FE7C                                  STR_65 FE3D  
                                STR_73 FC41                                  STR_58 FFD2  
                                STR_90 FF2D                                  STR_82 FE09  
                                STR_74 FF11                                  STR_66 FE4D  
                                STR_59 FFE2                                  STR_75 FF64  
                                STR_91 FEE5                                  STR_83 FEA9  
                                STR_67 FABE                                  STR_68 FFBC  
                                STR_92 FF03                                  STR_76 FED6  
                                STR_84 FE1D                                  STR_85 FF86  
                                STR_77 FF1F                                  STR_69 FC74  
                                STR_93 FC52                                  STR_86 FF86  
                                STR_78 FFAD                                  STR_94 FF70  
                                STR_79 FF2D                                  STR_87 FFA4  
                                STR_95 FC63                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FEC7                                  STR_98 FBB9  
                                STR_99 FBA8           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4B32  
         i2updateServoPosition@time_us 0001                                  u10007 179E  
                                u10017 1850                                  u10107 450E  
                                u10027 199E                                  u10117 456A  
                                u10037 1ABE                                  u11007 2A06  
                                u10207 0294                                  u10127 45A2  
                                u10047 1B1E                                  u11017 2A4C  
                                u10217 02BE                                  u10137 002A  
                                u10057 1B28                                  u11107 21D0  
                                u11027 2A5E                                  u10307 076A  
                                u10227 0534                                  u10147 0114  
                                u10067 1B4E                                  u11117 221C  
                                u11037 2020                                  u10317 07C8  
                                u10237 0568                                  u10157 014C  
                                u10077 5A1C                                  u11207 4EDC  
                                u11127 2250                                  u11047 206C  
                                u10407 2B26                                  u10327 07FC  
                                u10247 0592                                  u10167 0188  
                                u10087 550E                                  _T0CON 000FD5  
                                u11217 4EF8                                  u11137 2282  
                                u11057 20B8                                  u10417 2B8E  
                                u10337 0826                                  u10257 0650  
                                u10177 01DE                                  u10097 5542  
                                u11227 3DC6                                  u11147 22CE  
                                u11067 20EC                                  u10507 46A2  
                                u10427 2BE2                                  u10347 087C  
                                u10267 0684                                  u10187 020A  
                      ___awdiv@divisor 0088                                  u11237 3EE2  
                                u11157 2302                                  u11077 211E  
                                u10517 46E6                                  u10437 2C02  
                                u10357 08B0                                  u10277 06AE  
                                u10197 0260                                  u11247 3EEC  
                                u11167 2334                                  u11087 216A  
                                u10607 0AB2                                  u10527 4708  
                                u10447 2C30                                  u10367 42D6  
                                u10287 070C                                  _T1CON 000FCD  
                                u11257 59D0                                  u11177 2380  
                                u11097 219E                                  u10617 0B18  
                                u10537 08F4                                  u10457 2C74  
                                u10377 2A92                                  u10297 0740  
                                u11267 5100                                  u11187 23B4  
                                u10707 0D70                                  u10627 0B36  
                                u10547 0938                                  u10467 2C92  
                                u10387 2AD6                                  u11277 510A  
                                u11197 23E6                                  u10717 0D98  
                                u10637 0B66                                  u10557 095A  
                                u10477 2CC0                                  u10397 2AF8  
                                u11287 5136                                  u10807 1012  
                                u10727 0DF4                                  u10647 0BE4  
                                u10567 09CA                                  u10487 2CDA  
                                _T2CON 000FCA                                  u11297 5140  
                                u10817 103A                                  u10737 0E1C  
                                u10657 0C0C                                  u10577 09FE  
                                u10497 43DA                                  u10907 4E74  
                                u10827 105C                                  u10747 0E78  
                                u10667 0C68                                  u10587 0A64  
                                u10917 4E88                                  u10837 10AC  
                                u10757 0EA0                                  u10677 0C90  
                                u10597 0A82                                  u10927 527E  
                                u10847 10D4                                  u10767 0F0A  
                                u10687 0CEC                                  _T3CON 000FB1  
                                u10937 52DA                                  u10857 1124  
                                u10777 0F32                                  u10697 0D14  
                                u10947 27AC                                  u10867 112E  
                                u10787 0F8E                                  u10957 2826  
                                u10877 1152                                  u10797 0FB6  
                                u10967 2872                                  u10887 117A  
                                u10977 28DC                                  u10897 4E24  
                                u10987 2928                                  u10997 29F4  
                      __end_of___lwdiv 4F8A                        __end_of___lwmod 5210  
                                i2l268 3308                                  i2l627 3642  
                                i2l902 34DA                                  i2l923 50A4  
                                i2l950 5608                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 2012                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5BEE                        __end_of_handler 39DC  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 59E0  
                      __end_of_initLCD 554C                         __CFG_EBTRB$OFF 000000  
                                _debug 00E8                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 4F8A  
                      __end_of_loadRTC 4D0A                        __end_of_readMAG 5506  
                      __end_of_dpowers FAA6                                  _first 013F  
                                _enter 005F                                  arm@on 00AC  
                      __end_of_isdigit 5A0A                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5BCE  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5A80                       __end_ofi2_getRTC 506E  
                  _log_count_pop_w_tab 0067                                  status 000FD8  
                          readCOND@res 0084                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 276E  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 574C                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   printSortTimer@i_1160 0047  
                 __size_of_EEPROM_read 0018                        __initialization 53D4  
                         __end_of_Test 43CC                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4832                           __end_of_keys FA9C  
                         __end_of_sort 5AEC                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3D90                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00BC  
                               ID@res2 00BE             __size_of_updateServoStates 01C8  
                               ID@res3 00AD                                 ID@time 00BB  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FB86  
                               STR_101 FC0E                                 STR_110 FE8B  
                               STR_102 FC1F                                 STR_111 FCA7  
                               STR_103 FB64                                 STR_104 FE2D  
                               STR_120 FC30                                 STR_112 FAE6  
                               STR_113 FBCA                                 STR_105 FB97  
                               STR_121 FB0A                                 STR_114 FBFD  
                               STR_106 FB75                                 STR_130 FB2E  
                               STR_122 FAF8                                 _ADRESH 000FC4  
                               STR_107 FB97                                 STR_115 FBFD  
                               STR_131 FFB5                                 STR_123 FE6D  
                               STR_108 FEB8                                 STR_116 FBEC  
                               STR_124 FB1C                                 _EEADRH 000FAA  
                               STR_117 FBFD                                 STR_125 FE6D  
                               STR_109 FE9A                                 STR_118 FBEC  
                               STR_126 FE6D                                 _ADRESL 000FC3  
                               STR_127 FBDB                                 STR_119 FBDB  
                               STR_128 FC96                                 STR_129 FAE6  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 5590                                 ?_putch 0001  
                     __end_of___ftpack 42C6                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 57AC  
            i2_change_state_to_menu_22 577C                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1042 38D8                                 i2l1051 3980  
                               i2l1053 39A0                                 i2l1134 5BA0  
                               i2l1520 25DA                                 i2l7000 24C2  
                               i2l7010 24F4                                 i2l7100 26FC  
                               i2l7020 254C                                 i2l7012 24F8  
                               i2l7030 25A0                                 i2l7022 2552  
                               i2l7110 5724                                 i2l1967 53CA  
                               i2l7104 274A                                 i2l7024 2564  
                               i2l7008 24EA                                 i2l7112 572C  
                               i2l1977 55C8                                 i2l7050 2620  
                               i2l7018 2542                                 i2l7034 25A4  
                               i2l7106 2752                                 i2l7052 2624  
                               i2l7028 258E                                 i2l7300 41A2  
                               i2l7070 2670                                 i2l7046 2608  
                               i2l7064 2656                                 i2l7090 26D0  
                               i2l7082 26B2                                 i2l7074 2694  
                               i2l7076 269C                                 i2l7094 26E4  
                               i2l6616 5AA0                                 i2l6640 5B24  
                               i2l7088 26C8                                 i2l6650 5398  
                               i2l7098 26F6                                 i2l6652 53A0  
                               i2l7292 416E                                 i2l9220 50BE  
                               i2l6662 53C0                                 i2l6654 53A4  
                               i2l6670 559E                                 i2l9214 508C  
                               i2l9232 5B5C                                 i2l6672 55A6  
                               i2l7288 415E                                 i2l7712 3ACC  
                               i2l7704 3AB4                                 i2l7560 364C  
                               i2l6674 55AA                                 i2l7722 3AF6  
                               i2l7570 36BA                                 i2l7562 3662  
                               i2l7554 35E0                                 i2l9228 5B4C  
                               i2l7732 3B14                                 i2l7580 3728  
                               i2l7572 36D0                                 i2l7564 3678  
                               i2l6678 55BE                                 i2l7734 3B18  
                               i2l7718 3ADA                                 i2l7582 373E  
                               i2l7574 36E6                                 i2l7566 368E  
                               i2l6952 5044                                 i2l7760 3B6C  
                               i2l7752 3B48                                 i2l7728 3B00  
                               i2l7680 3A52                                 i2l7664 3A1A  
                               i2l7656 3A00                                 i2l7576 36FC  
                               i2l7568 36A4                                 i2l7746 3B3A  
                               i2l7738 3B22                                 i2l7682 3A58  
                               i2l7666 3A2A                                 i2l7674 3A38  
                               i2l7578 3712                                 i2l7586 3754  
                               i2l6948 5034                                 i2l6980 241A  
                               i2l7764 3B7E                                 i2l7756 3B5A  
                               i2l7684 3A5E                                 i2l7692 3A70  
                               i2l7668 3A2E                                 i2l7588 37AE  
                               i2l9700 31D0                                 i2l9620 30AC  
                               i2l9612 3090                                 i2l6958 505E  
                               i2l6982 2428                                 i2l7686 3A64  
                               i2l7678 3A4C                                 i2l7774 3B9A  
                               i2l9606 307C                                 i2l6992 2460  
                               i2l6976 240A                                 i2l7768 3B90  
                               i2l7688 3A6A                                 i2l9720 321E  
                               i2l9712 31FA                                 i2l9704 31DE  
                               i2l9640 30E4                                 i2l9632 30C8  
                               i2l9624 30BA                                 i2l9616 309E  
                               i2l9608 3082                                 i2l6986 242E  
                               i2l9740 326C                                 i2l9732 3250  
                               i2l9724 322C                                 i2l9716 3210  
                               i2l9708 31EC                                 i2l9660 312C  
                               i2l9652 3110                                 i2l9644 30F4  
                               i2l9636 30D6                                 i2l9744 327A  
                               i2l9736 325E                                 i2l9728 323A  
                               i2l9680 317A                                 i2l9672 315E  
                               i2l9664 313A                                 i2l9656 311E  
                               i2l9648 3102                                 i2l9754 329E  
                               i2l9748 3290                                 i2l9692 31AC  
                               i2l9684 3190                                 i2l9676 316C  
                               i2l9668 3150                                 i2l9934 3318  
                               i2l9944 3382                                 i2l9696 31BA  
                               i2l9688 319E                                 i2l9938 3328  
                               i2l9980 3510                                 i2l9956 3450  
                               i2l9982 3516                                 i2l9968 34A8  
                               i2l9976 34DC                _f_most_recent_sort_time 013D  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5A32                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5ACA  
                               ___ftge 4832                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4694  
                               ___wmul 56B2                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 56E8  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 54BA                                 _getRTC 4D0A  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5B0E                                 _initUI 574C  
                               _readIR 5422                                 _logRun 3F56  
                               getIR@i 0087                                 clear_0 53FA  
                               clear_1 5406                                 clear_2 5412  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 52CC                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1BDA  
                            ??_handler 004B                __size_of_initGlobalVars 00BE  
                         ?_retrieveLog 0007                                 _strcpy 567C  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5A5A  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5A32  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 53D4                       __end_of_printRTC 304C  
                         __mediumconst FA8A                      __end_ofi2___lwmod 55D2  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F4  
                __end_of_algorithmTest 476A                      __end_ofi2_lcdInst 5C06  
                    __end_ofi2_isdigit 5B2C                             __accesstop 0080  
              __end_of__initialization 5418                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0069                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 5B92                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5C1A                    BlockerTest@cam_flag 00B1  
                        __end_of_getIR 4FFC                            i2printRTC@i 0041  
                        _initSortTimer 4B32            __end_of_updateServoPosition 4E16  
                        __end_of_putch 5BDE                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 1BDA  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 59B4          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5988                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 012F  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 50DE  
                         _EEPROM_write 44CA                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3246 0149                      __end_of_SpeedTest 4E9A  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                                ?___ftge 0092  
                              _ID$1142 00AF                                _ID$1145 00B0  
                         ?i2_lcdNibble 0001                                UI@i_412 00C9  
                              UI@i_415 00CA                                UI@i_416 00CB  
                              UI@i_450 00D4                                UI@i_442 00D0  
                              UI@i_434 00CC                                UI@i_451 00D5  
                              UI@i_443 00D1                                UI@i_435 00CD  
                              UI@i_446 00D2                                UI@i_438 00CE  
                              UI@i_447 00D3                                UI@i_439 00CF  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2430 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10002 3BE6  
                              i2l10020 3C32                                i2l10022 3C46  
                              i2l10014 3C1C                                i2l10030 3C9A  
                              i2l10006 3BFC                                i2l10008 3C06  
                              i2l10032 3CA4                                i2l10042 3CE2  
                              i2l10036 3CBC                                i2l10028 3C50  
                              i2l10212 3904                                i2l10062 3D5E  
                              i2l10206 38F6                                i2l10048 3D08  
                              i2l10160 3866                                i2l10234 394E  
                              i2l10154 3856                                i2l10170 3890  
                              i2l10092 55DC                                i2l10260 399E  
                              i2l10228 3934                                i2l10156 385A  
                              i2l10164 386E                                i2l10094 55E2  
                              i2l10238 3954                                i2l10166 3886  
                              i2l10184 38AC                                i2l10098 55E8  
                              i2l10710 3C7E                                i2l10712 3C88  
                              i2l10730 3A88                                i2l10722 32BC  
                              i2l10714 3C92                                i2l10732 3AA4  
                              i2l10724 32DE                                i2l10716 3D76  
                              i2l10708 3C74                                i2l10726 32FA  
                              i2l10718 3D86                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E4  
                            ?_readCOND 0001                             _initEEPROM 5B7C  
                              i2_putch 5BEE                              ?_initTime 0080  
                      _f_loadingNewCan 00EE                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 514A                                _Loading 1192  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 49B8                                ___awmod 4BDC  
                           _initServos 4E9A                                ___lldiv 4A76  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4F12                                ___lwmod 51AE  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 53D4                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 48FA  
                              _lcdInst 5BDE                                _handler 0008  
                              __ptext0 476A                                __ptext1 5ACA  
                              __ptext2 1192                                __ptext3 4B32  
                              __ptext4 48FA                                __ptext5 56E8  
                              __ptext6 4F8A                                __ptext7 5422  
                              __ptext8 1784                                __ptext9 546E  
                      __size_of_printf 0438                                _readADC 59B4  
                      __size_of_strcpy 0036                                _initLCD 5506  
                              _cur_can 0133                                _loadRTC 4C7E  
                              _readMAG 54BA                                _dpowers FA9C  
                   actuatorTest@i_1750 00B3                     actuatorTest@i_1743 00AE  
                   actuatorTest@i_1752 00B4                     actuatorTest@i_1744 00AF  
                   actuatorTest@i_1736 00AD                     actuatorTest@i_1753 00B5  
                   actuatorTest@i_1762 00BA                     actuatorTest@i_1746 00B0  
                   actuatorTest@i_1763 00BB                     actuatorTest@i_1755 00B6  
                   actuatorTest@i_1747 00B1                           __size_of_arm 00FE  
                   actuatorTest@i_1772 00C0                     actuatorTest@i_1756 00B7  
                   actuatorTest@i_1773 00C1                     actuatorTest@i_1765 00BC  
                   actuatorTest@i_1749 00B2                     actuatorTest@i_1766 00BD  
                   actuatorTest@i_1758 00B8                     actuatorTest@i_1775 00C2  
                   actuatorTest@i_1759 00B9                     actuatorTest@i_1776 00C3  
                   actuatorTest@i_1768 00BE                     actuatorTest@i_1769 00BF  
                              _isdigit 59E0                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0120  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 45B2                         __pintcode_body 37EA  
                 PlatformTest@res_1788 00AF                   end_of_initialization 5418  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 37EA                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1130_47 3A20                              i2u1131_47 3482  
                            i2u1132_47 5342                              i2u1133_47 534C  
                            i2u1134_47 536E                              i2u1135_47 5378  
                            i2u1136_47 5B54              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5B64                 __end_of_initGlobalVars 49B8  
                           _sensorTest 2A84                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3BC8                           ??_BothServos 00AB  
                __end_of_machineConfig 51AE                   __end_of_PlatformTest 2A84  
                           _updateMenu 304C                      i2_I2C_Master_Read 5A80  
                            _IR_signal 00E0                      i2_I2C_Master_Wait 5BBC  
                    i2_I2C_Master_Stop 5C32                      i2___lwdiv@divisor 0008  
                      _log_count_total 0145                         _PortTestPusher 5270  
                            i2___lwdiv 5382                              i2___lwmod 5590  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 37EA  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5BFA                          Loading@i_1130 00BA  
                        Loading@i_1131 00BC                          Loading@i_1133 00BE  
                        Loading@i_1119 00B6                          Loading@i_1128 00B8  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5B0E                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 2400                    __end_of_EEPROM_read 5B7C  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 48FA                         __end_of___wmul 56E8  
                       __end_of_getMAG 571A                         __end_of_getRTC 4D90  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 577C                         __end_of_readIR 546E  
                       __end_of_logRun 409A                       i2___wmul@product 0005  
                       __end_of_printf 2012                           i2printf@flag 0026  
                       __end_of_strcpy 56B2              __end_ofi2_I2C_Master_Read 5AA6  
            __end_ofi2_I2C_Master_Wait 5BCE                           i2printf@prec 001D  
                  start_initialization 53D4              __end_ofi2_I2C_Master_Stop 5C3A  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 012D            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 52CC  
                          __end_of_arm 44CA                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1404 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 4E16  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 0149  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1141 00B3                               ID@i_1144 00B5  
                             ID@i_1147 00B7                               ID@i_1148 00B9  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0016                    _printSortTimer$2562 0043  
                 __size_of_BlockerTest 01C6                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2065 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0131                      __size_of_readCOND 004C  
                          _EEPROM_read 5B64                       _I2C_Master_Start 5C2A  
                   __end_of_PortTestDC 5328                              _f_lastCan 00EC  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5C06                      __size_of_initTime 0022  
                i2_updateServoPosition 506E                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FA8A  
                            _lcdNibble 50DE                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 5BBC  
                            __ptext101 5B48                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0141                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 4694                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0456  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5C42             __end_ofi2_I2C_Master_Write 5C1A  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 39DC                            ??i2_isdigit 0001  
                         _PlatformTest 276E                           BlockerTest@i 00AD  
                             i2u501_40 5A9E                               _PIR2bits 000FA1  
                             i2u621_40 3642                        PlatformTest@res 00AD  
                             i2u564_40 2526                               i2u564_47 251C  
                             i2u568_40 2586                               i2u568_47 257C  
                             i2u942_40 34B2                               i2u944_40 34DA  
                             i2u943_48 34B4                    __size_of_updateMenu 02C0  
                       _log_completion 00F2                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5A5A                          lcdNibble@data 0081  
                             i2_getRTC 4FFC                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 2400  
                             i2_strcpy 571A                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 53E8  
                         ??_initEEPROM 00B1                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 5BA8  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 05F2                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4BDC  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 580C  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 5644  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 560C  
              _change_state_to_menu_23 57DC                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 58FC                _change_state_to_logs_12 58CC  
              _change_state_to_logs_22 589C                _change_state_to_logs_23 595A  
              _change_state_to_logs_33 586C                _change_state_to_logs_34 583C  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 554C                               ___ftpack 41BA  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 39D4                     __end_of_initEEPROM 5B92  
                      _I2C_Master_Init 5210                       __size_of_readADC 002C  
                      _I2C_Master_Read 592C                       __size_of_initLCD 0046  
                         _f_ID_receive 0135                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5BA8  
                      _I2C_Master_Stop 5C22                       __size_of_isdigit 002A  
                             _delay_ms 5A0A                         _printSortTimer 330C  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 41BA                               __ptext10 5A0A  
                             __ptext11 4832                               __ptext20 4A76  
                             __ptext12 554C                               __ptext21 5988  
                             __ptext13 41BA                               __ptext30 4D0A  
                             __ptext22 5AEC                               __ptext14 45B2  
                             __ptext31 5C06                               __ptext23 5506  
                             __ptext15 514A                               __ptext40 42C6  
                             __ptext32 5C22                               __ptext24 5B7C  
                             __ptext16 3F56                               __ptext41 2A84  
                             __ptext33 5C2A                               __ptext25 44CA  
                             __ptext17 574C                               __ptext50 2012  
                             __ptext42 54BA                               __ptext34 592C  
                             __ptext26 5B64                               __ptext18 4C7E  
                             __ptext51 5B2C                               __ptext43 43CC  
                             __ptext35 5BA8                               __ptext27 0012  
                             __ptext19 5210                               __ptext60 51AE  
                             __ptext52 4E9A                               __ptext44 4694  
                             __ptext36 560C                               __ptext28 2D82  
                             __ptext61 4F12                               __ptext53 4D90  
                             __ptext45 08DA                               __ptext37 5644  
                             __ptext29 567C                               __ptext70 571A  
                             __ptext62 5BDE                               __ptext54 3D90  
                             __ptext46 4E16                               __ptext38 4BDC  
                             __ptext71 39DC                               __ptext63 50DE  
                             __ptext55 59B4                               __ptext47 5270  
                             __ptext39 49B8                               __ptext80 58CC  
                             __ptext72 577C                               __ptext56 1BDA  
                             __ptext48 52CC                               __ptext81 58FC  
                             __ptext73 57AC                               __ptext65 3BC8  
                             __ptext57 5BCE                               __ptext49 276E  
                             __ptext90 5A5A                               __ptext82 5AA6  
                             __ptext74 57DC                               __ptext66 506E  
                             __ptext58 59E0                               __ptext91 5590  
                             __ptext83 409A                               __ptext75 580C  
                             __ptext67 304C                               __ptext59 56B2  
                             __ptext92 5382                               __ptext84 5B92  
                             __ptext76 583C                               __ptext68 5A32  
                             __ptext93 5BFA                               __ptext85 55D2  
                             __ptext77 586C                               __ptext69 35B4  
                             __ptext94 5328                               __ptext86 330C  
                             __ptext78 595A                               __ptext95 4FFC  
                             __ptext87 2400                               __ptext79 589C  
                             __ptext96 5C10                               __ptext88 5BEE  
                             __ptext97 5C32                               __ptext89 5B0E  
                             __ptext98 5C3A                               __ptext99 5A80  
                             _dispLogs 5AA6                          ?_actuatorTest 0001  
                   PlatformTest@i_1792 00B3                               _readCOND 546E  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2065 0002                     __end_of_initServos 4F12  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5AEC                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4D90  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 2D82                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0137                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 57DC  
    __end_ofi2_change_state_to_menu_22 57AC                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 35B4  
                            putch@data 0082               __end_of_I2C_Master_Start 5C32  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5C10  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E2                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 2D82                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5B48              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 330C  
              __end_of_I2C_Master_Init 5270                __end_of_I2C_Master_Read 595A  
              __end_of_I2C_Master_Wait 5BBC                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5C2A                            lcdInst@data 0082  
                        printRTC@F3236 014D                           retrieveLog@i 000E  
                          _retrieveLog 409A                    __end_ofi2_lcdNibble 5382  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 55D2                      _f_can_distributed 013B  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 514A                        ___lwmod@counter 008B  
                    _updateServoStates 3BC8                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00EA                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
